
TACTS_testbed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015c24  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c08  08015df8  08015df8  00025df8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016a00  08016a00  0003060c  2**0
                  CONTENTS
  4 .ARM          00000008  08016a00  08016a00  00026a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016a08  08016a08  0003060c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016a08  08016a08  00026a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016a0c  08016a0c  00026a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000060c  20000000  08016a10  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000aee4  2000060c  0801701c  0003060c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000b4f0  0801701c  0003b4f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003060c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022e8d  00000000  00000000  0003063c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040df  00000000  00000000  000534c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001838  00000000  00000000  000575a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001670  00000000  00000000  00058de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a7c0  00000000  00000000  0005a450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002493b  00000000  00000000  00084c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fa1f8  00000000  00000000  000a954b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a3743  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008058  00000000  00000000  001a3794  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000060c 	.word	0x2000060c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08015ddc 	.word	0x08015ddc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000610 	.word	0x20000610
 800020c:	08015ddc 	.word	0x08015ddc

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b9aa 	b.w	8001054 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	468e      	mov	lr, r1
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d14d      	bne.n	8000e2e <__udivmoddi4+0xaa>
 8000d92:	428a      	cmp	r2, r1
 8000d94:	4694      	mov	ip, r2
 8000d96:	d969      	bls.n	8000e6c <__udivmoddi4+0xe8>
 8000d98:	fab2 f282 	clz	r2, r2
 8000d9c:	b152      	cbz	r2, 8000db4 <__udivmoddi4+0x30>
 8000d9e:	fa01 f302 	lsl.w	r3, r1, r2
 8000da2:	f1c2 0120 	rsb	r1, r2, #32
 8000da6:	fa20 f101 	lsr.w	r1, r0, r1
 8000daa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dae:	ea41 0e03 	orr.w	lr, r1, r3
 8000db2:	4094      	lsls	r4, r2
 8000db4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db8:	0c21      	lsrs	r1, r4, #16
 8000dba:	fbbe f6f8 	udiv	r6, lr, r8
 8000dbe:	fa1f f78c 	uxth.w	r7, ip
 8000dc2:	fb08 e316 	mls	r3, r8, r6, lr
 8000dc6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dca:	fb06 f107 	mul.w	r1, r6, r7
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x64>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dda:	f080 811f 	bcs.w	800101c <__udivmoddi4+0x298>
 8000dde:	4299      	cmp	r1, r3
 8000de0:	f240 811c 	bls.w	800101c <__udivmoddi4+0x298>
 8000de4:	3e02      	subs	r6, #2
 8000de6:	4463      	add	r3, ip
 8000de8:	1a5b      	subs	r3, r3, r1
 8000dea:	b2a4      	uxth	r4, r4
 8000dec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000df0:	fb08 3310 	mls	r3, r8, r0, r3
 8000df4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000df8:	fb00 f707 	mul.w	r7, r0, r7
 8000dfc:	42a7      	cmp	r7, r4
 8000dfe:	d90a      	bls.n	8000e16 <__udivmoddi4+0x92>
 8000e00:	eb1c 0404 	adds.w	r4, ip, r4
 8000e04:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e08:	f080 810a 	bcs.w	8001020 <__udivmoddi4+0x29c>
 8000e0c:	42a7      	cmp	r7, r4
 8000e0e:	f240 8107 	bls.w	8001020 <__udivmoddi4+0x29c>
 8000e12:	4464      	add	r4, ip
 8000e14:	3802      	subs	r0, #2
 8000e16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e1a:	1be4      	subs	r4, r4, r7
 8000e1c:	2600      	movs	r6, #0
 8000e1e:	b11d      	cbz	r5, 8000e28 <__udivmoddi4+0xa4>
 8000e20:	40d4      	lsrs	r4, r2
 8000e22:	2300      	movs	r3, #0
 8000e24:	e9c5 4300 	strd	r4, r3, [r5]
 8000e28:	4631      	mov	r1, r6
 8000e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d909      	bls.n	8000e46 <__udivmoddi4+0xc2>
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	f000 80ef 	beq.w	8001016 <__udivmoddi4+0x292>
 8000e38:	2600      	movs	r6, #0
 8000e3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e3e:	4630      	mov	r0, r6
 8000e40:	4631      	mov	r1, r6
 8000e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e46:	fab3 f683 	clz	r6, r3
 8000e4a:	2e00      	cmp	r6, #0
 8000e4c:	d14a      	bne.n	8000ee4 <__udivmoddi4+0x160>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d302      	bcc.n	8000e58 <__udivmoddi4+0xd4>
 8000e52:	4282      	cmp	r2, r0
 8000e54:	f200 80f9 	bhi.w	800104a <__udivmoddi4+0x2c6>
 8000e58:	1a84      	subs	r4, r0, r2
 8000e5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e5e:	2001      	movs	r0, #1
 8000e60:	469e      	mov	lr, r3
 8000e62:	2d00      	cmp	r5, #0
 8000e64:	d0e0      	beq.n	8000e28 <__udivmoddi4+0xa4>
 8000e66:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e6a:	e7dd      	b.n	8000e28 <__udivmoddi4+0xa4>
 8000e6c:	b902      	cbnz	r2, 8000e70 <__udivmoddi4+0xec>
 8000e6e:	deff      	udf	#255	; 0xff
 8000e70:	fab2 f282 	clz	r2, r2
 8000e74:	2a00      	cmp	r2, #0
 8000e76:	f040 8092 	bne.w	8000f9e <__udivmoddi4+0x21a>
 8000e7a:	eba1 010c 	sub.w	r1, r1, ip
 8000e7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e82:	fa1f fe8c 	uxth.w	lr, ip
 8000e86:	2601      	movs	r6, #1
 8000e88:	0c20      	lsrs	r0, r4, #16
 8000e8a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e8e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e92:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e96:	fb0e f003 	mul.w	r0, lr, r3
 8000e9a:	4288      	cmp	r0, r1
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0x12c>
 8000e9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ea6:	d202      	bcs.n	8000eae <__udivmoddi4+0x12a>
 8000ea8:	4288      	cmp	r0, r1
 8000eaa:	f200 80cb 	bhi.w	8001044 <__udivmoddi4+0x2c0>
 8000eae:	4643      	mov	r3, r8
 8000eb0:	1a09      	subs	r1, r1, r0
 8000eb2:	b2a4      	uxth	r4, r4
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1110 	mls	r1, r7, r0, r1
 8000ebc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ec0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ec4:	45a6      	cmp	lr, r4
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x156>
 8000ec8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ecc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ed0:	d202      	bcs.n	8000ed8 <__udivmoddi4+0x154>
 8000ed2:	45a6      	cmp	lr, r4
 8000ed4:	f200 80bb 	bhi.w	800104e <__udivmoddi4+0x2ca>
 8000ed8:	4608      	mov	r0, r1
 8000eda:	eba4 040e 	sub.w	r4, r4, lr
 8000ede:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ee2:	e79c      	b.n	8000e1e <__udivmoddi4+0x9a>
 8000ee4:	f1c6 0720 	rsb	r7, r6, #32
 8000ee8:	40b3      	lsls	r3, r6
 8000eea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ef2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ef6:	fa01 f306 	lsl.w	r3, r1, r6
 8000efa:	431c      	orrs	r4, r3
 8000efc:	40f9      	lsrs	r1, r7
 8000efe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f02:	fa00 f306 	lsl.w	r3, r0, r6
 8000f06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f0a:	0c20      	lsrs	r0, r4, #16
 8000f0c:	fa1f fe8c 	uxth.w	lr, ip
 8000f10:	fb09 1118 	mls	r1, r9, r8, r1
 8000f14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f18:	fb08 f00e 	mul.w	r0, r8, lr
 8000f1c:	4288      	cmp	r0, r1
 8000f1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f22:	d90b      	bls.n	8000f3c <__udivmoddi4+0x1b8>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f2c:	f080 8088 	bcs.w	8001040 <__udivmoddi4+0x2bc>
 8000f30:	4288      	cmp	r0, r1
 8000f32:	f240 8085 	bls.w	8001040 <__udivmoddi4+0x2bc>
 8000f36:	f1a8 0802 	sub.w	r8, r8, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	1a09      	subs	r1, r1, r0
 8000f3e:	b2a4      	uxth	r4, r4
 8000f40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f44:	fb09 1110 	mls	r1, r9, r0, r1
 8000f48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f50:	458e      	cmp	lr, r1
 8000f52:	d908      	bls.n	8000f66 <__udivmoddi4+0x1e2>
 8000f54:	eb1c 0101 	adds.w	r1, ip, r1
 8000f58:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f5c:	d26c      	bcs.n	8001038 <__udivmoddi4+0x2b4>
 8000f5e:	458e      	cmp	lr, r1
 8000f60:	d96a      	bls.n	8001038 <__udivmoddi4+0x2b4>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4461      	add	r1, ip
 8000f66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f6e:	eba1 010e 	sub.w	r1, r1, lr
 8000f72:	42a1      	cmp	r1, r4
 8000f74:	46c8      	mov	r8, r9
 8000f76:	46a6      	mov	lr, r4
 8000f78:	d356      	bcc.n	8001028 <__udivmoddi4+0x2a4>
 8000f7a:	d053      	beq.n	8001024 <__udivmoddi4+0x2a0>
 8000f7c:	b15d      	cbz	r5, 8000f96 <__udivmoddi4+0x212>
 8000f7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f82:	eb61 010e 	sbc.w	r1, r1, lr
 8000f86:	fa01 f707 	lsl.w	r7, r1, r7
 8000f8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f8e:	40f1      	lsrs	r1, r6
 8000f90:	431f      	orrs	r7, r3
 8000f92:	e9c5 7100 	strd	r7, r1, [r5]
 8000f96:	2600      	movs	r6, #0
 8000f98:	4631      	mov	r1, r6
 8000f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f9e:	f1c2 0320 	rsb	r3, r2, #32
 8000fa2:	40d8      	lsrs	r0, r3
 8000fa4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fa8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fac:	4091      	lsls	r1, r2
 8000fae:	4301      	orrs	r1, r0
 8000fb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fb4:	fa1f fe8c 	uxth.w	lr, ip
 8000fb8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fbc:	fb07 3610 	mls	r6, r7, r0, r3
 8000fc0:	0c0b      	lsrs	r3, r1, #16
 8000fc2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fc6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fca:	429e      	cmp	r6, r3
 8000fcc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fd0:	d908      	bls.n	8000fe4 <__udivmoddi4+0x260>
 8000fd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fda:	d22f      	bcs.n	800103c <__udivmoddi4+0x2b8>
 8000fdc:	429e      	cmp	r6, r3
 8000fde:	d92d      	bls.n	800103c <__udivmoddi4+0x2b8>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	4463      	add	r3, ip
 8000fe4:	1b9b      	subs	r3, r3, r6
 8000fe6:	b289      	uxth	r1, r1
 8000fe8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fec:	fb07 3316 	mls	r3, r7, r6, r3
 8000ff0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ff4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ff8:	428b      	cmp	r3, r1
 8000ffa:	d908      	bls.n	800100e <__udivmoddi4+0x28a>
 8000ffc:	eb1c 0101 	adds.w	r1, ip, r1
 8001000:	f106 38ff 	add.w	r8, r6, #4294967295
 8001004:	d216      	bcs.n	8001034 <__udivmoddi4+0x2b0>
 8001006:	428b      	cmp	r3, r1
 8001008:	d914      	bls.n	8001034 <__udivmoddi4+0x2b0>
 800100a:	3e02      	subs	r6, #2
 800100c:	4461      	add	r1, ip
 800100e:	1ac9      	subs	r1, r1, r3
 8001010:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001014:	e738      	b.n	8000e88 <__udivmoddi4+0x104>
 8001016:	462e      	mov	r6, r5
 8001018:	4628      	mov	r0, r5
 800101a:	e705      	b.n	8000e28 <__udivmoddi4+0xa4>
 800101c:	4606      	mov	r6, r0
 800101e:	e6e3      	b.n	8000de8 <__udivmoddi4+0x64>
 8001020:	4618      	mov	r0, r3
 8001022:	e6f8      	b.n	8000e16 <__udivmoddi4+0x92>
 8001024:	454b      	cmp	r3, r9
 8001026:	d2a9      	bcs.n	8000f7c <__udivmoddi4+0x1f8>
 8001028:	ebb9 0802 	subs.w	r8, r9, r2
 800102c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001030:	3801      	subs	r0, #1
 8001032:	e7a3      	b.n	8000f7c <__udivmoddi4+0x1f8>
 8001034:	4646      	mov	r6, r8
 8001036:	e7ea      	b.n	800100e <__udivmoddi4+0x28a>
 8001038:	4620      	mov	r0, r4
 800103a:	e794      	b.n	8000f66 <__udivmoddi4+0x1e2>
 800103c:	4640      	mov	r0, r8
 800103e:	e7d1      	b.n	8000fe4 <__udivmoddi4+0x260>
 8001040:	46d0      	mov	r8, sl
 8001042:	e77b      	b.n	8000f3c <__udivmoddi4+0x1b8>
 8001044:	3b02      	subs	r3, #2
 8001046:	4461      	add	r1, ip
 8001048:	e732      	b.n	8000eb0 <__udivmoddi4+0x12c>
 800104a:	4630      	mov	r0, r6
 800104c:	e709      	b.n	8000e62 <__udivmoddi4+0xde>
 800104e:	4464      	add	r4, ip
 8001050:	3802      	subs	r0, #2
 8001052:	e742      	b.n	8000eda <__udivmoddi4+0x156>

08001054 <__aeabi_idiv0>:
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop

08001058 <CalculateStats>:
float sensorStdDevs[NUM_SENSOR] = {0};
int readingCount[NUM_SENSOR] = {0};

#define throwSomenumber 20

void CalculateStats(int sensorIndex) {
 8001058:	b5b0      	push	{r4, r5, r7, lr}
 800105a:	b088      	sub	sp, #32
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
    float sum = 0;
 8001060:	f04f 0300 	mov.w	r3, #0
 8001064:	61fb      	str	r3, [r7, #28]
    float mean = 0;
 8001066:	f04f 0300 	mov.w	r3, #0
 800106a:	60fb      	str	r3, [r7, #12]
    float stdDevSum = 0;
 800106c:	f04f 0300 	mov.w	r3, #0
 8001070:	61bb      	str	r3, [r7, #24]
    int count = readingCount[sensorIndex];
 8001072:	4a49      	ldr	r2, [pc, #292]	; (8001198 <CalculateStats+0x140>)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800107a:	60bb      	str	r3, [r7, #8]

    // 평균 계산
    for (int i = throwSomenumber; i < count; i++) { sum += sensorValues[sensorIndex][i];}
 800107c:	2314      	movs	r3, #20
 800107e:	617b      	str	r3, [r7, #20]
 8001080:	e014      	b.n	80010ac <CalculateStats+0x54>
 8001082:	4946      	ldr	r1, [pc, #280]	; (800119c <CalculateStats+0x144>)
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	4613      	mov	r3, r2
 8001088:	011b      	lsls	r3, r3, #4
 800108a:	1a9b      	subs	r3, r3, r2
 800108c:	00db      	lsls	r3, r3, #3
 800108e:	697a      	ldr	r2, [r7, #20]
 8001090:	4413      	add	r3, r2
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	440b      	add	r3, r1
 8001096:	edd3 7a00 	vldr	s15, [r3]
 800109a:	ed97 7a07 	vldr	s14, [r7, #28]
 800109e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010a2:	edc7 7a07 	vstr	s15, [r7, #28]
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	3301      	adds	r3, #1
 80010aa:	617b      	str	r3, [r7, #20]
 80010ac:	697a      	ldr	r2, [r7, #20]
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	dbe6      	blt.n	8001082 <CalculateStats+0x2a>
    mean = sum / count;
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	ee07 3a90 	vmov	s15, r3
 80010ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010be:	edd7 6a07 	vldr	s13, [r7, #28]
 80010c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010c6:	edc7 7a03 	vstr	s15, [r7, #12]
    sensorAverages[sensorIndex] = mean;
 80010ca:	4a35      	ldr	r2, [pc, #212]	; (80011a0 <CalculateStats+0x148>)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	4413      	add	r3, r2
 80010d2:	68fa      	ldr	r2, [r7, #12]
 80010d4:	601a      	str	r2, [r3, #0]
    // 표준편차 계산
    for (int i = throwSomenumber; i < count; i++) { stdDevSum += pow(sensorValues[sensorIndex][i] - mean, 2);}
 80010d6:	2314      	movs	r3, #20
 80010d8:	613b      	str	r3, [r7, #16]
 80010da:	e031      	b.n	8001140 <CalculateStats+0xe8>
 80010dc:	492f      	ldr	r1, [pc, #188]	; (800119c <CalculateStats+0x144>)
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	4613      	mov	r3, r2
 80010e2:	011b      	lsls	r3, r3, #4
 80010e4:	1a9b      	subs	r3, r3, r2
 80010e6:	00db      	lsls	r3, r3, #3
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	4413      	add	r3, r2
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	440b      	add	r3, r1
 80010f0:	ed93 7a00 	vldr	s14, [r3]
 80010f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80010f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010fc:	ee17 0a90 	vmov	r0, s15
 8001100:	f7ff fa52 	bl	80005a8 <__aeabi_f2d>
 8001104:	4602      	mov	r2, r0
 8001106:	460b      	mov	r3, r1
 8001108:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8001190 <CalculateStats+0x138>
 800110c:	ec43 2b10 	vmov	d0, r2, r3
 8001110:	f013 ff1e 	bl	8014f50 <pow>
 8001114:	ec55 4b10 	vmov	r4, r5, d0
 8001118:	69b8      	ldr	r0, [r7, #24]
 800111a:	f7ff fa45 	bl	80005a8 <__aeabi_f2d>
 800111e:	4602      	mov	r2, r0
 8001120:	460b      	mov	r3, r1
 8001122:	4620      	mov	r0, r4
 8001124:	4629      	mov	r1, r5
 8001126:	f7ff f8e1 	bl	80002ec <__adddf3>
 800112a:	4602      	mov	r2, r0
 800112c:	460b      	mov	r3, r1
 800112e:	4610      	mov	r0, r2
 8001130:	4619      	mov	r1, r3
 8001132:	f7ff fd89 	bl	8000c48 <__aeabi_d2f>
 8001136:	4603      	mov	r3, r0
 8001138:	61bb      	str	r3, [r7, #24]
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	3301      	adds	r3, #1
 800113e:	613b      	str	r3, [r7, #16]
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	429a      	cmp	r2, r3
 8001146:	dbc9      	blt.n	80010dc <CalculateStats+0x84>
    sensorStdDevs[sensorIndex] = sqrt(stdDevSum / count);
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	ee07 3a90 	vmov	s15, r3
 800114e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001152:	ed97 7a06 	vldr	s14, [r7, #24]
 8001156:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800115a:	ee16 0a90 	vmov	r0, s13
 800115e:	f7ff fa23 	bl	80005a8 <__aeabi_f2d>
 8001162:	4602      	mov	r2, r0
 8001164:	460b      	mov	r3, r1
 8001166:	ec43 2b10 	vmov	d0, r2, r3
 800116a:	f013 ff61 	bl	8015030 <sqrt>
 800116e:	ec53 2b10 	vmov	r2, r3, d0
 8001172:	4610      	mov	r0, r2
 8001174:	4619      	mov	r1, r3
 8001176:	f7ff fd67 	bl	8000c48 <__aeabi_d2f>
 800117a:	4602      	mov	r2, r0
 800117c:	4909      	ldr	r1, [pc, #36]	; (80011a4 <CalculateStats+0x14c>)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	440b      	add	r3, r1
 8001184:	601a      	str	r2, [r3, #0]
}
 8001186:	bf00      	nop
 8001188:	3720      	adds	r7, #32
 800118a:	46bd      	mov	sp, r7
 800118c:	bdb0      	pop	{r4, r5, r7, pc}
 800118e:	bf00      	nop
 8001190:	00000000 	.word	0x00000000
 8001194:	40000000 	.word	0x40000000
 8001198:	200061a8 	.word	0x200061a8
 800119c:	20000628 	.word	0x20000628
 80011a0:	20006028 	.word	0x20006028
 80011a4:	200060e8 	.word	0x200060e8

080011a8 <TransmitStats>:

// 평균과 표준편차를 UART로 전송하는 함수
void TransmitStats() {
 80011a8:	b5b0      	push	{r4, r5, r7, lr}
 80011aa:	b0a6      	sub	sp, #152	; 0x98
 80011ac:	af04      	add	r7, sp, #16
    char msg[128];
    for (int i = 0; i < NUM_SENSOR; i++) {
 80011ae:	2300      	movs	r3, #0
 80011b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80011b4:	e033      	b.n	800121e <TransmitStats+0x76>
        CalculateStats(i); // 통계 계산
 80011b6:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80011ba:	f7ff ff4d 	bl	8001058 <CalculateStats>
        sprintf(msg, "Sensor %d - Avg: %.2f, StdDev: %.2f\r\n", i, sensorAverages[i], sensorStdDevs[i]);
 80011be:	4a1c      	ldr	r2, [pc, #112]	; (8001230 <TransmitStats+0x88>)
 80011c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	4413      	add	r3, r2
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff f9ec 	bl	80005a8 <__aeabi_f2d>
 80011d0:	4604      	mov	r4, r0
 80011d2:	460d      	mov	r5, r1
 80011d4:	4a17      	ldr	r2, [pc, #92]	; (8001234 <TransmitStats+0x8c>)
 80011d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	4413      	add	r3, r2
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff f9e1 	bl	80005a8 <__aeabi_f2d>
 80011e6:	4602      	mov	r2, r0
 80011e8:	460b      	mov	r3, r1
 80011ea:	1d38      	adds	r0, r7, #4
 80011ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80011f0:	e9cd 4500 	strd	r4, r5, [sp]
 80011f4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80011f8:	490f      	ldr	r1, [pc, #60]	; (8001238 <TransmitStats+0x90>)
 80011fa:	f00f fc29 	bl	8010a50 <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 100);
 80011fe:	1d3b      	adds	r3, r7, #4
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff f80f 	bl	8000224 <strlen>
 8001206:	4603      	mov	r3, r0
 8001208:	b29a      	uxth	r2, r3
 800120a:	1d39      	adds	r1, r7, #4
 800120c:	2364      	movs	r3, #100	; 0x64
 800120e:	480b      	ldr	r0, [pc, #44]	; (800123c <TransmitStats+0x94>)
 8001210:	f008 fab4 	bl	800977c <HAL_UART_Transmit>
    for (int i = 0; i < NUM_SENSOR; i++) {
 8001214:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001218:	3301      	adds	r3, #1
 800121a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800121e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001222:	2b2f      	cmp	r3, #47	; 0x2f
 8001224:	ddc7      	ble.n	80011b6 <TransmitStats+0xe>
    }
}
 8001226:	bf00      	nop
 8001228:	bf00      	nop
 800122a:	3788      	adds	r7, #136	; 0x88
 800122c:	46bd      	mov	sp, r7
 800122e:	bdb0      	pop	{r4, r5, r7, pc}
 8001230:	20006028 	.word	0x20006028
 8001234:	200060e8 	.word	0x200060e8
 8001238:	08015df8 	.word	0x08015df8
 800123c:	200067a0 	.word	0x200067a0

08001240 <ResetSensorData>:

void ResetSensorData() {
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
    // 모든 센서 값과 읽기 횟수를 0으로 설정
    for (int i = 0; i < NUM_SENSOR; i++) {
 8001246:	2300      	movs	r3, #0
 8001248:	607b      	str	r3, [r7, #4]
 800124a:	e014      	b.n	8001276 <ResetSensorData+0x36>
        memset(sensorValues[i], 0, sizeof(sensorValues[i]));
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	4613      	mov	r3, r2
 8001250:	011b      	lsls	r3, r3, #4
 8001252:	1a9b      	subs	r3, r3, r2
 8001254:	015b      	lsls	r3, r3, #5
 8001256:	4a0c      	ldr	r2, [pc, #48]	; (8001288 <ResetSensorData+0x48>)
 8001258:	4413      	add	r3, r2
 800125a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800125e:	2100      	movs	r1, #0
 8001260:	4618      	mov	r0, r3
 8001262:	f00e fd6d 	bl	800fd40 <memset>
        readingCount[i] = 0;
 8001266:	4a09      	ldr	r2, [pc, #36]	; (800128c <ResetSensorData+0x4c>)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2100      	movs	r1, #0
 800126c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < NUM_SENSOR; i++) {
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	3301      	adds	r3, #1
 8001274:	607b      	str	r3, [r7, #4]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2b2f      	cmp	r3, #47	; 0x2f
 800127a:	dde7      	ble.n	800124c <ResetSensorData+0xc>
    }
}
 800127c:	bf00      	nop
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000628 	.word	0x20000628
 800128c:	200061a8 	.word	0x200061a8

08001290 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08a      	sub	sp, #40	; 0x28
 8001294:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001296:	f107 0314 	add.w	r3, r7, #20
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	609a      	str	r2, [r3, #8]
 80012a2:	60da      	str	r2, [r3, #12]
 80012a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a6:	4b51      	ldr	r3, [pc, #324]	; (80013ec <MX_GPIO_Init+0x15c>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	4a50      	ldr	r2, [pc, #320]	; (80013ec <MX_GPIO_Init+0x15c>)
 80012ac:	f043 0302 	orr.w	r3, r3, #2
 80012b0:	6313      	str	r3, [r2, #48]	; 0x30
 80012b2:	4b4e      	ldr	r3, [pc, #312]	; (80013ec <MX_GPIO_Init+0x15c>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	613b      	str	r3, [r7, #16]
 80012bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012be:	4b4b      	ldr	r3, [pc, #300]	; (80013ec <MX_GPIO_Init+0x15c>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	4a4a      	ldr	r2, [pc, #296]	; (80013ec <MX_GPIO_Init+0x15c>)
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ca:	4b48      	ldr	r3, [pc, #288]	; (80013ec <MX_GPIO_Init+0x15c>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80012d6:	4b45      	ldr	r3, [pc, #276]	; (80013ec <MX_GPIO_Init+0x15c>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	4a44      	ldr	r2, [pc, #272]	; (80013ec <MX_GPIO_Init+0x15c>)
 80012dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012e0:	6313      	str	r3, [r2, #48]	; 0x30
 80012e2:	4b42      	ldr	r3, [pc, #264]	; (80013ec <MX_GPIO_Init+0x15c>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ea:	60bb      	str	r3, [r7, #8]
 80012ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012ee:	4b3f      	ldr	r3, [pc, #252]	; (80013ec <MX_GPIO_Init+0x15c>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	4a3e      	ldr	r2, [pc, #248]	; (80013ec <MX_GPIO_Init+0x15c>)
 80012f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012f8:	6313      	str	r3, [r2, #48]	; 0x30
 80012fa:	4b3c      	ldr	r3, [pc, #240]	; (80013ec <MX_GPIO_Init+0x15c>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001306:	4b39      	ldr	r3, [pc, #228]	; (80013ec <MX_GPIO_Init+0x15c>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	4a38      	ldr	r2, [pc, #224]	; (80013ec <MX_GPIO_Init+0x15c>)
 800130c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001310:	6313      	str	r3, [r2, #48]	; 0x30
 8001312:	4b36      	ldr	r3, [pc, #216]	; (80013ec <MX_GPIO_Init+0x15c>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800131a:	603b      	str	r3, [r7, #0]
 800131c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800131e:	2200      	movs	r2, #0
 8001320:	2110      	movs	r1, #16
 8001322:	4833      	ldr	r0, [pc, #204]	; (80013f0 <MX_GPIO_Init+0x160>)
 8001324:	f002 fd88 	bl	8003e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0, GPIO_PIN_RESET);
 8001328:	2200      	movs	r2, #0
 800132a:	210f      	movs	r1, #15
 800132c:	4831      	ldr	r0, [pc, #196]	; (80013f4 <MX_GPIO_Init+0x164>)
 800132e:	f002 fd83 	bl	8003e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7|GPIO_PIN_6, GPIO_PIN_RESET);
 8001332:	2200      	movs	r2, #0
 8001334:	21c0      	movs	r1, #192	; 0xc0
 8001336:	4830      	ldr	r0, [pc, #192]	; (80013f8 <MX_GPIO_Init+0x168>)
 8001338:	f002 fd7e 	bl	8003e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800133c:	2310      	movs	r3, #16
 800133e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001340:	2301      	movs	r3, #1
 8001342:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001348:	2300      	movs	r3, #0
 800134a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134c:	f107 0314 	add.w	r3, r7, #20
 8001350:	4619      	mov	r1, r3
 8001352:	4827      	ldr	r0, [pc, #156]	; (80013f0 <MX_GPIO_Init+0x160>)
 8001354:	f002 f9e0 	bl	8003718 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI3 PI2 PI1 PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0;
 8001358:	230f      	movs	r3, #15
 800135a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135c:	2301      	movs	r3, #1
 800135e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001364:	2300      	movs	r3, #0
 8001366:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001368:	f107 0314 	add.w	r3, r7, #20
 800136c:	4619      	mov	r1, r3
 800136e:	4821      	ldr	r0, [pc, #132]	; (80013f4 <MX_GPIO_Init+0x164>)
 8001370:	f002 f9d2 	bl	8003718 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001374:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001378:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800137a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800137e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001380:	2301      	movs	r3, #1
 8001382:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	4619      	mov	r1, r3
 800138a:	481c      	ldr	r0, [pc, #112]	; (80013fc <MX_GPIO_Init+0x16c>)
 800138c:	f002 f9c4 	bl	8003718 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001390:	23c0      	movs	r3, #192	; 0xc0
 8001392:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001394:	2301      	movs	r3, #1
 8001396:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139c:	2300      	movs	r3, #0
 800139e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013a0:	f107 0314 	add.w	r3, r7, #20
 80013a4:	4619      	mov	r1, r3
 80013a6:	4814      	ldr	r0, [pc, #80]	; (80013f8 <MX_GPIO_Init+0x168>)
 80013a8:	f002 f9b6 	bl	8003718 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80013ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ba:	f107 0314 	add.w	r3, r7, #20
 80013be:	4619      	mov	r1, r3
 80013c0:	480b      	ldr	r0, [pc, #44]	; (80013f0 <MX_GPIO_Init+0x160>)
 80013c2:	f002 f9a9 	bl	8003718 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80013c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013cc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013d2:	2301      	movs	r3, #1
 80013d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d6:	f107 0314 	add.w	r3, r7, #20
 80013da:	4619      	mov	r1, r3
 80013dc:	4804      	ldr	r0, [pc, #16]	; (80013f0 <MX_GPIO_Init+0x160>)
 80013de:	f002 f99b 	bl	8003718 <HAL_GPIO_Init>

}
 80013e2:	bf00      	nop
 80013e4:	3728      	adds	r7, #40	; 0x28
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40020400 	.word	0x40020400
 80013f4:	40022000 	.word	0x40022000
 80013f8:	40021800 	.word	0x40021800
 80013fc:	40020000 	.word	0x40020000

08001400 <HX711_Init>:
float loadcell_bias = 10002;
float Hx711Data = 0;


void HX711_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  // Set the SCK pin to low
  HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_RESET);
 8001404:	2200      	movs	r2, #0
 8001406:	2102      	movs	r1, #2
 8001408:	4802      	ldr	r0, [pc, #8]	; (8001414 <HX711_Init+0x14>)
 800140a:	f002 fd15 	bl	8003e38 <HAL_GPIO_WritePin>
}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40022000 	.word	0x40022000

08001418 <Read_HX711>:

int32_t Read_HX711(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
  int32_t data = 0;
 800141e:	2300      	movs	r3, #0
 8001420:	607b      	str	r3, [r7, #4]

  // Wait until the DT pin goes low
  while (HAL_GPIO_ReadPin(HX711_DT_GPIO_Port, HX711_DT_Pin) == GPIO_PIN_SET);
 8001422:	bf00      	nop
 8001424:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001428:	4820      	ldr	r0, [pc, #128]	; (80014ac <Read_HX711+0x94>)
 800142a:	f002 fce5 	bl	8003df8 <HAL_GPIO_ReadPin>
 800142e:	4603      	mov	r3, r0
 8001430:	2b01      	cmp	r3, #1
 8001432:	d0f7      	beq.n	8001424 <Read_HX711+0xc>

  // Read the 24-bit data
  for (int i = 0; i < 24; i++)
 8001434:	2300      	movs	r3, #0
 8001436:	603b      	str	r3, [r7, #0]
 8001438:	e020      	b.n	800147c <Read_HX711+0x64>
  {
    // Generate a clock pulse on SCK pin
    HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_SET);
 800143a:	2201      	movs	r2, #1
 800143c:	2102      	movs	r1, #2
 800143e:	481c      	ldr	r0, [pc, #112]	; (80014b0 <Read_HX711+0x98>)
 8001440:	f002 fcfa 	bl	8003e38 <HAL_GPIO_WritePin>
    DelayMicroseconds(1);
 8001444:	2001      	movs	r0, #1
 8001446:	f000 f867 	bl	8001518 <DelayMicroseconds>
    data = (data << 1);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	607b      	str	r3, [r7, #4]
    if (HAL_GPIO_ReadPin(HX711_DT_GPIO_Port, HX711_DT_Pin) == GPIO_PIN_SET)
 8001450:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001454:	4815      	ldr	r0, [pc, #84]	; (80014ac <Read_HX711+0x94>)
 8001456:	f002 fccf 	bl	8003df8 <HAL_GPIO_ReadPin>
 800145a:	4603      	mov	r3, r0
 800145c:	2b01      	cmp	r3, #1
 800145e:	d102      	bne.n	8001466 <Read_HX711+0x4e>
    {
      data++;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3301      	adds	r3, #1
 8001464:	607b      	str	r3, [r7, #4]
    }
    HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_RESET);
 8001466:	2200      	movs	r2, #0
 8001468:	2102      	movs	r1, #2
 800146a:	4811      	ldr	r0, [pc, #68]	; (80014b0 <Read_HX711+0x98>)
 800146c:	f002 fce4 	bl	8003e38 <HAL_GPIO_WritePin>
    DelayMicroseconds(1);
 8001470:	2001      	movs	r0, #1
 8001472:	f000 f851 	bl	8001518 <DelayMicroseconds>
  for (int i = 0; i < 24; i++)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	3301      	adds	r3, #1
 800147a:	603b      	str	r3, [r7, #0]
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	2b17      	cmp	r3, #23
 8001480:	dddb      	ble.n	800143a <Read_HX711+0x22>
  }

  // Generate an additional 25th pulse to set the HX711 back to idle mode
  HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_SET);
 8001482:	2201      	movs	r2, #1
 8001484:	2102      	movs	r1, #2
 8001486:	480a      	ldr	r0, [pc, #40]	; (80014b0 <Read_HX711+0x98>)
 8001488:	f002 fcd6 	bl	8003e38 <HAL_GPIO_WritePin>
  DelayMicroseconds(1);
 800148c:	2001      	movs	r0, #1
 800148e:	f000 f843 	bl	8001518 <DelayMicroseconds>
  HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_RESET);
 8001492:	2200      	movs	r2, #0
 8001494:	2102      	movs	r1, #2
 8001496:	4806      	ldr	r0, [pc, #24]	; (80014b0 <Read_HX711+0x98>)
 8001498:	f002 fcce 	bl	8003e38 <HAL_GPIO_WritePin>
  DelayMicroseconds(1);
 800149c:	2001      	movs	r0, #1
 800149e:	f000 f83b 	bl	8001518 <DelayMicroseconds>


  // Return the 24-bit data
  return data;
 80014a2:	687b      	ldr	r3, [r7, #4]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40020400 	.word	0x40020400
 80014b0:	40022000 	.word	0x40022000

080014b4 <UART_SendWeight_g>:

void UART_SendWeight_g(float rawData,float loadcell_slope,float loadcell_bias)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08e      	sub	sp, #56	; 0x38
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	ed87 0a03 	vstr	s0, [r7, #12]
 80014be:	edc7 0a02 	vstr	s1, [r7, #8]
 80014c2:	ed87 1a01 	vstr	s2, [r7, #4]
  float weight = loadcell_slope * rawData  + loadcell_bias;
 80014c6:	ed97 7a02 	vldr	s14, [r7, #8]
 80014ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80014ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014d2:	ed97 7a01 	vldr	s14, [r7, #4]
 80014d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014da:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
  char buffer[32];
  int data = sprintf(buffer, "%.2f", weight);
 80014de:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80014e0:	f7ff f862 	bl	80005a8 <__aeabi_f2d>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	f107 0010 	add.w	r0, r7, #16
 80014ec:	4908      	ldr	r1, [pc, #32]	; (8001510 <UART_SendWeight_g+0x5c>)
 80014ee:	f00f faaf 	bl	8010a50 <siprintf>
 80014f2:	6338      	str	r0, [r7, #48]	; 0x30
  // Send the buffer content via UART
#if 0
  int len = sprintf(buffer, "Weight(g):");
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, len, 1000);
#endif
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, data, 1000);
 80014f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014f6:	b29a      	uxth	r2, r3
 80014f8:	f107 0110 	add.w	r1, r7, #16
 80014fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001500:	4804      	ldr	r0, [pc, #16]	; (8001514 <UART_SendWeight_g+0x60>)
 8001502:	f008 f93b 	bl	800977c <HAL_UART_Transmit>
}
 8001506:	bf00      	nop
 8001508:	3738      	adds	r7, #56	; 0x38
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	08015e20 	.word	0x08015e20
 8001514:	200067a0 	.word	0x200067a0

08001518 <DelayMicroseconds>:

  // Send the buffer content via UART
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, len, 1000);
}
void DelayMicroseconds(uint32_t microseconds)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  uint32_t ticks = microseconds;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	60fb      	str	r3, [r7, #12]
  while (ticks--)
 8001524:	e000      	b.n	8001528 <DelayMicroseconds+0x10>
  {
    __NOP();
 8001526:	bf00      	nop
  while (ticks--)
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	1e5a      	subs	r2, r3, #1
 800152c:	60fa      	str	r2, [r7, #12]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d1f9      	bne.n	8001526 <DelayMicroseconds+0xe>
  }
}
 8001532:	bf00      	nop
 8001534:	bf00      	nop
 8001536:	3714      	adds	r7, #20
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001544:	4b1b      	ldr	r3, [pc, #108]	; (80015b4 <MX_I2C1_Init+0x74>)
 8001546:	4a1c      	ldr	r2, [pc, #112]	; (80015b8 <MX_I2C1_Init+0x78>)
 8001548:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 800154a:	4b1a      	ldr	r3, [pc, #104]	; (80015b4 <MX_I2C1_Init+0x74>)
 800154c:	4a1b      	ldr	r2, [pc, #108]	; (80015bc <MX_I2C1_Init+0x7c>)
 800154e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001550:	4b18      	ldr	r3, [pc, #96]	; (80015b4 <MX_I2C1_Init+0x74>)
 8001552:	2200      	movs	r2, #0
 8001554:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001556:	4b17      	ldr	r3, [pc, #92]	; (80015b4 <MX_I2C1_Init+0x74>)
 8001558:	2201      	movs	r2, #1
 800155a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800155c:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <MX_I2C1_Init+0x74>)
 800155e:	2200      	movs	r2, #0
 8001560:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001562:	4b14      	ldr	r3, [pc, #80]	; (80015b4 <MX_I2C1_Init+0x74>)
 8001564:	2200      	movs	r2, #0
 8001566:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001568:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <MX_I2C1_Init+0x74>)
 800156a:	2200      	movs	r2, #0
 800156c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800156e:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <MX_I2C1_Init+0x74>)
 8001570:	2200      	movs	r2, #0
 8001572:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001574:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <MX_I2C1_Init+0x74>)
 8001576:	2200      	movs	r2, #0
 8001578:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800157a:	480e      	ldr	r0, [pc, #56]	; (80015b4 <MX_I2C1_Init+0x74>)
 800157c:	f002 fcac 	bl	8003ed8 <HAL_I2C_Init>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001586:	f001 f87f 	bl	8002688 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800158a:	2100      	movs	r1, #0
 800158c:	4809      	ldr	r0, [pc, #36]	; (80015b4 <MX_I2C1_Init+0x74>)
 800158e:	f003 ffd9 	bl	8005544 <HAL_I2CEx_ConfigAnalogFilter>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001598:	f001 f876 	bl	8002688 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800159c:	2100      	movs	r1, #0
 800159e:	4805      	ldr	r0, [pc, #20]	; (80015b4 <MX_I2C1_Init+0x74>)
 80015a0:	f004 f846 	bl	8005630 <HAL_I2CEx_ConfigDigitalFilter>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80015aa:	f001 f86d 	bl	8002688 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	2000626c 	.word	0x2000626c
 80015b8:	40005400 	.word	0x40005400
 80015bc:	6000030d 	.word	0x6000030d

080015c0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b0aa      	sub	sp, #168	; 0xa8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]
 80015d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015d8:	f107 0310 	add.w	r3, r7, #16
 80015dc:	2284      	movs	r2, #132	; 0x84
 80015de:	2100      	movs	r1, #0
 80015e0:	4618      	mov	r0, r3
 80015e2:	f00e fbad 	bl	800fd40 <memset>
  if(i2cHandle->Instance==I2C1)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a22      	ldr	r2, [pc, #136]	; (8001674 <HAL_I2C_MspInit+0xb4>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d13c      	bne.n	800166a <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80015f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015f4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80015f6:	2300      	movs	r3, #0
 80015f8:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015fa:	f107 0310 	add.w	r3, r7, #16
 80015fe:	4618      	mov	r0, r3
 8001600:	f004 fed6 	bl	80063b0 <HAL_RCCEx_PeriphCLKConfig>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800160a:	f001 f83d 	bl	8002688 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800160e:	4b1a      	ldr	r3, [pc, #104]	; (8001678 <HAL_I2C_MspInit+0xb8>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	4a19      	ldr	r2, [pc, #100]	; (8001678 <HAL_I2C_MspInit+0xb8>)
 8001614:	f043 0302 	orr.w	r3, r3, #2
 8001618:	6313      	str	r3, [r2, #48]	; 0x30
 800161a:	4b17      	ldr	r3, [pc, #92]	; (8001678 <HAL_I2C_MspInit+0xb8>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001626:	f44f 7340 	mov.w	r3, #768	; 0x300
 800162a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800162e:	2312      	movs	r3, #18
 8001630:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163a:	2303      	movs	r3, #3
 800163c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001640:	2304      	movs	r3, #4
 8001642:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001646:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800164a:	4619      	mov	r1, r3
 800164c:	480b      	ldr	r0, [pc, #44]	; (800167c <HAL_I2C_MspInit+0xbc>)
 800164e:	f002 f863 	bl	8003718 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001652:	4b09      	ldr	r3, [pc, #36]	; (8001678 <HAL_I2C_MspInit+0xb8>)
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	4a08      	ldr	r2, [pc, #32]	; (8001678 <HAL_I2C_MspInit+0xb8>)
 8001658:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800165c:	6413      	str	r3, [r2, #64]	; 0x40
 800165e:	4b06      	ldr	r3, [pc, #24]	; (8001678 <HAL_I2C_MspInit+0xb8>)
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001666:	60bb      	str	r3, [r7, #8]
 8001668:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800166a:	bf00      	nop
 800166c:	37a8      	adds	r7, #168	; 0xa8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40005400 	.word	0x40005400
 8001678:	40023800 	.word	0x40023800
 800167c:	40020400 	.word	0x40020400

08001680 <Kalman_Init>:
KalmanFilter filters[NUM_SENSOR];
float Q = 0.001f; // Process noise covariance
float R = 0.03f;   // Measurement noise covariance
float P = 0.001f;

void Kalman_Init(KalmanFilter *kf, float Q, float R, float P, float initial_value) {
 8001680:	b480      	push	{r7}
 8001682:	b087      	sub	sp, #28
 8001684:	af00      	add	r7, sp, #0
 8001686:	6178      	str	r0, [r7, #20]
 8001688:	ed87 0a04 	vstr	s0, [r7, #16]
 800168c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001690:	ed87 1a02 	vstr	s2, [r7, #8]
 8001694:	edc7 1a01 	vstr	s3, [r7, #4]
    kf->Q = Q;
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	601a      	str	r2, [r3, #0]
    kf->R = R;
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	68fa      	ldr	r2, [r7, #12]
 80016a2:	605a      	str	r2, [r3, #4]
    kf->P = P;
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	68ba      	ldr	r2, [r7, #8]
 80016a8:	609a      	str	r2, [r3, #8]
    kf->X = initial_value;
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	60da      	str	r2, [r3, #12]
}
 80016b0:	bf00      	nop
 80016b2:	371c      	adds	r7, #28
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <Kalman_Estimate>:

float Kalman_Estimate(KalmanFilter *kf, float measurement) {
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	ed87 0a00 	vstr	s0, [r7]
    // Prediction step: Update the error covariance 'P'
    // This is adding process noise to our uncertainty in the estimated state.
    kf->P = kf->P + kf->Q;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	ed93 7a02 	vldr	s14, [r3, #8]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	edd3 7a00 	vldr	s15, [r3]
 80016d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	edc3 7a02 	vstr	s15, [r3, #8]

    // Update step: Compute the Kalman Gain 'K'
    // Kalman Gain balances the ratio between the prediction and the new measurement
    kf->K = kf->P / (kf->P + kf->R);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	edd3 6a02 	vldr	s13, [r3, #8]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	ed93 7a02 	vldr	s14, [r3, #8]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80016f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	edc3 7a04 	vstr	s15, [r3, #16]

    // Update step: Update the state estimate 'X'
    // Here we adjust our state estimate based on the new measurement,
    // scaling the "innovation" by the Kalman Gain
    kf->X = kf->X + kf->K * (measurement - kf->X);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	ed93 7a03 	vldr	s14, [r3, #12]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	edd3 6a04 	vldr	s13, [r3, #16]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001710:	ed97 6a00 	vldr	s12, [r7]
 8001714:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001718:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800171c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	edc3 7a03 	vstr	s15, [r3, #12]

    // Update step: Update the error covariance 'P'
    // We've used our observation, so we adjust our uncertainty accordingly
    kf->P = (1 - kf->K) * kf->P;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	edd3 7a04 	vldr	s15, [r3, #16]
 800172c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001730:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	edd3 7a02 	vldr	s15, [r3, #8]
 800173a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	edc3 7a02 	vstr	s15, [r3, #8]

    // Return the updated state estimate
    return kf->X;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	ee07 3a90 	vmov	s15, r3
}
 800174c:	eeb0 0a67 	vmov.f32	s0, s15
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
	...

0800175c <ProcessCommand>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void ProcessCommand(uint8_t *commandBuffer)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
    char *command = strtok((char*)commandBuffer, " "); // Command separation
 8001764:	4949      	ldr	r1, [pc, #292]	; (800188c <ProcessCommand+0x130>)
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f010 f836 	bl	80117d8 <strtok>
 800176c:	60f8      	str	r0, [r7, #12]
    // 'strtok'는 다음 호출 때 NULL을 사용하여 이전 문자열에서 계속 토큰을 추출
    char *argument = strtok(NULL, " "); // argument seperation
 800176e:	4947      	ldr	r1, [pc, #284]	; (800188c <ProcessCommand+0x130>)
 8001770:	2000      	movs	r0, #0
 8001772:	f010 f831 	bl	80117d8 <strtok>
 8001776:	60b8      	str	r0, [r7, #8]

    if (strcmp((char*)command, "echo") == 0) {HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "echo\n"), 100);}
 8001778:	4945      	ldr	r1, [pc, #276]	; (8001890 <ProcessCommand+0x134>)
 800177a:	68f8      	ldr	r0, [r7, #12]
 800177c:	f7fe fd48 	bl	8000210 <strcmp>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d10b      	bne.n	800179e <ProcessCommand+0x42>
 8001786:	4943      	ldr	r1, [pc, #268]	; (8001894 <ProcessCommand+0x138>)
 8001788:	4843      	ldr	r0, [pc, #268]	; (8001898 <ProcessCommand+0x13c>)
 800178a:	f00f f961 	bl	8010a50 <siprintf>
 800178e:	4603      	mov	r3, r0
 8001790:	b29a      	uxth	r2, r3
 8001792:	2364      	movs	r3, #100	; 0x64
 8001794:	4940      	ldr	r1, [pc, #256]	; (8001898 <ProcessCommand+0x13c>)
 8001796:	4841      	ldr	r0, [pc, #260]	; (800189c <ProcessCommand+0x140>)
 8001798:	f007 fff0 	bl	800977c <HAL_UART_Transmit>
    else if (strcmp((char*)command, "setsensor") == 0) {SetSensorCommand();}
    else if (strcmp((char*)command, "2") == 0) {CalibrationCommand();}
    else if (strcmp((char*)command, "3") == 0) {CalibrationCommand();}
    else if (strcmp((char*)command, "4") == 0) {CalibrationCommand();}
    else {HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "Please insert correct command\n"), 100);}
}
 800179c:	e071      	b.n	8001882 <ProcessCommand+0x126>
    else if (strcmp((char*)command, "rev") == 0) {RevCommand(argument);}
 800179e:	4940      	ldr	r1, [pc, #256]	; (80018a0 <ProcessCommand+0x144>)
 80017a0:	68f8      	ldr	r0, [r7, #12]
 80017a2:	f7fe fd35 	bl	8000210 <strcmp>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d103      	bne.n	80017b4 <ProcessCommand+0x58>
 80017ac:	68b8      	ldr	r0, [r7, #8]
 80017ae:	f000 f88d 	bl	80018cc <RevCommand>
}
 80017b2:	e066      	b.n	8001882 <ProcessCommand+0x126>
    else if (strcmp((char*)command, "lin") == 0) {LinCommand(argument);}
 80017b4:	493b      	ldr	r1, [pc, #236]	; (80018a4 <ProcessCommand+0x148>)
 80017b6:	68f8      	ldr	r0, [r7, #12]
 80017b8:	f7fe fd2a 	bl	8000210 <strcmp>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d103      	bne.n	80017ca <ProcessCommand+0x6e>
 80017c2:	68b8      	ldr	r0, [r7, #8]
 80017c4:	f000 f8ce 	bl	8001964 <LinCommand>
}
 80017c8:	e05b      	b.n	8001882 <ProcessCommand+0x126>
    else if (strcmp((char*)command, "servo") == 0) {ServoCommand(argument);}
 80017ca:	4937      	ldr	r1, [pc, #220]	; (80018a8 <ProcessCommand+0x14c>)
 80017cc:	68f8      	ldr	r0, [r7, #12]
 80017ce:	f7fe fd1f 	bl	8000210 <strcmp>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d103      	bne.n	80017e0 <ProcessCommand+0x84>
 80017d8:	68b8      	ldr	r0, [r7, #8]
 80017da:	f000 f911 	bl	8001a00 <ServoCommand>
}
 80017de:	e050      	b.n	8001882 <ProcessCommand+0x126>
    else if (strcmp((char*)command, "sensor") == 0) {SensorCommand();}
 80017e0:	4932      	ldr	r1, [pc, #200]	; (80018ac <ProcessCommand+0x150>)
 80017e2:	68f8      	ldr	r0, [r7, #12]
 80017e4:	f7fe fd14 	bl	8000210 <strcmp>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d102      	bne.n	80017f4 <ProcessCommand+0x98>
 80017ee:	f000 f96b 	bl	8001ac8 <SensorCommand>
}
 80017f2:	e046      	b.n	8001882 <ProcessCommand+0x126>
    else if (strcmp((char*)command, "cali") == 0) {CalibrationCommand();}
 80017f4:	492e      	ldr	r1, [pc, #184]	; (80018b0 <ProcessCommand+0x154>)
 80017f6:	68f8      	ldr	r0, [r7, #12]
 80017f8:	f7fe fd0a 	bl	8000210 <strcmp>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d102      	bne.n	8001808 <ProcessCommand+0xac>
 8001802:	f000 fce1 	bl	80021c8 <CalibrationCommand>
}
 8001806:	e03c      	b.n	8001882 <ProcessCommand+0x126>
    else if (strcmp((char*)command, "ini") == 0) {InitializaionCalibrationCommand();}
 8001808:	492a      	ldr	r1, [pc, #168]	; (80018b4 <ProcessCommand+0x158>)
 800180a:	68f8      	ldr	r0, [r7, #12]
 800180c:	f7fe fd00 	bl	8000210 <strcmp>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d102      	bne.n	800181c <ProcessCommand+0xc0>
 8001816:	f000 fa87 	bl	8001d28 <InitializaionCalibrationCommand>
}
 800181a:	e032      	b.n	8001882 <ProcessCommand+0x126>
    else if (strcmp((char*)command, "setsensor") == 0) {SetSensorCommand();}
 800181c:	4926      	ldr	r1, [pc, #152]	; (80018b8 <ProcessCommand+0x15c>)
 800181e:	68f8      	ldr	r0, [r7, #12]
 8001820:	f7fe fcf6 	bl	8000210 <strcmp>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d102      	bne.n	8001830 <ProcessCommand+0xd4>
 800182a:	f000 fcd5 	bl	80021d8 <SetSensorCommand>
}
 800182e:	e028      	b.n	8001882 <ProcessCommand+0x126>
    else if (strcmp((char*)command, "2") == 0) {CalibrationCommand();}
 8001830:	4922      	ldr	r1, [pc, #136]	; (80018bc <ProcessCommand+0x160>)
 8001832:	68f8      	ldr	r0, [r7, #12]
 8001834:	f7fe fcec 	bl	8000210 <strcmp>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d102      	bne.n	8001844 <ProcessCommand+0xe8>
 800183e:	f000 fcc3 	bl	80021c8 <CalibrationCommand>
}
 8001842:	e01e      	b.n	8001882 <ProcessCommand+0x126>
    else if (strcmp((char*)command, "3") == 0) {CalibrationCommand();}
 8001844:	491e      	ldr	r1, [pc, #120]	; (80018c0 <ProcessCommand+0x164>)
 8001846:	68f8      	ldr	r0, [r7, #12]
 8001848:	f7fe fce2 	bl	8000210 <strcmp>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d102      	bne.n	8001858 <ProcessCommand+0xfc>
 8001852:	f000 fcb9 	bl	80021c8 <CalibrationCommand>
}
 8001856:	e014      	b.n	8001882 <ProcessCommand+0x126>
    else if (strcmp((char*)command, "4") == 0) {CalibrationCommand();}
 8001858:	491a      	ldr	r1, [pc, #104]	; (80018c4 <ProcessCommand+0x168>)
 800185a:	68f8      	ldr	r0, [r7, #12]
 800185c:	f7fe fcd8 	bl	8000210 <strcmp>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d102      	bne.n	800186c <ProcessCommand+0x110>
 8001866:	f000 fcaf 	bl	80021c8 <CalibrationCommand>
}
 800186a:	e00a      	b.n	8001882 <ProcessCommand+0x126>
    else {HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "Please insert correct command\n"), 100);}
 800186c:	4916      	ldr	r1, [pc, #88]	; (80018c8 <ProcessCommand+0x16c>)
 800186e:	480a      	ldr	r0, [pc, #40]	; (8001898 <ProcessCommand+0x13c>)
 8001870:	f00f f8ee 	bl	8010a50 <siprintf>
 8001874:	4603      	mov	r3, r0
 8001876:	b29a      	uxth	r2, r3
 8001878:	2364      	movs	r3, #100	; 0x64
 800187a:	4907      	ldr	r1, [pc, #28]	; (8001898 <ProcessCommand+0x13c>)
 800187c:	4807      	ldr	r0, [pc, #28]	; (800189c <ProcessCommand+0x140>)
 800187e:	f007 ff7d 	bl	800977c <HAL_UART_Transmit>
}
 8001882:	bf00      	nop
 8001884:	3710      	adds	r7, #16
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	08015e3c 	.word	0x08015e3c
 8001890:	08015e40 	.word	0x08015e40
 8001894:	08015e48 	.word	0x08015e48
 8001898:	2000671c 	.word	0x2000671c
 800189c:	200067a0 	.word	0x200067a0
 80018a0:	08015e50 	.word	0x08015e50
 80018a4:	08015e54 	.word	0x08015e54
 80018a8:	08015e58 	.word	0x08015e58
 80018ac:	08015e60 	.word	0x08015e60
 80018b0:	08015e68 	.word	0x08015e68
 80018b4:	08015e70 	.word	0x08015e70
 80018b8:	08015e74 	.word	0x08015e74
 80018bc:	08015e80 	.word	0x08015e80
 80018c0:	08015e84 	.word	0x08015e84
 80018c4:	08015e88 	.word	0x08015e88
 80018c8:	08015e8c 	.word	0x08015e8c

080018cc <RevCommand>:

void RevCommand(char *arg){
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
    int step_rev_angle;
    if(sscanf(arg, "%d", &step_rev_angle) == 1){
 80018d4:	f107 030c 	add.w	r3, r7, #12
 80018d8:	461a      	mov	r2, r3
 80018da:	491c      	ldr	r1, [pc, #112]	; (800194c <RevCommand+0x80>)
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f00f f8d7 	bl	8010a90 <siscanf>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d11e      	bne.n	8001926 <RevCommand+0x5a>
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d deg revolution Start \n\r",step_rev_angle), 100);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	461a      	mov	r2, r3
 80018ec:	4918      	ldr	r1, [pc, #96]	; (8001950 <RevCommand+0x84>)
 80018ee:	4819      	ldr	r0, [pc, #100]	; (8001954 <RevCommand+0x88>)
 80018f0:	f00f f8ae 	bl	8010a50 <siprintf>
 80018f4:	4603      	mov	r3, r0
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	2364      	movs	r3, #100	; 0x64
 80018fa:	4916      	ldr	r1, [pc, #88]	; (8001954 <RevCommand+0x88>)
 80018fc:	4816      	ldr	r0, [pc, #88]	; (8001958 <RevCommand+0x8c>)
 80018fe:	f007 ff3d 	bl	800977c <HAL_UART_Transmit>
        stepRev(step_rev_angle);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	4618      	mov	r0, r3
 8001906:	f000 fecf 	bl	80026a8 <stepRev>
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d deg revolution End \n\r",step_rev_angle), 100);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	461a      	mov	r2, r3
 800190e:	4913      	ldr	r1, [pc, #76]	; (800195c <RevCommand+0x90>)
 8001910:	4810      	ldr	r0, [pc, #64]	; (8001954 <RevCommand+0x88>)
 8001912:	f00f f89d 	bl	8010a50 <siprintf>
 8001916:	4603      	mov	r3, r0
 8001918:	b29a      	uxth	r2, r3
 800191a:	2364      	movs	r3, #100	; 0x64
 800191c:	490d      	ldr	r1, [pc, #52]	; (8001954 <RevCommand+0x88>)
 800191e:	480e      	ldr	r0, [pc, #56]	; (8001958 <RevCommand+0x8c>)
 8001920:	f007 ff2c 	bl	800977c <HAL_UART_Transmit>
 8001924:	e00a      	b.n	800193c <RevCommand+0x70>
    }else{
    	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "invalid data\r\n"), 100);
 8001926:	490e      	ldr	r1, [pc, #56]	; (8001960 <RevCommand+0x94>)
 8001928:	480a      	ldr	r0, [pc, #40]	; (8001954 <RevCommand+0x88>)
 800192a:	f00f f891 	bl	8010a50 <siprintf>
 800192e:	4603      	mov	r3, r0
 8001930:	b29a      	uxth	r2, r3
 8001932:	2364      	movs	r3, #100	; 0x64
 8001934:	4907      	ldr	r1, [pc, #28]	; (8001954 <RevCommand+0x88>)
 8001936:	4808      	ldr	r0, [pc, #32]	; (8001958 <RevCommand+0x8c>)
 8001938:	f007 ff20 	bl	800977c <HAL_UART_Transmit>
    }
    HAL_Delay(1000); // Delay for 1 second
 800193c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001940:	f001 fce6 	bl	8003310 <HAL_Delay>
}
 8001944:	bf00      	nop
 8001946:	3710      	adds	r7, #16
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	08015eac 	.word	0x08015eac
 8001950:	08015eb0 	.word	0x08015eb0
 8001954:	2000671c 	.word	0x2000671c
 8001958:	200067a0 	.word	0x200067a0
 800195c:	08015ecc 	.word	0x08015ecc
 8001960:	08015ee8 	.word	0x08015ee8

08001964 <LinCommand>:

void LinCommand(char *arg){
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
    int step_lin_dist = 0;
 800196c:	2300      	movs	r3, #0
 800196e:	60fb      	str	r3, [r7, #12]
    if (sscanf(arg, "%d", &step_lin_dist) == 1) {
 8001970:	f107 030c 	add.w	r3, r7, #12
 8001974:	461a      	mov	r2, r3
 8001976:	491c      	ldr	r1, [pc, #112]	; (80019e8 <LinCommand+0x84>)
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f00f f889 	bl	8010a90 <siscanf>
 800197e:	4603      	mov	r3, r0
 8001980:	2b01      	cmp	r3, #1
 8001982:	d11e      	bne.n	80019c2 <LinCommand+0x5e>
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d mm lin Still moving \n\r",step_lin_dist), 100);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	461a      	mov	r2, r3
 8001988:	4918      	ldr	r1, [pc, #96]	; (80019ec <LinCommand+0x88>)
 800198a:	4819      	ldr	r0, [pc, #100]	; (80019f0 <LinCommand+0x8c>)
 800198c:	f00f f860 	bl	8010a50 <siprintf>
 8001990:	4603      	mov	r3, r0
 8001992:	b29a      	uxth	r2, r3
 8001994:	2364      	movs	r3, #100	; 0x64
 8001996:	4916      	ldr	r1, [pc, #88]	; (80019f0 <LinCommand+0x8c>)
 8001998:	4816      	ldr	r0, [pc, #88]	; (80019f4 <LinCommand+0x90>)
 800199a:	f007 feef 	bl	800977c <HAL_UART_Transmit>
        stepLin(step_lin_dist);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f000 feeb 	bl	800277c <stepLin>
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d mm lin End\n\r", step_lin_dist), 100);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	461a      	mov	r2, r3
 80019aa:	4913      	ldr	r1, [pc, #76]	; (80019f8 <LinCommand+0x94>)
 80019ac:	4810      	ldr	r0, [pc, #64]	; (80019f0 <LinCommand+0x8c>)
 80019ae:	f00f f84f 	bl	8010a50 <siprintf>
 80019b2:	4603      	mov	r3, r0
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	2364      	movs	r3, #100	; 0x64
 80019b8:	490d      	ldr	r1, [pc, #52]	; (80019f0 <LinCommand+0x8c>)
 80019ba:	480e      	ldr	r0, [pc, #56]	; (80019f4 <LinCommand+0x90>)
 80019bc:	f007 fede 	bl	800977c <HAL_UART_Transmit>
 80019c0:	e00a      	b.n	80019d8 <LinCommand+0x74>
    } else {
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "invalid data\r\n"), 100);
 80019c2:	490e      	ldr	r1, [pc, #56]	; (80019fc <LinCommand+0x98>)
 80019c4:	480a      	ldr	r0, [pc, #40]	; (80019f0 <LinCommand+0x8c>)
 80019c6:	f00f f843 	bl	8010a50 <siprintf>
 80019ca:	4603      	mov	r3, r0
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	2364      	movs	r3, #100	; 0x64
 80019d0:	4907      	ldr	r1, [pc, #28]	; (80019f0 <LinCommand+0x8c>)
 80019d2:	4808      	ldr	r0, [pc, #32]	; (80019f4 <LinCommand+0x90>)
 80019d4:	f007 fed2 	bl	800977c <HAL_UART_Transmit>
    }
    HAL_Delay(1000); // Delay for 1 second
 80019d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019dc:	f001 fc98 	bl	8003310 <HAL_Delay>
}
 80019e0:	bf00      	nop
 80019e2:	3710      	adds	r7, #16
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	08015eac 	.word	0x08015eac
 80019ec:	08015ef8 	.word	0x08015ef8
 80019f0:	2000671c 	.word	0x2000671c
 80019f4:	200067a0 	.word	0x200067a0
 80019f8:	08015f14 	.word	0x08015f14
 80019fc:	08015ee8 	.word	0x08015ee8

08001a00 <ServoCommand>:

void ServoCommand(char *arg){
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
    float servo_angle_val = 0;
 8001a08:	f04f 0300 	mov.w	r3, #0
 8001a0c:	60fb      	str	r3, [r7, #12]
    if(sscanf(arg, "%f", &servo_angle_val) == 1) {
 8001a0e:	f107 030c 	add.w	r3, r7, #12
 8001a12:	461a      	mov	r2, r3
 8001a14:	4925      	ldr	r1, [pc, #148]	; (8001aac <ServoCommand+0xac>)
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f00f f83a 	bl	8010a90 <siscanf>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d135      	bne.n	8001a8e <ServoCommand+0x8e>
    	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f servo Still moving \n\r", servo_angle_val), 100);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7fe fdbf 	bl	80005a8 <__aeabi_f2d>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	4920      	ldr	r1, [pc, #128]	; (8001ab0 <ServoCommand+0xb0>)
 8001a30:	4820      	ldr	r0, [pc, #128]	; (8001ab4 <ServoCommand+0xb4>)
 8001a32:	f00f f80d 	bl	8010a50 <siprintf>
 8001a36:	4603      	mov	r3, r0
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	2364      	movs	r3, #100	; 0x64
 8001a3c:	491d      	ldr	r1, [pc, #116]	; (8001ab4 <ServoCommand+0xb4>)
 8001a3e:	481e      	ldr	r0, [pc, #120]	; (8001ab8 <ServoCommand+0xb8>)
 8001a40:	f007 fe9c 	bl	800977c <HAL_UART_Transmit>
    	servo_angle(&htim2, TIM_CHANNEL_1, servo_angle_val);
 8001a44:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a4c:	ee17 2a90 	vmov	r2, s15
 8001a50:	2100      	movs	r1, #0
 8001a52:	481a      	ldr	r0, [pc, #104]	; (8001abc <ServoCommand+0xbc>)
 8001a54:	f000 ff2c 	bl	80028b0 <servo_angle>
    	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f servo End \n\r", servo_angle_val), 100);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7fe fda4 	bl	80005a8 <__aeabi_f2d>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	4916      	ldr	r1, [pc, #88]	; (8001ac0 <ServoCommand+0xc0>)
 8001a66:	4813      	ldr	r0, [pc, #76]	; (8001ab4 <ServoCommand+0xb4>)
 8001a68:	f00e fff2 	bl	8010a50 <siprintf>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	2364      	movs	r3, #100	; 0x64
 8001a72:	4910      	ldr	r1, [pc, #64]	; (8001ab4 <ServoCommand+0xb4>)
 8001a74:	4810      	ldr	r0, [pc, #64]	; (8001ab8 <ServoCommand+0xb8>)
 8001a76:	f007 fe81 	bl	800977c <HAL_UART_Transmit>
        HAL_Delay(2000); // Delay for 2 seconds
 8001a7a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001a7e:	f001 fc47 	bl	8003310 <HAL_Delay>
        servo_angle(&htim2, TIM_CHANNEL_1, 0); // return to servo origin
 8001a82:	2200      	movs	r2, #0
 8001a84:	2100      	movs	r1, #0
 8001a86:	480d      	ldr	r0, [pc, #52]	; (8001abc <ServoCommand+0xbc>)
 8001a88:	f000 ff12 	bl	80028b0 <servo_angle>
    }else{
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "invalid data\r\n"), 100);
    }
}
 8001a8c:	e00a      	b.n	8001aa4 <ServoCommand+0xa4>
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "invalid data\r\n"), 100);
 8001a8e:	490d      	ldr	r1, [pc, #52]	; (8001ac4 <ServoCommand+0xc4>)
 8001a90:	4808      	ldr	r0, [pc, #32]	; (8001ab4 <ServoCommand+0xb4>)
 8001a92:	f00e ffdd 	bl	8010a50 <siprintf>
 8001a96:	4603      	mov	r3, r0
 8001a98:	b29a      	uxth	r2, r3
 8001a9a:	2364      	movs	r3, #100	; 0x64
 8001a9c:	4905      	ldr	r1, [pc, #20]	; (8001ab4 <ServoCommand+0xb4>)
 8001a9e:	4806      	ldr	r0, [pc, #24]	; (8001ab8 <ServoCommand+0xb8>)
 8001aa0:	f007 fe6c 	bl	800977c <HAL_UART_Transmit>
}
 8001aa4:	bf00      	nop
 8001aa6:	3710      	adds	r7, #16
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	08015f24 	.word	0x08015f24
 8001ab0:	08015f28 	.word	0x08015f28
 8001ab4:	2000671c 	.word	0x2000671c
 8001ab8:	200067a0 	.word	0x200067a0
 8001abc:	20006684 	.word	0x20006684
 8001ac0:	08015f44 	.word	0x08015f44
 8001ac4:	08015ee8 	.word	0x08015ee8

08001ac8 <SensorCommand>:

void SensorCommand(){
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b088      	sub	sp, #32
 8001acc:	af00      	add	r7, sp, #0

	ResetAllDevices();
 8001ace:	f001 fb19 	bl	8003104 <ResetAllDevices>
    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "sensor test\r\n"), 100);
 8001ad2:	4983      	ldr	r1, [pc, #524]	; (8001ce0 <SensorCommand+0x218>)
 8001ad4:	4883      	ldr	r0, [pc, #524]	; (8001ce4 <SensorCommand+0x21c>)
 8001ad6:	f00e ffbb 	bl	8010a50 <siprintf>
 8001ada:	4603      	mov	r3, r0
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	2364      	movs	r3, #100	; 0x64
 8001ae0:	4980      	ldr	r1, [pc, #512]	; (8001ce4 <SensorCommand+0x21c>)
 8001ae2:	4881      	ldr	r0, [pc, #516]	; (8001ce8 <SensorCommand+0x220>)
 8001ae4:	f007 fe4a 	bl	800977c <HAL_UART_Transmit>
    uint32_t startTime, endTime, diffTime;
    for(int count =0; count < NUM_READINGS; count++){
 8001ae8:	2300      	movs	r3, #0
 8001aea:	61fb      	str	r3, [r7, #28]
 8001aec:	e0eb      	b.n	8001cc6 <SensorCommand+0x1fe>
    	uint8_t sensorCount = 0;
 8001aee:	2300      	movs	r3, #0
 8001af0:	76fb      	strb	r3, [r7, #27]
    	startTime = HAL_GetTick();
 8001af2:	f001 fc01 	bl	80032f8 <HAL_GetTick>
 8001af6:	6138      	str	r0, [r7, #16]
		for (int i = 0; i < NUM_SENSOR; i++) {
 8001af8:	2300      	movs	r3, #0
 8001afa:	617b      	str	r3, [r7, #20]
 8001afc:	e09d      	b.n	8001c3a <SensorCommand+0x172>
			uint8_t q = i / 12;
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	4a7a      	ldr	r2, [pc, #488]	; (8001cec <SensorCommand+0x224>)
 8001b02:	fb82 1203 	smull	r1, r2, r2, r3
 8001b06:	1052      	asrs	r2, r2, #1
 8001b08:	17db      	asrs	r3, r3, #31
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	71fb      	strb	r3, [r7, #7]
			uint8_t r = i % 12;
 8001b0e:	697a      	ldr	r2, [r7, #20]
 8001b10:	4b76      	ldr	r3, [pc, #472]	; (8001cec <SensorCommand+0x224>)
 8001b12:	fb83 1302 	smull	r1, r3, r3, r2
 8001b16:	1059      	asrs	r1, r3, #1
 8001b18:	17d3      	asrs	r3, r2, #31
 8001b1a:	1ac9      	subs	r1, r1, r3
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	440b      	add	r3, r1
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	1ad1      	subs	r1, r2, r3
 8001b26:	460b      	mov	r3, r1
 8001b28:	71bb      	strb	r3, [r7, #6]
			uint8_t active_device = q * 2 + (r >= 8 ? 1 : 0);
 8001b2a:	79fb      	ldrb	r3, [r7, #7]
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	79ba      	ldrb	r2, [r7, #6]
 8001b32:	2a07      	cmp	r2, #7
 8001b34:	bf8c      	ite	hi
 8001b36:	2201      	movhi	r2, #1
 8001b38:	2200      	movls	r2, #0
 8001b3a:	b2d2      	uxtb	r2, r2
 8001b3c:	4413      	add	r3, r2
 8001b3e:	717b      	strb	r3, [r7, #5]
			uint8_t channel = (r >= 8) ? r - 8 : r;
 8001b40:	79bb      	ldrb	r3, [r7, #6]
 8001b42:	2b07      	cmp	r3, #7
 8001b44:	d903      	bls.n	8001b4e <SensorCommand+0x86>
 8001b46:	79bb      	ldrb	r3, [r7, #6]
 8001b48:	3b08      	subs	r3, #8
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	e000      	b.n	8001b50 <SensorCommand+0x88>
 8001b4e:	79bb      	ldrb	r3, [r7, #6]
 8001b50:	713b      	strb	r3, [r7, #4]
			ResetDevicesExcept(active_device);
 8001b52:	797b      	ldrb	r3, [r7, #5]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f001 fb01 	bl	800315c <ResetDevicesExcept>
			setActiveTcaChannel(active_device, channel);
 8001b5a:	793a      	ldrb	r2, [r7, #4]
 8001b5c:	797b      	ldrb	r3, [r7, #5]
 8001b5e:	4611      	mov	r1, r2
 8001b60:	4618      	mov	r0, r3
 8001b62:	f001 fb2d 	bl	80031c0 <setActiveTcaChannel>
			Dev = &vl53l0x_s[i];
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001b6c:	fb02 f303 	mul.w	r3, r2, r3
 8001b70:	4a5f      	ldr	r2, [pc, #380]	; (8001cf0 <SensorCommand+0x228>)
 8001b72:	4413      	add	r3, r2
 8001b74:	4a5f      	ldr	r2, [pc, #380]	; (8001cf4 <SensorCommand+0x22c>)
 8001b76:	6013      	str	r3, [r2, #0]
			VL53L0X_PerformContinuousRangingMeasurement(Dev, &RangingData); // 1500us
 8001b78:	4b5e      	ldr	r3, [pc, #376]	; (8001cf4 <SensorCommand+0x22c>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	495e      	ldr	r1, [pc, #376]	; (8001cf8 <SensorCommand+0x230>)
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f00a fd10 	bl	800c5a4 <VL53L0X_PerformContinuousRangingMeasurement>

			if (RangingData.RangeStatus == 0) {
 8001b84:	4b5c      	ldr	r3, [pc, #368]	; (8001cf8 <SensorCommand+0x230>)
 8001b86:	7e1b      	ldrb	r3, [r3, #24]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d144      	bne.n	8001c16 <SensorCommand+0x14e>
			  if (RangingData.RangeMilliMeter < 80) {
 8001b8c:	4b5a      	ldr	r3, [pc, #360]	; (8001cf8 <SensorCommand+0x230>)
 8001b8e:	891b      	ldrh	r3, [r3, #8]
 8001b90:	2b4f      	cmp	r3, #79	; 0x4f
 8001b92:	d84f      	bhi.n	8001c34 <SensorCommand+0x16c>
				  float filteredValue = Kalman_Estimate(&filters[i], RangingData.RangeMilliMeter);
 8001b94:	697a      	ldr	r2, [r7, #20]
 8001b96:	4613      	mov	r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	4413      	add	r3, r2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	4a57      	ldr	r2, [pc, #348]	; (8001cfc <SensorCommand+0x234>)
 8001ba0:	4413      	add	r3, r2
 8001ba2:	4a55      	ldr	r2, [pc, #340]	; (8001cf8 <SensorCommand+0x230>)
 8001ba4:	8912      	ldrh	r2, [r2, #8]
 8001ba6:	ee07 2a90 	vmov	s15, r2
 8001baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bae:	eeb0 0a67 	vmov.f32	s0, s15
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff fd82 	bl	80016bc <Kalman_Estimate>
 8001bb8:	ed87 0a00 	vstr	s0, [r7]
				  HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.1f ", filteredValue), 500);
 8001bbc:	6838      	ldr	r0, [r7, #0]
 8001bbe:	f7fe fcf3 	bl	80005a8 <__aeabi_f2d>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	494e      	ldr	r1, [pc, #312]	; (8001d00 <SensorCommand+0x238>)
 8001bc8:	4846      	ldr	r0, [pc, #280]	; (8001ce4 <SensorCommand+0x21c>)
 8001bca:	f00e ff41 	bl	8010a50 <siprintf>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	b29a      	uxth	r2, r3
 8001bd2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001bd6:	4943      	ldr	r1, [pc, #268]	; (8001ce4 <SensorCommand+0x21c>)
 8001bd8:	4843      	ldr	r0, [pc, #268]	; (8001ce8 <SensorCommand+0x220>)
 8001bda:	f007 fdcf 	bl	800977c <HAL_UART_Transmit>
				  sensorValues[i][readingCount[i]] = filteredValue;
 8001bde:	4a49      	ldr	r2, [pc, #292]	; (8001d04 <SensorCommand+0x23c>)
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001be6:	4848      	ldr	r0, [pc, #288]	; (8001d08 <SensorCommand+0x240>)
 8001be8:	697a      	ldr	r2, [r7, #20]
 8001bea:	4613      	mov	r3, r2
 8001bec:	011b      	lsls	r3, r3, #4
 8001bee:	1a9b      	subs	r3, r3, r2
 8001bf0:	00db      	lsls	r3, r3, #3
 8001bf2:	440b      	add	r3, r1
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	4403      	add	r3, r0
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	601a      	str	r2, [r3, #0]
				  readingCount[i]++;
 8001bfc:	4a41      	ldr	r2, [pc, #260]	; (8001d04 <SensorCommand+0x23c>)
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c04:	1c5a      	adds	r2, r3, #1
 8001c06:	493f      	ldr	r1, [pc, #252]	; (8001d04 <SensorCommand+0x23c>)
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				  sensorCount++;
 8001c0e:	7efb      	ldrb	r3, [r7, #27]
 8001c10:	3301      	adds	r3, #1
 8001c12:	76fb      	strb	r3, [r7, #27]
 8001c14:	e00e      	b.n	8001c34 <SensorCommand+0x16c>
			  }
			}else{
				  HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d ", RangingData.RangeStatus), 500);
 8001c16:	4b38      	ldr	r3, [pc, #224]	; (8001cf8 <SensorCommand+0x230>)
 8001c18:	7e1b      	ldrb	r3, [r3, #24]
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	493b      	ldr	r1, [pc, #236]	; (8001d0c <SensorCommand+0x244>)
 8001c1e:	4831      	ldr	r0, [pc, #196]	; (8001ce4 <SensorCommand+0x21c>)
 8001c20:	f00e ff16 	bl	8010a50 <siprintf>
 8001c24:	4603      	mov	r3, r0
 8001c26:	b29a      	uxth	r2, r3
 8001c28:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001c2c:	492d      	ldr	r1, [pc, #180]	; (8001ce4 <SensorCommand+0x21c>)
 8001c2e:	482e      	ldr	r0, [pc, #184]	; (8001ce8 <SensorCommand+0x220>)
 8001c30:	f007 fda4 	bl	800977c <HAL_UART_Transmit>
		for (int i = 0; i < NUM_SENSOR; i++) {
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	3301      	adds	r3, #1
 8001c38:	617b      	str	r3, [r7, #20]
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	2b2f      	cmp	r3, #47	; 0x2f
 8001c3e:	f77f af5e 	ble.w	8001afe <SensorCommand+0x36>
				  // 1 : Sigma Fail | 2 : Signal Fail | 3 : Min Range Fail | 4 : Phase Fail | 5 : Hardware Fail | 255 : No update
			  }
		}
		endTime = HAL_GetTick();
 8001c42:	f001 fb59 	bl	80032f8 <HAL_GetTick>
 8001c46:	60f8      	str	r0, [r7, #12]
		diffTime = endTime - startTime;
 8001c48:	68fa      	ldr	r2, [r7, #12]
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	60bb      	str	r3, [r7, #8]
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%lu ms ", diffTime), 100);
 8001c50:	68ba      	ldr	r2, [r7, #8]
 8001c52:	492f      	ldr	r1, [pc, #188]	; (8001d10 <SensorCommand+0x248>)
 8001c54:	4823      	ldr	r0, [pc, #140]	; (8001ce4 <SensorCommand+0x21c>)
 8001c56:	f00e fefb 	bl	8010a50 <siprintf>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	b29a      	uxth	r2, r3
 8001c5e:	2364      	movs	r3, #100	; 0x64
 8001c60:	4920      	ldr	r1, [pc, #128]	; (8001ce4 <SensorCommand+0x21c>)
 8001c62:	4821      	ldr	r0, [pc, #132]	; (8001ce8 <SensorCommand+0x220>)
 8001c64:	f007 fd8a 	bl	800977c <HAL_UART_Transmit>

		Hx711Data = Read_HX711();
 8001c68:	f7ff fbd6 	bl	8001418 <Read_HX711>
 8001c6c:	ee07 0a90 	vmov	s15, r0
 8001c70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c74:	4b27      	ldr	r3, [pc, #156]	; (8001d14 <SensorCommand+0x24c>)
 8001c76:	edc3 7a00 	vstr	s15, [r3]
		UART_SendWeight_g(Hx711Data,-1/1600.00f,10002); // Send the weight data over UART
 8001c7a:	4b26      	ldr	r3, [pc, #152]	; (8001d14 <SensorCommand+0x24c>)
 8001c7c:	edd3 7a00 	vldr	s15, [r3]
 8001c80:	ed9f 1a25 	vldr	s2, [pc, #148]	; 8001d18 <SensorCommand+0x250>
 8001c84:	eddf 0a25 	vldr	s1, [pc, #148]	; 8001d1c <SensorCommand+0x254>
 8001c88:	eeb0 0a67 	vmov.f32	s0, s15
 8001c8c:	f7ff fc12 	bl	80014b4 <UART_SendWeight_g>
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, " %d", sensorCount), 100);
 8001c90:	7efb      	ldrb	r3, [r7, #27]
 8001c92:	461a      	mov	r2, r3
 8001c94:	4922      	ldr	r1, [pc, #136]	; (8001d20 <SensorCommand+0x258>)
 8001c96:	4813      	ldr	r0, [pc, #76]	; (8001ce4 <SensorCommand+0x21c>)
 8001c98:	f00e feda 	bl	8010a50 <siprintf>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	b29a      	uxth	r2, r3
 8001ca0:	2364      	movs	r3, #100	; 0x64
 8001ca2:	4910      	ldr	r1, [pc, #64]	; (8001ce4 <SensorCommand+0x21c>)
 8001ca4:	4810      	ldr	r0, [pc, #64]	; (8001ce8 <SensorCommand+0x220>)
 8001ca6:	f007 fd69 	bl	800977c <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n"), 100);
 8001caa:	491e      	ldr	r1, [pc, #120]	; (8001d24 <SensorCommand+0x25c>)
 8001cac:	480d      	ldr	r0, [pc, #52]	; (8001ce4 <SensorCommand+0x21c>)
 8001cae:	f00e fecf 	bl	8010a50 <siprintf>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	b29a      	uxth	r2, r3
 8001cb6:	2364      	movs	r3, #100	; 0x64
 8001cb8:	490a      	ldr	r1, [pc, #40]	; (8001ce4 <SensorCommand+0x21c>)
 8001cba:	480b      	ldr	r0, [pc, #44]	; (8001ce8 <SensorCommand+0x220>)
 8001cbc:	f007 fd5e 	bl	800977c <HAL_UART_Transmit>
    for(int count =0; count < NUM_READINGS; count++){
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	61fb      	str	r3, [r7, #28]
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	2b77      	cmp	r3, #119	; 0x77
 8001cca:	f77f af10 	ble.w	8001aee <SensorCommand+0x26>

    }
    TransmitStats();
 8001cce:	f7ff fa6b 	bl	80011a8 <TransmitStats>
    ResetSensorData();
 8001cd2:	f7ff fab5 	bl	8001240 <ResetSensorData>

}
 8001cd6:	bf00      	nop
 8001cd8:	3720      	adds	r7, #32
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	08015f58 	.word	0x08015f58
 8001ce4:	2000671c 	.word	0x2000671c
 8001ce8:	200067a0 	.word	0x200067a0
 8001cec:	2aaaaaab 	.word	0x2aaaaaab
 8001cf0:	20006994 	.word	0x20006994
 8001cf4:	2000b494 	.word	0x2000b494
 8001cf8:	20006978 	.word	0x20006978
 8001cfc:	200062c0 	.word	0x200062c0
 8001d00:	08015f68 	.word	0x08015f68
 8001d04:	200061a8 	.word	0x200061a8
 8001d08:	20000628 	.word	0x20000628
 8001d0c:	08015f70 	.word	0x08015f70
 8001d10:	08015f74 	.word	0x08015f74
 8001d14:	20006268 	.word	0x20006268
 8001d18:	461c4800 	.word	0x461c4800
 8001d1c:	ba23d70a 	.word	0xba23d70a
 8001d20:	08015f7c 	.word	0x08015f7c
 8001d24:	08015f80 	.word	0x08015f80

08001d28 <InitializaionCalibrationCommand>:
		 stepLin(-8); // moving horizontal
  	 }
}

void InitializaionCalibrationCommand()
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "InitializationCommand\n\r"), 100);
 8001d2e:	49b3      	ldr	r1, [pc, #716]	; (8001ffc <InitializaionCalibrationCommand+0x2d4>)
 8001d30:	48b3      	ldr	r0, [pc, #716]	; (8002000 <InitializaionCalibrationCommand+0x2d8>)
 8001d32:	f00e fe8d 	bl	8010a50 <siprintf>
 8001d36:	4603      	mov	r3, r0
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	2364      	movs	r3, #100	; 0x64
 8001d3c:	49b0      	ldr	r1, [pc, #704]	; (8002000 <InitializaionCalibrationCommand+0x2d8>)
 8001d3e:	48b1      	ldr	r0, [pc, #708]	; (8002004 <InitializaionCalibrationCommand+0x2dc>)
 8001d40:	f007 fd1c 	bl	800977c <HAL_UART_Transmit>

	ResetAllDevices();
 8001d44:	f001 f9de 	bl	8003104 <ResetAllDevices>
  	for (int i = 0; i < NUM_SENSOR; i++) {
 8001d48:	2300      	movs	r3, #0
 8001d4a:	617b      	str	r3, [r7, #20]
 8001d4c:	e10b      	b.n	8001f66 <InitializaionCalibrationCommand+0x23e>
  	    uint8_t q = i / 12;
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	4aad      	ldr	r2, [pc, #692]	; (8002008 <InitializaionCalibrationCommand+0x2e0>)
 8001d52:	fb82 1203 	smull	r1, r2, r2, r3
 8001d56:	1052      	asrs	r2, r2, #1
 8001d58:	17db      	asrs	r3, r3, #31
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	70fb      	strb	r3, [r7, #3]
  	    uint8_t r = i % 12;
 8001d5e:	697a      	ldr	r2, [r7, #20]
 8001d60:	4ba9      	ldr	r3, [pc, #676]	; (8002008 <InitializaionCalibrationCommand+0x2e0>)
 8001d62:	fb83 1302 	smull	r1, r3, r3, r2
 8001d66:	1059      	asrs	r1, r3, #1
 8001d68:	17d3      	asrs	r3, r2, #31
 8001d6a:	1ac9      	subs	r1, r1, r3
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	440b      	add	r3, r1
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	1ad1      	subs	r1, r2, r3
 8001d76:	460b      	mov	r3, r1
 8001d78:	70bb      	strb	r3, [r7, #2]
  	    uint8_t active_device = q * 2 + (r >= 8 ? 1 : 0);
 8001d7a:	78fb      	ldrb	r3, [r7, #3]
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	78ba      	ldrb	r2, [r7, #2]
 8001d82:	2a07      	cmp	r2, #7
 8001d84:	bf8c      	ite	hi
 8001d86:	2201      	movhi	r2, #1
 8001d88:	2200      	movls	r2, #0
 8001d8a:	b2d2      	uxtb	r2, r2
 8001d8c:	4413      	add	r3, r2
 8001d8e:	707b      	strb	r3, [r7, #1]
  	    uint8_t channel = (r >= 8) ? r - 8 : r;
 8001d90:	78bb      	ldrb	r3, [r7, #2]
 8001d92:	2b07      	cmp	r3, #7
 8001d94:	d903      	bls.n	8001d9e <InitializaionCalibrationCommand+0x76>
 8001d96:	78bb      	ldrb	r3, [r7, #2]
 8001d98:	3b08      	subs	r3, #8
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	e000      	b.n	8001da0 <InitializaionCalibrationCommand+0x78>
 8001d9e:	78bb      	ldrb	r3, [r7, #2]
 8001da0:	703b      	strb	r3, [r7, #0]

        ResetDevicesExcept(active_device);
 8001da2:	787b      	ldrb	r3, [r7, #1]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f001 f9d9 	bl	800315c <ResetDevicesExcept>
        setActiveTcaChannel(active_device,channel);
 8001daa:	783a      	ldrb	r2, [r7, #0]
 8001dac:	787b      	ldrb	r3, [r7, #1]
 8001dae:	4611      	mov	r1, r2
 8001db0:	4618      	mov	r0, r3
 8001db2:	f001 fa05 	bl	80031c0 <setActiveTcaChannel>

  		Dev = &vl53l0x_s[i];
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001dbc:	fb02 f303 	mul.w	r3, r2, r3
 8001dc0:	4a92      	ldr	r2, [pc, #584]	; (800200c <InitializaionCalibrationCommand+0x2e4>)
 8001dc2:	4413      	add	r3, r2
 8001dc4:	4a92      	ldr	r2, [pc, #584]	; (8002010 <InitializaionCalibrationCommand+0x2e8>)
 8001dc6:	6013      	str	r3, [r2, #0]
  		Dev->I2cHandle = &hi2c1;
 8001dc8:	4b91      	ldr	r3, [pc, #580]	; (8002010 <InitializaionCalibrationCommand+0x2e8>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a91      	ldr	r2, [pc, #580]	; (8002014 <InitializaionCalibrationCommand+0x2ec>)
 8001dce:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  		Dev->I2cDevAddr = VL53L0X_ADDR;
 8001dd2:	4b8f      	ldr	r3, [pc, #572]	; (8002010 <InitializaionCalibrationCommand+0x2e8>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	2252      	movs	r2, #82	; 0x52
 8001dd8:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

  		VL53L0X_WaitDeviceBooted( Dev );
 8001ddc:	4b8c      	ldr	r3, [pc, #560]	; (8002010 <InitializaionCalibrationCommand+0x2e8>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f009 f9ed 	bl	800b1c0 <VL53L0X_WaitDeviceBooted>
  		VL53L0X_DataInit( Dev );
 8001de6:	4b8a      	ldr	r3, [pc, #552]	; (8002010 <InitializaionCalibrationCommand+0x2e8>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f008 ff02 	bl	800abf4 <VL53L0X_DataInit>
  		VL53L0X_StaticInit( Dev );
 8001df0:	4b87      	ldr	r3, [pc, #540]	; (8002010 <InitializaionCalibrationCommand+0x2e8>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f009 f861 	bl	800aebc <VL53L0X_StaticInit>
  		VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 8001dfa:	4b85      	ldr	r3, [pc, #532]	; (8002010 <InitializaionCalibrationCommand+0x2e8>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2101      	movs	r1, #1
 8001e00:	4618      	mov	r0, r3
 8001e02:	f009 fa7b 	bl	800b2fc <VL53L0X_SetDeviceMode>

  		VL53L0X_PerformRefSpadManagement( Dev, &refSpadCount[i], &isApertureSpads[i]);
 8001e06:	4b82      	ldr	r3, [pc, #520]	; (8002010 <InitializaionCalibrationCommand+0x2e8>)
 8001e08:	6818      	ldr	r0, [r3, #0]
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	4a82      	ldr	r2, [pc, #520]	; (8002018 <InitializaionCalibrationCommand+0x2f0>)
 8001e10:	1899      	adds	r1, r3, r2
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	4a81      	ldr	r2, [pc, #516]	; (800201c <InitializaionCalibrationCommand+0x2f4>)
 8001e16:	4413      	add	r3, r2
 8001e18:	461a      	mov	r2, r3
 8001e1a:	f00a fbae 	bl	800c57a <VL53L0X_PerformRefSpadManagement>
  		VL53L0X_PerformRefCalibration( Dev, &VhvSettings[i], &PhaseCal[i]);
 8001e1e:	4b7c      	ldr	r3, [pc, #496]	; (8002010 <InitializaionCalibrationCommand+0x2e8>)
 8001e20:	6818      	ldr	r0, [r3, #0]
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	4a7e      	ldr	r2, [pc, #504]	; (8002020 <InitializaionCalibrationCommand+0x2f8>)
 8001e26:	1899      	adds	r1, r3, r2
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	4a7e      	ldr	r2, [pc, #504]	; (8002024 <InitializaionCalibrationCommand+0x2fc>)
 8001e2c:	4413      	add	r3, r2
 8001e2e:	461a      	mov	r2, r3
 8001e30:	f009 fefe 	bl	800bc30 <VL53L0X_PerformRefCalibration>

  		refSpadCountHost[i] = refSpadCount[i];
 8001e34:	4a78      	ldr	r2, [pc, #480]	; (8002018 <InitializaionCalibrationCommand+0x2f0>)
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e3c:	497a      	ldr	r1, [pc, #488]	; (8002028 <InitializaionCalibrationCommand+0x300>)
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  		isApertureSpadsHost[i] = isApertureSpads[i];
 8001e44:	4a75      	ldr	r2, [pc, #468]	; (800201c <InitializaionCalibrationCommand+0x2f4>)
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	4413      	add	r3, r2
 8001e4a:	7819      	ldrb	r1, [r3, #0]
 8001e4c:	4a77      	ldr	r2, [pc, #476]	; (800202c <InitializaionCalibrationCommand+0x304>)
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	4413      	add	r3, r2
 8001e52:	460a      	mov	r2, r1
 8001e54:	701a      	strb	r2, [r3, #0]
  		VhvSettingsHost[i] = VhvSettings[i];
 8001e56:	4a72      	ldr	r2, [pc, #456]	; (8002020 <InitializaionCalibrationCommand+0x2f8>)
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	7819      	ldrb	r1, [r3, #0]
 8001e5e:	4a74      	ldr	r2, [pc, #464]	; (8002030 <InitializaionCalibrationCommand+0x308>)
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	4413      	add	r3, r2
 8001e64:	460a      	mov	r2, r1
 8001e66:	701a      	strb	r2, [r3, #0]
  		PhaseCalHost[i] = PhaseCal[i];
 8001e68:	4a6e      	ldr	r2, [pc, #440]	; (8002024 <InitializaionCalibrationCommand+0x2fc>)
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	7819      	ldrb	r1, [r3, #0]
 8001e70:	4a70      	ldr	r2, [pc, #448]	; (8002034 <InitializaionCalibrationCommand+0x30c>)
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	4413      	add	r3, r2
 8001e76:	460a      	mov	r2, r1
 8001e78:	701a      	strb	r2, [r3, #0]

  		VL53L0X_SetLimitCheckEnable( Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 8001e7a:	4b65      	ldr	r3, [pc, #404]	; (8002010 <InitializaionCalibrationCommand+0x2e8>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	2100      	movs	r1, #0
 8001e82:	4618      	mov	r0, r3
 8001e84:	f009 fcce 	bl	800b824 <VL53L0X_SetLimitCheckEnable>
  		VL53L0X_SetLimitCheckEnable( Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 8001e88:	4b61      	ldr	r3, [pc, #388]	; (8002010 <InitializaionCalibrationCommand+0x2e8>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	2101      	movs	r1, #1
 8001e90:	4618      	mov	r0, r3
 8001e92:	f009 fcc7 	bl	800b824 <VL53L0X_SetLimitCheckEnable>
  		VL53L0X_SetLimitCheckValue( Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 8001e96:	4b5e      	ldr	r3, [pc, #376]	; (8002010 <InitializaionCalibrationCommand+0x2e8>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f641 1299 	movw	r2, #6553	; 0x1999
 8001e9e:	2101      	movs	r1, #1
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f009 fd6f 	bl	800b984 <VL53L0X_SetLimitCheckValue>
  		VL53L0X_SetLimitCheckValue( Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 8001ea6:	4b5a      	ldr	r3, [pc, #360]	; (8002010 <InitializaionCalibrationCommand+0x2e8>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001eae:	2100      	movs	r1, #0
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f009 fd67 	bl	800b984 <VL53L0X_SetLimitCheckValue>
  		VL53L0X_SetMeasurementTimingBudgetMicroSeconds( Dev, 33000);
 8001eb6:	4b56      	ldr	r3, [pc, #344]	; (8002010 <InitializaionCalibrationCommand+0x2e8>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f248 01e8 	movw	r1, #33000	; 0x80e8
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f009 fa7a 	bl	800b3b8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
  		VL53L0X_SetVcselPulsePeriod( Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 8001ec4:	4b52      	ldr	r3, [pc, #328]	; (8002010 <InitializaionCalibrationCommand+0x2e8>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2212      	movs	r2, #18
 8001eca:	2100      	movs	r1, #0
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f009 fa99 	bl	800b404 <VL53L0X_SetVcselPulsePeriod>
  		VL53L0X_SetVcselPulsePeriod( Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 8001ed2:	4b4f      	ldr	r3, [pc, #316]	; (8002010 <InitializaionCalibrationCommand+0x2e8>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	220e      	movs	r2, #14
 8001ed8:	2101      	movs	r1, #1
 8001eda:	4618      	mov	r0, r3
 8001edc:	f009 fa92 	bl	800b404 <VL53L0X_SetVcselPulsePeriod>

		Kalman_Init(&filters[i], Q, R, P, 0);  // Q, R, P, 초기값
 8001ee0:	697a      	ldr	r2, [r7, #20]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	4413      	add	r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	4a53      	ldr	r2, [pc, #332]	; (8002038 <InitializaionCalibrationCommand+0x310>)
 8001eec:	4413      	add	r3, r2
 8001eee:	4a53      	ldr	r2, [pc, #332]	; (800203c <InitializaionCalibrationCommand+0x314>)
 8001ef0:	edd2 7a00 	vldr	s15, [r2]
 8001ef4:	4a52      	ldr	r2, [pc, #328]	; (8002040 <InitializaionCalibrationCommand+0x318>)
 8001ef6:	ed92 7a00 	vldr	s14, [r2]
 8001efa:	4a52      	ldr	r2, [pc, #328]	; (8002044 <InitializaionCalibrationCommand+0x31c>)
 8001efc:	edd2 6a00 	vldr	s13, [r2]
 8001f00:	eddf 1a51 	vldr	s3, [pc, #324]	; 8002048 <InitializaionCalibrationCommand+0x320>
 8001f04:	eeb0 1a66 	vmov.f32	s2, s13
 8001f08:	eef0 0a47 	vmov.f32	s1, s14
 8001f0c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff fbb5 	bl	8001680 <Kalman_Init>

 		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%02d ",i), 100);
 8001f16:	697a      	ldr	r2, [r7, #20]
 8001f18:	494c      	ldr	r1, [pc, #304]	; (800204c <InitializaionCalibrationCommand+0x324>)
 8001f1a:	4839      	ldr	r0, [pc, #228]	; (8002000 <InitializaionCalibrationCommand+0x2d8>)
 8001f1c:	f00e fd98 	bl	8010a50 <siprintf>
 8001f20:	4603      	mov	r3, r0
 8001f22:	b29a      	uxth	r2, r3
 8001f24:	2364      	movs	r3, #100	; 0x64
 8001f26:	4936      	ldr	r1, [pc, #216]	; (8002000 <InitializaionCalibrationCommand+0x2d8>)
 8001f28:	4836      	ldr	r0, [pc, #216]	; (8002004 <InitializaionCalibrationCommand+0x2dc>)
 8001f2a:	f007 fc27 	bl	800977c <HAL_UART_Transmit>
 		if(i%12 ==11){HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n\r"), 100);}
 8001f2e:	6979      	ldr	r1, [r7, #20]
 8001f30:	4b35      	ldr	r3, [pc, #212]	; (8002008 <InitializaionCalibrationCommand+0x2e0>)
 8001f32:	fb83 2301 	smull	r2, r3, r3, r1
 8001f36:	105a      	asrs	r2, r3, #1
 8001f38:	17cb      	asrs	r3, r1, #31
 8001f3a:	1ad2      	subs	r2, r2, r3
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	4413      	add	r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	1aca      	subs	r2, r1, r3
 8001f46:	2a0b      	cmp	r2, #11
 8001f48:	d10a      	bne.n	8001f60 <InitializaionCalibrationCommand+0x238>
 8001f4a:	4941      	ldr	r1, [pc, #260]	; (8002050 <InitializaionCalibrationCommand+0x328>)
 8001f4c:	482c      	ldr	r0, [pc, #176]	; (8002000 <InitializaionCalibrationCommand+0x2d8>)
 8001f4e:	f00e fd7f 	bl	8010a50 <siprintf>
 8001f52:	4603      	mov	r3, r0
 8001f54:	b29a      	uxth	r2, r3
 8001f56:	2364      	movs	r3, #100	; 0x64
 8001f58:	4929      	ldr	r1, [pc, #164]	; (8002000 <InitializaionCalibrationCommand+0x2d8>)
 8001f5a:	482a      	ldr	r0, [pc, #168]	; (8002004 <InitializaionCalibrationCommand+0x2dc>)
 8001f5c:	f007 fc0e 	bl	800977c <HAL_UART_Transmit>
  	for (int i = 0; i < NUM_SENSOR; i++) {
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	3301      	adds	r3, #1
 8001f64:	617b      	str	r3, [r7, #20]
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	2b2f      	cmp	r3, #47	; 0x2f
 8001f6a:	f77f aef0 	ble.w	8001d4e <InitializaionCalibrationCommand+0x26>

  	}


	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "uint32_t refSpadCountHost[NUM_SENSOR]={"), 100);
 8001f6e:	4939      	ldr	r1, [pc, #228]	; (8002054 <InitializaionCalibrationCommand+0x32c>)
 8001f70:	4823      	ldr	r0, [pc, #140]	; (8002000 <InitializaionCalibrationCommand+0x2d8>)
 8001f72:	f00e fd6d 	bl	8010a50 <siprintf>
 8001f76:	4603      	mov	r3, r0
 8001f78:	b29a      	uxth	r2, r3
 8001f7a:	2364      	movs	r3, #100	; 0x64
 8001f7c:	4920      	ldr	r1, [pc, #128]	; (8002000 <InitializaionCalibrationCommand+0x2d8>)
 8001f7e:	4821      	ldr	r0, [pc, #132]	; (8002004 <InitializaionCalibrationCommand+0x2dc>)
 8001f80:	f007 fbfc 	bl	800977c <HAL_UART_Transmit>
	for (int i = 0; i < NUM_SENSOR; i++){
 8001f84:	2300      	movs	r3, #0
 8001f86:	613b      	str	r3, [r7, #16]
 8001f88:	e026      	b.n	8001fd8 <InitializaionCalibrationCommand+0x2b0>
		if(i < NUM_SENSOR - 1){
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	2b2e      	cmp	r3, #46	; 0x2e
 8001f8e:	dc10      	bgt.n	8001fb2 <InitializaionCalibrationCommand+0x28a>
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%lu,",refSpadCount[i]), 100);
 8001f90:	4a21      	ldr	r2, [pc, #132]	; (8002018 <InitializaionCalibrationCommand+0x2f0>)
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f98:	461a      	mov	r2, r3
 8001f9a:	492f      	ldr	r1, [pc, #188]	; (8002058 <InitializaionCalibrationCommand+0x330>)
 8001f9c:	4818      	ldr	r0, [pc, #96]	; (8002000 <InitializaionCalibrationCommand+0x2d8>)
 8001f9e:	f00e fd57 	bl	8010a50 <siprintf>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	b29a      	uxth	r2, r3
 8001fa6:	2364      	movs	r3, #100	; 0x64
 8001fa8:	4915      	ldr	r1, [pc, #84]	; (8002000 <InitializaionCalibrationCommand+0x2d8>)
 8001faa:	4816      	ldr	r0, [pc, #88]	; (8002004 <InitializaionCalibrationCommand+0x2dc>)
 8001fac:	f007 fbe6 	bl	800977c <HAL_UART_Transmit>
 8001fb0:	e00f      	b.n	8001fd2 <InitializaionCalibrationCommand+0x2aa>
		} else {
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%lu};\n",refSpadCount[i]), 100);
 8001fb2:	4a19      	ldr	r2, [pc, #100]	; (8002018 <InitializaionCalibrationCommand+0x2f0>)
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fba:	461a      	mov	r2, r3
 8001fbc:	4927      	ldr	r1, [pc, #156]	; (800205c <InitializaionCalibrationCommand+0x334>)
 8001fbe:	4810      	ldr	r0, [pc, #64]	; (8002000 <InitializaionCalibrationCommand+0x2d8>)
 8001fc0:	f00e fd46 	bl	8010a50 <siprintf>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	b29a      	uxth	r2, r3
 8001fc8:	2364      	movs	r3, #100	; 0x64
 8001fca:	490d      	ldr	r1, [pc, #52]	; (8002000 <InitializaionCalibrationCommand+0x2d8>)
 8001fcc:	480d      	ldr	r0, [pc, #52]	; (8002004 <InitializaionCalibrationCommand+0x2dc>)
 8001fce:	f007 fbd5 	bl	800977c <HAL_UART_Transmit>
	for (int i = 0; i < NUM_SENSOR; i++){
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	613b      	str	r3, [r7, #16]
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	2b2f      	cmp	r3, #47	; 0x2f
 8001fdc:	ddd5      	ble.n	8001f8a <InitializaionCalibrationCommand+0x262>
		}
	}

	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "uint8_t isApertureSpadsHost[NUM_SENSOR]={"), 100);
 8001fde:	4920      	ldr	r1, [pc, #128]	; (8002060 <InitializaionCalibrationCommand+0x338>)
 8001fe0:	4807      	ldr	r0, [pc, #28]	; (8002000 <InitializaionCalibrationCommand+0x2d8>)
 8001fe2:	f00e fd35 	bl	8010a50 <siprintf>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	b29a      	uxth	r2, r3
 8001fea:	2364      	movs	r3, #100	; 0x64
 8001fec:	4904      	ldr	r1, [pc, #16]	; (8002000 <InitializaionCalibrationCommand+0x2d8>)
 8001fee:	4805      	ldr	r0, [pc, #20]	; (8002004 <InitializaionCalibrationCommand+0x2dc>)
 8001ff0:	f007 fbc4 	bl	800977c <HAL_UART_Transmit>
	for (int i = 0; i < NUM_SENSOR; i++){
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	e05b      	b.n	80020b2 <InitializaionCalibrationCommand+0x38a>
 8001ffa:	bf00      	nop
 8001ffc:	08015fb0 	.word	0x08015fb0
 8002000:	2000671c 	.word	0x2000671c
 8002004:	200067a0 	.word	0x200067a0
 8002008:	2aaaaaab 	.word	0x2aaaaaab
 800200c:	20006994 	.word	0x20006994
 8002010:	2000b494 	.word	0x2000b494
 8002014:	2000626c 	.word	0x2000626c
 8002018:	20006828 	.word	0x20006828
 800201c:	200068e8 	.word	0x200068e8
 8002020:	20006918 	.word	0x20006918
 8002024:	20006948 	.word	0x20006948
 8002028:	20000010 	.word	0x20000010
 800202c:	200000d0 	.word	0x200000d0
 8002030:	20000100 	.word	0x20000100
 8002034:	20000130 	.word	0x20000130
 8002038:	200062c0 	.word	0x200062c0
 800203c:	20000000 	.word	0x20000000
 8002040:	20000004 	.word	0x20000004
 8002044:	20000008 	.word	0x20000008
 8002048:	00000000 	.word	0x00000000
 800204c:	08015fc8 	.word	0x08015fc8
 8002050:	08015fd0 	.word	0x08015fd0
 8002054:	08015fd4 	.word	0x08015fd4
 8002058:	08015ffc 	.word	0x08015ffc
 800205c:	08016004 	.word	0x08016004
 8002060:	0801600c 	.word	0x0801600c
		if(i < NUM_SENSOR - 1){
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2b2e      	cmp	r3, #46	; 0x2e
 8002068:	dc10      	bgt.n	800208c <InitializaionCalibrationCommand+0x364>
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d,",isApertureSpads[i]), 100);
 800206a:	4a4e      	ldr	r2, [pc, #312]	; (80021a4 <InitializaionCalibrationCommand+0x47c>)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	4413      	add	r3, r2
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	461a      	mov	r2, r3
 8002074:	494c      	ldr	r1, [pc, #304]	; (80021a8 <InitializaionCalibrationCommand+0x480>)
 8002076:	484d      	ldr	r0, [pc, #308]	; (80021ac <InitializaionCalibrationCommand+0x484>)
 8002078:	f00e fcea 	bl	8010a50 <siprintf>
 800207c:	4603      	mov	r3, r0
 800207e:	b29a      	uxth	r2, r3
 8002080:	2364      	movs	r3, #100	; 0x64
 8002082:	494a      	ldr	r1, [pc, #296]	; (80021ac <InitializaionCalibrationCommand+0x484>)
 8002084:	484a      	ldr	r0, [pc, #296]	; (80021b0 <InitializaionCalibrationCommand+0x488>)
 8002086:	f007 fb79 	bl	800977c <HAL_UART_Transmit>
 800208a:	e00f      	b.n	80020ac <InitializaionCalibrationCommand+0x384>
		} else {
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d};\n",isApertureSpads[i]), 100);
 800208c:	4a45      	ldr	r2, [pc, #276]	; (80021a4 <InitializaionCalibrationCommand+0x47c>)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	4413      	add	r3, r2
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	461a      	mov	r2, r3
 8002096:	4947      	ldr	r1, [pc, #284]	; (80021b4 <InitializaionCalibrationCommand+0x48c>)
 8002098:	4844      	ldr	r0, [pc, #272]	; (80021ac <InitializaionCalibrationCommand+0x484>)
 800209a:	f00e fcd9 	bl	8010a50 <siprintf>
 800209e:	4603      	mov	r3, r0
 80020a0:	b29a      	uxth	r2, r3
 80020a2:	2364      	movs	r3, #100	; 0x64
 80020a4:	4941      	ldr	r1, [pc, #260]	; (80021ac <InitializaionCalibrationCommand+0x484>)
 80020a6:	4842      	ldr	r0, [pc, #264]	; (80021b0 <InitializaionCalibrationCommand+0x488>)
 80020a8:	f007 fb68 	bl	800977c <HAL_UART_Transmit>
	for (int i = 0; i < NUM_SENSOR; i++){
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	3301      	adds	r3, #1
 80020b0:	60fb      	str	r3, [r7, #12]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2b2f      	cmp	r3, #47	; 0x2f
 80020b6:	ddd5      	ble.n	8002064 <InitializaionCalibrationCommand+0x33c>
		}
	}

	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "uint8_t VhvSettingsHost[NUM_SENSOR]={"), 100);
 80020b8:	493f      	ldr	r1, [pc, #252]	; (80021b8 <InitializaionCalibrationCommand+0x490>)
 80020ba:	483c      	ldr	r0, [pc, #240]	; (80021ac <InitializaionCalibrationCommand+0x484>)
 80020bc:	f00e fcc8 	bl	8010a50 <siprintf>
 80020c0:	4603      	mov	r3, r0
 80020c2:	b29a      	uxth	r2, r3
 80020c4:	2364      	movs	r3, #100	; 0x64
 80020c6:	4939      	ldr	r1, [pc, #228]	; (80021ac <InitializaionCalibrationCommand+0x484>)
 80020c8:	4839      	ldr	r0, [pc, #228]	; (80021b0 <InitializaionCalibrationCommand+0x488>)
 80020ca:	f007 fb57 	bl	800977c <HAL_UART_Transmit>
	for (int i = 0; i < NUM_SENSOR; i++){
 80020ce:	2300      	movs	r3, #0
 80020d0:	60bb      	str	r3, [r7, #8]
 80020d2:	e026      	b.n	8002122 <InitializaionCalibrationCommand+0x3fa>
		if(i < NUM_SENSOR - 1){
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	2b2e      	cmp	r3, #46	; 0x2e
 80020d8:	dc10      	bgt.n	80020fc <InitializaionCalibrationCommand+0x3d4>
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d,",VhvSettings[i]), 100);
 80020da:	4a38      	ldr	r2, [pc, #224]	; (80021bc <InitializaionCalibrationCommand+0x494>)
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	4413      	add	r3, r2
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	461a      	mov	r2, r3
 80020e4:	4930      	ldr	r1, [pc, #192]	; (80021a8 <InitializaionCalibrationCommand+0x480>)
 80020e6:	4831      	ldr	r0, [pc, #196]	; (80021ac <InitializaionCalibrationCommand+0x484>)
 80020e8:	f00e fcb2 	bl	8010a50 <siprintf>
 80020ec:	4603      	mov	r3, r0
 80020ee:	b29a      	uxth	r2, r3
 80020f0:	2364      	movs	r3, #100	; 0x64
 80020f2:	492e      	ldr	r1, [pc, #184]	; (80021ac <InitializaionCalibrationCommand+0x484>)
 80020f4:	482e      	ldr	r0, [pc, #184]	; (80021b0 <InitializaionCalibrationCommand+0x488>)
 80020f6:	f007 fb41 	bl	800977c <HAL_UART_Transmit>
 80020fa:	e00f      	b.n	800211c <InitializaionCalibrationCommand+0x3f4>
		} else {
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d};\n",VhvSettings[i]), 100);
 80020fc:	4a2f      	ldr	r2, [pc, #188]	; (80021bc <InitializaionCalibrationCommand+0x494>)
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	4413      	add	r3, r2
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	461a      	mov	r2, r3
 8002106:	492b      	ldr	r1, [pc, #172]	; (80021b4 <InitializaionCalibrationCommand+0x48c>)
 8002108:	4828      	ldr	r0, [pc, #160]	; (80021ac <InitializaionCalibrationCommand+0x484>)
 800210a:	f00e fca1 	bl	8010a50 <siprintf>
 800210e:	4603      	mov	r3, r0
 8002110:	b29a      	uxth	r2, r3
 8002112:	2364      	movs	r3, #100	; 0x64
 8002114:	4925      	ldr	r1, [pc, #148]	; (80021ac <InitializaionCalibrationCommand+0x484>)
 8002116:	4826      	ldr	r0, [pc, #152]	; (80021b0 <InitializaionCalibrationCommand+0x488>)
 8002118:	f007 fb30 	bl	800977c <HAL_UART_Transmit>
	for (int i = 0; i < NUM_SENSOR; i++){
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	3301      	adds	r3, #1
 8002120:	60bb      	str	r3, [r7, #8]
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	2b2f      	cmp	r3, #47	; 0x2f
 8002126:	ddd5      	ble.n	80020d4 <InitializaionCalibrationCommand+0x3ac>
		}
	}

	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "uint8_t PhaseCalHost[NUM_SENSOR]={"), 100);
 8002128:	4925      	ldr	r1, [pc, #148]	; (80021c0 <InitializaionCalibrationCommand+0x498>)
 800212a:	4820      	ldr	r0, [pc, #128]	; (80021ac <InitializaionCalibrationCommand+0x484>)
 800212c:	f00e fc90 	bl	8010a50 <siprintf>
 8002130:	4603      	mov	r3, r0
 8002132:	b29a      	uxth	r2, r3
 8002134:	2364      	movs	r3, #100	; 0x64
 8002136:	491d      	ldr	r1, [pc, #116]	; (80021ac <InitializaionCalibrationCommand+0x484>)
 8002138:	481d      	ldr	r0, [pc, #116]	; (80021b0 <InitializaionCalibrationCommand+0x488>)
 800213a:	f007 fb1f 	bl	800977c <HAL_UART_Transmit>
	for (int i = 0; i < NUM_SENSOR; i++){
 800213e:	2300      	movs	r3, #0
 8002140:	607b      	str	r3, [r7, #4]
 8002142:	e026      	b.n	8002192 <InitializaionCalibrationCommand+0x46a>
		if(i < NUM_SENSOR - 1){
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2b2e      	cmp	r3, #46	; 0x2e
 8002148:	dc10      	bgt.n	800216c <InitializaionCalibrationCommand+0x444>
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d,",PhaseCal[i]), 100);
 800214a:	4a1e      	ldr	r2, [pc, #120]	; (80021c4 <InitializaionCalibrationCommand+0x49c>)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4413      	add	r3, r2
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	461a      	mov	r2, r3
 8002154:	4914      	ldr	r1, [pc, #80]	; (80021a8 <InitializaionCalibrationCommand+0x480>)
 8002156:	4815      	ldr	r0, [pc, #84]	; (80021ac <InitializaionCalibrationCommand+0x484>)
 8002158:	f00e fc7a 	bl	8010a50 <siprintf>
 800215c:	4603      	mov	r3, r0
 800215e:	b29a      	uxth	r2, r3
 8002160:	2364      	movs	r3, #100	; 0x64
 8002162:	4912      	ldr	r1, [pc, #72]	; (80021ac <InitializaionCalibrationCommand+0x484>)
 8002164:	4812      	ldr	r0, [pc, #72]	; (80021b0 <InitializaionCalibrationCommand+0x488>)
 8002166:	f007 fb09 	bl	800977c <HAL_UART_Transmit>
 800216a:	e00f      	b.n	800218c <InitializaionCalibrationCommand+0x464>
		} else {
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d};\n",PhaseCal[i]), 100);
 800216c:	4a15      	ldr	r2, [pc, #84]	; (80021c4 <InitializaionCalibrationCommand+0x49c>)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4413      	add	r3, r2
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	461a      	mov	r2, r3
 8002176:	490f      	ldr	r1, [pc, #60]	; (80021b4 <InitializaionCalibrationCommand+0x48c>)
 8002178:	480c      	ldr	r0, [pc, #48]	; (80021ac <InitializaionCalibrationCommand+0x484>)
 800217a:	f00e fc69 	bl	8010a50 <siprintf>
 800217e:	4603      	mov	r3, r0
 8002180:	b29a      	uxth	r2, r3
 8002182:	2364      	movs	r3, #100	; 0x64
 8002184:	4909      	ldr	r1, [pc, #36]	; (80021ac <InitializaionCalibrationCommand+0x484>)
 8002186:	480a      	ldr	r0, [pc, #40]	; (80021b0 <InitializaionCalibrationCommand+0x488>)
 8002188:	f007 faf8 	bl	800977c <HAL_UART_Transmit>
	for (int i = 0; i < NUM_SENSOR; i++){
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3301      	adds	r3, #1
 8002190:	607b      	str	r3, [r7, #4]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2b2f      	cmp	r3, #47	; 0x2f
 8002196:	ddd5      	ble.n	8002144 <InitializaionCalibrationCommand+0x41c>
		}
	}


}
 8002198:	bf00      	nop
 800219a:	bf00      	nop
 800219c:	3718      	adds	r7, #24
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	200068e8 	.word	0x200068e8
 80021a8:	08016038 	.word	0x08016038
 80021ac:	2000671c 	.word	0x2000671c
 80021b0:	200067a0 	.word	0x200067a0
 80021b4:	0801603c 	.word	0x0801603c
 80021b8:	08016044 	.word	0x08016044
 80021bc:	20006918 	.word	0x20006918
 80021c0:	0801606c 	.word	0x0801606c
 80021c4:	20006948 	.word	0x20006948

080021c8 <CalibrationCommand>:

void CalibrationCommand() {
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
}
 80021cc:	bf00      	nop
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
	...

080021d8 <SetSensorCommand>:
void AvgStdCommand() {
}
void SetSensorCommand(){
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "SetCommand\n\r"), 100);
 80021de:	49a2      	ldr	r1, [pc, #648]	; (8002468 <SetSensorCommand+0x290>)
 80021e0:	48a2      	ldr	r0, [pc, #648]	; (800246c <SetSensorCommand+0x294>)
 80021e2:	f00e fc35 	bl	8010a50 <siprintf>
 80021e6:	4603      	mov	r3, r0
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	2364      	movs	r3, #100	; 0x64
 80021ec:	499f      	ldr	r1, [pc, #636]	; (800246c <SetSensorCommand+0x294>)
 80021ee:	48a0      	ldr	r0, [pc, #640]	; (8002470 <SetSensorCommand+0x298>)
 80021f0:	f007 fac4 	bl	800977c <HAL_UART_Transmit>

	ResetAllDevices();
 80021f4:	f000 ff86 	bl	8003104 <ResetAllDevices>
  	for (int i = 0; i < NUM_SENSOR; i++) {
 80021f8:	2300      	movs	r3, #0
 80021fa:	607b      	str	r3, [r7, #4]
 80021fc:	e12b      	b.n	8002456 <SetSensorCommand+0x27e>
  	    uint8_t q = i / 12;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a9c      	ldr	r2, [pc, #624]	; (8002474 <SetSensorCommand+0x29c>)
 8002202:	fb82 1203 	smull	r1, r2, r2, r3
 8002206:	1052      	asrs	r2, r2, #1
 8002208:	17db      	asrs	r3, r3, #31
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	70fb      	strb	r3, [r7, #3]
  	    uint8_t r = i % 12;
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	4b98      	ldr	r3, [pc, #608]	; (8002474 <SetSensorCommand+0x29c>)
 8002212:	fb83 1302 	smull	r1, r3, r3, r2
 8002216:	1059      	asrs	r1, r3, #1
 8002218:	17d3      	asrs	r3, r2, #31
 800221a:	1ac9      	subs	r1, r1, r3
 800221c:	460b      	mov	r3, r1
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	440b      	add	r3, r1
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	1ad1      	subs	r1, r2, r3
 8002226:	460b      	mov	r3, r1
 8002228:	70bb      	strb	r3, [r7, #2]
  	    uint8_t active_device = q * 2 + (r >= 8 ? 1 : 0);
 800222a:	78fb      	ldrb	r3, [r7, #3]
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	b2db      	uxtb	r3, r3
 8002230:	78ba      	ldrb	r2, [r7, #2]
 8002232:	2a07      	cmp	r2, #7
 8002234:	bf8c      	ite	hi
 8002236:	2201      	movhi	r2, #1
 8002238:	2200      	movls	r2, #0
 800223a:	b2d2      	uxtb	r2, r2
 800223c:	4413      	add	r3, r2
 800223e:	707b      	strb	r3, [r7, #1]
  	    uint8_t channel = (r >= 8) ? r - 8 : r;
 8002240:	78bb      	ldrb	r3, [r7, #2]
 8002242:	2b07      	cmp	r3, #7
 8002244:	d903      	bls.n	800224e <SetSensorCommand+0x76>
 8002246:	78bb      	ldrb	r3, [r7, #2]
 8002248:	3b08      	subs	r3, #8
 800224a:	b2db      	uxtb	r3, r3
 800224c:	e000      	b.n	8002250 <SetSensorCommand+0x78>
 800224e:	78bb      	ldrb	r3, [r7, #2]
 8002250:	703b      	strb	r3, [r7, #0]

        ResetDevicesExcept(active_device);
 8002252:	787b      	ldrb	r3, [r7, #1]
 8002254:	4618      	mov	r0, r3
 8002256:	f000 ff81 	bl	800315c <ResetDevicesExcept>
        setActiveTcaChannel(active_device,channel);
 800225a:	783a      	ldrb	r2, [r7, #0]
 800225c:	787b      	ldrb	r3, [r7, #1]
 800225e:	4611      	mov	r1, r2
 8002260:	4618      	mov	r0, r3
 8002262:	f000 ffad 	bl	80031c0 <setActiveTcaChannel>

  		Dev = &vl53l0x_s[i];
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800226c:	fb02 f303 	mul.w	r3, r2, r3
 8002270:	4a81      	ldr	r2, [pc, #516]	; (8002478 <SetSensorCommand+0x2a0>)
 8002272:	4413      	add	r3, r2
 8002274:	4a81      	ldr	r2, [pc, #516]	; (800247c <SetSensorCommand+0x2a4>)
 8002276:	6013      	str	r3, [r2, #0]
  		Dev->I2cHandle = &hi2c1;
 8002278:	4b80      	ldr	r3, [pc, #512]	; (800247c <SetSensorCommand+0x2a4>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a80      	ldr	r2, [pc, #512]	; (8002480 <SetSensorCommand+0x2a8>)
 800227e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  		Dev->I2cDevAddr = VL53L0X_ADDR;
 8002282:	4b7e      	ldr	r3, [pc, #504]	; (800247c <SetSensorCommand+0x2a4>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2252      	movs	r2, #82	; 0x52
 8002288:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

  		VL53L0X_WaitDeviceBooted( Dev );
 800228c:	4b7b      	ldr	r3, [pc, #492]	; (800247c <SetSensorCommand+0x2a4>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4618      	mov	r0, r3
 8002292:	f008 ff95 	bl	800b1c0 <VL53L0X_WaitDeviceBooted>
  		VL53L0X_DataInit( Dev );
 8002296:	4b79      	ldr	r3, [pc, #484]	; (800247c <SetSensorCommand+0x2a4>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4618      	mov	r0, r3
 800229c:	f008 fcaa 	bl	800abf4 <VL53L0X_DataInit>
  		VL53L0X_StaticInit( Dev );
 80022a0:	4b76      	ldr	r3, [pc, #472]	; (800247c <SetSensorCommand+0x2a4>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f008 fe09 	bl	800aebc <VL53L0X_StaticInit>
  		VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 80022aa:	4b74      	ldr	r3, [pc, #464]	; (800247c <SetSensorCommand+0x2a4>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2101      	movs	r1, #1
 80022b0:	4618      	mov	r0, r3
 80022b2:	f009 f823 	bl	800b2fc <VL53L0X_SetDeviceMode>

		VL53L0X_SetReferenceSpads(Dev, refSpadCountHost[i], isApertureSpadsHost[i]);
 80022b6:	4b71      	ldr	r3, [pc, #452]	; (800247c <SetSensorCommand+0x2a4>)
 80022b8:	6818      	ldr	r0, [r3, #0]
 80022ba:	4a72      	ldr	r2, [pc, #456]	; (8002484 <SetSensorCommand+0x2ac>)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80022c2:	4a71      	ldr	r2, [pc, #452]	; (8002488 <SetSensorCommand+0x2b0>)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4413      	add	r3, r2
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	461a      	mov	r2, r3
 80022cc:	f00a f93e 	bl	800c54c <VL53L0X_SetReferenceSpads>
  		VL53L0X_SetRefCalibration(Dev, VhvSettingsHost[i], PhaseCalHost[i]);
 80022d0:	4b6a      	ldr	r3, [pc, #424]	; (800247c <SetSensorCommand+0x2a4>)
 80022d2:	6818      	ldr	r0, [r3, #0]
 80022d4:	4a6d      	ldr	r2, [pc, #436]	; (800248c <SetSensorCommand+0x2b4>)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4413      	add	r3, r2
 80022da:	7819      	ldrb	r1, [r3, #0]
 80022dc:	4a6c      	ldr	r2, [pc, #432]	; (8002490 <SetSensorCommand+0x2b8>)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4413      	add	r3, r2
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	461a      	mov	r2, r3
 80022e6:	f009 fa85 	bl	800b7f4 <VL53L0X_SetRefCalibration>


  		VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 80022ea:	4b64      	ldr	r3, [pc, #400]	; (800247c <SetSensorCommand+0x2a4>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2201      	movs	r2, #1
 80022f0:	2100      	movs	r1, #0
 80022f2:	4618      	mov	r0, r3
 80022f4:	f009 fa96 	bl	800b824 <VL53L0X_SetLimitCheckEnable>
  		VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 80022f8:	4b60      	ldr	r3, [pc, #384]	; (800247c <SetSensorCommand+0x2a4>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2201      	movs	r2, #1
 80022fe:	2101      	movs	r1, #1
 8002300:	4618      	mov	r0, r3
 8002302:	f009 fa8f 	bl	800b824 <VL53L0X_SetLimitCheckEnable>
  		VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 8002306:	4b5d      	ldr	r3, [pc, #372]	; (800247c <SetSensorCommand+0x2a4>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f641 1299 	movw	r2, #6553	; 0x1999
 800230e:	2101      	movs	r1, #1
 8002310:	4618      	mov	r0, r3
 8002312:	f009 fb37 	bl	800b984 <VL53L0X_SetLimitCheckValue>
  		VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 8002316:	4b59      	ldr	r3, [pc, #356]	; (800247c <SetSensorCommand+0x2a4>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800231e:	2100      	movs	r1, #0
 8002320:	4618      	mov	r0, r3
 8002322:	f009 fb2f 	bl	800b984 <VL53L0X_SetLimitCheckValue>
  		VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 33000);
 8002326:	4b55      	ldr	r3, [pc, #340]	; (800247c <SetSensorCommand+0x2a4>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f248 01e8 	movw	r1, #33000	; 0x80e8
 800232e:	4618      	mov	r0, r3
 8002330:	f009 f842 	bl	800b3b8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
  		VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 8002334:	4b51      	ldr	r3, [pc, #324]	; (800247c <SetSensorCommand+0x2a4>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2212      	movs	r2, #18
 800233a:	2100      	movs	r1, #0
 800233c:	4618      	mov	r0, r3
 800233e:	f009 f861 	bl	800b404 <VL53L0X_SetVcselPulsePeriod>
  		VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 8002342:	4b4e      	ldr	r3, [pc, #312]	; (800247c <SetSensorCommand+0x2a4>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	220e      	movs	r2, #14
 8002348:	2101      	movs	r1, #1
 800234a:	4618      	mov	r0, r3
 800234c:	f009 f85a 	bl	800b404 <VL53L0X_SetVcselPulsePeriod>

		Kalman_Init(&filters[i], Q, R, P, 0);  // Q, R, P, 초기값
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	4613      	mov	r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	4413      	add	r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	4a4e      	ldr	r2, [pc, #312]	; (8002494 <SetSensorCommand+0x2bc>)
 800235c:	4413      	add	r3, r2
 800235e:	4a4e      	ldr	r2, [pc, #312]	; (8002498 <SetSensorCommand+0x2c0>)
 8002360:	edd2 7a00 	vldr	s15, [r2]
 8002364:	4a4d      	ldr	r2, [pc, #308]	; (800249c <SetSensorCommand+0x2c4>)
 8002366:	ed92 7a00 	vldr	s14, [r2]
 800236a:	4a4d      	ldr	r2, [pc, #308]	; (80024a0 <SetSensorCommand+0x2c8>)
 800236c:	edd2 6a00 	vldr	s13, [r2]
 8002370:	eddf 1a4c 	vldr	s3, [pc, #304]	; 80024a4 <SetSensorCommand+0x2cc>
 8002374:	eeb0 1a66 	vmov.f32	s2, s13
 8002378:	eef0 0a47 	vmov.f32	s1, s14
 800237c:	eeb0 0a67 	vmov.f32	s0, s15
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff f97d 	bl	8001680 <Kalman_Init>

 		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%02d:(",i), 100);
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	4947      	ldr	r1, [pc, #284]	; (80024a8 <SetSensorCommand+0x2d0>)
 800238a:	4838      	ldr	r0, [pc, #224]	; (800246c <SetSensorCommand+0x294>)
 800238c:	f00e fb60 	bl	8010a50 <siprintf>
 8002390:	4603      	mov	r3, r0
 8002392:	b29a      	uxth	r2, r3
 8002394:	2364      	movs	r3, #100	; 0x64
 8002396:	4935      	ldr	r1, [pc, #212]	; (800246c <SetSensorCommand+0x294>)
 8002398:	4835      	ldr	r0, [pc, #212]	; (8002470 <SetSensorCommand+0x298>)
 800239a:	f007 f9ef 	bl	800977c <HAL_UART_Transmit>
 		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%02lu ",refSpadCountHost[i]), 100);
 800239e:	4a39      	ldr	r2, [pc, #228]	; (8002484 <SetSensorCommand+0x2ac>)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a6:	461a      	mov	r2, r3
 80023a8:	4940      	ldr	r1, [pc, #256]	; (80024ac <SetSensorCommand+0x2d4>)
 80023aa:	4830      	ldr	r0, [pc, #192]	; (800246c <SetSensorCommand+0x294>)
 80023ac:	f00e fb50 	bl	8010a50 <siprintf>
 80023b0:	4603      	mov	r3, r0
 80023b2:	b29a      	uxth	r2, r3
 80023b4:	2364      	movs	r3, #100	; 0x64
 80023b6:	492d      	ldr	r1, [pc, #180]	; (800246c <SetSensorCommand+0x294>)
 80023b8:	482d      	ldr	r0, [pc, #180]	; (8002470 <SetSensorCommand+0x298>)
 80023ba:	f007 f9df 	bl	800977c <HAL_UART_Transmit>
 		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%02d ",isApertureSpadsHost[i]), 100);
 80023be:	4a32      	ldr	r2, [pc, #200]	; (8002488 <SetSensorCommand+0x2b0>)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4413      	add	r3, r2
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	461a      	mov	r2, r3
 80023c8:	4939      	ldr	r1, [pc, #228]	; (80024b0 <SetSensorCommand+0x2d8>)
 80023ca:	4828      	ldr	r0, [pc, #160]	; (800246c <SetSensorCommand+0x294>)
 80023cc:	f00e fb40 	bl	8010a50 <siprintf>
 80023d0:	4603      	mov	r3, r0
 80023d2:	b29a      	uxth	r2, r3
 80023d4:	2364      	movs	r3, #100	; 0x64
 80023d6:	4925      	ldr	r1, [pc, #148]	; (800246c <SetSensorCommand+0x294>)
 80023d8:	4825      	ldr	r0, [pc, #148]	; (8002470 <SetSensorCommand+0x298>)
 80023da:	f007 f9cf 	bl	800977c <HAL_UART_Transmit>
 		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%02d ",VhvSettingsHost[i]), 100);
 80023de:	4a2b      	ldr	r2, [pc, #172]	; (800248c <SetSensorCommand+0x2b4>)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4413      	add	r3, r2
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	461a      	mov	r2, r3
 80023e8:	4931      	ldr	r1, [pc, #196]	; (80024b0 <SetSensorCommand+0x2d8>)
 80023ea:	4820      	ldr	r0, [pc, #128]	; (800246c <SetSensorCommand+0x294>)
 80023ec:	f00e fb30 	bl	8010a50 <siprintf>
 80023f0:	4603      	mov	r3, r0
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	2364      	movs	r3, #100	; 0x64
 80023f6:	491d      	ldr	r1, [pc, #116]	; (800246c <SetSensorCommand+0x294>)
 80023f8:	481d      	ldr	r0, [pc, #116]	; (8002470 <SetSensorCommand+0x298>)
 80023fa:	f007 f9bf 	bl	800977c <HAL_UART_Transmit>
 		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%02d) ",PhaseCalHost[i]), 100);
 80023fe:	4a24      	ldr	r2, [pc, #144]	; (8002490 <SetSensorCommand+0x2b8>)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4413      	add	r3, r2
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	461a      	mov	r2, r3
 8002408:	492a      	ldr	r1, [pc, #168]	; (80024b4 <SetSensorCommand+0x2dc>)
 800240a:	4818      	ldr	r0, [pc, #96]	; (800246c <SetSensorCommand+0x294>)
 800240c:	f00e fb20 	bl	8010a50 <siprintf>
 8002410:	4603      	mov	r3, r0
 8002412:	b29a      	uxth	r2, r3
 8002414:	2364      	movs	r3, #100	; 0x64
 8002416:	4915      	ldr	r1, [pc, #84]	; (800246c <SetSensorCommand+0x294>)
 8002418:	4815      	ldr	r0, [pc, #84]	; (8002470 <SetSensorCommand+0x298>)
 800241a:	f007 f9af 	bl	800977c <HAL_UART_Transmit>
 		if(i%12 ==11){HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n\r"), 100);}
 800241e:	6879      	ldr	r1, [r7, #4]
 8002420:	4b14      	ldr	r3, [pc, #80]	; (8002474 <SetSensorCommand+0x29c>)
 8002422:	fb83 2301 	smull	r2, r3, r3, r1
 8002426:	105a      	asrs	r2, r3, #1
 8002428:	17cb      	asrs	r3, r1, #31
 800242a:	1ad2      	subs	r2, r2, r3
 800242c:	4613      	mov	r3, r2
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	4413      	add	r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	1aca      	subs	r2, r1, r3
 8002436:	2a0b      	cmp	r2, #11
 8002438:	d10a      	bne.n	8002450 <SetSensorCommand+0x278>
 800243a:	491f      	ldr	r1, [pc, #124]	; (80024b8 <SetSensorCommand+0x2e0>)
 800243c:	480b      	ldr	r0, [pc, #44]	; (800246c <SetSensorCommand+0x294>)
 800243e:	f00e fb07 	bl	8010a50 <siprintf>
 8002442:	4603      	mov	r3, r0
 8002444:	b29a      	uxth	r2, r3
 8002446:	2364      	movs	r3, #100	; 0x64
 8002448:	4908      	ldr	r1, [pc, #32]	; (800246c <SetSensorCommand+0x294>)
 800244a:	4809      	ldr	r0, [pc, #36]	; (8002470 <SetSensorCommand+0x298>)
 800244c:	f007 f996 	bl	800977c <HAL_UART_Transmit>
  	for (int i = 0; i < NUM_SENSOR; i++) {
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3301      	adds	r3, #1
 8002454:	607b      	str	r3, [r7, #4]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2b2f      	cmp	r3, #47	; 0x2f
 800245a:	f77f aed0 	ble.w	80021fe <SetSensorCommand+0x26>

  	}
}
 800245e:	bf00      	nop
 8002460:	bf00      	nop
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	08016090 	.word	0x08016090
 800246c:	2000671c 	.word	0x2000671c
 8002470:	200067a0 	.word	0x200067a0
 8002474:	2aaaaaab 	.word	0x2aaaaaab
 8002478:	20006994 	.word	0x20006994
 800247c:	2000b494 	.word	0x2000b494
 8002480:	2000626c 	.word	0x2000626c
 8002484:	20000010 	.word	0x20000010
 8002488:	200000d0 	.word	0x200000d0
 800248c:	20000100 	.word	0x20000100
 8002490:	20000130 	.word	0x20000130
 8002494:	200062c0 	.word	0x200062c0
 8002498:	20000000 	.word	0x20000000
 800249c:	20000004 	.word	0x20000004
 80024a0:	20000008 	.word	0x20000008
 80024a4:	00000000 	.word	0x00000000
 80024a8:	080160a0 	.word	0x080160a0
 80024ac:	080160a8 	.word	0x080160a8
 80024b0:	08015fc8 	.word	0x08015fc8
 80024b4:	080160b0 	.word	0x080160b0
 80024b8:	08015fd0 	.word	0x08015fd0

080024bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024c0:	f000 fec9 	bl	8003256 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024c4:	f000 f836 	bl	8002534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024c8:	f7fe fee2 	bl	8001290 <MX_GPIO_Init>
  MX_I2C1_Init();
 80024cc:	f7ff f838 	bl	8001540 <MX_I2C1_Init>
  MX_TIM7_Init();
 80024d0:	f000 fc0e 	bl	8002cf0 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 80024d4:	f000 fcaa 	bl	8002e2c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80024d8:	f000 fb94 	bl	8002c04 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80024dc:	f000 f898 	bl	8002610 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 80024e0:	2100      	movs	r1, #0
 80024e2:	480f      	ldr	r0, [pc, #60]	; (8002520 <main+0x64>)
 80024e4:	f005 f992 	bl	800780c <HAL_TIM_PWM_Start>

  // Initialize the HX711
  HX711_Init();
 80024e8:	f7fe ff8a 	bl	8001400 <HX711_Init>

  /* UART interrupt initialization */
  HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "JH TACTS test\n\r"), 100);
 80024ec:	490d      	ldr	r1, [pc, #52]	; (8002524 <main+0x68>)
 80024ee:	480e      	ldr	r0, [pc, #56]	; (8002528 <main+0x6c>)
 80024f0:	f00e faae 	bl	8010a50 <siprintf>
 80024f4:	4603      	mov	r3, r0
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	2364      	movs	r3, #100	; 0x64
 80024fa:	490b      	ldr	r1, [pc, #44]	; (8002528 <main+0x6c>)
 80024fc:	480b      	ldr	r0, [pc, #44]	; (800252c <main+0x70>)
 80024fe:	f007 f93d 	bl	800977c <HAL_UART_Transmit>
  startMsg();
 8002502:	f000 fd7b 	bl	8002ffc <startMsg>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  if(ReceiveUartMessage(&huart1, rxMsg, sizeof(rxMsg)) == HAL_OK)
 8002506:	2241      	movs	r2, #65	; 0x41
 8002508:	4909      	ldr	r1, [pc, #36]	; (8002530 <main+0x74>)
 800250a:	4808      	ldr	r0, [pc, #32]	; (800252c <main+0x70>)
 800250c:	f000 fd40 	bl	8002f90 <ReceiveUartMessage>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1f7      	bne.n	8002506 <main+0x4a>
	  {
	      ProcessCommand(rxMsg);
 8002516:	4806      	ldr	r0, [pc, #24]	; (8002530 <main+0x74>)
 8002518:	f7ff f920 	bl	800175c <ProcessCommand>
	  if(ReceiveUartMessage(&huart1, rxMsg, sizeof(rxMsg)) == HAL_OK)
 800251c:	e7f3      	b.n	8002506 <main+0x4a>
 800251e:	bf00      	nop
 8002520:	20006684 	.word	0x20006684
 8002524:	080160b8 	.word	0x080160b8
 8002528:	2000671c 	.word	0x2000671c
 800252c:	200067a0 	.word	0x200067a0
 8002530:	2000675c 	.word	0x2000675c

08002534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b094      	sub	sp, #80	; 0x50
 8002538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800253a:	f107 0320 	add.w	r3, r7, #32
 800253e:	2230      	movs	r2, #48	; 0x30
 8002540:	2100      	movs	r1, #0
 8002542:	4618      	mov	r0, r3
 8002544:	f00d fbfc 	bl	800fd40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002548:	f107 030c 	add.w	r3, r7, #12
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	605a      	str	r2, [r3, #4]
 8002552:	609a      	str	r2, [r3, #8]
 8002554:	60da      	str	r2, [r3, #12]
 8002556:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002558:	4b2b      	ldr	r3, [pc, #172]	; (8002608 <SystemClock_Config+0xd4>)
 800255a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255c:	4a2a      	ldr	r2, [pc, #168]	; (8002608 <SystemClock_Config+0xd4>)
 800255e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002562:	6413      	str	r3, [r2, #64]	; 0x40
 8002564:	4b28      	ldr	r3, [pc, #160]	; (8002608 <SystemClock_Config+0xd4>)
 8002566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800256c:	60bb      	str	r3, [r7, #8]
 800256e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002570:	4b26      	ldr	r3, [pc, #152]	; (800260c <SystemClock_Config+0xd8>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a25      	ldr	r2, [pc, #148]	; (800260c <SystemClock_Config+0xd8>)
 8002576:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800257a:	6013      	str	r3, [r2, #0]
 800257c:	4b23      	ldr	r3, [pc, #140]	; (800260c <SystemClock_Config+0xd8>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002584:	607b      	str	r3, [r7, #4]
 8002586:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002588:	2301      	movs	r3, #1
 800258a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800258c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002590:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002592:	2302      	movs	r3, #2
 8002594:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002596:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800259a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800259c:	2319      	movs	r3, #25
 800259e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 80025a0:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80025a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80025a6:	2302      	movs	r3, #2
 80025a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80025aa:	2302      	movs	r3, #2
 80025ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025ae:	f107 0320 	add.w	r3, r7, #32
 80025b2:	4618      	mov	r0, r3
 80025b4:	f003 f900 	bl	80057b8 <HAL_RCC_OscConfig>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80025be:	f000 f863 	bl	8002688 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80025c2:	f003 f8a9 	bl	8005718 <HAL_PWREx_EnableOverDrive>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80025cc:	f000 f85c 	bl	8002688 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025d0:	230f      	movs	r3, #15
 80025d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025d4:	2302      	movs	r3, #2
 80025d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025d8:	2300      	movs	r3, #0
 80025da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80025dc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80025e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80025e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80025e8:	f107 030c 	add.w	r3, r7, #12
 80025ec:	2107      	movs	r1, #7
 80025ee:	4618      	mov	r0, r3
 80025f0:	f003 fc3c 	bl	8005e6c <HAL_RCC_ClockConfig>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <SystemClock_Config+0xca>
  {
    Error_Handler();
 80025fa:	f000 f845 	bl	8002688 <Error_Handler>
  }
}
 80025fe:	bf00      	nop
 8002600:	3750      	adds	r7, #80	; 0x50
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	40023800 	.word	0x40023800
 800260c:	40007000 	.word	0x40007000

08002610 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002614:	2200      	movs	r2, #0
 8002616:	2100      	movs	r1, #0
 8002618:	2025      	movs	r0, #37	; 0x25
 800261a:	f000 ff8d 	bl	8003538 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 800261e:	2025      	movs	r0, #37	; 0x25
 8002620:	f000 ffb6 	bl	8003590 <HAL_NVIC_EnableIRQ>
  /* I2C1_ER_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002624:	2200      	movs	r2, #0
 8002626:	2100      	movs	r1, #0
 8002628:	2020      	movs	r0, #32
 800262a:	f000 ff85 	bl	8003538 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800262e:	2020      	movs	r0, #32
 8002630:	f000 ffae 	bl	8003590 <HAL_NVIC_EnableIRQ>
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002634:	2200      	movs	r2, #0
 8002636:	2100      	movs	r1, #0
 8002638:	201f      	movs	r0, #31
 800263a:	f000 ff7d 	bl	8003538 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800263e:	201f      	movs	r0, #31
 8002640:	f000 ffa6 	bl	8003590 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002644:	2200      	movs	r2, #0
 8002646:	2100      	movs	r1, #0
 8002648:	2028      	movs	r0, #40	; 0x28
 800264a:	f000 ff75 	bl	8003538 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800264e:	2028      	movs	r0, #40	; 0x28
 8002650:	f000 ff9e 	bl	8003590 <HAL_NVIC_EnableIRQ>
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002654:	2200      	movs	r2, #0
 8002656:	2100      	movs	r1, #0
 8002658:	2017      	movs	r0, #23
 800265a:	f000 ff6d 	bl	8003538 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800265e:	2017      	movs	r0, #23
 8002660:	f000 ff96 	bl	8003590 <HAL_NVIC_EnableIRQ>
  /* TIM7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002664:	2200      	movs	r2, #0
 8002666:	2100      	movs	r1, #0
 8002668:	2037      	movs	r0, #55	; 0x37
 800266a:	f000 ff65 	bl	8003538 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800266e:	2037      	movs	r0, #55	; 0x37
 8002670:	f000 ff8e 	bl	8003590 <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002674:	2200      	movs	r2, #0
 8002676:	2100      	movs	r1, #0
 8002678:	201c      	movs	r0, #28
 800267a:	f000 ff5d 	bl	8003538 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800267e:	201c      	movs	r0, #28
 8002680:	f000 ff86 	bl	8003590 <HAL_NVIC_EnableIRQ>
}
 8002684:	bf00      	nop
 8002686:	bd80      	pop	{r7, pc}

08002688 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800268c:	b672      	cpsid	i
}
 800268e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002690:	e7fe      	b.n	8002690 <Error_Handler+0x8>

08002692 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8002692:	b480      	push	{r7}
 8002694:	b083      	sub	sp, #12
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
 800269a:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <stepRev>:
#include "tim.h"

#define PULSE 200
#define GEAR 139

void stepRev(int ANG) {
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b086      	sub	sp, #24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
	// ENA D2 PG7 GPIOG GPIO_PIN_6
	// CLK D3 PB4 GPIOB GPIO_PIN_4
	// DIR D4 PG7 GPIOG GPIO_PIN_7


  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);  // ENA
 80026b0:	2200      	movs	r2, #0
 80026b2:	2140      	movs	r1, #64	; 0x40
 80026b4:	482e      	ldr	r0, [pc, #184]	; (8002770 <stepRev+0xc8>)
 80026b6:	f001 fbbf 	bl	8003e38 <HAL_GPIO_WritePin>

  if (ANG != 0) {
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d04e      	beq.n	800275e <stepRev+0xb6>
    int direction = (ANG > 0) ? 1 : -1;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	dd01      	ble.n	80026ca <stepRev+0x22>
 80026c6:	2301      	movs	r3, #1
 80026c8:	e001      	b.n	80026ce <stepRev+0x26>
 80026ca:	f04f 33ff 	mov.w	r3, #4294967295
 80026ce:	613b      	str	r3, [r7, #16]
    ANG *= direction;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	fb02 f303 	mul.w	r3, r2, r3
 80026d8:	607b      	str	r3, [r7, #4]
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, direction == 1 ? GPIO_PIN_SET : GPIO_PIN_RESET); // DIR
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	bf0c      	ite	eq
 80026e0:	2301      	moveq	r3, #1
 80026e2:	2300      	movne	r3, #0
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	461a      	mov	r2, r3
 80026e8:	2180      	movs	r1, #128	; 0x80
 80026ea:	4821      	ldr	r0, [pc, #132]	; (8002770 <stepRev+0xc8>)
 80026ec:	f001 fba4 	bl	8003e38 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET); // ENA
 80026f0:	2200      	movs	r2, #0
 80026f2:	2140      	movs	r1, #64	; 0x40
 80026f4:	481e      	ldr	r0, [pc, #120]	; (8002770 <stepRev+0xc8>)
 80026f6:	f001 fb9f 	bl	8003e38 <HAL_GPIO_WritePin>
    uint32_t steps = PULSE * GEAR * ANG / 360.0;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f646 4298 	movw	r2, #27800	; 0x6c98
 8002700:	fb02 f303 	mul.w	r3, r2, r3
 8002704:	4618      	mov	r0, r3
 8002706:	f7fd ff3d 	bl	8000584 <__aeabi_i2d>
 800270a:	f04f 0200 	mov.w	r2, #0
 800270e:	4b19      	ldr	r3, [pc, #100]	; (8002774 <stepRev+0xcc>)
 8002710:	f7fe f8cc 	bl	80008ac <__aeabi_ddiv>
 8002714:	4602      	mov	r2, r0
 8002716:	460b      	mov	r3, r1
 8002718:	4610      	mov	r0, r2
 800271a:	4619      	mov	r1, r3
 800271c:	f7fe fa74 	bl	8000c08 <__aeabi_d2uiz>
 8002720:	4603      	mov	r3, r0
 8002722:	60fb      	str	r3, [r7, #12]
    uint32_t pulse_delay_ms_ = 1; // 6rpm
 8002724:	2301      	movs	r3, #1
 8002726:	60bb      	str	r3, [r7, #8]

    for (int i = 0; i < steps; i++) {
 8002728:	2300      	movs	r3, #0
 800272a:	617b      	str	r3, [r7, #20]
 800272c:	e012      	b.n	8002754 <stepRev+0xac>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET); //CLK
 800272e:	2201      	movs	r2, #1
 8002730:	2110      	movs	r1, #16
 8002732:	4811      	ldr	r0, [pc, #68]	; (8002778 <stepRev+0xd0>)
 8002734:	f001 fb80 	bl	8003e38 <HAL_GPIO_WritePin>
      HAL_Delay(pulse_delay_ms_);
 8002738:	68b8      	ldr	r0, [r7, #8]
 800273a:	f000 fde9 	bl	8003310 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); //CLK
 800273e:	2200      	movs	r2, #0
 8002740:	2110      	movs	r1, #16
 8002742:	480d      	ldr	r0, [pc, #52]	; (8002778 <stepRev+0xd0>)
 8002744:	f001 fb78 	bl	8003e38 <HAL_GPIO_WritePin>
      HAL_Delay(pulse_delay_ms_);
 8002748:	68b8      	ldr	r0, [r7, #8]
 800274a:	f000 fde1 	bl	8003310 <HAL_Delay>
    for (int i = 0; i < steps; i++) {
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	3301      	adds	r3, #1
 8002752:	617b      	str	r3, [r7, #20]
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	429a      	cmp	r2, r3
 800275a:	d8e8      	bhi.n	800272e <stepRev+0x86>
  }
  else {
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET); // ENA
  }

}
 800275c:	e004      	b.n	8002768 <stepRev+0xc0>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET); // ENA
 800275e:	2200      	movs	r2, #0
 8002760:	2140      	movs	r1, #64	; 0x40
 8002762:	4803      	ldr	r0, [pc, #12]	; (8002770 <stepRev+0xc8>)
 8002764:	f001 fb68 	bl	8003e38 <HAL_GPIO_WritePin>
}
 8002768:	bf00      	nop
 800276a:	3718      	adds	r7, #24
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	40021800 	.word	0x40021800
 8002774:	40768000 	.word	0x40768000
 8002778:	40020400 	.word	0x40020400

0800277c <stepLin>:

void stepLin(int DIST) {
 800277c:	b580      	push	{r7, lr}
 800277e:	b088      	sub	sp, #32
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]

	// ENA D5 PI0 GPIOI GPIO_PIN_0
	// CLK D8 PI2 GPIOI GPIO_PIN_2
	// DIR D7 PI3 GPIOI GPIO_PIN_3

	float ANG = DIST * 360.0 / 8; // 1 rev -> 8 mm
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f7fd fefd 	bl	8000584 <__aeabi_i2d>
 800278a:	f04f 0200 	mov.w	r2, #0
 800278e:	4b44      	ldr	r3, [pc, #272]	; (80028a0 <stepLin+0x124>)
 8002790:	f7fd ff62 	bl	8000658 <__aeabi_dmul>
 8002794:	4602      	mov	r2, r0
 8002796:	460b      	mov	r3, r1
 8002798:	4610      	mov	r0, r2
 800279a:	4619      	mov	r1, r3
 800279c:	f04f 0200 	mov.w	r2, #0
 80027a0:	4b40      	ldr	r3, [pc, #256]	; (80028a4 <stepLin+0x128>)
 80027a2:	f7fe f883 	bl	80008ac <__aeabi_ddiv>
 80027a6:	4602      	mov	r2, r0
 80027a8:	460b      	mov	r3, r1
 80027aa:	4610      	mov	r0, r2
 80027ac:	4619      	mov	r1, r3
 80027ae:	f7fe fa4b 	bl	8000c48 <__aeabi_d2f>
 80027b2:	4603      	mov	r3, r0
 80027b4:	61bb      	str	r3, [r7, #24]


  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);  // ENA
 80027b6:	2201      	movs	r2, #1
 80027b8:	2101      	movs	r1, #1
 80027ba:	483b      	ldr	r0, [pc, #236]	; (80028a8 <stepLin+0x12c>)
 80027bc:	f001 fb3c 	bl	8003e38 <HAL_GPIO_WritePin>

  if (ANG != 0) {
 80027c0:	edd7 7a06 	vldr	s15, [r7, #24]
 80027c4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80027c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027cc:	d05a      	beq.n	8002884 <stepLin+0x108>
    int direction = (ANG > 0) ? 1 : -1;
 80027ce:	edd7 7a06 	vldr	s15, [r7, #24]
 80027d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027da:	dd01      	ble.n	80027e0 <stepLin+0x64>
 80027dc:	2301      	movs	r3, #1
 80027de:	e001      	b.n	80027e4 <stepLin+0x68>
 80027e0:	f04f 33ff 	mov.w	r3, #4294967295
 80027e4:	617b      	str	r3, [r7, #20]
    ANG *= direction;
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	ee07 3a90 	vmov	s15, r3
 80027ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027f0:	ed97 7a06 	vldr	s14, [r7, #24]
 80027f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027f8:	edc7 7a06 	vstr	s15, [r7, #24]
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_3, direction == 1 ? GPIO_PIN_SET : GPIO_PIN_RESET); // DIR
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	bf0c      	ite	eq
 8002802:	2301      	moveq	r3, #1
 8002804:	2300      	movne	r3, #0
 8002806:	b2db      	uxtb	r3, r3
 8002808:	461a      	mov	r2, r3
 800280a:	2108      	movs	r1, #8
 800280c:	4826      	ldr	r0, [pc, #152]	; (80028a8 <stepLin+0x12c>)
 800280e:	f001 fb13 	bl	8003e38 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);  // ENA
 8002812:	2200      	movs	r2, #0
 8002814:	2101      	movs	r1, #1
 8002816:	4824      	ldr	r0, [pc, #144]	; (80028a8 <stepLin+0x12c>)
 8002818:	f001 fb0e 	bl	8003e38 <HAL_GPIO_WritePin>
    uint32_t steps = PULSE * ANG / 360.0;
 800281c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002820:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80028ac <stepLin+0x130>
 8002824:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002828:	ee17 0a90 	vmov	r0, s15
 800282c:	f7fd febc 	bl	80005a8 <__aeabi_f2d>
 8002830:	f04f 0200 	mov.w	r2, #0
 8002834:	4b1a      	ldr	r3, [pc, #104]	; (80028a0 <stepLin+0x124>)
 8002836:	f7fe f839 	bl	80008ac <__aeabi_ddiv>
 800283a:	4602      	mov	r2, r0
 800283c:	460b      	mov	r3, r1
 800283e:	4610      	mov	r0, r2
 8002840:	4619      	mov	r1, r3
 8002842:	f7fe f9e1 	bl	8000c08 <__aeabi_d2uiz>
 8002846:	4603      	mov	r3, r0
 8002848:	613b      	str	r3, [r7, #16]
    uint32_t pulse_delay_ms_ = 1; // 6rpm
 800284a:	2301      	movs	r3, #1
 800284c:	60fb      	str	r3, [r7, #12]

    for (int i = 0; i < steps; i++) {
 800284e:	2300      	movs	r3, #0
 8002850:	61fb      	str	r3, [r7, #28]
 8002852:	e012      	b.n	800287a <stepLin+0xfe>
      HAL_GPIO_WritePin(GPIOI, GPIO_PIN_2, GPIO_PIN_SET); // CLK
 8002854:	2201      	movs	r2, #1
 8002856:	2104      	movs	r1, #4
 8002858:	4813      	ldr	r0, [pc, #76]	; (80028a8 <stepLin+0x12c>)
 800285a:	f001 faed 	bl	8003e38 <HAL_GPIO_WritePin>
      HAL_Delay(pulse_delay_ms_);
 800285e:	68f8      	ldr	r0, [r7, #12]
 8002860:	f000 fd56 	bl	8003310 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOI, GPIO_PIN_2, GPIO_PIN_RESET); // CLK
 8002864:	2200      	movs	r2, #0
 8002866:	2104      	movs	r1, #4
 8002868:	480f      	ldr	r0, [pc, #60]	; (80028a8 <stepLin+0x12c>)
 800286a:	f001 fae5 	bl	8003e38 <HAL_GPIO_WritePin>
      HAL_Delay(pulse_delay_ms_);
 800286e:	68f8      	ldr	r0, [r7, #12]
 8002870:	f000 fd4e 	bl	8003310 <HAL_Delay>
    for (int i = 0; i < steps; i++) {
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	3301      	adds	r3, #1
 8002878:	61fb      	str	r3, [r7, #28]
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	429a      	cmp	r2, r3
 8002880:	d8e8      	bhi.n	8002854 <stepLin+0xd8>
 8002882:	e004      	b.n	800288e <stepLin+0x112>
    }
  }
  else {
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);  // ENA
 8002884:	2200      	movs	r2, #0
 8002886:	2101      	movs	r1, #1
 8002888:	4807      	ldr	r0, [pc, #28]	; (80028a8 <stepLin+0x12c>)
 800288a:	f001 fad5 	bl	8003e38 <HAL_GPIO_WritePin>
  }

  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);  // ENA
 800288e:	2201      	movs	r2, #1
 8002890:	2101      	movs	r1, #1
 8002892:	4805      	ldr	r0, [pc, #20]	; (80028a8 <stepLin+0x12c>)
 8002894:	f001 fad0 	bl	8003e38 <HAL_GPIO_WritePin>

}
 8002898:	bf00      	nop
 800289a:	3720      	adds	r7, #32
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	40768000 	.word	0x40768000
 80028a4:	40200000 	.word	0x40200000
 80028a8:	40022000 	.word	0x40022000
 80028ac:	43480000 	.word	0x43480000

080028b0 <servo_angle>:

void servo_angle(TIM_HandleTypeDef *htim, uint32_t channel, int step) {
 80028b0:	b480      	push	{r7}
 80028b2:	b087      	sub	sp, #28
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]

	// 1 step is 0.8 mm
    if (step > 17)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b11      	cmp	r3, #17
 80028c0:	dd01      	ble.n	80028c6 <servo_angle+0x16>
    	step = 17; // 최대 각도 제한
 80028c2:	2311      	movs	r3, #17
 80028c4:	607b      	str	r3, [r7, #4]

    int pulse_width = 21-step; // 듀티 사이클 계산 (0도에서 180도까지)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f1c3 0315 	rsb	r3, r3, #21
 80028cc:	617b      	str	r3, [r7, #20]
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d104      	bne.n	80028de <servo_angle+0x2e>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	697a      	ldr	r2, [r7, #20]
 80028da:	635a      	str	r2, [r3, #52]	; 0x34
}
 80028dc:	e023      	b.n	8002926 <servo_angle+0x76>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	2b04      	cmp	r3, #4
 80028e2:	d104      	bne.n	80028ee <servo_angle+0x3e>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	6393      	str	r3, [r2, #56]	; 0x38
}
 80028ec:	e01b      	b.n	8002926 <servo_angle+0x76>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	2b08      	cmp	r3, #8
 80028f2:	d104      	bne.n	80028fe <servo_angle+0x4e>
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80028fc:	e013      	b.n	8002926 <servo_angle+0x76>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	2b0c      	cmp	r3, #12
 8002902:	d104      	bne.n	800290e <servo_angle+0x5e>
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800290c:	e00b      	b.n	8002926 <servo_angle+0x76>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	2b10      	cmp	r3, #16
 8002912:	d104      	bne.n	800291e <servo_angle+0x6e>
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	6593      	str	r3, [r2, #88]	; 0x58
}
 800291c:	e003      	b.n	8002926 <servo_angle+0x76>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8002926:	bf00      	nop
 8002928:	371c      	adds	r7, #28
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
	...

08002934 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800293a:	4b0f      	ldr	r3, [pc, #60]	; (8002978 <HAL_MspInit+0x44>)
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	4a0e      	ldr	r2, [pc, #56]	; (8002978 <HAL_MspInit+0x44>)
 8002940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002944:	6413      	str	r3, [r2, #64]	; 0x40
 8002946:	4b0c      	ldr	r3, [pc, #48]	; (8002978 <HAL_MspInit+0x44>)
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800294e:	607b      	str	r3, [r7, #4]
 8002950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002952:	4b09      	ldr	r3, [pc, #36]	; (8002978 <HAL_MspInit+0x44>)
 8002954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002956:	4a08      	ldr	r2, [pc, #32]	; (8002978 <HAL_MspInit+0x44>)
 8002958:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800295c:	6453      	str	r3, [r2, #68]	; 0x44
 800295e:	4b06      	ldr	r3, [pc, #24]	; (8002978 <HAL_MspInit+0x44>)
 8002960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002966:	603b      	str	r3, [r7, #0]
 8002968:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800296a:	bf00      	nop
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	40023800 	.word	0x40023800

0800297c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002980:	e7fe      	b.n	8002980 <NMI_Handler+0x4>

08002982 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002982:	b480      	push	{r7}
 8002984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002986:	e7fe      	b.n	8002986 <HardFault_Handler+0x4>

08002988 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800298c:	e7fe      	b.n	800298c <MemManage_Handler+0x4>

0800298e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800298e:	b480      	push	{r7}
 8002990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002992:	e7fe      	b.n	8002992 <BusFault_Handler+0x4>

08002994 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002998:	e7fe      	b.n	8002998 <UsageFault_Handler+0x4>

0800299a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800299a:	b480      	push	{r7}
 800299c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800299e:	bf00      	nop
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029ac:	bf00      	nop
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029b6:	b480      	push	{r7}
 80029b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029ba:	bf00      	nop
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029c8:	f000 fc82 	bl	80032d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029cc:	bf00      	nop
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80029d4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80029d8:	f001 fa5a 	bl	8003e90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80029dc:	bf00      	nop
 80029de:	bd80      	pop	{r7, pc}

080029e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80029e4:	4802      	ldr	r0, [pc, #8]	; (80029f0 <TIM2_IRQHandler+0x10>)
 80029e6:	f005 f8db 	bl	8007ba0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80029ea:	bf00      	nop
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	20006684 	.word	0x20006684

080029f4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80029f8:	4802      	ldr	r0, [pc, #8]	; (8002a04 <I2C1_EV_IRQHandler+0x10>)
 80029fa:	f001 fd79 	bl	80044f0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80029fe:	bf00      	nop
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	2000626c 	.word	0x2000626c

08002a08 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002a0c:	4802      	ldr	r0, [pc, #8]	; (8002a18 <I2C1_ER_IRQHandler+0x10>)
 8002a0e:	f001 fd89 	bl	8004524 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002a12:	bf00      	nop
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	2000626c 	.word	0x2000626c

08002a1c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002a20:	4802      	ldr	r0, [pc, #8]	; (8002a2c <USART1_IRQHandler+0x10>)
 8002a22:	f006 fff3 	bl	8009a0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002a26:	bf00      	nop
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	200067a0 	.word	0x200067a0

08002a30 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002a34:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002a38:	f001 fa2a 	bl	8003e90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002a3c:	bf00      	nop
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002a44:	4802      	ldr	r0, [pc, #8]	; (8002a50 <TIM7_IRQHandler+0x10>)
 8002a46:	f005 f8ab 	bl	8007ba0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002a4a:	bf00      	nop
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	200066d0 	.word	0x200066d0

08002a54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  return 1;
 8002a58:	2301      	movs	r3, #1
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <_kill>:

int _kill(int pid, int sig)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a6e:	f00d f92f 	bl	800fcd0 <__errno>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2216      	movs	r2, #22
 8002a76:	601a      	str	r2, [r3, #0]
  return -1;
 8002a78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3708      	adds	r7, #8
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <_exit>:

void _exit (int status)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a8c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f7ff ffe7 	bl	8002a64 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a96:	e7fe      	b.n	8002a96 <_exit+0x12>

08002a98 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	617b      	str	r3, [r7, #20]
 8002aa8:	e00a      	b.n	8002ac0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002aaa:	f3af 8000 	nop.w
 8002aae:	4601      	mov	r1, r0
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	1c5a      	adds	r2, r3, #1
 8002ab4:	60ba      	str	r2, [r7, #8]
 8002ab6:	b2ca      	uxtb	r2, r1
 8002ab8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	3301      	adds	r3, #1
 8002abe:	617b      	str	r3, [r7, #20]
 8002ac0:	697a      	ldr	r2, [r7, #20]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	dbf0      	blt.n	8002aaa <_read+0x12>
  }

  return len;
 8002ac8:	687b      	ldr	r3, [r7, #4]
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3718      	adds	r7, #24
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b086      	sub	sp, #24
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	60f8      	str	r0, [r7, #12]
 8002ada:	60b9      	str	r1, [r7, #8]
 8002adc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ade:	2300      	movs	r3, #0
 8002ae0:	617b      	str	r3, [r7, #20]
 8002ae2:	e009      	b.n	8002af8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	1c5a      	adds	r2, r3, #1
 8002ae8:	60ba      	str	r2, [r7, #8]
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	3301      	adds	r3, #1
 8002af6:	617b      	str	r3, [r7, #20]
 8002af8:	697a      	ldr	r2, [r7, #20]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	dbf1      	blt.n	8002ae4 <_write+0x12>
  }
  return len;
 8002b00:	687b      	ldr	r3, [r7, #4]
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3718      	adds	r7, #24
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <_close>:

int _close(int file)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b083      	sub	sp, #12
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr

08002b22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b22:	b480      	push	{r7}
 8002b24:	b083      	sub	sp, #12
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
 8002b2a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b32:	605a      	str	r2, [r3, #4]
  return 0;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	370c      	adds	r7, #12
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr

08002b42 <_isatty>:

int _isatty(int file)
{
 8002b42:	b480      	push	{r7}
 8002b44:	b083      	sub	sp, #12
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b4a:	2301      	movs	r3, #1
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3714      	adds	r7, #20
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
	...

08002b74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b7c:	4a14      	ldr	r2, [pc, #80]	; (8002bd0 <_sbrk+0x5c>)
 8002b7e:	4b15      	ldr	r3, [pc, #84]	; (8002bd4 <_sbrk+0x60>)
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b88:	4b13      	ldr	r3, [pc, #76]	; (8002bd8 <_sbrk+0x64>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d102      	bne.n	8002b96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b90:	4b11      	ldr	r3, [pc, #68]	; (8002bd8 <_sbrk+0x64>)
 8002b92:	4a12      	ldr	r2, [pc, #72]	; (8002bdc <_sbrk+0x68>)
 8002b94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b96:	4b10      	ldr	r3, [pc, #64]	; (8002bd8 <_sbrk+0x64>)
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	693a      	ldr	r2, [r7, #16]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d207      	bcs.n	8002bb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ba4:	f00d f894 	bl	800fcd0 <__errno>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	220c      	movs	r2, #12
 8002bac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bae:	f04f 33ff 	mov.w	r3, #4294967295
 8002bb2:	e009      	b.n	8002bc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bb4:	4b08      	ldr	r3, [pc, #32]	; (8002bd8 <_sbrk+0x64>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bba:	4b07      	ldr	r3, [pc, #28]	; (8002bd8 <_sbrk+0x64>)
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	4a05      	ldr	r2, [pc, #20]	; (8002bd8 <_sbrk+0x64>)
 8002bc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3718      	adds	r7, #24
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	20050000 	.word	0x20050000
 8002bd4:	00000400 	.word	0x00000400
 8002bd8:	20006680 	.word	0x20006680
 8002bdc:	2000b4f0 	.word	0x2000b4f0

08002be0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002be4:	4b06      	ldr	r3, [pc, #24]	; (8002c00 <SystemInit+0x20>)
 8002be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bea:	4a05      	ldr	r2, [pc, #20]	; (8002c00 <SystemInit+0x20>)
 8002bec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bf4:	bf00      	nop
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	e000ed00 	.word	0xe000ed00

08002c04 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b08e      	sub	sp, #56	; 0x38
 8002c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c0e:	2200      	movs	r2, #0
 8002c10:	601a      	str	r2, [r3, #0]
 8002c12:	605a      	str	r2, [r3, #4]
 8002c14:	609a      	str	r2, [r3, #8]
 8002c16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c18:	f107 031c 	add.w	r3, r7, #28
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	605a      	str	r2, [r3, #4]
 8002c22:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c24:	463b      	mov	r3, r7
 8002c26:	2200      	movs	r2, #0
 8002c28:	601a      	str	r2, [r3, #0]
 8002c2a:	605a      	str	r2, [r3, #4]
 8002c2c:	609a      	str	r2, [r3, #8]
 8002c2e:	60da      	str	r2, [r3, #12]
 8002c30:	611a      	str	r2, [r3, #16]
 8002c32:	615a      	str	r2, [r3, #20]
 8002c34:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002c36:	4b2d      	ldr	r3, [pc, #180]	; (8002cec <MX_TIM2_Init+0xe8>)
 8002c38:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c3c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10800-1;
 8002c3e:	4b2b      	ldr	r3, [pc, #172]	; (8002cec <MX_TIM2_Init+0xe8>)
 8002c40:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8002c44:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c46:	4b29      	ldr	r3, [pc, #164]	; (8002cec <MX_TIM2_Init+0xe8>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50-1;
 8002c4c:	4b27      	ldr	r3, [pc, #156]	; (8002cec <MX_TIM2_Init+0xe8>)
 8002c4e:	2231      	movs	r2, #49	; 0x31
 8002c50:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c52:	4b26      	ldr	r3, [pc, #152]	; (8002cec <MX_TIM2_Init+0xe8>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c58:	4b24      	ldr	r3, [pc, #144]	; (8002cec <MX_TIM2_Init+0xe8>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002c5e:	4823      	ldr	r0, [pc, #140]	; (8002cec <MX_TIM2_Init+0xe8>)
 8002c60:	f004 fb8a 	bl	8007378 <HAL_TIM_Base_Init>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002c6a:	f7ff fd0d 	bl	8002688 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c72:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002c74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c78:	4619      	mov	r1, r3
 8002c7a:	481c      	ldr	r0, [pc, #112]	; (8002cec <MX_TIM2_Init+0xe8>)
 8002c7c:	f005 fb18 	bl	80082b0 <HAL_TIM_ConfigClockSource>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002c86:	f7ff fcff 	bl	8002688 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002c8a:	4818      	ldr	r0, [pc, #96]	; (8002cec <MX_TIM2_Init+0xe8>)
 8002c8c:	f004 fc94 	bl	80075b8 <HAL_TIM_PWM_Init>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002c96:	f7ff fcf7 	bl	8002688 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ca2:	f107 031c 	add.w	r3, r7, #28
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4810      	ldr	r0, [pc, #64]	; (8002cec <MX_TIM2_Init+0xe8>)
 8002caa:	f006 fb31 	bl	8009310 <HAL_TIMEx_MasterConfigSynchronization>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002cb4:	f7ff fce8 	bl	8002688 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002cb8:	2360      	movs	r3, #96	; 0x60
 8002cba:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002cc8:	463b      	mov	r3, r7
 8002cca:	2200      	movs	r2, #0
 8002ccc:	4619      	mov	r1, r3
 8002cce:	4807      	ldr	r0, [pc, #28]	; (8002cec <MX_TIM2_Init+0xe8>)
 8002cd0:	f005 f886 	bl	8007de0 <HAL_TIM_PWM_ConfigChannel>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002cda:	f7ff fcd5 	bl	8002688 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002cde:	4803      	ldr	r0, [pc, #12]	; (8002cec <MX_TIM2_Init+0xe8>)
 8002ce0:	f000 f86e 	bl	8002dc0 <HAL_TIM_MspPostInit>

}
 8002ce4:	bf00      	nop
 8002ce6:	3738      	adds	r7, #56	; 0x38
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	20006684 	.word	0x20006684

08002cf0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cf6:	1d3b      	adds	r3, r7, #4
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	601a      	str	r2, [r3, #0]
 8002cfc:	605a      	str	r2, [r3, #4]
 8002cfe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002d00:	4b14      	ldr	r3, [pc, #80]	; (8002d54 <MX_TIM7_Init+0x64>)
 8002d02:	4a15      	ldr	r2, [pc, #84]	; (8002d58 <MX_TIM7_Init+0x68>)
 8002d04:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10800-1;
 8002d06:	4b13      	ldr	r3, [pc, #76]	; (8002d54 <MX_TIM7_Init+0x64>)
 8002d08:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8002d0c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d0e:	4b11      	ldr	r3, [pc, #68]	; (8002d54 <MX_TIM7_Init+0x64>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 50-1;
 8002d14:	4b0f      	ldr	r3, [pc, #60]	; (8002d54 <MX_TIM7_Init+0x64>)
 8002d16:	2231      	movs	r2, #49	; 0x31
 8002d18:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d1a:	4b0e      	ldr	r3, [pc, #56]	; (8002d54 <MX_TIM7_Init+0x64>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002d20:	480c      	ldr	r0, [pc, #48]	; (8002d54 <MX_TIM7_Init+0x64>)
 8002d22:	f004 fb29 	bl	8007378 <HAL_TIM_Base_Init>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002d2c:	f7ff fcac 	bl	8002688 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d30:	2300      	movs	r3, #0
 8002d32:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d34:	2300      	movs	r3, #0
 8002d36:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002d38:	1d3b      	adds	r3, r7, #4
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	4805      	ldr	r0, [pc, #20]	; (8002d54 <MX_TIM7_Init+0x64>)
 8002d3e:	f006 fae7 	bl	8009310 <HAL_TIMEx_MasterConfigSynchronization>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002d48:	f7ff fc9e 	bl	8002688 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002d4c:	bf00      	nop
 8002d4e:	3710      	adds	r7, #16
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	200066d0 	.word	0x200066d0
 8002d58:	40001400 	.word	0x40001400

08002d5c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d6c:	d10c      	bne.n	8002d88 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d6e:	4b12      	ldr	r3, [pc, #72]	; (8002db8 <HAL_TIM_Base_MspInit+0x5c>)
 8002d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d72:	4a11      	ldr	r2, [pc, #68]	; (8002db8 <HAL_TIM_Base_MspInit+0x5c>)
 8002d74:	f043 0301 	orr.w	r3, r3, #1
 8002d78:	6413      	str	r3, [r2, #64]	; 0x40
 8002d7a:	4b0f      	ldr	r3, [pc, #60]	; (8002db8 <HAL_TIM_Base_MspInit+0x5c>)
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	60fb      	str	r3, [r7, #12]
 8002d84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8002d86:	e010      	b.n	8002daa <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM7)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a0b      	ldr	r2, [pc, #44]	; (8002dbc <HAL_TIM_Base_MspInit+0x60>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d10b      	bne.n	8002daa <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002d92:	4b09      	ldr	r3, [pc, #36]	; (8002db8 <HAL_TIM_Base_MspInit+0x5c>)
 8002d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d96:	4a08      	ldr	r2, [pc, #32]	; (8002db8 <HAL_TIM_Base_MspInit+0x5c>)
 8002d98:	f043 0320 	orr.w	r3, r3, #32
 8002d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d9e:	4b06      	ldr	r3, [pc, #24]	; (8002db8 <HAL_TIM_Base_MspInit+0x5c>)
 8002da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da2:	f003 0320 	and.w	r3, r3, #32
 8002da6:	60bb      	str	r3, [r7, #8]
 8002da8:	68bb      	ldr	r3, [r7, #8]
}
 8002daa:	bf00      	nop
 8002dac:	3714      	adds	r7, #20
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	40023800 	.word	0x40023800
 8002dbc:	40001400 	.word	0x40001400

08002dc0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b088      	sub	sp, #32
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dc8:	f107 030c 	add.w	r3, r7, #12
 8002dcc:	2200      	movs	r2, #0
 8002dce:	601a      	str	r2, [r3, #0]
 8002dd0:	605a      	str	r2, [r3, #4]
 8002dd2:	609a      	str	r2, [r3, #8]
 8002dd4:	60da      	str	r2, [r3, #12]
 8002dd6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002de0:	d11c      	bne.n	8002e1c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002de2:	4b10      	ldr	r3, [pc, #64]	; (8002e24 <HAL_TIM_MspPostInit+0x64>)
 8002de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de6:	4a0f      	ldr	r2, [pc, #60]	; (8002e24 <HAL_TIM_MspPostInit+0x64>)
 8002de8:	f043 0301 	orr.w	r3, r3, #1
 8002dec:	6313      	str	r3, [r2, #48]	; 0x30
 8002dee:	4b0d      	ldr	r3, [pc, #52]	; (8002e24 <HAL_TIM_MspPostInit+0x64>)
 8002df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	60bb      	str	r3, [r7, #8]
 8002df8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002dfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dfe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e00:	2302      	movs	r3, #2
 8002e02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e04:	2300      	movs	r3, #0
 8002e06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e10:	f107 030c 	add.w	r3, r7, #12
 8002e14:	4619      	mov	r1, r3
 8002e16:	4804      	ldr	r0, [pc, #16]	; (8002e28 <HAL_TIM_MspPostInit+0x68>)
 8002e18:	f000 fc7e 	bl	8003718 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002e1c:	bf00      	nop
 8002e1e:	3720      	adds	r7, #32
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	40023800 	.word	0x40023800
 8002e28:	40020000 	.word	0x40020000

08002e2c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002e30:	4b14      	ldr	r3, [pc, #80]	; (8002e84 <MX_USART1_UART_Init+0x58>)
 8002e32:	4a15      	ldr	r2, [pc, #84]	; (8002e88 <MX_USART1_UART_Init+0x5c>)
 8002e34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002e36:	4b13      	ldr	r3, [pc, #76]	; (8002e84 <MX_USART1_UART_Init+0x58>)
 8002e38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e3e:	4b11      	ldr	r3, [pc, #68]	; (8002e84 <MX_USART1_UART_Init+0x58>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002e44:	4b0f      	ldr	r3, [pc, #60]	; (8002e84 <MX_USART1_UART_Init+0x58>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002e4a:	4b0e      	ldr	r3, [pc, #56]	; (8002e84 <MX_USART1_UART_Init+0x58>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002e50:	4b0c      	ldr	r3, [pc, #48]	; (8002e84 <MX_USART1_UART_Init+0x58>)
 8002e52:	220c      	movs	r2, #12
 8002e54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e56:	4b0b      	ldr	r3, [pc, #44]	; (8002e84 <MX_USART1_UART_Init+0x58>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e5c:	4b09      	ldr	r3, [pc, #36]	; (8002e84 <MX_USART1_UART_Init+0x58>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e62:	4b08      	ldr	r3, [pc, #32]	; (8002e84 <MX_USART1_UART_Init+0x58>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e68:	4b06      	ldr	r3, [pc, #24]	; (8002e84 <MX_USART1_UART_Init+0x58>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e6e:	4805      	ldr	r0, [pc, #20]	; (8002e84 <MX_USART1_UART_Init+0x58>)
 8002e70:	f006 fbc4 	bl	80095fc <HAL_UART_Init>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002e7a:	f7ff fc05 	bl	8002688 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002e7e:	bf00      	nop
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	200067a0 	.word	0x200067a0
 8002e88:	40011000 	.word	0x40011000

08002e8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b0ac      	sub	sp, #176	; 0xb0
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e94:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002e98:	2200      	movs	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]
 8002e9c:	605a      	str	r2, [r3, #4]
 8002e9e:	609a      	str	r2, [r3, #8]
 8002ea0:	60da      	str	r2, [r3, #12]
 8002ea2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ea4:	f107 0318 	add.w	r3, r7, #24
 8002ea8:	2284      	movs	r2, #132	; 0x84
 8002eaa:	2100      	movs	r1, #0
 8002eac:	4618      	mov	r0, r3
 8002eae:	f00c ff47 	bl	800fd40 <memset>
  if(uartHandle->Instance==USART1)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a32      	ldr	r2, [pc, #200]	; (8002f80 <HAL_UART_MspInit+0xf4>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d15c      	bne.n	8002f76 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002ebc:	2340      	movs	r3, #64	; 0x40
 8002ebe:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ec4:	f107 0318 	add.w	r3, r7, #24
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f003 fa71 	bl	80063b0 <HAL_RCCEx_PeriphCLKConfig>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d001      	beq.n	8002ed8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002ed4:	f7ff fbd8 	bl	8002688 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ed8:	4b2a      	ldr	r3, [pc, #168]	; (8002f84 <HAL_UART_MspInit+0xf8>)
 8002eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002edc:	4a29      	ldr	r2, [pc, #164]	; (8002f84 <HAL_UART_MspInit+0xf8>)
 8002ede:	f043 0310 	orr.w	r3, r3, #16
 8002ee2:	6453      	str	r3, [r2, #68]	; 0x44
 8002ee4:	4b27      	ldr	r3, [pc, #156]	; (8002f84 <HAL_UART_MspInit+0xf8>)
 8002ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee8:	f003 0310 	and.w	r3, r3, #16
 8002eec:	617b      	str	r3, [r7, #20]
 8002eee:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ef0:	4b24      	ldr	r3, [pc, #144]	; (8002f84 <HAL_UART_MspInit+0xf8>)
 8002ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef4:	4a23      	ldr	r2, [pc, #140]	; (8002f84 <HAL_UART_MspInit+0xf8>)
 8002ef6:	f043 0302 	orr.w	r3, r3, #2
 8002efa:	6313      	str	r3, [r2, #48]	; 0x30
 8002efc:	4b21      	ldr	r3, [pc, #132]	; (8002f84 <HAL_UART_MspInit+0xf8>)
 8002efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	613b      	str	r3, [r7, #16]
 8002f06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f08:	4b1e      	ldr	r3, [pc, #120]	; (8002f84 <HAL_UART_MspInit+0xf8>)
 8002f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0c:	4a1d      	ldr	r2, [pc, #116]	; (8002f84 <HAL_UART_MspInit+0xf8>)
 8002f0e:	f043 0301 	orr.w	r3, r3, #1
 8002f12:	6313      	str	r3, [r2, #48]	; 0x30
 8002f14:	4b1b      	ldr	r3, [pc, #108]	; (8002f84 <HAL_UART_MspInit+0xf8>)
 8002f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f18:	f003 0301 	and.w	r3, r3, #1
 8002f1c:	60fb      	str	r3, [r7, #12]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002f20:	2380      	movs	r3, #128	; 0x80
 8002f22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f26:	2302      	movs	r3, #2
 8002f28:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f32:	2303      	movs	r3, #3
 8002f34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f38:	2307      	movs	r3, #7
 8002f3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f3e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002f42:	4619      	mov	r1, r3
 8002f44:	4810      	ldr	r0, [pc, #64]	; (8002f88 <HAL_UART_MspInit+0xfc>)
 8002f46:	f000 fbe7 	bl	8003718 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002f4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f52:	2302      	movs	r3, #2
 8002f54:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f64:	2307      	movs	r3, #7
 8002f66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f6a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002f6e:	4619      	mov	r1, r3
 8002f70:	4806      	ldr	r0, [pc, #24]	; (8002f8c <HAL_UART_MspInit+0x100>)
 8002f72:	f000 fbd1 	bl	8003718 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002f76:	bf00      	nop
 8002f78:	37b0      	adds	r7, #176	; 0xb0
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	40011000 	.word	0x40011000
 8002f84:	40023800 	.word	0x40023800
 8002f88:	40020400 	.word	0x40020400
 8002f8c:	40020000 	.word	0x40020000

08002f90 <ReceiveUartMessage>:
}

/* USER CODE BEGIN 1 */

HAL_StatusTypeDef ReceiveUartMessage(UART_HandleTypeDef *huart, uint8_t *buffer, uint16_t size)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b086      	sub	sp, #24
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	80fb      	strh	r3, [r7, #6]
    uint8_t receivedByte;
    uint16_t rxBufferIndex = 0;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	82fb      	strh	r3, [r7, #22]
    while(1)
    {
        if(HAL_UART_Receive(huart, &receivedByte, 1, 1000) == HAL_OK)
 8002fa2:	f107 0115 	add.w	r1, r7, #21
 8002fa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002faa:	2201      	movs	r2, #1
 8002fac:	68f8      	ldr	r0, [r7, #12]
 8002fae:	f006 fc68 	bl	8009882 <HAL_UART_Receive>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1f4      	bne.n	8002fa2 <ReceiveUartMessage+0x12>
        {
            if(receivedByte == '\n') // 종료 문자 감지
 8002fb8:	7d7b      	ldrb	r3, [r7, #21]
 8002fba:	2b0a      	cmp	r3, #10
 8002fbc:	d106      	bne.n	8002fcc <ReceiveUartMessage+0x3c>
            {
                buffer[rxBufferIndex] = '\0'; // 문자열의 끝을 표시
 8002fbe:	8afb      	ldrh	r3, [r7, #22]
 8002fc0:	68ba      	ldr	r2, [r7, #8]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	701a      	strb	r2, [r3, #0]
                return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	e012      	b.n	8002ff2 <ReceiveUartMessage+0x62>
            }
            else
            {
                buffer[rxBufferIndex] = receivedByte; // 문자 저장
 8002fcc:	8afb      	ldrh	r3, [r7, #22]
 8002fce:	68ba      	ldr	r2, [r7, #8]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	7d7a      	ldrb	r2, [r7, #21]
 8002fd4:	701a      	strb	r2, [r3, #0]
                rxBufferIndex++;
 8002fd6:	8afb      	ldrh	r3, [r7, #22]
 8002fd8:	3301      	adds	r3, #1
 8002fda:	82fb      	strh	r3, [r7, #22]
                if(rxBufferIndex >= size) // 버퍼 초과 방지
 8002fdc:	8afa      	ldrh	r2, [r7, #22]
 8002fde:	88fb      	ldrh	r3, [r7, #6]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d3de      	bcc.n	8002fa2 <ReceiveUartMessage+0x12>
                {
                    buffer[rxBufferIndex - 1] = '\0'; // 문자열의 끝을 표시
 8002fe4:	8afb      	ldrh	r3, [r7, #22]
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	68ba      	ldr	r2, [r7, #8]
 8002fea:	4413      	add	r3, r2
 8002fec:	2200      	movs	r2, #0
 8002fee:	701a      	strb	r2, [r3, #0]
                    return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
                }
            }
        }
    }
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3718      	adds	r7, #24
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
	...

08002ffc <startMsg>:

void startMsg(){
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "--------------------------------------------------------------\n"), 100);
 8003000:	4937      	ldr	r1, [pc, #220]	; (80030e0 <startMsg+0xe4>)
 8003002:	4838      	ldr	r0, [pc, #224]	; (80030e4 <startMsg+0xe8>)
 8003004:	f00d fd24 	bl	8010a50 <siprintf>
 8003008:	4603      	mov	r3, r0
 800300a:	b29a      	uxth	r2, r3
 800300c:	2364      	movs	r3, #100	; 0x64
 800300e:	4935      	ldr	r1, [pc, #212]	; (80030e4 <startMsg+0xe8>)
 8003010:	4835      	ldr	r0, [pc, #212]	; (80030e8 <startMsg+0xec>)
 8003012:	f006 fbb3 	bl	800977c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "--------------------------------------------------------------\n"), 100);
 8003016:	4932      	ldr	r1, [pc, #200]	; (80030e0 <startMsg+0xe4>)
 8003018:	4832      	ldr	r0, [pc, #200]	; (80030e4 <startMsg+0xe8>)
 800301a:	f00d fd19 	bl	8010a50 <siprintf>
 800301e:	4603      	mov	r3, r0
 8003020:	b29a      	uxth	r2, r3
 8003022:	2364      	movs	r3, #100	; 0x64
 8003024:	492f      	ldr	r1, [pc, #188]	; (80030e4 <startMsg+0xe8>)
 8003026:	4830      	ldr	r0, [pc, #192]	; (80030e8 <startMsg+0xec>)
 8003028:	f006 fba8 	bl	800977c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "----- Auto Data Logging Device for TACTS made by JaeHyeong----\n"), 100);
 800302c:	492f      	ldr	r1, [pc, #188]	; (80030ec <startMsg+0xf0>)
 800302e:	482d      	ldr	r0, [pc, #180]	; (80030e4 <startMsg+0xe8>)
 8003030:	f00d fd0e 	bl	8010a50 <siprintf>
 8003034:	4603      	mov	r3, r0
 8003036:	b29a      	uxth	r2, r3
 8003038:	2364      	movs	r3, #100	; 0x64
 800303a:	492a      	ldr	r1, [pc, #168]	; (80030e4 <startMsg+0xe8>)
 800303c:	482a      	ldr	r0, [pc, #168]	; (80030e8 <startMsg+0xec>)
 800303e:	f006 fb9d 	bl	800977c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "-----------rev XX : Rotaing Revolution Motor (Deg)------------\n"), 100);
 8003042:	492b      	ldr	r1, [pc, #172]	; (80030f0 <startMsg+0xf4>)
 8003044:	4827      	ldr	r0, [pc, #156]	; (80030e4 <startMsg+0xe8>)
 8003046:	f00d fd03 	bl	8010a50 <siprintf>
 800304a:	4603      	mov	r3, r0
 800304c:	b29a      	uxth	r2, r3
 800304e:	2364      	movs	r3, #100	; 0x64
 8003050:	4924      	ldr	r1, [pc, #144]	; (80030e4 <startMsg+0xe8>)
 8003052:	4825      	ldr	r0, [pc, #148]	; (80030e8 <startMsg+0xec>)
 8003054:	f006 fb92 	bl	800977c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "-----------lin XX : Moving Linear Motor (mm)------------------\n"), 100);
 8003058:	4926      	ldr	r1, [pc, #152]	; (80030f4 <startMsg+0xf8>)
 800305a:	4822      	ldr	r0, [pc, #136]	; (80030e4 <startMsg+0xe8>)
 800305c:	f00d fcf8 	bl	8010a50 <siprintf>
 8003060:	4603      	mov	r3, r0
 8003062:	b29a      	uxth	r2, r3
 8003064:	2364      	movs	r3, #100	; 0x64
 8003066:	491f      	ldr	r1, [pc, #124]	; (80030e4 <startMsg+0xe8>)
 8003068:	481f      	ldr	r0, [pc, #124]	; (80030e8 <startMsg+0xec>)
 800306a:	f006 fb87 	bl	800977c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "-----------servo XX : Poking XX * 0.8 (mm)--------------------\n"), 100);
 800306e:	4922      	ldr	r1, [pc, #136]	; (80030f8 <startMsg+0xfc>)
 8003070:	481c      	ldr	r0, [pc, #112]	; (80030e4 <startMsg+0xe8>)
 8003072:	f00d fced 	bl	8010a50 <siprintf>
 8003076:	4603      	mov	r3, r0
 8003078:	b29a      	uxth	r2, r3
 800307a:	2364      	movs	r3, #100	; 0x64
 800307c:	4919      	ldr	r1, [pc, #100]	; (80030e4 <startMsg+0xe8>)
 800307e:	481a      	ldr	r0, [pc, #104]	; (80030e8 <startMsg+0xec>)
 8003080:	f006 fb7c 	bl	800977c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "-----------auto : Poking point and data logging---------------\n"), 100);
 8003084:	491d      	ldr	r1, [pc, #116]	; (80030fc <startMsg+0x100>)
 8003086:	4817      	ldr	r0, [pc, #92]	; (80030e4 <startMsg+0xe8>)
 8003088:	f00d fce2 	bl	8010a50 <siprintf>
 800308c:	4603      	mov	r3, r0
 800308e:	b29a      	uxth	r2, r3
 8003090:	2364      	movs	r3, #100	; 0x64
 8003092:	4914      	ldr	r1, [pc, #80]	; (80030e4 <startMsg+0xe8>)
 8003094:	4814      	ldr	r0, [pc, #80]	; (80030e8 <startMsg+0xec>)
 8003096:	f006 fb71 	bl	800977c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "-------------------------testbed_axial------------------------\n"), 100);
 800309a:	4919      	ldr	r1, [pc, #100]	; (8003100 <startMsg+0x104>)
 800309c:	4811      	ldr	r0, [pc, #68]	; (80030e4 <startMsg+0xe8>)
 800309e:	f00d fcd7 	bl	8010a50 <siprintf>
 80030a2:	4603      	mov	r3, r0
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	2364      	movs	r3, #100	; 0x64
 80030a8:	490e      	ldr	r1, [pc, #56]	; (80030e4 <startMsg+0xe8>)
 80030aa:	480f      	ldr	r0, [pc, #60]	; (80030e8 <startMsg+0xec>)
 80030ac:	f006 fb66 	bl	800977c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "--------------------------------------------------------------\n"), 100);
 80030b0:	490b      	ldr	r1, [pc, #44]	; (80030e0 <startMsg+0xe4>)
 80030b2:	480c      	ldr	r0, [pc, #48]	; (80030e4 <startMsg+0xe8>)
 80030b4:	f00d fccc 	bl	8010a50 <siprintf>
 80030b8:	4603      	mov	r3, r0
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	2364      	movs	r3, #100	; 0x64
 80030be:	4909      	ldr	r1, [pc, #36]	; (80030e4 <startMsg+0xe8>)
 80030c0:	4809      	ldr	r0, [pc, #36]	; (80030e8 <startMsg+0xec>)
 80030c2:	f006 fb5b 	bl	800977c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "--------------------------------------------------------------\n"), 100);
 80030c6:	4906      	ldr	r1, [pc, #24]	; (80030e0 <startMsg+0xe4>)
 80030c8:	4806      	ldr	r0, [pc, #24]	; (80030e4 <startMsg+0xe8>)
 80030ca:	f00d fcc1 	bl	8010a50 <siprintf>
 80030ce:	4603      	mov	r3, r0
 80030d0:	b29a      	uxth	r2, r3
 80030d2:	2364      	movs	r3, #100	; 0x64
 80030d4:	4903      	ldr	r1, [pc, #12]	; (80030e4 <startMsg+0xe8>)
 80030d6:	4804      	ldr	r0, [pc, #16]	; (80030e8 <startMsg+0xec>)
 80030d8:	f006 fb50 	bl	800977c <HAL_UART_Transmit>
}
 80030dc:	bf00      	nop
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	080160c8 	.word	0x080160c8
 80030e4:	2000671c 	.word	0x2000671c
 80030e8:	200067a0 	.word	0x200067a0
 80030ec:	08016108 	.word	0x08016108
 80030f0:	08016148 	.word	0x08016148
 80030f4:	08016188 	.word	0x08016188
 80030f8:	080161c8 	.word	0x080161c8
 80030fc:	08016208 	.word	0x08016208
 8003100:	08016248 	.word	0x08016248

08003104 <ResetAllDevices>:
#elif NUM_SENSOR == 48
  uint8_t tca_addr[8] = {0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77};  // 4 line
  uint8_t tcaLength = 8;
#endif

void ResetAllDevices() {
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af02      	add	r7, sp, #8
  for (int j = 0; j < tcaLength; ++j) {
 800310a:	2300      	movs	r3, #0
 800310c:	607b      	str	r3, [r7, #4]
 800310e:	e011      	b.n	8003134 <ResetAllDevices+0x30>
	  HAL_I2C_Master_Transmit(&hi2c1, tca_addr[j] << 1, &tca_ch_reset, 1, 1000);
 8003110:	4a0e      	ldr	r2, [pc, #56]	; (800314c <ResetAllDevices+0x48>)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4413      	add	r3, r2
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	b29b      	uxth	r3, r3
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	b299      	uxth	r1, r3
 800311e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003122:	9300      	str	r3, [sp, #0]
 8003124:	2301      	movs	r3, #1
 8003126:	4a0a      	ldr	r2, [pc, #40]	; (8003150 <ResetAllDevices+0x4c>)
 8003128:	480a      	ldr	r0, [pc, #40]	; (8003154 <ResetAllDevices+0x50>)
 800312a:	f000 fff7 	bl	800411c <HAL_I2C_Master_Transmit>
  for (int j = 0; j < tcaLength; ++j) {
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	3301      	adds	r3, #1
 8003132:	607b      	str	r3, [r7, #4]
 8003134:	4b08      	ldr	r3, [pc, #32]	; (8003158 <ResetAllDevices+0x54>)
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	461a      	mov	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4293      	cmp	r3, r2
 800313e:	dbe7      	blt.n	8003110 <ResetAllDevices+0xc>
  }
}
 8003140:	bf00      	nop
 8003142:	bf00      	nop
 8003144:	3708      	adds	r7, #8
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	20000168 	.word	0x20000168
 8003150:	2000b498 	.word	0x2000b498
 8003154:	2000626c 	.word	0x2000626c
 8003158:	20000170 	.word	0x20000170

0800315c <ResetDevicesExcept>:

void ResetDevicesExcept(uint8_t active_device) {
 800315c:	b580      	push	{r7, lr}
 800315e:	b086      	sub	sp, #24
 8003160:	af02      	add	r7, sp, #8
 8003162:	4603      	mov	r3, r0
 8003164:	71fb      	strb	r3, [r7, #7]
    for (int j = 0; j < tcaLength; ++j) {
 8003166:	2300      	movs	r3, #0
 8003168:	60fb      	str	r3, [r7, #12]
 800316a:	e015      	b.n	8003198 <ResetDevicesExcept+0x3c>
        if (j != active_device) {
 800316c:	79fb      	ldrb	r3, [r7, #7]
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	429a      	cmp	r2, r3
 8003172:	d00e      	beq.n	8003192 <ResetDevicesExcept+0x36>
            HAL_I2C_Master_Transmit(&hi2c1, tca_addr[j] << 1, &tca_ch_reset, 1, 1000);
 8003174:	4a0e      	ldr	r2, [pc, #56]	; (80031b0 <ResetDevicesExcept+0x54>)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	4413      	add	r3, r2
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	b29b      	uxth	r3, r3
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	b299      	uxth	r1, r3
 8003182:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003186:	9300      	str	r3, [sp, #0]
 8003188:	2301      	movs	r3, #1
 800318a:	4a0a      	ldr	r2, [pc, #40]	; (80031b4 <ResetDevicesExcept+0x58>)
 800318c:	480a      	ldr	r0, [pc, #40]	; (80031b8 <ResetDevicesExcept+0x5c>)
 800318e:	f000 ffc5 	bl	800411c <HAL_I2C_Master_Transmit>
    for (int j = 0; j < tcaLength; ++j) {
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	3301      	adds	r3, #1
 8003196:	60fb      	str	r3, [r7, #12]
 8003198:	4b08      	ldr	r3, [pc, #32]	; (80031bc <ResetDevicesExcept+0x60>)
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	461a      	mov	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	4293      	cmp	r3, r2
 80031a2:	dbe3      	blt.n	800316c <ResetDevicesExcept+0x10>
        }
    }
}
 80031a4:	bf00      	nop
 80031a6:	bf00      	nop
 80031a8:	3710      	adds	r7, #16
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	20000168 	.word	0x20000168
 80031b4:	2000b498 	.word	0x2000b498
 80031b8:	2000626c 	.word	0x2000626c
 80031bc:	20000170 	.word	0x20000170

080031c0 <setActiveTcaChannel>:

void setActiveTcaChannel(uint8_t active_device, uint8_t channel){
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af02      	add	r7, sp, #8
 80031c6:	4603      	mov	r3, r0
 80031c8:	460a      	mov	r2, r1
 80031ca:	71fb      	strb	r3, [r7, #7]
 80031cc:	4613      	mov	r3, r2
 80031ce:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(&hi2c1, tca_addr[active_device] << 1, &tca_ch[channel], 1, 1000);
 80031d0:	79fb      	ldrb	r3, [r7, #7]
 80031d2:	4a09      	ldr	r2, [pc, #36]	; (80031f8 <setActiveTcaChannel+0x38>)
 80031d4:	5cd3      	ldrb	r3, [r2, r3]
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	b299      	uxth	r1, r3
 80031dc:	79bb      	ldrb	r3, [r7, #6]
 80031de:	4a07      	ldr	r2, [pc, #28]	; (80031fc <setActiveTcaChannel+0x3c>)
 80031e0:	441a      	add	r2, r3
 80031e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031e6:	9300      	str	r3, [sp, #0]
 80031e8:	2301      	movs	r3, #1
 80031ea:	4805      	ldr	r0, [pc, #20]	; (8003200 <setActiveTcaChannel+0x40>)
 80031ec:	f000 ff96 	bl	800411c <HAL_I2C_Master_Transmit>
}
 80031f0:	bf00      	nop
 80031f2:	3708      	adds	r7, #8
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	20000168 	.word	0x20000168
 80031fc:	20000160 	.word	0x20000160
 8003200:	2000626c 	.word	0x2000626c

08003204 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
 ldr   sp, =_estack      /* set stack pointer */
 8003204:	f8df d034 	ldr.w	sp, [pc, #52]	; 800323c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003208:	480d      	ldr	r0, [pc, #52]	; (8003240 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800320a:	490e      	ldr	r1, [pc, #56]	; (8003244 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800320c:	4a0e      	ldr	r2, [pc, #56]	; (8003248 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800320e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003210:	e002      	b.n	8003218 <LoopCopyDataInit>

08003212 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003212:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003214:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003216:	3304      	adds	r3, #4

08003218 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003218:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800321a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800321c:	d3f9      	bcc.n	8003212 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800321e:	4a0b      	ldr	r2, [pc, #44]	; (800324c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003220:	4c0b      	ldr	r4, [pc, #44]	; (8003250 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003222:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003224:	e001      	b.n	800322a <LoopFillZerobss>

08003226 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003226:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003228:	3204      	adds	r2, #4

0800322a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800322a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800322c:	d3fb      	bcc.n	8003226 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800322e:	f7ff fcd7 	bl	8002be0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003232:	f00c fd53 	bl	800fcdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003236:	f7ff f941 	bl	80024bc <main>
  bx  lr    
 800323a:	4770      	bx	lr
 ldr   sp, =_estack      /* set stack pointer */
 800323c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003240:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003244:	2000060c 	.word	0x2000060c
  ldr r2, =_sidata
 8003248:	08016a10 	.word	0x08016a10
  ldr r2, =_sbss
 800324c:	2000060c 	.word	0x2000060c
  ldr r4, =_ebss
 8003250:	2000b4f0 	.word	0x2000b4f0

08003254 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003254:	e7fe      	b.n	8003254 <ADC_IRQHandler>

08003256 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800325a:	2003      	movs	r0, #3
 800325c:	f000 f94c 	bl	80034f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003260:	200f      	movs	r0, #15
 8003262:	f000 f805 	bl	8003270 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003266:	f7ff fb65 	bl	8002934 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800326a:	2300      	movs	r3, #0
}
 800326c:	4618      	mov	r0, r3
 800326e:	bd80      	pop	{r7, pc}

08003270 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003278:	4b12      	ldr	r3, [pc, #72]	; (80032c4 <HAL_InitTick+0x54>)
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	4b12      	ldr	r3, [pc, #72]	; (80032c8 <HAL_InitTick+0x58>)
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	4619      	mov	r1, r3
 8003282:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003286:	fbb3 f3f1 	udiv	r3, r3, r1
 800328a:	fbb2 f3f3 	udiv	r3, r2, r3
 800328e:	4618      	mov	r0, r3
 8003290:	f000 f996 	bl	80035c0 <HAL_SYSTICK_Config>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e00e      	b.n	80032bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2b0f      	cmp	r3, #15
 80032a2:	d80a      	bhi.n	80032ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032a4:	2200      	movs	r2, #0
 80032a6:	6879      	ldr	r1, [r7, #4]
 80032a8:	f04f 30ff 	mov.w	r0, #4294967295
 80032ac:	f000 f944 	bl	8003538 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032b0:	4a06      	ldr	r2, [pc, #24]	; (80032cc <HAL_InitTick+0x5c>)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
 80032b8:	e000      	b.n	80032bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3708      	adds	r7, #8
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	2000000c 	.word	0x2000000c
 80032c8:	20000178 	.word	0x20000178
 80032cc:	20000174 	.word	0x20000174

080032d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032d4:	4b06      	ldr	r3, [pc, #24]	; (80032f0 <HAL_IncTick+0x20>)
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	461a      	mov	r2, r3
 80032da:	4b06      	ldr	r3, [pc, #24]	; (80032f4 <HAL_IncTick+0x24>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4413      	add	r3, r2
 80032e0:	4a04      	ldr	r2, [pc, #16]	; (80032f4 <HAL_IncTick+0x24>)
 80032e2:	6013      	str	r3, [r2, #0]
}
 80032e4:	bf00      	nop
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	20000178 	.word	0x20000178
 80032f4:	2000b49c 	.word	0x2000b49c

080032f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	af00      	add	r7, sp, #0
  return uwTick;
 80032fc:	4b03      	ldr	r3, [pc, #12]	; (800330c <HAL_GetTick+0x14>)
 80032fe:	681b      	ldr	r3, [r3, #0]
}
 8003300:	4618      	mov	r0, r3
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	2000b49c 	.word	0x2000b49c

08003310 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003318:	f7ff ffee 	bl	80032f8 <HAL_GetTick>
 800331c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003328:	d005      	beq.n	8003336 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800332a:	4b0a      	ldr	r3, [pc, #40]	; (8003354 <HAL_Delay+0x44>)
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	461a      	mov	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	4413      	add	r3, r2
 8003334:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003336:	bf00      	nop
 8003338:	f7ff ffde 	bl	80032f8 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	429a      	cmp	r2, r3
 8003346:	d8f7      	bhi.n	8003338 <HAL_Delay+0x28>
  {
  }
}
 8003348:	bf00      	nop
 800334a:	bf00      	nop
 800334c:	3710      	adds	r7, #16
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	20000178 	.word	0x20000178

08003358 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f003 0307 	and.w	r3, r3, #7
 8003366:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003368:	4b0b      	ldr	r3, [pc, #44]	; (8003398 <__NVIC_SetPriorityGrouping+0x40>)
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800336e:	68ba      	ldr	r2, [r7, #8]
 8003370:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003374:	4013      	ands	r3, r2
 8003376:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003380:	4b06      	ldr	r3, [pc, #24]	; (800339c <__NVIC_SetPriorityGrouping+0x44>)
 8003382:	4313      	orrs	r3, r2
 8003384:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003386:	4a04      	ldr	r2, [pc, #16]	; (8003398 <__NVIC_SetPriorityGrouping+0x40>)
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	60d3      	str	r3, [r2, #12]
}
 800338c:	bf00      	nop
 800338e:	3714      	adds	r7, #20
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr
 8003398:	e000ed00 	.word	0xe000ed00
 800339c:	05fa0000 	.word	0x05fa0000

080033a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033a4:	4b04      	ldr	r3, [pc, #16]	; (80033b8 <__NVIC_GetPriorityGrouping+0x18>)
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	0a1b      	lsrs	r3, r3, #8
 80033aa:	f003 0307 	and.w	r3, r3, #7
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr
 80033b8:	e000ed00 	.word	0xe000ed00

080033bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	4603      	mov	r3, r0
 80033c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	db0b      	blt.n	80033e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033ce:	79fb      	ldrb	r3, [r7, #7]
 80033d0:	f003 021f 	and.w	r2, r3, #31
 80033d4:	4907      	ldr	r1, [pc, #28]	; (80033f4 <__NVIC_EnableIRQ+0x38>)
 80033d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033da:	095b      	lsrs	r3, r3, #5
 80033dc:	2001      	movs	r0, #1
 80033de:	fa00 f202 	lsl.w	r2, r0, r2
 80033e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033e6:	bf00      	nop
 80033e8:	370c      	adds	r7, #12
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	e000e100 	.word	0xe000e100

080033f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	4603      	mov	r3, r0
 8003400:	6039      	str	r1, [r7, #0]
 8003402:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003408:	2b00      	cmp	r3, #0
 800340a:	db0a      	blt.n	8003422 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	b2da      	uxtb	r2, r3
 8003410:	490c      	ldr	r1, [pc, #48]	; (8003444 <__NVIC_SetPriority+0x4c>)
 8003412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003416:	0112      	lsls	r2, r2, #4
 8003418:	b2d2      	uxtb	r2, r2
 800341a:	440b      	add	r3, r1
 800341c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003420:	e00a      	b.n	8003438 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	b2da      	uxtb	r2, r3
 8003426:	4908      	ldr	r1, [pc, #32]	; (8003448 <__NVIC_SetPriority+0x50>)
 8003428:	79fb      	ldrb	r3, [r7, #7]
 800342a:	f003 030f 	and.w	r3, r3, #15
 800342e:	3b04      	subs	r3, #4
 8003430:	0112      	lsls	r2, r2, #4
 8003432:	b2d2      	uxtb	r2, r2
 8003434:	440b      	add	r3, r1
 8003436:	761a      	strb	r2, [r3, #24]
}
 8003438:	bf00      	nop
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr
 8003444:	e000e100 	.word	0xe000e100
 8003448:	e000ed00 	.word	0xe000ed00

0800344c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800344c:	b480      	push	{r7}
 800344e:	b089      	sub	sp, #36	; 0x24
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f003 0307 	and.w	r3, r3, #7
 800345e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	f1c3 0307 	rsb	r3, r3, #7
 8003466:	2b04      	cmp	r3, #4
 8003468:	bf28      	it	cs
 800346a:	2304      	movcs	r3, #4
 800346c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	3304      	adds	r3, #4
 8003472:	2b06      	cmp	r3, #6
 8003474:	d902      	bls.n	800347c <NVIC_EncodePriority+0x30>
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	3b03      	subs	r3, #3
 800347a:	e000      	b.n	800347e <NVIC_EncodePriority+0x32>
 800347c:	2300      	movs	r3, #0
 800347e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003480:	f04f 32ff 	mov.w	r2, #4294967295
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	fa02 f303 	lsl.w	r3, r2, r3
 800348a:	43da      	mvns	r2, r3
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	401a      	ands	r2, r3
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003494:	f04f 31ff 	mov.w	r1, #4294967295
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	fa01 f303 	lsl.w	r3, r1, r3
 800349e:	43d9      	mvns	r1, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034a4:	4313      	orrs	r3, r2
         );
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3724      	adds	r7, #36	; 0x24
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
	...

080034b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	3b01      	subs	r3, #1
 80034c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034c4:	d301      	bcc.n	80034ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034c6:	2301      	movs	r3, #1
 80034c8:	e00f      	b.n	80034ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034ca:	4a0a      	ldr	r2, [pc, #40]	; (80034f4 <SysTick_Config+0x40>)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	3b01      	subs	r3, #1
 80034d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034d2:	210f      	movs	r1, #15
 80034d4:	f04f 30ff 	mov.w	r0, #4294967295
 80034d8:	f7ff ff8e 	bl	80033f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034dc:	4b05      	ldr	r3, [pc, #20]	; (80034f4 <SysTick_Config+0x40>)
 80034de:	2200      	movs	r2, #0
 80034e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034e2:	4b04      	ldr	r3, [pc, #16]	; (80034f4 <SysTick_Config+0x40>)
 80034e4:	2207      	movs	r2, #7
 80034e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	e000e010 	.word	0xe000e010

080034f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2b07      	cmp	r3, #7
 8003504:	d00f      	beq.n	8003526 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2b06      	cmp	r3, #6
 800350a:	d00c      	beq.n	8003526 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b05      	cmp	r3, #5
 8003510:	d009      	beq.n	8003526 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2b04      	cmp	r3, #4
 8003516:	d006      	beq.n	8003526 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b03      	cmp	r3, #3
 800351c:	d003      	beq.n	8003526 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800351e:	2191      	movs	r1, #145	; 0x91
 8003520:	4804      	ldr	r0, [pc, #16]	; (8003534 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8003522:	f7ff f8b6 	bl	8002692 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f7ff ff16 	bl	8003358 <__NVIC_SetPriorityGrouping>
}
 800352c:	bf00      	nop
 800352e:	3708      	adds	r7, #8
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	08016288 	.word	0x08016288

08003538 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003538:	b580      	push	{r7, lr}
 800353a:	b086      	sub	sp, #24
 800353c:	af00      	add	r7, sp, #0
 800353e:	4603      	mov	r3, r0
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	607a      	str	r2, [r7, #4]
 8003544:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003546:	2300      	movs	r3, #0
 8003548:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2b0f      	cmp	r3, #15
 800354e:	d903      	bls.n	8003558 <HAL_NVIC_SetPriority+0x20>
 8003550:	21a9      	movs	r1, #169	; 0xa9
 8003552:	480e      	ldr	r0, [pc, #56]	; (800358c <HAL_NVIC_SetPriority+0x54>)
 8003554:	f7ff f89d 	bl	8002692 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	2b0f      	cmp	r3, #15
 800355c:	d903      	bls.n	8003566 <HAL_NVIC_SetPriority+0x2e>
 800355e:	21aa      	movs	r1, #170	; 0xaa
 8003560:	480a      	ldr	r0, [pc, #40]	; (800358c <HAL_NVIC_SetPriority+0x54>)
 8003562:	f7ff f896 	bl	8002692 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003566:	f7ff ff1b 	bl	80033a0 <__NVIC_GetPriorityGrouping>
 800356a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	68b9      	ldr	r1, [r7, #8]
 8003570:	6978      	ldr	r0, [r7, #20]
 8003572:	f7ff ff6b 	bl	800344c <NVIC_EncodePriority>
 8003576:	4602      	mov	r2, r0
 8003578:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800357c:	4611      	mov	r1, r2
 800357e:	4618      	mov	r0, r3
 8003580:	f7ff ff3a 	bl	80033f8 <__NVIC_SetPriority>
}
 8003584:	bf00      	nop
 8003586:	3718      	adds	r7, #24
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	08016288 	.word	0x08016288

08003590 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	4603      	mov	r3, r0
 8003598:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800359a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	da03      	bge.n	80035aa <HAL_NVIC_EnableIRQ+0x1a>
 80035a2:	21bd      	movs	r1, #189	; 0xbd
 80035a4:	4805      	ldr	r0, [pc, #20]	; (80035bc <HAL_NVIC_EnableIRQ+0x2c>)
 80035a6:	f7ff f874 	bl	8002692 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7ff ff04 	bl	80033bc <__NVIC_EnableIRQ>
}
 80035b4:	bf00      	nop
 80035b6:	3708      	adds	r7, #8
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	08016288 	.word	0x08016288

080035c0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f7ff ff73 	bl	80034b4 <SysTick_Config>
 80035ce:	4603      	mov	r3, r0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3708      	adds	r7, #8
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80035e6:	f7ff fe87 	bl	80032f8 <HAL_GetTick>
 80035ea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d008      	beq.n	800360a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2280      	movs	r2, #128	; 0x80
 80035fc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e052      	b.n	80036b0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f022 0216 	bic.w	r2, r2, #22
 8003618:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	695a      	ldr	r2, [r3, #20]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003628:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362e:	2b00      	cmp	r3, #0
 8003630:	d103      	bne.n	800363a <HAL_DMA_Abort+0x62>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003636:	2b00      	cmp	r3, #0
 8003638:	d007      	beq.n	800364a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f022 0208 	bic.w	r2, r2, #8
 8003648:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f022 0201 	bic.w	r2, r2, #1
 8003658:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800365a:	e013      	b.n	8003684 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800365c:	f7ff fe4c 	bl	80032f8 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b05      	cmp	r3, #5
 8003668:	d90c      	bls.n	8003684 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2220      	movs	r2, #32
 800366e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2203      	movs	r2, #3
 8003674:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e015      	b.n	80036b0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1e4      	bne.n	800365c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003696:	223f      	movs	r2, #63	; 0x3f
 8003698:	409a      	lsls	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3710      	adds	r7, #16
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d004      	beq.n	80036d6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2280      	movs	r2, #128	; 0x80
 80036d0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e00c      	b.n	80036f0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2205      	movs	r2, #5
 80036da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f022 0201 	bic.w	r2, r2, #1
 80036ec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800370a:	b2db      	uxtb	r3, r3
}
 800370c:	4618      	mov	r0, r3
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b088      	sub	sp, #32
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003722:	2300      	movs	r3, #0
 8003724:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003726:	2300      	movs	r3, #0
 8003728:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800372a:	2300      	movs	r3, #0
 800372c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800372e:	2300      	movs	r3, #0
 8003730:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a3a      	ldr	r2, [pc, #232]	; (8003820 <HAL_GPIO_Init+0x108>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d02b      	beq.n	8003792 <HAL_GPIO_Init+0x7a>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a39      	ldr	r2, [pc, #228]	; (8003824 <HAL_GPIO_Init+0x10c>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d027      	beq.n	8003792 <HAL_GPIO_Init+0x7a>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a38      	ldr	r2, [pc, #224]	; (8003828 <HAL_GPIO_Init+0x110>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d023      	beq.n	8003792 <HAL_GPIO_Init+0x7a>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a37      	ldr	r2, [pc, #220]	; (800382c <HAL_GPIO_Init+0x114>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d01f      	beq.n	8003792 <HAL_GPIO_Init+0x7a>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a36      	ldr	r2, [pc, #216]	; (8003830 <HAL_GPIO_Init+0x118>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d01b      	beq.n	8003792 <HAL_GPIO_Init+0x7a>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a35      	ldr	r2, [pc, #212]	; (8003834 <HAL_GPIO_Init+0x11c>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d017      	beq.n	8003792 <HAL_GPIO_Init+0x7a>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a34      	ldr	r2, [pc, #208]	; (8003838 <HAL_GPIO_Init+0x120>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d013      	beq.n	8003792 <HAL_GPIO_Init+0x7a>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a33      	ldr	r2, [pc, #204]	; (800383c <HAL_GPIO_Init+0x124>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d00f      	beq.n	8003792 <HAL_GPIO_Init+0x7a>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a32      	ldr	r2, [pc, #200]	; (8003840 <HAL_GPIO_Init+0x128>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d00b      	beq.n	8003792 <HAL_GPIO_Init+0x7a>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a31      	ldr	r2, [pc, #196]	; (8003844 <HAL_GPIO_Init+0x12c>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d007      	beq.n	8003792 <HAL_GPIO_Init+0x7a>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a30      	ldr	r2, [pc, #192]	; (8003848 <HAL_GPIO_Init+0x130>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d003      	beq.n	8003792 <HAL_GPIO_Init+0x7a>
 800378a:	21aa      	movs	r1, #170	; 0xaa
 800378c:	482f      	ldr	r0, [pc, #188]	; (800384c <HAL_GPIO_Init+0x134>)
 800378e:	f7fe ff80 	bl	8002692 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	b29b      	uxth	r3, r3
 8003798:	2b00      	cmp	r3, #0
 800379a:	d103      	bne.n	80037a4 <HAL_GPIO_Init+0x8c>
 800379c:	21ab      	movs	r1, #171	; 0xab
 800379e:	482b      	ldr	r0, [pc, #172]	; (800384c <HAL_GPIO_Init+0x134>)
 80037a0:	f7fe ff77 	bl	8002692 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d035      	beq.n	8003818 <HAL_GPIO_Init+0x100>
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d031      	beq.n	8003818 <HAL_GPIO_Init+0x100>
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	2b11      	cmp	r3, #17
 80037ba:	d02d      	beq.n	8003818 <HAL_GPIO_Init+0x100>
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d029      	beq.n	8003818 <HAL_GPIO_Init+0x100>
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	2b12      	cmp	r3, #18
 80037ca:	d025      	beq.n	8003818 <HAL_GPIO_Init+0x100>
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 80037d4:	d020      	beq.n	8003818 <HAL_GPIO_Init+0x100>
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80037de:	d01b      	beq.n	8003818 <HAL_GPIO_Init+0x100>
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 80037e8:	d016      	beq.n	8003818 <HAL_GPIO_Init+0x100>
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 80037f2:	d011      	beq.n	8003818 <HAL_GPIO_Init+0x100>
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 80037fc:	d00c      	beq.n	8003818 <HAL_GPIO_Init+0x100>
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8003806:	d007      	beq.n	8003818 <HAL_GPIO_Init+0x100>
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	2b03      	cmp	r3, #3
 800380e:	d003      	beq.n	8003818 <HAL_GPIO_Init+0x100>
 8003810:	21ac      	movs	r1, #172	; 0xac
 8003812:	480e      	ldr	r0, [pc, #56]	; (800384c <HAL_GPIO_Init+0x134>)
 8003814:	f7fe ff3d 	bl	8002692 <assert_failed>

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003818:	2300      	movs	r3, #0
 800381a:	61fb      	str	r3, [r7, #28]
 800381c:	e2c7      	b.n	8003dae <HAL_GPIO_Init+0x696>
 800381e:	bf00      	nop
 8003820:	40020000 	.word	0x40020000
 8003824:	40020400 	.word	0x40020400
 8003828:	40020800 	.word	0x40020800
 800382c:	40020c00 	.word	0x40020c00
 8003830:	40021000 	.word	0x40021000
 8003834:	40021400 	.word	0x40021400
 8003838:	40021800 	.word	0x40021800
 800383c:	40021c00 	.word	0x40021c00
 8003840:	40022000 	.word	0x40022000
 8003844:	40022400 	.word	0x40022400
 8003848:	40022800 	.word	0x40022800
 800384c:	080162c4 	.word	0x080162c4
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003850:	2201      	movs	r2, #1
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	fa02 f303 	lsl.w	r3, r2, r3
 8003858:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	697a      	ldr	r2, [r7, #20]
 8003860:	4013      	ands	r3, r2
 8003862:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	429a      	cmp	r2, r3
 800386a:	f040 829d 	bne.w	8003da8 <HAL_GPIO_Init+0x690>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f003 0303 	and.w	r3, r3, #3
 8003876:	2b01      	cmp	r3, #1
 8003878:	d005      	beq.n	8003886 <HAL_GPIO_Init+0x16e>
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f003 0303 	and.w	r3, r3, #3
 8003882:	2b02      	cmp	r3, #2
 8003884:	d144      	bne.n	8003910 <HAL_GPIO_Init+0x1f8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00f      	beq.n	80038ae <HAL_GPIO_Init+0x196>
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d00b      	beq.n	80038ae <HAL_GPIO_Init+0x196>
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	2b02      	cmp	r3, #2
 800389c:	d007      	beq.n	80038ae <HAL_GPIO_Init+0x196>
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	2b03      	cmp	r3, #3
 80038a4:	d003      	beq.n	80038ae <HAL_GPIO_Init+0x196>
 80038a6:	21bd      	movs	r1, #189	; 0xbd
 80038a8:	4831      	ldr	r0, [pc, #196]	; (8003970 <HAL_GPIO_Init+0x258>)
 80038aa:	f7fe fef2 	bl	8002692 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	005b      	lsls	r3, r3, #1
 80038b8:	2203      	movs	r2, #3
 80038ba:	fa02 f303 	lsl.w	r3, r2, r3
 80038be:	43db      	mvns	r3, r3
 80038c0:	69ba      	ldr	r2, [r7, #24]
 80038c2:	4013      	ands	r3, r2
 80038c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	68da      	ldr	r2, [r3, #12]
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	fa02 f303 	lsl.w	r3, r2, r3
 80038d2:	69ba      	ldr	r2, [r7, #24]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	69ba      	ldr	r2, [r7, #24]
 80038dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038e4:	2201      	movs	r2, #1
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ec:	43db      	mvns	r3, r3
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	4013      	ands	r3, r2
 80038f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	091b      	lsrs	r3, r3, #4
 80038fa:	f003 0201 	and.w	r2, r3, #1
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	fa02 f303 	lsl.w	r3, r2, r3
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	4313      	orrs	r3, r2
 8003908:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f003 0303 	and.w	r3, r3, #3
 8003918:	2b03      	cmp	r3, #3
 800391a:	d02b      	beq.n	8003974 <HAL_GPIO_Init+0x25c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d00b      	beq.n	800393c <HAL_GPIO_Init+0x224>
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d007      	beq.n	800393c <HAL_GPIO_Init+0x224>
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	2b02      	cmp	r3, #2
 8003932:	d003      	beq.n	800393c <HAL_GPIO_Init+0x224>
 8003934:	21ce      	movs	r1, #206	; 0xce
 8003936:	480e      	ldr	r0, [pc, #56]	; (8003970 <HAL_GPIO_Init+0x258>)
 8003938:	f7fe feab 	bl	8002692 <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	005b      	lsls	r3, r3, #1
 8003946:	2203      	movs	r2, #3
 8003948:	fa02 f303 	lsl.w	r3, r2, r3
 800394c:	43db      	mvns	r3, r3
 800394e:	69ba      	ldr	r2, [r7, #24]
 8003950:	4013      	ands	r3, r2
 8003952:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	689a      	ldr	r2, [r3, #8]
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	005b      	lsls	r3, r3, #1
 800395c:	fa02 f303 	lsl.w	r3, r2, r3
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	4313      	orrs	r3, r2
 8003964:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	60da      	str	r2, [r3, #12]
 800396c:	e002      	b.n	8003974 <HAL_GPIO_Init+0x25c>
 800396e:	bf00      	nop
 8003970:	080162c4 	.word	0x080162c4
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f003 0303 	and.w	r3, r3, #3
 800397c:	2b02      	cmp	r3, #2
 800397e:	f040 8134 	bne.w	8003bea <HAL_GPIO_Init+0x4d2>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	2b00      	cmp	r3, #0
 8003988:	f000 810b 	beq.w	8003ba2 <HAL_GPIO_Init+0x48a>
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	691b      	ldr	r3, [r3, #16]
 8003990:	2b01      	cmp	r3, #1
 8003992:	f000 8106 	beq.w	8003ba2 <HAL_GPIO_Init+0x48a>
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	2b00      	cmp	r3, #0
 800399c:	f000 8101 	beq.w	8003ba2 <HAL_GPIO_Init+0x48a>
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f000 80fc 	beq.w	8003ba2 <HAL_GPIO_Init+0x48a>
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	f000 80f7 	beq.w	8003ba2 <HAL_GPIO_Init+0x48a>
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	691b      	ldr	r3, [r3, #16]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	f000 80f2 	beq.w	8003ba2 <HAL_GPIO_Init+0x48a>
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	f000 80ed 	beq.w	8003ba2 <HAL_GPIO_Init+0x48a>
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	f000 80e8 	beq.w	8003ba2 <HAL_GPIO_Init+0x48a>
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	f000 80e3 	beq.w	8003ba2 <HAL_GPIO_Init+0x48a>
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	2b03      	cmp	r3, #3
 80039e2:	f000 80de 	beq.w	8003ba2 <HAL_GPIO_Init+0x48a>
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	2b03      	cmp	r3, #3
 80039ec:	f000 80d9 	beq.w	8003ba2 <HAL_GPIO_Init+0x48a>
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	691b      	ldr	r3, [r3, #16]
 80039f4:	2b03      	cmp	r3, #3
 80039f6:	f000 80d4 	beq.w	8003ba2 <HAL_GPIO_Init+0x48a>
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	2b03      	cmp	r3, #3
 8003a00:	f000 80cf 	beq.w	8003ba2 <HAL_GPIO_Init+0x48a>
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	2b03      	cmp	r3, #3
 8003a0a:	f000 80ca 	beq.w	8003ba2 <HAL_GPIO_Init+0x48a>
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	2b03      	cmp	r3, #3
 8003a14:	f000 80c5 	beq.w	8003ba2 <HAL_GPIO_Init+0x48a>
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	2b04      	cmp	r3, #4
 8003a1e:	f000 80c0 	beq.w	8003ba2 <HAL_GPIO_Init+0x48a>
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	2b04      	cmp	r3, #4
 8003a28:	f000 80bb 	beq.w	8003ba2 <HAL_GPIO_Init+0x48a>
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	2b04      	cmp	r3, #4
 8003a32:	f000 80b6 	beq.w	8003ba2 <HAL_GPIO_Init+0x48a>
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	2b04      	cmp	r3, #4
 8003a3c:	f000 80b1 	beq.w	8003ba2 <HAL_GPIO_Init+0x48a>
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	691b      	ldr	r3, [r3, #16]
 8003a44:	2b04      	cmp	r3, #4
 8003a46:	f000 80ac 	beq.w	8003ba2 <HAL_GPIO_Init+0x48a>
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	2b05      	cmp	r3, #5
 8003a50:	f000 80a7 	beq.w	8003ba2 <HAL_GPIO_Init+0x48a>
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	2b05      	cmp	r3, #5
 8003a5a:	f000 80a2 	beq.w	8003ba2 <HAL_GPIO_Init+0x48a>
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	2b05      	cmp	r3, #5
 8003a64:	f000 809d 	beq.w	8003ba2 <HAL_GPIO_Init+0x48a>
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	2b05      	cmp	r3, #5
 8003a6e:	f000 8098 	beq.w	8003ba2 <HAL_GPIO_Init+0x48a>
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	2b05      	cmp	r3, #5
 8003a78:	f000 8093 	beq.w	8003ba2 <HAL_GPIO_Init+0x48a>
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	2b05      	cmp	r3, #5
 8003a82:	f000 808e 	beq.w	8003ba2 <HAL_GPIO_Init+0x48a>
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	2b06      	cmp	r3, #6
 8003a8c:	f000 8089 	beq.w	8003ba2 <HAL_GPIO_Init+0x48a>
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	2b06      	cmp	r3, #6
 8003a96:	f000 8084 	beq.w	8003ba2 <HAL_GPIO_Init+0x48a>
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	2b07      	cmp	r3, #7
 8003aa0:	d07f      	beq.n	8003ba2 <HAL_GPIO_Init+0x48a>
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	2b07      	cmp	r3, #7
 8003aa8:	d07b      	beq.n	8003ba2 <HAL_GPIO_Init+0x48a>
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	2b07      	cmp	r3, #7
 8003ab0:	d077      	beq.n	8003ba2 <HAL_GPIO_Init+0x48a>
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	2b07      	cmp	r3, #7
 8003ab8:	d073      	beq.n	8003ba2 <HAL_GPIO_Init+0x48a>
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	2b07      	cmp	r3, #7
 8003ac0:	d06f      	beq.n	8003ba2 <HAL_GPIO_Init+0x48a>
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	2b07      	cmp	r3, #7
 8003ac8:	d06b      	beq.n	8003ba2 <HAL_GPIO_Init+0x48a>
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	2b07      	cmp	r3, #7
 8003ad0:	d067      	beq.n	8003ba2 <HAL_GPIO_Init+0x48a>
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	2b08      	cmp	r3, #8
 8003ad8:	d063      	beq.n	8003ba2 <HAL_GPIO_Init+0x48a>
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	2b08      	cmp	r3, #8
 8003ae0:	d05f      	beq.n	8003ba2 <HAL_GPIO_Init+0x48a>
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	2b08      	cmp	r3, #8
 8003ae8:	d05b      	beq.n	8003ba2 <HAL_GPIO_Init+0x48a>
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	2b08      	cmp	r3, #8
 8003af0:	d057      	beq.n	8003ba2 <HAL_GPIO_Init+0x48a>
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	2b08      	cmp	r3, #8
 8003af8:	d053      	beq.n	8003ba2 <HAL_GPIO_Init+0x48a>
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	2b08      	cmp	r3, #8
 8003b00:	d04f      	beq.n	8003ba2 <HAL_GPIO_Init+0x48a>
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	2b08      	cmp	r3, #8
 8003b08:	d04b      	beq.n	8003ba2 <HAL_GPIO_Init+0x48a>
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	2b09      	cmp	r3, #9
 8003b10:	d047      	beq.n	8003ba2 <HAL_GPIO_Init+0x48a>
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	2b09      	cmp	r3, #9
 8003b18:	d043      	beq.n	8003ba2 <HAL_GPIO_Init+0x48a>
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	2b09      	cmp	r3, #9
 8003b20:	d03f      	beq.n	8003ba2 <HAL_GPIO_Init+0x48a>
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	2b09      	cmp	r3, #9
 8003b28:	d03b      	beq.n	8003ba2 <HAL_GPIO_Init+0x48a>
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	2b09      	cmp	r3, #9
 8003b30:	d037      	beq.n	8003ba2 <HAL_GPIO_Init+0x48a>
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	2b09      	cmp	r3, #9
 8003b38:	d033      	beq.n	8003ba2 <HAL_GPIO_Init+0x48a>
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	2b09      	cmp	r3, #9
 8003b40:	d02f      	beq.n	8003ba2 <HAL_GPIO_Init+0x48a>
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	2b0a      	cmp	r3, #10
 8003b48:	d02b      	beq.n	8003ba2 <HAL_GPIO_Init+0x48a>
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	2b0a      	cmp	r3, #10
 8003b50:	d027      	beq.n	8003ba2 <HAL_GPIO_Init+0x48a>
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	2b0a      	cmp	r3, #10
 8003b58:	d023      	beq.n	8003ba2 <HAL_GPIO_Init+0x48a>
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	2b0a      	cmp	r3, #10
 8003b60:	d01f      	beq.n	8003ba2 <HAL_GPIO_Init+0x48a>
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	2b0b      	cmp	r3, #11
 8003b68:	d01b      	beq.n	8003ba2 <HAL_GPIO_Init+0x48a>
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	2b0c      	cmp	r3, #12
 8003b70:	d017      	beq.n	8003ba2 <HAL_GPIO_Init+0x48a>
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	2b0c      	cmp	r3, #12
 8003b78:	d013      	beq.n	8003ba2 <HAL_GPIO_Init+0x48a>
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	2b0c      	cmp	r3, #12
 8003b80:	d00f      	beq.n	8003ba2 <HAL_GPIO_Init+0x48a>
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	2b0f      	cmp	r3, #15
 8003b88:	d00b      	beq.n	8003ba2 <HAL_GPIO_Init+0x48a>
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	2b0d      	cmp	r3, #13
 8003b90:	d007      	beq.n	8003ba2 <HAL_GPIO_Init+0x48a>
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	2b0e      	cmp	r3, #14
 8003b98:	d003      	beq.n	8003ba2 <HAL_GPIO_Init+0x48a>
 8003b9a:	21db      	movs	r1, #219	; 0xdb
 8003b9c:	4888      	ldr	r0, [pc, #544]	; (8003dc0 <HAL_GPIO_Init+0x6a8>)
 8003b9e:	f7fe fd78 	bl	8002692 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	08da      	lsrs	r2, r3, #3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	3208      	adds	r2, #8
 8003baa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	f003 0307 	and.w	r3, r3, #7
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	220f      	movs	r2, #15
 8003bba:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbe:	43db      	mvns	r3, r3
 8003bc0:	69ba      	ldr	r2, [r7, #24]
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	691a      	ldr	r2, [r3, #16]
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	f003 0307 	and.w	r3, r3, #7
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd6:	69ba      	ldr	r2, [r7, #24]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	08da      	lsrs	r2, r3, #3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	3208      	adds	r2, #8
 8003be4:	69b9      	ldr	r1, [r7, #24]
 8003be6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	005b      	lsls	r3, r3, #1
 8003bf4:	2203      	movs	r2, #3
 8003bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfa:	43db      	mvns	r3, r3
 8003bfc:	69ba      	ldr	r2, [r7, #24]
 8003bfe:	4013      	ands	r3, r2
 8003c00:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f003 0203 	and.w	r2, r3, #3
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	005b      	lsls	r3, r3, #1
 8003c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c12:	69ba      	ldr	r2, [r7, #24]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	69ba      	ldr	r2, [r7, #24]
 8003c1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	f000 80be 	beq.w	8003da8 <HAL_GPIO_Init+0x690>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c2c:	4b65      	ldr	r3, [pc, #404]	; (8003dc4 <HAL_GPIO_Init+0x6ac>)
 8003c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c30:	4a64      	ldr	r2, [pc, #400]	; (8003dc4 <HAL_GPIO_Init+0x6ac>)
 8003c32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c36:	6453      	str	r3, [r2, #68]	; 0x44
 8003c38:	4b62      	ldr	r3, [pc, #392]	; (8003dc4 <HAL_GPIO_Init+0x6ac>)
 8003c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c40:	60fb      	str	r3, [r7, #12]
 8003c42:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003c44:	4a60      	ldr	r2, [pc, #384]	; (8003dc8 <HAL_GPIO_Init+0x6b0>)
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	089b      	lsrs	r3, r3, #2
 8003c4a:	3302      	adds	r3, #2
 8003c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c50:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	f003 0303 	and.w	r3, r3, #3
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	220f      	movs	r2, #15
 8003c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c60:	43db      	mvns	r3, r3
 8003c62:	69ba      	ldr	r2, [r7, #24]
 8003c64:	4013      	ands	r3, r2
 8003c66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4a58      	ldr	r2, [pc, #352]	; (8003dcc <HAL_GPIO_Init+0x6b4>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d037      	beq.n	8003ce0 <HAL_GPIO_Init+0x5c8>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	4a57      	ldr	r2, [pc, #348]	; (8003dd0 <HAL_GPIO_Init+0x6b8>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d031      	beq.n	8003cdc <HAL_GPIO_Init+0x5c4>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a56      	ldr	r2, [pc, #344]	; (8003dd4 <HAL_GPIO_Init+0x6bc>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d02b      	beq.n	8003cd8 <HAL_GPIO_Init+0x5c0>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4a55      	ldr	r2, [pc, #340]	; (8003dd8 <HAL_GPIO_Init+0x6c0>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d025      	beq.n	8003cd4 <HAL_GPIO_Init+0x5bc>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a54      	ldr	r2, [pc, #336]	; (8003ddc <HAL_GPIO_Init+0x6c4>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d01f      	beq.n	8003cd0 <HAL_GPIO_Init+0x5b8>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a53      	ldr	r2, [pc, #332]	; (8003de0 <HAL_GPIO_Init+0x6c8>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d019      	beq.n	8003ccc <HAL_GPIO_Init+0x5b4>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a52      	ldr	r2, [pc, #328]	; (8003de4 <HAL_GPIO_Init+0x6cc>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d013      	beq.n	8003cc8 <HAL_GPIO_Init+0x5b0>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a51      	ldr	r2, [pc, #324]	; (8003de8 <HAL_GPIO_Init+0x6d0>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d00d      	beq.n	8003cc4 <HAL_GPIO_Init+0x5ac>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a50      	ldr	r2, [pc, #320]	; (8003dec <HAL_GPIO_Init+0x6d4>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d007      	beq.n	8003cc0 <HAL_GPIO_Init+0x5a8>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a4f      	ldr	r2, [pc, #316]	; (8003df0 <HAL_GPIO_Init+0x6d8>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d101      	bne.n	8003cbc <HAL_GPIO_Init+0x5a4>
 8003cb8:	2309      	movs	r3, #9
 8003cba:	e012      	b.n	8003ce2 <HAL_GPIO_Init+0x5ca>
 8003cbc:	230a      	movs	r3, #10
 8003cbe:	e010      	b.n	8003ce2 <HAL_GPIO_Init+0x5ca>
 8003cc0:	2308      	movs	r3, #8
 8003cc2:	e00e      	b.n	8003ce2 <HAL_GPIO_Init+0x5ca>
 8003cc4:	2307      	movs	r3, #7
 8003cc6:	e00c      	b.n	8003ce2 <HAL_GPIO_Init+0x5ca>
 8003cc8:	2306      	movs	r3, #6
 8003cca:	e00a      	b.n	8003ce2 <HAL_GPIO_Init+0x5ca>
 8003ccc:	2305      	movs	r3, #5
 8003cce:	e008      	b.n	8003ce2 <HAL_GPIO_Init+0x5ca>
 8003cd0:	2304      	movs	r3, #4
 8003cd2:	e006      	b.n	8003ce2 <HAL_GPIO_Init+0x5ca>
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e004      	b.n	8003ce2 <HAL_GPIO_Init+0x5ca>
 8003cd8:	2302      	movs	r3, #2
 8003cda:	e002      	b.n	8003ce2 <HAL_GPIO_Init+0x5ca>
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e000      	b.n	8003ce2 <HAL_GPIO_Init+0x5ca>
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	69fa      	ldr	r2, [r7, #28]
 8003ce4:	f002 0203 	and.w	r2, r2, #3
 8003ce8:	0092      	lsls	r2, r2, #2
 8003cea:	4093      	lsls	r3, r2
 8003cec:	69ba      	ldr	r2, [r7, #24]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003cf2:	4935      	ldr	r1, [pc, #212]	; (8003dc8 <HAL_GPIO_Init+0x6b0>)
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	089b      	lsrs	r3, r3, #2
 8003cf8:	3302      	adds	r3, #2
 8003cfa:	69ba      	ldr	r2, [r7, #24]
 8003cfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d00:	4b3c      	ldr	r3, [pc, #240]	; (8003df4 <HAL_GPIO_Init+0x6dc>)
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	43db      	mvns	r3, r3
 8003d0a:	69ba      	ldr	r2, [r7, #24]
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d003      	beq.n	8003d24 <HAL_GPIO_Init+0x60c>
        {
          temp |= iocurrent;
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d24:	4a33      	ldr	r2, [pc, #204]	; (8003df4 <HAL_GPIO_Init+0x6dc>)
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d2a:	4b32      	ldr	r3, [pc, #200]	; (8003df4 <HAL_GPIO_Init+0x6dc>)
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	43db      	mvns	r3, r3
 8003d34:	69ba      	ldr	r2, [r7, #24]
 8003d36:	4013      	ands	r3, r2
 8003d38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d003      	beq.n	8003d4e <HAL_GPIO_Init+0x636>
        {
          temp |= iocurrent;
 8003d46:	69ba      	ldr	r2, [r7, #24]
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d4e:	4a29      	ldr	r2, [pc, #164]	; (8003df4 <HAL_GPIO_Init+0x6dc>)
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d54:	4b27      	ldr	r3, [pc, #156]	; (8003df4 <HAL_GPIO_Init+0x6dc>)
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	43db      	mvns	r3, r3
 8003d5e:	69ba      	ldr	r2, [r7, #24]
 8003d60:	4013      	ands	r3, r2
 8003d62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d003      	beq.n	8003d78 <HAL_GPIO_Init+0x660>
        {
          temp |= iocurrent;
 8003d70:	69ba      	ldr	r2, [r7, #24]
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d78:	4a1e      	ldr	r2, [pc, #120]	; (8003df4 <HAL_GPIO_Init+0x6dc>)
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d7e:	4b1d      	ldr	r3, [pc, #116]	; (8003df4 <HAL_GPIO_Init+0x6dc>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	43db      	mvns	r3, r3
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d003      	beq.n	8003da2 <HAL_GPIO_Init+0x68a>
        {
          temp |= iocurrent;
 8003d9a:	69ba      	ldr	r2, [r7, #24]
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003da2:	4a14      	ldr	r2, [pc, #80]	; (8003df4 <HAL_GPIO_Init+0x6dc>)
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	3301      	adds	r3, #1
 8003dac:	61fb      	str	r3, [r7, #28]
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	2b0f      	cmp	r3, #15
 8003db2:	f67f ad4d 	bls.w	8003850 <HAL_GPIO_Init+0x138>
      }
    }
  }
}
 8003db6:	bf00      	nop
 8003db8:	bf00      	nop
 8003dba:	3720      	adds	r7, #32
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	080162c4 	.word	0x080162c4
 8003dc4:	40023800 	.word	0x40023800
 8003dc8:	40013800 	.word	0x40013800
 8003dcc:	40020000 	.word	0x40020000
 8003dd0:	40020400 	.word	0x40020400
 8003dd4:	40020800 	.word	0x40020800
 8003dd8:	40020c00 	.word	0x40020c00
 8003ddc:	40021000 	.word	0x40021000
 8003de0:	40021400 	.word	0x40021400
 8003de4:	40021800 	.word	0x40021800
 8003de8:	40021c00 	.word	0x40021c00
 8003dec:	40022000 	.word	0x40022000
 8003df0:	40022400 	.word	0x40022400
 8003df4:	40013c00 	.word	0x40013c00

08003df8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	460b      	mov	r3, r1
 8003e02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003e04:	887b      	ldrh	r3, [r7, #2]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d104      	bne.n	8003e14 <HAL_GPIO_ReadPin+0x1c>
 8003e0a:	f240 1177 	movw	r1, #375	; 0x177
 8003e0e:	4809      	ldr	r0, [pc, #36]	; (8003e34 <HAL_GPIO_ReadPin+0x3c>)
 8003e10:	f7fe fc3f 	bl	8002692 <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	691a      	ldr	r2, [r3, #16]
 8003e18:	887b      	ldrh	r3, [r7, #2]
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d002      	beq.n	8003e26 <HAL_GPIO_ReadPin+0x2e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e20:	2301      	movs	r3, #1
 8003e22:	73fb      	strb	r3, [r7, #15]
 8003e24:	e001      	b.n	8003e2a <HAL_GPIO_ReadPin+0x32>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e26:	2300      	movs	r3, #0
 8003e28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3710      	adds	r7, #16
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	080162c4 	.word	0x080162c4

08003e38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	460b      	mov	r3, r1
 8003e42:	807b      	strh	r3, [r7, #2]
 8003e44:	4613      	mov	r3, r2
 8003e46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003e48:	887b      	ldrh	r3, [r7, #2]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d104      	bne.n	8003e58 <HAL_GPIO_WritePin+0x20>
 8003e4e:	f240 1197 	movw	r1, #407	; 0x197
 8003e52:	480e      	ldr	r0, [pc, #56]	; (8003e8c <HAL_GPIO_WritePin+0x54>)
 8003e54:	f7fe fc1d 	bl	8002692 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003e58:	787b      	ldrb	r3, [r7, #1]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d007      	beq.n	8003e6e <HAL_GPIO_WritePin+0x36>
 8003e5e:	787b      	ldrb	r3, [r7, #1]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d004      	beq.n	8003e6e <HAL_GPIO_WritePin+0x36>
 8003e64:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8003e68:	4808      	ldr	r0, [pc, #32]	; (8003e8c <HAL_GPIO_WritePin+0x54>)
 8003e6a:	f7fe fc12 	bl	8002692 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8003e6e:	787b      	ldrb	r3, [r7, #1]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d003      	beq.n	8003e7c <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e74:	887a      	ldrh	r2, [r7, #2]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003e7a:	e003      	b.n	8003e84 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003e7c:	887b      	ldrh	r3, [r7, #2]
 8003e7e:	041a      	lsls	r2, r3, #16
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	619a      	str	r2, [r3, #24]
}
 8003e84:	bf00      	nop
 8003e86:	3708      	adds	r7, #8
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	080162c4 	.word	0x080162c4

08003e90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	4603      	mov	r3, r0
 8003e98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003e9a:	4b08      	ldr	r3, [pc, #32]	; (8003ebc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e9c:	695a      	ldr	r2, [r3, #20]
 8003e9e:	88fb      	ldrh	r3, [r7, #6]
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d006      	beq.n	8003eb4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ea6:	4a05      	ldr	r2, [pc, #20]	; (8003ebc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ea8:	88fb      	ldrh	r3, [r7, #6]
 8003eaa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003eac:	88fb      	ldrh	r3, [r7, #6]
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f000 f806 	bl	8003ec0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003eb4:	bf00      	nop
 8003eb6:	3708      	adds	r7, #8
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	40013c00 	.word	0x40013c00

08003ec0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003eca:	bf00      	nop
 8003ecc:	370c      	adds	r7, #12
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
	...

08003ed8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d101      	bne.n	8003eea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e107      	b.n	80040fa <HAL_I2C_Init+0x222>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a85      	ldr	r2, [pc, #532]	; (8004104 <HAL_I2C_Init+0x22c>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d013      	beq.n	8003f1c <HAL_I2C_Init+0x44>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a83      	ldr	r2, [pc, #524]	; (8004108 <HAL_I2C_Init+0x230>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d00e      	beq.n	8003f1c <HAL_I2C_Init+0x44>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a82      	ldr	r2, [pc, #520]	; (800410c <HAL_I2C_Init+0x234>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d009      	beq.n	8003f1c <HAL_I2C_Init+0x44>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a80      	ldr	r2, [pc, #512]	; (8004110 <HAL_I2C_Init+0x238>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d004      	beq.n	8003f1c <HAL_I2C_Init+0x44>
 8003f12:	f240 2119 	movw	r1, #537	; 0x219
 8003f16:	487f      	ldr	r0, [pc, #508]	; (8004114 <HAL_I2C_Init+0x23c>)
 8003f18:	f7fe fbbb 	bl	8002692 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f24:	d304      	bcc.n	8003f30 <HAL_I2C_Init+0x58>
 8003f26:	f240 211a 	movw	r1, #538	; 0x21a
 8003f2a:	487a      	ldr	r0, [pc, #488]	; (8004114 <HAL_I2C_Init+0x23c>)
 8003f2c:	f7fe fbb1 	bl	8002692 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d008      	beq.n	8003f4a <HAL_I2C_Init+0x72>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d004      	beq.n	8003f4a <HAL_I2C_Init+0x72>
 8003f40:	f240 211b 	movw	r1, #539	; 0x21b
 8003f44:	4873      	ldr	r0, [pc, #460]	; (8004114 <HAL_I2C_Init+0x23c>)
 8003f46:	f7fe fba4 	bl	8002692 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d009      	beq.n	8003f66 <HAL_I2C_Init+0x8e>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f5a:	d004      	beq.n	8003f66 <HAL_I2C_Init+0x8e>
 8003f5c:	f44f 7107 	mov.w	r1, #540	; 0x21c
 8003f60:	486c      	ldr	r0, [pc, #432]	; (8004114 <HAL_I2C_Init+0x23c>)
 8003f62:	f7fe fb96 	bl	8002692 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	2bff      	cmp	r3, #255	; 0xff
 8003f6c:	d904      	bls.n	8003f78 <HAL_I2C_Init+0xa0>
 8003f6e:	f240 211d 	movw	r1, #541	; 0x21d
 8003f72:	4868      	ldr	r0, [pc, #416]	; (8004114 <HAL_I2C_Init+0x23c>)
 8003f74:	f7fe fb8d 	bl	8002692 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	699b      	ldr	r3, [r3, #24]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d020      	beq.n	8003fc2 <HAL_I2C_Init+0xea>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d01c      	beq.n	8003fc2 <HAL_I2C_Init+0xea>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d018      	beq.n	8003fc2 <HAL_I2C_Init+0xea>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	2b03      	cmp	r3, #3
 8003f96:	d014      	beq.n	8003fc2 <HAL_I2C_Init+0xea>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	2b04      	cmp	r3, #4
 8003f9e:	d010      	beq.n	8003fc2 <HAL_I2C_Init+0xea>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	699b      	ldr	r3, [r3, #24]
 8003fa4:	2b05      	cmp	r3, #5
 8003fa6:	d00c      	beq.n	8003fc2 <HAL_I2C_Init+0xea>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	699b      	ldr	r3, [r3, #24]
 8003fac:	2b06      	cmp	r3, #6
 8003fae:	d008      	beq.n	8003fc2 <HAL_I2C_Init+0xea>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	2b07      	cmp	r3, #7
 8003fb6:	d004      	beq.n	8003fc2 <HAL_I2C_Init+0xea>
 8003fb8:	f240 211e 	movw	r1, #542	; 0x21e
 8003fbc:	4855      	ldr	r0, [pc, #340]	; (8004114 <HAL_I2C_Init+0x23c>)
 8003fbe:	f7fe fb68 	bl	8002692 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	69db      	ldr	r3, [r3, #28]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d009      	beq.n	8003fde <HAL_I2C_Init+0x106>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	69db      	ldr	r3, [r3, #28]
 8003fce:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003fd2:	d004      	beq.n	8003fde <HAL_I2C_Init+0x106>
 8003fd4:	f240 211f 	movw	r1, #543	; 0x21f
 8003fd8:	484e      	ldr	r0, [pc, #312]	; (8004114 <HAL_I2C_Init+0x23c>)
 8003fda:	f7fe fb5a 	bl	8002692 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d009      	beq.n	8003ffa <HAL_I2C_Init+0x122>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fee:	d004      	beq.n	8003ffa <HAL_I2C_Init+0x122>
 8003ff0:	f44f 7108 	mov.w	r1, #544	; 0x220
 8003ff4:	4847      	ldr	r0, [pc, #284]	; (8004114 <HAL_I2C_Init+0x23c>)
 8003ff6:	f7fe fb4c 	bl	8002692 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004000:	b2db      	uxtb	r3, r3
 8004002:	2b00      	cmp	r3, #0
 8004004:	d106      	bne.n	8004014 <HAL_I2C_Init+0x13c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f7fd fad6 	bl	80015c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2224      	movs	r2, #36	; 0x24
 8004018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f022 0201 	bic.w	r2, r2, #1
 800402a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685a      	ldr	r2, [r3, #4]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004038:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	689a      	ldr	r2, [r3, #8]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004048:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	2b01      	cmp	r3, #1
 8004050:	d107      	bne.n	8004062 <HAL_I2C_Init+0x18a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	689a      	ldr	r2, [r3, #8]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800405e:	609a      	str	r2, [r3, #8]
 8004060:	e006      	b.n	8004070 <HAL_I2C_Init+0x198>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	689a      	ldr	r2, [r3, #8]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800406e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	2b02      	cmp	r3, #2
 8004076:	d104      	bne.n	8004082 <HAL_I2C_Init+0x1aa>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004080:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	6859      	ldr	r1, [r3, #4]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	4b22      	ldr	r3, [pc, #136]	; (8004118 <HAL_I2C_Init+0x240>)
 800408e:	430b      	orrs	r3, r1
 8004090:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68da      	ldr	r2, [r3, #12]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	691a      	ldr	r2, [r3, #16]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	430a      	orrs	r2, r1
 80040ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	69d9      	ldr	r1, [r3, #28]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6a1a      	ldr	r2, [r3, #32]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	430a      	orrs	r2, r1
 80040ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f042 0201 	orr.w	r2, r2, #1
 80040da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2220      	movs	r2, #32
 80040e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3708      	adds	r7, #8
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	40005400 	.word	0x40005400
 8004108:	40005800 	.word	0x40005800
 800410c:	40005c00 	.word	0x40005c00
 8004110:	40006000 	.word	0x40006000
 8004114:	08016300 	.word	0x08016300
 8004118:	02008000 	.word	0x02008000

0800411c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b088      	sub	sp, #32
 8004120:	af02      	add	r7, sp, #8
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	607a      	str	r2, [r7, #4]
 8004126:	461a      	mov	r2, r3
 8004128:	460b      	mov	r3, r1
 800412a:	817b      	strh	r3, [r7, #10]
 800412c:	4613      	mov	r3, r2
 800412e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004136:	b2db      	uxtb	r3, r3
 8004138:	2b20      	cmp	r3, #32
 800413a:	f040 80da 	bne.w	80042f2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004144:	2b01      	cmp	r3, #1
 8004146:	d101      	bne.n	800414c <HAL_I2C_Master_Transmit+0x30>
 8004148:	2302      	movs	r3, #2
 800414a:	e0d3      	b.n	80042f4 <HAL_I2C_Master_Transmit+0x1d8>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004154:	f7ff f8d0 	bl	80032f8 <HAL_GetTick>
 8004158:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	9300      	str	r3, [sp, #0]
 800415e:	2319      	movs	r3, #25
 8004160:	2201      	movs	r2, #1
 8004162:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004166:	68f8      	ldr	r0, [r7, #12]
 8004168:	f000 fefb 	bl	8004f62 <I2C_WaitOnFlagUntilTimeout>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d001      	beq.n	8004176 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e0be      	b.n	80042f4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2221      	movs	r2, #33	; 0x21
 800417a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2210      	movs	r2, #16
 8004182:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2200      	movs	r2, #0
 800418a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	893a      	ldrh	r2, [r7, #8]
 8004196:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	2bff      	cmp	r3, #255	; 0xff
 80041a6:	d90e      	bls.n	80041c6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	22ff      	movs	r2, #255	; 0xff
 80041ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041b2:	b2da      	uxtb	r2, r3
 80041b4:	8979      	ldrh	r1, [r7, #10]
 80041b6:	4b51      	ldr	r3, [pc, #324]	; (80042fc <HAL_I2C_Master_Transmit+0x1e0>)
 80041b8:	9300      	str	r3, [sp, #0]
 80041ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80041be:	68f8      	ldr	r0, [r7, #12]
 80041c0:	f001 f8e6 	bl	8005390 <I2C_TransferConfig>
 80041c4:	e06c      	b.n	80042a0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ca:	b29a      	uxth	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041d4:	b2da      	uxtb	r2, r3
 80041d6:	8979      	ldrh	r1, [r7, #10]
 80041d8:	4b48      	ldr	r3, [pc, #288]	; (80042fc <HAL_I2C_Master_Transmit+0x1e0>)
 80041da:	9300      	str	r3, [sp, #0]
 80041dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f001 f8d5 	bl	8005390 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80041e6:	e05b      	b.n	80042a0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041e8:	697a      	ldr	r2, [r7, #20]
 80041ea:	6a39      	ldr	r1, [r7, #32]
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f000 fef8 	bl	8004fe2 <I2C_WaitOnTXISFlagUntilTimeout>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d001      	beq.n	80041fc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e07b      	b.n	80042f4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004200:	781a      	ldrb	r2, [r3, #0]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420c:	1c5a      	adds	r2, r3, #1
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004216:	b29b      	uxth	r3, r3
 8004218:	3b01      	subs	r3, #1
 800421a:	b29a      	uxth	r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004224:	3b01      	subs	r3, #1
 8004226:	b29a      	uxth	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004230:	b29b      	uxth	r3, r3
 8004232:	2b00      	cmp	r3, #0
 8004234:	d034      	beq.n	80042a0 <HAL_I2C_Master_Transmit+0x184>
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800423a:	2b00      	cmp	r3, #0
 800423c:	d130      	bne.n	80042a0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	9300      	str	r3, [sp, #0]
 8004242:	6a3b      	ldr	r3, [r7, #32]
 8004244:	2200      	movs	r2, #0
 8004246:	2180      	movs	r1, #128	; 0x80
 8004248:	68f8      	ldr	r0, [r7, #12]
 800424a:	f000 fe8a 	bl	8004f62 <I2C_WaitOnFlagUntilTimeout>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d001      	beq.n	8004258 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e04d      	b.n	80042f4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800425c:	b29b      	uxth	r3, r3
 800425e:	2bff      	cmp	r3, #255	; 0xff
 8004260:	d90e      	bls.n	8004280 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	22ff      	movs	r2, #255	; 0xff
 8004266:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800426c:	b2da      	uxtb	r2, r3
 800426e:	8979      	ldrh	r1, [r7, #10]
 8004270:	2300      	movs	r3, #0
 8004272:	9300      	str	r3, [sp, #0]
 8004274:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004278:	68f8      	ldr	r0, [r7, #12]
 800427a:	f001 f889 	bl	8005390 <I2C_TransferConfig>
 800427e:	e00f      	b.n	80042a0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004284:	b29a      	uxth	r2, r3
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800428e:	b2da      	uxtb	r2, r3
 8004290:	8979      	ldrh	r1, [r7, #10]
 8004292:	2300      	movs	r3, #0
 8004294:	9300      	str	r3, [sp, #0]
 8004296:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800429a:	68f8      	ldr	r0, [r7, #12]
 800429c:	f001 f878 	bl	8005390 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d19e      	bne.n	80041e8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042aa:	697a      	ldr	r2, [r7, #20]
 80042ac:	6a39      	ldr	r1, [r7, #32]
 80042ae:	68f8      	ldr	r0, [r7, #12]
 80042b0:	f000 fed7 	bl	8005062 <I2C_WaitOnSTOPFlagUntilTimeout>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d001      	beq.n	80042be <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e01a      	b.n	80042f4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2220      	movs	r2, #32
 80042c4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	6859      	ldr	r1, [r3, #4]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	4b0b      	ldr	r3, [pc, #44]	; (8004300 <HAL_I2C_Master_Transmit+0x1e4>)
 80042d2:	400b      	ands	r3, r1
 80042d4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2220      	movs	r2, #32
 80042da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80042ee:	2300      	movs	r3, #0
 80042f0:	e000      	b.n	80042f4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80042f2:	2302      	movs	r3, #2
  }
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3718      	adds	r7, #24
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	80002000 	.word	0x80002000
 8004300:	fe00e800 	.word	0xfe00e800

08004304 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b088      	sub	sp, #32
 8004308:	af02      	add	r7, sp, #8
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	607a      	str	r2, [r7, #4]
 800430e:	461a      	mov	r2, r3
 8004310:	460b      	mov	r3, r1
 8004312:	817b      	strh	r3, [r7, #10]
 8004314:	4613      	mov	r3, r2
 8004316:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800431e:	b2db      	uxtb	r3, r3
 8004320:	2b20      	cmp	r3, #32
 8004322:	f040 80db 	bne.w	80044dc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800432c:	2b01      	cmp	r3, #1
 800432e:	d101      	bne.n	8004334 <HAL_I2C_Master_Receive+0x30>
 8004330:	2302      	movs	r3, #2
 8004332:	e0d4      	b.n	80044de <HAL_I2C_Master_Receive+0x1da>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800433c:	f7fe ffdc 	bl	80032f8 <HAL_GetTick>
 8004340:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	9300      	str	r3, [sp, #0]
 8004346:	2319      	movs	r3, #25
 8004348:	2201      	movs	r2, #1
 800434a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800434e:	68f8      	ldr	r0, [r7, #12]
 8004350:	f000 fe07 	bl	8004f62 <I2C_WaitOnFlagUntilTimeout>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e0bf      	b.n	80044de <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2222      	movs	r2, #34	; 0x22
 8004362:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2210      	movs	r2, #16
 800436a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2200      	movs	r2, #0
 8004372:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	893a      	ldrh	r2, [r7, #8]
 800437e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2200      	movs	r2, #0
 8004384:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800438a:	b29b      	uxth	r3, r3
 800438c:	2bff      	cmp	r3, #255	; 0xff
 800438e:	d90e      	bls.n	80043ae <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	22ff      	movs	r2, #255	; 0xff
 8004394:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800439a:	b2da      	uxtb	r2, r3
 800439c:	8979      	ldrh	r1, [r7, #10]
 800439e:	4b52      	ldr	r3, [pc, #328]	; (80044e8 <HAL_I2C_Master_Receive+0x1e4>)
 80043a0:	9300      	str	r3, [sp, #0]
 80043a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80043a6:	68f8      	ldr	r0, [r7, #12]
 80043a8:	f000 fff2 	bl	8005390 <I2C_TransferConfig>
 80043ac:	e06d      	b.n	800448a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043bc:	b2da      	uxtb	r2, r3
 80043be:	8979      	ldrh	r1, [r7, #10]
 80043c0:	4b49      	ldr	r3, [pc, #292]	; (80044e8 <HAL_I2C_Master_Receive+0x1e4>)
 80043c2:	9300      	str	r3, [sp, #0]
 80043c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043c8:	68f8      	ldr	r0, [r7, #12]
 80043ca:	f000 ffe1 	bl	8005390 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80043ce:	e05c      	b.n	800448a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043d0:	697a      	ldr	r2, [r7, #20]
 80043d2:	6a39      	ldr	r1, [r7, #32]
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f000 fe81 	bl	80050dc <I2C_WaitOnRXNEFlagUntilTimeout>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d001      	beq.n	80043e4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e07c      	b.n	80044de <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ee:	b2d2      	uxtb	r2, r2
 80043f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f6:	1c5a      	adds	r2, r3, #1
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004400:	3b01      	subs	r3, #1
 8004402:	b29a      	uxth	r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800440c:	b29b      	uxth	r3, r3
 800440e:	3b01      	subs	r3, #1
 8004410:	b29a      	uxth	r2, r3
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800441a:	b29b      	uxth	r3, r3
 800441c:	2b00      	cmp	r3, #0
 800441e:	d034      	beq.n	800448a <HAL_I2C_Master_Receive+0x186>
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004424:	2b00      	cmp	r3, #0
 8004426:	d130      	bne.n	800448a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	9300      	str	r3, [sp, #0]
 800442c:	6a3b      	ldr	r3, [r7, #32]
 800442e:	2200      	movs	r2, #0
 8004430:	2180      	movs	r1, #128	; 0x80
 8004432:	68f8      	ldr	r0, [r7, #12]
 8004434:	f000 fd95 	bl	8004f62 <I2C_WaitOnFlagUntilTimeout>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d001      	beq.n	8004442 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e04d      	b.n	80044de <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004446:	b29b      	uxth	r3, r3
 8004448:	2bff      	cmp	r3, #255	; 0xff
 800444a:	d90e      	bls.n	800446a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	22ff      	movs	r2, #255	; 0xff
 8004450:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004456:	b2da      	uxtb	r2, r3
 8004458:	8979      	ldrh	r1, [r7, #10]
 800445a:	2300      	movs	r3, #0
 800445c:	9300      	str	r3, [sp, #0]
 800445e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004462:	68f8      	ldr	r0, [r7, #12]
 8004464:	f000 ff94 	bl	8005390 <I2C_TransferConfig>
 8004468:	e00f      	b.n	800448a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800446e:	b29a      	uxth	r2, r3
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004478:	b2da      	uxtb	r2, r3
 800447a:	8979      	ldrh	r1, [r7, #10]
 800447c:	2300      	movs	r3, #0
 800447e:	9300      	str	r3, [sp, #0]
 8004480:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004484:	68f8      	ldr	r0, [r7, #12]
 8004486:	f000 ff83 	bl	8005390 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800448e:	b29b      	uxth	r3, r3
 8004490:	2b00      	cmp	r3, #0
 8004492:	d19d      	bne.n	80043d0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004494:	697a      	ldr	r2, [r7, #20]
 8004496:	6a39      	ldr	r1, [r7, #32]
 8004498:	68f8      	ldr	r0, [r7, #12]
 800449a:	f000 fde2 	bl	8005062 <I2C_WaitOnSTOPFlagUntilTimeout>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d001      	beq.n	80044a8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e01a      	b.n	80044de <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2220      	movs	r2, #32
 80044ae:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	6859      	ldr	r1, [r3, #4]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	4b0c      	ldr	r3, [pc, #48]	; (80044ec <HAL_I2C_Master_Receive+0x1e8>)
 80044bc:	400b      	ands	r3, r1
 80044be:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2220      	movs	r2, #32
 80044c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80044d8:	2300      	movs	r3, #0
 80044da:	e000      	b.n	80044de <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80044dc:	2302      	movs	r3, #2
  }
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3718      	adds	r7, #24
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	80002400 	.word	0x80002400
 80044ec:	fe00e800 	.word	0xfe00e800

080044f0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800450c:	2b00      	cmp	r3, #0
 800450e:	d005      	beq.n	800451c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004514:	68ba      	ldr	r2, [r7, #8]
 8004516:	68f9      	ldr	r1, [r7, #12]
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	4798      	blx	r3
  }
}
 800451c:	bf00      	nop
 800451e:	3710      	adds	r7, #16
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b086      	sub	sp, #24
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	0a1b      	lsrs	r3, r3, #8
 8004540:	f003 0301 	and.w	r3, r3, #1
 8004544:	2b00      	cmp	r3, #0
 8004546:	d010      	beq.n	800456a <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	09db      	lsrs	r3, r3, #7
 800454c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004550:	2b00      	cmp	r3, #0
 8004552:	d00a      	beq.n	800456a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004558:	f043 0201 	orr.w	r2, r3, #1
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004568:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	0a9b      	lsrs	r3, r3, #10
 800456e:	f003 0301 	and.w	r3, r3, #1
 8004572:	2b00      	cmp	r3, #0
 8004574:	d010      	beq.n	8004598 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	09db      	lsrs	r3, r3, #7
 800457a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00a      	beq.n	8004598 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004586:	f043 0208 	orr.w	r2, r3, #8
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004596:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	0a5b      	lsrs	r3, r3, #9
 800459c:	f003 0301 	and.w	r3, r3, #1
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d010      	beq.n	80045c6 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	09db      	lsrs	r3, r3, #7
 80045a8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d00a      	beq.n	80045c6 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b4:	f043 0202 	orr.w	r2, r3, #2
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045c4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ca:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f003 030b 	and.w	r3, r3, #11
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d003      	beq.n	80045de <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80045d6:	68f9      	ldr	r1, [r7, #12]
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f000 fb89 	bl	8004cf0 <I2C_ITError>
  }
}
 80045de:	bf00      	nop
 80045e0:	3718      	adds	r7, #24
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}

080045e6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80045e6:	b480      	push	{r7}
 80045e8:	b083      	sub	sp, #12
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80045ee:	bf00      	nop
 80045f0:	370c      	adds	r7, #12
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr

080045fa <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80045fa:	b480      	push	{r7}
 80045fc:	b083      	sub	sp, #12
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004602:	bf00      	nop
 8004604:	370c      	adds	r7, #12
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr

0800460e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800460e:	b480      	push	{r7}
 8004610:	b083      	sub	sp, #12
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
 8004616:	460b      	mov	r3, r1
 8004618:	70fb      	strb	r3, [r7, #3]
 800461a:	4613      	mov	r3, r2
 800461c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800461e:	bf00      	nop
 8004620:	370c      	adds	r7, #12
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr

0800462a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800462a:	b480      	push	{r7}
 800462c:	b083      	sub	sp, #12
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004632:	bf00      	nop
 8004634:	370c      	adds	r7, #12
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr

0800463e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800463e:	b480      	push	{r7}
 8004640:	b083      	sub	sp, #12
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004646:	bf00      	nop
 8004648:	370c      	adds	r7, #12
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr

08004652 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004652:	b480      	push	{r7}
 8004654:	b083      	sub	sp, #12
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800465a:	bf00      	nop
 800465c:	370c      	adds	r7, #12
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr

08004666 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004666:	b580      	push	{r7, lr}
 8004668:	b086      	sub	sp, #24
 800466a:	af00      	add	r7, sp, #0
 800466c:	60f8      	str	r0, [r7, #12]
 800466e:	60b9      	str	r1, [r7, #8]
 8004670:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004676:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004682:	2b01      	cmp	r3, #1
 8004684:	d101      	bne.n	800468a <I2C_Slave_ISR_IT+0x24>
 8004686:	2302      	movs	r3, #2
 8004688:	e0ec      	b.n	8004864 <I2C_Slave_ISR_IT+0x1fe>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2201      	movs	r2, #1
 800468e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	095b      	lsrs	r3, r3, #5
 8004696:	f003 0301 	and.w	r3, r3, #1
 800469a:	2b00      	cmp	r3, #0
 800469c:	d009      	beq.n	80046b2 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	095b      	lsrs	r3, r3, #5
 80046a2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d003      	beq.n	80046b2 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80046aa:	6939      	ldr	r1, [r7, #16]
 80046ac:	68f8      	ldr	r0, [r7, #12]
 80046ae:	f000 f9bf 	bl	8004a30 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	091b      	lsrs	r3, r3, #4
 80046b6:	f003 0301 	and.w	r3, r3, #1
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d04d      	beq.n	800475a <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	091b      	lsrs	r3, r3, #4
 80046c2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d047      	beq.n	800475a <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d128      	bne.n	8004726 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	2b28      	cmp	r3, #40	; 0x28
 80046de:	d108      	bne.n	80046f2 <I2C_Slave_ISR_IT+0x8c>
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80046e6:	d104      	bne.n	80046f2 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80046e8:	6939      	ldr	r1, [r7, #16]
 80046ea:	68f8      	ldr	r0, [r7, #12]
 80046ec:	f000 faaa 	bl	8004c44 <I2C_ITListenCplt>
 80046f0:	e032      	b.n	8004758 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b29      	cmp	r3, #41	; 0x29
 80046fc:	d10e      	bne.n	800471c <I2C_Slave_ISR_IT+0xb6>
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004704:	d00a      	beq.n	800471c <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2210      	movs	r2, #16
 800470c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800470e:	68f8      	ldr	r0, [r7, #12]
 8004710:	f000 fbe5 	bl	8004ede <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004714:	68f8      	ldr	r0, [r7, #12]
 8004716:	f000 f92d 	bl	8004974 <I2C_ITSlaveSeqCplt>
 800471a:	e01d      	b.n	8004758 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2210      	movs	r2, #16
 8004722:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004724:	e096      	b.n	8004854 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2210      	movs	r2, #16
 800472c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004732:	f043 0204 	orr.w	r2, r3, #4
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d004      	beq.n	800474a <I2C_Slave_ISR_IT+0xe4>
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004746:	f040 8085 	bne.w	8004854 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800474e:	4619      	mov	r1, r3
 8004750:	68f8      	ldr	r0, [r7, #12]
 8004752:	f000 facd 	bl	8004cf0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004756:	e07d      	b.n	8004854 <I2C_Slave_ISR_IT+0x1ee>
 8004758:	e07c      	b.n	8004854 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	089b      	lsrs	r3, r3, #2
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b00      	cmp	r3, #0
 8004764:	d030      	beq.n	80047c8 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	089b      	lsrs	r3, r3, #2
 800476a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800476e:	2b00      	cmp	r3, #0
 8004770:	d02a      	beq.n	80047c8 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004776:	b29b      	uxth	r3, r3
 8004778:	2b00      	cmp	r3, #0
 800477a:	d018      	beq.n	80047ae <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004786:	b2d2      	uxtb	r2, r2
 8004788:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478e:	1c5a      	adds	r2, r3, #1
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004798:	3b01      	subs	r3, #1
 800479a:	b29a      	uxth	r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	3b01      	subs	r3, #1
 80047a8:	b29a      	uxth	r2, r3
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d14f      	bne.n	8004858 <I2C_Slave_ISR_IT+0x1f2>
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80047be:	d04b      	beq.n	8004858 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80047c0:	68f8      	ldr	r0, [r7, #12]
 80047c2:	f000 f8d7 	bl	8004974 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80047c6:	e047      	b.n	8004858 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	08db      	lsrs	r3, r3, #3
 80047cc:	f003 0301 	and.w	r3, r3, #1
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d00a      	beq.n	80047ea <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	08db      	lsrs	r3, r3, #3
 80047d8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d004      	beq.n	80047ea <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80047e0:	6939      	ldr	r1, [r7, #16]
 80047e2:	68f8      	ldr	r0, [r7, #12]
 80047e4:	f000 f842 	bl	800486c <I2C_ITAddrCplt>
 80047e8:	e037      	b.n	800485a <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	085b      	lsrs	r3, r3, #1
 80047ee:	f003 0301 	and.w	r3, r3, #1
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d031      	beq.n	800485a <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	085b      	lsrs	r3, r3, #1
 80047fa:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d02b      	beq.n	800485a <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004806:	b29b      	uxth	r3, r3
 8004808:	2b00      	cmp	r3, #0
 800480a:	d018      	beq.n	800483e <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004810:	781a      	ldrb	r2, [r3, #0]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481c:	1c5a      	adds	r2, r3, #1
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004826:	b29b      	uxth	r3, r3
 8004828:	3b01      	subs	r3, #1
 800482a:	b29a      	uxth	r2, r3
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004834:	3b01      	subs	r3, #1
 8004836:	b29a      	uxth	r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	851a      	strh	r2, [r3, #40]	; 0x28
 800483c:	e00d      	b.n	800485a <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004844:	d002      	beq.n	800484c <I2C_Slave_ISR_IT+0x1e6>
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d106      	bne.n	800485a <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800484c:	68f8      	ldr	r0, [r7, #12]
 800484e:	f000 f891 	bl	8004974 <I2C_ITSlaveSeqCplt>
 8004852:	e002      	b.n	800485a <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8004854:	bf00      	nop
 8004856:	e000      	b.n	800485a <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8004858:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2200      	movs	r2, #0
 800485e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	3718      	adds	r7, #24
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800487c:	b2db      	uxtb	r3, r3
 800487e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004882:	2b28      	cmp	r3, #40	; 0x28
 8004884:	d16a      	bne.n	800495c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	699b      	ldr	r3, [r3, #24]
 800488c:	0c1b      	lsrs	r3, r3, #16
 800488e:	b2db      	uxtb	r3, r3
 8004890:	f003 0301 	and.w	r3, r3, #1
 8004894:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	0c1b      	lsrs	r3, r3, #16
 800489e:	b29b      	uxth	r3, r3
 80048a0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80048a4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048b2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80048c0:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d138      	bne.n	800493c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80048ca:	897b      	ldrh	r3, [r7, #10]
 80048cc:	09db      	lsrs	r3, r3, #7
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	89bb      	ldrh	r3, [r7, #12]
 80048d2:	4053      	eors	r3, r2
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	f003 0306 	and.w	r3, r3, #6
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d11c      	bne.n	8004918 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80048de:	897b      	ldrh	r3, [r7, #10]
 80048e0:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048e6:	1c5a      	adds	r2, r3, #1
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d13b      	bne.n	800496c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2208      	movs	r2, #8
 8004900:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800490a:	89ba      	ldrh	r2, [r7, #12]
 800490c:	7bfb      	ldrb	r3, [r7, #15]
 800490e:	4619      	mov	r1, r3
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f7ff fe7c 	bl	800460e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004916:	e029      	b.n	800496c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004918:	893b      	ldrh	r3, [r7, #8]
 800491a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800491c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f000 fdb1 	bl	8005488 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800492e:	89ba      	ldrh	r2, [r7, #12]
 8004930:	7bfb      	ldrb	r3, [r7, #15]
 8004932:	4619      	mov	r1, r3
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f7ff fe6a 	bl	800460e <HAL_I2C_AddrCallback>
}
 800493a:	e017      	b.n	800496c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800493c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 fda1 	bl	8005488 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800494e:	89ba      	ldrh	r2, [r7, #12]
 8004950:	7bfb      	ldrb	r3, [r7, #15]
 8004952:	4619      	mov	r1, r3
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f7ff fe5a 	bl	800460e <HAL_I2C_AddrCallback>
}
 800495a:	e007      	b.n	800496c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2208      	movs	r2, #8
 8004962:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800496c:	bf00      	nop
 800496e:	3710      	adds	r7, #16
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	0b9b      	lsrs	r3, r3, #14
 8004990:	f003 0301 	and.w	r3, r3, #1
 8004994:	2b00      	cmp	r3, #0
 8004996:	d008      	beq.n	80049aa <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80049a6:	601a      	str	r2, [r3, #0]
 80049a8:	e00d      	b.n	80049c6 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	0bdb      	lsrs	r3, r3, #15
 80049ae:	f003 0301 	and.w	r3, r3, #1
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d007      	beq.n	80049c6 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049c4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	2b29      	cmp	r3, #41	; 0x29
 80049d0:	d112      	bne.n	80049f8 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2228      	movs	r2, #40	; 0x28
 80049d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2221      	movs	r2, #33	; 0x21
 80049de:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80049e0:	2101      	movs	r1, #1
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 fd50 	bl	8005488 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f7ff fdf8 	bl	80045e6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80049f6:	e017      	b.n	8004a28 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	2b2a      	cmp	r3, #42	; 0x2a
 8004a02:	d111      	bne.n	8004a28 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2228      	movs	r2, #40	; 0x28
 8004a08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2222      	movs	r2, #34	; 0x22
 8004a10:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004a12:	2102      	movs	r1, #2
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f000 fd37 	bl	8005488 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f7ff fde9 	bl	80045fa <HAL_I2C_SlaveRxCpltCallback>
}
 8004a28:	bf00      	nop
 8004a2a:	3710      	adds	r7, #16
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b086      	sub	sp, #24
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a4c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2220      	movs	r2, #32
 8004a54:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004a56:	7bfb      	ldrb	r3, [r7, #15]
 8004a58:	2b21      	cmp	r3, #33	; 0x21
 8004a5a:	d002      	beq.n	8004a62 <I2C_ITSlaveCplt+0x32>
 8004a5c:	7bfb      	ldrb	r3, [r7, #15]
 8004a5e:	2b29      	cmp	r3, #41	; 0x29
 8004a60:	d108      	bne.n	8004a74 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004a62:	f248 0101 	movw	r1, #32769	; 0x8001
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 fd0e 	bl	8005488 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2221      	movs	r2, #33	; 0x21
 8004a70:	631a      	str	r2, [r3, #48]	; 0x30
 8004a72:	e00d      	b.n	8004a90 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004a74:	7bfb      	ldrb	r3, [r7, #15]
 8004a76:	2b22      	cmp	r3, #34	; 0x22
 8004a78:	d002      	beq.n	8004a80 <I2C_ITSlaveCplt+0x50>
 8004a7a:	7bfb      	ldrb	r3, [r7, #15]
 8004a7c:	2b2a      	cmp	r3, #42	; 0x2a
 8004a7e:	d107      	bne.n	8004a90 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004a80:	f248 0102 	movw	r1, #32770	; 0x8002
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f000 fcff 	bl	8005488 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2222      	movs	r2, #34	; 0x22
 8004a8e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	685a      	ldr	r2, [r3, #4]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a9e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	6859      	ldr	r1, [r3, #4]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	4b64      	ldr	r3, [pc, #400]	; (8004c3c <I2C_ITSlaveCplt+0x20c>)
 8004aac:	400b      	ands	r3, r1
 8004aae:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f000 fa14 	bl	8004ede <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	0b9b      	lsrs	r3, r3, #14
 8004aba:	f003 0301 	and.w	r3, r3, #1
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d013      	beq.n	8004aea <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004ad0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d020      	beq.n	8004b1c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	b29a      	uxth	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ae8:	e018      	b.n	8004b1c <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	0bdb      	lsrs	r3, r3, #15
 8004aee:	f003 0301 	and.w	r3, r3, #1
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d012      	beq.n	8004b1c <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b04:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d006      	beq.n	8004b1c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	b29a      	uxth	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	089b      	lsrs	r3, r3, #2
 8004b20:	f003 0301 	and.w	r3, r3, #1
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d020      	beq.n	8004b6a <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	f023 0304 	bic.w	r3, r3, #4
 8004b2e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3a:	b2d2      	uxtb	r2, r2
 8004b3c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b42:	1c5a      	adds	r2, r3, #1
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d00c      	beq.n	8004b6a <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b54:	3b01      	subs	r3, #1
 8004b56:	b29a      	uxth	r2, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	3b01      	subs	r3, #1
 8004b64:	b29a      	uxth	r2, r3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d005      	beq.n	8004b80 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b78:	f043 0204 	orr.w	r2, r3, #4
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d010      	beq.n	8004bb8 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f000 f8a7 	bl	8004cf0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	2b28      	cmp	r3, #40	; 0x28
 8004bac:	d141      	bne.n	8004c32 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004bae:	6979      	ldr	r1, [r7, #20]
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f000 f847 	bl	8004c44 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004bb6:	e03c      	b.n	8004c32 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bbc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004bc0:	d014      	beq.n	8004bec <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f7ff fed6 	bl	8004974 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a1d      	ldr	r2, [pc, #116]	; (8004c40 <I2C_ITSlaveCplt+0x210>)
 8004bcc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2220      	movs	r2, #32
 8004bd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f7ff fd20 	bl	800462a <HAL_I2C_ListenCpltCallback>
}
 8004bea:	e022      	b.n	8004c32 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	2b22      	cmp	r3, #34	; 0x22
 8004bf6:	d10e      	bne.n	8004c16 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2220      	movs	r2, #32
 8004bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f7ff fcf3 	bl	80045fa <HAL_I2C_SlaveRxCpltCallback>
}
 8004c14:	e00d      	b.n	8004c32 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2220      	movs	r2, #32
 8004c1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f7ff fcda 	bl	80045e6 <HAL_I2C_SlaveTxCpltCallback>
}
 8004c32:	bf00      	nop
 8004c34:	3718      	adds	r7, #24
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	fe00e800 	.word	0xfe00e800
 8004c40:	ffff0000 	.word	0xffff0000

08004c44 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a26      	ldr	r2, [pc, #152]	; (8004cec <I2C_ITListenCplt+0xa8>)
 8004c52:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2220      	movs	r2, #32
 8004c5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	089b      	lsrs	r3, r3, #2
 8004c74:	f003 0301 	and.w	r3, r3, #1
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d022      	beq.n	8004cc2 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c86:	b2d2      	uxtb	r2, r2
 8004c88:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8e:	1c5a      	adds	r2, r3, #1
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d012      	beq.n	8004cc2 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ca0:	3b01      	subs	r3, #1
 8004ca2:	b29a      	uxth	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	3b01      	subs	r3, #1
 8004cb0:	b29a      	uxth	r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cba:	f043 0204 	orr.w	r2, r3, #4
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004cc2:	f248 0103 	movw	r1, #32771	; 0x8003
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 fbde 	bl	8005488 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2210      	movs	r2, #16
 8004cd2:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f7ff fca4 	bl	800462a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004ce2:	bf00      	nop
 8004ce4:	3708      	adds	r7, #8
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	ffff0000 	.word	0xffff0000

08004cf0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a5d      	ldr	r2, [pc, #372]	; (8004e84 <I2C_ITError+0x194>)
 8004d0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	431a      	orrs	r2, r3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004d22:	7bfb      	ldrb	r3, [r7, #15]
 8004d24:	2b28      	cmp	r3, #40	; 0x28
 8004d26:	d005      	beq.n	8004d34 <I2C_ITError+0x44>
 8004d28:	7bfb      	ldrb	r3, [r7, #15]
 8004d2a:	2b29      	cmp	r3, #41	; 0x29
 8004d2c:	d002      	beq.n	8004d34 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004d2e:	7bfb      	ldrb	r3, [r7, #15]
 8004d30:	2b2a      	cmp	r3, #42	; 0x2a
 8004d32:	d10b      	bne.n	8004d4c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004d34:	2103      	movs	r1, #3
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 fba6 	bl	8005488 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2228      	movs	r2, #40	; 0x28
 8004d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a50      	ldr	r2, [pc, #320]	; (8004e88 <I2C_ITError+0x198>)
 8004d48:	635a      	str	r2, [r3, #52]	; 0x34
 8004d4a:	e011      	b.n	8004d70 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004d4c:	f248 0103 	movw	r1, #32771	; 0x8003
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f000 fb99 	bl	8005488 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	2b60      	cmp	r3, #96	; 0x60
 8004d60:	d003      	beq.n	8004d6a <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2220      	movs	r2, #32
 8004d66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d74:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d039      	beq.n	8004df2 <I2C_ITError+0x102>
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	2b11      	cmp	r3, #17
 8004d82:	d002      	beq.n	8004d8a <I2C_ITError+0x9a>
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	2b21      	cmp	r3, #33	; 0x21
 8004d88:	d133      	bne.n	8004df2 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d98:	d107      	bne.n	8004daa <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004da8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7fe fca4 	bl	80036fc <HAL_DMA_GetState>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d017      	beq.n	8004dea <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dbe:	4a33      	ldr	r2, [pc, #204]	; (8004e8c <I2C_ITError+0x19c>)
 8004dc0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7fe fc72 	bl	80036b8 <HAL_DMA_Abort_IT>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d04d      	beq.n	8004e76 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004de4:	4610      	mov	r0, r2
 8004de6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004de8:	e045      	b.n	8004e76 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 f850 	bl	8004e90 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004df0:	e041      	b.n	8004e76 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d039      	beq.n	8004e6e <I2C_ITError+0x17e>
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	2b12      	cmp	r3, #18
 8004dfe:	d002      	beq.n	8004e06 <I2C_ITError+0x116>
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	2b22      	cmp	r3, #34	; 0x22
 8004e04:	d133      	bne.n	8004e6e <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e14:	d107      	bne.n	8004e26 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e24:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f7fe fc66 	bl	80036fc <HAL_DMA_GetState>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d017      	beq.n	8004e66 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e3a:	4a14      	ldr	r2, [pc, #80]	; (8004e8c <I2C_ITError+0x19c>)
 8004e3c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f7fe fc34 	bl	80036b8 <HAL_DMA_Abort_IT>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d011      	beq.n	8004e7a <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004e60:	4610      	mov	r0, r2
 8004e62:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e64:	e009      	b.n	8004e7a <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 f812 	bl	8004e90 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e6c:	e005      	b.n	8004e7a <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f000 f80e 	bl	8004e90 <I2C_TreatErrorCallback>
  }
}
 8004e74:	e002      	b.n	8004e7c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004e76:	bf00      	nop
 8004e78:	e000      	b.n	8004e7c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e7a:	bf00      	nop
}
 8004e7c:	bf00      	nop
 8004e7e:	3710      	adds	r7, #16
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	ffff0000 	.word	0xffff0000
 8004e88:	08004667 	.word	0x08004667
 8004e8c:	08004f27 	.word	0x08004f27

08004e90 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b082      	sub	sp, #8
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	2b60      	cmp	r3, #96	; 0x60
 8004ea2:	d10e      	bne.n	8004ec2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2220      	movs	r2, #32
 8004ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f7ff fbc9 	bl	8004652 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004ec0:	e009      	b.n	8004ed6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f7ff fbb4 	bl	800463e <HAL_I2C_ErrorCallback>
}
 8004ed6:	bf00      	nop
 8004ed8:	3708      	adds	r7, #8
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}

08004ede <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004ede:	b480      	push	{r7}
 8004ee0:	b083      	sub	sp, #12
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	699b      	ldr	r3, [r3, #24]
 8004eec:	f003 0302 	and.w	r3, r3, #2
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	d103      	bne.n	8004efc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	699b      	ldr	r3, [r3, #24]
 8004f02:	f003 0301 	and.w	r3, r3, #1
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d007      	beq.n	8004f1a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	699a      	ldr	r2, [r3, #24]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f042 0201 	orr.w	r2, r2, #1
 8004f18:	619a      	str	r2, [r3, #24]
  }
}
 8004f1a:	bf00      	nop
 8004f1c:	370c      	adds	r7, #12
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr

08004f26 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004f26:	b580      	push	{r7, lr}
 8004f28:	b084      	sub	sp, #16
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f32:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d003      	beq.n	8004f44 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f40:	2200      	movs	r2, #0
 8004f42:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d003      	beq.n	8004f54 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f50:	2200      	movs	r2, #0
 8004f52:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8004f54:	68f8      	ldr	r0, [r7, #12]
 8004f56:	f7ff ff9b 	bl	8004e90 <I2C_TreatErrorCallback>
}
 8004f5a:	bf00      	nop
 8004f5c:	3710      	adds	r7, #16
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}

08004f62 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004f62:	b580      	push	{r7, lr}
 8004f64:	b084      	sub	sp, #16
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	60f8      	str	r0, [r7, #12]
 8004f6a:	60b9      	str	r1, [r7, #8]
 8004f6c:	603b      	str	r3, [r7, #0]
 8004f6e:	4613      	mov	r3, r2
 8004f70:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f72:	e022      	b.n	8004fba <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f7a:	d01e      	beq.n	8004fba <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f7c:	f7fe f9bc 	bl	80032f8 <HAL_GetTick>
 8004f80:	4602      	mov	r2, r0
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	683a      	ldr	r2, [r7, #0]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d302      	bcc.n	8004f92 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d113      	bne.n	8004fba <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f96:	f043 0220 	orr.w	r2, r3, #32
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2220      	movs	r2, #32
 8004fa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e00f      	b.n	8004fda <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	699a      	ldr	r2, [r3, #24]
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	68ba      	ldr	r2, [r7, #8]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	bf0c      	ite	eq
 8004fca:	2301      	moveq	r3, #1
 8004fcc:	2300      	movne	r3, #0
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	79fb      	ldrb	r3, [r7, #7]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d0cd      	beq.n	8004f74 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3710      	adds	r7, #16
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}

08004fe2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004fe2:	b580      	push	{r7, lr}
 8004fe4:	b084      	sub	sp, #16
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	60f8      	str	r0, [r7, #12]
 8004fea:	60b9      	str	r1, [r7, #8]
 8004fec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004fee:	e02c      	b.n	800504a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	68b9      	ldr	r1, [r7, #8]
 8004ff4:	68f8      	ldr	r0, [r7, #12]
 8004ff6:	f000 f8eb 	bl	80051d0 <I2C_IsErrorOccurred>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d001      	beq.n	8005004 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e02a      	b.n	800505a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800500a:	d01e      	beq.n	800504a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800500c:	f7fe f974 	bl	80032f8 <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	68ba      	ldr	r2, [r7, #8]
 8005018:	429a      	cmp	r2, r3
 800501a:	d302      	bcc.n	8005022 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d113      	bne.n	800504a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005026:	f043 0220 	orr.w	r2, r3, #32
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2220      	movs	r2, #32
 8005032:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2200      	movs	r2, #0
 8005042:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e007      	b.n	800505a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	699b      	ldr	r3, [r3, #24]
 8005050:	f003 0302 	and.w	r3, r3, #2
 8005054:	2b02      	cmp	r3, #2
 8005056:	d1cb      	bne.n	8004ff0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005058:	2300      	movs	r3, #0
}
 800505a:	4618      	mov	r0, r3
 800505c:	3710      	adds	r7, #16
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}

08005062 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005062:	b580      	push	{r7, lr}
 8005064:	b084      	sub	sp, #16
 8005066:	af00      	add	r7, sp, #0
 8005068:	60f8      	str	r0, [r7, #12]
 800506a:	60b9      	str	r1, [r7, #8]
 800506c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800506e:	e028      	b.n	80050c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	68b9      	ldr	r1, [r7, #8]
 8005074:	68f8      	ldr	r0, [r7, #12]
 8005076:	f000 f8ab 	bl	80051d0 <I2C_IsErrorOccurred>
 800507a:	4603      	mov	r3, r0
 800507c:	2b00      	cmp	r3, #0
 800507e:	d001      	beq.n	8005084 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e026      	b.n	80050d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005084:	f7fe f938 	bl	80032f8 <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	68ba      	ldr	r2, [r7, #8]
 8005090:	429a      	cmp	r2, r3
 8005092:	d302      	bcc.n	800509a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d113      	bne.n	80050c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800509e:	f043 0220 	orr.w	r2, r3, #32
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2220      	movs	r2, #32
 80050aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e007      	b.n	80050d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	699b      	ldr	r3, [r3, #24]
 80050c8:	f003 0320 	and.w	r3, r3, #32
 80050cc:	2b20      	cmp	r3, #32
 80050ce:	d1cf      	bne.n	8005070 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3710      	adds	r7, #16
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
	...

080050dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80050e8:	e064      	b.n	80051b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	68b9      	ldr	r1, [r7, #8]
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f000 f86e 	bl	80051d0 <I2C_IsErrorOccurred>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d001      	beq.n	80050fe <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e062      	b.n	80051c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	699b      	ldr	r3, [r3, #24]
 8005104:	f003 0320 	and.w	r3, r3, #32
 8005108:	2b20      	cmp	r3, #32
 800510a:	d138      	bne.n	800517e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	f003 0304 	and.w	r3, r3, #4
 8005116:	2b04      	cmp	r3, #4
 8005118:	d105      	bne.n	8005126 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800511e:	2b00      	cmp	r3, #0
 8005120:	d001      	beq.n	8005126 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8005122:	2300      	movs	r3, #0
 8005124:	e04e      	b.n	80051c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	699b      	ldr	r3, [r3, #24]
 800512c:	f003 0310 	and.w	r3, r3, #16
 8005130:	2b10      	cmp	r3, #16
 8005132:	d107      	bne.n	8005144 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2210      	movs	r2, #16
 800513a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2204      	movs	r2, #4
 8005140:	645a      	str	r2, [r3, #68]	; 0x44
 8005142:	e002      	b.n	800514a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2200      	movs	r2, #0
 8005148:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2220      	movs	r2, #32
 8005150:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	6859      	ldr	r1, [r3, #4]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	4b1b      	ldr	r3, [pc, #108]	; (80051cc <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800515e:	400b      	ands	r3, r1
 8005160:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2220      	movs	r2, #32
 8005166:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e022      	b.n	80051c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800517e:	f7fe f8bb 	bl	80032f8 <HAL_GetTick>
 8005182:	4602      	mov	r2, r0
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	1ad3      	subs	r3, r2, r3
 8005188:	68ba      	ldr	r2, [r7, #8]
 800518a:	429a      	cmp	r2, r3
 800518c:	d302      	bcc.n	8005194 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d10f      	bne.n	80051b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005198:	f043 0220 	orr.w	r2, r3, #32
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2220      	movs	r2, #32
 80051a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e007      	b.n	80051c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	699b      	ldr	r3, [r3, #24]
 80051ba:	f003 0304 	and.w	r3, r3, #4
 80051be:	2b04      	cmp	r3, #4
 80051c0:	d193      	bne.n	80050ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80051c2:	2300      	movs	r3, #0
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3710      	adds	r7, #16
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}
 80051cc:	fe00e800 	.word	0xfe00e800

080051d0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b08a      	sub	sp, #40	; 0x28
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051dc:	2300      	movs	r3, #0
 80051de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	699b      	ldr	r3, [r3, #24]
 80051e8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80051ea:	2300      	movs	r3, #0
 80051ec:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	f003 0310 	and.w	r3, r3, #16
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d068      	beq.n	80052ce <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2210      	movs	r2, #16
 8005202:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005204:	e049      	b.n	800529a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800520c:	d045      	beq.n	800529a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800520e:	f7fe f873 	bl	80032f8 <HAL_GetTick>
 8005212:	4602      	mov	r2, r0
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	68ba      	ldr	r2, [r7, #8]
 800521a:	429a      	cmp	r2, r3
 800521c:	d302      	bcc.n	8005224 <I2C_IsErrorOccurred+0x54>
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d13a      	bne.n	800529a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800522e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005236:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	699b      	ldr	r3, [r3, #24]
 800523e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005242:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005246:	d121      	bne.n	800528c <I2C_IsErrorOccurred+0xbc>
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800524e:	d01d      	beq.n	800528c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005250:	7cfb      	ldrb	r3, [r7, #19]
 8005252:	2b20      	cmp	r3, #32
 8005254:	d01a      	beq.n	800528c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	685a      	ldr	r2, [r3, #4]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005264:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005266:	f7fe f847 	bl	80032f8 <HAL_GetTick>
 800526a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800526c:	e00e      	b.n	800528c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800526e:	f7fe f843 	bl	80032f8 <HAL_GetTick>
 8005272:	4602      	mov	r2, r0
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	2b19      	cmp	r3, #25
 800527a:	d907      	bls.n	800528c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800527c:	6a3b      	ldr	r3, [r7, #32]
 800527e:	f043 0320 	orr.w	r3, r3, #32
 8005282:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800528a:	e006      	b.n	800529a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	699b      	ldr	r3, [r3, #24]
 8005292:	f003 0320 	and.w	r3, r3, #32
 8005296:	2b20      	cmp	r3, #32
 8005298:	d1e9      	bne.n	800526e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	699b      	ldr	r3, [r3, #24]
 80052a0:	f003 0320 	and.w	r3, r3, #32
 80052a4:	2b20      	cmp	r3, #32
 80052a6:	d003      	beq.n	80052b0 <I2C_IsErrorOccurred+0xe0>
 80052a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d0aa      	beq.n	8005206 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80052b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d103      	bne.n	80052c0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2220      	movs	r2, #32
 80052be:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80052c0:	6a3b      	ldr	r3, [r7, #32]
 80052c2:	f043 0304 	orr.w	r3, r3, #4
 80052c6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	699b      	ldr	r3, [r3, #24]
 80052d4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d00b      	beq.n	80052f8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80052e0:	6a3b      	ldr	r3, [r7, #32]
 80052e2:	f043 0301 	orr.w	r3, r3, #1
 80052e6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00b      	beq.n	800531a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005302:	6a3b      	ldr	r3, [r7, #32]
 8005304:	f043 0308 	orr.w	r3, r3, #8
 8005308:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005312:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005320:	2b00      	cmp	r3, #0
 8005322:	d00b      	beq.n	800533c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005324:	6a3b      	ldr	r3, [r7, #32]
 8005326:	f043 0302 	orr.w	r3, r3, #2
 800532a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005334:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800533c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005340:	2b00      	cmp	r3, #0
 8005342:	d01c      	beq.n	800537e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005344:	68f8      	ldr	r0, [r7, #12]
 8005346:	f7ff fdca 	bl	8004ede <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	6859      	ldr	r1, [r3, #4]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	4b0d      	ldr	r3, [pc, #52]	; (800538c <I2C_IsErrorOccurred+0x1bc>)
 8005356:	400b      	ands	r3, r1
 8005358:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800535e:	6a3b      	ldr	r3, [r7, #32]
 8005360:	431a      	orrs	r2, r3
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2220      	movs	r2, #32
 800536a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2200      	movs	r2, #0
 800537a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800537e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005382:	4618      	mov	r0, r3
 8005384:	3728      	adds	r7, #40	; 0x28
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	fe00e800 	.word	0xfe00e800

08005390 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b086      	sub	sp, #24
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	607b      	str	r3, [r7, #4]
 800539a:	460b      	mov	r3, r1
 800539c:	817b      	strh	r3, [r7, #10]
 800539e:	4613      	mov	r3, r2
 80053a0:	727b      	strb	r3, [r7, #9]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a2f      	ldr	r2, [pc, #188]	; (8005464 <I2C_TransferConfig+0xd4>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d013      	beq.n	80053d4 <I2C_TransferConfig+0x44>
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a2d      	ldr	r2, [pc, #180]	; (8005468 <I2C_TransferConfig+0xd8>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d00e      	beq.n	80053d4 <I2C_TransferConfig+0x44>
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a2c      	ldr	r2, [pc, #176]	; (800546c <I2C_TransferConfig+0xdc>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d009      	beq.n	80053d4 <I2C_TransferConfig+0x44>
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a2a      	ldr	r2, [pc, #168]	; (8005470 <I2C_TransferConfig+0xe0>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d004      	beq.n	80053d4 <I2C_TransferConfig+0x44>
 80053ca:	f641 3147 	movw	r1, #6983	; 0x1b47
 80053ce:	4829      	ldr	r0, [pc, #164]	; (8005474 <I2C_TransferConfig+0xe4>)
 80053d0:	f7fd f95f 	bl	8002692 <assert_failed>
  assert_param(IS_TRANSFER_MODE(Mode));
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80053da:	d00b      	beq.n	80053f4 <I2C_TransferConfig+0x64>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80053e2:	d007      	beq.n	80053f4 <I2C_TransferConfig+0x64>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d004      	beq.n	80053f4 <I2C_TransferConfig+0x64>
 80053ea:	f641 3148 	movw	r1, #6984	; 0x1b48
 80053ee:	4821      	ldr	r0, [pc, #132]	; (8005474 <I2C_TransferConfig+0xe4>)
 80053f0:	f7fd f94f 	bl	8002692 <assert_failed>
  assert_param(IS_TRANSFER_REQUEST(Request));
 80053f4:	6a3b      	ldr	r3, [r7, #32]
 80053f6:	4a20      	ldr	r2, [pc, #128]	; (8005478 <I2C_TransferConfig+0xe8>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d00f      	beq.n	800541c <I2C_TransferConfig+0x8c>
 80053fc:	6a3b      	ldr	r3, [r7, #32]
 80053fe:	4a1f      	ldr	r2, [pc, #124]	; (800547c <I2C_TransferConfig+0xec>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d00b      	beq.n	800541c <I2C_TransferConfig+0x8c>
 8005404:	6a3b      	ldr	r3, [r7, #32]
 8005406:	4a1e      	ldr	r2, [pc, #120]	; (8005480 <I2C_TransferConfig+0xf0>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d007      	beq.n	800541c <I2C_TransferConfig+0x8c>
 800540c:	6a3b      	ldr	r3, [r7, #32]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d004      	beq.n	800541c <I2C_TransferConfig+0x8c>
 8005412:	f641 3149 	movw	r1, #6985	; 0x1b49
 8005416:	4817      	ldr	r0, [pc, #92]	; (8005474 <I2C_TransferConfig+0xe4>)
 8005418:	f7fd f93b 	bl	8002692 <assert_failed>

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800541c:	897b      	ldrh	r3, [r7, #10]
 800541e:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005422:	7a7b      	ldrb	r3, [r7, #9]
 8005424:	041b      	lsls	r3, r3, #16
 8005426:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800542a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005430:	6a3b      	ldr	r3, [r7, #32]
 8005432:	4313      	orrs	r3, r2
 8005434:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005438:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	685a      	ldr	r2, [r3, #4]
 8005440:	6a3b      	ldr	r3, [r7, #32]
 8005442:	0d5b      	lsrs	r3, r3, #21
 8005444:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005448:	4b0e      	ldr	r3, [pc, #56]	; (8005484 <I2C_TransferConfig+0xf4>)
 800544a:	430b      	orrs	r3, r1
 800544c:	43db      	mvns	r3, r3
 800544e:	ea02 0103 	and.w	r1, r2, r3
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	697a      	ldr	r2, [r7, #20]
 8005458:	430a      	orrs	r2, r1
 800545a:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800545c:	bf00      	nop
 800545e:	3718      	adds	r7, #24
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}
 8005464:	40005400 	.word	0x40005400
 8005468:	40005800 	.word	0x40005800
 800546c:	40005c00 	.word	0x40005c00
 8005470:	40006000 	.word	0x40006000
 8005474:	08016300 	.word	0x08016300
 8005478:	80004000 	.word	0x80004000
 800547c:	80002400 	.word	0x80002400
 8005480:	80002000 	.word	0x80002000
 8005484:	03ff63ff 	.word	0x03ff63ff

08005488 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005488:	b480      	push	{r7}
 800548a:	b085      	sub	sp, #20
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	460b      	mov	r3, r1
 8005492:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005494:	2300      	movs	r3, #0
 8005496:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005498:	887b      	ldrh	r3, [r7, #2]
 800549a:	f003 0301 	and.w	r3, r3, #1
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d00f      	beq.n	80054c2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80054a8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80054b6:	2b28      	cmp	r3, #40	; 0x28
 80054b8:	d003      	beq.n	80054c2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80054c0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80054c2:	887b      	ldrh	r3, [r7, #2]
 80054c4:	f003 0302 	and.w	r3, r3, #2
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d00f      	beq.n	80054ec <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80054d2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80054e0:	2b28      	cmp	r3, #40	; 0x28
 80054e2:	d003      	beq.n	80054ec <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80054ea:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80054ec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	da03      	bge.n	80054fc <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80054fa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80054fc:	887b      	ldrh	r3, [r7, #2]
 80054fe:	2b10      	cmp	r3, #16
 8005500:	d103      	bne.n	800550a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005508:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800550a:	887b      	ldrh	r3, [r7, #2]
 800550c:	2b20      	cmp	r3, #32
 800550e:	d103      	bne.n	8005518 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f043 0320 	orr.w	r3, r3, #32
 8005516:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005518:	887b      	ldrh	r3, [r7, #2]
 800551a:	2b40      	cmp	r3, #64	; 0x40
 800551c:	d103      	bne.n	8005526 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005524:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	6819      	ldr	r1, [r3, #0]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	43da      	mvns	r2, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	400a      	ands	r2, r1
 8005536:	601a      	str	r2, [r3, #0]
}
 8005538:	bf00      	nop
 800553a:	3714      	adds	r7, #20
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b082      	sub	sp, #8
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a32      	ldr	r2, [pc, #200]	; (800561c <HAL_I2CEx_ConfigAnalogFilter+0xd8>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d012      	beq.n	800557e <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a30      	ldr	r2, [pc, #192]	; (8005620 <HAL_I2CEx_ConfigAnalogFilter+0xdc>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d00d      	beq.n	800557e <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a2f      	ldr	r2, [pc, #188]	; (8005624 <HAL_I2CEx_ConfigAnalogFilter+0xe0>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d008      	beq.n	800557e <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a2d      	ldr	r2, [pc, #180]	; (8005628 <HAL_I2CEx_ConfigAnalogFilter+0xe4>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d003      	beq.n	800557e <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8005576:	215e      	movs	r1, #94	; 0x5e
 8005578:	482c      	ldr	r0, [pc, #176]	; (800562c <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 800557a:	f7fd f88a 	bl	8002692 <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d007      	beq.n	8005594 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800558a:	d003      	beq.n	8005594 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 800558c:	215f      	movs	r1, #95	; 0x5f
 800558e:	4827      	ldr	r0, [pc, #156]	; (800562c <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 8005590:	f7fd f87f 	bl	8002692 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800559a:	b2db      	uxtb	r3, r3
 800559c:	2b20      	cmp	r3, #32
 800559e:	d138      	bne.n	8005612 <HAL_I2CEx_ConfigAnalogFilter+0xce>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d101      	bne.n	80055ae <HAL_I2CEx_ConfigAnalogFilter+0x6a>
 80055aa:	2302      	movs	r3, #2
 80055ac:	e032      	b.n	8005614 <HAL_I2CEx_ConfigAnalogFilter+0xd0>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2201      	movs	r2, #1
 80055b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2224      	movs	r2, #36	; 0x24
 80055ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f022 0201 	bic.w	r2, r2, #1
 80055cc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80055dc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	6819      	ldr	r1, [r3, #0]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	683a      	ldr	r2, [r7, #0]
 80055ea:	430a      	orrs	r2, r1
 80055ec:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f042 0201 	orr.w	r2, r2, #1
 80055fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2220      	movs	r2, #32
 8005602:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800560e:	2300      	movs	r3, #0
 8005610:	e000      	b.n	8005614 <HAL_I2CEx_ConfigAnalogFilter+0xd0>
  }
  else
  {
    return HAL_BUSY;
 8005612:	2302      	movs	r3, #2
  }
}
 8005614:	4618      	mov	r0, r3
 8005616:	3708      	adds	r7, #8
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}
 800561c:	40005400 	.word	0x40005400
 8005620:	40005800 	.word	0x40005800
 8005624:	40005c00 	.word	0x40005c00
 8005628:	40006000 	.word	0x40006000
 800562c:	08016338 	.word	0x08016338

08005630 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a31      	ldr	r2, [pc, #196]	; (8005704 <HAL_I2CEx_ConfigDigitalFilter+0xd4>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d012      	beq.n	800566a <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a2f      	ldr	r2, [pc, #188]	; (8005708 <HAL_I2CEx_ConfigDigitalFilter+0xd8>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d00d      	beq.n	800566a <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a2e      	ldr	r2, [pc, #184]	; (800570c <HAL_I2CEx_ConfigDigitalFilter+0xdc>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d008      	beq.n	800566a <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a2c      	ldr	r2, [pc, #176]	; (8005710 <HAL_I2CEx_ConfigDigitalFilter+0xe0>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d003      	beq.n	800566a <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8005662:	218c      	movs	r1, #140	; 0x8c
 8005664:	482b      	ldr	r0, [pc, #172]	; (8005714 <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 8005666:	f7fd f814 	bl	8002692 <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	2b0f      	cmp	r3, #15
 800566e:	d903      	bls.n	8005678 <HAL_I2CEx_ConfigDigitalFilter+0x48>
 8005670:	218d      	movs	r1, #141	; 0x8d
 8005672:	4828      	ldr	r0, [pc, #160]	; (8005714 <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 8005674:	f7fd f80d 	bl	8002692 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800567e:	b2db      	uxtb	r3, r3
 8005680:	2b20      	cmp	r3, #32
 8005682:	d139      	bne.n	80056f8 <HAL_I2CEx_ConfigDigitalFilter+0xc8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800568a:	2b01      	cmp	r3, #1
 800568c:	d101      	bne.n	8005692 <HAL_I2CEx_ConfigDigitalFilter+0x62>
 800568e:	2302      	movs	r3, #2
 8005690:	e033      	b.n	80056fa <HAL_I2CEx_ConfigDigitalFilter+0xca>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2201      	movs	r2, #1
 8005696:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2224      	movs	r2, #36	; 0x24
 800569e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f022 0201 	bic.w	r2, r2, #1
 80056b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80056c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	021b      	lsls	r3, r3, #8
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f042 0201 	orr.w	r2, r2, #1
 80056e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2220      	movs	r2, #32
 80056e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80056f4:	2300      	movs	r3, #0
 80056f6:	e000      	b.n	80056fa <HAL_I2CEx_ConfigDigitalFilter+0xca>
  }
  else
  {
    return HAL_BUSY;
 80056f8:	2302      	movs	r3, #2
  }
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3710      	adds	r7, #16
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop
 8005704:	40005400 	.word	0x40005400
 8005708:	40005800 	.word	0x40005800
 800570c:	40005c00 	.word	0x40005c00
 8005710:	40006000 	.word	0x40006000
 8005714:	08016338 	.word	0x08016338

08005718 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b082      	sub	sp, #8
 800571c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800571e:	2300      	movs	r3, #0
 8005720:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005722:	4b23      	ldr	r3, [pc, #140]	; (80057b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8005724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005726:	4a22      	ldr	r2, [pc, #136]	; (80057b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8005728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800572c:	6413      	str	r3, [r2, #64]	; 0x40
 800572e:	4b20      	ldr	r3, [pc, #128]	; (80057b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8005730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005736:	603b      	str	r3, [r7, #0]
 8005738:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800573a:	4b1e      	ldr	r3, [pc, #120]	; (80057b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a1d      	ldr	r2, [pc, #116]	; (80057b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005740:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005744:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005746:	f7fd fdd7 	bl	80032f8 <HAL_GetTick>
 800574a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800574c:	e009      	b.n	8005762 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800574e:	f7fd fdd3 	bl	80032f8 <HAL_GetTick>
 8005752:	4602      	mov	r2, r0
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800575c:	d901      	bls.n	8005762 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800575e:	2303      	movs	r3, #3
 8005760:	e022      	b.n	80057a8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005762:	4b14      	ldr	r3, [pc, #80]	; (80057b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800576a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800576e:	d1ee      	bne.n	800574e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005770:	4b10      	ldr	r3, [pc, #64]	; (80057b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a0f      	ldr	r2, [pc, #60]	; (80057b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005776:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800577a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800577c:	f7fd fdbc 	bl	80032f8 <HAL_GetTick>
 8005780:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005782:	e009      	b.n	8005798 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005784:	f7fd fdb8 	bl	80032f8 <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005792:	d901      	bls.n	8005798 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	e007      	b.n	80057a8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005798:	4b06      	ldr	r3, [pc, #24]	; (80057b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057a4:	d1ee      	bne.n	8005784 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3708      	adds	r7, #8
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	40023800 	.word	0x40023800
 80057b4:	40007000 	.word	0x40007000

080057b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b086      	sub	sp, #24
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80057c0:	2300      	movs	r3, #0
 80057c2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d101      	bne.n	80057ce <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e345      	b.n	8005e5a <HAL_RCC_OscConfig+0x6a2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2b0f      	cmp	r3, #15
 80057d4:	d904      	bls.n	80057e0 <HAL_RCC_OscConfig+0x28>
 80057d6:	f240 1163 	movw	r1, #355	; 0x163
 80057da:	4892      	ldr	r0, [pc, #584]	; (8005a24 <HAL_RCC_OscConfig+0x26c>)
 80057dc:	f7fc ff59 	bl	8002692 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 0301 	and.w	r3, r3, #1
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	f000 809a 	beq.w	8005922 <HAL_RCC_OscConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00e      	beq.n	8005814 <HAL_RCC_OscConfig+0x5c>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057fe:	d009      	beq.n	8005814 <HAL_RCC_OscConfig+0x5c>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005808:	d004      	beq.n	8005814 <HAL_RCC_OscConfig+0x5c>
 800580a:	f240 1169 	movw	r1, #361	; 0x169
 800580e:	4885      	ldr	r0, [pc, #532]	; (8005a24 <HAL_RCC_OscConfig+0x26c>)
 8005810:	f7fc ff3f 	bl	8002692 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005814:	4b84      	ldr	r3, [pc, #528]	; (8005a28 <HAL_RCC_OscConfig+0x270>)
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	f003 030c 	and.w	r3, r3, #12
 800581c:	2b04      	cmp	r3, #4
 800581e:	d00c      	beq.n	800583a <HAL_RCC_OscConfig+0x82>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005820:	4b81      	ldr	r3, [pc, #516]	; (8005a28 <HAL_RCC_OscConfig+0x270>)
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	f003 030c 	and.w	r3, r3, #12
 8005828:	2b08      	cmp	r3, #8
 800582a:	d112      	bne.n	8005852 <HAL_RCC_OscConfig+0x9a>
 800582c:	4b7e      	ldr	r3, [pc, #504]	; (8005a28 <HAL_RCC_OscConfig+0x270>)
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005834:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005838:	d10b      	bne.n	8005852 <HAL_RCC_OscConfig+0x9a>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800583a:	4b7b      	ldr	r3, [pc, #492]	; (8005a28 <HAL_RCC_OscConfig+0x270>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005842:	2b00      	cmp	r3, #0
 8005844:	d06c      	beq.n	8005920 <HAL_RCC_OscConfig+0x168>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d168      	bne.n	8005920 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e303      	b.n	8005e5a <HAL_RCC_OscConfig+0x6a2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800585a:	d106      	bne.n	800586a <HAL_RCC_OscConfig+0xb2>
 800585c:	4b72      	ldr	r3, [pc, #456]	; (8005a28 <HAL_RCC_OscConfig+0x270>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a71      	ldr	r2, [pc, #452]	; (8005a28 <HAL_RCC_OscConfig+0x270>)
 8005862:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005866:	6013      	str	r3, [r2, #0]
 8005868:	e02e      	b.n	80058c8 <HAL_RCC_OscConfig+0x110>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d10c      	bne.n	800588c <HAL_RCC_OscConfig+0xd4>
 8005872:	4b6d      	ldr	r3, [pc, #436]	; (8005a28 <HAL_RCC_OscConfig+0x270>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a6c      	ldr	r2, [pc, #432]	; (8005a28 <HAL_RCC_OscConfig+0x270>)
 8005878:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800587c:	6013      	str	r3, [r2, #0]
 800587e:	4b6a      	ldr	r3, [pc, #424]	; (8005a28 <HAL_RCC_OscConfig+0x270>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a69      	ldr	r2, [pc, #420]	; (8005a28 <HAL_RCC_OscConfig+0x270>)
 8005884:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005888:	6013      	str	r3, [r2, #0]
 800588a:	e01d      	b.n	80058c8 <HAL_RCC_OscConfig+0x110>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005894:	d10c      	bne.n	80058b0 <HAL_RCC_OscConfig+0xf8>
 8005896:	4b64      	ldr	r3, [pc, #400]	; (8005a28 <HAL_RCC_OscConfig+0x270>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a63      	ldr	r2, [pc, #396]	; (8005a28 <HAL_RCC_OscConfig+0x270>)
 800589c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058a0:	6013      	str	r3, [r2, #0]
 80058a2:	4b61      	ldr	r3, [pc, #388]	; (8005a28 <HAL_RCC_OscConfig+0x270>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a60      	ldr	r2, [pc, #384]	; (8005a28 <HAL_RCC_OscConfig+0x270>)
 80058a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058ac:	6013      	str	r3, [r2, #0]
 80058ae:	e00b      	b.n	80058c8 <HAL_RCC_OscConfig+0x110>
 80058b0:	4b5d      	ldr	r3, [pc, #372]	; (8005a28 <HAL_RCC_OscConfig+0x270>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a5c      	ldr	r2, [pc, #368]	; (8005a28 <HAL_RCC_OscConfig+0x270>)
 80058b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058ba:	6013      	str	r3, [r2, #0]
 80058bc:	4b5a      	ldr	r3, [pc, #360]	; (8005a28 <HAL_RCC_OscConfig+0x270>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a59      	ldr	r2, [pc, #356]	; (8005a28 <HAL_RCC_OscConfig+0x270>)
 80058c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d013      	beq.n	80058f8 <HAL_RCC_OscConfig+0x140>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058d0:	f7fd fd12 	bl	80032f8 <HAL_GetTick>
 80058d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058d6:	e008      	b.n	80058ea <HAL_RCC_OscConfig+0x132>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058d8:	f7fd fd0e 	bl	80032f8 <HAL_GetTick>
 80058dc:	4602      	mov	r2, r0
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	1ad3      	subs	r3, r2, r3
 80058e2:	2b64      	cmp	r3, #100	; 0x64
 80058e4:	d901      	bls.n	80058ea <HAL_RCC_OscConfig+0x132>
          {
            return HAL_TIMEOUT;
 80058e6:	2303      	movs	r3, #3
 80058e8:	e2b7      	b.n	8005e5a <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058ea:	4b4f      	ldr	r3, [pc, #316]	; (8005a28 <HAL_RCC_OscConfig+0x270>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d0f0      	beq.n	80058d8 <HAL_RCC_OscConfig+0x120>
 80058f6:	e014      	b.n	8005922 <HAL_RCC_OscConfig+0x16a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058f8:	f7fd fcfe 	bl	80032f8 <HAL_GetTick>
 80058fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058fe:	e008      	b.n	8005912 <HAL_RCC_OscConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005900:	f7fd fcfa 	bl	80032f8 <HAL_GetTick>
 8005904:	4602      	mov	r2, r0
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	2b64      	cmp	r3, #100	; 0x64
 800590c:	d901      	bls.n	8005912 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800590e:	2303      	movs	r3, #3
 8005910:	e2a3      	b.n	8005e5a <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005912:	4b45      	ldr	r3, [pc, #276]	; (8005a28 <HAL_RCC_OscConfig+0x270>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800591a:	2b00      	cmp	r3, #0
 800591c:	d1f0      	bne.n	8005900 <HAL_RCC_OscConfig+0x148>
 800591e:	e000      	b.n	8005922 <HAL_RCC_OscConfig+0x16a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005920:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0302 	and.w	r3, r3, #2
 800592a:	2b00      	cmp	r3, #0
 800592c:	f000 8084 	beq.w	8005a38 <HAL_RCC_OscConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d008      	beq.n	800594a <HAL_RCC_OscConfig+0x192>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	2b01      	cmp	r3, #1
 800593e:	d004      	beq.n	800594a <HAL_RCC_OscConfig+0x192>
 8005940:	f240 119b 	movw	r1, #411	; 0x19b
 8005944:	4837      	ldr	r0, [pc, #220]	; (8005a24 <HAL_RCC_OscConfig+0x26c>)
 8005946:	f7fc fea4 	bl	8002692 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	2b1f      	cmp	r3, #31
 8005950:	d904      	bls.n	800595c <HAL_RCC_OscConfig+0x1a4>
 8005952:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8005956:	4833      	ldr	r0, [pc, #204]	; (8005a24 <HAL_RCC_OscConfig+0x26c>)
 8005958:	f7fc fe9b 	bl	8002692 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800595c:	4b32      	ldr	r3, [pc, #200]	; (8005a28 <HAL_RCC_OscConfig+0x270>)
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	f003 030c 	and.w	r3, r3, #12
 8005964:	2b00      	cmp	r3, #0
 8005966:	d00b      	beq.n	8005980 <HAL_RCC_OscConfig+0x1c8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005968:	4b2f      	ldr	r3, [pc, #188]	; (8005a28 <HAL_RCC_OscConfig+0x270>)
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	f003 030c 	and.w	r3, r3, #12
 8005970:	2b08      	cmp	r3, #8
 8005972:	d11c      	bne.n	80059ae <HAL_RCC_OscConfig+0x1f6>
 8005974:	4b2c      	ldr	r3, [pc, #176]	; (8005a28 <HAL_RCC_OscConfig+0x270>)
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800597c:	2b00      	cmp	r3, #0
 800597e:	d116      	bne.n	80059ae <HAL_RCC_OscConfig+0x1f6>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005980:	4b29      	ldr	r3, [pc, #164]	; (8005a28 <HAL_RCC_OscConfig+0x270>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 0302 	and.w	r3, r3, #2
 8005988:	2b00      	cmp	r3, #0
 800598a:	d005      	beq.n	8005998 <HAL_RCC_OscConfig+0x1e0>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	2b01      	cmp	r3, #1
 8005992:	d001      	beq.n	8005998 <HAL_RCC_OscConfig+0x1e0>
      {
        return HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	e260      	b.n	8005e5a <HAL_RCC_OscConfig+0x6a2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005998:	4b23      	ldr	r3, [pc, #140]	; (8005a28 <HAL_RCC_OscConfig+0x270>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	00db      	lsls	r3, r3, #3
 80059a6:	4920      	ldr	r1, [pc, #128]	; (8005a28 <HAL_RCC_OscConfig+0x270>)
 80059a8:	4313      	orrs	r3, r2
 80059aa:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059ac:	e044      	b.n	8005a38 <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d023      	beq.n	80059fe <HAL_RCC_OscConfig+0x246>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80059b6:	4b1c      	ldr	r3, [pc, #112]	; (8005a28 <HAL_RCC_OscConfig+0x270>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a1b      	ldr	r2, [pc, #108]	; (8005a28 <HAL_RCC_OscConfig+0x270>)
 80059bc:	f043 0301 	orr.w	r3, r3, #1
 80059c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059c2:	f7fd fc99 	bl	80032f8 <HAL_GetTick>
 80059c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059c8:	e008      	b.n	80059dc <HAL_RCC_OscConfig+0x224>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059ca:	f7fd fc95 	bl	80032f8 <HAL_GetTick>
 80059ce:	4602      	mov	r2, r0
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	d901      	bls.n	80059dc <HAL_RCC_OscConfig+0x224>
          {
            return HAL_TIMEOUT;
 80059d8:	2303      	movs	r3, #3
 80059da:	e23e      	b.n	8005e5a <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059dc:	4b12      	ldr	r3, [pc, #72]	; (8005a28 <HAL_RCC_OscConfig+0x270>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 0302 	and.w	r3, r3, #2
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d0f0      	beq.n	80059ca <HAL_RCC_OscConfig+0x212>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059e8:	4b0f      	ldr	r3, [pc, #60]	; (8005a28 <HAL_RCC_OscConfig+0x270>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	691b      	ldr	r3, [r3, #16]
 80059f4:	00db      	lsls	r3, r3, #3
 80059f6:	490c      	ldr	r1, [pc, #48]	; (8005a28 <HAL_RCC_OscConfig+0x270>)
 80059f8:	4313      	orrs	r3, r2
 80059fa:	600b      	str	r3, [r1, #0]
 80059fc:	e01c      	b.n	8005a38 <HAL_RCC_OscConfig+0x280>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059fe:	4b0a      	ldr	r3, [pc, #40]	; (8005a28 <HAL_RCC_OscConfig+0x270>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a09      	ldr	r2, [pc, #36]	; (8005a28 <HAL_RCC_OscConfig+0x270>)
 8005a04:	f023 0301 	bic.w	r3, r3, #1
 8005a08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a0a:	f7fd fc75 	bl	80032f8 <HAL_GetTick>
 8005a0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a10:	e00c      	b.n	8005a2c <HAL_RCC_OscConfig+0x274>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a12:	f7fd fc71 	bl	80032f8 <HAL_GetTick>
 8005a16:	4602      	mov	r2, r0
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	2b02      	cmp	r3, #2
 8005a1e:	d905      	bls.n	8005a2c <HAL_RCC_OscConfig+0x274>
          {
            return HAL_TIMEOUT;
 8005a20:	2303      	movs	r3, #3
 8005a22:	e21a      	b.n	8005e5a <HAL_RCC_OscConfig+0x6a2>
 8005a24:	08016374 	.word	0x08016374
 8005a28:	40023800 	.word	0x40023800
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a2c:	4b7e      	ldr	r3, [pc, #504]	; (8005c28 <HAL_RCC_OscConfig+0x470>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 0302 	and.w	r3, r3, #2
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d1ec      	bne.n	8005a12 <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 0308 	and.w	r3, r3, #8
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d043      	beq.n	8005acc <HAL_RCC_OscConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	695b      	ldr	r3, [r3, #20]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d008      	beq.n	8005a5e <HAL_RCC_OscConfig+0x2a6>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	695b      	ldr	r3, [r3, #20]
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d004      	beq.n	8005a5e <HAL_RCC_OscConfig+0x2a6>
 8005a54:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8005a58:	4874      	ldr	r0, [pc, #464]	; (8005c2c <HAL_RCC_OscConfig+0x474>)
 8005a5a:	f7fc fe1a 	bl	8002692 <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	695b      	ldr	r3, [r3, #20]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d019      	beq.n	8005a9a <HAL_RCC_OscConfig+0x2e2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a66:	4b70      	ldr	r3, [pc, #448]	; (8005c28 <HAL_RCC_OscConfig+0x470>)
 8005a68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a6a:	4a6f      	ldr	r2, [pc, #444]	; (8005c28 <HAL_RCC_OscConfig+0x470>)
 8005a6c:	f043 0301 	orr.w	r3, r3, #1
 8005a70:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a72:	f7fd fc41 	bl	80032f8 <HAL_GetTick>
 8005a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a78:	e008      	b.n	8005a8c <HAL_RCC_OscConfig+0x2d4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a7a:	f7fd fc3d 	bl	80032f8 <HAL_GetTick>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d901      	bls.n	8005a8c <HAL_RCC_OscConfig+0x2d4>
        {
          return HAL_TIMEOUT;
 8005a88:	2303      	movs	r3, #3
 8005a8a:	e1e6      	b.n	8005e5a <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a8c:	4b66      	ldr	r3, [pc, #408]	; (8005c28 <HAL_RCC_OscConfig+0x470>)
 8005a8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a90:	f003 0302 	and.w	r3, r3, #2
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d0f0      	beq.n	8005a7a <HAL_RCC_OscConfig+0x2c2>
 8005a98:	e018      	b.n	8005acc <HAL_RCC_OscConfig+0x314>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a9a:	4b63      	ldr	r3, [pc, #396]	; (8005c28 <HAL_RCC_OscConfig+0x470>)
 8005a9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a9e:	4a62      	ldr	r2, [pc, #392]	; (8005c28 <HAL_RCC_OscConfig+0x470>)
 8005aa0:	f023 0301 	bic.w	r3, r3, #1
 8005aa4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aa6:	f7fd fc27 	bl	80032f8 <HAL_GetTick>
 8005aaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005aac:	e008      	b.n	8005ac0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005aae:	f7fd fc23 	bl	80032f8 <HAL_GetTick>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	d901      	bls.n	8005ac0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005abc:	2303      	movs	r3, #3
 8005abe:	e1cc      	b.n	8005e5a <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ac0:	4b59      	ldr	r3, [pc, #356]	; (8005c28 <HAL_RCC_OscConfig+0x470>)
 8005ac2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ac4:	f003 0302 	and.w	r3, r3, #2
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d1f0      	bne.n	8005aae <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 0304 	and.w	r3, r3, #4
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	f000 80bc 	beq.w	8005c52 <HAL_RCC_OscConfig+0x49a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d00c      	beq.n	8005afc <HAL_RCC_OscConfig+0x344>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d008      	beq.n	8005afc <HAL_RCC_OscConfig+0x344>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	2b05      	cmp	r3, #5
 8005af0:	d004      	beq.n	8005afc <HAL_RCC_OscConfig+0x344>
 8005af2:	f240 2106 	movw	r1, #518	; 0x206
 8005af6:	484d      	ldr	r0, [pc, #308]	; (8005c2c <HAL_RCC_OscConfig+0x474>)
 8005af8:	f7fc fdcb 	bl	8002692 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005afc:	4b4a      	ldr	r3, [pc, #296]	; (8005c28 <HAL_RCC_OscConfig+0x470>)
 8005afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d10d      	bne.n	8005b24 <HAL_RCC_OscConfig+0x36c>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b08:	4b47      	ldr	r3, [pc, #284]	; (8005c28 <HAL_RCC_OscConfig+0x470>)
 8005b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b0c:	4a46      	ldr	r2, [pc, #280]	; (8005c28 <HAL_RCC_OscConfig+0x470>)
 8005b0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b12:	6413      	str	r3, [r2, #64]	; 0x40
 8005b14:	4b44      	ldr	r3, [pc, #272]	; (8005c28 <HAL_RCC_OscConfig+0x470>)
 8005b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b1c:	60bb      	str	r3, [r7, #8]
 8005b1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b20:	2301      	movs	r3, #1
 8005b22:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b24:	4b42      	ldr	r3, [pc, #264]	; (8005c30 <HAL_RCC_OscConfig+0x478>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d118      	bne.n	8005b62 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005b30:	4b3f      	ldr	r3, [pc, #252]	; (8005c30 <HAL_RCC_OscConfig+0x478>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a3e      	ldr	r2, [pc, #248]	; (8005c30 <HAL_RCC_OscConfig+0x478>)
 8005b36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b3a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b3c:	f7fd fbdc 	bl	80032f8 <HAL_GetTick>
 8005b40:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b42:	e008      	b.n	8005b56 <HAL_RCC_OscConfig+0x39e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b44:	f7fd fbd8 	bl	80032f8 <HAL_GetTick>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	1ad3      	subs	r3, r2, r3
 8005b4e:	2b64      	cmp	r3, #100	; 0x64
 8005b50:	d901      	bls.n	8005b56 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005b52:	2303      	movs	r3, #3
 8005b54:	e181      	b.n	8005e5a <HAL_RCC_OscConfig+0x6a2>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b56:	4b36      	ldr	r3, [pc, #216]	; (8005c30 <HAL_RCC_OscConfig+0x478>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d0f0      	beq.n	8005b44 <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d106      	bne.n	8005b78 <HAL_RCC_OscConfig+0x3c0>
 8005b6a:	4b2f      	ldr	r3, [pc, #188]	; (8005c28 <HAL_RCC_OscConfig+0x470>)
 8005b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b6e:	4a2e      	ldr	r2, [pc, #184]	; (8005c28 <HAL_RCC_OscConfig+0x470>)
 8005b70:	f043 0301 	orr.w	r3, r3, #1
 8005b74:	6713      	str	r3, [r2, #112]	; 0x70
 8005b76:	e02d      	b.n	8005bd4 <HAL_RCC_OscConfig+0x41c>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d10c      	bne.n	8005b9a <HAL_RCC_OscConfig+0x3e2>
 8005b80:	4b29      	ldr	r3, [pc, #164]	; (8005c28 <HAL_RCC_OscConfig+0x470>)
 8005b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b84:	4a28      	ldr	r2, [pc, #160]	; (8005c28 <HAL_RCC_OscConfig+0x470>)
 8005b86:	f023 0301 	bic.w	r3, r3, #1
 8005b8a:	6713      	str	r3, [r2, #112]	; 0x70
 8005b8c:	4b26      	ldr	r3, [pc, #152]	; (8005c28 <HAL_RCC_OscConfig+0x470>)
 8005b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b90:	4a25      	ldr	r2, [pc, #148]	; (8005c28 <HAL_RCC_OscConfig+0x470>)
 8005b92:	f023 0304 	bic.w	r3, r3, #4
 8005b96:	6713      	str	r3, [r2, #112]	; 0x70
 8005b98:	e01c      	b.n	8005bd4 <HAL_RCC_OscConfig+0x41c>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	2b05      	cmp	r3, #5
 8005ba0:	d10c      	bne.n	8005bbc <HAL_RCC_OscConfig+0x404>
 8005ba2:	4b21      	ldr	r3, [pc, #132]	; (8005c28 <HAL_RCC_OscConfig+0x470>)
 8005ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ba6:	4a20      	ldr	r2, [pc, #128]	; (8005c28 <HAL_RCC_OscConfig+0x470>)
 8005ba8:	f043 0304 	orr.w	r3, r3, #4
 8005bac:	6713      	str	r3, [r2, #112]	; 0x70
 8005bae:	4b1e      	ldr	r3, [pc, #120]	; (8005c28 <HAL_RCC_OscConfig+0x470>)
 8005bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bb2:	4a1d      	ldr	r2, [pc, #116]	; (8005c28 <HAL_RCC_OscConfig+0x470>)
 8005bb4:	f043 0301 	orr.w	r3, r3, #1
 8005bb8:	6713      	str	r3, [r2, #112]	; 0x70
 8005bba:	e00b      	b.n	8005bd4 <HAL_RCC_OscConfig+0x41c>
 8005bbc:	4b1a      	ldr	r3, [pc, #104]	; (8005c28 <HAL_RCC_OscConfig+0x470>)
 8005bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bc0:	4a19      	ldr	r2, [pc, #100]	; (8005c28 <HAL_RCC_OscConfig+0x470>)
 8005bc2:	f023 0301 	bic.w	r3, r3, #1
 8005bc6:	6713      	str	r3, [r2, #112]	; 0x70
 8005bc8:	4b17      	ldr	r3, [pc, #92]	; (8005c28 <HAL_RCC_OscConfig+0x470>)
 8005bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bcc:	4a16      	ldr	r2, [pc, #88]	; (8005c28 <HAL_RCC_OscConfig+0x470>)
 8005bce:	f023 0304 	bic.w	r3, r3, #4
 8005bd2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d015      	beq.n	8005c08 <HAL_RCC_OscConfig+0x450>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bdc:	f7fd fb8c 	bl	80032f8 <HAL_GetTick>
 8005be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005be2:	e00a      	b.n	8005bfa <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005be4:	f7fd fb88 	bl	80032f8 <HAL_GetTick>
 8005be8:	4602      	mov	r2, r0
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	1ad3      	subs	r3, r2, r3
 8005bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d901      	bls.n	8005bfa <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	e12f      	b.n	8005e5a <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bfa:	4b0b      	ldr	r3, [pc, #44]	; (8005c28 <HAL_RCC_OscConfig+0x470>)
 8005bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bfe:	f003 0302 	and.w	r3, r3, #2
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d0ee      	beq.n	8005be4 <HAL_RCC_OscConfig+0x42c>
 8005c06:	e01b      	b.n	8005c40 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c08:	f7fd fb76 	bl	80032f8 <HAL_GetTick>
 8005c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c0e:	e011      	b.n	8005c34 <HAL_RCC_OscConfig+0x47c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c10:	f7fd fb72 	bl	80032f8 <HAL_GetTick>
 8005c14:	4602      	mov	r2, r0
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	1ad3      	subs	r3, r2, r3
 8005c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d908      	bls.n	8005c34 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	e119      	b.n	8005e5a <HAL_RCC_OscConfig+0x6a2>
 8005c26:	bf00      	nop
 8005c28:	40023800 	.word	0x40023800
 8005c2c:	08016374 	.word	0x08016374
 8005c30:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c34:	4b8b      	ldr	r3, [pc, #556]	; (8005e64 <HAL_RCC_OscConfig+0x6ac>)
 8005c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c38:	f003 0302 	and.w	r3, r3, #2
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d1e7      	bne.n	8005c10 <HAL_RCC_OscConfig+0x458>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005c40:	7dfb      	ldrb	r3, [r7, #23]
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d105      	bne.n	8005c52 <HAL_RCC_OscConfig+0x49a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c46:	4b87      	ldr	r3, [pc, #540]	; (8005e64 <HAL_RCC_OscConfig+0x6ac>)
 8005c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4a:	4a86      	ldr	r2, [pc, #536]	; (8005e64 <HAL_RCC_OscConfig+0x6ac>)
 8005c4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c50:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	699b      	ldr	r3, [r3, #24]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00c      	beq.n	8005c74 <HAL_RCC_OscConfig+0x4bc>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d008      	beq.n	8005c74 <HAL_RCC_OscConfig+0x4bc>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	699b      	ldr	r3, [r3, #24]
 8005c66:	2b02      	cmp	r3, #2
 8005c68:	d004      	beq.n	8005c74 <HAL_RCC_OscConfig+0x4bc>
 8005c6a:	f240 214a 	movw	r1, #586	; 0x24a
 8005c6e:	487e      	ldr	r0, [pc, #504]	; (8005e68 <HAL_RCC_OscConfig+0x6b0>)
 8005c70:	f7fc fd0f 	bl	8002692 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	699b      	ldr	r3, [r3, #24]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	f000 80ed 	beq.w	8005e58 <HAL_RCC_OscConfig+0x6a0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c7e:	4b79      	ldr	r3, [pc, #484]	; (8005e64 <HAL_RCC_OscConfig+0x6ac>)
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	f003 030c 	and.w	r3, r3, #12
 8005c86:	2b08      	cmp	r3, #8
 8005c88:	f000 80b4 	beq.w	8005df4 <HAL_RCC_OscConfig+0x63c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	699b      	ldr	r3, [r3, #24]
 8005c90:	2b02      	cmp	r3, #2
 8005c92:	f040 8095 	bne.w	8005dc0 <HAL_RCC_OscConfig+0x608>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	69db      	ldr	r3, [r3, #28]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d009      	beq.n	8005cb2 <HAL_RCC_OscConfig+0x4fa>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	69db      	ldr	r3, [r3, #28]
 8005ca2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ca6:	d004      	beq.n	8005cb2 <HAL_RCC_OscConfig+0x4fa>
 8005ca8:	f240 2153 	movw	r1, #595	; 0x253
 8005cac:	486e      	ldr	r0, [pc, #440]	; (8005e68 <HAL_RCC_OscConfig+0x6b0>)
 8005cae:	f7fc fcf0 	bl	8002692 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a1b      	ldr	r3, [r3, #32]
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d903      	bls.n	8005cc2 <HAL_RCC_OscConfig+0x50a>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a1b      	ldr	r3, [r3, #32]
 8005cbe:	2b3f      	cmp	r3, #63	; 0x3f
 8005cc0:	d904      	bls.n	8005ccc <HAL_RCC_OscConfig+0x514>
 8005cc2:	f44f 7115 	mov.w	r1, #596	; 0x254
 8005cc6:	4868      	ldr	r0, [pc, #416]	; (8005e68 <HAL_RCC_OscConfig+0x6b0>)
 8005cc8:	f7fc fce3 	bl	8002692 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd0:	2b31      	cmp	r3, #49	; 0x31
 8005cd2:	d904      	bls.n	8005cde <HAL_RCC_OscConfig+0x526>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd8:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8005cdc:	d904      	bls.n	8005ce8 <HAL_RCC_OscConfig+0x530>
 8005cde:	f240 2155 	movw	r1, #597	; 0x255
 8005ce2:	4861      	ldr	r0, [pc, #388]	; (8005e68 <HAL_RCC_OscConfig+0x6b0>)
 8005ce4:	f7fc fcd5 	bl	8002692 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	d010      	beq.n	8005d12 <HAL_RCC_OscConfig+0x55a>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf4:	2b04      	cmp	r3, #4
 8005cf6:	d00c      	beq.n	8005d12 <HAL_RCC_OscConfig+0x55a>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cfc:	2b06      	cmp	r3, #6
 8005cfe:	d008      	beq.n	8005d12 <HAL_RCC_OscConfig+0x55a>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d04:	2b08      	cmp	r3, #8
 8005d06:	d004      	beq.n	8005d12 <HAL_RCC_OscConfig+0x55a>
 8005d08:	f240 2156 	movw	r1, #598	; 0x256
 8005d0c:	4856      	ldr	r0, [pc, #344]	; (8005e68 <HAL_RCC_OscConfig+0x6b0>)
 8005d0e:	f7fc fcc0 	bl	8002692 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d903      	bls.n	8005d22 <HAL_RCC_OscConfig+0x56a>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d1e:	2b0f      	cmp	r3, #15
 8005d20:	d904      	bls.n	8005d2c <HAL_RCC_OscConfig+0x574>
 8005d22:	f240 2157 	movw	r1, #599	; 0x257
 8005d26:	4850      	ldr	r0, [pc, #320]	; (8005e68 <HAL_RCC_OscConfig+0x6b0>)
 8005d28:	f7fc fcb3 	bl	8002692 <assert_failed>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d2c:	4b4d      	ldr	r3, [pc, #308]	; (8005e64 <HAL_RCC_OscConfig+0x6ac>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a4c      	ldr	r2, [pc, #304]	; (8005e64 <HAL_RCC_OscConfig+0x6ac>)
 8005d32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d38:	f7fd fade 	bl	80032f8 <HAL_GetTick>
 8005d3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d3e:	e008      	b.n	8005d52 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d40:	f7fd fada 	bl	80032f8 <HAL_GetTick>
 8005d44:	4602      	mov	r2, r0
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	1ad3      	subs	r3, r2, r3
 8005d4a:	2b02      	cmp	r3, #2
 8005d4c:	d901      	bls.n	8005d52 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8005d4e:	2303      	movs	r3, #3
 8005d50:	e083      	b.n	8005e5a <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d52:	4b44      	ldr	r3, [pc, #272]	; (8005e64 <HAL_RCC_OscConfig+0x6ac>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d1f0      	bne.n	8005d40 <HAL_RCC_OscConfig+0x588>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	69da      	ldr	r2, [r3, #28]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a1b      	ldr	r3, [r3, #32]
 8005d66:	431a      	orrs	r2, r3
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6c:	019b      	lsls	r3, r3, #6
 8005d6e:	431a      	orrs	r2, r3
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d74:	085b      	lsrs	r3, r3, #1
 8005d76:	3b01      	subs	r3, #1
 8005d78:	041b      	lsls	r3, r3, #16
 8005d7a:	431a      	orrs	r2, r3
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d80:	061b      	lsls	r3, r3, #24
 8005d82:	4313      	orrs	r3, r2
 8005d84:	4a37      	ldr	r2, [pc, #220]	; (8005e64 <HAL_RCC_OscConfig+0x6ac>)
 8005d86:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d8a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d8c:	4b35      	ldr	r3, [pc, #212]	; (8005e64 <HAL_RCC_OscConfig+0x6ac>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a34      	ldr	r2, [pc, #208]	; (8005e64 <HAL_RCC_OscConfig+0x6ac>)
 8005d92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d98:	f7fd faae 	bl	80032f8 <HAL_GetTick>
 8005d9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d9e:	e008      	b.n	8005db2 <HAL_RCC_OscConfig+0x5fa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005da0:	f7fd faaa 	bl	80032f8 <HAL_GetTick>
 8005da4:	4602      	mov	r2, r0
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d901      	bls.n	8005db2 <HAL_RCC_OscConfig+0x5fa>
          {
            return HAL_TIMEOUT;
 8005dae:	2303      	movs	r3, #3
 8005db0:	e053      	b.n	8005e5a <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005db2:	4b2c      	ldr	r3, [pc, #176]	; (8005e64 <HAL_RCC_OscConfig+0x6ac>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d0f0      	beq.n	8005da0 <HAL_RCC_OscConfig+0x5e8>
 8005dbe:	e04b      	b.n	8005e58 <HAL_RCC_OscConfig+0x6a0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dc0:	4b28      	ldr	r3, [pc, #160]	; (8005e64 <HAL_RCC_OscConfig+0x6ac>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a27      	ldr	r2, [pc, #156]	; (8005e64 <HAL_RCC_OscConfig+0x6ac>)
 8005dc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005dca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dcc:	f7fd fa94 	bl	80032f8 <HAL_GetTick>
 8005dd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dd2:	e008      	b.n	8005de6 <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005dd4:	f7fd fa90 	bl	80032f8 <HAL_GetTick>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	1ad3      	subs	r3, r2, r3
 8005dde:	2b02      	cmp	r3, #2
 8005de0:	d901      	bls.n	8005de6 <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 8005de2:	2303      	movs	r3, #3
 8005de4:	e039      	b.n	8005e5a <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005de6:	4b1f      	ldr	r3, [pc, #124]	; (8005e64 <HAL_RCC_OscConfig+0x6ac>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d1f0      	bne.n	8005dd4 <HAL_RCC_OscConfig+0x61c>
 8005df2:	e031      	b.n	8005e58 <HAL_RCC_OscConfig+0x6a0>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005df4:	4b1b      	ldr	r3, [pc, #108]	; (8005e64 <HAL_RCC_OscConfig+0x6ac>)
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	699b      	ldr	r3, [r3, #24]
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d028      	beq.n	8005e54 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d121      	bne.n	8005e54 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d11a      	bne.n	8005e54 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005e24:	4013      	ands	r3, r2
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005e2a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d111      	bne.n	8005e54 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e3a:	085b      	lsrs	r3, r3, #1
 8005e3c:	3b01      	subs	r3, #1
 8005e3e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d107      	bne.n	8005e54 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e4e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d001      	beq.n	8005e58 <HAL_RCC_OscConfig+0x6a0>
#endif
      {
        return HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	e000      	b.n	8005e5a <HAL_RCC_OscConfig+0x6a2>
      }
    }
  }
  return HAL_OK;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3718      	adds	r7, #24
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	40023800 	.word	0x40023800
 8005e68:	08016374 	.word	0x08016374

08005e6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005e76:	2300      	movs	r3, #0
 8005e78:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d101      	bne.n	8005e84 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e18c      	b.n	800619e <HAL_RCC_ClockConfig+0x332>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d003      	beq.n	8005e94 <HAL_RCC_ClockConfig+0x28>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2b0f      	cmp	r3, #15
 8005e92:	d904      	bls.n	8005e9e <HAL_RCC_ClockConfig+0x32>
 8005e94:	f240 21dd 	movw	r1, #733	; 0x2dd
 8005e98:	4887      	ldr	r0, [pc, #540]	; (80060b8 <HAL_RCC_ClockConfig+0x24c>)
 8005e9a:	f7fc fbfa 	bl	8002692 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d031      	beq.n	8005f08 <HAL_RCC_ClockConfig+0x9c>
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d02e      	beq.n	8005f08 <HAL_RCC_ClockConfig+0x9c>
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	2b02      	cmp	r3, #2
 8005eae:	d02b      	beq.n	8005f08 <HAL_RCC_ClockConfig+0x9c>
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	2b03      	cmp	r3, #3
 8005eb4:	d028      	beq.n	8005f08 <HAL_RCC_ClockConfig+0x9c>
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	2b04      	cmp	r3, #4
 8005eba:	d025      	beq.n	8005f08 <HAL_RCC_ClockConfig+0x9c>
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	2b05      	cmp	r3, #5
 8005ec0:	d022      	beq.n	8005f08 <HAL_RCC_ClockConfig+0x9c>
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	2b06      	cmp	r3, #6
 8005ec6:	d01f      	beq.n	8005f08 <HAL_RCC_ClockConfig+0x9c>
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	2b07      	cmp	r3, #7
 8005ecc:	d01c      	beq.n	8005f08 <HAL_RCC_ClockConfig+0x9c>
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	2b08      	cmp	r3, #8
 8005ed2:	d019      	beq.n	8005f08 <HAL_RCC_ClockConfig+0x9c>
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	2b09      	cmp	r3, #9
 8005ed8:	d016      	beq.n	8005f08 <HAL_RCC_ClockConfig+0x9c>
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	2b0a      	cmp	r3, #10
 8005ede:	d013      	beq.n	8005f08 <HAL_RCC_ClockConfig+0x9c>
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	2b0b      	cmp	r3, #11
 8005ee4:	d010      	beq.n	8005f08 <HAL_RCC_ClockConfig+0x9c>
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	2b0c      	cmp	r3, #12
 8005eea:	d00d      	beq.n	8005f08 <HAL_RCC_ClockConfig+0x9c>
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	2b0d      	cmp	r3, #13
 8005ef0:	d00a      	beq.n	8005f08 <HAL_RCC_ClockConfig+0x9c>
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	2b0e      	cmp	r3, #14
 8005ef6:	d007      	beq.n	8005f08 <HAL_RCC_ClockConfig+0x9c>
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	2b0f      	cmp	r3, #15
 8005efc:	d004      	beq.n	8005f08 <HAL_RCC_ClockConfig+0x9c>
 8005efe:	f240 21de 	movw	r1, #734	; 0x2de
 8005f02:	486d      	ldr	r0, [pc, #436]	; (80060b8 <HAL_RCC_ClockConfig+0x24c>)
 8005f04:	f7fc fbc5 	bl	8002692 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f08:	4b6c      	ldr	r3, [pc, #432]	; (80060bc <HAL_RCC_ClockConfig+0x250>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 030f 	and.w	r3, r3, #15
 8005f10:	683a      	ldr	r2, [r7, #0]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d910      	bls.n	8005f38 <HAL_RCC_ClockConfig+0xcc>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f16:	4b69      	ldr	r3, [pc, #420]	; (80060bc <HAL_RCC_ClockConfig+0x250>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f023 020f 	bic.w	r2, r3, #15
 8005f1e:	4967      	ldr	r1, [pc, #412]	; (80060bc <HAL_RCC_ClockConfig+0x250>)
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f26:	4b65      	ldr	r3, [pc, #404]	; (80060bc <HAL_RCC_ClockConfig+0x250>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f003 030f 	and.w	r3, r3, #15
 8005f2e:	683a      	ldr	r2, [r7, #0]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d001      	beq.n	8005f38 <HAL_RCC_ClockConfig+0xcc>
    {
      return HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	e132      	b.n	800619e <HAL_RCC_ClockConfig+0x332>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 0302 	and.w	r3, r3, #2
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d049      	beq.n	8005fd8 <HAL_RCC_ClockConfig+0x16c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f003 0304 	and.w	r3, r3, #4
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d005      	beq.n	8005f5c <HAL_RCC_ClockConfig+0xf0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f50:	4b5b      	ldr	r3, [pc, #364]	; (80060c0 <HAL_RCC_ClockConfig+0x254>)
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	4a5a      	ldr	r2, [pc, #360]	; (80060c0 <HAL_RCC_ClockConfig+0x254>)
 8005f56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005f5a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 0308 	and.w	r3, r3, #8
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d005      	beq.n	8005f74 <HAL_RCC_ClockConfig+0x108>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f68:	4b55      	ldr	r3, [pc, #340]	; (80060c0 <HAL_RCC_ClockConfig+0x254>)
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	4a54      	ldr	r2, [pc, #336]	; (80060c0 <HAL_RCC_ClockConfig+0x254>)
 8005f6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005f72:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d024      	beq.n	8005fc6 <HAL_RCC_ClockConfig+0x15a>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	2b80      	cmp	r3, #128	; 0x80
 8005f82:	d020      	beq.n	8005fc6 <HAL_RCC_ClockConfig+0x15a>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	2b90      	cmp	r3, #144	; 0x90
 8005f8a:	d01c      	beq.n	8005fc6 <HAL_RCC_ClockConfig+0x15a>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	2ba0      	cmp	r3, #160	; 0xa0
 8005f92:	d018      	beq.n	8005fc6 <HAL_RCC_ClockConfig+0x15a>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	2bb0      	cmp	r3, #176	; 0xb0
 8005f9a:	d014      	beq.n	8005fc6 <HAL_RCC_ClockConfig+0x15a>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	2bc0      	cmp	r3, #192	; 0xc0
 8005fa2:	d010      	beq.n	8005fc6 <HAL_RCC_ClockConfig+0x15a>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	2bd0      	cmp	r3, #208	; 0xd0
 8005faa:	d00c      	beq.n	8005fc6 <HAL_RCC_ClockConfig+0x15a>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	2be0      	cmp	r3, #224	; 0xe0
 8005fb2:	d008      	beq.n	8005fc6 <HAL_RCC_ClockConfig+0x15a>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	2bf0      	cmp	r3, #240	; 0xf0
 8005fba:	d004      	beq.n	8005fc6 <HAL_RCC_ClockConfig+0x15a>
 8005fbc:	f240 3102 	movw	r1, #770	; 0x302
 8005fc0:	483d      	ldr	r0, [pc, #244]	; (80060b8 <HAL_RCC_ClockConfig+0x24c>)
 8005fc2:	f7fc fb66 	bl	8002692 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fc6:	4b3e      	ldr	r3, [pc, #248]	; (80060c0 <HAL_RCC_ClockConfig+0x254>)
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	493b      	ldr	r1, [pc, #236]	; (80060c0 <HAL_RCC_ClockConfig+0x254>)
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 0301 	and.w	r3, r3, #1
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d051      	beq.n	8006088 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d00c      	beq.n	8006006 <HAL_RCC_ClockConfig+0x19a>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d008      	beq.n	8006006 <HAL_RCC_ClockConfig+0x19a>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	2b02      	cmp	r3, #2
 8005ffa:	d004      	beq.n	8006006 <HAL_RCC_ClockConfig+0x19a>
 8005ffc:	f240 3109 	movw	r1, #777	; 0x309
 8006000:	482d      	ldr	r0, [pc, #180]	; (80060b8 <HAL_RCC_ClockConfig+0x24c>)
 8006002:	f7fc fb46 	bl	8002692 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	2b01      	cmp	r3, #1
 800600c:	d107      	bne.n	800601e <HAL_RCC_ClockConfig+0x1b2>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800600e:	4b2c      	ldr	r3, [pc, #176]	; (80060c0 <HAL_RCC_ClockConfig+0x254>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006016:	2b00      	cmp	r3, #0
 8006018:	d115      	bne.n	8006046 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	e0bf      	b.n	800619e <HAL_RCC_ClockConfig+0x332>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	2b02      	cmp	r3, #2
 8006024:	d107      	bne.n	8006036 <HAL_RCC_ClockConfig+0x1ca>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006026:	4b26      	ldr	r3, [pc, #152]	; (80060c0 <HAL_RCC_ClockConfig+0x254>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800602e:	2b00      	cmp	r3, #0
 8006030:	d109      	bne.n	8006046 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e0b3      	b.n	800619e <HAL_RCC_ClockConfig+0x332>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006036:	4b22      	ldr	r3, [pc, #136]	; (80060c0 <HAL_RCC_ClockConfig+0x254>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f003 0302 	and.w	r3, r3, #2
 800603e:	2b00      	cmp	r3, #0
 8006040:	d101      	bne.n	8006046 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e0ab      	b.n	800619e <HAL_RCC_ClockConfig+0x332>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006046:	4b1e      	ldr	r3, [pc, #120]	; (80060c0 <HAL_RCC_ClockConfig+0x254>)
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	f023 0203 	bic.w	r2, r3, #3
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	491b      	ldr	r1, [pc, #108]	; (80060c0 <HAL_RCC_ClockConfig+0x254>)
 8006054:	4313      	orrs	r3, r2
 8006056:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006058:	f7fd f94e 	bl	80032f8 <HAL_GetTick>
 800605c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800605e:	e00a      	b.n	8006076 <HAL_RCC_ClockConfig+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006060:	f7fd f94a 	bl	80032f8 <HAL_GetTick>
 8006064:	4602      	mov	r2, r0
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	f241 3288 	movw	r2, #5000	; 0x1388
 800606e:	4293      	cmp	r3, r2
 8006070:	d901      	bls.n	8006076 <HAL_RCC_ClockConfig+0x20a>
      {
        return HAL_TIMEOUT;
 8006072:	2303      	movs	r3, #3
 8006074:	e093      	b.n	800619e <HAL_RCC_ClockConfig+0x332>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006076:	4b12      	ldr	r3, [pc, #72]	; (80060c0 <HAL_RCC_ClockConfig+0x254>)
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	f003 020c 	and.w	r2, r3, #12
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	429a      	cmp	r2, r3
 8006086:	d1eb      	bne.n	8006060 <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006088:	4b0c      	ldr	r3, [pc, #48]	; (80060bc <HAL_RCC_ClockConfig+0x250>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f003 030f 	and.w	r3, r3, #15
 8006090:	683a      	ldr	r2, [r7, #0]
 8006092:	429a      	cmp	r2, r3
 8006094:	d216      	bcs.n	80060c4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006096:	4b09      	ldr	r3, [pc, #36]	; (80060bc <HAL_RCC_ClockConfig+0x250>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f023 020f 	bic.w	r2, r3, #15
 800609e:	4907      	ldr	r1, [pc, #28]	; (80060bc <HAL_RCC_ClockConfig+0x250>)
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060a6:	4b05      	ldr	r3, [pc, #20]	; (80060bc <HAL_RCC_ClockConfig+0x250>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f003 030f 	and.w	r3, r3, #15
 80060ae:	683a      	ldr	r2, [r7, #0]
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d007      	beq.n	80060c4 <HAL_RCC_ClockConfig+0x258>
    {
      return HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	e072      	b.n	800619e <HAL_RCC_ClockConfig+0x332>
 80060b8:	08016374 	.word	0x08016374
 80060bc:	40023c00 	.word	0x40023c00
 80060c0:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f003 0304 	and.w	r3, r3, #4
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d025      	beq.n	800611c <HAL_RCC_ClockConfig+0x2b0>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d018      	beq.n	800610a <HAL_RCC_ClockConfig+0x29e>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060e0:	d013      	beq.n	800610a <HAL_RCC_ClockConfig+0x29e>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80060ea:	d00e      	beq.n	800610a <HAL_RCC_ClockConfig+0x29e>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80060f4:	d009      	beq.n	800610a <HAL_RCC_ClockConfig+0x29e>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80060fe:	d004      	beq.n	800610a <HAL_RCC_ClockConfig+0x29e>
 8006100:	f240 3146 	movw	r1, #838	; 0x346
 8006104:	4828      	ldr	r0, [pc, #160]	; (80061a8 <HAL_RCC_ClockConfig+0x33c>)
 8006106:	f7fc fac4 	bl	8002692 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800610a:	4b28      	ldr	r3, [pc, #160]	; (80061ac <HAL_RCC_ClockConfig+0x340>)
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	4925      	ldr	r1, [pc, #148]	; (80061ac <HAL_RCC_ClockConfig+0x340>)
 8006118:	4313      	orrs	r3, r2
 800611a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 0308 	and.w	r3, r3, #8
 8006124:	2b00      	cmp	r3, #0
 8006126:	d026      	beq.n	8006176 <HAL_RCC_ClockConfig+0x30a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	691b      	ldr	r3, [r3, #16]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d018      	beq.n	8006162 <HAL_RCC_ClockConfig+0x2f6>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	691b      	ldr	r3, [r3, #16]
 8006134:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006138:	d013      	beq.n	8006162 <HAL_RCC_ClockConfig+0x2f6>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006142:	d00e      	beq.n	8006162 <HAL_RCC_ClockConfig+0x2f6>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	691b      	ldr	r3, [r3, #16]
 8006148:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800614c:	d009      	beq.n	8006162 <HAL_RCC_ClockConfig+0x2f6>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8006156:	d004      	beq.n	8006162 <HAL_RCC_ClockConfig+0x2f6>
 8006158:	f240 314d 	movw	r1, #845	; 0x34d
 800615c:	4812      	ldr	r0, [pc, #72]	; (80061a8 <HAL_RCC_ClockConfig+0x33c>)
 800615e:	f7fc fa98 	bl	8002692 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006162:	4b12      	ldr	r3, [pc, #72]	; (80061ac <HAL_RCC_ClockConfig+0x340>)
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	691b      	ldr	r3, [r3, #16]
 800616e:	00db      	lsls	r3, r3, #3
 8006170:	490e      	ldr	r1, [pc, #56]	; (80061ac <HAL_RCC_ClockConfig+0x340>)
 8006172:	4313      	orrs	r3, r2
 8006174:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006176:	f000 f821 	bl	80061bc <HAL_RCC_GetSysClockFreq>
 800617a:	4602      	mov	r2, r0
 800617c:	4b0b      	ldr	r3, [pc, #44]	; (80061ac <HAL_RCC_ClockConfig+0x340>)
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	091b      	lsrs	r3, r3, #4
 8006182:	f003 030f 	and.w	r3, r3, #15
 8006186:	490a      	ldr	r1, [pc, #40]	; (80061b0 <HAL_RCC_ClockConfig+0x344>)
 8006188:	5ccb      	ldrb	r3, [r1, r3]
 800618a:	fa22 f303 	lsr.w	r3, r2, r3
 800618e:	4a09      	ldr	r2, [pc, #36]	; (80061b4 <HAL_RCC_ClockConfig+0x348>)
 8006190:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006192:	4b09      	ldr	r3, [pc, #36]	; (80061b8 <HAL_RCC_ClockConfig+0x34c>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4618      	mov	r0, r3
 8006198:	f7fd f86a 	bl	8003270 <HAL_InitTick>

  return HAL_OK;
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3710      	adds	r7, #16
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	08016374 	.word	0x08016374
 80061ac:	40023800 	.word	0x40023800
 80061b0:	080164a4 	.word	0x080164a4
 80061b4:	2000000c 	.word	0x2000000c
 80061b8:	20000174 	.word	0x20000174

080061bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061c0:	b090      	sub	sp, #64	; 0x40
 80061c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80061c4:	2300      	movs	r3, #0
 80061c6:	637b      	str	r3, [r7, #52]	; 0x34
 80061c8:	2300      	movs	r3, #0
 80061ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061cc:	2300      	movs	r3, #0
 80061ce:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80061d0:	2300      	movs	r3, #0
 80061d2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80061d4:	4b59      	ldr	r3, [pc, #356]	; (800633c <HAL_RCC_GetSysClockFreq+0x180>)
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	f003 030c 	and.w	r3, r3, #12
 80061dc:	2b08      	cmp	r3, #8
 80061de:	d00d      	beq.n	80061fc <HAL_RCC_GetSysClockFreq+0x40>
 80061e0:	2b08      	cmp	r3, #8
 80061e2:	f200 80a1 	bhi.w	8006328 <HAL_RCC_GetSysClockFreq+0x16c>
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d002      	beq.n	80061f0 <HAL_RCC_GetSysClockFreq+0x34>
 80061ea:	2b04      	cmp	r3, #4
 80061ec:	d003      	beq.n	80061f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80061ee:	e09b      	b.n	8006328 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80061f0:	4b53      	ldr	r3, [pc, #332]	; (8006340 <HAL_RCC_GetSysClockFreq+0x184>)
 80061f2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80061f4:	e09b      	b.n	800632e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80061f6:	4b53      	ldr	r3, [pc, #332]	; (8006344 <HAL_RCC_GetSysClockFreq+0x188>)
 80061f8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80061fa:	e098      	b.n	800632e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80061fc:	4b4f      	ldr	r3, [pc, #316]	; (800633c <HAL_RCC_GetSysClockFreq+0x180>)
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006204:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006206:	4b4d      	ldr	r3, [pc, #308]	; (800633c <HAL_RCC_GetSysClockFreq+0x180>)
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800620e:	2b00      	cmp	r3, #0
 8006210:	d028      	beq.n	8006264 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006212:	4b4a      	ldr	r3, [pc, #296]	; (800633c <HAL_RCC_GetSysClockFreq+0x180>)
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	099b      	lsrs	r3, r3, #6
 8006218:	2200      	movs	r2, #0
 800621a:	623b      	str	r3, [r7, #32]
 800621c:	627a      	str	r2, [r7, #36]	; 0x24
 800621e:	6a3b      	ldr	r3, [r7, #32]
 8006220:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006224:	2100      	movs	r1, #0
 8006226:	4b47      	ldr	r3, [pc, #284]	; (8006344 <HAL_RCC_GetSysClockFreq+0x188>)
 8006228:	fb03 f201 	mul.w	r2, r3, r1
 800622c:	2300      	movs	r3, #0
 800622e:	fb00 f303 	mul.w	r3, r0, r3
 8006232:	4413      	add	r3, r2
 8006234:	4a43      	ldr	r2, [pc, #268]	; (8006344 <HAL_RCC_GetSysClockFreq+0x188>)
 8006236:	fba0 1202 	umull	r1, r2, r0, r2
 800623a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800623c:	460a      	mov	r2, r1
 800623e:	62ba      	str	r2, [r7, #40]	; 0x28
 8006240:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006242:	4413      	add	r3, r2
 8006244:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006248:	2200      	movs	r2, #0
 800624a:	61bb      	str	r3, [r7, #24]
 800624c:	61fa      	str	r2, [r7, #28]
 800624e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006252:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006256:	f7fa fd47 	bl	8000ce8 <__aeabi_uldivmod>
 800625a:	4602      	mov	r2, r0
 800625c:	460b      	mov	r3, r1
 800625e:	4613      	mov	r3, r2
 8006260:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006262:	e053      	b.n	800630c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006264:	4b35      	ldr	r3, [pc, #212]	; (800633c <HAL_RCC_GetSysClockFreq+0x180>)
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	099b      	lsrs	r3, r3, #6
 800626a:	2200      	movs	r2, #0
 800626c:	613b      	str	r3, [r7, #16]
 800626e:	617a      	str	r2, [r7, #20]
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006276:	f04f 0b00 	mov.w	fp, #0
 800627a:	4652      	mov	r2, sl
 800627c:	465b      	mov	r3, fp
 800627e:	f04f 0000 	mov.w	r0, #0
 8006282:	f04f 0100 	mov.w	r1, #0
 8006286:	0159      	lsls	r1, r3, #5
 8006288:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800628c:	0150      	lsls	r0, r2, #5
 800628e:	4602      	mov	r2, r0
 8006290:	460b      	mov	r3, r1
 8006292:	ebb2 080a 	subs.w	r8, r2, sl
 8006296:	eb63 090b 	sbc.w	r9, r3, fp
 800629a:	f04f 0200 	mov.w	r2, #0
 800629e:	f04f 0300 	mov.w	r3, #0
 80062a2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80062a6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80062aa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80062ae:	ebb2 0408 	subs.w	r4, r2, r8
 80062b2:	eb63 0509 	sbc.w	r5, r3, r9
 80062b6:	f04f 0200 	mov.w	r2, #0
 80062ba:	f04f 0300 	mov.w	r3, #0
 80062be:	00eb      	lsls	r3, r5, #3
 80062c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80062c4:	00e2      	lsls	r2, r4, #3
 80062c6:	4614      	mov	r4, r2
 80062c8:	461d      	mov	r5, r3
 80062ca:	eb14 030a 	adds.w	r3, r4, sl
 80062ce:	603b      	str	r3, [r7, #0]
 80062d0:	eb45 030b 	adc.w	r3, r5, fp
 80062d4:	607b      	str	r3, [r7, #4]
 80062d6:	f04f 0200 	mov.w	r2, #0
 80062da:	f04f 0300 	mov.w	r3, #0
 80062de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80062e2:	4629      	mov	r1, r5
 80062e4:	028b      	lsls	r3, r1, #10
 80062e6:	4621      	mov	r1, r4
 80062e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80062ec:	4621      	mov	r1, r4
 80062ee:	028a      	lsls	r2, r1, #10
 80062f0:	4610      	mov	r0, r2
 80062f2:	4619      	mov	r1, r3
 80062f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062f6:	2200      	movs	r2, #0
 80062f8:	60bb      	str	r3, [r7, #8]
 80062fa:	60fa      	str	r2, [r7, #12]
 80062fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006300:	f7fa fcf2 	bl	8000ce8 <__aeabi_uldivmod>
 8006304:	4602      	mov	r2, r0
 8006306:	460b      	mov	r3, r1
 8006308:	4613      	mov	r3, r2
 800630a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800630c:	4b0b      	ldr	r3, [pc, #44]	; (800633c <HAL_RCC_GetSysClockFreq+0x180>)
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	0c1b      	lsrs	r3, r3, #16
 8006312:	f003 0303 	and.w	r3, r3, #3
 8006316:	3301      	adds	r3, #1
 8006318:	005b      	lsls	r3, r3, #1
 800631a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800631c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800631e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006320:	fbb2 f3f3 	udiv	r3, r2, r3
 8006324:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006326:	e002      	b.n	800632e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006328:	4b05      	ldr	r3, [pc, #20]	; (8006340 <HAL_RCC_GetSysClockFreq+0x184>)
 800632a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800632c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800632e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006330:	4618      	mov	r0, r3
 8006332:	3740      	adds	r7, #64	; 0x40
 8006334:	46bd      	mov	sp, r7
 8006336:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800633a:	bf00      	nop
 800633c:	40023800 	.word	0x40023800
 8006340:	00f42400 	.word	0x00f42400
 8006344:	017d7840 	.word	0x017d7840

08006348 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006348:	b480      	push	{r7}
 800634a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800634c:	4b03      	ldr	r3, [pc, #12]	; (800635c <HAL_RCC_GetHCLKFreq+0x14>)
 800634e:	681b      	ldr	r3, [r3, #0]
}
 8006350:	4618      	mov	r0, r3
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr
 800635a:	bf00      	nop
 800635c:	2000000c 	.word	0x2000000c

08006360 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006364:	f7ff fff0 	bl	8006348 <HAL_RCC_GetHCLKFreq>
 8006368:	4602      	mov	r2, r0
 800636a:	4b05      	ldr	r3, [pc, #20]	; (8006380 <HAL_RCC_GetPCLK1Freq+0x20>)
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	0a9b      	lsrs	r3, r3, #10
 8006370:	f003 0307 	and.w	r3, r3, #7
 8006374:	4903      	ldr	r1, [pc, #12]	; (8006384 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006376:	5ccb      	ldrb	r3, [r1, r3]
 8006378:	fa22 f303 	lsr.w	r3, r2, r3
}
 800637c:	4618      	mov	r0, r3
 800637e:	bd80      	pop	{r7, pc}
 8006380:	40023800 	.word	0x40023800
 8006384:	080164b4 	.word	0x080164b4

08006388 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800638c:	f7ff ffdc 	bl	8006348 <HAL_RCC_GetHCLKFreq>
 8006390:	4602      	mov	r2, r0
 8006392:	4b05      	ldr	r3, [pc, #20]	; (80063a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	0b5b      	lsrs	r3, r3, #13
 8006398:	f003 0307 	and.w	r3, r3, #7
 800639c:	4903      	ldr	r1, [pc, #12]	; (80063ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800639e:	5ccb      	ldrb	r3, [r1, r3]
 80063a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	bd80      	pop	{r7, pc}
 80063a8:	40023800 	.word	0x40023800
 80063ac:	080164b4 	.word	0x080164b4

080063b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b088      	sub	sp, #32
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80063b8:	2300      	movs	r3, #0
 80063ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80063bc:	2300      	movs	r3, #0
 80063be:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80063c0:	2300      	movs	r3, #0
 80063c2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80063c4:	2300      	movs	r3, #0
 80063c6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80063c8:	2300      	movs	r3, #0
 80063ca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f003 0301 	and.w	r3, r3, #1
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	f040 8089 	bne.w	80064ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f003 0308 	and.w	r3, r3, #8
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	f040 8082 	bne.w	80064ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f003 0310 	and.w	r3, r3, #16
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d17b      	bne.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d175      	bne.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006408:	2b00      	cmp	r3, #0
 800640a:	d16f      	bne.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006414:	2b00      	cmp	r3, #0
 8006416:	d169      	bne.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006420:	2b00      	cmp	r3, #0
 8006422:	d163      	bne.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800642c:	2b00      	cmp	r3, #0
 800642e:	d15d      	bne.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006438:	2b00      	cmp	r3, #0
 800643a:	d157      	bne.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006444:	2b00      	cmp	r3, #0
 8006446:	d151      	bne.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006450:	2b00      	cmp	r3, #0
 8006452:	d14b      	bne.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800645c:	2b00      	cmp	r3, #0
 800645e:	d145      	bne.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006468:	2b00      	cmp	r3, #0
 800646a:	d13f      	bne.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006474:	2b00      	cmp	r3, #0
 8006476:	d139      	bne.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006480:	2b00      	cmp	r3, #0
 8006482:	d133      	bne.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800648c:	2b00      	cmp	r3, #0
 800648e:	d12d      	bne.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006498:	2b00      	cmp	r3, #0
 800649a:	d127      	bne.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d121      	bne.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d11b      	bne.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d115      	bne.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d10f      	bne.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d109      	bne.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f003 0320 	and.w	r3, r3, #32
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d103      	bne.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80064e4:	2172      	movs	r1, #114	; 0x72
 80064e6:	4895      	ldr	r0, [pc, #596]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80064e8:	f7fc f8d3 	bl	8002692 <assert_failed>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f003 0301 	and.w	r3, r3, #1
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d01f      	beq.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d008      	beq.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x162>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006504:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006508:	d003      	beq.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x162>
 800650a:	2178      	movs	r1, #120	; 0x78
 800650c:	488b      	ldr	r0, [pc, #556]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 800650e:	f7fc f8c0 	bl	8002692 <assert_failed>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006512:	4b8b      	ldr	r3, [pc, #556]	; (8006740 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	4a8a      	ldr	r2, [pc, #552]	; (8006740 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8006518:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800651c:	6093      	str	r3, [r2, #8]
 800651e:	4b88      	ldr	r3, [pc, #544]	; (8006740 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8006520:	689a      	ldr	r2, [r3, #8]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006526:	4986      	ldr	r1, [pc, #536]	; (8006740 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8006528:	4313      	orrs	r3, r2
 800652a:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006530:	2b00      	cmp	r3, #0
 8006532:	d101      	bne.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x188>
    {
      plli2sused = 1;
 8006534:	2301      	movs	r3, #1
 8006536:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006540:	2b00      	cmp	r3, #0
 8006542:	d029      	beq.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006548:	2b00      	cmp	r3, #0
 800654a:	d00d      	beq.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006550:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006554:	d008      	beq.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800655a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800655e:	d003      	beq.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8006560:	2188      	movs	r1, #136	; 0x88
 8006562:	4876      	ldr	r0, [pc, #472]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8006564:	f7fc f895 	bl	8002692 <assert_failed>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006568:	4b75      	ldr	r3, [pc, #468]	; (8006740 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800656a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800656e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006576:	4972      	ldr	r1, [pc, #456]	; (8006740 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8006578:	4313      	orrs	r3, r2
 800657a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006582:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006586:	d101      	bne.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      plli2sused = 1;
 8006588:	2301      	movs	r3, #1
 800658a:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006590:	2b00      	cmp	r3, #0
 8006592:	d101      	bne.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    {
      pllsaiused = 1;
 8006594:	2301      	movs	r3, #1
 8006596:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d029      	beq.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d00d      	beq.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065b4:	d008      	beq.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80065be:	d003      	beq.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80065c0:	219c      	movs	r1, #156	; 0x9c
 80065c2:	485e      	ldr	r0, [pc, #376]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80065c4:	f7fc f865 	bl	8002692 <assert_failed>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80065c8:	4b5d      	ldr	r3, [pc, #372]	; (8006740 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80065ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d6:	495a      	ldr	r1, [pc, #360]	; (8006740 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80065d8:	4313      	orrs	r3, r2
 80065da:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065e6:	d101      	bne.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      plli2sused = 1;
 80065e8:	2301      	movs	r3, #1
 80065ea:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d101      	bne.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      pllsaiused = 1;
 80065f4:	2301      	movs	r3, #1
 80065f6:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006600:	2b00      	cmp	r3, #0
 8006602:	d001      	beq.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
      plli2sused = 1;
 8006604:	2301      	movs	r3, #1
 8006606:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f003 0320 	and.w	r3, r3, #32
 8006610:	2b00      	cmp	r3, #0
 8006612:	f000 8186 	beq.w	8006922 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800661a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800661e:	f000 80e4 	beq.w	80067ea <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006626:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800662a:	f000 80de 	beq.w	80067ea <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006632:	4a44      	ldr	r2, [pc, #272]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8006634:	4293      	cmp	r3, r2
 8006636:	f000 80d8 	beq.w	80067ea <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800663e:	4a42      	ldr	r2, [pc, #264]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8006640:	4293      	cmp	r3, r2
 8006642:	f000 80d2 	beq.w	80067ea <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800664a:	4a40      	ldr	r2, [pc, #256]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800664c:	4293      	cmp	r3, r2
 800664e:	f000 80cc 	beq.w	80067ea <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006656:	4a3e      	ldr	r2, [pc, #248]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 8006658:	4293      	cmp	r3, r2
 800665a:	f000 80c6 	beq.w	80067ea <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006662:	4a3c      	ldr	r2, [pc, #240]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 8006664:	4293      	cmp	r3, r2
 8006666:	f000 80c0 	beq.w	80067ea <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800666e:	4a3a      	ldr	r2, [pc, #232]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8006670:	4293      	cmp	r3, r2
 8006672:	f000 80ba 	beq.w	80067ea <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800667a:	4a38      	ldr	r2, [pc, #224]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 800667c:	4293      	cmp	r3, r2
 800667e:	f000 80b4 	beq.w	80067ea <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006686:	4a36      	ldr	r2, [pc, #216]	; (8006760 <HAL_RCCEx_PeriphCLKConfig+0x3b0>)
 8006688:	4293      	cmp	r3, r2
 800668a:	f000 80ae 	beq.w	80067ea <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006692:	4a34      	ldr	r2, [pc, #208]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8006694:	4293      	cmp	r3, r2
 8006696:	f000 80a8 	beq.w	80067ea <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800669e:	4a32      	ldr	r2, [pc, #200]	; (8006768 <HAL_RCCEx_PeriphCLKConfig+0x3b8>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	f000 80a2 	beq.w	80067ea <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066aa:	4a30      	ldr	r2, [pc, #192]	; (800676c <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	f000 809c 	beq.w	80067ea <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b6:	4a2e      	ldr	r2, [pc, #184]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x3c0>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	f000 8096 	beq.w	80067ea <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c2:	4a2c      	ldr	r2, [pc, #176]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	f000 8090 	beq.w	80067ea <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ce:	4a2a      	ldr	r2, [pc, #168]	; (8006778 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	f000 808a 	beq.w	80067ea <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066da:	4a28      	ldr	r2, [pc, #160]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	f000 8084 	beq.w	80067ea <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e6:	4a26      	ldr	r2, [pc, #152]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d07e      	beq.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f0:	4a24      	ldr	r2, [pc, #144]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d079      	beq.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066fa:	4a23      	ldr	r2, [pc, #140]	; (8006788 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d074      	beq.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006704:	4a21      	ldr	r2, [pc, #132]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d06f      	beq.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800670e:	4a20      	ldr	r2, [pc, #128]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d06a      	beq.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006718:	4a1e      	ldr	r2, [pc, #120]	; (8006794 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d065      	beq.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006722:	4a1d      	ldr	r2, [pc, #116]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d060      	beq.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800672c:	4a1b      	ldr	r2, [pc, #108]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d05b      	beq.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006736:	4a1a      	ldr	r2, [pc, #104]	; (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8006738:	4293      	cmp	r3, r2
 800673a:	e033      	b.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800673c:	080163ac 	.word	0x080163ac
 8006740:	40023800 	.word	0x40023800
 8006744:	00020300 	.word	0x00020300
 8006748:	00030300 	.word	0x00030300
 800674c:	00040300 	.word	0x00040300
 8006750:	00050300 	.word	0x00050300
 8006754:	00060300 	.word	0x00060300
 8006758:	00070300 	.word	0x00070300
 800675c:	00080300 	.word	0x00080300
 8006760:	00090300 	.word	0x00090300
 8006764:	000a0300 	.word	0x000a0300
 8006768:	000b0300 	.word	0x000b0300
 800676c:	000c0300 	.word	0x000c0300
 8006770:	000d0300 	.word	0x000d0300
 8006774:	000e0300 	.word	0x000e0300
 8006778:	000f0300 	.word	0x000f0300
 800677c:	00100300 	.word	0x00100300
 8006780:	00110300 	.word	0x00110300
 8006784:	00120300 	.word	0x00120300
 8006788:	00130300 	.word	0x00130300
 800678c:	00140300 	.word	0x00140300
 8006790:	00150300 	.word	0x00150300
 8006794:	00160300 	.word	0x00160300
 8006798:	00170300 	.word	0x00170300
 800679c:	00180300 	.word	0x00180300
 80067a0:	00190300 	.word	0x00190300
 80067a4:	d021      	beq.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067aa:	4a4c      	ldr	r2, [pc, #304]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d01c      	beq.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067b4:	4a4a      	ldr	r2, [pc, #296]	; (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d017      	beq.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067be:	4a49      	ldr	r2, [pc, #292]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d012      	beq.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c8:	4a47      	ldr	r2, [pc, #284]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d00d      	beq.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067d2:	4a46      	ldr	r2, [pc, #280]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d008      	beq.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067dc:	4a44      	ldr	r2, [pc, #272]	; (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d003      	beq.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80067e2:	21b7      	movs	r1, #183	; 0xb7
 80067e4:	4843      	ldr	r0, [pc, #268]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 80067e6:	f7fb ff54 	bl	8002692 <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80067ea:	4b43      	ldr	r3, [pc, #268]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80067ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ee:	4a42      	ldr	r2, [pc, #264]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80067f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067f4:	6413      	str	r3, [r2, #64]	; 0x40
 80067f6:	4b40      	ldr	r3, [pc, #256]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80067f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067fe:	60bb      	str	r3, [r7, #8]
 8006800:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006802:	4b3e      	ldr	r3, [pc, #248]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a3d      	ldr	r2, [pc, #244]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8006808:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800680c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800680e:	f7fc fd73 	bl	80032f8 <HAL_GetTick>
 8006812:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006814:	e009      	b.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x47a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006816:	f7fc fd6f 	bl	80032f8 <HAL_GetTick>
 800681a:	4602      	mov	r2, r0
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	1ad3      	subs	r3, r2, r3
 8006820:	2b64      	cmp	r3, #100	; 0x64
 8006822:	d902      	bls.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x47a>
      {
        return HAL_TIMEOUT;
 8006824:	2303      	movs	r3, #3
 8006826:	f000 bd9f 	b.w	8007368 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800682a:	4b34      	ldr	r3, [pc, #208]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006832:	2b00      	cmp	r3, #0
 8006834:	d0ef      	beq.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x466>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006836:	4b30      	ldr	r3, [pc, #192]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800683a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800683e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d036      	beq.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800684a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800684e:	693a      	ldr	r2, [r7, #16]
 8006850:	429a      	cmp	r2, r3
 8006852:	d02f      	beq.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006854:	4b28      	ldr	r3, [pc, #160]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006858:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800685c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800685e:	4b26      	ldr	r3, [pc, #152]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006862:	4a25      	ldr	r2, [pc, #148]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006868:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800686a:	4b23      	ldr	r3, [pc, #140]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800686c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800686e:	4a22      	ldr	r2, [pc, #136]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006870:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006874:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006876:	4a20      	ldr	r2, [pc, #128]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800687c:	4b1e      	ldr	r3, [pc, #120]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800687e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006880:	f003 0301 	and.w	r3, r3, #1
 8006884:	2b01      	cmp	r3, #1
 8006886:	d115      	bne.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x504>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006888:	f7fc fd36 	bl	80032f8 <HAL_GetTick>
 800688c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800688e:	e00b      	b.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006890:	f7fc fd32 	bl	80032f8 <HAL_GetTick>
 8006894:	4602      	mov	r2, r0
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	1ad3      	subs	r3, r2, r3
 800689a:	f241 3288 	movw	r2, #5000	; 0x1388
 800689e:	4293      	cmp	r3, r2
 80068a0:	d902      	bls.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 80068a2:	2303      	movs	r3, #3
 80068a4:	f000 bd60 	b.w	8007368 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068a8:	4b13      	ldr	r3, [pc, #76]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80068aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ac:	f003 0302 	and.w	r3, r3, #2
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d0ed      	beq.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068c0:	d120      	bne.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0x554>
 80068c2:	4b0d      	ldr	r3, [pc, #52]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80068ce:	4b0c      	ldr	r3, [pc, #48]	; (8006900 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80068d0:	400b      	ands	r3, r1
 80068d2:	4909      	ldr	r1, [pc, #36]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80068d4:	4313      	orrs	r3, r2
 80068d6:	608b      	str	r3, [r1, #8]
 80068d8:	e01a      	b.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x560>
 80068da:	bf00      	nop
 80068dc:	001a0300 	.word	0x001a0300
 80068e0:	001b0300 	.word	0x001b0300
 80068e4:	001c0300 	.word	0x001c0300
 80068e8:	001d0300 	.word	0x001d0300
 80068ec:	001e0300 	.word	0x001e0300
 80068f0:	001f0300 	.word	0x001f0300
 80068f4:	080163ac 	.word	0x080163ac
 80068f8:	40023800 	.word	0x40023800
 80068fc:	40007000 	.word	0x40007000
 8006900:	0ffffcff 	.word	0x0ffffcff
 8006904:	4b9a      	ldr	r3, [pc, #616]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	4a99      	ldr	r2, [pc, #612]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800690a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800690e:	6093      	str	r3, [r2, #8]
 8006910:	4b97      	ldr	r3, [pc, #604]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006912:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006918:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800691c:	4994      	ldr	r1, [pc, #592]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800691e:	4313      	orrs	r3, r2
 8006920:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f003 0310 	and.w	r3, r3, #16
 800692a:	2b00      	cmp	r3, #0
 800692c:	d01d      	beq.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006932:	2b00      	cmp	r3, #0
 8006934:	d008      	beq.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800693a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800693e:	d003      	beq.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8006940:	21f1      	movs	r1, #241	; 0xf1
 8006942:	488c      	ldr	r0, [pc, #560]	; (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8006944:	f7fb fea5 	bl	8002692 <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006948:	4b89      	ldr	r3, [pc, #548]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800694a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800694e:	4a88      	ldr	r2, [pc, #544]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006950:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006954:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006958:	4b85      	ldr	r3, [pc, #532]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800695a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006962:	4983      	ldr	r1, [pc, #524]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006964:	4313      	orrs	r3, r2
 8006966:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006972:	2b00      	cmp	r3, #0
 8006974:	d01c      	beq.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0x600>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800697a:	2b00      	cmp	r3, #0
 800697c:	d00d      	beq.n	800699a <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006982:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006986:	d008      	beq.n	800699a <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800698c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006990:	d003      	beq.n	800699a <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8006992:	21fb      	movs	r1, #251	; 0xfb
 8006994:	4877      	ldr	r0, [pc, #476]	; (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8006996:	f7fb fe7c 	bl	8002692 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800699a:	4b75      	ldr	r3, [pc, #468]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800699c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069a8:	4971      	ldr	r1, [pc, #452]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80069aa:	4313      	orrs	r3, r2
 80069ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d01d      	beq.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x648>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d00e      	beq.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x632>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069c8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80069cc:	d009      	beq.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x632>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069d2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80069d6:	d004      	beq.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x632>
 80069d8:	f240 1105 	movw	r1, #261	; 0x105
 80069dc:	4865      	ldr	r0, [pc, #404]	; (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 80069de:	f7fb fe58 	bl	8002692 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80069e2:	4b63      	ldr	r3, [pc, #396]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80069e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069f0:	495f      	ldr	r1, [pc, #380]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80069f2:	4313      	orrs	r3, r2
 80069f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d01d      	beq.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x690>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d00e      	beq.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a14:	d009      	beq.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a1e:	d004      	beq.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8006a20:	f240 110f 	movw	r1, #271	; 0x10f
 8006a24:	4853      	ldr	r0, [pc, #332]	; (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8006a26:	f7fb fe34 	bl	8002692 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006a2a:	4b51      	ldr	r3, [pc, #324]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a30:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a38:	494d      	ldr	r1, [pc, #308]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d01d      	beq.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d00e      	beq.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a5c:	d009      	beq.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a62:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006a66:	d004      	beq.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8006a68:	f240 1119 	movw	r1, #281	; 0x119
 8006a6c:	4841      	ldr	r0, [pc, #260]	; (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8006a6e:	f7fb fe10 	bl	8002692 <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006a72:	4b3f      	ldr	r3, [pc, #252]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a78:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a80:	493b      	ldr	r1, [pc, #236]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006a82:	4313      	orrs	r3, r2
 8006a84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d01f      	beq.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x724>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d010      	beq.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d00c      	beq.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aa8:	2b03      	cmp	r3, #3
 8006aaa:	d008      	beq.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ab0:	2b02      	cmp	r3, #2
 8006ab2:	d004      	beq.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8006ab4:	f240 1123 	movw	r1, #291	; 0x123
 8006ab8:	482e      	ldr	r0, [pc, #184]	; (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8006aba:	f7fb fdea 	bl	8002692 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006abe:	4b2c      	ldr	r3, [pc, #176]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ac4:	f023 0203 	bic.w	r2, r3, #3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006acc:	4928      	ldr	r1, [pc, #160]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d01f      	beq.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x770>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d010      	beq.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006aec:	2b04      	cmp	r3, #4
 8006aee:	d00c      	beq.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006af4:	2b0c      	cmp	r3, #12
 8006af6:	d008      	beq.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006afc:	2b08      	cmp	r3, #8
 8006afe:	d004      	beq.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8006b00:	f240 112d 	movw	r1, #301	; 0x12d
 8006b04:	481b      	ldr	r0, [pc, #108]	; (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8006b06:	f7fb fdc4 	bl	8002692 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006b0a:	4b19      	ldr	r3, [pc, #100]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b10:	f023 020c 	bic.w	r2, r3, #12
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b18:	4915      	ldr	r1, [pc, #84]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d025      	beq.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d010      	beq.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b38:	2b10      	cmp	r3, #16
 8006b3a:	d00c      	beq.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b40:	2b30      	cmp	r3, #48	; 0x30
 8006b42:	d008      	beq.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b48:	2b20      	cmp	r3, #32
 8006b4a:	d004      	beq.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8006b4c:	f240 1137 	movw	r1, #311	; 0x137
 8006b50:	4808      	ldr	r0, [pc, #32]	; (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8006b52:	f7fb fd9e 	bl	8002692 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006b56:	4b06      	ldr	r3, [pc, #24]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b5c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b64:	4902      	ldr	r1, [pc, #8]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006b66:	4313      	orrs	r3, r2
 8006b68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006b6c:	e004      	b.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
 8006b6e:	bf00      	nop
 8006b70:	40023800 	.word	0x40023800
 8006b74:	080163ac 	.word	0x080163ac
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d01f      	beq.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x814>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d010      	beq.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b90:	2b40      	cmp	r3, #64	; 0x40
 8006b92:	d00c      	beq.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b98:	2bc0      	cmp	r3, #192	; 0xc0
 8006b9a:	d008      	beq.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ba0:	2b80      	cmp	r3, #128	; 0x80
 8006ba2:	d004      	beq.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8006ba4:	f240 1141 	movw	r1, #321	; 0x141
 8006ba8:	48a0      	ldr	r0, [pc, #640]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8006baa:	f7fb fd72 	bl	8002692 <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006bae:	4ba0      	ldr	r3, [pc, #640]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bb4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bbc:	499c      	ldr	r1, [pc, #624]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d022      	beq.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x866>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d013      	beq.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006be0:	d00e      	beq.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006be6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bea:	d009      	beq.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bf4:	d004      	beq.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8006bf6:	f240 114b 	movw	r1, #331	; 0x14b
 8006bfa:	488c      	ldr	r0, [pc, #560]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8006bfc:	f7fb fd49 	bl	8002692 <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006c00:	4b8b      	ldr	r3, [pc, #556]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c06:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c0e:	4988      	ldr	r1, [pc, #544]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006c10:	4313      	orrs	r3, r2
 8006c12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d022      	beq.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d013      	beq.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c32:	d00e      	beq.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c38:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c3c:	d009      	beq.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c46:	d004      	beq.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8006c48:	f240 1155 	movw	r1, #341	; 0x155
 8006c4c:	4877      	ldr	r0, [pc, #476]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8006c4e:	f7fb fd20 	bl	8002692 <assert_failed>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006c52:	4b77      	ldr	r3, [pc, #476]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c58:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c60:	4973      	ldr	r1, [pc, #460]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006c62:	4313      	orrs	r3, r2
 8006c64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d022      	beq.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x90a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d013      	beq.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c84:	d00e      	beq.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c8a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006c8e:	d009      	beq.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c98:	d004      	beq.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8006c9a:	f240 115f 	movw	r1, #351	; 0x15f
 8006c9e:	4863      	ldr	r0, [pc, #396]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8006ca0:	f7fb fcf7 	bl	8002692 <assert_failed>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006ca4:	4b62      	ldr	r3, [pc, #392]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006caa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cb2:	495f      	ldr	r1, [pc, #380]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d022      	beq.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d013      	beq.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x946>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cd6:	d00e      	beq.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x946>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cdc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006ce0:	d009      	beq.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x946>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ce6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cea:	d004      	beq.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x946>
 8006cec:	f240 1169 	movw	r1, #361	; 0x169
 8006cf0:	484e      	ldr	r0, [pc, #312]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8006cf2:	f7fb fcce 	bl	8002692 <assert_failed>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006cf6:	4b4e      	ldr	r3, [pc, #312]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cfc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d04:	494a      	ldr	r1, [pc, #296]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006d06:	4313      	orrs	r3, r2
 8006d08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d018      	beq.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x99a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d1c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006d20:	d008      	beq.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d004      	beq.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8006d2a:	f240 1173 	movw	r1, #371	; 0x173
 8006d2e:	483f      	ldr	r0, [pc, #252]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8006d30:	f7fb fcaf 	bl	8002692 <assert_failed>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006d34:	4b3e      	ldr	r3, [pc, #248]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d3a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d42:	493b      	ldr	r1, [pc, #236]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006d44:	4313      	orrs	r3, r2
 8006d46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d01f      	beq.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d5e:	d008      	beq.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d004      	beq.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8006d68:	f240 117d 	movw	r1, #381	; 0x17d
 8006d6c:	482f      	ldr	r0, [pc, #188]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8006d6e:	f7fb fc90 	bl	8002692 <assert_failed>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006d72:	4b2f      	ldr	r3, [pc, #188]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d78:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d80:	492b      	ldr	r1, [pc, #172]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006d82:	4313      	orrs	r3, r2
 8006d84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d90:	d101      	bne.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    {
      pllsaiused = 1;
 8006d92:	2301      	movs	r3, #1
 8006d94:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f003 0308 	and.w	r3, r3, #8
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d001      	beq.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x9f6>
  {
    pllsaiused = 1;
 8006da2:	2301      	movs	r3, #1
 8006da4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d022      	beq.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0xa48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d013      	beq.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dbe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006dc2:	d00e      	beq.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dc8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006dcc:	d009      	beq.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dd2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006dd6:	d004      	beq.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8006dd8:	f240 1195 	movw	r1, #405	; 0x195
 8006ddc:	4813      	ldr	r0, [pc, #76]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8006dde:	f7fb fc58 	bl	8002692 <assert_failed>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006de2:	4b13      	ldr	r3, [pc, #76]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006de8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006df0:	490f      	ldr	r1, [pc, #60]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006df2:	4313      	orrs	r3, r2
 8006df4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d020      	beq.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0xa96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e0e:	d009      	beq.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d004      	beq.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006e1a:	f240 119f 	movw	r1, #415	; 0x19f
 8006e1e:	4803      	ldr	r0, [pc, #12]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8006e20:	f7fb fc37 	bl	8002692 <assert_failed>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006e24:	4b02      	ldr	r3, [pc, #8]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e2a:	e003      	b.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0xa84>
 8006e2c:	080163ac 	.word	0x080163ac
 8006e30:	40023800 	.word	0x40023800
 8006e34:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e3e:	4910      	ldr	r1, [pc, #64]	; (8006e80 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 8006e40:	4313      	orrs	r3, r2
 8006e42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006e46:	69fb      	ldr	r3, [r7, #28]
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d006      	beq.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	f000 8155 	beq.w	8007104 <HAL_RCCEx_PeriphCLKConfig+0xd54>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006e5a:	4b09      	ldr	r3, [pc, #36]	; (8006e80 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a08      	ldr	r2, [pc, #32]	; (8006e80 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 8006e60:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006e64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e66:	f7fc fa47 	bl	80032f8 <HAL_GetTick>
 8006e6a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006e6c:	e00a      	b.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0xad4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006e6e:	f7fc fa43 	bl	80032f8 <HAL_GetTick>
 8006e72:	4602      	mov	r2, r0
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	1ad3      	subs	r3, r2, r3
 8006e78:	2b64      	cmp	r3, #100	; 0x64
 8006e7a:	d903      	bls.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0xad4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006e7c:	2303      	movs	r3, #3
 8006e7e:	e273      	b.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 8006e80:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006e84:	4b9a      	ldr	r3, [pc, #616]	; (80070f0 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d1ee      	bne.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0xabe>
      }
    }

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	2b31      	cmp	r3, #49	; 0x31
 8006e96:	d904      	bls.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8006ea0:	d904      	bls.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0xafc>
 8006ea2:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8006ea6:	4893      	ldr	r0, [pc, #588]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8006ea8:	f7fb fbf3 	bl	8002692 <assert_failed>

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f003 0301 	and.w	r3, r3, #1
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d02e      	beq.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0xb66>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d12a      	bne.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0xb66>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d903      	bls.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0xb20>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	2b07      	cmp	r3, #7
 8006ece:	d904      	bls.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8006ed0:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8006ed4:	4887      	ldr	r0, [pc, #540]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8006ed6:	f7fb fbdc 	bl	8002692 <assert_failed>

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006eda:	4b85      	ldr	r3, [pc, #532]	; (80070f0 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8006edc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ee0:	0c1b      	lsrs	r3, r3, #16
 8006ee2:	f003 0303 	and.w	r3, r3, #3
 8006ee6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006ee8:	4b81      	ldr	r3, [pc, #516]	; (80070f0 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8006eea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006eee:	0e1b      	lsrs	r3, r3, #24
 8006ef0:	f003 030f 	and.w	r3, r3, #15
 8006ef4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	019a      	lsls	r2, r3, #6
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	041b      	lsls	r3, r3, #16
 8006f00:	431a      	orrs	r2, r3
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	061b      	lsls	r3, r3, #24
 8006f06:	431a      	orrs	r2, r3
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	071b      	lsls	r3, r3, #28
 8006f0e:	4978      	ldr	r1, [pc, #480]	; (80070f0 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8006f10:	4313      	orrs	r3, r2
 8006f12:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d004      	beq.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f2a:	d00a      	beq.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0xb92>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d048      	beq.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0xc1a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f40:	d143      	bne.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {
      /* Check for PLLI2S Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	68db      	ldr	r3, [r3, #12]
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d903      	bls.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0xba2>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	68db      	ldr	r3, [r3, #12]
 8006f4e:	2b0f      	cmp	r3, #15
 8006f50:	d904      	bls.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006f52:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 8006f56:	4867      	ldr	r0, [pc, #412]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8006f58:	f7fb fb9b 	bl	8002692 <assert_failed>
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d003      	beq.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0xbbc>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f68:	2b20      	cmp	r3, #32
 8006f6a:	d904      	bls.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0xbc6>
 8006f6c:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 8006f70:	4860      	ldr	r0, [pc, #384]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8006f72:	f7fb fb8e 	bl	8002692 <assert_failed>

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006f76:	4b5e      	ldr	r3, [pc, #376]	; (80070f0 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8006f78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f7c:	0c1b      	lsrs	r3, r3, #16
 8006f7e:	f003 0303 	and.w	r3, r3, #3
 8006f82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006f84:	4b5a      	ldr	r3, [pc, #360]	; (80070f0 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8006f86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f8a:	0f1b      	lsrs	r3, r3, #28
 8006f8c:	f003 0307 	and.w	r3, r3, #7
 8006f90:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	019a      	lsls	r2, r3, #6
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	041b      	lsls	r3, r3, #16
 8006f9c:	431a      	orrs	r2, r3
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	061b      	lsls	r3, r3, #24
 8006fa4:	431a      	orrs	r2, r3
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	071b      	lsls	r3, r3, #28
 8006faa:	4951      	ldr	r1, [pc, #324]	; (80070f0 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8006fac:	4313      	orrs	r3, r2
 8006fae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006fb2:	4b4f      	ldr	r3, [pc, #316]	; (80070f0 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8006fb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fb8:	f023 021f 	bic.w	r2, r3, #31
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc0:	3b01      	subs	r3, #1
 8006fc2:	494b      	ldr	r1, [pc, #300]	; (80070f0 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d032      	beq.n	800703c <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	691b      	ldr	r3, [r3, #16]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d010      	beq.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	691b      	ldr	r3, [r3, #16]
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d00c      	beq.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	691b      	ldr	r3, [r3, #16]
 8006fea:	2b02      	cmp	r3, #2
 8006fec:	d008      	beq.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	691b      	ldr	r3, [r3, #16]
 8006ff2:	2b03      	cmp	r3, #3
 8006ff4:	d004      	beq.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8006ff6:	f240 2105 	movw	r1, #517	; 0x205
 8006ffa:	483e      	ldr	r0, [pc, #248]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8006ffc:	f7fb fb49 	bl	8002692 <assert_failed>

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007000:	4b3b      	ldr	r3, [pc, #236]	; (80070f0 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8007002:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007006:	0e1b      	lsrs	r3, r3, #24
 8007008:	f003 030f 	and.w	r3, r3, #15
 800700c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800700e:	4b38      	ldr	r3, [pc, #224]	; (80070f0 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8007010:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007014:	0f1b      	lsrs	r3, r3, #28
 8007016:	f003 0307 	and.w	r3, r3, #7
 800701a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	019a      	lsls	r2, r3, #6
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	041b      	lsls	r3, r3, #16
 8007028:	431a      	orrs	r2, r3
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	061b      	lsls	r3, r3, #24
 800702e:	431a      	orrs	r2, r3
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	071b      	lsls	r3, r3, #28
 8007034:	492e      	ldr	r1, [pc, #184]	; (80070f0 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8007036:	4313      	orrs	r3, r2
 8007038:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007044:	2b00      	cmp	r3, #0
 8007046:	d040      	beq.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	691b      	ldr	r3, [r3, #16]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d010      	beq.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	691b      	ldr	r3, [r3, #16]
 8007054:	2b01      	cmp	r3, #1
 8007056:	d00c      	beq.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	691b      	ldr	r3, [r3, #16]
 800705c:	2b02      	cmp	r3, #2
 800705e:	d008      	beq.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	691b      	ldr	r3, [r3, #16]
 8007064:	2b03      	cmp	r3, #3
 8007066:	d004      	beq.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8007068:	f44f 7105 	mov.w	r1, #532	; 0x214
 800706c:	4821      	ldr	r0, [pc, #132]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 800706e:	f7fb fb10 	bl	8002692 <assert_failed>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	2b01      	cmp	r3, #1
 8007078:	d903      	bls.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	2b07      	cmp	r3, #7
 8007080:	d904      	bls.n	800708c <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8007082:	f240 2115 	movw	r1, #533	; 0x215
 8007086:	481b      	ldr	r0, [pc, #108]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8007088:	f7fb fb03 	bl	8002692 <assert_failed>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	2b01      	cmp	r3, #1
 8007092:	d903      	bls.n	800709c <HAL_RCCEx_PeriphCLKConfig+0xcec>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	2b0f      	cmp	r3, #15
 800709a:	d904      	bls.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
 800709c:	f240 2116 	movw	r1, #534	; 0x216
 80070a0:	4814      	ldr	r0, [pc, #80]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80070a2:	f7fb faf6 	bl	8002692 <assert_failed>

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	019a      	lsls	r2, r3, #6
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	691b      	ldr	r3, [r3, #16]
 80070b0:	041b      	lsls	r3, r3, #16
 80070b2:	431a      	orrs	r2, r3
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	061b      	lsls	r3, r3, #24
 80070ba:	431a      	orrs	r2, r3
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	071b      	lsls	r3, r3, #28
 80070c2:	490b      	ldr	r1, [pc, #44]	; (80070f0 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80070c4:	4313      	orrs	r3, r2
 80070c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80070ca:	4b09      	ldr	r3, [pc, #36]	; (80070f0 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a08      	ldr	r2, [pc, #32]	; (80070f0 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80070d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80070d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070d6:	f7fc f90f 	bl	80032f8 <HAL_GetTick>
 80070da:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80070dc:	e00c      	b.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0xd48>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80070de:	f7fc f90b 	bl	80032f8 <HAL_GetTick>
 80070e2:	4602      	mov	r2, r0
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	1ad3      	subs	r3, r2, r3
 80070e8:	2b64      	cmp	r3, #100	; 0x64
 80070ea:	d905      	bls.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0xd48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80070ec:	2303      	movs	r3, #3
 80070ee:	e13b      	b.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 80070f0:	40023800 	.word	0x40023800
 80070f4:	080163ac 	.word	0x080163ac
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80070f8:	4b9d      	ldr	r3, [pc, #628]	; (8007370 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007100:	2b00      	cmp	r3, #0
 8007102:	d0ec      	beq.n	80070de <HAL_RCCEx_PeriphCLKConfig+0xd2e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007104:	69bb      	ldr	r3, [r7, #24]
 8007106:	2b01      	cmp	r3, #1
 8007108:	f040 812d 	bne.w	8007366 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800710c:	4b98      	ldr	r3, [pc, #608]	; (8007370 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a97      	ldr	r2, [pc, #604]	; (8007370 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007112:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007116:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007118:	f7fc f8ee 	bl	80032f8 <HAL_GetTick>
 800711c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800711e:	e008      	b.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0xd82>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007120:	f7fc f8ea 	bl	80032f8 <HAL_GetTick>
 8007124:	4602      	mov	r2, r0
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	1ad3      	subs	r3, r2, r3
 800712a:	2b64      	cmp	r3, #100	; 0x64
 800712c:	d901      	bls.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0xd82>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800712e:	2303      	movs	r3, #3
 8007130:	e11a      	b.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007132:	4b8f      	ldr	r3, [pc, #572]	; (8007370 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800713a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800713e:	d0ef      	beq.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0xd70>
      }
    }

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	695b      	ldr	r3, [r3, #20]
 8007144:	2b31      	cmp	r3, #49	; 0x31
 8007146:	d904      	bls.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0xda2>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	695b      	ldr	r3, [r3, #20]
 800714c:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8007150:	d904      	bls.n	800715c <HAL_RCCEx_PeriphCLKConfig+0xdac>
 8007152:	f44f 7111 	mov.w	r1, #580	; 0x244
 8007156:	4887      	ldr	r0, [pc, #540]	; (8007374 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8007158:	f7fb fa9b 	bl	8002692 <assert_failed>

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007164:	2b00      	cmp	r3, #0
 8007166:	d003      	beq.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800716c:	2b00      	cmp	r3, #0
 800716e:	d009      	beq.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0xdd4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007178:	2b00      	cmp	r3, #0
 800717a:	d048      	beq.n	800720e <HAL_RCCEx_PeriphCLKConfig+0xe5e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007180:	2b00      	cmp	r3, #0
 8007182:	d144      	bne.n	800720e <HAL_RCCEx_PeriphCLKConfig+0xe5e>
    {
      /* check for PLLSAIQ Parameter */
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	699b      	ldr	r3, [r3, #24]
 8007188:	2b01      	cmp	r3, #1
 800718a:	d903      	bls.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0xde4>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	699b      	ldr	r3, [r3, #24]
 8007190:	2b0f      	cmp	r3, #15
 8007192:	d904      	bls.n	800719e <HAL_RCCEx_PeriphCLKConfig+0xdee>
 8007194:	f240 214b 	movw	r1, #587	; 0x24b
 8007198:	4876      	ldr	r0, [pc, #472]	; (8007374 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 800719a:	f7fb fa7a 	bl	8002692 <assert_failed>
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d003      	beq.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0xdfe>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071aa:	2b20      	cmp	r3, #32
 80071ac:	d904      	bls.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
 80071ae:	f240 214d 	movw	r1, #589	; 0x24d
 80071b2:	4870      	ldr	r0, [pc, #448]	; (8007374 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 80071b4:	f7fb fa6d 	bl	8002692 <assert_failed>

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80071b8:	4b6d      	ldr	r3, [pc, #436]	; (8007370 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80071ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071be:	0c1b      	lsrs	r3, r3, #16
 80071c0:	f003 0303 	and.w	r3, r3, #3
 80071c4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80071c6:	4b6a      	ldr	r3, [pc, #424]	; (8007370 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80071c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071cc:	0f1b      	lsrs	r3, r3, #28
 80071ce:	f003 0307 	and.w	r3, r3, #7
 80071d2:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	695b      	ldr	r3, [r3, #20]
 80071d8:	019a      	lsls	r2, r3, #6
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	041b      	lsls	r3, r3, #16
 80071de:	431a      	orrs	r2, r3
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	699b      	ldr	r3, [r3, #24]
 80071e4:	061b      	lsls	r3, r3, #24
 80071e6:	431a      	orrs	r2, r3
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	071b      	lsls	r3, r3, #28
 80071ec:	4960      	ldr	r1, [pc, #384]	; (8007370 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80071ee:	4313      	orrs	r3, r2
 80071f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80071f4:	4b5e      	ldr	r3, [pc, #376]	; (8007370 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80071f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071fa:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007202:	3b01      	subs	r3, #1
 8007204:	021b      	lsls	r3, r3, #8
 8007206:	495a      	ldr	r1, [pc, #360]	; (8007370 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007208:	4313      	orrs	r3, r2
 800720a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007216:	2b00      	cmp	r3, #0
 8007218:	d037      	beq.n	800728a <HAL_RCCEx_PeriphCLKConfig+0xeda>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800721e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007222:	d132      	bne.n	800728a <HAL_RCCEx_PeriphCLKConfig+0xeda>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6a1b      	ldr	r3, [r3, #32]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d010      	beq.n	800724e <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6a1b      	ldr	r3, [r3, #32]
 8007230:	2b01      	cmp	r3, #1
 8007232:	d00c      	beq.n	800724e <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6a1b      	ldr	r3, [r3, #32]
 8007238:	2b02      	cmp	r3, #2
 800723a:	d008      	beq.n	800724e <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6a1b      	ldr	r3, [r3, #32]
 8007240:	2b03      	cmp	r3, #3
 8007242:	d004      	beq.n	800724e <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8007244:	f44f 7118 	mov.w	r1, #608	; 0x260
 8007248:	484a      	ldr	r0, [pc, #296]	; (8007374 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 800724a:	f7fb fa22 	bl	8002692 <assert_failed>
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800724e:	4b48      	ldr	r3, [pc, #288]	; (8007370 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007254:	0e1b      	lsrs	r3, r3, #24
 8007256:	f003 030f 	and.w	r3, r3, #15
 800725a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800725c:	4b44      	ldr	r3, [pc, #272]	; (8007370 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800725e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007262:	0f1b      	lsrs	r3, r3, #28
 8007264:	f003 0307 	and.w	r3, r3, #7
 8007268:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	695b      	ldr	r3, [r3, #20]
 800726e:	019a      	lsls	r2, r3, #6
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6a1b      	ldr	r3, [r3, #32]
 8007274:	041b      	lsls	r3, r3, #16
 8007276:	431a      	orrs	r2, r3
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	061b      	lsls	r3, r3, #24
 800727c:	431a      	orrs	r2, r3
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	071b      	lsls	r3, r3, #28
 8007282:	493b      	ldr	r1, [pc, #236]	; (8007370 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007284:	4313      	orrs	r3, r2
 8007286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f003 0308 	and.w	r3, r3, #8
 8007292:	2b00      	cmp	r3, #0
 8007294:	d04d      	beq.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0xf82>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	69db      	ldr	r3, [r3, #28]
 800729a:	2b01      	cmp	r3, #1
 800729c:	d903      	bls.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0xef6>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	69db      	ldr	r3, [r3, #28]
 80072a2:	2b07      	cmp	r3, #7
 80072a4:	d904      	bls.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0xf00>
 80072a6:	f240 216f 	movw	r1, #623	; 0x26f
 80072aa:	4832      	ldr	r0, [pc, #200]	; (8007374 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 80072ac:	f7fb f9f1 	bl	8002692 <assert_failed>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d013      	beq.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072c0:	d00e      	beq.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80072ca:	d009      	beq.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80072d4:	d004      	beq.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 80072d6:	f44f 711c 	mov.w	r1, #624	; 0x270
 80072da:	4826      	ldr	r0, [pc, #152]	; (8007374 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 80072dc:	f7fb f9d9 	bl	8002692 <assert_failed>

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80072e0:	4b23      	ldr	r3, [pc, #140]	; (8007370 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80072e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072e6:	0e1b      	lsrs	r3, r3, #24
 80072e8:	f003 030f 	and.w	r3, r3, #15
 80072ec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80072ee:	4b20      	ldr	r3, [pc, #128]	; (8007370 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80072f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072f4:	0c1b      	lsrs	r3, r3, #16
 80072f6:	f003 0303 	and.w	r3, r3, #3
 80072fa:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	695b      	ldr	r3, [r3, #20]
 8007300:	019a      	lsls	r2, r3, #6
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	041b      	lsls	r3, r3, #16
 8007306:	431a      	orrs	r2, r3
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	061b      	lsls	r3, r3, #24
 800730c:	431a      	orrs	r2, r3
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	69db      	ldr	r3, [r3, #28]
 8007312:	071b      	lsls	r3, r3, #28
 8007314:	4916      	ldr	r1, [pc, #88]	; (8007370 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007316:	4313      	orrs	r3, r2
 8007318:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800731c:	4b14      	ldr	r3, [pc, #80]	; (8007370 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800731e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007322:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800732a:	4911      	ldr	r1, [pc, #68]	; (8007370 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800732c:	4313      	orrs	r3, r2
 800732e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007332:	4b0f      	ldr	r3, [pc, #60]	; (8007370 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a0e      	ldr	r2, [pc, #56]	; (8007370 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800733c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800733e:	f7fb ffdb 	bl	80032f8 <HAL_GetTick>
 8007342:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007344:	e008      	b.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007346:	f7fb ffd7 	bl	80032f8 <HAL_GetTick>
 800734a:	4602      	mov	r2, r0
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	1ad3      	subs	r3, r2, r3
 8007350:	2b64      	cmp	r3, #100	; 0x64
 8007352:	d901      	bls.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007354:	2303      	movs	r3, #3
 8007356:	e007      	b.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007358:	4b05      	ldr	r3, [pc, #20]	; (8007370 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007360:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007364:	d1ef      	bne.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0xf96>
      }
    }
  }
  return HAL_OK;
 8007366:	2300      	movs	r3, #0
}
 8007368:	4618      	mov	r0, r3
 800736a:	3720      	adds	r7, #32
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}
 8007370:	40023800 	.word	0x40023800
 8007374:	080163ac 	.word	0x080163ac

08007378 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b082      	sub	sp, #8
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d101      	bne.n	800738a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007386:	2301      	movs	r3, #1
 8007388:	e0f5      	b.n	8007576 <HAL_TIM_Base_Init+0x1fe>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a7c      	ldr	r2, [pc, #496]	; (8007580 <HAL_TIM_Base_Init+0x208>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d045      	beq.n	8007420 <HAL_TIM_Base_Init+0xa8>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800739c:	d040      	beq.n	8007420 <HAL_TIM_Base_Init+0xa8>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a78      	ldr	r2, [pc, #480]	; (8007584 <HAL_TIM_Base_Init+0x20c>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d03b      	beq.n	8007420 <HAL_TIM_Base_Init+0xa8>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a76      	ldr	r2, [pc, #472]	; (8007588 <HAL_TIM_Base_Init+0x210>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d036      	beq.n	8007420 <HAL_TIM_Base_Init+0xa8>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a75      	ldr	r2, [pc, #468]	; (800758c <HAL_TIM_Base_Init+0x214>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d031      	beq.n	8007420 <HAL_TIM_Base_Init+0xa8>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a73      	ldr	r2, [pc, #460]	; (8007590 <HAL_TIM_Base_Init+0x218>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d02c      	beq.n	8007420 <HAL_TIM_Base_Init+0xa8>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a72      	ldr	r2, [pc, #456]	; (8007594 <HAL_TIM_Base_Init+0x21c>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d027      	beq.n	8007420 <HAL_TIM_Base_Init+0xa8>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a70      	ldr	r2, [pc, #448]	; (8007598 <HAL_TIM_Base_Init+0x220>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d022      	beq.n	8007420 <HAL_TIM_Base_Init+0xa8>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a6f      	ldr	r2, [pc, #444]	; (800759c <HAL_TIM_Base_Init+0x224>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d01d      	beq.n	8007420 <HAL_TIM_Base_Init+0xa8>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a6d      	ldr	r2, [pc, #436]	; (80075a0 <HAL_TIM_Base_Init+0x228>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d018      	beq.n	8007420 <HAL_TIM_Base_Init+0xa8>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a6c      	ldr	r2, [pc, #432]	; (80075a4 <HAL_TIM_Base_Init+0x22c>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d013      	beq.n	8007420 <HAL_TIM_Base_Init+0xa8>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a6a      	ldr	r2, [pc, #424]	; (80075a8 <HAL_TIM_Base_Init+0x230>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d00e      	beq.n	8007420 <HAL_TIM_Base_Init+0xa8>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a69      	ldr	r2, [pc, #420]	; (80075ac <HAL_TIM_Base_Init+0x234>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d009      	beq.n	8007420 <HAL_TIM_Base_Init+0xa8>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a67      	ldr	r2, [pc, #412]	; (80075b0 <HAL_TIM_Base_Init+0x238>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d004      	beq.n	8007420 <HAL_TIM_Base_Init+0xa8>
 8007416:	f44f 718b 	mov.w	r1, #278	; 0x116
 800741a:	4866      	ldr	r0, [pc, #408]	; (80075b4 <HAL_TIM_Base_Init+0x23c>)
 800741c:	f7fb f939 	bl	8002692 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d014      	beq.n	8007452 <HAL_TIM_Base_Init+0xda>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	2b10      	cmp	r3, #16
 800742e:	d010      	beq.n	8007452 <HAL_TIM_Base_Init+0xda>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	2b20      	cmp	r3, #32
 8007436:	d00c      	beq.n	8007452 <HAL_TIM_Base_Init+0xda>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	2b40      	cmp	r3, #64	; 0x40
 800743e:	d008      	beq.n	8007452 <HAL_TIM_Base_Init+0xda>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	689b      	ldr	r3, [r3, #8]
 8007444:	2b60      	cmp	r3, #96	; 0x60
 8007446:	d004      	beq.n	8007452 <HAL_TIM_Base_Init+0xda>
 8007448:	f240 1117 	movw	r1, #279	; 0x117
 800744c:	4859      	ldr	r0, [pc, #356]	; (80075b4 <HAL_TIM_Base_Init+0x23c>)
 800744e:	f7fb f920 	bl	8002692 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	691b      	ldr	r3, [r3, #16]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d00e      	beq.n	8007478 <HAL_TIM_Base_Init+0x100>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	691b      	ldr	r3, [r3, #16]
 800745e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007462:	d009      	beq.n	8007478 <HAL_TIM_Base_Init+0x100>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	691b      	ldr	r3, [r3, #16]
 8007468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800746c:	d004      	beq.n	8007478 <HAL_TIM_Base_Init+0x100>
 800746e:	f44f 718c 	mov.w	r1, #280	; 0x118
 8007472:	4850      	ldr	r0, [pc, #320]	; (80075b4 <HAL_TIM_Base_Init+0x23c>)
 8007474:	f7fb f90d 	bl	8002692 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007480:	d004      	beq.n	800748c <HAL_TIM_Base_Init+0x114>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a41      	ldr	r2, [pc, #260]	; (800758c <HAL_TIM_Base_Init+0x214>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d107      	bne.n	800749c <HAL_TIM_Base_Init+0x124>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	2b00      	cmp	r3, #0
 8007492:	bf14      	ite	ne
 8007494:	2301      	movne	r3, #1
 8007496:	2300      	moveq	r3, #0
 8007498:	b2db      	uxtb	r3, r3
 800749a:	e00e      	b.n	80074ba <HAL_TIM_Base_Init+0x142>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	68db      	ldr	r3, [r3, #12]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d006      	beq.n	80074b2 <HAL_TIM_Base_Init+0x13a>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	68db      	ldr	r3, [r3, #12]
 80074a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074ac:	d201      	bcs.n	80074b2 <HAL_TIM_Base_Init+0x13a>
 80074ae:	2301      	movs	r3, #1
 80074b0:	e000      	b.n	80074b4 <HAL_TIM_Base_Init+0x13c>
 80074b2:	2300      	movs	r3, #0
 80074b4:	f003 0301 	and.w	r3, r3, #1
 80074b8:	b2db      	uxtb	r3, r3
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d104      	bne.n	80074c8 <HAL_TIM_Base_Init+0x150>
 80074be:	f240 1119 	movw	r1, #281	; 0x119
 80074c2:	483c      	ldr	r0, [pc, #240]	; (80075b4 <HAL_TIM_Base_Init+0x23c>)
 80074c4:	f7fb f8e5 	bl	8002692 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	699b      	ldr	r3, [r3, #24]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d008      	beq.n	80074e2 <HAL_TIM_Base_Init+0x16a>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	699b      	ldr	r3, [r3, #24]
 80074d4:	2b80      	cmp	r3, #128	; 0x80
 80074d6:	d004      	beq.n	80074e2 <HAL_TIM_Base_Init+0x16a>
 80074d8:	f44f 718d 	mov.w	r1, #282	; 0x11a
 80074dc:	4835      	ldr	r0, [pc, #212]	; (80075b4 <HAL_TIM_Base_Init+0x23c>)
 80074de:	f7fb f8d8 	bl	8002692 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d106      	bne.n	80074fc <HAL_TIM_Base_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2200      	movs	r2, #0
 80074f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f7fb fc30 	bl	8002d5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2202      	movs	r2, #2
 8007500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681a      	ldr	r2, [r3, #0]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	3304      	adds	r3, #4
 800750c:	4619      	mov	r1, r3
 800750e:	4610      	mov	r0, r2
 8007510:	f001 fa52 	bl	80089b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2201      	movs	r2, #1
 8007518:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2201      	movs	r2, #1
 8007520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2201      	movs	r2, #1
 8007528:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2201      	movs	r2, #1
 8007530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2201      	movs	r2, #1
 8007538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2201      	movs	r2, #1
 8007540:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2201      	movs	r2, #1
 8007548:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2201      	movs	r2, #1
 8007550:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2201      	movs	r2, #1
 8007558:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2201      	movs	r2, #1
 8007560:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2201      	movs	r2, #1
 8007568:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2201      	movs	r2, #1
 8007570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007574:	2300      	movs	r3, #0
}
 8007576:	4618      	mov	r0, r3
 8007578:	3708      	adds	r7, #8
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	40010000 	.word	0x40010000
 8007584:	40000400 	.word	0x40000400
 8007588:	40000800 	.word	0x40000800
 800758c:	40000c00 	.word	0x40000c00
 8007590:	40001000 	.word	0x40001000
 8007594:	40001400 	.word	0x40001400
 8007598:	40010400 	.word	0x40010400
 800759c:	40014000 	.word	0x40014000
 80075a0:	40014400 	.word	0x40014400
 80075a4:	40014800 	.word	0x40014800
 80075a8:	40001800 	.word	0x40001800
 80075ac:	40001c00 	.word	0x40001c00
 80075b0:	40002000 	.word	0x40002000
 80075b4:	080163e8 	.word	0x080163e8

080075b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b082      	sub	sp, #8
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d101      	bne.n	80075ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80075c6:	2301      	movs	r3, #1
 80075c8:	e0f5      	b.n	80077b6 <HAL_TIM_PWM_Init+0x1fe>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a7c      	ldr	r2, [pc, #496]	; (80077c0 <HAL_TIM_PWM_Init+0x208>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d045      	beq.n	8007660 <HAL_TIM_PWM_Init+0xa8>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075dc:	d040      	beq.n	8007660 <HAL_TIM_PWM_Init+0xa8>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a78      	ldr	r2, [pc, #480]	; (80077c4 <HAL_TIM_PWM_Init+0x20c>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d03b      	beq.n	8007660 <HAL_TIM_PWM_Init+0xa8>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a76      	ldr	r2, [pc, #472]	; (80077c8 <HAL_TIM_PWM_Init+0x210>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d036      	beq.n	8007660 <HAL_TIM_PWM_Init+0xa8>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a75      	ldr	r2, [pc, #468]	; (80077cc <HAL_TIM_PWM_Init+0x214>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d031      	beq.n	8007660 <HAL_TIM_PWM_Init+0xa8>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a73      	ldr	r2, [pc, #460]	; (80077d0 <HAL_TIM_PWM_Init+0x218>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d02c      	beq.n	8007660 <HAL_TIM_PWM_Init+0xa8>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a72      	ldr	r2, [pc, #456]	; (80077d4 <HAL_TIM_PWM_Init+0x21c>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d027      	beq.n	8007660 <HAL_TIM_PWM_Init+0xa8>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a70      	ldr	r2, [pc, #448]	; (80077d8 <HAL_TIM_PWM_Init+0x220>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d022      	beq.n	8007660 <HAL_TIM_PWM_Init+0xa8>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a6f      	ldr	r2, [pc, #444]	; (80077dc <HAL_TIM_PWM_Init+0x224>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d01d      	beq.n	8007660 <HAL_TIM_PWM_Init+0xa8>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a6d      	ldr	r2, [pc, #436]	; (80077e0 <HAL_TIM_PWM_Init+0x228>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d018      	beq.n	8007660 <HAL_TIM_PWM_Init+0xa8>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a6c      	ldr	r2, [pc, #432]	; (80077e4 <HAL_TIM_PWM_Init+0x22c>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d013      	beq.n	8007660 <HAL_TIM_PWM_Init+0xa8>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a6a      	ldr	r2, [pc, #424]	; (80077e8 <HAL_TIM_PWM_Init+0x230>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d00e      	beq.n	8007660 <HAL_TIM_PWM_Init+0xa8>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a69      	ldr	r2, [pc, #420]	; (80077ec <HAL_TIM_PWM_Init+0x234>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d009      	beq.n	8007660 <HAL_TIM_PWM_Init+0xa8>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a67      	ldr	r2, [pc, #412]	; (80077f0 <HAL_TIM_PWM_Init+0x238>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d004      	beq.n	8007660 <HAL_TIM_PWM_Init+0xa8>
 8007656:	f240 5133 	movw	r1, #1331	; 0x533
 800765a:	4866      	ldr	r0, [pc, #408]	; (80077f4 <HAL_TIM_PWM_Init+0x23c>)
 800765c:	f7fb f819 	bl	8002692 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d014      	beq.n	8007692 <HAL_TIM_PWM_Init+0xda>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	689b      	ldr	r3, [r3, #8]
 800766c:	2b10      	cmp	r3, #16
 800766e:	d010      	beq.n	8007692 <HAL_TIM_PWM_Init+0xda>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	2b20      	cmp	r3, #32
 8007676:	d00c      	beq.n	8007692 <HAL_TIM_PWM_Init+0xda>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	2b40      	cmp	r3, #64	; 0x40
 800767e:	d008      	beq.n	8007692 <HAL_TIM_PWM_Init+0xda>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	2b60      	cmp	r3, #96	; 0x60
 8007686:	d004      	beq.n	8007692 <HAL_TIM_PWM_Init+0xda>
 8007688:	f240 5134 	movw	r1, #1332	; 0x534
 800768c:	4859      	ldr	r0, [pc, #356]	; (80077f4 <HAL_TIM_PWM_Init+0x23c>)
 800768e:	f7fb f800 	bl	8002692 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	691b      	ldr	r3, [r3, #16]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d00e      	beq.n	80076b8 <HAL_TIM_PWM_Init+0x100>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	691b      	ldr	r3, [r3, #16]
 800769e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076a2:	d009      	beq.n	80076b8 <HAL_TIM_PWM_Init+0x100>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	691b      	ldr	r3, [r3, #16]
 80076a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076ac:	d004      	beq.n	80076b8 <HAL_TIM_PWM_Init+0x100>
 80076ae:	f240 5135 	movw	r1, #1333	; 0x535
 80076b2:	4850      	ldr	r0, [pc, #320]	; (80077f4 <HAL_TIM_PWM_Init+0x23c>)
 80076b4:	f7fa ffed 	bl	8002692 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076c0:	d004      	beq.n	80076cc <HAL_TIM_PWM_Init+0x114>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a41      	ldr	r2, [pc, #260]	; (80077cc <HAL_TIM_PWM_Init+0x214>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d107      	bne.n	80076dc <HAL_TIM_PWM_Init+0x124>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	bf14      	ite	ne
 80076d4:	2301      	movne	r3, #1
 80076d6:	2300      	moveq	r3, #0
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	e00e      	b.n	80076fa <HAL_TIM_PWM_Init+0x142>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	68db      	ldr	r3, [r3, #12]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d006      	beq.n	80076f2 <HAL_TIM_PWM_Init+0x13a>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	68db      	ldr	r3, [r3, #12]
 80076e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076ec:	d201      	bcs.n	80076f2 <HAL_TIM_PWM_Init+0x13a>
 80076ee:	2301      	movs	r3, #1
 80076f0:	e000      	b.n	80076f4 <HAL_TIM_PWM_Init+0x13c>
 80076f2:	2300      	movs	r3, #0
 80076f4:	f003 0301 	and.w	r3, r3, #1
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d104      	bne.n	8007708 <HAL_TIM_PWM_Init+0x150>
 80076fe:	f240 5136 	movw	r1, #1334	; 0x536
 8007702:	483c      	ldr	r0, [pc, #240]	; (80077f4 <HAL_TIM_PWM_Init+0x23c>)
 8007704:	f7fa ffc5 	bl	8002692 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	699b      	ldr	r3, [r3, #24]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d008      	beq.n	8007722 <HAL_TIM_PWM_Init+0x16a>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	699b      	ldr	r3, [r3, #24]
 8007714:	2b80      	cmp	r3, #128	; 0x80
 8007716:	d004      	beq.n	8007722 <HAL_TIM_PWM_Init+0x16a>
 8007718:	f240 5137 	movw	r1, #1335	; 0x537
 800771c:	4835      	ldr	r0, [pc, #212]	; (80077f4 <HAL_TIM_PWM_Init+0x23c>)
 800771e:	f7fa ffb8 	bl	8002692 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007728:	b2db      	uxtb	r3, r3
 800772a:	2b00      	cmp	r3, #0
 800772c:	d106      	bne.n	800773c <HAL_TIM_PWM_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2200      	movs	r2, #0
 8007732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f000 f85e 	bl	80077f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2202      	movs	r2, #2
 8007740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	3304      	adds	r3, #4
 800774c:	4619      	mov	r1, r3
 800774e:	4610      	mov	r0, r2
 8007750:	f001 f932 	bl	80089b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2201      	movs	r2, #1
 8007760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2201      	movs	r2, #1
 8007768:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2201      	movs	r2, #1
 8007770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2201      	movs	r2, #1
 8007778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2201      	movs	r2, #1
 8007780:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2201      	movs	r2, #1
 8007788:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2201      	movs	r2, #1
 8007790:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2201      	movs	r2, #1
 8007798:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2201      	movs	r2, #1
 80077a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2201      	movs	r2, #1
 80077a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2201      	movs	r2, #1
 80077b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80077b4:	2300      	movs	r3, #0
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3708      	adds	r7, #8
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	40010000 	.word	0x40010000
 80077c4:	40000400 	.word	0x40000400
 80077c8:	40000800 	.word	0x40000800
 80077cc:	40000c00 	.word	0x40000c00
 80077d0:	40001000 	.word	0x40001000
 80077d4:	40001400 	.word	0x40001400
 80077d8:	40010400 	.word	0x40010400
 80077dc:	40014000 	.word	0x40014000
 80077e0:	40014400 	.word	0x40014400
 80077e4:	40014800 	.word	0x40014800
 80077e8:	40001800 	.word	0x40001800
 80077ec:	40001c00 	.word	0x40001c00
 80077f0:	40002000 	.word	0x40002000
 80077f4:	080163e8 	.word	0x080163e8

080077f8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b083      	sub	sp, #12
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007800:	bf00      	nop
 8007802:	370c      	adds	r7, #12
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr

0800780c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b084      	sub	sp, #16
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a89      	ldr	r2, [pc, #548]	; (8007a40 <HAL_TIM_PWM_Start+0x234>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d117      	bne.n	8007850 <HAL_TIM_PWM_Start+0x44>
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	2b00      	cmp	r3, #0
 8007824:	f000 80ae 	beq.w	8007984 <HAL_TIM_PWM_Start+0x178>
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	2b04      	cmp	r3, #4
 800782c:	f000 80aa 	beq.w	8007984 <HAL_TIM_PWM_Start+0x178>
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	2b08      	cmp	r3, #8
 8007834:	f000 80a6 	beq.w	8007984 <HAL_TIM_PWM_Start+0x178>
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	2b0c      	cmp	r3, #12
 800783c:	f000 80a2 	beq.w	8007984 <HAL_TIM_PWM_Start+0x178>
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	2b10      	cmp	r3, #16
 8007844:	f000 809e 	beq.w	8007984 <HAL_TIM_PWM_Start+0x178>
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	2b14      	cmp	r3, #20
 800784c:	f000 809a 	beq.w	8007984 <HAL_TIM_PWM_Start+0x178>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007858:	d10f      	bne.n	800787a <HAL_TIM_PWM_Start+0x6e>
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	2b00      	cmp	r3, #0
 800785e:	f000 8091 	beq.w	8007984 <HAL_TIM_PWM_Start+0x178>
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	2b04      	cmp	r3, #4
 8007866:	f000 808d 	beq.w	8007984 <HAL_TIM_PWM_Start+0x178>
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	2b08      	cmp	r3, #8
 800786e:	f000 8089 	beq.w	8007984 <HAL_TIM_PWM_Start+0x178>
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	2b0c      	cmp	r3, #12
 8007876:	f000 8085 	beq.w	8007984 <HAL_TIM_PWM_Start+0x178>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a71      	ldr	r2, [pc, #452]	; (8007a44 <HAL_TIM_PWM_Start+0x238>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d10b      	bne.n	800789c <HAL_TIM_PWM_Start+0x90>
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d07c      	beq.n	8007984 <HAL_TIM_PWM_Start+0x178>
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	2b04      	cmp	r3, #4
 800788e:	d079      	beq.n	8007984 <HAL_TIM_PWM_Start+0x178>
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	2b08      	cmp	r3, #8
 8007894:	d076      	beq.n	8007984 <HAL_TIM_PWM_Start+0x178>
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	2b0c      	cmp	r3, #12
 800789a:	d073      	beq.n	8007984 <HAL_TIM_PWM_Start+0x178>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a69      	ldr	r2, [pc, #420]	; (8007a48 <HAL_TIM_PWM_Start+0x23c>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d10b      	bne.n	80078be <HAL_TIM_PWM_Start+0xb2>
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d06b      	beq.n	8007984 <HAL_TIM_PWM_Start+0x178>
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	2b04      	cmp	r3, #4
 80078b0:	d068      	beq.n	8007984 <HAL_TIM_PWM_Start+0x178>
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	2b08      	cmp	r3, #8
 80078b6:	d065      	beq.n	8007984 <HAL_TIM_PWM_Start+0x178>
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	2b0c      	cmp	r3, #12
 80078bc:	d062      	beq.n	8007984 <HAL_TIM_PWM_Start+0x178>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a62      	ldr	r2, [pc, #392]	; (8007a4c <HAL_TIM_PWM_Start+0x240>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d10b      	bne.n	80078e0 <HAL_TIM_PWM_Start+0xd4>
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d05a      	beq.n	8007984 <HAL_TIM_PWM_Start+0x178>
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	2b04      	cmp	r3, #4
 80078d2:	d057      	beq.n	8007984 <HAL_TIM_PWM_Start+0x178>
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	2b08      	cmp	r3, #8
 80078d8:	d054      	beq.n	8007984 <HAL_TIM_PWM_Start+0x178>
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	2b0c      	cmp	r3, #12
 80078de:	d051      	beq.n	8007984 <HAL_TIM_PWM_Start+0x178>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a5a      	ldr	r2, [pc, #360]	; (8007a50 <HAL_TIM_PWM_Start+0x244>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d111      	bne.n	800790e <HAL_TIM_PWM_Start+0x102>
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d049      	beq.n	8007984 <HAL_TIM_PWM_Start+0x178>
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	2b04      	cmp	r3, #4
 80078f4:	d046      	beq.n	8007984 <HAL_TIM_PWM_Start+0x178>
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	2b08      	cmp	r3, #8
 80078fa:	d043      	beq.n	8007984 <HAL_TIM_PWM_Start+0x178>
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	2b0c      	cmp	r3, #12
 8007900:	d040      	beq.n	8007984 <HAL_TIM_PWM_Start+0x178>
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	2b10      	cmp	r3, #16
 8007906:	d03d      	beq.n	8007984 <HAL_TIM_PWM_Start+0x178>
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	2b14      	cmp	r3, #20
 800790c:	d03a      	beq.n	8007984 <HAL_TIM_PWM_Start+0x178>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a50      	ldr	r2, [pc, #320]	; (8007a54 <HAL_TIM_PWM_Start+0x248>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d105      	bne.n	8007924 <HAL_TIM_PWM_Start+0x118>
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d032      	beq.n	8007984 <HAL_TIM_PWM_Start+0x178>
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	2b04      	cmp	r3, #4
 8007922:	d02f      	beq.n	8007984 <HAL_TIM_PWM_Start+0x178>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a4b      	ldr	r2, [pc, #300]	; (8007a58 <HAL_TIM_PWM_Start+0x24c>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d102      	bne.n	8007934 <HAL_TIM_PWM_Start+0x128>
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d027      	beq.n	8007984 <HAL_TIM_PWM_Start+0x178>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a48      	ldr	r2, [pc, #288]	; (8007a5c <HAL_TIM_PWM_Start+0x250>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d102      	bne.n	8007944 <HAL_TIM_PWM_Start+0x138>
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d01f      	beq.n	8007984 <HAL_TIM_PWM_Start+0x178>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a45      	ldr	r2, [pc, #276]	; (8007a60 <HAL_TIM_PWM_Start+0x254>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d105      	bne.n	800795a <HAL_TIM_PWM_Start+0x14e>
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d017      	beq.n	8007984 <HAL_TIM_PWM_Start+0x178>
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	2b04      	cmp	r3, #4
 8007958:	d014      	beq.n	8007984 <HAL_TIM_PWM_Start+0x178>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a41      	ldr	r2, [pc, #260]	; (8007a64 <HAL_TIM_PWM_Start+0x258>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d102      	bne.n	800796a <HAL_TIM_PWM_Start+0x15e>
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d00c      	beq.n	8007984 <HAL_TIM_PWM_Start+0x178>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a3e      	ldr	r2, [pc, #248]	; (8007a68 <HAL_TIM_PWM_Start+0x25c>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d102      	bne.n	800797a <HAL_TIM_PWM_Start+0x16e>
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d004      	beq.n	8007984 <HAL_TIM_PWM_Start+0x178>
 800797a:	f240 51bc 	movw	r1, #1468	; 0x5bc
 800797e:	483b      	ldr	r0, [pc, #236]	; (8007a6c <HAL_TIM_PWM_Start+0x260>)
 8007980:	f7fa fe87 	bl	8002692 <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d109      	bne.n	800799e <HAL_TIM_PWM_Start+0x192>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007990:	b2db      	uxtb	r3, r3
 8007992:	2b01      	cmp	r3, #1
 8007994:	bf14      	ite	ne
 8007996:	2301      	movne	r3, #1
 8007998:	2300      	moveq	r3, #0
 800799a:	b2db      	uxtb	r3, r3
 800799c:	e03c      	b.n	8007a18 <HAL_TIM_PWM_Start+0x20c>
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	2b04      	cmp	r3, #4
 80079a2:	d109      	bne.n	80079b8 <HAL_TIM_PWM_Start+0x1ac>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	bf14      	ite	ne
 80079b0:	2301      	movne	r3, #1
 80079b2:	2300      	moveq	r3, #0
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	e02f      	b.n	8007a18 <HAL_TIM_PWM_Start+0x20c>
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	2b08      	cmp	r3, #8
 80079bc:	d109      	bne.n	80079d2 <HAL_TIM_PWM_Start+0x1c6>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80079c4:	b2db      	uxtb	r3, r3
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	bf14      	ite	ne
 80079ca:	2301      	movne	r3, #1
 80079cc:	2300      	moveq	r3, #0
 80079ce:	b2db      	uxtb	r3, r3
 80079d0:	e022      	b.n	8007a18 <HAL_TIM_PWM_Start+0x20c>
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	2b0c      	cmp	r3, #12
 80079d6:	d109      	bne.n	80079ec <HAL_TIM_PWM_Start+0x1e0>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	bf14      	ite	ne
 80079e4:	2301      	movne	r3, #1
 80079e6:	2300      	moveq	r3, #0
 80079e8:	b2db      	uxtb	r3, r3
 80079ea:	e015      	b.n	8007a18 <HAL_TIM_PWM_Start+0x20c>
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	2b10      	cmp	r3, #16
 80079f0:	d109      	bne.n	8007a06 <HAL_TIM_PWM_Start+0x1fa>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80079f8:	b2db      	uxtb	r3, r3
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	bf14      	ite	ne
 80079fe:	2301      	movne	r3, #1
 8007a00:	2300      	moveq	r3, #0
 8007a02:	b2db      	uxtb	r3, r3
 8007a04:	e008      	b.n	8007a18 <HAL_TIM_PWM_Start+0x20c>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007a0c:	b2db      	uxtb	r3, r3
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	bf14      	ite	ne
 8007a12:	2301      	movne	r3, #1
 8007a14:	2300      	moveq	r3, #0
 8007a16:	b2db      	uxtb	r3, r3
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d001      	beq.n	8007a20 <HAL_TIM_PWM_Start+0x214>
  {
    return HAL_ERROR;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	e0aa      	b.n	8007b76 <HAL_TIM_PWM_Start+0x36a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d104      	bne.n	8007a30 <HAL_TIM_PWM_Start+0x224>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2202      	movs	r2, #2
 8007a2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a2e:	e03b      	b.n	8007aa8 <HAL_TIM_PWM_Start+0x29c>
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	2b04      	cmp	r3, #4
 8007a34:	d11c      	bne.n	8007a70 <HAL_TIM_PWM_Start+0x264>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2202      	movs	r2, #2
 8007a3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a3e:	e033      	b.n	8007aa8 <HAL_TIM_PWM_Start+0x29c>
 8007a40:	40010000 	.word	0x40010000
 8007a44:	40000400 	.word	0x40000400
 8007a48:	40000800 	.word	0x40000800
 8007a4c:	40000c00 	.word	0x40000c00
 8007a50:	40010400 	.word	0x40010400
 8007a54:	40014000 	.word	0x40014000
 8007a58:	40014400 	.word	0x40014400
 8007a5c:	40014800 	.word	0x40014800
 8007a60:	40001800 	.word	0x40001800
 8007a64:	40001c00 	.word	0x40001c00
 8007a68:	40002000 	.word	0x40002000
 8007a6c:	080163e8 	.word	0x080163e8
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	2b08      	cmp	r3, #8
 8007a74:	d104      	bne.n	8007a80 <HAL_TIM_PWM_Start+0x274>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2202      	movs	r2, #2
 8007a7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a7e:	e013      	b.n	8007aa8 <HAL_TIM_PWM_Start+0x29c>
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	2b0c      	cmp	r3, #12
 8007a84:	d104      	bne.n	8007a90 <HAL_TIM_PWM_Start+0x284>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2202      	movs	r2, #2
 8007a8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007a8e:	e00b      	b.n	8007aa8 <HAL_TIM_PWM_Start+0x29c>
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	2b10      	cmp	r3, #16
 8007a94:	d104      	bne.n	8007aa0 <HAL_TIM_PWM_Start+0x294>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2202      	movs	r2, #2
 8007a9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a9e:	e003      	b.n	8007aa8 <HAL_TIM_PWM_Start+0x29c>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2202      	movs	r2, #2
 8007aa4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	2201      	movs	r2, #1
 8007aae:	6839      	ldr	r1, [r7, #0]
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f001 fba3 	bl	80091fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a31      	ldr	r2, [pc, #196]	; (8007b80 <HAL_TIM_PWM_Start+0x374>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d004      	beq.n	8007aca <HAL_TIM_PWM_Start+0x2be>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a2f      	ldr	r2, [pc, #188]	; (8007b84 <HAL_TIM_PWM_Start+0x378>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d101      	bne.n	8007ace <HAL_TIM_PWM_Start+0x2c2>
 8007aca:	2301      	movs	r3, #1
 8007acc:	e000      	b.n	8007ad0 <HAL_TIM_PWM_Start+0x2c4>
 8007ace:	2300      	movs	r3, #0
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d007      	beq.n	8007ae4 <HAL_TIM_PWM_Start+0x2d8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007ae2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a25      	ldr	r2, [pc, #148]	; (8007b80 <HAL_TIM_PWM_Start+0x374>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d022      	beq.n	8007b34 <HAL_TIM_PWM_Start+0x328>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007af6:	d01d      	beq.n	8007b34 <HAL_TIM_PWM_Start+0x328>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a22      	ldr	r2, [pc, #136]	; (8007b88 <HAL_TIM_PWM_Start+0x37c>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d018      	beq.n	8007b34 <HAL_TIM_PWM_Start+0x328>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a21      	ldr	r2, [pc, #132]	; (8007b8c <HAL_TIM_PWM_Start+0x380>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d013      	beq.n	8007b34 <HAL_TIM_PWM_Start+0x328>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a1f      	ldr	r2, [pc, #124]	; (8007b90 <HAL_TIM_PWM_Start+0x384>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d00e      	beq.n	8007b34 <HAL_TIM_PWM_Start+0x328>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a1a      	ldr	r2, [pc, #104]	; (8007b84 <HAL_TIM_PWM_Start+0x378>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d009      	beq.n	8007b34 <HAL_TIM_PWM_Start+0x328>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a1b      	ldr	r2, [pc, #108]	; (8007b94 <HAL_TIM_PWM_Start+0x388>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d004      	beq.n	8007b34 <HAL_TIM_PWM_Start+0x328>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4a1a      	ldr	r2, [pc, #104]	; (8007b98 <HAL_TIM_PWM_Start+0x38c>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d115      	bne.n	8007b60 <HAL_TIM_PWM_Start+0x354>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	689a      	ldr	r2, [r3, #8]
 8007b3a:	4b18      	ldr	r3, [pc, #96]	; (8007b9c <HAL_TIM_PWM_Start+0x390>)
 8007b3c:	4013      	ands	r3, r2
 8007b3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2b06      	cmp	r3, #6
 8007b44:	d015      	beq.n	8007b72 <HAL_TIM_PWM_Start+0x366>
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b4c:	d011      	beq.n	8007b72 <HAL_TIM_PWM_Start+0x366>
    {
      __HAL_TIM_ENABLE(htim);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f042 0201 	orr.w	r2, r2, #1
 8007b5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b5e:	e008      	b.n	8007b72 <HAL_TIM_PWM_Start+0x366>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f042 0201 	orr.w	r2, r2, #1
 8007b6e:	601a      	str	r2, [r3, #0]
 8007b70:	e000      	b.n	8007b74 <HAL_TIM_PWM_Start+0x368>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b72:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007b74:	2300      	movs	r3, #0
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3710      	adds	r7, #16
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}
 8007b7e:	bf00      	nop
 8007b80:	40010000 	.word	0x40010000
 8007b84:	40010400 	.word	0x40010400
 8007b88:	40000400 	.word	0x40000400
 8007b8c:	40000800 	.word	0x40000800
 8007b90:	40000c00 	.word	0x40000c00
 8007b94:	40014000 	.word	0x40014000
 8007b98:	40001800 	.word	0x40001800
 8007b9c:	00010007 	.word	0x00010007

08007ba0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b082      	sub	sp, #8
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	691b      	ldr	r3, [r3, #16]
 8007bae:	f003 0302 	and.w	r3, r3, #2
 8007bb2:	2b02      	cmp	r3, #2
 8007bb4:	d122      	bne.n	8007bfc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	68db      	ldr	r3, [r3, #12]
 8007bbc:	f003 0302 	and.w	r3, r3, #2
 8007bc0:	2b02      	cmp	r3, #2
 8007bc2:	d11b      	bne.n	8007bfc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f06f 0202 	mvn.w	r2, #2
 8007bcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	699b      	ldr	r3, [r3, #24]
 8007bda:	f003 0303 	and.w	r3, r3, #3
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d003      	beq.n	8007bea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 feca 	bl	800897c <HAL_TIM_IC_CaptureCallback>
 8007be8:	e005      	b.n	8007bf6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 febc 	bl	8008968 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 fecd 	bl	8008990 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	691b      	ldr	r3, [r3, #16]
 8007c02:	f003 0304 	and.w	r3, r3, #4
 8007c06:	2b04      	cmp	r3, #4
 8007c08:	d122      	bne.n	8007c50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	68db      	ldr	r3, [r3, #12]
 8007c10:	f003 0304 	and.w	r3, r3, #4
 8007c14:	2b04      	cmp	r3, #4
 8007c16:	d11b      	bne.n	8007c50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f06f 0204 	mvn.w	r2, #4
 8007c20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2202      	movs	r2, #2
 8007c26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	699b      	ldr	r3, [r3, #24]
 8007c2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d003      	beq.n	8007c3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 fea0 	bl	800897c <HAL_TIM_IC_CaptureCallback>
 8007c3c:	e005      	b.n	8007c4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 fe92 	bl	8008968 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f000 fea3 	bl	8008990 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	691b      	ldr	r3, [r3, #16]
 8007c56:	f003 0308 	and.w	r3, r3, #8
 8007c5a:	2b08      	cmp	r3, #8
 8007c5c:	d122      	bne.n	8007ca4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	68db      	ldr	r3, [r3, #12]
 8007c64:	f003 0308 	and.w	r3, r3, #8
 8007c68:	2b08      	cmp	r3, #8
 8007c6a:	d11b      	bne.n	8007ca4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f06f 0208 	mvn.w	r2, #8
 8007c74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2204      	movs	r2, #4
 8007c7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	69db      	ldr	r3, [r3, #28]
 8007c82:	f003 0303 	and.w	r3, r3, #3
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d003      	beq.n	8007c92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 fe76 	bl	800897c <HAL_TIM_IC_CaptureCallback>
 8007c90:	e005      	b.n	8007c9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 fe68 	bl	8008968 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f000 fe79 	bl	8008990 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	691b      	ldr	r3, [r3, #16]
 8007caa:	f003 0310 	and.w	r3, r3, #16
 8007cae:	2b10      	cmp	r3, #16
 8007cb0:	d122      	bne.n	8007cf8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	68db      	ldr	r3, [r3, #12]
 8007cb8:	f003 0310 	and.w	r3, r3, #16
 8007cbc:	2b10      	cmp	r3, #16
 8007cbe:	d11b      	bne.n	8007cf8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f06f 0210 	mvn.w	r2, #16
 8007cc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2208      	movs	r2, #8
 8007cce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	69db      	ldr	r3, [r3, #28]
 8007cd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d003      	beq.n	8007ce6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f000 fe4c 	bl	800897c <HAL_TIM_IC_CaptureCallback>
 8007ce4:	e005      	b.n	8007cf2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 fe3e 	bl	8008968 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f000 fe4f 	bl	8008990 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	691b      	ldr	r3, [r3, #16]
 8007cfe:	f003 0301 	and.w	r3, r3, #1
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d10e      	bne.n	8007d24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	68db      	ldr	r3, [r3, #12]
 8007d0c:	f003 0301 	and.w	r3, r3, #1
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	d107      	bne.n	8007d24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f06f 0201 	mvn.w	r2, #1
 8007d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 fe18 	bl	8008954 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	691b      	ldr	r3, [r3, #16]
 8007d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d2e:	2b80      	cmp	r3, #128	; 0x80
 8007d30:	d10e      	bne.n	8007d50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	68db      	ldr	r3, [r3, #12]
 8007d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d3c:	2b80      	cmp	r3, #128	; 0x80
 8007d3e:	d107      	bne.n	8007d50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007d48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f001 fc42 	bl	80095d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	691b      	ldr	r3, [r3, #16]
 8007d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d5e:	d10e      	bne.n	8007d7e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	68db      	ldr	r3, [r3, #12]
 8007d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d6a:	2b80      	cmp	r3, #128	; 0x80
 8007d6c:	d107      	bne.n	8007d7e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007d76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f001 fc35 	bl	80095e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	691b      	ldr	r3, [r3, #16]
 8007d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d88:	2b40      	cmp	r3, #64	; 0x40
 8007d8a:	d10e      	bne.n	8007daa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	68db      	ldr	r3, [r3, #12]
 8007d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d96:	2b40      	cmp	r3, #64	; 0x40
 8007d98:	d107      	bne.n	8007daa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007da2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f000 fdfd 	bl	80089a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	691b      	ldr	r3, [r3, #16]
 8007db0:	f003 0320 	and.w	r3, r3, #32
 8007db4:	2b20      	cmp	r3, #32
 8007db6:	d10e      	bne.n	8007dd6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	68db      	ldr	r3, [r3, #12]
 8007dbe:	f003 0320 	and.w	r3, r3, #32
 8007dc2:	2b20      	cmp	r3, #32
 8007dc4:	d107      	bne.n	8007dd6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f06f 0220 	mvn.w	r2, #32
 8007dce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f001 fbf5 	bl	80095c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007dd6:	bf00      	nop
 8007dd8:	3708      	adds	r7, #8
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
	...

08007de0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b086      	sub	sp, #24
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	60f8      	str	r0, [r7, #12]
 8007de8:	60b9      	str	r1, [r7, #8]
 8007dea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007dec:	2300      	movs	r3, #0
 8007dee:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d016      	beq.n	8007e24 <HAL_TIM_PWM_ConfigChannel+0x44>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2b04      	cmp	r3, #4
 8007dfa:	d013      	beq.n	8007e24 <HAL_TIM_PWM_ConfigChannel+0x44>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2b08      	cmp	r3, #8
 8007e00:	d010      	beq.n	8007e24 <HAL_TIM_PWM_ConfigChannel+0x44>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2b0c      	cmp	r3, #12
 8007e06:	d00d      	beq.n	8007e24 <HAL_TIM_PWM_ConfigChannel+0x44>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2b10      	cmp	r3, #16
 8007e0c:	d00a      	beq.n	8007e24 <HAL_TIM_PWM_ConfigChannel+0x44>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2b14      	cmp	r3, #20
 8007e12:	d007      	beq.n	8007e24 <HAL_TIM_PWM_ConfigChannel+0x44>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2b3c      	cmp	r3, #60	; 0x3c
 8007e18:	d004      	beq.n	8007e24 <HAL_TIM_PWM_ConfigChannel+0x44>
 8007e1a:	f241 01af 	movw	r1, #4271	; 0x10af
 8007e1e:	4895      	ldr	r0, [pc, #596]	; (8008074 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8007e20:	f7fa fc37 	bl	8002692 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	2b60      	cmp	r3, #96	; 0x60
 8007e2a:	d01c      	beq.n	8007e66 <HAL_TIM_PWM_ConfigChannel+0x86>
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	2b70      	cmp	r3, #112	; 0x70
 8007e32:	d018      	beq.n	8007e66 <HAL_TIM_PWM_ConfigChannel+0x86>
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a8f      	ldr	r2, [pc, #572]	; (8008078 <HAL_TIM_PWM_ConfigChannel+0x298>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d013      	beq.n	8007e66 <HAL_TIM_PWM_ConfigChannel+0x86>
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a8e      	ldr	r2, [pc, #568]	; (800807c <HAL_TIM_PWM_ConfigChannel+0x29c>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d00e      	beq.n	8007e66 <HAL_TIM_PWM_ConfigChannel+0x86>
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4a8c      	ldr	r2, [pc, #560]	; (8008080 <HAL_TIM_PWM_ConfigChannel+0x2a0>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d009      	beq.n	8007e66 <HAL_TIM_PWM_ConfigChannel+0x86>
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a8b      	ldr	r2, [pc, #556]	; (8008084 <HAL_TIM_PWM_ConfigChannel+0x2a4>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d004      	beq.n	8007e66 <HAL_TIM_PWM_ConfigChannel+0x86>
 8007e5c:	f241 01b0 	movw	r1, #4272	; 0x10b0
 8007e60:	4884      	ldr	r0, [pc, #528]	; (8008074 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8007e62:	f7fa fc16 	bl	8002692 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	689b      	ldr	r3, [r3, #8]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d008      	beq.n	8007e80 <HAL_TIM_PWM_ConfigChannel+0xa0>
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	689b      	ldr	r3, [r3, #8]
 8007e72:	2b02      	cmp	r3, #2
 8007e74:	d004      	beq.n	8007e80 <HAL_TIM_PWM_ConfigChannel+0xa0>
 8007e76:	f241 01b1 	movw	r1, #4273	; 0x10b1
 8007e7a:	487e      	ldr	r0, [pc, #504]	; (8008074 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8007e7c:	f7fa fc09 	bl	8002692 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	691b      	ldr	r3, [r3, #16]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d008      	beq.n	8007e9a <HAL_TIM_PWM_ConfigChannel+0xba>
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	691b      	ldr	r3, [r3, #16]
 8007e8c:	2b04      	cmp	r3, #4
 8007e8e:	d004      	beq.n	8007e9a <HAL_TIM_PWM_ConfigChannel+0xba>
 8007e90:	f241 01b2 	movw	r1, #4274	; 0x10b2
 8007e94:	4877      	ldr	r0, [pc, #476]	; (8008074 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8007e96:	f7fa fbfc 	bl	8002692 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	d101      	bne.n	8007ea8 <HAL_TIM_PWM_ConfigChannel+0xc8>
 8007ea4:	2302      	movs	r3, #2
 8007ea6:	e1f3      	b.n	8008290 <HAL_TIM_PWM_ConfigChannel+0x4b0>
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2201      	movs	r2, #1
 8007eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2b14      	cmp	r3, #20
 8007eb4:	f200 81e4 	bhi.w	8008280 <HAL_TIM_PWM_ConfigChannel+0x4a0>
 8007eb8:	a201      	add	r2, pc, #4	; (adr r2, 8007ec0 <HAL_TIM_PWM_ConfigChannel+0xe0>)
 8007eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ebe:	bf00      	nop
 8007ec0:	08007f15 	.word	0x08007f15
 8007ec4:	08008281 	.word	0x08008281
 8007ec8:	08008281 	.word	0x08008281
 8007ecc:	08008281 	.word	0x08008281
 8007ed0:	08007fd7 	.word	0x08007fd7
 8007ed4:	08008281 	.word	0x08008281
 8007ed8:	08008281 	.word	0x08008281
 8007edc:	08008281 	.word	0x08008281
 8007ee0:	080080b5 	.word	0x080080b5
 8007ee4:	08008281 	.word	0x08008281
 8007ee8:	08008281 	.word	0x08008281
 8007eec:	08008281 	.word	0x08008281
 8007ef0:	0800813b 	.word	0x0800813b
 8007ef4:	08008281 	.word	0x08008281
 8007ef8:	08008281 	.word	0x08008281
 8007efc:	08008281 	.word	0x08008281
 8007f00:	080081c3 	.word	0x080081c3
 8007f04:	08008281 	.word	0x08008281
 8007f08:	08008281 	.word	0x08008281
 8007f0c:	08008281 	.word	0x08008281
 8007f10:	08008221 	.word	0x08008221
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a5b      	ldr	r2, [pc, #364]	; (8008088 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d03b      	beq.n	8007f96 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f26:	d036      	beq.n	8007f96 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a57      	ldr	r2, [pc, #348]	; (800808c <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d031      	beq.n	8007f96 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a56      	ldr	r2, [pc, #344]	; (8008090 <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d02c      	beq.n	8007f96 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a54      	ldr	r2, [pc, #336]	; (8008094 <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d027      	beq.n	8007f96 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a53      	ldr	r2, [pc, #332]	; (8008098 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d022      	beq.n	8007f96 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a51      	ldr	r2, [pc, #324]	; (800809c <HAL_TIM_PWM_ConfigChannel+0x2bc>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d01d      	beq.n	8007f96 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a50      	ldr	r2, [pc, #320]	; (80080a0 <HAL_TIM_PWM_ConfigChannel+0x2c0>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d018      	beq.n	8007f96 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a4e      	ldr	r2, [pc, #312]	; (80080a4 <HAL_TIM_PWM_ConfigChannel+0x2c4>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d013      	beq.n	8007f96 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a4d      	ldr	r2, [pc, #308]	; (80080a8 <HAL_TIM_PWM_ConfigChannel+0x2c8>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d00e      	beq.n	8007f96 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a4b      	ldr	r2, [pc, #300]	; (80080ac <HAL_TIM_PWM_ConfigChannel+0x2cc>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d009      	beq.n	8007f96 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a4a      	ldr	r2, [pc, #296]	; (80080b0 <HAL_TIM_PWM_ConfigChannel+0x2d0>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d004      	beq.n	8007f96 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8007f8c:	f241 01bc 	movw	r1, #4284	; 0x10bc
 8007f90:	4838      	ldr	r0, [pc, #224]	; (8008074 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8007f92:	f7fa fb7e 	bl	8002692 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	68b9      	ldr	r1, [r7, #8]
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f000 fdab 	bl	8008af8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	699a      	ldr	r2, [r3, #24]
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f042 0208 	orr.w	r2, r2, #8
 8007fb0:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	699a      	ldr	r2, [r3, #24]
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f022 0204 	bic.w	r2, r2, #4
 8007fc0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	6999      	ldr	r1, [r3, #24]
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	691a      	ldr	r2, [r3, #16]
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	430a      	orrs	r2, r1
 8007fd2:	619a      	str	r2, [r3, #24]
      break;
 8007fd4:	e157      	b.n	8008286 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a2b      	ldr	r2, [pc, #172]	; (8008088 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d027      	beq.n	8008030 <HAL_TIM_PWM_ConfigChannel+0x250>
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fe8:	d022      	beq.n	8008030 <HAL_TIM_PWM_ConfigChannel+0x250>
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a27      	ldr	r2, [pc, #156]	; (800808c <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d01d      	beq.n	8008030 <HAL_TIM_PWM_ConfigChannel+0x250>
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a25      	ldr	r2, [pc, #148]	; (8008090 <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d018      	beq.n	8008030 <HAL_TIM_PWM_ConfigChannel+0x250>
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a24      	ldr	r2, [pc, #144]	; (8008094 <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d013      	beq.n	8008030 <HAL_TIM_PWM_ConfigChannel+0x250>
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a22      	ldr	r2, [pc, #136]	; (8008098 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d00e      	beq.n	8008030 <HAL_TIM_PWM_ConfigChannel+0x250>
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a21      	ldr	r2, [pc, #132]	; (800809c <HAL_TIM_PWM_ConfigChannel+0x2bc>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d009      	beq.n	8008030 <HAL_TIM_PWM_ConfigChannel+0x250>
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a21      	ldr	r2, [pc, #132]	; (80080a8 <HAL_TIM_PWM_ConfigChannel+0x2c8>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d004      	beq.n	8008030 <HAL_TIM_PWM_ConfigChannel+0x250>
 8008026:	f241 01cd 	movw	r1, #4301	; 0x10cd
 800802a:	4812      	ldr	r0, [pc, #72]	; (8008074 <HAL_TIM_PWM_ConfigChannel+0x294>)
 800802c:	f7fa fb31 	bl	8002692 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	68b9      	ldr	r1, [r7, #8]
 8008036:	4618      	mov	r0, r3
 8008038:	f000 fdfa 	bl	8008c30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	699a      	ldr	r2, [r3, #24]
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800804a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	699a      	ldr	r2, [r3, #24]
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800805a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	6999      	ldr	r1, [r3, #24]
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	691b      	ldr	r3, [r3, #16]
 8008066:	021a      	lsls	r2, r3, #8
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	430a      	orrs	r2, r1
 800806e:	619a      	str	r2, [r3, #24]
      break;
 8008070:	e109      	b.n	8008286 <HAL_TIM_PWM_ConfigChannel+0x4a6>
 8008072:	bf00      	nop
 8008074:	080163e8 	.word	0x080163e8
 8008078:	00010040 	.word	0x00010040
 800807c:	00010050 	.word	0x00010050
 8008080:	00010060 	.word	0x00010060
 8008084:	00010070 	.word	0x00010070
 8008088:	40010000 	.word	0x40010000
 800808c:	40000400 	.word	0x40000400
 8008090:	40000800 	.word	0x40000800
 8008094:	40000c00 	.word	0x40000c00
 8008098:	40010400 	.word	0x40010400
 800809c:	40014000 	.word	0x40014000
 80080a0:	40014400 	.word	0x40014400
 80080a4:	40014800 	.word	0x40014800
 80080a8:	40001800 	.word	0x40001800
 80080ac:	40001c00 	.word	0x40001c00
 80080b0:	40002000 	.word	0x40002000
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a77      	ldr	r2, [pc, #476]	; (8008298 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d01d      	beq.n	80080fa <HAL_TIM_PWM_ConfigChannel+0x31a>
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080c6:	d018      	beq.n	80080fa <HAL_TIM_PWM_ConfigChannel+0x31a>
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a73      	ldr	r2, [pc, #460]	; (800829c <HAL_TIM_PWM_ConfigChannel+0x4bc>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d013      	beq.n	80080fa <HAL_TIM_PWM_ConfigChannel+0x31a>
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a72      	ldr	r2, [pc, #456]	; (80082a0 <HAL_TIM_PWM_ConfigChannel+0x4c0>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d00e      	beq.n	80080fa <HAL_TIM_PWM_ConfigChannel+0x31a>
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a70      	ldr	r2, [pc, #448]	; (80082a4 <HAL_TIM_PWM_ConfigChannel+0x4c4>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d009      	beq.n	80080fa <HAL_TIM_PWM_ConfigChannel+0x31a>
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a6f      	ldr	r2, [pc, #444]	; (80082a8 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d004      	beq.n	80080fa <HAL_TIM_PWM_ConfigChannel+0x31a>
 80080f0:	f241 01de 	movw	r1, #4318	; 0x10de
 80080f4:	486d      	ldr	r0, [pc, #436]	; (80082ac <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 80080f6:	f7fa facc 	bl	8002692 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	68b9      	ldr	r1, [r7, #8]
 8008100:	4618      	mov	r0, r3
 8008102:	f000 fe35 	bl	8008d70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	69da      	ldr	r2, [r3, #28]
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f042 0208 	orr.w	r2, r2, #8
 8008114:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	69da      	ldr	r2, [r3, #28]
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f022 0204 	bic.w	r2, r2, #4
 8008124:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	69d9      	ldr	r1, [r3, #28]
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	691a      	ldr	r2, [r3, #16]
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	430a      	orrs	r2, r1
 8008136:	61da      	str	r2, [r3, #28]
      break;
 8008138:	e0a5      	b.n	8008286 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a56      	ldr	r2, [pc, #344]	; (8008298 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d01d      	beq.n	8008180 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800814c:	d018      	beq.n	8008180 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4a52      	ldr	r2, [pc, #328]	; (800829c <HAL_TIM_PWM_ConfigChannel+0x4bc>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d013      	beq.n	8008180 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a50      	ldr	r2, [pc, #320]	; (80082a0 <HAL_TIM_PWM_ConfigChannel+0x4c0>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d00e      	beq.n	8008180 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a4f      	ldr	r2, [pc, #316]	; (80082a4 <HAL_TIM_PWM_ConfigChannel+0x4c4>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d009      	beq.n	8008180 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a4d      	ldr	r2, [pc, #308]	; (80082a8 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d004      	beq.n	8008180 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8008176:	f241 01ef 	movw	r1, #4335	; 0x10ef
 800817a:	484c      	ldr	r0, [pc, #304]	; (80082ac <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 800817c:	f7fa fa89 	bl	8002692 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	68b9      	ldr	r1, [r7, #8]
 8008186:	4618      	mov	r0, r3
 8008188:	f000 fe92 	bl	8008eb0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	69da      	ldr	r2, [r3, #28]
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800819a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	69da      	ldr	r2, [r3, #28]
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081aa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	69d9      	ldr	r1, [r3, #28]
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	691b      	ldr	r3, [r3, #16]
 80081b6:	021a      	lsls	r2, r3, #8
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	430a      	orrs	r2, r1
 80081be:	61da      	str	r2, [r3, #28]
      break;
 80081c0:	e061      	b.n	8008286 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a34      	ldr	r2, [pc, #208]	; (8008298 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d009      	beq.n	80081e0 <HAL_TIM_PWM_ConfigChannel+0x400>
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a35      	ldr	r2, [pc, #212]	; (80082a8 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d004      	beq.n	80081e0 <HAL_TIM_PWM_ConfigChannel+0x400>
 80081d6:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 80081da:	4834      	ldr	r0, [pc, #208]	; (80082ac <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 80081dc:	f7fa fa59 	bl	8002692 <assert_failed>

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	68b9      	ldr	r1, [r7, #8]
 80081e6:	4618      	mov	r0, r3
 80081e8:	f000 fec8 	bl	8008f7c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f042 0208 	orr.w	r2, r2, #8
 80081fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f022 0204 	bic.w	r2, r2, #4
 800820a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	691a      	ldr	r2, [r3, #16]
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	430a      	orrs	r2, r1
 800821c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800821e:	e032      	b.n	8008286 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a1c      	ldr	r2, [pc, #112]	; (8008298 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d009      	beq.n	800823e <HAL_TIM_PWM_ConfigChannel+0x45e>
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a1e      	ldr	r2, [pc, #120]	; (80082a8 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d004      	beq.n	800823e <HAL_TIM_PWM_ConfigChannel+0x45e>
 8008234:	f241 1111 	movw	r1, #4369	; 0x1111
 8008238:	481c      	ldr	r0, [pc, #112]	; (80082ac <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 800823a:	f7fa fa2a 	bl	8002692 <assert_failed>

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	68b9      	ldr	r1, [r7, #8]
 8008244:	4618      	mov	r0, r3
 8008246:	f000 feeb 	bl	8009020 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008258:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008268:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	691b      	ldr	r3, [r3, #16]
 8008274:	021a      	lsls	r2, r3, #8
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	430a      	orrs	r2, r1
 800827c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800827e:	e002      	b.n	8008286 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    default:
      status = HAL_ERROR;
 8008280:	2301      	movs	r3, #1
 8008282:	75fb      	strb	r3, [r7, #23]
      break;
 8008284:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2200      	movs	r2, #0
 800828a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800828e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008290:	4618      	mov	r0, r3
 8008292:	3718      	adds	r7, #24
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}
 8008298:	40010000 	.word	0x40010000
 800829c:	40000400 	.word	0x40000400
 80082a0:	40000800 	.word	0x40000800
 80082a4:	40000c00 	.word	0x40000c00
 80082a8:	40010400 	.word	0x40010400
 80082ac:	080163e8 	.word	0x080163e8

080082b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b084      	sub	sp, #16
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80082ba:	2300      	movs	r3, #0
 80082bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	d101      	bne.n	80082cc <HAL_TIM_ConfigClockSource+0x1c>
 80082c8:	2302      	movs	r3, #2
 80082ca:	e332      	b.n	8008932 <HAL_TIM_ConfigClockSource+0x682>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2201      	movs	r2, #1
 80082d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2202      	movs	r2, #2
 80082d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082e4:	d029      	beq.n	800833a <HAL_TIM_ConfigClockSource+0x8a>
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	2b70      	cmp	r3, #112	; 0x70
 80082ec:	d025      	beq.n	800833a <HAL_TIM_ConfigClockSource+0x8a>
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082f6:	d020      	beq.n	800833a <HAL_TIM_ConfigClockSource+0x8a>
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	2b40      	cmp	r3, #64	; 0x40
 80082fe:	d01c      	beq.n	800833a <HAL_TIM_ConfigClockSource+0x8a>
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	2b50      	cmp	r3, #80	; 0x50
 8008306:	d018      	beq.n	800833a <HAL_TIM_ConfigClockSource+0x8a>
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	2b60      	cmp	r3, #96	; 0x60
 800830e:	d014      	beq.n	800833a <HAL_TIM_ConfigClockSource+0x8a>
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d010      	beq.n	800833a <HAL_TIM_ConfigClockSource+0x8a>
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	2b10      	cmp	r3, #16
 800831e:	d00c      	beq.n	800833a <HAL_TIM_ConfigClockSource+0x8a>
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	2b20      	cmp	r3, #32
 8008326:	d008      	beq.n	800833a <HAL_TIM_ConfigClockSource+0x8a>
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	2b30      	cmp	r3, #48	; 0x30
 800832e:	d004      	beq.n	800833a <HAL_TIM_ConfigClockSource+0x8a>
 8008330:	f241 514c 	movw	r1, #5452	; 0x154c
 8008334:	4893      	ldr	r0, [pc, #588]	; (8008584 <HAL_TIM_ConfigClockSource+0x2d4>)
 8008336:	f7fa f9ac 	bl	8002692 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	689b      	ldr	r3, [r3, #8]
 8008340:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008342:	68ba      	ldr	r2, [r7, #8]
 8008344:	4b90      	ldr	r3, [pc, #576]	; (8008588 <HAL_TIM_ConfigClockSource+0x2d8>)
 8008346:	4013      	ands	r3, r2
 8008348:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008350:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	68ba      	ldr	r2, [r7, #8]
 8008358:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008362:	f000 812d 	beq.w	80085c0 <HAL_TIM_ConfigClockSource+0x310>
 8008366:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800836a:	f200 82d5 	bhi.w	8008918 <HAL_TIM_ConfigClockSource+0x668>
 800836e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008372:	d02e      	beq.n	80083d2 <HAL_TIM_ConfigClockSource+0x122>
 8008374:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008378:	f200 82ce 	bhi.w	8008918 <HAL_TIM_ConfigClockSource+0x668>
 800837c:	2b70      	cmp	r3, #112	; 0x70
 800837e:	f000 8082 	beq.w	8008486 <HAL_TIM_ConfigClockSource+0x1d6>
 8008382:	2b70      	cmp	r3, #112	; 0x70
 8008384:	f200 82c8 	bhi.w	8008918 <HAL_TIM_ConfigClockSource+0x668>
 8008388:	2b60      	cmp	r3, #96	; 0x60
 800838a:	f000 81e0 	beq.w	800874e <HAL_TIM_ConfigClockSource+0x49e>
 800838e:	2b60      	cmp	r3, #96	; 0x60
 8008390:	f200 82c2 	bhi.w	8008918 <HAL_TIM_ConfigClockSource+0x668>
 8008394:	2b50      	cmp	r3, #80	; 0x50
 8008396:	f000 8184 	beq.w	80086a2 <HAL_TIM_ConfigClockSource+0x3f2>
 800839a:	2b50      	cmp	r3, #80	; 0x50
 800839c:	f200 82bc 	bhi.w	8008918 <HAL_TIM_ConfigClockSource+0x668>
 80083a0:	2b40      	cmp	r3, #64	; 0x40
 80083a2:	f000 8237 	beq.w	8008814 <HAL_TIM_ConfigClockSource+0x564>
 80083a6:	2b40      	cmp	r3, #64	; 0x40
 80083a8:	f200 82b6 	bhi.w	8008918 <HAL_TIM_ConfigClockSource+0x668>
 80083ac:	2b30      	cmp	r3, #48	; 0x30
 80083ae:	f000 8287 	beq.w	80088c0 <HAL_TIM_ConfigClockSource+0x610>
 80083b2:	2b30      	cmp	r3, #48	; 0x30
 80083b4:	f200 82b0 	bhi.w	8008918 <HAL_TIM_ConfigClockSource+0x668>
 80083b8:	2b20      	cmp	r3, #32
 80083ba:	f000 8281 	beq.w	80088c0 <HAL_TIM_ConfigClockSource+0x610>
 80083be:	2b20      	cmp	r3, #32
 80083c0:	f200 82aa 	bhi.w	8008918 <HAL_TIM_ConfigClockSource+0x668>
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	f000 827b 	beq.w	80088c0 <HAL_TIM_ConfigClockSource+0x610>
 80083ca:	2b10      	cmp	r3, #16
 80083cc:	f000 8278 	beq.w	80088c0 <HAL_TIM_ConfigClockSource+0x610>
 80083d0:	e2a2      	b.n	8008918 <HAL_TIM_ConfigClockSource+0x668>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a6d      	ldr	r2, [pc, #436]	; (800858c <HAL_TIM_ConfigClockSource+0x2dc>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	f000 82a0 	beq.w	800891e <HAL_TIM_ConfigClockSource+0x66e>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083e6:	f000 829a 	beq.w	800891e <HAL_TIM_ConfigClockSource+0x66e>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a68      	ldr	r2, [pc, #416]	; (8008590 <HAL_TIM_ConfigClockSource+0x2e0>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	f000 8294 	beq.w	800891e <HAL_TIM_ConfigClockSource+0x66e>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a66      	ldr	r2, [pc, #408]	; (8008594 <HAL_TIM_ConfigClockSource+0x2e4>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	f000 828e 	beq.w	800891e <HAL_TIM_ConfigClockSource+0x66e>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a64      	ldr	r2, [pc, #400]	; (8008598 <HAL_TIM_ConfigClockSource+0x2e8>)
 8008408:	4293      	cmp	r3, r2
 800840a:	f000 8288 	beq.w	800891e <HAL_TIM_ConfigClockSource+0x66e>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a62      	ldr	r2, [pc, #392]	; (800859c <HAL_TIM_ConfigClockSource+0x2ec>)
 8008414:	4293      	cmp	r3, r2
 8008416:	f000 8282 	beq.w	800891e <HAL_TIM_ConfigClockSource+0x66e>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4a60      	ldr	r2, [pc, #384]	; (80085a0 <HAL_TIM_ConfigClockSource+0x2f0>)
 8008420:	4293      	cmp	r3, r2
 8008422:	f000 827c 	beq.w	800891e <HAL_TIM_ConfigClockSource+0x66e>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a5e      	ldr	r2, [pc, #376]	; (80085a4 <HAL_TIM_ConfigClockSource+0x2f4>)
 800842c:	4293      	cmp	r3, r2
 800842e:	f000 8276 	beq.w	800891e <HAL_TIM_ConfigClockSource+0x66e>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a5c      	ldr	r2, [pc, #368]	; (80085a8 <HAL_TIM_ConfigClockSource+0x2f8>)
 8008438:	4293      	cmp	r3, r2
 800843a:	f000 8270 	beq.w	800891e <HAL_TIM_ConfigClockSource+0x66e>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4a5a      	ldr	r2, [pc, #360]	; (80085ac <HAL_TIM_ConfigClockSource+0x2fc>)
 8008444:	4293      	cmp	r3, r2
 8008446:	f000 826a 	beq.w	800891e <HAL_TIM_ConfigClockSource+0x66e>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a58      	ldr	r2, [pc, #352]	; (80085b0 <HAL_TIM_ConfigClockSource+0x300>)
 8008450:	4293      	cmp	r3, r2
 8008452:	f000 8264 	beq.w	800891e <HAL_TIM_ConfigClockSource+0x66e>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a56      	ldr	r2, [pc, #344]	; (80085b4 <HAL_TIM_ConfigClockSource+0x304>)
 800845c:	4293      	cmp	r3, r2
 800845e:	f000 825e 	beq.w	800891e <HAL_TIM_ConfigClockSource+0x66e>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a54      	ldr	r2, [pc, #336]	; (80085b8 <HAL_TIM_ConfigClockSource+0x308>)
 8008468:	4293      	cmp	r3, r2
 800846a:	f000 8258 	beq.w	800891e <HAL_TIM_ConfigClockSource+0x66e>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a52      	ldr	r2, [pc, #328]	; (80085bc <HAL_TIM_ConfigClockSource+0x30c>)
 8008474:	4293      	cmp	r3, r2
 8008476:	f000 8252 	beq.w	800891e <HAL_TIM_ConfigClockSource+0x66e>
 800847a:	f241 5158 	movw	r1, #5464	; 0x1558
 800847e:	4841      	ldr	r0, [pc, #260]	; (8008584 <HAL_TIM_ConfigClockSource+0x2d4>)
 8008480:	f7fa f907 	bl	8002692 <assert_failed>
      break;
 8008484:	e24b      	b.n	800891e <HAL_TIM_ConfigClockSource+0x66e>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a40      	ldr	r2, [pc, #256]	; (800858c <HAL_TIM_ConfigClockSource+0x2dc>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d027      	beq.n	80084e0 <HAL_TIM_ConfigClockSource+0x230>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008498:	d022      	beq.n	80084e0 <HAL_TIM_ConfigClockSource+0x230>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4a3c      	ldr	r2, [pc, #240]	; (8008590 <HAL_TIM_ConfigClockSource+0x2e0>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d01d      	beq.n	80084e0 <HAL_TIM_ConfigClockSource+0x230>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a3a      	ldr	r2, [pc, #232]	; (8008594 <HAL_TIM_ConfigClockSource+0x2e4>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d018      	beq.n	80084e0 <HAL_TIM_ConfigClockSource+0x230>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a39      	ldr	r2, [pc, #228]	; (8008598 <HAL_TIM_ConfigClockSource+0x2e8>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d013      	beq.n	80084e0 <HAL_TIM_ConfigClockSource+0x230>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a39      	ldr	r2, [pc, #228]	; (80085a4 <HAL_TIM_ConfigClockSource+0x2f4>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d00e      	beq.n	80084e0 <HAL_TIM_ConfigClockSource+0x230>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4a38      	ldr	r2, [pc, #224]	; (80085a8 <HAL_TIM_ConfigClockSource+0x2f8>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d009      	beq.n	80084e0 <HAL_TIM_ConfigClockSource+0x230>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a38      	ldr	r2, [pc, #224]	; (80085b4 <HAL_TIM_ConfigClockSource+0x304>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d004      	beq.n	80084e0 <HAL_TIM_ConfigClockSource+0x230>
 80084d6:	f241 515f 	movw	r1, #5471	; 0x155f
 80084da:	482a      	ldr	r0, [pc, #168]	; (8008584 <HAL_TIM_ConfigClockSource+0x2d4>)
 80084dc:	f7fa f8d9 	bl	8002692 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	689b      	ldr	r3, [r3, #8]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d013      	beq.n	8008510 <HAL_TIM_ConfigClockSource+0x260>
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	689b      	ldr	r3, [r3, #8]
 80084ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084f0:	d00e      	beq.n	8008510 <HAL_TIM_ConfigClockSource+0x260>
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084fa:	d009      	beq.n	8008510 <HAL_TIM_ConfigClockSource+0x260>
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	689b      	ldr	r3, [r3, #8]
 8008500:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008504:	d004      	beq.n	8008510 <HAL_TIM_ConfigClockSource+0x260>
 8008506:	f241 5162 	movw	r1, #5474	; 0x1562
 800850a:	481e      	ldr	r0, [pc, #120]	; (8008584 <HAL_TIM_ConfigClockSource+0x2d4>)
 800850c:	f7fa f8c1 	bl	8002692 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008518:	d014      	beq.n	8008544 <HAL_TIM_ConfigClockSource+0x294>
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d010      	beq.n	8008544 <HAL_TIM_ConfigClockSource+0x294>
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	685b      	ldr	r3, [r3, #4]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d00c      	beq.n	8008544 <HAL_TIM_ConfigClockSource+0x294>
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	2b02      	cmp	r3, #2
 8008530:	d008      	beq.n	8008544 <HAL_TIM_ConfigClockSource+0x294>
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	2b0a      	cmp	r3, #10
 8008538:	d004      	beq.n	8008544 <HAL_TIM_ConfigClockSource+0x294>
 800853a:	f241 5163 	movw	r1, #5475	; 0x1563
 800853e:	4811      	ldr	r0, [pc, #68]	; (8008584 <HAL_TIM_ConfigClockSource+0x2d4>)
 8008540:	f7fa f8a7 	bl	8002692 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	68db      	ldr	r3, [r3, #12]
 8008548:	2b0f      	cmp	r3, #15
 800854a:	d904      	bls.n	8008556 <HAL_TIM_ConfigClockSource+0x2a6>
 800854c:	f241 5164 	movw	r1, #5476	; 0x1564
 8008550:	480c      	ldr	r0, [pc, #48]	; (8008584 <HAL_TIM_ConfigClockSource+0x2d4>)
 8008552:	f7fa f89e 	bl	8002692 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6818      	ldr	r0, [r3, #0]
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	6899      	ldr	r1, [r3, #8]
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	685a      	ldr	r2, [r3, #4]
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	68db      	ldr	r3, [r3, #12]
 8008566:	f000 fe29 	bl	80091bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	689b      	ldr	r3, [r3, #8]
 8008570:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008578:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	68ba      	ldr	r2, [r7, #8]
 8008580:	609a      	str	r2, [r3, #8]
      break;
 8008582:	e1cd      	b.n	8008920 <HAL_TIM_ConfigClockSource+0x670>
 8008584:	080163e8 	.word	0x080163e8
 8008588:	fffeff88 	.word	0xfffeff88
 800858c:	40010000 	.word	0x40010000
 8008590:	40000400 	.word	0x40000400
 8008594:	40000800 	.word	0x40000800
 8008598:	40000c00 	.word	0x40000c00
 800859c:	40001000 	.word	0x40001000
 80085a0:	40001400 	.word	0x40001400
 80085a4:	40010400 	.word	0x40010400
 80085a8:	40014000 	.word	0x40014000
 80085ac:	40014400 	.word	0x40014400
 80085b0:	40014800 	.word	0x40014800
 80085b4:	40001800 	.word	0x40001800
 80085b8:	40001c00 	.word	0x40001c00
 80085bc:	40002000 	.word	0x40002000
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a8d      	ldr	r2, [pc, #564]	; (80087fc <HAL_TIM_ConfigClockSource+0x54c>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d01d      	beq.n	8008606 <HAL_TIM_ConfigClockSource+0x356>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085d2:	d018      	beq.n	8008606 <HAL_TIM_ConfigClockSource+0x356>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a89      	ldr	r2, [pc, #548]	; (8008800 <HAL_TIM_ConfigClockSource+0x550>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d013      	beq.n	8008606 <HAL_TIM_ConfigClockSource+0x356>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a88      	ldr	r2, [pc, #544]	; (8008804 <HAL_TIM_ConfigClockSource+0x554>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d00e      	beq.n	8008606 <HAL_TIM_ConfigClockSource+0x356>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a86      	ldr	r2, [pc, #536]	; (8008808 <HAL_TIM_ConfigClockSource+0x558>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d009      	beq.n	8008606 <HAL_TIM_ConfigClockSource+0x356>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a85      	ldr	r2, [pc, #532]	; (800880c <HAL_TIM_ConfigClockSource+0x55c>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d004      	beq.n	8008606 <HAL_TIM_ConfigClockSource+0x356>
 80085fc:	f241 5177 	movw	r1, #5495	; 0x1577
 8008600:	4883      	ldr	r0, [pc, #524]	; (8008810 <HAL_TIM_ConfigClockSource+0x560>)
 8008602:	f7fa f846 	bl	8002692 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	689b      	ldr	r3, [r3, #8]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d013      	beq.n	8008636 <HAL_TIM_ConfigClockSource+0x386>
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	689b      	ldr	r3, [r3, #8]
 8008612:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008616:	d00e      	beq.n	8008636 <HAL_TIM_ConfigClockSource+0x386>
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	689b      	ldr	r3, [r3, #8]
 800861c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008620:	d009      	beq.n	8008636 <HAL_TIM_ConfigClockSource+0x386>
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	689b      	ldr	r3, [r3, #8]
 8008626:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800862a:	d004      	beq.n	8008636 <HAL_TIM_ConfigClockSource+0x386>
 800862c:	f241 517a 	movw	r1, #5498	; 0x157a
 8008630:	4877      	ldr	r0, [pc, #476]	; (8008810 <HAL_TIM_ConfigClockSource+0x560>)
 8008632:	f7fa f82e 	bl	8002692 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800863e:	d014      	beq.n	800866a <HAL_TIM_ConfigClockSource+0x3ba>
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	685b      	ldr	r3, [r3, #4]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d010      	beq.n	800866a <HAL_TIM_ConfigClockSource+0x3ba>
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d00c      	beq.n	800866a <HAL_TIM_ConfigClockSource+0x3ba>
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	2b02      	cmp	r3, #2
 8008656:	d008      	beq.n	800866a <HAL_TIM_ConfigClockSource+0x3ba>
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	2b0a      	cmp	r3, #10
 800865e:	d004      	beq.n	800866a <HAL_TIM_ConfigClockSource+0x3ba>
 8008660:	f241 517b 	movw	r1, #5499	; 0x157b
 8008664:	486a      	ldr	r0, [pc, #424]	; (8008810 <HAL_TIM_ConfigClockSource+0x560>)
 8008666:	f7fa f814 	bl	8002692 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	68db      	ldr	r3, [r3, #12]
 800866e:	2b0f      	cmp	r3, #15
 8008670:	d904      	bls.n	800867c <HAL_TIM_ConfigClockSource+0x3cc>
 8008672:	f241 517c 	movw	r1, #5500	; 0x157c
 8008676:	4866      	ldr	r0, [pc, #408]	; (8008810 <HAL_TIM_ConfigClockSource+0x560>)
 8008678:	f7fa f80b 	bl	8002692 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6818      	ldr	r0, [r3, #0]
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	6899      	ldr	r1, [r3, #8]
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	685a      	ldr	r2, [r3, #4]
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	68db      	ldr	r3, [r3, #12]
 800868c:	f000 fd96 	bl	80091bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	689a      	ldr	r2, [r3, #8]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800869e:	609a      	str	r2, [r3, #8]
      break;
 80086a0:	e13e      	b.n	8008920 <HAL_TIM_ConfigClockSource+0x670>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4a55      	ldr	r2, [pc, #340]	; (80087fc <HAL_TIM_ConfigClockSource+0x54c>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d01d      	beq.n	80086e8 <HAL_TIM_ConfigClockSource+0x438>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086b4:	d018      	beq.n	80086e8 <HAL_TIM_ConfigClockSource+0x438>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4a51      	ldr	r2, [pc, #324]	; (8008800 <HAL_TIM_ConfigClockSource+0x550>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d013      	beq.n	80086e8 <HAL_TIM_ConfigClockSource+0x438>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4a4f      	ldr	r2, [pc, #316]	; (8008804 <HAL_TIM_ConfigClockSource+0x554>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d00e      	beq.n	80086e8 <HAL_TIM_ConfigClockSource+0x438>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4a4e      	ldr	r2, [pc, #312]	; (8008808 <HAL_TIM_ConfigClockSource+0x558>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d009      	beq.n	80086e8 <HAL_TIM_ConfigClockSource+0x438>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4a4c      	ldr	r2, [pc, #304]	; (800880c <HAL_TIM_ConfigClockSource+0x55c>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d004      	beq.n	80086e8 <HAL_TIM_ConfigClockSource+0x438>
 80086de:	f241 518b 	movw	r1, #5515	; 0x158b
 80086e2:	484b      	ldr	r0, [pc, #300]	; (8008810 <HAL_TIM_ConfigClockSource+0x560>)
 80086e4:	f7f9 ffd5 	bl	8002692 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086f0:	d014      	beq.n	800871c <HAL_TIM_ConfigClockSource+0x46c>
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d010      	beq.n	800871c <HAL_TIM_ConfigClockSource+0x46c>
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d00c      	beq.n	800871c <HAL_TIM_ConfigClockSource+0x46c>
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	2b02      	cmp	r3, #2
 8008708:	d008      	beq.n	800871c <HAL_TIM_ConfigClockSource+0x46c>
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	685b      	ldr	r3, [r3, #4]
 800870e:	2b0a      	cmp	r3, #10
 8008710:	d004      	beq.n	800871c <HAL_TIM_ConfigClockSource+0x46c>
 8008712:	f241 518e 	movw	r1, #5518	; 0x158e
 8008716:	483e      	ldr	r0, [pc, #248]	; (8008810 <HAL_TIM_ConfigClockSource+0x560>)
 8008718:	f7f9 ffbb 	bl	8002692 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	68db      	ldr	r3, [r3, #12]
 8008720:	2b0f      	cmp	r3, #15
 8008722:	d904      	bls.n	800872e <HAL_TIM_ConfigClockSource+0x47e>
 8008724:	f241 518f 	movw	r1, #5519	; 0x158f
 8008728:	4839      	ldr	r0, [pc, #228]	; (8008810 <HAL_TIM_ConfigClockSource+0x560>)
 800872a:	f7f9 ffb2 	bl	8002692 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6818      	ldr	r0, [r3, #0]
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	6859      	ldr	r1, [r3, #4]
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	68db      	ldr	r3, [r3, #12]
 800873a:	461a      	mov	r2, r3
 800873c:	f000 fcc4 	bl	80090c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	2150      	movs	r1, #80	; 0x50
 8008746:	4618      	mov	r0, r3
 8008748:	f000 fd1d 	bl	8009186 <TIM_ITRx_SetConfig>
      break;
 800874c:	e0e8      	b.n	8008920 <HAL_TIM_ConfigClockSource+0x670>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	4a2a      	ldr	r2, [pc, #168]	; (80087fc <HAL_TIM_ConfigClockSource+0x54c>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d01d      	beq.n	8008794 <HAL_TIM_ConfigClockSource+0x4e4>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008760:	d018      	beq.n	8008794 <HAL_TIM_ConfigClockSource+0x4e4>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4a26      	ldr	r2, [pc, #152]	; (8008800 <HAL_TIM_ConfigClockSource+0x550>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d013      	beq.n	8008794 <HAL_TIM_ConfigClockSource+0x4e4>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a24      	ldr	r2, [pc, #144]	; (8008804 <HAL_TIM_ConfigClockSource+0x554>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d00e      	beq.n	8008794 <HAL_TIM_ConfigClockSource+0x4e4>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a23      	ldr	r2, [pc, #140]	; (8008808 <HAL_TIM_ConfigClockSource+0x558>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d009      	beq.n	8008794 <HAL_TIM_ConfigClockSource+0x4e4>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a21      	ldr	r2, [pc, #132]	; (800880c <HAL_TIM_ConfigClockSource+0x55c>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d004      	beq.n	8008794 <HAL_TIM_ConfigClockSource+0x4e4>
 800878a:	f241 519b 	movw	r1, #5531	; 0x159b
 800878e:	4820      	ldr	r0, [pc, #128]	; (8008810 <HAL_TIM_ConfigClockSource+0x560>)
 8008790:	f7f9 ff7f 	bl	8002692 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800879c:	d014      	beq.n	80087c8 <HAL_TIM_ConfigClockSource+0x518>
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	685b      	ldr	r3, [r3, #4]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d010      	beq.n	80087c8 <HAL_TIM_ConfigClockSource+0x518>
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	685b      	ldr	r3, [r3, #4]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d00c      	beq.n	80087c8 <HAL_TIM_ConfigClockSource+0x518>
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	2b02      	cmp	r3, #2
 80087b4:	d008      	beq.n	80087c8 <HAL_TIM_ConfigClockSource+0x518>
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	2b0a      	cmp	r3, #10
 80087bc:	d004      	beq.n	80087c8 <HAL_TIM_ConfigClockSource+0x518>
 80087be:	f241 519e 	movw	r1, #5534	; 0x159e
 80087c2:	4813      	ldr	r0, [pc, #76]	; (8008810 <HAL_TIM_ConfigClockSource+0x560>)
 80087c4:	f7f9 ff65 	bl	8002692 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	68db      	ldr	r3, [r3, #12]
 80087cc:	2b0f      	cmp	r3, #15
 80087ce:	d904      	bls.n	80087da <HAL_TIM_ConfigClockSource+0x52a>
 80087d0:	f241 519f 	movw	r1, #5535	; 0x159f
 80087d4:	480e      	ldr	r0, [pc, #56]	; (8008810 <HAL_TIM_ConfigClockSource+0x560>)
 80087d6:	f7f9 ff5c 	bl	8002692 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6818      	ldr	r0, [r3, #0]
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	6859      	ldr	r1, [r3, #4]
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	68db      	ldr	r3, [r3, #12]
 80087e6:	461a      	mov	r2, r3
 80087e8:	f000 fc9d 	bl	8009126 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	2160      	movs	r1, #96	; 0x60
 80087f2:	4618      	mov	r0, r3
 80087f4:	f000 fcc7 	bl	8009186 <TIM_ITRx_SetConfig>
      break;
 80087f8:	e092      	b.n	8008920 <HAL_TIM_ConfigClockSource+0x670>
 80087fa:	bf00      	nop
 80087fc:	40010000 	.word	0x40010000
 8008800:	40000400 	.word	0x40000400
 8008804:	40000800 	.word	0x40000800
 8008808:	40000c00 	.word	0x40000c00
 800880c:	40010400 	.word	0x40010400
 8008810:	080163e8 	.word	0x080163e8
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4a48      	ldr	r2, [pc, #288]	; (800893c <HAL_TIM_ConfigClockSource+0x68c>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d01d      	beq.n	800885a <HAL_TIM_ConfigClockSource+0x5aa>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008826:	d018      	beq.n	800885a <HAL_TIM_ConfigClockSource+0x5aa>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4a44      	ldr	r2, [pc, #272]	; (8008940 <HAL_TIM_ConfigClockSource+0x690>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d013      	beq.n	800885a <HAL_TIM_ConfigClockSource+0x5aa>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4a43      	ldr	r2, [pc, #268]	; (8008944 <HAL_TIM_ConfigClockSource+0x694>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d00e      	beq.n	800885a <HAL_TIM_ConfigClockSource+0x5aa>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4a41      	ldr	r2, [pc, #260]	; (8008948 <HAL_TIM_ConfigClockSource+0x698>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d009      	beq.n	800885a <HAL_TIM_ConfigClockSource+0x5aa>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4a40      	ldr	r2, [pc, #256]	; (800894c <HAL_TIM_ConfigClockSource+0x69c>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d004      	beq.n	800885a <HAL_TIM_ConfigClockSource+0x5aa>
 8008850:	f241 51ab 	movw	r1, #5547	; 0x15ab
 8008854:	483e      	ldr	r0, [pc, #248]	; (8008950 <HAL_TIM_ConfigClockSource+0x6a0>)
 8008856:	f7f9 ff1c 	bl	8002692 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008862:	d014      	beq.n	800888e <HAL_TIM_ConfigClockSource+0x5de>
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	685b      	ldr	r3, [r3, #4]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d010      	beq.n	800888e <HAL_TIM_ConfigClockSource+0x5de>
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	685b      	ldr	r3, [r3, #4]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d00c      	beq.n	800888e <HAL_TIM_ConfigClockSource+0x5de>
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	2b02      	cmp	r3, #2
 800887a:	d008      	beq.n	800888e <HAL_TIM_ConfigClockSource+0x5de>
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	685b      	ldr	r3, [r3, #4]
 8008880:	2b0a      	cmp	r3, #10
 8008882:	d004      	beq.n	800888e <HAL_TIM_ConfigClockSource+0x5de>
 8008884:	f241 51ae 	movw	r1, #5550	; 0x15ae
 8008888:	4831      	ldr	r0, [pc, #196]	; (8008950 <HAL_TIM_ConfigClockSource+0x6a0>)
 800888a:	f7f9 ff02 	bl	8002692 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	68db      	ldr	r3, [r3, #12]
 8008892:	2b0f      	cmp	r3, #15
 8008894:	d904      	bls.n	80088a0 <HAL_TIM_ConfigClockSource+0x5f0>
 8008896:	f241 51af 	movw	r1, #5551	; 0x15af
 800889a:	482d      	ldr	r0, [pc, #180]	; (8008950 <HAL_TIM_ConfigClockSource+0x6a0>)
 800889c:	f7f9 fef9 	bl	8002692 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6818      	ldr	r0, [r3, #0]
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	6859      	ldr	r1, [r3, #4]
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	68db      	ldr	r3, [r3, #12]
 80088ac:	461a      	mov	r2, r3
 80088ae:	f000 fc0b 	bl	80090c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	2140      	movs	r1, #64	; 0x40
 80088b8:	4618      	mov	r0, r3
 80088ba:	f000 fc64 	bl	8009186 <TIM_ITRx_SetConfig>
      break;
 80088be:	e02f      	b.n	8008920 <HAL_TIM_ConfigClockSource+0x670>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a1d      	ldr	r2, [pc, #116]	; (800893c <HAL_TIM_ConfigClockSource+0x68c>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d01d      	beq.n	8008906 <HAL_TIM_ConfigClockSource+0x656>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088d2:	d018      	beq.n	8008906 <HAL_TIM_ConfigClockSource+0x656>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4a19      	ldr	r2, [pc, #100]	; (8008940 <HAL_TIM_ConfigClockSource+0x690>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d013      	beq.n	8008906 <HAL_TIM_ConfigClockSource+0x656>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4a18      	ldr	r2, [pc, #96]	; (8008944 <HAL_TIM_ConfigClockSource+0x694>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d00e      	beq.n	8008906 <HAL_TIM_ConfigClockSource+0x656>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a16      	ldr	r2, [pc, #88]	; (8008948 <HAL_TIM_ConfigClockSource+0x698>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d009      	beq.n	8008906 <HAL_TIM_ConfigClockSource+0x656>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4a15      	ldr	r2, [pc, #84]	; (800894c <HAL_TIM_ConfigClockSource+0x69c>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d004      	beq.n	8008906 <HAL_TIM_ConfigClockSource+0x656>
 80088fc:	f241 51be 	movw	r1, #5566	; 0x15be
 8008900:	4813      	ldr	r0, [pc, #76]	; (8008950 <HAL_TIM_ConfigClockSource+0x6a0>)
 8008902:	f7f9 fec6 	bl	8002692 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681a      	ldr	r2, [r3, #0]
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4619      	mov	r1, r3
 8008910:	4610      	mov	r0, r2
 8008912:	f000 fc38 	bl	8009186 <TIM_ITRx_SetConfig>
      break;
 8008916:	e003      	b.n	8008920 <HAL_TIM_ConfigClockSource+0x670>
    }

    default:
      status = HAL_ERROR;
 8008918:	2301      	movs	r3, #1
 800891a:	73fb      	strb	r3, [r7, #15]
      break;
 800891c:	e000      	b.n	8008920 <HAL_TIM_ConfigClockSource+0x670>
      break;
 800891e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2201      	movs	r2, #1
 8008924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2200      	movs	r2, #0
 800892c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008930:	7bfb      	ldrb	r3, [r7, #15]
}
 8008932:	4618      	mov	r0, r3
 8008934:	3710      	adds	r7, #16
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}
 800893a:	bf00      	nop
 800893c:	40010000 	.word	0x40010000
 8008940:	40000400 	.word	0x40000400
 8008944:	40000800 	.word	0x40000800
 8008948:	40000c00 	.word	0x40000c00
 800894c:	40010400 	.word	0x40010400
 8008950:	080163e8 	.word	0x080163e8

08008954 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008954:	b480      	push	{r7}
 8008956:	b083      	sub	sp, #12
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800895c:	bf00      	nop
 800895e:	370c      	adds	r7, #12
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr

08008968 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008968:	b480      	push	{r7}
 800896a:	b083      	sub	sp, #12
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008970:	bf00      	nop
 8008972:	370c      	adds	r7, #12
 8008974:	46bd      	mov	sp, r7
 8008976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897a:	4770      	bx	lr

0800897c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800897c:	b480      	push	{r7}
 800897e:	b083      	sub	sp, #12
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008984:	bf00      	nop
 8008986:	370c      	adds	r7, #12
 8008988:	46bd      	mov	sp, r7
 800898a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898e:	4770      	bx	lr

08008990 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008990:	b480      	push	{r7}
 8008992:	b083      	sub	sp, #12
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008998:	bf00      	nop
 800899a:	370c      	adds	r7, #12
 800899c:	46bd      	mov	sp, r7
 800899e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a2:	4770      	bx	lr

080089a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80089a4:	b480      	push	{r7}
 80089a6:	b083      	sub	sp, #12
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80089ac:	bf00      	nop
 80089ae:	370c      	adds	r7, #12
 80089b0:	46bd      	mov	sp, r7
 80089b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b6:	4770      	bx	lr

080089b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b085      	sub	sp, #20
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	4a40      	ldr	r2, [pc, #256]	; (8008acc <TIM_Base_SetConfig+0x114>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d013      	beq.n	80089f8 <TIM_Base_SetConfig+0x40>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089d6:	d00f      	beq.n	80089f8 <TIM_Base_SetConfig+0x40>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	4a3d      	ldr	r2, [pc, #244]	; (8008ad0 <TIM_Base_SetConfig+0x118>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d00b      	beq.n	80089f8 <TIM_Base_SetConfig+0x40>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	4a3c      	ldr	r2, [pc, #240]	; (8008ad4 <TIM_Base_SetConfig+0x11c>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d007      	beq.n	80089f8 <TIM_Base_SetConfig+0x40>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	4a3b      	ldr	r2, [pc, #236]	; (8008ad8 <TIM_Base_SetConfig+0x120>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d003      	beq.n	80089f8 <TIM_Base_SetConfig+0x40>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	4a3a      	ldr	r2, [pc, #232]	; (8008adc <TIM_Base_SetConfig+0x124>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d108      	bne.n	8008a0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	68fa      	ldr	r2, [r7, #12]
 8008a06:	4313      	orrs	r3, r2
 8008a08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	4a2f      	ldr	r2, [pc, #188]	; (8008acc <TIM_Base_SetConfig+0x114>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d02b      	beq.n	8008a6a <TIM_Base_SetConfig+0xb2>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a18:	d027      	beq.n	8008a6a <TIM_Base_SetConfig+0xb2>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	4a2c      	ldr	r2, [pc, #176]	; (8008ad0 <TIM_Base_SetConfig+0x118>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d023      	beq.n	8008a6a <TIM_Base_SetConfig+0xb2>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	4a2b      	ldr	r2, [pc, #172]	; (8008ad4 <TIM_Base_SetConfig+0x11c>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d01f      	beq.n	8008a6a <TIM_Base_SetConfig+0xb2>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	4a2a      	ldr	r2, [pc, #168]	; (8008ad8 <TIM_Base_SetConfig+0x120>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d01b      	beq.n	8008a6a <TIM_Base_SetConfig+0xb2>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	4a29      	ldr	r2, [pc, #164]	; (8008adc <TIM_Base_SetConfig+0x124>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d017      	beq.n	8008a6a <TIM_Base_SetConfig+0xb2>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	4a28      	ldr	r2, [pc, #160]	; (8008ae0 <TIM_Base_SetConfig+0x128>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d013      	beq.n	8008a6a <TIM_Base_SetConfig+0xb2>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	4a27      	ldr	r2, [pc, #156]	; (8008ae4 <TIM_Base_SetConfig+0x12c>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d00f      	beq.n	8008a6a <TIM_Base_SetConfig+0xb2>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	4a26      	ldr	r2, [pc, #152]	; (8008ae8 <TIM_Base_SetConfig+0x130>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d00b      	beq.n	8008a6a <TIM_Base_SetConfig+0xb2>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	4a25      	ldr	r2, [pc, #148]	; (8008aec <TIM_Base_SetConfig+0x134>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d007      	beq.n	8008a6a <TIM_Base_SetConfig+0xb2>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	4a24      	ldr	r2, [pc, #144]	; (8008af0 <TIM_Base_SetConfig+0x138>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d003      	beq.n	8008a6a <TIM_Base_SetConfig+0xb2>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	4a23      	ldr	r2, [pc, #140]	; (8008af4 <TIM_Base_SetConfig+0x13c>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d108      	bne.n	8008a7c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	68db      	ldr	r3, [r3, #12]
 8008a76:	68fa      	ldr	r2, [r7, #12]
 8008a78:	4313      	orrs	r3, r2
 8008a7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	695b      	ldr	r3, [r3, #20]
 8008a86:	4313      	orrs	r3, r2
 8008a88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	68fa      	ldr	r2, [r7, #12]
 8008a8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	689a      	ldr	r2, [r3, #8]
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	681a      	ldr	r2, [r3, #0]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	4a0a      	ldr	r2, [pc, #40]	; (8008acc <TIM_Base_SetConfig+0x114>)
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d003      	beq.n	8008ab0 <TIM_Base_SetConfig+0xf8>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	4a0c      	ldr	r2, [pc, #48]	; (8008adc <TIM_Base_SetConfig+0x124>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d103      	bne.n	8008ab8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	691a      	ldr	r2, [r3, #16]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2201      	movs	r2, #1
 8008abc:	615a      	str	r2, [r3, #20]
}
 8008abe:	bf00      	nop
 8008ac0:	3714      	adds	r7, #20
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac8:	4770      	bx	lr
 8008aca:	bf00      	nop
 8008acc:	40010000 	.word	0x40010000
 8008ad0:	40000400 	.word	0x40000400
 8008ad4:	40000800 	.word	0x40000800
 8008ad8:	40000c00 	.word	0x40000c00
 8008adc:	40010400 	.word	0x40010400
 8008ae0:	40014000 	.word	0x40014000
 8008ae4:	40014400 	.word	0x40014400
 8008ae8:	40014800 	.word	0x40014800
 8008aec:	40001800 	.word	0x40001800
 8008af0:	40001c00 	.word	0x40001c00
 8008af4:	40002000 	.word	0x40002000

08008af8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b086      	sub	sp, #24
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
 8008b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6a1b      	ldr	r3, [r3, #32]
 8008b06:	f023 0201 	bic.w	r2, r3, #1
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6a1b      	ldr	r3, [r3, #32]
 8008b12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	699b      	ldr	r3, [r3, #24]
 8008b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008b20:	68fa      	ldr	r2, [r7, #12]
 8008b22:	4b3f      	ldr	r3, [pc, #252]	; (8008c20 <TIM_OC1_SetConfig+0x128>)
 8008b24:	4013      	ands	r3, r2
 8008b26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f023 0303 	bic.w	r3, r3, #3
 8008b2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	68fa      	ldr	r2, [r7, #12]
 8008b36:	4313      	orrs	r3, r2
 8008b38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	f023 0302 	bic.w	r3, r3, #2
 8008b40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	689b      	ldr	r3, [r3, #8]
 8008b46:	697a      	ldr	r2, [r7, #20]
 8008b48:	4313      	orrs	r3, r2
 8008b4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	4a35      	ldr	r2, [pc, #212]	; (8008c24 <TIM_OC1_SetConfig+0x12c>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d003      	beq.n	8008b5c <TIM_OC1_SetConfig+0x64>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	4a34      	ldr	r2, [pc, #208]	; (8008c28 <TIM_OC1_SetConfig+0x130>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d119      	bne.n	8008b90 <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	68db      	ldr	r3, [r3, #12]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d008      	beq.n	8008b76 <TIM_OC1_SetConfig+0x7e>
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	68db      	ldr	r3, [r3, #12]
 8008b68:	2b08      	cmp	r3, #8
 8008b6a:	d004      	beq.n	8008b76 <TIM_OC1_SetConfig+0x7e>
 8008b6c:	f641 3167 	movw	r1, #7015	; 0x1b67
 8008b70:	482e      	ldr	r0, [pc, #184]	; (8008c2c <TIM_OC1_SetConfig+0x134>)
 8008b72:	f7f9 fd8e 	bl	8002692 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	f023 0308 	bic.w	r3, r3, #8
 8008b7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	68db      	ldr	r3, [r3, #12]
 8008b82:	697a      	ldr	r2, [r7, #20]
 8008b84:	4313      	orrs	r3, r2
 8008b86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	f023 0304 	bic.w	r3, r3, #4
 8008b8e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	4a24      	ldr	r2, [pc, #144]	; (8008c24 <TIM_OC1_SetConfig+0x12c>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d003      	beq.n	8008ba0 <TIM_OC1_SetConfig+0xa8>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	4a23      	ldr	r2, [pc, #140]	; (8008c28 <TIM_OC1_SetConfig+0x130>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d12d      	bne.n	8008bfc <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	699b      	ldr	r3, [r3, #24]
 8008ba4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ba8:	d008      	beq.n	8008bbc <TIM_OC1_SetConfig+0xc4>
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	699b      	ldr	r3, [r3, #24]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d004      	beq.n	8008bbc <TIM_OC1_SetConfig+0xc4>
 8008bb2:	f641 3174 	movw	r1, #7028	; 0x1b74
 8008bb6:	481d      	ldr	r0, [pc, #116]	; (8008c2c <TIM_OC1_SetConfig+0x134>)
 8008bb8:	f7f9 fd6b 	bl	8002692 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	695b      	ldr	r3, [r3, #20]
 8008bc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bc4:	d008      	beq.n	8008bd8 <TIM_OC1_SetConfig+0xe0>
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	695b      	ldr	r3, [r3, #20]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d004      	beq.n	8008bd8 <TIM_OC1_SetConfig+0xe0>
 8008bce:	f641 3175 	movw	r1, #7029	; 0x1b75
 8008bd2:	4816      	ldr	r0, [pc, #88]	; (8008c2c <TIM_OC1_SetConfig+0x134>)
 8008bd4:	f7f9 fd5d 	bl	8002692 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008bde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008be6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	695b      	ldr	r3, [r3, #20]
 8008bec:	693a      	ldr	r2, [r7, #16]
 8008bee:	4313      	orrs	r3, r2
 8008bf0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	699b      	ldr	r3, [r3, #24]
 8008bf6:	693a      	ldr	r2, [r7, #16]
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	693a      	ldr	r2, [r7, #16]
 8008c00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	68fa      	ldr	r2, [r7, #12]
 8008c06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	685a      	ldr	r2, [r3, #4]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	697a      	ldr	r2, [r7, #20]
 8008c14:	621a      	str	r2, [r3, #32]
}
 8008c16:	bf00      	nop
 8008c18:	3718      	adds	r7, #24
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}
 8008c1e:	bf00      	nop
 8008c20:	fffeff8f 	.word	0xfffeff8f
 8008c24:	40010000 	.word	0x40010000
 8008c28:	40010400 	.word	0x40010400
 8008c2c:	080163e8 	.word	0x080163e8

08008c30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b086      	sub	sp, #24
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6a1b      	ldr	r3, [r3, #32]
 8008c3e:	f023 0210 	bic.w	r2, r3, #16
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6a1b      	ldr	r3, [r3, #32]
 8008c4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	699b      	ldr	r3, [r3, #24]
 8008c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008c58:	68fa      	ldr	r2, [r7, #12]
 8008c5a:	4b41      	ldr	r3, [pc, #260]	; (8008d60 <TIM_OC2_SetConfig+0x130>)
 8008c5c:	4013      	ands	r3, r2
 8008c5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	021b      	lsls	r3, r3, #8
 8008c6e:	68fa      	ldr	r2, [r7, #12]
 8008c70:	4313      	orrs	r3, r2
 8008c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	f023 0320 	bic.w	r3, r3, #32
 8008c7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	689b      	ldr	r3, [r3, #8]
 8008c80:	011b      	lsls	r3, r3, #4
 8008c82:	697a      	ldr	r2, [r7, #20]
 8008c84:	4313      	orrs	r3, r2
 8008c86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	4a36      	ldr	r2, [pc, #216]	; (8008d64 <TIM_OC2_SetConfig+0x134>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d003      	beq.n	8008c98 <TIM_OC2_SetConfig+0x68>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	4a35      	ldr	r2, [pc, #212]	; (8008d68 <TIM_OC2_SetConfig+0x138>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d11a      	bne.n	8008cce <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	68db      	ldr	r3, [r3, #12]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d008      	beq.n	8008cb2 <TIM_OC2_SetConfig+0x82>
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	68db      	ldr	r3, [r3, #12]
 8008ca4:	2b08      	cmp	r3, #8
 8008ca6:	d004      	beq.n	8008cb2 <TIM_OC2_SetConfig+0x82>
 8008ca8:	f641 31b2 	movw	r1, #7090	; 0x1bb2
 8008cac:	482f      	ldr	r0, [pc, #188]	; (8008d6c <TIM_OC2_SetConfig+0x13c>)
 8008cae:	f7f9 fcf0 	bl	8002692 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008cb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	68db      	ldr	r3, [r3, #12]
 8008cbe:	011b      	lsls	r3, r3, #4
 8008cc0:	697a      	ldr	r2, [r7, #20]
 8008cc2:	4313      	orrs	r3, r2
 8008cc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ccc:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	4a24      	ldr	r2, [pc, #144]	; (8008d64 <TIM_OC2_SetConfig+0x134>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d003      	beq.n	8008cde <TIM_OC2_SetConfig+0xae>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	4a23      	ldr	r2, [pc, #140]	; (8008d68 <TIM_OC2_SetConfig+0x138>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d12f      	bne.n	8008d3e <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	699b      	ldr	r3, [r3, #24]
 8008ce2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ce6:	d008      	beq.n	8008cfa <TIM_OC2_SetConfig+0xca>
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	699b      	ldr	r3, [r3, #24]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d004      	beq.n	8008cfa <TIM_OC2_SetConfig+0xca>
 8008cf0:	f44f 51de 	mov.w	r1, #7104	; 0x1bc0
 8008cf4:	481d      	ldr	r0, [pc, #116]	; (8008d6c <TIM_OC2_SetConfig+0x13c>)
 8008cf6:	f7f9 fccc 	bl	8002692 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	695b      	ldr	r3, [r3, #20]
 8008cfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d02:	d008      	beq.n	8008d16 <TIM_OC2_SetConfig+0xe6>
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	695b      	ldr	r3, [r3, #20]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d004      	beq.n	8008d16 <TIM_OC2_SetConfig+0xe6>
 8008d0c:	f641 31c1 	movw	r1, #7105	; 0x1bc1
 8008d10:	4816      	ldr	r0, [pc, #88]	; (8008d6c <TIM_OC2_SetConfig+0x13c>)
 8008d12:	f7f9 fcbe 	bl	8002692 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008d1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008d24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	695b      	ldr	r3, [r3, #20]
 8008d2a:	009b      	lsls	r3, r3, #2
 8008d2c:	693a      	ldr	r2, [r7, #16]
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	699b      	ldr	r3, [r3, #24]
 8008d36:	009b      	lsls	r3, r3, #2
 8008d38:	693a      	ldr	r2, [r7, #16]
 8008d3a:	4313      	orrs	r3, r2
 8008d3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	693a      	ldr	r2, [r7, #16]
 8008d42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	68fa      	ldr	r2, [r7, #12]
 8008d48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	685a      	ldr	r2, [r3, #4]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	697a      	ldr	r2, [r7, #20]
 8008d56:	621a      	str	r2, [r3, #32]
}
 8008d58:	bf00      	nop
 8008d5a:	3718      	adds	r7, #24
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}
 8008d60:	feff8fff 	.word	0xfeff8fff
 8008d64:	40010000 	.word	0x40010000
 8008d68:	40010400 	.word	0x40010400
 8008d6c:	080163e8 	.word	0x080163e8

08008d70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b086      	sub	sp, #24
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
 8008d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6a1b      	ldr	r3, [r3, #32]
 8008d7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6a1b      	ldr	r3, [r3, #32]
 8008d8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	69db      	ldr	r3, [r3, #28]
 8008d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008d98:	68fa      	ldr	r2, [r7, #12]
 8008d9a:	4b41      	ldr	r3, [pc, #260]	; (8008ea0 <TIM_OC3_SetConfig+0x130>)
 8008d9c:	4013      	ands	r3, r2
 8008d9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	f023 0303 	bic.w	r3, r3, #3
 8008da6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	68fa      	ldr	r2, [r7, #12]
 8008dae:	4313      	orrs	r3, r2
 8008db0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008db8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	689b      	ldr	r3, [r3, #8]
 8008dbe:	021b      	lsls	r3, r3, #8
 8008dc0:	697a      	ldr	r2, [r7, #20]
 8008dc2:	4313      	orrs	r3, r2
 8008dc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	4a36      	ldr	r2, [pc, #216]	; (8008ea4 <TIM_OC3_SetConfig+0x134>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d003      	beq.n	8008dd6 <TIM_OC3_SetConfig+0x66>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	4a35      	ldr	r2, [pc, #212]	; (8008ea8 <TIM_OC3_SetConfig+0x138>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d11a      	bne.n	8008e0c <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	68db      	ldr	r3, [r3, #12]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d008      	beq.n	8008df0 <TIM_OC3_SetConfig+0x80>
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	68db      	ldr	r3, [r3, #12]
 8008de2:	2b08      	cmp	r3, #8
 8008de4:	d004      	beq.n	8008df0 <TIM_OC3_SetConfig+0x80>
 8008de6:	f641 31fd 	movw	r1, #7165	; 0x1bfd
 8008dea:	4830      	ldr	r0, [pc, #192]	; (8008eac <TIM_OC3_SetConfig+0x13c>)
 8008dec:	f7f9 fc51 	bl	8002692 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008df6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	68db      	ldr	r3, [r3, #12]
 8008dfc:	021b      	lsls	r3, r3, #8
 8008dfe:	697a      	ldr	r2, [r7, #20]
 8008e00:	4313      	orrs	r3, r2
 8008e02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008e0a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	4a25      	ldr	r2, [pc, #148]	; (8008ea4 <TIM_OC3_SetConfig+0x134>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d003      	beq.n	8008e1c <TIM_OC3_SetConfig+0xac>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	4a24      	ldr	r2, [pc, #144]	; (8008ea8 <TIM_OC3_SetConfig+0x138>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d12f      	bne.n	8008e7c <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	699b      	ldr	r3, [r3, #24]
 8008e20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e24:	d008      	beq.n	8008e38 <TIM_OC3_SetConfig+0xc8>
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	699b      	ldr	r3, [r3, #24]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d004      	beq.n	8008e38 <TIM_OC3_SetConfig+0xc8>
 8008e2e:	f641 410a 	movw	r1, #7178	; 0x1c0a
 8008e32:	481e      	ldr	r0, [pc, #120]	; (8008eac <TIM_OC3_SetConfig+0x13c>)
 8008e34:	f7f9 fc2d 	bl	8002692 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	695b      	ldr	r3, [r3, #20]
 8008e3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e40:	d008      	beq.n	8008e54 <TIM_OC3_SetConfig+0xe4>
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	695b      	ldr	r3, [r3, #20]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d004      	beq.n	8008e54 <TIM_OC3_SetConfig+0xe4>
 8008e4a:	f641 410b 	movw	r1, #7179	; 0x1c0b
 8008e4e:	4817      	ldr	r0, [pc, #92]	; (8008eac <TIM_OC3_SetConfig+0x13c>)
 8008e50:	f7f9 fc1f 	bl	8002692 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008e5c:	693b      	ldr	r3, [r7, #16]
 8008e5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008e62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	695b      	ldr	r3, [r3, #20]
 8008e68:	011b      	lsls	r3, r3, #4
 8008e6a:	693a      	ldr	r2, [r7, #16]
 8008e6c:	4313      	orrs	r3, r2
 8008e6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	699b      	ldr	r3, [r3, #24]
 8008e74:	011b      	lsls	r3, r3, #4
 8008e76:	693a      	ldr	r2, [r7, #16]
 8008e78:	4313      	orrs	r3, r2
 8008e7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	693a      	ldr	r2, [r7, #16]
 8008e80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	68fa      	ldr	r2, [r7, #12]
 8008e86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	685a      	ldr	r2, [r3, #4]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	697a      	ldr	r2, [r7, #20]
 8008e94:	621a      	str	r2, [r3, #32]
}
 8008e96:	bf00      	nop
 8008e98:	3718      	adds	r7, #24
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}
 8008e9e:	bf00      	nop
 8008ea0:	fffeff8f 	.word	0xfffeff8f
 8008ea4:	40010000 	.word	0x40010000
 8008ea8:	40010400 	.word	0x40010400
 8008eac:	080163e8 	.word	0x080163e8

08008eb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b086      	sub	sp, #24
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6a1b      	ldr	r3, [r3, #32]
 8008ebe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6a1b      	ldr	r3, [r3, #32]
 8008eca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	685b      	ldr	r3, [r3, #4]
 8008ed0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	69db      	ldr	r3, [r3, #28]
 8008ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008ed8:	68fa      	ldr	r2, [r7, #12]
 8008eda:	4b24      	ldr	r3, [pc, #144]	; (8008f6c <TIM_OC4_SetConfig+0xbc>)
 8008edc:	4013      	ands	r3, r2
 8008ede:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ee6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	021b      	lsls	r3, r3, #8
 8008eee:	68fa      	ldr	r2, [r7, #12]
 8008ef0:	4313      	orrs	r3, r2
 8008ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008efa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	689b      	ldr	r3, [r3, #8]
 8008f00:	031b      	lsls	r3, r3, #12
 8008f02:	693a      	ldr	r2, [r7, #16]
 8008f04:	4313      	orrs	r3, r2
 8008f06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	4a19      	ldr	r2, [pc, #100]	; (8008f70 <TIM_OC4_SetConfig+0xc0>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d003      	beq.n	8008f18 <TIM_OC4_SetConfig+0x68>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	4a18      	ldr	r2, [pc, #96]	; (8008f74 <TIM_OC4_SetConfig+0xc4>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d117      	bne.n	8008f48 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	695b      	ldr	r3, [r3, #20]
 8008f1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f20:	d008      	beq.n	8008f34 <TIM_OC4_SetConfig+0x84>
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	695b      	ldr	r3, [r3, #20]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d004      	beq.n	8008f34 <TIM_OC4_SetConfig+0x84>
 8008f2a:	f641 4149 	movw	r1, #7241	; 0x1c49
 8008f2e:	4812      	ldr	r0, [pc, #72]	; (8008f78 <TIM_OC4_SetConfig+0xc8>)
 8008f30:	f7f9 fbaf 	bl	8002692 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008f3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	695b      	ldr	r3, [r3, #20]
 8008f40:	019b      	lsls	r3, r3, #6
 8008f42:	697a      	ldr	r2, [r7, #20]
 8008f44:	4313      	orrs	r3, r2
 8008f46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	697a      	ldr	r2, [r7, #20]
 8008f4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	68fa      	ldr	r2, [r7, #12]
 8008f52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	685a      	ldr	r2, [r3, #4]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	693a      	ldr	r2, [r7, #16]
 8008f60:	621a      	str	r2, [r3, #32]
}
 8008f62:	bf00      	nop
 8008f64:	3718      	adds	r7, #24
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}
 8008f6a:	bf00      	nop
 8008f6c:	feff8fff 	.word	0xfeff8fff
 8008f70:	40010000 	.word	0x40010000
 8008f74:	40010400 	.word	0x40010400
 8008f78:	080163e8 	.word	0x080163e8

08008f7c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b087      	sub	sp, #28
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
 8008f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6a1b      	ldr	r3, [r3, #32]
 8008f8a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6a1b      	ldr	r3, [r3, #32]
 8008f96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	685b      	ldr	r3, [r3, #4]
 8008f9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008fa4:	68fa      	ldr	r2, [r7, #12]
 8008fa6:	4b1b      	ldr	r3, [pc, #108]	; (8009014 <TIM_OC5_SetConfig+0x98>)
 8008fa8:	4013      	ands	r3, r2
 8008faa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	68fa      	ldr	r2, [r7, #12]
 8008fb2:	4313      	orrs	r3, r2
 8008fb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008fbc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	689b      	ldr	r3, [r3, #8]
 8008fc2:	041b      	lsls	r3, r3, #16
 8008fc4:	693a      	ldr	r2, [r7, #16]
 8008fc6:	4313      	orrs	r3, r2
 8008fc8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	4a12      	ldr	r2, [pc, #72]	; (8009018 <TIM_OC5_SetConfig+0x9c>)
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	d003      	beq.n	8008fda <TIM_OC5_SetConfig+0x5e>
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	4a11      	ldr	r2, [pc, #68]	; (800901c <TIM_OC5_SetConfig+0xa0>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d109      	bne.n	8008fee <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008fe0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	695b      	ldr	r3, [r3, #20]
 8008fe6:	021b      	lsls	r3, r3, #8
 8008fe8:	697a      	ldr	r2, [r7, #20]
 8008fea:	4313      	orrs	r3, r2
 8008fec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	697a      	ldr	r2, [r7, #20]
 8008ff2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	68fa      	ldr	r2, [r7, #12]
 8008ff8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	685a      	ldr	r2, [r3, #4]
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	693a      	ldr	r2, [r7, #16]
 8009006:	621a      	str	r2, [r3, #32]
}
 8009008:	bf00      	nop
 800900a:	371c      	adds	r7, #28
 800900c:	46bd      	mov	sp, r7
 800900e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009012:	4770      	bx	lr
 8009014:	fffeff8f 	.word	0xfffeff8f
 8009018:	40010000 	.word	0x40010000
 800901c:	40010400 	.word	0x40010400

08009020 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009020:	b480      	push	{r7}
 8009022:	b087      	sub	sp, #28
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
 8009028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6a1b      	ldr	r3, [r3, #32]
 800902e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6a1b      	ldr	r3, [r3, #32]
 800903a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	685b      	ldr	r3, [r3, #4]
 8009040:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009048:	68fa      	ldr	r2, [r7, #12]
 800904a:	4b1c      	ldr	r3, [pc, #112]	; (80090bc <TIM_OC6_SetConfig+0x9c>)
 800904c:	4013      	ands	r3, r2
 800904e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	021b      	lsls	r3, r3, #8
 8009056:	68fa      	ldr	r2, [r7, #12]
 8009058:	4313      	orrs	r3, r2
 800905a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009062:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	689b      	ldr	r3, [r3, #8]
 8009068:	051b      	lsls	r3, r3, #20
 800906a:	693a      	ldr	r2, [r7, #16]
 800906c:	4313      	orrs	r3, r2
 800906e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	4a13      	ldr	r2, [pc, #76]	; (80090c0 <TIM_OC6_SetConfig+0xa0>)
 8009074:	4293      	cmp	r3, r2
 8009076:	d003      	beq.n	8009080 <TIM_OC6_SetConfig+0x60>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	4a12      	ldr	r2, [pc, #72]	; (80090c4 <TIM_OC6_SetConfig+0xa4>)
 800907c:	4293      	cmp	r3, r2
 800907e:	d109      	bne.n	8009094 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009086:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	695b      	ldr	r3, [r3, #20]
 800908c:	029b      	lsls	r3, r3, #10
 800908e:	697a      	ldr	r2, [r7, #20]
 8009090:	4313      	orrs	r3, r2
 8009092:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	697a      	ldr	r2, [r7, #20]
 8009098:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	68fa      	ldr	r2, [r7, #12]
 800909e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	685a      	ldr	r2, [r3, #4]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	693a      	ldr	r2, [r7, #16]
 80090ac:	621a      	str	r2, [r3, #32]
}
 80090ae:	bf00      	nop
 80090b0:	371c      	adds	r7, #28
 80090b2:	46bd      	mov	sp, r7
 80090b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b8:	4770      	bx	lr
 80090ba:	bf00      	nop
 80090bc:	feff8fff 	.word	0xfeff8fff
 80090c0:	40010000 	.word	0x40010000
 80090c4:	40010400 	.word	0x40010400

080090c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80090c8:	b480      	push	{r7}
 80090ca:	b087      	sub	sp, #28
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	60f8      	str	r0, [r7, #12]
 80090d0:	60b9      	str	r1, [r7, #8]
 80090d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	6a1b      	ldr	r3, [r3, #32]
 80090d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	6a1b      	ldr	r3, [r3, #32]
 80090de:	f023 0201 	bic.w	r2, r3, #1
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	699b      	ldr	r3, [r3, #24]
 80090ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80090ec:	693b      	ldr	r3, [r7, #16]
 80090ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80090f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	011b      	lsls	r3, r3, #4
 80090f8:	693a      	ldr	r2, [r7, #16]
 80090fa:	4313      	orrs	r3, r2
 80090fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	f023 030a 	bic.w	r3, r3, #10
 8009104:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009106:	697a      	ldr	r2, [r7, #20]
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	4313      	orrs	r3, r2
 800910c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	693a      	ldr	r2, [r7, #16]
 8009112:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	697a      	ldr	r2, [r7, #20]
 8009118:	621a      	str	r2, [r3, #32]
}
 800911a:	bf00      	nop
 800911c:	371c      	adds	r7, #28
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	4770      	bx	lr

08009126 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009126:	b480      	push	{r7}
 8009128:	b087      	sub	sp, #28
 800912a:	af00      	add	r7, sp, #0
 800912c:	60f8      	str	r0, [r7, #12]
 800912e:	60b9      	str	r1, [r7, #8]
 8009130:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	6a1b      	ldr	r3, [r3, #32]
 8009136:	f023 0210 	bic.w	r2, r3, #16
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	699b      	ldr	r3, [r3, #24]
 8009142:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	6a1b      	ldr	r3, [r3, #32]
 8009148:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009150:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	031b      	lsls	r3, r3, #12
 8009156:	697a      	ldr	r2, [r7, #20]
 8009158:	4313      	orrs	r3, r2
 800915a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009162:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	011b      	lsls	r3, r3, #4
 8009168:	693a      	ldr	r2, [r7, #16]
 800916a:	4313      	orrs	r3, r2
 800916c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	697a      	ldr	r2, [r7, #20]
 8009172:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	693a      	ldr	r2, [r7, #16]
 8009178:	621a      	str	r2, [r3, #32]
}
 800917a:	bf00      	nop
 800917c:	371c      	adds	r7, #28
 800917e:	46bd      	mov	sp, r7
 8009180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009184:	4770      	bx	lr

08009186 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009186:	b480      	push	{r7}
 8009188:	b085      	sub	sp, #20
 800918a:	af00      	add	r7, sp, #0
 800918c:	6078      	str	r0, [r7, #4]
 800918e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	689b      	ldr	r3, [r3, #8]
 8009194:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800919c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800919e:	683a      	ldr	r2, [r7, #0]
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	4313      	orrs	r3, r2
 80091a4:	f043 0307 	orr.w	r3, r3, #7
 80091a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	68fa      	ldr	r2, [r7, #12]
 80091ae:	609a      	str	r2, [r3, #8]
}
 80091b0:	bf00      	nop
 80091b2:	3714      	adds	r7, #20
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr

080091bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80091bc:	b480      	push	{r7}
 80091be:	b087      	sub	sp, #28
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	60f8      	str	r0, [r7, #12]
 80091c4:	60b9      	str	r1, [r7, #8]
 80091c6:	607a      	str	r2, [r7, #4]
 80091c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	689b      	ldr	r3, [r3, #8]
 80091ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80091d0:	697b      	ldr	r3, [r7, #20]
 80091d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80091d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	021a      	lsls	r2, r3, #8
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	431a      	orrs	r2, r3
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	4313      	orrs	r3, r2
 80091e4:	697a      	ldr	r2, [r7, #20]
 80091e6:	4313      	orrs	r3, r2
 80091e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	697a      	ldr	r2, [r7, #20]
 80091ee:	609a      	str	r2, [r3, #8]
}
 80091f0:	bf00      	nop
 80091f2:	371c      	adds	r7, #28
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr

080091fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b086      	sub	sp, #24
 8009200:	af00      	add	r7, sp, #0
 8009202:	60f8      	str	r0, [r7, #12]
 8009204:	60b9      	str	r1, [r7, #8]
 8009206:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	4a35      	ldr	r2, [pc, #212]	; (80092e0 <TIM_CCxChannelCmd+0xe4>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d030      	beq.n	8009272 <TIM_CCxChannelCmd+0x76>
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009216:	d02c      	beq.n	8009272 <TIM_CCxChannelCmd+0x76>
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	4a32      	ldr	r2, [pc, #200]	; (80092e4 <TIM_CCxChannelCmd+0xe8>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d028      	beq.n	8009272 <TIM_CCxChannelCmd+0x76>
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	4a31      	ldr	r2, [pc, #196]	; (80092e8 <TIM_CCxChannelCmd+0xec>)
 8009224:	4293      	cmp	r3, r2
 8009226:	d024      	beq.n	8009272 <TIM_CCxChannelCmd+0x76>
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	4a30      	ldr	r2, [pc, #192]	; (80092ec <TIM_CCxChannelCmd+0xf0>)
 800922c:	4293      	cmp	r3, r2
 800922e:	d020      	beq.n	8009272 <TIM_CCxChannelCmd+0x76>
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	4a2f      	ldr	r2, [pc, #188]	; (80092f0 <TIM_CCxChannelCmd+0xf4>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d01c      	beq.n	8009272 <TIM_CCxChannelCmd+0x76>
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	4a2e      	ldr	r2, [pc, #184]	; (80092f4 <TIM_CCxChannelCmd+0xf8>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d018      	beq.n	8009272 <TIM_CCxChannelCmd+0x76>
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	4a2d      	ldr	r2, [pc, #180]	; (80092f8 <TIM_CCxChannelCmd+0xfc>)
 8009244:	4293      	cmp	r3, r2
 8009246:	d014      	beq.n	8009272 <TIM_CCxChannelCmd+0x76>
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	4a2c      	ldr	r2, [pc, #176]	; (80092fc <TIM_CCxChannelCmd+0x100>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d010      	beq.n	8009272 <TIM_CCxChannelCmd+0x76>
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	4a2b      	ldr	r2, [pc, #172]	; (8009300 <TIM_CCxChannelCmd+0x104>)
 8009254:	4293      	cmp	r3, r2
 8009256:	d00c      	beq.n	8009272 <TIM_CCxChannelCmd+0x76>
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	4a2a      	ldr	r2, [pc, #168]	; (8009304 <TIM_CCxChannelCmd+0x108>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d008      	beq.n	8009272 <TIM_CCxChannelCmd+0x76>
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	4a29      	ldr	r2, [pc, #164]	; (8009308 <TIM_CCxChannelCmd+0x10c>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d004      	beq.n	8009272 <TIM_CCxChannelCmd+0x76>
 8009268:	f641 61a1 	movw	r1, #7841	; 0x1ea1
 800926c:	4827      	ldr	r0, [pc, #156]	; (800930c <TIM_CCxChannelCmd+0x110>)
 800926e:	f7f9 fa10 	bl	8002692 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d016      	beq.n	80092a6 <TIM_CCxChannelCmd+0xaa>
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	2b04      	cmp	r3, #4
 800927c:	d013      	beq.n	80092a6 <TIM_CCxChannelCmd+0xaa>
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	2b08      	cmp	r3, #8
 8009282:	d010      	beq.n	80092a6 <TIM_CCxChannelCmd+0xaa>
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	2b0c      	cmp	r3, #12
 8009288:	d00d      	beq.n	80092a6 <TIM_CCxChannelCmd+0xaa>
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	2b10      	cmp	r3, #16
 800928e:	d00a      	beq.n	80092a6 <TIM_CCxChannelCmd+0xaa>
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	2b14      	cmp	r3, #20
 8009294:	d007      	beq.n	80092a6 <TIM_CCxChannelCmd+0xaa>
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	2b3c      	cmp	r3, #60	; 0x3c
 800929a:	d004      	beq.n	80092a6 <TIM_CCxChannelCmd+0xaa>
 800929c:	f641 61a2 	movw	r1, #7842	; 0x1ea2
 80092a0:	481a      	ldr	r0, [pc, #104]	; (800930c <TIM_CCxChannelCmd+0x110>)
 80092a2:	f7f9 f9f6 	bl	8002692 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	f003 031f 	and.w	r3, r3, #31
 80092ac:	2201      	movs	r2, #1
 80092ae:	fa02 f303 	lsl.w	r3, r2, r3
 80092b2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	6a1a      	ldr	r2, [r3, #32]
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	43db      	mvns	r3, r3
 80092bc:	401a      	ands	r2, r3
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	6a1a      	ldr	r2, [r3, #32]
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	f003 031f 	and.w	r3, r3, #31
 80092cc:	6879      	ldr	r1, [r7, #4]
 80092ce:	fa01 f303 	lsl.w	r3, r1, r3
 80092d2:	431a      	orrs	r2, r3
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	621a      	str	r2, [r3, #32]
}
 80092d8:	bf00      	nop
 80092da:	3718      	adds	r7, #24
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}
 80092e0:	40010000 	.word	0x40010000
 80092e4:	40000400 	.word	0x40000400
 80092e8:	40000800 	.word	0x40000800
 80092ec:	40000c00 	.word	0x40000c00
 80092f0:	40010400 	.word	0x40010400
 80092f4:	40014000 	.word	0x40014000
 80092f8:	40014400 	.word	0x40014400
 80092fc:	40014800 	.word	0x40014800
 8009300:	40001800 	.word	0x40001800
 8009304:	40001c00 	.word	0x40001c00
 8009308:	40002000 	.word	0x40002000
 800930c:	080163e8 	.word	0x080163e8

08009310 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b084      	sub	sp, #16
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
 8009318:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	4a32      	ldr	r2, [pc, #200]	; (80093e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009320:	4293      	cmp	r3, r2
 8009322:	d027      	beq.n	8009374 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800932c:	d022      	beq.n	8009374 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	4a2e      	ldr	r2, [pc, #184]	; (80093ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009334:	4293      	cmp	r3, r2
 8009336:	d01d      	beq.n	8009374 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	4a2c      	ldr	r2, [pc, #176]	; (80093f0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800933e:	4293      	cmp	r3, r2
 8009340:	d018      	beq.n	8009374 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	4a2b      	ldr	r2, [pc, #172]	; (80093f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009348:	4293      	cmp	r3, r2
 800934a:	d013      	beq.n	8009374 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	4a29      	ldr	r2, [pc, #164]	; (80093f8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009352:	4293      	cmp	r3, r2
 8009354:	d00e      	beq.n	8009374 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	4a28      	ldr	r2, [pc, #160]	; (80093fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800935c:	4293      	cmp	r3, r2
 800935e:	d009      	beq.n	8009374 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	4a26      	ldr	r2, [pc, #152]	; (8009400 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009366:	4293      	cmp	r3, r2
 8009368:	d004      	beq.n	8009374 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800936a:	f240 71b6 	movw	r1, #1974	; 0x7b6
 800936e:	4825      	ldr	r0, [pc, #148]	; (8009404 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009370:	f7f9 f98f 	bl	8002692 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d020      	beq.n	80093be <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	2b10      	cmp	r3, #16
 8009382:	d01c      	beq.n	80093be <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	2b20      	cmp	r3, #32
 800938a:	d018      	beq.n	80093be <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	2b30      	cmp	r3, #48	; 0x30
 8009392:	d014      	beq.n	80093be <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	2b40      	cmp	r3, #64	; 0x40
 800939a:	d010      	beq.n	80093be <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	2b50      	cmp	r3, #80	; 0x50
 80093a2:	d00c      	beq.n	80093be <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	2b60      	cmp	r3, #96	; 0x60
 80093aa:	d008      	beq.n	80093be <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	2b70      	cmp	r3, #112	; 0x70
 80093b2:	d004      	beq.n	80093be <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80093b4:	f240 71b7 	movw	r1, #1975	; 0x7b7
 80093b8:	4812      	ldr	r0, [pc, #72]	; (8009404 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80093ba:	f7f9 f96a 	bl	8002692 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	689b      	ldr	r3, [r3, #8]
 80093c2:	2b80      	cmp	r3, #128	; 0x80
 80093c4:	d008      	beq.n	80093d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	689b      	ldr	r3, [r3, #8]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d004      	beq.n	80093d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80093ce:	f44f 61f7 	mov.w	r1, #1976	; 0x7b8
 80093d2:	480c      	ldr	r0, [pc, #48]	; (8009404 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80093d4:	f7f9 f95d 	bl	8002692 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093de:	2b01      	cmp	r3, #1
 80093e0:	d112      	bne.n	8009408 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 80093e2:	2302      	movs	r3, #2
 80093e4:	e0d7      	b.n	8009596 <HAL_TIMEx_MasterConfigSynchronization+0x286>
 80093e6:	bf00      	nop
 80093e8:	40010000 	.word	0x40010000
 80093ec:	40000400 	.word	0x40000400
 80093f0:	40000800 	.word	0x40000800
 80093f4:	40000c00 	.word	0x40000c00
 80093f8:	40001000 	.word	0x40001000
 80093fc:	40001400 	.word	0x40001400
 8009400:	40010400 	.word	0x40010400
 8009404:	08016420 	.word	0x08016420
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2201      	movs	r2, #1
 800940c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2202      	movs	r2, #2
 8009414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	685b      	ldr	r3, [r3, #4]
 800941e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	689b      	ldr	r3, [r3, #8]
 8009426:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4a5c      	ldr	r2, [pc, #368]	; (80095a0 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d004      	beq.n	800943c <HAL_TIMEx_MasterConfigSynchronization+0x12c>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4a5b      	ldr	r2, [pc, #364]	; (80095a4 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d161      	bne.n	8009500 <HAL_TIMEx_MasterConfigSynchronization+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d054      	beq.n	80094ee <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	685b      	ldr	r3, [r3, #4]
 8009448:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800944c:	d04f      	beq.n	80094ee <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	685b      	ldr	r3, [r3, #4]
 8009452:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009456:	d04a      	beq.n	80094ee <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	685b      	ldr	r3, [r3, #4]
 800945c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009460:	d045      	beq.n	80094ee <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	685b      	ldr	r3, [r3, #4]
 8009466:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800946a:	d040      	beq.n	80094ee <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	685b      	ldr	r3, [r3, #4]
 8009470:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8009474:	d03b      	beq.n	80094ee <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	685b      	ldr	r3, [r3, #4]
 800947a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800947e:	d036      	beq.n	80094ee <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	685b      	ldr	r3, [r3, #4]
 8009484:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009488:	d031      	beq.n	80094ee <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	685b      	ldr	r3, [r3, #4]
 800948e:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 8009492:	d02c      	beq.n	80094ee <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	685b      	ldr	r3, [r3, #4]
 8009498:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800949c:	d027      	beq.n	80094ee <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	685b      	ldr	r3, [r3, #4]
 80094a2:	f5b3 0f10 	cmp.w	r3, #9437184	; 0x900000
 80094a6:	d022      	beq.n	80094ee <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	685b      	ldr	r3, [r3, #4]
 80094ac:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80094b0:	d01d      	beq.n	80094ee <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	685b      	ldr	r3, [r3, #4]
 80094b6:	f5b3 0f30 	cmp.w	r3, #11534336	; 0xb00000
 80094ba:	d018      	beq.n	80094ee <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	685b      	ldr	r3, [r3, #4]
 80094c0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80094c4:	d013      	beq.n	80094ee <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	685b      	ldr	r3, [r3, #4]
 80094ca:	f5b3 0f50 	cmp.w	r3, #13631488	; 0xd00000
 80094ce:	d00e      	beq.n	80094ee <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	685b      	ldr	r3, [r3, #4]
 80094d4:	f5b3 0f60 	cmp.w	r3, #14680064	; 0xe00000
 80094d8:	d009      	beq.n	80094ee <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	685b      	ldr	r3, [r3, #4]
 80094de:	f5b3 0f70 	cmp.w	r3, #15728640	; 0xf00000
 80094e2:	d004      	beq.n	80094ee <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80094e4:	f240 71ca 	movw	r1, #1994	; 0x7ca
 80094e8:	482f      	ldr	r0, [pc, #188]	; (80095a8 <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 80094ea:	f7f9 f8d2 	bl	8002692 <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80094f4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	685b      	ldr	r3, [r3, #4]
 80094fa:	68fa      	ldr	r2, [r7, #12]
 80094fc:	4313      	orrs	r3, r2
 80094fe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009506:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	68fa      	ldr	r2, [r7, #12]
 800950e:	4313      	orrs	r3, r2
 8009510:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	68fa      	ldr	r2, [r7, #12]
 8009518:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	4a20      	ldr	r2, [pc, #128]	; (80095a0 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 8009520:	4293      	cmp	r3, r2
 8009522:	d022      	beq.n	800956a <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800952c:	d01d      	beq.n	800956a <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	4a1e      	ldr	r2, [pc, #120]	; (80095ac <HAL_TIMEx_MasterConfigSynchronization+0x29c>)
 8009534:	4293      	cmp	r3, r2
 8009536:	d018      	beq.n	800956a <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	4a1c      	ldr	r2, [pc, #112]	; (80095b0 <HAL_TIMEx_MasterConfigSynchronization+0x2a0>)
 800953e:	4293      	cmp	r3, r2
 8009540:	d013      	beq.n	800956a <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	4a1b      	ldr	r2, [pc, #108]	; (80095b4 <HAL_TIMEx_MasterConfigSynchronization+0x2a4>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d00e      	beq.n	800956a <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	4a14      	ldr	r2, [pc, #80]	; (80095a4 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 8009552:	4293      	cmp	r3, r2
 8009554:	d009      	beq.n	800956a <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	4a17      	ldr	r2, [pc, #92]	; (80095b8 <HAL_TIMEx_MasterConfigSynchronization+0x2a8>)
 800955c:	4293      	cmp	r3, r2
 800955e:	d004      	beq.n	800956a <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	4a15      	ldr	r2, [pc, #84]	; (80095bc <HAL_TIMEx_MasterConfigSynchronization+0x2ac>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d10c      	bne.n	8009584 <HAL_TIMEx_MasterConfigSynchronization+0x274>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009570:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	689b      	ldr	r3, [r3, #8]
 8009576:	68ba      	ldr	r2, [r7, #8]
 8009578:	4313      	orrs	r3, r2
 800957a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	68ba      	ldr	r2, [r7, #8]
 8009582:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2201      	movs	r2, #1
 8009588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2200      	movs	r2, #0
 8009590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009594:	2300      	movs	r3, #0
}
 8009596:	4618      	mov	r0, r3
 8009598:	3710      	adds	r7, #16
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}
 800959e:	bf00      	nop
 80095a0:	40010000 	.word	0x40010000
 80095a4:	40010400 	.word	0x40010400
 80095a8:	08016420 	.word	0x08016420
 80095ac:	40000400 	.word	0x40000400
 80095b0:	40000800 	.word	0x40000800
 80095b4:	40000c00 	.word	0x40000c00
 80095b8:	40014000 	.word	0x40014000
 80095bc:	40001800 	.word	0x40001800

080095c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b083      	sub	sp, #12
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80095c8:	bf00      	nop
 80095ca:	370c      	adds	r7, #12
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr

080095d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b083      	sub	sp, #12
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80095dc:	bf00      	nop
 80095de:	370c      	adds	r7, #12
 80095e0:	46bd      	mov	sp, r7
 80095e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e6:	4770      	bx	lr

080095e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b083      	sub	sp, #12
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80095f0:	bf00      	nop
 80095f2:	370c      	adds	r7, #12
 80095f4:	46bd      	mov	sp, r7
 80095f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fa:	4770      	bx	lr

080095fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b082      	sub	sp, #8
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d101      	bne.n	800960e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800960a:	2301      	movs	r3, #1
 800960c:	e09f      	b.n	800974e <HAL_UART_Init+0x152>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	699b      	ldr	r3, [r3, #24]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d02d      	beq.n	8009672 <HAL_UART_Init+0x76>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4a4f      	ldr	r2, [pc, #316]	; (8009758 <HAL_UART_Init+0x15c>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d055      	beq.n	80096cc <HAL_UART_Init+0xd0>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4a4d      	ldr	r2, [pc, #308]	; (800975c <HAL_UART_Init+0x160>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d050      	beq.n	80096cc <HAL_UART_Init+0xd0>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	4a4c      	ldr	r2, [pc, #304]	; (8009760 <HAL_UART_Init+0x164>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d04b      	beq.n	80096cc <HAL_UART_Init+0xd0>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4a4a      	ldr	r2, [pc, #296]	; (8009764 <HAL_UART_Init+0x168>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d046      	beq.n	80096cc <HAL_UART_Init+0xd0>
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	4a49      	ldr	r2, [pc, #292]	; (8009768 <HAL_UART_Init+0x16c>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d041      	beq.n	80096cc <HAL_UART_Init+0xd0>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	4a47      	ldr	r2, [pc, #284]	; (800976c <HAL_UART_Init+0x170>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d03c      	beq.n	80096cc <HAL_UART_Init+0xd0>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	4a46      	ldr	r2, [pc, #280]	; (8009770 <HAL_UART_Init+0x174>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d037      	beq.n	80096cc <HAL_UART_Init+0xd0>
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	4a44      	ldr	r2, [pc, #272]	; (8009774 <HAL_UART_Init+0x178>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d032      	beq.n	80096cc <HAL_UART_Init+0xd0>
 8009666:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800966a:	4843      	ldr	r0, [pc, #268]	; (8009778 <HAL_UART_Init+0x17c>)
 800966c:	f7f9 f811 	bl	8002692 <assert_failed>
 8009670:	e02c      	b.n	80096cc <HAL_UART_Init+0xd0>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	4a38      	ldr	r2, [pc, #224]	; (8009758 <HAL_UART_Init+0x15c>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d027      	beq.n	80096cc <HAL_UART_Init+0xd0>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4a36      	ldr	r2, [pc, #216]	; (800975c <HAL_UART_Init+0x160>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d022      	beq.n	80096cc <HAL_UART_Init+0xd0>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	4a35      	ldr	r2, [pc, #212]	; (8009760 <HAL_UART_Init+0x164>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d01d      	beq.n	80096cc <HAL_UART_Init+0xd0>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4a33      	ldr	r2, [pc, #204]	; (8009764 <HAL_UART_Init+0x168>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d018      	beq.n	80096cc <HAL_UART_Init+0xd0>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	4a32      	ldr	r2, [pc, #200]	; (8009768 <HAL_UART_Init+0x16c>)
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d013      	beq.n	80096cc <HAL_UART_Init+0xd0>
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4a30      	ldr	r2, [pc, #192]	; (800976c <HAL_UART_Init+0x170>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d00e      	beq.n	80096cc <HAL_UART_Init+0xd0>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	4a2f      	ldr	r2, [pc, #188]	; (8009770 <HAL_UART_Init+0x174>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d009      	beq.n	80096cc <HAL_UART_Init+0xd0>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	4a2d      	ldr	r2, [pc, #180]	; (8009774 <HAL_UART_Init+0x178>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d004      	beq.n	80096cc <HAL_UART_Init+0xd0>
 80096c2:	f240 1131 	movw	r1, #305	; 0x131
 80096c6:	482c      	ldr	r0, [pc, #176]	; (8009778 <HAL_UART_Init+0x17c>)
 80096c8:	f7f8 ffe3 	bl	8002692 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d106      	bne.n	80096e2 <HAL_UART_Init+0xe6>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2200      	movs	r2, #0
 80096d8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f7f9 fbd5 	bl	8002e8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2224      	movs	r2, #36	; 0x24
 80096e6:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	681a      	ldr	r2, [r3, #0]
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f022 0201 	bic.w	r2, r2, #1
 80096f6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f000 fc79 	bl	8009ff0 <UART_SetConfig>
 80096fe:	4603      	mov	r3, r0
 8009700:	2b01      	cmp	r3, #1
 8009702:	d101      	bne.n	8009708 <HAL_UART_Init+0x10c>
  {
    return HAL_ERROR;
 8009704:	2301      	movs	r3, #1
 8009706:	e022      	b.n	800974e <HAL_UART_Init+0x152>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800970c:	2b00      	cmp	r3, #0
 800970e:	d002      	beq.n	8009716 <HAL_UART_Init+0x11a>
  {
    UART_AdvFeatureConfig(huart);
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f000 ff63 	bl	800a5dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	685a      	ldr	r2, [r3, #4]
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009724:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	689a      	ldr	r2, [r3, #8]
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009734:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	681a      	ldr	r2, [r3, #0]
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f042 0201 	orr.w	r2, r2, #1
 8009744:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f001 f8a0 	bl	800a88c <UART_CheckIdleState>
 800974c:	4603      	mov	r3, r0
}
 800974e:	4618      	mov	r0, r3
 8009750:	3708      	adds	r7, #8
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}
 8009756:	bf00      	nop
 8009758:	40011000 	.word	0x40011000
 800975c:	40004400 	.word	0x40004400
 8009760:	40004800 	.word	0x40004800
 8009764:	40004c00 	.word	0x40004c00
 8009768:	40005000 	.word	0x40005000
 800976c:	40011400 	.word	0x40011400
 8009770:	40007800 	.word	0x40007800
 8009774:	40007c00 	.word	0x40007c00
 8009778:	0801645c 	.word	0x0801645c

0800977c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b08a      	sub	sp, #40	; 0x28
 8009780:	af02      	add	r7, sp, #8
 8009782:	60f8      	str	r0, [r7, #12]
 8009784:	60b9      	str	r1, [r7, #8]
 8009786:	603b      	str	r3, [r7, #0]
 8009788:	4613      	mov	r3, r2
 800978a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009790:	2b20      	cmp	r3, #32
 8009792:	d171      	bne.n	8009878 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d002      	beq.n	80097a0 <HAL_UART_Transmit+0x24>
 800979a:	88fb      	ldrh	r3, [r7, #6]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d101      	bne.n	80097a4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80097a0:	2301      	movs	r3, #1
 80097a2:	e06a      	b.n	800987a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	2200      	movs	r2, #0
 80097a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	2221      	movs	r2, #33	; 0x21
 80097b0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80097b2:	f7f9 fda1 	bl	80032f8 <HAL_GetTick>
 80097b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	88fa      	ldrh	r2, [r7, #6]
 80097bc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	88fa      	ldrh	r2, [r7, #6]
 80097c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	689b      	ldr	r3, [r3, #8]
 80097cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097d0:	d108      	bne.n	80097e4 <HAL_UART_Transmit+0x68>
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	691b      	ldr	r3, [r3, #16]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d104      	bne.n	80097e4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80097da:	2300      	movs	r3, #0
 80097dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	61bb      	str	r3, [r7, #24]
 80097e2:	e003      	b.n	80097ec <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80097e8:	2300      	movs	r3, #0
 80097ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80097ec:	e02c      	b.n	8009848 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	9300      	str	r3, [sp, #0]
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	2200      	movs	r2, #0
 80097f6:	2180      	movs	r1, #128	; 0x80
 80097f8:	68f8      	ldr	r0, [r7, #12]
 80097fa:	f001 f87e 	bl	800a8fa <UART_WaitOnFlagUntilTimeout>
 80097fe:	4603      	mov	r3, r0
 8009800:	2b00      	cmp	r3, #0
 8009802:	d001      	beq.n	8009808 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8009804:	2303      	movs	r3, #3
 8009806:	e038      	b.n	800987a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8009808:	69fb      	ldr	r3, [r7, #28]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d10b      	bne.n	8009826 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800980e:	69bb      	ldr	r3, [r7, #24]
 8009810:	881b      	ldrh	r3, [r3, #0]
 8009812:	461a      	mov	r2, r3
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800981c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800981e:	69bb      	ldr	r3, [r7, #24]
 8009820:	3302      	adds	r3, #2
 8009822:	61bb      	str	r3, [r7, #24]
 8009824:	e007      	b.n	8009836 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009826:	69fb      	ldr	r3, [r7, #28]
 8009828:	781a      	ldrb	r2, [r3, #0]
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009830:	69fb      	ldr	r3, [r7, #28]
 8009832:	3301      	adds	r3, #1
 8009834:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800983c:	b29b      	uxth	r3, r3
 800983e:	3b01      	subs	r3, #1
 8009840:	b29a      	uxth	r2, r3
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800984e:	b29b      	uxth	r3, r3
 8009850:	2b00      	cmp	r3, #0
 8009852:	d1cc      	bne.n	80097ee <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	9300      	str	r3, [sp, #0]
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	2200      	movs	r2, #0
 800985c:	2140      	movs	r1, #64	; 0x40
 800985e:	68f8      	ldr	r0, [r7, #12]
 8009860:	f001 f84b 	bl	800a8fa <UART_WaitOnFlagUntilTimeout>
 8009864:	4603      	mov	r3, r0
 8009866:	2b00      	cmp	r3, #0
 8009868:	d001      	beq.n	800986e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800986a:	2303      	movs	r3, #3
 800986c:	e005      	b.n	800987a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	2220      	movs	r2, #32
 8009872:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8009874:	2300      	movs	r3, #0
 8009876:	e000      	b.n	800987a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8009878:	2302      	movs	r3, #2
  }
}
 800987a:	4618      	mov	r0, r3
 800987c:	3720      	adds	r7, #32
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}

08009882 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009882:	b580      	push	{r7, lr}
 8009884:	b08a      	sub	sp, #40	; 0x28
 8009886:	af02      	add	r7, sp, #8
 8009888:	60f8      	str	r0, [r7, #12]
 800988a:	60b9      	str	r1, [r7, #8]
 800988c:	603b      	str	r3, [r7, #0]
 800988e:	4613      	mov	r3, r2
 8009890:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009898:	2b20      	cmp	r3, #32
 800989a:	f040 80b1 	bne.w	8009a00 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d002      	beq.n	80098aa <HAL_UART_Receive+0x28>
 80098a4:	88fb      	ldrh	r3, [r7, #6]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d101      	bne.n	80098ae <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80098aa:	2301      	movs	r3, #1
 80098ac:	e0a9      	b.n	8009a02 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	2200      	movs	r2, #0
 80098b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	2222      	movs	r2, #34	; 0x22
 80098ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	2200      	movs	r2, #0
 80098c2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80098c4:	f7f9 fd18 	bl	80032f8 <HAL_GetTick>
 80098c8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	88fa      	ldrh	r2, [r7, #6]
 80098ce:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	88fa      	ldrh	r2, [r7, #6]
 80098d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	689b      	ldr	r3, [r3, #8]
 80098de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098e2:	d10e      	bne.n	8009902 <HAL_UART_Receive+0x80>
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	691b      	ldr	r3, [r3, #16]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d105      	bne.n	80098f8 <HAL_UART_Receive+0x76>
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	f240 12ff 	movw	r2, #511	; 0x1ff
 80098f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80098f6:	e02d      	b.n	8009954 <HAL_UART_Receive+0xd2>
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	22ff      	movs	r2, #255	; 0xff
 80098fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009900:	e028      	b.n	8009954 <HAL_UART_Receive+0xd2>
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	689b      	ldr	r3, [r3, #8]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d10d      	bne.n	8009926 <HAL_UART_Receive+0xa4>
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	691b      	ldr	r3, [r3, #16]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d104      	bne.n	800991c <HAL_UART_Receive+0x9a>
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	22ff      	movs	r2, #255	; 0xff
 8009916:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800991a:	e01b      	b.n	8009954 <HAL_UART_Receive+0xd2>
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	227f      	movs	r2, #127	; 0x7f
 8009920:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009924:	e016      	b.n	8009954 <HAL_UART_Receive+0xd2>
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	689b      	ldr	r3, [r3, #8]
 800992a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800992e:	d10d      	bne.n	800994c <HAL_UART_Receive+0xca>
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	691b      	ldr	r3, [r3, #16]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d104      	bne.n	8009942 <HAL_UART_Receive+0xc0>
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	227f      	movs	r2, #127	; 0x7f
 800993c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009940:	e008      	b.n	8009954 <HAL_UART_Receive+0xd2>
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	223f      	movs	r2, #63	; 0x3f
 8009946:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800994a:	e003      	b.n	8009954 <HAL_UART_Receive+0xd2>
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	2200      	movs	r2, #0
 8009950:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800995a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	689b      	ldr	r3, [r3, #8]
 8009960:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009964:	d108      	bne.n	8009978 <HAL_UART_Receive+0xf6>
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	691b      	ldr	r3, [r3, #16]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d104      	bne.n	8009978 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800996e:	2300      	movs	r3, #0
 8009970:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	61bb      	str	r3, [r7, #24]
 8009976:	e003      	b.n	8009980 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800997c:	2300      	movs	r3, #0
 800997e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8009980:	e032      	b.n	80099e8 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	9300      	str	r3, [sp, #0]
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	2200      	movs	r2, #0
 800998a:	2120      	movs	r1, #32
 800998c:	68f8      	ldr	r0, [r7, #12]
 800998e:	f000 ffb4 	bl	800a8fa <UART_WaitOnFlagUntilTimeout>
 8009992:	4603      	mov	r3, r0
 8009994:	2b00      	cmp	r3, #0
 8009996:	d001      	beq.n	800999c <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8009998:	2303      	movs	r3, #3
 800999a:	e032      	b.n	8009a02 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 800999c:	69fb      	ldr	r3, [r7, #28]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d10c      	bne.n	80099bc <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099a8:	b29a      	uxth	r2, r3
 80099aa:	8a7b      	ldrh	r3, [r7, #18]
 80099ac:	4013      	ands	r3, r2
 80099ae:	b29a      	uxth	r2, r3
 80099b0:	69bb      	ldr	r3, [r7, #24]
 80099b2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80099b4:	69bb      	ldr	r3, [r7, #24]
 80099b6:	3302      	adds	r3, #2
 80099b8:	61bb      	str	r3, [r7, #24]
 80099ba:	e00c      	b.n	80099d6 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099c2:	b2da      	uxtb	r2, r3
 80099c4:	8a7b      	ldrh	r3, [r7, #18]
 80099c6:	b2db      	uxtb	r3, r3
 80099c8:	4013      	ands	r3, r2
 80099ca:	b2da      	uxtb	r2, r3
 80099cc:	69fb      	ldr	r3, [r7, #28]
 80099ce:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80099d0:	69fb      	ldr	r3, [r7, #28]
 80099d2:	3301      	adds	r3, #1
 80099d4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80099dc:	b29b      	uxth	r3, r3
 80099de:	3b01      	subs	r3, #1
 80099e0:	b29a      	uxth	r2, r3
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80099ee:	b29b      	uxth	r3, r3
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d1c6      	bne.n	8009982 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2220      	movs	r2, #32
 80099f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80099fc:	2300      	movs	r3, #0
 80099fe:	e000      	b.n	8009a02 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8009a00:	2302      	movs	r3, #2
  }
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3720      	adds	r7, #32
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}
	...

08009a0c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b0ba      	sub	sp, #232	; 0xe8
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	69db      	ldr	r3, [r3, #28]
 8009a1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	689b      	ldr	r3, [r3, #8]
 8009a2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009a32:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009a36:	f640 030f 	movw	r3, #2063	; 0x80f
 8009a3a:	4013      	ands	r3, r2
 8009a3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009a40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d115      	bne.n	8009a74 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009a48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a4c:	f003 0320 	and.w	r3, r3, #32
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d00f      	beq.n	8009a74 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a58:	f003 0320 	and.w	r3, r3, #32
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d009      	beq.n	8009a74 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	f000 8297 	beq.w	8009f98 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	4798      	blx	r3
      }
      return;
 8009a72:	e291      	b.n	8009f98 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009a74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	f000 8117 	beq.w	8009cac <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009a7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a82:	f003 0301 	and.w	r3, r3, #1
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d106      	bne.n	8009a98 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009a8a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009a8e:	4b85      	ldr	r3, [pc, #532]	; (8009ca4 <HAL_UART_IRQHandler+0x298>)
 8009a90:	4013      	ands	r3, r2
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	f000 810a 	beq.w	8009cac <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009a98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a9c:	f003 0301 	and.w	r3, r3, #1
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d011      	beq.n	8009ac8 <HAL_UART_IRQHandler+0xbc>
 8009aa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d00b      	beq.n	8009ac8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	2201      	movs	r2, #1
 8009ab6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009abe:	f043 0201 	orr.w	r2, r3, #1
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009ac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009acc:	f003 0302 	and.w	r3, r3, #2
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d011      	beq.n	8009af8 <HAL_UART_IRQHandler+0xec>
 8009ad4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ad8:	f003 0301 	and.w	r3, r3, #1
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d00b      	beq.n	8009af8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	2202      	movs	r2, #2
 8009ae6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009aee:	f043 0204 	orr.w	r2, r3, #4
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009af8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009afc:	f003 0304 	and.w	r3, r3, #4
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d011      	beq.n	8009b28 <HAL_UART_IRQHandler+0x11c>
 8009b04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009b08:	f003 0301 	and.w	r3, r3, #1
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d00b      	beq.n	8009b28 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	2204      	movs	r2, #4
 8009b16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b1e:	f043 0202 	orr.w	r2, r3, #2
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009b28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b2c:	f003 0308 	and.w	r3, r3, #8
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d017      	beq.n	8009b64 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009b34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b38:	f003 0320 	and.w	r3, r3, #32
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d105      	bne.n	8009b4c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009b40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009b44:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d00b      	beq.n	8009b64 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	2208      	movs	r2, #8
 8009b52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b5a:	f043 0208 	orr.w	r2, r3, #8
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009b64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d012      	beq.n	8009b96 <HAL_UART_IRQHandler+0x18a>
 8009b70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d00c      	beq.n	8009b96 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009b84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b8c:	f043 0220 	orr.w	r2, r3, #32
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	f000 81fd 	beq.w	8009f9c <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ba6:	f003 0320 	and.w	r3, r3, #32
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d00d      	beq.n	8009bca <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009bae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009bb2:	f003 0320 	and.w	r3, r3, #32
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d007      	beq.n	8009bca <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d003      	beq.n	8009bca <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009bd0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	689b      	ldr	r3, [r3, #8]
 8009bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bde:	2b40      	cmp	r3, #64	; 0x40
 8009be0:	d005      	beq.n	8009bee <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009be2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009be6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d04f      	beq.n	8009c8e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f000 ff49 	bl	800aa86 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	689b      	ldr	r3, [r3, #8]
 8009bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bfe:	2b40      	cmp	r3, #64	; 0x40
 8009c00:	d141      	bne.n	8009c86 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	3308      	adds	r3, #8
 8009c08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009c10:	e853 3f00 	ldrex	r3, [r3]
 8009c14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009c18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009c1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	3308      	adds	r3, #8
 8009c2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009c2e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009c32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009c3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009c3e:	e841 2300 	strex	r3, r2, [r1]
 8009c42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009c46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d1d9      	bne.n	8009c02 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d013      	beq.n	8009c7e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c5a:	4a13      	ldr	r2, [pc, #76]	; (8009ca8 <HAL_UART_IRQHandler+0x29c>)
 8009c5c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c62:	4618      	mov	r0, r3
 8009c64:	f7f9 fd28 	bl	80036b8 <HAL_DMA_Abort_IT>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d017      	beq.n	8009c9e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c74:	687a      	ldr	r2, [r7, #4]
 8009c76:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009c78:	4610      	mov	r0, r2
 8009c7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c7c:	e00f      	b.n	8009c9e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f000 f9a0 	bl	8009fc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c84:	e00b      	b.n	8009c9e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f000 f99c 	bl	8009fc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c8c:	e007      	b.n	8009c9e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f000 f998 	bl	8009fc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2200      	movs	r2, #0
 8009c98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8009c9c:	e17e      	b.n	8009f9c <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c9e:	bf00      	nop
    return;
 8009ca0:	e17c      	b.n	8009f9c <HAL_UART_IRQHandler+0x590>
 8009ca2:	bf00      	nop
 8009ca4:	04000120 	.word	0x04000120
 8009ca8:	0800ab4f 	.word	0x0800ab4f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009cb0:	2b01      	cmp	r3, #1
 8009cb2:	f040 814c 	bne.w	8009f4e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cba:	f003 0310 	and.w	r3, r3, #16
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	f000 8145 	beq.w	8009f4e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009cc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009cc8:	f003 0310 	and.w	r3, r3, #16
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	f000 813e 	beq.w	8009f4e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	2210      	movs	r2, #16
 8009cd8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	689b      	ldr	r3, [r3, #8]
 8009ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ce4:	2b40      	cmp	r3, #64	; 0x40
 8009ce6:	f040 80b6 	bne.w	8009e56 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	685b      	ldr	r3, [r3, #4]
 8009cf2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009cf6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	f000 8150 	beq.w	8009fa0 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009d06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009d0a:	429a      	cmp	r2, r3
 8009d0c:	f080 8148 	bcs.w	8009fa0 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009d16:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d1e:	69db      	ldr	r3, [r3, #28]
 8009d20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d24:	f000 8086 	beq.w	8009e34 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009d34:	e853 3f00 	ldrex	r3, [r3]
 8009d38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009d3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009d40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	461a      	mov	r2, r3
 8009d4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009d52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009d56:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d5a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009d5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009d62:	e841 2300 	strex	r3, r2, [r1]
 8009d66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009d6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d1da      	bne.n	8009d28 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	3308      	adds	r3, #8
 8009d78:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009d7c:	e853 3f00 	ldrex	r3, [r3]
 8009d80:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009d82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d84:	f023 0301 	bic.w	r3, r3, #1
 8009d88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	3308      	adds	r3, #8
 8009d92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009d96:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009d9a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d9c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009d9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009da2:	e841 2300 	strex	r3, r2, [r1]
 8009da6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009da8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d1e1      	bne.n	8009d72 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	3308      	adds	r3, #8
 8009db4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009db6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009db8:	e853 3f00 	ldrex	r3, [r3]
 8009dbc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009dbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009dc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009dc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	3308      	adds	r3, #8
 8009dce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009dd2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009dd4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dd6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009dd8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009dda:	e841 2300 	strex	r3, r2, [r1]
 8009dde:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009de0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d1e3      	bne.n	8009dae <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2220      	movs	r2, #32
 8009dea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2200      	movs	r2, #0
 8009df2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009dfc:	e853 3f00 	ldrex	r3, [r3]
 8009e00:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009e02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e04:	f023 0310 	bic.w	r3, r3, #16
 8009e08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	461a      	mov	r2, r3
 8009e12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009e16:	65bb      	str	r3, [r7, #88]	; 0x58
 8009e18:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e1a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009e1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009e1e:	e841 2300 	strex	r3, r2, [r1]
 8009e22:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009e24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d1e4      	bne.n	8009df4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f7f9 fbd2 	bl	80035d8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2202      	movs	r2, #2
 8009e38:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009e46:	b29b      	uxth	r3, r3
 8009e48:	1ad3      	subs	r3, r2, r3
 8009e4a:	b29b      	uxth	r3, r3
 8009e4c:	4619      	mov	r1, r3
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f000 f8c2 	bl	8009fd8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009e54:	e0a4      	b.n	8009fa0 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009e62:	b29b      	uxth	r3, r3
 8009e64:	1ad3      	subs	r3, r2, r3
 8009e66:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009e70:	b29b      	uxth	r3, r3
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	f000 8096 	beq.w	8009fa4 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8009e78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	f000 8091 	beq.w	8009fa4 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e8a:	e853 3f00 	ldrex	r3, [r3]
 8009e8e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e92:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009e96:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	461a      	mov	r2, r3
 8009ea0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009ea4:	647b      	str	r3, [r7, #68]	; 0x44
 8009ea6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ea8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009eaa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009eac:	e841 2300 	strex	r3, r2, [r1]
 8009eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009eb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d1e4      	bne.n	8009e82 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	3308      	adds	r3, #8
 8009ebe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec2:	e853 3f00 	ldrex	r3, [r3]
 8009ec6:	623b      	str	r3, [r7, #32]
   return(result);
 8009ec8:	6a3b      	ldr	r3, [r7, #32]
 8009eca:	f023 0301 	bic.w	r3, r3, #1
 8009ece:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	3308      	adds	r3, #8
 8009ed8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009edc:	633a      	str	r2, [r7, #48]	; 0x30
 8009ede:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ee0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009ee2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ee4:	e841 2300 	strex	r3, r2, [r1]
 8009ee8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d1e3      	bne.n	8009eb8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2220      	movs	r2, #32
 8009ef4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2200      	movs	r2, #0
 8009efc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2200      	movs	r2, #0
 8009f02:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f0a:	693b      	ldr	r3, [r7, #16]
 8009f0c:	e853 3f00 	ldrex	r3, [r3]
 8009f10:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	f023 0310 	bic.w	r3, r3, #16
 8009f18:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	461a      	mov	r2, r3
 8009f22:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009f26:	61fb      	str	r3, [r7, #28]
 8009f28:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f2a:	69b9      	ldr	r1, [r7, #24]
 8009f2c:	69fa      	ldr	r2, [r7, #28]
 8009f2e:	e841 2300 	strex	r3, r2, [r1]
 8009f32:	617b      	str	r3, [r7, #20]
   return(result);
 8009f34:	697b      	ldr	r3, [r7, #20]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d1e4      	bne.n	8009f04 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2202      	movs	r2, #2
 8009f3e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009f40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009f44:	4619      	mov	r1, r3
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f000 f846 	bl	8009fd8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009f4c:	e02a      	b.n	8009fa4 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009f4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d00e      	beq.n	8009f78 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009f5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d008      	beq.n	8009f78 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d01c      	beq.n	8009fa8 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	4798      	blx	r3
    }
    return;
 8009f76:	e017      	b.n	8009fa8 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009f78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d012      	beq.n	8009faa <HAL_UART_IRQHandler+0x59e>
 8009f84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d00c      	beq.n	8009faa <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f000 fdf2 	bl	800ab7a <UART_EndTransmit_IT>
    return;
 8009f96:	e008      	b.n	8009faa <HAL_UART_IRQHandler+0x59e>
      return;
 8009f98:	bf00      	nop
 8009f9a:	e006      	b.n	8009faa <HAL_UART_IRQHandler+0x59e>
    return;
 8009f9c:	bf00      	nop
 8009f9e:	e004      	b.n	8009faa <HAL_UART_IRQHandler+0x59e>
      return;
 8009fa0:	bf00      	nop
 8009fa2:	e002      	b.n	8009faa <HAL_UART_IRQHandler+0x59e>
      return;
 8009fa4:	bf00      	nop
 8009fa6:	e000      	b.n	8009faa <HAL_UART_IRQHandler+0x59e>
    return;
 8009fa8:	bf00      	nop
  }

}
 8009faa:	37e8      	adds	r7, #232	; 0xe8
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}

08009fb0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	b083      	sub	sp, #12
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009fb8:	bf00      	nop
 8009fba:	370c      	adds	r7, #12
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc2:	4770      	bx	lr

08009fc4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b083      	sub	sp, #12
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009fcc:	bf00      	nop
 8009fce:	370c      	adds	r7, #12
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd6:	4770      	bx	lr

08009fd8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b083      	sub	sp, #12
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
 8009fe0:	460b      	mov	r3, r1
 8009fe2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009fe4:	bf00      	nop
 8009fe6:	370c      	adds	r7, #12
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fee:	4770      	bx	lr

08009ff0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b088      	sub	sp, #32
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	77bb      	strb	r3, [r7, #30]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	685b      	ldr	r3, [r3, #4]
 800a000:	4aa0      	ldr	r2, [pc, #640]	; (800a284 <UART_SetConfig+0x294>)
 800a002:	4293      	cmp	r3, r2
 800a004:	d904      	bls.n	800a010 <UART_SetConfig+0x20>
 800a006:	f640 315d 	movw	r1, #2909	; 0xb5d
 800a00a:	489f      	ldr	r0, [pc, #636]	; (800a288 <UART_SetConfig+0x298>)
 800a00c:	f7f8 fb41 	bl	8002692 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	689b      	ldr	r3, [r3, #8]
 800a014:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a018:	d00d      	beq.n	800a036 <UART_SetConfig+0x46>
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	689b      	ldr	r3, [r3, #8]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d009      	beq.n	800a036 <UART_SetConfig+0x46>
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	689b      	ldr	r3, [r3, #8]
 800a026:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a02a:	d004      	beq.n	800a036 <UART_SetConfig+0x46>
 800a02c:	f640 315e 	movw	r1, #2910	; 0xb5e
 800a030:	4895      	ldr	r0, [pc, #596]	; (800a288 <UART_SetConfig+0x298>)
 800a032:	f7f8 fb2e 	bl	8002692 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	68db      	ldr	r3, [r3, #12]
 800a03a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a03e:	d012      	beq.n	800a066 <UART_SetConfig+0x76>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	68db      	ldr	r3, [r3, #12]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d00e      	beq.n	800a066 <UART_SetConfig+0x76>
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	68db      	ldr	r3, [r3, #12]
 800a04c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a050:	d009      	beq.n	800a066 <UART_SetConfig+0x76>
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	68db      	ldr	r3, [r3, #12]
 800a056:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a05a:	d004      	beq.n	800a066 <UART_SetConfig+0x76>
 800a05c:	f640 315f 	movw	r1, #2911	; 0xb5f
 800a060:	4889      	ldr	r0, [pc, #548]	; (800a288 <UART_SetConfig+0x298>)
 800a062:	f7f8 fb16 	bl	8002692 <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6a1b      	ldr	r3, [r3, #32]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d009      	beq.n	800a082 <UART_SetConfig+0x92>
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6a1b      	ldr	r3, [r3, #32]
 800a072:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a076:	d004      	beq.n	800a082 <UART_SetConfig+0x92>
 800a078:	f44f 6136 	mov.w	r1, #2912	; 0xb60
 800a07c:	4882      	ldr	r0, [pc, #520]	; (800a288 <UART_SetConfig+0x298>)
 800a07e:	f7f8 fb08 	bl	8002692 <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	691b      	ldr	r3, [r3, #16]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d00e      	beq.n	800a0a8 <UART_SetConfig+0xb8>
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	691b      	ldr	r3, [r3, #16]
 800a08e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a092:	d009      	beq.n	800a0a8 <UART_SetConfig+0xb8>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	691b      	ldr	r3, [r3, #16]
 800a098:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a09c:	d004      	beq.n	800a0a8 <UART_SetConfig+0xb8>
 800a09e:	f640 3162 	movw	r1, #2914	; 0xb62
 800a0a2:	4879      	ldr	r0, [pc, #484]	; (800a288 <UART_SetConfig+0x298>)
 800a0a4:	f7f8 faf5 	bl	8002692 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	695b      	ldr	r3, [r3, #20]
 800a0ac:	f023 030c 	bic.w	r3, r3, #12
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d103      	bne.n	800a0bc <UART_SetConfig+0xcc>
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	695b      	ldr	r3, [r3, #20]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d104      	bne.n	800a0c6 <UART_SetConfig+0xd6>
 800a0bc:	f640 3163 	movw	r1, #2915	; 0xb63
 800a0c0:	4871      	ldr	r0, [pc, #452]	; (800a288 <UART_SetConfig+0x298>)
 800a0c2:	f7f8 fae6 	bl	8002692 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	699b      	ldr	r3, [r3, #24]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d013      	beq.n	800a0f6 <UART_SetConfig+0x106>
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	699b      	ldr	r3, [r3, #24]
 800a0d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0d6:	d00e      	beq.n	800a0f6 <UART_SetConfig+0x106>
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	699b      	ldr	r3, [r3, #24]
 800a0dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0e0:	d009      	beq.n	800a0f6 <UART_SetConfig+0x106>
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	699b      	ldr	r3, [r3, #24]
 800a0e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a0ea:	d004      	beq.n	800a0f6 <UART_SetConfig+0x106>
 800a0ec:	f640 3164 	movw	r1, #2916	; 0xb64
 800a0f0:	4865      	ldr	r0, [pc, #404]	; (800a288 <UART_SetConfig+0x298>)
 800a0f2:	f7f8 face 	bl	8002692 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	69db      	ldr	r3, [r3, #28]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d009      	beq.n	800a112 <UART_SetConfig+0x122>
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	69db      	ldr	r3, [r3, #28]
 800a102:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a106:	d004      	beq.n	800a112 <UART_SetConfig+0x122>
 800a108:	f640 3165 	movw	r1, #2917	; 0xb65
 800a10c:	485e      	ldr	r0, [pc, #376]	; (800a288 <UART_SetConfig+0x298>)
 800a10e:	f7f8 fac0 	bl	8002692 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	689a      	ldr	r2, [r3, #8]
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	691b      	ldr	r3, [r3, #16]
 800a11a:	431a      	orrs	r2, r3
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	695b      	ldr	r3, [r3, #20]
 800a120:	431a      	orrs	r2, r3
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	69db      	ldr	r3, [r3, #28]
 800a126:	4313      	orrs	r3, r2
 800a128:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	681a      	ldr	r2, [r3, #0]
 800a130:	4b56      	ldr	r3, [pc, #344]	; (800a28c <UART_SetConfig+0x29c>)
 800a132:	4013      	ands	r3, r2
 800a134:	687a      	ldr	r2, [r7, #4]
 800a136:	6812      	ldr	r2, [r2, #0]
 800a138:	6979      	ldr	r1, [r7, #20]
 800a13a:	430b      	orrs	r3, r1
 800a13c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	685b      	ldr	r3, [r3, #4]
 800a144:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	68da      	ldr	r2, [r3, #12]
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	430a      	orrs	r2, r1
 800a152:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	699b      	ldr	r3, [r3, #24]
 800a158:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6a1b      	ldr	r3, [r3, #32]
 800a15e:	697a      	ldr	r2, [r7, #20]
 800a160:	4313      	orrs	r3, r2
 800a162:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	689b      	ldr	r3, [r3, #8]
 800a16a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	697a      	ldr	r2, [r7, #20]
 800a174:	430a      	orrs	r2, r1
 800a176:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	4a44      	ldr	r2, [pc, #272]	; (800a290 <UART_SetConfig+0x2a0>)
 800a17e:	4293      	cmp	r3, r2
 800a180:	d121      	bne.n	800a1c6 <UART_SetConfig+0x1d6>
 800a182:	4b44      	ldr	r3, [pc, #272]	; (800a294 <UART_SetConfig+0x2a4>)
 800a184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a188:	f003 0303 	and.w	r3, r3, #3
 800a18c:	2b03      	cmp	r3, #3
 800a18e:	d817      	bhi.n	800a1c0 <UART_SetConfig+0x1d0>
 800a190:	a201      	add	r2, pc, #4	; (adr r2, 800a198 <UART_SetConfig+0x1a8>)
 800a192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a196:	bf00      	nop
 800a198:	0800a1a9 	.word	0x0800a1a9
 800a19c:	0800a1b5 	.word	0x0800a1b5
 800a1a0:	0800a1af 	.word	0x0800a1af
 800a1a4:	0800a1bb 	.word	0x0800a1bb
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	77fb      	strb	r3, [r7, #31]
 800a1ac:	e14c      	b.n	800a448 <UART_SetConfig+0x458>
 800a1ae:	2302      	movs	r3, #2
 800a1b0:	77fb      	strb	r3, [r7, #31]
 800a1b2:	e149      	b.n	800a448 <UART_SetConfig+0x458>
 800a1b4:	2304      	movs	r3, #4
 800a1b6:	77fb      	strb	r3, [r7, #31]
 800a1b8:	e146      	b.n	800a448 <UART_SetConfig+0x458>
 800a1ba:	2308      	movs	r3, #8
 800a1bc:	77fb      	strb	r3, [r7, #31]
 800a1be:	e143      	b.n	800a448 <UART_SetConfig+0x458>
 800a1c0:	2310      	movs	r3, #16
 800a1c2:	77fb      	strb	r3, [r7, #31]
 800a1c4:	e140      	b.n	800a448 <UART_SetConfig+0x458>
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	4a33      	ldr	r2, [pc, #204]	; (800a298 <UART_SetConfig+0x2a8>)
 800a1cc:	4293      	cmp	r3, r2
 800a1ce:	d132      	bne.n	800a236 <UART_SetConfig+0x246>
 800a1d0:	4b30      	ldr	r3, [pc, #192]	; (800a294 <UART_SetConfig+0x2a4>)
 800a1d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1d6:	f003 030c 	and.w	r3, r3, #12
 800a1da:	2b0c      	cmp	r3, #12
 800a1dc:	d828      	bhi.n	800a230 <UART_SetConfig+0x240>
 800a1de:	a201      	add	r2, pc, #4	; (adr r2, 800a1e4 <UART_SetConfig+0x1f4>)
 800a1e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1e4:	0800a219 	.word	0x0800a219
 800a1e8:	0800a231 	.word	0x0800a231
 800a1ec:	0800a231 	.word	0x0800a231
 800a1f0:	0800a231 	.word	0x0800a231
 800a1f4:	0800a225 	.word	0x0800a225
 800a1f8:	0800a231 	.word	0x0800a231
 800a1fc:	0800a231 	.word	0x0800a231
 800a200:	0800a231 	.word	0x0800a231
 800a204:	0800a21f 	.word	0x0800a21f
 800a208:	0800a231 	.word	0x0800a231
 800a20c:	0800a231 	.word	0x0800a231
 800a210:	0800a231 	.word	0x0800a231
 800a214:	0800a22b 	.word	0x0800a22b
 800a218:	2300      	movs	r3, #0
 800a21a:	77fb      	strb	r3, [r7, #31]
 800a21c:	e114      	b.n	800a448 <UART_SetConfig+0x458>
 800a21e:	2302      	movs	r3, #2
 800a220:	77fb      	strb	r3, [r7, #31]
 800a222:	e111      	b.n	800a448 <UART_SetConfig+0x458>
 800a224:	2304      	movs	r3, #4
 800a226:	77fb      	strb	r3, [r7, #31]
 800a228:	e10e      	b.n	800a448 <UART_SetConfig+0x458>
 800a22a:	2308      	movs	r3, #8
 800a22c:	77fb      	strb	r3, [r7, #31]
 800a22e:	e10b      	b.n	800a448 <UART_SetConfig+0x458>
 800a230:	2310      	movs	r3, #16
 800a232:	77fb      	strb	r3, [r7, #31]
 800a234:	e108      	b.n	800a448 <UART_SetConfig+0x458>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	4a18      	ldr	r2, [pc, #96]	; (800a29c <UART_SetConfig+0x2ac>)
 800a23c:	4293      	cmp	r3, r2
 800a23e:	d12f      	bne.n	800a2a0 <UART_SetConfig+0x2b0>
 800a240:	4b14      	ldr	r3, [pc, #80]	; (800a294 <UART_SetConfig+0x2a4>)
 800a242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a246:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a24a:	2b30      	cmp	r3, #48	; 0x30
 800a24c:	d013      	beq.n	800a276 <UART_SetConfig+0x286>
 800a24e:	2b30      	cmp	r3, #48	; 0x30
 800a250:	d814      	bhi.n	800a27c <UART_SetConfig+0x28c>
 800a252:	2b20      	cmp	r3, #32
 800a254:	d009      	beq.n	800a26a <UART_SetConfig+0x27a>
 800a256:	2b20      	cmp	r3, #32
 800a258:	d810      	bhi.n	800a27c <UART_SetConfig+0x28c>
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d002      	beq.n	800a264 <UART_SetConfig+0x274>
 800a25e:	2b10      	cmp	r3, #16
 800a260:	d006      	beq.n	800a270 <UART_SetConfig+0x280>
 800a262:	e00b      	b.n	800a27c <UART_SetConfig+0x28c>
 800a264:	2300      	movs	r3, #0
 800a266:	77fb      	strb	r3, [r7, #31]
 800a268:	e0ee      	b.n	800a448 <UART_SetConfig+0x458>
 800a26a:	2302      	movs	r3, #2
 800a26c:	77fb      	strb	r3, [r7, #31]
 800a26e:	e0eb      	b.n	800a448 <UART_SetConfig+0x458>
 800a270:	2304      	movs	r3, #4
 800a272:	77fb      	strb	r3, [r7, #31]
 800a274:	e0e8      	b.n	800a448 <UART_SetConfig+0x458>
 800a276:	2308      	movs	r3, #8
 800a278:	77fb      	strb	r3, [r7, #31]
 800a27a:	e0e5      	b.n	800a448 <UART_SetConfig+0x458>
 800a27c:	2310      	movs	r3, #16
 800a27e:	77fb      	strb	r3, [r7, #31]
 800a280:	e0e2      	b.n	800a448 <UART_SetConfig+0x458>
 800a282:	bf00      	nop
 800a284:	019bfcc0 	.word	0x019bfcc0
 800a288:	0801645c 	.word	0x0801645c
 800a28c:	efff69f3 	.word	0xefff69f3
 800a290:	40011000 	.word	0x40011000
 800a294:	40023800 	.word	0x40023800
 800a298:	40004400 	.word	0x40004400
 800a29c:	40004800 	.word	0x40004800
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	4aa5      	ldr	r2, [pc, #660]	; (800a53c <UART_SetConfig+0x54c>)
 800a2a6:	4293      	cmp	r3, r2
 800a2a8:	d120      	bne.n	800a2ec <UART_SetConfig+0x2fc>
 800a2aa:	4ba5      	ldr	r3, [pc, #660]	; (800a540 <UART_SetConfig+0x550>)
 800a2ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2b0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a2b4:	2bc0      	cmp	r3, #192	; 0xc0
 800a2b6:	d013      	beq.n	800a2e0 <UART_SetConfig+0x2f0>
 800a2b8:	2bc0      	cmp	r3, #192	; 0xc0
 800a2ba:	d814      	bhi.n	800a2e6 <UART_SetConfig+0x2f6>
 800a2bc:	2b80      	cmp	r3, #128	; 0x80
 800a2be:	d009      	beq.n	800a2d4 <UART_SetConfig+0x2e4>
 800a2c0:	2b80      	cmp	r3, #128	; 0x80
 800a2c2:	d810      	bhi.n	800a2e6 <UART_SetConfig+0x2f6>
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d002      	beq.n	800a2ce <UART_SetConfig+0x2de>
 800a2c8:	2b40      	cmp	r3, #64	; 0x40
 800a2ca:	d006      	beq.n	800a2da <UART_SetConfig+0x2ea>
 800a2cc:	e00b      	b.n	800a2e6 <UART_SetConfig+0x2f6>
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	77fb      	strb	r3, [r7, #31]
 800a2d2:	e0b9      	b.n	800a448 <UART_SetConfig+0x458>
 800a2d4:	2302      	movs	r3, #2
 800a2d6:	77fb      	strb	r3, [r7, #31]
 800a2d8:	e0b6      	b.n	800a448 <UART_SetConfig+0x458>
 800a2da:	2304      	movs	r3, #4
 800a2dc:	77fb      	strb	r3, [r7, #31]
 800a2de:	e0b3      	b.n	800a448 <UART_SetConfig+0x458>
 800a2e0:	2308      	movs	r3, #8
 800a2e2:	77fb      	strb	r3, [r7, #31]
 800a2e4:	e0b0      	b.n	800a448 <UART_SetConfig+0x458>
 800a2e6:	2310      	movs	r3, #16
 800a2e8:	77fb      	strb	r3, [r7, #31]
 800a2ea:	e0ad      	b.n	800a448 <UART_SetConfig+0x458>
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	4a94      	ldr	r2, [pc, #592]	; (800a544 <UART_SetConfig+0x554>)
 800a2f2:	4293      	cmp	r3, r2
 800a2f4:	d125      	bne.n	800a342 <UART_SetConfig+0x352>
 800a2f6:	4b92      	ldr	r3, [pc, #584]	; (800a540 <UART_SetConfig+0x550>)
 800a2f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a300:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a304:	d017      	beq.n	800a336 <UART_SetConfig+0x346>
 800a306:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a30a:	d817      	bhi.n	800a33c <UART_SetConfig+0x34c>
 800a30c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a310:	d00b      	beq.n	800a32a <UART_SetConfig+0x33a>
 800a312:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a316:	d811      	bhi.n	800a33c <UART_SetConfig+0x34c>
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d003      	beq.n	800a324 <UART_SetConfig+0x334>
 800a31c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a320:	d006      	beq.n	800a330 <UART_SetConfig+0x340>
 800a322:	e00b      	b.n	800a33c <UART_SetConfig+0x34c>
 800a324:	2300      	movs	r3, #0
 800a326:	77fb      	strb	r3, [r7, #31]
 800a328:	e08e      	b.n	800a448 <UART_SetConfig+0x458>
 800a32a:	2302      	movs	r3, #2
 800a32c:	77fb      	strb	r3, [r7, #31]
 800a32e:	e08b      	b.n	800a448 <UART_SetConfig+0x458>
 800a330:	2304      	movs	r3, #4
 800a332:	77fb      	strb	r3, [r7, #31]
 800a334:	e088      	b.n	800a448 <UART_SetConfig+0x458>
 800a336:	2308      	movs	r3, #8
 800a338:	77fb      	strb	r3, [r7, #31]
 800a33a:	e085      	b.n	800a448 <UART_SetConfig+0x458>
 800a33c:	2310      	movs	r3, #16
 800a33e:	77fb      	strb	r3, [r7, #31]
 800a340:	e082      	b.n	800a448 <UART_SetConfig+0x458>
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	4a80      	ldr	r2, [pc, #512]	; (800a548 <UART_SetConfig+0x558>)
 800a348:	4293      	cmp	r3, r2
 800a34a:	d125      	bne.n	800a398 <UART_SetConfig+0x3a8>
 800a34c:	4b7c      	ldr	r3, [pc, #496]	; (800a540 <UART_SetConfig+0x550>)
 800a34e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a352:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a356:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a35a:	d017      	beq.n	800a38c <UART_SetConfig+0x39c>
 800a35c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a360:	d817      	bhi.n	800a392 <UART_SetConfig+0x3a2>
 800a362:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a366:	d00b      	beq.n	800a380 <UART_SetConfig+0x390>
 800a368:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a36c:	d811      	bhi.n	800a392 <UART_SetConfig+0x3a2>
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d003      	beq.n	800a37a <UART_SetConfig+0x38a>
 800a372:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a376:	d006      	beq.n	800a386 <UART_SetConfig+0x396>
 800a378:	e00b      	b.n	800a392 <UART_SetConfig+0x3a2>
 800a37a:	2301      	movs	r3, #1
 800a37c:	77fb      	strb	r3, [r7, #31]
 800a37e:	e063      	b.n	800a448 <UART_SetConfig+0x458>
 800a380:	2302      	movs	r3, #2
 800a382:	77fb      	strb	r3, [r7, #31]
 800a384:	e060      	b.n	800a448 <UART_SetConfig+0x458>
 800a386:	2304      	movs	r3, #4
 800a388:	77fb      	strb	r3, [r7, #31]
 800a38a:	e05d      	b.n	800a448 <UART_SetConfig+0x458>
 800a38c:	2308      	movs	r3, #8
 800a38e:	77fb      	strb	r3, [r7, #31]
 800a390:	e05a      	b.n	800a448 <UART_SetConfig+0x458>
 800a392:	2310      	movs	r3, #16
 800a394:	77fb      	strb	r3, [r7, #31]
 800a396:	e057      	b.n	800a448 <UART_SetConfig+0x458>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	4a6b      	ldr	r2, [pc, #428]	; (800a54c <UART_SetConfig+0x55c>)
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	d125      	bne.n	800a3ee <UART_SetConfig+0x3fe>
 800a3a2:	4b67      	ldr	r3, [pc, #412]	; (800a540 <UART_SetConfig+0x550>)
 800a3a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3a8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a3ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a3b0:	d017      	beq.n	800a3e2 <UART_SetConfig+0x3f2>
 800a3b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a3b6:	d817      	bhi.n	800a3e8 <UART_SetConfig+0x3f8>
 800a3b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3bc:	d00b      	beq.n	800a3d6 <UART_SetConfig+0x3e6>
 800a3be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3c2:	d811      	bhi.n	800a3e8 <UART_SetConfig+0x3f8>
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d003      	beq.n	800a3d0 <UART_SetConfig+0x3e0>
 800a3c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3cc:	d006      	beq.n	800a3dc <UART_SetConfig+0x3ec>
 800a3ce:	e00b      	b.n	800a3e8 <UART_SetConfig+0x3f8>
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	77fb      	strb	r3, [r7, #31]
 800a3d4:	e038      	b.n	800a448 <UART_SetConfig+0x458>
 800a3d6:	2302      	movs	r3, #2
 800a3d8:	77fb      	strb	r3, [r7, #31]
 800a3da:	e035      	b.n	800a448 <UART_SetConfig+0x458>
 800a3dc:	2304      	movs	r3, #4
 800a3de:	77fb      	strb	r3, [r7, #31]
 800a3e0:	e032      	b.n	800a448 <UART_SetConfig+0x458>
 800a3e2:	2308      	movs	r3, #8
 800a3e4:	77fb      	strb	r3, [r7, #31]
 800a3e6:	e02f      	b.n	800a448 <UART_SetConfig+0x458>
 800a3e8:	2310      	movs	r3, #16
 800a3ea:	77fb      	strb	r3, [r7, #31]
 800a3ec:	e02c      	b.n	800a448 <UART_SetConfig+0x458>
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	4a57      	ldr	r2, [pc, #348]	; (800a550 <UART_SetConfig+0x560>)
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	d125      	bne.n	800a444 <UART_SetConfig+0x454>
 800a3f8:	4b51      	ldr	r3, [pc, #324]	; (800a540 <UART_SetConfig+0x550>)
 800a3fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3fe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a402:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a406:	d017      	beq.n	800a438 <UART_SetConfig+0x448>
 800a408:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a40c:	d817      	bhi.n	800a43e <UART_SetConfig+0x44e>
 800a40e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a412:	d00b      	beq.n	800a42c <UART_SetConfig+0x43c>
 800a414:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a418:	d811      	bhi.n	800a43e <UART_SetConfig+0x44e>
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d003      	beq.n	800a426 <UART_SetConfig+0x436>
 800a41e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a422:	d006      	beq.n	800a432 <UART_SetConfig+0x442>
 800a424:	e00b      	b.n	800a43e <UART_SetConfig+0x44e>
 800a426:	2300      	movs	r3, #0
 800a428:	77fb      	strb	r3, [r7, #31]
 800a42a:	e00d      	b.n	800a448 <UART_SetConfig+0x458>
 800a42c:	2302      	movs	r3, #2
 800a42e:	77fb      	strb	r3, [r7, #31]
 800a430:	e00a      	b.n	800a448 <UART_SetConfig+0x458>
 800a432:	2304      	movs	r3, #4
 800a434:	77fb      	strb	r3, [r7, #31]
 800a436:	e007      	b.n	800a448 <UART_SetConfig+0x458>
 800a438:	2308      	movs	r3, #8
 800a43a:	77fb      	strb	r3, [r7, #31]
 800a43c:	e004      	b.n	800a448 <UART_SetConfig+0x458>
 800a43e:	2310      	movs	r3, #16
 800a440:	77fb      	strb	r3, [r7, #31]
 800a442:	e001      	b.n	800a448 <UART_SetConfig+0x458>
 800a444:	2310      	movs	r3, #16
 800a446:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	69db      	ldr	r3, [r3, #28]
 800a44c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a450:	d15c      	bne.n	800a50c <UART_SetConfig+0x51c>
  {
    switch (clocksource)
 800a452:	7ffb      	ldrb	r3, [r7, #31]
 800a454:	2b08      	cmp	r3, #8
 800a456:	d828      	bhi.n	800a4aa <UART_SetConfig+0x4ba>
 800a458:	a201      	add	r2, pc, #4	; (adr r2, 800a460 <UART_SetConfig+0x470>)
 800a45a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a45e:	bf00      	nop
 800a460:	0800a485 	.word	0x0800a485
 800a464:	0800a48d 	.word	0x0800a48d
 800a468:	0800a495 	.word	0x0800a495
 800a46c:	0800a4ab 	.word	0x0800a4ab
 800a470:	0800a49b 	.word	0x0800a49b
 800a474:	0800a4ab 	.word	0x0800a4ab
 800a478:	0800a4ab 	.word	0x0800a4ab
 800a47c:	0800a4ab 	.word	0x0800a4ab
 800a480:	0800a4a3 	.word	0x0800a4a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a484:	f7fb ff6c 	bl	8006360 <HAL_RCC_GetPCLK1Freq>
 800a488:	61b8      	str	r0, [r7, #24]
        break;
 800a48a:	e013      	b.n	800a4b4 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a48c:	f7fb ff7c 	bl	8006388 <HAL_RCC_GetPCLK2Freq>
 800a490:	61b8      	str	r0, [r7, #24]
        break;
 800a492:	e00f      	b.n	800a4b4 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a494:	4b2f      	ldr	r3, [pc, #188]	; (800a554 <UART_SetConfig+0x564>)
 800a496:	61bb      	str	r3, [r7, #24]
        break;
 800a498:	e00c      	b.n	800a4b4 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a49a:	f7fb fe8f 	bl	80061bc <HAL_RCC_GetSysClockFreq>
 800a49e:	61b8      	str	r0, [r7, #24]
        break;
 800a4a0:	e008      	b.n	800a4b4 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a4a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a4a6:	61bb      	str	r3, [r7, #24]
        break;
 800a4a8:	e004      	b.n	800a4b4 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	77bb      	strb	r3, [r7, #30]
        break;
 800a4b2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a4b4:	69bb      	ldr	r3, [r7, #24]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	f000 8082 	beq.w	800a5c0 <UART_SetConfig+0x5d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a4bc:	69bb      	ldr	r3, [r7, #24]
 800a4be:	005a      	lsls	r2, r3, #1
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	685b      	ldr	r3, [r3, #4]
 800a4c4:	085b      	lsrs	r3, r3, #1
 800a4c6:	441a      	add	r2, r3
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	685b      	ldr	r3, [r3, #4]
 800a4cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4d0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a4d2:	693b      	ldr	r3, [r7, #16]
 800a4d4:	2b0f      	cmp	r3, #15
 800a4d6:	d916      	bls.n	800a506 <UART_SetConfig+0x516>
 800a4d8:	693b      	ldr	r3, [r7, #16]
 800a4da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4de:	d212      	bcs.n	800a506 <UART_SetConfig+0x516>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	b29b      	uxth	r3, r3
 800a4e4:	f023 030f 	bic.w	r3, r3, #15
 800a4e8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a4ea:	693b      	ldr	r3, [r7, #16]
 800a4ec:	085b      	lsrs	r3, r3, #1
 800a4ee:	b29b      	uxth	r3, r3
 800a4f0:	f003 0307 	and.w	r3, r3, #7
 800a4f4:	b29a      	uxth	r2, r3
 800a4f6:	89fb      	ldrh	r3, [r7, #14]
 800a4f8:	4313      	orrs	r3, r2
 800a4fa:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	89fa      	ldrh	r2, [r7, #14]
 800a502:	60da      	str	r2, [r3, #12]
 800a504:	e05c      	b.n	800a5c0 <UART_SetConfig+0x5d0>
      }
      else
      {
        ret = HAL_ERROR;
 800a506:	2301      	movs	r3, #1
 800a508:	77bb      	strb	r3, [r7, #30]
 800a50a:	e059      	b.n	800a5c0 <UART_SetConfig+0x5d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a50c:	7ffb      	ldrb	r3, [r7, #31]
 800a50e:	2b08      	cmp	r3, #8
 800a510:	d835      	bhi.n	800a57e <UART_SetConfig+0x58e>
 800a512:	a201      	add	r2, pc, #4	; (adr r2, 800a518 <UART_SetConfig+0x528>)
 800a514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a518:	0800a559 	.word	0x0800a559
 800a51c:	0800a561 	.word	0x0800a561
 800a520:	0800a569 	.word	0x0800a569
 800a524:	0800a57f 	.word	0x0800a57f
 800a528:	0800a56f 	.word	0x0800a56f
 800a52c:	0800a57f 	.word	0x0800a57f
 800a530:	0800a57f 	.word	0x0800a57f
 800a534:	0800a57f 	.word	0x0800a57f
 800a538:	0800a577 	.word	0x0800a577
 800a53c:	40004c00 	.word	0x40004c00
 800a540:	40023800 	.word	0x40023800
 800a544:	40005000 	.word	0x40005000
 800a548:	40011400 	.word	0x40011400
 800a54c:	40007800 	.word	0x40007800
 800a550:	40007c00 	.word	0x40007c00
 800a554:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a558:	f7fb ff02 	bl	8006360 <HAL_RCC_GetPCLK1Freq>
 800a55c:	61b8      	str	r0, [r7, #24]
        break;
 800a55e:	e013      	b.n	800a588 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a560:	f7fb ff12 	bl	8006388 <HAL_RCC_GetPCLK2Freq>
 800a564:	61b8      	str	r0, [r7, #24]
        break;
 800a566:	e00f      	b.n	800a588 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a568:	4b1b      	ldr	r3, [pc, #108]	; (800a5d8 <UART_SetConfig+0x5e8>)
 800a56a:	61bb      	str	r3, [r7, #24]
        break;
 800a56c:	e00c      	b.n	800a588 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a56e:	f7fb fe25 	bl	80061bc <HAL_RCC_GetSysClockFreq>
 800a572:	61b8      	str	r0, [r7, #24]
        break;
 800a574:	e008      	b.n	800a588 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a576:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a57a:	61bb      	str	r3, [r7, #24]
        break;
 800a57c:	e004      	b.n	800a588 <UART_SetConfig+0x598>
      default:
        pclk = 0U;
 800a57e:	2300      	movs	r3, #0
 800a580:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a582:	2301      	movs	r3, #1
 800a584:	77bb      	strb	r3, [r7, #30]
        break;
 800a586:	bf00      	nop
    }

    if (pclk != 0U)
 800a588:	69bb      	ldr	r3, [r7, #24]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d018      	beq.n	800a5c0 <UART_SetConfig+0x5d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	685b      	ldr	r3, [r3, #4]
 800a592:	085a      	lsrs	r2, r3, #1
 800a594:	69bb      	ldr	r3, [r7, #24]
 800a596:	441a      	add	r2, r3
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	685b      	ldr	r3, [r3, #4]
 800a59c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5a0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a5a2:	693b      	ldr	r3, [r7, #16]
 800a5a4:	2b0f      	cmp	r3, #15
 800a5a6:	d909      	bls.n	800a5bc <UART_SetConfig+0x5cc>
 800a5a8:	693b      	ldr	r3, [r7, #16]
 800a5aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5ae:	d205      	bcs.n	800a5bc <UART_SetConfig+0x5cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a5b0:	693b      	ldr	r3, [r7, #16]
 800a5b2:	b29a      	uxth	r2, r3
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	60da      	str	r2, [r3, #12]
 800a5ba:	e001      	b.n	800a5c0 <UART_SetConfig+0x5d0>
      }
      else
      {
        ret = HAL_ERROR;
 800a5bc:	2301      	movs	r3, #1
 800a5be:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800a5cc:	7fbb      	ldrb	r3, [r7, #30]
}
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	3720      	adds	r7, #32
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bd80      	pop	{r7, pc}
 800a5d6:	bf00      	nop
 800a5d8:	00f42400 	.word	0x00f42400

0800a5dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b082      	sub	sp, #8
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5e8:	2bff      	cmp	r3, #255	; 0xff
 800a5ea:	d904      	bls.n	800a5f6 <UART_AdvFeatureConfig+0x1a>
 800a5ec:	f640 31e6 	movw	r1, #3046	; 0xbe6
 800a5f0:	488e      	ldr	r0, [pc, #568]	; (800a82c <UART_AdvFeatureConfig+0x250>)
 800a5f2:	f7f8 f84e 	bl	8002692 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5fa:	f003 0301 	and.w	r3, r3, #1
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d018      	beq.n	800a634 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a606:	2b00      	cmp	r3, #0
 800a608:	d009      	beq.n	800a61e <UART_AdvFeatureConfig+0x42>
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a60e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a612:	d004      	beq.n	800a61e <UART_AdvFeatureConfig+0x42>
 800a614:	f640 31eb 	movw	r1, #3051	; 0xbeb
 800a618:	4884      	ldr	r0, [pc, #528]	; (800a82c <UART_AdvFeatureConfig+0x250>)
 800a61a:	f7f8 f83a 	bl	8002692 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	685b      	ldr	r3, [r3, #4]
 800a624:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	430a      	orrs	r2, r1
 800a632:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a638:	f003 0302 	and.w	r3, r3, #2
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d018      	beq.n	800a672 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a644:	2b00      	cmp	r3, #0
 800a646:	d009      	beq.n	800a65c <UART_AdvFeatureConfig+0x80>
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a64c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a650:	d004      	beq.n	800a65c <UART_AdvFeatureConfig+0x80>
 800a652:	f640 31f2 	movw	r1, #3058	; 0xbf2
 800a656:	4875      	ldr	r0, [pc, #468]	; (800a82c <UART_AdvFeatureConfig+0x250>)
 800a658:	f7f8 f81b 	bl	8002692 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	685b      	ldr	r3, [r3, #4]
 800a662:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	430a      	orrs	r2, r1
 800a670:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a676:	f003 0304 	and.w	r3, r3, #4
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d018      	beq.n	800a6b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a682:	2b00      	cmp	r3, #0
 800a684:	d009      	beq.n	800a69a <UART_AdvFeatureConfig+0xbe>
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a68a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a68e:	d004      	beq.n	800a69a <UART_AdvFeatureConfig+0xbe>
 800a690:	f640 31f9 	movw	r1, #3065	; 0xbf9
 800a694:	4865      	ldr	r0, [pc, #404]	; (800a82c <UART_AdvFeatureConfig+0x250>)
 800a696:	f7f7 fffc 	bl	8002692 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	685b      	ldr	r3, [r3, #4]
 800a6a0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	430a      	orrs	r2, r1
 800a6ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6b4:	f003 0308 	and.w	r3, r3, #8
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d018      	beq.n	800a6ee <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d009      	beq.n	800a6d8 <UART_AdvFeatureConfig+0xfc>
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a6cc:	d004      	beq.n	800a6d8 <UART_AdvFeatureConfig+0xfc>
 800a6ce:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800a6d2:	4856      	ldr	r0, [pc, #344]	; (800a82c <UART_AdvFeatureConfig+0x250>)
 800a6d4:	f7f7 ffdd 	bl	8002692 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	685b      	ldr	r3, [r3, #4]
 800a6de:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	430a      	orrs	r2, r1
 800a6ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6f2:	f003 0310 	and.w	r3, r3, #16
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d018      	beq.n	800a72c <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d009      	beq.n	800a716 <UART_AdvFeatureConfig+0x13a>
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a706:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a70a:	d004      	beq.n	800a716 <UART_AdvFeatureConfig+0x13a>
 800a70c:	f640 4107 	movw	r1, #3079	; 0xc07
 800a710:	4846      	ldr	r0, [pc, #280]	; (800a82c <UART_AdvFeatureConfig+0x250>)
 800a712:	f7f7 ffbe 	bl	8002692 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	689b      	ldr	r3, [r3, #8]
 800a71c:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	430a      	orrs	r2, r1
 800a72a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a730:	f003 0320 	and.w	r3, r3, #32
 800a734:	2b00      	cmp	r3, #0
 800a736:	d018      	beq.n	800a76a <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d009      	beq.n	800a754 <UART_AdvFeatureConfig+0x178>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a744:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a748:	d004      	beq.n	800a754 <UART_AdvFeatureConfig+0x178>
 800a74a:	f640 410e 	movw	r1, #3086	; 0xc0e
 800a74e:	4837      	ldr	r0, [pc, #220]	; (800a82c <UART_AdvFeatureConfig+0x250>)
 800a750:	f7f7 ff9f 	bl	8002692 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	689b      	ldr	r3, [r3, #8]
 800a75a:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	430a      	orrs	r2, r1
 800a768:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a76e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a772:	2b00      	cmp	r3, #0
 800a774:	d064      	beq.n	800a840 <UART_AdvFeatureConfig+0x264>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	4a2d      	ldr	r2, [pc, #180]	; (800a830 <UART_AdvFeatureConfig+0x254>)
 800a77c:	4293      	cmp	r3, r2
 800a77e:	d013      	beq.n	800a7a8 <UART_AdvFeatureConfig+0x1cc>
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	4a2b      	ldr	r2, [pc, #172]	; (800a834 <UART_AdvFeatureConfig+0x258>)
 800a786:	4293      	cmp	r3, r2
 800a788:	d00e      	beq.n	800a7a8 <UART_AdvFeatureConfig+0x1cc>
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	4a2a      	ldr	r2, [pc, #168]	; (800a838 <UART_AdvFeatureConfig+0x25c>)
 800a790:	4293      	cmp	r3, r2
 800a792:	d009      	beq.n	800a7a8 <UART_AdvFeatureConfig+0x1cc>
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	4a28      	ldr	r2, [pc, #160]	; (800a83c <UART_AdvFeatureConfig+0x260>)
 800a79a:	4293      	cmp	r3, r2
 800a79c:	d004      	beq.n	800a7a8 <UART_AdvFeatureConfig+0x1cc>
 800a79e:	f640 4115 	movw	r1, #3093	; 0xc15
 800a7a2:	4822      	ldr	r0, [pc, #136]	; (800a82c <UART_AdvFeatureConfig+0x250>)
 800a7a4:	f7f7 ff75 	bl	8002692 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d009      	beq.n	800a7c4 <UART_AdvFeatureConfig+0x1e8>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a7b8:	d004      	beq.n	800a7c4 <UART_AdvFeatureConfig+0x1e8>
 800a7ba:	f640 4116 	movw	r1, #3094	; 0xc16
 800a7be:	481b      	ldr	r0, [pc, #108]	; (800a82c <UART_AdvFeatureConfig+0x250>)
 800a7c0:	f7f7 ff67 	bl	8002692 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	685b      	ldr	r3, [r3, #4]
 800a7ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	430a      	orrs	r2, r1
 800a7d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a7e2:	d12d      	bne.n	800a840 <UART_AdvFeatureConfig+0x264>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d013      	beq.n	800a814 <UART_AdvFeatureConfig+0x238>
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a7f4:	d00e      	beq.n	800a814 <UART_AdvFeatureConfig+0x238>
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a7fe:	d009      	beq.n	800a814 <UART_AdvFeatureConfig+0x238>
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a804:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a808:	d004      	beq.n	800a814 <UART_AdvFeatureConfig+0x238>
 800a80a:	f640 411b 	movw	r1, #3099	; 0xc1b
 800a80e:	4807      	ldr	r0, [pc, #28]	; (800a82c <UART_AdvFeatureConfig+0x250>)
 800a810:	f7f7 ff3f 	bl	8002692 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	685b      	ldr	r3, [r3, #4]
 800a81a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	430a      	orrs	r2, r1
 800a828:	605a      	str	r2, [r3, #4]
 800a82a:	e009      	b.n	800a840 <UART_AdvFeatureConfig+0x264>
 800a82c:	0801645c 	.word	0x0801645c
 800a830:	40011000 	.word	0x40011000
 800a834:	40004400 	.word	0x40004400
 800a838:	40004800 	.word	0x40004800
 800a83c:	40011400 	.word	0x40011400
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d018      	beq.n	800a87e <UART_AdvFeatureConfig+0x2a2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a850:	2b00      	cmp	r3, #0
 800a852:	d009      	beq.n	800a868 <UART_AdvFeatureConfig+0x28c>
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a858:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a85c:	d004      	beq.n	800a868 <UART_AdvFeatureConfig+0x28c>
 800a85e:	f640 4123 	movw	r1, #3107	; 0xc23
 800a862:	4809      	ldr	r0, [pc, #36]	; (800a888 <UART_AdvFeatureConfig+0x2ac>)
 800a864:	f7f7 ff15 	bl	8002692 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	685b      	ldr	r3, [r3, #4]
 800a86e:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	430a      	orrs	r2, r1
 800a87c:	605a      	str	r2, [r3, #4]
  }
}
 800a87e:	bf00      	nop
 800a880:	3708      	adds	r7, #8
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}
 800a886:	bf00      	nop
 800a888:	0801645c 	.word	0x0801645c

0800a88c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b086      	sub	sp, #24
 800a890:	af02      	add	r7, sp, #8
 800a892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2200      	movs	r2, #0
 800a898:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a89c:	f7f8 fd2c 	bl	80032f8 <HAL_GetTick>
 800a8a0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f003 0308 	and.w	r3, r3, #8
 800a8ac:	2b08      	cmp	r3, #8
 800a8ae:	d10e      	bne.n	800a8ce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a8b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a8b4:	9300      	str	r3, [sp, #0]
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a8be:	6878      	ldr	r0, [r7, #4]
 800a8c0:	f000 f81b 	bl	800a8fa <UART_WaitOnFlagUntilTimeout>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d001      	beq.n	800a8ce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a8ca:	2303      	movs	r3, #3
 800a8cc:	e011      	b.n	800a8f2 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	2220      	movs	r2, #32
 800a8d2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2220      	movs	r2, #32
 800a8d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800a8f0:	2300      	movs	r3, #0
}
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	3710      	adds	r7, #16
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}

0800a8fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a8fa:	b580      	push	{r7, lr}
 800a8fc:	b09c      	sub	sp, #112	; 0x70
 800a8fe:	af00      	add	r7, sp, #0
 800a900:	60f8      	str	r0, [r7, #12]
 800a902:	60b9      	str	r1, [r7, #8]
 800a904:	603b      	str	r3, [r7, #0]
 800a906:	4613      	mov	r3, r2
 800a908:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a90a:	e0a7      	b.n	800aa5c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a90c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a90e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a912:	f000 80a3 	beq.w	800aa5c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a916:	f7f8 fcef 	bl	80032f8 <HAL_GetTick>
 800a91a:	4602      	mov	r2, r0
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	1ad3      	subs	r3, r2, r3
 800a920:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a922:	429a      	cmp	r2, r3
 800a924:	d302      	bcc.n	800a92c <UART_WaitOnFlagUntilTimeout+0x32>
 800a926:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d13f      	bne.n	800a9ac <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a932:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a934:	e853 3f00 	ldrex	r3, [r3]
 800a938:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a93a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a93c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a940:	667b      	str	r3, [r7, #100]	; 0x64
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	461a      	mov	r2, r3
 800a948:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a94a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a94c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a94e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a950:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a952:	e841 2300 	strex	r3, r2, [r1]
 800a956:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a958:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d1e6      	bne.n	800a92c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	3308      	adds	r3, #8
 800a964:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a968:	e853 3f00 	ldrex	r3, [r3]
 800a96c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a96e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a970:	f023 0301 	bic.w	r3, r3, #1
 800a974:	663b      	str	r3, [r7, #96]	; 0x60
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	3308      	adds	r3, #8
 800a97c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a97e:	64ba      	str	r2, [r7, #72]	; 0x48
 800a980:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a982:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a984:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a986:	e841 2300 	strex	r3, r2, [r1]
 800a98a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a98c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d1e5      	bne.n	800a95e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	2220      	movs	r2, #32
 800a996:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	2220      	movs	r2, #32
 800a99c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800a9a8:	2303      	movs	r3, #3
 800a9aa:	e068      	b.n	800aa7e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	f003 0304 	and.w	r3, r3, #4
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d050      	beq.n	800aa5c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	69db      	ldr	r3, [r3, #28]
 800a9c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a9c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a9c8:	d148      	bne.n	800aa5c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a9d2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9dc:	e853 3f00 	ldrex	r3, [r3]
 800a9e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a9e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a9e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	461a      	mov	r2, r3
 800a9f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9f2:	637b      	str	r3, [r7, #52]	; 0x34
 800a9f4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a9f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a9fa:	e841 2300 	strex	r3, r2, [r1]
 800a9fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800aa00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d1e6      	bne.n	800a9d4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	3308      	adds	r3, #8
 800aa0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa0e:	697b      	ldr	r3, [r7, #20]
 800aa10:	e853 3f00 	ldrex	r3, [r3]
 800aa14:	613b      	str	r3, [r7, #16]
   return(result);
 800aa16:	693b      	ldr	r3, [r7, #16]
 800aa18:	f023 0301 	bic.w	r3, r3, #1
 800aa1c:	66bb      	str	r3, [r7, #104]	; 0x68
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	3308      	adds	r3, #8
 800aa24:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800aa26:	623a      	str	r2, [r7, #32]
 800aa28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa2a:	69f9      	ldr	r1, [r7, #28]
 800aa2c:	6a3a      	ldr	r2, [r7, #32]
 800aa2e:	e841 2300 	strex	r3, r2, [r1]
 800aa32:	61bb      	str	r3, [r7, #24]
   return(result);
 800aa34:	69bb      	ldr	r3, [r7, #24]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d1e5      	bne.n	800aa06 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	2220      	movs	r2, #32
 800aa3e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	2220      	movs	r2, #32
 800aa44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	2220      	movs	r2, #32
 800aa4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	2200      	movs	r2, #0
 800aa54:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800aa58:	2303      	movs	r3, #3
 800aa5a:	e010      	b.n	800aa7e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	69da      	ldr	r2, [r3, #28]
 800aa62:	68bb      	ldr	r3, [r7, #8]
 800aa64:	4013      	ands	r3, r2
 800aa66:	68ba      	ldr	r2, [r7, #8]
 800aa68:	429a      	cmp	r2, r3
 800aa6a:	bf0c      	ite	eq
 800aa6c:	2301      	moveq	r3, #1
 800aa6e:	2300      	movne	r3, #0
 800aa70:	b2db      	uxtb	r3, r3
 800aa72:	461a      	mov	r2, r3
 800aa74:	79fb      	ldrb	r3, [r7, #7]
 800aa76:	429a      	cmp	r2, r3
 800aa78:	f43f af48 	beq.w	800a90c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aa7c:	2300      	movs	r3, #0
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	3770      	adds	r7, #112	; 0x70
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}

0800aa86 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aa86:	b480      	push	{r7}
 800aa88:	b095      	sub	sp, #84	; 0x54
 800aa8a:	af00      	add	r7, sp, #0
 800aa8c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa96:	e853 3f00 	ldrex	r3, [r3]
 800aa9a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800aa9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa9e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aaa2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	461a      	mov	r2, r3
 800aaaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aaac:	643b      	str	r3, [r7, #64]	; 0x40
 800aaae:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aab0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800aab2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aab4:	e841 2300 	strex	r3, r2, [r1]
 800aab8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aaba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d1e6      	bne.n	800aa8e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	3308      	adds	r3, #8
 800aac6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aac8:	6a3b      	ldr	r3, [r7, #32]
 800aaca:	e853 3f00 	ldrex	r3, [r3]
 800aace:	61fb      	str	r3, [r7, #28]
   return(result);
 800aad0:	69fb      	ldr	r3, [r7, #28]
 800aad2:	f023 0301 	bic.w	r3, r3, #1
 800aad6:	64bb      	str	r3, [r7, #72]	; 0x48
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	3308      	adds	r3, #8
 800aade:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aae0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800aae2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aae4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aae6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aae8:	e841 2300 	strex	r3, r2, [r1]
 800aaec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aaee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d1e5      	bne.n	800aac0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aaf8:	2b01      	cmp	r3, #1
 800aafa:	d118      	bne.n	800ab2e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	e853 3f00 	ldrex	r3, [r3]
 800ab08:	60bb      	str	r3, [r7, #8]
   return(result);
 800ab0a:	68bb      	ldr	r3, [r7, #8]
 800ab0c:	f023 0310 	bic.w	r3, r3, #16
 800ab10:	647b      	str	r3, [r7, #68]	; 0x44
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	461a      	mov	r2, r3
 800ab18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab1a:	61bb      	str	r3, [r7, #24]
 800ab1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab1e:	6979      	ldr	r1, [r7, #20]
 800ab20:	69ba      	ldr	r2, [r7, #24]
 800ab22:	e841 2300 	strex	r3, r2, [r1]
 800ab26:	613b      	str	r3, [r7, #16]
   return(result);
 800ab28:	693b      	ldr	r3, [r7, #16]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d1e6      	bne.n	800aafc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2220      	movs	r2, #32
 800ab32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2200      	movs	r2, #0
 800ab3a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2200      	movs	r2, #0
 800ab40:	669a      	str	r2, [r3, #104]	; 0x68
}
 800ab42:	bf00      	nop
 800ab44:	3754      	adds	r7, #84	; 0x54
 800ab46:	46bd      	mov	sp, r7
 800ab48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4c:	4770      	bx	lr

0800ab4e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ab4e:	b580      	push	{r7, lr}
 800ab50:	b084      	sub	sp, #16
 800ab52:	af00      	add	r7, sp, #0
 800ab54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab5a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	2200      	movs	r2, #0
 800ab60:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	2200      	movs	r2, #0
 800ab68:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ab6c:	68f8      	ldr	r0, [r7, #12]
 800ab6e:	f7ff fa29 	bl	8009fc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab72:	bf00      	nop
 800ab74:	3710      	adds	r7, #16
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}

0800ab7a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ab7a:	b580      	push	{r7, lr}
 800ab7c:	b088      	sub	sp, #32
 800ab7e:	af00      	add	r7, sp, #0
 800ab80:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	e853 3f00 	ldrex	r3, [r3]
 800ab8e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab96:	61fb      	str	r3, [r7, #28]
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	461a      	mov	r2, r3
 800ab9e:	69fb      	ldr	r3, [r7, #28]
 800aba0:	61bb      	str	r3, [r7, #24]
 800aba2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aba4:	6979      	ldr	r1, [r7, #20]
 800aba6:	69ba      	ldr	r2, [r7, #24]
 800aba8:	e841 2300 	strex	r3, r2, [r1]
 800abac:	613b      	str	r3, [r7, #16]
   return(result);
 800abae:	693b      	ldr	r3, [r7, #16]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d1e6      	bne.n	800ab82 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2220      	movs	r2, #32
 800abb8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2200      	movs	r2, #0
 800abbe:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800abc0:	6878      	ldr	r0, [r7, #4]
 800abc2:	f7ff f9f5 	bl	8009fb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800abc6:	bf00      	nop
 800abc8:	3720      	adds	r7, #32
 800abca:	46bd      	mov	sp, r7
 800abcc:	bd80      	pop	{r7, pc}

0800abce <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 800abce:	b580      	push	{r7, lr}
 800abd0:	b084      	sub	sp, #16
 800abd2:	af00      	add	r7, sp, #0
 800abd4:	6078      	str	r0, [r7, #4]
 800abd6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800abd8:	2300      	movs	r3, #0
 800abda:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 800abdc:	6839      	ldr	r1, [r7, #0]
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f001 fd10 	bl	800c604 <VL53L0X_get_offset_calibration_data_micro_meter>
 800abe4:	4603      	mov	r3, r0
 800abe6:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 800abe8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800abec:	4618      	mov	r0, r3
 800abee:	3710      	adds	r7, #16
 800abf0:	46bd      	mov	sp, r7
 800abf2:	bd80      	pop	{r7, pc}

0800abf4 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 800abf4:	b5b0      	push	{r4, r5, r7, lr}
 800abf6:	b096      	sub	sp, #88	; 0x58
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800abfc:	2300      	movs	r3, #0
 800abfe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 800ac02:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d107      	bne.n	800ac1a <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	2188      	movs	r1, #136	; 0x88
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f004 ff2e 	bl	800fa70 <VL53L0X_WrByte>
 800ac14:	4603      	mov	r3, r0
 800ac16:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ac28:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800ac32:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	4a9e      	ldr	r2, [pc, #632]	; (800aeb4 <VL53L0X_DataInit+0x2c0>)
 800ac3a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	4a9d      	ldr	r2, [pc, #628]	; (800aeb8 <VL53L0X_DataInit+0x2c4>)
 800ac42:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2200      	movs	r2, #0
 800ac4a:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800ac4c:	f107 0310 	add.w	r3, r7, #16
 800ac50:	4619      	mov	r1, r3
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	f000 fac2 	bl	800b1dc <VL53L0X_GetDeviceParameters>
 800ac58:	4603      	mov	r3, r0
 800ac5a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 800ac5e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d112      	bne.n	800ac8c <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 800ac66:	2300      	movs	r3, #0
 800ac68:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	f103 0410 	add.w	r4, r3, #16
 800ac74:	f107 0510 	add.w	r5, r7, #16
 800ac78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ac7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ac7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ac7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ac80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ac82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ac84:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800ac88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2264      	movs	r2, #100	; 0x64
 800ac90:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	f44f 7261 	mov.w	r2, #900	; 0x384
 800ac9a:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800aca4:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800acae:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2201      	movs	r2, #1
 800acb6:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800acba:	2201      	movs	r2, #1
 800acbc:	2180      	movs	r1, #128	; 0x80
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f004 fed6 	bl	800fa70 <VL53L0X_WrByte>
 800acc4:	4603      	mov	r3, r0
 800acc6:	461a      	mov	r2, r3
 800acc8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800accc:	4313      	orrs	r3, r2
 800acce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800acd2:	2201      	movs	r2, #1
 800acd4:	21ff      	movs	r1, #255	; 0xff
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	f004 feca 	bl	800fa70 <VL53L0X_WrByte>
 800acdc:	4603      	mov	r3, r0
 800acde:	461a      	mov	r2, r3
 800ace0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ace4:	4313      	orrs	r3, r2
 800ace6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800acea:	2200      	movs	r2, #0
 800acec:	2100      	movs	r1, #0
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f004 febe 	bl	800fa70 <VL53L0X_WrByte>
 800acf4:	4603      	mov	r3, r0
 800acf6:	461a      	mov	r2, r3
 800acf8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800acfc:	4313      	orrs	r3, r2
 800acfe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 800ad02:	f107 030f 	add.w	r3, r7, #15
 800ad06:	461a      	mov	r2, r3
 800ad08:	2191      	movs	r1, #145	; 0x91
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	f004 ff32 	bl	800fb74 <VL53L0X_RdByte>
 800ad10:	4603      	mov	r3, r0
 800ad12:	461a      	mov	r2, r3
 800ad14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ad18:	4313      	orrs	r3, r2
 800ad1a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 800ad1e:	7bfa      	ldrb	r2, [r7, #15]
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800ad26:	2201      	movs	r2, #1
 800ad28:	2100      	movs	r1, #0
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f004 fea0 	bl	800fa70 <VL53L0X_WrByte>
 800ad30:	4603      	mov	r3, r0
 800ad32:	461a      	mov	r2, r3
 800ad34:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ad38:	4313      	orrs	r3, r2
 800ad3a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800ad3e:	2200      	movs	r2, #0
 800ad40:	21ff      	movs	r1, #255	; 0xff
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f004 fe94 	bl	800fa70 <VL53L0X_WrByte>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	461a      	mov	r2, r3
 800ad4c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ad50:	4313      	orrs	r3, r2
 800ad52:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800ad56:	2200      	movs	r2, #0
 800ad58:	2180      	movs	r1, #128	; 0x80
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	f004 fe88 	bl	800fa70 <VL53L0X_WrByte>
 800ad60:	4603      	mov	r3, r0
 800ad62:	461a      	mov	r2, r3
 800ad64:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ad68:	4313      	orrs	r3, r2
 800ad6a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800ad6e:	2300      	movs	r3, #0
 800ad70:	653b      	str	r3, [r7, #80]	; 0x50
 800ad72:	e014      	b.n	800ad9e <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 800ad74:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d114      	bne.n	800ada6 <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 800ad7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad7e:	b29b      	uxth	r3, r3
 800ad80:	2201      	movs	r2, #1
 800ad82:	4619      	mov	r1, r3
 800ad84:	6878      	ldr	r0, [r7, #4]
 800ad86:	f000 fd4d 	bl	800b824 <VL53L0X_SetLimitCheckEnable>
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	461a      	mov	r2, r3
 800ad8e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ad92:	4313      	orrs	r3, r2
 800ad94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800ad98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad9a:	3301      	adds	r3, #1
 800ad9c:	653b      	str	r3, [r7, #80]	; 0x50
 800ad9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ada0:	2b05      	cmp	r3, #5
 800ada2:	dde7      	ble.n	800ad74 <VL53L0X_DataInit+0x180>
 800ada4:	e000      	b.n	800ada8 <VL53L0X_DataInit+0x1b4>
		else
			break;
 800ada6:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 800ada8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800adac:	2b00      	cmp	r3, #0
 800adae:	d107      	bne.n	800adc0 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800adb0:	2200      	movs	r2, #0
 800adb2:	2102      	movs	r1, #2
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f000 fd35 	bl	800b824 <VL53L0X_SetLimitCheckEnable>
 800adba:	4603      	mov	r3, r0
 800adbc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800adc0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d107      	bne.n	800add8 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800adc8:	2200      	movs	r2, #0
 800adca:	2103      	movs	r1, #3
 800adcc:	6878      	ldr	r0, [r7, #4]
 800adce:	f000 fd29 	bl	800b824 <VL53L0X_SetLimitCheckEnable>
 800add2:	4603      	mov	r3, r0
 800add4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800add8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800addc:	2b00      	cmp	r3, #0
 800adde:	d107      	bne.n	800adf0 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800ade0:	2200      	movs	r2, #0
 800ade2:	2104      	movs	r1, #4
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	f000 fd1d 	bl	800b824 <VL53L0X_SetLimitCheckEnable>
 800adea:	4603      	mov	r3, r0
 800adec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800adf0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d107      	bne.n	800ae08 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800adf8:	2200      	movs	r2, #0
 800adfa:	2105      	movs	r1, #5
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	f000 fd11 	bl	800b824 <VL53L0X_SetLimitCheckEnable>
 800ae02:	4603      	mov	r3, r0
 800ae04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 800ae08:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d108      	bne.n	800ae22 <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800ae10:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 800ae14:	2100      	movs	r1, #0
 800ae16:	6878      	ldr	r0, [r7, #4]
 800ae18:	f000 fdb4 	bl	800b984 <VL53L0X_SetLimitCheckValue>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800ae22:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d108      	bne.n	800ae3c <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800ae2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800ae2e:	2101      	movs	r1, #1
 800ae30:	6878      	ldr	r0, [r7, #4]
 800ae32:	f000 fda7 	bl	800b984 <VL53L0X_SetLimitCheckValue>
 800ae36:	4603      	mov	r3, r0
 800ae38:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ae3c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d108      	bne.n	800ae56 <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800ae44:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 800ae48:	2102      	movs	r1, #2
 800ae4a:	6878      	ldr	r0, [r7, #4]
 800ae4c:	f000 fd9a 	bl	800b984 <VL53L0X_SetLimitCheckValue>
 800ae50:	4603      	mov	r3, r0
 800ae52:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ae56:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d107      	bne.n	800ae6e <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800ae5e:	2200      	movs	r2, #0
 800ae60:	2103      	movs	r1, #3
 800ae62:	6878      	ldr	r0, [r7, #4]
 800ae64:	f000 fd8e 	bl	800b984 <VL53L0X_SetLimitCheckValue>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ae6e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d10f      	bne.n	800ae96 <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	22ff      	movs	r2, #255	; 0xff
 800ae7a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800ae7e:	22ff      	movs	r2, #255	; 0xff
 800ae80:	2101      	movs	r1, #1
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	f004 fdf4 	bl	800fa70 <VL53L0X_WrByte>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2201      	movs	r2, #1
 800ae92:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 800ae96:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d103      	bne.n	800aea6 <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2200      	movs	r2, #0
 800aea2:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 800aea6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800aeaa:	4618      	mov	r0, r3
 800aeac:	3758      	adds	r7, #88	; 0x58
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bdb0      	pop	{r4, r5, r7, pc}
 800aeb2:	bf00      	nop
 800aeb4:	00016b85 	.word	0x00016b85
 800aeb8:	000970a4 	.word	0x000970a4

0800aebc <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 800aebc:	b5b0      	push	{r4, r5, r7, lr}
 800aebe:	b09e      	sub	sp, #120	; 0x78
 800aec0:	af02      	add	r7, sp, #8
 800aec2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aec4:	2300      	movs	r3, #0
 800aec6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 800aeca:	f107 031c 	add.w	r3, r7, #28
 800aece:	2240      	movs	r2, #64	; 0x40
 800aed0:	2100      	movs	r1, #0
 800aed2:	4618      	mov	r0, r3
 800aed4:	f004 ff34 	bl	800fd40 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 800aed8:	2300      	movs	r3, #0
 800aeda:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 800aedc:	2300      	movs	r3, #0
 800aede:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 800aee0:	2300      	movs	r3, #0
 800aee2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 800aee6:	2300      	movs	r3, #0
 800aee8:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 800aeea:	2300      	movs	r3, #0
 800aeec:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 800aeee:	2300      	movs	r3, #0
 800aef0:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 800aef2:	2300      	movs	r3, #0
 800aef4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 800aef8:	2101      	movs	r1, #1
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	f002 fafc 	bl	800d4f8 <VL53L0X_get_info_from_device>
 800af00:	4603      	mov	r3, r0
 800af02:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 800af0c:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 800af14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 800af18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800af1c:	2b01      	cmp	r3, #1
 800af1e:	d80d      	bhi.n	800af3c <VL53L0X_StaticInit+0x80>
 800af20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800af24:	2b01      	cmp	r3, #1
 800af26:	d102      	bne.n	800af2e <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 800af28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800af2a:	2b20      	cmp	r3, #32
 800af2c:	d806      	bhi.n	800af3c <VL53L0X_StaticInit+0x80>
 800af2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800af32:	2b00      	cmp	r3, #0
 800af34:	d10e      	bne.n	800af54 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 800af36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800af38:	2b0c      	cmp	r3, #12
 800af3a:	d90b      	bls.n	800af54 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 800af3c:	f107 0218 	add.w	r2, r7, #24
 800af40:	f107 0314 	add.w	r3, r7, #20
 800af44:	4619      	mov	r1, r3
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f001 fd58 	bl	800c9fc <VL53L0X_perform_ref_spad_management>
 800af4c:	4603      	mov	r3, r0
 800af4e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800af52:	e009      	b.n	800af68 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 800af54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800af58:	461a      	mov	r2, r3
 800af5a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800af5c:	6878      	ldr	r0, [r7, #4]
 800af5e:	f001 ff59 	bl	800ce14 <VL53L0X_set_reference_spads>
 800af62:	4603      	mov	r3, r0
 800af64:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 800af68:	4b94      	ldr	r3, [pc, #592]	; (800b1bc <VL53L0X_StaticInit+0x300>)
 800af6a:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 800af6c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800af70:	2b00      	cmp	r3, #0
 800af72:	d10f      	bne.n	800af94 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 800af7a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 800af7e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800af82:	2b00      	cmp	r3, #0
 800af84:	d104      	bne.n	800af90 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800af8c:	66bb      	str	r3, [r7, #104]	; 0x68
 800af8e:	e001      	b.n	800af94 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 800af90:	4b8a      	ldr	r3, [pc, #552]	; (800b1bc <VL53L0X_StaticInit+0x300>)
 800af92:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 800af94:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d106      	bne.n	800afaa <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 800af9c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f003 fe50 	bl	800ec44 <VL53L0X_load_tuning_settings>
 800afa4:	4603      	mov	r3, r0
 800afa6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 800afaa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d10a      	bne.n	800afc8 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 800afb2:	2300      	movs	r3, #0
 800afb4:	9300      	str	r3, [sp, #0]
 800afb6:	2304      	movs	r3, #4
 800afb8:	2200      	movs	r2, #0
 800afba:	2100      	movs	r1, #0
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	f001 f909 	bl	800c1d4 <VL53L0X_SetGpioConfig>
 800afc2:	4603      	mov	r3, r0
 800afc4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800afc8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d121      	bne.n	800b014 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800afd0:	2201      	movs	r2, #1
 800afd2:	21ff      	movs	r1, #255	; 0xff
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	f004 fd4b 	bl	800fa70 <VL53L0X_WrByte>
 800afda:	4603      	mov	r3, r0
 800afdc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 800afe0:	f107 031a 	add.w	r3, r7, #26
 800afe4:	461a      	mov	r2, r3
 800afe6:	2184      	movs	r1, #132	; 0x84
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	f004 fded 	bl	800fbc8 <VL53L0X_RdWord>
 800afee:	4603      	mov	r3, r0
 800aff0:	461a      	mov	r2, r3
 800aff2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800aff6:	4313      	orrs	r3, r2
 800aff8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800affc:	2200      	movs	r2, #0
 800affe:	21ff      	movs	r1, #255	; 0xff
 800b000:	6878      	ldr	r0, [r7, #4]
 800b002:	f004 fd35 	bl	800fa70 <VL53L0X_WrByte>
 800b006:	4603      	mov	r3, r0
 800b008:	461a      	mov	r2, r3
 800b00a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b00e:	4313      	orrs	r3, r2
 800b010:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b014:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d105      	bne.n	800b028 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 800b01c:	8b7b      	ldrh	r3, [r7, #26]
 800b01e:	011b      	lsls	r3, r3, #4
 800b020:	461a      	mov	r2, r3
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 800b028:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d108      	bne.n	800b042 <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800b030:	f107 031c 	add.w	r3, r7, #28
 800b034:	4619      	mov	r1, r3
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f000 f8d0 	bl	800b1dc <VL53L0X_GetDeviceParameters>
 800b03c:	4603      	mov	r3, r0
 800b03e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 800b042:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b046:	2b00      	cmp	r3, #0
 800b048:	d110      	bne.n	800b06c <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 800b04a:	f107 0319 	add.w	r3, r7, #25
 800b04e:	4619      	mov	r1, r3
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	f000 f992 	bl	800b37a <VL53L0X_GetFractionEnable>
 800b056:	4603      	mov	r3, r0
 800b058:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 800b05c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b060:	2b00      	cmp	r3, #0
 800b062:	d103      	bne.n	800b06c <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 800b064:	7e7a      	ldrb	r2, [r7, #25]
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 800b06c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b070:	2b00      	cmp	r3, #0
 800b072:	d10e      	bne.n	800b092 <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f103 0410 	add.w	r4, r3, #16
 800b07a:	f107 051c 	add.w	r5, r7, #28
 800b07e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b080:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b082:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b084:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b086:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b088:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b08a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800b08e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 800b092:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b096:	2b00      	cmp	r3, #0
 800b098:	d111      	bne.n	800b0be <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 800b09a:	f107 0319 	add.w	r3, r7, #25
 800b09e:	461a      	mov	r2, r3
 800b0a0:	2101      	movs	r1, #1
 800b0a2:	6878      	ldr	r0, [r7, #4]
 800b0a4:	f004 fd66 	bl	800fb74 <VL53L0X_RdByte>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 800b0ae:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d103      	bne.n	800b0be <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 800b0b6:	7e7a      	ldrb	r2, [r7, #25]
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 800b0be:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d107      	bne.n	800b0d6 <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	2100      	movs	r1, #0
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	f000 f9ca 	bl	800b464 <VL53L0X_SetSequenceStepEnable>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800b0d6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d107      	bne.n	800b0ee <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800b0de:	2200      	movs	r2, #0
 800b0e0:	2102      	movs	r1, #2
 800b0e2:	6878      	ldr	r0, [r7, #4]
 800b0e4:	f000 f9be 	bl	800b464 <VL53L0X_SetSequenceStepEnable>
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 800b0ee:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d103      	bne.n	800b0fe <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2203      	movs	r2, #3
 800b0fa:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800b0fe:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b102:	2b00      	cmp	r3, #0
 800b104:	d109      	bne.n	800b11a <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 800b106:	f107 0313 	add.w	r3, r7, #19
 800b10a:	461a      	mov	r2, r3
 800b10c:	2100      	movs	r1, #0
 800b10e:	6878      	ldr	r0, [r7, #4]
 800b110:	f000 f990 	bl	800b434 <VL53L0X_GetVcselPulsePeriod>
 800b114:	4603      	mov	r3, r0
 800b116:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b11a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d103      	bne.n	800b12a <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b122:	7cfa      	ldrb	r2, [r7, #19]
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800b12a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d109      	bne.n	800b146 <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 800b132:	f107 0313 	add.w	r3, r7, #19
 800b136:	461a      	mov	r2, r3
 800b138:	2101      	movs	r1, #1
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f000 f97a 	bl	800b434 <VL53L0X_GetVcselPulsePeriod>
 800b140:	4603      	mov	r3, r0
 800b142:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b146:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d103      	bne.n	800b156 <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b14e:	7cfa      	ldrb	r2, [r7, #19]
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800b156:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d109      	bne.n	800b172 <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 800b15e:	f107 030c 	add.w	r3, r7, #12
 800b162:	461a      	mov	r2, r3
 800b164:	2103      	movs	r1, #3
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	f002 ff48 	bl	800dffc <get_sequence_step_timeout>
 800b16c:	4603      	mov	r3, r0
 800b16e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b172:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b176:	2b00      	cmp	r3, #0
 800b178:	d103      	bne.n	800b182 <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b17a:	68fa      	ldr	r2, [r7, #12]
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800b182:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b186:	2b00      	cmp	r3, #0
 800b188:	d109      	bne.n	800b19e <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 800b18a:	f107 030c 	add.w	r3, r7, #12
 800b18e:	461a      	mov	r2, r3
 800b190:	2104      	movs	r1, #4
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f002 ff32 	bl	800dffc <get_sequence_step_timeout>
 800b198:	4603      	mov	r3, r0
 800b19a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b19e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d103      	bne.n	800b1ae <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b1a6:	68fa      	ldr	r2, [r7, #12]
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b1ae:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	3770      	adds	r7, #112	; 0x70
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bdb0      	pop	{r4, r5, r7, pc}
 800b1ba:	bf00      	nop
 800b1bc:	2000017c 	.word	0x2000017c

0800b1c0 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 800b1c0:	b480      	push	{r7}
 800b1c2:	b085      	sub	sp, #20
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 800b1c8:	239d      	movs	r3, #157	; 0x9d
 800b1ca:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 800b1cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	3714      	adds	r7, #20
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1da:	4770      	bx	lr

0800b1dc <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b084      	sub	sp, #16
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
 800b1e4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	4619      	mov	r1, r3
 800b1ee:	6878      	ldr	r0, [r7, #4]
 800b1f0:	f000 f8b0 	bl	800b354 <VL53L0X_GetDeviceMode>
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800b1f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d107      	bne.n	800b210 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	3308      	adds	r3, #8
 800b204:	4619      	mov	r1, r3
 800b206:	6878      	ldr	r0, [r7, #4]
 800b208:	f000 fa78 	bl	800b6fc <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 800b20c:	4603      	mov	r3, r0
 800b20e:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 800b210:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d102      	bne.n	800b21e <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	2200      	movs	r2, #0
 800b21c:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 800b21e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d107      	bne.n	800b236 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	3310      	adds	r3, #16
 800b22a:	4619      	mov	r1, r3
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f000 faae 	bl	800b78e <VL53L0X_GetXTalkCompensationRateMegaCps>
 800b232:	4603      	mov	r3, r0
 800b234:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 800b236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d107      	bne.n	800b24e <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	3314      	adds	r3, #20
 800b242:	4619      	mov	r1, r3
 800b244:	6878      	ldr	r0, [r7, #4]
 800b246:	f7ff fcc2 	bl	800abce <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 800b24a:	4603      	mov	r3, r0
 800b24c:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 800b24e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d134      	bne.n	800b2c0 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800b256:	2300      	movs	r3, #0
 800b258:	60bb      	str	r3, [r7, #8]
 800b25a:	e02a      	b.n	800b2b2 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800b25c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d12a      	bne.n	800b2ba <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	b299      	uxth	r1, r3
 800b268:	68bb      	ldr	r3, [r7, #8]
 800b26a:	3308      	adds	r3, #8
 800b26c:	009b      	lsls	r3, r3, #2
 800b26e:	683a      	ldr	r2, [r7, #0]
 800b270:	4413      	add	r3, r2
 800b272:	3304      	adds	r3, #4
 800b274:	461a      	mov	r2, r3
 800b276:	6878      	ldr	r0, [r7, #4]
 800b278:	f000 fbe6 	bl	800ba48 <VL53L0X_GetLimitCheckValue>
 800b27c:	4603      	mov	r3, r0
 800b27e:	461a      	mov	r2, r3
 800b280:	7bfb      	ldrb	r3, [r7, #15]
 800b282:	4313      	orrs	r3, r2
 800b284:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800b286:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d117      	bne.n	800b2be <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	b299      	uxth	r1, r3
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	3318      	adds	r3, #24
 800b296:	683a      	ldr	r2, [r7, #0]
 800b298:	4413      	add	r3, r2
 800b29a:	461a      	mov	r2, r3
 800b29c:	6878      	ldr	r0, [r7, #4]
 800b29e:	f000 fb4d 	bl	800b93c <VL53L0X_GetLimitCheckEnable>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	461a      	mov	r2, r3
 800b2a6:	7bfb      	ldrb	r3, [r7, #15]
 800b2a8:	4313      	orrs	r3, r2
 800b2aa:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	3301      	adds	r3, #1
 800b2b0:	60bb      	str	r3, [r7, #8]
 800b2b2:	68bb      	ldr	r3, [r7, #8]
 800b2b4:	2b05      	cmp	r3, #5
 800b2b6:	ddd1      	ble.n	800b25c <VL53L0X_GetDeviceParameters+0x80>
 800b2b8:	e002      	b.n	800b2c0 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 800b2ba:	bf00      	nop
 800b2bc:	e000      	b.n	800b2c0 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 800b2be:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b2c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d107      	bne.n	800b2d8 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 800b2c8:	683b      	ldr	r3, [r7, #0]
 800b2ca:	333c      	adds	r3, #60	; 0x3c
 800b2cc:	4619      	mov	r1, r3
 800b2ce:	6878      	ldr	r0, [r7, #4]
 800b2d0:	f000 fc48 	bl	800bb64 <VL53L0X_GetWrapAroundCheckEnable>
 800b2d4:	4603      	mov	r3, r0
 800b2d6:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 800b2d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d107      	bne.n	800b2f0 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 800b2e0:	683b      	ldr	r3, [r7, #0]
 800b2e2:	3304      	adds	r3, #4
 800b2e4:	4619      	mov	r1, r3
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	f000 f879 	bl	800b3de <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b2f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	3710      	adds	r7, #16
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bd80      	pop	{r7, pc}

0800b2fc <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 800b2fc:	b480      	push	{r7}
 800b2fe:	b085      	sub	sp, #20
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
 800b304:	460b      	mov	r3, r1
 800b306:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b308:	2300      	movs	r3, #0
 800b30a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 800b30c:	78fb      	ldrb	r3, [r7, #3]
 800b30e:	2b15      	cmp	r3, #21
 800b310:	bf8c      	ite	hi
 800b312:	2201      	movhi	r2, #1
 800b314:	2200      	movls	r2, #0
 800b316:	b2d2      	uxtb	r2, r2
 800b318:	2a00      	cmp	r2, #0
 800b31a:	d10e      	bne.n	800b33a <VL53L0X_SetDeviceMode+0x3e>
 800b31c:	2201      	movs	r2, #1
 800b31e:	409a      	lsls	r2, r3
 800b320:	4b0b      	ldr	r3, [pc, #44]	; (800b350 <VL53L0X_SetDeviceMode+0x54>)
 800b322:	4013      	ands	r3, r2
 800b324:	2b00      	cmp	r3, #0
 800b326:	bf14      	ite	ne
 800b328:	2301      	movne	r3, #1
 800b32a:	2300      	moveq	r3, #0
 800b32c:	b2db      	uxtb	r3, r3
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d003      	beq.n	800b33a <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	78fa      	ldrb	r2, [r7, #3]
 800b336:	741a      	strb	r2, [r3, #16]
		break;
 800b338:	e001      	b.n	800b33e <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800b33a:	23f8      	movs	r3, #248	; 0xf8
 800b33c:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b33e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b342:	4618      	mov	r0, r3
 800b344:	3714      	adds	r7, #20
 800b346:	46bd      	mov	sp, r7
 800b348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34c:	4770      	bx	lr
 800b34e:	bf00      	nop
 800b350:	0030000b 	.word	0x0030000b

0800b354 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 800b354:	b480      	push	{r7}
 800b356:	b085      	sub	sp, #20
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
 800b35c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b35e:	2300      	movs	r3, #0
 800b360:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	7c1a      	ldrb	r2, [r3, #16]
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800b36a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b36e:	4618      	mov	r0, r3
 800b370:	3714      	adds	r7, #20
 800b372:	46bd      	mov	sp, r7
 800b374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b378:	4770      	bx	lr

0800b37a <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 800b37a:	b580      	push	{r7, lr}
 800b37c:	b084      	sub	sp, #16
 800b37e:	af00      	add	r7, sp, #0
 800b380:	6078      	str	r0, [r7, #4]
 800b382:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b384:	2300      	movs	r3, #0
 800b386:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 800b388:	683a      	ldr	r2, [r7, #0]
 800b38a:	2109      	movs	r1, #9
 800b38c:	6878      	ldr	r0, [r7, #4]
 800b38e:	f004 fbf1 	bl	800fb74 <VL53L0X_RdByte>
 800b392:	4603      	mov	r3, r0
 800b394:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800b396:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d106      	bne.n	800b3ac <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 800b39e:	683b      	ldr	r3, [r7, #0]
 800b3a0:	781b      	ldrb	r3, [r3, #0]
 800b3a2:	f003 0301 	and.w	r3, r3, #1
 800b3a6:	b2da      	uxtb	r2, r3
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800b3ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	3710      	adds	r7, #16
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd80      	pop	{r7, pc}

0800b3b8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b084      	sub	sp, #16
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
 800b3c0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 800b3c6:	6839      	ldr	r1, [r7, #0]
 800b3c8:	6878      	ldr	r0, [r7, #4]
 800b3ca:	f003 faaa 	bl	800e922 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 800b3d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	3710      	adds	r7, #16
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bd80      	pop	{r7, pc}

0800b3de <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800b3de:	b580      	push	{r7, lr}
 800b3e0:	b084      	sub	sp, #16
 800b3e2:	af00      	add	r7, sp, #0
 800b3e4:	6078      	str	r0, [r7, #4]
 800b3e6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 800b3ec:	6839      	ldr	r1, [r7, #0]
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f003 fb77 	bl	800eae2 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 800b3f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	3710      	adds	r7, #16
 800b400:	46bd      	mov	sp, r7
 800b402:	bd80      	pop	{r7, pc}

0800b404 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b084      	sub	sp, #16
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
 800b40c:	460b      	mov	r3, r1
 800b40e:	70fb      	strb	r3, [r7, #3]
 800b410:	4613      	mov	r3, r2
 800b412:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b414:	2300      	movs	r3, #0
 800b416:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 800b418:	78ba      	ldrb	r2, [r7, #2]
 800b41a:	78fb      	ldrb	r3, [r7, #3]
 800b41c:	4619      	mov	r1, r3
 800b41e:	6878      	ldr	r0, [r7, #4]
 800b420:	f002 ffbf 	bl	800e3a2 <VL53L0X_set_vcsel_pulse_period>
 800b424:	4603      	mov	r3, r0
 800b426:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800b428:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b42c:	4618      	mov	r0, r3
 800b42e:	3710      	adds	r7, #16
 800b430:	46bd      	mov	sp, r7
 800b432:	bd80      	pop	{r7, pc}

0800b434 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b086      	sub	sp, #24
 800b438:	af00      	add	r7, sp, #0
 800b43a:	60f8      	str	r0, [r7, #12]
 800b43c:	460b      	mov	r3, r1
 800b43e:	607a      	str	r2, [r7, #4]
 800b440:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b442:	2300      	movs	r3, #0
 800b444:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800b446:	7afb      	ldrb	r3, [r7, #11]
 800b448:	687a      	ldr	r2, [r7, #4]
 800b44a:	4619      	mov	r1, r3
 800b44c:	68f8      	ldr	r0, [r7, #12]
 800b44e:	f003 fa31 	bl	800e8b4 <VL53L0X_get_vcsel_pulse_period>
 800b452:	4603      	mov	r3, r0
 800b454:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800b456:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b45a:	4618      	mov	r0, r3
 800b45c:	3718      	adds	r7, #24
 800b45e:	46bd      	mov	sp, r7
 800b460:	bd80      	pop	{r7, pc}
	...

0800b464 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b086      	sub	sp, #24
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
 800b46c:	460b      	mov	r3, r1
 800b46e:	70fb      	strb	r3, [r7, #3]
 800b470:	4613      	mov	r3, r2
 800b472:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b474:	2300      	movs	r3, #0
 800b476:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800b478:	2300      	movs	r3, #0
 800b47a:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 800b47c:	2300      	movs	r3, #0
 800b47e:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800b480:	f107 030f 	add.w	r3, r7, #15
 800b484:	461a      	mov	r2, r3
 800b486:	2101      	movs	r1, #1
 800b488:	6878      	ldr	r0, [r7, #4]
 800b48a:	f004 fb73 	bl	800fb74 <VL53L0X_RdByte>
 800b48e:	4603      	mov	r3, r0
 800b490:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 800b492:	7bfb      	ldrb	r3, [r7, #15]
 800b494:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 800b496:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d15a      	bne.n	800b554 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 800b49e:	78bb      	ldrb	r3, [r7, #2]
 800b4a0:	2b01      	cmp	r3, #1
 800b4a2:	d12b      	bne.n	800b4fc <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 800b4a4:	78fb      	ldrb	r3, [r7, #3]
 800b4a6:	2b04      	cmp	r3, #4
 800b4a8:	d825      	bhi.n	800b4f6 <VL53L0X_SetSequenceStepEnable+0x92>
 800b4aa:	a201      	add	r2, pc, #4	; (adr r2, 800b4b0 <VL53L0X_SetSequenceStepEnable+0x4c>)
 800b4ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4b0:	0800b4c5 	.word	0x0800b4c5
 800b4b4:	0800b4cf 	.word	0x0800b4cf
 800b4b8:	0800b4d9 	.word	0x0800b4d9
 800b4bc:	0800b4e3 	.word	0x0800b4e3
 800b4c0:	0800b4ed 	.word	0x0800b4ed
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 800b4c4:	7dbb      	ldrb	r3, [r7, #22]
 800b4c6:	f043 0310 	orr.w	r3, r3, #16
 800b4ca:	75bb      	strb	r3, [r7, #22]
				break;
 800b4cc:	e043      	b.n	800b556 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 800b4ce:	7dbb      	ldrb	r3, [r7, #22]
 800b4d0:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800b4d4:	75bb      	strb	r3, [r7, #22]
				break;
 800b4d6:	e03e      	b.n	800b556 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 800b4d8:	7dbb      	ldrb	r3, [r7, #22]
 800b4da:	f043 0304 	orr.w	r3, r3, #4
 800b4de:	75bb      	strb	r3, [r7, #22]
				break;
 800b4e0:	e039      	b.n	800b556 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 800b4e2:	7dbb      	ldrb	r3, [r7, #22]
 800b4e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4e8:	75bb      	strb	r3, [r7, #22]
				break;
 800b4ea:	e034      	b.n	800b556 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 800b4ec:	7dbb      	ldrb	r3, [r7, #22]
 800b4ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b4f2:	75bb      	strb	r3, [r7, #22]
				break;
 800b4f4:	e02f      	b.n	800b556 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b4f6:	23fc      	movs	r3, #252	; 0xfc
 800b4f8:	75fb      	strb	r3, [r7, #23]
 800b4fa:	e02c      	b.n	800b556 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 800b4fc:	78fb      	ldrb	r3, [r7, #3]
 800b4fe:	2b04      	cmp	r3, #4
 800b500:	d825      	bhi.n	800b54e <VL53L0X_SetSequenceStepEnable+0xea>
 800b502:	a201      	add	r2, pc, #4	; (adr r2, 800b508 <VL53L0X_SetSequenceStepEnable+0xa4>)
 800b504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b508:	0800b51d 	.word	0x0800b51d
 800b50c:	0800b527 	.word	0x0800b527
 800b510:	0800b531 	.word	0x0800b531
 800b514:	0800b53b 	.word	0x0800b53b
 800b518:	0800b545 	.word	0x0800b545
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 800b51c:	7dbb      	ldrb	r3, [r7, #22]
 800b51e:	f023 0310 	bic.w	r3, r3, #16
 800b522:	75bb      	strb	r3, [r7, #22]
				break;
 800b524:	e017      	b.n	800b556 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 800b526:	7dbb      	ldrb	r3, [r7, #22]
 800b528:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800b52c:	75bb      	strb	r3, [r7, #22]
				break;
 800b52e:	e012      	b.n	800b556 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 800b530:	7dbb      	ldrb	r3, [r7, #22]
 800b532:	f023 0304 	bic.w	r3, r3, #4
 800b536:	75bb      	strb	r3, [r7, #22]
				break;
 800b538:	e00d      	b.n	800b556 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 800b53a:	7dbb      	ldrb	r3, [r7, #22]
 800b53c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b540:	75bb      	strb	r3, [r7, #22]
				break;
 800b542:	e008      	b.n	800b556 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 800b544:	7dbb      	ldrb	r3, [r7, #22]
 800b546:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b54a:	75bb      	strb	r3, [r7, #22]
				break;
 800b54c:	e003      	b.n	800b556 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b54e:	23fc      	movs	r3, #252	; 0xfc
 800b550:	75fb      	strb	r3, [r7, #23]
 800b552:	e000      	b.n	800b556 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 800b554:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 800b556:	7bfb      	ldrb	r3, [r7, #15]
 800b558:	7dba      	ldrb	r2, [r7, #22]
 800b55a:	429a      	cmp	r2, r3
 800b55c:	d01e      	beq.n	800b59c <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 800b55e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d107      	bne.n	800b576 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 800b566:	7dbb      	ldrb	r3, [r7, #22]
 800b568:	461a      	mov	r2, r3
 800b56a:	2101      	movs	r1, #1
 800b56c:	6878      	ldr	r0, [r7, #4]
 800b56e:	f004 fa7f 	bl	800fa70 <VL53L0X_WrByte>
 800b572:	4603      	mov	r3, r0
 800b574:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 800b576:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d103      	bne.n	800b586 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	7dba      	ldrb	r2, [r7, #22]
 800b582:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 800b586:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d106      	bne.n	800b59c <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	695b      	ldr	r3, [r3, #20]
 800b592:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800b594:	6939      	ldr	r1, [r7, #16]
 800b596:	6878      	ldr	r0, [r7, #4]
 800b598:	f7ff ff0e 	bl	800b3b8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800b59c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	3718      	adds	r7, #24
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bd80      	pop	{r7, pc}

0800b5a8 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 800b5a8:	b480      	push	{r7}
 800b5aa:	b087      	sub	sp, #28
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	60f8      	str	r0, [r7, #12]
 800b5b0:	607b      	str	r3, [r7, #4]
 800b5b2:	460b      	mov	r3, r1
 800b5b4:	72fb      	strb	r3, [r7, #11]
 800b5b6:	4613      	mov	r3, r2
 800b5b8:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 800b5c4:	7afb      	ldrb	r3, [r7, #11]
 800b5c6:	2b04      	cmp	r3, #4
 800b5c8:	d836      	bhi.n	800b638 <sequence_step_enabled+0x90>
 800b5ca:	a201      	add	r2, pc, #4	; (adr r2, 800b5d0 <sequence_step_enabled+0x28>)
 800b5cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5d0:	0800b5e5 	.word	0x0800b5e5
 800b5d4:	0800b5f7 	.word	0x0800b5f7
 800b5d8:	0800b609 	.word	0x0800b609
 800b5dc:	0800b61b 	.word	0x0800b61b
 800b5e0:	0800b62d 	.word	0x0800b62d
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 800b5e4:	7abb      	ldrb	r3, [r7, #10]
 800b5e6:	111b      	asrs	r3, r3, #4
 800b5e8:	b2db      	uxtb	r3, r3
 800b5ea:	f003 0301 	and.w	r3, r3, #1
 800b5ee:	b2da      	uxtb	r2, r3
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	701a      	strb	r2, [r3, #0]
		break;
 800b5f4:	e022      	b.n	800b63c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 800b5f6:	7abb      	ldrb	r3, [r7, #10]
 800b5f8:	10db      	asrs	r3, r3, #3
 800b5fa:	b2db      	uxtb	r3, r3
 800b5fc:	f003 0301 	and.w	r3, r3, #1
 800b600:	b2da      	uxtb	r2, r3
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	701a      	strb	r2, [r3, #0]
		break;
 800b606:	e019      	b.n	800b63c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 800b608:	7abb      	ldrb	r3, [r7, #10]
 800b60a:	109b      	asrs	r3, r3, #2
 800b60c:	b2db      	uxtb	r3, r3
 800b60e:	f003 0301 	and.w	r3, r3, #1
 800b612:	b2da      	uxtb	r2, r3
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	701a      	strb	r2, [r3, #0]
		break;
 800b618:	e010      	b.n	800b63c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800b61a:	7abb      	ldrb	r3, [r7, #10]
 800b61c:	119b      	asrs	r3, r3, #6
 800b61e:	b2db      	uxtb	r3, r3
 800b620:	f003 0301 	and.w	r3, r3, #1
 800b624:	b2da      	uxtb	r2, r3
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	701a      	strb	r2, [r3, #0]
		break;
 800b62a:	e007      	b.n	800b63c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 800b62c:	7abb      	ldrb	r3, [r7, #10]
 800b62e:	09db      	lsrs	r3, r3, #7
 800b630:	b2da      	uxtb	r2, r3
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	701a      	strb	r2, [r3, #0]
		break;
 800b636:	e001      	b.n	800b63c <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b638:	23fc      	movs	r3, #252	; 0xfc
 800b63a:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b63c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b640:	4618      	mov	r0, r3
 800b642:	371c      	adds	r7, #28
 800b644:	46bd      	mov	sp, r7
 800b646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64a:	4770      	bx	lr

0800b64c <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b084      	sub	sp, #16
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
 800b654:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b656:	2300      	movs	r3, #0
 800b658:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 800b65a:	2300      	movs	r3, #0
 800b65c:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800b65e:	f107 030e 	add.w	r3, r7, #14
 800b662:	461a      	mov	r2, r3
 800b664:	2101      	movs	r1, #1
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	f004 fa84 	bl	800fb74 <VL53L0X_RdByte>
 800b66c:	4603      	mov	r3, r0
 800b66e:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 800b670:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d107      	bne.n	800b688 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 800b678:	7bba      	ldrb	r2, [r7, #14]
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	2100      	movs	r1, #0
 800b67e:	6878      	ldr	r0, [r7, #4]
 800b680:	f7ff ff92 	bl	800b5a8 <sequence_step_enabled>
 800b684:	4603      	mov	r3, r0
 800b686:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800b688:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d108      	bne.n	800b6a2 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 800b690:	7bba      	ldrb	r2, [r7, #14]
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	3302      	adds	r3, #2
 800b696:	2101      	movs	r1, #1
 800b698:	6878      	ldr	r0, [r7, #4]
 800b69a:	f7ff ff85 	bl	800b5a8 <sequence_step_enabled>
 800b69e:	4603      	mov	r3, r0
 800b6a0:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800b6a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d108      	bne.n	800b6bc <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 800b6aa:	7bba      	ldrb	r2, [r7, #14]
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	3301      	adds	r3, #1
 800b6b0:	2102      	movs	r1, #2
 800b6b2:	6878      	ldr	r0, [r7, #4]
 800b6b4:	f7ff ff78 	bl	800b5a8 <sequence_step_enabled>
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800b6bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d108      	bne.n	800b6d6 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 800b6c4:	7bba      	ldrb	r2, [r7, #14]
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	3303      	adds	r3, #3
 800b6ca:	2103      	movs	r1, #3
 800b6cc:	6878      	ldr	r0, [r7, #4]
 800b6ce:	f7ff ff6b 	bl	800b5a8 <sequence_step_enabled>
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800b6d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d108      	bne.n	800b6f0 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 800b6de:	7bba      	ldrb	r2, [r7, #14]
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	3304      	adds	r3, #4
 800b6e4:	2104      	movs	r1, #4
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f7ff ff5e 	bl	800b5a8 <sequence_step_enabled>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b6f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	3710      	adds	r7, #16
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd80      	pop	{r7, pc}

0800b6fc <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b084      	sub	sp, #16
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
 800b704:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b706:	2300      	movs	r3, #0
 800b708:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800b70a:	f107 030c 	add.w	r3, r7, #12
 800b70e:	461a      	mov	r2, r3
 800b710:	21f8      	movs	r1, #248	; 0xf8
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f004 fa58 	bl	800fbc8 <VL53L0X_RdWord>
 800b718:	4603      	mov	r3, r0
 800b71a:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 800b71c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d108      	bne.n	800b736 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 800b724:	f107 0308 	add.w	r3, r7, #8
 800b728:	461a      	mov	r2, r3
 800b72a:	2104      	movs	r1, #4
 800b72c:	6878      	ldr	r0, [r7, #4]
 800b72e:	f004 fa83 	bl	800fc38 <VL53L0X_RdDWord>
 800b732:	4603      	mov	r3, r0
 800b734:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b736:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d10c      	bne.n	800b758 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 800b73e:	89bb      	ldrh	r3, [r7, #12]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d005      	beq.n	800b750 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	89ba      	ldrh	r2, [r7, #12]
 800b748:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	681a      	ldr	r2, [r3, #0]
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b758:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b75c:	4618      	mov	r0, r3
 800b75e:	3710      	adds	r7, #16
 800b760:	46bd      	mov	sp, r7
 800b762:	bd80      	pop	{r7, pc}

0800b764 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 800b764:	b480      	push	{r7}
 800b766:	b085      	sub	sp, #20
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
 800b76c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b76e:	2300      	movs	r3, #0
 800b770:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	7f1b      	ldrb	r3, [r3, #28]
 800b776:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	7bba      	ldrb	r2, [r7, #14]
 800b77c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800b77e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b782:	4618      	mov	r0, r3
 800b784:	3714      	adds	r7, #20
 800b786:	46bd      	mov	sp, r7
 800b788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78c:	4770      	bx	lr

0800b78e <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 800b78e:	b580      	push	{r7, lr}
 800b790:	b086      	sub	sp, #24
 800b792:	af00      	add	r7, sp, #0
 800b794:	6078      	str	r0, [r7, #4]
 800b796:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b798:	2300      	movs	r3, #0
 800b79a:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 800b79c:	f107 030e 	add.w	r3, r7, #14
 800b7a0:	461a      	mov	r2, r3
 800b7a2:	2120      	movs	r1, #32
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	f004 fa0f 	bl	800fbc8 <VL53L0X_RdWord>
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 800b7ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d118      	bne.n	800b7e8 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 800b7b6:	89fb      	ldrh	r3, [r7, #14]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d109      	bne.n	800b7d0 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	6a1b      	ldr	r3, [r3, #32]
 800b7c0:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	693a      	ldr	r2, [r7, #16]
 800b7c6:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	771a      	strb	r2, [r3, #28]
 800b7ce:	e00b      	b.n	800b7e8 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 800b7d0:	89fb      	ldrh	r3, [r7, #14]
 800b7d2:	00db      	lsls	r3, r3, #3
 800b7d4:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	693a      	ldr	r2, [r7, #16]
 800b7da:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	693a      	ldr	r2, [r7, #16]
 800b7e0:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	2201      	movs	r2, #1
 800b7e6:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b7e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	3718      	adds	r7, #24
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bd80      	pop	{r7, pc}

0800b7f4 <VL53L0X_SetRefCalibration>:

VL53L0X_Error VL53L0X_SetRefCalibration(VL53L0X_DEV Dev, uint8_t VhvSettings,
	uint8_t PhaseCal)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b084      	sub	sp, #16
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
 800b7fc:	460b      	mov	r3, r1
 800b7fe:	70fb      	strb	r3, [r7, #3]
 800b800:	4613      	mov	r3, r2
 800b802:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b804:	2300      	movs	r3, #0
 800b806:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_ref_calibration(Dev, VhvSettings, PhaseCal);
 800b808:	78ba      	ldrb	r2, [r7, #2]
 800b80a:	78fb      	ldrb	r3, [r7, #3]
 800b80c:	4619      	mov	r1, r3
 800b80e:	6878      	ldr	r0, [r7, #4]
 800b810:	f001 fd82 	bl	800d318 <VL53L0X_set_ref_calibration>
 800b814:	4603      	mov	r3, r0
 800b816:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800b818:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b81c:	4618      	mov	r0, r3
 800b81e:	3710      	adds	r7, #16
 800b820:	46bd      	mov	sp, r7
 800b822:	bd80      	pop	{r7, pc}

0800b824 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 800b824:	b580      	push	{r7, lr}
 800b826:	b086      	sub	sp, #24
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
 800b82c:	460b      	mov	r3, r1
 800b82e:	807b      	strh	r3, [r7, #2]
 800b830:	4613      	mov	r3, r2
 800b832:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b834:	2300      	movs	r3, #0
 800b836:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 800b838:	2300      	movs	r3, #0
 800b83a:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 800b83c:	2300      	movs	r3, #0
 800b83e:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 800b840:	2300      	movs	r3, #0
 800b842:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800b844:	887b      	ldrh	r3, [r7, #2]
 800b846:	2b05      	cmp	r3, #5
 800b848:	d902      	bls.n	800b850 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b84a:	23fc      	movs	r3, #252	; 0xfc
 800b84c:	75fb      	strb	r3, [r7, #23]
 800b84e:	e05b      	b.n	800b908 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 800b850:	787b      	ldrb	r3, [r7, #1]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d106      	bne.n	800b864 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 800b856:	2300      	movs	r3, #0
 800b858:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 800b85a:	2300      	movs	r3, #0
 800b85c:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 800b85e:	2301      	movs	r3, #1
 800b860:	73bb      	strb	r3, [r7, #14]
 800b862:	e00a      	b.n	800b87a <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800b864:	887b      	ldrh	r3, [r7, #2]
 800b866:	687a      	ldr	r2, [r7, #4]
 800b868:	330c      	adds	r3, #12
 800b86a:	009b      	lsls	r3, r3, #2
 800b86c:	4413      	add	r3, r2
 800b86e:	685b      	ldr	r3, [r3, #4]
 800b870:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 800b872:	2300      	movs	r3, #0
 800b874:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 800b876:	2301      	movs	r3, #1
 800b878:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 800b87a:	887b      	ldrh	r3, [r7, #2]
 800b87c:	2b05      	cmp	r3, #5
 800b87e:	d841      	bhi.n	800b904 <VL53L0X_SetLimitCheckEnable+0xe0>
 800b880:	a201      	add	r2, pc, #4	; (adr r2, 800b888 <VL53L0X_SetLimitCheckEnable+0x64>)
 800b882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b886:	bf00      	nop
 800b888:	0800b8a1 	.word	0x0800b8a1
 800b88c:	0800b8ab 	.word	0x0800b8ab
 800b890:	0800b8c1 	.word	0x0800b8c1
 800b894:	0800b8cb 	.word	0x0800b8cb
 800b898:	0800b8d5 	.word	0x0800b8d5
 800b89c:	0800b8ed 	.word	0x0800b8ed

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	7bfa      	ldrb	r2, [r7, #15]
 800b8a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 800b8a8:	e02e      	b.n	800b908 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 800b8aa:	693b      	ldr	r3, [r7, #16]
 800b8ac:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800b8ae:	b29b      	uxth	r3, r3
 800b8b0:	461a      	mov	r2, r3
 800b8b2:	2144      	movs	r1, #68	; 0x44
 800b8b4:	6878      	ldr	r0, [r7, #4]
 800b8b6:	f004 f8ff 	bl	800fab8 <VL53L0X_WrWord>
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	75fb      	strb	r3, [r7, #23]

			break;
 800b8be:	e023      	b.n	800b908 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	7bfa      	ldrb	r2, [r7, #15]
 800b8c4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 800b8c8:	e01e      	b.n	800b908 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	7bfa      	ldrb	r2, [r7, #15]
 800b8ce:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 800b8d2:	e019      	b.n	800b908 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 800b8d4:	7bbb      	ldrb	r3, [r7, #14]
 800b8d6:	005b      	lsls	r3, r3, #1
 800b8d8:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800b8da:	7b7b      	ldrb	r3, [r7, #13]
 800b8dc:	22fe      	movs	r2, #254	; 0xfe
 800b8de:	2160      	movs	r1, #96	; 0x60
 800b8e0:	6878      	ldr	r0, [r7, #4]
 800b8e2:	f004 f913 	bl	800fb0c <VL53L0X_UpdateByte>
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 800b8ea:	e00d      	b.n	800b908 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 800b8ec:	7bbb      	ldrb	r3, [r7, #14]
 800b8ee:	011b      	lsls	r3, r3, #4
 800b8f0:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800b8f2:	7b7b      	ldrb	r3, [r7, #13]
 800b8f4:	22ef      	movs	r2, #239	; 0xef
 800b8f6:	2160      	movs	r1, #96	; 0x60
 800b8f8:	6878      	ldr	r0, [r7, #4]
 800b8fa:	f004 f907 	bl	800fb0c <VL53L0X_UpdateByte>
 800b8fe:	4603      	mov	r3, r0
 800b900:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 800b902:	e001      	b.n	800b908 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b904:	23fc      	movs	r3, #252	; 0xfc
 800b906:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b908:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d10f      	bne.n	800b930 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 800b910:	787b      	ldrb	r3, [r7, #1]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d106      	bne.n	800b924 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800b916:	887b      	ldrh	r3, [r7, #2]
 800b918:	687a      	ldr	r2, [r7, #4]
 800b91a:	4413      	add	r3, r2
 800b91c:	2200      	movs	r2, #0
 800b91e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800b922:	e005      	b.n	800b930 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800b924:	887b      	ldrh	r3, [r7, #2]
 800b926:	687a      	ldr	r2, [r7, #4]
 800b928:	4413      	add	r3, r2
 800b92a:	2201      	movs	r2, #1
 800b92c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b930:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b934:	4618      	mov	r0, r3
 800b936:	3718      	adds	r7, #24
 800b938:	46bd      	mov	sp, r7
 800b93a:	bd80      	pop	{r7, pc}

0800b93c <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800b93c:	b480      	push	{r7}
 800b93e:	b087      	sub	sp, #28
 800b940:	af00      	add	r7, sp, #0
 800b942:	60f8      	str	r0, [r7, #12]
 800b944:	460b      	mov	r3, r1
 800b946:	607a      	str	r2, [r7, #4]
 800b948:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b94a:	2300      	movs	r3, #0
 800b94c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800b94e:	897b      	ldrh	r3, [r7, #10]
 800b950:	2b05      	cmp	r3, #5
 800b952:	d905      	bls.n	800b960 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b954:	23fc      	movs	r3, #252	; 0xfc
 800b956:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2200      	movs	r2, #0
 800b95c:	701a      	strb	r2, [r3, #0]
 800b95e:	e008      	b.n	800b972 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800b960:	897b      	ldrh	r3, [r7, #10]
 800b962:	68fa      	ldr	r2, [r7, #12]
 800b964:	4413      	add	r3, r2
 800b966:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b96a:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	7dba      	ldrb	r2, [r7, #22]
 800b970:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b972:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b976:	4618      	mov	r0, r3
 800b978:	371c      	adds	r7, #28
 800b97a:	46bd      	mov	sp, r7
 800b97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b980:	4770      	bx	lr
	...

0800b984 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b086      	sub	sp, #24
 800b988:	af00      	add	r7, sp, #0
 800b98a:	60f8      	str	r0, [r7, #12]
 800b98c:	460b      	mov	r3, r1
 800b98e:	607a      	str	r2, [r7, #4]
 800b990:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b992:	2300      	movs	r3, #0
 800b994:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 800b996:	897b      	ldrh	r3, [r7, #10]
 800b998:	68fa      	ldr	r2, [r7, #12]
 800b99a:	4413      	add	r3, r2
 800b99c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b9a0:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 800b9a2:	7dbb      	ldrb	r3, [r7, #22]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d107      	bne.n	800b9b8 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800b9a8:	897b      	ldrh	r3, [r7, #10]
 800b9aa:	68fa      	ldr	r2, [r7, #12]
 800b9ac:	330c      	adds	r3, #12
 800b9ae:	009b      	lsls	r3, r3, #2
 800b9b0:	4413      	add	r3, r2
 800b9b2:	687a      	ldr	r2, [r7, #4]
 800b9b4:	605a      	str	r2, [r3, #4]
 800b9b6:	e040      	b.n	800ba3a <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 800b9b8:	897b      	ldrh	r3, [r7, #10]
 800b9ba:	2b05      	cmp	r3, #5
 800b9bc:	d830      	bhi.n	800ba20 <VL53L0X_SetLimitCheckValue+0x9c>
 800b9be:	a201      	add	r2, pc, #4	; (adr r2, 800b9c4 <VL53L0X_SetLimitCheckValue+0x40>)
 800b9c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9c4:	0800b9dd 	.word	0x0800b9dd
 800b9c8:	0800b9e5 	.word	0x0800b9e5
 800b9cc:	0800b9fb 	.word	0x0800b9fb
 800b9d0:	0800ba03 	.word	0x0800ba03
 800b9d4:	0800ba0b 	.word	0x0800ba0b
 800b9d8:	0800ba0b 	.word	0x0800ba0b

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	687a      	ldr	r2, [r7, #4]
 800b9e0:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 800b9e2:	e01f      	b.n	800ba24 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800b9e8:	b29b      	uxth	r3, r3
 800b9ea:	461a      	mov	r2, r3
 800b9ec:	2144      	movs	r1, #68	; 0x44
 800b9ee:	68f8      	ldr	r0, [r7, #12]
 800b9f0:	f004 f862 	bl	800fab8 <VL53L0X_WrWord>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800b9f8:	e014      	b.n	800ba24 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	687a      	ldr	r2, [r7, #4]
 800b9fe:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 800ba00:	e010      	b.n	800ba24 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	687a      	ldr	r2, [r7, #4]
 800ba06:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 800ba08:	e00c      	b.n	800ba24 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800ba0e:	b29b      	uxth	r3, r3
 800ba10:	461a      	mov	r2, r3
 800ba12:	2164      	movs	r1, #100	; 0x64
 800ba14:	68f8      	ldr	r0, [r7, #12]
 800ba16:	f004 f84f 	bl	800fab8 <VL53L0X_WrWord>
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800ba1e:	e001      	b.n	800ba24 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ba20:	23fc      	movs	r3, #252	; 0xfc
 800ba22:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 800ba24:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d106      	bne.n	800ba3a <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800ba2c:	897b      	ldrh	r3, [r7, #10]
 800ba2e:	68fa      	ldr	r2, [r7, #12]
 800ba30:	330c      	adds	r3, #12
 800ba32:	009b      	lsls	r3, r3, #2
 800ba34:	4413      	add	r3, r2
 800ba36:	687a      	ldr	r2, [r7, #4]
 800ba38:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ba3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ba3e:	4618      	mov	r0, r3
 800ba40:	3718      	adds	r7, #24
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bd80      	pop	{r7, pc}
 800ba46:	bf00      	nop

0800ba48 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b088      	sub	sp, #32
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	60f8      	str	r0, [r7, #12]
 800ba50:	460b      	mov	r3, r1
 800ba52:	607a      	str	r2, [r7, #4]
 800ba54:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ba56:	2300      	movs	r3, #0
 800ba58:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800ba5e:	897b      	ldrh	r3, [r7, #10]
 800ba60:	2b05      	cmp	r3, #5
 800ba62:	d847      	bhi.n	800baf4 <VL53L0X_GetLimitCheckValue+0xac>
 800ba64:	a201      	add	r2, pc, #4	; (adr r2, 800ba6c <VL53L0X_GetLimitCheckValue+0x24>)
 800ba66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba6a:	bf00      	nop
 800ba6c:	0800ba85 	.word	0x0800ba85
 800ba70:	0800ba91 	.word	0x0800ba91
 800ba74:	0800bab7 	.word	0x0800bab7
 800ba78:	0800bac3 	.word	0x0800bac3
 800ba7c:	0800bacf 	.word	0x0800bacf
 800ba80:	0800bacf 	.word	0x0800bacf

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba88:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	77bb      	strb	r3, [r7, #30]
		break;
 800ba8e:	e033      	b.n	800baf8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800ba90:	f107 0316 	add.w	r3, r7, #22
 800ba94:	461a      	mov	r2, r3
 800ba96:	2144      	movs	r1, #68	; 0x44
 800ba98:	68f8      	ldr	r0, [r7, #12]
 800ba9a:	f004 f895 	bl	800fbc8 <VL53L0X_RdWord>
 800ba9e:	4603      	mov	r3, r0
 800baa0:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800baa2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d102      	bne.n	800bab0 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800baaa:	8afb      	ldrh	r3, [r7, #22]
 800baac:	025b      	lsls	r3, r3, #9
 800baae:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 800bab0:	2301      	movs	r3, #1
 800bab2:	77bb      	strb	r3, [r7, #30]
		break;
 800bab4:	e020      	b.n	800baf8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800baba:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 800babc:	2300      	movs	r3, #0
 800babe:	77bb      	strb	r3, [r7, #30]
		break;
 800bac0:	e01a      	b.n	800baf8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bac6:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 800bac8:	2300      	movs	r3, #0
 800baca:	77bb      	strb	r3, [r7, #30]
		break;
 800bacc:	e014      	b.n	800baf8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800bace:	f107 0316 	add.w	r3, r7, #22
 800bad2:	461a      	mov	r2, r3
 800bad4:	2164      	movs	r1, #100	; 0x64
 800bad6:	68f8      	ldr	r0, [r7, #12]
 800bad8:	f004 f876 	bl	800fbc8 <VL53L0X_RdWord>
 800badc:	4603      	mov	r3, r0
 800bade:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800bae0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d102      	bne.n	800baee <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800bae8:	8afb      	ldrh	r3, [r7, #22]
 800baea:	025b      	lsls	r3, r3, #9
 800baec:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 800baee:	2300      	movs	r3, #0
 800baf0:	77bb      	strb	r3, [r7, #30]
		break;
 800baf2:	e001      	b.n	800baf8 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800baf4:	23fc      	movs	r3, #252	; 0xfc
 800baf6:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800baf8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d12a      	bne.n	800bb56 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 800bb00:	7fbb      	ldrb	r3, [r7, #30]
 800bb02:	2b01      	cmp	r3, #1
 800bb04:	d124      	bne.n	800bb50 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 800bb06:	69bb      	ldr	r3, [r7, #24]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d110      	bne.n	800bb2e <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 800bb0c:	897b      	ldrh	r3, [r7, #10]
 800bb0e:	68fa      	ldr	r2, [r7, #12]
 800bb10:	330c      	adds	r3, #12
 800bb12:	009b      	lsls	r3, r3, #2
 800bb14:	4413      	add	r3, r2
 800bb16:	685b      	ldr	r3, [r3, #4]
 800bb18:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	69ba      	ldr	r2, [r7, #24]
 800bb1e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800bb20:	897b      	ldrh	r3, [r7, #10]
 800bb22:	68fa      	ldr	r2, [r7, #12]
 800bb24:	4413      	add	r3, r2
 800bb26:	2200      	movs	r2, #0
 800bb28:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800bb2c:	e013      	b.n	800bb56 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	69ba      	ldr	r2, [r7, #24]
 800bb32:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800bb34:	897b      	ldrh	r3, [r7, #10]
 800bb36:	68fa      	ldr	r2, [r7, #12]
 800bb38:	330c      	adds	r3, #12
 800bb3a:	009b      	lsls	r3, r3, #2
 800bb3c:	4413      	add	r3, r2
 800bb3e:	69ba      	ldr	r2, [r7, #24]
 800bb40:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800bb42:	897b      	ldrh	r3, [r7, #10]
 800bb44:	68fa      	ldr	r2, [r7, #12]
 800bb46:	4413      	add	r3, r2
 800bb48:	2201      	movs	r2, #1
 800bb4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800bb4e:	e002      	b.n	800bb56 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	69ba      	ldr	r2, [r7, #24]
 800bb54:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bb56:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	3720      	adds	r7, #32
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	bd80      	pop	{r7, pc}
 800bb62:	bf00      	nop

0800bb64 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b084      	sub	sp, #16
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
 800bb6c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bb6e:	2300      	movs	r3, #0
 800bb70:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 800bb72:	f107 030e 	add.w	r3, r7, #14
 800bb76:	461a      	mov	r2, r3
 800bb78:	2101      	movs	r1, #1
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	f003 fffa 	bl	800fb74 <VL53L0X_RdByte>
 800bb80:	4603      	mov	r3, r0
 800bb82:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 800bb84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d10e      	bne.n	800bbaa <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 800bb8c:	7bba      	ldrb	r2, [r7, #14]
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 800bb94:	7bbb      	ldrb	r3, [r7, #14]
 800bb96:	b25b      	sxtb	r3, r3
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	da03      	bge.n	800bba4 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	2201      	movs	r2, #1
 800bba0:	701a      	strb	r2, [r3, #0]
 800bba2:	e002      	b.n	800bbaa <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	2200      	movs	r2, #0
 800bba8:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800bbaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d104      	bne.n	800bbbc <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 800bbb2:	683b      	ldr	r3, [r7, #0]
 800bbb4:	781a      	ldrb	r2, [r3, #0]
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bbbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	3710      	adds	r7, #16
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	bd80      	pop	{r7, pc}

0800bbc8 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b084      	sub	sp, #16
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800bbd4:	f107 030e 	add.w	r3, r7, #14
 800bbd8:	4619      	mov	r1, r3
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	f7ff fbba 	bl	800b354 <VL53L0X_GetDeviceMode>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800bbe4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d107      	bne.n	800bbfc <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800bbec:	7bbb      	ldrb	r3, [r7, #14]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d104      	bne.n	800bbfc <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 800bbf2:	6878      	ldr	r0, [r7, #4]
 800bbf4:	f000 f898 	bl	800bd28 <VL53L0X_StartMeasurement>
 800bbf8:	4603      	mov	r3, r0
 800bbfa:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800bbfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d104      	bne.n	800bc0e <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800bc04:	6878      	ldr	r0, [r7, #4]
 800bc06:	f001 fbaa 	bl	800d35e <VL53L0X_measurement_poll_for_completion>
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800bc0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d106      	bne.n	800bc24 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800bc16:	7bbb      	ldrb	r3, [r7, #14]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d103      	bne.n	800bc24 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	2203      	movs	r2, #3
 800bc20:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 800bc24:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bc28:	4618      	mov	r0, r3
 800bc2a:	3710      	adds	r7, #16
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd80      	pop	{r7, pc}

0800bc30 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b086      	sub	sp, #24
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	60f8      	str	r0, [r7, #12]
 800bc38:	60b9      	str	r1, [r7, #8]
 800bc3a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 800bc40:	2301      	movs	r3, #1
 800bc42:	687a      	ldr	r2, [r7, #4]
 800bc44:	68b9      	ldr	r1, [r7, #8]
 800bc46:	68f8      	ldr	r0, [r7, #12]
 800bc48:	f001 fb29 	bl	800d29e <VL53L0X_perform_ref_calibration>
 800bc4c:	4603      	mov	r3, r0
 800bc4e:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 800bc50:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bc54:	4618      	mov	r0, r3
 800bc56:	3718      	adds	r7, #24
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bd80      	pop	{r7, pc}

0800bc5c <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b086      	sub	sp, #24
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
 800bc64:	460b      	mov	r3, r1
 800bc66:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bc68:	2300      	movs	r3, #0
 800bc6a:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800bc72:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 800bc74:	7dbb      	ldrb	r3, [r7, #22]
 800bc76:	2b01      	cmp	r3, #1
 800bc78:	d005      	beq.n	800bc86 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 800bc7a:	7dbb      	ldrb	r3, [r7, #22]
 800bc7c:	2b02      	cmp	r3, #2
 800bc7e:	d002      	beq.n	800bc86 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 800bc80:	7dbb      	ldrb	r3, [r7, #22]
 800bc82:	2b03      	cmp	r3, #3
 800bc84:	d147      	bne.n	800bd16 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 800bc86:	f107 030c 	add.w	r3, r7, #12
 800bc8a:	f107 0210 	add.w	r2, r7, #16
 800bc8e:	2101      	movs	r1, #1
 800bc90:	6878      	ldr	r0, [r7, #4]
 800bc92:	f000 fbc3 	bl	800c41c <VL53L0X_GetInterruptThresholds>
 800bc96:	4603      	mov	r3, r0
 800bc98:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 800bc9a:	693b      	ldr	r3, [r7, #16]
 800bc9c:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800bca0:	d803      	bhi.n	800bcaa <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 800bca2:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 800bca4:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800bca8:	d935      	bls.n	800bd16 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 800bcaa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d131      	bne.n	800bd16 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 800bcb2:	78fb      	ldrb	r3, [r7, #3]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d006      	beq.n	800bcc6 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 800bcb8:	491a      	ldr	r1, [pc, #104]	; (800bd24 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 800bcba:	6878      	ldr	r0, [r7, #4]
 800bcbc:	f002 ffc2 	bl	800ec44 <VL53L0X_load_tuning_settings>
 800bcc0:	4603      	mov	r3, r0
 800bcc2:	75fb      	strb	r3, [r7, #23]
 800bcc4:	e027      	b.n	800bd16 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800bcc6:	2204      	movs	r2, #4
 800bcc8:	21ff      	movs	r1, #255	; 0xff
 800bcca:	6878      	ldr	r0, [r7, #4]
 800bccc:	f003 fed0 	bl	800fa70 <VL53L0X_WrByte>
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	461a      	mov	r2, r3
 800bcd4:	7dfb      	ldrb	r3, [r7, #23]
 800bcd6:	4313      	orrs	r3, r2
 800bcd8:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800bcda:	2200      	movs	r2, #0
 800bcdc:	2170      	movs	r1, #112	; 0x70
 800bcde:	6878      	ldr	r0, [r7, #4]
 800bce0:	f003 fec6 	bl	800fa70 <VL53L0X_WrByte>
 800bce4:	4603      	mov	r3, r0
 800bce6:	461a      	mov	r2, r3
 800bce8:	7dfb      	ldrb	r3, [r7, #23]
 800bcea:	4313      	orrs	r3, r2
 800bcec:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800bcee:	2200      	movs	r2, #0
 800bcf0:	21ff      	movs	r1, #255	; 0xff
 800bcf2:	6878      	ldr	r0, [r7, #4]
 800bcf4:	f003 febc 	bl	800fa70 <VL53L0X_WrByte>
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	461a      	mov	r2, r3
 800bcfc:	7dfb      	ldrb	r3, [r7, #23]
 800bcfe:	4313      	orrs	r3, r2
 800bd00:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800bd02:	2200      	movs	r2, #0
 800bd04:	2180      	movs	r1, #128	; 0x80
 800bd06:	6878      	ldr	r0, [r7, #4]
 800bd08:	f003 feb2 	bl	800fa70 <VL53L0X_WrByte>
 800bd0c:	4603      	mov	r3, r0
 800bd0e:	461a      	mov	r2, r3
 800bd10:	7dfb      	ldrb	r3, [r7, #23]
 800bd12:	4313      	orrs	r3, r2
 800bd14:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 800bd16:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	3718      	adds	r7, #24
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	bd80      	pop	{r7, pc}
 800bd22:	bf00      	nop
 800bd24:	20000270 	.word	0x20000270

0800bd28 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b086      	sub	sp, #24
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bd30:	2300      	movs	r3, #0
 800bd32:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 800bd34:	2301      	movs	r3, #1
 800bd36:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800bd38:	f107 030e 	add.w	r3, r7, #14
 800bd3c:	4619      	mov	r1, r3
 800bd3e:	6878      	ldr	r0, [r7, #4]
 800bd40:	f7ff fb08 	bl	800b354 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 800bd44:	2201      	movs	r2, #1
 800bd46:	2180      	movs	r1, #128	; 0x80
 800bd48:	6878      	ldr	r0, [r7, #4]
 800bd4a:	f003 fe91 	bl	800fa70 <VL53L0X_WrByte>
 800bd4e:	4603      	mov	r3, r0
 800bd50:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800bd52:	2201      	movs	r2, #1
 800bd54:	21ff      	movs	r1, #255	; 0xff
 800bd56:	6878      	ldr	r0, [r7, #4]
 800bd58:	f003 fe8a 	bl	800fa70 <VL53L0X_WrByte>
 800bd5c:	4603      	mov	r3, r0
 800bd5e:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 800bd60:	2200      	movs	r2, #0
 800bd62:	2100      	movs	r1, #0
 800bd64:	6878      	ldr	r0, [r7, #4]
 800bd66:	f003 fe83 	bl	800fa70 <VL53L0X_WrByte>
 800bd6a:	4603      	mov	r3, r0
 800bd6c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 800bd74:	461a      	mov	r2, r3
 800bd76:	2191      	movs	r1, #145	; 0x91
 800bd78:	6878      	ldr	r0, [r7, #4]
 800bd7a:	f003 fe79 	bl	800fa70 <VL53L0X_WrByte>
 800bd7e:	4603      	mov	r3, r0
 800bd80:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 800bd82:	2201      	movs	r2, #1
 800bd84:	2100      	movs	r1, #0
 800bd86:	6878      	ldr	r0, [r7, #4]
 800bd88:	f003 fe72 	bl	800fa70 <VL53L0X_WrByte>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800bd90:	2200      	movs	r2, #0
 800bd92:	21ff      	movs	r1, #255	; 0xff
 800bd94:	6878      	ldr	r0, [r7, #4]
 800bd96:	f003 fe6b 	bl	800fa70 <VL53L0X_WrByte>
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 800bd9e:	2200      	movs	r2, #0
 800bda0:	2180      	movs	r1, #128	; 0x80
 800bda2:	6878      	ldr	r0, [r7, #4]
 800bda4:	f003 fe64 	bl	800fa70 <VL53L0X_WrByte>
 800bda8:	4603      	mov	r3, r0
 800bdaa:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 800bdac:	7bbb      	ldrb	r3, [r7, #14]
 800bdae:	2b03      	cmp	r3, #3
 800bdb0:	d054      	beq.n	800be5c <VL53L0X_StartMeasurement+0x134>
 800bdb2:	2b03      	cmp	r3, #3
 800bdb4:	dc6c      	bgt.n	800be90 <VL53L0X_StartMeasurement+0x168>
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d002      	beq.n	800bdc0 <VL53L0X_StartMeasurement+0x98>
 800bdba:	2b01      	cmp	r3, #1
 800bdbc:	d034      	beq.n	800be28 <VL53L0X_StartMeasurement+0x100>
 800bdbe:	e067      	b.n	800be90 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 800bdc0:	2201      	movs	r2, #1
 800bdc2:	2100      	movs	r1, #0
 800bdc4:	6878      	ldr	r0, [r7, #4]
 800bdc6:	f003 fe53 	bl	800fa70 <VL53L0X_WrByte>
 800bdca:	4603      	mov	r3, r0
 800bdcc:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 800bdce:	7bfb      	ldrb	r3, [r7, #15]
 800bdd0:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 800bdd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d15d      	bne.n	800be96 <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 800bdda:	2300      	movs	r3, #0
 800bddc:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 800bdde:	693b      	ldr	r3, [r7, #16]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d008      	beq.n	800bdf6 <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 800bde4:	f107 030d 	add.w	r3, r7, #13
 800bde8:	461a      	mov	r2, r3
 800bdea:	2100      	movs	r1, #0
 800bdec:	6878      	ldr	r0, [r7, #4]
 800bdee:	f003 fec1 	bl	800fb74 <VL53L0X_RdByte>
 800bdf2:	4603      	mov	r3, r0
 800bdf4:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 800bdf6:	693b      	ldr	r3, [r7, #16]
 800bdf8:	3301      	adds	r3, #1
 800bdfa:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 800bdfc:	7b7a      	ldrb	r2, [r7, #13]
 800bdfe:	7bfb      	ldrb	r3, [r7, #15]
 800be00:	4013      	ands	r3, r2
 800be02:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800be04:	7bfa      	ldrb	r2, [r7, #15]
 800be06:	429a      	cmp	r2, r3
 800be08:	d107      	bne.n	800be1a <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 800be0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d103      	bne.n	800be1a <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800be12:	693b      	ldr	r3, [r7, #16]
 800be14:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800be18:	d3e1      	bcc.n	800bdde <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800be1a:	693b      	ldr	r3, [r7, #16]
 800be1c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800be20:	d339      	bcc.n	800be96 <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 800be22:	23f9      	movs	r3, #249	; 0xf9
 800be24:	75fb      	strb	r3, [r7, #23]

		}

		break;
 800be26:	e036      	b.n	800be96 <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800be28:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d105      	bne.n	800be3c <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800be30:	2101      	movs	r1, #1
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	f7ff ff12 	bl	800bc5c <VL53L0X_CheckAndLoadInterruptSettings>
 800be38:	4603      	mov	r3, r0
 800be3a:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800be3c:	2202      	movs	r2, #2
 800be3e:	2100      	movs	r1, #0
 800be40:	6878      	ldr	r0, [r7, #4]
 800be42:	f003 fe15 	bl	800fa70 <VL53L0X_WrByte>
 800be46:	4603      	mov	r3, r0
 800be48:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 800be4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d123      	bne.n	800be9a <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	2204      	movs	r2, #4
 800be56:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800be5a:	e01e      	b.n	800be9a <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800be5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d105      	bne.n	800be70 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800be64:	2101      	movs	r1, #1
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	f7ff fef8 	bl	800bc5c <VL53L0X_CheckAndLoadInterruptSettings>
 800be6c:	4603      	mov	r3, r0
 800be6e:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800be70:	2204      	movs	r2, #4
 800be72:	2100      	movs	r1, #0
 800be74:	6878      	ldr	r0, [r7, #4]
 800be76:	f003 fdfb 	bl	800fa70 <VL53L0X_WrByte>
 800be7a:	4603      	mov	r3, r0
 800be7c:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 800be7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d10b      	bne.n	800be9e <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	2204      	movs	r2, #4
 800be8a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800be8e:	e006      	b.n	800be9e <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800be90:	23f8      	movs	r3, #248	; 0xf8
 800be92:	75fb      	strb	r3, [r7, #23]
 800be94:	e004      	b.n	800bea0 <VL53L0X_StartMeasurement+0x178>
		break;
 800be96:	bf00      	nop
 800be98:	e002      	b.n	800bea0 <VL53L0X_StartMeasurement+0x178>
		break;
 800be9a:	bf00      	nop
 800be9c:	e000      	b.n	800bea0 <VL53L0X_StartMeasurement+0x178>
		break;
 800be9e:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800bea0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bea4:	4618      	mov	r0, r3
 800bea6:	3718      	adds	r7, #24
 800bea8:	46bd      	mov	sp, r7
 800beaa:	bd80      	pop	{r7, pc}

0800beac <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b084      	sub	sp, #16
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
 800beb4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800beb6:	2300      	movs	r3, #0
 800beb8:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800bec0:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 800bec2:	7bbb      	ldrb	r3, [r7, #14]
 800bec4:	2b04      	cmp	r3, #4
 800bec6:	d112      	bne.n	800beee <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 800bec8:	f107 0308 	add.w	r3, r7, #8
 800becc:	4619      	mov	r1, r3
 800bece:	6878      	ldr	r0, [r7, #4]
 800bed0:	f000 fb1a 	bl	800c508 <VL53L0X_GetInterruptMaskStatus>
 800bed4:	4603      	mov	r3, r0
 800bed6:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 800bed8:	68bb      	ldr	r3, [r7, #8]
 800beda:	2b04      	cmp	r3, #4
 800bedc:	d103      	bne.n	800bee6 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	2201      	movs	r2, #1
 800bee2:	701a      	strb	r2, [r3, #0]
 800bee4:	e01c      	b.n	800bf20 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	2200      	movs	r2, #0
 800beea:	701a      	strb	r2, [r3, #0]
 800beec:	e018      	b.n	800bf20 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800beee:	f107 030d 	add.w	r3, r7, #13
 800bef2:	461a      	mov	r2, r3
 800bef4:	2114      	movs	r1, #20
 800bef6:	6878      	ldr	r0, [r7, #4]
 800bef8:	f003 fe3c 	bl	800fb74 <VL53L0X_RdByte>
 800befc:	4603      	mov	r3, r0
 800befe:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 800bf00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d10b      	bne.n	800bf20 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 800bf08:	7b7b      	ldrb	r3, [r7, #13]
 800bf0a:	f003 0301 	and.w	r3, r3, #1
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d003      	beq.n	800bf1a <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 800bf12:	683b      	ldr	r3, [r7, #0]
 800bf14:	2201      	movs	r2, #1
 800bf16:	701a      	strb	r2, [r3, #0]
 800bf18:	e002      	b.n	800bf20 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bf20:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bf24:	4618      	mov	r0, r3
 800bf26:	3710      	adds	r7, #16
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	bd80      	pop	{r7, pc}

0800bf2c <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800bf2c:	b5b0      	push	{r4, r5, r7, lr}
 800bf2e:	b096      	sub	sp, #88	; 0x58
 800bf30:	af02      	add	r7, sp, #8
 800bf32:	6078      	str	r0, [r7, #4]
 800bf34:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bf36:	2300      	movs	r3, #0
 800bf38:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 800bf3c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800bf40:	230c      	movs	r3, #12
 800bf42:	2114      	movs	r1, #20
 800bf44:	6878      	ldr	r0, [r7, #4]
 800bf46:	f003 fd67 	bl	800fa18 <VL53L0X_ReadMulti>
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 800bf50:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	f040 80d1 	bne.w	800c0fc <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	2200      	movs	r2, #0
 800bf64:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 800bf66:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bf6a:	b29b      	uxth	r3, r3
 800bf6c:	021b      	lsls	r3, r3, #8
 800bf6e:	b29a      	uxth	r2, r3
 800bf70:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bf74:	b29b      	uxth	r3, r3
 800bf76:	4413      	add	r3, r2
 800bf78:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 800bf7c:	683b      	ldr	r3, [r7, #0]
 800bf7e:	2200      	movs	r2, #0
 800bf80:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 800bf82:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800bf86:	b29b      	uxth	r3, r3
 800bf88:	021b      	lsls	r3, r3, #8
 800bf8a:	b29a      	uxth	r2, r3
 800bf8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bf90:	b29b      	uxth	r3, r3
 800bf92:	4413      	add	r3, r2
 800bf94:	b29b      	uxth	r3, r3
 800bf96:	025b      	lsls	r3, r3, #9
 800bf98:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 800bf9a:	683b      	ldr	r3, [r7, #0]
 800bf9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bf9e:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 800bfa0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800bfa4:	b29b      	uxth	r3, r3
 800bfa6:	021b      	lsls	r3, r3, #8
 800bfa8:	b29a      	uxth	r2, r3
 800bfaa:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800bfae:	b29b      	uxth	r3, r3
 800bfb0:	4413      	add	r3, r2
 800bfb2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 800bfb6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bfba:	025b      	lsls	r3, r3, #9
 800bfbc:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 800bfbe:	683b      	ldr	r3, [r7, #0]
 800bfc0:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 800bfc2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800bfc6:	b29b      	uxth	r3, r3
 800bfc8:	021b      	lsls	r3, r3, #8
 800bfca:	b29a      	uxth	r2, r3
 800bfcc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bfd0:	b29b      	uxth	r3, r3
 800bfd2:	4413      	add	r3, r2
 800bfd4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 800bfd8:	683b      	ldr	r3, [r7, #0]
 800bfda:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800bfde:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 800bfe0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bfe4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 800bfee:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 800bff6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 800bffa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800bffc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c000:	d046      	beq.n	800c090 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800c002:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c004:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800c008:	fb02 f303 	mul.w	r3, r2, r3
 800c00c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c010:	4a57      	ldr	r2, [pc, #348]	; (800c170 <VL53L0X_GetRangingMeasurementData+0x244>)
 800c012:	fb82 1203 	smull	r1, r2, r2, r3
 800c016:	1192      	asrs	r2, r2, #6
 800c018:	17db      	asrs	r3, r3, #31
 800c01a:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 800c01c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	6a1b      	ldr	r3, [r3, #32]
 800c024:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	7f1b      	ldrb	r3, [r3, #28]
 800c02a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 800c02e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c032:	2b00      	cmp	r3, #0
 800c034:	d02c      	beq.n	800c090 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 800c036:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800c038:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800c03c:	fb02 f303 	mul.w	r3, r2, r3
 800c040:	121a      	asrs	r2, r3, #8
					<= 0) {
 800c042:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 800c044:	429a      	cmp	r2, r3
 800c046:	d10d      	bne.n	800c064 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 800c048:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d004      	beq.n	800c05a <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 800c050:	f242 23b8 	movw	r3, #8888	; 0x22b8
 800c054:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800c058:	e016      	b.n	800c088 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 800c05a:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 800c05e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800c062:	e011      	b.n	800c088 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 800c064:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800c068:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c06a:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 800c06e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800c070:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 800c074:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 800c078:	121b      	asrs	r3, r3, #8
 800c07a:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 800c07c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c07e:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 800c080:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 800c084:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 800c088:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800c08c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 800c090:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c094:	2b00      	cmp	r3, #0
 800c096:	d00d      	beq.n	800c0b4 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 800c098:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800c09c:	089b      	lsrs	r3, r3, #2
 800c09e:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 800c0a4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800c0a8:	b2db      	uxtb	r3, r3
 800c0aa:	019b      	lsls	r3, r3, #6
 800c0ac:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	75da      	strb	r2, [r3, #23]
 800c0b2:	e006      	b.n	800c0c2 <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 800c0b4:	683b      	ldr	r3, [r7, #0]
 800c0b6:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800c0ba:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	2200      	movs	r2, #0
 800c0c0:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 800c0c2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800c0c6:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800c0ca:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800c0ce:	9301      	str	r3, [sp, #4]
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	9300      	str	r3, [sp, #0]
 800c0d4:	4613      	mov	r3, r2
 800c0d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c0d8:	6878      	ldr	r0, [r7, #4]
 800c0da:	f003 fa51 	bl	800f580 <VL53L0X_get_pal_range_status>
 800c0de:	4603      	mov	r3, r0
 800c0e0:	461a      	mov	r2, r3
 800c0e2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c0e6:	4313      	orrs	r3, r2
 800c0e8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 800c0ec:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d103      	bne.n	800c0fc <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 800c0f4:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800c0fc:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800c100:	2b00      	cmp	r3, #0
 800c102:	d12f      	bne.n	800c164 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	f107 040c 	add.w	r4, r7, #12
 800c10a:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800c10e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c110:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c112:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c116:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 800c11a:	683b      	ldr	r3, [r7, #0]
 800c11c:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 800c11e:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 800c124:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 800c128:	683b      	ldr	r3, [r7, #0]
 800c12a:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 800c12c:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 800c132:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 800c138:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 800c13e:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 800c140:	683b      	ldr	r3, [r7, #0]
 800c142:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 800c144:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 800c146:	683b      	ldr	r3, [r7, #0]
 800c148:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 800c14a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	f103 0450 	add.w	r4, r3, #80	; 0x50
 800c154:	f107 050c 	add.w	r5, r7, #12
 800c158:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c15a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c15c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c160:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c164:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 800c168:	4618      	mov	r0, r3
 800c16a:	3750      	adds	r7, #80	; 0x50
 800c16c:	46bd      	mov	sp, r7
 800c16e:	bdb0      	pop	{r4, r5, r7, pc}
 800c170:	10624dd3 	.word	0x10624dd3

0800c174 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b084      	sub	sp, #16
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
 800c17c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c17e:	2300      	movs	r3, #0
 800c180:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800c182:	2100      	movs	r1, #0
 800c184:	6878      	ldr	r0, [r7, #4]
 800c186:	f7ff f8b9 	bl	800b2fc <VL53L0X_SetDeviceMode>
 800c18a:	4603      	mov	r3, r0
 800c18c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800c18e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d104      	bne.n	800c1a0 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800c196:	6878      	ldr	r0, [r7, #4]
 800c198:	f7ff fd16 	bl	800bbc8 <VL53L0X_PerformSingleMeasurement>
 800c19c:	4603      	mov	r3, r0
 800c19e:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800c1a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d105      	bne.n	800c1b4 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 800c1a8:	6839      	ldr	r1, [r7, #0]
 800c1aa:	6878      	ldr	r0, [r7, #4]
 800c1ac:	f7ff febe 	bl	800bf2c <VL53L0X_GetRangingMeasurementData>
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 800c1b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d105      	bne.n	800c1c8 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800c1bc:	2100      	movs	r1, #0
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	f000 f962 	bl	800c488 <VL53L0X_ClearInterruptMask>
 800c1c4:	4603      	mov	r3, r0
 800c1c6:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 800c1c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	3710      	adds	r7, #16
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	bd80      	pop	{r7, pc}

0800c1d4 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b084      	sub	sp, #16
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
 800c1dc:	4608      	mov	r0, r1
 800c1de:	4611      	mov	r1, r2
 800c1e0:	461a      	mov	r2, r3
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	70fb      	strb	r3, [r7, #3]
 800c1e6:	460b      	mov	r3, r1
 800c1e8:	70bb      	strb	r3, [r7, #2]
 800c1ea:	4613      	mov	r3, r2
 800c1ec:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800c1f2:	78fb      	ldrb	r3, [r7, #3]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d002      	beq.n	800c1fe <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 800c1f8:	23f6      	movs	r3, #246	; 0xf6
 800c1fa:	73fb      	strb	r3, [r7, #15]
 800c1fc:	e107      	b.n	800c40e <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800c1fe:	78bb      	ldrb	r3, [r7, #2]
 800c200:	2b14      	cmp	r3, #20
 800c202:	d110      	bne.n	800c226 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800c204:	7e3b      	ldrb	r3, [r7, #24]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d102      	bne.n	800c210 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 800c20a:	2310      	movs	r3, #16
 800c20c:	73bb      	strb	r3, [r7, #14]
 800c20e:	e001      	b.n	800c214 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 800c210:	2301      	movs	r3, #1
 800c212:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 800c214:	7bbb      	ldrb	r3, [r7, #14]
 800c216:	461a      	mov	r2, r3
 800c218:	2184      	movs	r1, #132	; 0x84
 800c21a:	6878      	ldr	r0, [r7, #4]
 800c21c:	f003 fc28 	bl	800fa70 <VL53L0X_WrByte>
 800c220:	4603      	mov	r3, r0
 800c222:	73fb      	strb	r3, [r7, #15]
 800c224:	e0f3      	b.n	800c40e <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 800c226:	78bb      	ldrb	r3, [r7, #2]
 800c228:	2b15      	cmp	r3, #21
 800c22a:	f040 8097 	bne.w	800c35c <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800c22e:	2201      	movs	r2, #1
 800c230:	21ff      	movs	r1, #255	; 0xff
 800c232:	6878      	ldr	r0, [r7, #4]
 800c234:	f003 fc1c 	bl	800fa70 <VL53L0X_WrByte>
 800c238:	4603      	mov	r3, r0
 800c23a:	461a      	mov	r2, r3
 800c23c:	7bfb      	ldrb	r3, [r7, #15]
 800c23e:	4313      	orrs	r3, r2
 800c240:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800c242:	2200      	movs	r2, #0
 800c244:	2100      	movs	r1, #0
 800c246:	6878      	ldr	r0, [r7, #4]
 800c248:	f003 fc12 	bl	800fa70 <VL53L0X_WrByte>
 800c24c:	4603      	mov	r3, r0
 800c24e:	461a      	mov	r2, r3
 800c250:	7bfb      	ldrb	r3, [r7, #15]
 800c252:	4313      	orrs	r3, r2
 800c254:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800c256:	2200      	movs	r2, #0
 800c258:	21ff      	movs	r1, #255	; 0xff
 800c25a:	6878      	ldr	r0, [r7, #4]
 800c25c:	f003 fc08 	bl	800fa70 <VL53L0X_WrByte>
 800c260:	4603      	mov	r3, r0
 800c262:	461a      	mov	r2, r3
 800c264:	7bfb      	ldrb	r3, [r7, #15]
 800c266:	4313      	orrs	r3, r2
 800c268:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800c26a:	2201      	movs	r2, #1
 800c26c:	2180      	movs	r1, #128	; 0x80
 800c26e:	6878      	ldr	r0, [r7, #4]
 800c270:	f003 fbfe 	bl	800fa70 <VL53L0X_WrByte>
 800c274:	4603      	mov	r3, r0
 800c276:	461a      	mov	r2, r3
 800c278:	7bfb      	ldrb	r3, [r7, #15]
 800c27a:	4313      	orrs	r3, r2
 800c27c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 800c27e:	2202      	movs	r2, #2
 800c280:	2185      	movs	r1, #133	; 0x85
 800c282:	6878      	ldr	r0, [r7, #4]
 800c284:	f003 fbf4 	bl	800fa70 <VL53L0X_WrByte>
 800c288:	4603      	mov	r3, r0
 800c28a:	461a      	mov	r2, r3
 800c28c:	7bfb      	ldrb	r3, [r7, #15]
 800c28e:	4313      	orrs	r3, r2
 800c290:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800c292:	2204      	movs	r2, #4
 800c294:	21ff      	movs	r1, #255	; 0xff
 800c296:	6878      	ldr	r0, [r7, #4]
 800c298:	f003 fbea 	bl	800fa70 <VL53L0X_WrByte>
 800c29c:	4603      	mov	r3, r0
 800c29e:	461a      	mov	r2, r3
 800c2a0:	7bfb      	ldrb	r3, [r7, #15]
 800c2a2:	4313      	orrs	r3, r2
 800c2a4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	21cd      	movs	r1, #205	; 0xcd
 800c2aa:	6878      	ldr	r0, [r7, #4]
 800c2ac:	f003 fbe0 	bl	800fa70 <VL53L0X_WrByte>
 800c2b0:	4603      	mov	r3, r0
 800c2b2:	461a      	mov	r2, r3
 800c2b4:	7bfb      	ldrb	r3, [r7, #15]
 800c2b6:	4313      	orrs	r3, r2
 800c2b8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800c2ba:	2211      	movs	r2, #17
 800c2bc:	21cc      	movs	r1, #204	; 0xcc
 800c2be:	6878      	ldr	r0, [r7, #4]
 800c2c0:	f003 fbd6 	bl	800fa70 <VL53L0X_WrByte>
 800c2c4:	4603      	mov	r3, r0
 800c2c6:	461a      	mov	r2, r3
 800c2c8:	7bfb      	ldrb	r3, [r7, #15]
 800c2ca:	4313      	orrs	r3, r2
 800c2cc:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800c2ce:	2207      	movs	r2, #7
 800c2d0:	21ff      	movs	r1, #255	; 0xff
 800c2d2:	6878      	ldr	r0, [r7, #4]
 800c2d4:	f003 fbcc 	bl	800fa70 <VL53L0X_WrByte>
 800c2d8:	4603      	mov	r3, r0
 800c2da:	461a      	mov	r2, r3
 800c2dc:	7bfb      	ldrb	r3, [r7, #15]
 800c2de:	4313      	orrs	r3, r2
 800c2e0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	21be      	movs	r1, #190	; 0xbe
 800c2e6:	6878      	ldr	r0, [r7, #4]
 800c2e8:	f003 fbc2 	bl	800fa70 <VL53L0X_WrByte>
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	461a      	mov	r2, r3
 800c2f0:	7bfb      	ldrb	r3, [r7, #15]
 800c2f2:	4313      	orrs	r3, r2
 800c2f4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800c2f6:	2206      	movs	r2, #6
 800c2f8:	21ff      	movs	r1, #255	; 0xff
 800c2fa:	6878      	ldr	r0, [r7, #4]
 800c2fc:	f003 fbb8 	bl	800fa70 <VL53L0X_WrByte>
 800c300:	4603      	mov	r3, r0
 800c302:	461a      	mov	r2, r3
 800c304:	7bfb      	ldrb	r3, [r7, #15]
 800c306:	4313      	orrs	r3, r2
 800c308:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800c30a:	2209      	movs	r2, #9
 800c30c:	21cc      	movs	r1, #204	; 0xcc
 800c30e:	6878      	ldr	r0, [r7, #4]
 800c310:	f003 fbae 	bl	800fa70 <VL53L0X_WrByte>
 800c314:	4603      	mov	r3, r0
 800c316:	461a      	mov	r2, r3
 800c318:	7bfb      	ldrb	r3, [r7, #15]
 800c31a:	4313      	orrs	r3, r2
 800c31c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800c31e:	2200      	movs	r2, #0
 800c320:	21ff      	movs	r1, #255	; 0xff
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f003 fba4 	bl	800fa70 <VL53L0X_WrByte>
 800c328:	4603      	mov	r3, r0
 800c32a:	461a      	mov	r2, r3
 800c32c:	7bfb      	ldrb	r3, [r7, #15]
 800c32e:	4313      	orrs	r3, r2
 800c330:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800c332:	2201      	movs	r2, #1
 800c334:	21ff      	movs	r1, #255	; 0xff
 800c336:	6878      	ldr	r0, [r7, #4]
 800c338:	f003 fb9a 	bl	800fa70 <VL53L0X_WrByte>
 800c33c:	4603      	mov	r3, r0
 800c33e:	461a      	mov	r2, r3
 800c340:	7bfb      	ldrb	r3, [r7, #15]
 800c342:	4313      	orrs	r3, r2
 800c344:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800c346:	2200      	movs	r2, #0
 800c348:	2100      	movs	r1, #0
 800c34a:	6878      	ldr	r0, [r7, #4]
 800c34c:	f003 fb90 	bl	800fa70 <VL53L0X_WrByte>
 800c350:	4603      	mov	r3, r0
 800c352:	461a      	mov	r2, r3
 800c354:	7bfb      	ldrb	r3, [r7, #15]
 800c356:	4313      	orrs	r3, r2
 800c358:	73fb      	strb	r3, [r7, #15]
 800c35a:	e058      	b.n	800c40e <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 800c35c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d121      	bne.n	800c3a8 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 800c364:	787b      	ldrb	r3, [r7, #1]
 800c366:	2b04      	cmp	r3, #4
 800c368:	d81b      	bhi.n	800c3a2 <VL53L0X_SetGpioConfig+0x1ce>
 800c36a:	a201      	add	r2, pc, #4	; (adr r2, 800c370 <VL53L0X_SetGpioConfig+0x19c>)
 800c36c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c370:	0800c385 	.word	0x0800c385
 800c374:	0800c38b 	.word	0x0800c38b
 800c378:	0800c391 	.word	0x0800c391
 800c37c:	0800c397 	.word	0x0800c397
 800c380:	0800c39d 	.word	0x0800c39d
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 800c384:	2300      	movs	r3, #0
 800c386:	73bb      	strb	r3, [r7, #14]
				break;
 800c388:	e00f      	b.n	800c3aa <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 800c38a:	2301      	movs	r3, #1
 800c38c:	73bb      	strb	r3, [r7, #14]
				break;
 800c38e:	e00c      	b.n	800c3aa <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 800c390:	2302      	movs	r3, #2
 800c392:	73bb      	strb	r3, [r7, #14]
				break;
 800c394:	e009      	b.n	800c3aa <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 800c396:	2303      	movs	r3, #3
 800c398:	73bb      	strb	r3, [r7, #14]
				break;
 800c39a:	e006      	b.n	800c3aa <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 800c39c:	2304      	movs	r3, #4
 800c39e:	73bb      	strb	r3, [r7, #14]
				break;
 800c3a0:	e003      	b.n	800c3aa <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 800c3a2:	23f5      	movs	r3, #245	; 0xf5
 800c3a4:	73fb      	strb	r3, [r7, #15]
 800c3a6:	e000      	b.n	800c3aa <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 800c3a8:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 800c3aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d107      	bne.n	800c3c2 <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 800c3b2:	7bbb      	ldrb	r3, [r7, #14]
 800c3b4:	461a      	mov	r2, r3
 800c3b6:	210a      	movs	r1, #10
 800c3b8:	6878      	ldr	r0, [r7, #4]
 800c3ba:	f003 fb59 	bl	800fa70 <VL53L0X_WrByte>
 800c3be:	4603      	mov	r3, r0
 800c3c0:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 800c3c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d10f      	bne.n	800c3ea <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800c3ca:	7e3b      	ldrb	r3, [r7, #24]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d102      	bne.n	800c3d6 <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	73bb      	strb	r3, [r7, #14]
 800c3d4:	e001      	b.n	800c3da <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 800c3d6:	2310      	movs	r3, #16
 800c3d8:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 800c3da:	7bbb      	ldrb	r3, [r7, #14]
 800c3dc:	22ef      	movs	r2, #239	; 0xef
 800c3de:	2184      	movs	r1, #132	; 0x84
 800c3e0:	6878      	ldr	r0, [r7, #4]
 800c3e2:	f003 fb93 	bl	800fb0c <VL53L0X_UpdateByte>
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 800c3ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d103      	bne.n	800c3fa <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	787a      	ldrb	r2, [r7, #1]
 800c3f6:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 800c3fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d105      	bne.n	800c40e <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800c402:	2100      	movs	r1, #0
 800c404:	6878      	ldr	r0, [r7, #4]
 800c406:	f000 f83f 	bl	800c488 <VL53L0X_ClearInterruptMask>
 800c40a:	4603      	mov	r3, r0
 800c40c:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c40e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c412:	4618      	mov	r0, r3
 800c414:	3710      	adds	r7, #16
 800c416:	46bd      	mov	sp, r7
 800c418:	bd80      	pop	{r7, pc}
 800c41a:	bf00      	nop

0800c41c <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b086      	sub	sp, #24
 800c420:	af00      	add	r7, sp, #0
 800c422:	60f8      	str	r0, [r7, #12]
 800c424:	607a      	str	r2, [r7, #4]
 800c426:	603b      	str	r3, [r7, #0]
 800c428:	460b      	mov	r3, r1
 800c42a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c42c:	2300      	movs	r3, #0
 800c42e:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 800c430:	f107 0314 	add.w	r3, r7, #20
 800c434:	461a      	mov	r2, r3
 800c436:	210e      	movs	r1, #14
 800c438:	68f8      	ldr	r0, [r7, #12]
 800c43a:	f003 fbc5 	bl	800fbc8 <VL53L0X_RdWord>
 800c43e:	4603      	mov	r3, r0
 800c440:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800c442:	8abb      	ldrh	r3, [r7, #20]
 800c444:	045b      	lsls	r3, r3, #17
 800c446:	461a      	mov	r2, r3
 800c448:	4b0e      	ldr	r3, [pc, #56]	; (800c484 <VL53L0X_GetInterruptThresholds+0x68>)
 800c44a:	4013      	ands	r3, r2
 800c44c:	687a      	ldr	r2, [r7, #4]
 800c44e:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800c450:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d10f      	bne.n	800c478 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 800c458:	f107 0314 	add.w	r3, r7, #20
 800c45c:	461a      	mov	r2, r3
 800c45e:	210c      	movs	r1, #12
 800c460:	68f8      	ldr	r0, [r7, #12]
 800c462:	f003 fbb1 	bl	800fbc8 <VL53L0X_RdWord>
 800c466:	4603      	mov	r3, r0
 800c468:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800c46a:	8abb      	ldrh	r3, [r7, #20]
 800c46c:	045b      	lsls	r3, r3, #17
 800c46e:	461a      	mov	r2, r3
 800c470:	4b04      	ldr	r3, [pc, #16]	; (800c484 <VL53L0X_GetInterruptThresholds+0x68>)
 800c472:	4013      	ands	r3, r2
		*pThresholdHigh =
 800c474:	683a      	ldr	r2, [r7, #0]
 800c476:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c478:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c47c:	4618      	mov	r0, r3
 800c47e:	3718      	adds	r7, #24
 800c480:	46bd      	mov	sp, r7
 800c482:	bd80      	pop	{r7, pc}
 800c484:	1ffe0000 	.word	0x1ffe0000

0800c488 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b084      	sub	sp, #16
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
 800c490:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c492:	2300      	movs	r3, #0
 800c494:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 800c496:	2300      	movs	r3, #0
 800c498:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 800c49a:	2201      	movs	r2, #1
 800c49c:	210b      	movs	r1, #11
 800c49e:	6878      	ldr	r0, [r7, #4]
 800c4a0:	f003 fae6 	bl	800fa70 <VL53L0X_WrByte>
 800c4a4:	4603      	mov	r3, r0
 800c4a6:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	210b      	movs	r1, #11
 800c4ac:	6878      	ldr	r0, [r7, #4]
 800c4ae:	f003 fadf 	bl	800fa70 <VL53L0X_WrByte>
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	461a      	mov	r2, r3
 800c4b6:	7bfb      	ldrb	r3, [r7, #15]
 800c4b8:	4313      	orrs	r3, r2
 800c4ba:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 800c4bc:	f107 030d 	add.w	r3, r7, #13
 800c4c0:	461a      	mov	r2, r3
 800c4c2:	2113      	movs	r1, #19
 800c4c4:	6878      	ldr	r0, [r7, #4]
 800c4c6:	f003 fb55 	bl	800fb74 <VL53L0X_RdByte>
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	461a      	mov	r2, r3
 800c4ce:	7bfb      	ldrb	r3, [r7, #15]
 800c4d0:	4313      	orrs	r3, r2
 800c4d2:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 800c4d4:	7bbb      	ldrb	r3, [r7, #14]
 800c4d6:	3301      	adds	r3, #1
 800c4d8:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 800c4da:	7b7b      	ldrb	r3, [r7, #13]
 800c4dc:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d006      	beq.n	800c4f2 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 800c4e4:	7bbb      	ldrb	r3, [r7, #14]
 800c4e6:	2b02      	cmp	r3, #2
 800c4e8:	d803      	bhi.n	800c4f2 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 800c4ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d0d3      	beq.n	800c49a <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 800c4f2:	7bbb      	ldrb	r3, [r7, #14]
 800c4f4:	2b02      	cmp	r3, #2
 800c4f6:	d901      	bls.n	800c4fc <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 800c4f8:	23f4      	movs	r3, #244	; 0xf4
 800c4fa:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800c4fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c500:	4618      	mov	r0, r3
 800c502:	3710      	adds	r7, #16
 800c504:	46bd      	mov	sp, r7
 800c506:	bd80      	pop	{r7, pc}

0800c508 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b084      	sub	sp, #16
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
 800c510:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c512:	2300      	movs	r3, #0
 800c514:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800c516:	f107 030e 	add.w	r3, r7, #14
 800c51a:	461a      	mov	r2, r3
 800c51c:	2113      	movs	r1, #19
 800c51e:	6878      	ldr	r0, [r7, #4]
 800c520:	f003 fb28 	bl	800fb74 <VL53L0X_RdByte>
 800c524:	4603      	mov	r3, r0
 800c526:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 800c528:	7bbb      	ldrb	r3, [r7, #14]
 800c52a:	f003 0207 	and.w	r2, r3, #7
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800c532:	7bbb      	ldrb	r3, [r7, #14]
 800c534:	f003 0318 	and.w	r3, r3, #24
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d001      	beq.n	800c540 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 800c53c:	23fa      	movs	r3, #250	; 0xfa
 800c53e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800c540:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c544:	4618      	mov	r0, r3
 800c546:	3710      	adds	r7, #16
 800c548:	46bd      	mov	sp, r7
 800c54a:	bd80      	pop	{r7, pc}

0800c54c <VL53L0X_SetReferenceSpads>:
 * Internal functions
 *****************************************************************************/

VL53L0X_Error VL53L0X_SetReferenceSpads(VL53L0X_DEV Dev, uint32_t count,
	uint8_t isApertureSpads)
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b086      	sub	sp, #24
 800c550:	af00      	add	r7, sp, #0
 800c552:	60f8      	str	r0, [r7, #12]
 800c554:	60b9      	str	r1, [r7, #8]
 800c556:	4613      	mov	r3, r2
 800c558:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c55a:	2300      	movs	r3, #0
 800c55c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_reference_spads(Dev, count, isApertureSpads);
 800c55e:	79fb      	ldrb	r3, [r7, #7]
 800c560:	461a      	mov	r2, r3
 800c562:	68b9      	ldr	r1, [r7, #8]
 800c564:	68f8      	ldr	r0, [r7, #12]
 800c566:	f000 fc55 	bl	800ce14 <VL53L0X_set_reference_spads>
 800c56a:	4603      	mov	r3, r0
 800c56c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);

	return Status;
 800c56e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c572:	4618      	mov	r0, r3
 800c574:	3718      	adds	r7, #24
 800c576:	46bd      	mov	sp, r7
 800c578:	bd80      	pop	{r7, pc}

0800c57a <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 800c57a:	b580      	push	{r7, lr}
 800c57c:	b086      	sub	sp, #24
 800c57e:	af00      	add	r7, sp, #0
 800c580:	60f8      	str	r0, [r7, #12]
 800c582:	60b9      	str	r1, [r7, #8]
 800c584:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c586:	2300      	movs	r3, #0
 800c588:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 800c58a:	687a      	ldr	r2, [r7, #4]
 800c58c:	68b9      	ldr	r1, [r7, #8]
 800c58e:	68f8      	ldr	r0, [r7, #12]
 800c590:	f000 fa34 	bl	800c9fc <VL53L0X_perform_ref_spad_management>
 800c594:	4603      	mov	r3, r0
 800c596:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 800c598:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c59c:	4618      	mov	r0, r3
 800c59e:	3718      	adds	r7, #24
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	bd80      	pop	{r7, pc}

0800c5a4 <VL53L0X_PerformContinuousRangingMeasurement>:


VL53L0X_Error VL53L0X_PerformContinuousRangingMeasurement(VL53L0X_Dev_t *device, VL53L0X_RangingMeasurementData_t *ranging_data) {
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b084      	sub	sp, #16
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
 800c5ac:	6039      	str	r1, [r7, #0]
    VL53L0X_Error status;

    // Set the device to high accuracy mode
    status = VL53L0X_SetDeviceMode(device, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 800c5ae:	2101      	movs	r1, #1
 800c5b0:	6878      	ldr	r0, [r7, #4]
 800c5b2:	f7fe fea3 	bl	800b2fc <VL53L0X_SetDeviceMode>
 800c5b6:	4603      	mov	r3, r0
 800c5b8:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 800c5ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d002      	beq.n	800c5c8 <VL53L0X_PerformContinuousRangingMeasurement+0x24>
        return status;
 800c5c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c5c6:	e019      	b.n	800c5fc <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    // Start continuous ranging measurement
    status = VL53L0X_StartMeasurement(device);
 800c5c8:	6878      	ldr	r0, [r7, #4]
 800c5ca:	f7ff fbad 	bl	800bd28 <VL53L0X_StartMeasurement>
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 800c5d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d002      	beq.n	800c5e0 <VL53L0X_PerformContinuousRangingMeasurement+0x3c>
        return status;
 800c5da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c5de:	e00d      	b.n	800c5fc <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    // Get ranging measurement data
    status = VL53L0X_GetRangingMeasurementData(device, ranging_data);
 800c5e0:	6839      	ldr	r1, [r7, #0]
 800c5e2:	6878      	ldr	r0, [r7, #4]
 800c5e4:	f7ff fca2 	bl	800bf2c <VL53L0X_GetRangingMeasurementData>
 800c5e8:	4603      	mov	r3, r0
 800c5ea:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 800c5ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d002      	beq.n	800c5fa <VL53L0X_PerformContinuousRangingMeasurement+0x56>
        return status;
 800c5f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c5f8:	e000      	b.n	800c5fc <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    return VL53L0X_ERROR_NONE;
 800c5fa:	2300      	movs	r3, #0
}
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	3710      	adds	r7, #16
 800c600:	46bd      	mov	sp, r7
 800c602:	bd80      	pop	{r7, pc}

0800c604 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b084      	sub	sp, #16
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
 800c60c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c60e:	2300      	movs	r3, #0
 800c610:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 800c612:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800c616:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 800c618:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c61c:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 800c61e:	f107 0308 	add.w	r3, r7, #8
 800c622:	461a      	mov	r2, r3
 800c624:	2128      	movs	r1, #40	; 0x28
 800c626:	6878      	ldr	r0, [r7, #4]
 800c628:	f003 face 	bl	800fbc8 <VL53L0X_RdWord>
 800c62c:	4603      	mov	r3, r0
 800c62e:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 800c630:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d11e      	bne.n	800c676 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800c638:	893b      	ldrh	r3, [r7, #8]
 800c63a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c63e:	b29b      	uxth	r3, r3
 800c640:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 800c642:	893b      	ldrh	r3, [r7, #8]
 800c644:	461a      	mov	r2, r3
 800c646:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c64a:	429a      	cmp	r2, r3
 800c64c:	dd0b      	ble.n	800c666 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 800c64e:	893a      	ldrh	r2, [r7, #8]
 800c650:	897b      	ldrh	r3, [r7, #10]
 800c652:	1ad3      	subs	r3, r2, r3
 800c654:	b29b      	uxth	r3, r3
 800c656:	b21b      	sxth	r3, r3
 800c658:	461a      	mov	r2, r3
					* 250;
 800c65a:	23fa      	movs	r3, #250	; 0xfa
 800c65c:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800c660:	683b      	ldr	r3, [r7, #0]
 800c662:	601a      	str	r2, [r3, #0]
 800c664:	e007      	b.n	800c676 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 800c666:	893b      	ldrh	r3, [r7, #8]
 800c668:	b21b      	sxth	r3, r3
 800c66a:	461a      	mov	r2, r3
 800c66c:	23fa      	movs	r3, #250	; 0xfa
 800c66e:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	601a      	str	r2, [r3, #0]

	}

	return Status;
 800c676:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c67a:	4618      	mov	r0, r3
 800c67c:	3710      	adds	r7, #16
 800c67e:	46bd      	mov	sp, r7
 800c680:	bd80      	pop	{r7, pc}

0800c682 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 800c682:	b480      	push	{r7}
 800c684:	b08b      	sub	sp, #44	; 0x2c
 800c686:	af00      	add	r7, sp, #0
 800c688:	60f8      	str	r0, [r7, #12]
 800c68a:	60b9      	str	r1, [r7, #8]
 800c68c:	607a      	str	r2, [r7, #4]
 800c68e:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800c690:	2308      	movs	r3, #8
 800c692:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 800c694:	2300      	movs	r3, #0
 800c696:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	f04f 32ff 	mov.w	r2, #4294967295
 800c69e:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800c6a0:	687a      	ldr	r2, [r7, #4]
 800c6a2:	69bb      	ldr	r3, [r7, #24]
 800c6a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6a8:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	69ba      	ldr	r2, [r7, #24]
 800c6ae:	fbb3 f2f2 	udiv	r2, r3, r2
 800c6b2:	69b9      	ldr	r1, [r7, #24]
 800c6b4:	fb01 f202 	mul.w	r2, r1, r2
 800c6b8:	1a9b      	subs	r3, r3, r2
 800c6ba:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800c6bc:	697b      	ldr	r3, [r7, #20]
 800c6be:	627b      	str	r3, [r7, #36]	; 0x24
 800c6c0:	e030      	b.n	800c724 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 800c6c6:	68fa      	ldr	r2, [r7, #12]
 800c6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ca:	4413      	add	r3, r2
 800c6cc:	781b      	ldrb	r3, [r3, #0]
 800c6ce:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 800c6d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6d2:	697b      	ldr	r3, [r7, #20]
 800c6d4:	429a      	cmp	r2, r3
 800c6d6:	d11e      	bne.n	800c716 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 800c6d8:	7ffa      	ldrb	r2, [r7, #31]
 800c6da:	693b      	ldr	r3, [r7, #16]
 800c6dc:	fa42 f303 	asr.w	r3, r2, r3
 800c6e0:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 800c6e2:	693b      	ldr	r3, [r7, #16]
 800c6e4:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 800c6e6:	e016      	b.n	800c716 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 800c6e8:	7ffb      	ldrb	r3, [r7, #31]
 800c6ea:	f003 0301 	and.w	r3, r3, #1
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d00b      	beq.n	800c70a <get_next_good_spad+0x88>
				success = 1;
 800c6f2:	2301      	movs	r3, #1
 800c6f4:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 800c6f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6f8:	69ba      	ldr	r2, [r7, #24]
 800c6fa:	fb03 f202 	mul.w	r2, r3, r2
 800c6fe:	6a3b      	ldr	r3, [r7, #32]
 800c700:	4413      	add	r3, r2
 800c702:	461a      	mov	r2, r3
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	601a      	str	r2, [r3, #0]
				break;
 800c708:	e009      	b.n	800c71e <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 800c70a:	7ffb      	ldrb	r3, [r7, #31]
 800c70c:	085b      	lsrs	r3, r3, #1
 800c70e:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 800c710:	6a3b      	ldr	r3, [r7, #32]
 800c712:	3301      	adds	r3, #1
 800c714:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 800c716:	6a3a      	ldr	r2, [r7, #32]
 800c718:	69bb      	ldr	r3, [r7, #24]
 800c71a:	429a      	cmp	r2, r3
 800c71c:	d3e4      	bcc.n	800c6e8 <get_next_good_spad+0x66>
				coarseIndex++) {
 800c71e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c720:	3301      	adds	r3, #1
 800c722:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800c724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c726:	68bb      	ldr	r3, [r7, #8]
 800c728:	429a      	cmp	r2, r3
 800c72a:	d202      	bcs.n	800c732 <get_next_good_spad+0xb0>
 800c72c:	7fbb      	ldrb	r3, [r7, #30]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d0c7      	beq.n	800c6c2 <get_next_good_spad+0x40>
		}
	}
}
 800c732:	bf00      	nop
 800c734:	372c      	adds	r7, #44	; 0x2c
 800c736:	46bd      	mov	sp, r7
 800c738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73c:	4770      	bx	lr
	...

0800c740 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 800c740:	b480      	push	{r7}
 800c742:	b085      	sub	sp, #20
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 800c748:	2301      	movs	r3, #1
 800c74a:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	099b      	lsrs	r3, r3, #6
 800c750:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800c752:	4a07      	ldr	r2, [pc, #28]	; (800c770 <is_aperture+0x30>)
 800c754:	68bb      	ldr	r3, [r7, #8]
 800c756:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d101      	bne.n	800c762 <is_aperture+0x22>
		isAperture = 0;
 800c75e:	2300      	movs	r3, #0
 800c760:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 800c762:	7bfb      	ldrb	r3, [r7, #15]
}
 800c764:	4618      	mov	r0, r3
 800c766:	3714      	adds	r7, #20
 800c768:	46bd      	mov	sp, r7
 800c76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76e:	4770      	bx	lr
 800c770:	20000428 	.word	0x20000428

0800c774 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 800c774:	b480      	push	{r7}
 800c776:	b089      	sub	sp, #36	; 0x24
 800c778:	af00      	add	r7, sp, #0
 800c77a:	60f8      	str	r0, [r7, #12]
 800c77c:	60b9      	str	r1, [r7, #8]
 800c77e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800c780:	2300      	movs	r3, #0
 800c782:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 800c784:	2308      	movs	r3, #8
 800c786:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 800c788:	687a      	ldr	r2, [r7, #4]
 800c78a:	69bb      	ldr	r3, [r7, #24]
 800c78c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c790:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	69ba      	ldr	r2, [r7, #24]
 800c796:	fbb3 f2f2 	udiv	r2, r3, r2
 800c79a:	69b9      	ldr	r1, [r7, #24]
 800c79c:	fb01 f202 	mul.w	r2, r1, r2
 800c7a0:	1a9b      	subs	r3, r3, r2
 800c7a2:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 800c7a4:	697a      	ldr	r2, [r7, #20]
 800c7a6:	68bb      	ldr	r3, [r7, #8]
 800c7a8:	429a      	cmp	r2, r3
 800c7aa:	d302      	bcc.n	800c7b2 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 800c7ac:	23ce      	movs	r3, #206	; 0xce
 800c7ae:	77fb      	strb	r3, [r7, #31]
 800c7b0:	e010      	b.n	800c7d4 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800c7b2:	68fa      	ldr	r2, [r7, #12]
 800c7b4:	697b      	ldr	r3, [r7, #20]
 800c7b6:	4413      	add	r3, r2
 800c7b8:	781b      	ldrb	r3, [r3, #0]
 800c7ba:	b25a      	sxtb	r2, r3
 800c7bc:	2101      	movs	r1, #1
 800c7be:	693b      	ldr	r3, [r7, #16]
 800c7c0:	fa01 f303 	lsl.w	r3, r1, r3
 800c7c4:	b25b      	sxtb	r3, r3
 800c7c6:	4313      	orrs	r3, r2
 800c7c8:	b259      	sxtb	r1, r3
 800c7ca:	68fa      	ldr	r2, [r7, #12]
 800c7cc:	697b      	ldr	r3, [r7, #20]
 800c7ce:	4413      	add	r3, r2
 800c7d0:	b2ca      	uxtb	r2, r1
 800c7d2:	701a      	strb	r2, [r3, #0]

	return status;
 800c7d4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c7d8:	4618      	mov	r0, r3
 800c7da:	3724      	adds	r7, #36	; 0x24
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e2:	4770      	bx	lr

0800c7e4 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b084      	sub	sp, #16
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
 800c7ec:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800c7ee:	2306      	movs	r3, #6
 800c7f0:	683a      	ldr	r2, [r7, #0]
 800c7f2:	21b0      	movs	r1, #176	; 0xb0
 800c7f4:	6878      	ldr	r0, [r7, #4]
 800c7f6:	f003 f8df 	bl	800f9b8 <VL53L0X_WriteMulti>
 800c7fa:	4603      	mov	r3, r0
 800c7fc:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800c7fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c802:	4618      	mov	r0, r3
 800c804:	3710      	adds	r7, #16
 800c806:	46bd      	mov	sp, r7
 800c808:	bd80      	pop	{r7, pc}

0800c80a <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800c80a:	b580      	push	{r7, lr}
 800c80c:	b084      	sub	sp, #16
 800c80e:	af00      	add	r7, sp, #0
 800c810:	6078      	str	r0, [r7, #4]
 800c812:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 800c814:	2306      	movs	r3, #6
 800c816:	683a      	ldr	r2, [r7, #0]
 800c818:	21b0      	movs	r1, #176	; 0xb0
 800c81a:	6878      	ldr	r0, [r7, #4]
 800c81c:	f003 f8fc 	bl	800fa18 <VL53L0X_ReadMulti>
 800c820:	4603      	mov	r3, r0
 800c822:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 800c824:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c828:	4618      	mov	r0, r3
 800c82a:	3710      	adds	r7, #16
 800c82c:	46bd      	mov	sp, r7
 800c82e:	bd80      	pop	{r7, pc}

0800c830 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b08c      	sub	sp, #48	; 0x30
 800c834:	af00      	add	r7, sp, #0
 800c836:	60f8      	str	r0, [r7, #12]
 800c838:	607a      	str	r2, [r7, #4]
 800c83a:	603b      	str	r3, [r7, #0]
 800c83c:	460b      	mov	r3, r1
 800c83e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800c840:	2300      	movs	r3, #0
 800c842:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 800c846:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c848:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 800c84a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c84c:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800c84e:	2300      	movs	r3, #0
 800c850:	62bb      	str	r3, [r7, #40]	; 0x28
 800c852:	e02b      	b.n	800c8ac <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 800c854:	f107 031c 	add.w	r3, r7, #28
 800c858:	6a3a      	ldr	r2, [r7, #32]
 800c85a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c85c:	6878      	ldr	r0, [r7, #4]
 800c85e:	f7ff ff10 	bl	800c682 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 800c862:	69fb      	ldr	r3, [r7, #28]
 800c864:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c868:	d103      	bne.n	800c872 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800c86a:	23ce      	movs	r3, #206	; 0xce
 800c86c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800c870:	e020      	b.n	800c8b4 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800c872:	69fb      	ldr	r3, [r7, #28]
 800c874:	461a      	mov	r2, r3
 800c876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c878:	4413      	add	r3, r2
 800c87a:	4618      	mov	r0, r3
 800c87c:	f7ff ff60 	bl	800c740 <is_aperture>
 800c880:	4603      	mov	r3, r0
 800c882:	461a      	mov	r2, r3
 800c884:	7afb      	ldrb	r3, [r7, #11]
 800c886:	4293      	cmp	r3, r2
 800c888:	d003      	beq.n	800c892 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800c88a:	23ce      	movs	r3, #206	; 0xce
 800c88c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800c890:	e010      	b.n	800c8b4 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800c892:	69fb      	ldr	r3, [r7, #28]
 800c894:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 800c896:	6a3a      	ldr	r2, [r7, #32]
 800c898:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c89a:	6838      	ldr	r0, [r7, #0]
 800c89c:	f7ff ff6a 	bl	800c774 <enable_spad_bit>
		currentSpad++;
 800c8a0:	6a3b      	ldr	r3, [r7, #32]
 800c8a2:	3301      	adds	r3, #1
 800c8a4:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800c8a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8a8:	3301      	adds	r3, #1
 800c8aa:	62bb      	str	r3, [r7, #40]	; 0x28
 800c8ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c8ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c8b0:	429a      	cmp	r2, r3
 800c8b2:	d3cf      	bcc.n	800c854 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 800c8b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c8b6:	6a3a      	ldr	r2, [r7, #32]
 800c8b8:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800c8ba:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d106      	bne.n	800c8d0 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800c8c2:	6839      	ldr	r1, [r7, #0]
 800c8c4:	68f8      	ldr	r0, [r7, #12]
 800c8c6:	f7ff ff8d 	bl	800c7e4 <set_ref_spad_map>
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 800c8d0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d121      	bne.n	800c91c <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 800c8d8:	f107 0314 	add.w	r3, r7, #20
 800c8dc:	4619      	mov	r1, r3
 800c8de:	68f8      	ldr	r0, [r7, #12]
 800c8e0:	f7ff ff93 	bl	800c80a <get_ref_spad_map>
 800c8e4:	4603      	mov	r3, r0
 800c8e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800c8ee:	e011      	b.n	800c914 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 800c8f0:	683a      	ldr	r2, [r7, #0]
 800c8f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8f4:	4413      	add	r3, r2
 800c8f6:	781a      	ldrb	r2, [r3, #0]
 800c8f8:	f107 0114 	add.w	r1, r7, #20
 800c8fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8fe:	440b      	add	r3, r1
 800c900:	781b      	ldrb	r3, [r3, #0]
 800c902:	429a      	cmp	r2, r3
 800c904:	d003      	beq.n	800c90e <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 800c906:	23ce      	movs	r3, #206	; 0xce
 800c908:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 800c90c:	e006      	b.n	800c91c <enable_ref_spads+0xec>
			}
			i++;
 800c90e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c910:	3301      	adds	r3, #1
 800c912:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 800c914:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c918:	429a      	cmp	r2, r3
 800c91a:	d3e9      	bcc.n	800c8f0 <enable_ref_spads+0xc0>
		}
	}
	return status;
 800c91c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800c920:	4618      	mov	r0, r3
 800c922:	3730      	adds	r7, #48	; 0x30
 800c924:	46bd      	mov	sp, r7
 800c926:	bd80      	pop	{r7, pc}

0800c928 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b08a      	sub	sp, #40	; 0x28
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
 800c930:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800c932:	2300      	movs	r3, #0
 800c934:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 800c938:	2300      	movs	r3, #0
 800c93a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800c944:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 800c948:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d107      	bne.n	800c960 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 800c950:	22c0      	movs	r2, #192	; 0xc0
 800c952:	2101      	movs	r1, #1
 800c954:	6878      	ldr	r0, [r7, #4]
 800c956:	f003 f88b 	bl	800fa70 <VL53L0X_WrByte>
 800c95a:	4603      	mov	r3, r0
 800c95c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 800c960:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c964:	2b00      	cmp	r3, #0
 800c966:	d108      	bne.n	800c97a <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 800c968:	f107 0308 	add.w	r3, r7, #8
 800c96c:	4619      	mov	r1, r3
 800c96e:	6878      	ldr	r0, [r7, #4]
 800c970:	f7ff fc00 	bl	800c174 <VL53L0X_PerformSingleRangingMeasurement>
 800c974:	4603      	mov	r3, r0
 800c976:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800c97a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d107      	bne.n	800c992 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c982:	2201      	movs	r2, #1
 800c984:	21ff      	movs	r1, #255	; 0xff
 800c986:	6878      	ldr	r0, [r7, #4]
 800c988:	f003 f872 	bl	800fa70 <VL53L0X_WrByte>
 800c98c:	4603      	mov	r3, r0
 800c98e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 800c992:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c996:	2b00      	cmp	r3, #0
 800c998:	d107      	bne.n	800c9aa <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 800c99a:	683a      	ldr	r2, [r7, #0]
 800c99c:	21b6      	movs	r1, #182	; 0xb6
 800c99e:	6878      	ldr	r0, [r7, #4]
 800c9a0:	f003 f912 	bl	800fbc8 <VL53L0X_RdWord>
 800c9a4:	4603      	mov	r3, r0
 800c9a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800c9aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d107      	bne.n	800c9c2 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	21ff      	movs	r1, #255	; 0xff
 800c9b6:	6878      	ldr	r0, [r7, #4]
 800c9b8:	f003 f85a 	bl	800fa70 <VL53L0X_WrByte>
 800c9bc:	4603      	mov	r3, r0
 800c9be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800c9c2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d112      	bne.n	800c9f0 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800c9ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c9ce:	461a      	mov	r2, r3
 800c9d0:	2101      	movs	r1, #1
 800c9d2:	6878      	ldr	r0, [r7, #4]
 800c9d4:	f003 f84c 	bl	800fa70 <VL53L0X_WrByte>
 800c9d8:	4603      	mov	r3, r0
 800c9da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800c9de:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d104      	bne.n	800c9f0 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c9ec:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 800c9f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	3728      	adds	r7, #40	; 0x28
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	bd80      	pop	{r7, pc}

0800c9fc <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 800c9fc:	b590      	push	{r4, r7, lr}
 800c9fe:	b09d      	sub	sp, #116	; 0x74
 800ca00:	af06      	add	r7, sp, #24
 800ca02:	60f8      	str	r0, [r7, #12]
 800ca04:	60b9      	str	r1, [r7, #8]
 800ca06:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ca08:	2300      	movs	r3, #0
 800ca0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 800ca0e:	23b4      	movs	r3, #180	; 0xb4
 800ca10:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 800ca14:	2303      	movs	r3, #3
 800ca16:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 800ca18:	232c      	movs	r3, #44	; 0x2c
 800ca1a:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 800ca20:	2300      	movs	r3, #0
 800ca22:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 800ca24:	2300      	movs	r3, #0
 800ca26:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 800ca28:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800ca2c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 800ca2e:	2300      	movs	r3, #0
 800ca30:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 800ca32:	2300      	movs	r3, #0
 800ca34:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 800ca36:	2306      	movs	r3, #6
 800ca38:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 800ca3e:	2300      	movs	r3, #0
 800ca40:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 800ca42:	2300      	movs	r3, #0
 800ca44:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 800ca48:	2300      	movs	r3, #0
 800ca4a:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 800ca50:	2300      	movs	r3, #0
 800ca52:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 800ca54:	2300      	movs	r3, #0
 800ca56:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 800ca60:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 800ca62:	2300      	movs	r3, #0
 800ca64:	64bb      	str	r3, [r7, #72]	; 0x48
 800ca66:	e009      	b.n	800ca7c <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800ca68:	68fa      	ldr	r2, [r7, #12]
 800ca6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca6c:	4413      	add	r3, r2
 800ca6e:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800ca72:	2200      	movs	r2, #0
 800ca74:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800ca76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca78:	3301      	adds	r3, #1
 800ca7a:	64bb      	str	r3, [r7, #72]	; 0x48
 800ca7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ca7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca80:	429a      	cmp	r2, r3
 800ca82:	d3f1      	bcc.n	800ca68 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800ca84:	2201      	movs	r2, #1
 800ca86:	21ff      	movs	r1, #255	; 0xff
 800ca88:	68f8      	ldr	r0, [r7, #12]
 800ca8a:	f002 fff1 	bl	800fa70 <VL53L0X_WrByte>
 800ca8e:	4603      	mov	r3, r0
 800ca90:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800ca94:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d107      	bne.n	800caac <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 800ca9c:	2200      	movs	r2, #0
 800ca9e:	214f      	movs	r1, #79	; 0x4f
 800caa0:	68f8      	ldr	r0, [r7, #12]
 800caa2:	f002 ffe5 	bl	800fa70 <VL53L0X_WrByte>
 800caa6:	4603      	mov	r3, r0
 800caa8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800caac:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d107      	bne.n	800cac4 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 800cab4:	222c      	movs	r2, #44	; 0x2c
 800cab6:	214e      	movs	r1, #78	; 0x4e
 800cab8:	68f8      	ldr	r0, [r7, #12]
 800caba:	f002 ffd9 	bl	800fa70 <VL53L0X_WrByte>
 800cabe:	4603      	mov	r3, r0
 800cac0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800cac4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d107      	bne.n	800cadc <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800cacc:	2200      	movs	r2, #0
 800cace:	21ff      	movs	r1, #255	; 0xff
 800cad0:	68f8      	ldr	r0, [r7, #12]
 800cad2:	f002 ffcd 	bl	800fa70 <VL53L0X_WrByte>
 800cad6:	4603      	mov	r3, r0
 800cad8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800cadc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d109      	bne.n	800caf8 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 800cae4:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800cae8:	461a      	mov	r2, r3
 800caea:	21b6      	movs	r1, #182	; 0xb6
 800caec:	68f8      	ldr	r0, [r7, #12]
 800caee:	f002 ffbf 	bl	800fa70 <VL53L0X_WrByte>
 800caf2:	4603      	mov	r3, r0
 800caf4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 800caf8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d107      	bne.n	800cb10 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 800cb00:	2200      	movs	r2, #0
 800cb02:	2180      	movs	r1, #128	; 0x80
 800cb04:	68f8      	ldr	r0, [r7, #12]
 800cb06:	f002 ffb3 	bl	800fa70 <VL53L0X_WrByte>
 800cb0a:	4603      	mov	r3, r0
 800cb0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 800cb10:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d10a      	bne.n	800cb2e <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 800cb18:	f107 0210 	add.w	r2, r7, #16
 800cb1c:	f107 0111 	add.w	r1, r7, #17
 800cb20:	2300      	movs	r3, #0
 800cb22:	68f8      	ldr	r0, [r7, #12]
 800cb24:	f000 fbbb 	bl	800d29e <VL53L0X_perform_ref_calibration>
 800cb28:	4603      	mov	r3, r0
 800cb2a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 800cb2e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d121      	bne.n	800cb7a <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 800cb36:	2300      	movs	r3, #0
 800cb38:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 800cb3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb3c:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 800cb3e:	2300      	movs	r3, #0
 800cb40:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 800cb42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb44:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 800cb52:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800cb56:	f107 0218 	add.w	r2, r7, #24
 800cb5a:	9204      	str	r2, [sp, #16]
 800cb5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cb5e:	9203      	str	r2, [sp, #12]
 800cb60:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cb62:	9202      	str	r2, [sp, #8]
 800cb64:	9301      	str	r3, [sp, #4]
 800cb66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb68:	9300      	str	r3, [sp, #0]
 800cb6a:	4623      	mov	r3, r4
 800cb6c:	4602      	mov	r2, r0
 800cb6e:	68f8      	ldr	r0, [r7, #12]
 800cb70:	f7ff fe5e 	bl	800c830 <enable_ref_spads>
 800cb74:	4603      	mov	r3, r0
 800cb76:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800cb7a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d174      	bne.n	800cc6c <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 800cb82:	69bb      	ldr	r3, [r7, #24]
 800cb84:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 800cb86:	f107 0312 	add.w	r3, r7, #18
 800cb8a:	4619      	mov	r1, r3
 800cb8c:	68f8      	ldr	r0, [r7, #12]
 800cb8e:	f7ff fecb 	bl	800c928 <perform_ref_signal_measurement>
 800cb92:	4603      	mov	r3, r0
 800cb94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 800cb98:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d161      	bne.n	800cc64 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 800cba0:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 800cba2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cba4:	429a      	cmp	r2, r3
 800cba6:	d25d      	bcs.n	800cc64 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 800cba8:	2300      	movs	r3, #0
 800cbaa:	64bb      	str	r3, [r7, #72]	; 0x48
 800cbac:	e009      	b.n	800cbc2 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800cbae:	68fa      	ldr	r2, [r7, #12]
 800cbb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cbb2:	4413      	add	r3, r2
 800cbb4:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800cbb8:	2200      	movs	r2, #0
 800cbba:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 800cbbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cbbe:	3301      	adds	r3, #1
 800cbc0:	64bb      	str	r3, [r7, #72]	; 0x48
 800cbc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cbc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbc6:	429a      	cmp	r2, r3
 800cbc8:	d3f1      	bcc.n	800cbae <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 800cbca:	e002      	b.n	800cbd2 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 800cbcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cbce:	3301      	adds	r3, #1
 800cbd0:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 800cbd2:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800cbd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cbd8:	4413      	add	r3, r2
 800cbda:	4618      	mov	r0, r3
 800cbdc:	f7ff fdb0 	bl	800c740 <is_aperture>
 800cbe0:	4603      	mov	r3, r0
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d103      	bne.n	800cbee <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 800cbe6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cbe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbea:	429a      	cmp	r2, r3
 800cbec:	d3ee      	bcc.n	800cbcc <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 800cbee:	2301      	movs	r3, #1
 800cbf0:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 800cbf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbf4:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 800cc02:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800cc06:	f107 0218 	add.w	r2, r7, #24
 800cc0a:	9204      	str	r2, [sp, #16]
 800cc0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cc0e:	9203      	str	r2, [sp, #12]
 800cc10:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cc12:	9202      	str	r2, [sp, #8]
 800cc14:	9301      	str	r3, [sp, #4]
 800cc16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc18:	9300      	str	r3, [sp, #0]
 800cc1a:	4623      	mov	r3, r4
 800cc1c:	4602      	mov	r2, r0
 800cc1e:	68f8      	ldr	r0, [r7, #12]
 800cc20:	f7ff fe06 	bl	800c830 <enable_ref_spads>
 800cc24:	4603      	mov	r3, r0
 800cc26:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800cc2a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d11b      	bne.n	800cc6a <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 800cc32:	69bb      	ldr	r3, [r7, #24]
 800cc34:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 800cc36:	f107 0312 	add.w	r3, r7, #18
 800cc3a:	4619      	mov	r1, r3
 800cc3c:	68f8      	ldr	r0, [r7, #12]
 800cc3e:	f7ff fe73 	bl	800c928 <perform_ref_signal_measurement>
 800cc42:	4603      	mov	r3, r0
 800cc44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 800cc48:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d10c      	bne.n	800cc6a <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 800cc50:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800cc52:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cc54:	429a      	cmp	r2, r3
 800cc56:	d208      	bcs.n	800cc6a <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 800cc58:	2301      	movs	r3, #1
 800cc5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 800cc5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc60:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 800cc62:	e002      	b.n	800cc6a <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 800cc64:	2300      	movs	r3, #0
 800cc66:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cc68:	e000      	b.n	800cc6c <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 800cc6a:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800cc6c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	f040 80af 	bne.w	800cdd4 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 800cc76:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 800cc78:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cc7a:	429a      	cmp	r2, r3
 800cc7c:	f240 80aa 	bls.w	800cdd4 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 800cc80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 800cc86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc88:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	f503 7192 	add.w	r1, r3, #292	; 0x124
 800cc90:	f107 031c 	add.w	r3, r7, #28
 800cc94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cc96:	4618      	mov	r0, r3
 800cc98:	f003 f844 	bl	800fd24 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 800cc9c:	8a7b      	ldrh	r3, [r7, #18]
 800cc9e:	461a      	mov	r2, r3
 800cca0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cca2:	1ad3      	subs	r3, r2, r3
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	bfb8      	it	lt
 800cca8:	425b      	neglt	r3, r3
 800ccaa:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 800ccac:	2300      	movs	r3, #0
 800ccae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 800ccb2:	e086      	b.n	800cdc2 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 800ccba:	f107 0314 	add.w	r3, r7, #20
 800ccbe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ccc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ccc2:	f7ff fcde 	bl	800c682 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 800ccc6:	697b      	ldr	r3, [r7, #20]
 800ccc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cccc:	d103      	bne.n	800ccd6 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800ccce:	23ce      	movs	r3, #206	; 0xce
 800ccd0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 800ccd4:	e07e      	b.n	800cdd4 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 800ccd6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800ccda:	697a      	ldr	r2, [r7, #20]
 800ccdc:	4413      	add	r3, r2
 800ccde:	4618      	mov	r0, r3
 800cce0:	f7ff fd2e 	bl	800c740 <is_aperture>
 800cce4:	4603      	mov	r3, r0
 800cce6:	461a      	mov	r2, r3
 800cce8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ccea:	4293      	cmp	r3, r2
 800ccec:	d003      	beq.n	800ccf6 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 800ccee:	2301      	movs	r3, #1
 800ccf0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 800ccf4:	e06e      	b.n	800cdd4 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 800ccf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ccf8:	3301      	adds	r3, #1
 800ccfa:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 800ccfc:	697b      	ldr	r3, [r7, #20]
 800ccfe:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 800cd06:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cd08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	f7ff fd32 	bl	800c774 <enable_spad_bit>
 800cd10:	4603      	mov	r3, r0
 800cd12:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800cd16:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d10c      	bne.n	800cd38 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 800cd1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd20:	3301      	adds	r3, #1
 800cd22:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 800cd2a:	4619      	mov	r1, r3
 800cd2c:	68f8      	ldr	r0, [r7, #12]
 800cd2e:	f7ff fd59 	bl	800c7e4 <set_ref_spad_map>
 800cd32:	4603      	mov	r3, r0
 800cd34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 800cd38:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d146      	bne.n	800cdce <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 800cd40:	f107 0312 	add.w	r3, r7, #18
 800cd44:	4619      	mov	r1, r3
 800cd46:	68f8      	ldr	r0, [r7, #12]
 800cd48:	f7ff fdee 	bl	800c928 <perform_ref_signal_measurement>
 800cd4c:	4603      	mov	r3, r0
 800cd4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 800cd52:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d13b      	bne.n	800cdd2 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800cd5a:	8a7b      	ldrh	r3, [r7, #18]
 800cd5c:	461a      	mov	r2, r3
 800cd5e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cd60:	1ad3      	subs	r3, r2, r3
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	bfb8      	it	lt
 800cd66:	425b      	neglt	r3, r3
 800cd68:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 800cd6a:	8a7b      	ldrh	r3, [r7, #18]
 800cd6c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cd6e:	429a      	cmp	r2, r3
 800cd70:	d21c      	bcs.n	800cdac <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 800cd72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd76:	429a      	cmp	r2, r3
 800cd78:	d914      	bls.n	800cda4 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 800cd7a:	f107 031c 	add.w	r3, r7, #28
 800cd7e:	4619      	mov	r1, r3
 800cd80:	68f8      	ldr	r0, [r7, #12]
 800cd82:	f7ff fd2f 	bl	800c7e4 <set_ref_spad_map>
 800cd86:	4603      	mov	r3, r0
 800cd88:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 800cd92:	f107 011c 	add.w	r1, r7, #28
 800cd96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd98:	4618      	mov	r0, r3
 800cd9a:	f002 ffc3 	bl	800fd24 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 800cd9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cda0:	3b01      	subs	r3, #1
 800cda2:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 800cda4:	2301      	movs	r3, #1
 800cda6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdaa:	e00a      	b.n	800cdc2 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 800cdac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdae:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 800cdb6:	f107 031c 	add.w	r3, r7, #28
 800cdba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	f002 ffb1 	bl	800fd24 <memcpy>
		while (!complete) {
 800cdc2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	f43f af74 	beq.w	800ccb4 <VL53L0X_perform_ref_spad_management+0x2b8>
 800cdcc:	e002      	b.n	800cdd4 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800cdce:	bf00      	nop
 800cdd0:	e000      	b.n	800cdd4 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800cdd2:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800cdd4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d115      	bne.n	800ce08 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 800cddc:	68bb      	ldr	r3, [r7, #8]
 800cdde:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cde0:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800cde8:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	2201      	movs	r2, #1
 800cdee:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800cdf2:	68bb      	ldr	r3, [r7, #8]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	b2da      	uxtb	r2, r3
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	781a      	ldrb	r2, [r3, #0]
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 800ce08:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	375c      	adds	r7, #92	; 0x5c
 800ce10:	46bd      	mov	sp, r7
 800ce12:	bd90      	pop	{r4, r7, pc}

0800ce14 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 800ce14:	b590      	push	{r4, r7, lr}
 800ce16:	b093      	sub	sp, #76	; 0x4c
 800ce18:	af06      	add	r7, sp, #24
 800ce1a:	60f8      	str	r0, [r7, #12]
 800ce1c:	60b9      	str	r1, [r7, #8]
 800ce1e:	4613      	mov	r3, r2
 800ce20:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ce22:	2300      	movs	r3, #0
 800ce24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 800ce28:	2300      	movs	r3, #0
 800ce2a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 800ce2c:	23b4      	movs	r3, #180	; 0xb4
 800ce2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 800ce32:	2306      	movs	r3, #6
 800ce34:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800ce36:	232c      	movs	r3, #44	; 0x2c
 800ce38:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800ce3a:	2201      	movs	r2, #1
 800ce3c:	21ff      	movs	r1, #255	; 0xff
 800ce3e:	68f8      	ldr	r0, [r7, #12]
 800ce40:	f002 fe16 	bl	800fa70 <VL53L0X_WrByte>
 800ce44:	4603      	mov	r3, r0
 800ce46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800ce4a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d107      	bne.n	800ce62 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 800ce52:	2200      	movs	r2, #0
 800ce54:	214f      	movs	r1, #79	; 0x4f
 800ce56:	68f8      	ldr	r0, [r7, #12]
 800ce58:	f002 fe0a 	bl	800fa70 <VL53L0X_WrByte>
 800ce5c:	4603      	mov	r3, r0
 800ce5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800ce62:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d107      	bne.n	800ce7a <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 800ce6a:	222c      	movs	r2, #44	; 0x2c
 800ce6c:	214e      	movs	r1, #78	; 0x4e
 800ce6e:	68f8      	ldr	r0, [r7, #12]
 800ce70:	f002 fdfe 	bl	800fa70 <VL53L0X_WrByte>
 800ce74:	4603      	mov	r3, r0
 800ce76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800ce7a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d107      	bne.n	800ce92 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800ce82:	2200      	movs	r2, #0
 800ce84:	21ff      	movs	r1, #255	; 0xff
 800ce86:	68f8      	ldr	r0, [r7, #12]
 800ce88:	f002 fdf2 	bl	800fa70 <VL53L0X_WrByte>
 800ce8c:	4603      	mov	r3, r0
 800ce8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800ce92:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d109      	bne.n	800ceae <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 800ce9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ce9e:	461a      	mov	r2, r3
 800cea0:	21b6      	movs	r1, #182	; 0xb6
 800cea2:	68f8      	ldr	r0, [r7, #12]
 800cea4:	f002 fde4 	bl	800fa70 <VL53L0X_WrByte>
 800cea8:	4603      	mov	r3, r0
 800ceaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 800ceae:	2300      	movs	r3, #0
 800ceb0:	627b      	str	r3, [r7, #36]	; 0x24
 800ceb2:	e009      	b.n	800cec8 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800ceb4:	68fa      	ldr	r2, [r7, #12]
 800ceb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceb8:	4413      	add	r3, r2
 800ceba:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800cebe:	2200      	movs	r2, #0
 800cec0:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800cec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cec4:	3301      	adds	r3, #1
 800cec6:	627b      	str	r3, [r7, #36]	; 0x24
 800cec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ceca:	69fb      	ldr	r3, [r7, #28]
 800cecc:	429a      	cmp	r2, r3
 800cece:	d3f1      	bcc.n	800ceb4 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 800ced0:	79fb      	ldrb	r3, [r7, #7]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d011      	beq.n	800cefa <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800ced6:	e002      	b.n	800cede <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 800ced8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceda:	3301      	adds	r3, #1
 800cedc:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800cede:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800cee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cee4:	4413      	add	r3, r2
 800cee6:	4618      	mov	r0, r3
 800cee8:	f7ff fc2a 	bl	800c740 <is_aperture>
 800ceec:	4603      	mov	r3, r0
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d103      	bne.n	800cefa <VL53L0X_set_reference_spads+0xe6>
 800cef2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cef4:	69bb      	ldr	r3, [r7, #24]
 800cef6:	429a      	cmp	r2, r3
 800cef8:	d3ee      	bcc.n	800ced8 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 800cf06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cf0a:	79f9      	ldrb	r1, [r7, #7]
 800cf0c:	f107 0214 	add.w	r2, r7, #20
 800cf10:	9204      	str	r2, [sp, #16]
 800cf12:	68ba      	ldr	r2, [r7, #8]
 800cf14:	9203      	str	r2, [sp, #12]
 800cf16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf18:	9202      	str	r2, [sp, #8]
 800cf1a:	9301      	str	r3, [sp, #4]
 800cf1c:	69fb      	ldr	r3, [r7, #28]
 800cf1e:	9300      	str	r3, [sp, #0]
 800cf20:	4623      	mov	r3, r4
 800cf22:	4602      	mov	r2, r0
 800cf24:	68f8      	ldr	r0, [r7, #12]
 800cf26:	f7ff fc83 	bl	800c830 <enable_ref_spads>
 800cf2a:	4603      	mov	r3, r0
 800cf2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 800cf30:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d10c      	bne.n	800cf52 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	2201      	movs	r2, #1
 800cf3c:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800cf40:	68bb      	ldr	r3, [r7, #8]
 800cf42:	b2da      	uxtb	r2, r3
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	79fa      	ldrb	r2, [r7, #7]
 800cf4e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800cf52:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800cf56:	4618      	mov	r0, r3
 800cf58:	3734      	adds	r7, #52	; 0x34
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	bd90      	pop	{r4, r7, pc}

0800cf5e <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 800cf5e:	b580      	push	{r7, lr}
 800cf60:	b084      	sub	sp, #16
 800cf62:	af00      	add	r7, sp, #0
 800cf64:	6078      	str	r0, [r7, #4]
 800cf66:	460b      	mov	r3, r1
 800cf68:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800cf6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d10a      	bne.n	800cf8c <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800cf76:	78fb      	ldrb	r3, [r7, #3]
 800cf78:	f043 0301 	orr.w	r3, r3, #1
 800cf7c:	b2db      	uxtb	r3, r3
 800cf7e:	461a      	mov	r2, r3
 800cf80:	2100      	movs	r1, #0
 800cf82:	6878      	ldr	r0, [r7, #4]
 800cf84:	f002 fd74 	bl	800fa70 <VL53L0X_WrByte>
 800cf88:	4603      	mov	r3, r0
 800cf8a:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 800cf8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d104      	bne.n	800cf9e <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800cf94:	6878      	ldr	r0, [r7, #4]
 800cf96:	f000 f9e2 	bl	800d35e <VL53L0X_measurement_poll_for_completion>
 800cf9a:	4603      	mov	r3, r0
 800cf9c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800cf9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d105      	bne.n	800cfb2 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800cfa6:	2100      	movs	r1, #0
 800cfa8:	6878      	ldr	r0, [r7, #4]
 800cfaa:	f7ff fa6d 	bl	800c488 <VL53L0X_ClearInterruptMask>
 800cfae:	4603      	mov	r3, r0
 800cfb0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800cfb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d106      	bne.n	800cfc8 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 800cfba:	2200      	movs	r2, #0
 800cfbc:	2100      	movs	r1, #0
 800cfbe:	6878      	ldr	r0, [r7, #4]
 800cfc0:	f002 fd56 	bl	800fa70 <VL53L0X_WrByte>
 800cfc4:	4603      	mov	r3, r0
 800cfc6:	73fb      	strb	r3, [r7, #15]

	return Status;
 800cfc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cfcc:	4618      	mov	r0, r3
 800cfce:	3710      	adds	r7, #16
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	bd80      	pop	{r7, pc}

0800cfd4 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b084      	sub	sp, #16
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
 800cfdc:	4608      	mov	r0, r1
 800cfde:	4611      	mov	r1, r2
 800cfe0:	461a      	mov	r2, r3
 800cfe2:	4603      	mov	r3, r0
 800cfe4:	70fb      	strb	r3, [r7, #3]
 800cfe6:	460b      	mov	r3, r1
 800cfe8:	70bb      	strb	r3, [r7, #2]
 800cfea:	4613      	mov	r3, r2
 800cfec:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cfee:	2300      	movs	r3, #0
 800cff0:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 800cff2:	2300      	movs	r3, #0
 800cff4:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800cff6:	2201      	movs	r2, #1
 800cff8:	21ff      	movs	r1, #255	; 0xff
 800cffa:	6878      	ldr	r0, [r7, #4]
 800cffc:	f002 fd38 	bl	800fa70 <VL53L0X_WrByte>
 800d000:	4603      	mov	r3, r0
 800d002:	461a      	mov	r2, r3
 800d004:	7bfb      	ldrb	r3, [r7, #15]
 800d006:	4313      	orrs	r3, r2
 800d008:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800d00a:	2200      	movs	r2, #0
 800d00c:	2100      	movs	r1, #0
 800d00e:	6878      	ldr	r0, [r7, #4]
 800d010:	f002 fd2e 	bl	800fa70 <VL53L0X_WrByte>
 800d014:	4603      	mov	r3, r0
 800d016:	461a      	mov	r2, r3
 800d018:	7bfb      	ldrb	r3, [r7, #15]
 800d01a:	4313      	orrs	r3, r2
 800d01c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800d01e:	2200      	movs	r2, #0
 800d020:	21ff      	movs	r1, #255	; 0xff
 800d022:	6878      	ldr	r0, [r7, #4]
 800d024:	f002 fd24 	bl	800fa70 <VL53L0X_WrByte>
 800d028:	4603      	mov	r3, r0
 800d02a:	461a      	mov	r2, r3
 800d02c:	7bfb      	ldrb	r3, [r7, #15]
 800d02e:	4313      	orrs	r3, r2
 800d030:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 800d032:	78fb      	ldrb	r3, [r7, #3]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d01e      	beq.n	800d076 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 800d038:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d009      	beq.n	800d054 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 800d040:	69ba      	ldr	r2, [r7, #24]
 800d042:	21cb      	movs	r1, #203	; 0xcb
 800d044:	6878      	ldr	r0, [r7, #4]
 800d046:	f002 fd95 	bl	800fb74 <VL53L0X_RdByte>
 800d04a:	4603      	mov	r3, r0
 800d04c:	461a      	mov	r2, r3
 800d04e:	7bfb      	ldrb	r3, [r7, #15]
 800d050:	4313      	orrs	r3, r2
 800d052:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800d054:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d02a      	beq.n	800d0b2 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800d05c:	f107 030e 	add.w	r3, r7, #14
 800d060:	461a      	mov	r2, r3
 800d062:	21ee      	movs	r1, #238	; 0xee
 800d064:	6878      	ldr	r0, [r7, #4]
 800d066:	f002 fd85 	bl	800fb74 <VL53L0X_RdByte>
 800d06a:	4603      	mov	r3, r0
 800d06c:	461a      	mov	r2, r3
 800d06e:	7bfb      	ldrb	r3, [r7, #15]
 800d070:	4313      	orrs	r3, r2
 800d072:	73fb      	strb	r3, [r7, #15]
 800d074:	e01d      	b.n	800d0b2 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800d076:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d00a      	beq.n	800d094 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800d07e:	78bb      	ldrb	r3, [r7, #2]
 800d080:	461a      	mov	r2, r3
 800d082:	21cb      	movs	r1, #203	; 0xcb
 800d084:	6878      	ldr	r0, [r7, #4]
 800d086:	f002 fcf3 	bl	800fa70 <VL53L0X_WrByte>
 800d08a:	4603      	mov	r3, r0
 800d08c:	461a      	mov	r2, r3
 800d08e:	7bfb      	ldrb	r3, [r7, #15]
 800d090:	4313      	orrs	r3, r2
 800d092:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800d094:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d00a      	beq.n	800d0b2 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800d09c:	787b      	ldrb	r3, [r7, #1]
 800d09e:	2280      	movs	r2, #128	; 0x80
 800d0a0:	21ee      	movs	r1, #238	; 0xee
 800d0a2:	6878      	ldr	r0, [r7, #4]
 800d0a4:	f002 fd32 	bl	800fb0c <VL53L0X_UpdateByte>
 800d0a8:	4603      	mov	r3, r0
 800d0aa:	461a      	mov	r2, r3
 800d0ac:	7bfb      	ldrb	r3, [r7, #15]
 800d0ae:	4313      	orrs	r3, r2
 800d0b0:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800d0b2:	2201      	movs	r2, #1
 800d0b4:	21ff      	movs	r1, #255	; 0xff
 800d0b6:	6878      	ldr	r0, [r7, #4]
 800d0b8:	f002 fcda 	bl	800fa70 <VL53L0X_WrByte>
 800d0bc:	4603      	mov	r3, r0
 800d0be:	461a      	mov	r2, r3
 800d0c0:	7bfb      	ldrb	r3, [r7, #15]
 800d0c2:	4313      	orrs	r3, r2
 800d0c4:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800d0c6:	2201      	movs	r2, #1
 800d0c8:	2100      	movs	r1, #0
 800d0ca:	6878      	ldr	r0, [r7, #4]
 800d0cc:	f002 fcd0 	bl	800fa70 <VL53L0X_WrByte>
 800d0d0:	4603      	mov	r3, r0
 800d0d2:	461a      	mov	r2, r3
 800d0d4:	7bfb      	ldrb	r3, [r7, #15]
 800d0d6:	4313      	orrs	r3, r2
 800d0d8:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800d0da:	2200      	movs	r2, #0
 800d0dc:	21ff      	movs	r1, #255	; 0xff
 800d0de:	6878      	ldr	r0, [r7, #4]
 800d0e0:	f002 fcc6 	bl	800fa70 <VL53L0X_WrByte>
 800d0e4:	4603      	mov	r3, r0
 800d0e6:	461a      	mov	r2, r3
 800d0e8:	7bfb      	ldrb	r3, [r7, #15]
 800d0ea:	4313      	orrs	r3, r2
 800d0ec:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800d0ee:	7bbb      	ldrb	r3, [r7, #14]
 800d0f0:	f023 0310 	bic.w	r3, r3, #16
 800d0f4:	b2da      	uxtb	r2, r3
 800d0f6:	69fb      	ldr	r3, [r7, #28]
 800d0f8:	701a      	strb	r2, [r3, #0]

	return Status;
 800d0fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d0fe:	4618      	mov	r0, r3
 800d100:	3710      	adds	r7, #16
 800d102:	46bd      	mov	sp, r7
 800d104:	bd80      	pop	{r7, pc}

0800d106 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800d106:	b580      	push	{r7, lr}
 800d108:	b08a      	sub	sp, #40	; 0x28
 800d10a:	af04      	add	r7, sp, #16
 800d10c:	60f8      	str	r0, [r7, #12]
 800d10e:	60b9      	str	r1, [r7, #8]
 800d110:	4611      	mov	r1, r2
 800d112:	461a      	mov	r2, r3
 800d114:	460b      	mov	r3, r1
 800d116:	71fb      	strb	r3, [r7, #7]
 800d118:	4613      	mov	r3, r2
 800d11a:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d11c:	2300      	movs	r3, #0
 800d11e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800d120:	2300      	movs	r3, #0
 800d122:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800d124:	2300      	movs	r3, #0
 800d126:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800d128:	2300      	movs	r3, #0
 800d12a:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 800d12c:	2300      	movs	r3, #0
 800d12e:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800d130:	79bb      	ldrb	r3, [r7, #6]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d003      	beq.n	800d13e <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800d13c:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800d13e:	2201      	movs	r2, #1
 800d140:	2101      	movs	r1, #1
 800d142:	68f8      	ldr	r0, [r7, #12]
 800d144:	f002 fc94 	bl	800fa70 <VL53L0X_WrByte>
 800d148:	4603      	mov	r3, r0
 800d14a:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800d14c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d105      	bne.n	800d160 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 800d154:	2140      	movs	r1, #64	; 0x40
 800d156:	68f8      	ldr	r0, [r7, #12]
 800d158:	f7ff ff01 	bl	800cf5e <VL53L0X_perform_single_ref_calibration>
 800d15c:	4603      	mov	r3, r0
 800d15e:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800d160:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d164:	2b00      	cmp	r3, #0
 800d166:	d115      	bne.n	800d194 <VL53L0X_perform_vhv_calibration+0x8e>
 800d168:	79fb      	ldrb	r3, [r7, #7]
 800d16a:	2b01      	cmp	r3, #1
 800d16c:	d112      	bne.n	800d194 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800d16e:	7d39      	ldrb	r1, [r7, #20]
 800d170:	7d7a      	ldrb	r2, [r7, #21]
 800d172:	2300      	movs	r3, #0
 800d174:	9303      	str	r3, [sp, #12]
 800d176:	2301      	movs	r3, #1
 800d178:	9302      	str	r3, [sp, #8]
 800d17a:	f107 0313 	add.w	r3, r7, #19
 800d17e:	9301      	str	r3, [sp, #4]
 800d180:	68bb      	ldr	r3, [r7, #8]
 800d182:	9300      	str	r3, [sp, #0]
 800d184:	460b      	mov	r3, r1
 800d186:	2101      	movs	r1, #1
 800d188:	68f8      	ldr	r0, [r7, #12]
 800d18a:	f7ff ff23 	bl	800cfd4 <VL53L0X_ref_calibration_io>
 800d18e:	4603      	mov	r3, r0
 800d190:	75fb      	strb	r3, [r7, #23]
 800d192:	e002      	b.n	800d19a <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 800d194:	68bb      	ldr	r3, [r7, #8]
 800d196:	2200      	movs	r2, #0
 800d198:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800d19a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d112      	bne.n	800d1c8 <VL53L0X_perform_vhv_calibration+0xc2>
 800d1a2:	79bb      	ldrb	r3, [r7, #6]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d00f      	beq.n	800d1c8 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800d1a8:	7dbb      	ldrb	r3, [r7, #22]
 800d1aa:	461a      	mov	r2, r3
 800d1ac:	2101      	movs	r1, #1
 800d1ae:	68f8      	ldr	r0, [r7, #12]
 800d1b0:	f002 fc5e 	bl	800fa70 <VL53L0X_WrByte>
 800d1b4:	4603      	mov	r3, r0
 800d1b6:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800d1b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d103      	bne.n	800d1c8 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	7dba      	ldrb	r2, [r7, #22]
 800d1c4:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800d1c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	3718      	adds	r7, #24
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	bd80      	pop	{r7, pc}

0800d1d4 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b08a      	sub	sp, #40	; 0x28
 800d1d8:	af04      	add	r7, sp, #16
 800d1da:	60f8      	str	r0, [r7, #12]
 800d1dc:	60b9      	str	r1, [r7, #8]
 800d1de:	4611      	mov	r1, r2
 800d1e0:	461a      	mov	r2, r3
 800d1e2:	460b      	mov	r3, r1
 800d1e4:	71fb      	strb	r3, [r7, #7]
 800d1e6:	4613      	mov	r3, r2
 800d1e8:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800d1fa:	79bb      	ldrb	r3, [r7, #6]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d003      	beq.n	800d208 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800d206:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800d208:	2202      	movs	r2, #2
 800d20a:	2101      	movs	r1, #1
 800d20c:	68f8      	ldr	r0, [r7, #12]
 800d20e:	f002 fc2f 	bl	800fa70 <VL53L0X_WrByte>
 800d212:	4603      	mov	r3, r0
 800d214:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800d216:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d105      	bne.n	800d22a <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800d21e:	2100      	movs	r1, #0
 800d220:	68f8      	ldr	r0, [r7, #12]
 800d222:	f7ff fe9c 	bl	800cf5e <VL53L0X_perform_single_ref_calibration>
 800d226:	4603      	mov	r3, r0
 800d228:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800d22a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d115      	bne.n	800d25e <VL53L0X_perform_phase_calibration+0x8a>
 800d232:	79fb      	ldrb	r3, [r7, #7]
 800d234:	2b01      	cmp	r3, #1
 800d236:	d112      	bne.n	800d25e <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800d238:	7d39      	ldrb	r1, [r7, #20]
 800d23a:	7d7a      	ldrb	r2, [r7, #21]
 800d23c:	2301      	movs	r3, #1
 800d23e:	9303      	str	r3, [sp, #12]
 800d240:	2300      	movs	r3, #0
 800d242:	9302      	str	r3, [sp, #8]
 800d244:	68bb      	ldr	r3, [r7, #8]
 800d246:	9301      	str	r3, [sp, #4]
 800d248:	f107 0313 	add.w	r3, r7, #19
 800d24c:	9300      	str	r3, [sp, #0]
 800d24e:	460b      	mov	r3, r1
 800d250:	2101      	movs	r1, #1
 800d252:	68f8      	ldr	r0, [r7, #12]
 800d254:	f7ff febe 	bl	800cfd4 <VL53L0X_ref_calibration_io>
 800d258:	4603      	mov	r3, r0
 800d25a:	75fb      	strb	r3, [r7, #23]
 800d25c:	e002      	b.n	800d264 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800d25e:	68bb      	ldr	r3, [r7, #8]
 800d260:	2200      	movs	r2, #0
 800d262:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800d264:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d112      	bne.n	800d292 <VL53L0X_perform_phase_calibration+0xbe>
 800d26c:	79bb      	ldrb	r3, [r7, #6]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d00f      	beq.n	800d292 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800d272:	7dbb      	ldrb	r3, [r7, #22]
 800d274:	461a      	mov	r2, r3
 800d276:	2101      	movs	r1, #1
 800d278:	68f8      	ldr	r0, [r7, #12]
 800d27a:	f002 fbf9 	bl	800fa70 <VL53L0X_WrByte>
 800d27e:	4603      	mov	r3, r0
 800d280:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800d282:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d103      	bne.n	800d292 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	7dba      	ldrb	r2, [r7, #22]
 800d28e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800d292:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d296:	4618      	mov	r0, r3
 800d298:	3718      	adds	r7, #24
 800d29a:	46bd      	mov	sp, r7
 800d29c:	bd80      	pop	{r7, pc}

0800d29e <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800d29e:	b580      	push	{r7, lr}
 800d2a0:	b086      	sub	sp, #24
 800d2a2:	af00      	add	r7, sp, #0
 800d2a4:	60f8      	str	r0, [r7, #12]
 800d2a6:	60b9      	str	r1, [r7, #8]
 800d2a8:	607a      	str	r2, [r7, #4]
 800d2aa:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800d2ba:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 800d2bc:	78fa      	ldrb	r2, [r7, #3]
 800d2be:	2300      	movs	r3, #0
 800d2c0:	68b9      	ldr	r1, [r7, #8]
 800d2c2:	68f8      	ldr	r0, [r7, #12]
 800d2c4:	f7ff ff1f 	bl	800d106 <VL53L0X_perform_vhv_calibration>
 800d2c8:	4603      	mov	r3, r0
 800d2ca:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800d2cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d107      	bne.n	800d2e4 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 800d2d4:	78fa      	ldrb	r2, [r7, #3]
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	6879      	ldr	r1, [r7, #4]
 800d2da:	68f8      	ldr	r0, [r7, #12]
 800d2dc:	f7ff ff7a 	bl	800d1d4 <VL53L0X_perform_phase_calibration>
 800d2e0:	4603      	mov	r3, r0
 800d2e2:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 800d2e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d10f      	bne.n	800d30c <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800d2ec:	7dbb      	ldrb	r3, [r7, #22]
 800d2ee:	461a      	mov	r2, r3
 800d2f0:	2101      	movs	r1, #1
 800d2f2:	68f8      	ldr	r0, [r7, #12]
 800d2f4:	f002 fbbc 	bl	800fa70 <VL53L0X_WrByte>
 800d2f8:	4603      	mov	r3, r0
 800d2fa:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800d2fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d103      	bne.n	800d30c <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	7dba      	ldrb	r2, [r7, #22]
 800d308:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800d30c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d310:	4618      	mov	r0, r3
 800d312:	3718      	adds	r7, #24
 800d314:	46bd      	mov	sp, r7
 800d316:	bd80      	pop	{r7, pc}

0800d318 <VL53L0X_set_ref_calibration>:

VL53L0X_Error VL53L0X_set_ref_calibration(VL53L0X_DEV Dev,
		uint8_t VhvSettings, uint8_t PhaseCal)
{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b088      	sub	sp, #32
 800d31c:	af04      	add	r7, sp, #16
 800d31e:	6078      	str	r0, [r7, #4]
 800d320:	460b      	mov	r3, r1
 800d322:	70fb      	strb	r3, [r7, #3]
 800d324:	4613      	mov	r3, r2
 800d326:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d328:	2300      	movs	r3, #0
 800d32a:	73fb      	strb	r3, [r7, #15]
	uint8_t pVhvSettings;
	uint8_t pPhaseCal;

	Status = VL53L0X_ref_calibration_io(Dev, 0,
 800d32c:	78b9      	ldrb	r1, [r7, #2]
 800d32e:	78fa      	ldrb	r2, [r7, #3]
 800d330:	2301      	movs	r3, #1
 800d332:	9303      	str	r3, [sp, #12]
 800d334:	2301      	movs	r3, #1
 800d336:	9302      	str	r3, [sp, #8]
 800d338:	f107 030d 	add.w	r3, r7, #13
 800d33c:	9301      	str	r3, [sp, #4]
 800d33e:	f107 030e 	add.w	r3, r7, #14
 800d342:	9300      	str	r3, [sp, #0]
 800d344:	460b      	mov	r3, r1
 800d346:	2100      	movs	r1, #0
 800d348:	6878      	ldr	r0, [r7, #4]
 800d34a:	f7ff fe43 	bl	800cfd4 <VL53L0X_ref_calibration_io>
 800d34e:	4603      	mov	r3, r0
 800d350:	73fb      	strb	r3, [r7, #15]
		VhvSettings, PhaseCal,
		&pVhvSettings, &pPhaseCal,
		1, 1);

	return Status;
 800d352:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d356:	4618      	mov	r0, r3
 800d358:	3710      	adds	r7, #16
 800d35a:	46bd      	mov	sp, r7
 800d35c:	bd80      	pop	{r7, pc}

0800d35e <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 800d35e:	b580      	push	{r7, lr}
 800d360:	b086      	sub	sp, #24
 800d362:	af00      	add	r7, sp, #0
 800d364:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d366:	2300      	movs	r3, #0
 800d368:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 800d36a:	2300      	movs	r3, #0
 800d36c:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 800d36e:	2300      	movs	r3, #0
 800d370:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800d372:	f107 030f 	add.w	r3, r7, #15
 800d376:	4619      	mov	r1, r3
 800d378:	6878      	ldr	r0, [r7, #4]
 800d37a:	f7fe fd97 	bl	800beac <VL53L0X_GetMeasurementDataReady>
 800d37e:	4603      	mov	r3, r0
 800d380:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 800d382:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d110      	bne.n	800d3ac <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 800d38a:	7bfb      	ldrb	r3, [r7, #15]
 800d38c:	2b01      	cmp	r3, #1
 800d38e:	d00f      	beq.n	800d3b0 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 800d390:	693b      	ldr	r3, [r7, #16]
 800d392:	3301      	adds	r3, #1
 800d394:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800d396:	693b      	ldr	r3, [r7, #16]
 800d398:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800d39c:	d302      	bcc.n	800d3a4 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 800d39e:	23f9      	movs	r3, #249	; 0xf9
 800d3a0:	75fb      	strb	r3, [r7, #23]
			break;
 800d3a2:	e006      	b.n	800d3b2 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 800d3a4:	6878      	ldr	r0, [r7, #4]
 800d3a6:	f002 fc83 	bl	800fcb0 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800d3aa:	e7e2      	b.n	800d372 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800d3ac:	bf00      	nop
 800d3ae:	e000      	b.n	800d3b2 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 800d3b0:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 800d3b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	3718      	adds	r7, #24
 800d3ba:	46bd      	mov	sp, r7
 800d3bc:	bd80      	pop	{r7, pc}

0800d3be <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800d3be:	b480      	push	{r7}
 800d3c0:	b085      	sub	sp, #20
 800d3c2:	af00      	add	r7, sp, #0
 800d3c4:	4603      	mov	r3, r0
 800d3c6:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800d3cc:	79fb      	ldrb	r3, [r7, #7]
 800d3ce:	3301      	adds	r3, #1
 800d3d0:	b2db      	uxtb	r3, r3
 800d3d2:	005b      	lsls	r3, r3, #1
 800d3d4:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800d3d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3d8:	4618      	mov	r0, r3
 800d3da:	3714      	adds	r7, #20
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e2:	4770      	bx	lr

0800d3e4 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 800d3e4:	b480      	push	{r7}
 800d3e6:	b085      	sub	sp, #20
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	4603      	mov	r3, r0
 800d3ec:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 800d3f2:	79fb      	ldrb	r3, [r7, #7]
 800d3f4:	085b      	lsrs	r3, r3, #1
 800d3f6:	b2db      	uxtb	r3, r3
 800d3f8:	3b01      	subs	r3, #1
 800d3fa:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 800d3fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3fe:	4618      	mov	r0, r3
 800d400:	3714      	adds	r7, #20
 800d402:	46bd      	mov	sp, r7
 800d404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d408:	4770      	bx	lr

0800d40a <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800d40a:	b480      	push	{r7}
 800d40c:	b085      	sub	sp, #20
 800d40e:	af00      	add	r7, sp, #0
 800d410:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 800d412:	2300      	movs	r3, #0
 800d414:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800d416:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d41a:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800d41c:	e002      	b.n	800d424 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800d41e:	68bb      	ldr	r3, [r7, #8]
 800d420:	089b      	lsrs	r3, r3, #2
 800d422:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800d424:	68ba      	ldr	r2, [r7, #8]
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	429a      	cmp	r2, r3
 800d42a:	d8f8      	bhi.n	800d41e <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800d42c:	e017      	b.n	800d45e <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800d42e:	68fa      	ldr	r2, [r7, #12]
 800d430:	68bb      	ldr	r3, [r7, #8]
 800d432:	4413      	add	r3, r2
 800d434:	687a      	ldr	r2, [r7, #4]
 800d436:	429a      	cmp	r2, r3
 800d438:	d30b      	bcc.n	800d452 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 800d43a:	68fa      	ldr	r2, [r7, #12]
 800d43c:	68bb      	ldr	r3, [r7, #8]
 800d43e:	4413      	add	r3, r2
 800d440:	687a      	ldr	r2, [r7, #4]
 800d442:	1ad3      	subs	r3, r2, r3
 800d444:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	085b      	lsrs	r3, r3, #1
 800d44a:	68ba      	ldr	r2, [r7, #8]
 800d44c:	4413      	add	r3, r2
 800d44e:	60fb      	str	r3, [r7, #12]
 800d450:	e002      	b.n	800d458 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	085b      	lsrs	r3, r3, #1
 800d456:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800d458:	68bb      	ldr	r3, [r7, #8]
 800d45a:	089b      	lsrs	r3, r3, #2
 800d45c:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800d45e:	68bb      	ldr	r3, [r7, #8]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d1e4      	bne.n	800d42e <VL53L0X_isqrt+0x24>
	}

	return res;
 800d464:	68fb      	ldr	r3, [r7, #12]
}
 800d466:	4618      	mov	r0, r3
 800d468:	3714      	adds	r7, #20
 800d46a:	46bd      	mov	sp, r7
 800d46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d470:	4770      	bx	lr

0800d472 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 800d472:	b580      	push	{r7, lr}
 800d474:	b086      	sub	sp, #24
 800d476:	af00      	add	r7, sp, #0
 800d478:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d47a:	2300      	movs	r3, #0
 800d47c:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 800d47e:	2200      	movs	r2, #0
 800d480:	2183      	movs	r1, #131	; 0x83
 800d482:	6878      	ldr	r0, [r7, #4]
 800d484:	f002 faf4 	bl	800fa70 <VL53L0X_WrByte>
 800d488:	4603      	mov	r3, r0
 800d48a:	461a      	mov	r2, r3
 800d48c:	7dfb      	ldrb	r3, [r7, #23]
 800d48e:	4313      	orrs	r3, r2
 800d490:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 800d492:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d11e      	bne.n	800d4d8 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 800d49a:	2300      	movs	r3, #0
 800d49c:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 800d49e:	f107 030f 	add.w	r3, r7, #15
 800d4a2:	461a      	mov	r2, r3
 800d4a4:	2183      	movs	r1, #131	; 0x83
 800d4a6:	6878      	ldr	r0, [r7, #4]
 800d4a8:	f002 fb64 	bl	800fb74 <VL53L0X_RdByte>
 800d4ac:	4603      	mov	r3, r0
 800d4ae:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800d4b0:	7bfb      	ldrb	r3, [r7, #15]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d10a      	bne.n	800d4cc <VL53L0X_device_read_strobe+0x5a>
 800d4b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d106      	bne.n	800d4cc <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 800d4be:	693b      	ldr	r3, [r7, #16]
 800d4c0:	3301      	adds	r3, #1
 800d4c2:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800d4c4:	693b      	ldr	r3, [r7, #16]
 800d4c6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800d4ca:	d3e8      	bcc.n	800d49e <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800d4cc:	693b      	ldr	r3, [r7, #16]
 800d4ce:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800d4d2:	d301      	bcc.n	800d4d8 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800d4d4:	23f9      	movs	r3, #249	; 0xf9
 800d4d6:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800d4d8:	2201      	movs	r2, #1
 800d4da:	2183      	movs	r1, #131	; 0x83
 800d4dc:	6878      	ldr	r0, [r7, #4]
 800d4de:	f002 fac7 	bl	800fa70 <VL53L0X_WrByte>
 800d4e2:	4603      	mov	r3, r0
 800d4e4:	461a      	mov	r2, r3
 800d4e6:	7dfb      	ldrb	r3, [r7, #23]
 800d4e8:	4313      	orrs	r3, r2
 800d4ea:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800d4ec:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	3718      	adds	r7, #24
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	bd80      	pop	{r7, pc}

0800d4f8 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b098      	sub	sp, #96	; 0x60
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
 800d500:	460b      	mov	r3, r1
 800d502:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d504:	2300      	movs	r3, #0
 800d506:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 800d50a:	2300      	movs	r3, #0
 800d50c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 800d510:	2300      	movs	r3, #0
 800d512:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 800d516:	2300      	movs	r3, #0
 800d518:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 800d51a:	2300      	movs	r3, #0
 800d51c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800d51e:	2300      	movs	r3, #0
 800d520:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 800d522:	2300      	movs	r3, #0
 800d524:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800d528:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800d52c:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800d52e:	2300      	movs	r3, #0
 800d530:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800d532:	2300      	movs	r3, #0
 800d534:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 800d536:	2300      	movs	r3, #0
 800d538:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800d540:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 800d544:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d548:	2b07      	cmp	r3, #7
 800d54a:	f000 8408 	beq.w	800dd5e <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800d54e:	2201      	movs	r2, #1
 800d550:	2180      	movs	r1, #128	; 0x80
 800d552:	6878      	ldr	r0, [r7, #4]
 800d554:	f002 fa8c 	bl	800fa70 <VL53L0X_WrByte>
 800d558:	4603      	mov	r3, r0
 800d55a:	461a      	mov	r2, r3
 800d55c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d560:	4313      	orrs	r3, r2
 800d562:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800d566:	2201      	movs	r2, #1
 800d568:	21ff      	movs	r1, #255	; 0xff
 800d56a:	6878      	ldr	r0, [r7, #4]
 800d56c:	f002 fa80 	bl	800fa70 <VL53L0X_WrByte>
 800d570:	4603      	mov	r3, r0
 800d572:	461a      	mov	r2, r3
 800d574:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d578:	4313      	orrs	r3, r2
 800d57a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800d57e:	2200      	movs	r2, #0
 800d580:	2100      	movs	r1, #0
 800d582:	6878      	ldr	r0, [r7, #4]
 800d584:	f002 fa74 	bl	800fa70 <VL53L0X_WrByte>
 800d588:	4603      	mov	r3, r0
 800d58a:	461a      	mov	r2, r3
 800d58c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d590:	4313      	orrs	r3, r2
 800d592:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800d596:	2206      	movs	r2, #6
 800d598:	21ff      	movs	r1, #255	; 0xff
 800d59a:	6878      	ldr	r0, [r7, #4]
 800d59c:	f002 fa68 	bl	800fa70 <VL53L0X_WrByte>
 800d5a0:	4603      	mov	r3, r0
 800d5a2:	461a      	mov	r2, r3
 800d5a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d5a8:	4313      	orrs	r3, r2
 800d5aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800d5ae:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800d5b2:	461a      	mov	r2, r3
 800d5b4:	2183      	movs	r1, #131	; 0x83
 800d5b6:	6878      	ldr	r0, [r7, #4]
 800d5b8:	f002 fadc 	bl	800fb74 <VL53L0X_RdByte>
 800d5bc:	4603      	mov	r3, r0
 800d5be:	461a      	mov	r2, r3
 800d5c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d5c4:	4313      	orrs	r3, r2
 800d5c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800d5ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d5ce:	f043 0304 	orr.w	r3, r3, #4
 800d5d2:	b2db      	uxtb	r3, r3
 800d5d4:	461a      	mov	r2, r3
 800d5d6:	2183      	movs	r1, #131	; 0x83
 800d5d8:	6878      	ldr	r0, [r7, #4]
 800d5da:	f002 fa49 	bl	800fa70 <VL53L0X_WrByte>
 800d5de:	4603      	mov	r3, r0
 800d5e0:	461a      	mov	r2, r3
 800d5e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d5e6:	4313      	orrs	r3, r2
 800d5e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800d5ec:	2207      	movs	r2, #7
 800d5ee:	21ff      	movs	r1, #255	; 0xff
 800d5f0:	6878      	ldr	r0, [r7, #4]
 800d5f2:	f002 fa3d 	bl	800fa70 <VL53L0X_WrByte>
 800d5f6:	4603      	mov	r3, r0
 800d5f8:	461a      	mov	r2, r3
 800d5fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d5fe:	4313      	orrs	r3, r2
 800d600:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800d604:	2201      	movs	r2, #1
 800d606:	2181      	movs	r1, #129	; 0x81
 800d608:	6878      	ldr	r0, [r7, #4]
 800d60a:	f002 fa31 	bl	800fa70 <VL53L0X_WrByte>
 800d60e:	4603      	mov	r3, r0
 800d610:	461a      	mov	r2, r3
 800d612:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d616:	4313      	orrs	r3, r2
 800d618:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800d61c:	6878      	ldr	r0, [r7, #4]
 800d61e:	f002 fb47 	bl	800fcb0 <VL53L0X_PollingDelay>
 800d622:	4603      	mov	r3, r0
 800d624:	461a      	mov	r2, r3
 800d626:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d62a:	4313      	orrs	r3, r2
 800d62c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800d630:	2201      	movs	r2, #1
 800d632:	2180      	movs	r1, #128	; 0x80
 800d634:	6878      	ldr	r0, [r7, #4]
 800d636:	f002 fa1b 	bl	800fa70 <VL53L0X_WrByte>
 800d63a:	4603      	mov	r3, r0
 800d63c:	461a      	mov	r2, r3
 800d63e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d642:	4313      	orrs	r3, r2
 800d644:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 800d648:	78fb      	ldrb	r3, [r7, #3]
 800d64a:	f003 0301 	and.w	r3, r3, #1
 800d64e:	2b00      	cmp	r3, #0
 800d650:	f000 8098 	beq.w	800d784 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800d654:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d658:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	f040 8091 	bne.w	800d784 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800d662:	226b      	movs	r2, #107	; 0x6b
 800d664:	2194      	movs	r1, #148	; 0x94
 800d666:	6878      	ldr	r0, [r7, #4]
 800d668:	f002 fa02 	bl	800fa70 <VL53L0X_WrByte>
 800d66c:	4603      	mov	r3, r0
 800d66e:	461a      	mov	r2, r3
 800d670:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d674:	4313      	orrs	r3, r2
 800d676:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800d67a:	6878      	ldr	r0, [r7, #4]
 800d67c:	f7ff fef9 	bl	800d472 <VL53L0X_device_read_strobe>
 800d680:	4603      	mov	r3, r0
 800d682:	461a      	mov	r2, r3
 800d684:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d688:	4313      	orrs	r3, r2
 800d68a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800d68e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d692:	461a      	mov	r2, r3
 800d694:	2190      	movs	r1, #144	; 0x90
 800d696:	6878      	ldr	r0, [r7, #4]
 800d698:	f002 face 	bl	800fc38 <VL53L0X_RdDWord>
 800d69c:	4603      	mov	r3, r0
 800d69e:	461a      	mov	r2, r3
 800d6a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d6a4:	4313      	orrs	r3, r2
 800d6a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 800d6aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6ac:	0a1b      	lsrs	r3, r3, #8
 800d6ae:	b2db      	uxtb	r3, r3
 800d6b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d6b4:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800d6b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6ba:	0bdb      	lsrs	r3, r3, #15
 800d6bc:	b2db      	uxtb	r3, r3
 800d6be:	f003 0301 	and.w	r3, r3, #1
 800d6c2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800d6c6:	2224      	movs	r2, #36	; 0x24
 800d6c8:	2194      	movs	r1, #148	; 0x94
 800d6ca:	6878      	ldr	r0, [r7, #4]
 800d6cc:	f002 f9d0 	bl	800fa70 <VL53L0X_WrByte>
 800d6d0:	4603      	mov	r3, r0
 800d6d2:	461a      	mov	r2, r3
 800d6d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d6d8:	4313      	orrs	r3, r2
 800d6da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800d6de:	6878      	ldr	r0, [r7, #4]
 800d6e0:	f7ff fec7 	bl	800d472 <VL53L0X_device_read_strobe>
 800d6e4:	4603      	mov	r3, r0
 800d6e6:	461a      	mov	r2, r3
 800d6e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d6ec:	4313      	orrs	r3, r2
 800d6ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800d6f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d6f6:	461a      	mov	r2, r3
 800d6f8:	2190      	movs	r1, #144	; 0x90
 800d6fa:	6878      	ldr	r0, [r7, #4]
 800d6fc:	f002 fa9c 	bl	800fc38 <VL53L0X_RdDWord>
 800d700:	4603      	mov	r3, r0
 800d702:	461a      	mov	r2, r3
 800d704:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d708:	4313      	orrs	r3, r2
 800d70a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800d70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d710:	0e1b      	lsrs	r3, r3, #24
 800d712:	b2db      	uxtb	r3, r3
 800d714:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800d716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d718:	0c1b      	lsrs	r3, r3, #16
 800d71a:	b2db      	uxtb	r3, r3
 800d71c:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800d71e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d720:	0a1b      	lsrs	r3, r3, #8
 800d722:	b2db      	uxtb	r3, r3
 800d724:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800d726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d728:	b2db      	uxtb	r3, r3
 800d72a:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800d72c:	2225      	movs	r2, #37	; 0x25
 800d72e:	2194      	movs	r1, #148	; 0x94
 800d730:	6878      	ldr	r0, [r7, #4]
 800d732:	f002 f99d 	bl	800fa70 <VL53L0X_WrByte>
 800d736:	4603      	mov	r3, r0
 800d738:	461a      	mov	r2, r3
 800d73a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d73e:	4313      	orrs	r3, r2
 800d740:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800d744:	6878      	ldr	r0, [r7, #4]
 800d746:	f7ff fe94 	bl	800d472 <VL53L0X_device_read_strobe>
 800d74a:	4603      	mov	r3, r0
 800d74c:	461a      	mov	r2, r3
 800d74e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d752:	4313      	orrs	r3, r2
 800d754:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800d758:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d75c:	461a      	mov	r2, r3
 800d75e:	2190      	movs	r1, #144	; 0x90
 800d760:	6878      	ldr	r0, [r7, #4]
 800d762:	f002 fa69 	bl	800fc38 <VL53L0X_RdDWord>
 800d766:	4603      	mov	r3, r0
 800d768:	461a      	mov	r2, r3
 800d76a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d76e:	4313      	orrs	r3, r2
 800d770:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800d774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d776:	0e1b      	lsrs	r3, r3, #24
 800d778:	b2db      	uxtb	r3, r3
 800d77a:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 800d77c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d77e:	0c1b      	lsrs	r3, r3, #16
 800d780:	b2db      	uxtb	r3, r3
 800d782:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800d784:	78fb      	ldrb	r3, [r7, #3]
 800d786:	f003 0302 	and.w	r3, r3, #2
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	f000 8189 	beq.w	800daa2 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800d790:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d794:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800d798:	2b00      	cmp	r3, #0
 800d79a:	f040 8182 	bne.w	800daa2 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800d79e:	2202      	movs	r2, #2
 800d7a0:	2194      	movs	r1, #148	; 0x94
 800d7a2:	6878      	ldr	r0, [r7, #4]
 800d7a4:	f002 f964 	bl	800fa70 <VL53L0X_WrByte>
 800d7a8:	4603      	mov	r3, r0
 800d7aa:	461a      	mov	r2, r3
 800d7ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d7b0:	4313      	orrs	r3, r2
 800d7b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800d7b6:	6878      	ldr	r0, [r7, #4]
 800d7b8:	f7ff fe5b 	bl	800d472 <VL53L0X_device_read_strobe>
 800d7bc:	4603      	mov	r3, r0
 800d7be:	461a      	mov	r2, r3
 800d7c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d7c4:	4313      	orrs	r3, r2
 800d7c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800d7ca:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800d7ce:	461a      	mov	r2, r3
 800d7d0:	2190      	movs	r1, #144	; 0x90
 800d7d2:	6878      	ldr	r0, [r7, #4]
 800d7d4:	f002 f9ce 	bl	800fb74 <VL53L0X_RdByte>
 800d7d8:	4603      	mov	r3, r0
 800d7da:	461a      	mov	r2, r3
 800d7dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d7e0:	4313      	orrs	r3, r2
 800d7e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800d7e6:	227b      	movs	r2, #123	; 0x7b
 800d7e8:	2194      	movs	r1, #148	; 0x94
 800d7ea:	6878      	ldr	r0, [r7, #4]
 800d7ec:	f002 f940 	bl	800fa70 <VL53L0X_WrByte>
 800d7f0:	4603      	mov	r3, r0
 800d7f2:	461a      	mov	r2, r3
 800d7f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d7f8:	4313      	orrs	r3, r2
 800d7fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800d7fe:	6878      	ldr	r0, [r7, #4]
 800d800:	f7ff fe37 	bl	800d472 <VL53L0X_device_read_strobe>
 800d804:	4603      	mov	r3, r0
 800d806:	461a      	mov	r2, r3
 800d808:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d80c:	4313      	orrs	r3, r2
 800d80e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800d812:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800d816:	461a      	mov	r2, r3
 800d818:	2190      	movs	r1, #144	; 0x90
 800d81a:	6878      	ldr	r0, [r7, #4]
 800d81c:	f002 f9aa 	bl	800fb74 <VL53L0X_RdByte>
 800d820:	4603      	mov	r3, r0
 800d822:	461a      	mov	r2, r3
 800d824:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d828:	4313      	orrs	r3, r2
 800d82a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800d82e:	2277      	movs	r2, #119	; 0x77
 800d830:	2194      	movs	r1, #148	; 0x94
 800d832:	6878      	ldr	r0, [r7, #4]
 800d834:	f002 f91c 	bl	800fa70 <VL53L0X_WrByte>
 800d838:	4603      	mov	r3, r0
 800d83a:	461a      	mov	r2, r3
 800d83c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d840:	4313      	orrs	r3, r2
 800d842:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800d846:	6878      	ldr	r0, [r7, #4]
 800d848:	f7ff fe13 	bl	800d472 <VL53L0X_device_read_strobe>
 800d84c:	4603      	mov	r3, r0
 800d84e:	461a      	mov	r2, r3
 800d850:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d854:	4313      	orrs	r3, r2
 800d856:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800d85a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d85e:	461a      	mov	r2, r3
 800d860:	2190      	movs	r1, #144	; 0x90
 800d862:	6878      	ldr	r0, [r7, #4]
 800d864:	f002 f9e8 	bl	800fc38 <VL53L0X_RdDWord>
 800d868:	4603      	mov	r3, r0
 800d86a:	461a      	mov	r2, r3
 800d86c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d870:	4313      	orrs	r3, r2
 800d872:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800d876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d878:	0e5b      	lsrs	r3, r3, #25
 800d87a:	b2db      	uxtb	r3, r3
 800d87c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d880:	b2db      	uxtb	r3, r3
 800d882:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800d884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d886:	0c9b      	lsrs	r3, r3, #18
 800d888:	b2db      	uxtb	r3, r3
 800d88a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d88e:	b2db      	uxtb	r3, r3
 800d890:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800d892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d894:	0adb      	lsrs	r3, r3, #11
 800d896:	b2db      	uxtb	r3, r3
 800d898:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d89c:	b2db      	uxtb	r3, r3
 800d89e:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800d8a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8a2:	091b      	lsrs	r3, r3, #4
 800d8a4:	b2db      	uxtb	r3, r3
 800d8a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8aa:	b2db      	uxtb	r3, r3
 800d8ac:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800d8ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8b0:	b2db      	uxtb	r3, r3
 800d8b2:	00db      	lsls	r3, r3, #3
 800d8b4:	b2db      	uxtb	r3, r3
 800d8b6:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800d8ba:	b2db      	uxtb	r3, r3
 800d8bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800d8c0:	2278      	movs	r2, #120	; 0x78
 800d8c2:	2194      	movs	r1, #148	; 0x94
 800d8c4:	6878      	ldr	r0, [r7, #4]
 800d8c6:	f002 f8d3 	bl	800fa70 <VL53L0X_WrByte>
 800d8ca:	4603      	mov	r3, r0
 800d8cc:	461a      	mov	r2, r3
 800d8ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d8d2:	4313      	orrs	r3, r2
 800d8d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800d8d8:	6878      	ldr	r0, [r7, #4]
 800d8da:	f7ff fdca 	bl	800d472 <VL53L0X_device_read_strobe>
 800d8de:	4603      	mov	r3, r0
 800d8e0:	461a      	mov	r2, r3
 800d8e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d8e6:	4313      	orrs	r3, r2
 800d8e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800d8ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d8f0:	461a      	mov	r2, r3
 800d8f2:	2190      	movs	r1, #144	; 0x90
 800d8f4:	6878      	ldr	r0, [r7, #4]
 800d8f6:	f002 f99f 	bl	800fc38 <VL53L0X_RdDWord>
 800d8fa:	4603      	mov	r3, r0
 800d8fc:	461a      	mov	r2, r3
 800d8fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d902:	4313      	orrs	r3, r2
 800d904:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800d908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d90a:	0f5b      	lsrs	r3, r3, #29
 800d90c:	b2db      	uxtb	r3, r3
 800d90e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d912:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800d914:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d918:	4413      	add	r3, r2
 800d91a:	b2db      	uxtb	r3, r3
 800d91c:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800d91e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d920:	0d9b      	lsrs	r3, r3, #22
 800d922:	b2db      	uxtb	r3, r3
 800d924:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d928:	b2db      	uxtb	r3, r3
 800d92a:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800d92c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d92e:	0bdb      	lsrs	r3, r3, #15
 800d930:	b2db      	uxtb	r3, r3
 800d932:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d936:	b2db      	uxtb	r3, r3
 800d938:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800d93a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d93c:	0a1b      	lsrs	r3, r3, #8
 800d93e:	b2db      	uxtb	r3, r3
 800d940:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d944:	b2db      	uxtb	r3, r3
 800d946:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800d948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d94a:	085b      	lsrs	r3, r3, #1
 800d94c:	b2db      	uxtb	r3, r3
 800d94e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d952:	b2db      	uxtb	r3, r3
 800d954:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800d956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d958:	b2db      	uxtb	r3, r3
 800d95a:	019b      	lsls	r3, r3, #6
 800d95c:	b2db      	uxtb	r3, r3
 800d95e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d962:	b2db      	uxtb	r3, r3
 800d964:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800d968:	2279      	movs	r2, #121	; 0x79
 800d96a:	2194      	movs	r1, #148	; 0x94
 800d96c:	6878      	ldr	r0, [r7, #4]
 800d96e:	f002 f87f 	bl	800fa70 <VL53L0X_WrByte>
 800d972:	4603      	mov	r3, r0
 800d974:	461a      	mov	r2, r3
 800d976:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d97a:	4313      	orrs	r3, r2
 800d97c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800d980:	6878      	ldr	r0, [r7, #4]
 800d982:	f7ff fd76 	bl	800d472 <VL53L0X_device_read_strobe>
 800d986:	4603      	mov	r3, r0
 800d988:	461a      	mov	r2, r3
 800d98a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d98e:	4313      	orrs	r3, r2
 800d990:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800d994:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d998:	461a      	mov	r2, r3
 800d99a:	2190      	movs	r1, #144	; 0x90
 800d99c:	6878      	ldr	r0, [r7, #4]
 800d99e:	f002 f94b 	bl	800fc38 <VL53L0X_RdDWord>
 800d9a2:	4603      	mov	r3, r0
 800d9a4:	461a      	mov	r2, r3
 800d9a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d9aa:	4313      	orrs	r3, r2
 800d9ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800d9b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9b2:	0e9b      	lsrs	r3, r3, #26
 800d9b4:	b2db      	uxtb	r3, r3
 800d9b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d9ba:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800d9bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d9c0:	4413      	add	r3, r2
 800d9c2:	b2db      	uxtb	r3, r3
 800d9c4:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800d9c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9c8:	0cdb      	lsrs	r3, r3, #19
 800d9ca:	b2db      	uxtb	r3, r3
 800d9cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d9d0:	b2db      	uxtb	r3, r3
 800d9d2:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800d9d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9d6:	0b1b      	lsrs	r3, r3, #12
 800d9d8:	b2db      	uxtb	r3, r3
 800d9da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d9de:	b2db      	uxtb	r3, r3
 800d9e0:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800d9e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9e4:	095b      	lsrs	r3, r3, #5
 800d9e6:	b2db      	uxtb	r3, r3
 800d9e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d9ec:	b2db      	uxtb	r3, r3
 800d9ee:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800d9f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9f2:	b2db      	uxtb	r3, r3
 800d9f4:	009b      	lsls	r3, r3, #2
 800d9f6:	b2db      	uxtb	r3, r3
 800d9f8:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800d9fc:	b2db      	uxtb	r3, r3
 800d9fe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800da02:	227a      	movs	r2, #122	; 0x7a
 800da04:	2194      	movs	r1, #148	; 0x94
 800da06:	6878      	ldr	r0, [r7, #4]
 800da08:	f002 f832 	bl	800fa70 <VL53L0X_WrByte>
 800da0c:	4603      	mov	r3, r0
 800da0e:	461a      	mov	r2, r3
 800da10:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800da14:	4313      	orrs	r3, r2
 800da16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800da1a:	6878      	ldr	r0, [r7, #4]
 800da1c:	f7ff fd29 	bl	800d472 <VL53L0X_device_read_strobe>
 800da20:	4603      	mov	r3, r0
 800da22:	461a      	mov	r2, r3
 800da24:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800da28:	4313      	orrs	r3, r2
 800da2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800da2e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800da32:	461a      	mov	r2, r3
 800da34:	2190      	movs	r1, #144	; 0x90
 800da36:	6878      	ldr	r0, [r7, #4]
 800da38:	f002 f8fe 	bl	800fc38 <VL53L0X_RdDWord>
 800da3c:	4603      	mov	r3, r0
 800da3e:	461a      	mov	r2, r3
 800da40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800da44:	4313      	orrs	r3, r2
 800da46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800da4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da4c:	0f9b      	lsrs	r3, r3, #30
 800da4e:	b2db      	uxtb	r3, r3
 800da50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da54:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800da56:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800da5a:	4413      	add	r3, r2
 800da5c:	b2db      	uxtb	r3, r3
 800da5e:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800da60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da62:	0ddb      	lsrs	r3, r3, #23
 800da64:	b2db      	uxtb	r3, r3
 800da66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da6a:	b2db      	uxtb	r3, r3
 800da6c:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800da6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da70:	0c1b      	lsrs	r3, r3, #16
 800da72:	b2db      	uxtb	r3, r3
 800da74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da78:	b2db      	uxtb	r3, r3
 800da7a:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800da7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da7e:	0a5b      	lsrs	r3, r3, #9
 800da80:	b2db      	uxtb	r3, r3
 800da82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da86:	b2db      	uxtb	r3, r3
 800da88:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800da8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da8e:	089b      	lsrs	r3, r3, #2
 800da90:	b2db      	uxtb	r3, r3
 800da92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da96:	b2db      	uxtb	r3, r3
 800da98:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 800da9c:	2300      	movs	r3, #0
 800da9e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 800daa2:	78fb      	ldrb	r3, [r7, #3]
 800daa4:	f003 0304 	and.w	r3, r3, #4
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	f000 80f1 	beq.w	800dc90 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800daae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800dab2:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	f040 80ea 	bne.w	800dc90 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800dabc:	227b      	movs	r2, #123	; 0x7b
 800dabe:	2194      	movs	r1, #148	; 0x94
 800dac0:	6878      	ldr	r0, [r7, #4]
 800dac2:	f001 ffd5 	bl	800fa70 <VL53L0X_WrByte>
 800dac6:	4603      	mov	r3, r0
 800dac8:	461a      	mov	r2, r3
 800daca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dace:	4313      	orrs	r3, r2
 800dad0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800dad4:	6878      	ldr	r0, [r7, #4]
 800dad6:	f7ff fccc 	bl	800d472 <VL53L0X_device_read_strobe>
 800dada:	4603      	mov	r3, r0
 800dadc:	461a      	mov	r2, r3
 800dade:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dae2:	4313      	orrs	r3, r2
 800dae4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800dae8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800daec:	461a      	mov	r2, r3
 800daee:	2190      	movs	r1, #144	; 0x90
 800daf0:	6878      	ldr	r0, [r7, #4]
 800daf2:	f002 f8a1 	bl	800fc38 <VL53L0X_RdDWord>
 800daf6:	4603      	mov	r3, r0
 800daf8:	461a      	mov	r2, r3
 800dafa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dafe:	4313      	orrs	r3, r2
 800db00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800db04:	227c      	movs	r2, #124	; 0x7c
 800db06:	2194      	movs	r1, #148	; 0x94
 800db08:	6878      	ldr	r0, [r7, #4]
 800db0a:	f001 ffb1 	bl	800fa70 <VL53L0X_WrByte>
 800db0e:	4603      	mov	r3, r0
 800db10:	461a      	mov	r2, r3
 800db12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800db16:	4313      	orrs	r3, r2
 800db18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800db1c:	6878      	ldr	r0, [r7, #4]
 800db1e:	f7ff fca8 	bl	800d472 <VL53L0X_device_read_strobe>
 800db22:	4603      	mov	r3, r0
 800db24:	461a      	mov	r2, r3
 800db26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800db2a:	4313      	orrs	r3, r2
 800db2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800db30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800db34:	461a      	mov	r2, r3
 800db36:	2190      	movs	r1, #144	; 0x90
 800db38:	6878      	ldr	r0, [r7, #4]
 800db3a:	f002 f87d 	bl	800fc38 <VL53L0X_RdDWord>
 800db3e:	4603      	mov	r3, r0
 800db40:	461a      	mov	r2, r3
 800db42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800db46:	4313      	orrs	r3, r2
 800db48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800db4c:	2273      	movs	r2, #115	; 0x73
 800db4e:	2194      	movs	r1, #148	; 0x94
 800db50:	6878      	ldr	r0, [r7, #4]
 800db52:	f001 ff8d 	bl	800fa70 <VL53L0X_WrByte>
 800db56:	4603      	mov	r3, r0
 800db58:	461a      	mov	r2, r3
 800db5a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800db5e:	4313      	orrs	r3, r2
 800db60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800db64:	6878      	ldr	r0, [r7, #4]
 800db66:	f7ff fc84 	bl	800d472 <VL53L0X_device_read_strobe>
 800db6a:	4603      	mov	r3, r0
 800db6c:	461a      	mov	r2, r3
 800db6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800db72:	4313      	orrs	r3, r2
 800db74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800db78:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800db7c:	461a      	mov	r2, r3
 800db7e:	2190      	movs	r1, #144	; 0x90
 800db80:	6878      	ldr	r0, [r7, #4]
 800db82:	f002 f859 	bl	800fc38 <VL53L0X_RdDWord>
 800db86:	4603      	mov	r3, r0
 800db88:	461a      	mov	r2, r3
 800db8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800db8e:	4313      	orrs	r3, r2
 800db90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800db94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db96:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800db98:	b29b      	uxth	r3, r3
 800db9a:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800db9c:	2274      	movs	r2, #116	; 0x74
 800db9e:	2194      	movs	r1, #148	; 0x94
 800dba0:	6878      	ldr	r0, [r7, #4]
 800dba2:	f001 ff65 	bl	800fa70 <VL53L0X_WrByte>
 800dba6:	4603      	mov	r3, r0
 800dba8:	461a      	mov	r2, r3
 800dbaa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dbae:	4313      	orrs	r3, r2
 800dbb0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800dbb4:	6878      	ldr	r0, [r7, #4]
 800dbb6:	f7ff fc5c 	bl	800d472 <VL53L0X_device_read_strobe>
 800dbba:	4603      	mov	r3, r0
 800dbbc:	461a      	mov	r2, r3
 800dbbe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dbc2:	4313      	orrs	r3, r2
 800dbc4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800dbc8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dbcc:	461a      	mov	r2, r3
 800dbce:	2190      	movs	r1, #144	; 0x90
 800dbd0:	6878      	ldr	r0, [r7, #4]
 800dbd2:	f002 f831 	bl	800fc38 <VL53L0X_RdDWord>
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	461a      	mov	r2, r3
 800dbda:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dbde:	4313      	orrs	r3, r2
 800dbe0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800dbe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbe6:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800dbe8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dbea:	4313      	orrs	r3, r2
 800dbec:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800dbee:	2275      	movs	r2, #117	; 0x75
 800dbf0:	2194      	movs	r1, #148	; 0x94
 800dbf2:	6878      	ldr	r0, [r7, #4]
 800dbf4:	f001 ff3c 	bl	800fa70 <VL53L0X_WrByte>
 800dbf8:	4603      	mov	r3, r0
 800dbfa:	461a      	mov	r2, r3
 800dbfc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dc00:	4313      	orrs	r3, r2
 800dc02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800dc06:	6878      	ldr	r0, [r7, #4]
 800dc08:	f7ff fc33 	bl	800d472 <VL53L0X_device_read_strobe>
 800dc0c:	4603      	mov	r3, r0
 800dc0e:	461a      	mov	r2, r3
 800dc10:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dc14:	4313      	orrs	r3, r2
 800dc16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800dc1a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dc1e:	461a      	mov	r2, r3
 800dc20:	2190      	movs	r1, #144	; 0x90
 800dc22:	6878      	ldr	r0, [r7, #4]
 800dc24:	f002 f808 	bl	800fc38 <VL53L0X_RdDWord>
 800dc28:	4603      	mov	r3, r0
 800dc2a:	461a      	mov	r2, r3
 800dc2c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dc30:	4313      	orrs	r3, r2
 800dc32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 800dc36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc38:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 800dc3a:	b29b      	uxth	r3, r3
 800dc3c:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800dc3e:	2276      	movs	r2, #118	; 0x76
 800dc40:	2194      	movs	r1, #148	; 0x94
 800dc42:	6878      	ldr	r0, [r7, #4]
 800dc44:	f001 ff14 	bl	800fa70 <VL53L0X_WrByte>
 800dc48:	4603      	mov	r3, r0
 800dc4a:	461a      	mov	r2, r3
 800dc4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dc50:	4313      	orrs	r3, r2
 800dc52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800dc56:	6878      	ldr	r0, [r7, #4]
 800dc58:	f7ff fc0b 	bl	800d472 <VL53L0X_device_read_strobe>
 800dc5c:	4603      	mov	r3, r0
 800dc5e:	461a      	mov	r2, r3
 800dc60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dc64:	4313      	orrs	r3, r2
 800dc66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800dc6a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dc6e:	461a      	mov	r2, r3
 800dc70:	2190      	movs	r1, #144	; 0x90
 800dc72:	6878      	ldr	r0, [r7, #4]
 800dc74:	f001 ffe0 	bl	800fc38 <VL53L0X_RdDWord>
 800dc78:	4603      	mov	r3, r0
 800dc7a:	461a      	mov	r2, r3
 800dc7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dc80:	4313      	orrs	r3, r2
 800dc82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800dc86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc88:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800dc8a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dc8c:	4313      	orrs	r3, r2
 800dc8e:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800dc90:	2200      	movs	r2, #0
 800dc92:	2181      	movs	r1, #129	; 0x81
 800dc94:	6878      	ldr	r0, [r7, #4]
 800dc96:	f001 feeb 	bl	800fa70 <VL53L0X_WrByte>
 800dc9a:	4603      	mov	r3, r0
 800dc9c:	461a      	mov	r2, r3
 800dc9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dca2:	4313      	orrs	r3, r2
 800dca4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800dca8:	2206      	movs	r2, #6
 800dcaa:	21ff      	movs	r1, #255	; 0xff
 800dcac:	6878      	ldr	r0, [r7, #4]
 800dcae:	f001 fedf 	bl	800fa70 <VL53L0X_WrByte>
 800dcb2:	4603      	mov	r3, r0
 800dcb4:	461a      	mov	r2, r3
 800dcb6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dcba:	4313      	orrs	r3, r2
 800dcbc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800dcc0:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800dcc4:	461a      	mov	r2, r3
 800dcc6:	2183      	movs	r1, #131	; 0x83
 800dcc8:	6878      	ldr	r0, [r7, #4]
 800dcca:	f001 ff53 	bl	800fb74 <VL53L0X_RdByte>
 800dcce:	4603      	mov	r3, r0
 800dcd0:	461a      	mov	r2, r3
 800dcd2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dcd6:	4313      	orrs	r3, r2
 800dcd8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800dcdc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dce0:	f023 0304 	bic.w	r3, r3, #4
 800dce4:	b2db      	uxtb	r3, r3
 800dce6:	461a      	mov	r2, r3
 800dce8:	2183      	movs	r1, #131	; 0x83
 800dcea:	6878      	ldr	r0, [r7, #4]
 800dcec:	f001 fec0 	bl	800fa70 <VL53L0X_WrByte>
 800dcf0:	4603      	mov	r3, r0
 800dcf2:	461a      	mov	r2, r3
 800dcf4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dcf8:	4313      	orrs	r3, r2
 800dcfa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800dcfe:	2201      	movs	r2, #1
 800dd00:	21ff      	movs	r1, #255	; 0xff
 800dd02:	6878      	ldr	r0, [r7, #4]
 800dd04:	f001 feb4 	bl	800fa70 <VL53L0X_WrByte>
 800dd08:	4603      	mov	r3, r0
 800dd0a:	461a      	mov	r2, r3
 800dd0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dd10:	4313      	orrs	r3, r2
 800dd12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800dd16:	2201      	movs	r2, #1
 800dd18:	2100      	movs	r1, #0
 800dd1a:	6878      	ldr	r0, [r7, #4]
 800dd1c:	f001 fea8 	bl	800fa70 <VL53L0X_WrByte>
 800dd20:	4603      	mov	r3, r0
 800dd22:	461a      	mov	r2, r3
 800dd24:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dd28:	4313      	orrs	r3, r2
 800dd2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800dd2e:	2200      	movs	r2, #0
 800dd30:	21ff      	movs	r1, #255	; 0xff
 800dd32:	6878      	ldr	r0, [r7, #4]
 800dd34:	f001 fe9c 	bl	800fa70 <VL53L0X_WrByte>
 800dd38:	4603      	mov	r3, r0
 800dd3a:	461a      	mov	r2, r3
 800dd3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dd40:	4313      	orrs	r3, r2
 800dd42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800dd46:	2200      	movs	r2, #0
 800dd48:	2180      	movs	r1, #128	; 0x80
 800dd4a:	6878      	ldr	r0, [r7, #4]
 800dd4c:	f001 fe90 	bl	800fa70 <VL53L0X_WrByte>
 800dd50:	4603      	mov	r3, r0
 800dd52:	461a      	mov	r2, r3
 800dd54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dd58:	4313      	orrs	r3, r2
 800dd5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800dd5e:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	f040 808f 	bne.w	800de86 <VL53L0X_get_info_from_device+0x98e>
 800dd68:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800dd6c:	2b07      	cmp	r3, #7
 800dd6e:	f000 808a 	beq.w	800de86 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800dd72:	78fb      	ldrb	r3, [r7, #3]
 800dd74:	f003 0301 	and.w	r3, r3, #1
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d024      	beq.n	800ddc6 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800dd7c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800dd80:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d11e      	bne.n	800ddc6 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800dd8e:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800dd98:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dda0:	e00e      	b.n	800ddc0 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800dda2:	f107 0208 	add.w	r2, r7, #8
 800dda6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dda8:	4413      	add	r3, r2
 800ddaa:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800ddac:	687a      	ldr	r2, [r7, #4]
 800ddae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddb0:	4413      	add	r3, r2
 800ddb2:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800ddb6:	460a      	mov	r2, r1
 800ddb8:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800ddba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddbc:	3301      	adds	r3, #1
 800ddbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ddc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddc2:	2b05      	cmp	r3, #5
 800ddc4:	dded      	ble.n	800dda2 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 800ddc6:	78fb      	ldrb	r3, [r7, #3]
 800ddc8:	f003 0302 	and.w	r3, r3, #2
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d018      	beq.n	800de02 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800ddd0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ddd4:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d112      	bne.n	800de02 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800dddc:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800dde6:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	33f3      	adds	r3, #243	; 0xf3
 800ddf4:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800ddf6:	f107 0310 	add.w	r3, r7, #16
 800ddfa:	4619      	mov	r1, r3
 800ddfc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ddfe:	f002 feb8 	bl	8010b72 <strcpy>

		}

		if (((option & 4) == 4) &&
 800de02:	78fb      	ldrb	r3, [r7, #3]
 800de04:	f003 0304 	and.w	r3, r3, #4
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d030      	beq.n	800de6e <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800de0c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800de10:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800de14:	2b00      	cmp	r3, #0
 800de16:	d12a      	bne.n	800de6e <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800de18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800de20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800de28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de2a:	025b      	lsls	r3, r3, #9
 800de2c:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800de32:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 800de36:	2300      	movs	r3, #0
 800de38:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800de3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d011      	beq.n	800de66 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 800de42:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800de44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de46:	1ad3      	subs	r3, r2, r3
 800de48:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800de4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800de50:	fb02 f303 	mul.w	r3, r2, r3
 800de54:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 800de56:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 800de5a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800de5e:	425b      	negs	r3, r3
 800de60:	b29b      	uxth	r3, r3
 800de62:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 800de66:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800de6e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800de72:	78fb      	ldrb	r3, [r7, #3]
 800de74:	4313      	orrs	r3, r2
 800de76:	b2db      	uxtb	r3, r3
 800de78:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800de7c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800de86:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800de8a:	4618      	mov	r0, r3
 800de8c:	3760      	adds	r7, #96	; 0x60
 800de8e:	46bd      	mov	sp, r7
 800de90:	bd80      	pop	{r7, pc}

0800de92 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 800de92:	b480      	push	{r7}
 800de94:	b087      	sub	sp, #28
 800de96:	af00      	add	r7, sp, #0
 800de98:	6078      	str	r0, [r7, #4]
 800de9a:	460b      	mov	r3, r1
 800de9c:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 800de9e:	f240 6277 	movw	r2, #1655	; 0x677
 800dea2:	f04f 0300 	mov.w	r3, #0
 800dea6:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 800deaa:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800deae:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800deb0:	78fb      	ldrb	r3, [r7, #3]
 800deb2:	68fa      	ldr	r2, [r7, #12]
 800deb4:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800deb8:	693a      	ldr	r2, [r7, #16]
 800deba:	fb02 f303 	mul.w	r3, r2, r3
 800debe:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800dec0:	68bb      	ldr	r3, [r7, #8]
}
 800dec2:	4618      	mov	r0, r3
 800dec4:	371c      	adds	r7, #28
 800dec6:	46bd      	mov	sp, r7
 800dec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800decc:	4770      	bx	lr

0800dece <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800dece:	b480      	push	{r7}
 800ded0:	b087      	sub	sp, #28
 800ded2:	af00      	add	r7, sp, #0
 800ded4:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800ded6:	2300      	movs	r3, #0
 800ded8:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800deda:	2300      	movs	r3, #0
 800dedc:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800dede:	2300      	movs	r3, #0
 800dee0:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d017      	beq.n	800df18 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	3b01      	subs	r3, #1
 800deec:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800deee:	e005      	b.n	800defc <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800def0:	693b      	ldr	r3, [r7, #16]
 800def2:	085b      	lsrs	r3, r3, #1
 800def4:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800def6:	89fb      	ldrh	r3, [r7, #14]
 800def8:	3301      	adds	r3, #1
 800defa:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800defc:	693b      	ldr	r3, [r7, #16]
 800defe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800df02:	2b00      	cmp	r3, #0
 800df04:	d1f4      	bne.n	800def0 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800df06:	89fb      	ldrh	r3, [r7, #14]
 800df08:	021b      	lsls	r3, r3, #8
 800df0a:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800df0c:	693b      	ldr	r3, [r7, #16]
 800df0e:	b29b      	uxth	r3, r3
 800df10:	b2db      	uxtb	r3, r3
 800df12:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800df14:	4413      	add	r3, r2
 800df16:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800df18:	8afb      	ldrh	r3, [r7, #22]

}
 800df1a:	4618      	mov	r0, r3
 800df1c:	371c      	adds	r7, #28
 800df1e:	46bd      	mov	sp, r7
 800df20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df24:	4770      	bx	lr

0800df26 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800df26:	b480      	push	{r7}
 800df28:	b085      	sub	sp, #20
 800df2a:	af00      	add	r7, sp, #0
 800df2c:	4603      	mov	r3, r0
 800df2e:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800df30:	2300      	movs	r3, #0
 800df32:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800df34:	88fb      	ldrh	r3, [r7, #6]
 800df36:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800df38:	88fa      	ldrh	r2, [r7, #6]
 800df3a:	0a12      	lsrs	r2, r2, #8
 800df3c:	b292      	uxth	r2, r2
 800df3e:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800df40:	3301      	adds	r3, #1
 800df42:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800df44:	68fb      	ldr	r3, [r7, #12]
}
 800df46:	4618      	mov	r0, r3
 800df48:	3714      	adds	r7, #20
 800df4a:	46bd      	mov	sp, r7
 800df4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df50:	4770      	bx	lr
	...

0800df54 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800df54:	b580      	push	{r7, lr}
 800df56:	b088      	sub	sp, #32
 800df58:	af00      	add	r7, sp, #0
 800df5a:	60f8      	str	r0, [r7, #12]
 800df5c:	60b9      	str	r1, [r7, #8]
 800df5e:	4613      	mov	r3, r2
 800df60:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800df62:	2300      	movs	r3, #0
 800df64:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800df66:	79fb      	ldrb	r3, [r7, #7]
 800df68:	4619      	mov	r1, r3
 800df6a:	68f8      	ldr	r0, [r7, #12]
 800df6c:	f7ff ff91 	bl	800de92 <VL53L0X_calc_macro_period_ps>
 800df70:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800df72:	69bb      	ldr	r3, [r7, #24]
 800df74:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800df78:	4a0a      	ldr	r2, [pc, #40]	; (800dfa4 <VL53L0X_calc_timeout_mclks+0x50>)
 800df7a:	fba2 2303 	umull	r2, r3, r2, r3
 800df7e:	099b      	lsrs	r3, r3, #6
 800df80:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800df82:	68bb      	ldr	r3, [r7, #8]
 800df84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800df88:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 800df8c:	697b      	ldr	r3, [r7, #20]
 800df8e:	085b      	lsrs	r3, r3, #1
 800df90:	441a      	add	r2, r3
	timeout_period_mclks =
 800df92:	697b      	ldr	r3, [r7, #20]
 800df94:	fbb2 f3f3 	udiv	r3, r2, r3
 800df98:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 800df9a:	69fb      	ldr	r3, [r7, #28]
}
 800df9c:	4618      	mov	r0, r3
 800df9e:	3720      	adds	r7, #32
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	bd80      	pop	{r7, pc}
 800dfa4:	10624dd3 	.word	0x10624dd3

0800dfa8 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	b086      	sub	sp, #24
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	6078      	str	r0, [r7, #4]
 800dfb0:	460b      	mov	r3, r1
 800dfb2:	807b      	strh	r3, [r7, #2]
 800dfb4:	4613      	mov	r3, r2
 800dfb6:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800dfb8:	2300      	movs	r3, #0
 800dfba:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800dfbc:	787b      	ldrb	r3, [r7, #1]
 800dfbe:	4619      	mov	r1, r3
 800dfc0:	6878      	ldr	r0, [r7, #4]
 800dfc2:	f7ff ff66 	bl	800de92 <VL53L0X_calc_macro_period_ps>
 800dfc6:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800dfc8:	693b      	ldr	r3, [r7, #16]
 800dfca:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800dfce:	4a0a      	ldr	r2, [pc, #40]	; (800dff8 <VL53L0X_calc_timeout_us+0x50>)
 800dfd0:	fba2 2303 	umull	r2, r3, r2, r3
 800dfd4:	099b      	lsrs	r3, r3, #6
 800dfd6:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800dfd8:	887b      	ldrh	r3, [r7, #2]
 800dfda:	68fa      	ldr	r2, [r7, #12]
 800dfdc:	fb02 f303 	mul.w	r3, r2, r3
 800dfe0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 800dfe4:	4a04      	ldr	r2, [pc, #16]	; (800dff8 <VL53L0X_calc_timeout_us+0x50>)
 800dfe6:	fba2 2303 	umull	r2, r3, r2, r3
 800dfea:	099b      	lsrs	r3, r3, #6
 800dfec:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800dfee:	697b      	ldr	r3, [r7, #20]
}
 800dff0:	4618      	mov	r0, r3
 800dff2:	3718      	adds	r7, #24
 800dff4:	46bd      	mov	sp, r7
 800dff6:	bd80      	pop	{r7, pc}
 800dff8:	10624dd3 	.word	0x10624dd3

0800dffc <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800dffc:	b580      	push	{r7, lr}
 800dffe:	b08c      	sub	sp, #48	; 0x30
 800e000:	af00      	add	r7, sp, #0
 800e002:	60f8      	str	r0, [r7, #12]
 800e004:	460b      	mov	r3, r1
 800e006:	607a      	str	r2, [r7, #4]
 800e008:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e00a:	2300      	movs	r3, #0
 800e00c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800e010:	2300      	movs	r3, #0
 800e012:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800e016:	2300      	movs	r3, #0
 800e018:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800e01a:	2300      	movs	r3, #0
 800e01c:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800e01e:	2300      	movs	r3, #0
 800e020:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800e022:	7afb      	ldrb	r3, [r7, #11]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d005      	beq.n	800e034 <get_sequence_step_timeout+0x38>
 800e028:	7afb      	ldrb	r3, [r7, #11]
 800e02a:	2b01      	cmp	r3, #1
 800e02c:	d002      	beq.n	800e034 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800e02e:	7afb      	ldrb	r3, [r7, #11]
 800e030:	2b02      	cmp	r3, #2
 800e032:	d128      	bne.n	800e086 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e034:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800e038:	461a      	mov	r2, r3
 800e03a:	2100      	movs	r1, #0
 800e03c:	68f8      	ldr	r0, [r7, #12]
 800e03e:	f7fd f9f9 	bl	800b434 <VL53L0X_GetVcselPulsePeriod>
 800e042:	4603      	mov	r3, r0
 800e044:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800e048:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d109      	bne.n	800e064 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800e050:	f107 0320 	add.w	r3, r7, #32
 800e054:	461a      	mov	r2, r3
 800e056:	2146      	movs	r1, #70	; 0x46
 800e058:	68f8      	ldr	r0, [r7, #12]
 800e05a:	f001 fd8b 	bl	800fb74 <VL53L0X_RdByte>
 800e05e:	4603      	mov	r3, r0
 800e060:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800e064:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e068:	b29b      	uxth	r3, r3
 800e06a:	4618      	mov	r0, r3
 800e06c:	f7ff ff5b 	bl	800df26 <VL53L0X_decode_timeout>
 800e070:	4603      	mov	r3, r0
 800e072:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800e074:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800e078:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e07a:	4619      	mov	r1, r3
 800e07c:	68f8      	ldr	r0, [r7, #12]
 800e07e:	f7ff ff93 	bl	800dfa8 <VL53L0X_calc_timeout_us>
 800e082:	62b8      	str	r0, [r7, #40]	; 0x28
 800e084:	e092      	b.n	800e1ac <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800e086:	7afb      	ldrb	r3, [r7, #11]
 800e088:	2b03      	cmp	r3, #3
 800e08a:	d135      	bne.n	800e0f8 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e08c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800e090:	461a      	mov	r2, r3
 800e092:	2100      	movs	r1, #0
 800e094:	68f8      	ldr	r0, [r7, #12]
 800e096:	f7fd f9cd 	bl	800b434 <VL53L0X_GetVcselPulsePeriod>
 800e09a:	4603      	mov	r3, r0
 800e09c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800e0a0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	f040 8081 	bne.w	800e1ac <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e0aa:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800e0ae:	461a      	mov	r2, r3
 800e0b0:	2100      	movs	r1, #0
 800e0b2:	68f8      	ldr	r0, [r7, #12]
 800e0b4:	f7fd f9be 	bl	800b434 <VL53L0X_GetVcselPulsePeriod>
 800e0b8:	4603      	mov	r3, r0
 800e0ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800e0be:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d109      	bne.n	800e0da <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800e0c6:	f107 031e 	add.w	r3, r7, #30
 800e0ca:	461a      	mov	r2, r3
 800e0cc:	2151      	movs	r1, #81	; 0x51
 800e0ce:	68f8      	ldr	r0, [r7, #12]
 800e0d0:	f001 fd7a 	bl	800fbc8 <VL53L0X_RdWord>
 800e0d4:	4603      	mov	r3, r0
 800e0d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800e0da:	8bfb      	ldrh	r3, [r7, #30]
 800e0dc:	4618      	mov	r0, r3
 800e0de:	f7ff ff22 	bl	800df26 <VL53L0X_decode_timeout>
 800e0e2:	4603      	mov	r3, r0
 800e0e4:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800e0e6:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800e0ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e0ec:	4619      	mov	r1, r3
 800e0ee:	68f8      	ldr	r0, [r7, #12]
 800e0f0:	f7ff ff5a 	bl	800dfa8 <VL53L0X_calc_timeout_us>
 800e0f4:	62b8      	str	r0, [r7, #40]	; 0x28
 800e0f6:	e059      	b.n	800e1ac <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800e0f8:	7afb      	ldrb	r3, [r7, #11]
 800e0fa:	2b04      	cmp	r3, #4
 800e0fc:	d156      	bne.n	800e1ac <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800e0fe:	f107 0314 	add.w	r3, r7, #20
 800e102:	4619      	mov	r1, r3
 800e104:	68f8      	ldr	r0, [r7, #12]
 800e106:	f7fd faa1 	bl	800b64c <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800e10a:	2300      	movs	r3, #0
 800e10c:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800e10e:	7dfb      	ldrb	r3, [r7, #23]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d01d      	beq.n	800e150 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e114:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800e118:	461a      	mov	r2, r3
 800e11a:	2100      	movs	r1, #0
 800e11c:	68f8      	ldr	r0, [r7, #12]
 800e11e:	f7fd f989 	bl	800b434 <VL53L0X_GetVcselPulsePeriod>
 800e122:	4603      	mov	r3, r0
 800e124:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800e128:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d10f      	bne.n	800e150 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 800e130:	f107 031e 	add.w	r3, r7, #30
 800e134:	461a      	mov	r2, r3
 800e136:	2151      	movs	r1, #81	; 0x51
 800e138:	68f8      	ldr	r0, [r7, #12]
 800e13a:	f001 fd45 	bl	800fbc8 <VL53L0X_RdWord>
 800e13e:	4603      	mov	r3, r0
 800e140:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800e144:	8bfb      	ldrh	r3, [r7, #30]
 800e146:	4618      	mov	r0, r3
 800e148:	f7ff feed 	bl	800df26 <VL53L0X_decode_timeout>
 800e14c:	4603      	mov	r3, r0
 800e14e:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800e150:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800e154:	2b00      	cmp	r3, #0
 800e156:	d109      	bne.n	800e16c <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e158:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800e15c:	461a      	mov	r2, r3
 800e15e:	2101      	movs	r1, #1
 800e160:	68f8      	ldr	r0, [r7, #12]
 800e162:	f7fd f967 	bl	800b434 <VL53L0X_GetVcselPulsePeriod>
 800e166:	4603      	mov	r3, r0
 800e168:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800e16c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800e170:	2b00      	cmp	r3, #0
 800e172:	d10f      	bne.n	800e194 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 800e174:	f107 031c 	add.w	r3, r7, #28
 800e178:	461a      	mov	r2, r3
 800e17a:	2171      	movs	r1, #113	; 0x71
 800e17c:	68f8      	ldr	r0, [r7, #12]
 800e17e:	f001 fd23 	bl	800fbc8 <VL53L0X_RdWord>
 800e182:	4603      	mov	r3, r0
 800e184:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800e188:	8bbb      	ldrh	r3, [r7, #28]
 800e18a:	4618      	mov	r0, r3
 800e18c:	f7ff fecb 	bl	800df26 <VL53L0X_decode_timeout>
 800e190:	4603      	mov	r3, r0
 800e192:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800e194:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e196:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e198:	1ad3      	subs	r3, r2, r3
 800e19a:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800e19c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800e1a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e1a2:	4619      	mov	r1, r3
 800e1a4:	68f8      	ldr	r0, [r7, #12]
 800e1a6:	f7ff feff 	bl	800dfa8 <VL53L0X_calc_timeout_us>
 800e1aa:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e1b0:	601a      	str	r2, [r3, #0]

	return Status;
 800e1b2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	3730      	adds	r7, #48	; 0x30
 800e1ba:	46bd      	mov	sp, r7
 800e1bc:	bd80      	pop	{r7, pc}

0800e1be <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800e1be:	b580      	push	{r7, lr}
 800e1c0:	b08a      	sub	sp, #40	; 0x28
 800e1c2:	af00      	add	r7, sp, #0
 800e1c4:	60f8      	str	r0, [r7, #12]
 800e1c6:	460b      	mov	r3, r1
 800e1c8:	607a      	str	r2, [r7, #4]
 800e1ca:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e1cc:	2300      	movs	r3, #0
 800e1ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800e1d2:	7afb      	ldrb	r3, [r7, #11]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d005      	beq.n	800e1e4 <set_sequence_step_timeout+0x26>
 800e1d8:	7afb      	ldrb	r3, [r7, #11]
 800e1da:	2b01      	cmp	r3, #1
 800e1dc:	d002      	beq.n	800e1e4 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800e1de:	7afb      	ldrb	r3, [r7, #11]
 800e1e0:	2b02      	cmp	r3, #2
 800e1e2:	d138      	bne.n	800e256 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e1e4:	f107 031b 	add.w	r3, r7, #27
 800e1e8:	461a      	mov	r2, r3
 800e1ea:	2100      	movs	r1, #0
 800e1ec:	68f8      	ldr	r0, [r7, #12]
 800e1ee:	f7fd f921 	bl	800b434 <VL53L0X_GetVcselPulsePeriod>
 800e1f2:	4603      	mov	r3, r0
 800e1f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800e1f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d11a      	bne.n	800e236 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800e200:	7efb      	ldrb	r3, [r7, #27]
 800e202:	461a      	mov	r2, r3
 800e204:	6879      	ldr	r1, [r7, #4]
 800e206:	68f8      	ldr	r0, [r7, #12]
 800e208:	f7ff fea4 	bl	800df54 <VL53L0X_calc_timeout_mclks>
 800e20c:	4603      	mov	r3, r0
 800e20e:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800e210:	8bbb      	ldrh	r3, [r7, #28]
 800e212:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e216:	d903      	bls.n	800e220 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800e218:	23ff      	movs	r3, #255	; 0xff
 800e21a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e21e:	e004      	b.n	800e22a <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800e220:	8bbb      	ldrh	r3, [r7, #28]
 800e222:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800e224:	3b01      	subs	r3, #1
 800e226:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800e22a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e22e:	b29a      	uxth	r2, r3
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800e236:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	f040 80ab 	bne.w	800e396 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 800e240:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e244:	461a      	mov	r2, r3
 800e246:	2146      	movs	r1, #70	; 0x46
 800e248:	68f8      	ldr	r0, [r7, #12]
 800e24a:	f001 fc11 	bl	800fa70 <VL53L0X_WrByte>
 800e24e:	4603      	mov	r3, r0
 800e250:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800e254:	e09f      	b.n	800e396 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800e256:	7afb      	ldrb	r3, [r7, #11]
 800e258:	2b03      	cmp	r3, #3
 800e25a:	d135      	bne.n	800e2c8 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800e25c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e260:	2b00      	cmp	r3, #0
 800e262:	d11b      	bne.n	800e29c <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e264:	f107 031b 	add.w	r3, r7, #27
 800e268:	461a      	mov	r2, r3
 800e26a:	2100      	movs	r1, #0
 800e26c:	68f8      	ldr	r0, [r7, #12]
 800e26e:	f7fd f8e1 	bl	800b434 <VL53L0X_GetVcselPulsePeriod>
 800e272:	4603      	mov	r3, r0
 800e274:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800e278:	7efb      	ldrb	r3, [r7, #27]
 800e27a:	461a      	mov	r2, r3
 800e27c:	6879      	ldr	r1, [r7, #4]
 800e27e:	68f8      	ldr	r0, [r7, #12]
 800e280:	f7ff fe68 	bl	800df54 <VL53L0X_calc_timeout_mclks>
 800e284:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800e286:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800e288:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e28a:	4618      	mov	r0, r3
 800e28c:	f7ff fe1f 	bl	800dece <VL53L0X_encode_timeout>
 800e290:	4603      	mov	r3, r0
 800e292:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800e294:	8b3a      	ldrh	r2, [r7, #24]
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800e29c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d108      	bne.n	800e2b6 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800e2a4:	8b3b      	ldrh	r3, [r7, #24]
 800e2a6:	461a      	mov	r2, r3
 800e2a8:	2151      	movs	r1, #81	; 0x51
 800e2aa:	68f8      	ldr	r0, [r7, #12]
 800e2ac:	f001 fc04 	bl	800fab8 <VL53L0X_WrWord>
 800e2b0:	4603      	mov	r3, r0
 800e2b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800e2b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d16b      	bne.n	800e396 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	687a      	ldr	r2, [r7, #4]
 800e2c2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800e2c6:	e066      	b.n	800e396 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800e2c8:	7afb      	ldrb	r3, [r7, #11]
 800e2ca:	2b04      	cmp	r3, #4
 800e2cc:	d160      	bne.n	800e390 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800e2ce:	f107 0310 	add.w	r3, r7, #16
 800e2d2:	4619      	mov	r1, r3
 800e2d4:	68f8      	ldr	r0, [r7, #12]
 800e2d6:	f7fd f9b9 	bl	800b64c <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800e2da:	2300      	movs	r3, #0
 800e2dc:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800e2de:	7cfb      	ldrb	r3, [r7, #19]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d01d      	beq.n	800e320 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e2e4:	f107 031b 	add.w	r3, r7, #27
 800e2e8:	461a      	mov	r2, r3
 800e2ea:	2100      	movs	r1, #0
 800e2ec:	68f8      	ldr	r0, [r7, #12]
 800e2ee:	f7fd f8a1 	bl	800b434 <VL53L0X_GetVcselPulsePeriod>
 800e2f2:	4603      	mov	r3, r0
 800e2f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800e2f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d10f      	bne.n	800e320 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800e300:	f107 0318 	add.w	r3, r7, #24
 800e304:	461a      	mov	r2, r3
 800e306:	2151      	movs	r1, #81	; 0x51
 800e308:	68f8      	ldr	r0, [r7, #12]
 800e30a:	f001 fc5d 	bl	800fbc8 <VL53L0X_RdWord>
 800e30e:	4603      	mov	r3, r0
 800e310:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800e314:	8b3b      	ldrh	r3, [r7, #24]
 800e316:	4618      	mov	r0, r3
 800e318:	f7ff fe05 	bl	800df26 <VL53L0X_decode_timeout>
 800e31c:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800e31e:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800e320:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e324:	2b00      	cmp	r3, #0
 800e326:	d109      	bne.n	800e33c <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e328:	f107 031b 	add.w	r3, r7, #27
 800e32c:	461a      	mov	r2, r3
 800e32e:	2101      	movs	r1, #1
 800e330:	68f8      	ldr	r0, [r7, #12]
 800e332:	f7fd f87f 	bl	800b434 <VL53L0X_GetVcselPulsePeriod>
 800e336:	4603      	mov	r3, r0
 800e338:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800e33c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e340:	2b00      	cmp	r3, #0
 800e342:	d128      	bne.n	800e396 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800e344:	7efb      	ldrb	r3, [r7, #27]
 800e346:	461a      	mov	r2, r3
 800e348:	6879      	ldr	r1, [r7, #4]
 800e34a:	68f8      	ldr	r0, [r7, #12]
 800e34c:	f7ff fe02 	bl	800df54 <VL53L0X_calc_timeout_mclks>
 800e350:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800e352:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e354:	6a3a      	ldr	r2, [r7, #32]
 800e356:	4413      	add	r3, r2
 800e358:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800e35a:	6a38      	ldr	r0, [r7, #32]
 800e35c:	f7ff fdb7 	bl	800dece <VL53L0X_encode_timeout>
 800e360:	4603      	mov	r3, r0
 800e362:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 800e364:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d108      	bne.n	800e37e <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800e36c:	8bfb      	ldrh	r3, [r7, #30]
 800e36e:	461a      	mov	r2, r3
 800e370:	2171      	movs	r1, #113	; 0x71
 800e372:	68f8      	ldr	r0, [r7, #12]
 800e374:	f001 fba0 	bl	800fab8 <VL53L0X_WrWord>
 800e378:	4603      	mov	r3, r0
 800e37a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800e37e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e382:	2b00      	cmp	r3, #0
 800e384:	d107      	bne.n	800e396 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	687a      	ldr	r2, [r7, #4]
 800e38a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800e38e:	e002      	b.n	800e396 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e390:	23fc      	movs	r3, #252	; 0xfc
 800e392:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800e396:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800e39a:	4618      	mov	r0, r3
 800e39c:	3728      	adds	r7, #40	; 0x28
 800e39e:	46bd      	mov	sp, r7
 800e3a0:	bd80      	pop	{r7, pc}

0800e3a2 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800e3a2:	b580      	push	{r7, lr}
 800e3a4:	b08a      	sub	sp, #40	; 0x28
 800e3a6:	af00      	add	r7, sp, #0
 800e3a8:	6078      	str	r0, [r7, #4]
 800e3aa:	460b      	mov	r3, r1
 800e3ac:	70fb      	strb	r3, [r7, #3]
 800e3ae:	4613      	mov	r3, r2
 800e3b0:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 800e3b8:	230c      	movs	r3, #12
 800e3ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800e3be:	2312      	movs	r3, #18
 800e3c0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 800e3c4:	2308      	movs	r3, #8
 800e3c6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800e3ca:	230e      	movs	r3, #14
 800e3cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 800e3d4:	78bb      	ldrb	r3, [r7, #2]
 800e3d6:	f003 0301 	and.w	r3, r3, #1
 800e3da:	b2db      	uxtb	r3, r3
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d003      	beq.n	800e3e8 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e3e0:	23fc      	movs	r3, #252	; 0xfc
 800e3e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e3e6:	e020      	b.n	800e42a <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 800e3e8:	78fb      	ldrb	r3, [r7, #3]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d10d      	bne.n	800e40a <VL53L0X_set_vcsel_pulse_period+0x68>
 800e3ee:	78ba      	ldrb	r2, [r7, #2]
 800e3f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e3f4:	429a      	cmp	r2, r3
 800e3f6:	d304      	bcc.n	800e402 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 800e3f8:	78ba      	ldrb	r2, [r7, #2]
 800e3fa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e3fe:	429a      	cmp	r2, r3
 800e400:	d903      	bls.n	800e40a <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e402:	23fc      	movs	r3, #252	; 0xfc
 800e404:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e408:	e00f      	b.n	800e42a <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800e40a:	78fb      	ldrb	r3, [r7, #3]
 800e40c:	2b01      	cmp	r3, #1
 800e40e:	d10c      	bne.n	800e42a <VL53L0X_set_vcsel_pulse_period+0x88>
 800e410:	78ba      	ldrb	r2, [r7, #2]
 800e412:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e416:	429a      	cmp	r2, r3
 800e418:	d304      	bcc.n	800e424 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800e41a:	78ba      	ldrb	r2, [r7, #2]
 800e41c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e420:	429a      	cmp	r2, r3
 800e422:	d902      	bls.n	800e42a <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e424:	23fc      	movs	r3, #252	; 0xfc
 800e426:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800e42a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d002      	beq.n	800e438 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 800e432:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e436:	e239      	b.n	800e8ac <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 800e438:	78fb      	ldrb	r3, [r7, #3]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d150      	bne.n	800e4e0 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 800e43e:	78bb      	ldrb	r3, [r7, #2]
 800e440:	2b0c      	cmp	r3, #12
 800e442:	d110      	bne.n	800e466 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 800e444:	2218      	movs	r2, #24
 800e446:	2157      	movs	r1, #87	; 0x57
 800e448:	6878      	ldr	r0, [r7, #4]
 800e44a:	f001 fb11 	bl	800fa70 <VL53L0X_WrByte>
 800e44e:	4603      	mov	r3, r0
 800e450:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 800e454:	2208      	movs	r2, #8
 800e456:	2156      	movs	r1, #86	; 0x56
 800e458:	6878      	ldr	r0, [r7, #4]
 800e45a:	f001 fb09 	bl	800fa70 <VL53L0X_WrByte>
 800e45e:	4603      	mov	r3, r0
 800e460:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e464:	e17f      	b.n	800e766 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 800e466:	78bb      	ldrb	r3, [r7, #2]
 800e468:	2b0e      	cmp	r3, #14
 800e46a:	d110      	bne.n	800e48e <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 800e46c:	2230      	movs	r2, #48	; 0x30
 800e46e:	2157      	movs	r1, #87	; 0x57
 800e470:	6878      	ldr	r0, [r7, #4]
 800e472:	f001 fafd 	bl	800fa70 <VL53L0X_WrByte>
 800e476:	4603      	mov	r3, r0
 800e478:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 800e47c:	2208      	movs	r2, #8
 800e47e:	2156      	movs	r1, #86	; 0x56
 800e480:	6878      	ldr	r0, [r7, #4]
 800e482:	f001 faf5 	bl	800fa70 <VL53L0X_WrByte>
 800e486:	4603      	mov	r3, r0
 800e488:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e48c:	e16b      	b.n	800e766 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 800e48e:	78bb      	ldrb	r3, [r7, #2]
 800e490:	2b10      	cmp	r3, #16
 800e492:	d110      	bne.n	800e4b6 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 800e494:	2240      	movs	r2, #64	; 0x40
 800e496:	2157      	movs	r1, #87	; 0x57
 800e498:	6878      	ldr	r0, [r7, #4]
 800e49a:	f001 fae9 	bl	800fa70 <VL53L0X_WrByte>
 800e49e:	4603      	mov	r3, r0
 800e4a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 800e4a4:	2208      	movs	r2, #8
 800e4a6:	2156      	movs	r1, #86	; 0x56
 800e4a8:	6878      	ldr	r0, [r7, #4]
 800e4aa:	f001 fae1 	bl	800fa70 <VL53L0X_WrByte>
 800e4ae:	4603      	mov	r3, r0
 800e4b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e4b4:	e157      	b.n	800e766 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800e4b6:	78bb      	ldrb	r3, [r7, #2]
 800e4b8:	2b12      	cmp	r3, #18
 800e4ba:	f040 8154 	bne.w	800e766 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800e4be:	2250      	movs	r2, #80	; 0x50
 800e4c0:	2157      	movs	r1, #87	; 0x57
 800e4c2:	6878      	ldr	r0, [r7, #4]
 800e4c4:	f001 fad4 	bl	800fa70 <VL53L0X_WrByte>
 800e4c8:	4603      	mov	r3, r0
 800e4ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800e4ce:	2208      	movs	r2, #8
 800e4d0:	2156      	movs	r1, #86	; 0x56
 800e4d2:	6878      	ldr	r0, [r7, #4]
 800e4d4:	f001 facc 	bl	800fa70 <VL53L0X_WrByte>
 800e4d8:	4603      	mov	r3, r0
 800e4da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e4de:	e142      	b.n	800e766 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 800e4e0:	78fb      	ldrb	r3, [r7, #3]
 800e4e2:	2b01      	cmp	r3, #1
 800e4e4:	f040 813f 	bne.w	800e766 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 800e4e8:	78bb      	ldrb	r3, [r7, #2]
 800e4ea:	2b08      	cmp	r3, #8
 800e4ec:	d14c      	bne.n	800e588 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 800e4ee:	2210      	movs	r2, #16
 800e4f0:	2148      	movs	r1, #72	; 0x48
 800e4f2:	6878      	ldr	r0, [r7, #4]
 800e4f4:	f001 fabc 	bl	800fa70 <VL53L0X_WrByte>
 800e4f8:	4603      	mov	r3, r0
 800e4fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800e4fe:	2208      	movs	r2, #8
 800e500:	2147      	movs	r1, #71	; 0x47
 800e502:	6878      	ldr	r0, [r7, #4]
 800e504:	f001 fab4 	bl	800fa70 <VL53L0X_WrByte>
 800e508:	4603      	mov	r3, r0
 800e50a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800e50e:	2202      	movs	r2, #2
 800e510:	2132      	movs	r1, #50	; 0x32
 800e512:	6878      	ldr	r0, [r7, #4]
 800e514:	f001 faac 	bl	800fa70 <VL53L0X_WrByte>
 800e518:	4603      	mov	r3, r0
 800e51a:	461a      	mov	r2, r3
 800e51c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e520:	4313      	orrs	r3, r2
 800e522:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800e526:	220c      	movs	r2, #12
 800e528:	2130      	movs	r1, #48	; 0x30
 800e52a:	6878      	ldr	r0, [r7, #4]
 800e52c:	f001 faa0 	bl	800fa70 <VL53L0X_WrByte>
 800e530:	4603      	mov	r3, r0
 800e532:	461a      	mov	r2, r3
 800e534:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e538:	4313      	orrs	r3, r2
 800e53a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800e53e:	2201      	movs	r2, #1
 800e540:	21ff      	movs	r1, #255	; 0xff
 800e542:	6878      	ldr	r0, [r7, #4]
 800e544:	f001 fa94 	bl	800fa70 <VL53L0X_WrByte>
 800e548:	4603      	mov	r3, r0
 800e54a:	461a      	mov	r2, r3
 800e54c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e550:	4313      	orrs	r3, r2
 800e552:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800e556:	2230      	movs	r2, #48	; 0x30
 800e558:	2130      	movs	r1, #48	; 0x30
 800e55a:	6878      	ldr	r0, [r7, #4]
 800e55c:	f001 fa88 	bl	800fa70 <VL53L0X_WrByte>
 800e560:	4603      	mov	r3, r0
 800e562:	461a      	mov	r2, r3
 800e564:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e568:	4313      	orrs	r3, r2
 800e56a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800e56e:	2200      	movs	r2, #0
 800e570:	21ff      	movs	r1, #255	; 0xff
 800e572:	6878      	ldr	r0, [r7, #4]
 800e574:	f001 fa7c 	bl	800fa70 <VL53L0X_WrByte>
 800e578:	4603      	mov	r3, r0
 800e57a:	461a      	mov	r2, r3
 800e57c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e580:	4313      	orrs	r3, r2
 800e582:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e586:	e0ee      	b.n	800e766 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 800e588:	78bb      	ldrb	r3, [r7, #2]
 800e58a:	2b0a      	cmp	r3, #10
 800e58c:	d14c      	bne.n	800e628 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 800e58e:	2228      	movs	r2, #40	; 0x28
 800e590:	2148      	movs	r1, #72	; 0x48
 800e592:	6878      	ldr	r0, [r7, #4]
 800e594:	f001 fa6c 	bl	800fa70 <VL53L0X_WrByte>
 800e598:	4603      	mov	r3, r0
 800e59a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 800e59e:	2208      	movs	r2, #8
 800e5a0:	2147      	movs	r1, #71	; 0x47
 800e5a2:	6878      	ldr	r0, [r7, #4]
 800e5a4:	f001 fa64 	bl	800fa70 <VL53L0X_WrByte>
 800e5a8:	4603      	mov	r3, r0
 800e5aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800e5ae:	2203      	movs	r2, #3
 800e5b0:	2132      	movs	r1, #50	; 0x32
 800e5b2:	6878      	ldr	r0, [r7, #4]
 800e5b4:	f001 fa5c 	bl	800fa70 <VL53L0X_WrByte>
 800e5b8:	4603      	mov	r3, r0
 800e5ba:	461a      	mov	r2, r3
 800e5bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e5c0:	4313      	orrs	r3, r2
 800e5c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800e5c6:	2209      	movs	r2, #9
 800e5c8:	2130      	movs	r1, #48	; 0x30
 800e5ca:	6878      	ldr	r0, [r7, #4]
 800e5cc:	f001 fa50 	bl	800fa70 <VL53L0X_WrByte>
 800e5d0:	4603      	mov	r3, r0
 800e5d2:	461a      	mov	r2, r3
 800e5d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e5d8:	4313      	orrs	r3, r2
 800e5da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800e5de:	2201      	movs	r2, #1
 800e5e0:	21ff      	movs	r1, #255	; 0xff
 800e5e2:	6878      	ldr	r0, [r7, #4]
 800e5e4:	f001 fa44 	bl	800fa70 <VL53L0X_WrByte>
 800e5e8:	4603      	mov	r3, r0
 800e5ea:	461a      	mov	r2, r3
 800e5ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e5f0:	4313      	orrs	r3, r2
 800e5f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800e5f6:	2220      	movs	r2, #32
 800e5f8:	2130      	movs	r1, #48	; 0x30
 800e5fa:	6878      	ldr	r0, [r7, #4]
 800e5fc:	f001 fa38 	bl	800fa70 <VL53L0X_WrByte>
 800e600:	4603      	mov	r3, r0
 800e602:	461a      	mov	r2, r3
 800e604:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e608:	4313      	orrs	r3, r2
 800e60a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800e60e:	2200      	movs	r2, #0
 800e610:	21ff      	movs	r1, #255	; 0xff
 800e612:	6878      	ldr	r0, [r7, #4]
 800e614:	f001 fa2c 	bl	800fa70 <VL53L0X_WrByte>
 800e618:	4603      	mov	r3, r0
 800e61a:	461a      	mov	r2, r3
 800e61c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e620:	4313      	orrs	r3, r2
 800e622:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e626:	e09e      	b.n	800e766 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800e628:	78bb      	ldrb	r3, [r7, #2]
 800e62a:	2b0c      	cmp	r3, #12
 800e62c:	d14c      	bne.n	800e6c8 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 800e62e:	2238      	movs	r2, #56	; 0x38
 800e630:	2148      	movs	r1, #72	; 0x48
 800e632:	6878      	ldr	r0, [r7, #4]
 800e634:	f001 fa1c 	bl	800fa70 <VL53L0X_WrByte>
 800e638:	4603      	mov	r3, r0
 800e63a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 800e63e:	2208      	movs	r2, #8
 800e640:	2147      	movs	r1, #71	; 0x47
 800e642:	6878      	ldr	r0, [r7, #4]
 800e644:	f001 fa14 	bl	800fa70 <VL53L0X_WrByte>
 800e648:	4603      	mov	r3, r0
 800e64a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800e64e:	2203      	movs	r2, #3
 800e650:	2132      	movs	r1, #50	; 0x32
 800e652:	6878      	ldr	r0, [r7, #4]
 800e654:	f001 fa0c 	bl	800fa70 <VL53L0X_WrByte>
 800e658:	4603      	mov	r3, r0
 800e65a:	461a      	mov	r2, r3
 800e65c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e660:	4313      	orrs	r3, r2
 800e662:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800e666:	2208      	movs	r2, #8
 800e668:	2130      	movs	r1, #48	; 0x30
 800e66a:	6878      	ldr	r0, [r7, #4]
 800e66c:	f001 fa00 	bl	800fa70 <VL53L0X_WrByte>
 800e670:	4603      	mov	r3, r0
 800e672:	461a      	mov	r2, r3
 800e674:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e678:	4313      	orrs	r3, r2
 800e67a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800e67e:	2201      	movs	r2, #1
 800e680:	21ff      	movs	r1, #255	; 0xff
 800e682:	6878      	ldr	r0, [r7, #4]
 800e684:	f001 f9f4 	bl	800fa70 <VL53L0X_WrByte>
 800e688:	4603      	mov	r3, r0
 800e68a:	461a      	mov	r2, r3
 800e68c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e690:	4313      	orrs	r3, r2
 800e692:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800e696:	2220      	movs	r2, #32
 800e698:	2130      	movs	r1, #48	; 0x30
 800e69a:	6878      	ldr	r0, [r7, #4]
 800e69c:	f001 f9e8 	bl	800fa70 <VL53L0X_WrByte>
 800e6a0:	4603      	mov	r3, r0
 800e6a2:	461a      	mov	r2, r3
 800e6a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e6a8:	4313      	orrs	r3, r2
 800e6aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800e6ae:	2200      	movs	r2, #0
 800e6b0:	21ff      	movs	r1, #255	; 0xff
 800e6b2:	6878      	ldr	r0, [r7, #4]
 800e6b4:	f001 f9dc 	bl	800fa70 <VL53L0X_WrByte>
 800e6b8:	4603      	mov	r3, r0
 800e6ba:	461a      	mov	r2, r3
 800e6bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e6c0:	4313      	orrs	r3, r2
 800e6c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e6c6:	e04e      	b.n	800e766 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 800e6c8:	78bb      	ldrb	r3, [r7, #2]
 800e6ca:	2b0e      	cmp	r3, #14
 800e6cc:	d14b      	bne.n	800e766 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800e6ce:	2248      	movs	r2, #72	; 0x48
 800e6d0:	2148      	movs	r1, #72	; 0x48
 800e6d2:	6878      	ldr	r0, [r7, #4]
 800e6d4:	f001 f9cc 	bl	800fa70 <VL53L0X_WrByte>
 800e6d8:	4603      	mov	r3, r0
 800e6da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800e6de:	2208      	movs	r2, #8
 800e6e0:	2147      	movs	r1, #71	; 0x47
 800e6e2:	6878      	ldr	r0, [r7, #4]
 800e6e4:	f001 f9c4 	bl	800fa70 <VL53L0X_WrByte>
 800e6e8:	4603      	mov	r3, r0
 800e6ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800e6ee:	2203      	movs	r2, #3
 800e6f0:	2132      	movs	r1, #50	; 0x32
 800e6f2:	6878      	ldr	r0, [r7, #4]
 800e6f4:	f001 f9bc 	bl	800fa70 <VL53L0X_WrByte>
 800e6f8:	4603      	mov	r3, r0
 800e6fa:	461a      	mov	r2, r3
 800e6fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e700:	4313      	orrs	r3, r2
 800e702:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800e706:	2207      	movs	r2, #7
 800e708:	2130      	movs	r1, #48	; 0x30
 800e70a:	6878      	ldr	r0, [r7, #4]
 800e70c:	f001 f9b0 	bl	800fa70 <VL53L0X_WrByte>
 800e710:	4603      	mov	r3, r0
 800e712:	461a      	mov	r2, r3
 800e714:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e718:	4313      	orrs	r3, r2
 800e71a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800e71e:	2201      	movs	r2, #1
 800e720:	21ff      	movs	r1, #255	; 0xff
 800e722:	6878      	ldr	r0, [r7, #4]
 800e724:	f001 f9a4 	bl	800fa70 <VL53L0X_WrByte>
 800e728:	4603      	mov	r3, r0
 800e72a:	461a      	mov	r2, r3
 800e72c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e730:	4313      	orrs	r3, r2
 800e732:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800e736:	2220      	movs	r2, #32
 800e738:	2130      	movs	r1, #48	; 0x30
 800e73a:	6878      	ldr	r0, [r7, #4]
 800e73c:	f001 f998 	bl	800fa70 <VL53L0X_WrByte>
 800e740:	4603      	mov	r3, r0
 800e742:	461a      	mov	r2, r3
 800e744:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e748:	4313      	orrs	r3, r2
 800e74a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800e74e:	2200      	movs	r2, #0
 800e750:	21ff      	movs	r1, #255	; 0xff
 800e752:	6878      	ldr	r0, [r7, #4]
 800e754:	f001 f98c 	bl	800fa70 <VL53L0X_WrByte>
 800e758:	4603      	mov	r3, r0
 800e75a:	461a      	mov	r2, r3
 800e75c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e760:	4313      	orrs	r3, r2
 800e762:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 800e766:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d17f      	bne.n	800e86e <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 800e76e:	78bb      	ldrb	r3, [r7, #2]
 800e770:	4618      	mov	r0, r3
 800e772:	f7fe fe37 	bl	800d3e4 <VL53L0X_encode_vcsel_period>
 800e776:	4603      	mov	r3, r0
 800e778:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 800e77c:	78fb      	ldrb	r3, [r7, #3]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d002      	beq.n	800e788 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 800e782:	2b01      	cmp	r3, #1
 800e784:	d045      	beq.n	800e812 <VL53L0X_set_vcsel_pulse_period+0x470>
 800e786:	e06e      	b.n	800e866 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800e788:	f107 0314 	add.w	r3, r7, #20
 800e78c:	461a      	mov	r2, r3
 800e78e:	2103      	movs	r1, #3
 800e790:	6878      	ldr	r0, [r7, #4]
 800e792:	f7ff fc33 	bl	800dffc <get_sequence_step_timeout>
 800e796:	4603      	mov	r3, r0
 800e798:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800e79c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d109      	bne.n	800e7b8 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 800e7a4:	f107 0310 	add.w	r3, r7, #16
 800e7a8:	461a      	mov	r2, r3
 800e7aa:	2102      	movs	r1, #2
 800e7ac:	6878      	ldr	r0, [r7, #4]
 800e7ae:	f7ff fc25 	bl	800dffc <get_sequence_step_timeout>
 800e7b2:	4603      	mov	r3, r0
 800e7b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800e7b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d109      	bne.n	800e7d4 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 800e7c0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e7c4:	461a      	mov	r2, r3
 800e7c6:	2150      	movs	r1, #80	; 0x50
 800e7c8:	6878      	ldr	r0, [r7, #4]
 800e7ca:	f001 f951 	bl	800fa70 <VL53L0X_WrByte>
 800e7ce:	4603      	mov	r3, r0
 800e7d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800e7d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d108      	bne.n	800e7ee <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 800e7dc:	697b      	ldr	r3, [r7, #20]
 800e7de:	461a      	mov	r2, r3
 800e7e0:	2103      	movs	r1, #3
 800e7e2:	6878      	ldr	r0, [r7, #4]
 800e7e4:	f7ff fceb 	bl	800e1be <set_sequence_step_timeout>
 800e7e8:	4603      	mov	r3, r0
 800e7ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800e7ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d108      	bne.n	800e808 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800e7f6:	693b      	ldr	r3, [r7, #16]
 800e7f8:	461a      	mov	r2, r3
 800e7fa:	2102      	movs	r1, #2
 800e7fc:	6878      	ldr	r0, [r7, #4]
 800e7fe:	f7ff fcde 	bl	800e1be <set_sequence_step_timeout>
 800e802:	4603      	mov	r3, r0
 800e804:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	78ba      	ldrb	r2, [r7, #2]
 800e80c:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800e810:	e02e      	b.n	800e870 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800e812:	f107 0318 	add.w	r3, r7, #24
 800e816:	461a      	mov	r2, r3
 800e818:	2104      	movs	r1, #4
 800e81a:	6878      	ldr	r0, [r7, #4]
 800e81c:	f7ff fbee 	bl	800dffc <get_sequence_step_timeout>
 800e820:	4603      	mov	r3, r0
 800e822:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800e826:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d109      	bne.n	800e842 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 800e82e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e832:	461a      	mov	r2, r3
 800e834:	2170      	movs	r1, #112	; 0x70
 800e836:	6878      	ldr	r0, [r7, #4]
 800e838:	f001 f91a 	bl	800fa70 <VL53L0X_WrByte>
 800e83c:	4603      	mov	r3, r0
 800e83e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800e842:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e846:	2b00      	cmp	r3, #0
 800e848:	d108      	bne.n	800e85c <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 800e84a:	69bb      	ldr	r3, [r7, #24]
 800e84c:	461a      	mov	r2, r3
 800e84e:	2104      	movs	r1, #4
 800e850:	6878      	ldr	r0, [r7, #4]
 800e852:	f7ff fcb4 	bl	800e1be <set_sequence_step_timeout>
 800e856:	4603      	mov	r3, r0
 800e858:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	78ba      	ldrb	r2, [r7, #2]
 800e860:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800e864:	e004      	b.n	800e870 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e866:	23fc      	movs	r3, #252	; 0xfc
 800e868:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e86c:	e000      	b.n	800e870 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 800e86e:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 800e870:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e874:	2b00      	cmp	r3, #0
 800e876:	d109      	bne.n	800e88c <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	695b      	ldr	r3, [r3, #20]
 800e87c:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800e87e:	69f9      	ldr	r1, [r7, #28]
 800e880:	6878      	ldr	r0, [r7, #4]
 800e882:	f7fc fd99 	bl	800b3b8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800e886:	4603      	mov	r3, r0
 800e888:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 800e88c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e890:	2b00      	cmp	r3, #0
 800e892:	d109      	bne.n	800e8a8 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 800e894:	f107 010f 	add.w	r1, r7, #15
 800e898:	2301      	movs	r3, #1
 800e89a:	2200      	movs	r2, #0
 800e89c:	6878      	ldr	r0, [r7, #4]
 800e89e:	f7fe fc99 	bl	800d1d4 <VL53L0X_perform_phase_calibration>
 800e8a2:	4603      	mov	r3, r0
 800e8a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 800e8a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800e8ac:	4618      	mov	r0, r3
 800e8ae:	3728      	adds	r7, #40	; 0x28
 800e8b0:	46bd      	mov	sp, r7
 800e8b2:	bd80      	pop	{r7, pc}

0800e8b4 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b086      	sub	sp, #24
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	60f8      	str	r0, [r7, #12]
 800e8bc:	460b      	mov	r3, r1
 800e8be:	607a      	str	r2, [r7, #4]
 800e8c0:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800e8c6:	7afb      	ldrb	r3, [r7, #11]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d002      	beq.n	800e8d2 <VL53L0X_get_vcsel_pulse_period+0x1e>
 800e8cc:	2b01      	cmp	r3, #1
 800e8ce:	d00a      	beq.n	800e8e6 <VL53L0X_get_vcsel_pulse_period+0x32>
 800e8d0:	e013      	b.n	800e8fa <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800e8d2:	f107 0316 	add.w	r3, r7, #22
 800e8d6:	461a      	mov	r2, r3
 800e8d8:	2150      	movs	r1, #80	; 0x50
 800e8da:	68f8      	ldr	r0, [r7, #12]
 800e8dc:	f001 f94a 	bl	800fb74 <VL53L0X_RdByte>
 800e8e0:	4603      	mov	r3, r0
 800e8e2:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800e8e4:	e00b      	b.n	800e8fe <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800e8e6:	f107 0316 	add.w	r3, r7, #22
 800e8ea:	461a      	mov	r2, r3
 800e8ec:	2170      	movs	r1, #112	; 0x70
 800e8ee:	68f8      	ldr	r0, [r7, #12]
 800e8f0:	f001 f940 	bl	800fb74 <VL53L0X_RdByte>
 800e8f4:	4603      	mov	r3, r0
 800e8f6:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800e8f8:	e001      	b.n	800e8fe <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e8fa:	23fc      	movs	r3, #252	; 0xfc
 800e8fc:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800e8fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d107      	bne.n	800e916 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800e906:	7dbb      	ldrb	r3, [r7, #22]
 800e908:	4618      	mov	r0, r3
 800e90a:	f7fe fd58 	bl	800d3be <VL53L0X_decode_vcsel_period>
 800e90e:	4603      	mov	r3, r0
 800e910:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	701a      	strb	r2, [r3, #0]

	return Status;
 800e916:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e91a:	4618      	mov	r0, r3
 800e91c:	3718      	adds	r7, #24
 800e91e:	46bd      	mov	sp, r7
 800e920:	bd80      	pop	{r7, pc}

0800e922 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800e922:	b580      	push	{r7, lr}
 800e924:	b092      	sub	sp, #72	; 0x48
 800e926:	af00      	add	r7, sp, #0
 800e928:	6078      	str	r0, [r7, #4]
 800e92a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e92c:	2300      	movs	r3, #0
 800e92e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800e932:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800e936:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800e938:	f240 7376 	movw	r3, #1910	; 0x776
 800e93c:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800e93e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800e942:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800e944:	f44f 7325 	mov.w	r3, #660	; 0x294
 800e948:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800e94a:	f240 234e 	movw	r3, #590	; 0x24e
 800e94e:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800e950:	f240 23b2 	movw	r3, #690	; 0x2b2
 800e954:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800e956:	f44f 7325 	mov.w	r3, #660	; 0x294
 800e95a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800e95c:	f240 2326 	movw	r3, #550	; 0x226
 800e960:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800e962:	2300      	movs	r3, #0
 800e964:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800e966:	f644 6320 	movw	r3, #20000	; 0x4e20
 800e96a:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800e96c:	2300      	movs	r3, #0
 800e96e:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800e970:	683a      	ldr	r2, [r7, #0]
 800e972:	6a3b      	ldr	r3, [r7, #32]
 800e974:	429a      	cmp	r2, r3
 800e976:	d205      	bcs.n	800e984 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e978:	23fc      	movs	r3, #252	; 0xfc
 800e97a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800e97e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800e982:	e0aa      	b.n	800eada <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800e984:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e988:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800e98a:	683a      	ldr	r2, [r7, #0]
 800e98c:	1ad3      	subs	r3, r2, r3
 800e98e:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800e990:	f107 0314 	add.w	r3, r7, #20
 800e994:	4619      	mov	r1, r3
 800e996:	6878      	ldr	r0, [r7, #4]
 800e998:	f7fc fe58 	bl	800b64c <VL53L0X_GetSequenceStepEnables>
 800e99c:	4603      	mov	r3, r0
 800e99e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800e9a2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d15b      	bne.n	800ea62 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800e9aa:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d105      	bne.n	800e9bc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800e9b0:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d102      	bne.n	800e9bc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800e9b6:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d052      	beq.n	800ea62 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800e9bc:	f107 0310 	add.w	r3, r7, #16
 800e9c0:	461a      	mov	r2, r3
 800e9c2:	2102      	movs	r1, #2
 800e9c4:	6878      	ldr	r0, [r7, #4]
 800e9c6:	f7ff fb19 	bl	800dffc <get_sequence_step_timeout>
 800e9ca:	4603      	mov	r3, r0
 800e9cc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800e9d0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d002      	beq.n	800e9de <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800e9d8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800e9dc:	e07d      	b.n	800eada <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800e9de:	7d3b      	ldrb	r3, [r7, #20]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d00f      	beq.n	800ea04 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800e9e4:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800e9e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e9e8:	4413      	add	r3, r2
 800e9ea:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800e9ec:	69fa      	ldr	r2, [r7, #28]
 800e9ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9f0:	429a      	cmp	r2, r3
 800e9f2:	d204      	bcs.n	800e9fe <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800e9f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e9f6:	69fb      	ldr	r3, [r7, #28]
 800e9f8:	1ad3      	subs	r3, r2, r3
 800e9fa:	643b      	str	r3, [r7, #64]	; 0x40
 800e9fc:	e002      	b.n	800ea04 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e9fe:	23fc      	movs	r3, #252	; 0xfc
 800ea00:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800ea04:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d002      	beq.n	800ea12 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800ea0c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ea10:	e063      	b.n	800eada <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800ea12:	7dbb      	ldrb	r3, [r7, #22]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d011      	beq.n	800ea3c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800ea18:	693a      	ldr	r2, [r7, #16]
 800ea1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea1c:	4413      	add	r3, r2
 800ea1e:	005b      	lsls	r3, r3, #1
 800ea20:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800ea22:	69fa      	ldr	r2, [r7, #28]
 800ea24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea26:	429a      	cmp	r2, r3
 800ea28:	d204      	bcs.n	800ea34 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800ea2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ea2c:	69fb      	ldr	r3, [r7, #28]
 800ea2e:	1ad3      	subs	r3, r2, r3
 800ea30:	643b      	str	r3, [r7, #64]	; 0x40
 800ea32:	e016      	b.n	800ea62 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ea34:	23fc      	movs	r3, #252	; 0xfc
 800ea36:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800ea3a:	e012      	b.n	800ea62 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800ea3c:	7d7b      	ldrb	r3, [r7, #21]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d00f      	beq.n	800ea62 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800ea42:	693b      	ldr	r3, [r7, #16]
 800ea44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ea46:	4413      	add	r3, r2
 800ea48:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800ea4a:	69fa      	ldr	r2, [r7, #28]
 800ea4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea4e:	429a      	cmp	r2, r3
 800ea50:	d204      	bcs.n	800ea5c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800ea52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ea54:	69fb      	ldr	r3, [r7, #28]
 800ea56:	1ad3      	subs	r3, r2, r3
 800ea58:	643b      	str	r3, [r7, #64]	; 0x40
 800ea5a:	e002      	b.n	800ea62 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ea5c:	23fc      	movs	r3, #252	; 0xfc
 800ea5e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800ea62:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d002      	beq.n	800ea70 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800ea6a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ea6e:	e034      	b.n	800eada <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800ea70:	7dfb      	ldrb	r3, [r7, #23]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d019      	beq.n	800eaaa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800ea76:	f107 030c 	add.w	r3, r7, #12
 800ea7a:	461a      	mov	r2, r3
 800ea7c:	2103      	movs	r1, #3
 800ea7e:	6878      	ldr	r0, [r7, #4]
 800ea80:	f7ff fabc 	bl	800dffc <get_sequence_step_timeout>
 800ea84:	4603      	mov	r3, r0
 800ea86:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ea8e:	4413      	add	r3, r2
 800ea90:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800ea92:	69fa      	ldr	r2, [r7, #28]
 800ea94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea96:	429a      	cmp	r2, r3
 800ea98:	d204      	bcs.n	800eaa4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800ea9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ea9c:	69fb      	ldr	r3, [r7, #28]
 800ea9e:	1ad3      	subs	r3, r2, r3
 800eaa0:	643b      	str	r3, [r7, #64]	; 0x40
 800eaa2:	e002      	b.n	800eaaa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800eaa4:	23fc      	movs	r3, #252	; 0xfc
 800eaa6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800eaaa:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d111      	bne.n	800ead6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800eab2:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d00e      	beq.n	800ead6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800eab8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800eaba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eabc:	1ad3      	subs	r3, r2, r3
 800eabe:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800eac0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800eac2:	2104      	movs	r1, #4
 800eac4:	6878      	ldr	r0, [r7, #4]
 800eac6:	f7ff fb7a 	bl	800e1be <set_sequence_step_timeout>
 800eaca:	4603      	mov	r3, r0
 800eacc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	683a      	ldr	r2, [r7, #0]
 800ead4:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800ead6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800eada:	4618      	mov	r0, r3
 800eadc:	3748      	adds	r7, #72	; 0x48
 800eade:	46bd      	mov	sp, r7
 800eae0:	bd80      	pop	{r7, pc}

0800eae2 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800eae2:	b580      	push	{r7, lr}
 800eae4:	b090      	sub	sp, #64	; 0x40
 800eae6:	af00      	add	r7, sp, #0
 800eae8:	6078      	str	r0, [r7, #4]
 800eaea:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800eaec:	2300      	movs	r3, #0
 800eaee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800eaf2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800eaf6:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800eaf8:	f240 7376 	movw	r3, #1910	; 0x776
 800eafc:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800eafe:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800eb02:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800eb04:	f44f 7325 	mov.w	r3, #660	; 0x294
 800eb08:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800eb0a:	f240 234e 	movw	r3, #590	; 0x24e
 800eb0e:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800eb10:	f240 23b2 	movw	r3, #690	; 0x2b2
 800eb14:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800eb16:	f44f 7325 	mov.w	r3, #660	; 0x294
 800eb1a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800eb1c:	f240 2326 	movw	r3, #550	; 0x226
 800eb20:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800eb22:	2300      	movs	r3, #0
 800eb24:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800eb26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eb28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb2a:	441a      	add	r2, r3
 800eb2c:	683b      	ldr	r3, [r7, #0]
 800eb2e:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800eb30:	f107 0318 	add.w	r3, r7, #24
 800eb34:	4619      	mov	r1, r3
 800eb36:	6878      	ldr	r0, [r7, #4]
 800eb38:	f7fc fd88 	bl	800b64c <VL53L0X_GetSequenceStepEnables>
 800eb3c:	4603      	mov	r3, r0
 800eb3e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800eb42:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d002      	beq.n	800eb50 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800eb4a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800eb4e:	e075      	b.n	800ec3c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800eb50:	7e3b      	ldrb	r3, [r7, #24]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d105      	bne.n	800eb62 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800eb56:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d102      	bne.n	800eb62 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800eb5c:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d030      	beq.n	800ebc4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800eb62:	f107 0310 	add.w	r3, r7, #16
 800eb66:	461a      	mov	r2, r3
 800eb68:	2102      	movs	r1, #2
 800eb6a:	6878      	ldr	r0, [r7, #4]
 800eb6c:	f7ff fa46 	bl	800dffc <get_sequence_step_timeout>
 800eb70:	4603      	mov	r3, r0
 800eb72:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800eb76:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d122      	bne.n	800ebc4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800eb7e:	7e3b      	ldrb	r3, [r7, #24]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d007      	beq.n	800eb94 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800eb84:	683b      	ldr	r3, [r7, #0]
 800eb86:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800eb88:	6939      	ldr	r1, [r7, #16]
 800eb8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb8c:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800eb8e:	441a      	add	r2, r3
 800eb90:	683b      	ldr	r3, [r7, #0]
 800eb92:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800eb94:	7ebb      	ldrb	r3, [r7, #26]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d009      	beq.n	800ebae <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800eb9a:	683b      	ldr	r3, [r7, #0]
 800eb9c:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800eb9e:	6939      	ldr	r1, [r7, #16]
 800eba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eba2:	440b      	add	r3, r1
 800eba4:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800eba6:	441a      	add	r2, r3
 800eba8:	683b      	ldr	r3, [r7, #0]
 800ebaa:	601a      	str	r2, [r3, #0]
 800ebac:	e00a      	b.n	800ebc4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800ebae:	7e7b      	ldrb	r3, [r7, #25]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d007      	beq.n	800ebc4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800ebb4:	683b      	ldr	r3, [r7, #0]
 800ebb6:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800ebb8:	6939      	ldr	r1, [r7, #16]
 800ebba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebbc:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800ebbe:	441a      	add	r2, r3
 800ebc0:	683b      	ldr	r3, [r7, #0]
 800ebc2:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ebc4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d114      	bne.n	800ebf6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800ebcc:	7efb      	ldrb	r3, [r7, #27]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d011      	beq.n	800ebf6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800ebd2:	f107 030c 	add.w	r3, r7, #12
 800ebd6:	461a      	mov	r2, r3
 800ebd8:	2103      	movs	r1, #3
 800ebda:	6878      	ldr	r0, [r7, #4]
 800ebdc:	f7ff fa0e 	bl	800dffc <get_sequence_step_timeout>
 800ebe0:	4603      	mov	r3, r0
 800ebe2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800ebe6:	683b      	ldr	r3, [r7, #0]
 800ebe8:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800ebea:	68f9      	ldr	r1, [r7, #12]
 800ebec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebee:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800ebf0:	441a      	add	r2, r3
 800ebf2:	683b      	ldr	r3, [r7, #0]
 800ebf4:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ebf6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d114      	bne.n	800ec28 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800ebfe:	7f3b      	ldrb	r3, [r7, #28]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d011      	beq.n	800ec28 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800ec04:	f107 0314 	add.w	r3, r7, #20
 800ec08:	461a      	mov	r2, r3
 800ec0a:	2104      	movs	r1, #4
 800ec0c:	6878      	ldr	r0, [r7, #4]
 800ec0e:	f7ff f9f5 	bl	800dffc <get_sequence_step_timeout>
 800ec12:	4603      	mov	r3, r0
 800ec14:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800ec18:	683b      	ldr	r3, [r7, #0]
 800ec1a:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800ec1c:	6979      	ldr	r1, [r7, #20]
 800ec1e:	6a3b      	ldr	r3, [r7, #32]
 800ec20:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800ec22:	441a      	add	r2, r3
 800ec24:	683b      	ldr	r3, [r7, #0]
 800ec26:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ec28:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d103      	bne.n	800ec38 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800ec30:	683b      	ldr	r3, [r7, #0]
 800ec32:	681a      	ldr	r2, [r3, #0]
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ec38:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	3740      	adds	r7, #64	; 0x40
 800ec40:	46bd      	mov	sp, r7
 800ec42:	bd80      	pop	{r7, pc}

0800ec44 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800ec44:	b580      	push	{r7, lr}
 800ec46:	b088      	sub	sp, #32
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	6078      	str	r0, [r7, #4]
 800ec4c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ec4e:	2300      	movs	r3, #0
 800ec50:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800ec52:	2300      	movs	r3, #0
 800ec54:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800ec56:	e0c6      	b.n	800ede6 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800ec58:	697b      	ldr	r3, [r7, #20]
 800ec5a:	683a      	ldr	r2, [r7, #0]
 800ec5c:	4413      	add	r3, r2
 800ec5e:	781b      	ldrb	r3, [r3, #0]
 800ec60:	74fb      	strb	r3, [r7, #19]
		Index++;
 800ec62:	697b      	ldr	r3, [r7, #20]
 800ec64:	3301      	adds	r3, #1
 800ec66:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800ec68:	7cfb      	ldrb	r3, [r7, #19]
 800ec6a:	2bff      	cmp	r3, #255	; 0xff
 800ec6c:	f040 808d 	bne.w	800ed8a <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800ec70:	697b      	ldr	r3, [r7, #20]
 800ec72:	683a      	ldr	r2, [r7, #0]
 800ec74:	4413      	add	r3, r2
 800ec76:	781b      	ldrb	r3, [r3, #0]
 800ec78:	747b      	strb	r3, [r7, #17]
			Index++;
 800ec7a:	697b      	ldr	r3, [r7, #20]
 800ec7c:	3301      	adds	r3, #1
 800ec7e:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800ec80:	7c7b      	ldrb	r3, [r7, #17]
 800ec82:	2b03      	cmp	r3, #3
 800ec84:	d87e      	bhi.n	800ed84 <VL53L0X_load_tuning_settings+0x140>
 800ec86:	a201      	add	r2, pc, #4	; (adr r2, 800ec8c <VL53L0X_load_tuning_settings+0x48>)
 800ec88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec8c:	0800ec9d 	.word	0x0800ec9d
 800ec90:	0800ecd7 	.word	0x0800ecd7
 800ec94:	0800ed11 	.word	0x0800ed11
 800ec98:	0800ed4b 	.word	0x0800ed4b
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800ec9c:	697b      	ldr	r3, [r7, #20]
 800ec9e:	683a      	ldr	r2, [r7, #0]
 800eca0:	4413      	add	r3, r2
 800eca2:	781b      	ldrb	r3, [r3, #0]
 800eca4:	743b      	strb	r3, [r7, #16]
				Index++;
 800eca6:	697b      	ldr	r3, [r7, #20]
 800eca8:	3301      	adds	r3, #1
 800ecaa:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800ecac:	697b      	ldr	r3, [r7, #20]
 800ecae:	683a      	ldr	r2, [r7, #0]
 800ecb0:	4413      	add	r3, r2
 800ecb2:	781b      	ldrb	r3, [r3, #0]
 800ecb4:	73fb      	strb	r3, [r7, #15]
				Index++;
 800ecb6:	697b      	ldr	r3, [r7, #20]
 800ecb8:	3301      	adds	r3, #1
 800ecba:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800ecbc:	7c3b      	ldrb	r3, [r7, #16]
 800ecbe:	b29b      	uxth	r3, r3
 800ecc0:	021b      	lsls	r3, r3, #8
 800ecc2:	b29a      	uxth	r2, r3
 800ecc4:	7bfb      	ldrb	r3, [r7, #15]
 800ecc6:	b29b      	uxth	r3, r3
 800ecc8:	4413      	add	r3, r2
 800ecca:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	89ba      	ldrh	r2, [r7, #12]
 800ecd0:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800ecd4:	e087      	b.n	800ede6 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800ecd6:	697b      	ldr	r3, [r7, #20]
 800ecd8:	683a      	ldr	r2, [r7, #0]
 800ecda:	4413      	add	r3, r2
 800ecdc:	781b      	ldrb	r3, [r3, #0]
 800ecde:	743b      	strb	r3, [r7, #16]
				Index++;
 800ece0:	697b      	ldr	r3, [r7, #20]
 800ece2:	3301      	adds	r3, #1
 800ece4:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800ece6:	697b      	ldr	r3, [r7, #20]
 800ece8:	683a      	ldr	r2, [r7, #0]
 800ecea:	4413      	add	r3, r2
 800ecec:	781b      	ldrb	r3, [r3, #0]
 800ecee:	73fb      	strb	r3, [r7, #15]
				Index++;
 800ecf0:	697b      	ldr	r3, [r7, #20]
 800ecf2:	3301      	adds	r3, #1
 800ecf4:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800ecf6:	7c3b      	ldrb	r3, [r7, #16]
 800ecf8:	b29b      	uxth	r3, r3
 800ecfa:	021b      	lsls	r3, r3, #8
 800ecfc:	b29a      	uxth	r2, r3
 800ecfe:	7bfb      	ldrb	r3, [r7, #15]
 800ed00:	b29b      	uxth	r3, r3
 800ed02:	4413      	add	r3, r2
 800ed04:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	89ba      	ldrh	r2, [r7, #12]
 800ed0a:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800ed0e:	e06a      	b.n	800ede6 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800ed10:	697b      	ldr	r3, [r7, #20]
 800ed12:	683a      	ldr	r2, [r7, #0]
 800ed14:	4413      	add	r3, r2
 800ed16:	781b      	ldrb	r3, [r3, #0]
 800ed18:	743b      	strb	r3, [r7, #16]
				Index++;
 800ed1a:	697b      	ldr	r3, [r7, #20]
 800ed1c:	3301      	adds	r3, #1
 800ed1e:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800ed20:	697b      	ldr	r3, [r7, #20]
 800ed22:	683a      	ldr	r2, [r7, #0]
 800ed24:	4413      	add	r3, r2
 800ed26:	781b      	ldrb	r3, [r3, #0]
 800ed28:	73fb      	strb	r3, [r7, #15]
				Index++;
 800ed2a:	697b      	ldr	r3, [r7, #20]
 800ed2c:	3301      	adds	r3, #1
 800ed2e:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800ed30:	7c3b      	ldrb	r3, [r7, #16]
 800ed32:	b29b      	uxth	r3, r3
 800ed34:	021b      	lsls	r3, r3, #8
 800ed36:	b29a      	uxth	r2, r3
 800ed38:	7bfb      	ldrb	r3, [r7, #15]
 800ed3a:	b29b      	uxth	r3, r3
 800ed3c:	4413      	add	r3, r2
 800ed3e:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	89ba      	ldrh	r2, [r7, #12]
 800ed44:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800ed48:	e04d      	b.n	800ede6 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800ed4a:	697b      	ldr	r3, [r7, #20]
 800ed4c:	683a      	ldr	r2, [r7, #0]
 800ed4e:	4413      	add	r3, r2
 800ed50:	781b      	ldrb	r3, [r3, #0]
 800ed52:	743b      	strb	r3, [r7, #16]
				Index++;
 800ed54:	697b      	ldr	r3, [r7, #20]
 800ed56:	3301      	adds	r3, #1
 800ed58:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800ed5a:	697b      	ldr	r3, [r7, #20]
 800ed5c:	683a      	ldr	r2, [r7, #0]
 800ed5e:	4413      	add	r3, r2
 800ed60:	781b      	ldrb	r3, [r3, #0]
 800ed62:	73fb      	strb	r3, [r7, #15]
				Index++;
 800ed64:	697b      	ldr	r3, [r7, #20]
 800ed66:	3301      	adds	r3, #1
 800ed68:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800ed6a:	7c3b      	ldrb	r3, [r7, #16]
 800ed6c:	b29b      	uxth	r3, r3
 800ed6e:	021b      	lsls	r3, r3, #8
 800ed70:	b29a      	uxth	r2, r3
 800ed72:	7bfb      	ldrb	r3, [r7, #15]
 800ed74:	b29b      	uxth	r3, r3
 800ed76:	4413      	add	r3, r2
 800ed78:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	89ba      	ldrh	r2, [r7, #12]
 800ed7e:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800ed82:	e030      	b.n	800ede6 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ed84:	23fc      	movs	r3, #252	; 0xfc
 800ed86:	77fb      	strb	r3, [r7, #31]
 800ed88:	e02d      	b.n	800ede6 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800ed8a:	7cfb      	ldrb	r3, [r7, #19]
 800ed8c:	2b04      	cmp	r3, #4
 800ed8e:	d828      	bhi.n	800ede2 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800ed90:	697b      	ldr	r3, [r7, #20]
 800ed92:	683a      	ldr	r2, [r7, #0]
 800ed94:	4413      	add	r3, r2
 800ed96:	781b      	ldrb	r3, [r3, #0]
 800ed98:	74bb      	strb	r3, [r7, #18]
			Index++;
 800ed9a:	697b      	ldr	r3, [r7, #20]
 800ed9c:	3301      	adds	r3, #1
 800ed9e:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800eda0:	2300      	movs	r3, #0
 800eda2:	61bb      	str	r3, [r7, #24]
 800eda4:	e00f      	b.n	800edc6 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800eda6:	697b      	ldr	r3, [r7, #20]
 800eda8:	683a      	ldr	r2, [r7, #0]
 800edaa:	4413      	add	r3, r2
 800edac:	7819      	ldrb	r1, [r3, #0]
 800edae:	f107 0208 	add.w	r2, r7, #8
 800edb2:	69bb      	ldr	r3, [r7, #24]
 800edb4:	4413      	add	r3, r2
 800edb6:	460a      	mov	r2, r1
 800edb8:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800edba:	697b      	ldr	r3, [r7, #20]
 800edbc:	3301      	adds	r3, #1
 800edbe:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800edc0:	69bb      	ldr	r3, [r7, #24]
 800edc2:	3301      	adds	r3, #1
 800edc4:	61bb      	str	r3, [r7, #24]
 800edc6:	7cfb      	ldrb	r3, [r7, #19]
 800edc8:	69ba      	ldr	r2, [r7, #24]
 800edca:	429a      	cmp	r2, r3
 800edcc:	dbeb      	blt.n	800eda6 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800edce:	7cfb      	ldrb	r3, [r7, #19]
 800edd0:	f107 0208 	add.w	r2, r7, #8
 800edd4:	7cb9      	ldrb	r1, [r7, #18]
 800edd6:	6878      	ldr	r0, [r7, #4]
 800edd8:	f000 fdee 	bl	800f9b8 <VL53L0X_WriteMulti>
 800eddc:	4603      	mov	r3, r0
 800edde:	77fb      	strb	r3, [r7, #31]
 800ede0:	e001      	b.n	800ede6 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ede2:	23fc      	movs	r3, #252	; 0xfc
 800ede4:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800ede6:	697b      	ldr	r3, [r7, #20]
 800ede8:	683a      	ldr	r2, [r7, #0]
 800edea:	4413      	add	r3, r2
 800edec:	781b      	ldrb	r3, [r3, #0]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d004      	beq.n	800edfc <VL53L0X_load_tuning_settings+0x1b8>
 800edf2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	f43f af2e 	beq.w	800ec58 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800edfc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ee00:	4618      	mov	r0, r3
 800ee02:	3720      	adds	r7, #32
 800ee04:	46bd      	mov	sp, r7
 800ee06:	bd80      	pop	{r7, pc}

0800ee08 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800ee08:	b580      	push	{r7, lr}
 800ee0a:	b088      	sub	sp, #32
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	60f8      	str	r0, [r7, #12]
 800ee10:	60b9      	str	r1, [r7, #8]
 800ee12:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ee14:	2300      	movs	r3, #0
 800ee16:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	2200      	movs	r2, #0
 800ee1c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800ee1e:	f107 0313 	add.w	r3, r7, #19
 800ee22:	4619      	mov	r1, r3
 800ee24:	68f8      	ldr	r0, [r7, #12]
 800ee26:	f7fc fc9d 	bl	800b764 <VL53L0X_GetXTalkCompensationEnable>
 800ee2a:	4603      	mov	r3, r0
 800ee2c:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800ee2e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d111      	bne.n	800ee5a <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800ee36:	7cfb      	ldrb	r3, [r7, #19]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d00e      	beq.n	800ee5a <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	6a1b      	ldr	r3, [r3, #32]
 800ee40:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800ee42:	68bb      	ldr	r3, [r7, #8]
 800ee44:	8a9b      	ldrh	r3, [r3, #20]
 800ee46:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800ee48:	69bb      	ldr	r3, [r7, #24]
 800ee4a:	fb02 f303 	mul.w	r3, r2, r3
 800ee4e:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800ee50:	697b      	ldr	r3, [r7, #20]
 800ee52:	3380      	adds	r3, #128	; 0x80
 800ee54:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800ee5a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ee5e:	4618      	mov	r0, r3
 800ee60:	3720      	adds	r7, #32
 800ee62:	46bd      	mov	sp, r7
 800ee64:	bd80      	pop	{r7, pc}

0800ee66 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800ee66:	b580      	push	{r7, lr}
 800ee68:	b086      	sub	sp, #24
 800ee6a:	af00      	add	r7, sp, #0
 800ee6c:	60f8      	str	r0, [r7, #12]
 800ee6e:	60b9      	str	r1, [r7, #8]
 800ee70:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ee72:	2300      	movs	r3, #0
 800ee74:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800ee76:	68bb      	ldr	r3, [r7, #8]
 800ee78:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800ee7e:	f107 0310 	add.w	r3, r7, #16
 800ee82:	461a      	mov	r2, r3
 800ee84:	68b9      	ldr	r1, [r7, #8]
 800ee86:	68f8      	ldr	r0, [r7, #12]
 800ee88:	f7ff ffbe 	bl	800ee08 <VL53L0X_get_total_xtalk_rate>
 800ee8c:	4603      	mov	r3, r0
 800ee8e:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800ee90:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d105      	bne.n	800eea4 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	681a      	ldr	r2, [r3, #0]
 800ee9c:	693b      	ldr	r3, [r7, #16]
 800ee9e:	441a      	add	r2, r3
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	601a      	str	r2, [r3, #0]

	return Status;
 800eea4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eea8:	4618      	mov	r0, r3
 800eeaa:	3718      	adds	r7, #24
 800eeac:	46bd      	mov	sp, r7
 800eeae:	bd80      	pop	{r7, pc}

0800eeb0 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	b09a      	sub	sp, #104	; 0x68
 800eeb4:	af00      	add	r7, sp, #0
 800eeb6:	60f8      	str	r0, [r7, #12]
 800eeb8:	60b9      	str	r1, [r7, #8]
 800eeba:	607a      	str	r2, [r7, #4]
 800eebc:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800eebe:	2312      	movs	r3, #18
 800eec0:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800eec2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800eec6:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800eec8:	2342      	movs	r3, #66	; 0x42
 800eeca:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800eecc:	2306      	movs	r3, #6
 800eece:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800eed0:	2307      	movs	r3, #7
 800eed2:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800eed4:	2300      	movs	r3, #0
 800eed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 800eee0:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800eee8:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800eeea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eeec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eeee:	fb02 f303 	mul.w	r3, r2, r3
 800eef2:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800eef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eef6:	3380      	adds	r3, #128	; 0x80
 800eef8:	0a1b      	lsrs	r3, r3, #8
 800eefa:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800eefc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eefe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ef00:	fb02 f303 	mul.w	r3, r2, r3
 800ef04:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800ef06:	2300      	movs	r3, #0
 800ef08:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d01a      	beq.n	800ef46 <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800ef10:	68bb      	ldr	r3, [r7, #8]
 800ef12:	029b      	lsls	r3, r3, #10
 800ef14:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800ef1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef1c:	4413      	add	r3, r2
 800ef1e:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800ef20:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	fbb2 f3f3 	udiv	r3, r2, r3
 800ef28:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800ef2a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ef2c:	4613      	mov	r3, r2
 800ef2e:	005b      	lsls	r3, r3, #1
 800ef30:	4413      	add	r3, r2
 800ef32:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800ef34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ef36:	fb03 f303 	mul.w	r3, r3, r3
 800ef3a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800ef3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ef3e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ef42:	0c1b      	lsrs	r3, r3, #16
 800ef44:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800ef46:	683b      	ldr	r3, [r7, #0]
 800ef48:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ef4a:	fb02 f303 	mul.w	r3, r2, r3
 800ef4e:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800ef50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef52:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ef56:	0c1b      	lsrs	r3, r3, #16
 800ef58:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800ef5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef5c:	fb03 f303 	mul.w	r3, r3, r3
 800ef60:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800ef62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ef64:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ef68:	0c1b      	lsrs	r3, r3, #16
 800ef6a:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800ef6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef6e:	085a      	lsrs	r2, r3, #1
 800ef70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef72:	441a      	add	r2, r3
 800ef74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef76:	fbb2 f3f3 	udiv	r3, r2, r3
 800ef7a:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800ef7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ef80:	fb02 f303 	mul.w	r3, r2, r3
 800ef84:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800ef86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ef8c:	d302      	bcc.n	800ef94 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800ef8e:	4b54      	ldr	r3, [pc, #336]	; (800f0e0 <VL53L0X_calc_dmax+0x230>)
 800ef90:	663b      	str	r3, [r7, #96]	; 0x60
 800ef92:	e015      	b.n	800efc0 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800ef94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef96:	085a      	lsrs	r2, r3, #1
 800ef98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ef9a:	441a      	add	r2, r3
 800ef9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef9e:	fbb2 f3f3 	udiv	r3, r2, r3
 800efa2:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800efa4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800efa6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800efa8:	fb02 f303 	mul.w	r3, r2, r3
 800efac:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800efae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800efb0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800efb4:	0c1b      	lsrs	r3, r3, #16
 800efb6:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800efb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800efba:	fb03 f303 	mul.w	r3, r3, r3
 800efbe:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800efc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800efc2:	039b      	lsls	r3, r3, #14
 800efc4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800efc8:	4a46      	ldr	r2, [pc, #280]	; (800f0e4 <VL53L0X_calc_dmax+0x234>)
 800efca:	fba2 2303 	umull	r2, r3, r2, r3
 800efce:	099b      	lsrs	r3, r3, #6
 800efd0:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800efd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efd4:	fb03 f303 	mul.w	r3, r3, r3
 800efd8:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800efda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800efdc:	fb03 f303 	mul.w	r3, r3, r3
 800efe0:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800efe2:	6a3b      	ldr	r3, [r7, #32]
 800efe4:	3308      	adds	r3, #8
 800efe6:	091b      	lsrs	r3, r3, #4
 800efe8:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800efea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800efec:	6a3b      	ldr	r3, [r7, #32]
 800efee:	1ad3      	subs	r3, r2, r3
 800eff0:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800eff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eff4:	4613      	mov	r3, r2
 800eff6:	005b      	lsls	r3, r3, #1
 800eff8:	4413      	add	r3, r2
 800effa:	011b      	lsls	r3, r3, #4
 800effc:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800effe:	69fb      	ldr	r3, [r7, #28]
 800f000:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800f004:	0b9b      	lsrs	r3, r3, #14
 800f006:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800f008:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f00a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f00c:	4413      	add	r3, r2
 800f00e:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800f010:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f012:	085b      	lsrs	r3, r3, #1
 800f014:	69ba      	ldr	r2, [r7, #24]
 800f016:	4413      	add	r3, r2
 800f018:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800f01a:	69ba      	ldr	r2, [r7, #24]
 800f01c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f01e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f022:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800f024:	69bb      	ldr	r3, [r7, #24]
 800f026:	039b      	lsls	r3, r3, #14
 800f028:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800f02a:	69fb      	ldr	r3, [r7, #28]
 800f02c:	085b      	lsrs	r3, r3, #1
 800f02e:	69ba      	ldr	r2, [r7, #24]
 800f030:	4413      	add	r3, r2
 800f032:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800f034:	69ba      	ldr	r2, [r7, #24]
 800f036:	69fb      	ldr	r3, [r7, #28]
 800f038:	fbb2 f3f3 	udiv	r3, r2, r3
 800f03c:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800f03e:	69bb      	ldr	r3, [r7, #24]
 800f040:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f042:	fb02 f303 	mul.w	r3, r2, r3
 800f046:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800f048:	69bb      	ldr	r3, [r7, #24]
 800f04a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800f04e:	4a25      	ldr	r2, [pc, #148]	; (800f0e4 <VL53L0X_calc_dmax+0x234>)
 800f050:	fba2 2303 	umull	r2, r3, r2, r3
 800f054:	099b      	lsrs	r3, r3, #6
 800f056:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800f058:	69bb      	ldr	r3, [r7, #24]
 800f05a:	011b      	lsls	r3, r3, #4
 800f05c:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800f05e:	69bb      	ldr	r3, [r7, #24]
 800f060:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800f064:	4a1f      	ldr	r2, [pc, #124]	; (800f0e4 <VL53L0X_calc_dmax+0x234>)
 800f066:	fba2 2303 	umull	r2, r3, r2, r3
 800f06a:	099b      	lsrs	r3, r3, #6
 800f06c:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800f06e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f070:	3380      	adds	r3, #128	; 0x80
 800f072:	0a1b      	lsrs	r3, r3, #8
 800f074:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800f076:	697b      	ldr	r3, [r7, #20]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d008      	beq.n	800f08e <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800f07c:	697b      	ldr	r3, [r7, #20]
 800f07e:	085a      	lsrs	r2, r3, #1
 800f080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f082:	441a      	add	r2, r3
 800f084:	697b      	ldr	r3, [r7, #20]
 800f086:	fbb2 f3f3 	udiv	r3, r2, r3
 800f08a:	65bb      	str	r3, [r7, #88]	; 0x58
 800f08c:	e001      	b.n	800f092 <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800f08e:	2300      	movs	r3, #0
 800f090:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800f092:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f094:	f7fe f9b9 	bl	800d40a <VL53L0X_isqrt>
 800f098:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800f09a:	69bb      	ldr	r3, [r7, #24]
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d008      	beq.n	800f0b2 <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800f0a0:	69bb      	ldr	r3, [r7, #24]
 800f0a2:	085a      	lsrs	r2, r3, #1
 800f0a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0a6:	441a      	add	r2, r3
 800f0a8:	69bb      	ldr	r3, [r7, #24]
 800f0aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800f0ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f0b0:	e001      	b.n	800f0b6 <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800f0b6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800f0b8:	f7fe f9a7 	bl	800d40a <VL53L0X_isqrt>
 800f0bc:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800f0be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f0c0:	693a      	ldr	r2, [r7, #16]
 800f0c2:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800f0c4:	693a      	ldr	r2, [r7, #16]
 800f0c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f0c8:	429a      	cmp	r2, r3
 800f0ca:	d902      	bls.n	800f0d2 <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800f0cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f0ce:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f0d0:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800f0d2:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	3768      	adds	r7, #104	; 0x68
 800f0da:	46bd      	mov	sp, r7
 800f0dc:	bd80      	pop	{r7, pc}
 800f0de:	bf00      	nop
 800f0e0:	fff00000 	.word	0xfff00000
 800f0e4:	10624dd3 	.word	0x10624dd3

0800f0e8 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800f0e8:	b580      	push	{r7, lr}
 800f0ea:	b0b4      	sub	sp, #208	; 0xd0
 800f0ec:	af04      	add	r7, sp, #16
 800f0ee:	60f8      	str	r0, [r7, #12]
 800f0f0:	60b9      	str	r1, [r7, #8]
 800f0f2:	607a      	str	r2, [r7, #4]
 800f0f4:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800f0f6:	f44f 7348 	mov.w	r3, #800	; 0x320
 800f0fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800f0fe:	f44f 7316 	mov.w	r3, #600	; 0x258
 800f102:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800f106:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800f10a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800f10e:	f241 235c 	movw	r3, #4700	; 0x125c
 800f112:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800f116:	4b9e      	ldr	r3, [pc, #632]	; (800f390 <VL53L0X_calc_sigma_estimate+0x2a8>)
 800f118:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800f11c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800f120:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800f122:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800f126:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f12a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f12e:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800f130:	4b98      	ldr	r3, [pc, #608]	; (800f394 <VL53L0X_calc_sigma_estimate+0x2ac>)
 800f132:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800f134:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f138:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800f13a:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800f13e:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800f140:	f240 6377 	movw	r3, #1655	; 0x677
 800f144:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f146:	2300      	movs	r3, #0
 800f148:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	6a1b      	ldr	r3, [r3, #32]
 800f150:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800f152:	68bb      	ldr	r3, [r7, #8]
 800f154:	691b      	ldr	r3, [r3, #16]
 800f156:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f15a:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800f15e:	0c1b      	lsrs	r3, r3, #16
 800f160:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800f162:	68bb      	ldr	r3, [r7, #8]
 800f164:	68db      	ldr	r3, [r3, #12]
 800f166:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800f168:	f107 0310 	add.w	r3, r7, #16
 800f16c:	461a      	mov	r2, r3
 800f16e:	68b9      	ldr	r1, [r7, #8]
 800f170:	68f8      	ldr	r0, [r7, #12]
 800f172:	f7ff fe78 	bl	800ee66 <VL53L0X_get_total_signal_rate>
 800f176:	4603      	mov	r3, r0
 800f178:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800f17c:	f107 0314 	add.w	r3, r7, #20
 800f180:	461a      	mov	r2, r3
 800f182:	68b9      	ldr	r1, [r7, #8]
 800f184:	68f8      	ldr	r0, [r7, #12]
 800f186:	f7ff fe3f 	bl	800ee08 <VL53L0X_get_total_xtalk_rate>
 800f18a:	4603      	mov	r3, r0
 800f18c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800f190:	693b      	ldr	r3, [r7, #16]
 800f192:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f196:	fb02 f303 	mul.w	r3, r2, r3
 800f19a:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800f19c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f19e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f1a2:	0c1b      	lsrs	r3, r3, #16
 800f1a4:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800f1a6:	697b      	ldr	r3, [r7, #20]
 800f1a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f1ac:	fb02 f303 	mul.w	r3, r2, r3
 800f1b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800f1b4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800f1b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f1ba:	429a      	cmp	r2, r3
 800f1bc:	d902      	bls.n	800f1c4 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800f1be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f1c0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800f1c4:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d168      	bne.n	800f29e <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800f1d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800f1dc:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800f1e0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800f1e4:	461a      	mov	r2, r3
 800f1e6:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800f1ea:	68f8      	ldr	r0, [r7, #12]
 800f1ec:	f7fe feb2 	bl	800df54 <VL53L0X_calc_timeout_mclks>
 800f1f0:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800f1f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800f202:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800f206:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800f20a:	461a      	mov	r2, r3
 800f20c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800f210:	68f8      	ldr	r0, [r7, #12]
 800f212:	f7fe fe9f 	bl	800df54 <VL53L0X_calc_timeout_mclks>
 800f216:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800f218:	2303      	movs	r3, #3
 800f21a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800f21e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800f222:	2b08      	cmp	r3, #8
 800f224:	d102      	bne.n	800f22c <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800f226:	2302      	movs	r3, #2
 800f228:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800f22c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f22e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f230:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800f232:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800f236:	fb02 f303 	mul.w	r3, r2, r3
 800f23a:	02db      	lsls	r3, r3, #11
 800f23c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800f240:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f244:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800f248:	4a53      	ldr	r2, [pc, #332]	; (800f398 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800f24a:	fba2 2303 	umull	r2, r3, r2, r3
 800f24e:	099b      	lsrs	r3, r3, #6
 800f250:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800f254:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f258:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f25a:	fb02 f303 	mul.w	r3, r2, r3
 800f25e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800f262:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f266:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800f26a:	4a4b      	ldr	r2, [pc, #300]	; (800f398 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800f26c:	fba2 2303 	umull	r2, r3, r2, r3
 800f270:	099b      	lsrs	r3, r3, #6
 800f272:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800f276:	693b      	ldr	r3, [r7, #16]
 800f278:	3380      	adds	r3, #128	; 0x80
 800f27a:	0a1b      	lsrs	r3, r3, #8
 800f27c:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800f27e:	693a      	ldr	r2, [r7, #16]
 800f280:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f284:	fb02 f303 	mul.w	r3, r2, r3
 800f288:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800f28c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f290:	3380      	adds	r3, #128	; 0x80
 800f292:	0a1b      	lsrs	r3, r3, #8
 800f294:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800f298:	693b      	ldr	r3, [r7, #16]
 800f29a:	021b      	lsls	r3, r3, #8
 800f29c:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800f29e:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d002      	beq.n	800f2ac <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800f2a6:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800f2aa:	e15e      	b.n	800f56a <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 800f2ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d10c      	bne.n	800f2cc <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f2b8:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f2c0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800f2c4:	683b      	ldr	r3, [r7, #0]
 800f2c6:	2200      	movs	r2, #0
 800f2c8:	601a      	str	r2, [r3, #0]
 800f2ca:	e14c      	b.n	800f566 <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800f2cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d102      	bne.n	800f2da <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800f2d4:	2301      	movs	r3, #1
 800f2d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800f2da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f2de:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800f2e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f2e2:	041a      	lsls	r2, r3, #16
 800f2e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f2e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800f2ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800f2ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800f2f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f2f4:	429a      	cmp	r2, r3
 800f2f6:	d902      	bls.n	800f2fe <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800f2f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f2fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800f2fe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800f302:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800f306:	fb02 f303 	mul.w	r3, r2, r3
 800f30a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800f30e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800f312:	4613      	mov	r3, r2
 800f314:	005b      	lsls	r3, r3, #1
 800f316:	4413      	add	r3, r2
 800f318:	009b      	lsls	r3, r3, #2
 800f31a:	4618      	mov	r0, r3
 800f31c:	f7fe f875 	bl	800d40a <VL53L0X_isqrt>
 800f320:	4603      	mov	r3, r0
 800f322:	005b      	lsls	r3, r3, #1
 800f324:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800f326:	68bb      	ldr	r3, [r7, #8]
 800f328:	891b      	ldrh	r3, [r3, #8]
 800f32a:	461a      	mov	r2, r3
 800f32c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f32e:	fb02 f303 	mul.w	r3, r2, r3
 800f332:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800f334:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f336:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800f338:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f33c:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800f33e:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800f340:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800f344:	4a14      	ldr	r2, [pc, #80]	; (800f398 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800f346:	fba2 2303 	umull	r2, r3, r2, r3
 800f34a:	099b      	lsrs	r3, r3, #6
 800f34c:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800f34e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f350:	041b      	lsls	r3, r3, #16
 800f352:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800f356:	4a10      	ldr	r2, [pc, #64]	; (800f398 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800f358:	fba2 2303 	umull	r2, r3, r2, r3
 800f35c:	099b      	lsrs	r3, r3, #6
 800f35e:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800f360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f362:	021b      	lsls	r3, r3, #8
 800f364:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800f366:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f36a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f36e:	2b00      	cmp	r3, #0
 800f370:	bfb8      	it	lt
 800f372:	425b      	neglt	r3, r3
 800f374:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800f376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f378:	021b      	lsls	r3, r3, #8
 800f37a:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800f37c:	68bb      	ldr	r3, [r7, #8]
 800f37e:	7e1b      	ldrb	r3, [r3, #24]
 800f380:	2b00      	cmp	r3, #0
 800f382:	d00b      	beq.n	800f39c <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800f384:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800f388:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f38c:	e033      	b.n	800f3f6 <VL53L0X_calc_sigma_estimate+0x30e>
 800f38e:	bf00      	nop
 800f390:	028f87ae 	.word	0x028f87ae
 800f394:	0006999a 	.word	0x0006999a
 800f398:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800f39c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f39e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f3a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800f3a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800f3aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3ac:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800f3b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f3b4:	fb02 f303 	mul.w	r3, r2, r3
 800f3b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800f3bc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800f3c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f3c2:	4413      	add	r3, r2
 800f3c4:	0c1b      	lsrs	r3, r3, #16
 800f3c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800f3ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f3ce:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800f3d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800f3d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f3da:	085b      	lsrs	r3, r3, #1
 800f3dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800f3e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f3e4:	fb03 f303 	mul.w	r3, r3, r3
 800f3e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800f3ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f3f0:	0b9b      	lsrs	r3, r3, #14
 800f3f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800f3f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f3fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f3fc:	fb02 f303 	mul.w	r3, r2, r3
 800f400:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800f402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f404:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f408:	0c1b      	lsrs	r3, r3, #16
 800f40a:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800f40c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f40e:	fb03 f303 	mul.w	r3, r3, r3
 800f412:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800f414:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800f418:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800f41a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f41c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f420:	0c1b      	lsrs	r3, r3, #16
 800f422:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800f424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f426:	fb03 f303 	mul.w	r3, r3, r3
 800f42a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800f42c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f42e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f430:	4413      	add	r3, r2
 800f432:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800f434:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f436:	f7fd ffe8 	bl	800d40a <VL53L0X_isqrt>
 800f43a:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800f43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f43e:	041b      	lsls	r3, r3, #16
 800f440:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800f442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f444:	3332      	adds	r3, #50	; 0x32
 800f446:	4a4b      	ldr	r2, [pc, #300]	; (800f574 <VL53L0X_calc_sigma_estimate+0x48c>)
 800f448:	fba2 2303 	umull	r2, r3, r2, r3
 800f44c:	095a      	lsrs	r2, r3, #5
 800f44e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f450:	fbb2 f3f3 	udiv	r3, r2, r3
 800f454:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800f458:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f45c:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800f460:	fb02 f303 	mul.w	r3, r2, r3
 800f464:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800f468:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800f46c:	f241 3388 	movw	r3, #5000	; 0x1388
 800f470:	4413      	add	r3, r2
 800f472:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800f476:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f47a:	4a3f      	ldr	r2, [pc, #252]	; (800f578 <VL53L0X_calc_sigma_estimate+0x490>)
 800f47c:	fba2 2303 	umull	r2, r3, r2, r3
 800f480:	0b5b      	lsrs	r3, r3, #13
 800f482:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800f486:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800f48a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f48c:	429a      	cmp	r2, r3
 800f48e:	d902      	bls.n	800f496 <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800f490:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f492:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800f496:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800f49a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f49e:	4413      	add	r3, r2
 800f4a0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800f4a4:	4a35      	ldr	r2, [pc, #212]	; (800f57c <VL53L0X_calc_sigma_estimate+0x494>)
 800f4a6:	fba2 2303 	umull	r2, r3, r2, r3
 800f4aa:	099b      	lsrs	r3, r3, #6
 800f4ac:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800f4ae:	6a3b      	ldr	r3, [r7, #32]
 800f4b0:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800f4b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f4b6:	441a      	add	r2, r3
 800f4b8:	6a3b      	ldr	r3, [r7, #32]
 800f4ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800f4be:	4618      	mov	r0, r3
 800f4c0:	f7fd ffa3 	bl	800d40a <VL53L0X_isqrt>
 800f4c4:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800f4c6:	69fb      	ldr	r3, [r7, #28]
 800f4c8:	021b      	lsls	r3, r3, #8
 800f4ca:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800f4cc:	69fb      	ldr	r3, [r7, #28]
 800f4ce:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800f4d2:	4a2a      	ldr	r2, [pc, #168]	; (800f57c <VL53L0X_calc_sigma_estimate+0x494>)
 800f4d4:	fba2 2303 	umull	r2, r3, r2, r3
 800f4d8:	099b      	lsrs	r3, r3, #6
 800f4da:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800f4dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f4e0:	fb03 f303 	mul.w	r3, r3, r3
 800f4e4:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800f4e6:	69fb      	ldr	r3, [r7, #28]
 800f4e8:	fb03 f303 	mul.w	r3, r3, r3
 800f4ec:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800f4ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f4f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4f2:	4413      	add	r3, r2
 800f4f4:	4618      	mov	r0, r3
 800f4f6:	f7fd ff88 	bl	800d40a <VL53L0X_isqrt>
 800f4fa:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800f4fc:	69bb      	ldr	r3, [r7, #24]
 800f4fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f502:	fb02 f303 	mul.w	r3, r2, r3
 800f506:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800f50a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d009      	beq.n	800f524 <VL53L0X_calc_sigma_estimate+0x43c>
 800f510:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f514:	2b00      	cmp	r3, #0
 800f516:	d005      	beq.n	800f524 <VL53L0X_calc_sigma_estimate+0x43c>
 800f518:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800f51c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f520:	429a      	cmp	r2, r3
 800f522:	d903      	bls.n	800f52c <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800f524:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f528:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800f532:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	681a      	ldr	r2, [r3, #0]
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800f53e:	6939      	ldr	r1, [r7, #16]
 800f540:	683b      	ldr	r3, [r7, #0]
 800f542:	9303      	str	r3, [sp, #12]
 800f544:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f548:	9302      	str	r3, [sp, #8]
 800f54a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800f54e:	9301      	str	r3, [sp, #4]
 800f550:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f552:	9300      	str	r3, [sp, #0]
 800f554:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f558:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f55a:	68f8      	ldr	r0, [r7, #12]
 800f55c:	f7ff fca8 	bl	800eeb0 <VL53L0X_calc_dmax>
 800f560:	4603      	mov	r3, r0
 800f562:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800f566:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800f56a:	4618      	mov	r0, r3
 800f56c:	37c0      	adds	r7, #192	; 0xc0
 800f56e:	46bd      	mov	sp, r7
 800f570:	bd80      	pop	{r7, pc}
 800f572:	bf00      	nop
 800f574:	51eb851f 	.word	0x51eb851f
 800f578:	d1b71759 	.word	0xd1b71759
 800f57c:	10624dd3 	.word	0x10624dd3

0800f580 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800f580:	b580      	push	{r7, lr}
 800f582:	b090      	sub	sp, #64	; 0x40
 800f584:	af00      	add	r7, sp, #0
 800f586:	60f8      	str	r0, [r7, #12]
 800f588:	607a      	str	r2, [r7, #4]
 800f58a:	461a      	mov	r2, r3
 800f58c:	460b      	mov	r3, r1
 800f58e:	72fb      	strb	r3, [r7, #11]
 800f590:	4613      	mov	r3, r2
 800f592:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f594:	2300      	movs	r3, #0
 800f596:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800f59a:	2300      	movs	r3, #0
 800f59c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800f5a0:	2300      	movs	r3, #0
 800f5a2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800f5a6:	2300      	movs	r3, #0
 800f5a8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800f5ac:	2300      	movs	r3, #0
 800f5ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800f5b2:	2300      	movs	r3, #0
 800f5b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800f5b8:	2300      	movs	r3, #0
 800f5ba:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800f5be:	2300      	movs	r3, #0
 800f5c0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800f5ca:	2300      	movs	r3, #0
 800f5cc:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800f5ce:	2300      	movs	r3, #0
 800f5d0:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800f5d2:	7afb      	ldrb	r3, [r7, #11]
 800f5d4:	10db      	asrs	r3, r3, #3
 800f5d6:	b2db      	uxtb	r3, r3
 800f5d8:	f003 030f 	and.w	r3, r3, #15
 800f5dc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800f5e0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d017      	beq.n	800f618 <VL53L0X_get_pal_range_status+0x98>
 800f5e8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800f5ec:	2b05      	cmp	r3, #5
 800f5ee:	d013      	beq.n	800f618 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800f5f0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800f5f4:	2b07      	cmp	r3, #7
 800f5f6:	d00f      	beq.n	800f618 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800f5f8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800f5fc:	2b0c      	cmp	r3, #12
 800f5fe:	d00b      	beq.n	800f618 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800f600:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800f604:	2b0d      	cmp	r3, #13
 800f606:	d007      	beq.n	800f618 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800f608:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800f60c:	2b0e      	cmp	r3, #14
 800f60e:	d003      	beq.n	800f618 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800f610:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800f614:	2b0f      	cmp	r3, #15
 800f616:	d103      	bne.n	800f620 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800f618:	2301      	movs	r3, #1
 800f61a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800f61e:	e002      	b.n	800f626 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800f620:	2300      	movs	r3, #0
 800f622:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800f626:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d109      	bne.n	800f642 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800f62e:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800f632:	461a      	mov	r2, r3
 800f634:	2100      	movs	r1, #0
 800f636:	68f8      	ldr	r0, [r7, #12]
 800f638:	f7fc f980 	bl	800b93c <VL53L0X_GetLimitCheckEnable>
 800f63c:	4603      	mov	r3, r0
 800f63e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800f642:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f646:	2b00      	cmp	r3, #0
 800f648:	d02e      	beq.n	800f6a8 <VL53L0X_get_pal_range_status+0x128>
 800f64a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d12a      	bne.n	800f6a8 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800f652:	f107 0310 	add.w	r3, r7, #16
 800f656:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800f65a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f65c:	68f8      	ldr	r0, [r7, #12]
 800f65e:	f7ff fd43 	bl	800f0e8 <VL53L0X_calc_sigma_estimate>
 800f662:	4603      	mov	r3, r0
 800f664:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800f668:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d103      	bne.n	800f678 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800f670:	693b      	ldr	r3, [r7, #16]
 800f672:	b29a      	uxth	r2, r3
 800f674:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f676:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800f678:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d113      	bne.n	800f6a8 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800f680:	f107 0320 	add.w	r3, r7, #32
 800f684:	461a      	mov	r2, r3
 800f686:	2100      	movs	r1, #0
 800f688:	68f8      	ldr	r0, [r7, #12]
 800f68a:	f7fc f9dd 	bl	800ba48 <VL53L0X_GetLimitCheckValue>
 800f68e:	4603      	mov	r3, r0
 800f690:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800f694:	6a3b      	ldr	r3, [r7, #32]
 800f696:	2b00      	cmp	r3, #0
 800f698:	d006      	beq.n	800f6a8 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800f69a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f69c:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800f69e:	429a      	cmp	r2, r3
 800f6a0:	d902      	bls.n	800f6a8 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800f6a2:	2301      	movs	r3, #1
 800f6a4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800f6a8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d109      	bne.n	800f6c4 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800f6b0:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800f6b4:	461a      	mov	r2, r3
 800f6b6:	2102      	movs	r1, #2
 800f6b8:	68f8      	ldr	r0, [r7, #12]
 800f6ba:	f7fc f93f 	bl	800b93c <VL53L0X_GetLimitCheckEnable>
 800f6be:	4603      	mov	r3, r0
 800f6c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800f6c4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d044      	beq.n	800f756 <VL53L0X_get_pal_range_status+0x1d6>
 800f6cc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d140      	bne.n	800f756 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800f6d4:	f107 031c 	add.w	r3, r7, #28
 800f6d8:	461a      	mov	r2, r3
 800f6da:	2102      	movs	r1, #2
 800f6dc:	68f8      	ldr	r0, [r7, #12]
 800f6de:	f7fc f9b3 	bl	800ba48 <VL53L0X_GetLimitCheckValue>
 800f6e2:	4603      	mov	r3, r0
 800f6e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800f6e8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d107      	bne.n	800f700 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800f6f0:	2201      	movs	r2, #1
 800f6f2:	21ff      	movs	r1, #255	; 0xff
 800f6f4:	68f8      	ldr	r0, [r7, #12]
 800f6f6:	f000 f9bb 	bl	800fa70 <VL53L0X_WrByte>
 800f6fa:	4603      	mov	r3, r0
 800f6fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800f700:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f704:	2b00      	cmp	r3, #0
 800f706:	d109      	bne.n	800f71c <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800f708:	f107 0316 	add.w	r3, r7, #22
 800f70c:	461a      	mov	r2, r3
 800f70e:	21b6      	movs	r1, #182	; 0xb6
 800f710:	68f8      	ldr	r0, [r7, #12]
 800f712:	f000 fa59 	bl	800fbc8 <VL53L0X_RdWord>
 800f716:	4603      	mov	r3, r0
 800f718:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800f71c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f720:	2b00      	cmp	r3, #0
 800f722:	d107      	bne.n	800f734 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800f724:	2200      	movs	r2, #0
 800f726:	21ff      	movs	r1, #255	; 0xff
 800f728:	68f8      	ldr	r0, [r7, #12]
 800f72a:	f000 f9a1 	bl	800fa70 <VL53L0X_WrByte>
 800f72e:	4603      	mov	r3, r0
 800f730:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800f734:	8afb      	ldrh	r3, [r7, #22]
 800f736:	025b      	lsls	r3, r3, #9
 800f738:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f73e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800f742:	69fb      	ldr	r3, [r7, #28]
 800f744:	2b00      	cmp	r3, #0
 800f746:	d006      	beq.n	800f756 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800f748:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800f74a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f74c:	429a      	cmp	r2, r3
 800f74e:	d902      	bls.n	800f756 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800f750:	2301      	movs	r3, #1
 800f752:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800f756:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d109      	bne.n	800f772 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800f75e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f762:	461a      	mov	r2, r3
 800f764:	2103      	movs	r1, #3
 800f766:	68f8      	ldr	r0, [r7, #12]
 800f768:	f7fc f8e8 	bl	800b93c <VL53L0X_GetLimitCheckEnable>
 800f76c:	4603      	mov	r3, r0
 800f76e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800f772:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f776:	2b00      	cmp	r3, #0
 800f778:	d023      	beq.n	800f7c2 <VL53L0X_get_pal_range_status+0x242>
 800f77a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d11f      	bne.n	800f7c2 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800f782:	893b      	ldrh	r3, [r7, #8]
 800f784:	2b00      	cmp	r3, #0
 800f786:	d102      	bne.n	800f78e <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800f788:	2300      	movs	r3, #0
 800f78a:	637b      	str	r3, [r7, #52]	; 0x34
 800f78c:	e005      	b.n	800f79a <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	021a      	lsls	r2, r3, #8
 800f792:	893b      	ldrh	r3, [r7, #8]
 800f794:	fbb2 f3f3 	udiv	r3, r2, r3
 800f798:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800f79a:	f107 0318 	add.w	r3, r7, #24
 800f79e:	461a      	mov	r2, r3
 800f7a0:	2103      	movs	r1, #3
 800f7a2:	68f8      	ldr	r0, [r7, #12]
 800f7a4:	f7fc f950 	bl	800ba48 <VL53L0X_GetLimitCheckValue>
 800f7a8:	4603      	mov	r3, r0
 800f7aa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800f7ae:	69bb      	ldr	r3, [r7, #24]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d006      	beq.n	800f7c2 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800f7b4:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800f7b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f7b8:	429a      	cmp	r2, r3
 800f7ba:	d202      	bcs.n	800f7c2 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800f7bc:	2301      	movs	r3, #1
 800f7be:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800f7c2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d14a      	bne.n	800f860 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800f7ca:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800f7ce:	2b01      	cmp	r3, #1
 800f7d0:	d103      	bne.n	800f7da <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800f7d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f7d4:	22ff      	movs	r2, #255	; 0xff
 800f7d6:	701a      	strb	r2, [r3, #0]
 800f7d8:	e042      	b.n	800f860 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800f7da:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800f7de:	2b01      	cmp	r3, #1
 800f7e0:	d007      	beq.n	800f7f2 <VL53L0X_get_pal_range_status+0x272>
 800f7e2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800f7e6:	2b02      	cmp	r3, #2
 800f7e8:	d003      	beq.n	800f7f2 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800f7ea:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800f7ee:	2b03      	cmp	r3, #3
 800f7f0:	d103      	bne.n	800f7fa <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800f7f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f7f4:	2205      	movs	r2, #5
 800f7f6:	701a      	strb	r2, [r3, #0]
 800f7f8:	e032      	b.n	800f860 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800f7fa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800f7fe:	2b06      	cmp	r3, #6
 800f800:	d003      	beq.n	800f80a <VL53L0X_get_pal_range_status+0x28a>
 800f802:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800f806:	2b09      	cmp	r3, #9
 800f808:	d103      	bne.n	800f812 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800f80a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f80c:	2204      	movs	r2, #4
 800f80e:	701a      	strb	r2, [r3, #0]
 800f810:	e026      	b.n	800f860 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800f812:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800f816:	2b08      	cmp	r3, #8
 800f818:	d007      	beq.n	800f82a <VL53L0X_get_pal_range_status+0x2aa>
 800f81a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800f81e:	2b0a      	cmp	r3, #10
 800f820:	d003      	beq.n	800f82a <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800f822:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800f826:	2b01      	cmp	r3, #1
 800f828:	d103      	bne.n	800f832 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800f82a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f82c:	2203      	movs	r2, #3
 800f82e:	701a      	strb	r2, [r3, #0]
 800f830:	e016      	b.n	800f860 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800f832:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800f836:	2b04      	cmp	r3, #4
 800f838:	d003      	beq.n	800f842 <VL53L0X_get_pal_range_status+0x2c2>
 800f83a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f83e:	2b01      	cmp	r3, #1
 800f840:	d103      	bne.n	800f84a <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800f842:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f844:	2202      	movs	r2, #2
 800f846:	701a      	strb	r2, [r3, #0]
 800f848:	e00a      	b.n	800f860 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800f84a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800f84e:	2b01      	cmp	r3, #1
 800f850:	d103      	bne.n	800f85a <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800f852:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f854:	2201      	movs	r2, #1
 800f856:	701a      	strb	r2, [r3, #0]
 800f858:	e002      	b.n	800f860 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800f85a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f85c:	2200      	movs	r2, #0
 800f85e:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800f860:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f862:	781b      	ldrb	r3, [r3, #0]
 800f864:	2b00      	cmp	r3, #0
 800f866:	d102      	bne.n	800f86e <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800f868:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f86a:	2200      	movs	r2, #0
 800f86c:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800f86e:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800f872:	461a      	mov	r2, r3
 800f874:	2101      	movs	r1, #1
 800f876:	68f8      	ldr	r0, [r7, #12]
 800f878:	f7fc f860 	bl	800b93c <VL53L0X_GetLimitCheckEnable>
 800f87c:	4603      	mov	r3, r0
 800f87e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800f882:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f886:	2b00      	cmp	r3, #0
 800f888:	d14f      	bne.n	800f92a <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800f88a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d003      	beq.n	800f89a <VL53L0X_get_pal_range_status+0x31a>
 800f892:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800f896:	2b01      	cmp	r3, #1
 800f898:	d103      	bne.n	800f8a2 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800f89a:	2301      	movs	r3, #1
 800f89c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f8a0:	e002      	b.n	800f8a8 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800f8a2:	2300      	movs	r3, #0
 800f8a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800f8ae:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800f8b2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800f8b6:	2b04      	cmp	r3, #4
 800f8b8:	d003      	beq.n	800f8c2 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800f8ba:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d103      	bne.n	800f8ca <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800f8c2:	2301      	movs	r3, #1
 800f8c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f8c8:	e002      	b.n	800f8d0 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800f8ca:	2300      	movs	r3, #0
 800f8cc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800f8d6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800f8da:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d003      	beq.n	800f8ea <VL53L0X_get_pal_range_status+0x36a>
 800f8e2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800f8e6:	2b01      	cmp	r3, #1
 800f8e8:	d103      	bne.n	800f8f2 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800f8ea:	2301      	movs	r3, #1
 800f8ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f8f0:	e002      	b.n	800f8f8 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800f8f2:	2300      	movs	r3, #0
 800f8f4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800f8fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800f902:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f906:	2b00      	cmp	r3, #0
 800f908:	d003      	beq.n	800f912 <VL53L0X_get_pal_range_status+0x392>
 800f90a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f90e:	2b01      	cmp	r3, #1
 800f910:	d103      	bne.n	800f91a <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800f912:	2301      	movs	r3, #1
 800f914:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f918:	e002      	b.n	800f920 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800f91a:	2300      	movs	r3, #0
 800f91c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800f926:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800f92a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800f92e:	4618      	mov	r0, r3
 800f930:	3740      	adds	r7, #64	; 0x40
 800f932:	46bd      	mov	sp, r7
 800f934:	bd80      	pop	{r7, pc}

0800f936 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800f936:	b580      	push	{r7, lr}
 800f938:	b088      	sub	sp, #32
 800f93a:	af02      	add	r7, sp, #8
 800f93c:	60f8      	str	r0, [r7, #12]
 800f93e:	60b9      	str	r1, [r7, #8]
 800f940:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	330a      	adds	r3, #10
 800f946:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800f954:	b299      	uxth	r1, r3
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	b29a      	uxth	r2, r3
 800f95a:	697b      	ldr	r3, [r7, #20]
 800f95c:	9300      	str	r3, [sp, #0]
 800f95e:	4613      	mov	r3, r2
 800f960:	68ba      	ldr	r2, [r7, #8]
 800f962:	f7f4 fbdb 	bl	800411c <HAL_I2C_Master_Transmit>
 800f966:	4603      	mov	r3, r0
 800f968:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800f96a:	693b      	ldr	r3, [r7, #16]
}
 800f96c:	4618      	mov	r0, r3
 800f96e:	3718      	adds	r7, #24
 800f970:	46bd      	mov	sp, r7
 800f972:	bd80      	pop	{r7, pc}

0800f974 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800f974:	b580      	push	{r7, lr}
 800f976:	b088      	sub	sp, #32
 800f978:	af02      	add	r7, sp, #8
 800f97a:	60f8      	str	r0, [r7, #12]
 800f97c:	60b9      	str	r1, [r7, #8]
 800f97e:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	330a      	adds	r3, #10
 800f984:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800f992:	f043 0301 	orr.w	r3, r3, #1
 800f996:	b2db      	uxtb	r3, r3
 800f998:	b299      	uxth	r1, r3
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	b29a      	uxth	r2, r3
 800f99e:	697b      	ldr	r3, [r7, #20]
 800f9a0:	9300      	str	r3, [sp, #0]
 800f9a2:	4613      	mov	r3, r2
 800f9a4:	68ba      	ldr	r2, [r7, #8]
 800f9a6:	f7f4 fcad 	bl	8004304 <HAL_I2C_Master_Receive>
 800f9aa:	4603      	mov	r3, r0
 800f9ac:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800f9ae:	693b      	ldr	r3, [r7, #16]
}
 800f9b0:	4618      	mov	r0, r3
 800f9b2:	3718      	adds	r7, #24
 800f9b4:	46bd      	mov	sp, r7
 800f9b6:	bd80      	pop	{r7, pc}

0800f9b8 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800f9b8:	b580      	push	{r7, lr}
 800f9ba:	b086      	sub	sp, #24
 800f9bc:	af00      	add	r7, sp, #0
 800f9be:	60f8      	str	r0, [r7, #12]
 800f9c0:	607a      	str	r2, [r7, #4]
 800f9c2:	603b      	str	r3, [r7, #0]
 800f9c4:	460b      	mov	r3, r1
 800f9c6:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f9c8:	2300      	movs	r3, #0
 800f9ca:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800f9cc:	683b      	ldr	r3, [r7, #0]
 800f9ce:	2b3f      	cmp	r3, #63	; 0x3f
 800f9d0:	d902      	bls.n	800f9d8 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800f9d2:	f06f 0303 	mvn.w	r3, #3
 800f9d6:	e016      	b.n	800fa06 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800f9d8:	4a0d      	ldr	r2, [pc, #52]	; (800fa10 <VL53L0X_WriteMulti+0x58>)
 800f9da:	7afb      	ldrb	r3, [r7, #11]
 800f9dc:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800f9de:	683a      	ldr	r2, [r7, #0]
 800f9e0:	6879      	ldr	r1, [r7, #4]
 800f9e2:	480c      	ldr	r0, [pc, #48]	; (800fa14 <VL53L0X_WriteMulti+0x5c>)
 800f9e4:	f000 f99e 	bl	800fd24 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800f9e8:	683b      	ldr	r3, [r7, #0]
 800f9ea:	3301      	adds	r3, #1
 800f9ec:	461a      	mov	r2, r3
 800f9ee:	4908      	ldr	r1, [pc, #32]	; (800fa10 <VL53L0X_WriteMulti+0x58>)
 800f9f0:	68f8      	ldr	r0, [r7, #12]
 800f9f2:	f7ff ffa0 	bl	800f936 <_I2CWrite>
 800f9f6:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800f9f8:	693b      	ldr	r3, [r7, #16]
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d001      	beq.n	800fa02 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800f9fe:	23ec      	movs	r3, #236	; 0xec
 800fa00:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800fa02:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fa06:	4618      	mov	r0, r3
 800fa08:	3718      	adds	r7, #24
 800fa0a:	46bd      	mov	sp, r7
 800fa0c:	bd80      	pop	{r7, pc}
 800fa0e:	bf00      	nop
 800fa10:	2000b4a0 	.word	0x2000b4a0
 800fa14:	2000b4a1 	.word	0x2000b4a1

0800fa18 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800fa18:	b580      	push	{r7, lr}
 800fa1a:	b086      	sub	sp, #24
 800fa1c:	af00      	add	r7, sp, #0
 800fa1e:	60f8      	str	r0, [r7, #12]
 800fa20:	607a      	str	r2, [r7, #4]
 800fa22:	603b      	str	r3, [r7, #0]
 800fa24:	460b      	mov	r3, r1
 800fa26:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800fa28:	2300      	movs	r3, #0
 800fa2a:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800fa2c:	f107 030b 	add.w	r3, r7, #11
 800fa30:	2201      	movs	r2, #1
 800fa32:	4619      	mov	r1, r3
 800fa34:	68f8      	ldr	r0, [r7, #12]
 800fa36:	f7ff ff7e 	bl	800f936 <_I2CWrite>
 800fa3a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800fa3c:	693b      	ldr	r3, [r7, #16]
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d002      	beq.n	800fa48 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800fa42:	23ec      	movs	r3, #236	; 0xec
 800fa44:	75fb      	strb	r3, [r7, #23]
        goto done;
 800fa46:	e00c      	b.n	800fa62 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800fa48:	683a      	ldr	r2, [r7, #0]
 800fa4a:	6879      	ldr	r1, [r7, #4]
 800fa4c:	68f8      	ldr	r0, [r7, #12]
 800fa4e:	f7ff ff91 	bl	800f974 <_I2CRead>
 800fa52:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800fa54:	693b      	ldr	r3, [r7, #16]
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d002      	beq.n	800fa60 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800fa5a:	23ec      	movs	r3, #236	; 0xec
 800fa5c:	75fb      	strb	r3, [r7, #23]
 800fa5e:	e000      	b.n	800fa62 <VL53L0X_ReadMulti+0x4a>
    }
done:
 800fa60:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800fa62:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fa66:	4618      	mov	r0, r3
 800fa68:	3718      	adds	r7, #24
 800fa6a:	46bd      	mov	sp, r7
 800fa6c:	bd80      	pop	{r7, pc}
	...

0800fa70 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800fa70:	b580      	push	{r7, lr}
 800fa72:	b084      	sub	sp, #16
 800fa74:	af00      	add	r7, sp, #0
 800fa76:	6078      	str	r0, [r7, #4]
 800fa78:	460b      	mov	r3, r1
 800fa7a:	70fb      	strb	r3, [r7, #3]
 800fa7c:	4613      	mov	r3, r2
 800fa7e:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800fa80:	2300      	movs	r3, #0
 800fa82:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800fa84:	4a0b      	ldr	r2, [pc, #44]	; (800fab4 <VL53L0X_WrByte+0x44>)
 800fa86:	78fb      	ldrb	r3, [r7, #3]
 800fa88:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800fa8a:	4a0a      	ldr	r2, [pc, #40]	; (800fab4 <VL53L0X_WrByte+0x44>)
 800fa8c:	78bb      	ldrb	r3, [r7, #2]
 800fa8e:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800fa90:	2202      	movs	r2, #2
 800fa92:	4908      	ldr	r1, [pc, #32]	; (800fab4 <VL53L0X_WrByte+0x44>)
 800fa94:	6878      	ldr	r0, [r7, #4]
 800fa96:	f7ff ff4e 	bl	800f936 <_I2CWrite>
 800fa9a:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800fa9c:	68bb      	ldr	r3, [r7, #8]
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d001      	beq.n	800faa6 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800faa2:	23ec      	movs	r3, #236	; 0xec
 800faa4:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800faa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800faaa:	4618      	mov	r0, r3
 800faac:	3710      	adds	r7, #16
 800faae:	46bd      	mov	sp, r7
 800fab0:	bd80      	pop	{r7, pc}
 800fab2:	bf00      	nop
 800fab4:	2000b4a0 	.word	0x2000b4a0

0800fab8 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800fab8:	b580      	push	{r7, lr}
 800faba:	b084      	sub	sp, #16
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	6078      	str	r0, [r7, #4]
 800fac0:	460b      	mov	r3, r1
 800fac2:	70fb      	strb	r3, [r7, #3]
 800fac4:	4613      	mov	r3, r2
 800fac6:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800fac8:	2300      	movs	r3, #0
 800faca:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800facc:	4a0e      	ldr	r2, [pc, #56]	; (800fb08 <VL53L0X_WrWord+0x50>)
 800face:	78fb      	ldrb	r3, [r7, #3]
 800fad0:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800fad2:	883b      	ldrh	r3, [r7, #0]
 800fad4:	0a1b      	lsrs	r3, r3, #8
 800fad6:	b29b      	uxth	r3, r3
 800fad8:	b2da      	uxtb	r2, r3
 800fada:	4b0b      	ldr	r3, [pc, #44]	; (800fb08 <VL53L0X_WrWord+0x50>)
 800fadc:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800fade:	883b      	ldrh	r3, [r7, #0]
 800fae0:	b2da      	uxtb	r2, r3
 800fae2:	4b09      	ldr	r3, [pc, #36]	; (800fb08 <VL53L0X_WrWord+0x50>)
 800fae4:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800fae6:	2203      	movs	r2, #3
 800fae8:	4907      	ldr	r1, [pc, #28]	; (800fb08 <VL53L0X_WrWord+0x50>)
 800faea:	6878      	ldr	r0, [r7, #4]
 800faec:	f7ff ff23 	bl	800f936 <_I2CWrite>
 800faf0:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800faf2:	68bb      	ldr	r3, [r7, #8]
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d001      	beq.n	800fafc <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800faf8:	23ec      	movs	r3, #236	; 0xec
 800fafa:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800fafc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fb00:	4618      	mov	r0, r3
 800fb02:	3710      	adds	r7, #16
 800fb04:	46bd      	mov	sp, r7
 800fb06:	bd80      	pop	{r7, pc}
 800fb08:	2000b4a0 	.word	0x2000b4a0

0800fb0c <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800fb0c:	b580      	push	{r7, lr}
 800fb0e:	b084      	sub	sp, #16
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	6078      	str	r0, [r7, #4]
 800fb14:	4608      	mov	r0, r1
 800fb16:	4611      	mov	r1, r2
 800fb18:	461a      	mov	r2, r3
 800fb1a:	4603      	mov	r3, r0
 800fb1c:	70fb      	strb	r3, [r7, #3]
 800fb1e:	460b      	mov	r3, r1
 800fb20:	70bb      	strb	r3, [r7, #2]
 800fb22:	4613      	mov	r3, r2
 800fb24:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800fb26:	2300      	movs	r3, #0
 800fb28:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800fb2a:	f107 020e 	add.w	r2, r7, #14
 800fb2e:	78fb      	ldrb	r3, [r7, #3]
 800fb30:	4619      	mov	r1, r3
 800fb32:	6878      	ldr	r0, [r7, #4]
 800fb34:	f000 f81e 	bl	800fb74 <VL53L0X_RdByte>
 800fb38:	4603      	mov	r3, r0
 800fb3a:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800fb3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d110      	bne.n	800fb66 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800fb44:	7bba      	ldrb	r2, [r7, #14]
 800fb46:	78bb      	ldrb	r3, [r7, #2]
 800fb48:	4013      	ands	r3, r2
 800fb4a:	b2da      	uxtb	r2, r3
 800fb4c:	787b      	ldrb	r3, [r7, #1]
 800fb4e:	4313      	orrs	r3, r2
 800fb50:	b2db      	uxtb	r3, r3
 800fb52:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800fb54:	7bba      	ldrb	r2, [r7, #14]
 800fb56:	78fb      	ldrb	r3, [r7, #3]
 800fb58:	4619      	mov	r1, r3
 800fb5a:	6878      	ldr	r0, [r7, #4]
 800fb5c:	f7ff ff88 	bl	800fa70 <VL53L0X_WrByte>
 800fb60:	4603      	mov	r3, r0
 800fb62:	73fb      	strb	r3, [r7, #15]
 800fb64:	e000      	b.n	800fb68 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800fb66:	bf00      	nop
done:
    return Status;
 800fb68:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	3710      	adds	r7, #16
 800fb70:	46bd      	mov	sp, r7
 800fb72:	bd80      	pop	{r7, pc}

0800fb74 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800fb74:	b580      	push	{r7, lr}
 800fb76:	b086      	sub	sp, #24
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	60f8      	str	r0, [r7, #12]
 800fb7c:	460b      	mov	r3, r1
 800fb7e:	607a      	str	r2, [r7, #4]
 800fb80:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800fb82:	2300      	movs	r3, #0
 800fb84:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800fb86:	f107 030b 	add.w	r3, r7, #11
 800fb8a:	2201      	movs	r2, #1
 800fb8c:	4619      	mov	r1, r3
 800fb8e:	68f8      	ldr	r0, [r7, #12]
 800fb90:	f7ff fed1 	bl	800f936 <_I2CWrite>
 800fb94:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800fb96:	693b      	ldr	r3, [r7, #16]
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d002      	beq.n	800fba2 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800fb9c:	23ec      	movs	r3, #236	; 0xec
 800fb9e:	75fb      	strb	r3, [r7, #23]
        goto done;
 800fba0:	e00c      	b.n	800fbbc <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800fba2:	2201      	movs	r2, #1
 800fba4:	6879      	ldr	r1, [r7, #4]
 800fba6:	68f8      	ldr	r0, [r7, #12]
 800fba8:	f7ff fee4 	bl	800f974 <_I2CRead>
 800fbac:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800fbae:	693b      	ldr	r3, [r7, #16]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d002      	beq.n	800fbba <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800fbb4:	23ec      	movs	r3, #236	; 0xec
 800fbb6:	75fb      	strb	r3, [r7, #23]
 800fbb8:	e000      	b.n	800fbbc <VL53L0X_RdByte+0x48>
    }
done:
 800fbba:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800fbbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fbc0:	4618      	mov	r0, r3
 800fbc2:	3718      	adds	r7, #24
 800fbc4:	46bd      	mov	sp, r7
 800fbc6:	bd80      	pop	{r7, pc}

0800fbc8 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800fbc8:	b580      	push	{r7, lr}
 800fbca:	b086      	sub	sp, #24
 800fbcc:	af00      	add	r7, sp, #0
 800fbce:	60f8      	str	r0, [r7, #12]
 800fbd0:	460b      	mov	r3, r1
 800fbd2:	607a      	str	r2, [r7, #4]
 800fbd4:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800fbd6:	2300      	movs	r3, #0
 800fbd8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800fbda:	f107 030b 	add.w	r3, r7, #11
 800fbde:	2201      	movs	r2, #1
 800fbe0:	4619      	mov	r1, r3
 800fbe2:	68f8      	ldr	r0, [r7, #12]
 800fbe4:	f7ff fea7 	bl	800f936 <_I2CWrite>
 800fbe8:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800fbea:	693b      	ldr	r3, [r7, #16]
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d002      	beq.n	800fbf6 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800fbf0:	23ec      	movs	r3, #236	; 0xec
 800fbf2:	75fb      	strb	r3, [r7, #23]
        goto done;
 800fbf4:	e017      	b.n	800fc26 <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800fbf6:	2202      	movs	r2, #2
 800fbf8:	490e      	ldr	r1, [pc, #56]	; (800fc34 <VL53L0X_RdWord+0x6c>)
 800fbfa:	68f8      	ldr	r0, [r7, #12]
 800fbfc:	f7ff feba 	bl	800f974 <_I2CRead>
 800fc00:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800fc02:	693b      	ldr	r3, [r7, #16]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d002      	beq.n	800fc0e <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800fc08:	23ec      	movs	r3, #236	; 0xec
 800fc0a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800fc0c:	e00b      	b.n	800fc26 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800fc0e:	4b09      	ldr	r3, [pc, #36]	; (800fc34 <VL53L0X_RdWord+0x6c>)
 800fc10:	781b      	ldrb	r3, [r3, #0]
 800fc12:	b29b      	uxth	r3, r3
 800fc14:	021b      	lsls	r3, r3, #8
 800fc16:	b29a      	uxth	r2, r3
 800fc18:	4b06      	ldr	r3, [pc, #24]	; (800fc34 <VL53L0X_RdWord+0x6c>)
 800fc1a:	785b      	ldrb	r3, [r3, #1]
 800fc1c:	b29b      	uxth	r3, r3
 800fc1e:	4413      	add	r3, r2
 800fc20:	b29a      	uxth	r2, r3
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800fc26:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fc2a:	4618      	mov	r0, r3
 800fc2c:	3718      	adds	r7, #24
 800fc2e:	46bd      	mov	sp, r7
 800fc30:	bd80      	pop	{r7, pc}
 800fc32:	bf00      	nop
 800fc34:	2000b4a0 	.word	0x2000b4a0

0800fc38 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800fc38:	b580      	push	{r7, lr}
 800fc3a:	b086      	sub	sp, #24
 800fc3c:	af00      	add	r7, sp, #0
 800fc3e:	60f8      	str	r0, [r7, #12]
 800fc40:	460b      	mov	r3, r1
 800fc42:	607a      	str	r2, [r7, #4]
 800fc44:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800fc46:	2300      	movs	r3, #0
 800fc48:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800fc4a:	f107 030b 	add.w	r3, r7, #11
 800fc4e:	2201      	movs	r2, #1
 800fc50:	4619      	mov	r1, r3
 800fc52:	68f8      	ldr	r0, [r7, #12]
 800fc54:	f7ff fe6f 	bl	800f936 <_I2CWrite>
 800fc58:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800fc5a:	693b      	ldr	r3, [r7, #16]
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d002      	beq.n	800fc66 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800fc60:	23ec      	movs	r3, #236	; 0xec
 800fc62:	75fb      	strb	r3, [r7, #23]
        goto done;
 800fc64:	e01b      	b.n	800fc9e <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800fc66:	2204      	movs	r2, #4
 800fc68:	4910      	ldr	r1, [pc, #64]	; (800fcac <VL53L0X_RdDWord+0x74>)
 800fc6a:	68f8      	ldr	r0, [r7, #12]
 800fc6c:	f7ff fe82 	bl	800f974 <_I2CRead>
 800fc70:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800fc72:	693b      	ldr	r3, [r7, #16]
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d002      	beq.n	800fc7e <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800fc78:	23ec      	movs	r3, #236	; 0xec
 800fc7a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800fc7c:	e00f      	b.n	800fc9e <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800fc7e:	4b0b      	ldr	r3, [pc, #44]	; (800fcac <VL53L0X_RdDWord+0x74>)
 800fc80:	781b      	ldrb	r3, [r3, #0]
 800fc82:	061a      	lsls	r2, r3, #24
 800fc84:	4b09      	ldr	r3, [pc, #36]	; (800fcac <VL53L0X_RdDWord+0x74>)
 800fc86:	785b      	ldrb	r3, [r3, #1]
 800fc88:	041b      	lsls	r3, r3, #16
 800fc8a:	441a      	add	r2, r3
 800fc8c:	4b07      	ldr	r3, [pc, #28]	; (800fcac <VL53L0X_RdDWord+0x74>)
 800fc8e:	789b      	ldrb	r3, [r3, #2]
 800fc90:	021b      	lsls	r3, r3, #8
 800fc92:	4413      	add	r3, r2
 800fc94:	4a05      	ldr	r2, [pc, #20]	; (800fcac <VL53L0X_RdDWord+0x74>)
 800fc96:	78d2      	ldrb	r2, [r2, #3]
 800fc98:	441a      	add	r2, r3
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800fc9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fca2:	4618      	mov	r0, r3
 800fca4:	3718      	adds	r7, #24
 800fca6:	46bd      	mov	sp, r7
 800fca8:	bd80      	pop	{r7, pc}
 800fcaa:	bf00      	nop
 800fcac:	2000b4a0 	.word	0x2000b4a0

0800fcb0 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800fcb0:	b580      	push	{r7, lr}
 800fcb2:	b084      	sub	sp, #16
 800fcb4:	af00      	add	r7, sp, #0
 800fcb6:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800fcb8:	2300      	movs	r3, #0
 800fcba:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800fcbc:	2002      	movs	r0, #2
 800fcbe:	f7f3 fb27 	bl	8003310 <HAL_Delay>
    return status;
 800fcc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	3710      	adds	r7, #16
 800fcca:	46bd      	mov	sp, r7
 800fccc:	bd80      	pop	{r7, pc}
	...

0800fcd0 <__errno>:
 800fcd0:	4b01      	ldr	r3, [pc, #4]	; (800fcd8 <__errno+0x8>)
 800fcd2:	6818      	ldr	r0, [r3, #0]
 800fcd4:	4770      	bx	lr
 800fcd6:	bf00      	nop
 800fcd8:	20000438 	.word	0x20000438

0800fcdc <__libc_init_array>:
 800fcdc:	b570      	push	{r4, r5, r6, lr}
 800fcde:	4d0d      	ldr	r5, [pc, #52]	; (800fd14 <__libc_init_array+0x38>)
 800fce0:	4c0d      	ldr	r4, [pc, #52]	; (800fd18 <__libc_init_array+0x3c>)
 800fce2:	1b64      	subs	r4, r4, r5
 800fce4:	10a4      	asrs	r4, r4, #2
 800fce6:	2600      	movs	r6, #0
 800fce8:	42a6      	cmp	r6, r4
 800fcea:	d109      	bne.n	800fd00 <__libc_init_array+0x24>
 800fcec:	4d0b      	ldr	r5, [pc, #44]	; (800fd1c <__libc_init_array+0x40>)
 800fcee:	4c0c      	ldr	r4, [pc, #48]	; (800fd20 <__libc_init_array+0x44>)
 800fcf0:	f006 f874 	bl	8015ddc <_init>
 800fcf4:	1b64      	subs	r4, r4, r5
 800fcf6:	10a4      	asrs	r4, r4, #2
 800fcf8:	2600      	movs	r6, #0
 800fcfa:	42a6      	cmp	r6, r4
 800fcfc:	d105      	bne.n	800fd0a <__libc_init_array+0x2e>
 800fcfe:	bd70      	pop	{r4, r5, r6, pc}
 800fd00:	f855 3b04 	ldr.w	r3, [r5], #4
 800fd04:	4798      	blx	r3
 800fd06:	3601      	adds	r6, #1
 800fd08:	e7ee      	b.n	800fce8 <__libc_init_array+0xc>
 800fd0a:	f855 3b04 	ldr.w	r3, [r5], #4
 800fd0e:	4798      	blx	r3
 800fd10:	3601      	adds	r6, #1
 800fd12:	e7f2      	b.n	800fcfa <__libc_init_array+0x1e>
 800fd14:	08016a08 	.word	0x08016a08
 800fd18:	08016a08 	.word	0x08016a08
 800fd1c:	08016a08 	.word	0x08016a08
 800fd20:	08016a0c 	.word	0x08016a0c

0800fd24 <memcpy>:
 800fd24:	440a      	add	r2, r1
 800fd26:	4291      	cmp	r1, r2
 800fd28:	f100 33ff 	add.w	r3, r0, #4294967295
 800fd2c:	d100      	bne.n	800fd30 <memcpy+0xc>
 800fd2e:	4770      	bx	lr
 800fd30:	b510      	push	{r4, lr}
 800fd32:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fd36:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fd3a:	4291      	cmp	r1, r2
 800fd3c:	d1f9      	bne.n	800fd32 <memcpy+0xe>
 800fd3e:	bd10      	pop	{r4, pc}

0800fd40 <memset>:
 800fd40:	4402      	add	r2, r0
 800fd42:	4603      	mov	r3, r0
 800fd44:	4293      	cmp	r3, r2
 800fd46:	d100      	bne.n	800fd4a <memset+0xa>
 800fd48:	4770      	bx	lr
 800fd4a:	f803 1b01 	strb.w	r1, [r3], #1
 800fd4e:	e7f9      	b.n	800fd44 <memset+0x4>

0800fd50 <__cvt>:
 800fd50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fd54:	ec55 4b10 	vmov	r4, r5, d0
 800fd58:	2d00      	cmp	r5, #0
 800fd5a:	460e      	mov	r6, r1
 800fd5c:	4619      	mov	r1, r3
 800fd5e:	462b      	mov	r3, r5
 800fd60:	bfbb      	ittet	lt
 800fd62:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800fd66:	461d      	movlt	r5, r3
 800fd68:	2300      	movge	r3, #0
 800fd6a:	232d      	movlt	r3, #45	; 0x2d
 800fd6c:	700b      	strb	r3, [r1, #0]
 800fd6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fd70:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800fd74:	4691      	mov	r9, r2
 800fd76:	f023 0820 	bic.w	r8, r3, #32
 800fd7a:	bfbc      	itt	lt
 800fd7c:	4622      	movlt	r2, r4
 800fd7e:	4614      	movlt	r4, r2
 800fd80:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fd84:	d005      	beq.n	800fd92 <__cvt+0x42>
 800fd86:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800fd8a:	d100      	bne.n	800fd8e <__cvt+0x3e>
 800fd8c:	3601      	adds	r6, #1
 800fd8e:	2102      	movs	r1, #2
 800fd90:	e000      	b.n	800fd94 <__cvt+0x44>
 800fd92:	2103      	movs	r1, #3
 800fd94:	ab03      	add	r3, sp, #12
 800fd96:	9301      	str	r3, [sp, #4]
 800fd98:	ab02      	add	r3, sp, #8
 800fd9a:	9300      	str	r3, [sp, #0]
 800fd9c:	ec45 4b10 	vmov	d0, r4, r5
 800fda0:	4653      	mov	r3, sl
 800fda2:	4632      	mov	r2, r6
 800fda4:	f001 fec4 	bl	8011b30 <_dtoa_r>
 800fda8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800fdac:	4607      	mov	r7, r0
 800fdae:	d102      	bne.n	800fdb6 <__cvt+0x66>
 800fdb0:	f019 0f01 	tst.w	r9, #1
 800fdb4:	d022      	beq.n	800fdfc <__cvt+0xac>
 800fdb6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fdba:	eb07 0906 	add.w	r9, r7, r6
 800fdbe:	d110      	bne.n	800fde2 <__cvt+0x92>
 800fdc0:	783b      	ldrb	r3, [r7, #0]
 800fdc2:	2b30      	cmp	r3, #48	; 0x30
 800fdc4:	d10a      	bne.n	800fddc <__cvt+0x8c>
 800fdc6:	2200      	movs	r2, #0
 800fdc8:	2300      	movs	r3, #0
 800fdca:	4620      	mov	r0, r4
 800fdcc:	4629      	mov	r1, r5
 800fdce:	f7f0 feab 	bl	8000b28 <__aeabi_dcmpeq>
 800fdd2:	b918      	cbnz	r0, 800fddc <__cvt+0x8c>
 800fdd4:	f1c6 0601 	rsb	r6, r6, #1
 800fdd8:	f8ca 6000 	str.w	r6, [sl]
 800fddc:	f8da 3000 	ldr.w	r3, [sl]
 800fde0:	4499      	add	r9, r3
 800fde2:	2200      	movs	r2, #0
 800fde4:	2300      	movs	r3, #0
 800fde6:	4620      	mov	r0, r4
 800fde8:	4629      	mov	r1, r5
 800fdea:	f7f0 fe9d 	bl	8000b28 <__aeabi_dcmpeq>
 800fdee:	b108      	cbz	r0, 800fdf4 <__cvt+0xa4>
 800fdf0:	f8cd 900c 	str.w	r9, [sp, #12]
 800fdf4:	2230      	movs	r2, #48	; 0x30
 800fdf6:	9b03      	ldr	r3, [sp, #12]
 800fdf8:	454b      	cmp	r3, r9
 800fdfa:	d307      	bcc.n	800fe0c <__cvt+0xbc>
 800fdfc:	9b03      	ldr	r3, [sp, #12]
 800fdfe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fe00:	1bdb      	subs	r3, r3, r7
 800fe02:	4638      	mov	r0, r7
 800fe04:	6013      	str	r3, [r2, #0]
 800fe06:	b004      	add	sp, #16
 800fe08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe0c:	1c59      	adds	r1, r3, #1
 800fe0e:	9103      	str	r1, [sp, #12]
 800fe10:	701a      	strb	r2, [r3, #0]
 800fe12:	e7f0      	b.n	800fdf6 <__cvt+0xa6>

0800fe14 <__exponent>:
 800fe14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fe16:	4603      	mov	r3, r0
 800fe18:	2900      	cmp	r1, #0
 800fe1a:	bfb8      	it	lt
 800fe1c:	4249      	neglt	r1, r1
 800fe1e:	f803 2b02 	strb.w	r2, [r3], #2
 800fe22:	bfb4      	ite	lt
 800fe24:	222d      	movlt	r2, #45	; 0x2d
 800fe26:	222b      	movge	r2, #43	; 0x2b
 800fe28:	2909      	cmp	r1, #9
 800fe2a:	7042      	strb	r2, [r0, #1]
 800fe2c:	dd2a      	ble.n	800fe84 <__exponent+0x70>
 800fe2e:	f10d 0407 	add.w	r4, sp, #7
 800fe32:	46a4      	mov	ip, r4
 800fe34:	270a      	movs	r7, #10
 800fe36:	46a6      	mov	lr, r4
 800fe38:	460a      	mov	r2, r1
 800fe3a:	fb91 f6f7 	sdiv	r6, r1, r7
 800fe3e:	fb07 1516 	mls	r5, r7, r6, r1
 800fe42:	3530      	adds	r5, #48	; 0x30
 800fe44:	2a63      	cmp	r2, #99	; 0x63
 800fe46:	f104 34ff 	add.w	r4, r4, #4294967295
 800fe4a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800fe4e:	4631      	mov	r1, r6
 800fe50:	dcf1      	bgt.n	800fe36 <__exponent+0x22>
 800fe52:	3130      	adds	r1, #48	; 0x30
 800fe54:	f1ae 0502 	sub.w	r5, lr, #2
 800fe58:	f804 1c01 	strb.w	r1, [r4, #-1]
 800fe5c:	1c44      	adds	r4, r0, #1
 800fe5e:	4629      	mov	r1, r5
 800fe60:	4561      	cmp	r1, ip
 800fe62:	d30a      	bcc.n	800fe7a <__exponent+0x66>
 800fe64:	f10d 0209 	add.w	r2, sp, #9
 800fe68:	eba2 020e 	sub.w	r2, r2, lr
 800fe6c:	4565      	cmp	r5, ip
 800fe6e:	bf88      	it	hi
 800fe70:	2200      	movhi	r2, #0
 800fe72:	4413      	add	r3, r2
 800fe74:	1a18      	subs	r0, r3, r0
 800fe76:	b003      	add	sp, #12
 800fe78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fe7e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800fe82:	e7ed      	b.n	800fe60 <__exponent+0x4c>
 800fe84:	2330      	movs	r3, #48	; 0x30
 800fe86:	3130      	adds	r1, #48	; 0x30
 800fe88:	7083      	strb	r3, [r0, #2]
 800fe8a:	70c1      	strb	r1, [r0, #3]
 800fe8c:	1d03      	adds	r3, r0, #4
 800fe8e:	e7f1      	b.n	800fe74 <__exponent+0x60>

0800fe90 <_printf_float>:
 800fe90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe94:	ed2d 8b02 	vpush	{d8}
 800fe98:	b08d      	sub	sp, #52	; 0x34
 800fe9a:	460c      	mov	r4, r1
 800fe9c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800fea0:	4616      	mov	r6, r2
 800fea2:	461f      	mov	r7, r3
 800fea4:	4605      	mov	r5, r0
 800fea6:	f002 ffb3 	bl	8012e10 <_localeconv_r>
 800feaa:	f8d0 a000 	ldr.w	sl, [r0]
 800feae:	4650      	mov	r0, sl
 800feb0:	f7f0 f9b8 	bl	8000224 <strlen>
 800feb4:	2300      	movs	r3, #0
 800feb6:	930a      	str	r3, [sp, #40]	; 0x28
 800feb8:	6823      	ldr	r3, [r4, #0]
 800feba:	9305      	str	r3, [sp, #20]
 800febc:	f8d8 3000 	ldr.w	r3, [r8]
 800fec0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800fec4:	3307      	adds	r3, #7
 800fec6:	f023 0307 	bic.w	r3, r3, #7
 800feca:	f103 0208 	add.w	r2, r3, #8
 800fece:	f8c8 2000 	str.w	r2, [r8]
 800fed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fed6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800feda:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800fede:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800fee2:	9307      	str	r3, [sp, #28]
 800fee4:	f8cd 8018 	str.w	r8, [sp, #24]
 800fee8:	ee08 0a10 	vmov	s16, r0
 800feec:	4b9f      	ldr	r3, [pc, #636]	; (801016c <_printf_float+0x2dc>)
 800feee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fef2:	f04f 32ff 	mov.w	r2, #4294967295
 800fef6:	f7f0 fe49 	bl	8000b8c <__aeabi_dcmpun>
 800fefa:	bb88      	cbnz	r0, 800ff60 <_printf_float+0xd0>
 800fefc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ff00:	4b9a      	ldr	r3, [pc, #616]	; (801016c <_printf_float+0x2dc>)
 800ff02:	f04f 32ff 	mov.w	r2, #4294967295
 800ff06:	f7f0 fe23 	bl	8000b50 <__aeabi_dcmple>
 800ff0a:	bb48      	cbnz	r0, 800ff60 <_printf_float+0xd0>
 800ff0c:	2200      	movs	r2, #0
 800ff0e:	2300      	movs	r3, #0
 800ff10:	4640      	mov	r0, r8
 800ff12:	4649      	mov	r1, r9
 800ff14:	f7f0 fe12 	bl	8000b3c <__aeabi_dcmplt>
 800ff18:	b110      	cbz	r0, 800ff20 <_printf_float+0x90>
 800ff1a:	232d      	movs	r3, #45	; 0x2d
 800ff1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ff20:	4b93      	ldr	r3, [pc, #588]	; (8010170 <_printf_float+0x2e0>)
 800ff22:	4894      	ldr	r0, [pc, #592]	; (8010174 <_printf_float+0x2e4>)
 800ff24:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ff28:	bf94      	ite	ls
 800ff2a:	4698      	movls	r8, r3
 800ff2c:	4680      	movhi	r8, r0
 800ff2e:	2303      	movs	r3, #3
 800ff30:	6123      	str	r3, [r4, #16]
 800ff32:	9b05      	ldr	r3, [sp, #20]
 800ff34:	f023 0204 	bic.w	r2, r3, #4
 800ff38:	6022      	str	r2, [r4, #0]
 800ff3a:	f04f 0900 	mov.w	r9, #0
 800ff3e:	9700      	str	r7, [sp, #0]
 800ff40:	4633      	mov	r3, r6
 800ff42:	aa0b      	add	r2, sp, #44	; 0x2c
 800ff44:	4621      	mov	r1, r4
 800ff46:	4628      	mov	r0, r5
 800ff48:	f000 f9d8 	bl	80102fc <_printf_common>
 800ff4c:	3001      	adds	r0, #1
 800ff4e:	f040 8090 	bne.w	8010072 <_printf_float+0x1e2>
 800ff52:	f04f 30ff 	mov.w	r0, #4294967295
 800ff56:	b00d      	add	sp, #52	; 0x34
 800ff58:	ecbd 8b02 	vpop	{d8}
 800ff5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff60:	4642      	mov	r2, r8
 800ff62:	464b      	mov	r3, r9
 800ff64:	4640      	mov	r0, r8
 800ff66:	4649      	mov	r1, r9
 800ff68:	f7f0 fe10 	bl	8000b8c <__aeabi_dcmpun>
 800ff6c:	b140      	cbz	r0, 800ff80 <_printf_float+0xf0>
 800ff6e:	464b      	mov	r3, r9
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	bfbc      	itt	lt
 800ff74:	232d      	movlt	r3, #45	; 0x2d
 800ff76:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ff7a:	487f      	ldr	r0, [pc, #508]	; (8010178 <_printf_float+0x2e8>)
 800ff7c:	4b7f      	ldr	r3, [pc, #508]	; (801017c <_printf_float+0x2ec>)
 800ff7e:	e7d1      	b.n	800ff24 <_printf_float+0x94>
 800ff80:	6863      	ldr	r3, [r4, #4]
 800ff82:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ff86:	9206      	str	r2, [sp, #24]
 800ff88:	1c5a      	adds	r2, r3, #1
 800ff8a:	d13f      	bne.n	801000c <_printf_float+0x17c>
 800ff8c:	2306      	movs	r3, #6
 800ff8e:	6063      	str	r3, [r4, #4]
 800ff90:	9b05      	ldr	r3, [sp, #20]
 800ff92:	6861      	ldr	r1, [r4, #4]
 800ff94:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ff98:	2300      	movs	r3, #0
 800ff9a:	9303      	str	r3, [sp, #12]
 800ff9c:	ab0a      	add	r3, sp, #40	; 0x28
 800ff9e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ffa2:	ab09      	add	r3, sp, #36	; 0x24
 800ffa4:	ec49 8b10 	vmov	d0, r8, r9
 800ffa8:	9300      	str	r3, [sp, #0]
 800ffaa:	6022      	str	r2, [r4, #0]
 800ffac:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ffb0:	4628      	mov	r0, r5
 800ffb2:	f7ff fecd 	bl	800fd50 <__cvt>
 800ffb6:	9b06      	ldr	r3, [sp, #24]
 800ffb8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ffba:	2b47      	cmp	r3, #71	; 0x47
 800ffbc:	4680      	mov	r8, r0
 800ffbe:	d108      	bne.n	800ffd2 <_printf_float+0x142>
 800ffc0:	1cc8      	adds	r0, r1, #3
 800ffc2:	db02      	blt.n	800ffca <_printf_float+0x13a>
 800ffc4:	6863      	ldr	r3, [r4, #4]
 800ffc6:	4299      	cmp	r1, r3
 800ffc8:	dd41      	ble.n	801004e <_printf_float+0x1be>
 800ffca:	f1ab 0b02 	sub.w	fp, fp, #2
 800ffce:	fa5f fb8b 	uxtb.w	fp, fp
 800ffd2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ffd6:	d820      	bhi.n	801001a <_printf_float+0x18a>
 800ffd8:	3901      	subs	r1, #1
 800ffda:	465a      	mov	r2, fp
 800ffdc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ffe0:	9109      	str	r1, [sp, #36]	; 0x24
 800ffe2:	f7ff ff17 	bl	800fe14 <__exponent>
 800ffe6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ffe8:	1813      	adds	r3, r2, r0
 800ffea:	2a01      	cmp	r2, #1
 800ffec:	4681      	mov	r9, r0
 800ffee:	6123      	str	r3, [r4, #16]
 800fff0:	dc02      	bgt.n	800fff8 <_printf_float+0x168>
 800fff2:	6822      	ldr	r2, [r4, #0]
 800fff4:	07d2      	lsls	r2, r2, #31
 800fff6:	d501      	bpl.n	800fffc <_printf_float+0x16c>
 800fff8:	3301      	adds	r3, #1
 800fffa:	6123      	str	r3, [r4, #16]
 800fffc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010000:	2b00      	cmp	r3, #0
 8010002:	d09c      	beq.n	800ff3e <_printf_float+0xae>
 8010004:	232d      	movs	r3, #45	; 0x2d
 8010006:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801000a:	e798      	b.n	800ff3e <_printf_float+0xae>
 801000c:	9a06      	ldr	r2, [sp, #24]
 801000e:	2a47      	cmp	r2, #71	; 0x47
 8010010:	d1be      	bne.n	800ff90 <_printf_float+0x100>
 8010012:	2b00      	cmp	r3, #0
 8010014:	d1bc      	bne.n	800ff90 <_printf_float+0x100>
 8010016:	2301      	movs	r3, #1
 8010018:	e7b9      	b.n	800ff8e <_printf_float+0xfe>
 801001a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801001e:	d118      	bne.n	8010052 <_printf_float+0x1c2>
 8010020:	2900      	cmp	r1, #0
 8010022:	6863      	ldr	r3, [r4, #4]
 8010024:	dd0b      	ble.n	801003e <_printf_float+0x1ae>
 8010026:	6121      	str	r1, [r4, #16]
 8010028:	b913      	cbnz	r3, 8010030 <_printf_float+0x1a0>
 801002a:	6822      	ldr	r2, [r4, #0]
 801002c:	07d0      	lsls	r0, r2, #31
 801002e:	d502      	bpl.n	8010036 <_printf_float+0x1a6>
 8010030:	3301      	adds	r3, #1
 8010032:	440b      	add	r3, r1
 8010034:	6123      	str	r3, [r4, #16]
 8010036:	65a1      	str	r1, [r4, #88]	; 0x58
 8010038:	f04f 0900 	mov.w	r9, #0
 801003c:	e7de      	b.n	800fffc <_printf_float+0x16c>
 801003e:	b913      	cbnz	r3, 8010046 <_printf_float+0x1b6>
 8010040:	6822      	ldr	r2, [r4, #0]
 8010042:	07d2      	lsls	r2, r2, #31
 8010044:	d501      	bpl.n	801004a <_printf_float+0x1ba>
 8010046:	3302      	adds	r3, #2
 8010048:	e7f4      	b.n	8010034 <_printf_float+0x1a4>
 801004a:	2301      	movs	r3, #1
 801004c:	e7f2      	b.n	8010034 <_printf_float+0x1a4>
 801004e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8010052:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010054:	4299      	cmp	r1, r3
 8010056:	db05      	blt.n	8010064 <_printf_float+0x1d4>
 8010058:	6823      	ldr	r3, [r4, #0]
 801005a:	6121      	str	r1, [r4, #16]
 801005c:	07d8      	lsls	r0, r3, #31
 801005e:	d5ea      	bpl.n	8010036 <_printf_float+0x1a6>
 8010060:	1c4b      	adds	r3, r1, #1
 8010062:	e7e7      	b.n	8010034 <_printf_float+0x1a4>
 8010064:	2900      	cmp	r1, #0
 8010066:	bfd4      	ite	le
 8010068:	f1c1 0202 	rsble	r2, r1, #2
 801006c:	2201      	movgt	r2, #1
 801006e:	4413      	add	r3, r2
 8010070:	e7e0      	b.n	8010034 <_printf_float+0x1a4>
 8010072:	6823      	ldr	r3, [r4, #0]
 8010074:	055a      	lsls	r2, r3, #21
 8010076:	d407      	bmi.n	8010088 <_printf_float+0x1f8>
 8010078:	6923      	ldr	r3, [r4, #16]
 801007a:	4642      	mov	r2, r8
 801007c:	4631      	mov	r1, r6
 801007e:	4628      	mov	r0, r5
 8010080:	47b8      	blx	r7
 8010082:	3001      	adds	r0, #1
 8010084:	d12c      	bne.n	80100e0 <_printf_float+0x250>
 8010086:	e764      	b.n	800ff52 <_printf_float+0xc2>
 8010088:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801008c:	f240 80e0 	bls.w	8010250 <_printf_float+0x3c0>
 8010090:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010094:	2200      	movs	r2, #0
 8010096:	2300      	movs	r3, #0
 8010098:	f7f0 fd46 	bl	8000b28 <__aeabi_dcmpeq>
 801009c:	2800      	cmp	r0, #0
 801009e:	d034      	beq.n	801010a <_printf_float+0x27a>
 80100a0:	4a37      	ldr	r2, [pc, #220]	; (8010180 <_printf_float+0x2f0>)
 80100a2:	2301      	movs	r3, #1
 80100a4:	4631      	mov	r1, r6
 80100a6:	4628      	mov	r0, r5
 80100a8:	47b8      	blx	r7
 80100aa:	3001      	adds	r0, #1
 80100ac:	f43f af51 	beq.w	800ff52 <_printf_float+0xc2>
 80100b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80100b4:	429a      	cmp	r2, r3
 80100b6:	db02      	blt.n	80100be <_printf_float+0x22e>
 80100b8:	6823      	ldr	r3, [r4, #0]
 80100ba:	07d8      	lsls	r0, r3, #31
 80100bc:	d510      	bpl.n	80100e0 <_printf_float+0x250>
 80100be:	ee18 3a10 	vmov	r3, s16
 80100c2:	4652      	mov	r2, sl
 80100c4:	4631      	mov	r1, r6
 80100c6:	4628      	mov	r0, r5
 80100c8:	47b8      	blx	r7
 80100ca:	3001      	adds	r0, #1
 80100cc:	f43f af41 	beq.w	800ff52 <_printf_float+0xc2>
 80100d0:	f04f 0800 	mov.w	r8, #0
 80100d4:	f104 091a 	add.w	r9, r4, #26
 80100d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80100da:	3b01      	subs	r3, #1
 80100dc:	4543      	cmp	r3, r8
 80100de:	dc09      	bgt.n	80100f4 <_printf_float+0x264>
 80100e0:	6823      	ldr	r3, [r4, #0]
 80100e2:	079b      	lsls	r3, r3, #30
 80100e4:	f100 8105 	bmi.w	80102f2 <_printf_float+0x462>
 80100e8:	68e0      	ldr	r0, [r4, #12]
 80100ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80100ec:	4298      	cmp	r0, r3
 80100ee:	bfb8      	it	lt
 80100f0:	4618      	movlt	r0, r3
 80100f2:	e730      	b.n	800ff56 <_printf_float+0xc6>
 80100f4:	2301      	movs	r3, #1
 80100f6:	464a      	mov	r2, r9
 80100f8:	4631      	mov	r1, r6
 80100fa:	4628      	mov	r0, r5
 80100fc:	47b8      	blx	r7
 80100fe:	3001      	adds	r0, #1
 8010100:	f43f af27 	beq.w	800ff52 <_printf_float+0xc2>
 8010104:	f108 0801 	add.w	r8, r8, #1
 8010108:	e7e6      	b.n	80100d8 <_printf_float+0x248>
 801010a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801010c:	2b00      	cmp	r3, #0
 801010e:	dc39      	bgt.n	8010184 <_printf_float+0x2f4>
 8010110:	4a1b      	ldr	r2, [pc, #108]	; (8010180 <_printf_float+0x2f0>)
 8010112:	2301      	movs	r3, #1
 8010114:	4631      	mov	r1, r6
 8010116:	4628      	mov	r0, r5
 8010118:	47b8      	blx	r7
 801011a:	3001      	adds	r0, #1
 801011c:	f43f af19 	beq.w	800ff52 <_printf_float+0xc2>
 8010120:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010124:	4313      	orrs	r3, r2
 8010126:	d102      	bne.n	801012e <_printf_float+0x29e>
 8010128:	6823      	ldr	r3, [r4, #0]
 801012a:	07d9      	lsls	r1, r3, #31
 801012c:	d5d8      	bpl.n	80100e0 <_printf_float+0x250>
 801012e:	ee18 3a10 	vmov	r3, s16
 8010132:	4652      	mov	r2, sl
 8010134:	4631      	mov	r1, r6
 8010136:	4628      	mov	r0, r5
 8010138:	47b8      	blx	r7
 801013a:	3001      	adds	r0, #1
 801013c:	f43f af09 	beq.w	800ff52 <_printf_float+0xc2>
 8010140:	f04f 0900 	mov.w	r9, #0
 8010144:	f104 0a1a 	add.w	sl, r4, #26
 8010148:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801014a:	425b      	negs	r3, r3
 801014c:	454b      	cmp	r3, r9
 801014e:	dc01      	bgt.n	8010154 <_printf_float+0x2c4>
 8010150:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010152:	e792      	b.n	801007a <_printf_float+0x1ea>
 8010154:	2301      	movs	r3, #1
 8010156:	4652      	mov	r2, sl
 8010158:	4631      	mov	r1, r6
 801015a:	4628      	mov	r0, r5
 801015c:	47b8      	blx	r7
 801015e:	3001      	adds	r0, #1
 8010160:	f43f aef7 	beq.w	800ff52 <_printf_float+0xc2>
 8010164:	f109 0901 	add.w	r9, r9, #1
 8010168:	e7ee      	b.n	8010148 <_printf_float+0x2b8>
 801016a:	bf00      	nop
 801016c:	7fefffff 	.word	0x7fefffff
 8010170:	080164c0 	.word	0x080164c0
 8010174:	080164c4 	.word	0x080164c4
 8010178:	080164cc 	.word	0x080164cc
 801017c:	080164c8 	.word	0x080164c8
 8010180:	08016959 	.word	0x08016959
 8010184:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010186:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010188:	429a      	cmp	r2, r3
 801018a:	bfa8      	it	ge
 801018c:	461a      	movge	r2, r3
 801018e:	2a00      	cmp	r2, #0
 8010190:	4691      	mov	r9, r2
 8010192:	dc37      	bgt.n	8010204 <_printf_float+0x374>
 8010194:	f04f 0b00 	mov.w	fp, #0
 8010198:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801019c:	f104 021a 	add.w	r2, r4, #26
 80101a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80101a2:	9305      	str	r3, [sp, #20]
 80101a4:	eba3 0309 	sub.w	r3, r3, r9
 80101a8:	455b      	cmp	r3, fp
 80101aa:	dc33      	bgt.n	8010214 <_printf_float+0x384>
 80101ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80101b0:	429a      	cmp	r2, r3
 80101b2:	db3b      	blt.n	801022c <_printf_float+0x39c>
 80101b4:	6823      	ldr	r3, [r4, #0]
 80101b6:	07da      	lsls	r2, r3, #31
 80101b8:	d438      	bmi.n	801022c <_printf_float+0x39c>
 80101ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80101bc:	9a05      	ldr	r2, [sp, #20]
 80101be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80101c0:	1a9a      	subs	r2, r3, r2
 80101c2:	eba3 0901 	sub.w	r9, r3, r1
 80101c6:	4591      	cmp	r9, r2
 80101c8:	bfa8      	it	ge
 80101ca:	4691      	movge	r9, r2
 80101cc:	f1b9 0f00 	cmp.w	r9, #0
 80101d0:	dc35      	bgt.n	801023e <_printf_float+0x3ae>
 80101d2:	f04f 0800 	mov.w	r8, #0
 80101d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80101da:	f104 0a1a 	add.w	sl, r4, #26
 80101de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80101e2:	1a9b      	subs	r3, r3, r2
 80101e4:	eba3 0309 	sub.w	r3, r3, r9
 80101e8:	4543      	cmp	r3, r8
 80101ea:	f77f af79 	ble.w	80100e0 <_printf_float+0x250>
 80101ee:	2301      	movs	r3, #1
 80101f0:	4652      	mov	r2, sl
 80101f2:	4631      	mov	r1, r6
 80101f4:	4628      	mov	r0, r5
 80101f6:	47b8      	blx	r7
 80101f8:	3001      	adds	r0, #1
 80101fa:	f43f aeaa 	beq.w	800ff52 <_printf_float+0xc2>
 80101fe:	f108 0801 	add.w	r8, r8, #1
 8010202:	e7ec      	b.n	80101de <_printf_float+0x34e>
 8010204:	4613      	mov	r3, r2
 8010206:	4631      	mov	r1, r6
 8010208:	4642      	mov	r2, r8
 801020a:	4628      	mov	r0, r5
 801020c:	47b8      	blx	r7
 801020e:	3001      	adds	r0, #1
 8010210:	d1c0      	bne.n	8010194 <_printf_float+0x304>
 8010212:	e69e      	b.n	800ff52 <_printf_float+0xc2>
 8010214:	2301      	movs	r3, #1
 8010216:	4631      	mov	r1, r6
 8010218:	4628      	mov	r0, r5
 801021a:	9205      	str	r2, [sp, #20]
 801021c:	47b8      	blx	r7
 801021e:	3001      	adds	r0, #1
 8010220:	f43f ae97 	beq.w	800ff52 <_printf_float+0xc2>
 8010224:	9a05      	ldr	r2, [sp, #20]
 8010226:	f10b 0b01 	add.w	fp, fp, #1
 801022a:	e7b9      	b.n	80101a0 <_printf_float+0x310>
 801022c:	ee18 3a10 	vmov	r3, s16
 8010230:	4652      	mov	r2, sl
 8010232:	4631      	mov	r1, r6
 8010234:	4628      	mov	r0, r5
 8010236:	47b8      	blx	r7
 8010238:	3001      	adds	r0, #1
 801023a:	d1be      	bne.n	80101ba <_printf_float+0x32a>
 801023c:	e689      	b.n	800ff52 <_printf_float+0xc2>
 801023e:	9a05      	ldr	r2, [sp, #20]
 8010240:	464b      	mov	r3, r9
 8010242:	4442      	add	r2, r8
 8010244:	4631      	mov	r1, r6
 8010246:	4628      	mov	r0, r5
 8010248:	47b8      	blx	r7
 801024a:	3001      	adds	r0, #1
 801024c:	d1c1      	bne.n	80101d2 <_printf_float+0x342>
 801024e:	e680      	b.n	800ff52 <_printf_float+0xc2>
 8010250:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010252:	2a01      	cmp	r2, #1
 8010254:	dc01      	bgt.n	801025a <_printf_float+0x3ca>
 8010256:	07db      	lsls	r3, r3, #31
 8010258:	d538      	bpl.n	80102cc <_printf_float+0x43c>
 801025a:	2301      	movs	r3, #1
 801025c:	4642      	mov	r2, r8
 801025e:	4631      	mov	r1, r6
 8010260:	4628      	mov	r0, r5
 8010262:	47b8      	blx	r7
 8010264:	3001      	adds	r0, #1
 8010266:	f43f ae74 	beq.w	800ff52 <_printf_float+0xc2>
 801026a:	ee18 3a10 	vmov	r3, s16
 801026e:	4652      	mov	r2, sl
 8010270:	4631      	mov	r1, r6
 8010272:	4628      	mov	r0, r5
 8010274:	47b8      	blx	r7
 8010276:	3001      	adds	r0, #1
 8010278:	f43f ae6b 	beq.w	800ff52 <_printf_float+0xc2>
 801027c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010280:	2200      	movs	r2, #0
 8010282:	2300      	movs	r3, #0
 8010284:	f7f0 fc50 	bl	8000b28 <__aeabi_dcmpeq>
 8010288:	b9d8      	cbnz	r0, 80102c2 <_printf_float+0x432>
 801028a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801028c:	f108 0201 	add.w	r2, r8, #1
 8010290:	3b01      	subs	r3, #1
 8010292:	4631      	mov	r1, r6
 8010294:	4628      	mov	r0, r5
 8010296:	47b8      	blx	r7
 8010298:	3001      	adds	r0, #1
 801029a:	d10e      	bne.n	80102ba <_printf_float+0x42a>
 801029c:	e659      	b.n	800ff52 <_printf_float+0xc2>
 801029e:	2301      	movs	r3, #1
 80102a0:	4652      	mov	r2, sl
 80102a2:	4631      	mov	r1, r6
 80102a4:	4628      	mov	r0, r5
 80102a6:	47b8      	blx	r7
 80102a8:	3001      	adds	r0, #1
 80102aa:	f43f ae52 	beq.w	800ff52 <_printf_float+0xc2>
 80102ae:	f108 0801 	add.w	r8, r8, #1
 80102b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80102b4:	3b01      	subs	r3, #1
 80102b6:	4543      	cmp	r3, r8
 80102b8:	dcf1      	bgt.n	801029e <_printf_float+0x40e>
 80102ba:	464b      	mov	r3, r9
 80102bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80102c0:	e6dc      	b.n	801007c <_printf_float+0x1ec>
 80102c2:	f04f 0800 	mov.w	r8, #0
 80102c6:	f104 0a1a 	add.w	sl, r4, #26
 80102ca:	e7f2      	b.n	80102b2 <_printf_float+0x422>
 80102cc:	2301      	movs	r3, #1
 80102ce:	4642      	mov	r2, r8
 80102d0:	e7df      	b.n	8010292 <_printf_float+0x402>
 80102d2:	2301      	movs	r3, #1
 80102d4:	464a      	mov	r2, r9
 80102d6:	4631      	mov	r1, r6
 80102d8:	4628      	mov	r0, r5
 80102da:	47b8      	blx	r7
 80102dc:	3001      	adds	r0, #1
 80102de:	f43f ae38 	beq.w	800ff52 <_printf_float+0xc2>
 80102e2:	f108 0801 	add.w	r8, r8, #1
 80102e6:	68e3      	ldr	r3, [r4, #12]
 80102e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80102ea:	1a5b      	subs	r3, r3, r1
 80102ec:	4543      	cmp	r3, r8
 80102ee:	dcf0      	bgt.n	80102d2 <_printf_float+0x442>
 80102f0:	e6fa      	b.n	80100e8 <_printf_float+0x258>
 80102f2:	f04f 0800 	mov.w	r8, #0
 80102f6:	f104 0919 	add.w	r9, r4, #25
 80102fa:	e7f4      	b.n	80102e6 <_printf_float+0x456>

080102fc <_printf_common>:
 80102fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010300:	4616      	mov	r6, r2
 8010302:	4699      	mov	r9, r3
 8010304:	688a      	ldr	r2, [r1, #8]
 8010306:	690b      	ldr	r3, [r1, #16]
 8010308:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801030c:	4293      	cmp	r3, r2
 801030e:	bfb8      	it	lt
 8010310:	4613      	movlt	r3, r2
 8010312:	6033      	str	r3, [r6, #0]
 8010314:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010318:	4607      	mov	r7, r0
 801031a:	460c      	mov	r4, r1
 801031c:	b10a      	cbz	r2, 8010322 <_printf_common+0x26>
 801031e:	3301      	adds	r3, #1
 8010320:	6033      	str	r3, [r6, #0]
 8010322:	6823      	ldr	r3, [r4, #0]
 8010324:	0699      	lsls	r1, r3, #26
 8010326:	bf42      	ittt	mi
 8010328:	6833      	ldrmi	r3, [r6, #0]
 801032a:	3302      	addmi	r3, #2
 801032c:	6033      	strmi	r3, [r6, #0]
 801032e:	6825      	ldr	r5, [r4, #0]
 8010330:	f015 0506 	ands.w	r5, r5, #6
 8010334:	d106      	bne.n	8010344 <_printf_common+0x48>
 8010336:	f104 0a19 	add.w	sl, r4, #25
 801033a:	68e3      	ldr	r3, [r4, #12]
 801033c:	6832      	ldr	r2, [r6, #0]
 801033e:	1a9b      	subs	r3, r3, r2
 8010340:	42ab      	cmp	r3, r5
 8010342:	dc26      	bgt.n	8010392 <_printf_common+0x96>
 8010344:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010348:	1e13      	subs	r3, r2, #0
 801034a:	6822      	ldr	r2, [r4, #0]
 801034c:	bf18      	it	ne
 801034e:	2301      	movne	r3, #1
 8010350:	0692      	lsls	r2, r2, #26
 8010352:	d42b      	bmi.n	80103ac <_printf_common+0xb0>
 8010354:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010358:	4649      	mov	r1, r9
 801035a:	4638      	mov	r0, r7
 801035c:	47c0      	blx	r8
 801035e:	3001      	adds	r0, #1
 8010360:	d01e      	beq.n	80103a0 <_printf_common+0xa4>
 8010362:	6823      	ldr	r3, [r4, #0]
 8010364:	68e5      	ldr	r5, [r4, #12]
 8010366:	6832      	ldr	r2, [r6, #0]
 8010368:	f003 0306 	and.w	r3, r3, #6
 801036c:	2b04      	cmp	r3, #4
 801036e:	bf08      	it	eq
 8010370:	1aad      	subeq	r5, r5, r2
 8010372:	68a3      	ldr	r3, [r4, #8]
 8010374:	6922      	ldr	r2, [r4, #16]
 8010376:	bf0c      	ite	eq
 8010378:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801037c:	2500      	movne	r5, #0
 801037e:	4293      	cmp	r3, r2
 8010380:	bfc4      	itt	gt
 8010382:	1a9b      	subgt	r3, r3, r2
 8010384:	18ed      	addgt	r5, r5, r3
 8010386:	2600      	movs	r6, #0
 8010388:	341a      	adds	r4, #26
 801038a:	42b5      	cmp	r5, r6
 801038c:	d11a      	bne.n	80103c4 <_printf_common+0xc8>
 801038e:	2000      	movs	r0, #0
 8010390:	e008      	b.n	80103a4 <_printf_common+0xa8>
 8010392:	2301      	movs	r3, #1
 8010394:	4652      	mov	r2, sl
 8010396:	4649      	mov	r1, r9
 8010398:	4638      	mov	r0, r7
 801039a:	47c0      	blx	r8
 801039c:	3001      	adds	r0, #1
 801039e:	d103      	bne.n	80103a8 <_printf_common+0xac>
 80103a0:	f04f 30ff 	mov.w	r0, #4294967295
 80103a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103a8:	3501      	adds	r5, #1
 80103aa:	e7c6      	b.n	801033a <_printf_common+0x3e>
 80103ac:	18e1      	adds	r1, r4, r3
 80103ae:	1c5a      	adds	r2, r3, #1
 80103b0:	2030      	movs	r0, #48	; 0x30
 80103b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80103b6:	4422      	add	r2, r4
 80103b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80103bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80103c0:	3302      	adds	r3, #2
 80103c2:	e7c7      	b.n	8010354 <_printf_common+0x58>
 80103c4:	2301      	movs	r3, #1
 80103c6:	4622      	mov	r2, r4
 80103c8:	4649      	mov	r1, r9
 80103ca:	4638      	mov	r0, r7
 80103cc:	47c0      	blx	r8
 80103ce:	3001      	adds	r0, #1
 80103d0:	d0e6      	beq.n	80103a0 <_printf_common+0xa4>
 80103d2:	3601      	adds	r6, #1
 80103d4:	e7d9      	b.n	801038a <_printf_common+0x8e>
	...

080103d8 <_printf_i>:
 80103d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80103dc:	7e0f      	ldrb	r7, [r1, #24]
 80103de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80103e0:	2f78      	cmp	r7, #120	; 0x78
 80103e2:	4691      	mov	r9, r2
 80103e4:	4680      	mov	r8, r0
 80103e6:	460c      	mov	r4, r1
 80103e8:	469a      	mov	sl, r3
 80103ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80103ee:	d807      	bhi.n	8010400 <_printf_i+0x28>
 80103f0:	2f62      	cmp	r7, #98	; 0x62
 80103f2:	d80a      	bhi.n	801040a <_printf_i+0x32>
 80103f4:	2f00      	cmp	r7, #0
 80103f6:	f000 80d8 	beq.w	80105aa <_printf_i+0x1d2>
 80103fa:	2f58      	cmp	r7, #88	; 0x58
 80103fc:	f000 80a3 	beq.w	8010546 <_printf_i+0x16e>
 8010400:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010404:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010408:	e03a      	b.n	8010480 <_printf_i+0xa8>
 801040a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801040e:	2b15      	cmp	r3, #21
 8010410:	d8f6      	bhi.n	8010400 <_printf_i+0x28>
 8010412:	a101      	add	r1, pc, #4	; (adr r1, 8010418 <_printf_i+0x40>)
 8010414:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010418:	08010471 	.word	0x08010471
 801041c:	08010485 	.word	0x08010485
 8010420:	08010401 	.word	0x08010401
 8010424:	08010401 	.word	0x08010401
 8010428:	08010401 	.word	0x08010401
 801042c:	08010401 	.word	0x08010401
 8010430:	08010485 	.word	0x08010485
 8010434:	08010401 	.word	0x08010401
 8010438:	08010401 	.word	0x08010401
 801043c:	08010401 	.word	0x08010401
 8010440:	08010401 	.word	0x08010401
 8010444:	08010591 	.word	0x08010591
 8010448:	080104b5 	.word	0x080104b5
 801044c:	08010573 	.word	0x08010573
 8010450:	08010401 	.word	0x08010401
 8010454:	08010401 	.word	0x08010401
 8010458:	080105b3 	.word	0x080105b3
 801045c:	08010401 	.word	0x08010401
 8010460:	080104b5 	.word	0x080104b5
 8010464:	08010401 	.word	0x08010401
 8010468:	08010401 	.word	0x08010401
 801046c:	0801057b 	.word	0x0801057b
 8010470:	682b      	ldr	r3, [r5, #0]
 8010472:	1d1a      	adds	r2, r3, #4
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	602a      	str	r2, [r5, #0]
 8010478:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801047c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010480:	2301      	movs	r3, #1
 8010482:	e0a3      	b.n	80105cc <_printf_i+0x1f4>
 8010484:	6820      	ldr	r0, [r4, #0]
 8010486:	6829      	ldr	r1, [r5, #0]
 8010488:	0606      	lsls	r6, r0, #24
 801048a:	f101 0304 	add.w	r3, r1, #4
 801048e:	d50a      	bpl.n	80104a6 <_printf_i+0xce>
 8010490:	680e      	ldr	r6, [r1, #0]
 8010492:	602b      	str	r3, [r5, #0]
 8010494:	2e00      	cmp	r6, #0
 8010496:	da03      	bge.n	80104a0 <_printf_i+0xc8>
 8010498:	232d      	movs	r3, #45	; 0x2d
 801049a:	4276      	negs	r6, r6
 801049c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80104a0:	485e      	ldr	r0, [pc, #376]	; (801061c <_printf_i+0x244>)
 80104a2:	230a      	movs	r3, #10
 80104a4:	e019      	b.n	80104da <_printf_i+0x102>
 80104a6:	680e      	ldr	r6, [r1, #0]
 80104a8:	602b      	str	r3, [r5, #0]
 80104aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80104ae:	bf18      	it	ne
 80104b0:	b236      	sxthne	r6, r6
 80104b2:	e7ef      	b.n	8010494 <_printf_i+0xbc>
 80104b4:	682b      	ldr	r3, [r5, #0]
 80104b6:	6820      	ldr	r0, [r4, #0]
 80104b8:	1d19      	adds	r1, r3, #4
 80104ba:	6029      	str	r1, [r5, #0]
 80104bc:	0601      	lsls	r1, r0, #24
 80104be:	d501      	bpl.n	80104c4 <_printf_i+0xec>
 80104c0:	681e      	ldr	r6, [r3, #0]
 80104c2:	e002      	b.n	80104ca <_printf_i+0xf2>
 80104c4:	0646      	lsls	r6, r0, #25
 80104c6:	d5fb      	bpl.n	80104c0 <_printf_i+0xe8>
 80104c8:	881e      	ldrh	r6, [r3, #0]
 80104ca:	4854      	ldr	r0, [pc, #336]	; (801061c <_printf_i+0x244>)
 80104cc:	2f6f      	cmp	r7, #111	; 0x6f
 80104ce:	bf0c      	ite	eq
 80104d0:	2308      	moveq	r3, #8
 80104d2:	230a      	movne	r3, #10
 80104d4:	2100      	movs	r1, #0
 80104d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80104da:	6865      	ldr	r5, [r4, #4]
 80104dc:	60a5      	str	r5, [r4, #8]
 80104de:	2d00      	cmp	r5, #0
 80104e0:	bfa2      	ittt	ge
 80104e2:	6821      	ldrge	r1, [r4, #0]
 80104e4:	f021 0104 	bicge.w	r1, r1, #4
 80104e8:	6021      	strge	r1, [r4, #0]
 80104ea:	b90e      	cbnz	r6, 80104f0 <_printf_i+0x118>
 80104ec:	2d00      	cmp	r5, #0
 80104ee:	d04d      	beq.n	801058c <_printf_i+0x1b4>
 80104f0:	4615      	mov	r5, r2
 80104f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80104f6:	fb03 6711 	mls	r7, r3, r1, r6
 80104fa:	5dc7      	ldrb	r7, [r0, r7]
 80104fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010500:	4637      	mov	r7, r6
 8010502:	42bb      	cmp	r3, r7
 8010504:	460e      	mov	r6, r1
 8010506:	d9f4      	bls.n	80104f2 <_printf_i+0x11a>
 8010508:	2b08      	cmp	r3, #8
 801050a:	d10b      	bne.n	8010524 <_printf_i+0x14c>
 801050c:	6823      	ldr	r3, [r4, #0]
 801050e:	07de      	lsls	r6, r3, #31
 8010510:	d508      	bpl.n	8010524 <_printf_i+0x14c>
 8010512:	6923      	ldr	r3, [r4, #16]
 8010514:	6861      	ldr	r1, [r4, #4]
 8010516:	4299      	cmp	r1, r3
 8010518:	bfde      	ittt	le
 801051a:	2330      	movle	r3, #48	; 0x30
 801051c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010520:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010524:	1b52      	subs	r2, r2, r5
 8010526:	6122      	str	r2, [r4, #16]
 8010528:	f8cd a000 	str.w	sl, [sp]
 801052c:	464b      	mov	r3, r9
 801052e:	aa03      	add	r2, sp, #12
 8010530:	4621      	mov	r1, r4
 8010532:	4640      	mov	r0, r8
 8010534:	f7ff fee2 	bl	80102fc <_printf_common>
 8010538:	3001      	adds	r0, #1
 801053a:	d14c      	bne.n	80105d6 <_printf_i+0x1fe>
 801053c:	f04f 30ff 	mov.w	r0, #4294967295
 8010540:	b004      	add	sp, #16
 8010542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010546:	4835      	ldr	r0, [pc, #212]	; (801061c <_printf_i+0x244>)
 8010548:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801054c:	6829      	ldr	r1, [r5, #0]
 801054e:	6823      	ldr	r3, [r4, #0]
 8010550:	f851 6b04 	ldr.w	r6, [r1], #4
 8010554:	6029      	str	r1, [r5, #0]
 8010556:	061d      	lsls	r5, r3, #24
 8010558:	d514      	bpl.n	8010584 <_printf_i+0x1ac>
 801055a:	07df      	lsls	r7, r3, #31
 801055c:	bf44      	itt	mi
 801055e:	f043 0320 	orrmi.w	r3, r3, #32
 8010562:	6023      	strmi	r3, [r4, #0]
 8010564:	b91e      	cbnz	r6, 801056e <_printf_i+0x196>
 8010566:	6823      	ldr	r3, [r4, #0]
 8010568:	f023 0320 	bic.w	r3, r3, #32
 801056c:	6023      	str	r3, [r4, #0]
 801056e:	2310      	movs	r3, #16
 8010570:	e7b0      	b.n	80104d4 <_printf_i+0xfc>
 8010572:	6823      	ldr	r3, [r4, #0]
 8010574:	f043 0320 	orr.w	r3, r3, #32
 8010578:	6023      	str	r3, [r4, #0]
 801057a:	2378      	movs	r3, #120	; 0x78
 801057c:	4828      	ldr	r0, [pc, #160]	; (8010620 <_printf_i+0x248>)
 801057e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010582:	e7e3      	b.n	801054c <_printf_i+0x174>
 8010584:	0659      	lsls	r1, r3, #25
 8010586:	bf48      	it	mi
 8010588:	b2b6      	uxthmi	r6, r6
 801058a:	e7e6      	b.n	801055a <_printf_i+0x182>
 801058c:	4615      	mov	r5, r2
 801058e:	e7bb      	b.n	8010508 <_printf_i+0x130>
 8010590:	682b      	ldr	r3, [r5, #0]
 8010592:	6826      	ldr	r6, [r4, #0]
 8010594:	6961      	ldr	r1, [r4, #20]
 8010596:	1d18      	adds	r0, r3, #4
 8010598:	6028      	str	r0, [r5, #0]
 801059a:	0635      	lsls	r5, r6, #24
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	d501      	bpl.n	80105a4 <_printf_i+0x1cc>
 80105a0:	6019      	str	r1, [r3, #0]
 80105a2:	e002      	b.n	80105aa <_printf_i+0x1d2>
 80105a4:	0670      	lsls	r0, r6, #25
 80105a6:	d5fb      	bpl.n	80105a0 <_printf_i+0x1c8>
 80105a8:	8019      	strh	r1, [r3, #0]
 80105aa:	2300      	movs	r3, #0
 80105ac:	6123      	str	r3, [r4, #16]
 80105ae:	4615      	mov	r5, r2
 80105b0:	e7ba      	b.n	8010528 <_printf_i+0x150>
 80105b2:	682b      	ldr	r3, [r5, #0]
 80105b4:	1d1a      	adds	r2, r3, #4
 80105b6:	602a      	str	r2, [r5, #0]
 80105b8:	681d      	ldr	r5, [r3, #0]
 80105ba:	6862      	ldr	r2, [r4, #4]
 80105bc:	2100      	movs	r1, #0
 80105be:	4628      	mov	r0, r5
 80105c0:	f7ef fe3e 	bl	8000240 <memchr>
 80105c4:	b108      	cbz	r0, 80105ca <_printf_i+0x1f2>
 80105c6:	1b40      	subs	r0, r0, r5
 80105c8:	6060      	str	r0, [r4, #4]
 80105ca:	6863      	ldr	r3, [r4, #4]
 80105cc:	6123      	str	r3, [r4, #16]
 80105ce:	2300      	movs	r3, #0
 80105d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80105d4:	e7a8      	b.n	8010528 <_printf_i+0x150>
 80105d6:	6923      	ldr	r3, [r4, #16]
 80105d8:	462a      	mov	r2, r5
 80105da:	4649      	mov	r1, r9
 80105dc:	4640      	mov	r0, r8
 80105de:	47d0      	blx	sl
 80105e0:	3001      	adds	r0, #1
 80105e2:	d0ab      	beq.n	801053c <_printf_i+0x164>
 80105e4:	6823      	ldr	r3, [r4, #0]
 80105e6:	079b      	lsls	r3, r3, #30
 80105e8:	d413      	bmi.n	8010612 <_printf_i+0x23a>
 80105ea:	68e0      	ldr	r0, [r4, #12]
 80105ec:	9b03      	ldr	r3, [sp, #12]
 80105ee:	4298      	cmp	r0, r3
 80105f0:	bfb8      	it	lt
 80105f2:	4618      	movlt	r0, r3
 80105f4:	e7a4      	b.n	8010540 <_printf_i+0x168>
 80105f6:	2301      	movs	r3, #1
 80105f8:	4632      	mov	r2, r6
 80105fa:	4649      	mov	r1, r9
 80105fc:	4640      	mov	r0, r8
 80105fe:	47d0      	blx	sl
 8010600:	3001      	adds	r0, #1
 8010602:	d09b      	beq.n	801053c <_printf_i+0x164>
 8010604:	3501      	adds	r5, #1
 8010606:	68e3      	ldr	r3, [r4, #12]
 8010608:	9903      	ldr	r1, [sp, #12]
 801060a:	1a5b      	subs	r3, r3, r1
 801060c:	42ab      	cmp	r3, r5
 801060e:	dcf2      	bgt.n	80105f6 <_printf_i+0x21e>
 8010610:	e7eb      	b.n	80105ea <_printf_i+0x212>
 8010612:	2500      	movs	r5, #0
 8010614:	f104 0619 	add.w	r6, r4, #25
 8010618:	e7f5      	b.n	8010606 <_printf_i+0x22e>
 801061a:	bf00      	nop
 801061c:	080164d0 	.word	0x080164d0
 8010620:	080164e1 	.word	0x080164e1

08010624 <_scanf_float>:
 8010624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010628:	b087      	sub	sp, #28
 801062a:	4617      	mov	r7, r2
 801062c:	9303      	str	r3, [sp, #12]
 801062e:	688b      	ldr	r3, [r1, #8]
 8010630:	1e5a      	subs	r2, r3, #1
 8010632:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8010636:	bf83      	ittte	hi
 8010638:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801063c:	195b      	addhi	r3, r3, r5
 801063e:	9302      	strhi	r3, [sp, #8]
 8010640:	2300      	movls	r3, #0
 8010642:	bf86      	itte	hi
 8010644:	f240 135d 	movwhi	r3, #349	; 0x15d
 8010648:	608b      	strhi	r3, [r1, #8]
 801064a:	9302      	strls	r3, [sp, #8]
 801064c:	680b      	ldr	r3, [r1, #0]
 801064e:	468b      	mov	fp, r1
 8010650:	2500      	movs	r5, #0
 8010652:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8010656:	f84b 3b1c 	str.w	r3, [fp], #28
 801065a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801065e:	4680      	mov	r8, r0
 8010660:	460c      	mov	r4, r1
 8010662:	465e      	mov	r6, fp
 8010664:	46aa      	mov	sl, r5
 8010666:	46a9      	mov	r9, r5
 8010668:	9501      	str	r5, [sp, #4]
 801066a:	68a2      	ldr	r2, [r4, #8]
 801066c:	b152      	cbz	r2, 8010684 <_scanf_float+0x60>
 801066e:	683b      	ldr	r3, [r7, #0]
 8010670:	781b      	ldrb	r3, [r3, #0]
 8010672:	2b4e      	cmp	r3, #78	; 0x4e
 8010674:	d864      	bhi.n	8010740 <_scanf_float+0x11c>
 8010676:	2b40      	cmp	r3, #64	; 0x40
 8010678:	d83c      	bhi.n	80106f4 <_scanf_float+0xd0>
 801067a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801067e:	b2c8      	uxtb	r0, r1
 8010680:	280e      	cmp	r0, #14
 8010682:	d93a      	bls.n	80106fa <_scanf_float+0xd6>
 8010684:	f1b9 0f00 	cmp.w	r9, #0
 8010688:	d003      	beq.n	8010692 <_scanf_float+0x6e>
 801068a:	6823      	ldr	r3, [r4, #0]
 801068c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010690:	6023      	str	r3, [r4, #0]
 8010692:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010696:	f1ba 0f01 	cmp.w	sl, #1
 801069a:	f200 8113 	bhi.w	80108c4 <_scanf_float+0x2a0>
 801069e:	455e      	cmp	r6, fp
 80106a0:	f200 8105 	bhi.w	80108ae <_scanf_float+0x28a>
 80106a4:	2501      	movs	r5, #1
 80106a6:	4628      	mov	r0, r5
 80106a8:	b007      	add	sp, #28
 80106aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106ae:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80106b2:	2a0d      	cmp	r2, #13
 80106b4:	d8e6      	bhi.n	8010684 <_scanf_float+0x60>
 80106b6:	a101      	add	r1, pc, #4	; (adr r1, 80106bc <_scanf_float+0x98>)
 80106b8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80106bc:	080107fb 	.word	0x080107fb
 80106c0:	08010685 	.word	0x08010685
 80106c4:	08010685 	.word	0x08010685
 80106c8:	08010685 	.word	0x08010685
 80106cc:	0801085b 	.word	0x0801085b
 80106d0:	08010833 	.word	0x08010833
 80106d4:	08010685 	.word	0x08010685
 80106d8:	08010685 	.word	0x08010685
 80106dc:	08010809 	.word	0x08010809
 80106e0:	08010685 	.word	0x08010685
 80106e4:	08010685 	.word	0x08010685
 80106e8:	08010685 	.word	0x08010685
 80106ec:	08010685 	.word	0x08010685
 80106f0:	080107c1 	.word	0x080107c1
 80106f4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80106f8:	e7db      	b.n	80106b2 <_scanf_float+0x8e>
 80106fa:	290e      	cmp	r1, #14
 80106fc:	d8c2      	bhi.n	8010684 <_scanf_float+0x60>
 80106fe:	a001      	add	r0, pc, #4	; (adr r0, 8010704 <_scanf_float+0xe0>)
 8010700:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8010704:	080107b3 	.word	0x080107b3
 8010708:	08010685 	.word	0x08010685
 801070c:	080107b3 	.word	0x080107b3
 8010710:	08010847 	.word	0x08010847
 8010714:	08010685 	.word	0x08010685
 8010718:	08010761 	.word	0x08010761
 801071c:	0801079d 	.word	0x0801079d
 8010720:	0801079d 	.word	0x0801079d
 8010724:	0801079d 	.word	0x0801079d
 8010728:	0801079d 	.word	0x0801079d
 801072c:	0801079d 	.word	0x0801079d
 8010730:	0801079d 	.word	0x0801079d
 8010734:	0801079d 	.word	0x0801079d
 8010738:	0801079d 	.word	0x0801079d
 801073c:	0801079d 	.word	0x0801079d
 8010740:	2b6e      	cmp	r3, #110	; 0x6e
 8010742:	d809      	bhi.n	8010758 <_scanf_float+0x134>
 8010744:	2b60      	cmp	r3, #96	; 0x60
 8010746:	d8b2      	bhi.n	80106ae <_scanf_float+0x8a>
 8010748:	2b54      	cmp	r3, #84	; 0x54
 801074a:	d077      	beq.n	801083c <_scanf_float+0x218>
 801074c:	2b59      	cmp	r3, #89	; 0x59
 801074e:	d199      	bne.n	8010684 <_scanf_float+0x60>
 8010750:	2d07      	cmp	r5, #7
 8010752:	d197      	bne.n	8010684 <_scanf_float+0x60>
 8010754:	2508      	movs	r5, #8
 8010756:	e029      	b.n	80107ac <_scanf_float+0x188>
 8010758:	2b74      	cmp	r3, #116	; 0x74
 801075a:	d06f      	beq.n	801083c <_scanf_float+0x218>
 801075c:	2b79      	cmp	r3, #121	; 0x79
 801075e:	e7f6      	b.n	801074e <_scanf_float+0x12a>
 8010760:	6821      	ldr	r1, [r4, #0]
 8010762:	05c8      	lsls	r0, r1, #23
 8010764:	d51a      	bpl.n	801079c <_scanf_float+0x178>
 8010766:	9b02      	ldr	r3, [sp, #8]
 8010768:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801076c:	6021      	str	r1, [r4, #0]
 801076e:	f109 0901 	add.w	r9, r9, #1
 8010772:	b11b      	cbz	r3, 801077c <_scanf_float+0x158>
 8010774:	3b01      	subs	r3, #1
 8010776:	3201      	adds	r2, #1
 8010778:	9302      	str	r3, [sp, #8]
 801077a:	60a2      	str	r2, [r4, #8]
 801077c:	68a3      	ldr	r3, [r4, #8]
 801077e:	3b01      	subs	r3, #1
 8010780:	60a3      	str	r3, [r4, #8]
 8010782:	6923      	ldr	r3, [r4, #16]
 8010784:	3301      	adds	r3, #1
 8010786:	6123      	str	r3, [r4, #16]
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	3b01      	subs	r3, #1
 801078c:	2b00      	cmp	r3, #0
 801078e:	607b      	str	r3, [r7, #4]
 8010790:	f340 8084 	ble.w	801089c <_scanf_float+0x278>
 8010794:	683b      	ldr	r3, [r7, #0]
 8010796:	3301      	adds	r3, #1
 8010798:	603b      	str	r3, [r7, #0]
 801079a:	e766      	b.n	801066a <_scanf_float+0x46>
 801079c:	eb1a 0f05 	cmn.w	sl, r5
 80107a0:	f47f af70 	bne.w	8010684 <_scanf_float+0x60>
 80107a4:	6822      	ldr	r2, [r4, #0]
 80107a6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80107aa:	6022      	str	r2, [r4, #0]
 80107ac:	f806 3b01 	strb.w	r3, [r6], #1
 80107b0:	e7e4      	b.n	801077c <_scanf_float+0x158>
 80107b2:	6822      	ldr	r2, [r4, #0]
 80107b4:	0610      	lsls	r0, r2, #24
 80107b6:	f57f af65 	bpl.w	8010684 <_scanf_float+0x60>
 80107ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80107be:	e7f4      	b.n	80107aa <_scanf_float+0x186>
 80107c0:	f1ba 0f00 	cmp.w	sl, #0
 80107c4:	d10e      	bne.n	80107e4 <_scanf_float+0x1c0>
 80107c6:	f1b9 0f00 	cmp.w	r9, #0
 80107ca:	d10e      	bne.n	80107ea <_scanf_float+0x1c6>
 80107cc:	6822      	ldr	r2, [r4, #0]
 80107ce:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80107d2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80107d6:	d108      	bne.n	80107ea <_scanf_float+0x1c6>
 80107d8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80107dc:	6022      	str	r2, [r4, #0]
 80107de:	f04f 0a01 	mov.w	sl, #1
 80107e2:	e7e3      	b.n	80107ac <_scanf_float+0x188>
 80107e4:	f1ba 0f02 	cmp.w	sl, #2
 80107e8:	d055      	beq.n	8010896 <_scanf_float+0x272>
 80107ea:	2d01      	cmp	r5, #1
 80107ec:	d002      	beq.n	80107f4 <_scanf_float+0x1d0>
 80107ee:	2d04      	cmp	r5, #4
 80107f0:	f47f af48 	bne.w	8010684 <_scanf_float+0x60>
 80107f4:	3501      	adds	r5, #1
 80107f6:	b2ed      	uxtb	r5, r5
 80107f8:	e7d8      	b.n	80107ac <_scanf_float+0x188>
 80107fa:	f1ba 0f01 	cmp.w	sl, #1
 80107fe:	f47f af41 	bne.w	8010684 <_scanf_float+0x60>
 8010802:	f04f 0a02 	mov.w	sl, #2
 8010806:	e7d1      	b.n	80107ac <_scanf_float+0x188>
 8010808:	b97d      	cbnz	r5, 801082a <_scanf_float+0x206>
 801080a:	f1b9 0f00 	cmp.w	r9, #0
 801080e:	f47f af3c 	bne.w	801068a <_scanf_float+0x66>
 8010812:	6822      	ldr	r2, [r4, #0]
 8010814:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8010818:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801081c:	f47f af39 	bne.w	8010692 <_scanf_float+0x6e>
 8010820:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010824:	6022      	str	r2, [r4, #0]
 8010826:	2501      	movs	r5, #1
 8010828:	e7c0      	b.n	80107ac <_scanf_float+0x188>
 801082a:	2d03      	cmp	r5, #3
 801082c:	d0e2      	beq.n	80107f4 <_scanf_float+0x1d0>
 801082e:	2d05      	cmp	r5, #5
 8010830:	e7de      	b.n	80107f0 <_scanf_float+0x1cc>
 8010832:	2d02      	cmp	r5, #2
 8010834:	f47f af26 	bne.w	8010684 <_scanf_float+0x60>
 8010838:	2503      	movs	r5, #3
 801083a:	e7b7      	b.n	80107ac <_scanf_float+0x188>
 801083c:	2d06      	cmp	r5, #6
 801083e:	f47f af21 	bne.w	8010684 <_scanf_float+0x60>
 8010842:	2507      	movs	r5, #7
 8010844:	e7b2      	b.n	80107ac <_scanf_float+0x188>
 8010846:	6822      	ldr	r2, [r4, #0]
 8010848:	0591      	lsls	r1, r2, #22
 801084a:	f57f af1b 	bpl.w	8010684 <_scanf_float+0x60>
 801084e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8010852:	6022      	str	r2, [r4, #0]
 8010854:	f8cd 9004 	str.w	r9, [sp, #4]
 8010858:	e7a8      	b.n	80107ac <_scanf_float+0x188>
 801085a:	6822      	ldr	r2, [r4, #0]
 801085c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8010860:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8010864:	d006      	beq.n	8010874 <_scanf_float+0x250>
 8010866:	0550      	lsls	r0, r2, #21
 8010868:	f57f af0c 	bpl.w	8010684 <_scanf_float+0x60>
 801086c:	f1b9 0f00 	cmp.w	r9, #0
 8010870:	f43f af0f 	beq.w	8010692 <_scanf_float+0x6e>
 8010874:	0591      	lsls	r1, r2, #22
 8010876:	bf58      	it	pl
 8010878:	9901      	ldrpl	r1, [sp, #4]
 801087a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801087e:	bf58      	it	pl
 8010880:	eba9 0101 	subpl.w	r1, r9, r1
 8010884:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8010888:	bf58      	it	pl
 801088a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801088e:	6022      	str	r2, [r4, #0]
 8010890:	f04f 0900 	mov.w	r9, #0
 8010894:	e78a      	b.n	80107ac <_scanf_float+0x188>
 8010896:	f04f 0a03 	mov.w	sl, #3
 801089a:	e787      	b.n	80107ac <_scanf_float+0x188>
 801089c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80108a0:	4639      	mov	r1, r7
 80108a2:	4640      	mov	r0, r8
 80108a4:	4798      	blx	r3
 80108a6:	2800      	cmp	r0, #0
 80108a8:	f43f aedf 	beq.w	801066a <_scanf_float+0x46>
 80108ac:	e6ea      	b.n	8010684 <_scanf_float+0x60>
 80108ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80108b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80108b6:	463a      	mov	r2, r7
 80108b8:	4640      	mov	r0, r8
 80108ba:	4798      	blx	r3
 80108bc:	6923      	ldr	r3, [r4, #16]
 80108be:	3b01      	subs	r3, #1
 80108c0:	6123      	str	r3, [r4, #16]
 80108c2:	e6ec      	b.n	801069e <_scanf_float+0x7a>
 80108c4:	1e6b      	subs	r3, r5, #1
 80108c6:	2b06      	cmp	r3, #6
 80108c8:	d825      	bhi.n	8010916 <_scanf_float+0x2f2>
 80108ca:	2d02      	cmp	r5, #2
 80108cc:	d836      	bhi.n	801093c <_scanf_float+0x318>
 80108ce:	455e      	cmp	r6, fp
 80108d0:	f67f aee8 	bls.w	80106a4 <_scanf_float+0x80>
 80108d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80108d8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80108dc:	463a      	mov	r2, r7
 80108de:	4640      	mov	r0, r8
 80108e0:	4798      	blx	r3
 80108e2:	6923      	ldr	r3, [r4, #16]
 80108e4:	3b01      	subs	r3, #1
 80108e6:	6123      	str	r3, [r4, #16]
 80108e8:	e7f1      	b.n	80108ce <_scanf_float+0x2aa>
 80108ea:	9802      	ldr	r0, [sp, #8]
 80108ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80108f0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80108f4:	9002      	str	r0, [sp, #8]
 80108f6:	463a      	mov	r2, r7
 80108f8:	4640      	mov	r0, r8
 80108fa:	4798      	blx	r3
 80108fc:	6923      	ldr	r3, [r4, #16]
 80108fe:	3b01      	subs	r3, #1
 8010900:	6123      	str	r3, [r4, #16]
 8010902:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010906:	fa5f fa8a 	uxtb.w	sl, sl
 801090a:	f1ba 0f02 	cmp.w	sl, #2
 801090e:	d1ec      	bne.n	80108ea <_scanf_float+0x2c6>
 8010910:	3d03      	subs	r5, #3
 8010912:	b2ed      	uxtb	r5, r5
 8010914:	1b76      	subs	r6, r6, r5
 8010916:	6823      	ldr	r3, [r4, #0]
 8010918:	05da      	lsls	r2, r3, #23
 801091a:	d52f      	bpl.n	801097c <_scanf_float+0x358>
 801091c:	055b      	lsls	r3, r3, #21
 801091e:	d510      	bpl.n	8010942 <_scanf_float+0x31e>
 8010920:	455e      	cmp	r6, fp
 8010922:	f67f aebf 	bls.w	80106a4 <_scanf_float+0x80>
 8010926:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801092a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801092e:	463a      	mov	r2, r7
 8010930:	4640      	mov	r0, r8
 8010932:	4798      	blx	r3
 8010934:	6923      	ldr	r3, [r4, #16]
 8010936:	3b01      	subs	r3, #1
 8010938:	6123      	str	r3, [r4, #16]
 801093a:	e7f1      	b.n	8010920 <_scanf_float+0x2fc>
 801093c:	46aa      	mov	sl, r5
 801093e:	9602      	str	r6, [sp, #8]
 8010940:	e7df      	b.n	8010902 <_scanf_float+0x2de>
 8010942:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8010946:	6923      	ldr	r3, [r4, #16]
 8010948:	2965      	cmp	r1, #101	; 0x65
 801094a:	f103 33ff 	add.w	r3, r3, #4294967295
 801094e:	f106 35ff 	add.w	r5, r6, #4294967295
 8010952:	6123      	str	r3, [r4, #16]
 8010954:	d00c      	beq.n	8010970 <_scanf_float+0x34c>
 8010956:	2945      	cmp	r1, #69	; 0x45
 8010958:	d00a      	beq.n	8010970 <_scanf_float+0x34c>
 801095a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801095e:	463a      	mov	r2, r7
 8010960:	4640      	mov	r0, r8
 8010962:	4798      	blx	r3
 8010964:	6923      	ldr	r3, [r4, #16]
 8010966:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801096a:	3b01      	subs	r3, #1
 801096c:	1eb5      	subs	r5, r6, #2
 801096e:	6123      	str	r3, [r4, #16]
 8010970:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010974:	463a      	mov	r2, r7
 8010976:	4640      	mov	r0, r8
 8010978:	4798      	blx	r3
 801097a:	462e      	mov	r6, r5
 801097c:	6825      	ldr	r5, [r4, #0]
 801097e:	f015 0510 	ands.w	r5, r5, #16
 8010982:	d159      	bne.n	8010a38 <_scanf_float+0x414>
 8010984:	7035      	strb	r5, [r6, #0]
 8010986:	6823      	ldr	r3, [r4, #0]
 8010988:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801098c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010990:	d11b      	bne.n	80109ca <_scanf_float+0x3a6>
 8010992:	9b01      	ldr	r3, [sp, #4]
 8010994:	454b      	cmp	r3, r9
 8010996:	eba3 0209 	sub.w	r2, r3, r9
 801099a:	d123      	bne.n	80109e4 <_scanf_float+0x3c0>
 801099c:	2200      	movs	r2, #0
 801099e:	4659      	mov	r1, fp
 80109a0:	4640      	mov	r0, r8
 80109a2:	f000 ff13 	bl	80117cc <_strtod_r>
 80109a6:	6822      	ldr	r2, [r4, #0]
 80109a8:	9b03      	ldr	r3, [sp, #12]
 80109aa:	f012 0f02 	tst.w	r2, #2
 80109ae:	ec57 6b10 	vmov	r6, r7, d0
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	d021      	beq.n	80109fa <_scanf_float+0x3d6>
 80109b6:	9903      	ldr	r1, [sp, #12]
 80109b8:	1d1a      	adds	r2, r3, #4
 80109ba:	600a      	str	r2, [r1, #0]
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	e9c3 6700 	strd	r6, r7, [r3]
 80109c2:	68e3      	ldr	r3, [r4, #12]
 80109c4:	3301      	adds	r3, #1
 80109c6:	60e3      	str	r3, [r4, #12]
 80109c8:	e66d      	b.n	80106a6 <_scanf_float+0x82>
 80109ca:	9b04      	ldr	r3, [sp, #16]
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d0e5      	beq.n	801099c <_scanf_float+0x378>
 80109d0:	9905      	ldr	r1, [sp, #20]
 80109d2:	230a      	movs	r3, #10
 80109d4:	462a      	mov	r2, r5
 80109d6:	3101      	adds	r1, #1
 80109d8:	4640      	mov	r0, r8
 80109da:	f000 ffdb 	bl	8011994 <_strtol_r>
 80109de:	9b04      	ldr	r3, [sp, #16]
 80109e0:	9e05      	ldr	r6, [sp, #20]
 80109e2:	1ac2      	subs	r2, r0, r3
 80109e4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80109e8:	429e      	cmp	r6, r3
 80109ea:	bf28      	it	cs
 80109ec:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80109f0:	4912      	ldr	r1, [pc, #72]	; (8010a3c <_scanf_float+0x418>)
 80109f2:	4630      	mov	r0, r6
 80109f4:	f000 f82c 	bl	8010a50 <siprintf>
 80109f8:	e7d0      	b.n	801099c <_scanf_float+0x378>
 80109fa:	9903      	ldr	r1, [sp, #12]
 80109fc:	f012 0f04 	tst.w	r2, #4
 8010a00:	f103 0204 	add.w	r2, r3, #4
 8010a04:	600a      	str	r2, [r1, #0]
 8010a06:	d1d9      	bne.n	80109bc <_scanf_float+0x398>
 8010a08:	f8d3 8000 	ldr.w	r8, [r3]
 8010a0c:	ee10 2a10 	vmov	r2, s0
 8010a10:	ee10 0a10 	vmov	r0, s0
 8010a14:	463b      	mov	r3, r7
 8010a16:	4639      	mov	r1, r7
 8010a18:	f7f0 f8b8 	bl	8000b8c <__aeabi_dcmpun>
 8010a1c:	b128      	cbz	r0, 8010a2a <_scanf_float+0x406>
 8010a1e:	4808      	ldr	r0, [pc, #32]	; (8010a40 <_scanf_float+0x41c>)
 8010a20:	f000 f810 	bl	8010a44 <nanf>
 8010a24:	ed88 0a00 	vstr	s0, [r8]
 8010a28:	e7cb      	b.n	80109c2 <_scanf_float+0x39e>
 8010a2a:	4630      	mov	r0, r6
 8010a2c:	4639      	mov	r1, r7
 8010a2e:	f7f0 f90b 	bl	8000c48 <__aeabi_d2f>
 8010a32:	f8c8 0000 	str.w	r0, [r8]
 8010a36:	e7c4      	b.n	80109c2 <_scanf_float+0x39e>
 8010a38:	2500      	movs	r5, #0
 8010a3a:	e634      	b.n	80106a6 <_scanf_float+0x82>
 8010a3c:	080164f2 	.word	0x080164f2
 8010a40:	080165f7 	.word	0x080165f7

08010a44 <nanf>:
 8010a44:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8010a4c <nanf+0x8>
 8010a48:	4770      	bx	lr
 8010a4a:	bf00      	nop
 8010a4c:	7fc00000 	.word	0x7fc00000

08010a50 <siprintf>:
 8010a50:	b40e      	push	{r1, r2, r3}
 8010a52:	b500      	push	{lr}
 8010a54:	b09c      	sub	sp, #112	; 0x70
 8010a56:	ab1d      	add	r3, sp, #116	; 0x74
 8010a58:	9002      	str	r0, [sp, #8]
 8010a5a:	9006      	str	r0, [sp, #24]
 8010a5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010a60:	4809      	ldr	r0, [pc, #36]	; (8010a88 <siprintf+0x38>)
 8010a62:	9107      	str	r1, [sp, #28]
 8010a64:	9104      	str	r1, [sp, #16]
 8010a66:	4909      	ldr	r1, [pc, #36]	; (8010a8c <siprintf+0x3c>)
 8010a68:	f853 2b04 	ldr.w	r2, [r3], #4
 8010a6c:	9105      	str	r1, [sp, #20]
 8010a6e:	6800      	ldr	r0, [r0, #0]
 8010a70:	9301      	str	r3, [sp, #4]
 8010a72:	a902      	add	r1, sp, #8
 8010a74:	f003 f810 	bl	8013a98 <_svfiprintf_r>
 8010a78:	9b02      	ldr	r3, [sp, #8]
 8010a7a:	2200      	movs	r2, #0
 8010a7c:	701a      	strb	r2, [r3, #0]
 8010a7e:	b01c      	add	sp, #112	; 0x70
 8010a80:	f85d eb04 	ldr.w	lr, [sp], #4
 8010a84:	b003      	add	sp, #12
 8010a86:	4770      	bx	lr
 8010a88:	20000438 	.word	0x20000438
 8010a8c:	ffff0208 	.word	0xffff0208

08010a90 <siscanf>:
 8010a90:	b40e      	push	{r1, r2, r3}
 8010a92:	b510      	push	{r4, lr}
 8010a94:	b09f      	sub	sp, #124	; 0x7c
 8010a96:	ac21      	add	r4, sp, #132	; 0x84
 8010a98:	f44f 7101 	mov.w	r1, #516	; 0x204
 8010a9c:	f854 2b04 	ldr.w	r2, [r4], #4
 8010aa0:	9201      	str	r2, [sp, #4]
 8010aa2:	f8ad 101c 	strh.w	r1, [sp, #28]
 8010aa6:	9004      	str	r0, [sp, #16]
 8010aa8:	9008      	str	r0, [sp, #32]
 8010aaa:	f7ef fbbb 	bl	8000224 <strlen>
 8010aae:	4b0c      	ldr	r3, [pc, #48]	; (8010ae0 <siscanf+0x50>)
 8010ab0:	9005      	str	r0, [sp, #20]
 8010ab2:	9009      	str	r0, [sp, #36]	; 0x24
 8010ab4:	930d      	str	r3, [sp, #52]	; 0x34
 8010ab6:	480b      	ldr	r0, [pc, #44]	; (8010ae4 <siscanf+0x54>)
 8010ab8:	9a01      	ldr	r2, [sp, #4]
 8010aba:	6800      	ldr	r0, [r0, #0]
 8010abc:	9403      	str	r4, [sp, #12]
 8010abe:	2300      	movs	r3, #0
 8010ac0:	9311      	str	r3, [sp, #68]	; 0x44
 8010ac2:	9316      	str	r3, [sp, #88]	; 0x58
 8010ac4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010ac8:	f8ad 301e 	strh.w	r3, [sp, #30]
 8010acc:	a904      	add	r1, sp, #16
 8010ace:	4623      	mov	r3, r4
 8010ad0:	f003 f93c 	bl	8013d4c <__ssvfiscanf_r>
 8010ad4:	b01f      	add	sp, #124	; 0x7c
 8010ad6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010ada:	b003      	add	sp, #12
 8010adc:	4770      	bx	lr
 8010ade:	bf00      	nop
 8010ae0:	08010b0b 	.word	0x08010b0b
 8010ae4:	20000438 	.word	0x20000438

08010ae8 <__sread>:
 8010ae8:	b510      	push	{r4, lr}
 8010aea:	460c      	mov	r4, r1
 8010aec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010af0:	f003 fd50 	bl	8014594 <_read_r>
 8010af4:	2800      	cmp	r0, #0
 8010af6:	bfab      	itete	ge
 8010af8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010afa:	89a3      	ldrhlt	r3, [r4, #12]
 8010afc:	181b      	addge	r3, r3, r0
 8010afe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010b02:	bfac      	ite	ge
 8010b04:	6563      	strge	r3, [r4, #84]	; 0x54
 8010b06:	81a3      	strhlt	r3, [r4, #12]
 8010b08:	bd10      	pop	{r4, pc}

08010b0a <__seofread>:
 8010b0a:	2000      	movs	r0, #0
 8010b0c:	4770      	bx	lr

08010b0e <__swrite>:
 8010b0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b12:	461f      	mov	r7, r3
 8010b14:	898b      	ldrh	r3, [r1, #12]
 8010b16:	05db      	lsls	r3, r3, #23
 8010b18:	4605      	mov	r5, r0
 8010b1a:	460c      	mov	r4, r1
 8010b1c:	4616      	mov	r6, r2
 8010b1e:	d505      	bpl.n	8010b2c <__swrite+0x1e>
 8010b20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b24:	2302      	movs	r3, #2
 8010b26:	2200      	movs	r2, #0
 8010b28:	f002 f976 	bl	8012e18 <_lseek_r>
 8010b2c:	89a3      	ldrh	r3, [r4, #12]
 8010b2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010b32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010b36:	81a3      	strh	r3, [r4, #12]
 8010b38:	4632      	mov	r2, r6
 8010b3a:	463b      	mov	r3, r7
 8010b3c:	4628      	mov	r0, r5
 8010b3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010b42:	f000 bf29 	b.w	8011998 <_write_r>

08010b46 <__sseek>:
 8010b46:	b510      	push	{r4, lr}
 8010b48:	460c      	mov	r4, r1
 8010b4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b4e:	f002 f963 	bl	8012e18 <_lseek_r>
 8010b52:	1c43      	adds	r3, r0, #1
 8010b54:	89a3      	ldrh	r3, [r4, #12]
 8010b56:	bf15      	itete	ne
 8010b58:	6560      	strne	r0, [r4, #84]	; 0x54
 8010b5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010b5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010b62:	81a3      	strheq	r3, [r4, #12]
 8010b64:	bf18      	it	ne
 8010b66:	81a3      	strhne	r3, [r4, #12]
 8010b68:	bd10      	pop	{r4, pc}

08010b6a <__sclose>:
 8010b6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b6e:	f000 bf43 	b.w	80119f8 <_close_r>

08010b72 <strcpy>:
 8010b72:	4603      	mov	r3, r0
 8010b74:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010b78:	f803 2b01 	strb.w	r2, [r3], #1
 8010b7c:	2a00      	cmp	r2, #0
 8010b7e:	d1f9      	bne.n	8010b74 <strcpy+0x2>
 8010b80:	4770      	bx	lr

08010b82 <sulp>:
 8010b82:	b570      	push	{r4, r5, r6, lr}
 8010b84:	4604      	mov	r4, r0
 8010b86:	460d      	mov	r5, r1
 8010b88:	ec45 4b10 	vmov	d0, r4, r5
 8010b8c:	4616      	mov	r6, r2
 8010b8e:	f002 fce1 	bl	8013554 <__ulp>
 8010b92:	ec51 0b10 	vmov	r0, r1, d0
 8010b96:	b17e      	cbz	r6, 8010bb8 <sulp+0x36>
 8010b98:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010b9c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	dd09      	ble.n	8010bb8 <sulp+0x36>
 8010ba4:	051b      	lsls	r3, r3, #20
 8010ba6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8010baa:	2400      	movs	r4, #0
 8010bac:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8010bb0:	4622      	mov	r2, r4
 8010bb2:	462b      	mov	r3, r5
 8010bb4:	f7ef fd50 	bl	8000658 <__aeabi_dmul>
 8010bb8:	bd70      	pop	{r4, r5, r6, pc}
 8010bba:	0000      	movs	r0, r0
 8010bbc:	0000      	movs	r0, r0
	...

08010bc0 <_strtod_l>:
 8010bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bc4:	ed2d 8b02 	vpush	{d8}
 8010bc8:	b09d      	sub	sp, #116	; 0x74
 8010bca:	461f      	mov	r7, r3
 8010bcc:	2300      	movs	r3, #0
 8010bce:	9318      	str	r3, [sp, #96]	; 0x60
 8010bd0:	4ba2      	ldr	r3, [pc, #648]	; (8010e5c <_strtod_l+0x29c>)
 8010bd2:	9213      	str	r2, [sp, #76]	; 0x4c
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	9305      	str	r3, [sp, #20]
 8010bd8:	4604      	mov	r4, r0
 8010bda:	4618      	mov	r0, r3
 8010bdc:	4688      	mov	r8, r1
 8010bde:	f7ef fb21 	bl	8000224 <strlen>
 8010be2:	f04f 0a00 	mov.w	sl, #0
 8010be6:	4605      	mov	r5, r0
 8010be8:	f04f 0b00 	mov.w	fp, #0
 8010bec:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8010bf0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010bf2:	781a      	ldrb	r2, [r3, #0]
 8010bf4:	2a2b      	cmp	r2, #43	; 0x2b
 8010bf6:	d04e      	beq.n	8010c96 <_strtod_l+0xd6>
 8010bf8:	d83b      	bhi.n	8010c72 <_strtod_l+0xb2>
 8010bfa:	2a0d      	cmp	r2, #13
 8010bfc:	d834      	bhi.n	8010c68 <_strtod_l+0xa8>
 8010bfe:	2a08      	cmp	r2, #8
 8010c00:	d834      	bhi.n	8010c6c <_strtod_l+0xac>
 8010c02:	2a00      	cmp	r2, #0
 8010c04:	d03e      	beq.n	8010c84 <_strtod_l+0xc4>
 8010c06:	2300      	movs	r3, #0
 8010c08:	930a      	str	r3, [sp, #40]	; 0x28
 8010c0a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8010c0c:	7833      	ldrb	r3, [r6, #0]
 8010c0e:	2b30      	cmp	r3, #48	; 0x30
 8010c10:	f040 80b0 	bne.w	8010d74 <_strtod_l+0x1b4>
 8010c14:	7873      	ldrb	r3, [r6, #1]
 8010c16:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010c1a:	2b58      	cmp	r3, #88	; 0x58
 8010c1c:	d168      	bne.n	8010cf0 <_strtod_l+0x130>
 8010c1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010c20:	9301      	str	r3, [sp, #4]
 8010c22:	ab18      	add	r3, sp, #96	; 0x60
 8010c24:	9702      	str	r7, [sp, #8]
 8010c26:	9300      	str	r3, [sp, #0]
 8010c28:	4a8d      	ldr	r2, [pc, #564]	; (8010e60 <_strtod_l+0x2a0>)
 8010c2a:	ab19      	add	r3, sp, #100	; 0x64
 8010c2c:	a917      	add	r1, sp, #92	; 0x5c
 8010c2e:	4620      	mov	r0, r4
 8010c30:	f001 fde6 	bl	8012800 <__gethex>
 8010c34:	f010 0707 	ands.w	r7, r0, #7
 8010c38:	4605      	mov	r5, r0
 8010c3a:	d005      	beq.n	8010c48 <_strtod_l+0x88>
 8010c3c:	2f06      	cmp	r7, #6
 8010c3e:	d12c      	bne.n	8010c9a <_strtod_l+0xda>
 8010c40:	3601      	adds	r6, #1
 8010c42:	2300      	movs	r3, #0
 8010c44:	9617      	str	r6, [sp, #92]	; 0x5c
 8010c46:	930a      	str	r3, [sp, #40]	; 0x28
 8010c48:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	f040 8590 	bne.w	8011770 <_strtod_l+0xbb0>
 8010c50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010c52:	b1eb      	cbz	r3, 8010c90 <_strtod_l+0xd0>
 8010c54:	4652      	mov	r2, sl
 8010c56:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010c5a:	ec43 2b10 	vmov	d0, r2, r3
 8010c5e:	b01d      	add	sp, #116	; 0x74
 8010c60:	ecbd 8b02 	vpop	{d8}
 8010c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c68:	2a20      	cmp	r2, #32
 8010c6a:	d1cc      	bne.n	8010c06 <_strtod_l+0x46>
 8010c6c:	3301      	adds	r3, #1
 8010c6e:	9317      	str	r3, [sp, #92]	; 0x5c
 8010c70:	e7be      	b.n	8010bf0 <_strtod_l+0x30>
 8010c72:	2a2d      	cmp	r2, #45	; 0x2d
 8010c74:	d1c7      	bne.n	8010c06 <_strtod_l+0x46>
 8010c76:	2201      	movs	r2, #1
 8010c78:	920a      	str	r2, [sp, #40]	; 0x28
 8010c7a:	1c5a      	adds	r2, r3, #1
 8010c7c:	9217      	str	r2, [sp, #92]	; 0x5c
 8010c7e:	785b      	ldrb	r3, [r3, #1]
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d1c2      	bne.n	8010c0a <_strtod_l+0x4a>
 8010c84:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010c86:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	f040 856e 	bne.w	801176c <_strtod_l+0xbac>
 8010c90:	4652      	mov	r2, sl
 8010c92:	465b      	mov	r3, fp
 8010c94:	e7e1      	b.n	8010c5a <_strtod_l+0x9a>
 8010c96:	2200      	movs	r2, #0
 8010c98:	e7ee      	b.n	8010c78 <_strtod_l+0xb8>
 8010c9a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010c9c:	b13a      	cbz	r2, 8010cae <_strtod_l+0xee>
 8010c9e:	2135      	movs	r1, #53	; 0x35
 8010ca0:	a81a      	add	r0, sp, #104	; 0x68
 8010ca2:	f002 fd62 	bl	801376a <__copybits>
 8010ca6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010ca8:	4620      	mov	r0, r4
 8010caa:	f002 f921 	bl	8012ef0 <_Bfree>
 8010cae:	3f01      	subs	r7, #1
 8010cb0:	2f04      	cmp	r7, #4
 8010cb2:	d806      	bhi.n	8010cc2 <_strtod_l+0x102>
 8010cb4:	e8df f007 	tbb	[pc, r7]
 8010cb8:	1714030a 	.word	0x1714030a
 8010cbc:	0a          	.byte	0x0a
 8010cbd:	00          	.byte	0x00
 8010cbe:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8010cc2:	0728      	lsls	r0, r5, #28
 8010cc4:	d5c0      	bpl.n	8010c48 <_strtod_l+0x88>
 8010cc6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8010cca:	e7bd      	b.n	8010c48 <_strtod_l+0x88>
 8010ccc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8010cd0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8010cd2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8010cd6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8010cda:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8010cde:	e7f0      	b.n	8010cc2 <_strtod_l+0x102>
 8010ce0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8010e64 <_strtod_l+0x2a4>
 8010ce4:	e7ed      	b.n	8010cc2 <_strtod_l+0x102>
 8010ce6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8010cea:	f04f 3aff 	mov.w	sl, #4294967295
 8010cee:	e7e8      	b.n	8010cc2 <_strtod_l+0x102>
 8010cf0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010cf2:	1c5a      	adds	r2, r3, #1
 8010cf4:	9217      	str	r2, [sp, #92]	; 0x5c
 8010cf6:	785b      	ldrb	r3, [r3, #1]
 8010cf8:	2b30      	cmp	r3, #48	; 0x30
 8010cfa:	d0f9      	beq.n	8010cf0 <_strtod_l+0x130>
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d0a3      	beq.n	8010c48 <_strtod_l+0x88>
 8010d00:	2301      	movs	r3, #1
 8010d02:	f04f 0900 	mov.w	r9, #0
 8010d06:	9304      	str	r3, [sp, #16]
 8010d08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010d0a:	9308      	str	r3, [sp, #32]
 8010d0c:	f8cd 901c 	str.w	r9, [sp, #28]
 8010d10:	464f      	mov	r7, r9
 8010d12:	220a      	movs	r2, #10
 8010d14:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8010d16:	7806      	ldrb	r6, [r0, #0]
 8010d18:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8010d1c:	b2d9      	uxtb	r1, r3
 8010d1e:	2909      	cmp	r1, #9
 8010d20:	d92a      	bls.n	8010d78 <_strtod_l+0x1b8>
 8010d22:	9905      	ldr	r1, [sp, #20]
 8010d24:	462a      	mov	r2, r5
 8010d26:	f003 fc97 	bl	8014658 <strncmp>
 8010d2a:	b398      	cbz	r0, 8010d94 <_strtod_l+0x1d4>
 8010d2c:	2000      	movs	r0, #0
 8010d2e:	4632      	mov	r2, r6
 8010d30:	463d      	mov	r5, r7
 8010d32:	9005      	str	r0, [sp, #20]
 8010d34:	4603      	mov	r3, r0
 8010d36:	2a65      	cmp	r2, #101	; 0x65
 8010d38:	d001      	beq.n	8010d3e <_strtod_l+0x17e>
 8010d3a:	2a45      	cmp	r2, #69	; 0x45
 8010d3c:	d118      	bne.n	8010d70 <_strtod_l+0x1b0>
 8010d3e:	b91d      	cbnz	r5, 8010d48 <_strtod_l+0x188>
 8010d40:	9a04      	ldr	r2, [sp, #16]
 8010d42:	4302      	orrs	r2, r0
 8010d44:	d09e      	beq.n	8010c84 <_strtod_l+0xc4>
 8010d46:	2500      	movs	r5, #0
 8010d48:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8010d4c:	f108 0201 	add.w	r2, r8, #1
 8010d50:	9217      	str	r2, [sp, #92]	; 0x5c
 8010d52:	f898 2001 	ldrb.w	r2, [r8, #1]
 8010d56:	2a2b      	cmp	r2, #43	; 0x2b
 8010d58:	d075      	beq.n	8010e46 <_strtod_l+0x286>
 8010d5a:	2a2d      	cmp	r2, #45	; 0x2d
 8010d5c:	d07b      	beq.n	8010e56 <_strtod_l+0x296>
 8010d5e:	f04f 0c00 	mov.w	ip, #0
 8010d62:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8010d66:	2909      	cmp	r1, #9
 8010d68:	f240 8082 	bls.w	8010e70 <_strtod_l+0x2b0>
 8010d6c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8010d70:	2600      	movs	r6, #0
 8010d72:	e09d      	b.n	8010eb0 <_strtod_l+0x2f0>
 8010d74:	2300      	movs	r3, #0
 8010d76:	e7c4      	b.n	8010d02 <_strtod_l+0x142>
 8010d78:	2f08      	cmp	r7, #8
 8010d7a:	bfd8      	it	le
 8010d7c:	9907      	ldrle	r1, [sp, #28]
 8010d7e:	f100 0001 	add.w	r0, r0, #1
 8010d82:	bfda      	itte	le
 8010d84:	fb02 3301 	mlale	r3, r2, r1, r3
 8010d88:	9307      	strle	r3, [sp, #28]
 8010d8a:	fb02 3909 	mlagt	r9, r2, r9, r3
 8010d8e:	3701      	adds	r7, #1
 8010d90:	9017      	str	r0, [sp, #92]	; 0x5c
 8010d92:	e7bf      	b.n	8010d14 <_strtod_l+0x154>
 8010d94:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010d96:	195a      	adds	r2, r3, r5
 8010d98:	9217      	str	r2, [sp, #92]	; 0x5c
 8010d9a:	5d5a      	ldrb	r2, [r3, r5]
 8010d9c:	2f00      	cmp	r7, #0
 8010d9e:	d037      	beq.n	8010e10 <_strtod_l+0x250>
 8010da0:	9005      	str	r0, [sp, #20]
 8010da2:	463d      	mov	r5, r7
 8010da4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8010da8:	2b09      	cmp	r3, #9
 8010daa:	d912      	bls.n	8010dd2 <_strtod_l+0x212>
 8010dac:	2301      	movs	r3, #1
 8010dae:	e7c2      	b.n	8010d36 <_strtod_l+0x176>
 8010db0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010db2:	1c5a      	adds	r2, r3, #1
 8010db4:	9217      	str	r2, [sp, #92]	; 0x5c
 8010db6:	785a      	ldrb	r2, [r3, #1]
 8010db8:	3001      	adds	r0, #1
 8010dba:	2a30      	cmp	r2, #48	; 0x30
 8010dbc:	d0f8      	beq.n	8010db0 <_strtod_l+0x1f0>
 8010dbe:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8010dc2:	2b08      	cmp	r3, #8
 8010dc4:	f200 84d9 	bhi.w	801177a <_strtod_l+0xbba>
 8010dc8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010dca:	9005      	str	r0, [sp, #20]
 8010dcc:	2000      	movs	r0, #0
 8010dce:	9308      	str	r3, [sp, #32]
 8010dd0:	4605      	mov	r5, r0
 8010dd2:	3a30      	subs	r2, #48	; 0x30
 8010dd4:	f100 0301 	add.w	r3, r0, #1
 8010dd8:	d014      	beq.n	8010e04 <_strtod_l+0x244>
 8010dda:	9905      	ldr	r1, [sp, #20]
 8010ddc:	4419      	add	r1, r3
 8010dde:	9105      	str	r1, [sp, #20]
 8010de0:	462b      	mov	r3, r5
 8010de2:	eb00 0e05 	add.w	lr, r0, r5
 8010de6:	210a      	movs	r1, #10
 8010de8:	4573      	cmp	r3, lr
 8010dea:	d113      	bne.n	8010e14 <_strtod_l+0x254>
 8010dec:	182b      	adds	r3, r5, r0
 8010dee:	2b08      	cmp	r3, #8
 8010df0:	f105 0501 	add.w	r5, r5, #1
 8010df4:	4405      	add	r5, r0
 8010df6:	dc1c      	bgt.n	8010e32 <_strtod_l+0x272>
 8010df8:	9907      	ldr	r1, [sp, #28]
 8010dfa:	230a      	movs	r3, #10
 8010dfc:	fb03 2301 	mla	r3, r3, r1, r2
 8010e00:	9307      	str	r3, [sp, #28]
 8010e02:	2300      	movs	r3, #0
 8010e04:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010e06:	1c51      	adds	r1, r2, #1
 8010e08:	9117      	str	r1, [sp, #92]	; 0x5c
 8010e0a:	7852      	ldrb	r2, [r2, #1]
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	e7c9      	b.n	8010da4 <_strtod_l+0x1e4>
 8010e10:	4638      	mov	r0, r7
 8010e12:	e7d2      	b.n	8010dba <_strtod_l+0x1fa>
 8010e14:	2b08      	cmp	r3, #8
 8010e16:	dc04      	bgt.n	8010e22 <_strtod_l+0x262>
 8010e18:	9e07      	ldr	r6, [sp, #28]
 8010e1a:	434e      	muls	r6, r1
 8010e1c:	9607      	str	r6, [sp, #28]
 8010e1e:	3301      	adds	r3, #1
 8010e20:	e7e2      	b.n	8010de8 <_strtod_l+0x228>
 8010e22:	f103 0c01 	add.w	ip, r3, #1
 8010e26:	f1bc 0f10 	cmp.w	ip, #16
 8010e2a:	bfd8      	it	le
 8010e2c:	fb01 f909 	mulle.w	r9, r1, r9
 8010e30:	e7f5      	b.n	8010e1e <_strtod_l+0x25e>
 8010e32:	2d10      	cmp	r5, #16
 8010e34:	bfdc      	itt	le
 8010e36:	230a      	movle	r3, #10
 8010e38:	fb03 2909 	mlale	r9, r3, r9, r2
 8010e3c:	e7e1      	b.n	8010e02 <_strtod_l+0x242>
 8010e3e:	2300      	movs	r3, #0
 8010e40:	9305      	str	r3, [sp, #20]
 8010e42:	2301      	movs	r3, #1
 8010e44:	e77c      	b.n	8010d40 <_strtod_l+0x180>
 8010e46:	f04f 0c00 	mov.w	ip, #0
 8010e4a:	f108 0202 	add.w	r2, r8, #2
 8010e4e:	9217      	str	r2, [sp, #92]	; 0x5c
 8010e50:	f898 2002 	ldrb.w	r2, [r8, #2]
 8010e54:	e785      	b.n	8010d62 <_strtod_l+0x1a2>
 8010e56:	f04f 0c01 	mov.w	ip, #1
 8010e5a:	e7f6      	b.n	8010e4a <_strtod_l+0x28a>
 8010e5c:	080167d8 	.word	0x080167d8
 8010e60:	080164f8 	.word	0x080164f8
 8010e64:	7ff00000 	.word	0x7ff00000
 8010e68:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010e6a:	1c51      	adds	r1, r2, #1
 8010e6c:	9117      	str	r1, [sp, #92]	; 0x5c
 8010e6e:	7852      	ldrb	r2, [r2, #1]
 8010e70:	2a30      	cmp	r2, #48	; 0x30
 8010e72:	d0f9      	beq.n	8010e68 <_strtod_l+0x2a8>
 8010e74:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8010e78:	2908      	cmp	r1, #8
 8010e7a:	f63f af79 	bhi.w	8010d70 <_strtod_l+0x1b0>
 8010e7e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8010e82:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010e84:	9206      	str	r2, [sp, #24]
 8010e86:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010e88:	1c51      	adds	r1, r2, #1
 8010e8a:	9117      	str	r1, [sp, #92]	; 0x5c
 8010e8c:	7852      	ldrb	r2, [r2, #1]
 8010e8e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8010e92:	2e09      	cmp	r6, #9
 8010e94:	d937      	bls.n	8010f06 <_strtod_l+0x346>
 8010e96:	9e06      	ldr	r6, [sp, #24]
 8010e98:	1b89      	subs	r1, r1, r6
 8010e9a:	2908      	cmp	r1, #8
 8010e9c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8010ea0:	dc02      	bgt.n	8010ea8 <_strtod_l+0x2e8>
 8010ea2:	4576      	cmp	r6, lr
 8010ea4:	bfa8      	it	ge
 8010ea6:	4676      	movge	r6, lr
 8010ea8:	f1bc 0f00 	cmp.w	ip, #0
 8010eac:	d000      	beq.n	8010eb0 <_strtod_l+0x2f0>
 8010eae:	4276      	negs	r6, r6
 8010eb0:	2d00      	cmp	r5, #0
 8010eb2:	d14d      	bne.n	8010f50 <_strtod_l+0x390>
 8010eb4:	9904      	ldr	r1, [sp, #16]
 8010eb6:	4301      	orrs	r1, r0
 8010eb8:	f47f aec6 	bne.w	8010c48 <_strtod_l+0x88>
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	f47f aee1 	bne.w	8010c84 <_strtod_l+0xc4>
 8010ec2:	2a69      	cmp	r2, #105	; 0x69
 8010ec4:	d027      	beq.n	8010f16 <_strtod_l+0x356>
 8010ec6:	dc24      	bgt.n	8010f12 <_strtod_l+0x352>
 8010ec8:	2a49      	cmp	r2, #73	; 0x49
 8010eca:	d024      	beq.n	8010f16 <_strtod_l+0x356>
 8010ecc:	2a4e      	cmp	r2, #78	; 0x4e
 8010ece:	f47f aed9 	bne.w	8010c84 <_strtod_l+0xc4>
 8010ed2:	499f      	ldr	r1, [pc, #636]	; (8011150 <_strtod_l+0x590>)
 8010ed4:	a817      	add	r0, sp, #92	; 0x5c
 8010ed6:	f001 feeb 	bl	8012cb0 <__match>
 8010eda:	2800      	cmp	r0, #0
 8010edc:	f43f aed2 	beq.w	8010c84 <_strtod_l+0xc4>
 8010ee0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010ee2:	781b      	ldrb	r3, [r3, #0]
 8010ee4:	2b28      	cmp	r3, #40	; 0x28
 8010ee6:	d12d      	bne.n	8010f44 <_strtod_l+0x384>
 8010ee8:	499a      	ldr	r1, [pc, #616]	; (8011154 <_strtod_l+0x594>)
 8010eea:	aa1a      	add	r2, sp, #104	; 0x68
 8010eec:	a817      	add	r0, sp, #92	; 0x5c
 8010eee:	f001 fef3 	bl	8012cd8 <__hexnan>
 8010ef2:	2805      	cmp	r0, #5
 8010ef4:	d126      	bne.n	8010f44 <_strtod_l+0x384>
 8010ef6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010ef8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8010efc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8010f00:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8010f04:	e6a0      	b.n	8010c48 <_strtod_l+0x88>
 8010f06:	210a      	movs	r1, #10
 8010f08:	fb01 2e0e 	mla	lr, r1, lr, r2
 8010f0c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8010f10:	e7b9      	b.n	8010e86 <_strtod_l+0x2c6>
 8010f12:	2a6e      	cmp	r2, #110	; 0x6e
 8010f14:	e7db      	b.n	8010ece <_strtod_l+0x30e>
 8010f16:	4990      	ldr	r1, [pc, #576]	; (8011158 <_strtod_l+0x598>)
 8010f18:	a817      	add	r0, sp, #92	; 0x5c
 8010f1a:	f001 fec9 	bl	8012cb0 <__match>
 8010f1e:	2800      	cmp	r0, #0
 8010f20:	f43f aeb0 	beq.w	8010c84 <_strtod_l+0xc4>
 8010f24:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010f26:	498d      	ldr	r1, [pc, #564]	; (801115c <_strtod_l+0x59c>)
 8010f28:	3b01      	subs	r3, #1
 8010f2a:	a817      	add	r0, sp, #92	; 0x5c
 8010f2c:	9317      	str	r3, [sp, #92]	; 0x5c
 8010f2e:	f001 febf 	bl	8012cb0 <__match>
 8010f32:	b910      	cbnz	r0, 8010f3a <_strtod_l+0x37a>
 8010f34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010f36:	3301      	adds	r3, #1
 8010f38:	9317      	str	r3, [sp, #92]	; 0x5c
 8010f3a:	f8df b230 	ldr.w	fp, [pc, #560]	; 801116c <_strtod_l+0x5ac>
 8010f3e:	f04f 0a00 	mov.w	sl, #0
 8010f42:	e681      	b.n	8010c48 <_strtod_l+0x88>
 8010f44:	4886      	ldr	r0, [pc, #536]	; (8011160 <_strtod_l+0x5a0>)
 8010f46:	f003 fb37 	bl	80145b8 <nan>
 8010f4a:	ec5b ab10 	vmov	sl, fp, d0
 8010f4e:	e67b      	b.n	8010c48 <_strtod_l+0x88>
 8010f50:	9b05      	ldr	r3, [sp, #20]
 8010f52:	9807      	ldr	r0, [sp, #28]
 8010f54:	1af3      	subs	r3, r6, r3
 8010f56:	2f00      	cmp	r7, #0
 8010f58:	bf08      	it	eq
 8010f5a:	462f      	moveq	r7, r5
 8010f5c:	2d10      	cmp	r5, #16
 8010f5e:	9306      	str	r3, [sp, #24]
 8010f60:	46a8      	mov	r8, r5
 8010f62:	bfa8      	it	ge
 8010f64:	f04f 0810 	movge.w	r8, #16
 8010f68:	f7ef fafc 	bl	8000564 <__aeabi_ui2d>
 8010f6c:	2d09      	cmp	r5, #9
 8010f6e:	4682      	mov	sl, r0
 8010f70:	468b      	mov	fp, r1
 8010f72:	dd13      	ble.n	8010f9c <_strtod_l+0x3dc>
 8010f74:	4b7b      	ldr	r3, [pc, #492]	; (8011164 <_strtod_l+0x5a4>)
 8010f76:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8010f7a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8010f7e:	f7ef fb6b 	bl	8000658 <__aeabi_dmul>
 8010f82:	4682      	mov	sl, r0
 8010f84:	4648      	mov	r0, r9
 8010f86:	468b      	mov	fp, r1
 8010f88:	f7ef faec 	bl	8000564 <__aeabi_ui2d>
 8010f8c:	4602      	mov	r2, r0
 8010f8e:	460b      	mov	r3, r1
 8010f90:	4650      	mov	r0, sl
 8010f92:	4659      	mov	r1, fp
 8010f94:	f7ef f9aa 	bl	80002ec <__adddf3>
 8010f98:	4682      	mov	sl, r0
 8010f9a:	468b      	mov	fp, r1
 8010f9c:	2d0f      	cmp	r5, #15
 8010f9e:	dc38      	bgt.n	8011012 <_strtod_l+0x452>
 8010fa0:	9b06      	ldr	r3, [sp, #24]
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	f43f ae50 	beq.w	8010c48 <_strtod_l+0x88>
 8010fa8:	dd24      	ble.n	8010ff4 <_strtod_l+0x434>
 8010faa:	2b16      	cmp	r3, #22
 8010fac:	dc0b      	bgt.n	8010fc6 <_strtod_l+0x406>
 8010fae:	496d      	ldr	r1, [pc, #436]	; (8011164 <_strtod_l+0x5a4>)
 8010fb0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010fb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010fb8:	4652      	mov	r2, sl
 8010fba:	465b      	mov	r3, fp
 8010fbc:	f7ef fb4c 	bl	8000658 <__aeabi_dmul>
 8010fc0:	4682      	mov	sl, r0
 8010fc2:	468b      	mov	fp, r1
 8010fc4:	e640      	b.n	8010c48 <_strtod_l+0x88>
 8010fc6:	9a06      	ldr	r2, [sp, #24]
 8010fc8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8010fcc:	4293      	cmp	r3, r2
 8010fce:	db20      	blt.n	8011012 <_strtod_l+0x452>
 8010fd0:	4c64      	ldr	r4, [pc, #400]	; (8011164 <_strtod_l+0x5a4>)
 8010fd2:	f1c5 050f 	rsb	r5, r5, #15
 8010fd6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8010fda:	4652      	mov	r2, sl
 8010fdc:	465b      	mov	r3, fp
 8010fde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010fe2:	f7ef fb39 	bl	8000658 <__aeabi_dmul>
 8010fe6:	9b06      	ldr	r3, [sp, #24]
 8010fe8:	1b5d      	subs	r5, r3, r5
 8010fea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8010fee:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010ff2:	e7e3      	b.n	8010fbc <_strtod_l+0x3fc>
 8010ff4:	9b06      	ldr	r3, [sp, #24]
 8010ff6:	3316      	adds	r3, #22
 8010ff8:	db0b      	blt.n	8011012 <_strtod_l+0x452>
 8010ffa:	9b05      	ldr	r3, [sp, #20]
 8010ffc:	1b9e      	subs	r6, r3, r6
 8010ffe:	4b59      	ldr	r3, [pc, #356]	; (8011164 <_strtod_l+0x5a4>)
 8011000:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8011004:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011008:	4650      	mov	r0, sl
 801100a:	4659      	mov	r1, fp
 801100c:	f7ef fc4e 	bl	80008ac <__aeabi_ddiv>
 8011010:	e7d6      	b.n	8010fc0 <_strtod_l+0x400>
 8011012:	9b06      	ldr	r3, [sp, #24]
 8011014:	eba5 0808 	sub.w	r8, r5, r8
 8011018:	4498      	add	r8, r3
 801101a:	f1b8 0f00 	cmp.w	r8, #0
 801101e:	dd74      	ble.n	801110a <_strtod_l+0x54a>
 8011020:	f018 030f 	ands.w	r3, r8, #15
 8011024:	d00a      	beq.n	801103c <_strtod_l+0x47c>
 8011026:	494f      	ldr	r1, [pc, #316]	; (8011164 <_strtod_l+0x5a4>)
 8011028:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801102c:	4652      	mov	r2, sl
 801102e:	465b      	mov	r3, fp
 8011030:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011034:	f7ef fb10 	bl	8000658 <__aeabi_dmul>
 8011038:	4682      	mov	sl, r0
 801103a:	468b      	mov	fp, r1
 801103c:	f038 080f 	bics.w	r8, r8, #15
 8011040:	d04f      	beq.n	80110e2 <_strtod_l+0x522>
 8011042:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8011046:	dd22      	ble.n	801108e <_strtod_l+0x4ce>
 8011048:	2500      	movs	r5, #0
 801104a:	462e      	mov	r6, r5
 801104c:	9507      	str	r5, [sp, #28]
 801104e:	9505      	str	r5, [sp, #20]
 8011050:	2322      	movs	r3, #34	; 0x22
 8011052:	f8df b118 	ldr.w	fp, [pc, #280]	; 801116c <_strtod_l+0x5ac>
 8011056:	6023      	str	r3, [r4, #0]
 8011058:	f04f 0a00 	mov.w	sl, #0
 801105c:	9b07      	ldr	r3, [sp, #28]
 801105e:	2b00      	cmp	r3, #0
 8011060:	f43f adf2 	beq.w	8010c48 <_strtod_l+0x88>
 8011064:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011066:	4620      	mov	r0, r4
 8011068:	f001 ff42 	bl	8012ef0 <_Bfree>
 801106c:	9905      	ldr	r1, [sp, #20]
 801106e:	4620      	mov	r0, r4
 8011070:	f001 ff3e 	bl	8012ef0 <_Bfree>
 8011074:	4631      	mov	r1, r6
 8011076:	4620      	mov	r0, r4
 8011078:	f001 ff3a 	bl	8012ef0 <_Bfree>
 801107c:	9907      	ldr	r1, [sp, #28]
 801107e:	4620      	mov	r0, r4
 8011080:	f001 ff36 	bl	8012ef0 <_Bfree>
 8011084:	4629      	mov	r1, r5
 8011086:	4620      	mov	r0, r4
 8011088:	f001 ff32 	bl	8012ef0 <_Bfree>
 801108c:	e5dc      	b.n	8010c48 <_strtod_l+0x88>
 801108e:	4b36      	ldr	r3, [pc, #216]	; (8011168 <_strtod_l+0x5a8>)
 8011090:	9304      	str	r3, [sp, #16]
 8011092:	2300      	movs	r3, #0
 8011094:	ea4f 1828 	mov.w	r8, r8, asr #4
 8011098:	4650      	mov	r0, sl
 801109a:	4659      	mov	r1, fp
 801109c:	4699      	mov	r9, r3
 801109e:	f1b8 0f01 	cmp.w	r8, #1
 80110a2:	dc21      	bgt.n	80110e8 <_strtod_l+0x528>
 80110a4:	b10b      	cbz	r3, 80110aa <_strtod_l+0x4ea>
 80110a6:	4682      	mov	sl, r0
 80110a8:	468b      	mov	fp, r1
 80110aa:	4b2f      	ldr	r3, [pc, #188]	; (8011168 <_strtod_l+0x5a8>)
 80110ac:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80110b0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80110b4:	4652      	mov	r2, sl
 80110b6:	465b      	mov	r3, fp
 80110b8:	e9d9 0100 	ldrd	r0, r1, [r9]
 80110bc:	f7ef facc 	bl	8000658 <__aeabi_dmul>
 80110c0:	4b2a      	ldr	r3, [pc, #168]	; (801116c <_strtod_l+0x5ac>)
 80110c2:	460a      	mov	r2, r1
 80110c4:	400b      	ands	r3, r1
 80110c6:	492a      	ldr	r1, [pc, #168]	; (8011170 <_strtod_l+0x5b0>)
 80110c8:	428b      	cmp	r3, r1
 80110ca:	4682      	mov	sl, r0
 80110cc:	d8bc      	bhi.n	8011048 <_strtod_l+0x488>
 80110ce:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80110d2:	428b      	cmp	r3, r1
 80110d4:	bf86      	itte	hi
 80110d6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8011174 <_strtod_l+0x5b4>
 80110da:	f04f 3aff 	movhi.w	sl, #4294967295
 80110de:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80110e2:	2300      	movs	r3, #0
 80110e4:	9304      	str	r3, [sp, #16]
 80110e6:	e084      	b.n	80111f2 <_strtod_l+0x632>
 80110e8:	f018 0f01 	tst.w	r8, #1
 80110ec:	d005      	beq.n	80110fa <_strtod_l+0x53a>
 80110ee:	9b04      	ldr	r3, [sp, #16]
 80110f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110f4:	f7ef fab0 	bl	8000658 <__aeabi_dmul>
 80110f8:	2301      	movs	r3, #1
 80110fa:	9a04      	ldr	r2, [sp, #16]
 80110fc:	3208      	adds	r2, #8
 80110fe:	f109 0901 	add.w	r9, r9, #1
 8011102:	ea4f 0868 	mov.w	r8, r8, asr #1
 8011106:	9204      	str	r2, [sp, #16]
 8011108:	e7c9      	b.n	801109e <_strtod_l+0x4de>
 801110a:	d0ea      	beq.n	80110e2 <_strtod_l+0x522>
 801110c:	f1c8 0800 	rsb	r8, r8, #0
 8011110:	f018 020f 	ands.w	r2, r8, #15
 8011114:	d00a      	beq.n	801112c <_strtod_l+0x56c>
 8011116:	4b13      	ldr	r3, [pc, #76]	; (8011164 <_strtod_l+0x5a4>)
 8011118:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801111c:	4650      	mov	r0, sl
 801111e:	4659      	mov	r1, fp
 8011120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011124:	f7ef fbc2 	bl	80008ac <__aeabi_ddiv>
 8011128:	4682      	mov	sl, r0
 801112a:	468b      	mov	fp, r1
 801112c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8011130:	d0d7      	beq.n	80110e2 <_strtod_l+0x522>
 8011132:	f1b8 0f1f 	cmp.w	r8, #31
 8011136:	dd1f      	ble.n	8011178 <_strtod_l+0x5b8>
 8011138:	2500      	movs	r5, #0
 801113a:	462e      	mov	r6, r5
 801113c:	9507      	str	r5, [sp, #28]
 801113e:	9505      	str	r5, [sp, #20]
 8011140:	2322      	movs	r3, #34	; 0x22
 8011142:	f04f 0a00 	mov.w	sl, #0
 8011146:	f04f 0b00 	mov.w	fp, #0
 801114a:	6023      	str	r3, [r4, #0]
 801114c:	e786      	b.n	801105c <_strtod_l+0x49c>
 801114e:	bf00      	nop
 8011150:	080164cd 	.word	0x080164cd
 8011154:	0801650c 	.word	0x0801650c
 8011158:	080164c5 	.word	0x080164c5
 801115c:	080166fc 	.word	0x080166fc
 8011160:	080165f7 	.word	0x080165f7
 8011164:	08016870 	.word	0x08016870
 8011168:	08016848 	.word	0x08016848
 801116c:	7ff00000 	.word	0x7ff00000
 8011170:	7ca00000 	.word	0x7ca00000
 8011174:	7fefffff 	.word	0x7fefffff
 8011178:	f018 0310 	ands.w	r3, r8, #16
 801117c:	bf18      	it	ne
 801117e:	236a      	movne	r3, #106	; 0x6a
 8011180:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8011530 <_strtod_l+0x970>
 8011184:	9304      	str	r3, [sp, #16]
 8011186:	4650      	mov	r0, sl
 8011188:	4659      	mov	r1, fp
 801118a:	2300      	movs	r3, #0
 801118c:	f018 0f01 	tst.w	r8, #1
 8011190:	d004      	beq.n	801119c <_strtod_l+0x5dc>
 8011192:	e9d9 2300 	ldrd	r2, r3, [r9]
 8011196:	f7ef fa5f 	bl	8000658 <__aeabi_dmul>
 801119a:	2301      	movs	r3, #1
 801119c:	ea5f 0868 	movs.w	r8, r8, asr #1
 80111a0:	f109 0908 	add.w	r9, r9, #8
 80111a4:	d1f2      	bne.n	801118c <_strtod_l+0x5cc>
 80111a6:	b10b      	cbz	r3, 80111ac <_strtod_l+0x5ec>
 80111a8:	4682      	mov	sl, r0
 80111aa:	468b      	mov	fp, r1
 80111ac:	9b04      	ldr	r3, [sp, #16]
 80111ae:	b1c3      	cbz	r3, 80111e2 <_strtod_l+0x622>
 80111b0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80111b4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	4659      	mov	r1, fp
 80111bc:	dd11      	ble.n	80111e2 <_strtod_l+0x622>
 80111be:	2b1f      	cmp	r3, #31
 80111c0:	f340 8124 	ble.w	801140c <_strtod_l+0x84c>
 80111c4:	2b34      	cmp	r3, #52	; 0x34
 80111c6:	bfde      	ittt	le
 80111c8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80111cc:	f04f 33ff 	movle.w	r3, #4294967295
 80111d0:	fa03 f202 	lslle.w	r2, r3, r2
 80111d4:	f04f 0a00 	mov.w	sl, #0
 80111d8:	bfcc      	ite	gt
 80111da:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80111de:	ea02 0b01 	andle.w	fp, r2, r1
 80111e2:	2200      	movs	r2, #0
 80111e4:	2300      	movs	r3, #0
 80111e6:	4650      	mov	r0, sl
 80111e8:	4659      	mov	r1, fp
 80111ea:	f7ef fc9d 	bl	8000b28 <__aeabi_dcmpeq>
 80111ee:	2800      	cmp	r0, #0
 80111f0:	d1a2      	bne.n	8011138 <_strtod_l+0x578>
 80111f2:	9b07      	ldr	r3, [sp, #28]
 80111f4:	9300      	str	r3, [sp, #0]
 80111f6:	9908      	ldr	r1, [sp, #32]
 80111f8:	462b      	mov	r3, r5
 80111fa:	463a      	mov	r2, r7
 80111fc:	4620      	mov	r0, r4
 80111fe:	f001 fedf 	bl	8012fc0 <__s2b>
 8011202:	9007      	str	r0, [sp, #28]
 8011204:	2800      	cmp	r0, #0
 8011206:	f43f af1f 	beq.w	8011048 <_strtod_l+0x488>
 801120a:	9b05      	ldr	r3, [sp, #20]
 801120c:	1b9e      	subs	r6, r3, r6
 801120e:	9b06      	ldr	r3, [sp, #24]
 8011210:	2b00      	cmp	r3, #0
 8011212:	bfb4      	ite	lt
 8011214:	4633      	movlt	r3, r6
 8011216:	2300      	movge	r3, #0
 8011218:	930c      	str	r3, [sp, #48]	; 0x30
 801121a:	9b06      	ldr	r3, [sp, #24]
 801121c:	2500      	movs	r5, #0
 801121e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011222:	9312      	str	r3, [sp, #72]	; 0x48
 8011224:	462e      	mov	r6, r5
 8011226:	9b07      	ldr	r3, [sp, #28]
 8011228:	4620      	mov	r0, r4
 801122a:	6859      	ldr	r1, [r3, #4]
 801122c:	f001 fe20 	bl	8012e70 <_Balloc>
 8011230:	9005      	str	r0, [sp, #20]
 8011232:	2800      	cmp	r0, #0
 8011234:	f43f af0c 	beq.w	8011050 <_strtod_l+0x490>
 8011238:	9b07      	ldr	r3, [sp, #28]
 801123a:	691a      	ldr	r2, [r3, #16]
 801123c:	3202      	adds	r2, #2
 801123e:	f103 010c 	add.w	r1, r3, #12
 8011242:	0092      	lsls	r2, r2, #2
 8011244:	300c      	adds	r0, #12
 8011246:	f7fe fd6d 	bl	800fd24 <memcpy>
 801124a:	ec4b ab10 	vmov	d0, sl, fp
 801124e:	aa1a      	add	r2, sp, #104	; 0x68
 8011250:	a919      	add	r1, sp, #100	; 0x64
 8011252:	4620      	mov	r0, r4
 8011254:	f002 f9fa 	bl	801364c <__d2b>
 8011258:	ec4b ab18 	vmov	d8, sl, fp
 801125c:	9018      	str	r0, [sp, #96]	; 0x60
 801125e:	2800      	cmp	r0, #0
 8011260:	f43f aef6 	beq.w	8011050 <_strtod_l+0x490>
 8011264:	2101      	movs	r1, #1
 8011266:	4620      	mov	r0, r4
 8011268:	f001 ff44 	bl	80130f4 <__i2b>
 801126c:	4606      	mov	r6, r0
 801126e:	2800      	cmp	r0, #0
 8011270:	f43f aeee 	beq.w	8011050 <_strtod_l+0x490>
 8011274:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011276:	9904      	ldr	r1, [sp, #16]
 8011278:	2b00      	cmp	r3, #0
 801127a:	bfab      	itete	ge
 801127c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801127e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8011280:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8011282:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8011286:	bfac      	ite	ge
 8011288:	eb03 0902 	addge.w	r9, r3, r2
 801128c:	1ad7      	sublt	r7, r2, r3
 801128e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8011290:	eba3 0801 	sub.w	r8, r3, r1
 8011294:	4490      	add	r8, r2
 8011296:	4ba1      	ldr	r3, [pc, #644]	; (801151c <_strtod_l+0x95c>)
 8011298:	f108 38ff 	add.w	r8, r8, #4294967295
 801129c:	4598      	cmp	r8, r3
 801129e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80112a2:	f280 80c7 	bge.w	8011434 <_strtod_l+0x874>
 80112a6:	eba3 0308 	sub.w	r3, r3, r8
 80112aa:	2b1f      	cmp	r3, #31
 80112ac:	eba2 0203 	sub.w	r2, r2, r3
 80112b0:	f04f 0101 	mov.w	r1, #1
 80112b4:	f300 80b1 	bgt.w	801141a <_strtod_l+0x85a>
 80112b8:	fa01 f303 	lsl.w	r3, r1, r3
 80112bc:	930d      	str	r3, [sp, #52]	; 0x34
 80112be:	2300      	movs	r3, #0
 80112c0:	9308      	str	r3, [sp, #32]
 80112c2:	eb09 0802 	add.w	r8, r9, r2
 80112c6:	9b04      	ldr	r3, [sp, #16]
 80112c8:	45c1      	cmp	r9, r8
 80112ca:	4417      	add	r7, r2
 80112cc:	441f      	add	r7, r3
 80112ce:	464b      	mov	r3, r9
 80112d0:	bfa8      	it	ge
 80112d2:	4643      	movge	r3, r8
 80112d4:	42bb      	cmp	r3, r7
 80112d6:	bfa8      	it	ge
 80112d8:	463b      	movge	r3, r7
 80112da:	2b00      	cmp	r3, #0
 80112dc:	bfc2      	ittt	gt
 80112de:	eba8 0803 	subgt.w	r8, r8, r3
 80112e2:	1aff      	subgt	r7, r7, r3
 80112e4:	eba9 0903 	subgt.w	r9, r9, r3
 80112e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	dd17      	ble.n	801131e <_strtod_l+0x75e>
 80112ee:	4631      	mov	r1, r6
 80112f0:	461a      	mov	r2, r3
 80112f2:	4620      	mov	r0, r4
 80112f4:	f001 ffbe 	bl	8013274 <__pow5mult>
 80112f8:	4606      	mov	r6, r0
 80112fa:	2800      	cmp	r0, #0
 80112fc:	f43f aea8 	beq.w	8011050 <_strtod_l+0x490>
 8011300:	4601      	mov	r1, r0
 8011302:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011304:	4620      	mov	r0, r4
 8011306:	f001 ff0b 	bl	8013120 <__multiply>
 801130a:	900b      	str	r0, [sp, #44]	; 0x2c
 801130c:	2800      	cmp	r0, #0
 801130e:	f43f ae9f 	beq.w	8011050 <_strtod_l+0x490>
 8011312:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011314:	4620      	mov	r0, r4
 8011316:	f001 fdeb 	bl	8012ef0 <_Bfree>
 801131a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801131c:	9318      	str	r3, [sp, #96]	; 0x60
 801131e:	f1b8 0f00 	cmp.w	r8, #0
 8011322:	f300 808c 	bgt.w	801143e <_strtod_l+0x87e>
 8011326:	9b06      	ldr	r3, [sp, #24]
 8011328:	2b00      	cmp	r3, #0
 801132a:	dd08      	ble.n	801133e <_strtod_l+0x77e>
 801132c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801132e:	9905      	ldr	r1, [sp, #20]
 8011330:	4620      	mov	r0, r4
 8011332:	f001 ff9f 	bl	8013274 <__pow5mult>
 8011336:	9005      	str	r0, [sp, #20]
 8011338:	2800      	cmp	r0, #0
 801133a:	f43f ae89 	beq.w	8011050 <_strtod_l+0x490>
 801133e:	2f00      	cmp	r7, #0
 8011340:	dd08      	ble.n	8011354 <_strtod_l+0x794>
 8011342:	9905      	ldr	r1, [sp, #20]
 8011344:	463a      	mov	r2, r7
 8011346:	4620      	mov	r0, r4
 8011348:	f001 ffee 	bl	8013328 <__lshift>
 801134c:	9005      	str	r0, [sp, #20]
 801134e:	2800      	cmp	r0, #0
 8011350:	f43f ae7e 	beq.w	8011050 <_strtod_l+0x490>
 8011354:	f1b9 0f00 	cmp.w	r9, #0
 8011358:	dd08      	ble.n	801136c <_strtod_l+0x7ac>
 801135a:	4631      	mov	r1, r6
 801135c:	464a      	mov	r2, r9
 801135e:	4620      	mov	r0, r4
 8011360:	f001 ffe2 	bl	8013328 <__lshift>
 8011364:	4606      	mov	r6, r0
 8011366:	2800      	cmp	r0, #0
 8011368:	f43f ae72 	beq.w	8011050 <_strtod_l+0x490>
 801136c:	9a05      	ldr	r2, [sp, #20]
 801136e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011370:	4620      	mov	r0, r4
 8011372:	f002 f865 	bl	8013440 <__mdiff>
 8011376:	4605      	mov	r5, r0
 8011378:	2800      	cmp	r0, #0
 801137a:	f43f ae69 	beq.w	8011050 <_strtod_l+0x490>
 801137e:	68c3      	ldr	r3, [r0, #12]
 8011380:	930b      	str	r3, [sp, #44]	; 0x2c
 8011382:	2300      	movs	r3, #0
 8011384:	60c3      	str	r3, [r0, #12]
 8011386:	4631      	mov	r1, r6
 8011388:	f002 f83e 	bl	8013408 <__mcmp>
 801138c:	2800      	cmp	r0, #0
 801138e:	da60      	bge.n	8011452 <_strtod_l+0x892>
 8011390:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011392:	ea53 030a 	orrs.w	r3, r3, sl
 8011396:	f040 8082 	bne.w	801149e <_strtod_l+0x8de>
 801139a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d17d      	bne.n	801149e <_strtod_l+0x8de>
 80113a2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80113a6:	0d1b      	lsrs	r3, r3, #20
 80113a8:	051b      	lsls	r3, r3, #20
 80113aa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80113ae:	d976      	bls.n	801149e <_strtod_l+0x8de>
 80113b0:	696b      	ldr	r3, [r5, #20]
 80113b2:	b913      	cbnz	r3, 80113ba <_strtod_l+0x7fa>
 80113b4:	692b      	ldr	r3, [r5, #16]
 80113b6:	2b01      	cmp	r3, #1
 80113b8:	dd71      	ble.n	801149e <_strtod_l+0x8de>
 80113ba:	4629      	mov	r1, r5
 80113bc:	2201      	movs	r2, #1
 80113be:	4620      	mov	r0, r4
 80113c0:	f001 ffb2 	bl	8013328 <__lshift>
 80113c4:	4631      	mov	r1, r6
 80113c6:	4605      	mov	r5, r0
 80113c8:	f002 f81e 	bl	8013408 <__mcmp>
 80113cc:	2800      	cmp	r0, #0
 80113ce:	dd66      	ble.n	801149e <_strtod_l+0x8de>
 80113d0:	9904      	ldr	r1, [sp, #16]
 80113d2:	4a53      	ldr	r2, [pc, #332]	; (8011520 <_strtod_l+0x960>)
 80113d4:	465b      	mov	r3, fp
 80113d6:	2900      	cmp	r1, #0
 80113d8:	f000 8081 	beq.w	80114de <_strtod_l+0x91e>
 80113dc:	ea02 010b 	and.w	r1, r2, fp
 80113e0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80113e4:	dc7b      	bgt.n	80114de <_strtod_l+0x91e>
 80113e6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80113ea:	f77f aea9 	ble.w	8011140 <_strtod_l+0x580>
 80113ee:	4b4d      	ldr	r3, [pc, #308]	; (8011524 <_strtod_l+0x964>)
 80113f0:	4650      	mov	r0, sl
 80113f2:	4659      	mov	r1, fp
 80113f4:	2200      	movs	r2, #0
 80113f6:	f7ef f92f 	bl	8000658 <__aeabi_dmul>
 80113fa:	460b      	mov	r3, r1
 80113fc:	4303      	orrs	r3, r0
 80113fe:	bf08      	it	eq
 8011400:	2322      	moveq	r3, #34	; 0x22
 8011402:	4682      	mov	sl, r0
 8011404:	468b      	mov	fp, r1
 8011406:	bf08      	it	eq
 8011408:	6023      	streq	r3, [r4, #0]
 801140a:	e62b      	b.n	8011064 <_strtod_l+0x4a4>
 801140c:	f04f 32ff 	mov.w	r2, #4294967295
 8011410:	fa02 f303 	lsl.w	r3, r2, r3
 8011414:	ea03 0a0a 	and.w	sl, r3, sl
 8011418:	e6e3      	b.n	80111e2 <_strtod_l+0x622>
 801141a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801141e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8011422:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8011426:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801142a:	fa01 f308 	lsl.w	r3, r1, r8
 801142e:	9308      	str	r3, [sp, #32]
 8011430:	910d      	str	r1, [sp, #52]	; 0x34
 8011432:	e746      	b.n	80112c2 <_strtod_l+0x702>
 8011434:	2300      	movs	r3, #0
 8011436:	9308      	str	r3, [sp, #32]
 8011438:	2301      	movs	r3, #1
 801143a:	930d      	str	r3, [sp, #52]	; 0x34
 801143c:	e741      	b.n	80112c2 <_strtod_l+0x702>
 801143e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011440:	4642      	mov	r2, r8
 8011442:	4620      	mov	r0, r4
 8011444:	f001 ff70 	bl	8013328 <__lshift>
 8011448:	9018      	str	r0, [sp, #96]	; 0x60
 801144a:	2800      	cmp	r0, #0
 801144c:	f47f af6b 	bne.w	8011326 <_strtod_l+0x766>
 8011450:	e5fe      	b.n	8011050 <_strtod_l+0x490>
 8011452:	465f      	mov	r7, fp
 8011454:	d16e      	bne.n	8011534 <_strtod_l+0x974>
 8011456:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011458:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801145c:	b342      	cbz	r2, 80114b0 <_strtod_l+0x8f0>
 801145e:	4a32      	ldr	r2, [pc, #200]	; (8011528 <_strtod_l+0x968>)
 8011460:	4293      	cmp	r3, r2
 8011462:	d128      	bne.n	80114b6 <_strtod_l+0x8f6>
 8011464:	9b04      	ldr	r3, [sp, #16]
 8011466:	4651      	mov	r1, sl
 8011468:	b1eb      	cbz	r3, 80114a6 <_strtod_l+0x8e6>
 801146a:	4b2d      	ldr	r3, [pc, #180]	; (8011520 <_strtod_l+0x960>)
 801146c:	403b      	ands	r3, r7
 801146e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011472:	f04f 32ff 	mov.w	r2, #4294967295
 8011476:	d819      	bhi.n	80114ac <_strtod_l+0x8ec>
 8011478:	0d1b      	lsrs	r3, r3, #20
 801147a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801147e:	fa02 f303 	lsl.w	r3, r2, r3
 8011482:	4299      	cmp	r1, r3
 8011484:	d117      	bne.n	80114b6 <_strtod_l+0x8f6>
 8011486:	4b29      	ldr	r3, [pc, #164]	; (801152c <_strtod_l+0x96c>)
 8011488:	429f      	cmp	r7, r3
 801148a:	d102      	bne.n	8011492 <_strtod_l+0x8d2>
 801148c:	3101      	adds	r1, #1
 801148e:	f43f addf 	beq.w	8011050 <_strtod_l+0x490>
 8011492:	4b23      	ldr	r3, [pc, #140]	; (8011520 <_strtod_l+0x960>)
 8011494:	403b      	ands	r3, r7
 8011496:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801149a:	f04f 0a00 	mov.w	sl, #0
 801149e:	9b04      	ldr	r3, [sp, #16]
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d1a4      	bne.n	80113ee <_strtod_l+0x82e>
 80114a4:	e5de      	b.n	8011064 <_strtod_l+0x4a4>
 80114a6:	f04f 33ff 	mov.w	r3, #4294967295
 80114aa:	e7ea      	b.n	8011482 <_strtod_l+0x8c2>
 80114ac:	4613      	mov	r3, r2
 80114ae:	e7e8      	b.n	8011482 <_strtod_l+0x8c2>
 80114b0:	ea53 030a 	orrs.w	r3, r3, sl
 80114b4:	d08c      	beq.n	80113d0 <_strtod_l+0x810>
 80114b6:	9b08      	ldr	r3, [sp, #32]
 80114b8:	b1db      	cbz	r3, 80114f2 <_strtod_l+0x932>
 80114ba:	423b      	tst	r3, r7
 80114bc:	d0ef      	beq.n	801149e <_strtod_l+0x8de>
 80114be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80114c0:	9a04      	ldr	r2, [sp, #16]
 80114c2:	4650      	mov	r0, sl
 80114c4:	4659      	mov	r1, fp
 80114c6:	b1c3      	cbz	r3, 80114fa <_strtod_l+0x93a>
 80114c8:	f7ff fb5b 	bl	8010b82 <sulp>
 80114cc:	4602      	mov	r2, r0
 80114ce:	460b      	mov	r3, r1
 80114d0:	ec51 0b18 	vmov	r0, r1, d8
 80114d4:	f7ee ff0a 	bl	80002ec <__adddf3>
 80114d8:	4682      	mov	sl, r0
 80114da:	468b      	mov	fp, r1
 80114dc:	e7df      	b.n	801149e <_strtod_l+0x8de>
 80114de:	4013      	ands	r3, r2
 80114e0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80114e4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80114e8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80114ec:	f04f 3aff 	mov.w	sl, #4294967295
 80114f0:	e7d5      	b.n	801149e <_strtod_l+0x8de>
 80114f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80114f4:	ea13 0f0a 	tst.w	r3, sl
 80114f8:	e7e0      	b.n	80114bc <_strtod_l+0x8fc>
 80114fa:	f7ff fb42 	bl	8010b82 <sulp>
 80114fe:	4602      	mov	r2, r0
 8011500:	460b      	mov	r3, r1
 8011502:	ec51 0b18 	vmov	r0, r1, d8
 8011506:	f7ee feef 	bl	80002e8 <__aeabi_dsub>
 801150a:	2200      	movs	r2, #0
 801150c:	2300      	movs	r3, #0
 801150e:	4682      	mov	sl, r0
 8011510:	468b      	mov	fp, r1
 8011512:	f7ef fb09 	bl	8000b28 <__aeabi_dcmpeq>
 8011516:	2800      	cmp	r0, #0
 8011518:	d0c1      	beq.n	801149e <_strtod_l+0x8de>
 801151a:	e611      	b.n	8011140 <_strtod_l+0x580>
 801151c:	fffffc02 	.word	0xfffffc02
 8011520:	7ff00000 	.word	0x7ff00000
 8011524:	39500000 	.word	0x39500000
 8011528:	000fffff 	.word	0x000fffff
 801152c:	7fefffff 	.word	0x7fefffff
 8011530:	08016520 	.word	0x08016520
 8011534:	4631      	mov	r1, r6
 8011536:	4628      	mov	r0, r5
 8011538:	f002 f8e4 	bl	8013704 <__ratio>
 801153c:	ec59 8b10 	vmov	r8, r9, d0
 8011540:	ee10 0a10 	vmov	r0, s0
 8011544:	2200      	movs	r2, #0
 8011546:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801154a:	4649      	mov	r1, r9
 801154c:	f7ef fb00 	bl	8000b50 <__aeabi_dcmple>
 8011550:	2800      	cmp	r0, #0
 8011552:	d07a      	beq.n	801164a <_strtod_l+0xa8a>
 8011554:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011556:	2b00      	cmp	r3, #0
 8011558:	d04a      	beq.n	80115f0 <_strtod_l+0xa30>
 801155a:	4b95      	ldr	r3, [pc, #596]	; (80117b0 <_strtod_l+0xbf0>)
 801155c:	2200      	movs	r2, #0
 801155e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011562:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80117b0 <_strtod_l+0xbf0>
 8011566:	f04f 0800 	mov.w	r8, #0
 801156a:	4b92      	ldr	r3, [pc, #584]	; (80117b4 <_strtod_l+0xbf4>)
 801156c:	403b      	ands	r3, r7
 801156e:	930d      	str	r3, [sp, #52]	; 0x34
 8011570:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011572:	4b91      	ldr	r3, [pc, #580]	; (80117b8 <_strtod_l+0xbf8>)
 8011574:	429a      	cmp	r2, r3
 8011576:	f040 80b0 	bne.w	80116da <_strtod_l+0xb1a>
 801157a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801157e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8011582:	ec4b ab10 	vmov	d0, sl, fp
 8011586:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801158a:	f001 ffe3 	bl	8013554 <__ulp>
 801158e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011592:	ec53 2b10 	vmov	r2, r3, d0
 8011596:	f7ef f85f 	bl	8000658 <__aeabi_dmul>
 801159a:	4652      	mov	r2, sl
 801159c:	465b      	mov	r3, fp
 801159e:	f7ee fea5 	bl	80002ec <__adddf3>
 80115a2:	460b      	mov	r3, r1
 80115a4:	4983      	ldr	r1, [pc, #524]	; (80117b4 <_strtod_l+0xbf4>)
 80115a6:	4a85      	ldr	r2, [pc, #532]	; (80117bc <_strtod_l+0xbfc>)
 80115a8:	4019      	ands	r1, r3
 80115aa:	4291      	cmp	r1, r2
 80115ac:	4682      	mov	sl, r0
 80115ae:	d960      	bls.n	8011672 <_strtod_l+0xab2>
 80115b0:	ee18 3a90 	vmov	r3, s17
 80115b4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80115b8:	4293      	cmp	r3, r2
 80115ba:	d104      	bne.n	80115c6 <_strtod_l+0xa06>
 80115bc:	ee18 3a10 	vmov	r3, s16
 80115c0:	3301      	adds	r3, #1
 80115c2:	f43f ad45 	beq.w	8011050 <_strtod_l+0x490>
 80115c6:	f8df b200 	ldr.w	fp, [pc, #512]	; 80117c8 <_strtod_l+0xc08>
 80115ca:	f04f 3aff 	mov.w	sl, #4294967295
 80115ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 80115d0:	4620      	mov	r0, r4
 80115d2:	f001 fc8d 	bl	8012ef0 <_Bfree>
 80115d6:	9905      	ldr	r1, [sp, #20]
 80115d8:	4620      	mov	r0, r4
 80115da:	f001 fc89 	bl	8012ef0 <_Bfree>
 80115de:	4631      	mov	r1, r6
 80115e0:	4620      	mov	r0, r4
 80115e2:	f001 fc85 	bl	8012ef0 <_Bfree>
 80115e6:	4629      	mov	r1, r5
 80115e8:	4620      	mov	r0, r4
 80115ea:	f001 fc81 	bl	8012ef0 <_Bfree>
 80115ee:	e61a      	b.n	8011226 <_strtod_l+0x666>
 80115f0:	f1ba 0f00 	cmp.w	sl, #0
 80115f4:	d11b      	bne.n	801162e <_strtod_l+0xa6e>
 80115f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80115fa:	b9f3      	cbnz	r3, 801163a <_strtod_l+0xa7a>
 80115fc:	4b6c      	ldr	r3, [pc, #432]	; (80117b0 <_strtod_l+0xbf0>)
 80115fe:	2200      	movs	r2, #0
 8011600:	4640      	mov	r0, r8
 8011602:	4649      	mov	r1, r9
 8011604:	f7ef fa9a 	bl	8000b3c <__aeabi_dcmplt>
 8011608:	b9d0      	cbnz	r0, 8011640 <_strtod_l+0xa80>
 801160a:	4640      	mov	r0, r8
 801160c:	4649      	mov	r1, r9
 801160e:	4b6c      	ldr	r3, [pc, #432]	; (80117c0 <_strtod_l+0xc00>)
 8011610:	2200      	movs	r2, #0
 8011612:	f7ef f821 	bl	8000658 <__aeabi_dmul>
 8011616:	4680      	mov	r8, r0
 8011618:	4689      	mov	r9, r1
 801161a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801161e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8011622:	9315      	str	r3, [sp, #84]	; 0x54
 8011624:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8011628:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801162c:	e79d      	b.n	801156a <_strtod_l+0x9aa>
 801162e:	f1ba 0f01 	cmp.w	sl, #1
 8011632:	d102      	bne.n	801163a <_strtod_l+0xa7a>
 8011634:	2f00      	cmp	r7, #0
 8011636:	f43f ad83 	beq.w	8011140 <_strtod_l+0x580>
 801163a:	4b62      	ldr	r3, [pc, #392]	; (80117c4 <_strtod_l+0xc04>)
 801163c:	2200      	movs	r2, #0
 801163e:	e78e      	b.n	801155e <_strtod_l+0x99e>
 8011640:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80117c0 <_strtod_l+0xc00>
 8011644:	f04f 0800 	mov.w	r8, #0
 8011648:	e7e7      	b.n	801161a <_strtod_l+0xa5a>
 801164a:	4b5d      	ldr	r3, [pc, #372]	; (80117c0 <_strtod_l+0xc00>)
 801164c:	4640      	mov	r0, r8
 801164e:	4649      	mov	r1, r9
 8011650:	2200      	movs	r2, #0
 8011652:	f7ef f801 	bl	8000658 <__aeabi_dmul>
 8011656:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011658:	4680      	mov	r8, r0
 801165a:	4689      	mov	r9, r1
 801165c:	b933      	cbnz	r3, 801166c <_strtod_l+0xaac>
 801165e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011662:	900e      	str	r0, [sp, #56]	; 0x38
 8011664:	930f      	str	r3, [sp, #60]	; 0x3c
 8011666:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801166a:	e7dd      	b.n	8011628 <_strtod_l+0xa68>
 801166c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8011670:	e7f9      	b.n	8011666 <_strtod_l+0xaa6>
 8011672:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8011676:	9b04      	ldr	r3, [sp, #16]
 8011678:	2b00      	cmp	r3, #0
 801167a:	d1a8      	bne.n	80115ce <_strtod_l+0xa0e>
 801167c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011680:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011682:	0d1b      	lsrs	r3, r3, #20
 8011684:	051b      	lsls	r3, r3, #20
 8011686:	429a      	cmp	r2, r3
 8011688:	d1a1      	bne.n	80115ce <_strtod_l+0xa0e>
 801168a:	4640      	mov	r0, r8
 801168c:	4649      	mov	r1, r9
 801168e:	f7ef fb43 	bl	8000d18 <__aeabi_d2lz>
 8011692:	f7ee ffb3 	bl	80005fc <__aeabi_l2d>
 8011696:	4602      	mov	r2, r0
 8011698:	460b      	mov	r3, r1
 801169a:	4640      	mov	r0, r8
 801169c:	4649      	mov	r1, r9
 801169e:	f7ee fe23 	bl	80002e8 <__aeabi_dsub>
 80116a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80116a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80116a8:	ea43 030a 	orr.w	r3, r3, sl
 80116ac:	4313      	orrs	r3, r2
 80116ae:	4680      	mov	r8, r0
 80116b0:	4689      	mov	r9, r1
 80116b2:	d055      	beq.n	8011760 <_strtod_l+0xba0>
 80116b4:	a336      	add	r3, pc, #216	; (adr r3, 8011790 <_strtod_l+0xbd0>)
 80116b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116ba:	f7ef fa3f 	bl	8000b3c <__aeabi_dcmplt>
 80116be:	2800      	cmp	r0, #0
 80116c0:	f47f acd0 	bne.w	8011064 <_strtod_l+0x4a4>
 80116c4:	a334      	add	r3, pc, #208	; (adr r3, 8011798 <_strtod_l+0xbd8>)
 80116c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116ca:	4640      	mov	r0, r8
 80116cc:	4649      	mov	r1, r9
 80116ce:	f7ef fa53 	bl	8000b78 <__aeabi_dcmpgt>
 80116d2:	2800      	cmp	r0, #0
 80116d4:	f43f af7b 	beq.w	80115ce <_strtod_l+0xa0e>
 80116d8:	e4c4      	b.n	8011064 <_strtod_l+0x4a4>
 80116da:	9b04      	ldr	r3, [sp, #16]
 80116dc:	b333      	cbz	r3, 801172c <_strtod_l+0xb6c>
 80116de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80116e0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80116e4:	d822      	bhi.n	801172c <_strtod_l+0xb6c>
 80116e6:	a32e      	add	r3, pc, #184	; (adr r3, 80117a0 <_strtod_l+0xbe0>)
 80116e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116ec:	4640      	mov	r0, r8
 80116ee:	4649      	mov	r1, r9
 80116f0:	f7ef fa2e 	bl	8000b50 <__aeabi_dcmple>
 80116f4:	b1a0      	cbz	r0, 8011720 <_strtod_l+0xb60>
 80116f6:	4649      	mov	r1, r9
 80116f8:	4640      	mov	r0, r8
 80116fa:	f7ef fa85 	bl	8000c08 <__aeabi_d2uiz>
 80116fe:	2801      	cmp	r0, #1
 8011700:	bf38      	it	cc
 8011702:	2001      	movcc	r0, #1
 8011704:	f7ee ff2e 	bl	8000564 <__aeabi_ui2d>
 8011708:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801170a:	4680      	mov	r8, r0
 801170c:	4689      	mov	r9, r1
 801170e:	bb23      	cbnz	r3, 801175a <_strtod_l+0xb9a>
 8011710:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011714:	9010      	str	r0, [sp, #64]	; 0x40
 8011716:	9311      	str	r3, [sp, #68]	; 0x44
 8011718:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801171c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011720:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011722:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011724:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8011728:	1a9b      	subs	r3, r3, r2
 801172a:	9309      	str	r3, [sp, #36]	; 0x24
 801172c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011730:	eeb0 0a48 	vmov.f32	s0, s16
 8011734:	eef0 0a68 	vmov.f32	s1, s17
 8011738:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801173c:	f001 ff0a 	bl	8013554 <__ulp>
 8011740:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011744:	ec53 2b10 	vmov	r2, r3, d0
 8011748:	f7ee ff86 	bl	8000658 <__aeabi_dmul>
 801174c:	ec53 2b18 	vmov	r2, r3, d8
 8011750:	f7ee fdcc 	bl	80002ec <__adddf3>
 8011754:	4682      	mov	sl, r0
 8011756:	468b      	mov	fp, r1
 8011758:	e78d      	b.n	8011676 <_strtod_l+0xab6>
 801175a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 801175e:	e7db      	b.n	8011718 <_strtod_l+0xb58>
 8011760:	a311      	add	r3, pc, #68	; (adr r3, 80117a8 <_strtod_l+0xbe8>)
 8011762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011766:	f7ef f9e9 	bl	8000b3c <__aeabi_dcmplt>
 801176a:	e7b2      	b.n	80116d2 <_strtod_l+0xb12>
 801176c:	2300      	movs	r3, #0
 801176e:	930a      	str	r3, [sp, #40]	; 0x28
 8011770:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011772:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011774:	6013      	str	r3, [r2, #0]
 8011776:	f7ff ba6b 	b.w	8010c50 <_strtod_l+0x90>
 801177a:	2a65      	cmp	r2, #101	; 0x65
 801177c:	f43f ab5f 	beq.w	8010e3e <_strtod_l+0x27e>
 8011780:	2a45      	cmp	r2, #69	; 0x45
 8011782:	f43f ab5c 	beq.w	8010e3e <_strtod_l+0x27e>
 8011786:	2301      	movs	r3, #1
 8011788:	f7ff bb94 	b.w	8010eb4 <_strtod_l+0x2f4>
 801178c:	f3af 8000 	nop.w
 8011790:	94a03595 	.word	0x94a03595
 8011794:	3fdfffff 	.word	0x3fdfffff
 8011798:	35afe535 	.word	0x35afe535
 801179c:	3fe00000 	.word	0x3fe00000
 80117a0:	ffc00000 	.word	0xffc00000
 80117a4:	41dfffff 	.word	0x41dfffff
 80117a8:	94a03595 	.word	0x94a03595
 80117ac:	3fcfffff 	.word	0x3fcfffff
 80117b0:	3ff00000 	.word	0x3ff00000
 80117b4:	7ff00000 	.word	0x7ff00000
 80117b8:	7fe00000 	.word	0x7fe00000
 80117bc:	7c9fffff 	.word	0x7c9fffff
 80117c0:	3fe00000 	.word	0x3fe00000
 80117c4:	bff00000 	.word	0xbff00000
 80117c8:	7fefffff 	.word	0x7fefffff

080117cc <_strtod_r>:
 80117cc:	4b01      	ldr	r3, [pc, #4]	; (80117d4 <_strtod_r+0x8>)
 80117ce:	f7ff b9f7 	b.w	8010bc0 <_strtod_l>
 80117d2:	bf00      	nop
 80117d4:	200004a0 	.word	0x200004a0

080117d8 <strtok>:
 80117d8:	4b16      	ldr	r3, [pc, #88]	; (8011834 <strtok+0x5c>)
 80117da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80117dc:	681e      	ldr	r6, [r3, #0]
 80117de:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80117e0:	4605      	mov	r5, r0
 80117e2:	b9fc      	cbnz	r4, 8011824 <strtok+0x4c>
 80117e4:	2050      	movs	r0, #80	; 0x50
 80117e6:	9101      	str	r1, [sp, #4]
 80117e8:	f001 fb28 	bl	8012e3c <malloc>
 80117ec:	9901      	ldr	r1, [sp, #4]
 80117ee:	65b0      	str	r0, [r6, #88]	; 0x58
 80117f0:	4602      	mov	r2, r0
 80117f2:	b920      	cbnz	r0, 80117fe <strtok+0x26>
 80117f4:	4b10      	ldr	r3, [pc, #64]	; (8011838 <strtok+0x60>)
 80117f6:	4811      	ldr	r0, [pc, #68]	; (801183c <strtok+0x64>)
 80117f8:	2157      	movs	r1, #87	; 0x57
 80117fa:	f000 f8df 	bl	80119bc <__assert_func>
 80117fe:	e9c0 4400 	strd	r4, r4, [r0]
 8011802:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8011806:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801180a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 801180e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8011812:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8011816:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801181a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 801181e:	6184      	str	r4, [r0, #24]
 8011820:	7704      	strb	r4, [r0, #28]
 8011822:	6244      	str	r4, [r0, #36]	; 0x24
 8011824:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8011826:	2301      	movs	r3, #1
 8011828:	4628      	mov	r0, r5
 801182a:	b002      	add	sp, #8
 801182c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011830:	f000 b806 	b.w	8011840 <__strtok_r>
 8011834:	20000438 	.word	0x20000438
 8011838:	08016548 	.word	0x08016548
 801183c:	0801655f 	.word	0x0801655f

08011840 <__strtok_r>:
 8011840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011842:	b908      	cbnz	r0, 8011848 <__strtok_r+0x8>
 8011844:	6810      	ldr	r0, [r2, #0]
 8011846:	b188      	cbz	r0, 801186c <__strtok_r+0x2c>
 8011848:	4604      	mov	r4, r0
 801184a:	4620      	mov	r0, r4
 801184c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8011850:	460f      	mov	r7, r1
 8011852:	f817 6b01 	ldrb.w	r6, [r7], #1
 8011856:	b91e      	cbnz	r6, 8011860 <__strtok_r+0x20>
 8011858:	b965      	cbnz	r5, 8011874 <__strtok_r+0x34>
 801185a:	6015      	str	r5, [r2, #0]
 801185c:	4628      	mov	r0, r5
 801185e:	e005      	b.n	801186c <__strtok_r+0x2c>
 8011860:	42b5      	cmp	r5, r6
 8011862:	d1f6      	bne.n	8011852 <__strtok_r+0x12>
 8011864:	2b00      	cmp	r3, #0
 8011866:	d1f0      	bne.n	801184a <__strtok_r+0xa>
 8011868:	6014      	str	r4, [r2, #0]
 801186a:	7003      	strb	r3, [r0, #0]
 801186c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801186e:	461c      	mov	r4, r3
 8011870:	e00c      	b.n	801188c <__strtok_r+0x4c>
 8011872:	b915      	cbnz	r5, 801187a <__strtok_r+0x3a>
 8011874:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011878:	460e      	mov	r6, r1
 801187a:	f816 5b01 	ldrb.w	r5, [r6], #1
 801187e:	42ab      	cmp	r3, r5
 8011880:	d1f7      	bne.n	8011872 <__strtok_r+0x32>
 8011882:	2b00      	cmp	r3, #0
 8011884:	d0f3      	beq.n	801186e <__strtok_r+0x2e>
 8011886:	2300      	movs	r3, #0
 8011888:	f804 3c01 	strb.w	r3, [r4, #-1]
 801188c:	6014      	str	r4, [r2, #0]
 801188e:	e7ed      	b.n	801186c <__strtok_r+0x2c>

08011890 <_strtol_l.constprop.0>:
 8011890:	2b01      	cmp	r3, #1
 8011892:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011896:	d001      	beq.n	801189c <_strtol_l.constprop.0+0xc>
 8011898:	2b24      	cmp	r3, #36	; 0x24
 801189a:	d906      	bls.n	80118aa <_strtol_l.constprop.0+0x1a>
 801189c:	f7fe fa18 	bl	800fcd0 <__errno>
 80118a0:	2316      	movs	r3, #22
 80118a2:	6003      	str	r3, [r0, #0]
 80118a4:	2000      	movs	r0, #0
 80118a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118aa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8011990 <_strtol_l.constprop.0+0x100>
 80118ae:	460d      	mov	r5, r1
 80118b0:	462e      	mov	r6, r5
 80118b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80118b6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80118ba:	f017 0708 	ands.w	r7, r7, #8
 80118be:	d1f7      	bne.n	80118b0 <_strtol_l.constprop.0+0x20>
 80118c0:	2c2d      	cmp	r4, #45	; 0x2d
 80118c2:	d132      	bne.n	801192a <_strtol_l.constprop.0+0x9a>
 80118c4:	782c      	ldrb	r4, [r5, #0]
 80118c6:	2701      	movs	r7, #1
 80118c8:	1cb5      	adds	r5, r6, #2
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d05b      	beq.n	8011986 <_strtol_l.constprop.0+0xf6>
 80118ce:	2b10      	cmp	r3, #16
 80118d0:	d109      	bne.n	80118e6 <_strtol_l.constprop.0+0x56>
 80118d2:	2c30      	cmp	r4, #48	; 0x30
 80118d4:	d107      	bne.n	80118e6 <_strtol_l.constprop.0+0x56>
 80118d6:	782c      	ldrb	r4, [r5, #0]
 80118d8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80118dc:	2c58      	cmp	r4, #88	; 0x58
 80118de:	d14d      	bne.n	801197c <_strtol_l.constprop.0+0xec>
 80118e0:	786c      	ldrb	r4, [r5, #1]
 80118e2:	2310      	movs	r3, #16
 80118e4:	3502      	adds	r5, #2
 80118e6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80118ea:	f108 38ff 	add.w	r8, r8, #4294967295
 80118ee:	f04f 0c00 	mov.w	ip, #0
 80118f2:	fbb8 f9f3 	udiv	r9, r8, r3
 80118f6:	4666      	mov	r6, ip
 80118f8:	fb03 8a19 	mls	sl, r3, r9, r8
 80118fc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8011900:	f1be 0f09 	cmp.w	lr, #9
 8011904:	d816      	bhi.n	8011934 <_strtol_l.constprop.0+0xa4>
 8011906:	4674      	mov	r4, lr
 8011908:	42a3      	cmp	r3, r4
 801190a:	dd24      	ble.n	8011956 <_strtol_l.constprop.0+0xc6>
 801190c:	f1bc 0f00 	cmp.w	ip, #0
 8011910:	db1e      	blt.n	8011950 <_strtol_l.constprop.0+0xc0>
 8011912:	45b1      	cmp	r9, r6
 8011914:	d31c      	bcc.n	8011950 <_strtol_l.constprop.0+0xc0>
 8011916:	d101      	bne.n	801191c <_strtol_l.constprop.0+0x8c>
 8011918:	45a2      	cmp	sl, r4
 801191a:	db19      	blt.n	8011950 <_strtol_l.constprop.0+0xc0>
 801191c:	fb06 4603 	mla	r6, r6, r3, r4
 8011920:	f04f 0c01 	mov.w	ip, #1
 8011924:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011928:	e7e8      	b.n	80118fc <_strtol_l.constprop.0+0x6c>
 801192a:	2c2b      	cmp	r4, #43	; 0x2b
 801192c:	bf04      	itt	eq
 801192e:	782c      	ldrbeq	r4, [r5, #0]
 8011930:	1cb5      	addeq	r5, r6, #2
 8011932:	e7ca      	b.n	80118ca <_strtol_l.constprop.0+0x3a>
 8011934:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8011938:	f1be 0f19 	cmp.w	lr, #25
 801193c:	d801      	bhi.n	8011942 <_strtol_l.constprop.0+0xb2>
 801193e:	3c37      	subs	r4, #55	; 0x37
 8011940:	e7e2      	b.n	8011908 <_strtol_l.constprop.0+0x78>
 8011942:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8011946:	f1be 0f19 	cmp.w	lr, #25
 801194a:	d804      	bhi.n	8011956 <_strtol_l.constprop.0+0xc6>
 801194c:	3c57      	subs	r4, #87	; 0x57
 801194e:	e7db      	b.n	8011908 <_strtol_l.constprop.0+0x78>
 8011950:	f04f 3cff 	mov.w	ip, #4294967295
 8011954:	e7e6      	b.n	8011924 <_strtol_l.constprop.0+0x94>
 8011956:	f1bc 0f00 	cmp.w	ip, #0
 801195a:	da05      	bge.n	8011968 <_strtol_l.constprop.0+0xd8>
 801195c:	2322      	movs	r3, #34	; 0x22
 801195e:	6003      	str	r3, [r0, #0]
 8011960:	4646      	mov	r6, r8
 8011962:	b942      	cbnz	r2, 8011976 <_strtol_l.constprop.0+0xe6>
 8011964:	4630      	mov	r0, r6
 8011966:	e79e      	b.n	80118a6 <_strtol_l.constprop.0+0x16>
 8011968:	b107      	cbz	r7, 801196c <_strtol_l.constprop.0+0xdc>
 801196a:	4276      	negs	r6, r6
 801196c:	2a00      	cmp	r2, #0
 801196e:	d0f9      	beq.n	8011964 <_strtol_l.constprop.0+0xd4>
 8011970:	f1bc 0f00 	cmp.w	ip, #0
 8011974:	d000      	beq.n	8011978 <_strtol_l.constprop.0+0xe8>
 8011976:	1e69      	subs	r1, r5, #1
 8011978:	6011      	str	r1, [r2, #0]
 801197a:	e7f3      	b.n	8011964 <_strtol_l.constprop.0+0xd4>
 801197c:	2430      	movs	r4, #48	; 0x30
 801197e:	2b00      	cmp	r3, #0
 8011980:	d1b1      	bne.n	80118e6 <_strtol_l.constprop.0+0x56>
 8011982:	2308      	movs	r3, #8
 8011984:	e7af      	b.n	80118e6 <_strtol_l.constprop.0+0x56>
 8011986:	2c30      	cmp	r4, #48	; 0x30
 8011988:	d0a5      	beq.n	80118d6 <_strtol_l.constprop.0+0x46>
 801198a:	230a      	movs	r3, #10
 801198c:	e7ab      	b.n	80118e6 <_strtol_l.constprop.0+0x56>
 801198e:	bf00      	nop
 8011990:	080165f9 	.word	0x080165f9

08011994 <_strtol_r>:
 8011994:	f7ff bf7c 	b.w	8011890 <_strtol_l.constprop.0>

08011998 <_write_r>:
 8011998:	b538      	push	{r3, r4, r5, lr}
 801199a:	4d07      	ldr	r5, [pc, #28]	; (80119b8 <_write_r+0x20>)
 801199c:	4604      	mov	r4, r0
 801199e:	4608      	mov	r0, r1
 80119a0:	4611      	mov	r1, r2
 80119a2:	2200      	movs	r2, #0
 80119a4:	602a      	str	r2, [r5, #0]
 80119a6:	461a      	mov	r2, r3
 80119a8:	f7f1 f893 	bl	8002ad2 <_write>
 80119ac:	1c43      	adds	r3, r0, #1
 80119ae:	d102      	bne.n	80119b6 <_write_r+0x1e>
 80119b0:	682b      	ldr	r3, [r5, #0]
 80119b2:	b103      	cbz	r3, 80119b6 <_write_r+0x1e>
 80119b4:	6023      	str	r3, [r4, #0]
 80119b6:	bd38      	pop	{r3, r4, r5, pc}
 80119b8:	2000b4e8 	.word	0x2000b4e8

080119bc <__assert_func>:
 80119bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80119be:	4614      	mov	r4, r2
 80119c0:	461a      	mov	r2, r3
 80119c2:	4b09      	ldr	r3, [pc, #36]	; (80119e8 <__assert_func+0x2c>)
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	4605      	mov	r5, r0
 80119c8:	68d8      	ldr	r0, [r3, #12]
 80119ca:	b14c      	cbz	r4, 80119e0 <__assert_func+0x24>
 80119cc:	4b07      	ldr	r3, [pc, #28]	; (80119ec <__assert_func+0x30>)
 80119ce:	9100      	str	r1, [sp, #0]
 80119d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80119d4:	4906      	ldr	r1, [pc, #24]	; (80119f0 <__assert_func+0x34>)
 80119d6:	462b      	mov	r3, r5
 80119d8:	f000 fe98 	bl	801270c <fiprintf>
 80119dc:	f002 ffcc 	bl	8014978 <abort>
 80119e0:	4b04      	ldr	r3, [pc, #16]	; (80119f4 <__assert_func+0x38>)
 80119e2:	461c      	mov	r4, r3
 80119e4:	e7f3      	b.n	80119ce <__assert_func+0x12>
 80119e6:	bf00      	nop
 80119e8:	20000438 	.word	0x20000438
 80119ec:	080165bc 	.word	0x080165bc
 80119f0:	080165c9 	.word	0x080165c9
 80119f4:	080165f7 	.word	0x080165f7

080119f8 <_close_r>:
 80119f8:	b538      	push	{r3, r4, r5, lr}
 80119fa:	4d06      	ldr	r5, [pc, #24]	; (8011a14 <_close_r+0x1c>)
 80119fc:	2300      	movs	r3, #0
 80119fe:	4604      	mov	r4, r0
 8011a00:	4608      	mov	r0, r1
 8011a02:	602b      	str	r3, [r5, #0]
 8011a04:	f7f1 f881 	bl	8002b0a <_close>
 8011a08:	1c43      	adds	r3, r0, #1
 8011a0a:	d102      	bne.n	8011a12 <_close_r+0x1a>
 8011a0c:	682b      	ldr	r3, [r5, #0]
 8011a0e:	b103      	cbz	r3, 8011a12 <_close_r+0x1a>
 8011a10:	6023      	str	r3, [r4, #0]
 8011a12:	bd38      	pop	{r3, r4, r5, pc}
 8011a14:	2000b4e8 	.word	0x2000b4e8

08011a18 <quorem>:
 8011a18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a1c:	6903      	ldr	r3, [r0, #16]
 8011a1e:	690c      	ldr	r4, [r1, #16]
 8011a20:	42a3      	cmp	r3, r4
 8011a22:	4607      	mov	r7, r0
 8011a24:	f2c0 8081 	blt.w	8011b2a <quorem+0x112>
 8011a28:	3c01      	subs	r4, #1
 8011a2a:	f101 0814 	add.w	r8, r1, #20
 8011a2e:	f100 0514 	add.w	r5, r0, #20
 8011a32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011a36:	9301      	str	r3, [sp, #4]
 8011a38:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011a3c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011a40:	3301      	adds	r3, #1
 8011a42:	429a      	cmp	r2, r3
 8011a44:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011a48:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011a4c:	fbb2 f6f3 	udiv	r6, r2, r3
 8011a50:	d331      	bcc.n	8011ab6 <quorem+0x9e>
 8011a52:	f04f 0e00 	mov.w	lr, #0
 8011a56:	4640      	mov	r0, r8
 8011a58:	46ac      	mov	ip, r5
 8011a5a:	46f2      	mov	sl, lr
 8011a5c:	f850 2b04 	ldr.w	r2, [r0], #4
 8011a60:	b293      	uxth	r3, r2
 8011a62:	fb06 e303 	mla	r3, r6, r3, lr
 8011a66:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8011a6a:	b29b      	uxth	r3, r3
 8011a6c:	ebaa 0303 	sub.w	r3, sl, r3
 8011a70:	f8dc a000 	ldr.w	sl, [ip]
 8011a74:	0c12      	lsrs	r2, r2, #16
 8011a76:	fa13 f38a 	uxtah	r3, r3, sl
 8011a7a:	fb06 e202 	mla	r2, r6, r2, lr
 8011a7e:	9300      	str	r3, [sp, #0]
 8011a80:	9b00      	ldr	r3, [sp, #0]
 8011a82:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011a86:	b292      	uxth	r2, r2
 8011a88:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8011a8c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011a90:	f8bd 3000 	ldrh.w	r3, [sp]
 8011a94:	4581      	cmp	r9, r0
 8011a96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011a9a:	f84c 3b04 	str.w	r3, [ip], #4
 8011a9e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011aa2:	d2db      	bcs.n	8011a5c <quorem+0x44>
 8011aa4:	f855 300b 	ldr.w	r3, [r5, fp]
 8011aa8:	b92b      	cbnz	r3, 8011ab6 <quorem+0x9e>
 8011aaa:	9b01      	ldr	r3, [sp, #4]
 8011aac:	3b04      	subs	r3, #4
 8011aae:	429d      	cmp	r5, r3
 8011ab0:	461a      	mov	r2, r3
 8011ab2:	d32e      	bcc.n	8011b12 <quorem+0xfa>
 8011ab4:	613c      	str	r4, [r7, #16]
 8011ab6:	4638      	mov	r0, r7
 8011ab8:	f001 fca6 	bl	8013408 <__mcmp>
 8011abc:	2800      	cmp	r0, #0
 8011abe:	db24      	blt.n	8011b0a <quorem+0xf2>
 8011ac0:	3601      	adds	r6, #1
 8011ac2:	4628      	mov	r0, r5
 8011ac4:	f04f 0c00 	mov.w	ip, #0
 8011ac8:	f858 2b04 	ldr.w	r2, [r8], #4
 8011acc:	f8d0 e000 	ldr.w	lr, [r0]
 8011ad0:	b293      	uxth	r3, r2
 8011ad2:	ebac 0303 	sub.w	r3, ip, r3
 8011ad6:	0c12      	lsrs	r2, r2, #16
 8011ad8:	fa13 f38e 	uxtah	r3, r3, lr
 8011adc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011ae0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011ae4:	b29b      	uxth	r3, r3
 8011ae6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011aea:	45c1      	cmp	r9, r8
 8011aec:	f840 3b04 	str.w	r3, [r0], #4
 8011af0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011af4:	d2e8      	bcs.n	8011ac8 <quorem+0xb0>
 8011af6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011afa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011afe:	b922      	cbnz	r2, 8011b0a <quorem+0xf2>
 8011b00:	3b04      	subs	r3, #4
 8011b02:	429d      	cmp	r5, r3
 8011b04:	461a      	mov	r2, r3
 8011b06:	d30a      	bcc.n	8011b1e <quorem+0x106>
 8011b08:	613c      	str	r4, [r7, #16]
 8011b0a:	4630      	mov	r0, r6
 8011b0c:	b003      	add	sp, #12
 8011b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b12:	6812      	ldr	r2, [r2, #0]
 8011b14:	3b04      	subs	r3, #4
 8011b16:	2a00      	cmp	r2, #0
 8011b18:	d1cc      	bne.n	8011ab4 <quorem+0x9c>
 8011b1a:	3c01      	subs	r4, #1
 8011b1c:	e7c7      	b.n	8011aae <quorem+0x96>
 8011b1e:	6812      	ldr	r2, [r2, #0]
 8011b20:	3b04      	subs	r3, #4
 8011b22:	2a00      	cmp	r2, #0
 8011b24:	d1f0      	bne.n	8011b08 <quorem+0xf0>
 8011b26:	3c01      	subs	r4, #1
 8011b28:	e7eb      	b.n	8011b02 <quorem+0xea>
 8011b2a:	2000      	movs	r0, #0
 8011b2c:	e7ee      	b.n	8011b0c <quorem+0xf4>
	...

08011b30 <_dtoa_r>:
 8011b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b34:	ed2d 8b04 	vpush	{d8-d9}
 8011b38:	ec57 6b10 	vmov	r6, r7, d0
 8011b3c:	b093      	sub	sp, #76	; 0x4c
 8011b3e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011b40:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011b44:	9106      	str	r1, [sp, #24]
 8011b46:	ee10 aa10 	vmov	sl, s0
 8011b4a:	4604      	mov	r4, r0
 8011b4c:	9209      	str	r2, [sp, #36]	; 0x24
 8011b4e:	930c      	str	r3, [sp, #48]	; 0x30
 8011b50:	46bb      	mov	fp, r7
 8011b52:	b975      	cbnz	r5, 8011b72 <_dtoa_r+0x42>
 8011b54:	2010      	movs	r0, #16
 8011b56:	f001 f971 	bl	8012e3c <malloc>
 8011b5a:	4602      	mov	r2, r0
 8011b5c:	6260      	str	r0, [r4, #36]	; 0x24
 8011b5e:	b920      	cbnz	r0, 8011b6a <_dtoa_r+0x3a>
 8011b60:	4ba7      	ldr	r3, [pc, #668]	; (8011e00 <_dtoa_r+0x2d0>)
 8011b62:	21ea      	movs	r1, #234	; 0xea
 8011b64:	48a7      	ldr	r0, [pc, #668]	; (8011e04 <_dtoa_r+0x2d4>)
 8011b66:	f7ff ff29 	bl	80119bc <__assert_func>
 8011b6a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011b6e:	6005      	str	r5, [r0, #0]
 8011b70:	60c5      	str	r5, [r0, #12]
 8011b72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011b74:	6819      	ldr	r1, [r3, #0]
 8011b76:	b151      	cbz	r1, 8011b8e <_dtoa_r+0x5e>
 8011b78:	685a      	ldr	r2, [r3, #4]
 8011b7a:	604a      	str	r2, [r1, #4]
 8011b7c:	2301      	movs	r3, #1
 8011b7e:	4093      	lsls	r3, r2
 8011b80:	608b      	str	r3, [r1, #8]
 8011b82:	4620      	mov	r0, r4
 8011b84:	f001 f9b4 	bl	8012ef0 <_Bfree>
 8011b88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011b8a:	2200      	movs	r2, #0
 8011b8c:	601a      	str	r2, [r3, #0]
 8011b8e:	1e3b      	subs	r3, r7, #0
 8011b90:	bfaa      	itet	ge
 8011b92:	2300      	movge	r3, #0
 8011b94:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8011b98:	f8c8 3000 	strge.w	r3, [r8]
 8011b9c:	4b9a      	ldr	r3, [pc, #616]	; (8011e08 <_dtoa_r+0x2d8>)
 8011b9e:	bfbc      	itt	lt
 8011ba0:	2201      	movlt	r2, #1
 8011ba2:	f8c8 2000 	strlt.w	r2, [r8]
 8011ba6:	ea33 030b 	bics.w	r3, r3, fp
 8011baa:	d11b      	bne.n	8011be4 <_dtoa_r+0xb4>
 8011bac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011bae:	f242 730f 	movw	r3, #9999	; 0x270f
 8011bb2:	6013      	str	r3, [r2, #0]
 8011bb4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011bb8:	4333      	orrs	r3, r6
 8011bba:	f000 8592 	beq.w	80126e2 <_dtoa_r+0xbb2>
 8011bbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011bc0:	b963      	cbnz	r3, 8011bdc <_dtoa_r+0xac>
 8011bc2:	4b92      	ldr	r3, [pc, #584]	; (8011e0c <_dtoa_r+0x2dc>)
 8011bc4:	e022      	b.n	8011c0c <_dtoa_r+0xdc>
 8011bc6:	4b92      	ldr	r3, [pc, #584]	; (8011e10 <_dtoa_r+0x2e0>)
 8011bc8:	9301      	str	r3, [sp, #4]
 8011bca:	3308      	adds	r3, #8
 8011bcc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011bce:	6013      	str	r3, [r2, #0]
 8011bd0:	9801      	ldr	r0, [sp, #4]
 8011bd2:	b013      	add	sp, #76	; 0x4c
 8011bd4:	ecbd 8b04 	vpop	{d8-d9}
 8011bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bdc:	4b8b      	ldr	r3, [pc, #556]	; (8011e0c <_dtoa_r+0x2dc>)
 8011bde:	9301      	str	r3, [sp, #4]
 8011be0:	3303      	adds	r3, #3
 8011be2:	e7f3      	b.n	8011bcc <_dtoa_r+0x9c>
 8011be4:	2200      	movs	r2, #0
 8011be6:	2300      	movs	r3, #0
 8011be8:	4650      	mov	r0, sl
 8011bea:	4659      	mov	r1, fp
 8011bec:	f7ee ff9c 	bl	8000b28 <__aeabi_dcmpeq>
 8011bf0:	ec4b ab19 	vmov	d9, sl, fp
 8011bf4:	4680      	mov	r8, r0
 8011bf6:	b158      	cbz	r0, 8011c10 <_dtoa_r+0xe0>
 8011bf8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011bfa:	2301      	movs	r3, #1
 8011bfc:	6013      	str	r3, [r2, #0]
 8011bfe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	f000 856b 	beq.w	80126dc <_dtoa_r+0xbac>
 8011c06:	4883      	ldr	r0, [pc, #524]	; (8011e14 <_dtoa_r+0x2e4>)
 8011c08:	6018      	str	r0, [r3, #0]
 8011c0a:	1e43      	subs	r3, r0, #1
 8011c0c:	9301      	str	r3, [sp, #4]
 8011c0e:	e7df      	b.n	8011bd0 <_dtoa_r+0xa0>
 8011c10:	ec4b ab10 	vmov	d0, sl, fp
 8011c14:	aa10      	add	r2, sp, #64	; 0x40
 8011c16:	a911      	add	r1, sp, #68	; 0x44
 8011c18:	4620      	mov	r0, r4
 8011c1a:	f001 fd17 	bl	801364c <__d2b>
 8011c1e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8011c22:	ee08 0a10 	vmov	s16, r0
 8011c26:	2d00      	cmp	r5, #0
 8011c28:	f000 8084 	beq.w	8011d34 <_dtoa_r+0x204>
 8011c2c:	ee19 3a90 	vmov	r3, s19
 8011c30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011c34:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8011c38:	4656      	mov	r6, sl
 8011c3a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8011c3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8011c42:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8011c46:	4b74      	ldr	r3, [pc, #464]	; (8011e18 <_dtoa_r+0x2e8>)
 8011c48:	2200      	movs	r2, #0
 8011c4a:	4630      	mov	r0, r6
 8011c4c:	4639      	mov	r1, r7
 8011c4e:	f7ee fb4b 	bl	80002e8 <__aeabi_dsub>
 8011c52:	a365      	add	r3, pc, #404	; (adr r3, 8011de8 <_dtoa_r+0x2b8>)
 8011c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c58:	f7ee fcfe 	bl	8000658 <__aeabi_dmul>
 8011c5c:	a364      	add	r3, pc, #400	; (adr r3, 8011df0 <_dtoa_r+0x2c0>)
 8011c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c62:	f7ee fb43 	bl	80002ec <__adddf3>
 8011c66:	4606      	mov	r6, r0
 8011c68:	4628      	mov	r0, r5
 8011c6a:	460f      	mov	r7, r1
 8011c6c:	f7ee fc8a 	bl	8000584 <__aeabi_i2d>
 8011c70:	a361      	add	r3, pc, #388	; (adr r3, 8011df8 <_dtoa_r+0x2c8>)
 8011c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c76:	f7ee fcef 	bl	8000658 <__aeabi_dmul>
 8011c7a:	4602      	mov	r2, r0
 8011c7c:	460b      	mov	r3, r1
 8011c7e:	4630      	mov	r0, r6
 8011c80:	4639      	mov	r1, r7
 8011c82:	f7ee fb33 	bl	80002ec <__adddf3>
 8011c86:	4606      	mov	r6, r0
 8011c88:	460f      	mov	r7, r1
 8011c8a:	f7ee ff95 	bl	8000bb8 <__aeabi_d2iz>
 8011c8e:	2200      	movs	r2, #0
 8011c90:	9000      	str	r0, [sp, #0]
 8011c92:	2300      	movs	r3, #0
 8011c94:	4630      	mov	r0, r6
 8011c96:	4639      	mov	r1, r7
 8011c98:	f7ee ff50 	bl	8000b3c <__aeabi_dcmplt>
 8011c9c:	b150      	cbz	r0, 8011cb4 <_dtoa_r+0x184>
 8011c9e:	9800      	ldr	r0, [sp, #0]
 8011ca0:	f7ee fc70 	bl	8000584 <__aeabi_i2d>
 8011ca4:	4632      	mov	r2, r6
 8011ca6:	463b      	mov	r3, r7
 8011ca8:	f7ee ff3e 	bl	8000b28 <__aeabi_dcmpeq>
 8011cac:	b910      	cbnz	r0, 8011cb4 <_dtoa_r+0x184>
 8011cae:	9b00      	ldr	r3, [sp, #0]
 8011cb0:	3b01      	subs	r3, #1
 8011cb2:	9300      	str	r3, [sp, #0]
 8011cb4:	9b00      	ldr	r3, [sp, #0]
 8011cb6:	2b16      	cmp	r3, #22
 8011cb8:	d85a      	bhi.n	8011d70 <_dtoa_r+0x240>
 8011cba:	9a00      	ldr	r2, [sp, #0]
 8011cbc:	4b57      	ldr	r3, [pc, #348]	; (8011e1c <_dtoa_r+0x2ec>)
 8011cbe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cc6:	ec51 0b19 	vmov	r0, r1, d9
 8011cca:	f7ee ff37 	bl	8000b3c <__aeabi_dcmplt>
 8011cce:	2800      	cmp	r0, #0
 8011cd0:	d050      	beq.n	8011d74 <_dtoa_r+0x244>
 8011cd2:	9b00      	ldr	r3, [sp, #0]
 8011cd4:	3b01      	subs	r3, #1
 8011cd6:	9300      	str	r3, [sp, #0]
 8011cd8:	2300      	movs	r3, #0
 8011cda:	930b      	str	r3, [sp, #44]	; 0x2c
 8011cdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011cde:	1b5d      	subs	r5, r3, r5
 8011ce0:	1e6b      	subs	r3, r5, #1
 8011ce2:	9305      	str	r3, [sp, #20]
 8011ce4:	bf45      	ittet	mi
 8011ce6:	f1c5 0301 	rsbmi	r3, r5, #1
 8011cea:	9304      	strmi	r3, [sp, #16]
 8011cec:	2300      	movpl	r3, #0
 8011cee:	2300      	movmi	r3, #0
 8011cf0:	bf4c      	ite	mi
 8011cf2:	9305      	strmi	r3, [sp, #20]
 8011cf4:	9304      	strpl	r3, [sp, #16]
 8011cf6:	9b00      	ldr	r3, [sp, #0]
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	db3d      	blt.n	8011d78 <_dtoa_r+0x248>
 8011cfc:	9b05      	ldr	r3, [sp, #20]
 8011cfe:	9a00      	ldr	r2, [sp, #0]
 8011d00:	920a      	str	r2, [sp, #40]	; 0x28
 8011d02:	4413      	add	r3, r2
 8011d04:	9305      	str	r3, [sp, #20]
 8011d06:	2300      	movs	r3, #0
 8011d08:	9307      	str	r3, [sp, #28]
 8011d0a:	9b06      	ldr	r3, [sp, #24]
 8011d0c:	2b09      	cmp	r3, #9
 8011d0e:	f200 8089 	bhi.w	8011e24 <_dtoa_r+0x2f4>
 8011d12:	2b05      	cmp	r3, #5
 8011d14:	bfc4      	itt	gt
 8011d16:	3b04      	subgt	r3, #4
 8011d18:	9306      	strgt	r3, [sp, #24]
 8011d1a:	9b06      	ldr	r3, [sp, #24]
 8011d1c:	f1a3 0302 	sub.w	r3, r3, #2
 8011d20:	bfcc      	ite	gt
 8011d22:	2500      	movgt	r5, #0
 8011d24:	2501      	movle	r5, #1
 8011d26:	2b03      	cmp	r3, #3
 8011d28:	f200 8087 	bhi.w	8011e3a <_dtoa_r+0x30a>
 8011d2c:	e8df f003 	tbb	[pc, r3]
 8011d30:	59383a2d 	.word	0x59383a2d
 8011d34:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8011d38:	441d      	add	r5, r3
 8011d3a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8011d3e:	2b20      	cmp	r3, #32
 8011d40:	bfc1      	itttt	gt
 8011d42:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8011d46:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8011d4a:	fa0b f303 	lslgt.w	r3, fp, r3
 8011d4e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8011d52:	bfda      	itte	le
 8011d54:	f1c3 0320 	rsble	r3, r3, #32
 8011d58:	fa06 f003 	lslle.w	r0, r6, r3
 8011d5c:	4318      	orrgt	r0, r3
 8011d5e:	f7ee fc01 	bl	8000564 <__aeabi_ui2d>
 8011d62:	2301      	movs	r3, #1
 8011d64:	4606      	mov	r6, r0
 8011d66:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8011d6a:	3d01      	subs	r5, #1
 8011d6c:	930e      	str	r3, [sp, #56]	; 0x38
 8011d6e:	e76a      	b.n	8011c46 <_dtoa_r+0x116>
 8011d70:	2301      	movs	r3, #1
 8011d72:	e7b2      	b.n	8011cda <_dtoa_r+0x1aa>
 8011d74:	900b      	str	r0, [sp, #44]	; 0x2c
 8011d76:	e7b1      	b.n	8011cdc <_dtoa_r+0x1ac>
 8011d78:	9b04      	ldr	r3, [sp, #16]
 8011d7a:	9a00      	ldr	r2, [sp, #0]
 8011d7c:	1a9b      	subs	r3, r3, r2
 8011d7e:	9304      	str	r3, [sp, #16]
 8011d80:	4253      	negs	r3, r2
 8011d82:	9307      	str	r3, [sp, #28]
 8011d84:	2300      	movs	r3, #0
 8011d86:	930a      	str	r3, [sp, #40]	; 0x28
 8011d88:	e7bf      	b.n	8011d0a <_dtoa_r+0x1da>
 8011d8a:	2300      	movs	r3, #0
 8011d8c:	9308      	str	r3, [sp, #32]
 8011d8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	dc55      	bgt.n	8011e40 <_dtoa_r+0x310>
 8011d94:	2301      	movs	r3, #1
 8011d96:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011d9a:	461a      	mov	r2, r3
 8011d9c:	9209      	str	r2, [sp, #36]	; 0x24
 8011d9e:	e00c      	b.n	8011dba <_dtoa_r+0x28a>
 8011da0:	2301      	movs	r3, #1
 8011da2:	e7f3      	b.n	8011d8c <_dtoa_r+0x25c>
 8011da4:	2300      	movs	r3, #0
 8011da6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011da8:	9308      	str	r3, [sp, #32]
 8011daa:	9b00      	ldr	r3, [sp, #0]
 8011dac:	4413      	add	r3, r2
 8011dae:	9302      	str	r3, [sp, #8]
 8011db0:	3301      	adds	r3, #1
 8011db2:	2b01      	cmp	r3, #1
 8011db4:	9303      	str	r3, [sp, #12]
 8011db6:	bfb8      	it	lt
 8011db8:	2301      	movlt	r3, #1
 8011dba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8011dbc:	2200      	movs	r2, #0
 8011dbe:	6042      	str	r2, [r0, #4]
 8011dc0:	2204      	movs	r2, #4
 8011dc2:	f102 0614 	add.w	r6, r2, #20
 8011dc6:	429e      	cmp	r6, r3
 8011dc8:	6841      	ldr	r1, [r0, #4]
 8011dca:	d93d      	bls.n	8011e48 <_dtoa_r+0x318>
 8011dcc:	4620      	mov	r0, r4
 8011dce:	f001 f84f 	bl	8012e70 <_Balloc>
 8011dd2:	9001      	str	r0, [sp, #4]
 8011dd4:	2800      	cmp	r0, #0
 8011dd6:	d13b      	bne.n	8011e50 <_dtoa_r+0x320>
 8011dd8:	4b11      	ldr	r3, [pc, #68]	; (8011e20 <_dtoa_r+0x2f0>)
 8011dda:	4602      	mov	r2, r0
 8011ddc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011de0:	e6c0      	b.n	8011b64 <_dtoa_r+0x34>
 8011de2:	2301      	movs	r3, #1
 8011de4:	e7df      	b.n	8011da6 <_dtoa_r+0x276>
 8011de6:	bf00      	nop
 8011de8:	636f4361 	.word	0x636f4361
 8011dec:	3fd287a7 	.word	0x3fd287a7
 8011df0:	8b60c8b3 	.word	0x8b60c8b3
 8011df4:	3fc68a28 	.word	0x3fc68a28
 8011df8:	509f79fb 	.word	0x509f79fb
 8011dfc:	3fd34413 	.word	0x3fd34413
 8011e00:	08016548 	.word	0x08016548
 8011e04:	08016706 	.word	0x08016706
 8011e08:	7ff00000 	.word	0x7ff00000
 8011e0c:	08016702 	.word	0x08016702
 8011e10:	080166f9 	.word	0x080166f9
 8011e14:	0801695a 	.word	0x0801695a
 8011e18:	3ff80000 	.word	0x3ff80000
 8011e1c:	08016870 	.word	0x08016870
 8011e20:	08016761 	.word	0x08016761
 8011e24:	2501      	movs	r5, #1
 8011e26:	2300      	movs	r3, #0
 8011e28:	9306      	str	r3, [sp, #24]
 8011e2a:	9508      	str	r5, [sp, #32]
 8011e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8011e30:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011e34:	2200      	movs	r2, #0
 8011e36:	2312      	movs	r3, #18
 8011e38:	e7b0      	b.n	8011d9c <_dtoa_r+0x26c>
 8011e3a:	2301      	movs	r3, #1
 8011e3c:	9308      	str	r3, [sp, #32]
 8011e3e:	e7f5      	b.n	8011e2c <_dtoa_r+0x2fc>
 8011e40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e42:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011e46:	e7b8      	b.n	8011dba <_dtoa_r+0x28a>
 8011e48:	3101      	adds	r1, #1
 8011e4a:	6041      	str	r1, [r0, #4]
 8011e4c:	0052      	lsls	r2, r2, #1
 8011e4e:	e7b8      	b.n	8011dc2 <_dtoa_r+0x292>
 8011e50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011e52:	9a01      	ldr	r2, [sp, #4]
 8011e54:	601a      	str	r2, [r3, #0]
 8011e56:	9b03      	ldr	r3, [sp, #12]
 8011e58:	2b0e      	cmp	r3, #14
 8011e5a:	f200 809d 	bhi.w	8011f98 <_dtoa_r+0x468>
 8011e5e:	2d00      	cmp	r5, #0
 8011e60:	f000 809a 	beq.w	8011f98 <_dtoa_r+0x468>
 8011e64:	9b00      	ldr	r3, [sp, #0]
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	dd32      	ble.n	8011ed0 <_dtoa_r+0x3a0>
 8011e6a:	4ab7      	ldr	r2, [pc, #732]	; (8012148 <_dtoa_r+0x618>)
 8011e6c:	f003 030f 	and.w	r3, r3, #15
 8011e70:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011e74:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011e78:	9b00      	ldr	r3, [sp, #0]
 8011e7a:	05d8      	lsls	r0, r3, #23
 8011e7c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8011e80:	d516      	bpl.n	8011eb0 <_dtoa_r+0x380>
 8011e82:	4bb2      	ldr	r3, [pc, #712]	; (801214c <_dtoa_r+0x61c>)
 8011e84:	ec51 0b19 	vmov	r0, r1, d9
 8011e88:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011e8c:	f7ee fd0e 	bl	80008ac <__aeabi_ddiv>
 8011e90:	f007 070f 	and.w	r7, r7, #15
 8011e94:	4682      	mov	sl, r0
 8011e96:	468b      	mov	fp, r1
 8011e98:	2503      	movs	r5, #3
 8011e9a:	4eac      	ldr	r6, [pc, #688]	; (801214c <_dtoa_r+0x61c>)
 8011e9c:	b957      	cbnz	r7, 8011eb4 <_dtoa_r+0x384>
 8011e9e:	4642      	mov	r2, r8
 8011ea0:	464b      	mov	r3, r9
 8011ea2:	4650      	mov	r0, sl
 8011ea4:	4659      	mov	r1, fp
 8011ea6:	f7ee fd01 	bl	80008ac <__aeabi_ddiv>
 8011eaa:	4682      	mov	sl, r0
 8011eac:	468b      	mov	fp, r1
 8011eae:	e028      	b.n	8011f02 <_dtoa_r+0x3d2>
 8011eb0:	2502      	movs	r5, #2
 8011eb2:	e7f2      	b.n	8011e9a <_dtoa_r+0x36a>
 8011eb4:	07f9      	lsls	r1, r7, #31
 8011eb6:	d508      	bpl.n	8011eca <_dtoa_r+0x39a>
 8011eb8:	4640      	mov	r0, r8
 8011eba:	4649      	mov	r1, r9
 8011ebc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011ec0:	f7ee fbca 	bl	8000658 <__aeabi_dmul>
 8011ec4:	3501      	adds	r5, #1
 8011ec6:	4680      	mov	r8, r0
 8011ec8:	4689      	mov	r9, r1
 8011eca:	107f      	asrs	r7, r7, #1
 8011ecc:	3608      	adds	r6, #8
 8011ece:	e7e5      	b.n	8011e9c <_dtoa_r+0x36c>
 8011ed0:	f000 809b 	beq.w	801200a <_dtoa_r+0x4da>
 8011ed4:	9b00      	ldr	r3, [sp, #0]
 8011ed6:	4f9d      	ldr	r7, [pc, #628]	; (801214c <_dtoa_r+0x61c>)
 8011ed8:	425e      	negs	r6, r3
 8011eda:	4b9b      	ldr	r3, [pc, #620]	; (8012148 <_dtoa_r+0x618>)
 8011edc:	f006 020f 	and.w	r2, r6, #15
 8011ee0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ee8:	ec51 0b19 	vmov	r0, r1, d9
 8011eec:	f7ee fbb4 	bl	8000658 <__aeabi_dmul>
 8011ef0:	1136      	asrs	r6, r6, #4
 8011ef2:	4682      	mov	sl, r0
 8011ef4:	468b      	mov	fp, r1
 8011ef6:	2300      	movs	r3, #0
 8011ef8:	2502      	movs	r5, #2
 8011efa:	2e00      	cmp	r6, #0
 8011efc:	d17a      	bne.n	8011ff4 <_dtoa_r+0x4c4>
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d1d3      	bne.n	8011eaa <_dtoa_r+0x37a>
 8011f02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	f000 8082 	beq.w	801200e <_dtoa_r+0x4de>
 8011f0a:	4b91      	ldr	r3, [pc, #580]	; (8012150 <_dtoa_r+0x620>)
 8011f0c:	2200      	movs	r2, #0
 8011f0e:	4650      	mov	r0, sl
 8011f10:	4659      	mov	r1, fp
 8011f12:	f7ee fe13 	bl	8000b3c <__aeabi_dcmplt>
 8011f16:	2800      	cmp	r0, #0
 8011f18:	d079      	beq.n	801200e <_dtoa_r+0x4de>
 8011f1a:	9b03      	ldr	r3, [sp, #12]
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d076      	beq.n	801200e <_dtoa_r+0x4de>
 8011f20:	9b02      	ldr	r3, [sp, #8]
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	dd36      	ble.n	8011f94 <_dtoa_r+0x464>
 8011f26:	9b00      	ldr	r3, [sp, #0]
 8011f28:	4650      	mov	r0, sl
 8011f2a:	4659      	mov	r1, fp
 8011f2c:	1e5f      	subs	r7, r3, #1
 8011f2e:	2200      	movs	r2, #0
 8011f30:	4b88      	ldr	r3, [pc, #544]	; (8012154 <_dtoa_r+0x624>)
 8011f32:	f7ee fb91 	bl	8000658 <__aeabi_dmul>
 8011f36:	9e02      	ldr	r6, [sp, #8]
 8011f38:	4682      	mov	sl, r0
 8011f3a:	468b      	mov	fp, r1
 8011f3c:	3501      	adds	r5, #1
 8011f3e:	4628      	mov	r0, r5
 8011f40:	f7ee fb20 	bl	8000584 <__aeabi_i2d>
 8011f44:	4652      	mov	r2, sl
 8011f46:	465b      	mov	r3, fp
 8011f48:	f7ee fb86 	bl	8000658 <__aeabi_dmul>
 8011f4c:	4b82      	ldr	r3, [pc, #520]	; (8012158 <_dtoa_r+0x628>)
 8011f4e:	2200      	movs	r2, #0
 8011f50:	f7ee f9cc 	bl	80002ec <__adddf3>
 8011f54:	46d0      	mov	r8, sl
 8011f56:	46d9      	mov	r9, fp
 8011f58:	4682      	mov	sl, r0
 8011f5a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8011f5e:	2e00      	cmp	r6, #0
 8011f60:	d158      	bne.n	8012014 <_dtoa_r+0x4e4>
 8011f62:	4b7e      	ldr	r3, [pc, #504]	; (801215c <_dtoa_r+0x62c>)
 8011f64:	2200      	movs	r2, #0
 8011f66:	4640      	mov	r0, r8
 8011f68:	4649      	mov	r1, r9
 8011f6a:	f7ee f9bd 	bl	80002e8 <__aeabi_dsub>
 8011f6e:	4652      	mov	r2, sl
 8011f70:	465b      	mov	r3, fp
 8011f72:	4680      	mov	r8, r0
 8011f74:	4689      	mov	r9, r1
 8011f76:	f7ee fdff 	bl	8000b78 <__aeabi_dcmpgt>
 8011f7a:	2800      	cmp	r0, #0
 8011f7c:	f040 8295 	bne.w	80124aa <_dtoa_r+0x97a>
 8011f80:	4652      	mov	r2, sl
 8011f82:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8011f86:	4640      	mov	r0, r8
 8011f88:	4649      	mov	r1, r9
 8011f8a:	f7ee fdd7 	bl	8000b3c <__aeabi_dcmplt>
 8011f8e:	2800      	cmp	r0, #0
 8011f90:	f040 8289 	bne.w	80124a6 <_dtoa_r+0x976>
 8011f94:	ec5b ab19 	vmov	sl, fp, d9
 8011f98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	f2c0 8148 	blt.w	8012230 <_dtoa_r+0x700>
 8011fa0:	9a00      	ldr	r2, [sp, #0]
 8011fa2:	2a0e      	cmp	r2, #14
 8011fa4:	f300 8144 	bgt.w	8012230 <_dtoa_r+0x700>
 8011fa8:	4b67      	ldr	r3, [pc, #412]	; (8012148 <_dtoa_r+0x618>)
 8011faa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011fae:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011fb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	f280 80d5 	bge.w	8012164 <_dtoa_r+0x634>
 8011fba:	9b03      	ldr	r3, [sp, #12]
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	f300 80d1 	bgt.w	8012164 <_dtoa_r+0x634>
 8011fc2:	f040 826f 	bne.w	80124a4 <_dtoa_r+0x974>
 8011fc6:	4b65      	ldr	r3, [pc, #404]	; (801215c <_dtoa_r+0x62c>)
 8011fc8:	2200      	movs	r2, #0
 8011fca:	4640      	mov	r0, r8
 8011fcc:	4649      	mov	r1, r9
 8011fce:	f7ee fb43 	bl	8000658 <__aeabi_dmul>
 8011fd2:	4652      	mov	r2, sl
 8011fd4:	465b      	mov	r3, fp
 8011fd6:	f7ee fdc5 	bl	8000b64 <__aeabi_dcmpge>
 8011fda:	9e03      	ldr	r6, [sp, #12]
 8011fdc:	4637      	mov	r7, r6
 8011fde:	2800      	cmp	r0, #0
 8011fe0:	f040 8245 	bne.w	801246e <_dtoa_r+0x93e>
 8011fe4:	9d01      	ldr	r5, [sp, #4]
 8011fe6:	2331      	movs	r3, #49	; 0x31
 8011fe8:	f805 3b01 	strb.w	r3, [r5], #1
 8011fec:	9b00      	ldr	r3, [sp, #0]
 8011fee:	3301      	adds	r3, #1
 8011ff0:	9300      	str	r3, [sp, #0]
 8011ff2:	e240      	b.n	8012476 <_dtoa_r+0x946>
 8011ff4:	07f2      	lsls	r2, r6, #31
 8011ff6:	d505      	bpl.n	8012004 <_dtoa_r+0x4d4>
 8011ff8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011ffc:	f7ee fb2c 	bl	8000658 <__aeabi_dmul>
 8012000:	3501      	adds	r5, #1
 8012002:	2301      	movs	r3, #1
 8012004:	1076      	asrs	r6, r6, #1
 8012006:	3708      	adds	r7, #8
 8012008:	e777      	b.n	8011efa <_dtoa_r+0x3ca>
 801200a:	2502      	movs	r5, #2
 801200c:	e779      	b.n	8011f02 <_dtoa_r+0x3d2>
 801200e:	9f00      	ldr	r7, [sp, #0]
 8012010:	9e03      	ldr	r6, [sp, #12]
 8012012:	e794      	b.n	8011f3e <_dtoa_r+0x40e>
 8012014:	9901      	ldr	r1, [sp, #4]
 8012016:	4b4c      	ldr	r3, [pc, #304]	; (8012148 <_dtoa_r+0x618>)
 8012018:	4431      	add	r1, r6
 801201a:	910d      	str	r1, [sp, #52]	; 0x34
 801201c:	9908      	ldr	r1, [sp, #32]
 801201e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8012022:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012026:	2900      	cmp	r1, #0
 8012028:	d043      	beq.n	80120b2 <_dtoa_r+0x582>
 801202a:	494d      	ldr	r1, [pc, #308]	; (8012160 <_dtoa_r+0x630>)
 801202c:	2000      	movs	r0, #0
 801202e:	f7ee fc3d 	bl	80008ac <__aeabi_ddiv>
 8012032:	4652      	mov	r2, sl
 8012034:	465b      	mov	r3, fp
 8012036:	f7ee f957 	bl	80002e8 <__aeabi_dsub>
 801203a:	9d01      	ldr	r5, [sp, #4]
 801203c:	4682      	mov	sl, r0
 801203e:	468b      	mov	fp, r1
 8012040:	4649      	mov	r1, r9
 8012042:	4640      	mov	r0, r8
 8012044:	f7ee fdb8 	bl	8000bb8 <__aeabi_d2iz>
 8012048:	4606      	mov	r6, r0
 801204a:	f7ee fa9b 	bl	8000584 <__aeabi_i2d>
 801204e:	4602      	mov	r2, r0
 8012050:	460b      	mov	r3, r1
 8012052:	4640      	mov	r0, r8
 8012054:	4649      	mov	r1, r9
 8012056:	f7ee f947 	bl	80002e8 <__aeabi_dsub>
 801205a:	3630      	adds	r6, #48	; 0x30
 801205c:	f805 6b01 	strb.w	r6, [r5], #1
 8012060:	4652      	mov	r2, sl
 8012062:	465b      	mov	r3, fp
 8012064:	4680      	mov	r8, r0
 8012066:	4689      	mov	r9, r1
 8012068:	f7ee fd68 	bl	8000b3c <__aeabi_dcmplt>
 801206c:	2800      	cmp	r0, #0
 801206e:	d163      	bne.n	8012138 <_dtoa_r+0x608>
 8012070:	4642      	mov	r2, r8
 8012072:	464b      	mov	r3, r9
 8012074:	4936      	ldr	r1, [pc, #216]	; (8012150 <_dtoa_r+0x620>)
 8012076:	2000      	movs	r0, #0
 8012078:	f7ee f936 	bl	80002e8 <__aeabi_dsub>
 801207c:	4652      	mov	r2, sl
 801207e:	465b      	mov	r3, fp
 8012080:	f7ee fd5c 	bl	8000b3c <__aeabi_dcmplt>
 8012084:	2800      	cmp	r0, #0
 8012086:	f040 80b5 	bne.w	80121f4 <_dtoa_r+0x6c4>
 801208a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801208c:	429d      	cmp	r5, r3
 801208e:	d081      	beq.n	8011f94 <_dtoa_r+0x464>
 8012090:	4b30      	ldr	r3, [pc, #192]	; (8012154 <_dtoa_r+0x624>)
 8012092:	2200      	movs	r2, #0
 8012094:	4650      	mov	r0, sl
 8012096:	4659      	mov	r1, fp
 8012098:	f7ee fade 	bl	8000658 <__aeabi_dmul>
 801209c:	4b2d      	ldr	r3, [pc, #180]	; (8012154 <_dtoa_r+0x624>)
 801209e:	4682      	mov	sl, r0
 80120a0:	468b      	mov	fp, r1
 80120a2:	4640      	mov	r0, r8
 80120a4:	4649      	mov	r1, r9
 80120a6:	2200      	movs	r2, #0
 80120a8:	f7ee fad6 	bl	8000658 <__aeabi_dmul>
 80120ac:	4680      	mov	r8, r0
 80120ae:	4689      	mov	r9, r1
 80120b0:	e7c6      	b.n	8012040 <_dtoa_r+0x510>
 80120b2:	4650      	mov	r0, sl
 80120b4:	4659      	mov	r1, fp
 80120b6:	f7ee facf 	bl	8000658 <__aeabi_dmul>
 80120ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80120bc:	9d01      	ldr	r5, [sp, #4]
 80120be:	930f      	str	r3, [sp, #60]	; 0x3c
 80120c0:	4682      	mov	sl, r0
 80120c2:	468b      	mov	fp, r1
 80120c4:	4649      	mov	r1, r9
 80120c6:	4640      	mov	r0, r8
 80120c8:	f7ee fd76 	bl	8000bb8 <__aeabi_d2iz>
 80120cc:	4606      	mov	r6, r0
 80120ce:	f7ee fa59 	bl	8000584 <__aeabi_i2d>
 80120d2:	3630      	adds	r6, #48	; 0x30
 80120d4:	4602      	mov	r2, r0
 80120d6:	460b      	mov	r3, r1
 80120d8:	4640      	mov	r0, r8
 80120da:	4649      	mov	r1, r9
 80120dc:	f7ee f904 	bl	80002e8 <__aeabi_dsub>
 80120e0:	f805 6b01 	strb.w	r6, [r5], #1
 80120e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80120e6:	429d      	cmp	r5, r3
 80120e8:	4680      	mov	r8, r0
 80120ea:	4689      	mov	r9, r1
 80120ec:	f04f 0200 	mov.w	r2, #0
 80120f0:	d124      	bne.n	801213c <_dtoa_r+0x60c>
 80120f2:	4b1b      	ldr	r3, [pc, #108]	; (8012160 <_dtoa_r+0x630>)
 80120f4:	4650      	mov	r0, sl
 80120f6:	4659      	mov	r1, fp
 80120f8:	f7ee f8f8 	bl	80002ec <__adddf3>
 80120fc:	4602      	mov	r2, r0
 80120fe:	460b      	mov	r3, r1
 8012100:	4640      	mov	r0, r8
 8012102:	4649      	mov	r1, r9
 8012104:	f7ee fd38 	bl	8000b78 <__aeabi_dcmpgt>
 8012108:	2800      	cmp	r0, #0
 801210a:	d173      	bne.n	80121f4 <_dtoa_r+0x6c4>
 801210c:	4652      	mov	r2, sl
 801210e:	465b      	mov	r3, fp
 8012110:	4913      	ldr	r1, [pc, #76]	; (8012160 <_dtoa_r+0x630>)
 8012112:	2000      	movs	r0, #0
 8012114:	f7ee f8e8 	bl	80002e8 <__aeabi_dsub>
 8012118:	4602      	mov	r2, r0
 801211a:	460b      	mov	r3, r1
 801211c:	4640      	mov	r0, r8
 801211e:	4649      	mov	r1, r9
 8012120:	f7ee fd0c 	bl	8000b3c <__aeabi_dcmplt>
 8012124:	2800      	cmp	r0, #0
 8012126:	f43f af35 	beq.w	8011f94 <_dtoa_r+0x464>
 801212a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801212c:	1e6b      	subs	r3, r5, #1
 801212e:	930f      	str	r3, [sp, #60]	; 0x3c
 8012130:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012134:	2b30      	cmp	r3, #48	; 0x30
 8012136:	d0f8      	beq.n	801212a <_dtoa_r+0x5fa>
 8012138:	9700      	str	r7, [sp, #0]
 801213a:	e049      	b.n	80121d0 <_dtoa_r+0x6a0>
 801213c:	4b05      	ldr	r3, [pc, #20]	; (8012154 <_dtoa_r+0x624>)
 801213e:	f7ee fa8b 	bl	8000658 <__aeabi_dmul>
 8012142:	4680      	mov	r8, r0
 8012144:	4689      	mov	r9, r1
 8012146:	e7bd      	b.n	80120c4 <_dtoa_r+0x594>
 8012148:	08016870 	.word	0x08016870
 801214c:	08016848 	.word	0x08016848
 8012150:	3ff00000 	.word	0x3ff00000
 8012154:	40240000 	.word	0x40240000
 8012158:	401c0000 	.word	0x401c0000
 801215c:	40140000 	.word	0x40140000
 8012160:	3fe00000 	.word	0x3fe00000
 8012164:	9d01      	ldr	r5, [sp, #4]
 8012166:	4656      	mov	r6, sl
 8012168:	465f      	mov	r7, fp
 801216a:	4642      	mov	r2, r8
 801216c:	464b      	mov	r3, r9
 801216e:	4630      	mov	r0, r6
 8012170:	4639      	mov	r1, r7
 8012172:	f7ee fb9b 	bl	80008ac <__aeabi_ddiv>
 8012176:	f7ee fd1f 	bl	8000bb8 <__aeabi_d2iz>
 801217a:	4682      	mov	sl, r0
 801217c:	f7ee fa02 	bl	8000584 <__aeabi_i2d>
 8012180:	4642      	mov	r2, r8
 8012182:	464b      	mov	r3, r9
 8012184:	f7ee fa68 	bl	8000658 <__aeabi_dmul>
 8012188:	4602      	mov	r2, r0
 801218a:	460b      	mov	r3, r1
 801218c:	4630      	mov	r0, r6
 801218e:	4639      	mov	r1, r7
 8012190:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8012194:	f7ee f8a8 	bl	80002e8 <__aeabi_dsub>
 8012198:	f805 6b01 	strb.w	r6, [r5], #1
 801219c:	9e01      	ldr	r6, [sp, #4]
 801219e:	9f03      	ldr	r7, [sp, #12]
 80121a0:	1bae      	subs	r6, r5, r6
 80121a2:	42b7      	cmp	r7, r6
 80121a4:	4602      	mov	r2, r0
 80121a6:	460b      	mov	r3, r1
 80121a8:	d135      	bne.n	8012216 <_dtoa_r+0x6e6>
 80121aa:	f7ee f89f 	bl	80002ec <__adddf3>
 80121ae:	4642      	mov	r2, r8
 80121b0:	464b      	mov	r3, r9
 80121b2:	4606      	mov	r6, r0
 80121b4:	460f      	mov	r7, r1
 80121b6:	f7ee fcdf 	bl	8000b78 <__aeabi_dcmpgt>
 80121ba:	b9d0      	cbnz	r0, 80121f2 <_dtoa_r+0x6c2>
 80121bc:	4642      	mov	r2, r8
 80121be:	464b      	mov	r3, r9
 80121c0:	4630      	mov	r0, r6
 80121c2:	4639      	mov	r1, r7
 80121c4:	f7ee fcb0 	bl	8000b28 <__aeabi_dcmpeq>
 80121c8:	b110      	cbz	r0, 80121d0 <_dtoa_r+0x6a0>
 80121ca:	f01a 0f01 	tst.w	sl, #1
 80121ce:	d110      	bne.n	80121f2 <_dtoa_r+0x6c2>
 80121d0:	4620      	mov	r0, r4
 80121d2:	ee18 1a10 	vmov	r1, s16
 80121d6:	f000 fe8b 	bl	8012ef0 <_Bfree>
 80121da:	2300      	movs	r3, #0
 80121dc:	9800      	ldr	r0, [sp, #0]
 80121de:	702b      	strb	r3, [r5, #0]
 80121e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80121e2:	3001      	adds	r0, #1
 80121e4:	6018      	str	r0, [r3, #0]
 80121e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	f43f acf1 	beq.w	8011bd0 <_dtoa_r+0xa0>
 80121ee:	601d      	str	r5, [r3, #0]
 80121f0:	e4ee      	b.n	8011bd0 <_dtoa_r+0xa0>
 80121f2:	9f00      	ldr	r7, [sp, #0]
 80121f4:	462b      	mov	r3, r5
 80121f6:	461d      	mov	r5, r3
 80121f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80121fc:	2a39      	cmp	r2, #57	; 0x39
 80121fe:	d106      	bne.n	801220e <_dtoa_r+0x6de>
 8012200:	9a01      	ldr	r2, [sp, #4]
 8012202:	429a      	cmp	r2, r3
 8012204:	d1f7      	bne.n	80121f6 <_dtoa_r+0x6c6>
 8012206:	9901      	ldr	r1, [sp, #4]
 8012208:	2230      	movs	r2, #48	; 0x30
 801220a:	3701      	adds	r7, #1
 801220c:	700a      	strb	r2, [r1, #0]
 801220e:	781a      	ldrb	r2, [r3, #0]
 8012210:	3201      	adds	r2, #1
 8012212:	701a      	strb	r2, [r3, #0]
 8012214:	e790      	b.n	8012138 <_dtoa_r+0x608>
 8012216:	4ba6      	ldr	r3, [pc, #664]	; (80124b0 <_dtoa_r+0x980>)
 8012218:	2200      	movs	r2, #0
 801221a:	f7ee fa1d 	bl	8000658 <__aeabi_dmul>
 801221e:	2200      	movs	r2, #0
 8012220:	2300      	movs	r3, #0
 8012222:	4606      	mov	r6, r0
 8012224:	460f      	mov	r7, r1
 8012226:	f7ee fc7f 	bl	8000b28 <__aeabi_dcmpeq>
 801222a:	2800      	cmp	r0, #0
 801222c:	d09d      	beq.n	801216a <_dtoa_r+0x63a>
 801222e:	e7cf      	b.n	80121d0 <_dtoa_r+0x6a0>
 8012230:	9a08      	ldr	r2, [sp, #32]
 8012232:	2a00      	cmp	r2, #0
 8012234:	f000 80d7 	beq.w	80123e6 <_dtoa_r+0x8b6>
 8012238:	9a06      	ldr	r2, [sp, #24]
 801223a:	2a01      	cmp	r2, #1
 801223c:	f300 80ba 	bgt.w	80123b4 <_dtoa_r+0x884>
 8012240:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012242:	2a00      	cmp	r2, #0
 8012244:	f000 80b2 	beq.w	80123ac <_dtoa_r+0x87c>
 8012248:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801224c:	9e07      	ldr	r6, [sp, #28]
 801224e:	9d04      	ldr	r5, [sp, #16]
 8012250:	9a04      	ldr	r2, [sp, #16]
 8012252:	441a      	add	r2, r3
 8012254:	9204      	str	r2, [sp, #16]
 8012256:	9a05      	ldr	r2, [sp, #20]
 8012258:	2101      	movs	r1, #1
 801225a:	441a      	add	r2, r3
 801225c:	4620      	mov	r0, r4
 801225e:	9205      	str	r2, [sp, #20]
 8012260:	f000 ff48 	bl	80130f4 <__i2b>
 8012264:	4607      	mov	r7, r0
 8012266:	2d00      	cmp	r5, #0
 8012268:	dd0c      	ble.n	8012284 <_dtoa_r+0x754>
 801226a:	9b05      	ldr	r3, [sp, #20]
 801226c:	2b00      	cmp	r3, #0
 801226e:	dd09      	ble.n	8012284 <_dtoa_r+0x754>
 8012270:	42ab      	cmp	r3, r5
 8012272:	9a04      	ldr	r2, [sp, #16]
 8012274:	bfa8      	it	ge
 8012276:	462b      	movge	r3, r5
 8012278:	1ad2      	subs	r2, r2, r3
 801227a:	9204      	str	r2, [sp, #16]
 801227c:	9a05      	ldr	r2, [sp, #20]
 801227e:	1aed      	subs	r5, r5, r3
 8012280:	1ad3      	subs	r3, r2, r3
 8012282:	9305      	str	r3, [sp, #20]
 8012284:	9b07      	ldr	r3, [sp, #28]
 8012286:	b31b      	cbz	r3, 80122d0 <_dtoa_r+0x7a0>
 8012288:	9b08      	ldr	r3, [sp, #32]
 801228a:	2b00      	cmp	r3, #0
 801228c:	f000 80af 	beq.w	80123ee <_dtoa_r+0x8be>
 8012290:	2e00      	cmp	r6, #0
 8012292:	dd13      	ble.n	80122bc <_dtoa_r+0x78c>
 8012294:	4639      	mov	r1, r7
 8012296:	4632      	mov	r2, r6
 8012298:	4620      	mov	r0, r4
 801229a:	f000 ffeb 	bl	8013274 <__pow5mult>
 801229e:	ee18 2a10 	vmov	r2, s16
 80122a2:	4601      	mov	r1, r0
 80122a4:	4607      	mov	r7, r0
 80122a6:	4620      	mov	r0, r4
 80122a8:	f000 ff3a 	bl	8013120 <__multiply>
 80122ac:	ee18 1a10 	vmov	r1, s16
 80122b0:	4680      	mov	r8, r0
 80122b2:	4620      	mov	r0, r4
 80122b4:	f000 fe1c 	bl	8012ef0 <_Bfree>
 80122b8:	ee08 8a10 	vmov	s16, r8
 80122bc:	9b07      	ldr	r3, [sp, #28]
 80122be:	1b9a      	subs	r2, r3, r6
 80122c0:	d006      	beq.n	80122d0 <_dtoa_r+0x7a0>
 80122c2:	ee18 1a10 	vmov	r1, s16
 80122c6:	4620      	mov	r0, r4
 80122c8:	f000 ffd4 	bl	8013274 <__pow5mult>
 80122cc:	ee08 0a10 	vmov	s16, r0
 80122d0:	2101      	movs	r1, #1
 80122d2:	4620      	mov	r0, r4
 80122d4:	f000 ff0e 	bl	80130f4 <__i2b>
 80122d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80122da:	2b00      	cmp	r3, #0
 80122dc:	4606      	mov	r6, r0
 80122de:	f340 8088 	ble.w	80123f2 <_dtoa_r+0x8c2>
 80122e2:	461a      	mov	r2, r3
 80122e4:	4601      	mov	r1, r0
 80122e6:	4620      	mov	r0, r4
 80122e8:	f000 ffc4 	bl	8013274 <__pow5mult>
 80122ec:	9b06      	ldr	r3, [sp, #24]
 80122ee:	2b01      	cmp	r3, #1
 80122f0:	4606      	mov	r6, r0
 80122f2:	f340 8081 	ble.w	80123f8 <_dtoa_r+0x8c8>
 80122f6:	f04f 0800 	mov.w	r8, #0
 80122fa:	6933      	ldr	r3, [r6, #16]
 80122fc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8012300:	6918      	ldr	r0, [r3, #16]
 8012302:	f000 fea7 	bl	8013054 <__hi0bits>
 8012306:	f1c0 0020 	rsb	r0, r0, #32
 801230a:	9b05      	ldr	r3, [sp, #20]
 801230c:	4418      	add	r0, r3
 801230e:	f010 001f 	ands.w	r0, r0, #31
 8012312:	f000 8092 	beq.w	801243a <_dtoa_r+0x90a>
 8012316:	f1c0 0320 	rsb	r3, r0, #32
 801231a:	2b04      	cmp	r3, #4
 801231c:	f340 808a 	ble.w	8012434 <_dtoa_r+0x904>
 8012320:	f1c0 001c 	rsb	r0, r0, #28
 8012324:	9b04      	ldr	r3, [sp, #16]
 8012326:	4403      	add	r3, r0
 8012328:	9304      	str	r3, [sp, #16]
 801232a:	9b05      	ldr	r3, [sp, #20]
 801232c:	4403      	add	r3, r0
 801232e:	4405      	add	r5, r0
 8012330:	9305      	str	r3, [sp, #20]
 8012332:	9b04      	ldr	r3, [sp, #16]
 8012334:	2b00      	cmp	r3, #0
 8012336:	dd07      	ble.n	8012348 <_dtoa_r+0x818>
 8012338:	ee18 1a10 	vmov	r1, s16
 801233c:	461a      	mov	r2, r3
 801233e:	4620      	mov	r0, r4
 8012340:	f000 fff2 	bl	8013328 <__lshift>
 8012344:	ee08 0a10 	vmov	s16, r0
 8012348:	9b05      	ldr	r3, [sp, #20]
 801234a:	2b00      	cmp	r3, #0
 801234c:	dd05      	ble.n	801235a <_dtoa_r+0x82a>
 801234e:	4631      	mov	r1, r6
 8012350:	461a      	mov	r2, r3
 8012352:	4620      	mov	r0, r4
 8012354:	f000 ffe8 	bl	8013328 <__lshift>
 8012358:	4606      	mov	r6, r0
 801235a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801235c:	2b00      	cmp	r3, #0
 801235e:	d06e      	beq.n	801243e <_dtoa_r+0x90e>
 8012360:	ee18 0a10 	vmov	r0, s16
 8012364:	4631      	mov	r1, r6
 8012366:	f001 f84f 	bl	8013408 <__mcmp>
 801236a:	2800      	cmp	r0, #0
 801236c:	da67      	bge.n	801243e <_dtoa_r+0x90e>
 801236e:	9b00      	ldr	r3, [sp, #0]
 8012370:	3b01      	subs	r3, #1
 8012372:	ee18 1a10 	vmov	r1, s16
 8012376:	9300      	str	r3, [sp, #0]
 8012378:	220a      	movs	r2, #10
 801237a:	2300      	movs	r3, #0
 801237c:	4620      	mov	r0, r4
 801237e:	f000 fdd9 	bl	8012f34 <__multadd>
 8012382:	9b08      	ldr	r3, [sp, #32]
 8012384:	ee08 0a10 	vmov	s16, r0
 8012388:	2b00      	cmp	r3, #0
 801238a:	f000 81b1 	beq.w	80126f0 <_dtoa_r+0xbc0>
 801238e:	2300      	movs	r3, #0
 8012390:	4639      	mov	r1, r7
 8012392:	220a      	movs	r2, #10
 8012394:	4620      	mov	r0, r4
 8012396:	f000 fdcd 	bl	8012f34 <__multadd>
 801239a:	9b02      	ldr	r3, [sp, #8]
 801239c:	2b00      	cmp	r3, #0
 801239e:	4607      	mov	r7, r0
 80123a0:	f300 808e 	bgt.w	80124c0 <_dtoa_r+0x990>
 80123a4:	9b06      	ldr	r3, [sp, #24]
 80123a6:	2b02      	cmp	r3, #2
 80123a8:	dc51      	bgt.n	801244e <_dtoa_r+0x91e>
 80123aa:	e089      	b.n	80124c0 <_dtoa_r+0x990>
 80123ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80123ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80123b2:	e74b      	b.n	801224c <_dtoa_r+0x71c>
 80123b4:	9b03      	ldr	r3, [sp, #12]
 80123b6:	1e5e      	subs	r6, r3, #1
 80123b8:	9b07      	ldr	r3, [sp, #28]
 80123ba:	42b3      	cmp	r3, r6
 80123bc:	bfbf      	itttt	lt
 80123be:	9b07      	ldrlt	r3, [sp, #28]
 80123c0:	9607      	strlt	r6, [sp, #28]
 80123c2:	1af2      	sublt	r2, r6, r3
 80123c4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80123c6:	bfb6      	itet	lt
 80123c8:	189b      	addlt	r3, r3, r2
 80123ca:	1b9e      	subge	r6, r3, r6
 80123cc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80123ce:	9b03      	ldr	r3, [sp, #12]
 80123d0:	bfb8      	it	lt
 80123d2:	2600      	movlt	r6, #0
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	bfb7      	itett	lt
 80123d8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80123dc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80123e0:	1a9d      	sublt	r5, r3, r2
 80123e2:	2300      	movlt	r3, #0
 80123e4:	e734      	b.n	8012250 <_dtoa_r+0x720>
 80123e6:	9e07      	ldr	r6, [sp, #28]
 80123e8:	9d04      	ldr	r5, [sp, #16]
 80123ea:	9f08      	ldr	r7, [sp, #32]
 80123ec:	e73b      	b.n	8012266 <_dtoa_r+0x736>
 80123ee:	9a07      	ldr	r2, [sp, #28]
 80123f0:	e767      	b.n	80122c2 <_dtoa_r+0x792>
 80123f2:	9b06      	ldr	r3, [sp, #24]
 80123f4:	2b01      	cmp	r3, #1
 80123f6:	dc18      	bgt.n	801242a <_dtoa_r+0x8fa>
 80123f8:	f1ba 0f00 	cmp.w	sl, #0
 80123fc:	d115      	bne.n	801242a <_dtoa_r+0x8fa>
 80123fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012402:	b993      	cbnz	r3, 801242a <_dtoa_r+0x8fa>
 8012404:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012408:	0d1b      	lsrs	r3, r3, #20
 801240a:	051b      	lsls	r3, r3, #20
 801240c:	b183      	cbz	r3, 8012430 <_dtoa_r+0x900>
 801240e:	9b04      	ldr	r3, [sp, #16]
 8012410:	3301      	adds	r3, #1
 8012412:	9304      	str	r3, [sp, #16]
 8012414:	9b05      	ldr	r3, [sp, #20]
 8012416:	3301      	adds	r3, #1
 8012418:	9305      	str	r3, [sp, #20]
 801241a:	f04f 0801 	mov.w	r8, #1
 801241e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012420:	2b00      	cmp	r3, #0
 8012422:	f47f af6a 	bne.w	80122fa <_dtoa_r+0x7ca>
 8012426:	2001      	movs	r0, #1
 8012428:	e76f      	b.n	801230a <_dtoa_r+0x7da>
 801242a:	f04f 0800 	mov.w	r8, #0
 801242e:	e7f6      	b.n	801241e <_dtoa_r+0x8ee>
 8012430:	4698      	mov	r8, r3
 8012432:	e7f4      	b.n	801241e <_dtoa_r+0x8ee>
 8012434:	f43f af7d 	beq.w	8012332 <_dtoa_r+0x802>
 8012438:	4618      	mov	r0, r3
 801243a:	301c      	adds	r0, #28
 801243c:	e772      	b.n	8012324 <_dtoa_r+0x7f4>
 801243e:	9b03      	ldr	r3, [sp, #12]
 8012440:	2b00      	cmp	r3, #0
 8012442:	dc37      	bgt.n	80124b4 <_dtoa_r+0x984>
 8012444:	9b06      	ldr	r3, [sp, #24]
 8012446:	2b02      	cmp	r3, #2
 8012448:	dd34      	ble.n	80124b4 <_dtoa_r+0x984>
 801244a:	9b03      	ldr	r3, [sp, #12]
 801244c:	9302      	str	r3, [sp, #8]
 801244e:	9b02      	ldr	r3, [sp, #8]
 8012450:	b96b      	cbnz	r3, 801246e <_dtoa_r+0x93e>
 8012452:	4631      	mov	r1, r6
 8012454:	2205      	movs	r2, #5
 8012456:	4620      	mov	r0, r4
 8012458:	f000 fd6c 	bl	8012f34 <__multadd>
 801245c:	4601      	mov	r1, r0
 801245e:	4606      	mov	r6, r0
 8012460:	ee18 0a10 	vmov	r0, s16
 8012464:	f000 ffd0 	bl	8013408 <__mcmp>
 8012468:	2800      	cmp	r0, #0
 801246a:	f73f adbb 	bgt.w	8011fe4 <_dtoa_r+0x4b4>
 801246e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012470:	9d01      	ldr	r5, [sp, #4]
 8012472:	43db      	mvns	r3, r3
 8012474:	9300      	str	r3, [sp, #0]
 8012476:	f04f 0800 	mov.w	r8, #0
 801247a:	4631      	mov	r1, r6
 801247c:	4620      	mov	r0, r4
 801247e:	f000 fd37 	bl	8012ef0 <_Bfree>
 8012482:	2f00      	cmp	r7, #0
 8012484:	f43f aea4 	beq.w	80121d0 <_dtoa_r+0x6a0>
 8012488:	f1b8 0f00 	cmp.w	r8, #0
 801248c:	d005      	beq.n	801249a <_dtoa_r+0x96a>
 801248e:	45b8      	cmp	r8, r7
 8012490:	d003      	beq.n	801249a <_dtoa_r+0x96a>
 8012492:	4641      	mov	r1, r8
 8012494:	4620      	mov	r0, r4
 8012496:	f000 fd2b 	bl	8012ef0 <_Bfree>
 801249a:	4639      	mov	r1, r7
 801249c:	4620      	mov	r0, r4
 801249e:	f000 fd27 	bl	8012ef0 <_Bfree>
 80124a2:	e695      	b.n	80121d0 <_dtoa_r+0x6a0>
 80124a4:	2600      	movs	r6, #0
 80124a6:	4637      	mov	r7, r6
 80124a8:	e7e1      	b.n	801246e <_dtoa_r+0x93e>
 80124aa:	9700      	str	r7, [sp, #0]
 80124ac:	4637      	mov	r7, r6
 80124ae:	e599      	b.n	8011fe4 <_dtoa_r+0x4b4>
 80124b0:	40240000 	.word	0x40240000
 80124b4:	9b08      	ldr	r3, [sp, #32]
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	f000 80ca 	beq.w	8012650 <_dtoa_r+0xb20>
 80124bc:	9b03      	ldr	r3, [sp, #12]
 80124be:	9302      	str	r3, [sp, #8]
 80124c0:	2d00      	cmp	r5, #0
 80124c2:	dd05      	ble.n	80124d0 <_dtoa_r+0x9a0>
 80124c4:	4639      	mov	r1, r7
 80124c6:	462a      	mov	r2, r5
 80124c8:	4620      	mov	r0, r4
 80124ca:	f000 ff2d 	bl	8013328 <__lshift>
 80124ce:	4607      	mov	r7, r0
 80124d0:	f1b8 0f00 	cmp.w	r8, #0
 80124d4:	d05b      	beq.n	801258e <_dtoa_r+0xa5e>
 80124d6:	6879      	ldr	r1, [r7, #4]
 80124d8:	4620      	mov	r0, r4
 80124da:	f000 fcc9 	bl	8012e70 <_Balloc>
 80124de:	4605      	mov	r5, r0
 80124e0:	b928      	cbnz	r0, 80124ee <_dtoa_r+0x9be>
 80124e2:	4b87      	ldr	r3, [pc, #540]	; (8012700 <_dtoa_r+0xbd0>)
 80124e4:	4602      	mov	r2, r0
 80124e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80124ea:	f7ff bb3b 	b.w	8011b64 <_dtoa_r+0x34>
 80124ee:	693a      	ldr	r2, [r7, #16]
 80124f0:	3202      	adds	r2, #2
 80124f2:	0092      	lsls	r2, r2, #2
 80124f4:	f107 010c 	add.w	r1, r7, #12
 80124f8:	300c      	adds	r0, #12
 80124fa:	f7fd fc13 	bl	800fd24 <memcpy>
 80124fe:	2201      	movs	r2, #1
 8012500:	4629      	mov	r1, r5
 8012502:	4620      	mov	r0, r4
 8012504:	f000 ff10 	bl	8013328 <__lshift>
 8012508:	9b01      	ldr	r3, [sp, #4]
 801250a:	f103 0901 	add.w	r9, r3, #1
 801250e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8012512:	4413      	add	r3, r2
 8012514:	9305      	str	r3, [sp, #20]
 8012516:	f00a 0301 	and.w	r3, sl, #1
 801251a:	46b8      	mov	r8, r7
 801251c:	9304      	str	r3, [sp, #16]
 801251e:	4607      	mov	r7, r0
 8012520:	4631      	mov	r1, r6
 8012522:	ee18 0a10 	vmov	r0, s16
 8012526:	f7ff fa77 	bl	8011a18 <quorem>
 801252a:	4641      	mov	r1, r8
 801252c:	9002      	str	r0, [sp, #8]
 801252e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8012532:	ee18 0a10 	vmov	r0, s16
 8012536:	f000 ff67 	bl	8013408 <__mcmp>
 801253a:	463a      	mov	r2, r7
 801253c:	9003      	str	r0, [sp, #12]
 801253e:	4631      	mov	r1, r6
 8012540:	4620      	mov	r0, r4
 8012542:	f000 ff7d 	bl	8013440 <__mdiff>
 8012546:	68c2      	ldr	r2, [r0, #12]
 8012548:	f109 3bff 	add.w	fp, r9, #4294967295
 801254c:	4605      	mov	r5, r0
 801254e:	bb02      	cbnz	r2, 8012592 <_dtoa_r+0xa62>
 8012550:	4601      	mov	r1, r0
 8012552:	ee18 0a10 	vmov	r0, s16
 8012556:	f000 ff57 	bl	8013408 <__mcmp>
 801255a:	4602      	mov	r2, r0
 801255c:	4629      	mov	r1, r5
 801255e:	4620      	mov	r0, r4
 8012560:	9207      	str	r2, [sp, #28]
 8012562:	f000 fcc5 	bl	8012ef0 <_Bfree>
 8012566:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801256a:	ea43 0102 	orr.w	r1, r3, r2
 801256e:	9b04      	ldr	r3, [sp, #16]
 8012570:	430b      	orrs	r3, r1
 8012572:	464d      	mov	r5, r9
 8012574:	d10f      	bne.n	8012596 <_dtoa_r+0xa66>
 8012576:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801257a:	d02a      	beq.n	80125d2 <_dtoa_r+0xaa2>
 801257c:	9b03      	ldr	r3, [sp, #12]
 801257e:	2b00      	cmp	r3, #0
 8012580:	dd02      	ble.n	8012588 <_dtoa_r+0xa58>
 8012582:	9b02      	ldr	r3, [sp, #8]
 8012584:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8012588:	f88b a000 	strb.w	sl, [fp]
 801258c:	e775      	b.n	801247a <_dtoa_r+0x94a>
 801258e:	4638      	mov	r0, r7
 8012590:	e7ba      	b.n	8012508 <_dtoa_r+0x9d8>
 8012592:	2201      	movs	r2, #1
 8012594:	e7e2      	b.n	801255c <_dtoa_r+0xa2c>
 8012596:	9b03      	ldr	r3, [sp, #12]
 8012598:	2b00      	cmp	r3, #0
 801259a:	db04      	blt.n	80125a6 <_dtoa_r+0xa76>
 801259c:	9906      	ldr	r1, [sp, #24]
 801259e:	430b      	orrs	r3, r1
 80125a0:	9904      	ldr	r1, [sp, #16]
 80125a2:	430b      	orrs	r3, r1
 80125a4:	d122      	bne.n	80125ec <_dtoa_r+0xabc>
 80125a6:	2a00      	cmp	r2, #0
 80125a8:	ddee      	ble.n	8012588 <_dtoa_r+0xa58>
 80125aa:	ee18 1a10 	vmov	r1, s16
 80125ae:	2201      	movs	r2, #1
 80125b0:	4620      	mov	r0, r4
 80125b2:	f000 feb9 	bl	8013328 <__lshift>
 80125b6:	4631      	mov	r1, r6
 80125b8:	ee08 0a10 	vmov	s16, r0
 80125bc:	f000 ff24 	bl	8013408 <__mcmp>
 80125c0:	2800      	cmp	r0, #0
 80125c2:	dc03      	bgt.n	80125cc <_dtoa_r+0xa9c>
 80125c4:	d1e0      	bne.n	8012588 <_dtoa_r+0xa58>
 80125c6:	f01a 0f01 	tst.w	sl, #1
 80125ca:	d0dd      	beq.n	8012588 <_dtoa_r+0xa58>
 80125cc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80125d0:	d1d7      	bne.n	8012582 <_dtoa_r+0xa52>
 80125d2:	2339      	movs	r3, #57	; 0x39
 80125d4:	f88b 3000 	strb.w	r3, [fp]
 80125d8:	462b      	mov	r3, r5
 80125da:	461d      	mov	r5, r3
 80125dc:	3b01      	subs	r3, #1
 80125de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80125e2:	2a39      	cmp	r2, #57	; 0x39
 80125e4:	d071      	beq.n	80126ca <_dtoa_r+0xb9a>
 80125e6:	3201      	adds	r2, #1
 80125e8:	701a      	strb	r2, [r3, #0]
 80125ea:	e746      	b.n	801247a <_dtoa_r+0x94a>
 80125ec:	2a00      	cmp	r2, #0
 80125ee:	dd07      	ble.n	8012600 <_dtoa_r+0xad0>
 80125f0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80125f4:	d0ed      	beq.n	80125d2 <_dtoa_r+0xaa2>
 80125f6:	f10a 0301 	add.w	r3, sl, #1
 80125fa:	f88b 3000 	strb.w	r3, [fp]
 80125fe:	e73c      	b.n	801247a <_dtoa_r+0x94a>
 8012600:	9b05      	ldr	r3, [sp, #20]
 8012602:	f809 ac01 	strb.w	sl, [r9, #-1]
 8012606:	4599      	cmp	r9, r3
 8012608:	d047      	beq.n	801269a <_dtoa_r+0xb6a>
 801260a:	ee18 1a10 	vmov	r1, s16
 801260e:	2300      	movs	r3, #0
 8012610:	220a      	movs	r2, #10
 8012612:	4620      	mov	r0, r4
 8012614:	f000 fc8e 	bl	8012f34 <__multadd>
 8012618:	45b8      	cmp	r8, r7
 801261a:	ee08 0a10 	vmov	s16, r0
 801261e:	f04f 0300 	mov.w	r3, #0
 8012622:	f04f 020a 	mov.w	r2, #10
 8012626:	4641      	mov	r1, r8
 8012628:	4620      	mov	r0, r4
 801262a:	d106      	bne.n	801263a <_dtoa_r+0xb0a>
 801262c:	f000 fc82 	bl	8012f34 <__multadd>
 8012630:	4680      	mov	r8, r0
 8012632:	4607      	mov	r7, r0
 8012634:	f109 0901 	add.w	r9, r9, #1
 8012638:	e772      	b.n	8012520 <_dtoa_r+0x9f0>
 801263a:	f000 fc7b 	bl	8012f34 <__multadd>
 801263e:	4639      	mov	r1, r7
 8012640:	4680      	mov	r8, r0
 8012642:	2300      	movs	r3, #0
 8012644:	220a      	movs	r2, #10
 8012646:	4620      	mov	r0, r4
 8012648:	f000 fc74 	bl	8012f34 <__multadd>
 801264c:	4607      	mov	r7, r0
 801264e:	e7f1      	b.n	8012634 <_dtoa_r+0xb04>
 8012650:	9b03      	ldr	r3, [sp, #12]
 8012652:	9302      	str	r3, [sp, #8]
 8012654:	9d01      	ldr	r5, [sp, #4]
 8012656:	ee18 0a10 	vmov	r0, s16
 801265a:	4631      	mov	r1, r6
 801265c:	f7ff f9dc 	bl	8011a18 <quorem>
 8012660:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8012664:	9b01      	ldr	r3, [sp, #4]
 8012666:	f805 ab01 	strb.w	sl, [r5], #1
 801266a:	1aea      	subs	r2, r5, r3
 801266c:	9b02      	ldr	r3, [sp, #8]
 801266e:	4293      	cmp	r3, r2
 8012670:	dd09      	ble.n	8012686 <_dtoa_r+0xb56>
 8012672:	ee18 1a10 	vmov	r1, s16
 8012676:	2300      	movs	r3, #0
 8012678:	220a      	movs	r2, #10
 801267a:	4620      	mov	r0, r4
 801267c:	f000 fc5a 	bl	8012f34 <__multadd>
 8012680:	ee08 0a10 	vmov	s16, r0
 8012684:	e7e7      	b.n	8012656 <_dtoa_r+0xb26>
 8012686:	9b02      	ldr	r3, [sp, #8]
 8012688:	2b00      	cmp	r3, #0
 801268a:	bfc8      	it	gt
 801268c:	461d      	movgt	r5, r3
 801268e:	9b01      	ldr	r3, [sp, #4]
 8012690:	bfd8      	it	le
 8012692:	2501      	movle	r5, #1
 8012694:	441d      	add	r5, r3
 8012696:	f04f 0800 	mov.w	r8, #0
 801269a:	ee18 1a10 	vmov	r1, s16
 801269e:	2201      	movs	r2, #1
 80126a0:	4620      	mov	r0, r4
 80126a2:	f000 fe41 	bl	8013328 <__lshift>
 80126a6:	4631      	mov	r1, r6
 80126a8:	ee08 0a10 	vmov	s16, r0
 80126ac:	f000 feac 	bl	8013408 <__mcmp>
 80126b0:	2800      	cmp	r0, #0
 80126b2:	dc91      	bgt.n	80125d8 <_dtoa_r+0xaa8>
 80126b4:	d102      	bne.n	80126bc <_dtoa_r+0xb8c>
 80126b6:	f01a 0f01 	tst.w	sl, #1
 80126ba:	d18d      	bne.n	80125d8 <_dtoa_r+0xaa8>
 80126bc:	462b      	mov	r3, r5
 80126be:	461d      	mov	r5, r3
 80126c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80126c4:	2a30      	cmp	r2, #48	; 0x30
 80126c6:	d0fa      	beq.n	80126be <_dtoa_r+0xb8e>
 80126c8:	e6d7      	b.n	801247a <_dtoa_r+0x94a>
 80126ca:	9a01      	ldr	r2, [sp, #4]
 80126cc:	429a      	cmp	r2, r3
 80126ce:	d184      	bne.n	80125da <_dtoa_r+0xaaa>
 80126d0:	9b00      	ldr	r3, [sp, #0]
 80126d2:	3301      	adds	r3, #1
 80126d4:	9300      	str	r3, [sp, #0]
 80126d6:	2331      	movs	r3, #49	; 0x31
 80126d8:	7013      	strb	r3, [r2, #0]
 80126da:	e6ce      	b.n	801247a <_dtoa_r+0x94a>
 80126dc:	4b09      	ldr	r3, [pc, #36]	; (8012704 <_dtoa_r+0xbd4>)
 80126de:	f7ff ba95 	b.w	8011c0c <_dtoa_r+0xdc>
 80126e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	f47f aa6e 	bne.w	8011bc6 <_dtoa_r+0x96>
 80126ea:	4b07      	ldr	r3, [pc, #28]	; (8012708 <_dtoa_r+0xbd8>)
 80126ec:	f7ff ba8e 	b.w	8011c0c <_dtoa_r+0xdc>
 80126f0:	9b02      	ldr	r3, [sp, #8]
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	dcae      	bgt.n	8012654 <_dtoa_r+0xb24>
 80126f6:	9b06      	ldr	r3, [sp, #24]
 80126f8:	2b02      	cmp	r3, #2
 80126fa:	f73f aea8 	bgt.w	801244e <_dtoa_r+0x91e>
 80126fe:	e7a9      	b.n	8012654 <_dtoa_r+0xb24>
 8012700:	08016761 	.word	0x08016761
 8012704:	08016959 	.word	0x08016959
 8012708:	080166f9 	.word	0x080166f9

0801270c <fiprintf>:
 801270c:	b40e      	push	{r1, r2, r3}
 801270e:	b503      	push	{r0, r1, lr}
 8012710:	4601      	mov	r1, r0
 8012712:	ab03      	add	r3, sp, #12
 8012714:	4805      	ldr	r0, [pc, #20]	; (801272c <fiprintf+0x20>)
 8012716:	f853 2b04 	ldr.w	r2, [r3], #4
 801271a:	6800      	ldr	r0, [r0, #0]
 801271c:	9301      	str	r3, [sp, #4]
 801271e:	f001 fcb7 	bl	8014090 <_vfiprintf_r>
 8012722:	b002      	add	sp, #8
 8012724:	f85d eb04 	ldr.w	lr, [sp], #4
 8012728:	b003      	add	sp, #12
 801272a:	4770      	bx	lr
 801272c:	20000438 	.word	0x20000438

08012730 <rshift>:
 8012730:	6903      	ldr	r3, [r0, #16]
 8012732:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8012736:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801273a:	ea4f 1261 	mov.w	r2, r1, asr #5
 801273e:	f100 0414 	add.w	r4, r0, #20
 8012742:	dd45      	ble.n	80127d0 <rshift+0xa0>
 8012744:	f011 011f 	ands.w	r1, r1, #31
 8012748:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801274c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8012750:	d10c      	bne.n	801276c <rshift+0x3c>
 8012752:	f100 0710 	add.w	r7, r0, #16
 8012756:	4629      	mov	r1, r5
 8012758:	42b1      	cmp	r1, r6
 801275a:	d334      	bcc.n	80127c6 <rshift+0x96>
 801275c:	1a9b      	subs	r3, r3, r2
 801275e:	009b      	lsls	r3, r3, #2
 8012760:	1eea      	subs	r2, r5, #3
 8012762:	4296      	cmp	r6, r2
 8012764:	bf38      	it	cc
 8012766:	2300      	movcc	r3, #0
 8012768:	4423      	add	r3, r4
 801276a:	e015      	b.n	8012798 <rshift+0x68>
 801276c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8012770:	f1c1 0820 	rsb	r8, r1, #32
 8012774:	40cf      	lsrs	r7, r1
 8012776:	f105 0e04 	add.w	lr, r5, #4
 801277a:	46a1      	mov	r9, r4
 801277c:	4576      	cmp	r6, lr
 801277e:	46f4      	mov	ip, lr
 8012780:	d815      	bhi.n	80127ae <rshift+0x7e>
 8012782:	1a9a      	subs	r2, r3, r2
 8012784:	0092      	lsls	r2, r2, #2
 8012786:	3a04      	subs	r2, #4
 8012788:	3501      	adds	r5, #1
 801278a:	42ae      	cmp	r6, r5
 801278c:	bf38      	it	cc
 801278e:	2200      	movcc	r2, #0
 8012790:	18a3      	adds	r3, r4, r2
 8012792:	50a7      	str	r7, [r4, r2]
 8012794:	b107      	cbz	r7, 8012798 <rshift+0x68>
 8012796:	3304      	adds	r3, #4
 8012798:	1b1a      	subs	r2, r3, r4
 801279a:	42a3      	cmp	r3, r4
 801279c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80127a0:	bf08      	it	eq
 80127a2:	2300      	moveq	r3, #0
 80127a4:	6102      	str	r2, [r0, #16]
 80127a6:	bf08      	it	eq
 80127a8:	6143      	streq	r3, [r0, #20]
 80127aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80127ae:	f8dc c000 	ldr.w	ip, [ip]
 80127b2:	fa0c fc08 	lsl.w	ip, ip, r8
 80127b6:	ea4c 0707 	orr.w	r7, ip, r7
 80127ba:	f849 7b04 	str.w	r7, [r9], #4
 80127be:	f85e 7b04 	ldr.w	r7, [lr], #4
 80127c2:	40cf      	lsrs	r7, r1
 80127c4:	e7da      	b.n	801277c <rshift+0x4c>
 80127c6:	f851 cb04 	ldr.w	ip, [r1], #4
 80127ca:	f847 cf04 	str.w	ip, [r7, #4]!
 80127ce:	e7c3      	b.n	8012758 <rshift+0x28>
 80127d0:	4623      	mov	r3, r4
 80127d2:	e7e1      	b.n	8012798 <rshift+0x68>

080127d4 <__hexdig_fun>:
 80127d4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80127d8:	2b09      	cmp	r3, #9
 80127da:	d802      	bhi.n	80127e2 <__hexdig_fun+0xe>
 80127dc:	3820      	subs	r0, #32
 80127de:	b2c0      	uxtb	r0, r0
 80127e0:	4770      	bx	lr
 80127e2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80127e6:	2b05      	cmp	r3, #5
 80127e8:	d801      	bhi.n	80127ee <__hexdig_fun+0x1a>
 80127ea:	3847      	subs	r0, #71	; 0x47
 80127ec:	e7f7      	b.n	80127de <__hexdig_fun+0xa>
 80127ee:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80127f2:	2b05      	cmp	r3, #5
 80127f4:	d801      	bhi.n	80127fa <__hexdig_fun+0x26>
 80127f6:	3827      	subs	r0, #39	; 0x27
 80127f8:	e7f1      	b.n	80127de <__hexdig_fun+0xa>
 80127fa:	2000      	movs	r0, #0
 80127fc:	4770      	bx	lr
	...

08012800 <__gethex>:
 8012800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012804:	ed2d 8b02 	vpush	{d8}
 8012808:	b089      	sub	sp, #36	; 0x24
 801280a:	ee08 0a10 	vmov	s16, r0
 801280e:	9304      	str	r3, [sp, #16]
 8012810:	4bb4      	ldr	r3, [pc, #720]	; (8012ae4 <__gethex+0x2e4>)
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	9301      	str	r3, [sp, #4]
 8012816:	4618      	mov	r0, r3
 8012818:	468b      	mov	fp, r1
 801281a:	4690      	mov	r8, r2
 801281c:	f7ed fd02 	bl	8000224 <strlen>
 8012820:	9b01      	ldr	r3, [sp, #4]
 8012822:	f8db 2000 	ldr.w	r2, [fp]
 8012826:	4403      	add	r3, r0
 8012828:	4682      	mov	sl, r0
 801282a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801282e:	9305      	str	r3, [sp, #20]
 8012830:	1c93      	adds	r3, r2, #2
 8012832:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8012836:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801283a:	32fe      	adds	r2, #254	; 0xfe
 801283c:	18d1      	adds	r1, r2, r3
 801283e:	461f      	mov	r7, r3
 8012840:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012844:	9100      	str	r1, [sp, #0]
 8012846:	2830      	cmp	r0, #48	; 0x30
 8012848:	d0f8      	beq.n	801283c <__gethex+0x3c>
 801284a:	f7ff ffc3 	bl	80127d4 <__hexdig_fun>
 801284e:	4604      	mov	r4, r0
 8012850:	2800      	cmp	r0, #0
 8012852:	d13a      	bne.n	80128ca <__gethex+0xca>
 8012854:	9901      	ldr	r1, [sp, #4]
 8012856:	4652      	mov	r2, sl
 8012858:	4638      	mov	r0, r7
 801285a:	f001 fefd 	bl	8014658 <strncmp>
 801285e:	4605      	mov	r5, r0
 8012860:	2800      	cmp	r0, #0
 8012862:	d168      	bne.n	8012936 <__gethex+0x136>
 8012864:	f817 000a 	ldrb.w	r0, [r7, sl]
 8012868:	eb07 060a 	add.w	r6, r7, sl
 801286c:	f7ff ffb2 	bl	80127d4 <__hexdig_fun>
 8012870:	2800      	cmp	r0, #0
 8012872:	d062      	beq.n	801293a <__gethex+0x13a>
 8012874:	4633      	mov	r3, r6
 8012876:	7818      	ldrb	r0, [r3, #0]
 8012878:	2830      	cmp	r0, #48	; 0x30
 801287a:	461f      	mov	r7, r3
 801287c:	f103 0301 	add.w	r3, r3, #1
 8012880:	d0f9      	beq.n	8012876 <__gethex+0x76>
 8012882:	f7ff ffa7 	bl	80127d4 <__hexdig_fun>
 8012886:	2301      	movs	r3, #1
 8012888:	fab0 f480 	clz	r4, r0
 801288c:	0964      	lsrs	r4, r4, #5
 801288e:	4635      	mov	r5, r6
 8012890:	9300      	str	r3, [sp, #0]
 8012892:	463a      	mov	r2, r7
 8012894:	4616      	mov	r6, r2
 8012896:	3201      	adds	r2, #1
 8012898:	7830      	ldrb	r0, [r6, #0]
 801289a:	f7ff ff9b 	bl	80127d4 <__hexdig_fun>
 801289e:	2800      	cmp	r0, #0
 80128a0:	d1f8      	bne.n	8012894 <__gethex+0x94>
 80128a2:	9901      	ldr	r1, [sp, #4]
 80128a4:	4652      	mov	r2, sl
 80128a6:	4630      	mov	r0, r6
 80128a8:	f001 fed6 	bl	8014658 <strncmp>
 80128ac:	b980      	cbnz	r0, 80128d0 <__gethex+0xd0>
 80128ae:	b94d      	cbnz	r5, 80128c4 <__gethex+0xc4>
 80128b0:	eb06 050a 	add.w	r5, r6, sl
 80128b4:	462a      	mov	r2, r5
 80128b6:	4616      	mov	r6, r2
 80128b8:	3201      	adds	r2, #1
 80128ba:	7830      	ldrb	r0, [r6, #0]
 80128bc:	f7ff ff8a 	bl	80127d4 <__hexdig_fun>
 80128c0:	2800      	cmp	r0, #0
 80128c2:	d1f8      	bne.n	80128b6 <__gethex+0xb6>
 80128c4:	1bad      	subs	r5, r5, r6
 80128c6:	00ad      	lsls	r5, r5, #2
 80128c8:	e004      	b.n	80128d4 <__gethex+0xd4>
 80128ca:	2400      	movs	r4, #0
 80128cc:	4625      	mov	r5, r4
 80128ce:	e7e0      	b.n	8012892 <__gethex+0x92>
 80128d0:	2d00      	cmp	r5, #0
 80128d2:	d1f7      	bne.n	80128c4 <__gethex+0xc4>
 80128d4:	7833      	ldrb	r3, [r6, #0]
 80128d6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80128da:	2b50      	cmp	r3, #80	; 0x50
 80128dc:	d13b      	bne.n	8012956 <__gethex+0x156>
 80128de:	7873      	ldrb	r3, [r6, #1]
 80128e0:	2b2b      	cmp	r3, #43	; 0x2b
 80128e2:	d02c      	beq.n	801293e <__gethex+0x13e>
 80128e4:	2b2d      	cmp	r3, #45	; 0x2d
 80128e6:	d02e      	beq.n	8012946 <__gethex+0x146>
 80128e8:	1c71      	adds	r1, r6, #1
 80128ea:	f04f 0900 	mov.w	r9, #0
 80128ee:	7808      	ldrb	r0, [r1, #0]
 80128f0:	f7ff ff70 	bl	80127d4 <__hexdig_fun>
 80128f4:	1e43      	subs	r3, r0, #1
 80128f6:	b2db      	uxtb	r3, r3
 80128f8:	2b18      	cmp	r3, #24
 80128fa:	d82c      	bhi.n	8012956 <__gethex+0x156>
 80128fc:	f1a0 0210 	sub.w	r2, r0, #16
 8012900:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012904:	f7ff ff66 	bl	80127d4 <__hexdig_fun>
 8012908:	1e43      	subs	r3, r0, #1
 801290a:	b2db      	uxtb	r3, r3
 801290c:	2b18      	cmp	r3, #24
 801290e:	d91d      	bls.n	801294c <__gethex+0x14c>
 8012910:	f1b9 0f00 	cmp.w	r9, #0
 8012914:	d000      	beq.n	8012918 <__gethex+0x118>
 8012916:	4252      	negs	r2, r2
 8012918:	4415      	add	r5, r2
 801291a:	f8cb 1000 	str.w	r1, [fp]
 801291e:	b1e4      	cbz	r4, 801295a <__gethex+0x15a>
 8012920:	9b00      	ldr	r3, [sp, #0]
 8012922:	2b00      	cmp	r3, #0
 8012924:	bf14      	ite	ne
 8012926:	2700      	movne	r7, #0
 8012928:	2706      	moveq	r7, #6
 801292a:	4638      	mov	r0, r7
 801292c:	b009      	add	sp, #36	; 0x24
 801292e:	ecbd 8b02 	vpop	{d8}
 8012932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012936:	463e      	mov	r6, r7
 8012938:	4625      	mov	r5, r4
 801293a:	2401      	movs	r4, #1
 801293c:	e7ca      	b.n	80128d4 <__gethex+0xd4>
 801293e:	f04f 0900 	mov.w	r9, #0
 8012942:	1cb1      	adds	r1, r6, #2
 8012944:	e7d3      	b.n	80128ee <__gethex+0xee>
 8012946:	f04f 0901 	mov.w	r9, #1
 801294a:	e7fa      	b.n	8012942 <__gethex+0x142>
 801294c:	230a      	movs	r3, #10
 801294e:	fb03 0202 	mla	r2, r3, r2, r0
 8012952:	3a10      	subs	r2, #16
 8012954:	e7d4      	b.n	8012900 <__gethex+0x100>
 8012956:	4631      	mov	r1, r6
 8012958:	e7df      	b.n	801291a <__gethex+0x11a>
 801295a:	1bf3      	subs	r3, r6, r7
 801295c:	3b01      	subs	r3, #1
 801295e:	4621      	mov	r1, r4
 8012960:	2b07      	cmp	r3, #7
 8012962:	dc0b      	bgt.n	801297c <__gethex+0x17c>
 8012964:	ee18 0a10 	vmov	r0, s16
 8012968:	f000 fa82 	bl	8012e70 <_Balloc>
 801296c:	4604      	mov	r4, r0
 801296e:	b940      	cbnz	r0, 8012982 <__gethex+0x182>
 8012970:	4b5d      	ldr	r3, [pc, #372]	; (8012ae8 <__gethex+0x2e8>)
 8012972:	4602      	mov	r2, r0
 8012974:	21de      	movs	r1, #222	; 0xde
 8012976:	485d      	ldr	r0, [pc, #372]	; (8012aec <__gethex+0x2ec>)
 8012978:	f7ff f820 	bl	80119bc <__assert_func>
 801297c:	3101      	adds	r1, #1
 801297e:	105b      	asrs	r3, r3, #1
 8012980:	e7ee      	b.n	8012960 <__gethex+0x160>
 8012982:	f100 0914 	add.w	r9, r0, #20
 8012986:	f04f 0b00 	mov.w	fp, #0
 801298a:	f1ca 0301 	rsb	r3, sl, #1
 801298e:	f8cd 9008 	str.w	r9, [sp, #8]
 8012992:	f8cd b000 	str.w	fp, [sp]
 8012996:	9306      	str	r3, [sp, #24]
 8012998:	42b7      	cmp	r7, r6
 801299a:	d340      	bcc.n	8012a1e <__gethex+0x21e>
 801299c:	9802      	ldr	r0, [sp, #8]
 801299e:	9b00      	ldr	r3, [sp, #0]
 80129a0:	f840 3b04 	str.w	r3, [r0], #4
 80129a4:	eba0 0009 	sub.w	r0, r0, r9
 80129a8:	1080      	asrs	r0, r0, #2
 80129aa:	0146      	lsls	r6, r0, #5
 80129ac:	6120      	str	r0, [r4, #16]
 80129ae:	4618      	mov	r0, r3
 80129b0:	f000 fb50 	bl	8013054 <__hi0bits>
 80129b4:	1a30      	subs	r0, r6, r0
 80129b6:	f8d8 6000 	ldr.w	r6, [r8]
 80129ba:	42b0      	cmp	r0, r6
 80129bc:	dd63      	ble.n	8012a86 <__gethex+0x286>
 80129be:	1b87      	subs	r7, r0, r6
 80129c0:	4639      	mov	r1, r7
 80129c2:	4620      	mov	r0, r4
 80129c4:	f000 fef4 	bl	80137b0 <__any_on>
 80129c8:	4682      	mov	sl, r0
 80129ca:	b1a8      	cbz	r0, 80129f8 <__gethex+0x1f8>
 80129cc:	1e7b      	subs	r3, r7, #1
 80129ce:	1159      	asrs	r1, r3, #5
 80129d0:	f003 021f 	and.w	r2, r3, #31
 80129d4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80129d8:	f04f 0a01 	mov.w	sl, #1
 80129dc:	fa0a f202 	lsl.w	r2, sl, r2
 80129e0:	420a      	tst	r2, r1
 80129e2:	d009      	beq.n	80129f8 <__gethex+0x1f8>
 80129e4:	4553      	cmp	r3, sl
 80129e6:	dd05      	ble.n	80129f4 <__gethex+0x1f4>
 80129e8:	1eb9      	subs	r1, r7, #2
 80129ea:	4620      	mov	r0, r4
 80129ec:	f000 fee0 	bl	80137b0 <__any_on>
 80129f0:	2800      	cmp	r0, #0
 80129f2:	d145      	bne.n	8012a80 <__gethex+0x280>
 80129f4:	f04f 0a02 	mov.w	sl, #2
 80129f8:	4639      	mov	r1, r7
 80129fa:	4620      	mov	r0, r4
 80129fc:	f7ff fe98 	bl	8012730 <rshift>
 8012a00:	443d      	add	r5, r7
 8012a02:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012a06:	42ab      	cmp	r3, r5
 8012a08:	da4c      	bge.n	8012aa4 <__gethex+0x2a4>
 8012a0a:	ee18 0a10 	vmov	r0, s16
 8012a0e:	4621      	mov	r1, r4
 8012a10:	f000 fa6e 	bl	8012ef0 <_Bfree>
 8012a14:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012a16:	2300      	movs	r3, #0
 8012a18:	6013      	str	r3, [r2, #0]
 8012a1a:	27a3      	movs	r7, #163	; 0xa3
 8012a1c:	e785      	b.n	801292a <__gethex+0x12a>
 8012a1e:	1e73      	subs	r3, r6, #1
 8012a20:	9a05      	ldr	r2, [sp, #20]
 8012a22:	9303      	str	r3, [sp, #12]
 8012a24:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012a28:	4293      	cmp	r3, r2
 8012a2a:	d019      	beq.n	8012a60 <__gethex+0x260>
 8012a2c:	f1bb 0f20 	cmp.w	fp, #32
 8012a30:	d107      	bne.n	8012a42 <__gethex+0x242>
 8012a32:	9b02      	ldr	r3, [sp, #8]
 8012a34:	9a00      	ldr	r2, [sp, #0]
 8012a36:	f843 2b04 	str.w	r2, [r3], #4
 8012a3a:	9302      	str	r3, [sp, #8]
 8012a3c:	2300      	movs	r3, #0
 8012a3e:	9300      	str	r3, [sp, #0]
 8012a40:	469b      	mov	fp, r3
 8012a42:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8012a46:	f7ff fec5 	bl	80127d4 <__hexdig_fun>
 8012a4a:	9b00      	ldr	r3, [sp, #0]
 8012a4c:	f000 000f 	and.w	r0, r0, #15
 8012a50:	fa00 f00b 	lsl.w	r0, r0, fp
 8012a54:	4303      	orrs	r3, r0
 8012a56:	9300      	str	r3, [sp, #0]
 8012a58:	f10b 0b04 	add.w	fp, fp, #4
 8012a5c:	9b03      	ldr	r3, [sp, #12]
 8012a5e:	e00d      	b.n	8012a7c <__gethex+0x27c>
 8012a60:	9b03      	ldr	r3, [sp, #12]
 8012a62:	9a06      	ldr	r2, [sp, #24]
 8012a64:	4413      	add	r3, r2
 8012a66:	42bb      	cmp	r3, r7
 8012a68:	d3e0      	bcc.n	8012a2c <__gethex+0x22c>
 8012a6a:	4618      	mov	r0, r3
 8012a6c:	9901      	ldr	r1, [sp, #4]
 8012a6e:	9307      	str	r3, [sp, #28]
 8012a70:	4652      	mov	r2, sl
 8012a72:	f001 fdf1 	bl	8014658 <strncmp>
 8012a76:	9b07      	ldr	r3, [sp, #28]
 8012a78:	2800      	cmp	r0, #0
 8012a7a:	d1d7      	bne.n	8012a2c <__gethex+0x22c>
 8012a7c:	461e      	mov	r6, r3
 8012a7e:	e78b      	b.n	8012998 <__gethex+0x198>
 8012a80:	f04f 0a03 	mov.w	sl, #3
 8012a84:	e7b8      	b.n	80129f8 <__gethex+0x1f8>
 8012a86:	da0a      	bge.n	8012a9e <__gethex+0x29e>
 8012a88:	1a37      	subs	r7, r6, r0
 8012a8a:	4621      	mov	r1, r4
 8012a8c:	ee18 0a10 	vmov	r0, s16
 8012a90:	463a      	mov	r2, r7
 8012a92:	f000 fc49 	bl	8013328 <__lshift>
 8012a96:	1bed      	subs	r5, r5, r7
 8012a98:	4604      	mov	r4, r0
 8012a9a:	f100 0914 	add.w	r9, r0, #20
 8012a9e:	f04f 0a00 	mov.w	sl, #0
 8012aa2:	e7ae      	b.n	8012a02 <__gethex+0x202>
 8012aa4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8012aa8:	42a8      	cmp	r0, r5
 8012aaa:	dd72      	ble.n	8012b92 <__gethex+0x392>
 8012aac:	1b45      	subs	r5, r0, r5
 8012aae:	42ae      	cmp	r6, r5
 8012ab0:	dc36      	bgt.n	8012b20 <__gethex+0x320>
 8012ab2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012ab6:	2b02      	cmp	r3, #2
 8012ab8:	d02a      	beq.n	8012b10 <__gethex+0x310>
 8012aba:	2b03      	cmp	r3, #3
 8012abc:	d02c      	beq.n	8012b18 <__gethex+0x318>
 8012abe:	2b01      	cmp	r3, #1
 8012ac0:	d11c      	bne.n	8012afc <__gethex+0x2fc>
 8012ac2:	42ae      	cmp	r6, r5
 8012ac4:	d11a      	bne.n	8012afc <__gethex+0x2fc>
 8012ac6:	2e01      	cmp	r6, #1
 8012ac8:	d112      	bne.n	8012af0 <__gethex+0x2f0>
 8012aca:	9a04      	ldr	r2, [sp, #16]
 8012acc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012ad0:	6013      	str	r3, [r2, #0]
 8012ad2:	2301      	movs	r3, #1
 8012ad4:	6123      	str	r3, [r4, #16]
 8012ad6:	f8c9 3000 	str.w	r3, [r9]
 8012ada:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012adc:	2762      	movs	r7, #98	; 0x62
 8012ade:	601c      	str	r4, [r3, #0]
 8012ae0:	e723      	b.n	801292a <__gethex+0x12a>
 8012ae2:	bf00      	nop
 8012ae4:	080167d8 	.word	0x080167d8
 8012ae8:	08016761 	.word	0x08016761
 8012aec:	08016772 	.word	0x08016772
 8012af0:	1e71      	subs	r1, r6, #1
 8012af2:	4620      	mov	r0, r4
 8012af4:	f000 fe5c 	bl	80137b0 <__any_on>
 8012af8:	2800      	cmp	r0, #0
 8012afa:	d1e6      	bne.n	8012aca <__gethex+0x2ca>
 8012afc:	ee18 0a10 	vmov	r0, s16
 8012b00:	4621      	mov	r1, r4
 8012b02:	f000 f9f5 	bl	8012ef0 <_Bfree>
 8012b06:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012b08:	2300      	movs	r3, #0
 8012b0a:	6013      	str	r3, [r2, #0]
 8012b0c:	2750      	movs	r7, #80	; 0x50
 8012b0e:	e70c      	b.n	801292a <__gethex+0x12a>
 8012b10:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d1f2      	bne.n	8012afc <__gethex+0x2fc>
 8012b16:	e7d8      	b.n	8012aca <__gethex+0x2ca>
 8012b18:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d1d5      	bne.n	8012aca <__gethex+0x2ca>
 8012b1e:	e7ed      	b.n	8012afc <__gethex+0x2fc>
 8012b20:	1e6f      	subs	r7, r5, #1
 8012b22:	f1ba 0f00 	cmp.w	sl, #0
 8012b26:	d131      	bne.n	8012b8c <__gethex+0x38c>
 8012b28:	b127      	cbz	r7, 8012b34 <__gethex+0x334>
 8012b2a:	4639      	mov	r1, r7
 8012b2c:	4620      	mov	r0, r4
 8012b2e:	f000 fe3f 	bl	80137b0 <__any_on>
 8012b32:	4682      	mov	sl, r0
 8012b34:	117b      	asrs	r3, r7, #5
 8012b36:	2101      	movs	r1, #1
 8012b38:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8012b3c:	f007 071f 	and.w	r7, r7, #31
 8012b40:	fa01 f707 	lsl.w	r7, r1, r7
 8012b44:	421f      	tst	r7, r3
 8012b46:	4629      	mov	r1, r5
 8012b48:	4620      	mov	r0, r4
 8012b4a:	bf18      	it	ne
 8012b4c:	f04a 0a02 	orrne.w	sl, sl, #2
 8012b50:	1b76      	subs	r6, r6, r5
 8012b52:	f7ff fded 	bl	8012730 <rshift>
 8012b56:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8012b5a:	2702      	movs	r7, #2
 8012b5c:	f1ba 0f00 	cmp.w	sl, #0
 8012b60:	d048      	beq.n	8012bf4 <__gethex+0x3f4>
 8012b62:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012b66:	2b02      	cmp	r3, #2
 8012b68:	d015      	beq.n	8012b96 <__gethex+0x396>
 8012b6a:	2b03      	cmp	r3, #3
 8012b6c:	d017      	beq.n	8012b9e <__gethex+0x39e>
 8012b6e:	2b01      	cmp	r3, #1
 8012b70:	d109      	bne.n	8012b86 <__gethex+0x386>
 8012b72:	f01a 0f02 	tst.w	sl, #2
 8012b76:	d006      	beq.n	8012b86 <__gethex+0x386>
 8012b78:	f8d9 0000 	ldr.w	r0, [r9]
 8012b7c:	ea4a 0a00 	orr.w	sl, sl, r0
 8012b80:	f01a 0f01 	tst.w	sl, #1
 8012b84:	d10e      	bne.n	8012ba4 <__gethex+0x3a4>
 8012b86:	f047 0710 	orr.w	r7, r7, #16
 8012b8a:	e033      	b.n	8012bf4 <__gethex+0x3f4>
 8012b8c:	f04f 0a01 	mov.w	sl, #1
 8012b90:	e7d0      	b.n	8012b34 <__gethex+0x334>
 8012b92:	2701      	movs	r7, #1
 8012b94:	e7e2      	b.n	8012b5c <__gethex+0x35c>
 8012b96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012b98:	f1c3 0301 	rsb	r3, r3, #1
 8012b9c:	9315      	str	r3, [sp, #84]	; 0x54
 8012b9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d0f0      	beq.n	8012b86 <__gethex+0x386>
 8012ba4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8012ba8:	f104 0314 	add.w	r3, r4, #20
 8012bac:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8012bb0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8012bb4:	f04f 0c00 	mov.w	ip, #0
 8012bb8:	4618      	mov	r0, r3
 8012bba:	f853 2b04 	ldr.w	r2, [r3], #4
 8012bbe:	f1b2 3fff 	cmp.w	r2, #4294967295
 8012bc2:	d01c      	beq.n	8012bfe <__gethex+0x3fe>
 8012bc4:	3201      	adds	r2, #1
 8012bc6:	6002      	str	r2, [r0, #0]
 8012bc8:	2f02      	cmp	r7, #2
 8012bca:	f104 0314 	add.w	r3, r4, #20
 8012bce:	d13f      	bne.n	8012c50 <__gethex+0x450>
 8012bd0:	f8d8 2000 	ldr.w	r2, [r8]
 8012bd4:	3a01      	subs	r2, #1
 8012bd6:	42b2      	cmp	r2, r6
 8012bd8:	d10a      	bne.n	8012bf0 <__gethex+0x3f0>
 8012bda:	1171      	asrs	r1, r6, #5
 8012bdc:	2201      	movs	r2, #1
 8012bde:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012be2:	f006 061f 	and.w	r6, r6, #31
 8012be6:	fa02 f606 	lsl.w	r6, r2, r6
 8012bea:	421e      	tst	r6, r3
 8012bec:	bf18      	it	ne
 8012bee:	4617      	movne	r7, r2
 8012bf0:	f047 0720 	orr.w	r7, r7, #32
 8012bf4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012bf6:	601c      	str	r4, [r3, #0]
 8012bf8:	9b04      	ldr	r3, [sp, #16]
 8012bfa:	601d      	str	r5, [r3, #0]
 8012bfc:	e695      	b.n	801292a <__gethex+0x12a>
 8012bfe:	4299      	cmp	r1, r3
 8012c00:	f843 cc04 	str.w	ip, [r3, #-4]
 8012c04:	d8d8      	bhi.n	8012bb8 <__gethex+0x3b8>
 8012c06:	68a3      	ldr	r3, [r4, #8]
 8012c08:	459b      	cmp	fp, r3
 8012c0a:	db19      	blt.n	8012c40 <__gethex+0x440>
 8012c0c:	6861      	ldr	r1, [r4, #4]
 8012c0e:	ee18 0a10 	vmov	r0, s16
 8012c12:	3101      	adds	r1, #1
 8012c14:	f000 f92c 	bl	8012e70 <_Balloc>
 8012c18:	4681      	mov	r9, r0
 8012c1a:	b918      	cbnz	r0, 8012c24 <__gethex+0x424>
 8012c1c:	4b1a      	ldr	r3, [pc, #104]	; (8012c88 <__gethex+0x488>)
 8012c1e:	4602      	mov	r2, r0
 8012c20:	2184      	movs	r1, #132	; 0x84
 8012c22:	e6a8      	b.n	8012976 <__gethex+0x176>
 8012c24:	6922      	ldr	r2, [r4, #16]
 8012c26:	3202      	adds	r2, #2
 8012c28:	f104 010c 	add.w	r1, r4, #12
 8012c2c:	0092      	lsls	r2, r2, #2
 8012c2e:	300c      	adds	r0, #12
 8012c30:	f7fd f878 	bl	800fd24 <memcpy>
 8012c34:	4621      	mov	r1, r4
 8012c36:	ee18 0a10 	vmov	r0, s16
 8012c3a:	f000 f959 	bl	8012ef0 <_Bfree>
 8012c3e:	464c      	mov	r4, r9
 8012c40:	6923      	ldr	r3, [r4, #16]
 8012c42:	1c5a      	adds	r2, r3, #1
 8012c44:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012c48:	6122      	str	r2, [r4, #16]
 8012c4a:	2201      	movs	r2, #1
 8012c4c:	615a      	str	r2, [r3, #20]
 8012c4e:	e7bb      	b.n	8012bc8 <__gethex+0x3c8>
 8012c50:	6922      	ldr	r2, [r4, #16]
 8012c52:	455a      	cmp	r2, fp
 8012c54:	dd0b      	ble.n	8012c6e <__gethex+0x46e>
 8012c56:	2101      	movs	r1, #1
 8012c58:	4620      	mov	r0, r4
 8012c5a:	f7ff fd69 	bl	8012730 <rshift>
 8012c5e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012c62:	3501      	adds	r5, #1
 8012c64:	42ab      	cmp	r3, r5
 8012c66:	f6ff aed0 	blt.w	8012a0a <__gethex+0x20a>
 8012c6a:	2701      	movs	r7, #1
 8012c6c:	e7c0      	b.n	8012bf0 <__gethex+0x3f0>
 8012c6e:	f016 061f 	ands.w	r6, r6, #31
 8012c72:	d0fa      	beq.n	8012c6a <__gethex+0x46a>
 8012c74:	4453      	add	r3, sl
 8012c76:	f1c6 0620 	rsb	r6, r6, #32
 8012c7a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8012c7e:	f000 f9e9 	bl	8013054 <__hi0bits>
 8012c82:	42b0      	cmp	r0, r6
 8012c84:	dbe7      	blt.n	8012c56 <__gethex+0x456>
 8012c86:	e7f0      	b.n	8012c6a <__gethex+0x46a>
 8012c88:	08016761 	.word	0x08016761

08012c8c <L_shift>:
 8012c8c:	f1c2 0208 	rsb	r2, r2, #8
 8012c90:	0092      	lsls	r2, r2, #2
 8012c92:	b570      	push	{r4, r5, r6, lr}
 8012c94:	f1c2 0620 	rsb	r6, r2, #32
 8012c98:	6843      	ldr	r3, [r0, #4]
 8012c9a:	6804      	ldr	r4, [r0, #0]
 8012c9c:	fa03 f506 	lsl.w	r5, r3, r6
 8012ca0:	432c      	orrs	r4, r5
 8012ca2:	40d3      	lsrs	r3, r2
 8012ca4:	6004      	str	r4, [r0, #0]
 8012ca6:	f840 3f04 	str.w	r3, [r0, #4]!
 8012caa:	4288      	cmp	r0, r1
 8012cac:	d3f4      	bcc.n	8012c98 <L_shift+0xc>
 8012cae:	bd70      	pop	{r4, r5, r6, pc}

08012cb0 <__match>:
 8012cb0:	b530      	push	{r4, r5, lr}
 8012cb2:	6803      	ldr	r3, [r0, #0]
 8012cb4:	3301      	adds	r3, #1
 8012cb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012cba:	b914      	cbnz	r4, 8012cc2 <__match+0x12>
 8012cbc:	6003      	str	r3, [r0, #0]
 8012cbe:	2001      	movs	r0, #1
 8012cc0:	bd30      	pop	{r4, r5, pc}
 8012cc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012cc6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8012cca:	2d19      	cmp	r5, #25
 8012ccc:	bf98      	it	ls
 8012cce:	3220      	addls	r2, #32
 8012cd0:	42a2      	cmp	r2, r4
 8012cd2:	d0f0      	beq.n	8012cb6 <__match+0x6>
 8012cd4:	2000      	movs	r0, #0
 8012cd6:	e7f3      	b.n	8012cc0 <__match+0x10>

08012cd8 <__hexnan>:
 8012cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cdc:	680b      	ldr	r3, [r1, #0]
 8012cde:	115e      	asrs	r6, r3, #5
 8012ce0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012ce4:	f013 031f 	ands.w	r3, r3, #31
 8012ce8:	b087      	sub	sp, #28
 8012cea:	bf18      	it	ne
 8012cec:	3604      	addne	r6, #4
 8012cee:	2500      	movs	r5, #0
 8012cf0:	1f37      	subs	r7, r6, #4
 8012cf2:	4690      	mov	r8, r2
 8012cf4:	6802      	ldr	r2, [r0, #0]
 8012cf6:	9301      	str	r3, [sp, #4]
 8012cf8:	4682      	mov	sl, r0
 8012cfa:	f846 5c04 	str.w	r5, [r6, #-4]
 8012cfe:	46b9      	mov	r9, r7
 8012d00:	463c      	mov	r4, r7
 8012d02:	9502      	str	r5, [sp, #8]
 8012d04:	46ab      	mov	fp, r5
 8012d06:	7851      	ldrb	r1, [r2, #1]
 8012d08:	1c53      	adds	r3, r2, #1
 8012d0a:	9303      	str	r3, [sp, #12]
 8012d0c:	b341      	cbz	r1, 8012d60 <__hexnan+0x88>
 8012d0e:	4608      	mov	r0, r1
 8012d10:	9205      	str	r2, [sp, #20]
 8012d12:	9104      	str	r1, [sp, #16]
 8012d14:	f7ff fd5e 	bl	80127d4 <__hexdig_fun>
 8012d18:	2800      	cmp	r0, #0
 8012d1a:	d14f      	bne.n	8012dbc <__hexnan+0xe4>
 8012d1c:	9904      	ldr	r1, [sp, #16]
 8012d1e:	9a05      	ldr	r2, [sp, #20]
 8012d20:	2920      	cmp	r1, #32
 8012d22:	d818      	bhi.n	8012d56 <__hexnan+0x7e>
 8012d24:	9b02      	ldr	r3, [sp, #8]
 8012d26:	459b      	cmp	fp, r3
 8012d28:	dd13      	ble.n	8012d52 <__hexnan+0x7a>
 8012d2a:	454c      	cmp	r4, r9
 8012d2c:	d206      	bcs.n	8012d3c <__hexnan+0x64>
 8012d2e:	2d07      	cmp	r5, #7
 8012d30:	dc04      	bgt.n	8012d3c <__hexnan+0x64>
 8012d32:	462a      	mov	r2, r5
 8012d34:	4649      	mov	r1, r9
 8012d36:	4620      	mov	r0, r4
 8012d38:	f7ff ffa8 	bl	8012c8c <L_shift>
 8012d3c:	4544      	cmp	r4, r8
 8012d3e:	d950      	bls.n	8012de2 <__hexnan+0x10a>
 8012d40:	2300      	movs	r3, #0
 8012d42:	f1a4 0904 	sub.w	r9, r4, #4
 8012d46:	f844 3c04 	str.w	r3, [r4, #-4]
 8012d4a:	f8cd b008 	str.w	fp, [sp, #8]
 8012d4e:	464c      	mov	r4, r9
 8012d50:	461d      	mov	r5, r3
 8012d52:	9a03      	ldr	r2, [sp, #12]
 8012d54:	e7d7      	b.n	8012d06 <__hexnan+0x2e>
 8012d56:	2929      	cmp	r1, #41	; 0x29
 8012d58:	d156      	bne.n	8012e08 <__hexnan+0x130>
 8012d5a:	3202      	adds	r2, #2
 8012d5c:	f8ca 2000 	str.w	r2, [sl]
 8012d60:	f1bb 0f00 	cmp.w	fp, #0
 8012d64:	d050      	beq.n	8012e08 <__hexnan+0x130>
 8012d66:	454c      	cmp	r4, r9
 8012d68:	d206      	bcs.n	8012d78 <__hexnan+0xa0>
 8012d6a:	2d07      	cmp	r5, #7
 8012d6c:	dc04      	bgt.n	8012d78 <__hexnan+0xa0>
 8012d6e:	462a      	mov	r2, r5
 8012d70:	4649      	mov	r1, r9
 8012d72:	4620      	mov	r0, r4
 8012d74:	f7ff ff8a 	bl	8012c8c <L_shift>
 8012d78:	4544      	cmp	r4, r8
 8012d7a:	d934      	bls.n	8012de6 <__hexnan+0x10e>
 8012d7c:	f1a8 0204 	sub.w	r2, r8, #4
 8012d80:	4623      	mov	r3, r4
 8012d82:	f853 1b04 	ldr.w	r1, [r3], #4
 8012d86:	f842 1f04 	str.w	r1, [r2, #4]!
 8012d8a:	429f      	cmp	r7, r3
 8012d8c:	d2f9      	bcs.n	8012d82 <__hexnan+0xaa>
 8012d8e:	1b3b      	subs	r3, r7, r4
 8012d90:	f023 0303 	bic.w	r3, r3, #3
 8012d94:	3304      	adds	r3, #4
 8012d96:	3401      	adds	r4, #1
 8012d98:	3e03      	subs	r6, #3
 8012d9a:	42b4      	cmp	r4, r6
 8012d9c:	bf88      	it	hi
 8012d9e:	2304      	movhi	r3, #4
 8012da0:	4443      	add	r3, r8
 8012da2:	2200      	movs	r2, #0
 8012da4:	f843 2b04 	str.w	r2, [r3], #4
 8012da8:	429f      	cmp	r7, r3
 8012daa:	d2fb      	bcs.n	8012da4 <__hexnan+0xcc>
 8012dac:	683b      	ldr	r3, [r7, #0]
 8012dae:	b91b      	cbnz	r3, 8012db8 <__hexnan+0xe0>
 8012db0:	4547      	cmp	r7, r8
 8012db2:	d127      	bne.n	8012e04 <__hexnan+0x12c>
 8012db4:	2301      	movs	r3, #1
 8012db6:	603b      	str	r3, [r7, #0]
 8012db8:	2005      	movs	r0, #5
 8012dba:	e026      	b.n	8012e0a <__hexnan+0x132>
 8012dbc:	3501      	adds	r5, #1
 8012dbe:	2d08      	cmp	r5, #8
 8012dc0:	f10b 0b01 	add.w	fp, fp, #1
 8012dc4:	dd06      	ble.n	8012dd4 <__hexnan+0xfc>
 8012dc6:	4544      	cmp	r4, r8
 8012dc8:	d9c3      	bls.n	8012d52 <__hexnan+0x7a>
 8012dca:	2300      	movs	r3, #0
 8012dcc:	f844 3c04 	str.w	r3, [r4, #-4]
 8012dd0:	2501      	movs	r5, #1
 8012dd2:	3c04      	subs	r4, #4
 8012dd4:	6822      	ldr	r2, [r4, #0]
 8012dd6:	f000 000f 	and.w	r0, r0, #15
 8012dda:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8012dde:	6022      	str	r2, [r4, #0]
 8012de0:	e7b7      	b.n	8012d52 <__hexnan+0x7a>
 8012de2:	2508      	movs	r5, #8
 8012de4:	e7b5      	b.n	8012d52 <__hexnan+0x7a>
 8012de6:	9b01      	ldr	r3, [sp, #4]
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d0df      	beq.n	8012dac <__hexnan+0xd4>
 8012dec:	f04f 32ff 	mov.w	r2, #4294967295
 8012df0:	f1c3 0320 	rsb	r3, r3, #32
 8012df4:	fa22 f303 	lsr.w	r3, r2, r3
 8012df8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012dfc:	401a      	ands	r2, r3
 8012dfe:	f846 2c04 	str.w	r2, [r6, #-4]
 8012e02:	e7d3      	b.n	8012dac <__hexnan+0xd4>
 8012e04:	3f04      	subs	r7, #4
 8012e06:	e7d1      	b.n	8012dac <__hexnan+0xd4>
 8012e08:	2004      	movs	r0, #4
 8012e0a:	b007      	add	sp, #28
 8012e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012e10 <_localeconv_r>:
 8012e10:	4800      	ldr	r0, [pc, #0]	; (8012e14 <_localeconv_r+0x4>)
 8012e12:	4770      	bx	lr
 8012e14:	20000590 	.word	0x20000590

08012e18 <_lseek_r>:
 8012e18:	b538      	push	{r3, r4, r5, lr}
 8012e1a:	4d07      	ldr	r5, [pc, #28]	; (8012e38 <_lseek_r+0x20>)
 8012e1c:	4604      	mov	r4, r0
 8012e1e:	4608      	mov	r0, r1
 8012e20:	4611      	mov	r1, r2
 8012e22:	2200      	movs	r2, #0
 8012e24:	602a      	str	r2, [r5, #0]
 8012e26:	461a      	mov	r2, r3
 8012e28:	f7ef fe96 	bl	8002b58 <_lseek>
 8012e2c:	1c43      	adds	r3, r0, #1
 8012e2e:	d102      	bne.n	8012e36 <_lseek_r+0x1e>
 8012e30:	682b      	ldr	r3, [r5, #0]
 8012e32:	b103      	cbz	r3, 8012e36 <_lseek_r+0x1e>
 8012e34:	6023      	str	r3, [r4, #0]
 8012e36:	bd38      	pop	{r3, r4, r5, pc}
 8012e38:	2000b4e8 	.word	0x2000b4e8

08012e3c <malloc>:
 8012e3c:	4b02      	ldr	r3, [pc, #8]	; (8012e48 <malloc+0xc>)
 8012e3e:	4601      	mov	r1, r0
 8012e40:	6818      	ldr	r0, [r3, #0]
 8012e42:	f000 bd59 	b.w	80138f8 <_malloc_r>
 8012e46:	bf00      	nop
 8012e48:	20000438 	.word	0x20000438

08012e4c <__ascii_mbtowc>:
 8012e4c:	b082      	sub	sp, #8
 8012e4e:	b901      	cbnz	r1, 8012e52 <__ascii_mbtowc+0x6>
 8012e50:	a901      	add	r1, sp, #4
 8012e52:	b142      	cbz	r2, 8012e66 <__ascii_mbtowc+0x1a>
 8012e54:	b14b      	cbz	r3, 8012e6a <__ascii_mbtowc+0x1e>
 8012e56:	7813      	ldrb	r3, [r2, #0]
 8012e58:	600b      	str	r3, [r1, #0]
 8012e5a:	7812      	ldrb	r2, [r2, #0]
 8012e5c:	1e10      	subs	r0, r2, #0
 8012e5e:	bf18      	it	ne
 8012e60:	2001      	movne	r0, #1
 8012e62:	b002      	add	sp, #8
 8012e64:	4770      	bx	lr
 8012e66:	4610      	mov	r0, r2
 8012e68:	e7fb      	b.n	8012e62 <__ascii_mbtowc+0x16>
 8012e6a:	f06f 0001 	mvn.w	r0, #1
 8012e6e:	e7f8      	b.n	8012e62 <__ascii_mbtowc+0x16>

08012e70 <_Balloc>:
 8012e70:	b570      	push	{r4, r5, r6, lr}
 8012e72:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012e74:	4604      	mov	r4, r0
 8012e76:	460d      	mov	r5, r1
 8012e78:	b976      	cbnz	r6, 8012e98 <_Balloc+0x28>
 8012e7a:	2010      	movs	r0, #16
 8012e7c:	f7ff ffde 	bl	8012e3c <malloc>
 8012e80:	4602      	mov	r2, r0
 8012e82:	6260      	str	r0, [r4, #36]	; 0x24
 8012e84:	b920      	cbnz	r0, 8012e90 <_Balloc+0x20>
 8012e86:	4b18      	ldr	r3, [pc, #96]	; (8012ee8 <_Balloc+0x78>)
 8012e88:	4818      	ldr	r0, [pc, #96]	; (8012eec <_Balloc+0x7c>)
 8012e8a:	2166      	movs	r1, #102	; 0x66
 8012e8c:	f7fe fd96 	bl	80119bc <__assert_func>
 8012e90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012e94:	6006      	str	r6, [r0, #0]
 8012e96:	60c6      	str	r6, [r0, #12]
 8012e98:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012e9a:	68f3      	ldr	r3, [r6, #12]
 8012e9c:	b183      	cbz	r3, 8012ec0 <_Balloc+0x50>
 8012e9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012ea0:	68db      	ldr	r3, [r3, #12]
 8012ea2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012ea6:	b9b8      	cbnz	r0, 8012ed8 <_Balloc+0x68>
 8012ea8:	2101      	movs	r1, #1
 8012eaa:	fa01 f605 	lsl.w	r6, r1, r5
 8012eae:	1d72      	adds	r2, r6, #5
 8012eb0:	0092      	lsls	r2, r2, #2
 8012eb2:	4620      	mov	r0, r4
 8012eb4:	f000 fc9d 	bl	80137f2 <_calloc_r>
 8012eb8:	b160      	cbz	r0, 8012ed4 <_Balloc+0x64>
 8012eba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012ebe:	e00e      	b.n	8012ede <_Balloc+0x6e>
 8012ec0:	2221      	movs	r2, #33	; 0x21
 8012ec2:	2104      	movs	r1, #4
 8012ec4:	4620      	mov	r0, r4
 8012ec6:	f000 fc94 	bl	80137f2 <_calloc_r>
 8012eca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012ecc:	60f0      	str	r0, [r6, #12]
 8012ece:	68db      	ldr	r3, [r3, #12]
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d1e4      	bne.n	8012e9e <_Balloc+0x2e>
 8012ed4:	2000      	movs	r0, #0
 8012ed6:	bd70      	pop	{r4, r5, r6, pc}
 8012ed8:	6802      	ldr	r2, [r0, #0]
 8012eda:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012ede:	2300      	movs	r3, #0
 8012ee0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012ee4:	e7f7      	b.n	8012ed6 <_Balloc+0x66>
 8012ee6:	bf00      	nop
 8012ee8:	08016548 	.word	0x08016548
 8012eec:	080167ec 	.word	0x080167ec

08012ef0 <_Bfree>:
 8012ef0:	b570      	push	{r4, r5, r6, lr}
 8012ef2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012ef4:	4605      	mov	r5, r0
 8012ef6:	460c      	mov	r4, r1
 8012ef8:	b976      	cbnz	r6, 8012f18 <_Bfree+0x28>
 8012efa:	2010      	movs	r0, #16
 8012efc:	f7ff ff9e 	bl	8012e3c <malloc>
 8012f00:	4602      	mov	r2, r0
 8012f02:	6268      	str	r0, [r5, #36]	; 0x24
 8012f04:	b920      	cbnz	r0, 8012f10 <_Bfree+0x20>
 8012f06:	4b09      	ldr	r3, [pc, #36]	; (8012f2c <_Bfree+0x3c>)
 8012f08:	4809      	ldr	r0, [pc, #36]	; (8012f30 <_Bfree+0x40>)
 8012f0a:	218a      	movs	r1, #138	; 0x8a
 8012f0c:	f7fe fd56 	bl	80119bc <__assert_func>
 8012f10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012f14:	6006      	str	r6, [r0, #0]
 8012f16:	60c6      	str	r6, [r0, #12]
 8012f18:	b13c      	cbz	r4, 8012f2a <_Bfree+0x3a>
 8012f1a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012f1c:	6862      	ldr	r2, [r4, #4]
 8012f1e:	68db      	ldr	r3, [r3, #12]
 8012f20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012f24:	6021      	str	r1, [r4, #0]
 8012f26:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012f2a:	bd70      	pop	{r4, r5, r6, pc}
 8012f2c:	08016548 	.word	0x08016548
 8012f30:	080167ec 	.word	0x080167ec

08012f34 <__multadd>:
 8012f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f38:	690d      	ldr	r5, [r1, #16]
 8012f3a:	4607      	mov	r7, r0
 8012f3c:	460c      	mov	r4, r1
 8012f3e:	461e      	mov	r6, r3
 8012f40:	f101 0c14 	add.w	ip, r1, #20
 8012f44:	2000      	movs	r0, #0
 8012f46:	f8dc 3000 	ldr.w	r3, [ip]
 8012f4a:	b299      	uxth	r1, r3
 8012f4c:	fb02 6101 	mla	r1, r2, r1, r6
 8012f50:	0c1e      	lsrs	r6, r3, #16
 8012f52:	0c0b      	lsrs	r3, r1, #16
 8012f54:	fb02 3306 	mla	r3, r2, r6, r3
 8012f58:	b289      	uxth	r1, r1
 8012f5a:	3001      	adds	r0, #1
 8012f5c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012f60:	4285      	cmp	r5, r0
 8012f62:	f84c 1b04 	str.w	r1, [ip], #4
 8012f66:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012f6a:	dcec      	bgt.n	8012f46 <__multadd+0x12>
 8012f6c:	b30e      	cbz	r6, 8012fb2 <__multadd+0x7e>
 8012f6e:	68a3      	ldr	r3, [r4, #8]
 8012f70:	42ab      	cmp	r3, r5
 8012f72:	dc19      	bgt.n	8012fa8 <__multadd+0x74>
 8012f74:	6861      	ldr	r1, [r4, #4]
 8012f76:	4638      	mov	r0, r7
 8012f78:	3101      	adds	r1, #1
 8012f7a:	f7ff ff79 	bl	8012e70 <_Balloc>
 8012f7e:	4680      	mov	r8, r0
 8012f80:	b928      	cbnz	r0, 8012f8e <__multadd+0x5a>
 8012f82:	4602      	mov	r2, r0
 8012f84:	4b0c      	ldr	r3, [pc, #48]	; (8012fb8 <__multadd+0x84>)
 8012f86:	480d      	ldr	r0, [pc, #52]	; (8012fbc <__multadd+0x88>)
 8012f88:	21b5      	movs	r1, #181	; 0xb5
 8012f8a:	f7fe fd17 	bl	80119bc <__assert_func>
 8012f8e:	6922      	ldr	r2, [r4, #16]
 8012f90:	3202      	adds	r2, #2
 8012f92:	f104 010c 	add.w	r1, r4, #12
 8012f96:	0092      	lsls	r2, r2, #2
 8012f98:	300c      	adds	r0, #12
 8012f9a:	f7fc fec3 	bl	800fd24 <memcpy>
 8012f9e:	4621      	mov	r1, r4
 8012fa0:	4638      	mov	r0, r7
 8012fa2:	f7ff ffa5 	bl	8012ef0 <_Bfree>
 8012fa6:	4644      	mov	r4, r8
 8012fa8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012fac:	3501      	adds	r5, #1
 8012fae:	615e      	str	r6, [r3, #20]
 8012fb0:	6125      	str	r5, [r4, #16]
 8012fb2:	4620      	mov	r0, r4
 8012fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012fb8:	08016761 	.word	0x08016761
 8012fbc:	080167ec 	.word	0x080167ec

08012fc0 <__s2b>:
 8012fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012fc4:	460c      	mov	r4, r1
 8012fc6:	4615      	mov	r5, r2
 8012fc8:	461f      	mov	r7, r3
 8012fca:	2209      	movs	r2, #9
 8012fcc:	3308      	adds	r3, #8
 8012fce:	4606      	mov	r6, r0
 8012fd0:	fb93 f3f2 	sdiv	r3, r3, r2
 8012fd4:	2100      	movs	r1, #0
 8012fd6:	2201      	movs	r2, #1
 8012fd8:	429a      	cmp	r2, r3
 8012fda:	db09      	blt.n	8012ff0 <__s2b+0x30>
 8012fdc:	4630      	mov	r0, r6
 8012fde:	f7ff ff47 	bl	8012e70 <_Balloc>
 8012fe2:	b940      	cbnz	r0, 8012ff6 <__s2b+0x36>
 8012fe4:	4602      	mov	r2, r0
 8012fe6:	4b19      	ldr	r3, [pc, #100]	; (801304c <__s2b+0x8c>)
 8012fe8:	4819      	ldr	r0, [pc, #100]	; (8013050 <__s2b+0x90>)
 8012fea:	21ce      	movs	r1, #206	; 0xce
 8012fec:	f7fe fce6 	bl	80119bc <__assert_func>
 8012ff0:	0052      	lsls	r2, r2, #1
 8012ff2:	3101      	adds	r1, #1
 8012ff4:	e7f0      	b.n	8012fd8 <__s2b+0x18>
 8012ff6:	9b08      	ldr	r3, [sp, #32]
 8012ff8:	6143      	str	r3, [r0, #20]
 8012ffa:	2d09      	cmp	r5, #9
 8012ffc:	f04f 0301 	mov.w	r3, #1
 8013000:	6103      	str	r3, [r0, #16]
 8013002:	dd16      	ble.n	8013032 <__s2b+0x72>
 8013004:	f104 0909 	add.w	r9, r4, #9
 8013008:	46c8      	mov	r8, r9
 801300a:	442c      	add	r4, r5
 801300c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8013010:	4601      	mov	r1, r0
 8013012:	3b30      	subs	r3, #48	; 0x30
 8013014:	220a      	movs	r2, #10
 8013016:	4630      	mov	r0, r6
 8013018:	f7ff ff8c 	bl	8012f34 <__multadd>
 801301c:	45a0      	cmp	r8, r4
 801301e:	d1f5      	bne.n	801300c <__s2b+0x4c>
 8013020:	f1a5 0408 	sub.w	r4, r5, #8
 8013024:	444c      	add	r4, r9
 8013026:	1b2d      	subs	r5, r5, r4
 8013028:	1963      	adds	r3, r4, r5
 801302a:	42bb      	cmp	r3, r7
 801302c:	db04      	blt.n	8013038 <__s2b+0x78>
 801302e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013032:	340a      	adds	r4, #10
 8013034:	2509      	movs	r5, #9
 8013036:	e7f6      	b.n	8013026 <__s2b+0x66>
 8013038:	f814 3b01 	ldrb.w	r3, [r4], #1
 801303c:	4601      	mov	r1, r0
 801303e:	3b30      	subs	r3, #48	; 0x30
 8013040:	220a      	movs	r2, #10
 8013042:	4630      	mov	r0, r6
 8013044:	f7ff ff76 	bl	8012f34 <__multadd>
 8013048:	e7ee      	b.n	8013028 <__s2b+0x68>
 801304a:	bf00      	nop
 801304c:	08016761 	.word	0x08016761
 8013050:	080167ec 	.word	0x080167ec

08013054 <__hi0bits>:
 8013054:	0c03      	lsrs	r3, r0, #16
 8013056:	041b      	lsls	r3, r3, #16
 8013058:	b9d3      	cbnz	r3, 8013090 <__hi0bits+0x3c>
 801305a:	0400      	lsls	r0, r0, #16
 801305c:	2310      	movs	r3, #16
 801305e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013062:	bf04      	itt	eq
 8013064:	0200      	lsleq	r0, r0, #8
 8013066:	3308      	addeq	r3, #8
 8013068:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801306c:	bf04      	itt	eq
 801306e:	0100      	lsleq	r0, r0, #4
 8013070:	3304      	addeq	r3, #4
 8013072:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8013076:	bf04      	itt	eq
 8013078:	0080      	lsleq	r0, r0, #2
 801307a:	3302      	addeq	r3, #2
 801307c:	2800      	cmp	r0, #0
 801307e:	db05      	blt.n	801308c <__hi0bits+0x38>
 8013080:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013084:	f103 0301 	add.w	r3, r3, #1
 8013088:	bf08      	it	eq
 801308a:	2320      	moveq	r3, #32
 801308c:	4618      	mov	r0, r3
 801308e:	4770      	bx	lr
 8013090:	2300      	movs	r3, #0
 8013092:	e7e4      	b.n	801305e <__hi0bits+0xa>

08013094 <__lo0bits>:
 8013094:	6803      	ldr	r3, [r0, #0]
 8013096:	f013 0207 	ands.w	r2, r3, #7
 801309a:	4601      	mov	r1, r0
 801309c:	d00b      	beq.n	80130b6 <__lo0bits+0x22>
 801309e:	07da      	lsls	r2, r3, #31
 80130a0:	d423      	bmi.n	80130ea <__lo0bits+0x56>
 80130a2:	0798      	lsls	r0, r3, #30
 80130a4:	bf49      	itett	mi
 80130a6:	085b      	lsrmi	r3, r3, #1
 80130a8:	089b      	lsrpl	r3, r3, #2
 80130aa:	2001      	movmi	r0, #1
 80130ac:	600b      	strmi	r3, [r1, #0]
 80130ae:	bf5c      	itt	pl
 80130b0:	600b      	strpl	r3, [r1, #0]
 80130b2:	2002      	movpl	r0, #2
 80130b4:	4770      	bx	lr
 80130b6:	b298      	uxth	r0, r3
 80130b8:	b9a8      	cbnz	r0, 80130e6 <__lo0bits+0x52>
 80130ba:	0c1b      	lsrs	r3, r3, #16
 80130bc:	2010      	movs	r0, #16
 80130be:	b2da      	uxtb	r2, r3
 80130c0:	b90a      	cbnz	r2, 80130c6 <__lo0bits+0x32>
 80130c2:	3008      	adds	r0, #8
 80130c4:	0a1b      	lsrs	r3, r3, #8
 80130c6:	071a      	lsls	r2, r3, #28
 80130c8:	bf04      	itt	eq
 80130ca:	091b      	lsreq	r3, r3, #4
 80130cc:	3004      	addeq	r0, #4
 80130ce:	079a      	lsls	r2, r3, #30
 80130d0:	bf04      	itt	eq
 80130d2:	089b      	lsreq	r3, r3, #2
 80130d4:	3002      	addeq	r0, #2
 80130d6:	07da      	lsls	r2, r3, #31
 80130d8:	d403      	bmi.n	80130e2 <__lo0bits+0x4e>
 80130da:	085b      	lsrs	r3, r3, #1
 80130dc:	f100 0001 	add.w	r0, r0, #1
 80130e0:	d005      	beq.n	80130ee <__lo0bits+0x5a>
 80130e2:	600b      	str	r3, [r1, #0]
 80130e4:	4770      	bx	lr
 80130e6:	4610      	mov	r0, r2
 80130e8:	e7e9      	b.n	80130be <__lo0bits+0x2a>
 80130ea:	2000      	movs	r0, #0
 80130ec:	4770      	bx	lr
 80130ee:	2020      	movs	r0, #32
 80130f0:	4770      	bx	lr
	...

080130f4 <__i2b>:
 80130f4:	b510      	push	{r4, lr}
 80130f6:	460c      	mov	r4, r1
 80130f8:	2101      	movs	r1, #1
 80130fa:	f7ff feb9 	bl	8012e70 <_Balloc>
 80130fe:	4602      	mov	r2, r0
 8013100:	b928      	cbnz	r0, 801310e <__i2b+0x1a>
 8013102:	4b05      	ldr	r3, [pc, #20]	; (8013118 <__i2b+0x24>)
 8013104:	4805      	ldr	r0, [pc, #20]	; (801311c <__i2b+0x28>)
 8013106:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801310a:	f7fe fc57 	bl	80119bc <__assert_func>
 801310e:	2301      	movs	r3, #1
 8013110:	6144      	str	r4, [r0, #20]
 8013112:	6103      	str	r3, [r0, #16]
 8013114:	bd10      	pop	{r4, pc}
 8013116:	bf00      	nop
 8013118:	08016761 	.word	0x08016761
 801311c:	080167ec 	.word	0x080167ec

08013120 <__multiply>:
 8013120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013124:	4691      	mov	r9, r2
 8013126:	690a      	ldr	r2, [r1, #16]
 8013128:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801312c:	429a      	cmp	r2, r3
 801312e:	bfb8      	it	lt
 8013130:	460b      	movlt	r3, r1
 8013132:	460c      	mov	r4, r1
 8013134:	bfbc      	itt	lt
 8013136:	464c      	movlt	r4, r9
 8013138:	4699      	movlt	r9, r3
 801313a:	6927      	ldr	r7, [r4, #16]
 801313c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013140:	68a3      	ldr	r3, [r4, #8]
 8013142:	6861      	ldr	r1, [r4, #4]
 8013144:	eb07 060a 	add.w	r6, r7, sl
 8013148:	42b3      	cmp	r3, r6
 801314a:	b085      	sub	sp, #20
 801314c:	bfb8      	it	lt
 801314e:	3101      	addlt	r1, #1
 8013150:	f7ff fe8e 	bl	8012e70 <_Balloc>
 8013154:	b930      	cbnz	r0, 8013164 <__multiply+0x44>
 8013156:	4602      	mov	r2, r0
 8013158:	4b44      	ldr	r3, [pc, #272]	; (801326c <__multiply+0x14c>)
 801315a:	4845      	ldr	r0, [pc, #276]	; (8013270 <__multiply+0x150>)
 801315c:	f240 115d 	movw	r1, #349	; 0x15d
 8013160:	f7fe fc2c 	bl	80119bc <__assert_func>
 8013164:	f100 0514 	add.w	r5, r0, #20
 8013168:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801316c:	462b      	mov	r3, r5
 801316e:	2200      	movs	r2, #0
 8013170:	4543      	cmp	r3, r8
 8013172:	d321      	bcc.n	80131b8 <__multiply+0x98>
 8013174:	f104 0314 	add.w	r3, r4, #20
 8013178:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801317c:	f109 0314 	add.w	r3, r9, #20
 8013180:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8013184:	9202      	str	r2, [sp, #8]
 8013186:	1b3a      	subs	r2, r7, r4
 8013188:	3a15      	subs	r2, #21
 801318a:	f022 0203 	bic.w	r2, r2, #3
 801318e:	3204      	adds	r2, #4
 8013190:	f104 0115 	add.w	r1, r4, #21
 8013194:	428f      	cmp	r7, r1
 8013196:	bf38      	it	cc
 8013198:	2204      	movcc	r2, #4
 801319a:	9201      	str	r2, [sp, #4]
 801319c:	9a02      	ldr	r2, [sp, #8]
 801319e:	9303      	str	r3, [sp, #12]
 80131a0:	429a      	cmp	r2, r3
 80131a2:	d80c      	bhi.n	80131be <__multiply+0x9e>
 80131a4:	2e00      	cmp	r6, #0
 80131a6:	dd03      	ble.n	80131b0 <__multiply+0x90>
 80131a8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d05a      	beq.n	8013266 <__multiply+0x146>
 80131b0:	6106      	str	r6, [r0, #16]
 80131b2:	b005      	add	sp, #20
 80131b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131b8:	f843 2b04 	str.w	r2, [r3], #4
 80131bc:	e7d8      	b.n	8013170 <__multiply+0x50>
 80131be:	f8b3 a000 	ldrh.w	sl, [r3]
 80131c2:	f1ba 0f00 	cmp.w	sl, #0
 80131c6:	d024      	beq.n	8013212 <__multiply+0xf2>
 80131c8:	f104 0e14 	add.w	lr, r4, #20
 80131cc:	46a9      	mov	r9, r5
 80131ce:	f04f 0c00 	mov.w	ip, #0
 80131d2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80131d6:	f8d9 1000 	ldr.w	r1, [r9]
 80131da:	fa1f fb82 	uxth.w	fp, r2
 80131de:	b289      	uxth	r1, r1
 80131e0:	fb0a 110b 	mla	r1, sl, fp, r1
 80131e4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80131e8:	f8d9 2000 	ldr.w	r2, [r9]
 80131ec:	4461      	add	r1, ip
 80131ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80131f2:	fb0a c20b 	mla	r2, sl, fp, ip
 80131f6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80131fa:	b289      	uxth	r1, r1
 80131fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013200:	4577      	cmp	r7, lr
 8013202:	f849 1b04 	str.w	r1, [r9], #4
 8013206:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801320a:	d8e2      	bhi.n	80131d2 <__multiply+0xb2>
 801320c:	9a01      	ldr	r2, [sp, #4]
 801320e:	f845 c002 	str.w	ip, [r5, r2]
 8013212:	9a03      	ldr	r2, [sp, #12]
 8013214:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013218:	3304      	adds	r3, #4
 801321a:	f1b9 0f00 	cmp.w	r9, #0
 801321e:	d020      	beq.n	8013262 <__multiply+0x142>
 8013220:	6829      	ldr	r1, [r5, #0]
 8013222:	f104 0c14 	add.w	ip, r4, #20
 8013226:	46ae      	mov	lr, r5
 8013228:	f04f 0a00 	mov.w	sl, #0
 801322c:	f8bc b000 	ldrh.w	fp, [ip]
 8013230:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8013234:	fb09 220b 	mla	r2, r9, fp, r2
 8013238:	4492      	add	sl, r2
 801323a:	b289      	uxth	r1, r1
 801323c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8013240:	f84e 1b04 	str.w	r1, [lr], #4
 8013244:	f85c 2b04 	ldr.w	r2, [ip], #4
 8013248:	f8be 1000 	ldrh.w	r1, [lr]
 801324c:	0c12      	lsrs	r2, r2, #16
 801324e:	fb09 1102 	mla	r1, r9, r2, r1
 8013252:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8013256:	4567      	cmp	r7, ip
 8013258:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801325c:	d8e6      	bhi.n	801322c <__multiply+0x10c>
 801325e:	9a01      	ldr	r2, [sp, #4]
 8013260:	50a9      	str	r1, [r5, r2]
 8013262:	3504      	adds	r5, #4
 8013264:	e79a      	b.n	801319c <__multiply+0x7c>
 8013266:	3e01      	subs	r6, #1
 8013268:	e79c      	b.n	80131a4 <__multiply+0x84>
 801326a:	bf00      	nop
 801326c:	08016761 	.word	0x08016761
 8013270:	080167ec 	.word	0x080167ec

08013274 <__pow5mult>:
 8013274:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013278:	4615      	mov	r5, r2
 801327a:	f012 0203 	ands.w	r2, r2, #3
 801327e:	4606      	mov	r6, r0
 8013280:	460f      	mov	r7, r1
 8013282:	d007      	beq.n	8013294 <__pow5mult+0x20>
 8013284:	4c25      	ldr	r4, [pc, #148]	; (801331c <__pow5mult+0xa8>)
 8013286:	3a01      	subs	r2, #1
 8013288:	2300      	movs	r3, #0
 801328a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801328e:	f7ff fe51 	bl	8012f34 <__multadd>
 8013292:	4607      	mov	r7, r0
 8013294:	10ad      	asrs	r5, r5, #2
 8013296:	d03d      	beq.n	8013314 <__pow5mult+0xa0>
 8013298:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801329a:	b97c      	cbnz	r4, 80132bc <__pow5mult+0x48>
 801329c:	2010      	movs	r0, #16
 801329e:	f7ff fdcd 	bl	8012e3c <malloc>
 80132a2:	4602      	mov	r2, r0
 80132a4:	6270      	str	r0, [r6, #36]	; 0x24
 80132a6:	b928      	cbnz	r0, 80132b4 <__pow5mult+0x40>
 80132a8:	4b1d      	ldr	r3, [pc, #116]	; (8013320 <__pow5mult+0xac>)
 80132aa:	481e      	ldr	r0, [pc, #120]	; (8013324 <__pow5mult+0xb0>)
 80132ac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80132b0:	f7fe fb84 	bl	80119bc <__assert_func>
 80132b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80132b8:	6004      	str	r4, [r0, #0]
 80132ba:	60c4      	str	r4, [r0, #12]
 80132bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80132c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80132c4:	b94c      	cbnz	r4, 80132da <__pow5mult+0x66>
 80132c6:	f240 2171 	movw	r1, #625	; 0x271
 80132ca:	4630      	mov	r0, r6
 80132cc:	f7ff ff12 	bl	80130f4 <__i2b>
 80132d0:	2300      	movs	r3, #0
 80132d2:	f8c8 0008 	str.w	r0, [r8, #8]
 80132d6:	4604      	mov	r4, r0
 80132d8:	6003      	str	r3, [r0, #0]
 80132da:	f04f 0900 	mov.w	r9, #0
 80132de:	07eb      	lsls	r3, r5, #31
 80132e0:	d50a      	bpl.n	80132f8 <__pow5mult+0x84>
 80132e2:	4639      	mov	r1, r7
 80132e4:	4622      	mov	r2, r4
 80132e6:	4630      	mov	r0, r6
 80132e8:	f7ff ff1a 	bl	8013120 <__multiply>
 80132ec:	4639      	mov	r1, r7
 80132ee:	4680      	mov	r8, r0
 80132f0:	4630      	mov	r0, r6
 80132f2:	f7ff fdfd 	bl	8012ef0 <_Bfree>
 80132f6:	4647      	mov	r7, r8
 80132f8:	106d      	asrs	r5, r5, #1
 80132fa:	d00b      	beq.n	8013314 <__pow5mult+0xa0>
 80132fc:	6820      	ldr	r0, [r4, #0]
 80132fe:	b938      	cbnz	r0, 8013310 <__pow5mult+0x9c>
 8013300:	4622      	mov	r2, r4
 8013302:	4621      	mov	r1, r4
 8013304:	4630      	mov	r0, r6
 8013306:	f7ff ff0b 	bl	8013120 <__multiply>
 801330a:	6020      	str	r0, [r4, #0]
 801330c:	f8c0 9000 	str.w	r9, [r0]
 8013310:	4604      	mov	r4, r0
 8013312:	e7e4      	b.n	80132de <__pow5mult+0x6a>
 8013314:	4638      	mov	r0, r7
 8013316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801331a:	bf00      	nop
 801331c:	08016938 	.word	0x08016938
 8013320:	08016548 	.word	0x08016548
 8013324:	080167ec 	.word	0x080167ec

08013328 <__lshift>:
 8013328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801332c:	460c      	mov	r4, r1
 801332e:	6849      	ldr	r1, [r1, #4]
 8013330:	6923      	ldr	r3, [r4, #16]
 8013332:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013336:	68a3      	ldr	r3, [r4, #8]
 8013338:	4607      	mov	r7, r0
 801333a:	4691      	mov	r9, r2
 801333c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013340:	f108 0601 	add.w	r6, r8, #1
 8013344:	42b3      	cmp	r3, r6
 8013346:	db0b      	blt.n	8013360 <__lshift+0x38>
 8013348:	4638      	mov	r0, r7
 801334a:	f7ff fd91 	bl	8012e70 <_Balloc>
 801334e:	4605      	mov	r5, r0
 8013350:	b948      	cbnz	r0, 8013366 <__lshift+0x3e>
 8013352:	4602      	mov	r2, r0
 8013354:	4b2a      	ldr	r3, [pc, #168]	; (8013400 <__lshift+0xd8>)
 8013356:	482b      	ldr	r0, [pc, #172]	; (8013404 <__lshift+0xdc>)
 8013358:	f240 11d9 	movw	r1, #473	; 0x1d9
 801335c:	f7fe fb2e 	bl	80119bc <__assert_func>
 8013360:	3101      	adds	r1, #1
 8013362:	005b      	lsls	r3, r3, #1
 8013364:	e7ee      	b.n	8013344 <__lshift+0x1c>
 8013366:	2300      	movs	r3, #0
 8013368:	f100 0114 	add.w	r1, r0, #20
 801336c:	f100 0210 	add.w	r2, r0, #16
 8013370:	4618      	mov	r0, r3
 8013372:	4553      	cmp	r3, sl
 8013374:	db37      	blt.n	80133e6 <__lshift+0xbe>
 8013376:	6920      	ldr	r0, [r4, #16]
 8013378:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801337c:	f104 0314 	add.w	r3, r4, #20
 8013380:	f019 091f 	ands.w	r9, r9, #31
 8013384:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013388:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801338c:	d02f      	beq.n	80133ee <__lshift+0xc6>
 801338e:	f1c9 0e20 	rsb	lr, r9, #32
 8013392:	468a      	mov	sl, r1
 8013394:	f04f 0c00 	mov.w	ip, #0
 8013398:	681a      	ldr	r2, [r3, #0]
 801339a:	fa02 f209 	lsl.w	r2, r2, r9
 801339e:	ea42 020c 	orr.w	r2, r2, ip
 80133a2:	f84a 2b04 	str.w	r2, [sl], #4
 80133a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80133aa:	4298      	cmp	r0, r3
 80133ac:	fa22 fc0e 	lsr.w	ip, r2, lr
 80133b0:	d8f2      	bhi.n	8013398 <__lshift+0x70>
 80133b2:	1b03      	subs	r3, r0, r4
 80133b4:	3b15      	subs	r3, #21
 80133b6:	f023 0303 	bic.w	r3, r3, #3
 80133ba:	3304      	adds	r3, #4
 80133bc:	f104 0215 	add.w	r2, r4, #21
 80133c0:	4290      	cmp	r0, r2
 80133c2:	bf38      	it	cc
 80133c4:	2304      	movcc	r3, #4
 80133c6:	f841 c003 	str.w	ip, [r1, r3]
 80133ca:	f1bc 0f00 	cmp.w	ip, #0
 80133ce:	d001      	beq.n	80133d4 <__lshift+0xac>
 80133d0:	f108 0602 	add.w	r6, r8, #2
 80133d4:	3e01      	subs	r6, #1
 80133d6:	4638      	mov	r0, r7
 80133d8:	612e      	str	r6, [r5, #16]
 80133da:	4621      	mov	r1, r4
 80133dc:	f7ff fd88 	bl	8012ef0 <_Bfree>
 80133e0:	4628      	mov	r0, r5
 80133e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80133e6:	f842 0f04 	str.w	r0, [r2, #4]!
 80133ea:	3301      	adds	r3, #1
 80133ec:	e7c1      	b.n	8013372 <__lshift+0x4a>
 80133ee:	3904      	subs	r1, #4
 80133f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80133f4:	f841 2f04 	str.w	r2, [r1, #4]!
 80133f8:	4298      	cmp	r0, r3
 80133fa:	d8f9      	bhi.n	80133f0 <__lshift+0xc8>
 80133fc:	e7ea      	b.n	80133d4 <__lshift+0xac>
 80133fe:	bf00      	nop
 8013400:	08016761 	.word	0x08016761
 8013404:	080167ec 	.word	0x080167ec

08013408 <__mcmp>:
 8013408:	b530      	push	{r4, r5, lr}
 801340a:	6902      	ldr	r2, [r0, #16]
 801340c:	690c      	ldr	r4, [r1, #16]
 801340e:	1b12      	subs	r2, r2, r4
 8013410:	d10e      	bne.n	8013430 <__mcmp+0x28>
 8013412:	f100 0314 	add.w	r3, r0, #20
 8013416:	3114      	adds	r1, #20
 8013418:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801341c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013420:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013424:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013428:	42a5      	cmp	r5, r4
 801342a:	d003      	beq.n	8013434 <__mcmp+0x2c>
 801342c:	d305      	bcc.n	801343a <__mcmp+0x32>
 801342e:	2201      	movs	r2, #1
 8013430:	4610      	mov	r0, r2
 8013432:	bd30      	pop	{r4, r5, pc}
 8013434:	4283      	cmp	r3, r0
 8013436:	d3f3      	bcc.n	8013420 <__mcmp+0x18>
 8013438:	e7fa      	b.n	8013430 <__mcmp+0x28>
 801343a:	f04f 32ff 	mov.w	r2, #4294967295
 801343e:	e7f7      	b.n	8013430 <__mcmp+0x28>

08013440 <__mdiff>:
 8013440:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013444:	460c      	mov	r4, r1
 8013446:	4606      	mov	r6, r0
 8013448:	4611      	mov	r1, r2
 801344a:	4620      	mov	r0, r4
 801344c:	4690      	mov	r8, r2
 801344e:	f7ff ffdb 	bl	8013408 <__mcmp>
 8013452:	1e05      	subs	r5, r0, #0
 8013454:	d110      	bne.n	8013478 <__mdiff+0x38>
 8013456:	4629      	mov	r1, r5
 8013458:	4630      	mov	r0, r6
 801345a:	f7ff fd09 	bl	8012e70 <_Balloc>
 801345e:	b930      	cbnz	r0, 801346e <__mdiff+0x2e>
 8013460:	4b3a      	ldr	r3, [pc, #232]	; (801354c <__mdiff+0x10c>)
 8013462:	4602      	mov	r2, r0
 8013464:	f240 2132 	movw	r1, #562	; 0x232
 8013468:	4839      	ldr	r0, [pc, #228]	; (8013550 <__mdiff+0x110>)
 801346a:	f7fe faa7 	bl	80119bc <__assert_func>
 801346e:	2301      	movs	r3, #1
 8013470:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013474:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013478:	bfa4      	itt	ge
 801347a:	4643      	movge	r3, r8
 801347c:	46a0      	movge	r8, r4
 801347e:	4630      	mov	r0, r6
 8013480:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013484:	bfa6      	itte	ge
 8013486:	461c      	movge	r4, r3
 8013488:	2500      	movge	r5, #0
 801348a:	2501      	movlt	r5, #1
 801348c:	f7ff fcf0 	bl	8012e70 <_Balloc>
 8013490:	b920      	cbnz	r0, 801349c <__mdiff+0x5c>
 8013492:	4b2e      	ldr	r3, [pc, #184]	; (801354c <__mdiff+0x10c>)
 8013494:	4602      	mov	r2, r0
 8013496:	f44f 7110 	mov.w	r1, #576	; 0x240
 801349a:	e7e5      	b.n	8013468 <__mdiff+0x28>
 801349c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80134a0:	6926      	ldr	r6, [r4, #16]
 80134a2:	60c5      	str	r5, [r0, #12]
 80134a4:	f104 0914 	add.w	r9, r4, #20
 80134a8:	f108 0514 	add.w	r5, r8, #20
 80134ac:	f100 0e14 	add.w	lr, r0, #20
 80134b0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80134b4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80134b8:	f108 0210 	add.w	r2, r8, #16
 80134bc:	46f2      	mov	sl, lr
 80134be:	2100      	movs	r1, #0
 80134c0:	f859 3b04 	ldr.w	r3, [r9], #4
 80134c4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80134c8:	fa1f f883 	uxth.w	r8, r3
 80134cc:	fa11 f18b 	uxtah	r1, r1, fp
 80134d0:	0c1b      	lsrs	r3, r3, #16
 80134d2:	eba1 0808 	sub.w	r8, r1, r8
 80134d6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80134da:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80134de:	fa1f f888 	uxth.w	r8, r8
 80134e2:	1419      	asrs	r1, r3, #16
 80134e4:	454e      	cmp	r6, r9
 80134e6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80134ea:	f84a 3b04 	str.w	r3, [sl], #4
 80134ee:	d8e7      	bhi.n	80134c0 <__mdiff+0x80>
 80134f0:	1b33      	subs	r3, r6, r4
 80134f2:	3b15      	subs	r3, #21
 80134f4:	f023 0303 	bic.w	r3, r3, #3
 80134f8:	3304      	adds	r3, #4
 80134fa:	3415      	adds	r4, #21
 80134fc:	42a6      	cmp	r6, r4
 80134fe:	bf38      	it	cc
 8013500:	2304      	movcc	r3, #4
 8013502:	441d      	add	r5, r3
 8013504:	4473      	add	r3, lr
 8013506:	469e      	mov	lr, r3
 8013508:	462e      	mov	r6, r5
 801350a:	4566      	cmp	r6, ip
 801350c:	d30e      	bcc.n	801352c <__mdiff+0xec>
 801350e:	f10c 0203 	add.w	r2, ip, #3
 8013512:	1b52      	subs	r2, r2, r5
 8013514:	f022 0203 	bic.w	r2, r2, #3
 8013518:	3d03      	subs	r5, #3
 801351a:	45ac      	cmp	ip, r5
 801351c:	bf38      	it	cc
 801351e:	2200      	movcc	r2, #0
 8013520:	441a      	add	r2, r3
 8013522:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8013526:	b17b      	cbz	r3, 8013548 <__mdiff+0x108>
 8013528:	6107      	str	r7, [r0, #16]
 801352a:	e7a3      	b.n	8013474 <__mdiff+0x34>
 801352c:	f856 8b04 	ldr.w	r8, [r6], #4
 8013530:	fa11 f288 	uxtah	r2, r1, r8
 8013534:	1414      	asrs	r4, r2, #16
 8013536:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801353a:	b292      	uxth	r2, r2
 801353c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8013540:	f84e 2b04 	str.w	r2, [lr], #4
 8013544:	1421      	asrs	r1, r4, #16
 8013546:	e7e0      	b.n	801350a <__mdiff+0xca>
 8013548:	3f01      	subs	r7, #1
 801354a:	e7ea      	b.n	8013522 <__mdiff+0xe2>
 801354c:	08016761 	.word	0x08016761
 8013550:	080167ec 	.word	0x080167ec

08013554 <__ulp>:
 8013554:	b082      	sub	sp, #8
 8013556:	ed8d 0b00 	vstr	d0, [sp]
 801355a:	9b01      	ldr	r3, [sp, #4]
 801355c:	4912      	ldr	r1, [pc, #72]	; (80135a8 <__ulp+0x54>)
 801355e:	4019      	ands	r1, r3
 8013560:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8013564:	2900      	cmp	r1, #0
 8013566:	dd05      	ble.n	8013574 <__ulp+0x20>
 8013568:	2200      	movs	r2, #0
 801356a:	460b      	mov	r3, r1
 801356c:	ec43 2b10 	vmov	d0, r2, r3
 8013570:	b002      	add	sp, #8
 8013572:	4770      	bx	lr
 8013574:	4249      	negs	r1, r1
 8013576:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801357a:	ea4f 5021 	mov.w	r0, r1, asr #20
 801357e:	f04f 0200 	mov.w	r2, #0
 8013582:	f04f 0300 	mov.w	r3, #0
 8013586:	da04      	bge.n	8013592 <__ulp+0x3e>
 8013588:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801358c:	fa41 f300 	asr.w	r3, r1, r0
 8013590:	e7ec      	b.n	801356c <__ulp+0x18>
 8013592:	f1a0 0114 	sub.w	r1, r0, #20
 8013596:	291e      	cmp	r1, #30
 8013598:	bfda      	itte	le
 801359a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801359e:	fa20 f101 	lsrle.w	r1, r0, r1
 80135a2:	2101      	movgt	r1, #1
 80135a4:	460a      	mov	r2, r1
 80135a6:	e7e1      	b.n	801356c <__ulp+0x18>
 80135a8:	7ff00000 	.word	0x7ff00000

080135ac <__b2d>:
 80135ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135ae:	6905      	ldr	r5, [r0, #16]
 80135b0:	f100 0714 	add.w	r7, r0, #20
 80135b4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80135b8:	1f2e      	subs	r6, r5, #4
 80135ba:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80135be:	4620      	mov	r0, r4
 80135c0:	f7ff fd48 	bl	8013054 <__hi0bits>
 80135c4:	f1c0 0320 	rsb	r3, r0, #32
 80135c8:	280a      	cmp	r0, #10
 80135ca:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8013648 <__b2d+0x9c>
 80135ce:	600b      	str	r3, [r1, #0]
 80135d0:	dc14      	bgt.n	80135fc <__b2d+0x50>
 80135d2:	f1c0 0e0b 	rsb	lr, r0, #11
 80135d6:	fa24 f10e 	lsr.w	r1, r4, lr
 80135da:	42b7      	cmp	r7, r6
 80135dc:	ea41 030c 	orr.w	r3, r1, ip
 80135e0:	bf34      	ite	cc
 80135e2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80135e6:	2100      	movcs	r1, #0
 80135e8:	3015      	adds	r0, #21
 80135ea:	fa04 f000 	lsl.w	r0, r4, r0
 80135ee:	fa21 f10e 	lsr.w	r1, r1, lr
 80135f2:	ea40 0201 	orr.w	r2, r0, r1
 80135f6:	ec43 2b10 	vmov	d0, r2, r3
 80135fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80135fc:	42b7      	cmp	r7, r6
 80135fe:	bf3a      	itte	cc
 8013600:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013604:	f1a5 0608 	subcc.w	r6, r5, #8
 8013608:	2100      	movcs	r1, #0
 801360a:	380b      	subs	r0, #11
 801360c:	d017      	beq.n	801363e <__b2d+0x92>
 801360e:	f1c0 0c20 	rsb	ip, r0, #32
 8013612:	fa04 f500 	lsl.w	r5, r4, r0
 8013616:	42be      	cmp	r6, r7
 8013618:	fa21 f40c 	lsr.w	r4, r1, ip
 801361c:	ea45 0504 	orr.w	r5, r5, r4
 8013620:	bf8c      	ite	hi
 8013622:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8013626:	2400      	movls	r4, #0
 8013628:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801362c:	fa01 f000 	lsl.w	r0, r1, r0
 8013630:	fa24 f40c 	lsr.w	r4, r4, ip
 8013634:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8013638:	ea40 0204 	orr.w	r2, r0, r4
 801363c:	e7db      	b.n	80135f6 <__b2d+0x4a>
 801363e:	ea44 030c 	orr.w	r3, r4, ip
 8013642:	460a      	mov	r2, r1
 8013644:	e7d7      	b.n	80135f6 <__b2d+0x4a>
 8013646:	bf00      	nop
 8013648:	3ff00000 	.word	0x3ff00000

0801364c <__d2b>:
 801364c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013650:	4689      	mov	r9, r1
 8013652:	2101      	movs	r1, #1
 8013654:	ec57 6b10 	vmov	r6, r7, d0
 8013658:	4690      	mov	r8, r2
 801365a:	f7ff fc09 	bl	8012e70 <_Balloc>
 801365e:	4604      	mov	r4, r0
 8013660:	b930      	cbnz	r0, 8013670 <__d2b+0x24>
 8013662:	4602      	mov	r2, r0
 8013664:	4b25      	ldr	r3, [pc, #148]	; (80136fc <__d2b+0xb0>)
 8013666:	4826      	ldr	r0, [pc, #152]	; (8013700 <__d2b+0xb4>)
 8013668:	f240 310a 	movw	r1, #778	; 0x30a
 801366c:	f7fe f9a6 	bl	80119bc <__assert_func>
 8013670:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8013674:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013678:	bb35      	cbnz	r5, 80136c8 <__d2b+0x7c>
 801367a:	2e00      	cmp	r6, #0
 801367c:	9301      	str	r3, [sp, #4]
 801367e:	d028      	beq.n	80136d2 <__d2b+0x86>
 8013680:	4668      	mov	r0, sp
 8013682:	9600      	str	r6, [sp, #0]
 8013684:	f7ff fd06 	bl	8013094 <__lo0bits>
 8013688:	9900      	ldr	r1, [sp, #0]
 801368a:	b300      	cbz	r0, 80136ce <__d2b+0x82>
 801368c:	9a01      	ldr	r2, [sp, #4]
 801368e:	f1c0 0320 	rsb	r3, r0, #32
 8013692:	fa02 f303 	lsl.w	r3, r2, r3
 8013696:	430b      	orrs	r3, r1
 8013698:	40c2      	lsrs	r2, r0
 801369a:	6163      	str	r3, [r4, #20]
 801369c:	9201      	str	r2, [sp, #4]
 801369e:	9b01      	ldr	r3, [sp, #4]
 80136a0:	61a3      	str	r3, [r4, #24]
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	bf14      	ite	ne
 80136a6:	2202      	movne	r2, #2
 80136a8:	2201      	moveq	r2, #1
 80136aa:	6122      	str	r2, [r4, #16]
 80136ac:	b1d5      	cbz	r5, 80136e4 <__d2b+0x98>
 80136ae:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80136b2:	4405      	add	r5, r0
 80136b4:	f8c9 5000 	str.w	r5, [r9]
 80136b8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80136bc:	f8c8 0000 	str.w	r0, [r8]
 80136c0:	4620      	mov	r0, r4
 80136c2:	b003      	add	sp, #12
 80136c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80136c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80136cc:	e7d5      	b.n	801367a <__d2b+0x2e>
 80136ce:	6161      	str	r1, [r4, #20]
 80136d0:	e7e5      	b.n	801369e <__d2b+0x52>
 80136d2:	a801      	add	r0, sp, #4
 80136d4:	f7ff fcde 	bl	8013094 <__lo0bits>
 80136d8:	9b01      	ldr	r3, [sp, #4]
 80136da:	6163      	str	r3, [r4, #20]
 80136dc:	2201      	movs	r2, #1
 80136de:	6122      	str	r2, [r4, #16]
 80136e0:	3020      	adds	r0, #32
 80136e2:	e7e3      	b.n	80136ac <__d2b+0x60>
 80136e4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80136e8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80136ec:	f8c9 0000 	str.w	r0, [r9]
 80136f0:	6918      	ldr	r0, [r3, #16]
 80136f2:	f7ff fcaf 	bl	8013054 <__hi0bits>
 80136f6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80136fa:	e7df      	b.n	80136bc <__d2b+0x70>
 80136fc:	08016761 	.word	0x08016761
 8013700:	080167ec 	.word	0x080167ec

08013704 <__ratio>:
 8013704:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013708:	4688      	mov	r8, r1
 801370a:	4669      	mov	r1, sp
 801370c:	4681      	mov	r9, r0
 801370e:	f7ff ff4d 	bl	80135ac <__b2d>
 8013712:	a901      	add	r1, sp, #4
 8013714:	4640      	mov	r0, r8
 8013716:	ec55 4b10 	vmov	r4, r5, d0
 801371a:	f7ff ff47 	bl	80135ac <__b2d>
 801371e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013722:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8013726:	eba3 0c02 	sub.w	ip, r3, r2
 801372a:	e9dd 3200 	ldrd	r3, r2, [sp]
 801372e:	1a9b      	subs	r3, r3, r2
 8013730:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8013734:	ec51 0b10 	vmov	r0, r1, d0
 8013738:	2b00      	cmp	r3, #0
 801373a:	bfd6      	itet	le
 801373c:	460a      	movle	r2, r1
 801373e:	462a      	movgt	r2, r5
 8013740:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8013744:	468b      	mov	fp, r1
 8013746:	462f      	mov	r7, r5
 8013748:	bfd4      	ite	le
 801374a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801374e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8013752:	4620      	mov	r0, r4
 8013754:	ee10 2a10 	vmov	r2, s0
 8013758:	465b      	mov	r3, fp
 801375a:	4639      	mov	r1, r7
 801375c:	f7ed f8a6 	bl	80008ac <__aeabi_ddiv>
 8013760:	ec41 0b10 	vmov	d0, r0, r1
 8013764:	b003      	add	sp, #12
 8013766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801376a <__copybits>:
 801376a:	3901      	subs	r1, #1
 801376c:	b570      	push	{r4, r5, r6, lr}
 801376e:	1149      	asrs	r1, r1, #5
 8013770:	6914      	ldr	r4, [r2, #16]
 8013772:	3101      	adds	r1, #1
 8013774:	f102 0314 	add.w	r3, r2, #20
 8013778:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801377c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013780:	1f05      	subs	r5, r0, #4
 8013782:	42a3      	cmp	r3, r4
 8013784:	d30c      	bcc.n	80137a0 <__copybits+0x36>
 8013786:	1aa3      	subs	r3, r4, r2
 8013788:	3b11      	subs	r3, #17
 801378a:	f023 0303 	bic.w	r3, r3, #3
 801378e:	3211      	adds	r2, #17
 8013790:	42a2      	cmp	r2, r4
 8013792:	bf88      	it	hi
 8013794:	2300      	movhi	r3, #0
 8013796:	4418      	add	r0, r3
 8013798:	2300      	movs	r3, #0
 801379a:	4288      	cmp	r0, r1
 801379c:	d305      	bcc.n	80137aa <__copybits+0x40>
 801379e:	bd70      	pop	{r4, r5, r6, pc}
 80137a0:	f853 6b04 	ldr.w	r6, [r3], #4
 80137a4:	f845 6f04 	str.w	r6, [r5, #4]!
 80137a8:	e7eb      	b.n	8013782 <__copybits+0x18>
 80137aa:	f840 3b04 	str.w	r3, [r0], #4
 80137ae:	e7f4      	b.n	801379a <__copybits+0x30>

080137b0 <__any_on>:
 80137b0:	f100 0214 	add.w	r2, r0, #20
 80137b4:	6900      	ldr	r0, [r0, #16]
 80137b6:	114b      	asrs	r3, r1, #5
 80137b8:	4298      	cmp	r0, r3
 80137ba:	b510      	push	{r4, lr}
 80137bc:	db11      	blt.n	80137e2 <__any_on+0x32>
 80137be:	dd0a      	ble.n	80137d6 <__any_on+0x26>
 80137c0:	f011 011f 	ands.w	r1, r1, #31
 80137c4:	d007      	beq.n	80137d6 <__any_on+0x26>
 80137c6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80137ca:	fa24 f001 	lsr.w	r0, r4, r1
 80137ce:	fa00 f101 	lsl.w	r1, r0, r1
 80137d2:	428c      	cmp	r4, r1
 80137d4:	d10b      	bne.n	80137ee <__any_on+0x3e>
 80137d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80137da:	4293      	cmp	r3, r2
 80137dc:	d803      	bhi.n	80137e6 <__any_on+0x36>
 80137de:	2000      	movs	r0, #0
 80137e0:	bd10      	pop	{r4, pc}
 80137e2:	4603      	mov	r3, r0
 80137e4:	e7f7      	b.n	80137d6 <__any_on+0x26>
 80137e6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80137ea:	2900      	cmp	r1, #0
 80137ec:	d0f5      	beq.n	80137da <__any_on+0x2a>
 80137ee:	2001      	movs	r0, #1
 80137f0:	e7f6      	b.n	80137e0 <__any_on+0x30>

080137f2 <_calloc_r>:
 80137f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80137f4:	fba1 2402 	umull	r2, r4, r1, r2
 80137f8:	b94c      	cbnz	r4, 801380e <_calloc_r+0x1c>
 80137fa:	4611      	mov	r1, r2
 80137fc:	9201      	str	r2, [sp, #4]
 80137fe:	f000 f87b 	bl	80138f8 <_malloc_r>
 8013802:	9a01      	ldr	r2, [sp, #4]
 8013804:	4605      	mov	r5, r0
 8013806:	b930      	cbnz	r0, 8013816 <_calloc_r+0x24>
 8013808:	4628      	mov	r0, r5
 801380a:	b003      	add	sp, #12
 801380c:	bd30      	pop	{r4, r5, pc}
 801380e:	220c      	movs	r2, #12
 8013810:	6002      	str	r2, [r0, #0]
 8013812:	2500      	movs	r5, #0
 8013814:	e7f8      	b.n	8013808 <_calloc_r+0x16>
 8013816:	4621      	mov	r1, r4
 8013818:	f7fc fa92 	bl	800fd40 <memset>
 801381c:	e7f4      	b.n	8013808 <_calloc_r+0x16>
	...

08013820 <_free_r>:
 8013820:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013822:	2900      	cmp	r1, #0
 8013824:	d044      	beq.n	80138b0 <_free_r+0x90>
 8013826:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801382a:	9001      	str	r0, [sp, #4]
 801382c:	2b00      	cmp	r3, #0
 801382e:	f1a1 0404 	sub.w	r4, r1, #4
 8013832:	bfb8      	it	lt
 8013834:	18e4      	addlt	r4, r4, r3
 8013836:	f001 fae1 	bl	8014dfc <__malloc_lock>
 801383a:	4a1e      	ldr	r2, [pc, #120]	; (80138b4 <_free_r+0x94>)
 801383c:	9801      	ldr	r0, [sp, #4]
 801383e:	6813      	ldr	r3, [r2, #0]
 8013840:	b933      	cbnz	r3, 8013850 <_free_r+0x30>
 8013842:	6063      	str	r3, [r4, #4]
 8013844:	6014      	str	r4, [r2, #0]
 8013846:	b003      	add	sp, #12
 8013848:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801384c:	f001 badc 	b.w	8014e08 <__malloc_unlock>
 8013850:	42a3      	cmp	r3, r4
 8013852:	d908      	bls.n	8013866 <_free_r+0x46>
 8013854:	6825      	ldr	r5, [r4, #0]
 8013856:	1961      	adds	r1, r4, r5
 8013858:	428b      	cmp	r3, r1
 801385a:	bf01      	itttt	eq
 801385c:	6819      	ldreq	r1, [r3, #0]
 801385e:	685b      	ldreq	r3, [r3, #4]
 8013860:	1949      	addeq	r1, r1, r5
 8013862:	6021      	streq	r1, [r4, #0]
 8013864:	e7ed      	b.n	8013842 <_free_r+0x22>
 8013866:	461a      	mov	r2, r3
 8013868:	685b      	ldr	r3, [r3, #4]
 801386a:	b10b      	cbz	r3, 8013870 <_free_r+0x50>
 801386c:	42a3      	cmp	r3, r4
 801386e:	d9fa      	bls.n	8013866 <_free_r+0x46>
 8013870:	6811      	ldr	r1, [r2, #0]
 8013872:	1855      	adds	r5, r2, r1
 8013874:	42a5      	cmp	r5, r4
 8013876:	d10b      	bne.n	8013890 <_free_r+0x70>
 8013878:	6824      	ldr	r4, [r4, #0]
 801387a:	4421      	add	r1, r4
 801387c:	1854      	adds	r4, r2, r1
 801387e:	42a3      	cmp	r3, r4
 8013880:	6011      	str	r1, [r2, #0]
 8013882:	d1e0      	bne.n	8013846 <_free_r+0x26>
 8013884:	681c      	ldr	r4, [r3, #0]
 8013886:	685b      	ldr	r3, [r3, #4]
 8013888:	6053      	str	r3, [r2, #4]
 801388a:	4421      	add	r1, r4
 801388c:	6011      	str	r1, [r2, #0]
 801388e:	e7da      	b.n	8013846 <_free_r+0x26>
 8013890:	d902      	bls.n	8013898 <_free_r+0x78>
 8013892:	230c      	movs	r3, #12
 8013894:	6003      	str	r3, [r0, #0]
 8013896:	e7d6      	b.n	8013846 <_free_r+0x26>
 8013898:	6825      	ldr	r5, [r4, #0]
 801389a:	1961      	adds	r1, r4, r5
 801389c:	428b      	cmp	r3, r1
 801389e:	bf04      	itt	eq
 80138a0:	6819      	ldreq	r1, [r3, #0]
 80138a2:	685b      	ldreq	r3, [r3, #4]
 80138a4:	6063      	str	r3, [r4, #4]
 80138a6:	bf04      	itt	eq
 80138a8:	1949      	addeq	r1, r1, r5
 80138aa:	6021      	streq	r1, [r4, #0]
 80138ac:	6054      	str	r4, [r2, #4]
 80138ae:	e7ca      	b.n	8013846 <_free_r+0x26>
 80138b0:	b003      	add	sp, #12
 80138b2:	bd30      	pop	{r4, r5, pc}
 80138b4:	2000b4e0 	.word	0x2000b4e0

080138b8 <sbrk_aligned>:
 80138b8:	b570      	push	{r4, r5, r6, lr}
 80138ba:	4e0e      	ldr	r6, [pc, #56]	; (80138f4 <sbrk_aligned+0x3c>)
 80138bc:	460c      	mov	r4, r1
 80138be:	6831      	ldr	r1, [r6, #0]
 80138c0:	4605      	mov	r5, r0
 80138c2:	b911      	cbnz	r1, 80138ca <sbrk_aligned+0x12>
 80138c4:	f000 fe80 	bl	80145c8 <_sbrk_r>
 80138c8:	6030      	str	r0, [r6, #0]
 80138ca:	4621      	mov	r1, r4
 80138cc:	4628      	mov	r0, r5
 80138ce:	f000 fe7b 	bl	80145c8 <_sbrk_r>
 80138d2:	1c43      	adds	r3, r0, #1
 80138d4:	d00a      	beq.n	80138ec <sbrk_aligned+0x34>
 80138d6:	1cc4      	adds	r4, r0, #3
 80138d8:	f024 0403 	bic.w	r4, r4, #3
 80138dc:	42a0      	cmp	r0, r4
 80138de:	d007      	beq.n	80138f0 <sbrk_aligned+0x38>
 80138e0:	1a21      	subs	r1, r4, r0
 80138e2:	4628      	mov	r0, r5
 80138e4:	f000 fe70 	bl	80145c8 <_sbrk_r>
 80138e8:	3001      	adds	r0, #1
 80138ea:	d101      	bne.n	80138f0 <sbrk_aligned+0x38>
 80138ec:	f04f 34ff 	mov.w	r4, #4294967295
 80138f0:	4620      	mov	r0, r4
 80138f2:	bd70      	pop	{r4, r5, r6, pc}
 80138f4:	2000b4e4 	.word	0x2000b4e4

080138f8 <_malloc_r>:
 80138f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138fc:	1ccd      	adds	r5, r1, #3
 80138fe:	f025 0503 	bic.w	r5, r5, #3
 8013902:	3508      	adds	r5, #8
 8013904:	2d0c      	cmp	r5, #12
 8013906:	bf38      	it	cc
 8013908:	250c      	movcc	r5, #12
 801390a:	2d00      	cmp	r5, #0
 801390c:	4607      	mov	r7, r0
 801390e:	db01      	blt.n	8013914 <_malloc_r+0x1c>
 8013910:	42a9      	cmp	r1, r5
 8013912:	d905      	bls.n	8013920 <_malloc_r+0x28>
 8013914:	230c      	movs	r3, #12
 8013916:	603b      	str	r3, [r7, #0]
 8013918:	2600      	movs	r6, #0
 801391a:	4630      	mov	r0, r6
 801391c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013920:	4e2e      	ldr	r6, [pc, #184]	; (80139dc <_malloc_r+0xe4>)
 8013922:	f001 fa6b 	bl	8014dfc <__malloc_lock>
 8013926:	6833      	ldr	r3, [r6, #0]
 8013928:	461c      	mov	r4, r3
 801392a:	bb34      	cbnz	r4, 801397a <_malloc_r+0x82>
 801392c:	4629      	mov	r1, r5
 801392e:	4638      	mov	r0, r7
 8013930:	f7ff ffc2 	bl	80138b8 <sbrk_aligned>
 8013934:	1c43      	adds	r3, r0, #1
 8013936:	4604      	mov	r4, r0
 8013938:	d14d      	bne.n	80139d6 <_malloc_r+0xde>
 801393a:	6834      	ldr	r4, [r6, #0]
 801393c:	4626      	mov	r6, r4
 801393e:	2e00      	cmp	r6, #0
 8013940:	d140      	bne.n	80139c4 <_malloc_r+0xcc>
 8013942:	6823      	ldr	r3, [r4, #0]
 8013944:	4631      	mov	r1, r6
 8013946:	4638      	mov	r0, r7
 8013948:	eb04 0803 	add.w	r8, r4, r3
 801394c:	f000 fe3c 	bl	80145c8 <_sbrk_r>
 8013950:	4580      	cmp	r8, r0
 8013952:	d13a      	bne.n	80139ca <_malloc_r+0xd2>
 8013954:	6821      	ldr	r1, [r4, #0]
 8013956:	3503      	adds	r5, #3
 8013958:	1a6d      	subs	r5, r5, r1
 801395a:	f025 0503 	bic.w	r5, r5, #3
 801395e:	3508      	adds	r5, #8
 8013960:	2d0c      	cmp	r5, #12
 8013962:	bf38      	it	cc
 8013964:	250c      	movcc	r5, #12
 8013966:	4629      	mov	r1, r5
 8013968:	4638      	mov	r0, r7
 801396a:	f7ff ffa5 	bl	80138b8 <sbrk_aligned>
 801396e:	3001      	adds	r0, #1
 8013970:	d02b      	beq.n	80139ca <_malloc_r+0xd2>
 8013972:	6823      	ldr	r3, [r4, #0]
 8013974:	442b      	add	r3, r5
 8013976:	6023      	str	r3, [r4, #0]
 8013978:	e00e      	b.n	8013998 <_malloc_r+0xa0>
 801397a:	6822      	ldr	r2, [r4, #0]
 801397c:	1b52      	subs	r2, r2, r5
 801397e:	d41e      	bmi.n	80139be <_malloc_r+0xc6>
 8013980:	2a0b      	cmp	r2, #11
 8013982:	d916      	bls.n	80139b2 <_malloc_r+0xba>
 8013984:	1961      	adds	r1, r4, r5
 8013986:	42a3      	cmp	r3, r4
 8013988:	6025      	str	r5, [r4, #0]
 801398a:	bf18      	it	ne
 801398c:	6059      	strne	r1, [r3, #4]
 801398e:	6863      	ldr	r3, [r4, #4]
 8013990:	bf08      	it	eq
 8013992:	6031      	streq	r1, [r6, #0]
 8013994:	5162      	str	r2, [r4, r5]
 8013996:	604b      	str	r3, [r1, #4]
 8013998:	4638      	mov	r0, r7
 801399a:	f104 060b 	add.w	r6, r4, #11
 801399e:	f001 fa33 	bl	8014e08 <__malloc_unlock>
 80139a2:	f026 0607 	bic.w	r6, r6, #7
 80139a6:	1d23      	adds	r3, r4, #4
 80139a8:	1af2      	subs	r2, r6, r3
 80139aa:	d0b6      	beq.n	801391a <_malloc_r+0x22>
 80139ac:	1b9b      	subs	r3, r3, r6
 80139ae:	50a3      	str	r3, [r4, r2]
 80139b0:	e7b3      	b.n	801391a <_malloc_r+0x22>
 80139b2:	6862      	ldr	r2, [r4, #4]
 80139b4:	42a3      	cmp	r3, r4
 80139b6:	bf0c      	ite	eq
 80139b8:	6032      	streq	r2, [r6, #0]
 80139ba:	605a      	strne	r2, [r3, #4]
 80139bc:	e7ec      	b.n	8013998 <_malloc_r+0xa0>
 80139be:	4623      	mov	r3, r4
 80139c0:	6864      	ldr	r4, [r4, #4]
 80139c2:	e7b2      	b.n	801392a <_malloc_r+0x32>
 80139c4:	4634      	mov	r4, r6
 80139c6:	6876      	ldr	r6, [r6, #4]
 80139c8:	e7b9      	b.n	801393e <_malloc_r+0x46>
 80139ca:	230c      	movs	r3, #12
 80139cc:	603b      	str	r3, [r7, #0]
 80139ce:	4638      	mov	r0, r7
 80139d0:	f001 fa1a 	bl	8014e08 <__malloc_unlock>
 80139d4:	e7a1      	b.n	801391a <_malloc_r+0x22>
 80139d6:	6025      	str	r5, [r4, #0]
 80139d8:	e7de      	b.n	8013998 <_malloc_r+0xa0>
 80139da:	bf00      	nop
 80139dc:	2000b4e0 	.word	0x2000b4e0

080139e0 <__ssputs_r>:
 80139e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80139e4:	688e      	ldr	r6, [r1, #8]
 80139e6:	429e      	cmp	r6, r3
 80139e8:	4682      	mov	sl, r0
 80139ea:	460c      	mov	r4, r1
 80139ec:	4690      	mov	r8, r2
 80139ee:	461f      	mov	r7, r3
 80139f0:	d838      	bhi.n	8013a64 <__ssputs_r+0x84>
 80139f2:	898a      	ldrh	r2, [r1, #12]
 80139f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80139f8:	d032      	beq.n	8013a60 <__ssputs_r+0x80>
 80139fa:	6825      	ldr	r5, [r4, #0]
 80139fc:	6909      	ldr	r1, [r1, #16]
 80139fe:	eba5 0901 	sub.w	r9, r5, r1
 8013a02:	6965      	ldr	r5, [r4, #20]
 8013a04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013a08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013a0c:	3301      	adds	r3, #1
 8013a0e:	444b      	add	r3, r9
 8013a10:	106d      	asrs	r5, r5, #1
 8013a12:	429d      	cmp	r5, r3
 8013a14:	bf38      	it	cc
 8013a16:	461d      	movcc	r5, r3
 8013a18:	0553      	lsls	r3, r2, #21
 8013a1a:	d531      	bpl.n	8013a80 <__ssputs_r+0xa0>
 8013a1c:	4629      	mov	r1, r5
 8013a1e:	f7ff ff6b 	bl	80138f8 <_malloc_r>
 8013a22:	4606      	mov	r6, r0
 8013a24:	b950      	cbnz	r0, 8013a3c <__ssputs_r+0x5c>
 8013a26:	230c      	movs	r3, #12
 8013a28:	f8ca 3000 	str.w	r3, [sl]
 8013a2c:	89a3      	ldrh	r3, [r4, #12]
 8013a2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013a32:	81a3      	strh	r3, [r4, #12]
 8013a34:	f04f 30ff 	mov.w	r0, #4294967295
 8013a38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a3c:	6921      	ldr	r1, [r4, #16]
 8013a3e:	464a      	mov	r2, r9
 8013a40:	f7fc f970 	bl	800fd24 <memcpy>
 8013a44:	89a3      	ldrh	r3, [r4, #12]
 8013a46:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013a4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013a4e:	81a3      	strh	r3, [r4, #12]
 8013a50:	6126      	str	r6, [r4, #16]
 8013a52:	6165      	str	r5, [r4, #20]
 8013a54:	444e      	add	r6, r9
 8013a56:	eba5 0509 	sub.w	r5, r5, r9
 8013a5a:	6026      	str	r6, [r4, #0]
 8013a5c:	60a5      	str	r5, [r4, #8]
 8013a5e:	463e      	mov	r6, r7
 8013a60:	42be      	cmp	r6, r7
 8013a62:	d900      	bls.n	8013a66 <__ssputs_r+0x86>
 8013a64:	463e      	mov	r6, r7
 8013a66:	6820      	ldr	r0, [r4, #0]
 8013a68:	4632      	mov	r2, r6
 8013a6a:	4641      	mov	r1, r8
 8013a6c:	f001 f9ac 	bl	8014dc8 <memmove>
 8013a70:	68a3      	ldr	r3, [r4, #8]
 8013a72:	1b9b      	subs	r3, r3, r6
 8013a74:	60a3      	str	r3, [r4, #8]
 8013a76:	6823      	ldr	r3, [r4, #0]
 8013a78:	4433      	add	r3, r6
 8013a7a:	6023      	str	r3, [r4, #0]
 8013a7c:	2000      	movs	r0, #0
 8013a7e:	e7db      	b.n	8013a38 <__ssputs_r+0x58>
 8013a80:	462a      	mov	r2, r5
 8013a82:	f001 f9c7 	bl	8014e14 <_realloc_r>
 8013a86:	4606      	mov	r6, r0
 8013a88:	2800      	cmp	r0, #0
 8013a8a:	d1e1      	bne.n	8013a50 <__ssputs_r+0x70>
 8013a8c:	6921      	ldr	r1, [r4, #16]
 8013a8e:	4650      	mov	r0, sl
 8013a90:	f7ff fec6 	bl	8013820 <_free_r>
 8013a94:	e7c7      	b.n	8013a26 <__ssputs_r+0x46>
	...

08013a98 <_svfiprintf_r>:
 8013a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a9c:	4698      	mov	r8, r3
 8013a9e:	898b      	ldrh	r3, [r1, #12]
 8013aa0:	061b      	lsls	r3, r3, #24
 8013aa2:	b09d      	sub	sp, #116	; 0x74
 8013aa4:	4607      	mov	r7, r0
 8013aa6:	460d      	mov	r5, r1
 8013aa8:	4614      	mov	r4, r2
 8013aaa:	d50e      	bpl.n	8013aca <_svfiprintf_r+0x32>
 8013aac:	690b      	ldr	r3, [r1, #16]
 8013aae:	b963      	cbnz	r3, 8013aca <_svfiprintf_r+0x32>
 8013ab0:	2140      	movs	r1, #64	; 0x40
 8013ab2:	f7ff ff21 	bl	80138f8 <_malloc_r>
 8013ab6:	6028      	str	r0, [r5, #0]
 8013ab8:	6128      	str	r0, [r5, #16]
 8013aba:	b920      	cbnz	r0, 8013ac6 <_svfiprintf_r+0x2e>
 8013abc:	230c      	movs	r3, #12
 8013abe:	603b      	str	r3, [r7, #0]
 8013ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8013ac4:	e0d1      	b.n	8013c6a <_svfiprintf_r+0x1d2>
 8013ac6:	2340      	movs	r3, #64	; 0x40
 8013ac8:	616b      	str	r3, [r5, #20]
 8013aca:	2300      	movs	r3, #0
 8013acc:	9309      	str	r3, [sp, #36]	; 0x24
 8013ace:	2320      	movs	r3, #32
 8013ad0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013ad4:	f8cd 800c 	str.w	r8, [sp, #12]
 8013ad8:	2330      	movs	r3, #48	; 0x30
 8013ada:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013c84 <_svfiprintf_r+0x1ec>
 8013ade:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013ae2:	f04f 0901 	mov.w	r9, #1
 8013ae6:	4623      	mov	r3, r4
 8013ae8:	469a      	mov	sl, r3
 8013aea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013aee:	b10a      	cbz	r2, 8013af4 <_svfiprintf_r+0x5c>
 8013af0:	2a25      	cmp	r2, #37	; 0x25
 8013af2:	d1f9      	bne.n	8013ae8 <_svfiprintf_r+0x50>
 8013af4:	ebba 0b04 	subs.w	fp, sl, r4
 8013af8:	d00b      	beq.n	8013b12 <_svfiprintf_r+0x7a>
 8013afa:	465b      	mov	r3, fp
 8013afc:	4622      	mov	r2, r4
 8013afe:	4629      	mov	r1, r5
 8013b00:	4638      	mov	r0, r7
 8013b02:	f7ff ff6d 	bl	80139e0 <__ssputs_r>
 8013b06:	3001      	adds	r0, #1
 8013b08:	f000 80aa 	beq.w	8013c60 <_svfiprintf_r+0x1c8>
 8013b0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013b0e:	445a      	add	r2, fp
 8013b10:	9209      	str	r2, [sp, #36]	; 0x24
 8013b12:	f89a 3000 	ldrb.w	r3, [sl]
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	f000 80a2 	beq.w	8013c60 <_svfiprintf_r+0x1c8>
 8013b1c:	2300      	movs	r3, #0
 8013b1e:	f04f 32ff 	mov.w	r2, #4294967295
 8013b22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013b26:	f10a 0a01 	add.w	sl, sl, #1
 8013b2a:	9304      	str	r3, [sp, #16]
 8013b2c:	9307      	str	r3, [sp, #28]
 8013b2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013b32:	931a      	str	r3, [sp, #104]	; 0x68
 8013b34:	4654      	mov	r4, sl
 8013b36:	2205      	movs	r2, #5
 8013b38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b3c:	4851      	ldr	r0, [pc, #324]	; (8013c84 <_svfiprintf_r+0x1ec>)
 8013b3e:	f7ec fb7f 	bl	8000240 <memchr>
 8013b42:	9a04      	ldr	r2, [sp, #16]
 8013b44:	b9d8      	cbnz	r0, 8013b7e <_svfiprintf_r+0xe6>
 8013b46:	06d0      	lsls	r0, r2, #27
 8013b48:	bf44      	itt	mi
 8013b4a:	2320      	movmi	r3, #32
 8013b4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013b50:	0711      	lsls	r1, r2, #28
 8013b52:	bf44      	itt	mi
 8013b54:	232b      	movmi	r3, #43	; 0x2b
 8013b56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013b5a:	f89a 3000 	ldrb.w	r3, [sl]
 8013b5e:	2b2a      	cmp	r3, #42	; 0x2a
 8013b60:	d015      	beq.n	8013b8e <_svfiprintf_r+0xf6>
 8013b62:	9a07      	ldr	r2, [sp, #28]
 8013b64:	4654      	mov	r4, sl
 8013b66:	2000      	movs	r0, #0
 8013b68:	f04f 0c0a 	mov.w	ip, #10
 8013b6c:	4621      	mov	r1, r4
 8013b6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013b72:	3b30      	subs	r3, #48	; 0x30
 8013b74:	2b09      	cmp	r3, #9
 8013b76:	d94e      	bls.n	8013c16 <_svfiprintf_r+0x17e>
 8013b78:	b1b0      	cbz	r0, 8013ba8 <_svfiprintf_r+0x110>
 8013b7a:	9207      	str	r2, [sp, #28]
 8013b7c:	e014      	b.n	8013ba8 <_svfiprintf_r+0x110>
 8013b7e:	eba0 0308 	sub.w	r3, r0, r8
 8013b82:	fa09 f303 	lsl.w	r3, r9, r3
 8013b86:	4313      	orrs	r3, r2
 8013b88:	9304      	str	r3, [sp, #16]
 8013b8a:	46a2      	mov	sl, r4
 8013b8c:	e7d2      	b.n	8013b34 <_svfiprintf_r+0x9c>
 8013b8e:	9b03      	ldr	r3, [sp, #12]
 8013b90:	1d19      	adds	r1, r3, #4
 8013b92:	681b      	ldr	r3, [r3, #0]
 8013b94:	9103      	str	r1, [sp, #12]
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	bfbb      	ittet	lt
 8013b9a:	425b      	neglt	r3, r3
 8013b9c:	f042 0202 	orrlt.w	r2, r2, #2
 8013ba0:	9307      	strge	r3, [sp, #28]
 8013ba2:	9307      	strlt	r3, [sp, #28]
 8013ba4:	bfb8      	it	lt
 8013ba6:	9204      	strlt	r2, [sp, #16]
 8013ba8:	7823      	ldrb	r3, [r4, #0]
 8013baa:	2b2e      	cmp	r3, #46	; 0x2e
 8013bac:	d10c      	bne.n	8013bc8 <_svfiprintf_r+0x130>
 8013bae:	7863      	ldrb	r3, [r4, #1]
 8013bb0:	2b2a      	cmp	r3, #42	; 0x2a
 8013bb2:	d135      	bne.n	8013c20 <_svfiprintf_r+0x188>
 8013bb4:	9b03      	ldr	r3, [sp, #12]
 8013bb6:	1d1a      	adds	r2, r3, #4
 8013bb8:	681b      	ldr	r3, [r3, #0]
 8013bba:	9203      	str	r2, [sp, #12]
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	bfb8      	it	lt
 8013bc0:	f04f 33ff 	movlt.w	r3, #4294967295
 8013bc4:	3402      	adds	r4, #2
 8013bc6:	9305      	str	r3, [sp, #20]
 8013bc8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013c94 <_svfiprintf_r+0x1fc>
 8013bcc:	7821      	ldrb	r1, [r4, #0]
 8013bce:	2203      	movs	r2, #3
 8013bd0:	4650      	mov	r0, sl
 8013bd2:	f7ec fb35 	bl	8000240 <memchr>
 8013bd6:	b140      	cbz	r0, 8013bea <_svfiprintf_r+0x152>
 8013bd8:	2340      	movs	r3, #64	; 0x40
 8013bda:	eba0 000a 	sub.w	r0, r0, sl
 8013bde:	fa03 f000 	lsl.w	r0, r3, r0
 8013be2:	9b04      	ldr	r3, [sp, #16]
 8013be4:	4303      	orrs	r3, r0
 8013be6:	3401      	adds	r4, #1
 8013be8:	9304      	str	r3, [sp, #16]
 8013bea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013bee:	4826      	ldr	r0, [pc, #152]	; (8013c88 <_svfiprintf_r+0x1f0>)
 8013bf0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013bf4:	2206      	movs	r2, #6
 8013bf6:	f7ec fb23 	bl	8000240 <memchr>
 8013bfa:	2800      	cmp	r0, #0
 8013bfc:	d038      	beq.n	8013c70 <_svfiprintf_r+0x1d8>
 8013bfe:	4b23      	ldr	r3, [pc, #140]	; (8013c8c <_svfiprintf_r+0x1f4>)
 8013c00:	bb1b      	cbnz	r3, 8013c4a <_svfiprintf_r+0x1b2>
 8013c02:	9b03      	ldr	r3, [sp, #12]
 8013c04:	3307      	adds	r3, #7
 8013c06:	f023 0307 	bic.w	r3, r3, #7
 8013c0a:	3308      	adds	r3, #8
 8013c0c:	9303      	str	r3, [sp, #12]
 8013c0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c10:	4433      	add	r3, r6
 8013c12:	9309      	str	r3, [sp, #36]	; 0x24
 8013c14:	e767      	b.n	8013ae6 <_svfiprintf_r+0x4e>
 8013c16:	fb0c 3202 	mla	r2, ip, r2, r3
 8013c1a:	460c      	mov	r4, r1
 8013c1c:	2001      	movs	r0, #1
 8013c1e:	e7a5      	b.n	8013b6c <_svfiprintf_r+0xd4>
 8013c20:	2300      	movs	r3, #0
 8013c22:	3401      	adds	r4, #1
 8013c24:	9305      	str	r3, [sp, #20]
 8013c26:	4619      	mov	r1, r3
 8013c28:	f04f 0c0a 	mov.w	ip, #10
 8013c2c:	4620      	mov	r0, r4
 8013c2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013c32:	3a30      	subs	r2, #48	; 0x30
 8013c34:	2a09      	cmp	r2, #9
 8013c36:	d903      	bls.n	8013c40 <_svfiprintf_r+0x1a8>
 8013c38:	2b00      	cmp	r3, #0
 8013c3a:	d0c5      	beq.n	8013bc8 <_svfiprintf_r+0x130>
 8013c3c:	9105      	str	r1, [sp, #20]
 8013c3e:	e7c3      	b.n	8013bc8 <_svfiprintf_r+0x130>
 8013c40:	fb0c 2101 	mla	r1, ip, r1, r2
 8013c44:	4604      	mov	r4, r0
 8013c46:	2301      	movs	r3, #1
 8013c48:	e7f0      	b.n	8013c2c <_svfiprintf_r+0x194>
 8013c4a:	ab03      	add	r3, sp, #12
 8013c4c:	9300      	str	r3, [sp, #0]
 8013c4e:	462a      	mov	r2, r5
 8013c50:	4b0f      	ldr	r3, [pc, #60]	; (8013c90 <_svfiprintf_r+0x1f8>)
 8013c52:	a904      	add	r1, sp, #16
 8013c54:	4638      	mov	r0, r7
 8013c56:	f7fc f91b 	bl	800fe90 <_printf_float>
 8013c5a:	1c42      	adds	r2, r0, #1
 8013c5c:	4606      	mov	r6, r0
 8013c5e:	d1d6      	bne.n	8013c0e <_svfiprintf_r+0x176>
 8013c60:	89ab      	ldrh	r3, [r5, #12]
 8013c62:	065b      	lsls	r3, r3, #25
 8013c64:	f53f af2c 	bmi.w	8013ac0 <_svfiprintf_r+0x28>
 8013c68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013c6a:	b01d      	add	sp, #116	; 0x74
 8013c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c70:	ab03      	add	r3, sp, #12
 8013c72:	9300      	str	r3, [sp, #0]
 8013c74:	462a      	mov	r2, r5
 8013c76:	4b06      	ldr	r3, [pc, #24]	; (8013c90 <_svfiprintf_r+0x1f8>)
 8013c78:	a904      	add	r1, sp, #16
 8013c7a:	4638      	mov	r0, r7
 8013c7c:	f7fc fbac 	bl	80103d8 <_printf_i>
 8013c80:	e7eb      	b.n	8013c5a <_svfiprintf_r+0x1c2>
 8013c82:	bf00      	nop
 8013c84:	08016944 	.word	0x08016944
 8013c88:	0801694e 	.word	0x0801694e
 8013c8c:	0800fe91 	.word	0x0800fe91
 8013c90:	080139e1 	.word	0x080139e1
 8013c94:	0801694a 	.word	0x0801694a

08013c98 <_sungetc_r>:
 8013c98:	b538      	push	{r3, r4, r5, lr}
 8013c9a:	1c4b      	adds	r3, r1, #1
 8013c9c:	4614      	mov	r4, r2
 8013c9e:	d103      	bne.n	8013ca8 <_sungetc_r+0x10>
 8013ca0:	f04f 35ff 	mov.w	r5, #4294967295
 8013ca4:	4628      	mov	r0, r5
 8013ca6:	bd38      	pop	{r3, r4, r5, pc}
 8013ca8:	8993      	ldrh	r3, [r2, #12]
 8013caa:	f023 0320 	bic.w	r3, r3, #32
 8013cae:	8193      	strh	r3, [r2, #12]
 8013cb0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013cb2:	6852      	ldr	r2, [r2, #4]
 8013cb4:	b2cd      	uxtb	r5, r1
 8013cb6:	b18b      	cbz	r3, 8013cdc <_sungetc_r+0x44>
 8013cb8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013cba:	4293      	cmp	r3, r2
 8013cbc:	dd08      	ble.n	8013cd0 <_sungetc_r+0x38>
 8013cbe:	6823      	ldr	r3, [r4, #0]
 8013cc0:	1e5a      	subs	r2, r3, #1
 8013cc2:	6022      	str	r2, [r4, #0]
 8013cc4:	f803 5c01 	strb.w	r5, [r3, #-1]
 8013cc8:	6863      	ldr	r3, [r4, #4]
 8013cca:	3301      	adds	r3, #1
 8013ccc:	6063      	str	r3, [r4, #4]
 8013cce:	e7e9      	b.n	8013ca4 <_sungetc_r+0xc>
 8013cd0:	4621      	mov	r1, r4
 8013cd2:	f000 fd49 	bl	8014768 <__submore>
 8013cd6:	2800      	cmp	r0, #0
 8013cd8:	d0f1      	beq.n	8013cbe <_sungetc_r+0x26>
 8013cda:	e7e1      	b.n	8013ca0 <_sungetc_r+0x8>
 8013cdc:	6921      	ldr	r1, [r4, #16]
 8013cde:	6823      	ldr	r3, [r4, #0]
 8013ce0:	b151      	cbz	r1, 8013cf8 <_sungetc_r+0x60>
 8013ce2:	4299      	cmp	r1, r3
 8013ce4:	d208      	bcs.n	8013cf8 <_sungetc_r+0x60>
 8013ce6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8013cea:	42a9      	cmp	r1, r5
 8013cec:	d104      	bne.n	8013cf8 <_sungetc_r+0x60>
 8013cee:	3b01      	subs	r3, #1
 8013cf0:	3201      	adds	r2, #1
 8013cf2:	6023      	str	r3, [r4, #0]
 8013cf4:	6062      	str	r2, [r4, #4]
 8013cf6:	e7d5      	b.n	8013ca4 <_sungetc_r+0xc>
 8013cf8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8013cfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013d00:	6363      	str	r3, [r4, #52]	; 0x34
 8013d02:	2303      	movs	r3, #3
 8013d04:	63a3      	str	r3, [r4, #56]	; 0x38
 8013d06:	4623      	mov	r3, r4
 8013d08:	f803 5f46 	strb.w	r5, [r3, #70]!
 8013d0c:	6023      	str	r3, [r4, #0]
 8013d0e:	2301      	movs	r3, #1
 8013d10:	e7dc      	b.n	8013ccc <_sungetc_r+0x34>

08013d12 <__ssrefill_r>:
 8013d12:	b510      	push	{r4, lr}
 8013d14:	460c      	mov	r4, r1
 8013d16:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8013d18:	b169      	cbz	r1, 8013d36 <__ssrefill_r+0x24>
 8013d1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013d1e:	4299      	cmp	r1, r3
 8013d20:	d001      	beq.n	8013d26 <__ssrefill_r+0x14>
 8013d22:	f7ff fd7d 	bl	8013820 <_free_r>
 8013d26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013d28:	6063      	str	r3, [r4, #4]
 8013d2a:	2000      	movs	r0, #0
 8013d2c:	6360      	str	r0, [r4, #52]	; 0x34
 8013d2e:	b113      	cbz	r3, 8013d36 <__ssrefill_r+0x24>
 8013d30:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8013d32:	6023      	str	r3, [r4, #0]
 8013d34:	bd10      	pop	{r4, pc}
 8013d36:	6923      	ldr	r3, [r4, #16]
 8013d38:	6023      	str	r3, [r4, #0]
 8013d3a:	2300      	movs	r3, #0
 8013d3c:	6063      	str	r3, [r4, #4]
 8013d3e:	89a3      	ldrh	r3, [r4, #12]
 8013d40:	f043 0320 	orr.w	r3, r3, #32
 8013d44:	81a3      	strh	r3, [r4, #12]
 8013d46:	f04f 30ff 	mov.w	r0, #4294967295
 8013d4a:	e7f3      	b.n	8013d34 <__ssrefill_r+0x22>

08013d4c <__ssvfiscanf_r>:
 8013d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013d50:	460c      	mov	r4, r1
 8013d52:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8013d56:	2100      	movs	r1, #0
 8013d58:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8013d5c:	49a6      	ldr	r1, [pc, #664]	; (8013ff8 <__ssvfiscanf_r+0x2ac>)
 8013d5e:	91a0      	str	r1, [sp, #640]	; 0x280
 8013d60:	f10d 0804 	add.w	r8, sp, #4
 8013d64:	49a5      	ldr	r1, [pc, #660]	; (8013ffc <__ssvfiscanf_r+0x2b0>)
 8013d66:	4fa6      	ldr	r7, [pc, #664]	; (8014000 <__ssvfiscanf_r+0x2b4>)
 8013d68:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8014004 <__ssvfiscanf_r+0x2b8>
 8013d6c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8013d70:	4606      	mov	r6, r0
 8013d72:	91a1      	str	r1, [sp, #644]	; 0x284
 8013d74:	9300      	str	r3, [sp, #0]
 8013d76:	7813      	ldrb	r3, [r2, #0]
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	f000 815a 	beq.w	8014032 <__ssvfiscanf_r+0x2e6>
 8013d7e:	5dd9      	ldrb	r1, [r3, r7]
 8013d80:	f011 0108 	ands.w	r1, r1, #8
 8013d84:	f102 0501 	add.w	r5, r2, #1
 8013d88:	d019      	beq.n	8013dbe <__ssvfiscanf_r+0x72>
 8013d8a:	6863      	ldr	r3, [r4, #4]
 8013d8c:	2b00      	cmp	r3, #0
 8013d8e:	dd0f      	ble.n	8013db0 <__ssvfiscanf_r+0x64>
 8013d90:	6823      	ldr	r3, [r4, #0]
 8013d92:	781a      	ldrb	r2, [r3, #0]
 8013d94:	5cba      	ldrb	r2, [r7, r2]
 8013d96:	0712      	lsls	r2, r2, #28
 8013d98:	d401      	bmi.n	8013d9e <__ssvfiscanf_r+0x52>
 8013d9a:	462a      	mov	r2, r5
 8013d9c:	e7eb      	b.n	8013d76 <__ssvfiscanf_r+0x2a>
 8013d9e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8013da0:	3201      	adds	r2, #1
 8013da2:	9245      	str	r2, [sp, #276]	; 0x114
 8013da4:	6862      	ldr	r2, [r4, #4]
 8013da6:	3301      	adds	r3, #1
 8013da8:	3a01      	subs	r2, #1
 8013daa:	6062      	str	r2, [r4, #4]
 8013dac:	6023      	str	r3, [r4, #0]
 8013dae:	e7ec      	b.n	8013d8a <__ssvfiscanf_r+0x3e>
 8013db0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013db2:	4621      	mov	r1, r4
 8013db4:	4630      	mov	r0, r6
 8013db6:	4798      	blx	r3
 8013db8:	2800      	cmp	r0, #0
 8013dba:	d0e9      	beq.n	8013d90 <__ssvfiscanf_r+0x44>
 8013dbc:	e7ed      	b.n	8013d9a <__ssvfiscanf_r+0x4e>
 8013dbe:	2b25      	cmp	r3, #37	; 0x25
 8013dc0:	d012      	beq.n	8013de8 <__ssvfiscanf_r+0x9c>
 8013dc2:	469a      	mov	sl, r3
 8013dc4:	6863      	ldr	r3, [r4, #4]
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	f340 8091 	ble.w	8013eee <__ssvfiscanf_r+0x1a2>
 8013dcc:	6822      	ldr	r2, [r4, #0]
 8013dce:	7813      	ldrb	r3, [r2, #0]
 8013dd0:	4553      	cmp	r3, sl
 8013dd2:	f040 812e 	bne.w	8014032 <__ssvfiscanf_r+0x2e6>
 8013dd6:	6863      	ldr	r3, [r4, #4]
 8013dd8:	3b01      	subs	r3, #1
 8013dda:	6063      	str	r3, [r4, #4]
 8013ddc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8013dde:	3201      	adds	r2, #1
 8013de0:	3301      	adds	r3, #1
 8013de2:	6022      	str	r2, [r4, #0]
 8013de4:	9345      	str	r3, [sp, #276]	; 0x114
 8013de6:	e7d8      	b.n	8013d9a <__ssvfiscanf_r+0x4e>
 8013de8:	9141      	str	r1, [sp, #260]	; 0x104
 8013dea:	9143      	str	r1, [sp, #268]	; 0x10c
 8013dec:	7853      	ldrb	r3, [r2, #1]
 8013dee:	2b2a      	cmp	r3, #42	; 0x2a
 8013df0:	bf02      	ittt	eq
 8013df2:	2310      	moveq	r3, #16
 8013df4:	1c95      	addeq	r5, r2, #2
 8013df6:	9341      	streq	r3, [sp, #260]	; 0x104
 8013df8:	220a      	movs	r2, #10
 8013dfa:	46aa      	mov	sl, r5
 8013dfc:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8013e00:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8013e04:	2b09      	cmp	r3, #9
 8013e06:	d91d      	bls.n	8013e44 <__ssvfiscanf_r+0xf8>
 8013e08:	487e      	ldr	r0, [pc, #504]	; (8014004 <__ssvfiscanf_r+0x2b8>)
 8013e0a:	2203      	movs	r2, #3
 8013e0c:	f7ec fa18 	bl	8000240 <memchr>
 8013e10:	b140      	cbz	r0, 8013e24 <__ssvfiscanf_r+0xd8>
 8013e12:	2301      	movs	r3, #1
 8013e14:	eba0 0009 	sub.w	r0, r0, r9
 8013e18:	fa03 f000 	lsl.w	r0, r3, r0
 8013e1c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013e1e:	4318      	orrs	r0, r3
 8013e20:	9041      	str	r0, [sp, #260]	; 0x104
 8013e22:	4655      	mov	r5, sl
 8013e24:	f815 3b01 	ldrb.w	r3, [r5], #1
 8013e28:	2b78      	cmp	r3, #120	; 0x78
 8013e2a:	d806      	bhi.n	8013e3a <__ssvfiscanf_r+0xee>
 8013e2c:	2b57      	cmp	r3, #87	; 0x57
 8013e2e:	d810      	bhi.n	8013e52 <__ssvfiscanf_r+0x106>
 8013e30:	2b25      	cmp	r3, #37	; 0x25
 8013e32:	d0c6      	beq.n	8013dc2 <__ssvfiscanf_r+0x76>
 8013e34:	d856      	bhi.n	8013ee4 <__ssvfiscanf_r+0x198>
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	d064      	beq.n	8013f04 <__ssvfiscanf_r+0x1b8>
 8013e3a:	2303      	movs	r3, #3
 8013e3c:	9347      	str	r3, [sp, #284]	; 0x11c
 8013e3e:	230a      	movs	r3, #10
 8013e40:	9342      	str	r3, [sp, #264]	; 0x108
 8013e42:	e071      	b.n	8013f28 <__ssvfiscanf_r+0x1dc>
 8013e44:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8013e46:	fb02 1103 	mla	r1, r2, r3, r1
 8013e4a:	3930      	subs	r1, #48	; 0x30
 8013e4c:	9143      	str	r1, [sp, #268]	; 0x10c
 8013e4e:	4655      	mov	r5, sl
 8013e50:	e7d3      	b.n	8013dfa <__ssvfiscanf_r+0xae>
 8013e52:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8013e56:	2a20      	cmp	r2, #32
 8013e58:	d8ef      	bhi.n	8013e3a <__ssvfiscanf_r+0xee>
 8013e5a:	a101      	add	r1, pc, #4	; (adr r1, 8013e60 <__ssvfiscanf_r+0x114>)
 8013e5c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8013e60:	08013f13 	.word	0x08013f13
 8013e64:	08013e3b 	.word	0x08013e3b
 8013e68:	08013e3b 	.word	0x08013e3b
 8013e6c:	08013f71 	.word	0x08013f71
 8013e70:	08013e3b 	.word	0x08013e3b
 8013e74:	08013e3b 	.word	0x08013e3b
 8013e78:	08013e3b 	.word	0x08013e3b
 8013e7c:	08013e3b 	.word	0x08013e3b
 8013e80:	08013e3b 	.word	0x08013e3b
 8013e84:	08013e3b 	.word	0x08013e3b
 8013e88:	08013e3b 	.word	0x08013e3b
 8013e8c:	08013f87 	.word	0x08013f87
 8013e90:	08013f5d 	.word	0x08013f5d
 8013e94:	08013eeb 	.word	0x08013eeb
 8013e98:	08013eeb 	.word	0x08013eeb
 8013e9c:	08013eeb 	.word	0x08013eeb
 8013ea0:	08013e3b 	.word	0x08013e3b
 8013ea4:	08013f61 	.word	0x08013f61
 8013ea8:	08013e3b 	.word	0x08013e3b
 8013eac:	08013e3b 	.word	0x08013e3b
 8013eb0:	08013e3b 	.word	0x08013e3b
 8013eb4:	08013e3b 	.word	0x08013e3b
 8013eb8:	08013f97 	.word	0x08013f97
 8013ebc:	08013f69 	.word	0x08013f69
 8013ec0:	08013f0b 	.word	0x08013f0b
 8013ec4:	08013e3b 	.word	0x08013e3b
 8013ec8:	08013e3b 	.word	0x08013e3b
 8013ecc:	08013f93 	.word	0x08013f93
 8013ed0:	08013e3b 	.word	0x08013e3b
 8013ed4:	08013f5d 	.word	0x08013f5d
 8013ed8:	08013e3b 	.word	0x08013e3b
 8013edc:	08013e3b 	.word	0x08013e3b
 8013ee0:	08013f13 	.word	0x08013f13
 8013ee4:	3b45      	subs	r3, #69	; 0x45
 8013ee6:	2b02      	cmp	r3, #2
 8013ee8:	d8a7      	bhi.n	8013e3a <__ssvfiscanf_r+0xee>
 8013eea:	2305      	movs	r3, #5
 8013eec:	e01b      	b.n	8013f26 <__ssvfiscanf_r+0x1da>
 8013eee:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013ef0:	4621      	mov	r1, r4
 8013ef2:	4630      	mov	r0, r6
 8013ef4:	4798      	blx	r3
 8013ef6:	2800      	cmp	r0, #0
 8013ef8:	f43f af68 	beq.w	8013dcc <__ssvfiscanf_r+0x80>
 8013efc:	9844      	ldr	r0, [sp, #272]	; 0x110
 8013efe:	2800      	cmp	r0, #0
 8013f00:	f040 808d 	bne.w	801401e <__ssvfiscanf_r+0x2d2>
 8013f04:	f04f 30ff 	mov.w	r0, #4294967295
 8013f08:	e08f      	b.n	801402a <__ssvfiscanf_r+0x2de>
 8013f0a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8013f0c:	f042 0220 	orr.w	r2, r2, #32
 8013f10:	9241      	str	r2, [sp, #260]	; 0x104
 8013f12:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8013f14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013f18:	9241      	str	r2, [sp, #260]	; 0x104
 8013f1a:	2210      	movs	r2, #16
 8013f1c:	2b6f      	cmp	r3, #111	; 0x6f
 8013f1e:	9242      	str	r2, [sp, #264]	; 0x108
 8013f20:	bf34      	ite	cc
 8013f22:	2303      	movcc	r3, #3
 8013f24:	2304      	movcs	r3, #4
 8013f26:	9347      	str	r3, [sp, #284]	; 0x11c
 8013f28:	6863      	ldr	r3, [r4, #4]
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	dd42      	ble.n	8013fb4 <__ssvfiscanf_r+0x268>
 8013f2e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013f30:	0659      	lsls	r1, r3, #25
 8013f32:	d404      	bmi.n	8013f3e <__ssvfiscanf_r+0x1f2>
 8013f34:	6823      	ldr	r3, [r4, #0]
 8013f36:	781a      	ldrb	r2, [r3, #0]
 8013f38:	5cba      	ldrb	r2, [r7, r2]
 8013f3a:	0712      	lsls	r2, r2, #28
 8013f3c:	d441      	bmi.n	8013fc2 <__ssvfiscanf_r+0x276>
 8013f3e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8013f40:	2b02      	cmp	r3, #2
 8013f42:	dc50      	bgt.n	8013fe6 <__ssvfiscanf_r+0x29a>
 8013f44:	466b      	mov	r3, sp
 8013f46:	4622      	mov	r2, r4
 8013f48:	a941      	add	r1, sp, #260	; 0x104
 8013f4a:	4630      	mov	r0, r6
 8013f4c:	f000 f9d0 	bl	80142f0 <_scanf_chars>
 8013f50:	2801      	cmp	r0, #1
 8013f52:	d06e      	beq.n	8014032 <__ssvfiscanf_r+0x2e6>
 8013f54:	2802      	cmp	r0, #2
 8013f56:	f47f af20 	bne.w	8013d9a <__ssvfiscanf_r+0x4e>
 8013f5a:	e7cf      	b.n	8013efc <__ssvfiscanf_r+0x1b0>
 8013f5c:	220a      	movs	r2, #10
 8013f5e:	e7dd      	b.n	8013f1c <__ssvfiscanf_r+0x1d0>
 8013f60:	2300      	movs	r3, #0
 8013f62:	9342      	str	r3, [sp, #264]	; 0x108
 8013f64:	2303      	movs	r3, #3
 8013f66:	e7de      	b.n	8013f26 <__ssvfiscanf_r+0x1da>
 8013f68:	2308      	movs	r3, #8
 8013f6a:	9342      	str	r3, [sp, #264]	; 0x108
 8013f6c:	2304      	movs	r3, #4
 8013f6e:	e7da      	b.n	8013f26 <__ssvfiscanf_r+0x1da>
 8013f70:	4629      	mov	r1, r5
 8013f72:	4640      	mov	r0, r8
 8013f74:	f000 fb38 	bl	80145e8 <__sccl>
 8013f78:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013f7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013f7e:	9341      	str	r3, [sp, #260]	; 0x104
 8013f80:	4605      	mov	r5, r0
 8013f82:	2301      	movs	r3, #1
 8013f84:	e7cf      	b.n	8013f26 <__ssvfiscanf_r+0x1da>
 8013f86:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013f88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013f8c:	9341      	str	r3, [sp, #260]	; 0x104
 8013f8e:	2300      	movs	r3, #0
 8013f90:	e7c9      	b.n	8013f26 <__ssvfiscanf_r+0x1da>
 8013f92:	2302      	movs	r3, #2
 8013f94:	e7c7      	b.n	8013f26 <__ssvfiscanf_r+0x1da>
 8013f96:	9841      	ldr	r0, [sp, #260]	; 0x104
 8013f98:	06c3      	lsls	r3, r0, #27
 8013f9a:	f53f aefe 	bmi.w	8013d9a <__ssvfiscanf_r+0x4e>
 8013f9e:	9b00      	ldr	r3, [sp, #0]
 8013fa0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8013fa2:	1d19      	adds	r1, r3, #4
 8013fa4:	9100      	str	r1, [sp, #0]
 8013fa6:	681b      	ldr	r3, [r3, #0]
 8013fa8:	f010 0f01 	tst.w	r0, #1
 8013fac:	bf14      	ite	ne
 8013fae:	801a      	strhne	r2, [r3, #0]
 8013fb0:	601a      	streq	r2, [r3, #0]
 8013fb2:	e6f2      	b.n	8013d9a <__ssvfiscanf_r+0x4e>
 8013fb4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013fb6:	4621      	mov	r1, r4
 8013fb8:	4630      	mov	r0, r6
 8013fba:	4798      	blx	r3
 8013fbc:	2800      	cmp	r0, #0
 8013fbe:	d0b6      	beq.n	8013f2e <__ssvfiscanf_r+0x1e2>
 8013fc0:	e79c      	b.n	8013efc <__ssvfiscanf_r+0x1b0>
 8013fc2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8013fc4:	3201      	adds	r2, #1
 8013fc6:	9245      	str	r2, [sp, #276]	; 0x114
 8013fc8:	6862      	ldr	r2, [r4, #4]
 8013fca:	3a01      	subs	r2, #1
 8013fcc:	2a00      	cmp	r2, #0
 8013fce:	6062      	str	r2, [r4, #4]
 8013fd0:	dd02      	ble.n	8013fd8 <__ssvfiscanf_r+0x28c>
 8013fd2:	3301      	adds	r3, #1
 8013fd4:	6023      	str	r3, [r4, #0]
 8013fd6:	e7ad      	b.n	8013f34 <__ssvfiscanf_r+0x1e8>
 8013fd8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013fda:	4621      	mov	r1, r4
 8013fdc:	4630      	mov	r0, r6
 8013fde:	4798      	blx	r3
 8013fe0:	2800      	cmp	r0, #0
 8013fe2:	d0a7      	beq.n	8013f34 <__ssvfiscanf_r+0x1e8>
 8013fe4:	e78a      	b.n	8013efc <__ssvfiscanf_r+0x1b0>
 8013fe6:	2b04      	cmp	r3, #4
 8013fe8:	dc0e      	bgt.n	8014008 <__ssvfiscanf_r+0x2bc>
 8013fea:	466b      	mov	r3, sp
 8013fec:	4622      	mov	r2, r4
 8013fee:	a941      	add	r1, sp, #260	; 0x104
 8013ff0:	4630      	mov	r0, r6
 8013ff2:	f000 f9d7 	bl	80143a4 <_scanf_i>
 8013ff6:	e7ab      	b.n	8013f50 <__ssvfiscanf_r+0x204>
 8013ff8:	08013c99 	.word	0x08013c99
 8013ffc:	08013d13 	.word	0x08013d13
 8014000:	080165f9 	.word	0x080165f9
 8014004:	0801694a 	.word	0x0801694a
 8014008:	4b0b      	ldr	r3, [pc, #44]	; (8014038 <__ssvfiscanf_r+0x2ec>)
 801400a:	2b00      	cmp	r3, #0
 801400c:	f43f aec5 	beq.w	8013d9a <__ssvfiscanf_r+0x4e>
 8014010:	466b      	mov	r3, sp
 8014012:	4622      	mov	r2, r4
 8014014:	a941      	add	r1, sp, #260	; 0x104
 8014016:	4630      	mov	r0, r6
 8014018:	f7fc fb04 	bl	8010624 <_scanf_float>
 801401c:	e798      	b.n	8013f50 <__ssvfiscanf_r+0x204>
 801401e:	89a3      	ldrh	r3, [r4, #12]
 8014020:	f013 0f40 	tst.w	r3, #64	; 0x40
 8014024:	bf18      	it	ne
 8014026:	f04f 30ff 	movne.w	r0, #4294967295
 801402a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 801402e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014032:	9844      	ldr	r0, [sp, #272]	; 0x110
 8014034:	e7f9      	b.n	801402a <__ssvfiscanf_r+0x2de>
 8014036:	bf00      	nop
 8014038:	08010625 	.word	0x08010625

0801403c <__sfputc_r>:
 801403c:	6893      	ldr	r3, [r2, #8]
 801403e:	3b01      	subs	r3, #1
 8014040:	2b00      	cmp	r3, #0
 8014042:	b410      	push	{r4}
 8014044:	6093      	str	r3, [r2, #8]
 8014046:	da08      	bge.n	801405a <__sfputc_r+0x1e>
 8014048:	6994      	ldr	r4, [r2, #24]
 801404a:	42a3      	cmp	r3, r4
 801404c:	db01      	blt.n	8014052 <__sfputc_r+0x16>
 801404e:	290a      	cmp	r1, #10
 8014050:	d103      	bne.n	801405a <__sfputc_r+0x1e>
 8014052:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014056:	f000 bbc1 	b.w	80147dc <__swbuf_r>
 801405a:	6813      	ldr	r3, [r2, #0]
 801405c:	1c58      	adds	r0, r3, #1
 801405e:	6010      	str	r0, [r2, #0]
 8014060:	7019      	strb	r1, [r3, #0]
 8014062:	4608      	mov	r0, r1
 8014064:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014068:	4770      	bx	lr

0801406a <__sfputs_r>:
 801406a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801406c:	4606      	mov	r6, r0
 801406e:	460f      	mov	r7, r1
 8014070:	4614      	mov	r4, r2
 8014072:	18d5      	adds	r5, r2, r3
 8014074:	42ac      	cmp	r4, r5
 8014076:	d101      	bne.n	801407c <__sfputs_r+0x12>
 8014078:	2000      	movs	r0, #0
 801407a:	e007      	b.n	801408c <__sfputs_r+0x22>
 801407c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014080:	463a      	mov	r2, r7
 8014082:	4630      	mov	r0, r6
 8014084:	f7ff ffda 	bl	801403c <__sfputc_r>
 8014088:	1c43      	adds	r3, r0, #1
 801408a:	d1f3      	bne.n	8014074 <__sfputs_r+0xa>
 801408c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014090 <_vfiprintf_r>:
 8014090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014094:	460d      	mov	r5, r1
 8014096:	b09d      	sub	sp, #116	; 0x74
 8014098:	4614      	mov	r4, r2
 801409a:	4698      	mov	r8, r3
 801409c:	4606      	mov	r6, r0
 801409e:	b118      	cbz	r0, 80140a8 <_vfiprintf_r+0x18>
 80140a0:	6983      	ldr	r3, [r0, #24]
 80140a2:	b90b      	cbnz	r3, 80140a8 <_vfiprintf_r+0x18>
 80140a4:	f000 fd8a 	bl	8014bbc <__sinit>
 80140a8:	4b89      	ldr	r3, [pc, #548]	; (80142d0 <_vfiprintf_r+0x240>)
 80140aa:	429d      	cmp	r5, r3
 80140ac:	d11b      	bne.n	80140e6 <_vfiprintf_r+0x56>
 80140ae:	6875      	ldr	r5, [r6, #4]
 80140b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80140b2:	07d9      	lsls	r1, r3, #31
 80140b4:	d405      	bmi.n	80140c2 <_vfiprintf_r+0x32>
 80140b6:	89ab      	ldrh	r3, [r5, #12]
 80140b8:	059a      	lsls	r2, r3, #22
 80140ba:	d402      	bmi.n	80140c2 <_vfiprintf_r+0x32>
 80140bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80140be:	f000 fe1b 	bl	8014cf8 <__retarget_lock_acquire_recursive>
 80140c2:	89ab      	ldrh	r3, [r5, #12]
 80140c4:	071b      	lsls	r3, r3, #28
 80140c6:	d501      	bpl.n	80140cc <_vfiprintf_r+0x3c>
 80140c8:	692b      	ldr	r3, [r5, #16]
 80140ca:	b9eb      	cbnz	r3, 8014108 <_vfiprintf_r+0x78>
 80140cc:	4629      	mov	r1, r5
 80140ce:	4630      	mov	r0, r6
 80140d0:	f000 fbe4 	bl	801489c <__swsetup_r>
 80140d4:	b1c0      	cbz	r0, 8014108 <_vfiprintf_r+0x78>
 80140d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80140d8:	07dc      	lsls	r4, r3, #31
 80140da:	d50e      	bpl.n	80140fa <_vfiprintf_r+0x6a>
 80140dc:	f04f 30ff 	mov.w	r0, #4294967295
 80140e0:	b01d      	add	sp, #116	; 0x74
 80140e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140e6:	4b7b      	ldr	r3, [pc, #492]	; (80142d4 <_vfiprintf_r+0x244>)
 80140e8:	429d      	cmp	r5, r3
 80140ea:	d101      	bne.n	80140f0 <_vfiprintf_r+0x60>
 80140ec:	68b5      	ldr	r5, [r6, #8]
 80140ee:	e7df      	b.n	80140b0 <_vfiprintf_r+0x20>
 80140f0:	4b79      	ldr	r3, [pc, #484]	; (80142d8 <_vfiprintf_r+0x248>)
 80140f2:	429d      	cmp	r5, r3
 80140f4:	bf08      	it	eq
 80140f6:	68f5      	ldreq	r5, [r6, #12]
 80140f8:	e7da      	b.n	80140b0 <_vfiprintf_r+0x20>
 80140fa:	89ab      	ldrh	r3, [r5, #12]
 80140fc:	0598      	lsls	r0, r3, #22
 80140fe:	d4ed      	bmi.n	80140dc <_vfiprintf_r+0x4c>
 8014100:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014102:	f000 fdfa 	bl	8014cfa <__retarget_lock_release_recursive>
 8014106:	e7e9      	b.n	80140dc <_vfiprintf_r+0x4c>
 8014108:	2300      	movs	r3, #0
 801410a:	9309      	str	r3, [sp, #36]	; 0x24
 801410c:	2320      	movs	r3, #32
 801410e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014112:	f8cd 800c 	str.w	r8, [sp, #12]
 8014116:	2330      	movs	r3, #48	; 0x30
 8014118:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80142dc <_vfiprintf_r+0x24c>
 801411c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014120:	f04f 0901 	mov.w	r9, #1
 8014124:	4623      	mov	r3, r4
 8014126:	469a      	mov	sl, r3
 8014128:	f813 2b01 	ldrb.w	r2, [r3], #1
 801412c:	b10a      	cbz	r2, 8014132 <_vfiprintf_r+0xa2>
 801412e:	2a25      	cmp	r2, #37	; 0x25
 8014130:	d1f9      	bne.n	8014126 <_vfiprintf_r+0x96>
 8014132:	ebba 0b04 	subs.w	fp, sl, r4
 8014136:	d00b      	beq.n	8014150 <_vfiprintf_r+0xc0>
 8014138:	465b      	mov	r3, fp
 801413a:	4622      	mov	r2, r4
 801413c:	4629      	mov	r1, r5
 801413e:	4630      	mov	r0, r6
 8014140:	f7ff ff93 	bl	801406a <__sfputs_r>
 8014144:	3001      	adds	r0, #1
 8014146:	f000 80aa 	beq.w	801429e <_vfiprintf_r+0x20e>
 801414a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801414c:	445a      	add	r2, fp
 801414e:	9209      	str	r2, [sp, #36]	; 0x24
 8014150:	f89a 3000 	ldrb.w	r3, [sl]
 8014154:	2b00      	cmp	r3, #0
 8014156:	f000 80a2 	beq.w	801429e <_vfiprintf_r+0x20e>
 801415a:	2300      	movs	r3, #0
 801415c:	f04f 32ff 	mov.w	r2, #4294967295
 8014160:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014164:	f10a 0a01 	add.w	sl, sl, #1
 8014168:	9304      	str	r3, [sp, #16]
 801416a:	9307      	str	r3, [sp, #28]
 801416c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014170:	931a      	str	r3, [sp, #104]	; 0x68
 8014172:	4654      	mov	r4, sl
 8014174:	2205      	movs	r2, #5
 8014176:	f814 1b01 	ldrb.w	r1, [r4], #1
 801417a:	4858      	ldr	r0, [pc, #352]	; (80142dc <_vfiprintf_r+0x24c>)
 801417c:	f7ec f860 	bl	8000240 <memchr>
 8014180:	9a04      	ldr	r2, [sp, #16]
 8014182:	b9d8      	cbnz	r0, 80141bc <_vfiprintf_r+0x12c>
 8014184:	06d1      	lsls	r1, r2, #27
 8014186:	bf44      	itt	mi
 8014188:	2320      	movmi	r3, #32
 801418a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801418e:	0713      	lsls	r3, r2, #28
 8014190:	bf44      	itt	mi
 8014192:	232b      	movmi	r3, #43	; 0x2b
 8014194:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014198:	f89a 3000 	ldrb.w	r3, [sl]
 801419c:	2b2a      	cmp	r3, #42	; 0x2a
 801419e:	d015      	beq.n	80141cc <_vfiprintf_r+0x13c>
 80141a0:	9a07      	ldr	r2, [sp, #28]
 80141a2:	4654      	mov	r4, sl
 80141a4:	2000      	movs	r0, #0
 80141a6:	f04f 0c0a 	mov.w	ip, #10
 80141aa:	4621      	mov	r1, r4
 80141ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80141b0:	3b30      	subs	r3, #48	; 0x30
 80141b2:	2b09      	cmp	r3, #9
 80141b4:	d94e      	bls.n	8014254 <_vfiprintf_r+0x1c4>
 80141b6:	b1b0      	cbz	r0, 80141e6 <_vfiprintf_r+0x156>
 80141b8:	9207      	str	r2, [sp, #28]
 80141ba:	e014      	b.n	80141e6 <_vfiprintf_r+0x156>
 80141bc:	eba0 0308 	sub.w	r3, r0, r8
 80141c0:	fa09 f303 	lsl.w	r3, r9, r3
 80141c4:	4313      	orrs	r3, r2
 80141c6:	9304      	str	r3, [sp, #16]
 80141c8:	46a2      	mov	sl, r4
 80141ca:	e7d2      	b.n	8014172 <_vfiprintf_r+0xe2>
 80141cc:	9b03      	ldr	r3, [sp, #12]
 80141ce:	1d19      	adds	r1, r3, #4
 80141d0:	681b      	ldr	r3, [r3, #0]
 80141d2:	9103      	str	r1, [sp, #12]
 80141d4:	2b00      	cmp	r3, #0
 80141d6:	bfbb      	ittet	lt
 80141d8:	425b      	neglt	r3, r3
 80141da:	f042 0202 	orrlt.w	r2, r2, #2
 80141de:	9307      	strge	r3, [sp, #28]
 80141e0:	9307      	strlt	r3, [sp, #28]
 80141e2:	bfb8      	it	lt
 80141e4:	9204      	strlt	r2, [sp, #16]
 80141e6:	7823      	ldrb	r3, [r4, #0]
 80141e8:	2b2e      	cmp	r3, #46	; 0x2e
 80141ea:	d10c      	bne.n	8014206 <_vfiprintf_r+0x176>
 80141ec:	7863      	ldrb	r3, [r4, #1]
 80141ee:	2b2a      	cmp	r3, #42	; 0x2a
 80141f0:	d135      	bne.n	801425e <_vfiprintf_r+0x1ce>
 80141f2:	9b03      	ldr	r3, [sp, #12]
 80141f4:	1d1a      	adds	r2, r3, #4
 80141f6:	681b      	ldr	r3, [r3, #0]
 80141f8:	9203      	str	r2, [sp, #12]
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	bfb8      	it	lt
 80141fe:	f04f 33ff 	movlt.w	r3, #4294967295
 8014202:	3402      	adds	r4, #2
 8014204:	9305      	str	r3, [sp, #20]
 8014206:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80142ec <_vfiprintf_r+0x25c>
 801420a:	7821      	ldrb	r1, [r4, #0]
 801420c:	2203      	movs	r2, #3
 801420e:	4650      	mov	r0, sl
 8014210:	f7ec f816 	bl	8000240 <memchr>
 8014214:	b140      	cbz	r0, 8014228 <_vfiprintf_r+0x198>
 8014216:	2340      	movs	r3, #64	; 0x40
 8014218:	eba0 000a 	sub.w	r0, r0, sl
 801421c:	fa03 f000 	lsl.w	r0, r3, r0
 8014220:	9b04      	ldr	r3, [sp, #16]
 8014222:	4303      	orrs	r3, r0
 8014224:	3401      	adds	r4, #1
 8014226:	9304      	str	r3, [sp, #16]
 8014228:	f814 1b01 	ldrb.w	r1, [r4], #1
 801422c:	482c      	ldr	r0, [pc, #176]	; (80142e0 <_vfiprintf_r+0x250>)
 801422e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014232:	2206      	movs	r2, #6
 8014234:	f7ec f804 	bl	8000240 <memchr>
 8014238:	2800      	cmp	r0, #0
 801423a:	d03f      	beq.n	80142bc <_vfiprintf_r+0x22c>
 801423c:	4b29      	ldr	r3, [pc, #164]	; (80142e4 <_vfiprintf_r+0x254>)
 801423e:	bb1b      	cbnz	r3, 8014288 <_vfiprintf_r+0x1f8>
 8014240:	9b03      	ldr	r3, [sp, #12]
 8014242:	3307      	adds	r3, #7
 8014244:	f023 0307 	bic.w	r3, r3, #7
 8014248:	3308      	adds	r3, #8
 801424a:	9303      	str	r3, [sp, #12]
 801424c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801424e:	443b      	add	r3, r7
 8014250:	9309      	str	r3, [sp, #36]	; 0x24
 8014252:	e767      	b.n	8014124 <_vfiprintf_r+0x94>
 8014254:	fb0c 3202 	mla	r2, ip, r2, r3
 8014258:	460c      	mov	r4, r1
 801425a:	2001      	movs	r0, #1
 801425c:	e7a5      	b.n	80141aa <_vfiprintf_r+0x11a>
 801425e:	2300      	movs	r3, #0
 8014260:	3401      	adds	r4, #1
 8014262:	9305      	str	r3, [sp, #20]
 8014264:	4619      	mov	r1, r3
 8014266:	f04f 0c0a 	mov.w	ip, #10
 801426a:	4620      	mov	r0, r4
 801426c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014270:	3a30      	subs	r2, #48	; 0x30
 8014272:	2a09      	cmp	r2, #9
 8014274:	d903      	bls.n	801427e <_vfiprintf_r+0x1ee>
 8014276:	2b00      	cmp	r3, #0
 8014278:	d0c5      	beq.n	8014206 <_vfiprintf_r+0x176>
 801427a:	9105      	str	r1, [sp, #20]
 801427c:	e7c3      	b.n	8014206 <_vfiprintf_r+0x176>
 801427e:	fb0c 2101 	mla	r1, ip, r1, r2
 8014282:	4604      	mov	r4, r0
 8014284:	2301      	movs	r3, #1
 8014286:	e7f0      	b.n	801426a <_vfiprintf_r+0x1da>
 8014288:	ab03      	add	r3, sp, #12
 801428a:	9300      	str	r3, [sp, #0]
 801428c:	462a      	mov	r2, r5
 801428e:	4b16      	ldr	r3, [pc, #88]	; (80142e8 <_vfiprintf_r+0x258>)
 8014290:	a904      	add	r1, sp, #16
 8014292:	4630      	mov	r0, r6
 8014294:	f7fb fdfc 	bl	800fe90 <_printf_float>
 8014298:	4607      	mov	r7, r0
 801429a:	1c78      	adds	r0, r7, #1
 801429c:	d1d6      	bne.n	801424c <_vfiprintf_r+0x1bc>
 801429e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80142a0:	07d9      	lsls	r1, r3, #31
 80142a2:	d405      	bmi.n	80142b0 <_vfiprintf_r+0x220>
 80142a4:	89ab      	ldrh	r3, [r5, #12]
 80142a6:	059a      	lsls	r2, r3, #22
 80142a8:	d402      	bmi.n	80142b0 <_vfiprintf_r+0x220>
 80142aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80142ac:	f000 fd25 	bl	8014cfa <__retarget_lock_release_recursive>
 80142b0:	89ab      	ldrh	r3, [r5, #12]
 80142b2:	065b      	lsls	r3, r3, #25
 80142b4:	f53f af12 	bmi.w	80140dc <_vfiprintf_r+0x4c>
 80142b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80142ba:	e711      	b.n	80140e0 <_vfiprintf_r+0x50>
 80142bc:	ab03      	add	r3, sp, #12
 80142be:	9300      	str	r3, [sp, #0]
 80142c0:	462a      	mov	r2, r5
 80142c2:	4b09      	ldr	r3, [pc, #36]	; (80142e8 <_vfiprintf_r+0x258>)
 80142c4:	a904      	add	r1, sp, #16
 80142c6:	4630      	mov	r0, r6
 80142c8:	f7fc f886 	bl	80103d8 <_printf_i>
 80142cc:	e7e4      	b.n	8014298 <_vfiprintf_r+0x208>
 80142ce:	bf00      	nop
 80142d0:	08016990 	.word	0x08016990
 80142d4:	080169b0 	.word	0x080169b0
 80142d8:	08016970 	.word	0x08016970
 80142dc:	08016944 	.word	0x08016944
 80142e0:	0801694e 	.word	0x0801694e
 80142e4:	0800fe91 	.word	0x0800fe91
 80142e8:	0801406b 	.word	0x0801406b
 80142ec:	0801694a 	.word	0x0801694a

080142f0 <_scanf_chars>:
 80142f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80142f4:	4615      	mov	r5, r2
 80142f6:	688a      	ldr	r2, [r1, #8]
 80142f8:	4680      	mov	r8, r0
 80142fa:	460c      	mov	r4, r1
 80142fc:	b932      	cbnz	r2, 801430c <_scanf_chars+0x1c>
 80142fe:	698a      	ldr	r2, [r1, #24]
 8014300:	2a00      	cmp	r2, #0
 8014302:	bf0c      	ite	eq
 8014304:	2201      	moveq	r2, #1
 8014306:	f04f 32ff 	movne.w	r2, #4294967295
 801430a:	608a      	str	r2, [r1, #8]
 801430c:	6822      	ldr	r2, [r4, #0]
 801430e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80143a0 <_scanf_chars+0xb0>
 8014312:	06d1      	lsls	r1, r2, #27
 8014314:	bf5f      	itttt	pl
 8014316:	681a      	ldrpl	r2, [r3, #0]
 8014318:	1d11      	addpl	r1, r2, #4
 801431a:	6019      	strpl	r1, [r3, #0]
 801431c:	6816      	ldrpl	r6, [r2, #0]
 801431e:	2700      	movs	r7, #0
 8014320:	69a0      	ldr	r0, [r4, #24]
 8014322:	b188      	cbz	r0, 8014348 <_scanf_chars+0x58>
 8014324:	2801      	cmp	r0, #1
 8014326:	d107      	bne.n	8014338 <_scanf_chars+0x48>
 8014328:	682a      	ldr	r2, [r5, #0]
 801432a:	7811      	ldrb	r1, [r2, #0]
 801432c:	6962      	ldr	r2, [r4, #20]
 801432e:	5c52      	ldrb	r2, [r2, r1]
 8014330:	b952      	cbnz	r2, 8014348 <_scanf_chars+0x58>
 8014332:	2f00      	cmp	r7, #0
 8014334:	d031      	beq.n	801439a <_scanf_chars+0xaa>
 8014336:	e022      	b.n	801437e <_scanf_chars+0x8e>
 8014338:	2802      	cmp	r0, #2
 801433a:	d120      	bne.n	801437e <_scanf_chars+0x8e>
 801433c:	682b      	ldr	r3, [r5, #0]
 801433e:	781b      	ldrb	r3, [r3, #0]
 8014340:	f813 3009 	ldrb.w	r3, [r3, r9]
 8014344:	071b      	lsls	r3, r3, #28
 8014346:	d41a      	bmi.n	801437e <_scanf_chars+0x8e>
 8014348:	6823      	ldr	r3, [r4, #0]
 801434a:	06da      	lsls	r2, r3, #27
 801434c:	bf5e      	ittt	pl
 801434e:	682b      	ldrpl	r3, [r5, #0]
 8014350:	781b      	ldrbpl	r3, [r3, #0]
 8014352:	f806 3b01 	strbpl.w	r3, [r6], #1
 8014356:	682a      	ldr	r2, [r5, #0]
 8014358:	686b      	ldr	r3, [r5, #4]
 801435a:	3201      	adds	r2, #1
 801435c:	602a      	str	r2, [r5, #0]
 801435e:	68a2      	ldr	r2, [r4, #8]
 8014360:	3b01      	subs	r3, #1
 8014362:	3a01      	subs	r2, #1
 8014364:	606b      	str	r3, [r5, #4]
 8014366:	3701      	adds	r7, #1
 8014368:	60a2      	str	r2, [r4, #8]
 801436a:	b142      	cbz	r2, 801437e <_scanf_chars+0x8e>
 801436c:	2b00      	cmp	r3, #0
 801436e:	dcd7      	bgt.n	8014320 <_scanf_chars+0x30>
 8014370:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8014374:	4629      	mov	r1, r5
 8014376:	4640      	mov	r0, r8
 8014378:	4798      	blx	r3
 801437a:	2800      	cmp	r0, #0
 801437c:	d0d0      	beq.n	8014320 <_scanf_chars+0x30>
 801437e:	6823      	ldr	r3, [r4, #0]
 8014380:	f013 0310 	ands.w	r3, r3, #16
 8014384:	d105      	bne.n	8014392 <_scanf_chars+0xa2>
 8014386:	68e2      	ldr	r2, [r4, #12]
 8014388:	3201      	adds	r2, #1
 801438a:	60e2      	str	r2, [r4, #12]
 801438c:	69a2      	ldr	r2, [r4, #24]
 801438e:	b102      	cbz	r2, 8014392 <_scanf_chars+0xa2>
 8014390:	7033      	strb	r3, [r6, #0]
 8014392:	6923      	ldr	r3, [r4, #16]
 8014394:	443b      	add	r3, r7
 8014396:	6123      	str	r3, [r4, #16]
 8014398:	2000      	movs	r0, #0
 801439a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801439e:	bf00      	nop
 80143a0:	080165f9 	.word	0x080165f9

080143a4 <_scanf_i>:
 80143a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143a8:	4698      	mov	r8, r3
 80143aa:	4b76      	ldr	r3, [pc, #472]	; (8014584 <_scanf_i+0x1e0>)
 80143ac:	460c      	mov	r4, r1
 80143ae:	4682      	mov	sl, r0
 80143b0:	4616      	mov	r6, r2
 80143b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80143b6:	b087      	sub	sp, #28
 80143b8:	ab03      	add	r3, sp, #12
 80143ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80143be:	4b72      	ldr	r3, [pc, #456]	; (8014588 <_scanf_i+0x1e4>)
 80143c0:	69a1      	ldr	r1, [r4, #24]
 80143c2:	4a72      	ldr	r2, [pc, #456]	; (801458c <_scanf_i+0x1e8>)
 80143c4:	2903      	cmp	r1, #3
 80143c6:	bf18      	it	ne
 80143c8:	461a      	movne	r2, r3
 80143ca:	68a3      	ldr	r3, [r4, #8]
 80143cc:	9201      	str	r2, [sp, #4]
 80143ce:	1e5a      	subs	r2, r3, #1
 80143d0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80143d4:	bf88      	it	hi
 80143d6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80143da:	4627      	mov	r7, r4
 80143dc:	bf82      	ittt	hi
 80143de:	eb03 0905 	addhi.w	r9, r3, r5
 80143e2:	f240 135d 	movwhi	r3, #349	; 0x15d
 80143e6:	60a3      	strhi	r3, [r4, #8]
 80143e8:	f857 3b1c 	ldr.w	r3, [r7], #28
 80143ec:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80143f0:	bf98      	it	ls
 80143f2:	f04f 0900 	movls.w	r9, #0
 80143f6:	6023      	str	r3, [r4, #0]
 80143f8:	463d      	mov	r5, r7
 80143fa:	f04f 0b00 	mov.w	fp, #0
 80143fe:	6831      	ldr	r1, [r6, #0]
 8014400:	ab03      	add	r3, sp, #12
 8014402:	7809      	ldrb	r1, [r1, #0]
 8014404:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8014408:	2202      	movs	r2, #2
 801440a:	f7eb ff19 	bl	8000240 <memchr>
 801440e:	b328      	cbz	r0, 801445c <_scanf_i+0xb8>
 8014410:	f1bb 0f01 	cmp.w	fp, #1
 8014414:	d159      	bne.n	80144ca <_scanf_i+0x126>
 8014416:	6862      	ldr	r2, [r4, #4]
 8014418:	b92a      	cbnz	r2, 8014426 <_scanf_i+0x82>
 801441a:	6822      	ldr	r2, [r4, #0]
 801441c:	2308      	movs	r3, #8
 801441e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014422:	6063      	str	r3, [r4, #4]
 8014424:	6022      	str	r2, [r4, #0]
 8014426:	6822      	ldr	r2, [r4, #0]
 8014428:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801442c:	6022      	str	r2, [r4, #0]
 801442e:	68a2      	ldr	r2, [r4, #8]
 8014430:	1e51      	subs	r1, r2, #1
 8014432:	60a1      	str	r1, [r4, #8]
 8014434:	b192      	cbz	r2, 801445c <_scanf_i+0xb8>
 8014436:	6832      	ldr	r2, [r6, #0]
 8014438:	1c51      	adds	r1, r2, #1
 801443a:	6031      	str	r1, [r6, #0]
 801443c:	7812      	ldrb	r2, [r2, #0]
 801443e:	f805 2b01 	strb.w	r2, [r5], #1
 8014442:	6872      	ldr	r2, [r6, #4]
 8014444:	3a01      	subs	r2, #1
 8014446:	2a00      	cmp	r2, #0
 8014448:	6072      	str	r2, [r6, #4]
 801444a:	dc07      	bgt.n	801445c <_scanf_i+0xb8>
 801444c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8014450:	4631      	mov	r1, r6
 8014452:	4650      	mov	r0, sl
 8014454:	4790      	blx	r2
 8014456:	2800      	cmp	r0, #0
 8014458:	f040 8085 	bne.w	8014566 <_scanf_i+0x1c2>
 801445c:	f10b 0b01 	add.w	fp, fp, #1
 8014460:	f1bb 0f03 	cmp.w	fp, #3
 8014464:	d1cb      	bne.n	80143fe <_scanf_i+0x5a>
 8014466:	6863      	ldr	r3, [r4, #4]
 8014468:	b90b      	cbnz	r3, 801446e <_scanf_i+0xca>
 801446a:	230a      	movs	r3, #10
 801446c:	6063      	str	r3, [r4, #4]
 801446e:	6863      	ldr	r3, [r4, #4]
 8014470:	4947      	ldr	r1, [pc, #284]	; (8014590 <_scanf_i+0x1ec>)
 8014472:	6960      	ldr	r0, [r4, #20]
 8014474:	1ac9      	subs	r1, r1, r3
 8014476:	f000 f8b7 	bl	80145e8 <__sccl>
 801447a:	f04f 0b00 	mov.w	fp, #0
 801447e:	68a3      	ldr	r3, [r4, #8]
 8014480:	6822      	ldr	r2, [r4, #0]
 8014482:	2b00      	cmp	r3, #0
 8014484:	d03d      	beq.n	8014502 <_scanf_i+0x15e>
 8014486:	6831      	ldr	r1, [r6, #0]
 8014488:	6960      	ldr	r0, [r4, #20]
 801448a:	f891 c000 	ldrb.w	ip, [r1]
 801448e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8014492:	2800      	cmp	r0, #0
 8014494:	d035      	beq.n	8014502 <_scanf_i+0x15e>
 8014496:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801449a:	d124      	bne.n	80144e6 <_scanf_i+0x142>
 801449c:	0510      	lsls	r0, r2, #20
 801449e:	d522      	bpl.n	80144e6 <_scanf_i+0x142>
 80144a0:	f10b 0b01 	add.w	fp, fp, #1
 80144a4:	f1b9 0f00 	cmp.w	r9, #0
 80144a8:	d003      	beq.n	80144b2 <_scanf_i+0x10e>
 80144aa:	3301      	adds	r3, #1
 80144ac:	f109 39ff 	add.w	r9, r9, #4294967295
 80144b0:	60a3      	str	r3, [r4, #8]
 80144b2:	6873      	ldr	r3, [r6, #4]
 80144b4:	3b01      	subs	r3, #1
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	6073      	str	r3, [r6, #4]
 80144ba:	dd1b      	ble.n	80144f4 <_scanf_i+0x150>
 80144bc:	6833      	ldr	r3, [r6, #0]
 80144be:	3301      	adds	r3, #1
 80144c0:	6033      	str	r3, [r6, #0]
 80144c2:	68a3      	ldr	r3, [r4, #8]
 80144c4:	3b01      	subs	r3, #1
 80144c6:	60a3      	str	r3, [r4, #8]
 80144c8:	e7d9      	b.n	801447e <_scanf_i+0xda>
 80144ca:	f1bb 0f02 	cmp.w	fp, #2
 80144ce:	d1ae      	bne.n	801442e <_scanf_i+0x8a>
 80144d0:	6822      	ldr	r2, [r4, #0]
 80144d2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80144d6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80144da:	d1bf      	bne.n	801445c <_scanf_i+0xb8>
 80144dc:	2310      	movs	r3, #16
 80144de:	6063      	str	r3, [r4, #4]
 80144e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80144e4:	e7a2      	b.n	801442c <_scanf_i+0x88>
 80144e6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80144ea:	6022      	str	r2, [r4, #0]
 80144ec:	780b      	ldrb	r3, [r1, #0]
 80144ee:	f805 3b01 	strb.w	r3, [r5], #1
 80144f2:	e7de      	b.n	80144b2 <_scanf_i+0x10e>
 80144f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80144f8:	4631      	mov	r1, r6
 80144fa:	4650      	mov	r0, sl
 80144fc:	4798      	blx	r3
 80144fe:	2800      	cmp	r0, #0
 8014500:	d0df      	beq.n	80144c2 <_scanf_i+0x11e>
 8014502:	6823      	ldr	r3, [r4, #0]
 8014504:	05db      	lsls	r3, r3, #23
 8014506:	d50d      	bpl.n	8014524 <_scanf_i+0x180>
 8014508:	42bd      	cmp	r5, r7
 801450a:	d909      	bls.n	8014520 <_scanf_i+0x17c>
 801450c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8014510:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014514:	4632      	mov	r2, r6
 8014516:	4650      	mov	r0, sl
 8014518:	4798      	blx	r3
 801451a:	f105 39ff 	add.w	r9, r5, #4294967295
 801451e:	464d      	mov	r5, r9
 8014520:	42bd      	cmp	r5, r7
 8014522:	d02d      	beq.n	8014580 <_scanf_i+0x1dc>
 8014524:	6822      	ldr	r2, [r4, #0]
 8014526:	f012 0210 	ands.w	r2, r2, #16
 801452a:	d113      	bne.n	8014554 <_scanf_i+0x1b0>
 801452c:	702a      	strb	r2, [r5, #0]
 801452e:	6863      	ldr	r3, [r4, #4]
 8014530:	9e01      	ldr	r6, [sp, #4]
 8014532:	4639      	mov	r1, r7
 8014534:	4650      	mov	r0, sl
 8014536:	47b0      	blx	r6
 8014538:	6821      	ldr	r1, [r4, #0]
 801453a:	f8d8 3000 	ldr.w	r3, [r8]
 801453e:	f011 0f20 	tst.w	r1, #32
 8014542:	d013      	beq.n	801456c <_scanf_i+0x1c8>
 8014544:	1d1a      	adds	r2, r3, #4
 8014546:	f8c8 2000 	str.w	r2, [r8]
 801454a:	681b      	ldr	r3, [r3, #0]
 801454c:	6018      	str	r0, [r3, #0]
 801454e:	68e3      	ldr	r3, [r4, #12]
 8014550:	3301      	adds	r3, #1
 8014552:	60e3      	str	r3, [r4, #12]
 8014554:	1bed      	subs	r5, r5, r7
 8014556:	44ab      	add	fp, r5
 8014558:	6925      	ldr	r5, [r4, #16]
 801455a:	445d      	add	r5, fp
 801455c:	6125      	str	r5, [r4, #16]
 801455e:	2000      	movs	r0, #0
 8014560:	b007      	add	sp, #28
 8014562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014566:	f04f 0b00 	mov.w	fp, #0
 801456a:	e7ca      	b.n	8014502 <_scanf_i+0x15e>
 801456c:	1d1a      	adds	r2, r3, #4
 801456e:	f8c8 2000 	str.w	r2, [r8]
 8014572:	681b      	ldr	r3, [r3, #0]
 8014574:	f011 0f01 	tst.w	r1, #1
 8014578:	bf14      	ite	ne
 801457a:	8018      	strhne	r0, [r3, #0]
 801457c:	6018      	streq	r0, [r3, #0]
 801457e:	e7e6      	b.n	801454e <_scanf_i+0x1aa>
 8014580:	2001      	movs	r0, #1
 8014582:	e7ed      	b.n	8014560 <_scanf_i+0x1bc>
 8014584:	08016498 	.word	0x08016498
 8014588:	08014765 	.word	0x08014765
 801458c:	08011995 	.word	0x08011995
 8014590:	0801696e 	.word	0x0801696e

08014594 <_read_r>:
 8014594:	b538      	push	{r3, r4, r5, lr}
 8014596:	4d07      	ldr	r5, [pc, #28]	; (80145b4 <_read_r+0x20>)
 8014598:	4604      	mov	r4, r0
 801459a:	4608      	mov	r0, r1
 801459c:	4611      	mov	r1, r2
 801459e:	2200      	movs	r2, #0
 80145a0:	602a      	str	r2, [r5, #0]
 80145a2:	461a      	mov	r2, r3
 80145a4:	f7ee fa78 	bl	8002a98 <_read>
 80145a8:	1c43      	adds	r3, r0, #1
 80145aa:	d102      	bne.n	80145b2 <_read_r+0x1e>
 80145ac:	682b      	ldr	r3, [r5, #0]
 80145ae:	b103      	cbz	r3, 80145b2 <_read_r+0x1e>
 80145b0:	6023      	str	r3, [r4, #0]
 80145b2:	bd38      	pop	{r3, r4, r5, pc}
 80145b4:	2000b4e8 	.word	0x2000b4e8

080145b8 <nan>:
 80145b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80145c0 <nan+0x8>
 80145bc:	4770      	bx	lr
 80145be:	bf00      	nop
 80145c0:	00000000 	.word	0x00000000
 80145c4:	7ff80000 	.word	0x7ff80000

080145c8 <_sbrk_r>:
 80145c8:	b538      	push	{r3, r4, r5, lr}
 80145ca:	4d06      	ldr	r5, [pc, #24]	; (80145e4 <_sbrk_r+0x1c>)
 80145cc:	2300      	movs	r3, #0
 80145ce:	4604      	mov	r4, r0
 80145d0:	4608      	mov	r0, r1
 80145d2:	602b      	str	r3, [r5, #0]
 80145d4:	f7ee face 	bl	8002b74 <_sbrk>
 80145d8:	1c43      	adds	r3, r0, #1
 80145da:	d102      	bne.n	80145e2 <_sbrk_r+0x1a>
 80145dc:	682b      	ldr	r3, [r5, #0]
 80145de:	b103      	cbz	r3, 80145e2 <_sbrk_r+0x1a>
 80145e0:	6023      	str	r3, [r4, #0]
 80145e2:	bd38      	pop	{r3, r4, r5, pc}
 80145e4:	2000b4e8 	.word	0x2000b4e8

080145e8 <__sccl>:
 80145e8:	b570      	push	{r4, r5, r6, lr}
 80145ea:	780b      	ldrb	r3, [r1, #0]
 80145ec:	4604      	mov	r4, r0
 80145ee:	2b5e      	cmp	r3, #94	; 0x5e
 80145f0:	bf0b      	itete	eq
 80145f2:	784b      	ldrbeq	r3, [r1, #1]
 80145f4:	1c48      	addne	r0, r1, #1
 80145f6:	1c88      	addeq	r0, r1, #2
 80145f8:	2200      	movne	r2, #0
 80145fa:	bf08      	it	eq
 80145fc:	2201      	moveq	r2, #1
 80145fe:	1e61      	subs	r1, r4, #1
 8014600:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8014604:	f801 2f01 	strb.w	r2, [r1, #1]!
 8014608:	42a9      	cmp	r1, r5
 801460a:	d1fb      	bne.n	8014604 <__sccl+0x1c>
 801460c:	b90b      	cbnz	r3, 8014612 <__sccl+0x2a>
 801460e:	3801      	subs	r0, #1
 8014610:	bd70      	pop	{r4, r5, r6, pc}
 8014612:	f082 0201 	eor.w	r2, r2, #1
 8014616:	54e2      	strb	r2, [r4, r3]
 8014618:	4605      	mov	r5, r0
 801461a:	4628      	mov	r0, r5
 801461c:	f810 1b01 	ldrb.w	r1, [r0], #1
 8014620:	292d      	cmp	r1, #45	; 0x2d
 8014622:	d006      	beq.n	8014632 <__sccl+0x4a>
 8014624:	295d      	cmp	r1, #93	; 0x5d
 8014626:	d0f3      	beq.n	8014610 <__sccl+0x28>
 8014628:	b909      	cbnz	r1, 801462e <__sccl+0x46>
 801462a:	4628      	mov	r0, r5
 801462c:	e7f0      	b.n	8014610 <__sccl+0x28>
 801462e:	460b      	mov	r3, r1
 8014630:	e7f1      	b.n	8014616 <__sccl+0x2e>
 8014632:	786e      	ldrb	r6, [r5, #1]
 8014634:	2e5d      	cmp	r6, #93	; 0x5d
 8014636:	d0fa      	beq.n	801462e <__sccl+0x46>
 8014638:	42b3      	cmp	r3, r6
 801463a:	dcf8      	bgt.n	801462e <__sccl+0x46>
 801463c:	3502      	adds	r5, #2
 801463e:	4619      	mov	r1, r3
 8014640:	3101      	adds	r1, #1
 8014642:	428e      	cmp	r6, r1
 8014644:	5462      	strb	r2, [r4, r1]
 8014646:	dcfb      	bgt.n	8014640 <__sccl+0x58>
 8014648:	1af1      	subs	r1, r6, r3
 801464a:	3901      	subs	r1, #1
 801464c:	1c58      	adds	r0, r3, #1
 801464e:	42b3      	cmp	r3, r6
 8014650:	bfa8      	it	ge
 8014652:	2100      	movge	r1, #0
 8014654:	1843      	adds	r3, r0, r1
 8014656:	e7e0      	b.n	801461a <__sccl+0x32>

08014658 <strncmp>:
 8014658:	b510      	push	{r4, lr}
 801465a:	b17a      	cbz	r2, 801467c <strncmp+0x24>
 801465c:	4603      	mov	r3, r0
 801465e:	3901      	subs	r1, #1
 8014660:	1884      	adds	r4, r0, r2
 8014662:	f813 0b01 	ldrb.w	r0, [r3], #1
 8014666:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801466a:	4290      	cmp	r0, r2
 801466c:	d101      	bne.n	8014672 <strncmp+0x1a>
 801466e:	42a3      	cmp	r3, r4
 8014670:	d101      	bne.n	8014676 <strncmp+0x1e>
 8014672:	1a80      	subs	r0, r0, r2
 8014674:	bd10      	pop	{r4, pc}
 8014676:	2800      	cmp	r0, #0
 8014678:	d1f3      	bne.n	8014662 <strncmp+0xa>
 801467a:	e7fa      	b.n	8014672 <strncmp+0x1a>
 801467c:	4610      	mov	r0, r2
 801467e:	e7f9      	b.n	8014674 <strncmp+0x1c>

08014680 <_strtoul_l.constprop.0>:
 8014680:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014684:	4f36      	ldr	r7, [pc, #216]	; (8014760 <_strtoul_l.constprop.0+0xe0>)
 8014686:	4686      	mov	lr, r0
 8014688:	460d      	mov	r5, r1
 801468a:	4628      	mov	r0, r5
 801468c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014690:	5de6      	ldrb	r6, [r4, r7]
 8014692:	f016 0608 	ands.w	r6, r6, #8
 8014696:	d1f8      	bne.n	801468a <_strtoul_l.constprop.0+0xa>
 8014698:	2c2d      	cmp	r4, #45	; 0x2d
 801469a:	d12f      	bne.n	80146fc <_strtoul_l.constprop.0+0x7c>
 801469c:	782c      	ldrb	r4, [r5, #0]
 801469e:	2601      	movs	r6, #1
 80146a0:	1c85      	adds	r5, r0, #2
 80146a2:	2b00      	cmp	r3, #0
 80146a4:	d057      	beq.n	8014756 <_strtoul_l.constprop.0+0xd6>
 80146a6:	2b10      	cmp	r3, #16
 80146a8:	d109      	bne.n	80146be <_strtoul_l.constprop.0+0x3e>
 80146aa:	2c30      	cmp	r4, #48	; 0x30
 80146ac:	d107      	bne.n	80146be <_strtoul_l.constprop.0+0x3e>
 80146ae:	7828      	ldrb	r0, [r5, #0]
 80146b0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80146b4:	2858      	cmp	r0, #88	; 0x58
 80146b6:	d149      	bne.n	801474c <_strtoul_l.constprop.0+0xcc>
 80146b8:	786c      	ldrb	r4, [r5, #1]
 80146ba:	2310      	movs	r3, #16
 80146bc:	3502      	adds	r5, #2
 80146be:	f04f 38ff 	mov.w	r8, #4294967295
 80146c2:	2700      	movs	r7, #0
 80146c4:	fbb8 f8f3 	udiv	r8, r8, r3
 80146c8:	fb03 f908 	mul.w	r9, r3, r8
 80146cc:	ea6f 0909 	mvn.w	r9, r9
 80146d0:	4638      	mov	r0, r7
 80146d2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80146d6:	f1bc 0f09 	cmp.w	ip, #9
 80146da:	d814      	bhi.n	8014706 <_strtoul_l.constprop.0+0x86>
 80146dc:	4664      	mov	r4, ip
 80146de:	42a3      	cmp	r3, r4
 80146e0:	dd22      	ble.n	8014728 <_strtoul_l.constprop.0+0xa8>
 80146e2:	2f00      	cmp	r7, #0
 80146e4:	db1d      	blt.n	8014722 <_strtoul_l.constprop.0+0xa2>
 80146e6:	4580      	cmp	r8, r0
 80146e8:	d31b      	bcc.n	8014722 <_strtoul_l.constprop.0+0xa2>
 80146ea:	d101      	bne.n	80146f0 <_strtoul_l.constprop.0+0x70>
 80146ec:	45a1      	cmp	r9, r4
 80146ee:	db18      	blt.n	8014722 <_strtoul_l.constprop.0+0xa2>
 80146f0:	fb00 4003 	mla	r0, r0, r3, r4
 80146f4:	2701      	movs	r7, #1
 80146f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80146fa:	e7ea      	b.n	80146d2 <_strtoul_l.constprop.0+0x52>
 80146fc:	2c2b      	cmp	r4, #43	; 0x2b
 80146fe:	bf04      	itt	eq
 8014700:	782c      	ldrbeq	r4, [r5, #0]
 8014702:	1c85      	addeq	r5, r0, #2
 8014704:	e7cd      	b.n	80146a2 <_strtoul_l.constprop.0+0x22>
 8014706:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801470a:	f1bc 0f19 	cmp.w	ip, #25
 801470e:	d801      	bhi.n	8014714 <_strtoul_l.constprop.0+0x94>
 8014710:	3c37      	subs	r4, #55	; 0x37
 8014712:	e7e4      	b.n	80146de <_strtoul_l.constprop.0+0x5e>
 8014714:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8014718:	f1bc 0f19 	cmp.w	ip, #25
 801471c:	d804      	bhi.n	8014728 <_strtoul_l.constprop.0+0xa8>
 801471e:	3c57      	subs	r4, #87	; 0x57
 8014720:	e7dd      	b.n	80146de <_strtoul_l.constprop.0+0x5e>
 8014722:	f04f 37ff 	mov.w	r7, #4294967295
 8014726:	e7e6      	b.n	80146f6 <_strtoul_l.constprop.0+0x76>
 8014728:	2f00      	cmp	r7, #0
 801472a:	da07      	bge.n	801473c <_strtoul_l.constprop.0+0xbc>
 801472c:	2322      	movs	r3, #34	; 0x22
 801472e:	f8ce 3000 	str.w	r3, [lr]
 8014732:	f04f 30ff 	mov.w	r0, #4294967295
 8014736:	b932      	cbnz	r2, 8014746 <_strtoul_l.constprop.0+0xc6>
 8014738:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801473c:	b106      	cbz	r6, 8014740 <_strtoul_l.constprop.0+0xc0>
 801473e:	4240      	negs	r0, r0
 8014740:	2a00      	cmp	r2, #0
 8014742:	d0f9      	beq.n	8014738 <_strtoul_l.constprop.0+0xb8>
 8014744:	b107      	cbz	r7, 8014748 <_strtoul_l.constprop.0+0xc8>
 8014746:	1e69      	subs	r1, r5, #1
 8014748:	6011      	str	r1, [r2, #0]
 801474a:	e7f5      	b.n	8014738 <_strtoul_l.constprop.0+0xb8>
 801474c:	2430      	movs	r4, #48	; 0x30
 801474e:	2b00      	cmp	r3, #0
 8014750:	d1b5      	bne.n	80146be <_strtoul_l.constprop.0+0x3e>
 8014752:	2308      	movs	r3, #8
 8014754:	e7b3      	b.n	80146be <_strtoul_l.constprop.0+0x3e>
 8014756:	2c30      	cmp	r4, #48	; 0x30
 8014758:	d0a9      	beq.n	80146ae <_strtoul_l.constprop.0+0x2e>
 801475a:	230a      	movs	r3, #10
 801475c:	e7af      	b.n	80146be <_strtoul_l.constprop.0+0x3e>
 801475e:	bf00      	nop
 8014760:	080165f9 	.word	0x080165f9

08014764 <_strtoul_r>:
 8014764:	f7ff bf8c 	b.w	8014680 <_strtoul_l.constprop.0>

08014768 <__submore>:
 8014768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801476c:	460c      	mov	r4, r1
 801476e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8014770:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014774:	4299      	cmp	r1, r3
 8014776:	d11d      	bne.n	80147b4 <__submore+0x4c>
 8014778:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801477c:	f7ff f8bc 	bl	80138f8 <_malloc_r>
 8014780:	b918      	cbnz	r0, 801478a <__submore+0x22>
 8014782:	f04f 30ff 	mov.w	r0, #4294967295
 8014786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801478a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801478e:	63a3      	str	r3, [r4, #56]	; 0x38
 8014790:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8014794:	6360      	str	r0, [r4, #52]	; 0x34
 8014796:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801479a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801479e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80147a2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80147a6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80147aa:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80147ae:	6020      	str	r0, [r4, #0]
 80147b0:	2000      	movs	r0, #0
 80147b2:	e7e8      	b.n	8014786 <__submore+0x1e>
 80147b4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80147b6:	0077      	lsls	r7, r6, #1
 80147b8:	463a      	mov	r2, r7
 80147ba:	f000 fb2b 	bl	8014e14 <_realloc_r>
 80147be:	4605      	mov	r5, r0
 80147c0:	2800      	cmp	r0, #0
 80147c2:	d0de      	beq.n	8014782 <__submore+0x1a>
 80147c4:	eb00 0806 	add.w	r8, r0, r6
 80147c8:	4601      	mov	r1, r0
 80147ca:	4632      	mov	r2, r6
 80147cc:	4640      	mov	r0, r8
 80147ce:	f7fb faa9 	bl	800fd24 <memcpy>
 80147d2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80147d6:	f8c4 8000 	str.w	r8, [r4]
 80147da:	e7e9      	b.n	80147b0 <__submore+0x48>

080147dc <__swbuf_r>:
 80147dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147de:	460e      	mov	r6, r1
 80147e0:	4614      	mov	r4, r2
 80147e2:	4605      	mov	r5, r0
 80147e4:	b118      	cbz	r0, 80147ee <__swbuf_r+0x12>
 80147e6:	6983      	ldr	r3, [r0, #24]
 80147e8:	b90b      	cbnz	r3, 80147ee <__swbuf_r+0x12>
 80147ea:	f000 f9e7 	bl	8014bbc <__sinit>
 80147ee:	4b21      	ldr	r3, [pc, #132]	; (8014874 <__swbuf_r+0x98>)
 80147f0:	429c      	cmp	r4, r3
 80147f2:	d12b      	bne.n	801484c <__swbuf_r+0x70>
 80147f4:	686c      	ldr	r4, [r5, #4]
 80147f6:	69a3      	ldr	r3, [r4, #24]
 80147f8:	60a3      	str	r3, [r4, #8]
 80147fa:	89a3      	ldrh	r3, [r4, #12]
 80147fc:	071a      	lsls	r2, r3, #28
 80147fe:	d52f      	bpl.n	8014860 <__swbuf_r+0x84>
 8014800:	6923      	ldr	r3, [r4, #16]
 8014802:	b36b      	cbz	r3, 8014860 <__swbuf_r+0x84>
 8014804:	6923      	ldr	r3, [r4, #16]
 8014806:	6820      	ldr	r0, [r4, #0]
 8014808:	1ac0      	subs	r0, r0, r3
 801480a:	6963      	ldr	r3, [r4, #20]
 801480c:	b2f6      	uxtb	r6, r6
 801480e:	4283      	cmp	r3, r0
 8014810:	4637      	mov	r7, r6
 8014812:	dc04      	bgt.n	801481e <__swbuf_r+0x42>
 8014814:	4621      	mov	r1, r4
 8014816:	4628      	mov	r0, r5
 8014818:	f000 f93c 	bl	8014a94 <_fflush_r>
 801481c:	bb30      	cbnz	r0, 801486c <__swbuf_r+0x90>
 801481e:	68a3      	ldr	r3, [r4, #8]
 8014820:	3b01      	subs	r3, #1
 8014822:	60a3      	str	r3, [r4, #8]
 8014824:	6823      	ldr	r3, [r4, #0]
 8014826:	1c5a      	adds	r2, r3, #1
 8014828:	6022      	str	r2, [r4, #0]
 801482a:	701e      	strb	r6, [r3, #0]
 801482c:	6963      	ldr	r3, [r4, #20]
 801482e:	3001      	adds	r0, #1
 8014830:	4283      	cmp	r3, r0
 8014832:	d004      	beq.n	801483e <__swbuf_r+0x62>
 8014834:	89a3      	ldrh	r3, [r4, #12]
 8014836:	07db      	lsls	r3, r3, #31
 8014838:	d506      	bpl.n	8014848 <__swbuf_r+0x6c>
 801483a:	2e0a      	cmp	r6, #10
 801483c:	d104      	bne.n	8014848 <__swbuf_r+0x6c>
 801483e:	4621      	mov	r1, r4
 8014840:	4628      	mov	r0, r5
 8014842:	f000 f927 	bl	8014a94 <_fflush_r>
 8014846:	b988      	cbnz	r0, 801486c <__swbuf_r+0x90>
 8014848:	4638      	mov	r0, r7
 801484a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801484c:	4b0a      	ldr	r3, [pc, #40]	; (8014878 <__swbuf_r+0x9c>)
 801484e:	429c      	cmp	r4, r3
 8014850:	d101      	bne.n	8014856 <__swbuf_r+0x7a>
 8014852:	68ac      	ldr	r4, [r5, #8]
 8014854:	e7cf      	b.n	80147f6 <__swbuf_r+0x1a>
 8014856:	4b09      	ldr	r3, [pc, #36]	; (801487c <__swbuf_r+0xa0>)
 8014858:	429c      	cmp	r4, r3
 801485a:	bf08      	it	eq
 801485c:	68ec      	ldreq	r4, [r5, #12]
 801485e:	e7ca      	b.n	80147f6 <__swbuf_r+0x1a>
 8014860:	4621      	mov	r1, r4
 8014862:	4628      	mov	r0, r5
 8014864:	f000 f81a 	bl	801489c <__swsetup_r>
 8014868:	2800      	cmp	r0, #0
 801486a:	d0cb      	beq.n	8014804 <__swbuf_r+0x28>
 801486c:	f04f 37ff 	mov.w	r7, #4294967295
 8014870:	e7ea      	b.n	8014848 <__swbuf_r+0x6c>
 8014872:	bf00      	nop
 8014874:	08016990 	.word	0x08016990
 8014878:	080169b0 	.word	0x080169b0
 801487c:	08016970 	.word	0x08016970

08014880 <__ascii_wctomb>:
 8014880:	b149      	cbz	r1, 8014896 <__ascii_wctomb+0x16>
 8014882:	2aff      	cmp	r2, #255	; 0xff
 8014884:	bf85      	ittet	hi
 8014886:	238a      	movhi	r3, #138	; 0x8a
 8014888:	6003      	strhi	r3, [r0, #0]
 801488a:	700a      	strbls	r2, [r1, #0]
 801488c:	f04f 30ff 	movhi.w	r0, #4294967295
 8014890:	bf98      	it	ls
 8014892:	2001      	movls	r0, #1
 8014894:	4770      	bx	lr
 8014896:	4608      	mov	r0, r1
 8014898:	4770      	bx	lr
	...

0801489c <__swsetup_r>:
 801489c:	4b32      	ldr	r3, [pc, #200]	; (8014968 <__swsetup_r+0xcc>)
 801489e:	b570      	push	{r4, r5, r6, lr}
 80148a0:	681d      	ldr	r5, [r3, #0]
 80148a2:	4606      	mov	r6, r0
 80148a4:	460c      	mov	r4, r1
 80148a6:	b125      	cbz	r5, 80148b2 <__swsetup_r+0x16>
 80148a8:	69ab      	ldr	r3, [r5, #24]
 80148aa:	b913      	cbnz	r3, 80148b2 <__swsetup_r+0x16>
 80148ac:	4628      	mov	r0, r5
 80148ae:	f000 f985 	bl	8014bbc <__sinit>
 80148b2:	4b2e      	ldr	r3, [pc, #184]	; (801496c <__swsetup_r+0xd0>)
 80148b4:	429c      	cmp	r4, r3
 80148b6:	d10f      	bne.n	80148d8 <__swsetup_r+0x3c>
 80148b8:	686c      	ldr	r4, [r5, #4]
 80148ba:	89a3      	ldrh	r3, [r4, #12]
 80148bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80148c0:	0719      	lsls	r1, r3, #28
 80148c2:	d42c      	bmi.n	801491e <__swsetup_r+0x82>
 80148c4:	06dd      	lsls	r5, r3, #27
 80148c6:	d411      	bmi.n	80148ec <__swsetup_r+0x50>
 80148c8:	2309      	movs	r3, #9
 80148ca:	6033      	str	r3, [r6, #0]
 80148cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80148d0:	81a3      	strh	r3, [r4, #12]
 80148d2:	f04f 30ff 	mov.w	r0, #4294967295
 80148d6:	e03e      	b.n	8014956 <__swsetup_r+0xba>
 80148d8:	4b25      	ldr	r3, [pc, #148]	; (8014970 <__swsetup_r+0xd4>)
 80148da:	429c      	cmp	r4, r3
 80148dc:	d101      	bne.n	80148e2 <__swsetup_r+0x46>
 80148de:	68ac      	ldr	r4, [r5, #8]
 80148e0:	e7eb      	b.n	80148ba <__swsetup_r+0x1e>
 80148e2:	4b24      	ldr	r3, [pc, #144]	; (8014974 <__swsetup_r+0xd8>)
 80148e4:	429c      	cmp	r4, r3
 80148e6:	bf08      	it	eq
 80148e8:	68ec      	ldreq	r4, [r5, #12]
 80148ea:	e7e6      	b.n	80148ba <__swsetup_r+0x1e>
 80148ec:	0758      	lsls	r0, r3, #29
 80148ee:	d512      	bpl.n	8014916 <__swsetup_r+0x7a>
 80148f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80148f2:	b141      	cbz	r1, 8014906 <__swsetup_r+0x6a>
 80148f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80148f8:	4299      	cmp	r1, r3
 80148fa:	d002      	beq.n	8014902 <__swsetup_r+0x66>
 80148fc:	4630      	mov	r0, r6
 80148fe:	f7fe ff8f 	bl	8013820 <_free_r>
 8014902:	2300      	movs	r3, #0
 8014904:	6363      	str	r3, [r4, #52]	; 0x34
 8014906:	89a3      	ldrh	r3, [r4, #12]
 8014908:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801490c:	81a3      	strh	r3, [r4, #12]
 801490e:	2300      	movs	r3, #0
 8014910:	6063      	str	r3, [r4, #4]
 8014912:	6923      	ldr	r3, [r4, #16]
 8014914:	6023      	str	r3, [r4, #0]
 8014916:	89a3      	ldrh	r3, [r4, #12]
 8014918:	f043 0308 	orr.w	r3, r3, #8
 801491c:	81a3      	strh	r3, [r4, #12]
 801491e:	6923      	ldr	r3, [r4, #16]
 8014920:	b94b      	cbnz	r3, 8014936 <__swsetup_r+0x9a>
 8014922:	89a3      	ldrh	r3, [r4, #12]
 8014924:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014928:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801492c:	d003      	beq.n	8014936 <__swsetup_r+0x9a>
 801492e:	4621      	mov	r1, r4
 8014930:	4630      	mov	r0, r6
 8014932:	f000 fa09 	bl	8014d48 <__smakebuf_r>
 8014936:	89a0      	ldrh	r0, [r4, #12]
 8014938:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801493c:	f010 0301 	ands.w	r3, r0, #1
 8014940:	d00a      	beq.n	8014958 <__swsetup_r+0xbc>
 8014942:	2300      	movs	r3, #0
 8014944:	60a3      	str	r3, [r4, #8]
 8014946:	6963      	ldr	r3, [r4, #20]
 8014948:	425b      	negs	r3, r3
 801494a:	61a3      	str	r3, [r4, #24]
 801494c:	6923      	ldr	r3, [r4, #16]
 801494e:	b943      	cbnz	r3, 8014962 <__swsetup_r+0xc6>
 8014950:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014954:	d1ba      	bne.n	80148cc <__swsetup_r+0x30>
 8014956:	bd70      	pop	{r4, r5, r6, pc}
 8014958:	0781      	lsls	r1, r0, #30
 801495a:	bf58      	it	pl
 801495c:	6963      	ldrpl	r3, [r4, #20]
 801495e:	60a3      	str	r3, [r4, #8]
 8014960:	e7f4      	b.n	801494c <__swsetup_r+0xb0>
 8014962:	2000      	movs	r0, #0
 8014964:	e7f7      	b.n	8014956 <__swsetup_r+0xba>
 8014966:	bf00      	nop
 8014968:	20000438 	.word	0x20000438
 801496c:	08016990 	.word	0x08016990
 8014970:	080169b0 	.word	0x080169b0
 8014974:	08016970 	.word	0x08016970

08014978 <abort>:
 8014978:	b508      	push	{r3, lr}
 801497a:	2006      	movs	r0, #6
 801497c:	f000 faa2 	bl	8014ec4 <raise>
 8014980:	2001      	movs	r0, #1
 8014982:	f7ee f87f 	bl	8002a84 <_exit>
	...

08014988 <__sflush_r>:
 8014988:	898a      	ldrh	r2, [r1, #12]
 801498a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801498e:	4605      	mov	r5, r0
 8014990:	0710      	lsls	r0, r2, #28
 8014992:	460c      	mov	r4, r1
 8014994:	d458      	bmi.n	8014a48 <__sflush_r+0xc0>
 8014996:	684b      	ldr	r3, [r1, #4]
 8014998:	2b00      	cmp	r3, #0
 801499a:	dc05      	bgt.n	80149a8 <__sflush_r+0x20>
 801499c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801499e:	2b00      	cmp	r3, #0
 80149a0:	dc02      	bgt.n	80149a8 <__sflush_r+0x20>
 80149a2:	2000      	movs	r0, #0
 80149a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80149a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80149aa:	2e00      	cmp	r6, #0
 80149ac:	d0f9      	beq.n	80149a2 <__sflush_r+0x1a>
 80149ae:	2300      	movs	r3, #0
 80149b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80149b4:	682f      	ldr	r7, [r5, #0]
 80149b6:	602b      	str	r3, [r5, #0]
 80149b8:	d032      	beq.n	8014a20 <__sflush_r+0x98>
 80149ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80149bc:	89a3      	ldrh	r3, [r4, #12]
 80149be:	075a      	lsls	r2, r3, #29
 80149c0:	d505      	bpl.n	80149ce <__sflush_r+0x46>
 80149c2:	6863      	ldr	r3, [r4, #4]
 80149c4:	1ac0      	subs	r0, r0, r3
 80149c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80149c8:	b10b      	cbz	r3, 80149ce <__sflush_r+0x46>
 80149ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80149cc:	1ac0      	subs	r0, r0, r3
 80149ce:	2300      	movs	r3, #0
 80149d0:	4602      	mov	r2, r0
 80149d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80149d4:	6a21      	ldr	r1, [r4, #32]
 80149d6:	4628      	mov	r0, r5
 80149d8:	47b0      	blx	r6
 80149da:	1c43      	adds	r3, r0, #1
 80149dc:	89a3      	ldrh	r3, [r4, #12]
 80149de:	d106      	bne.n	80149ee <__sflush_r+0x66>
 80149e0:	6829      	ldr	r1, [r5, #0]
 80149e2:	291d      	cmp	r1, #29
 80149e4:	d82c      	bhi.n	8014a40 <__sflush_r+0xb8>
 80149e6:	4a2a      	ldr	r2, [pc, #168]	; (8014a90 <__sflush_r+0x108>)
 80149e8:	40ca      	lsrs	r2, r1
 80149ea:	07d6      	lsls	r6, r2, #31
 80149ec:	d528      	bpl.n	8014a40 <__sflush_r+0xb8>
 80149ee:	2200      	movs	r2, #0
 80149f0:	6062      	str	r2, [r4, #4]
 80149f2:	04d9      	lsls	r1, r3, #19
 80149f4:	6922      	ldr	r2, [r4, #16]
 80149f6:	6022      	str	r2, [r4, #0]
 80149f8:	d504      	bpl.n	8014a04 <__sflush_r+0x7c>
 80149fa:	1c42      	adds	r2, r0, #1
 80149fc:	d101      	bne.n	8014a02 <__sflush_r+0x7a>
 80149fe:	682b      	ldr	r3, [r5, #0]
 8014a00:	b903      	cbnz	r3, 8014a04 <__sflush_r+0x7c>
 8014a02:	6560      	str	r0, [r4, #84]	; 0x54
 8014a04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014a06:	602f      	str	r7, [r5, #0]
 8014a08:	2900      	cmp	r1, #0
 8014a0a:	d0ca      	beq.n	80149a2 <__sflush_r+0x1a>
 8014a0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014a10:	4299      	cmp	r1, r3
 8014a12:	d002      	beq.n	8014a1a <__sflush_r+0x92>
 8014a14:	4628      	mov	r0, r5
 8014a16:	f7fe ff03 	bl	8013820 <_free_r>
 8014a1a:	2000      	movs	r0, #0
 8014a1c:	6360      	str	r0, [r4, #52]	; 0x34
 8014a1e:	e7c1      	b.n	80149a4 <__sflush_r+0x1c>
 8014a20:	6a21      	ldr	r1, [r4, #32]
 8014a22:	2301      	movs	r3, #1
 8014a24:	4628      	mov	r0, r5
 8014a26:	47b0      	blx	r6
 8014a28:	1c41      	adds	r1, r0, #1
 8014a2a:	d1c7      	bne.n	80149bc <__sflush_r+0x34>
 8014a2c:	682b      	ldr	r3, [r5, #0]
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	d0c4      	beq.n	80149bc <__sflush_r+0x34>
 8014a32:	2b1d      	cmp	r3, #29
 8014a34:	d001      	beq.n	8014a3a <__sflush_r+0xb2>
 8014a36:	2b16      	cmp	r3, #22
 8014a38:	d101      	bne.n	8014a3e <__sflush_r+0xb6>
 8014a3a:	602f      	str	r7, [r5, #0]
 8014a3c:	e7b1      	b.n	80149a2 <__sflush_r+0x1a>
 8014a3e:	89a3      	ldrh	r3, [r4, #12]
 8014a40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014a44:	81a3      	strh	r3, [r4, #12]
 8014a46:	e7ad      	b.n	80149a4 <__sflush_r+0x1c>
 8014a48:	690f      	ldr	r7, [r1, #16]
 8014a4a:	2f00      	cmp	r7, #0
 8014a4c:	d0a9      	beq.n	80149a2 <__sflush_r+0x1a>
 8014a4e:	0793      	lsls	r3, r2, #30
 8014a50:	680e      	ldr	r6, [r1, #0]
 8014a52:	bf08      	it	eq
 8014a54:	694b      	ldreq	r3, [r1, #20]
 8014a56:	600f      	str	r7, [r1, #0]
 8014a58:	bf18      	it	ne
 8014a5a:	2300      	movne	r3, #0
 8014a5c:	eba6 0807 	sub.w	r8, r6, r7
 8014a60:	608b      	str	r3, [r1, #8]
 8014a62:	f1b8 0f00 	cmp.w	r8, #0
 8014a66:	dd9c      	ble.n	80149a2 <__sflush_r+0x1a>
 8014a68:	6a21      	ldr	r1, [r4, #32]
 8014a6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014a6c:	4643      	mov	r3, r8
 8014a6e:	463a      	mov	r2, r7
 8014a70:	4628      	mov	r0, r5
 8014a72:	47b0      	blx	r6
 8014a74:	2800      	cmp	r0, #0
 8014a76:	dc06      	bgt.n	8014a86 <__sflush_r+0xfe>
 8014a78:	89a3      	ldrh	r3, [r4, #12]
 8014a7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014a7e:	81a3      	strh	r3, [r4, #12]
 8014a80:	f04f 30ff 	mov.w	r0, #4294967295
 8014a84:	e78e      	b.n	80149a4 <__sflush_r+0x1c>
 8014a86:	4407      	add	r7, r0
 8014a88:	eba8 0800 	sub.w	r8, r8, r0
 8014a8c:	e7e9      	b.n	8014a62 <__sflush_r+0xda>
 8014a8e:	bf00      	nop
 8014a90:	20400001 	.word	0x20400001

08014a94 <_fflush_r>:
 8014a94:	b538      	push	{r3, r4, r5, lr}
 8014a96:	690b      	ldr	r3, [r1, #16]
 8014a98:	4605      	mov	r5, r0
 8014a9a:	460c      	mov	r4, r1
 8014a9c:	b913      	cbnz	r3, 8014aa4 <_fflush_r+0x10>
 8014a9e:	2500      	movs	r5, #0
 8014aa0:	4628      	mov	r0, r5
 8014aa2:	bd38      	pop	{r3, r4, r5, pc}
 8014aa4:	b118      	cbz	r0, 8014aae <_fflush_r+0x1a>
 8014aa6:	6983      	ldr	r3, [r0, #24]
 8014aa8:	b90b      	cbnz	r3, 8014aae <_fflush_r+0x1a>
 8014aaa:	f000 f887 	bl	8014bbc <__sinit>
 8014aae:	4b14      	ldr	r3, [pc, #80]	; (8014b00 <_fflush_r+0x6c>)
 8014ab0:	429c      	cmp	r4, r3
 8014ab2:	d11b      	bne.n	8014aec <_fflush_r+0x58>
 8014ab4:	686c      	ldr	r4, [r5, #4]
 8014ab6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014aba:	2b00      	cmp	r3, #0
 8014abc:	d0ef      	beq.n	8014a9e <_fflush_r+0xa>
 8014abe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014ac0:	07d0      	lsls	r0, r2, #31
 8014ac2:	d404      	bmi.n	8014ace <_fflush_r+0x3a>
 8014ac4:	0599      	lsls	r1, r3, #22
 8014ac6:	d402      	bmi.n	8014ace <_fflush_r+0x3a>
 8014ac8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014aca:	f000 f915 	bl	8014cf8 <__retarget_lock_acquire_recursive>
 8014ace:	4628      	mov	r0, r5
 8014ad0:	4621      	mov	r1, r4
 8014ad2:	f7ff ff59 	bl	8014988 <__sflush_r>
 8014ad6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014ad8:	07da      	lsls	r2, r3, #31
 8014ada:	4605      	mov	r5, r0
 8014adc:	d4e0      	bmi.n	8014aa0 <_fflush_r+0xc>
 8014ade:	89a3      	ldrh	r3, [r4, #12]
 8014ae0:	059b      	lsls	r3, r3, #22
 8014ae2:	d4dd      	bmi.n	8014aa0 <_fflush_r+0xc>
 8014ae4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014ae6:	f000 f908 	bl	8014cfa <__retarget_lock_release_recursive>
 8014aea:	e7d9      	b.n	8014aa0 <_fflush_r+0xc>
 8014aec:	4b05      	ldr	r3, [pc, #20]	; (8014b04 <_fflush_r+0x70>)
 8014aee:	429c      	cmp	r4, r3
 8014af0:	d101      	bne.n	8014af6 <_fflush_r+0x62>
 8014af2:	68ac      	ldr	r4, [r5, #8]
 8014af4:	e7df      	b.n	8014ab6 <_fflush_r+0x22>
 8014af6:	4b04      	ldr	r3, [pc, #16]	; (8014b08 <_fflush_r+0x74>)
 8014af8:	429c      	cmp	r4, r3
 8014afa:	bf08      	it	eq
 8014afc:	68ec      	ldreq	r4, [r5, #12]
 8014afe:	e7da      	b.n	8014ab6 <_fflush_r+0x22>
 8014b00:	08016990 	.word	0x08016990
 8014b04:	080169b0 	.word	0x080169b0
 8014b08:	08016970 	.word	0x08016970

08014b0c <std>:
 8014b0c:	2300      	movs	r3, #0
 8014b0e:	b510      	push	{r4, lr}
 8014b10:	4604      	mov	r4, r0
 8014b12:	e9c0 3300 	strd	r3, r3, [r0]
 8014b16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014b1a:	6083      	str	r3, [r0, #8]
 8014b1c:	8181      	strh	r1, [r0, #12]
 8014b1e:	6643      	str	r3, [r0, #100]	; 0x64
 8014b20:	81c2      	strh	r2, [r0, #14]
 8014b22:	6183      	str	r3, [r0, #24]
 8014b24:	4619      	mov	r1, r3
 8014b26:	2208      	movs	r2, #8
 8014b28:	305c      	adds	r0, #92	; 0x5c
 8014b2a:	f7fb f909 	bl	800fd40 <memset>
 8014b2e:	4b05      	ldr	r3, [pc, #20]	; (8014b44 <std+0x38>)
 8014b30:	6263      	str	r3, [r4, #36]	; 0x24
 8014b32:	4b05      	ldr	r3, [pc, #20]	; (8014b48 <std+0x3c>)
 8014b34:	62a3      	str	r3, [r4, #40]	; 0x28
 8014b36:	4b05      	ldr	r3, [pc, #20]	; (8014b4c <std+0x40>)
 8014b38:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014b3a:	4b05      	ldr	r3, [pc, #20]	; (8014b50 <std+0x44>)
 8014b3c:	6224      	str	r4, [r4, #32]
 8014b3e:	6323      	str	r3, [r4, #48]	; 0x30
 8014b40:	bd10      	pop	{r4, pc}
 8014b42:	bf00      	nop
 8014b44:	08010ae9 	.word	0x08010ae9
 8014b48:	08010b0f 	.word	0x08010b0f
 8014b4c:	08010b47 	.word	0x08010b47
 8014b50:	08010b6b 	.word	0x08010b6b

08014b54 <_cleanup_r>:
 8014b54:	4901      	ldr	r1, [pc, #4]	; (8014b5c <_cleanup_r+0x8>)
 8014b56:	f000 b8af 	b.w	8014cb8 <_fwalk_reent>
 8014b5a:	bf00      	nop
 8014b5c:	08014a95 	.word	0x08014a95

08014b60 <__sfmoreglue>:
 8014b60:	b570      	push	{r4, r5, r6, lr}
 8014b62:	2268      	movs	r2, #104	; 0x68
 8014b64:	1e4d      	subs	r5, r1, #1
 8014b66:	4355      	muls	r5, r2
 8014b68:	460e      	mov	r6, r1
 8014b6a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014b6e:	f7fe fec3 	bl	80138f8 <_malloc_r>
 8014b72:	4604      	mov	r4, r0
 8014b74:	b140      	cbz	r0, 8014b88 <__sfmoreglue+0x28>
 8014b76:	2100      	movs	r1, #0
 8014b78:	e9c0 1600 	strd	r1, r6, [r0]
 8014b7c:	300c      	adds	r0, #12
 8014b7e:	60a0      	str	r0, [r4, #8]
 8014b80:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014b84:	f7fb f8dc 	bl	800fd40 <memset>
 8014b88:	4620      	mov	r0, r4
 8014b8a:	bd70      	pop	{r4, r5, r6, pc}

08014b8c <__sfp_lock_acquire>:
 8014b8c:	4801      	ldr	r0, [pc, #4]	; (8014b94 <__sfp_lock_acquire+0x8>)
 8014b8e:	f000 b8b3 	b.w	8014cf8 <__retarget_lock_acquire_recursive>
 8014b92:	bf00      	nop
 8014b94:	2000b4ed 	.word	0x2000b4ed

08014b98 <__sfp_lock_release>:
 8014b98:	4801      	ldr	r0, [pc, #4]	; (8014ba0 <__sfp_lock_release+0x8>)
 8014b9a:	f000 b8ae 	b.w	8014cfa <__retarget_lock_release_recursive>
 8014b9e:	bf00      	nop
 8014ba0:	2000b4ed 	.word	0x2000b4ed

08014ba4 <__sinit_lock_acquire>:
 8014ba4:	4801      	ldr	r0, [pc, #4]	; (8014bac <__sinit_lock_acquire+0x8>)
 8014ba6:	f000 b8a7 	b.w	8014cf8 <__retarget_lock_acquire_recursive>
 8014baa:	bf00      	nop
 8014bac:	2000b4ee 	.word	0x2000b4ee

08014bb0 <__sinit_lock_release>:
 8014bb0:	4801      	ldr	r0, [pc, #4]	; (8014bb8 <__sinit_lock_release+0x8>)
 8014bb2:	f000 b8a2 	b.w	8014cfa <__retarget_lock_release_recursive>
 8014bb6:	bf00      	nop
 8014bb8:	2000b4ee 	.word	0x2000b4ee

08014bbc <__sinit>:
 8014bbc:	b510      	push	{r4, lr}
 8014bbe:	4604      	mov	r4, r0
 8014bc0:	f7ff fff0 	bl	8014ba4 <__sinit_lock_acquire>
 8014bc4:	69a3      	ldr	r3, [r4, #24]
 8014bc6:	b11b      	cbz	r3, 8014bd0 <__sinit+0x14>
 8014bc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014bcc:	f7ff bff0 	b.w	8014bb0 <__sinit_lock_release>
 8014bd0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014bd4:	6523      	str	r3, [r4, #80]	; 0x50
 8014bd6:	4b13      	ldr	r3, [pc, #76]	; (8014c24 <__sinit+0x68>)
 8014bd8:	4a13      	ldr	r2, [pc, #76]	; (8014c28 <__sinit+0x6c>)
 8014bda:	681b      	ldr	r3, [r3, #0]
 8014bdc:	62a2      	str	r2, [r4, #40]	; 0x28
 8014bde:	42a3      	cmp	r3, r4
 8014be0:	bf04      	itt	eq
 8014be2:	2301      	moveq	r3, #1
 8014be4:	61a3      	streq	r3, [r4, #24]
 8014be6:	4620      	mov	r0, r4
 8014be8:	f000 f820 	bl	8014c2c <__sfp>
 8014bec:	6060      	str	r0, [r4, #4]
 8014bee:	4620      	mov	r0, r4
 8014bf0:	f000 f81c 	bl	8014c2c <__sfp>
 8014bf4:	60a0      	str	r0, [r4, #8]
 8014bf6:	4620      	mov	r0, r4
 8014bf8:	f000 f818 	bl	8014c2c <__sfp>
 8014bfc:	2200      	movs	r2, #0
 8014bfe:	60e0      	str	r0, [r4, #12]
 8014c00:	2104      	movs	r1, #4
 8014c02:	6860      	ldr	r0, [r4, #4]
 8014c04:	f7ff ff82 	bl	8014b0c <std>
 8014c08:	68a0      	ldr	r0, [r4, #8]
 8014c0a:	2201      	movs	r2, #1
 8014c0c:	2109      	movs	r1, #9
 8014c0e:	f7ff ff7d 	bl	8014b0c <std>
 8014c12:	68e0      	ldr	r0, [r4, #12]
 8014c14:	2202      	movs	r2, #2
 8014c16:	2112      	movs	r1, #18
 8014c18:	f7ff ff78 	bl	8014b0c <std>
 8014c1c:	2301      	movs	r3, #1
 8014c1e:	61a3      	str	r3, [r4, #24]
 8014c20:	e7d2      	b.n	8014bc8 <__sinit+0xc>
 8014c22:	bf00      	nop
 8014c24:	080164bc 	.word	0x080164bc
 8014c28:	08014b55 	.word	0x08014b55

08014c2c <__sfp>:
 8014c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c2e:	4607      	mov	r7, r0
 8014c30:	f7ff ffac 	bl	8014b8c <__sfp_lock_acquire>
 8014c34:	4b1e      	ldr	r3, [pc, #120]	; (8014cb0 <__sfp+0x84>)
 8014c36:	681e      	ldr	r6, [r3, #0]
 8014c38:	69b3      	ldr	r3, [r6, #24]
 8014c3a:	b913      	cbnz	r3, 8014c42 <__sfp+0x16>
 8014c3c:	4630      	mov	r0, r6
 8014c3e:	f7ff ffbd 	bl	8014bbc <__sinit>
 8014c42:	3648      	adds	r6, #72	; 0x48
 8014c44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014c48:	3b01      	subs	r3, #1
 8014c4a:	d503      	bpl.n	8014c54 <__sfp+0x28>
 8014c4c:	6833      	ldr	r3, [r6, #0]
 8014c4e:	b30b      	cbz	r3, 8014c94 <__sfp+0x68>
 8014c50:	6836      	ldr	r6, [r6, #0]
 8014c52:	e7f7      	b.n	8014c44 <__sfp+0x18>
 8014c54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014c58:	b9d5      	cbnz	r5, 8014c90 <__sfp+0x64>
 8014c5a:	4b16      	ldr	r3, [pc, #88]	; (8014cb4 <__sfp+0x88>)
 8014c5c:	60e3      	str	r3, [r4, #12]
 8014c5e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014c62:	6665      	str	r5, [r4, #100]	; 0x64
 8014c64:	f000 f847 	bl	8014cf6 <__retarget_lock_init_recursive>
 8014c68:	f7ff ff96 	bl	8014b98 <__sfp_lock_release>
 8014c6c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014c70:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014c74:	6025      	str	r5, [r4, #0]
 8014c76:	61a5      	str	r5, [r4, #24]
 8014c78:	2208      	movs	r2, #8
 8014c7a:	4629      	mov	r1, r5
 8014c7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014c80:	f7fb f85e 	bl	800fd40 <memset>
 8014c84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014c88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014c8c:	4620      	mov	r0, r4
 8014c8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014c90:	3468      	adds	r4, #104	; 0x68
 8014c92:	e7d9      	b.n	8014c48 <__sfp+0x1c>
 8014c94:	2104      	movs	r1, #4
 8014c96:	4638      	mov	r0, r7
 8014c98:	f7ff ff62 	bl	8014b60 <__sfmoreglue>
 8014c9c:	4604      	mov	r4, r0
 8014c9e:	6030      	str	r0, [r6, #0]
 8014ca0:	2800      	cmp	r0, #0
 8014ca2:	d1d5      	bne.n	8014c50 <__sfp+0x24>
 8014ca4:	f7ff ff78 	bl	8014b98 <__sfp_lock_release>
 8014ca8:	230c      	movs	r3, #12
 8014caa:	603b      	str	r3, [r7, #0]
 8014cac:	e7ee      	b.n	8014c8c <__sfp+0x60>
 8014cae:	bf00      	nop
 8014cb0:	080164bc 	.word	0x080164bc
 8014cb4:	ffff0001 	.word	0xffff0001

08014cb8 <_fwalk_reent>:
 8014cb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014cbc:	4606      	mov	r6, r0
 8014cbe:	4688      	mov	r8, r1
 8014cc0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014cc4:	2700      	movs	r7, #0
 8014cc6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014cca:	f1b9 0901 	subs.w	r9, r9, #1
 8014cce:	d505      	bpl.n	8014cdc <_fwalk_reent+0x24>
 8014cd0:	6824      	ldr	r4, [r4, #0]
 8014cd2:	2c00      	cmp	r4, #0
 8014cd4:	d1f7      	bne.n	8014cc6 <_fwalk_reent+0xe>
 8014cd6:	4638      	mov	r0, r7
 8014cd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014cdc:	89ab      	ldrh	r3, [r5, #12]
 8014cde:	2b01      	cmp	r3, #1
 8014ce0:	d907      	bls.n	8014cf2 <_fwalk_reent+0x3a>
 8014ce2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014ce6:	3301      	adds	r3, #1
 8014ce8:	d003      	beq.n	8014cf2 <_fwalk_reent+0x3a>
 8014cea:	4629      	mov	r1, r5
 8014cec:	4630      	mov	r0, r6
 8014cee:	47c0      	blx	r8
 8014cf0:	4307      	orrs	r7, r0
 8014cf2:	3568      	adds	r5, #104	; 0x68
 8014cf4:	e7e9      	b.n	8014cca <_fwalk_reent+0x12>

08014cf6 <__retarget_lock_init_recursive>:
 8014cf6:	4770      	bx	lr

08014cf8 <__retarget_lock_acquire_recursive>:
 8014cf8:	4770      	bx	lr

08014cfa <__retarget_lock_release_recursive>:
 8014cfa:	4770      	bx	lr

08014cfc <__swhatbuf_r>:
 8014cfc:	b570      	push	{r4, r5, r6, lr}
 8014cfe:	460e      	mov	r6, r1
 8014d00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014d04:	2900      	cmp	r1, #0
 8014d06:	b096      	sub	sp, #88	; 0x58
 8014d08:	4614      	mov	r4, r2
 8014d0a:	461d      	mov	r5, r3
 8014d0c:	da08      	bge.n	8014d20 <__swhatbuf_r+0x24>
 8014d0e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8014d12:	2200      	movs	r2, #0
 8014d14:	602a      	str	r2, [r5, #0]
 8014d16:	061a      	lsls	r2, r3, #24
 8014d18:	d410      	bmi.n	8014d3c <__swhatbuf_r+0x40>
 8014d1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014d1e:	e00e      	b.n	8014d3e <__swhatbuf_r+0x42>
 8014d20:	466a      	mov	r2, sp
 8014d22:	f000 f8eb 	bl	8014efc <_fstat_r>
 8014d26:	2800      	cmp	r0, #0
 8014d28:	dbf1      	blt.n	8014d0e <__swhatbuf_r+0x12>
 8014d2a:	9a01      	ldr	r2, [sp, #4]
 8014d2c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014d30:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014d34:	425a      	negs	r2, r3
 8014d36:	415a      	adcs	r2, r3
 8014d38:	602a      	str	r2, [r5, #0]
 8014d3a:	e7ee      	b.n	8014d1a <__swhatbuf_r+0x1e>
 8014d3c:	2340      	movs	r3, #64	; 0x40
 8014d3e:	2000      	movs	r0, #0
 8014d40:	6023      	str	r3, [r4, #0]
 8014d42:	b016      	add	sp, #88	; 0x58
 8014d44:	bd70      	pop	{r4, r5, r6, pc}
	...

08014d48 <__smakebuf_r>:
 8014d48:	898b      	ldrh	r3, [r1, #12]
 8014d4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014d4c:	079d      	lsls	r5, r3, #30
 8014d4e:	4606      	mov	r6, r0
 8014d50:	460c      	mov	r4, r1
 8014d52:	d507      	bpl.n	8014d64 <__smakebuf_r+0x1c>
 8014d54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014d58:	6023      	str	r3, [r4, #0]
 8014d5a:	6123      	str	r3, [r4, #16]
 8014d5c:	2301      	movs	r3, #1
 8014d5e:	6163      	str	r3, [r4, #20]
 8014d60:	b002      	add	sp, #8
 8014d62:	bd70      	pop	{r4, r5, r6, pc}
 8014d64:	ab01      	add	r3, sp, #4
 8014d66:	466a      	mov	r2, sp
 8014d68:	f7ff ffc8 	bl	8014cfc <__swhatbuf_r>
 8014d6c:	9900      	ldr	r1, [sp, #0]
 8014d6e:	4605      	mov	r5, r0
 8014d70:	4630      	mov	r0, r6
 8014d72:	f7fe fdc1 	bl	80138f8 <_malloc_r>
 8014d76:	b948      	cbnz	r0, 8014d8c <__smakebuf_r+0x44>
 8014d78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014d7c:	059a      	lsls	r2, r3, #22
 8014d7e:	d4ef      	bmi.n	8014d60 <__smakebuf_r+0x18>
 8014d80:	f023 0303 	bic.w	r3, r3, #3
 8014d84:	f043 0302 	orr.w	r3, r3, #2
 8014d88:	81a3      	strh	r3, [r4, #12]
 8014d8a:	e7e3      	b.n	8014d54 <__smakebuf_r+0xc>
 8014d8c:	4b0d      	ldr	r3, [pc, #52]	; (8014dc4 <__smakebuf_r+0x7c>)
 8014d8e:	62b3      	str	r3, [r6, #40]	; 0x28
 8014d90:	89a3      	ldrh	r3, [r4, #12]
 8014d92:	6020      	str	r0, [r4, #0]
 8014d94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014d98:	81a3      	strh	r3, [r4, #12]
 8014d9a:	9b00      	ldr	r3, [sp, #0]
 8014d9c:	6163      	str	r3, [r4, #20]
 8014d9e:	9b01      	ldr	r3, [sp, #4]
 8014da0:	6120      	str	r0, [r4, #16]
 8014da2:	b15b      	cbz	r3, 8014dbc <__smakebuf_r+0x74>
 8014da4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014da8:	4630      	mov	r0, r6
 8014daa:	f000 f8b9 	bl	8014f20 <_isatty_r>
 8014dae:	b128      	cbz	r0, 8014dbc <__smakebuf_r+0x74>
 8014db0:	89a3      	ldrh	r3, [r4, #12]
 8014db2:	f023 0303 	bic.w	r3, r3, #3
 8014db6:	f043 0301 	orr.w	r3, r3, #1
 8014dba:	81a3      	strh	r3, [r4, #12]
 8014dbc:	89a0      	ldrh	r0, [r4, #12]
 8014dbe:	4305      	orrs	r5, r0
 8014dc0:	81a5      	strh	r5, [r4, #12]
 8014dc2:	e7cd      	b.n	8014d60 <__smakebuf_r+0x18>
 8014dc4:	08014b55 	.word	0x08014b55

08014dc8 <memmove>:
 8014dc8:	4288      	cmp	r0, r1
 8014dca:	b510      	push	{r4, lr}
 8014dcc:	eb01 0402 	add.w	r4, r1, r2
 8014dd0:	d902      	bls.n	8014dd8 <memmove+0x10>
 8014dd2:	4284      	cmp	r4, r0
 8014dd4:	4623      	mov	r3, r4
 8014dd6:	d807      	bhi.n	8014de8 <memmove+0x20>
 8014dd8:	1e43      	subs	r3, r0, #1
 8014dda:	42a1      	cmp	r1, r4
 8014ddc:	d008      	beq.n	8014df0 <memmove+0x28>
 8014dde:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014de2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014de6:	e7f8      	b.n	8014dda <memmove+0x12>
 8014de8:	4402      	add	r2, r0
 8014dea:	4601      	mov	r1, r0
 8014dec:	428a      	cmp	r2, r1
 8014dee:	d100      	bne.n	8014df2 <memmove+0x2a>
 8014df0:	bd10      	pop	{r4, pc}
 8014df2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014df6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014dfa:	e7f7      	b.n	8014dec <memmove+0x24>

08014dfc <__malloc_lock>:
 8014dfc:	4801      	ldr	r0, [pc, #4]	; (8014e04 <__malloc_lock+0x8>)
 8014dfe:	f7ff bf7b 	b.w	8014cf8 <__retarget_lock_acquire_recursive>
 8014e02:	bf00      	nop
 8014e04:	2000b4ec 	.word	0x2000b4ec

08014e08 <__malloc_unlock>:
 8014e08:	4801      	ldr	r0, [pc, #4]	; (8014e10 <__malloc_unlock+0x8>)
 8014e0a:	f7ff bf76 	b.w	8014cfa <__retarget_lock_release_recursive>
 8014e0e:	bf00      	nop
 8014e10:	2000b4ec 	.word	0x2000b4ec

08014e14 <_realloc_r>:
 8014e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e18:	4680      	mov	r8, r0
 8014e1a:	4614      	mov	r4, r2
 8014e1c:	460e      	mov	r6, r1
 8014e1e:	b921      	cbnz	r1, 8014e2a <_realloc_r+0x16>
 8014e20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014e24:	4611      	mov	r1, r2
 8014e26:	f7fe bd67 	b.w	80138f8 <_malloc_r>
 8014e2a:	b92a      	cbnz	r2, 8014e38 <_realloc_r+0x24>
 8014e2c:	f7fe fcf8 	bl	8013820 <_free_r>
 8014e30:	4625      	mov	r5, r4
 8014e32:	4628      	mov	r0, r5
 8014e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e38:	f000 f882 	bl	8014f40 <_malloc_usable_size_r>
 8014e3c:	4284      	cmp	r4, r0
 8014e3e:	4607      	mov	r7, r0
 8014e40:	d802      	bhi.n	8014e48 <_realloc_r+0x34>
 8014e42:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014e46:	d812      	bhi.n	8014e6e <_realloc_r+0x5a>
 8014e48:	4621      	mov	r1, r4
 8014e4a:	4640      	mov	r0, r8
 8014e4c:	f7fe fd54 	bl	80138f8 <_malloc_r>
 8014e50:	4605      	mov	r5, r0
 8014e52:	2800      	cmp	r0, #0
 8014e54:	d0ed      	beq.n	8014e32 <_realloc_r+0x1e>
 8014e56:	42bc      	cmp	r4, r7
 8014e58:	4622      	mov	r2, r4
 8014e5a:	4631      	mov	r1, r6
 8014e5c:	bf28      	it	cs
 8014e5e:	463a      	movcs	r2, r7
 8014e60:	f7fa ff60 	bl	800fd24 <memcpy>
 8014e64:	4631      	mov	r1, r6
 8014e66:	4640      	mov	r0, r8
 8014e68:	f7fe fcda 	bl	8013820 <_free_r>
 8014e6c:	e7e1      	b.n	8014e32 <_realloc_r+0x1e>
 8014e6e:	4635      	mov	r5, r6
 8014e70:	e7df      	b.n	8014e32 <_realloc_r+0x1e>

08014e72 <_raise_r>:
 8014e72:	291f      	cmp	r1, #31
 8014e74:	b538      	push	{r3, r4, r5, lr}
 8014e76:	4604      	mov	r4, r0
 8014e78:	460d      	mov	r5, r1
 8014e7a:	d904      	bls.n	8014e86 <_raise_r+0x14>
 8014e7c:	2316      	movs	r3, #22
 8014e7e:	6003      	str	r3, [r0, #0]
 8014e80:	f04f 30ff 	mov.w	r0, #4294967295
 8014e84:	bd38      	pop	{r3, r4, r5, pc}
 8014e86:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014e88:	b112      	cbz	r2, 8014e90 <_raise_r+0x1e>
 8014e8a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014e8e:	b94b      	cbnz	r3, 8014ea4 <_raise_r+0x32>
 8014e90:	4620      	mov	r0, r4
 8014e92:	f000 f831 	bl	8014ef8 <_getpid_r>
 8014e96:	462a      	mov	r2, r5
 8014e98:	4601      	mov	r1, r0
 8014e9a:	4620      	mov	r0, r4
 8014e9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014ea0:	f000 b818 	b.w	8014ed4 <_kill_r>
 8014ea4:	2b01      	cmp	r3, #1
 8014ea6:	d00a      	beq.n	8014ebe <_raise_r+0x4c>
 8014ea8:	1c59      	adds	r1, r3, #1
 8014eaa:	d103      	bne.n	8014eb4 <_raise_r+0x42>
 8014eac:	2316      	movs	r3, #22
 8014eae:	6003      	str	r3, [r0, #0]
 8014eb0:	2001      	movs	r0, #1
 8014eb2:	e7e7      	b.n	8014e84 <_raise_r+0x12>
 8014eb4:	2400      	movs	r4, #0
 8014eb6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014eba:	4628      	mov	r0, r5
 8014ebc:	4798      	blx	r3
 8014ebe:	2000      	movs	r0, #0
 8014ec0:	e7e0      	b.n	8014e84 <_raise_r+0x12>
	...

08014ec4 <raise>:
 8014ec4:	4b02      	ldr	r3, [pc, #8]	; (8014ed0 <raise+0xc>)
 8014ec6:	4601      	mov	r1, r0
 8014ec8:	6818      	ldr	r0, [r3, #0]
 8014eca:	f7ff bfd2 	b.w	8014e72 <_raise_r>
 8014ece:	bf00      	nop
 8014ed0:	20000438 	.word	0x20000438

08014ed4 <_kill_r>:
 8014ed4:	b538      	push	{r3, r4, r5, lr}
 8014ed6:	4d07      	ldr	r5, [pc, #28]	; (8014ef4 <_kill_r+0x20>)
 8014ed8:	2300      	movs	r3, #0
 8014eda:	4604      	mov	r4, r0
 8014edc:	4608      	mov	r0, r1
 8014ede:	4611      	mov	r1, r2
 8014ee0:	602b      	str	r3, [r5, #0]
 8014ee2:	f7ed fdbf 	bl	8002a64 <_kill>
 8014ee6:	1c43      	adds	r3, r0, #1
 8014ee8:	d102      	bne.n	8014ef0 <_kill_r+0x1c>
 8014eea:	682b      	ldr	r3, [r5, #0]
 8014eec:	b103      	cbz	r3, 8014ef0 <_kill_r+0x1c>
 8014eee:	6023      	str	r3, [r4, #0]
 8014ef0:	bd38      	pop	{r3, r4, r5, pc}
 8014ef2:	bf00      	nop
 8014ef4:	2000b4e8 	.word	0x2000b4e8

08014ef8 <_getpid_r>:
 8014ef8:	f7ed bdac 	b.w	8002a54 <_getpid>

08014efc <_fstat_r>:
 8014efc:	b538      	push	{r3, r4, r5, lr}
 8014efe:	4d07      	ldr	r5, [pc, #28]	; (8014f1c <_fstat_r+0x20>)
 8014f00:	2300      	movs	r3, #0
 8014f02:	4604      	mov	r4, r0
 8014f04:	4608      	mov	r0, r1
 8014f06:	4611      	mov	r1, r2
 8014f08:	602b      	str	r3, [r5, #0]
 8014f0a:	f7ed fe0a 	bl	8002b22 <_fstat>
 8014f0e:	1c43      	adds	r3, r0, #1
 8014f10:	d102      	bne.n	8014f18 <_fstat_r+0x1c>
 8014f12:	682b      	ldr	r3, [r5, #0]
 8014f14:	b103      	cbz	r3, 8014f18 <_fstat_r+0x1c>
 8014f16:	6023      	str	r3, [r4, #0]
 8014f18:	bd38      	pop	{r3, r4, r5, pc}
 8014f1a:	bf00      	nop
 8014f1c:	2000b4e8 	.word	0x2000b4e8

08014f20 <_isatty_r>:
 8014f20:	b538      	push	{r3, r4, r5, lr}
 8014f22:	4d06      	ldr	r5, [pc, #24]	; (8014f3c <_isatty_r+0x1c>)
 8014f24:	2300      	movs	r3, #0
 8014f26:	4604      	mov	r4, r0
 8014f28:	4608      	mov	r0, r1
 8014f2a:	602b      	str	r3, [r5, #0]
 8014f2c:	f7ed fe09 	bl	8002b42 <_isatty>
 8014f30:	1c43      	adds	r3, r0, #1
 8014f32:	d102      	bne.n	8014f3a <_isatty_r+0x1a>
 8014f34:	682b      	ldr	r3, [r5, #0]
 8014f36:	b103      	cbz	r3, 8014f3a <_isatty_r+0x1a>
 8014f38:	6023      	str	r3, [r4, #0]
 8014f3a:	bd38      	pop	{r3, r4, r5, pc}
 8014f3c:	2000b4e8 	.word	0x2000b4e8

08014f40 <_malloc_usable_size_r>:
 8014f40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014f44:	1f18      	subs	r0, r3, #4
 8014f46:	2b00      	cmp	r3, #0
 8014f48:	bfbc      	itt	lt
 8014f4a:	580b      	ldrlt	r3, [r1, r0]
 8014f4c:	18c0      	addlt	r0, r0, r3
 8014f4e:	4770      	bx	lr

08014f50 <pow>:
 8014f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f52:	ed2d 8b02 	vpush	{d8}
 8014f56:	eeb0 8a40 	vmov.f32	s16, s0
 8014f5a:	eef0 8a60 	vmov.f32	s17, s1
 8014f5e:	ec55 4b11 	vmov	r4, r5, d1
 8014f62:	f000 f891 	bl	8015088 <__ieee754_pow>
 8014f66:	4622      	mov	r2, r4
 8014f68:	462b      	mov	r3, r5
 8014f6a:	4620      	mov	r0, r4
 8014f6c:	4629      	mov	r1, r5
 8014f6e:	ec57 6b10 	vmov	r6, r7, d0
 8014f72:	f7eb fe0b 	bl	8000b8c <__aeabi_dcmpun>
 8014f76:	2800      	cmp	r0, #0
 8014f78:	d13b      	bne.n	8014ff2 <pow+0xa2>
 8014f7a:	ec51 0b18 	vmov	r0, r1, d8
 8014f7e:	2200      	movs	r2, #0
 8014f80:	2300      	movs	r3, #0
 8014f82:	f7eb fdd1 	bl	8000b28 <__aeabi_dcmpeq>
 8014f86:	b1b8      	cbz	r0, 8014fb8 <pow+0x68>
 8014f88:	2200      	movs	r2, #0
 8014f8a:	2300      	movs	r3, #0
 8014f8c:	4620      	mov	r0, r4
 8014f8e:	4629      	mov	r1, r5
 8014f90:	f7eb fdca 	bl	8000b28 <__aeabi_dcmpeq>
 8014f94:	2800      	cmp	r0, #0
 8014f96:	d146      	bne.n	8015026 <pow+0xd6>
 8014f98:	ec45 4b10 	vmov	d0, r4, r5
 8014f9c:	f000 fe8d 	bl	8015cba <finite>
 8014fa0:	b338      	cbz	r0, 8014ff2 <pow+0xa2>
 8014fa2:	2200      	movs	r2, #0
 8014fa4:	2300      	movs	r3, #0
 8014fa6:	4620      	mov	r0, r4
 8014fa8:	4629      	mov	r1, r5
 8014faa:	f7eb fdc7 	bl	8000b3c <__aeabi_dcmplt>
 8014fae:	b300      	cbz	r0, 8014ff2 <pow+0xa2>
 8014fb0:	f7fa fe8e 	bl	800fcd0 <__errno>
 8014fb4:	2322      	movs	r3, #34	; 0x22
 8014fb6:	e01b      	b.n	8014ff0 <pow+0xa0>
 8014fb8:	ec47 6b10 	vmov	d0, r6, r7
 8014fbc:	f000 fe7d 	bl	8015cba <finite>
 8014fc0:	b9e0      	cbnz	r0, 8014ffc <pow+0xac>
 8014fc2:	eeb0 0a48 	vmov.f32	s0, s16
 8014fc6:	eef0 0a68 	vmov.f32	s1, s17
 8014fca:	f000 fe76 	bl	8015cba <finite>
 8014fce:	b1a8      	cbz	r0, 8014ffc <pow+0xac>
 8014fd0:	ec45 4b10 	vmov	d0, r4, r5
 8014fd4:	f000 fe71 	bl	8015cba <finite>
 8014fd8:	b180      	cbz	r0, 8014ffc <pow+0xac>
 8014fda:	4632      	mov	r2, r6
 8014fdc:	463b      	mov	r3, r7
 8014fde:	4630      	mov	r0, r6
 8014fe0:	4639      	mov	r1, r7
 8014fe2:	f7eb fdd3 	bl	8000b8c <__aeabi_dcmpun>
 8014fe6:	2800      	cmp	r0, #0
 8014fe8:	d0e2      	beq.n	8014fb0 <pow+0x60>
 8014fea:	f7fa fe71 	bl	800fcd0 <__errno>
 8014fee:	2321      	movs	r3, #33	; 0x21
 8014ff0:	6003      	str	r3, [r0, #0]
 8014ff2:	ecbd 8b02 	vpop	{d8}
 8014ff6:	ec47 6b10 	vmov	d0, r6, r7
 8014ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014ffc:	2200      	movs	r2, #0
 8014ffe:	2300      	movs	r3, #0
 8015000:	4630      	mov	r0, r6
 8015002:	4639      	mov	r1, r7
 8015004:	f7eb fd90 	bl	8000b28 <__aeabi_dcmpeq>
 8015008:	2800      	cmp	r0, #0
 801500a:	d0f2      	beq.n	8014ff2 <pow+0xa2>
 801500c:	eeb0 0a48 	vmov.f32	s0, s16
 8015010:	eef0 0a68 	vmov.f32	s1, s17
 8015014:	f000 fe51 	bl	8015cba <finite>
 8015018:	2800      	cmp	r0, #0
 801501a:	d0ea      	beq.n	8014ff2 <pow+0xa2>
 801501c:	ec45 4b10 	vmov	d0, r4, r5
 8015020:	f000 fe4b 	bl	8015cba <finite>
 8015024:	e7c3      	b.n	8014fae <pow+0x5e>
 8015026:	4f01      	ldr	r7, [pc, #4]	; (801502c <pow+0xdc>)
 8015028:	2600      	movs	r6, #0
 801502a:	e7e2      	b.n	8014ff2 <pow+0xa2>
 801502c:	3ff00000 	.word	0x3ff00000

08015030 <sqrt>:
 8015030:	b538      	push	{r3, r4, r5, lr}
 8015032:	ed2d 8b02 	vpush	{d8}
 8015036:	ec55 4b10 	vmov	r4, r5, d0
 801503a:	f000 fd53 	bl	8015ae4 <__ieee754_sqrt>
 801503e:	4622      	mov	r2, r4
 8015040:	462b      	mov	r3, r5
 8015042:	4620      	mov	r0, r4
 8015044:	4629      	mov	r1, r5
 8015046:	eeb0 8a40 	vmov.f32	s16, s0
 801504a:	eef0 8a60 	vmov.f32	s17, s1
 801504e:	f7eb fd9d 	bl	8000b8c <__aeabi_dcmpun>
 8015052:	b990      	cbnz	r0, 801507a <sqrt+0x4a>
 8015054:	2200      	movs	r2, #0
 8015056:	2300      	movs	r3, #0
 8015058:	4620      	mov	r0, r4
 801505a:	4629      	mov	r1, r5
 801505c:	f7eb fd6e 	bl	8000b3c <__aeabi_dcmplt>
 8015060:	b158      	cbz	r0, 801507a <sqrt+0x4a>
 8015062:	f7fa fe35 	bl	800fcd0 <__errno>
 8015066:	2321      	movs	r3, #33	; 0x21
 8015068:	6003      	str	r3, [r0, #0]
 801506a:	2200      	movs	r2, #0
 801506c:	2300      	movs	r3, #0
 801506e:	4610      	mov	r0, r2
 8015070:	4619      	mov	r1, r3
 8015072:	f7eb fc1b 	bl	80008ac <__aeabi_ddiv>
 8015076:	ec41 0b18 	vmov	d8, r0, r1
 801507a:	eeb0 0a48 	vmov.f32	s0, s16
 801507e:	eef0 0a68 	vmov.f32	s1, s17
 8015082:	ecbd 8b02 	vpop	{d8}
 8015086:	bd38      	pop	{r3, r4, r5, pc}

08015088 <__ieee754_pow>:
 8015088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801508c:	ed2d 8b06 	vpush	{d8-d10}
 8015090:	b089      	sub	sp, #36	; 0x24
 8015092:	ed8d 1b00 	vstr	d1, [sp]
 8015096:	e9dd 2900 	ldrd	r2, r9, [sp]
 801509a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801509e:	ea58 0102 	orrs.w	r1, r8, r2
 80150a2:	ec57 6b10 	vmov	r6, r7, d0
 80150a6:	d115      	bne.n	80150d4 <__ieee754_pow+0x4c>
 80150a8:	19b3      	adds	r3, r6, r6
 80150aa:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80150ae:	4152      	adcs	r2, r2
 80150b0:	4299      	cmp	r1, r3
 80150b2:	4b89      	ldr	r3, [pc, #548]	; (80152d8 <__ieee754_pow+0x250>)
 80150b4:	4193      	sbcs	r3, r2
 80150b6:	f080 84d2 	bcs.w	8015a5e <__ieee754_pow+0x9d6>
 80150ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80150be:	4630      	mov	r0, r6
 80150c0:	4639      	mov	r1, r7
 80150c2:	f7eb f913 	bl	80002ec <__adddf3>
 80150c6:	ec41 0b10 	vmov	d0, r0, r1
 80150ca:	b009      	add	sp, #36	; 0x24
 80150cc:	ecbd 8b06 	vpop	{d8-d10}
 80150d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150d4:	4b81      	ldr	r3, [pc, #516]	; (80152dc <__ieee754_pow+0x254>)
 80150d6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80150da:	429c      	cmp	r4, r3
 80150dc:	ee10 aa10 	vmov	sl, s0
 80150e0:	463d      	mov	r5, r7
 80150e2:	dc06      	bgt.n	80150f2 <__ieee754_pow+0x6a>
 80150e4:	d101      	bne.n	80150ea <__ieee754_pow+0x62>
 80150e6:	2e00      	cmp	r6, #0
 80150e8:	d1e7      	bne.n	80150ba <__ieee754_pow+0x32>
 80150ea:	4598      	cmp	r8, r3
 80150ec:	dc01      	bgt.n	80150f2 <__ieee754_pow+0x6a>
 80150ee:	d10f      	bne.n	8015110 <__ieee754_pow+0x88>
 80150f0:	b172      	cbz	r2, 8015110 <__ieee754_pow+0x88>
 80150f2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80150f6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80150fa:	ea55 050a 	orrs.w	r5, r5, sl
 80150fe:	d1dc      	bne.n	80150ba <__ieee754_pow+0x32>
 8015100:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015104:	18db      	adds	r3, r3, r3
 8015106:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801510a:	4152      	adcs	r2, r2
 801510c:	429d      	cmp	r5, r3
 801510e:	e7d0      	b.n	80150b2 <__ieee754_pow+0x2a>
 8015110:	2d00      	cmp	r5, #0
 8015112:	da3b      	bge.n	801518c <__ieee754_pow+0x104>
 8015114:	4b72      	ldr	r3, [pc, #456]	; (80152e0 <__ieee754_pow+0x258>)
 8015116:	4598      	cmp	r8, r3
 8015118:	dc51      	bgt.n	80151be <__ieee754_pow+0x136>
 801511a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801511e:	4598      	cmp	r8, r3
 8015120:	f340 84ac 	ble.w	8015a7c <__ieee754_pow+0x9f4>
 8015124:	ea4f 5328 	mov.w	r3, r8, asr #20
 8015128:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801512c:	2b14      	cmp	r3, #20
 801512e:	dd0f      	ble.n	8015150 <__ieee754_pow+0xc8>
 8015130:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8015134:	fa22 f103 	lsr.w	r1, r2, r3
 8015138:	fa01 f303 	lsl.w	r3, r1, r3
 801513c:	4293      	cmp	r3, r2
 801513e:	f040 849d 	bne.w	8015a7c <__ieee754_pow+0x9f4>
 8015142:	f001 0101 	and.w	r1, r1, #1
 8015146:	f1c1 0302 	rsb	r3, r1, #2
 801514a:	9304      	str	r3, [sp, #16]
 801514c:	b182      	cbz	r2, 8015170 <__ieee754_pow+0xe8>
 801514e:	e05f      	b.n	8015210 <__ieee754_pow+0x188>
 8015150:	2a00      	cmp	r2, #0
 8015152:	d15b      	bne.n	801520c <__ieee754_pow+0x184>
 8015154:	f1c3 0314 	rsb	r3, r3, #20
 8015158:	fa48 f103 	asr.w	r1, r8, r3
 801515c:	fa01 f303 	lsl.w	r3, r1, r3
 8015160:	4543      	cmp	r3, r8
 8015162:	f040 8488 	bne.w	8015a76 <__ieee754_pow+0x9ee>
 8015166:	f001 0101 	and.w	r1, r1, #1
 801516a:	f1c1 0302 	rsb	r3, r1, #2
 801516e:	9304      	str	r3, [sp, #16]
 8015170:	4b5c      	ldr	r3, [pc, #368]	; (80152e4 <__ieee754_pow+0x25c>)
 8015172:	4598      	cmp	r8, r3
 8015174:	d132      	bne.n	80151dc <__ieee754_pow+0x154>
 8015176:	f1b9 0f00 	cmp.w	r9, #0
 801517a:	f280 8478 	bge.w	8015a6e <__ieee754_pow+0x9e6>
 801517e:	4959      	ldr	r1, [pc, #356]	; (80152e4 <__ieee754_pow+0x25c>)
 8015180:	4632      	mov	r2, r6
 8015182:	463b      	mov	r3, r7
 8015184:	2000      	movs	r0, #0
 8015186:	f7eb fb91 	bl	80008ac <__aeabi_ddiv>
 801518a:	e79c      	b.n	80150c6 <__ieee754_pow+0x3e>
 801518c:	2300      	movs	r3, #0
 801518e:	9304      	str	r3, [sp, #16]
 8015190:	2a00      	cmp	r2, #0
 8015192:	d13d      	bne.n	8015210 <__ieee754_pow+0x188>
 8015194:	4b51      	ldr	r3, [pc, #324]	; (80152dc <__ieee754_pow+0x254>)
 8015196:	4598      	cmp	r8, r3
 8015198:	d1ea      	bne.n	8015170 <__ieee754_pow+0xe8>
 801519a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801519e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80151a2:	ea53 030a 	orrs.w	r3, r3, sl
 80151a6:	f000 845a 	beq.w	8015a5e <__ieee754_pow+0x9d6>
 80151aa:	4b4f      	ldr	r3, [pc, #316]	; (80152e8 <__ieee754_pow+0x260>)
 80151ac:	429c      	cmp	r4, r3
 80151ae:	dd08      	ble.n	80151c2 <__ieee754_pow+0x13a>
 80151b0:	f1b9 0f00 	cmp.w	r9, #0
 80151b4:	f2c0 8457 	blt.w	8015a66 <__ieee754_pow+0x9de>
 80151b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80151bc:	e783      	b.n	80150c6 <__ieee754_pow+0x3e>
 80151be:	2302      	movs	r3, #2
 80151c0:	e7e5      	b.n	801518e <__ieee754_pow+0x106>
 80151c2:	f1b9 0f00 	cmp.w	r9, #0
 80151c6:	f04f 0000 	mov.w	r0, #0
 80151ca:	f04f 0100 	mov.w	r1, #0
 80151ce:	f6bf af7a 	bge.w	80150c6 <__ieee754_pow+0x3e>
 80151d2:	e9dd 0300 	ldrd	r0, r3, [sp]
 80151d6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80151da:	e774      	b.n	80150c6 <__ieee754_pow+0x3e>
 80151dc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80151e0:	d106      	bne.n	80151f0 <__ieee754_pow+0x168>
 80151e2:	4632      	mov	r2, r6
 80151e4:	463b      	mov	r3, r7
 80151e6:	4630      	mov	r0, r6
 80151e8:	4639      	mov	r1, r7
 80151ea:	f7eb fa35 	bl	8000658 <__aeabi_dmul>
 80151ee:	e76a      	b.n	80150c6 <__ieee754_pow+0x3e>
 80151f0:	4b3e      	ldr	r3, [pc, #248]	; (80152ec <__ieee754_pow+0x264>)
 80151f2:	4599      	cmp	r9, r3
 80151f4:	d10c      	bne.n	8015210 <__ieee754_pow+0x188>
 80151f6:	2d00      	cmp	r5, #0
 80151f8:	db0a      	blt.n	8015210 <__ieee754_pow+0x188>
 80151fa:	ec47 6b10 	vmov	d0, r6, r7
 80151fe:	b009      	add	sp, #36	; 0x24
 8015200:	ecbd 8b06 	vpop	{d8-d10}
 8015204:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015208:	f000 bc6c 	b.w	8015ae4 <__ieee754_sqrt>
 801520c:	2300      	movs	r3, #0
 801520e:	9304      	str	r3, [sp, #16]
 8015210:	ec47 6b10 	vmov	d0, r6, r7
 8015214:	f000 fd48 	bl	8015ca8 <fabs>
 8015218:	ec51 0b10 	vmov	r0, r1, d0
 801521c:	f1ba 0f00 	cmp.w	sl, #0
 8015220:	d129      	bne.n	8015276 <__ieee754_pow+0x1ee>
 8015222:	b124      	cbz	r4, 801522e <__ieee754_pow+0x1a6>
 8015224:	4b2f      	ldr	r3, [pc, #188]	; (80152e4 <__ieee754_pow+0x25c>)
 8015226:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801522a:	429a      	cmp	r2, r3
 801522c:	d123      	bne.n	8015276 <__ieee754_pow+0x1ee>
 801522e:	f1b9 0f00 	cmp.w	r9, #0
 8015232:	da05      	bge.n	8015240 <__ieee754_pow+0x1b8>
 8015234:	4602      	mov	r2, r0
 8015236:	460b      	mov	r3, r1
 8015238:	2000      	movs	r0, #0
 801523a:	492a      	ldr	r1, [pc, #168]	; (80152e4 <__ieee754_pow+0x25c>)
 801523c:	f7eb fb36 	bl	80008ac <__aeabi_ddiv>
 8015240:	2d00      	cmp	r5, #0
 8015242:	f6bf af40 	bge.w	80150c6 <__ieee754_pow+0x3e>
 8015246:	9b04      	ldr	r3, [sp, #16]
 8015248:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801524c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8015250:	4323      	orrs	r3, r4
 8015252:	d108      	bne.n	8015266 <__ieee754_pow+0x1de>
 8015254:	4602      	mov	r2, r0
 8015256:	460b      	mov	r3, r1
 8015258:	4610      	mov	r0, r2
 801525a:	4619      	mov	r1, r3
 801525c:	f7eb f844 	bl	80002e8 <__aeabi_dsub>
 8015260:	4602      	mov	r2, r0
 8015262:	460b      	mov	r3, r1
 8015264:	e78f      	b.n	8015186 <__ieee754_pow+0xfe>
 8015266:	9b04      	ldr	r3, [sp, #16]
 8015268:	2b01      	cmp	r3, #1
 801526a:	f47f af2c 	bne.w	80150c6 <__ieee754_pow+0x3e>
 801526e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015272:	4619      	mov	r1, r3
 8015274:	e727      	b.n	80150c6 <__ieee754_pow+0x3e>
 8015276:	0feb      	lsrs	r3, r5, #31
 8015278:	3b01      	subs	r3, #1
 801527a:	9306      	str	r3, [sp, #24]
 801527c:	9a06      	ldr	r2, [sp, #24]
 801527e:	9b04      	ldr	r3, [sp, #16]
 8015280:	4313      	orrs	r3, r2
 8015282:	d102      	bne.n	801528a <__ieee754_pow+0x202>
 8015284:	4632      	mov	r2, r6
 8015286:	463b      	mov	r3, r7
 8015288:	e7e6      	b.n	8015258 <__ieee754_pow+0x1d0>
 801528a:	4b19      	ldr	r3, [pc, #100]	; (80152f0 <__ieee754_pow+0x268>)
 801528c:	4598      	cmp	r8, r3
 801528e:	f340 80fb 	ble.w	8015488 <__ieee754_pow+0x400>
 8015292:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8015296:	4598      	cmp	r8, r3
 8015298:	4b13      	ldr	r3, [pc, #76]	; (80152e8 <__ieee754_pow+0x260>)
 801529a:	dd0c      	ble.n	80152b6 <__ieee754_pow+0x22e>
 801529c:	429c      	cmp	r4, r3
 801529e:	dc0f      	bgt.n	80152c0 <__ieee754_pow+0x238>
 80152a0:	f1b9 0f00 	cmp.w	r9, #0
 80152a4:	da0f      	bge.n	80152c6 <__ieee754_pow+0x23e>
 80152a6:	2000      	movs	r0, #0
 80152a8:	b009      	add	sp, #36	; 0x24
 80152aa:	ecbd 8b06 	vpop	{d8-d10}
 80152ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152b2:	f000 bcf0 	b.w	8015c96 <__math_oflow>
 80152b6:	429c      	cmp	r4, r3
 80152b8:	dbf2      	blt.n	80152a0 <__ieee754_pow+0x218>
 80152ba:	4b0a      	ldr	r3, [pc, #40]	; (80152e4 <__ieee754_pow+0x25c>)
 80152bc:	429c      	cmp	r4, r3
 80152be:	dd19      	ble.n	80152f4 <__ieee754_pow+0x26c>
 80152c0:	f1b9 0f00 	cmp.w	r9, #0
 80152c4:	dcef      	bgt.n	80152a6 <__ieee754_pow+0x21e>
 80152c6:	2000      	movs	r0, #0
 80152c8:	b009      	add	sp, #36	; 0x24
 80152ca:	ecbd 8b06 	vpop	{d8-d10}
 80152ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152d2:	f000 bcd7 	b.w	8015c84 <__math_uflow>
 80152d6:	bf00      	nop
 80152d8:	fff00000 	.word	0xfff00000
 80152dc:	7ff00000 	.word	0x7ff00000
 80152e0:	433fffff 	.word	0x433fffff
 80152e4:	3ff00000 	.word	0x3ff00000
 80152e8:	3fefffff 	.word	0x3fefffff
 80152ec:	3fe00000 	.word	0x3fe00000
 80152f0:	41e00000 	.word	0x41e00000
 80152f4:	4b60      	ldr	r3, [pc, #384]	; (8015478 <__ieee754_pow+0x3f0>)
 80152f6:	2200      	movs	r2, #0
 80152f8:	f7ea fff6 	bl	80002e8 <__aeabi_dsub>
 80152fc:	a354      	add	r3, pc, #336	; (adr r3, 8015450 <__ieee754_pow+0x3c8>)
 80152fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015302:	4604      	mov	r4, r0
 8015304:	460d      	mov	r5, r1
 8015306:	f7eb f9a7 	bl	8000658 <__aeabi_dmul>
 801530a:	a353      	add	r3, pc, #332	; (adr r3, 8015458 <__ieee754_pow+0x3d0>)
 801530c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015310:	4606      	mov	r6, r0
 8015312:	460f      	mov	r7, r1
 8015314:	4620      	mov	r0, r4
 8015316:	4629      	mov	r1, r5
 8015318:	f7eb f99e 	bl	8000658 <__aeabi_dmul>
 801531c:	4b57      	ldr	r3, [pc, #348]	; (801547c <__ieee754_pow+0x3f4>)
 801531e:	4682      	mov	sl, r0
 8015320:	468b      	mov	fp, r1
 8015322:	2200      	movs	r2, #0
 8015324:	4620      	mov	r0, r4
 8015326:	4629      	mov	r1, r5
 8015328:	f7eb f996 	bl	8000658 <__aeabi_dmul>
 801532c:	4602      	mov	r2, r0
 801532e:	460b      	mov	r3, r1
 8015330:	a14b      	add	r1, pc, #300	; (adr r1, 8015460 <__ieee754_pow+0x3d8>)
 8015332:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015336:	f7ea ffd7 	bl	80002e8 <__aeabi_dsub>
 801533a:	4622      	mov	r2, r4
 801533c:	462b      	mov	r3, r5
 801533e:	f7eb f98b 	bl	8000658 <__aeabi_dmul>
 8015342:	4602      	mov	r2, r0
 8015344:	460b      	mov	r3, r1
 8015346:	2000      	movs	r0, #0
 8015348:	494d      	ldr	r1, [pc, #308]	; (8015480 <__ieee754_pow+0x3f8>)
 801534a:	f7ea ffcd 	bl	80002e8 <__aeabi_dsub>
 801534e:	4622      	mov	r2, r4
 8015350:	4680      	mov	r8, r0
 8015352:	4689      	mov	r9, r1
 8015354:	462b      	mov	r3, r5
 8015356:	4620      	mov	r0, r4
 8015358:	4629      	mov	r1, r5
 801535a:	f7eb f97d 	bl	8000658 <__aeabi_dmul>
 801535e:	4602      	mov	r2, r0
 8015360:	460b      	mov	r3, r1
 8015362:	4640      	mov	r0, r8
 8015364:	4649      	mov	r1, r9
 8015366:	f7eb f977 	bl	8000658 <__aeabi_dmul>
 801536a:	a33f      	add	r3, pc, #252	; (adr r3, 8015468 <__ieee754_pow+0x3e0>)
 801536c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015370:	f7eb f972 	bl	8000658 <__aeabi_dmul>
 8015374:	4602      	mov	r2, r0
 8015376:	460b      	mov	r3, r1
 8015378:	4650      	mov	r0, sl
 801537a:	4659      	mov	r1, fp
 801537c:	f7ea ffb4 	bl	80002e8 <__aeabi_dsub>
 8015380:	4602      	mov	r2, r0
 8015382:	460b      	mov	r3, r1
 8015384:	4680      	mov	r8, r0
 8015386:	4689      	mov	r9, r1
 8015388:	4630      	mov	r0, r6
 801538a:	4639      	mov	r1, r7
 801538c:	f7ea ffae 	bl	80002ec <__adddf3>
 8015390:	2000      	movs	r0, #0
 8015392:	4632      	mov	r2, r6
 8015394:	463b      	mov	r3, r7
 8015396:	4604      	mov	r4, r0
 8015398:	460d      	mov	r5, r1
 801539a:	f7ea ffa5 	bl	80002e8 <__aeabi_dsub>
 801539e:	4602      	mov	r2, r0
 80153a0:	460b      	mov	r3, r1
 80153a2:	4640      	mov	r0, r8
 80153a4:	4649      	mov	r1, r9
 80153a6:	f7ea ff9f 	bl	80002e8 <__aeabi_dsub>
 80153aa:	9b04      	ldr	r3, [sp, #16]
 80153ac:	9a06      	ldr	r2, [sp, #24]
 80153ae:	3b01      	subs	r3, #1
 80153b0:	4313      	orrs	r3, r2
 80153b2:	4682      	mov	sl, r0
 80153b4:	468b      	mov	fp, r1
 80153b6:	f040 81e7 	bne.w	8015788 <__ieee754_pow+0x700>
 80153ba:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8015470 <__ieee754_pow+0x3e8>
 80153be:	eeb0 8a47 	vmov.f32	s16, s14
 80153c2:	eef0 8a67 	vmov.f32	s17, s15
 80153c6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80153ca:	2600      	movs	r6, #0
 80153cc:	4632      	mov	r2, r6
 80153ce:	463b      	mov	r3, r7
 80153d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80153d4:	f7ea ff88 	bl	80002e8 <__aeabi_dsub>
 80153d8:	4622      	mov	r2, r4
 80153da:	462b      	mov	r3, r5
 80153dc:	f7eb f93c 	bl	8000658 <__aeabi_dmul>
 80153e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80153e4:	4680      	mov	r8, r0
 80153e6:	4689      	mov	r9, r1
 80153e8:	4650      	mov	r0, sl
 80153ea:	4659      	mov	r1, fp
 80153ec:	f7eb f934 	bl	8000658 <__aeabi_dmul>
 80153f0:	4602      	mov	r2, r0
 80153f2:	460b      	mov	r3, r1
 80153f4:	4640      	mov	r0, r8
 80153f6:	4649      	mov	r1, r9
 80153f8:	f7ea ff78 	bl	80002ec <__adddf3>
 80153fc:	4632      	mov	r2, r6
 80153fe:	463b      	mov	r3, r7
 8015400:	4680      	mov	r8, r0
 8015402:	4689      	mov	r9, r1
 8015404:	4620      	mov	r0, r4
 8015406:	4629      	mov	r1, r5
 8015408:	f7eb f926 	bl	8000658 <__aeabi_dmul>
 801540c:	460b      	mov	r3, r1
 801540e:	4604      	mov	r4, r0
 8015410:	460d      	mov	r5, r1
 8015412:	4602      	mov	r2, r0
 8015414:	4649      	mov	r1, r9
 8015416:	4640      	mov	r0, r8
 8015418:	f7ea ff68 	bl	80002ec <__adddf3>
 801541c:	4b19      	ldr	r3, [pc, #100]	; (8015484 <__ieee754_pow+0x3fc>)
 801541e:	4299      	cmp	r1, r3
 8015420:	ec45 4b19 	vmov	d9, r4, r5
 8015424:	4606      	mov	r6, r0
 8015426:	460f      	mov	r7, r1
 8015428:	468b      	mov	fp, r1
 801542a:	f340 82f1 	ble.w	8015a10 <__ieee754_pow+0x988>
 801542e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8015432:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8015436:	4303      	orrs	r3, r0
 8015438:	f000 81e4 	beq.w	8015804 <__ieee754_pow+0x77c>
 801543c:	ec51 0b18 	vmov	r0, r1, d8
 8015440:	2200      	movs	r2, #0
 8015442:	2300      	movs	r3, #0
 8015444:	f7eb fb7a 	bl	8000b3c <__aeabi_dcmplt>
 8015448:	3800      	subs	r0, #0
 801544a:	bf18      	it	ne
 801544c:	2001      	movne	r0, #1
 801544e:	e72b      	b.n	80152a8 <__ieee754_pow+0x220>
 8015450:	60000000 	.word	0x60000000
 8015454:	3ff71547 	.word	0x3ff71547
 8015458:	f85ddf44 	.word	0xf85ddf44
 801545c:	3e54ae0b 	.word	0x3e54ae0b
 8015460:	55555555 	.word	0x55555555
 8015464:	3fd55555 	.word	0x3fd55555
 8015468:	652b82fe 	.word	0x652b82fe
 801546c:	3ff71547 	.word	0x3ff71547
 8015470:	00000000 	.word	0x00000000
 8015474:	bff00000 	.word	0xbff00000
 8015478:	3ff00000 	.word	0x3ff00000
 801547c:	3fd00000 	.word	0x3fd00000
 8015480:	3fe00000 	.word	0x3fe00000
 8015484:	408fffff 	.word	0x408fffff
 8015488:	4bd5      	ldr	r3, [pc, #852]	; (80157e0 <__ieee754_pow+0x758>)
 801548a:	402b      	ands	r3, r5
 801548c:	2200      	movs	r2, #0
 801548e:	b92b      	cbnz	r3, 801549c <__ieee754_pow+0x414>
 8015490:	4bd4      	ldr	r3, [pc, #848]	; (80157e4 <__ieee754_pow+0x75c>)
 8015492:	f7eb f8e1 	bl	8000658 <__aeabi_dmul>
 8015496:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801549a:	460c      	mov	r4, r1
 801549c:	1523      	asrs	r3, r4, #20
 801549e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80154a2:	4413      	add	r3, r2
 80154a4:	9305      	str	r3, [sp, #20]
 80154a6:	4bd0      	ldr	r3, [pc, #832]	; (80157e8 <__ieee754_pow+0x760>)
 80154a8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80154ac:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80154b0:	429c      	cmp	r4, r3
 80154b2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80154b6:	dd08      	ble.n	80154ca <__ieee754_pow+0x442>
 80154b8:	4bcc      	ldr	r3, [pc, #816]	; (80157ec <__ieee754_pow+0x764>)
 80154ba:	429c      	cmp	r4, r3
 80154bc:	f340 8162 	ble.w	8015784 <__ieee754_pow+0x6fc>
 80154c0:	9b05      	ldr	r3, [sp, #20]
 80154c2:	3301      	adds	r3, #1
 80154c4:	9305      	str	r3, [sp, #20]
 80154c6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80154ca:	2400      	movs	r4, #0
 80154cc:	00e3      	lsls	r3, r4, #3
 80154ce:	9307      	str	r3, [sp, #28]
 80154d0:	4bc7      	ldr	r3, [pc, #796]	; (80157f0 <__ieee754_pow+0x768>)
 80154d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80154d6:	ed93 7b00 	vldr	d7, [r3]
 80154da:	4629      	mov	r1, r5
 80154dc:	ec53 2b17 	vmov	r2, r3, d7
 80154e0:	eeb0 9a47 	vmov.f32	s18, s14
 80154e4:	eef0 9a67 	vmov.f32	s19, s15
 80154e8:	4682      	mov	sl, r0
 80154ea:	f7ea fefd 	bl	80002e8 <__aeabi_dsub>
 80154ee:	4652      	mov	r2, sl
 80154f0:	4606      	mov	r6, r0
 80154f2:	460f      	mov	r7, r1
 80154f4:	462b      	mov	r3, r5
 80154f6:	ec51 0b19 	vmov	r0, r1, d9
 80154fa:	f7ea fef7 	bl	80002ec <__adddf3>
 80154fe:	4602      	mov	r2, r0
 8015500:	460b      	mov	r3, r1
 8015502:	2000      	movs	r0, #0
 8015504:	49bb      	ldr	r1, [pc, #748]	; (80157f4 <__ieee754_pow+0x76c>)
 8015506:	f7eb f9d1 	bl	80008ac <__aeabi_ddiv>
 801550a:	ec41 0b1a 	vmov	d10, r0, r1
 801550e:	4602      	mov	r2, r0
 8015510:	460b      	mov	r3, r1
 8015512:	4630      	mov	r0, r6
 8015514:	4639      	mov	r1, r7
 8015516:	f7eb f89f 	bl	8000658 <__aeabi_dmul>
 801551a:	2300      	movs	r3, #0
 801551c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015520:	9302      	str	r3, [sp, #8]
 8015522:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8015526:	46ab      	mov	fp, r5
 8015528:	106d      	asrs	r5, r5, #1
 801552a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801552e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8015532:	ec41 0b18 	vmov	d8, r0, r1
 8015536:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801553a:	2200      	movs	r2, #0
 801553c:	4640      	mov	r0, r8
 801553e:	4649      	mov	r1, r9
 8015540:	4614      	mov	r4, r2
 8015542:	461d      	mov	r5, r3
 8015544:	f7eb f888 	bl	8000658 <__aeabi_dmul>
 8015548:	4602      	mov	r2, r0
 801554a:	460b      	mov	r3, r1
 801554c:	4630      	mov	r0, r6
 801554e:	4639      	mov	r1, r7
 8015550:	f7ea feca 	bl	80002e8 <__aeabi_dsub>
 8015554:	ec53 2b19 	vmov	r2, r3, d9
 8015558:	4606      	mov	r6, r0
 801555a:	460f      	mov	r7, r1
 801555c:	4620      	mov	r0, r4
 801555e:	4629      	mov	r1, r5
 8015560:	f7ea fec2 	bl	80002e8 <__aeabi_dsub>
 8015564:	4602      	mov	r2, r0
 8015566:	460b      	mov	r3, r1
 8015568:	4650      	mov	r0, sl
 801556a:	4659      	mov	r1, fp
 801556c:	f7ea febc 	bl	80002e8 <__aeabi_dsub>
 8015570:	4642      	mov	r2, r8
 8015572:	464b      	mov	r3, r9
 8015574:	f7eb f870 	bl	8000658 <__aeabi_dmul>
 8015578:	4602      	mov	r2, r0
 801557a:	460b      	mov	r3, r1
 801557c:	4630      	mov	r0, r6
 801557e:	4639      	mov	r1, r7
 8015580:	f7ea feb2 	bl	80002e8 <__aeabi_dsub>
 8015584:	ec53 2b1a 	vmov	r2, r3, d10
 8015588:	f7eb f866 	bl	8000658 <__aeabi_dmul>
 801558c:	ec53 2b18 	vmov	r2, r3, d8
 8015590:	ec41 0b19 	vmov	d9, r0, r1
 8015594:	ec51 0b18 	vmov	r0, r1, d8
 8015598:	f7eb f85e 	bl	8000658 <__aeabi_dmul>
 801559c:	a37c      	add	r3, pc, #496	; (adr r3, 8015790 <__ieee754_pow+0x708>)
 801559e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155a2:	4604      	mov	r4, r0
 80155a4:	460d      	mov	r5, r1
 80155a6:	f7eb f857 	bl	8000658 <__aeabi_dmul>
 80155aa:	a37b      	add	r3, pc, #492	; (adr r3, 8015798 <__ieee754_pow+0x710>)
 80155ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155b0:	f7ea fe9c 	bl	80002ec <__adddf3>
 80155b4:	4622      	mov	r2, r4
 80155b6:	462b      	mov	r3, r5
 80155b8:	f7eb f84e 	bl	8000658 <__aeabi_dmul>
 80155bc:	a378      	add	r3, pc, #480	; (adr r3, 80157a0 <__ieee754_pow+0x718>)
 80155be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155c2:	f7ea fe93 	bl	80002ec <__adddf3>
 80155c6:	4622      	mov	r2, r4
 80155c8:	462b      	mov	r3, r5
 80155ca:	f7eb f845 	bl	8000658 <__aeabi_dmul>
 80155ce:	a376      	add	r3, pc, #472	; (adr r3, 80157a8 <__ieee754_pow+0x720>)
 80155d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155d4:	f7ea fe8a 	bl	80002ec <__adddf3>
 80155d8:	4622      	mov	r2, r4
 80155da:	462b      	mov	r3, r5
 80155dc:	f7eb f83c 	bl	8000658 <__aeabi_dmul>
 80155e0:	a373      	add	r3, pc, #460	; (adr r3, 80157b0 <__ieee754_pow+0x728>)
 80155e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155e6:	f7ea fe81 	bl	80002ec <__adddf3>
 80155ea:	4622      	mov	r2, r4
 80155ec:	462b      	mov	r3, r5
 80155ee:	f7eb f833 	bl	8000658 <__aeabi_dmul>
 80155f2:	a371      	add	r3, pc, #452	; (adr r3, 80157b8 <__ieee754_pow+0x730>)
 80155f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155f8:	f7ea fe78 	bl	80002ec <__adddf3>
 80155fc:	4622      	mov	r2, r4
 80155fe:	4606      	mov	r6, r0
 8015600:	460f      	mov	r7, r1
 8015602:	462b      	mov	r3, r5
 8015604:	4620      	mov	r0, r4
 8015606:	4629      	mov	r1, r5
 8015608:	f7eb f826 	bl	8000658 <__aeabi_dmul>
 801560c:	4602      	mov	r2, r0
 801560e:	460b      	mov	r3, r1
 8015610:	4630      	mov	r0, r6
 8015612:	4639      	mov	r1, r7
 8015614:	f7eb f820 	bl	8000658 <__aeabi_dmul>
 8015618:	4642      	mov	r2, r8
 801561a:	4604      	mov	r4, r0
 801561c:	460d      	mov	r5, r1
 801561e:	464b      	mov	r3, r9
 8015620:	ec51 0b18 	vmov	r0, r1, d8
 8015624:	f7ea fe62 	bl	80002ec <__adddf3>
 8015628:	ec53 2b19 	vmov	r2, r3, d9
 801562c:	f7eb f814 	bl	8000658 <__aeabi_dmul>
 8015630:	4622      	mov	r2, r4
 8015632:	462b      	mov	r3, r5
 8015634:	f7ea fe5a 	bl	80002ec <__adddf3>
 8015638:	4642      	mov	r2, r8
 801563a:	4682      	mov	sl, r0
 801563c:	468b      	mov	fp, r1
 801563e:	464b      	mov	r3, r9
 8015640:	4640      	mov	r0, r8
 8015642:	4649      	mov	r1, r9
 8015644:	f7eb f808 	bl	8000658 <__aeabi_dmul>
 8015648:	4b6b      	ldr	r3, [pc, #428]	; (80157f8 <__ieee754_pow+0x770>)
 801564a:	2200      	movs	r2, #0
 801564c:	4606      	mov	r6, r0
 801564e:	460f      	mov	r7, r1
 8015650:	f7ea fe4c 	bl	80002ec <__adddf3>
 8015654:	4652      	mov	r2, sl
 8015656:	465b      	mov	r3, fp
 8015658:	f7ea fe48 	bl	80002ec <__adddf3>
 801565c:	2000      	movs	r0, #0
 801565e:	4604      	mov	r4, r0
 8015660:	460d      	mov	r5, r1
 8015662:	4602      	mov	r2, r0
 8015664:	460b      	mov	r3, r1
 8015666:	4640      	mov	r0, r8
 8015668:	4649      	mov	r1, r9
 801566a:	f7ea fff5 	bl	8000658 <__aeabi_dmul>
 801566e:	4b62      	ldr	r3, [pc, #392]	; (80157f8 <__ieee754_pow+0x770>)
 8015670:	4680      	mov	r8, r0
 8015672:	4689      	mov	r9, r1
 8015674:	2200      	movs	r2, #0
 8015676:	4620      	mov	r0, r4
 8015678:	4629      	mov	r1, r5
 801567a:	f7ea fe35 	bl	80002e8 <__aeabi_dsub>
 801567e:	4632      	mov	r2, r6
 8015680:	463b      	mov	r3, r7
 8015682:	f7ea fe31 	bl	80002e8 <__aeabi_dsub>
 8015686:	4602      	mov	r2, r0
 8015688:	460b      	mov	r3, r1
 801568a:	4650      	mov	r0, sl
 801568c:	4659      	mov	r1, fp
 801568e:	f7ea fe2b 	bl	80002e8 <__aeabi_dsub>
 8015692:	ec53 2b18 	vmov	r2, r3, d8
 8015696:	f7ea ffdf 	bl	8000658 <__aeabi_dmul>
 801569a:	4622      	mov	r2, r4
 801569c:	4606      	mov	r6, r0
 801569e:	460f      	mov	r7, r1
 80156a0:	462b      	mov	r3, r5
 80156a2:	ec51 0b19 	vmov	r0, r1, d9
 80156a6:	f7ea ffd7 	bl	8000658 <__aeabi_dmul>
 80156aa:	4602      	mov	r2, r0
 80156ac:	460b      	mov	r3, r1
 80156ae:	4630      	mov	r0, r6
 80156b0:	4639      	mov	r1, r7
 80156b2:	f7ea fe1b 	bl	80002ec <__adddf3>
 80156b6:	4606      	mov	r6, r0
 80156b8:	460f      	mov	r7, r1
 80156ba:	4602      	mov	r2, r0
 80156bc:	460b      	mov	r3, r1
 80156be:	4640      	mov	r0, r8
 80156c0:	4649      	mov	r1, r9
 80156c2:	f7ea fe13 	bl	80002ec <__adddf3>
 80156c6:	a33e      	add	r3, pc, #248	; (adr r3, 80157c0 <__ieee754_pow+0x738>)
 80156c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156cc:	2000      	movs	r0, #0
 80156ce:	4604      	mov	r4, r0
 80156d0:	460d      	mov	r5, r1
 80156d2:	f7ea ffc1 	bl	8000658 <__aeabi_dmul>
 80156d6:	4642      	mov	r2, r8
 80156d8:	ec41 0b18 	vmov	d8, r0, r1
 80156dc:	464b      	mov	r3, r9
 80156de:	4620      	mov	r0, r4
 80156e0:	4629      	mov	r1, r5
 80156e2:	f7ea fe01 	bl	80002e8 <__aeabi_dsub>
 80156e6:	4602      	mov	r2, r0
 80156e8:	460b      	mov	r3, r1
 80156ea:	4630      	mov	r0, r6
 80156ec:	4639      	mov	r1, r7
 80156ee:	f7ea fdfb 	bl	80002e8 <__aeabi_dsub>
 80156f2:	a335      	add	r3, pc, #212	; (adr r3, 80157c8 <__ieee754_pow+0x740>)
 80156f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156f8:	f7ea ffae 	bl	8000658 <__aeabi_dmul>
 80156fc:	a334      	add	r3, pc, #208	; (adr r3, 80157d0 <__ieee754_pow+0x748>)
 80156fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015702:	4606      	mov	r6, r0
 8015704:	460f      	mov	r7, r1
 8015706:	4620      	mov	r0, r4
 8015708:	4629      	mov	r1, r5
 801570a:	f7ea ffa5 	bl	8000658 <__aeabi_dmul>
 801570e:	4602      	mov	r2, r0
 8015710:	460b      	mov	r3, r1
 8015712:	4630      	mov	r0, r6
 8015714:	4639      	mov	r1, r7
 8015716:	f7ea fde9 	bl	80002ec <__adddf3>
 801571a:	9a07      	ldr	r2, [sp, #28]
 801571c:	4b37      	ldr	r3, [pc, #220]	; (80157fc <__ieee754_pow+0x774>)
 801571e:	4413      	add	r3, r2
 8015720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015724:	f7ea fde2 	bl	80002ec <__adddf3>
 8015728:	4682      	mov	sl, r0
 801572a:	9805      	ldr	r0, [sp, #20]
 801572c:	468b      	mov	fp, r1
 801572e:	f7ea ff29 	bl	8000584 <__aeabi_i2d>
 8015732:	9a07      	ldr	r2, [sp, #28]
 8015734:	4b32      	ldr	r3, [pc, #200]	; (8015800 <__ieee754_pow+0x778>)
 8015736:	4413      	add	r3, r2
 8015738:	e9d3 8900 	ldrd	r8, r9, [r3]
 801573c:	4606      	mov	r6, r0
 801573e:	460f      	mov	r7, r1
 8015740:	4652      	mov	r2, sl
 8015742:	465b      	mov	r3, fp
 8015744:	ec51 0b18 	vmov	r0, r1, d8
 8015748:	f7ea fdd0 	bl	80002ec <__adddf3>
 801574c:	4642      	mov	r2, r8
 801574e:	464b      	mov	r3, r9
 8015750:	f7ea fdcc 	bl	80002ec <__adddf3>
 8015754:	4632      	mov	r2, r6
 8015756:	463b      	mov	r3, r7
 8015758:	f7ea fdc8 	bl	80002ec <__adddf3>
 801575c:	2000      	movs	r0, #0
 801575e:	4632      	mov	r2, r6
 8015760:	463b      	mov	r3, r7
 8015762:	4604      	mov	r4, r0
 8015764:	460d      	mov	r5, r1
 8015766:	f7ea fdbf 	bl	80002e8 <__aeabi_dsub>
 801576a:	4642      	mov	r2, r8
 801576c:	464b      	mov	r3, r9
 801576e:	f7ea fdbb 	bl	80002e8 <__aeabi_dsub>
 8015772:	ec53 2b18 	vmov	r2, r3, d8
 8015776:	f7ea fdb7 	bl	80002e8 <__aeabi_dsub>
 801577a:	4602      	mov	r2, r0
 801577c:	460b      	mov	r3, r1
 801577e:	4650      	mov	r0, sl
 8015780:	4659      	mov	r1, fp
 8015782:	e610      	b.n	80153a6 <__ieee754_pow+0x31e>
 8015784:	2401      	movs	r4, #1
 8015786:	e6a1      	b.n	80154cc <__ieee754_pow+0x444>
 8015788:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80157d8 <__ieee754_pow+0x750>
 801578c:	e617      	b.n	80153be <__ieee754_pow+0x336>
 801578e:	bf00      	nop
 8015790:	4a454eef 	.word	0x4a454eef
 8015794:	3fca7e28 	.word	0x3fca7e28
 8015798:	93c9db65 	.word	0x93c9db65
 801579c:	3fcd864a 	.word	0x3fcd864a
 80157a0:	a91d4101 	.word	0xa91d4101
 80157a4:	3fd17460 	.word	0x3fd17460
 80157a8:	518f264d 	.word	0x518f264d
 80157ac:	3fd55555 	.word	0x3fd55555
 80157b0:	db6fabff 	.word	0xdb6fabff
 80157b4:	3fdb6db6 	.word	0x3fdb6db6
 80157b8:	33333303 	.word	0x33333303
 80157bc:	3fe33333 	.word	0x3fe33333
 80157c0:	e0000000 	.word	0xe0000000
 80157c4:	3feec709 	.word	0x3feec709
 80157c8:	dc3a03fd 	.word	0xdc3a03fd
 80157cc:	3feec709 	.word	0x3feec709
 80157d0:	145b01f5 	.word	0x145b01f5
 80157d4:	be3e2fe0 	.word	0xbe3e2fe0
 80157d8:	00000000 	.word	0x00000000
 80157dc:	3ff00000 	.word	0x3ff00000
 80157e0:	7ff00000 	.word	0x7ff00000
 80157e4:	43400000 	.word	0x43400000
 80157e8:	0003988e 	.word	0x0003988e
 80157ec:	000bb679 	.word	0x000bb679
 80157f0:	080169d0 	.word	0x080169d0
 80157f4:	3ff00000 	.word	0x3ff00000
 80157f8:	40080000 	.word	0x40080000
 80157fc:	080169f0 	.word	0x080169f0
 8015800:	080169e0 	.word	0x080169e0
 8015804:	a3b5      	add	r3, pc, #724	; (adr r3, 8015adc <__ieee754_pow+0xa54>)
 8015806:	e9d3 2300 	ldrd	r2, r3, [r3]
 801580a:	4640      	mov	r0, r8
 801580c:	4649      	mov	r1, r9
 801580e:	f7ea fd6d 	bl	80002ec <__adddf3>
 8015812:	4622      	mov	r2, r4
 8015814:	ec41 0b1a 	vmov	d10, r0, r1
 8015818:	462b      	mov	r3, r5
 801581a:	4630      	mov	r0, r6
 801581c:	4639      	mov	r1, r7
 801581e:	f7ea fd63 	bl	80002e8 <__aeabi_dsub>
 8015822:	4602      	mov	r2, r0
 8015824:	460b      	mov	r3, r1
 8015826:	ec51 0b1a 	vmov	r0, r1, d10
 801582a:	f7eb f9a5 	bl	8000b78 <__aeabi_dcmpgt>
 801582e:	2800      	cmp	r0, #0
 8015830:	f47f ae04 	bne.w	801543c <__ieee754_pow+0x3b4>
 8015834:	4aa4      	ldr	r2, [pc, #656]	; (8015ac8 <__ieee754_pow+0xa40>)
 8015836:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801583a:	4293      	cmp	r3, r2
 801583c:	f340 8108 	ble.w	8015a50 <__ieee754_pow+0x9c8>
 8015840:	151b      	asrs	r3, r3, #20
 8015842:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8015846:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801584a:	fa4a f303 	asr.w	r3, sl, r3
 801584e:	445b      	add	r3, fp
 8015850:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8015854:	4e9d      	ldr	r6, [pc, #628]	; (8015acc <__ieee754_pow+0xa44>)
 8015856:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801585a:	4116      	asrs	r6, r2
 801585c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8015860:	2000      	movs	r0, #0
 8015862:	ea23 0106 	bic.w	r1, r3, r6
 8015866:	f1c2 0214 	rsb	r2, r2, #20
 801586a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801586e:	fa4a fa02 	asr.w	sl, sl, r2
 8015872:	f1bb 0f00 	cmp.w	fp, #0
 8015876:	4602      	mov	r2, r0
 8015878:	460b      	mov	r3, r1
 801587a:	4620      	mov	r0, r4
 801587c:	4629      	mov	r1, r5
 801587e:	bfb8      	it	lt
 8015880:	f1ca 0a00 	rsblt	sl, sl, #0
 8015884:	f7ea fd30 	bl	80002e8 <__aeabi_dsub>
 8015888:	ec41 0b19 	vmov	d9, r0, r1
 801588c:	4642      	mov	r2, r8
 801588e:	464b      	mov	r3, r9
 8015890:	ec51 0b19 	vmov	r0, r1, d9
 8015894:	f7ea fd2a 	bl	80002ec <__adddf3>
 8015898:	a37b      	add	r3, pc, #492	; (adr r3, 8015a88 <__ieee754_pow+0xa00>)
 801589a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801589e:	2000      	movs	r0, #0
 80158a0:	4604      	mov	r4, r0
 80158a2:	460d      	mov	r5, r1
 80158a4:	f7ea fed8 	bl	8000658 <__aeabi_dmul>
 80158a8:	ec53 2b19 	vmov	r2, r3, d9
 80158ac:	4606      	mov	r6, r0
 80158ae:	460f      	mov	r7, r1
 80158b0:	4620      	mov	r0, r4
 80158b2:	4629      	mov	r1, r5
 80158b4:	f7ea fd18 	bl	80002e8 <__aeabi_dsub>
 80158b8:	4602      	mov	r2, r0
 80158ba:	460b      	mov	r3, r1
 80158bc:	4640      	mov	r0, r8
 80158be:	4649      	mov	r1, r9
 80158c0:	f7ea fd12 	bl	80002e8 <__aeabi_dsub>
 80158c4:	a372      	add	r3, pc, #456	; (adr r3, 8015a90 <__ieee754_pow+0xa08>)
 80158c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158ca:	f7ea fec5 	bl	8000658 <__aeabi_dmul>
 80158ce:	a372      	add	r3, pc, #456	; (adr r3, 8015a98 <__ieee754_pow+0xa10>)
 80158d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158d4:	4680      	mov	r8, r0
 80158d6:	4689      	mov	r9, r1
 80158d8:	4620      	mov	r0, r4
 80158da:	4629      	mov	r1, r5
 80158dc:	f7ea febc 	bl	8000658 <__aeabi_dmul>
 80158e0:	4602      	mov	r2, r0
 80158e2:	460b      	mov	r3, r1
 80158e4:	4640      	mov	r0, r8
 80158e6:	4649      	mov	r1, r9
 80158e8:	f7ea fd00 	bl	80002ec <__adddf3>
 80158ec:	4604      	mov	r4, r0
 80158ee:	460d      	mov	r5, r1
 80158f0:	4602      	mov	r2, r0
 80158f2:	460b      	mov	r3, r1
 80158f4:	4630      	mov	r0, r6
 80158f6:	4639      	mov	r1, r7
 80158f8:	f7ea fcf8 	bl	80002ec <__adddf3>
 80158fc:	4632      	mov	r2, r6
 80158fe:	463b      	mov	r3, r7
 8015900:	4680      	mov	r8, r0
 8015902:	4689      	mov	r9, r1
 8015904:	f7ea fcf0 	bl	80002e8 <__aeabi_dsub>
 8015908:	4602      	mov	r2, r0
 801590a:	460b      	mov	r3, r1
 801590c:	4620      	mov	r0, r4
 801590e:	4629      	mov	r1, r5
 8015910:	f7ea fcea 	bl	80002e8 <__aeabi_dsub>
 8015914:	4642      	mov	r2, r8
 8015916:	4606      	mov	r6, r0
 8015918:	460f      	mov	r7, r1
 801591a:	464b      	mov	r3, r9
 801591c:	4640      	mov	r0, r8
 801591e:	4649      	mov	r1, r9
 8015920:	f7ea fe9a 	bl	8000658 <__aeabi_dmul>
 8015924:	a35e      	add	r3, pc, #376	; (adr r3, 8015aa0 <__ieee754_pow+0xa18>)
 8015926:	e9d3 2300 	ldrd	r2, r3, [r3]
 801592a:	4604      	mov	r4, r0
 801592c:	460d      	mov	r5, r1
 801592e:	f7ea fe93 	bl	8000658 <__aeabi_dmul>
 8015932:	a35d      	add	r3, pc, #372	; (adr r3, 8015aa8 <__ieee754_pow+0xa20>)
 8015934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015938:	f7ea fcd6 	bl	80002e8 <__aeabi_dsub>
 801593c:	4622      	mov	r2, r4
 801593e:	462b      	mov	r3, r5
 8015940:	f7ea fe8a 	bl	8000658 <__aeabi_dmul>
 8015944:	a35a      	add	r3, pc, #360	; (adr r3, 8015ab0 <__ieee754_pow+0xa28>)
 8015946:	e9d3 2300 	ldrd	r2, r3, [r3]
 801594a:	f7ea fccf 	bl	80002ec <__adddf3>
 801594e:	4622      	mov	r2, r4
 8015950:	462b      	mov	r3, r5
 8015952:	f7ea fe81 	bl	8000658 <__aeabi_dmul>
 8015956:	a358      	add	r3, pc, #352	; (adr r3, 8015ab8 <__ieee754_pow+0xa30>)
 8015958:	e9d3 2300 	ldrd	r2, r3, [r3]
 801595c:	f7ea fcc4 	bl	80002e8 <__aeabi_dsub>
 8015960:	4622      	mov	r2, r4
 8015962:	462b      	mov	r3, r5
 8015964:	f7ea fe78 	bl	8000658 <__aeabi_dmul>
 8015968:	a355      	add	r3, pc, #340	; (adr r3, 8015ac0 <__ieee754_pow+0xa38>)
 801596a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801596e:	f7ea fcbd 	bl	80002ec <__adddf3>
 8015972:	4622      	mov	r2, r4
 8015974:	462b      	mov	r3, r5
 8015976:	f7ea fe6f 	bl	8000658 <__aeabi_dmul>
 801597a:	4602      	mov	r2, r0
 801597c:	460b      	mov	r3, r1
 801597e:	4640      	mov	r0, r8
 8015980:	4649      	mov	r1, r9
 8015982:	f7ea fcb1 	bl	80002e8 <__aeabi_dsub>
 8015986:	4604      	mov	r4, r0
 8015988:	460d      	mov	r5, r1
 801598a:	4602      	mov	r2, r0
 801598c:	460b      	mov	r3, r1
 801598e:	4640      	mov	r0, r8
 8015990:	4649      	mov	r1, r9
 8015992:	f7ea fe61 	bl	8000658 <__aeabi_dmul>
 8015996:	2200      	movs	r2, #0
 8015998:	ec41 0b19 	vmov	d9, r0, r1
 801599c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80159a0:	4620      	mov	r0, r4
 80159a2:	4629      	mov	r1, r5
 80159a4:	f7ea fca0 	bl	80002e8 <__aeabi_dsub>
 80159a8:	4602      	mov	r2, r0
 80159aa:	460b      	mov	r3, r1
 80159ac:	ec51 0b19 	vmov	r0, r1, d9
 80159b0:	f7ea ff7c 	bl	80008ac <__aeabi_ddiv>
 80159b4:	4632      	mov	r2, r6
 80159b6:	4604      	mov	r4, r0
 80159b8:	460d      	mov	r5, r1
 80159ba:	463b      	mov	r3, r7
 80159bc:	4640      	mov	r0, r8
 80159be:	4649      	mov	r1, r9
 80159c0:	f7ea fe4a 	bl	8000658 <__aeabi_dmul>
 80159c4:	4632      	mov	r2, r6
 80159c6:	463b      	mov	r3, r7
 80159c8:	f7ea fc90 	bl	80002ec <__adddf3>
 80159cc:	4602      	mov	r2, r0
 80159ce:	460b      	mov	r3, r1
 80159d0:	4620      	mov	r0, r4
 80159d2:	4629      	mov	r1, r5
 80159d4:	f7ea fc88 	bl	80002e8 <__aeabi_dsub>
 80159d8:	4642      	mov	r2, r8
 80159da:	464b      	mov	r3, r9
 80159dc:	f7ea fc84 	bl	80002e8 <__aeabi_dsub>
 80159e0:	460b      	mov	r3, r1
 80159e2:	4602      	mov	r2, r0
 80159e4:	493a      	ldr	r1, [pc, #232]	; (8015ad0 <__ieee754_pow+0xa48>)
 80159e6:	2000      	movs	r0, #0
 80159e8:	f7ea fc7e 	bl	80002e8 <__aeabi_dsub>
 80159ec:	ec41 0b10 	vmov	d0, r0, r1
 80159f0:	ee10 3a90 	vmov	r3, s1
 80159f4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80159f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80159fc:	da2b      	bge.n	8015a56 <__ieee754_pow+0x9ce>
 80159fe:	4650      	mov	r0, sl
 8015a00:	f000 f966 	bl	8015cd0 <scalbn>
 8015a04:	ec51 0b10 	vmov	r0, r1, d0
 8015a08:	ec53 2b18 	vmov	r2, r3, d8
 8015a0c:	f7ff bbed 	b.w	80151ea <__ieee754_pow+0x162>
 8015a10:	4b30      	ldr	r3, [pc, #192]	; (8015ad4 <__ieee754_pow+0xa4c>)
 8015a12:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8015a16:	429e      	cmp	r6, r3
 8015a18:	f77f af0c 	ble.w	8015834 <__ieee754_pow+0x7ac>
 8015a1c:	4b2e      	ldr	r3, [pc, #184]	; (8015ad8 <__ieee754_pow+0xa50>)
 8015a1e:	440b      	add	r3, r1
 8015a20:	4303      	orrs	r3, r0
 8015a22:	d009      	beq.n	8015a38 <__ieee754_pow+0x9b0>
 8015a24:	ec51 0b18 	vmov	r0, r1, d8
 8015a28:	2200      	movs	r2, #0
 8015a2a:	2300      	movs	r3, #0
 8015a2c:	f7eb f886 	bl	8000b3c <__aeabi_dcmplt>
 8015a30:	3800      	subs	r0, #0
 8015a32:	bf18      	it	ne
 8015a34:	2001      	movne	r0, #1
 8015a36:	e447      	b.n	80152c8 <__ieee754_pow+0x240>
 8015a38:	4622      	mov	r2, r4
 8015a3a:	462b      	mov	r3, r5
 8015a3c:	f7ea fc54 	bl	80002e8 <__aeabi_dsub>
 8015a40:	4642      	mov	r2, r8
 8015a42:	464b      	mov	r3, r9
 8015a44:	f7eb f88e 	bl	8000b64 <__aeabi_dcmpge>
 8015a48:	2800      	cmp	r0, #0
 8015a4a:	f43f aef3 	beq.w	8015834 <__ieee754_pow+0x7ac>
 8015a4e:	e7e9      	b.n	8015a24 <__ieee754_pow+0x99c>
 8015a50:	f04f 0a00 	mov.w	sl, #0
 8015a54:	e71a      	b.n	801588c <__ieee754_pow+0x804>
 8015a56:	ec51 0b10 	vmov	r0, r1, d0
 8015a5a:	4619      	mov	r1, r3
 8015a5c:	e7d4      	b.n	8015a08 <__ieee754_pow+0x980>
 8015a5e:	491c      	ldr	r1, [pc, #112]	; (8015ad0 <__ieee754_pow+0xa48>)
 8015a60:	2000      	movs	r0, #0
 8015a62:	f7ff bb30 	b.w	80150c6 <__ieee754_pow+0x3e>
 8015a66:	2000      	movs	r0, #0
 8015a68:	2100      	movs	r1, #0
 8015a6a:	f7ff bb2c 	b.w	80150c6 <__ieee754_pow+0x3e>
 8015a6e:	4630      	mov	r0, r6
 8015a70:	4639      	mov	r1, r7
 8015a72:	f7ff bb28 	b.w	80150c6 <__ieee754_pow+0x3e>
 8015a76:	9204      	str	r2, [sp, #16]
 8015a78:	f7ff bb7a 	b.w	8015170 <__ieee754_pow+0xe8>
 8015a7c:	2300      	movs	r3, #0
 8015a7e:	f7ff bb64 	b.w	801514a <__ieee754_pow+0xc2>
 8015a82:	bf00      	nop
 8015a84:	f3af 8000 	nop.w
 8015a88:	00000000 	.word	0x00000000
 8015a8c:	3fe62e43 	.word	0x3fe62e43
 8015a90:	fefa39ef 	.word	0xfefa39ef
 8015a94:	3fe62e42 	.word	0x3fe62e42
 8015a98:	0ca86c39 	.word	0x0ca86c39
 8015a9c:	be205c61 	.word	0xbe205c61
 8015aa0:	72bea4d0 	.word	0x72bea4d0
 8015aa4:	3e663769 	.word	0x3e663769
 8015aa8:	c5d26bf1 	.word	0xc5d26bf1
 8015aac:	3ebbbd41 	.word	0x3ebbbd41
 8015ab0:	af25de2c 	.word	0xaf25de2c
 8015ab4:	3f11566a 	.word	0x3f11566a
 8015ab8:	16bebd93 	.word	0x16bebd93
 8015abc:	3f66c16c 	.word	0x3f66c16c
 8015ac0:	5555553e 	.word	0x5555553e
 8015ac4:	3fc55555 	.word	0x3fc55555
 8015ac8:	3fe00000 	.word	0x3fe00000
 8015acc:	000fffff 	.word	0x000fffff
 8015ad0:	3ff00000 	.word	0x3ff00000
 8015ad4:	4090cbff 	.word	0x4090cbff
 8015ad8:	3f6f3400 	.word	0x3f6f3400
 8015adc:	652b82fe 	.word	0x652b82fe
 8015ae0:	3c971547 	.word	0x3c971547

08015ae4 <__ieee754_sqrt>:
 8015ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ae8:	ec55 4b10 	vmov	r4, r5, d0
 8015aec:	4e55      	ldr	r6, [pc, #340]	; (8015c44 <__ieee754_sqrt+0x160>)
 8015aee:	43ae      	bics	r6, r5
 8015af0:	ee10 0a10 	vmov	r0, s0
 8015af4:	ee10 3a10 	vmov	r3, s0
 8015af8:	462a      	mov	r2, r5
 8015afa:	4629      	mov	r1, r5
 8015afc:	d110      	bne.n	8015b20 <__ieee754_sqrt+0x3c>
 8015afe:	ee10 2a10 	vmov	r2, s0
 8015b02:	462b      	mov	r3, r5
 8015b04:	f7ea fda8 	bl	8000658 <__aeabi_dmul>
 8015b08:	4602      	mov	r2, r0
 8015b0a:	460b      	mov	r3, r1
 8015b0c:	4620      	mov	r0, r4
 8015b0e:	4629      	mov	r1, r5
 8015b10:	f7ea fbec 	bl	80002ec <__adddf3>
 8015b14:	4604      	mov	r4, r0
 8015b16:	460d      	mov	r5, r1
 8015b18:	ec45 4b10 	vmov	d0, r4, r5
 8015b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b20:	2d00      	cmp	r5, #0
 8015b22:	dc10      	bgt.n	8015b46 <__ieee754_sqrt+0x62>
 8015b24:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8015b28:	4330      	orrs	r0, r6
 8015b2a:	d0f5      	beq.n	8015b18 <__ieee754_sqrt+0x34>
 8015b2c:	b15d      	cbz	r5, 8015b46 <__ieee754_sqrt+0x62>
 8015b2e:	ee10 2a10 	vmov	r2, s0
 8015b32:	462b      	mov	r3, r5
 8015b34:	ee10 0a10 	vmov	r0, s0
 8015b38:	f7ea fbd6 	bl	80002e8 <__aeabi_dsub>
 8015b3c:	4602      	mov	r2, r0
 8015b3e:	460b      	mov	r3, r1
 8015b40:	f7ea feb4 	bl	80008ac <__aeabi_ddiv>
 8015b44:	e7e6      	b.n	8015b14 <__ieee754_sqrt+0x30>
 8015b46:	1512      	asrs	r2, r2, #20
 8015b48:	d074      	beq.n	8015c34 <__ieee754_sqrt+0x150>
 8015b4a:	07d4      	lsls	r4, r2, #31
 8015b4c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8015b50:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8015b54:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8015b58:	bf5e      	ittt	pl
 8015b5a:	0fda      	lsrpl	r2, r3, #31
 8015b5c:	005b      	lslpl	r3, r3, #1
 8015b5e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8015b62:	2400      	movs	r4, #0
 8015b64:	0fda      	lsrs	r2, r3, #31
 8015b66:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8015b6a:	107f      	asrs	r7, r7, #1
 8015b6c:	005b      	lsls	r3, r3, #1
 8015b6e:	2516      	movs	r5, #22
 8015b70:	4620      	mov	r0, r4
 8015b72:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8015b76:	1886      	adds	r6, r0, r2
 8015b78:	428e      	cmp	r6, r1
 8015b7a:	bfde      	ittt	le
 8015b7c:	1b89      	suble	r1, r1, r6
 8015b7e:	18b0      	addle	r0, r6, r2
 8015b80:	18a4      	addle	r4, r4, r2
 8015b82:	0049      	lsls	r1, r1, #1
 8015b84:	3d01      	subs	r5, #1
 8015b86:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8015b8a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8015b8e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8015b92:	d1f0      	bne.n	8015b76 <__ieee754_sqrt+0x92>
 8015b94:	462a      	mov	r2, r5
 8015b96:	f04f 0e20 	mov.w	lr, #32
 8015b9a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8015b9e:	4281      	cmp	r1, r0
 8015ba0:	eb06 0c05 	add.w	ip, r6, r5
 8015ba4:	dc02      	bgt.n	8015bac <__ieee754_sqrt+0xc8>
 8015ba6:	d113      	bne.n	8015bd0 <__ieee754_sqrt+0xec>
 8015ba8:	459c      	cmp	ip, r3
 8015baa:	d811      	bhi.n	8015bd0 <__ieee754_sqrt+0xec>
 8015bac:	f1bc 0f00 	cmp.w	ip, #0
 8015bb0:	eb0c 0506 	add.w	r5, ip, r6
 8015bb4:	da43      	bge.n	8015c3e <__ieee754_sqrt+0x15a>
 8015bb6:	2d00      	cmp	r5, #0
 8015bb8:	db41      	blt.n	8015c3e <__ieee754_sqrt+0x15a>
 8015bba:	f100 0801 	add.w	r8, r0, #1
 8015bbe:	1a09      	subs	r1, r1, r0
 8015bc0:	459c      	cmp	ip, r3
 8015bc2:	bf88      	it	hi
 8015bc4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8015bc8:	eba3 030c 	sub.w	r3, r3, ip
 8015bcc:	4432      	add	r2, r6
 8015bce:	4640      	mov	r0, r8
 8015bd0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8015bd4:	f1be 0e01 	subs.w	lr, lr, #1
 8015bd8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8015bdc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8015be0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8015be4:	d1db      	bne.n	8015b9e <__ieee754_sqrt+0xba>
 8015be6:	430b      	orrs	r3, r1
 8015be8:	d006      	beq.n	8015bf8 <__ieee754_sqrt+0x114>
 8015bea:	1c50      	adds	r0, r2, #1
 8015bec:	bf13      	iteet	ne
 8015bee:	3201      	addne	r2, #1
 8015bf0:	3401      	addeq	r4, #1
 8015bf2:	4672      	moveq	r2, lr
 8015bf4:	f022 0201 	bicne.w	r2, r2, #1
 8015bf8:	1063      	asrs	r3, r4, #1
 8015bfa:	0852      	lsrs	r2, r2, #1
 8015bfc:	07e1      	lsls	r1, r4, #31
 8015bfe:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8015c02:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8015c06:	bf48      	it	mi
 8015c08:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8015c0c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8015c10:	4614      	mov	r4, r2
 8015c12:	e781      	b.n	8015b18 <__ieee754_sqrt+0x34>
 8015c14:	0ad9      	lsrs	r1, r3, #11
 8015c16:	3815      	subs	r0, #21
 8015c18:	055b      	lsls	r3, r3, #21
 8015c1a:	2900      	cmp	r1, #0
 8015c1c:	d0fa      	beq.n	8015c14 <__ieee754_sqrt+0x130>
 8015c1e:	02cd      	lsls	r5, r1, #11
 8015c20:	d50a      	bpl.n	8015c38 <__ieee754_sqrt+0x154>
 8015c22:	f1c2 0420 	rsb	r4, r2, #32
 8015c26:	fa23 f404 	lsr.w	r4, r3, r4
 8015c2a:	1e55      	subs	r5, r2, #1
 8015c2c:	4093      	lsls	r3, r2
 8015c2e:	4321      	orrs	r1, r4
 8015c30:	1b42      	subs	r2, r0, r5
 8015c32:	e78a      	b.n	8015b4a <__ieee754_sqrt+0x66>
 8015c34:	4610      	mov	r0, r2
 8015c36:	e7f0      	b.n	8015c1a <__ieee754_sqrt+0x136>
 8015c38:	0049      	lsls	r1, r1, #1
 8015c3a:	3201      	adds	r2, #1
 8015c3c:	e7ef      	b.n	8015c1e <__ieee754_sqrt+0x13a>
 8015c3e:	4680      	mov	r8, r0
 8015c40:	e7bd      	b.n	8015bbe <__ieee754_sqrt+0xda>
 8015c42:	bf00      	nop
 8015c44:	7ff00000 	.word	0x7ff00000

08015c48 <with_errno>:
 8015c48:	b570      	push	{r4, r5, r6, lr}
 8015c4a:	4604      	mov	r4, r0
 8015c4c:	460d      	mov	r5, r1
 8015c4e:	4616      	mov	r6, r2
 8015c50:	f7fa f83e 	bl	800fcd0 <__errno>
 8015c54:	4629      	mov	r1, r5
 8015c56:	6006      	str	r6, [r0, #0]
 8015c58:	4620      	mov	r0, r4
 8015c5a:	bd70      	pop	{r4, r5, r6, pc}

08015c5c <xflow>:
 8015c5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015c5e:	4614      	mov	r4, r2
 8015c60:	461d      	mov	r5, r3
 8015c62:	b108      	cbz	r0, 8015c68 <xflow+0xc>
 8015c64:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8015c68:	e9cd 2300 	strd	r2, r3, [sp]
 8015c6c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015c70:	4620      	mov	r0, r4
 8015c72:	4629      	mov	r1, r5
 8015c74:	f7ea fcf0 	bl	8000658 <__aeabi_dmul>
 8015c78:	2222      	movs	r2, #34	; 0x22
 8015c7a:	b003      	add	sp, #12
 8015c7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015c80:	f7ff bfe2 	b.w	8015c48 <with_errno>

08015c84 <__math_uflow>:
 8015c84:	b508      	push	{r3, lr}
 8015c86:	2200      	movs	r2, #0
 8015c88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8015c8c:	f7ff ffe6 	bl	8015c5c <xflow>
 8015c90:	ec41 0b10 	vmov	d0, r0, r1
 8015c94:	bd08      	pop	{r3, pc}

08015c96 <__math_oflow>:
 8015c96:	b508      	push	{r3, lr}
 8015c98:	2200      	movs	r2, #0
 8015c9a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8015c9e:	f7ff ffdd 	bl	8015c5c <xflow>
 8015ca2:	ec41 0b10 	vmov	d0, r0, r1
 8015ca6:	bd08      	pop	{r3, pc}

08015ca8 <fabs>:
 8015ca8:	ec51 0b10 	vmov	r0, r1, d0
 8015cac:	ee10 2a10 	vmov	r2, s0
 8015cb0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015cb4:	ec43 2b10 	vmov	d0, r2, r3
 8015cb8:	4770      	bx	lr

08015cba <finite>:
 8015cba:	b082      	sub	sp, #8
 8015cbc:	ed8d 0b00 	vstr	d0, [sp]
 8015cc0:	9801      	ldr	r0, [sp, #4]
 8015cc2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8015cc6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8015cca:	0fc0      	lsrs	r0, r0, #31
 8015ccc:	b002      	add	sp, #8
 8015cce:	4770      	bx	lr

08015cd0 <scalbn>:
 8015cd0:	b570      	push	{r4, r5, r6, lr}
 8015cd2:	ec55 4b10 	vmov	r4, r5, d0
 8015cd6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8015cda:	4606      	mov	r6, r0
 8015cdc:	462b      	mov	r3, r5
 8015cde:	b99a      	cbnz	r2, 8015d08 <scalbn+0x38>
 8015ce0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8015ce4:	4323      	orrs	r3, r4
 8015ce6:	d036      	beq.n	8015d56 <scalbn+0x86>
 8015ce8:	4b39      	ldr	r3, [pc, #228]	; (8015dd0 <scalbn+0x100>)
 8015cea:	4629      	mov	r1, r5
 8015cec:	ee10 0a10 	vmov	r0, s0
 8015cf0:	2200      	movs	r2, #0
 8015cf2:	f7ea fcb1 	bl	8000658 <__aeabi_dmul>
 8015cf6:	4b37      	ldr	r3, [pc, #220]	; (8015dd4 <scalbn+0x104>)
 8015cf8:	429e      	cmp	r6, r3
 8015cfa:	4604      	mov	r4, r0
 8015cfc:	460d      	mov	r5, r1
 8015cfe:	da10      	bge.n	8015d22 <scalbn+0x52>
 8015d00:	a32b      	add	r3, pc, #172	; (adr r3, 8015db0 <scalbn+0xe0>)
 8015d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d06:	e03a      	b.n	8015d7e <scalbn+0xae>
 8015d08:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8015d0c:	428a      	cmp	r2, r1
 8015d0e:	d10c      	bne.n	8015d2a <scalbn+0x5a>
 8015d10:	ee10 2a10 	vmov	r2, s0
 8015d14:	4620      	mov	r0, r4
 8015d16:	4629      	mov	r1, r5
 8015d18:	f7ea fae8 	bl	80002ec <__adddf3>
 8015d1c:	4604      	mov	r4, r0
 8015d1e:	460d      	mov	r5, r1
 8015d20:	e019      	b.n	8015d56 <scalbn+0x86>
 8015d22:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8015d26:	460b      	mov	r3, r1
 8015d28:	3a36      	subs	r2, #54	; 0x36
 8015d2a:	4432      	add	r2, r6
 8015d2c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8015d30:	428a      	cmp	r2, r1
 8015d32:	dd08      	ble.n	8015d46 <scalbn+0x76>
 8015d34:	2d00      	cmp	r5, #0
 8015d36:	a120      	add	r1, pc, #128	; (adr r1, 8015db8 <scalbn+0xe8>)
 8015d38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015d3c:	da1c      	bge.n	8015d78 <scalbn+0xa8>
 8015d3e:	a120      	add	r1, pc, #128	; (adr r1, 8015dc0 <scalbn+0xf0>)
 8015d40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015d44:	e018      	b.n	8015d78 <scalbn+0xa8>
 8015d46:	2a00      	cmp	r2, #0
 8015d48:	dd08      	ble.n	8015d5c <scalbn+0x8c>
 8015d4a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015d4e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015d52:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015d56:	ec45 4b10 	vmov	d0, r4, r5
 8015d5a:	bd70      	pop	{r4, r5, r6, pc}
 8015d5c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8015d60:	da19      	bge.n	8015d96 <scalbn+0xc6>
 8015d62:	f24c 3350 	movw	r3, #50000	; 0xc350
 8015d66:	429e      	cmp	r6, r3
 8015d68:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8015d6c:	dd0a      	ble.n	8015d84 <scalbn+0xb4>
 8015d6e:	a112      	add	r1, pc, #72	; (adr r1, 8015db8 <scalbn+0xe8>)
 8015d70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015d74:	2b00      	cmp	r3, #0
 8015d76:	d1e2      	bne.n	8015d3e <scalbn+0x6e>
 8015d78:	a30f      	add	r3, pc, #60	; (adr r3, 8015db8 <scalbn+0xe8>)
 8015d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d7e:	f7ea fc6b 	bl	8000658 <__aeabi_dmul>
 8015d82:	e7cb      	b.n	8015d1c <scalbn+0x4c>
 8015d84:	a10a      	add	r1, pc, #40	; (adr r1, 8015db0 <scalbn+0xe0>)
 8015d86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015d8a:	2b00      	cmp	r3, #0
 8015d8c:	d0b8      	beq.n	8015d00 <scalbn+0x30>
 8015d8e:	a10e      	add	r1, pc, #56	; (adr r1, 8015dc8 <scalbn+0xf8>)
 8015d90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015d94:	e7b4      	b.n	8015d00 <scalbn+0x30>
 8015d96:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015d9a:	3236      	adds	r2, #54	; 0x36
 8015d9c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015da0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8015da4:	4620      	mov	r0, r4
 8015da6:	4b0c      	ldr	r3, [pc, #48]	; (8015dd8 <scalbn+0x108>)
 8015da8:	2200      	movs	r2, #0
 8015daa:	e7e8      	b.n	8015d7e <scalbn+0xae>
 8015dac:	f3af 8000 	nop.w
 8015db0:	c2f8f359 	.word	0xc2f8f359
 8015db4:	01a56e1f 	.word	0x01a56e1f
 8015db8:	8800759c 	.word	0x8800759c
 8015dbc:	7e37e43c 	.word	0x7e37e43c
 8015dc0:	8800759c 	.word	0x8800759c
 8015dc4:	fe37e43c 	.word	0xfe37e43c
 8015dc8:	c2f8f359 	.word	0xc2f8f359
 8015dcc:	81a56e1f 	.word	0x81a56e1f
 8015dd0:	43500000 	.word	0x43500000
 8015dd4:	ffff3cb0 	.word	0xffff3cb0
 8015dd8:	3c900000 	.word	0x3c900000

08015ddc <_init>:
 8015ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015dde:	bf00      	nop
 8015de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015de2:	bc08      	pop	{r3}
 8015de4:	469e      	mov	lr, r3
 8015de6:	4770      	bx	lr

08015de8 <_fini>:
 8015de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015dea:	bf00      	nop
 8015dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015dee:	bc08      	pop	{r3}
 8015df0:	469e      	mov	lr, r3
 8015df2:	4770      	bx	lr
