
TACTS_testbed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d894  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000724  0800da68  0800da68  0001da68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e18c  0800e18c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e18c  0800e18c  0001e18c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e194  0800e194  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e194  0800e194  0001e194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e198  0800e198  0001e198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800e19c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  200001e0  0800e37c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000454  0800e37c  00020454  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017b75  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003093  00000000  00000000  00037d85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f0  00000000  00000000  0003ae18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001098  00000000  00000000  0003c008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000286ff  00000000  00000000  0003d0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c027  00000000  00000000  0006579f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6b33  00000000  00000000  000817c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001782f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006220  00000000  00000000  0017834c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800da4c 	.word	0x0800da4c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800da4c 	.word	0x0800da4c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b9aa 	b.w	8001054 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	468e      	mov	lr, r1
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d14d      	bne.n	8000e2e <__udivmoddi4+0xaa>
 8000d92:	428a      	cmp	r2, r1
 8000d94:	4694      	mov	ip, r2
 8000d96:	d969      	bls.n	8000e6c <__udivmoddi4+0xe8>
 8000d98:	fab2 f282 	clz	r2, r2
 8000d9c:	b152      	cbz	r2, 8000db4 <__udivmoddi4+0x30>
 8000d9e:	fa01 f302 	lsl.w	r3, r1, r2
 8000da2:	f1c2 0120 	rsb	r1, r2, #32
 8000da6:	fa20 f101 	lsr.w	r1, r0, r1
 8000daa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dae:	ea41 0e03 	orr.w	lr, r1, r3
 8000db2:	4094      	lsls	r4, r2
 8000db4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db8:	0c21      	lsrs	r1, r4, #16
 8000dba:	fbbe f6f8 	udiv	r6, lr, r8
 8000dbe:	fa1f f78c 	uxth.w	r7, ip
 8000dc2:	fb08 e316 	mls	r3, r8, r6, lr
 8000dc6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dca:	fb06 f107 	mul.w	r1, r6, r7
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x64>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dda:	f080 811f 	bcs.w	800101c <__udivmoddi4+0x298>
 8000dde:	4299      	cmp	r1, r3
 8000de0:	f240 811c 	bls.w	800101c <__udivmoddi4+0x298>
 8000de4:	3e02      	subs	r6, #2
 8000de6:	4463      	add	r3, ip
 8000de8:	1a5b      	subs	r3, r3, r1
 8000dea:	b2a4      	uxth	r4, r4
 8000dec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000df0:	fb08 3310 	mls	r3, r8, r0, r3
 8000df4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000df8:	fb00 f707 	mul.w	r7, r0, r7
 8000dfc:	42a7      	cmp	r7, r4
 8000dfe:	d90a      	bls.n	8000e16 <__udivmoddi4+0x92>
 8000e00:	eb1c 0404 	adds.w	r4, ip, r4
 8000e04:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e08:	f080 810a 	bcs.w	8001020 <__udivmoddi4+0x29c>
 8000e0c:	42a7      	cmp	r7, r4
 8000e0e:	f240 8107 	bls.w	8001020 <__udivmoddi4+0x29c>
 8000e12:	4464      	add	r4, ip
 8000e14:	3802      	subs	r0, #2
 8000e16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e1a:	1be4      	subs	r4, r4, r7
 8000e1c:	2600      	movs	r6, #0
 8000e1e:	b11d      	cbz	r5, 8000e28 <__udivmoddi4+0xa4>
 8000e20:	40d4      	lsrs	r4, r2
 8000e22:	2300      	movs	r3, #0
 8000e24:	e9c5 4300 	strd	r4, r3, [r5]
 8000e28:	4631      	mov	r1, r6
 8000e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d909      	bls.n	8000e46 <__udivmoddi4+0xc2>
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	f000 80ef 	beq.w	8001016 <__udivmoddi4+0x292>
 8000e38:	2600      	movs	r6, #0
 8000e3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e3e:	4630      	mov	r0, r6
 8000e40:	4631      	mov	r1, r6
 8000e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e46:	fab3 f683 	clz	r6, r3
 8000e4a:	2e00      	cmp	r6, #0
 8000e4c:	d14a      	bne.n	8000ee4 <__udivmoddi4+0x160>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d302      	bcc.n	8000e58 <__udivmoddi4+0xd4>
 8000e52:	4282      	cmp	r2, r0
 8000e54:	f200 80f9 	bhi.w	800104a <__udivmoddi4+0x2c6>
 8000e58:	1a84      	subs	r4, r0, r2
 8000e5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e5e:	2001      	movs	r0, #1
 8000e60:	469e      	mov	lr, r3
 8000e62:	2d00      	cmp	r5, #0
 8000e64:	d0e0      	beq.n	8000e28 <__udivmoddi4+0xa4>
 8000e66:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e6a:	e7dd      	b.n	8000e28 <__udivmoddi4+0xa4>
 8000e6c:	b902      	cbnz	r2, 8000e70 <__udivmoddi4+0xec>
 8000e6e:	deff      	udf	#255	; 0xff
 8000e70:	fab2 f282 	clz	r2, r2
 8000e74:	2a00      	cmp	r2, #0
 8000e76:	f040 8092 	bne.w	8000f9e <__udivmoddi4+0x21a>
 8000e7a:	eba1 010c 	sub.w	r1, r1, ip
 8000e7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e82:	fa1f fe8c 	uxth.w	lr, ip
 8000e86:	2601      	movs	r6, #1
 8000e88:	0c20      	lsrs	r0, r4, #16
 8000e8a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e8e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e92:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e96:	fb0e f003 	mul.w	r0, lr, r3
 8000e9a:	4288      	cmp	r0, r1
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0x12c>
 8000e9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ea6:	d202      	bcs.n	8000eae <__udivmoddi4+0x12a>
 8000ea8:	4288      	cmp	r0, r1
 8000eaa:	f200 80cb 	bhi.w	8001044 <__udivmoddi4+0x2c0>
 8000eae:	4643      	mov	r3, r8
 8000eb0:	1a09      	subs	r1, r1, r0
 8000eb2:	b2a4      	uxth	r4, r4
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1110 	mls	r1, r7, r0, r1
 8000ebc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ec0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ec4:	45a6      	cmp	lr, r4
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x156>
 8000ec8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ecc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ed0:	d202      	bcs.n	8000ed8 <__udivmoddi4+0x154>
 8000ed2:	45a6      	cmp	lr, r4
 8000ed4:	f200 80bb 	bhi.w	800104e <__udivmoddi4+0x2ca>
 8000ed8:	4608      	mov	r0, r1
 8000eda:	eba4 040e 	sub.w	r4, r4, lr
 8000ede:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ee2:	e79c      	b.n	8000e1e <__udivmoddi4+0x9a>
 8000ee4:	f1c6 0720 	rsb	r7, r6, #32
 8000ee8:	40b3      	lsls	r3, r6
 8000eea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ef2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ef6:	fa01 f306 	lsl.w	r3, r1, r6
 8000efa:	431c      	orrs	r4, r3
 8000efc:	40f9      	lsrs	r1, r7
 8000efe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f02:	fa00 f306 	lsl.w	r3, r0, r6
 8000f06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f0a:	0c20      	lsrs	r0, r4, #16
 8000f0c:	fa1f fe8c 	uxth.w	lr, ip
 8000f10:	fb09 1118 	mls	r1, r9, r8, r1
 8000f14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f18:	fb08 f00e 	mul.w	r0, r8, lr
 8000f1c:	4288      	cmp	r0, r1
 8000f1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f22:	d90b      	bls.n	8000f3c <__udivmoddi4+0x1b8>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f2c:	f080 8088 	bcs.w	8001040 <__udivmoddi4+0x2bc>
 8000f30:	4288      	cmp	r0, r1
 8000f32:	f240 8085 	bls.w	8001040 <__udivmoddi4+0x2bc>
 8000f36:	f1a8 0802 	sub.w	r8, r8, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	1a09      	subs	r1, r1, r0
 8000f3e:	b2a4      	uxth	r4, r4
 8000f40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f44:	fb09 1110 	mls	r1, r9, r0, r1
 8000f48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f50:	458e      	cmp	lr, r1
 8000f52:	d908      	bls.n	8000f66 <__udivmoddi4+0x1e2>
 8000f54:	eb1c 0101 	adds.w	r1, ip, r1
 8000f58:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f5c:	d26c      	bcs.n	8001038 <__udivmoddi4+0x2b4>
 8000f5e:	458e      	cmp	lr, r1
 8000f60:	d96a      	bls.n	8001038 <__udivmoddi4+0x2b4>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4461      	add	r1, ip
 8000f66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f6e:	eba1 010e 	sub.w	r1, r1, lr
 8000f72:	42a1      	cmp	r1, r4
 8000f74:	46c8      	mov	r8, r9
 8000f76:	46a6      	mov	lr, r4
 8000f78:	d356      	bcc.n	8001028 <__udivmoddi4+0x2a4>
 8000f7a:	d053      	beq.n	8001024 <__udivmoddi4+0x2a0>
 8000f7c:	b15d      	cbz	r5, 8000f96 <__udivmoddi4+0x212>
 8000f7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f82:	eb61 010e 	sbc.w	r1, r1, lr
 8000f86:	fa01 f707 	lsl.w	r7, r1, r7
 8000f8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f8e:	40f1      	lsrs	r1, r6
 8000f90:	431f      	orrs	r7, r3
 8000f92:	e9c5 7100 	strd	r7, r1, [r5]
 8000f96:	2600      	movs	r6, #0
 8000f98:	4631      	mov	r1, r6
 8000f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f9e:	f1c2 0320 	rsb	r3, r2, #32
 8000fa2:	40d8      	lsrs	r0, r3
 8000fa4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fa8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fac:	4091      	lsls	r1, r2
 8000fae:	4301      	orrs	r1, r0
 8000fb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fb4:	fa1f fe8c 	uxth.w	lr, ip
 8000fb8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fbc:	fb07 3610 	mls	r6, r7, r0, r3
 8000fc0:	0c0b      	lsrs	r3, r1, #16
 8000fc2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fc6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fca:	429e      	cmp	r6, r3
 8000fcc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fd0:	d908      	bls.n	8000fe4 <__udivmoddi4+0x260>
 8000fd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fda:	d22f      	bcs.n	800103c <__udivmoddi4+0x2b8>
 8000fdc:	429e      	cmp	r6, r3
 8000fde:	d92d      	bls.n	800103c <__udivmoddi4+0x2b8>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	4463      	add	r3, ip
 8000fe4:	1b9b      	subs	r3, r3, r6
 8000fe6:	b289      	uxth	r1, r1
 8000fe8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fec:	fb07 3316 	mls	r3, r7, r6, r3
 8000ff0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ff4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ff8:	428b      	cmp	r3, r1
 8000ffa:	d908      	bls.n	800100e <__udivmoddi4+0x28a>
 8000ffc:	eb1c 0101 	adds.w	r1, ip, r1
 8001000:	f106 38ff 	add.w	r8, r6, #4294967295
 8001004:	d216      	bcs.n	8001034 <__udivmoddi4+0x2b0>
 8001006:	428b      	cmp	r3, r1
 8001008:	d914      	bls.n	8001034 <__udivmoddi4+0x2b0>
 800100a:	3e02      	subs	r6, #2
 800100c:	4461      	add	r1, ip
 800100e:	1ac9      	subs	r1, r1, r3
 8001010:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001014:	e738      	b.n	8000e88 <__udivmoddi4+0x104>
 8001016:	462e      	mov	r6, r5
 8001018:	4628      	mov	r0, r5
 800101a:	e705      	b.n	8000e28 <__udivmoddi4+0xa4>
 800101c:	4606      	mov	r6, r0
 800101e:	e6e3      	b.n	8000de8 <__udivmoddi4+0x64>
 8001020:	4618      	mov	r0, r3
 8001022:	e6f8      	b.n	8000e16 <__udivmoddi4+0x92>
 8001024:	454b      	cmp	r3, r9
 8001026:	d2a9      	bcs.n	8000f7c <__udivmoddi4+0x1f8>
 8001028:	ebb9 0802 	subs.w	r8, r9, r2
 800102c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001030:	3801      	subs	r0, #1
 8001032:	e7a3      	b.n	8000f7c <__udivmoddi4+0x1f8>
 8001034:	4646      	mov	r6, r8
 8001036:	e7ea      	b.n	800100e <__udivmoddi4+0x28a>
 8001038:	4620      	mov	r0, r4
 800103a:	e794      	b.n	8000f66 <__udivmoddi4+0x1e2>
 800103c:	4640      	mov	r0, r8
 800103e:	e7d1      	b.n	8000fe4 <__udivmoddi4+0x260>
 8001040:	46d0      	mov	r8, sl
 8001042:	e77b      	b.n	8000f3c <__udivmoddi4+0x1b8>
 8001044:	3b02      	subs	r3, #2
 8001046:	4461      	add	r1, ip
 8001048:	e732      	b.n	8000eb0 <__udivmoddi4+0x12c>
 800104a:	4630      	mov	r0, r6
 800104c:	e709      	b.n	8000e62 <__udivmoddi4+0xde>
 800104e:	4464      	add	r4, ip
 8001050:	3802      	subs	r0, #2
 8001052:	e742      	b.n	8000eda <__udivmoddi4+0x156>

08001054 <__aeabi_idiv0>:
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop

08001058 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b08a      	sub	sp, #40	; 0x28
 800105c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105e:	f107 0314 	add.w	r3, r7, #20
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	605a      	str	r2, [r3, #4]
 8001068:	609a      	str	r2, [r3, #8]
 800106a:	60da      	str	r2, [r3, #12]
 800106c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800106e:	4b59      	ldr	r3, [pc, #356]	; (80011d4 <MX_GPIO_Init+0x17c>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	4a58      	ldr	r2, [pc, #352]	; (80011d4 <MX_GPIO_Init+0x17c>)
 8001074:	f043 0302 	orr.w	r3, r3, #2
 8001078:	6313      	str	r3, [r2, #48]	; 0x30
 800107a:	4b56      	ldr	r3, [pc, #344]	; (80011d4 <MX_GPIO_Init+0x17c>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	f003 0302 	and.w	r3, r3, #2
 8001082:	613b      	str	r3, [r7, #16]
 8001084:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001086:	4b53      	ldr	r3, [pc, #332]	; (80011d4 <MX_GPIO_Init+0x17c>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	4a52      	ldr	r2, [pc, #328]	; (80011d4 <MX_GPIO_Init+0x17c>)
 800108c:	f043 0301 	orr.w	r3, r3, #1
 8001090:	6313      	str	r3, [r2, #48]	; 0x30
 8001092:	4b50      	ldr	r3, [pc, #320]	; (80011d4 <MX_GPIO_Init+0x17c>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800109e:	4b4d      	ldr	r3, [pc, #308]	; (80011d4 <MX_GPIO_Init+0x17c>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	4a4c      	ldr	r2, [pc, #304]	; (80011d4 <MX_GPIO_Init+0x17c>)
 80010a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010a8:	6313      	str	r3, [r2, #48]	; 0x30
 80010aa:	4b4a      	ldr	r3, [pc, #296]	; (80011d4 <MX_GPIO_Init+0x17c>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010b2:	60bb      	str	r3, [r7, #8]
 80010b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010b6:	4b47      	ldr	r3, [pc, #284]	; (80011d4 <MX_GPIO_Init+0x17c>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	4a46      	ldr	r2, [pc, #280]	; (80011d4 <MX_GPIO_Init+0x17c>)
 80010bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010c0:	6313      	str	r3, [r2, #48]	; 0x30
 80010c2:	4b44      	ldr	r3, [pc, #272]	; (80011d4 <MX_GPIO_Init+0x17c>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010ce:	4b41      	ldr	r3, [pc, #260]	; (80011d4 <MX_GPIO_Init+0x17c>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	4a40      	ldr	r2, [pc, #256]	; (80011d4 <MX_GPIO_Init+0x17c>)
 80010d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010d8:	6313      	str	r3, [r2, #48]	; 0x30
 80010da:	4b3e      	ldr	r3, [pc, #248]	; (80011d4 <MX_GPIO_Init+0x17c>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010e2:	603b      	str	r3, [r7, #0]
 80010e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2110      	movs	r1, #16
 80010ea:	483b      	ldr	r0, [pc, #236]	; (80011d8 <MX_GPIO_Init+0x180>)
 80010ec:	f001 fd7c 	bl	8002be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0, GPIO_PIN_RESET);
 80010f0:	2200      	movs	r2, #0
 80010f2:	210f      	movs	r1, #15
 80010f4:	4839      	ldr	r0, [pc, #228]	; (80011dc <MX_GPIO_Init+0x184>)
 80010f6:	f001 fd77 	bl	8002be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7|GPIO_PIN_6, GPIO_PIN_RESET);
 80010fa:	2200      	movs	r2, #0
 80010fc:	21c0      	movs	r1, #192	; 0xc0
 80010fe:	4838      	ldr	r0, [pc, #224]	; (80011e0 <MX_GPIO_Init+0x188>)
 8001100:	f001 fd72 	bl	8002be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001104:	2310      	movs	r3, #16
 8001106:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001108:	2301      	movs	r3, #1
 800110a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001110:	2300      	movs	r3, #0
 8001112:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	4619      	mov	r1, r3
 800111a:	482f      	ldr	r0, [pc, #188]	; (80011d8 <MX_GPIO_Init+0x180>)
 800111c:	f001 f9d4 	bl	80024c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI3 PI2 PI1 PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0;
 8001120:	230f      	movs	r3, #15
 8001122:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001124:	2301      	movs	r3, #1
 8001126:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112c:	2300      	movs	r3, #0
 800112e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	4619      	mov	r1, r3
 8001136:	4829      	ldr	r0, [pc, #164]	; (80011dc <MX_GPIO_Init+0x184>)
 8001138:	f001 f9c6 	bl	80024c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800113c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001140:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001142:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001146:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	4619      	mov	r1, r3
 8001152:	4824      	ldr	r0, [pc, #144]	; (80011e4 <MX_GPIO_Init+0x18c>)
 8001154:	f001 f9b8 	bl	80024c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001158:	23c0      	movs	r3, #192	; 0xc0
 800115a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115c:	2301      	movs	r3, #1
 800115e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001164:	2300      	movs	r3, #0
 8001166:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	4619      	mov	r1, r3
 800116e:	481c      	ldr	r0, [pc, #112]	; (80011e0 <MX_GPIO_Init+0x188>)
 8001170:	f001 f9aa 	bl	80024c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001174:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001178:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800117a:	2300      	movs	r3, #0
 800117c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001182:	f107 0314 	add.w	r3, r7, #20
 8001186:	4619      	mov	r1, r3
 8001188:	4813      	ldr	r0, [pc, #76]	; (80011d8 <MX_GPIO_Init+0x180>)
 800118a:	f001 f99d 	bl	80024c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800118e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001192:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001194:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001198:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119e:	f107 0314 	add.w	r3, r7, #20
 80011a2:	4619      	mov	r1, r3
 80011a4:	480c      	ldr	r0, [pc, #48]	; (80011d8 <MX_GPIO_Init+0x180>)
 80011a6:	f001 f98f 	bl	80024c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2100      	movs	r1, #0
 80011ae:	2017      	movs	r0, #23
 80011b0:	f001 f8a8 	bl	8002304 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80011b4:	2017      	movs	r0, #23
 80011b6:	f001 f8d1 	bl	800235c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2100      	movs	r1, #0
 80011be:	2028      	movs	r0, #40	; 0x28
 80011c0:	f001 f8a0 	bl	8002304 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011c4:	2028      	movs	r0, #40	; 0x28
 80011c6:	f001 f8c9 	bl	800235c <HAL_NVIC_EnableIRQ>

}
 80011ca:	bf00      	nop
 80011cc:	3728      	adds	r7, #40	; 0x28
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40023800 	.word	0x40023800
 80011d8:	40020400 	.word	0x40020400
 80011dc:	40022000 	.word	0x40022000
 80011e0:	40021800 	.word	0x40021800
 80011e4:	40020000 	.word	0x40020000

080011e8 <HX711_Init>:




void HX711_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  // Set the SCK pin to low
  HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_RESET);
 80011ec:	2200      	movs	r2, #0
 80011ee:	2102      	movs	r1, #2
 80011f0:	4802      	ldr	r0, [pc, #8]	; (80011fc <HX711_Init+0x14>)
 80011f2:	f001 fcf9 	bl	8002be8 <HAL_GPIO_WritePin>
}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40022000 	.word	0x40022000

08001200 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001204:	4b1b      	ldr	r3, [pc, #108]	; (8001274 <MX_I2C1_Init+0x74>)
 8001206:	4a1c      	ldr	r2, [pc, #112]	; (8001278 <MX_I2C1_Init+0x78>)
 8001208:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 800120a:	4b1a      	ldr	r3, [pc, #104]	; (8001274 <MX_I2C1_Init+0x74>)
 800120c:	4a1b      	ldr	r2, [pc, #108]	; (800127c <MX_I2C1_Init+0x7c>)
 800120e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001210:	4b18      	ldr	r3, [pc, #96]	; (8001274 <MX_I2C1_Init+0x74>)
 8001212:	2200      	movs	r2, #0
 8001214:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001216:	4b17      	ldr	r3, [pc, #92]	; (8001274 <MX_I2C1_Init+0x74>)
 8001218:	2201      	movs	r2, #1
 800121a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800121c:	4b15      	ldr	r3, [pc, #84]	; (8001274 <MX_I2C1_Init+0x74>)
 800121e:	2200      	movs	r2, #0
 8001220:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001222:	4b14      	ldr	r3, [pc, #80]	; (8001274 <MX_I2C1_Init+0x74>)
 8001224:	2200      	movs	r2, #0
 8001226:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001228:	4b12      	ldr	r3, [pc, #72]	; (8001274 <MX_I2C1_Init+0x74>)
 800122a:	2200      	movs	r2, #0
 800122c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800122e:	4b11      	ldr	r3, [pc, #68]	; (8001274 <MX_I2C1_Init+0x74>)
 8001230:	2200      	movs	r2, #0
 8001232:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001234:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <MX_I2C1_Init+0x74>)
 8001236:	2200      	movs	r2, #0
 8001238:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800123a:	480e      	ldr	r0, [pc, #56]	; (8001274 <MX_I2C1_Init+0x74>)
 800123c:	f001 fd18 	bl	8002c70 <HAL_I2C_Init>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001246:	f000 fa5d 	bl	8001704 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800124a:	2100      	movs	r1, #0
 800124c:	4809      	ldr	r0, [pc, #36]	; (8001274 <MX_I2C1_Init+0x74>)
 800124e:	f001 fe31 	bl	8002eb4 <HAL_I2CEx_ConfigAnalogFilter>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001258:	f000 fa54 	bl	8001704 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800125c:	2100      	movs	r1, #0
 800125e:	4805      	ldr	r0, [pc, #20]	; (8001274 <MX_I2C1_Init+0x74>)
 8001260:	f001 fe9e 	bl	8002fa0 <HAL_I2CEx_ConfigDigitalFilter>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800126a:	f000 fa4b 	bl	8001704 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	200001fc 	.word	0x200001fc
 8001278:	40005400 	.word	0x40005400
 800127c:	6000030d 	.word	0x6000030d

08001280 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b0aa      	sub	sp, #168	; 0xa8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001288:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001298:	f107 0310 	add.w	r3, r7, #16
 800129c:	2284      	movs	r2, #132	; 0x84
 800129e:	2100      	movs	r1, #0
 80012a0:	4618      	mov	r0, r3
 80012a2:	f007 fb31 	bl	8008908 <memset>
  if(i2cHandle->Instance==I2C1)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a22      	ldr	r2, [pc, #136]	; (8001334 <HAL_I2C_MspInit+0xb4>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d13c      	bne.n	800132a <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80012b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012b4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80012b6:	2300      	movs	r3, #0
 80012b8:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ba:	f107 0310 	add.w	r3, r7, #16
 80012be:	4618      	mov	r0, r3
 80012c0:	f002 fd2e 	bl	8003d20 <HAL_RCCEx_PeriphCLKConfig>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80012ca:	f000 fa1b 	bl	8001704 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ce:	4b1a      	ldr	r3, [pc, #104]	; (8001338 <HAL_I2C_MspInit+0xb8>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a19      	ldr	r2, [pc, #100]	; (8001338 <HAL_I2C_MspInit+0xb8>)
 80012d4:	f043 0302 	orr.w	r3, r3, #2
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b17      	ldr	r3, [pc, #92]	; (8001338 <HAL_I2C_MspInit+0xb8>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ee:	2312      	movs	r3, #18
 80012f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fa:	2303      	movs	r3, #3
 80012fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001300:	2304      	movs	r3, #4
 8001302:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001306:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800130a:	4619      	mov	r1, r3
 800130c:	480b      	ldr	r0, [pc, #44]	; (800133c <HAL_I2C_MspInit+0xbc>)
 800130e:	f001 f8db 	bl	80024c8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001312:	4b09      	ldr	r3, [pc, #36]	; (8001338 <HAL_I2C_MspInit+0xb8>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	4a08      	ldr	r2, [pc, #32]	; (8001338 <HAL_I2C_MspInit+0xb8>)
 8001318:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800131c:	6413      	str	r3, [r2, #64]	; 0x40
 800131e:	4b06      	ldr	r3, [pc, #24]	; (8001338 <HAL_I2C_MspInit+0xb8>)
 8001320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001322:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001326:	60bb      	str	r3, [r7, #8]
 8001328:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800132a:	bf00      	nop
 800132c:	37a8      	adds	r7, #168	; 0xa8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40005400 	.word	0x40005400
 8001338:	40023800 	.word	0x40023800
 800133c:	40020400 	.word	0x40020400

08001340 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001340:	b590      	push	{r4, r7, lr}
 8001342:	f6ad 3da4 	subw	sp, sp, #2980	; 0xba4
 8001346:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001348:	f000 fe6b 	bl	8002022 <HAL_Init>

  /* USER CODE BEGIN Init */

  uint8_t buffer[100]; // 데이터를 저장할 버퍼
  uint8_t received_data;
  uint32_t string_index = 0;
 800134c:	2300      	movs	r3, #0
 800134e:	f8c7 3b94 	str.w	r3, [r7, #2964]	; 0xb94
  HAL_StatusTypeDef status;

	// VL53L0X initialization stuff
	//
	uint32_t refSpadCount = 0;
 8001352:	2300      	movs	r3, #0
 8001354:	f8c7 3b90 	str.w	r3, [r7, #2960]	; 0xb90
	uint8_t isApertureSpads = 0;
 8001358:	2300      	movs	r3, #0
 800135a:	f887 3b8f 	strb.w	r3, [r7, #2959]	; 0xb8f
	uint8_t VhvSettings = 0;
 800135e:	2300      	movs	r3, #0
 8001360:	f887 3b8e 	strb.w	r3, [r7, #2958]	; 0xb8e
	uint8_t PhaseCal = 0;
 8001364:	2300      	movs	r3, #0
 8001366:	f887 3b8d 	strb.w	r3, [r7, #2957]	; 0xb8d
	VL53L0X_Dev_t vl53l0x_s[NUM_SENSOR];
//	VL53L0X_Dev_t vl53l0x_s;

	VL53L0X_DEV Dev;
	//KalmanFilter kalman_filters[NUM_SENSOR];
	uint16_t distance[NUM_SENSOR] = {0,};
 800136a:	f607 3398 	addw	r3, r7, #2968	; 0xb98
 800136e:	f6a3 3374 	subw	r3, r3, #2932	; 0xb74
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]
 8001378:	609a      	str	r2, [r3, #8]
 800137a:	819a      	strh	r2, [r3, #12]
//	float filtered_distance[NUM_SENSOR] = {0,};

	uint8_t tca_ch[8] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80}; // control register of TCA9548A
 800137c:	f607 3398 	addw	r3, r7, #2968	; 0xb98
 8001380:	f6a3 337c 	subw	r3, r3, #2940	; 0xb7c
 8001384:	4a53      	ldr	r2, [pc, #332]	; (80014d4 <main+0x194>)
 8001386:	e892 0003 	ldmia.w	r2, {r0, r1}
 800138a:	e883 0003 	stmia.w	r3, {r0, r1}
	//uint8_t tca_ch[8] = {0b00000001, 0b00000010, 0b00000100, 0b00001000, 0b00010000, 0b00100000, 0b01000000, 0b10000000};
	uint8_t tca_ch_reset = 0x00;
 800138e:	2300      	movs	r3, #0
 8001390:	f887 3b8c 	strb.w	r3, [r7, #2956]	; 0xb8c
	//uint8_t tca_ch_reset = 0b00000000;
    uint8_t tca_addr[] = {0x70};
 8001394:	f607 3398 	addw	r3, r7, #2968	; 0xb98
 8001398:	f5a3 6338 	sub.w	r3, r3, #2944	; 0xb80
 800139c:	2270      	movs	r2, #112	; 0x70
 800139e:	701a      	strb	r2, [r3, #0]

//    uint8_t tca_addr[] = {0x70,0x71,0x72};


    HAL_UART_Receive_IT(&huart1,&rxData,1);
 80013a0:	2201      	movs	r2, #1
 80013a2:	494d      	ldr	r1, [pc, #308]	; (80014d8 <main+0x198>)
 80013a4:	484d      	ldr	r0, [pc, #308]	; (80014dc <main+0x19c>)
 80013a6:	f005 ff24 	bl	80071f2 <HAL_UART_Receive_IT>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013aa:	f000 f8ad 	bl	8001508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013ae:	f7ff fe53 	bl	8001058 <MX_GPIO_Init>
  MX_I2C1_Init();
 80013b2:	f7ff ff25 	bl	8001200 <MX_I2C1_Init>
  MX_TIM7_Init();
 80013b6:	f000 fcbb 	bl	8001d30 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 80013ba:	f000 fd57 	bl	8001e6c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80013be:	f000 fc41 	bl	8001c44 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80013c2:	f000 f90f 	bl	80015e4 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */


  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 80013c6:	2100      	movs	r1, #0
 80013c8:	4845      	ldr	r0, [pc, #276]	; (80014e0 <main+0x1a0>)
 80013ca:	f003 fed7 	bl	800517c <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart1, &rxData, 1);
 80013ce:	2201      	movs	r2, #1
 80013d0:	4941      	ldr	r1, [pc, #260]	; (80014d8 <main+0x198>)
 80013d2:	4842      	ldr	r0, [pc, #264]	; (80014dc <main+0x19c>)
 80013d4:	f005 ff0d 	bl	80071f2 <HAL_UART_Receive_IT>

  // Initialize the HX711
  HX711_Init();
 80013d8:	f7ff ff06 	bl	80011e8 <HX711_Init>

  /* UART interrupt initialization */
  MessageLen = sprintf((char*)Message, "JH VL53L0X test\n\r");
 80013dc:	4941      	ldr	r1, [pc, #260]	; (80014e4 <main+0x1a4>)
 80013de:	4842      	ldr	r0, [pc, #264]	; (80014e8 <main+0x1a8>)
 80013e0:	f008 f91a 	bl	8009618 <siprintf>
 80013e4:	4603      	mov	r3, r0
 80013e6:	b2da      	uxtb	r2, r3
 80013e8:	4b40      	ldr	r3, [pc, #256]	; (80014ec <main+0x1ac>)
 80013ea:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart1, Message, MessageLen, 100);
 80013ec:	4b3f      	ldr	r3, [pc, #252]	; (80014ec <main+0x1ac>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	2364      	movs	r3, #100	; 0x64
 80013f4:	493c      	ldr	r1, [pc, #240]	; (80014e8 <main+0x1a8>)
 80013f6:	4839      	ldr	r0, [pc, #228]	; (80014dc <main+0x19c>)
 80013f8:	f005 fe78 	bl	80070ec <HAL_UART_Transmit>

  while (1)
  {


	  if(receivedFlag)
 80013fc:	4b3c      	ldr	r3, [pc, #240]	; (80014f0 <main+0x1b0>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d0fb      	beq.n	80013fc <main+0xbc>
	  {
		  if(strncmp((char*)rxBuffer, "rev",4) == 0){
 8001404:	493b      	ldr	r1, [pc, #236]	; (80014f4 <main+0x1b4>)
 8001406:	483c      	ldr	r0, [pc, #240]	; (80014f8 <main+0x1b8>)
 8001408:	f7fe ff02 	bl	8000210 <strcmp>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d15c      	bne.n	80014cc <main+0x18c>
			  float servo_dist, step_rev_angle, step_lin_dist;


			  sscanf((char*)rxBuffer + 5, "%f,%f,%f",servo_dist, &step_rev_angle, &step_lin_dist);
 8001412:	4c3a      	ldr	r4, [pc, #232]	; (80014fc <main+0x1bc>)
 8001414:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8001418:	6818      	ldr	r0, [r3, #0]
 800141a:	f7ff f8c5 	bl	80005a8 <__aeabi_f2d>
 800141e:	4602      	mov	r2, r0
 8001420:	460b      	mov	r3, r1
 8001422:	f107 0110 	add.w	r1, r7, #16
 8001426:	9101      	str	r1, [sp, #4]
 8001428:	f107 0114 	add.w	r1, r7, #20
 800142c:	9100      	str	r1, [sp, #0]
 800142e:	4934      	ldr	r1, [pc, #208]	; (8001500 <main+0x1c0>)
 8001430:	4620      	mov	r0, r4
 8001432:	f008 f911 	bl	8009658 <siscanf>

			  stepRev(step_rev_angle);
 8001436:	f607 3398 	addw	r3, r7, #2968	; 0xb98
 800143a:	f6a3 3384 	subw	r3, r3, #2948	; 0xb84
 800143e:	edd3 7a00 	vldr	s15, [r3]
 8001442:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001446:	ee17 0a90 	vmov	r0, s15
 800144a:	f000 f96b 	bl	8001724 <stepRev>
			  stepLin(step_lin_dist);
 800144e:	f607 3398 	addw	r3, r7, #2968	; 0xb98
 8001452:	f6a3 3388 	subw	r3, r3, #2952	; 0xb88
 8001456:	edd3 7a00 	vldr	s15, [r3]
 800145a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800145e:	ee17 0a90 	vmov	r0, s15
 8001462:	f000 f9c9 	bl	80017f8 <stepLin>
			  servo_angle(&htim2, TIM_CHANNEL_1, servo_dist);
 8001466:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800146a:	edd3 7a00 	vldr	s15, [r3]
 800146e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001472:	ee17 3a90 	vmov	r3, s15
 8001476:	b29b      	uxth	r3, r3
 8001478:	461a      	mov	r2, r3
 800147a:	2100      	movs	r1, #0
 800147c:	4818      	ldr	r0, [pc, #96]	; (80014e0 <main+0x1a0>)
 800147e:	f000 fa55 	bl	800192c <servo_angle>

			  uint8_t goodMSG[] = "good";
 8001482:	f607 3398 	addw	r3, r7, #2968	; 0xb98
 8001486:	f5a3 6339 	sub.w	r3, r3, #2960	; 0xb90
 800148a:	4a1e      	ldr	r2, [pc, #120]	; (8001504 <main+0x1c4>)
 800148c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001490:	6018      	str	r0, [r3, #0]
 8001492:	3304      	adds	r3, #4
 8001494:	7019      	strb	r1, [r3, #0]
			  HAL_UART_Transmit(&huart1, goodMSG, strlen((char*)goodMSG),1000);
 8001496:	f107 0308 	add.w	r3, r7, #8
 800149a:	4618      	mov	r0, r3
 800149c:	f7fe fec2 	bl	8000224 <strlen>
 80014a0:	4603      	mov	r3, r0
 80014a2:	b29a      	uxth	r2, r3
 80014a4:	f107 0108 	add.w	r1, r7, #8
 80014a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ac:	480b      	ldr	r0, [pc, #44]	; (80014dc <main+0x19c>)
 80014ae:	f005 fe1d 	bl	80070ec <HAL_UART_Transmit>

			  uint8_t newline[2] = "\r\n";
 80014b2:	f607 3398 	addw	r3, r7, #2968	; 0xb98
 80014b6:	f6a3 3394 	subw	r3, r3, #2964	; 0xb94
 80014ba:	f640 220d 	movw	r2, #2573	; 0xa0d
 80014be:	801a      	strh	r2, [r3, #0]
			  HAL_UART_Transmit(&huart1,newline,2,10);
 80014c0:	1d39      	adds	r1, r7, #4
 80014c2:	230a      	movs	r3, #10
 80014c4:	2202      	movs	r2, #2
 80014c6:	4805      	ldr	r0, [pc, #20]	; (80014dc <main+0x19c>)
 80014c8:	f005 fe10 	bl	80070ec <HAL_UART_Transmit>
		  }
		  receivedFlag = 0;
 80014cc:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <main+0x1b0>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	701a      	strb	r2, [r3, #0]
	  if(receivedFlag)
 80014d2:	e793      	b.n	80013fc <main+0xbc>
 80014d4:	0800da8c 	.word	0x0800da8c
 80014d8:	200002d2 	.word	0x200002d2
 80014dc:	200003b8 	.word	0x200003b8
 80014e0:	20000320 	.word	0x20000320
 80014e4:	0800da68 	.word	0x0800da68
 80014e8:	200002d4 	.word	0x200002d4
 80014ec:	20000314 	.word	0x20000314
 80014f0:	200002d3 	.word	0x200002d3
 80014f4:	0800da7c 	.word	0x0800da7c
 80014f8:	20000250 	.word	0x20000250
 80014fc:	20000255 	.word	0x20000255
 8001500:	0800da80 	.word	0x0800da80
 8001504:	0800da94 	.word	0x0800da94

08001508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b094      	sub	sp, #80	; 0x50
 800150c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800150e:	f107 0320 	add.w	r3, r7, #32
 8001512:	2230      	movs	r2, #48	; 0x30
 8001514:	2100      	movs	r1, #0
 8001516:	4618      	mov	r0, r3
 8001518:	f007 f9f6 	bl	8008908 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800151c:	f107 030c 	add.w	r3, r7, #12
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
 800152a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800152c:	4b2b      	ldr	r3, [pc, #172]	; (80015dc <SystemClock_Config+0xd4>)
 800152e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001530:	4a2a      	ldr	r2, [pc, #168]	; (80015dc <SystemClock_Config+0xd4>)
 8001532:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001536:	6413      	str	r3, [r2, #64]	; 0x40
 8001538:	4b28      	ldr	r3, [pc, #160]	; (80015dc <SystemClock_Config+0xd4>)
 800153a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001540:	60bb      	str	r3, [r7, #8]
 8001542:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001544:	4b26      	ldr	r3, [pc, #152]	; (80015e0 <SystemClock_Config+0xd8>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a25      	ldr	r2, [pc, #148]	; (80015e0 <SystemClock_Config+0xd8>)
 800154a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800154e:	6013      	str	r3, [r2, #0]
 8001550:	4b23      	ldr	r3, [pc, #140]	; (80015e0 <SystemClock_Config+0xd8>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001558:	607b      	str	r3, [r7, #4]
 800155a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800155c:	2301      	movs	r3, #1
 800155e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001560:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001564:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001566:	2302      	movs	r3, #2
 8001568:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800156a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800156e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001570:	2319      	movs	r3, #25
 8001572:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001574:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001578:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800157a:	2302      	movs	r3, #2
 800157c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800157e:	2302      	movs	r3, #2
 8001580:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001582:	f107 0320 	add.w	r3, r7, #32
 8001586:	4618      	mov	r0, r3
 8001588:	f001 fdce 	bl	8003128 <HAL_RCC_OscConfig>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001592:	f000 f8b7 	bl	8001704 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001596:	f001 fd77 	bl	8003088 <HAL_PWREx_EnableOverDrive>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80015a0:	f000 f8b0 	bl	8001704 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015a4:	230f      	movs	r3, #15
 80015a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015a8:	2302      	movs	r3, #2
 80015aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80015bc:	f107 030c 	add.w	r3, r7, #12
 80015c0:	2107      	movs	r1, #7
 80015c2:	4618      	mov	r0, r3
 80015c4:	f002 f90a 	bl	80037dc <HAL_RCC_ClockConfig>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80015ce:	f000 f899 	bl	8001704 <Error_Handler>
  }
}
 80015d2:	bf00      	nop
 80015d4:	3750      	adds	r7, #80	; 0x50
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40023800 	.word	0x40023800
 80015e0:	40007000 	.word	0x40007000

080015e4 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80015e8:	2200      	movs	r2, #0
 80015ea:	2100      	movs	r1, #0
 80015ec:	2025      	movs	r0, #37	; 0x25
 80015ee:	f000 fe89 	bl	8002304 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 80015f2:	2025      	movs	r0, #37	; 0x25
 80015f4:	f000 feb2 	bl	800235c <HAL_NVIC_EnableIRQ>
  /* TIM7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 80015f8:	2200      	movs	r2, #0
 80015fa:	2101      	movs	r1, #1
 80015fc:	2037      	movs	r0, #55	; 0x37
 80015fe:	f000 fe81 	bl	8002304 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001602:	2037      	movs	r0, #55	; 0x37
 8001604:	f000 feaa 	bl	800235c <HAL_NVIC_EnableIRQ>
}
 8001608:	bf00      	nop
 800160a:	bd80      	pop	{r7, pc}

0800160c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a15      	ldr	r2, [pc, #84]	; (8001670 <HAL_UART_RxCpltCallback+0x64>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d124      	bne.n	8001668 <HAL_UART_RxCpltCallback+0x5c>
  {
    if (rxData != '\n' && rxBufferIndex < RX_BUFFER_SIZE - 1)
 800161e:	4b15      	ldr	r3, [pc, #84]	; (8001674 <HAL_UART_RxCpltCallback+0x68>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	2b0a      	cmp	r3, #10
 8001624:	d00f      	beq.n	8001646 <HAL_UART_RxCpltCallback+0x3a>
 8001626:	4b14      	ldr	r3, [pc, #80]	; (8001678 <HAL_UART_RxCpltCallback+0x6c>)
 8001628:	881b      	ldrh	r3, [r3, #0]
 800162a:	2b7e      	cmp	r3, #126	; 0x7e
 800162c:	d80b      	bhi.n	8001646 <HAL_UART_RxCpltCallback+0x3a>
    {
      rxBuffer[rxBufferIndex++] = rxData;
 800162e:	4b12      	ldr	r3, [pc, #72]	; (8001678 <HAL_UART_RxCpltCallback+0x6c>)
 8001630:	881b      	ldrh	r3, [r3, #0]
 8001632:	1c5a      	adds	r2, r3, #1
 8001634:	b291      	uxth	r1, r2
 8001636:	4a10      	ldr	r2, [pc, #64]	; (8001678 <HAL_UART_RxCpltCallback+0x6c>)
 8001638:	8011      	strh	r1, [r2, #0]
 800163a:	461a      	mov	r2, r3
 800163c:	4b0d      	ldr	r3, [pc, #52]	; (8001674 <HAL_UART_RxCpltCallback+0x68>)
 800163e:	7819      	ldrb	r1, [r3, #0]
 8001640:	4b0e      	ldr	r3, [pc, #56]	; (800167c <HAL_UART_RxCpltCallback+0x70>)
 8001642:	5499      	strb	r1, [r3, r2]
 8001644:	e00b      	b.n	800165e <HAL_UART_RxCpltCallback+0x52>
    }
    else
    {
      rxBuffer[rxBufferIndex] = '\0';
 8001646:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <HAL_UART_RxCpltCallback+0x6c>)
 8001648:	881b      	ldrh	r3, [r3, #0]
 800164a:	461a      	mov	r2, r3
 800164c:	4b0b      	ldr	r3, [pc, #44]	; (800167c <HAL_UART_RxCpltCallback+0x70>)
 800164e:	2100      	movs	r1, #0
 8001650:	5499      	strb	r1, [r3, r2]
      rxBufferIndex = 0;
 8001652:	4b09      	ldr	r3, [pc, #36]	; (8001678 <HAL_UART_RxCpltCallback+0x6c>)
 8001654:	2200      	movs	r2, #0
 8001656:	801a      	strh	r2, [r3, #0]
      receivedFlag = 1; // 문자?��?�� ?��?��?��?��?��?�� ?��리는 ?��?��그�?? ?��?��?��?��?��.
 8001658:	4b09      	ldr	r3, [pc, #36]	; (8001680 <HAL_UART_RxCpltCallback+0x74>)
 800165a:	2201      	movs	r2, #1
 800165c:	701a      	strb	r2, [r3, #0]
    }
    HAL_UART_Receive_IT(&huart1, &rxData, 1);
 800165e:	2201      	movs	r2, #1
 8001660:	4904      	ldr	r1, [pc, #16]	; (8001674 <HAL_UART_RxCpltCallback+0x68>)
 8001662:	4808      	ldr	r0, [pc, #32]	; (8001684 <HAL_UART_RxCpltCallback+0x78>)
 8001664:	f005 fdc5 	bl	80071f2 <HAL_UART_Receive_IT>
  }
}
 8001668:	bf00      	nop
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40011000 	.word	0x40011000
 8001674:	200002d2 	.word	0x200002d2
 8001678:	200002d0 	.word	0x200002d0
 800167c:	20000250 	.word	0x20000250
 8001680:	200002d3 	.word	0x200002d3
 8001684:	200003b8 	.word	0x200003b8

08001688 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_8) // A?��?�� ???�� ?��?��?��?��
 8001692:	88fb      	ldrh	r3, [r7, #6]
 8001694:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001698:	d113      	bne.n	80016c2 <HAL_GPIO_EXTI_Callback+0x3a>
  {
    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)) // B?�� 값을 ?��?��
 800169a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800169e:	4816      	ldr	r0, [pc, #88]	; (80016f8 <HAL_GPIO_EXTI_Callback+0x70>)
 80016a0:	f001 fa82 	bl	8002ba8 <HAL_GPIO_ReadPin>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d005      	beq.n	80016b6 <HAL_GPIO_EXTI_Callback+0x2e>
    {
      encoderCount++;
 80016aa:	4b14      	ldr	r3, [pc, #80]	; (80016fc <HAL_GPIO_EXTI_Callback+0x74>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	3301      	adds	r3, #1
 80016b0:	4a12      	ldr	r2, [pc, #72]	; (80016fc <HAL_GPIO_EXTI_Callback+0x74>)
 80016b2:	6013      	str	r3, [r2, #0]
    else
    {
      encoderCount++;
    }
  }
}
 80016b4:	e01c      	b.n	80016f0 <HAL_GPIO_EXTI_Callback+0x68>
      encoderCount--;
 80016b6:	4b11      	ldr	r3, [pc, #68]	; (80016fc <HAL_GPIO_EXTI_Callback+0x74>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	4a0f      	ldr	r2, [pc, #60]	; (80016fc <HAL_GPIO_EXTI_Callback+0x74>)
 80016be:	6013      	str	r3, [r2, #0]
}
 80016c0:	e016      	b.n	80016f0 <HAL_GPIO_EXTI_Callback+0x68>
  else if (GPIO_Pin == GPIO_PIN_15) // B?��?�� ???�� ?��?��?��?��
 80016c2:	88fb      	ldrh	r3, [r7, #6]
 80016c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80016c8:	d112      	bne.n	80016f0 <HAL_GPIO_EXTI_Callback+0x68>
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) // A?�� 값을 ?��?��
 80016ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016ce:	480c      	ldr	r0, [pc, #48]	; (8001700 <HAL_GPIO_EXTI_Callback+0x78>)
 80016d0:	f001 fa6a 	bl	8002ba8 <HAL_GPIO_ReadPin>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d005      	beq.n	80016e6 <HAL_GPIO_EXTI_Callback+0x5e>
      encoderCount--;
 80016da:	4b08      	ldr	r3, [pc, #32]	; (80016fc <HAL_GPIO_EXTI_Callback+0x74>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	3b01      	subs	r3, #1
 80016e0:	4a06      	ldr	r2, [pc, #24]	; (80016fc <HAL_GPIO_EXTI_Callback+0x74>)
 80016e2:	6013      	str	r3, [r2, #0]
}
 80016e4:	e004      	b.n	80016f0 <HAL_GPIO_EXTI_Callback+0x68>
      encoderCount++;
 80016e6:	4b05      	ldr	r3, [pc, #20]	; (80016fc <HAL_GPIO_EXTI_Callback+0x74>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	3301      	adds	r3, #1
 80016ec:	4a03      	ldr	r2, [pc, #12]	; (80016fc <HAL_GPIO_EXTI_Callback+0x74>)
 80016ee:	6013      	str	r3, [r2, #0]
}
 80016f0:	bf00      	nop
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40020400 	.word	0x40020400
 80016fc:	20000318 	.word	0x20000318
 8001700:	40020000 	.word	0x40020000

08001704 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001708:	b672      	cpsid	i
}
 800170a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800170c:	e7fe      	b.n	800170c <Error_Handler+0x8>

0800170e <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800170e:	b480      	push	{r7}
 8001710:	b083      	sub	sp, #12
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
 8001716:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <stepRev>:
#include "gpio.h"
#include "tim.h"

#define PULSE 200

void stepRev(int ANG) {
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
	// ENA D2 PG7 GPIOG GPIO_PIN_6
	// CLK D3 PB4 GPIOB GPIO_PIN_4
	// DIR D4 PG7 GPIOG GPIO_PIN_7


  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);  // ENA
 800172c:	2200      	movs	r2, #0
 800172e:	2140      	movs	r1, #64	; 0x40
 8001730:	482e      	ldr	r0, [pc, #184]	; (80017ec <stepRev+0xc8>)
 8001732:	f001 fa59 	bl	8002be8 <HAL_GPIO_WritePin>

  if (ANG != 0) {
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d04d      	beq.n	80017d8 <stepRev+0xb4>
    int direction = (ANG > 0) ? 1 : -1;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2b00      	cmp	r3, #0
 8001740:	dd01      	ble.n	8001746 <stepRev+0x22>
 8001742:	2301      	movs	r3, #1
 8001744:	e001      	b.n	800174a <stepRev+0x26>
 8001746:	f04f 33ff 	mov.w	r3, #4294967295
 800174a:	613b      	str	r3, [r7, #16]
    ANG *= direction;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	fb02 f303 	mul.w	r3, r2, r3
 8001754:	607b      	str	r3, [r7, #4]
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, direction == 1 ? GPIO_PIN_SET : GPIO_PIN_RESET); // DIR
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	2b01      	cmp	r3, #1
 800175a:	bf0c      	ite	eq
 800175c:	2301      	moveq	r3, #1
 800175e:	2300      	movne	r3, #0
 8001760:	b2db      	uxtb	r3, r3
 8001762:	461a      	mov	r2, r3
 8001764:	2180      	movs	r1, #128	; 0x80
 8001766:	4821      	ldr	r0, [pc, #132]	; (80017ec <stepRev+0xc8>)
 8001768:	f001 fa3e 	bl	8002be8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET); // ENA
 800176c:	2200      	movs	r2, #0
 800176e:	2140      	movs	r1, #64	; 0x40
 8001770:	481e      	ldr	r0, [pc, #120]	; (80017ec <stepRev+0xc8>)
 8001772:	f001 fa39 	bl	8002be8 <HAL_GPIO_WritePin>
    uint32_t steps = PULSE * ANG / 360.0;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	22c8      	movs	r2, #200	; 0xc8
 800177a:	fb02 f303 	mul.w	r3, r2, r3
 800177e:	4618      	mov	r0, r3
 8001780:	f7fe ff00 	bl	8000584 <__aeabi_i2d>
 8001784:	f04f 0200 	mov.w	r2, #0
 8001788:	4b19      	ldr	r3, [pc, #100]	; (80017f0 <stepRev+0xcc>)
 800178a:	f7ff f88f 	bl	80008ac <__aeabi_ddiv>
 800178e:	4602      	mov	r2, r0
 8001790:	460b      	mov	r3, r1
 8001792:	4610      	mov	r0, r2
 8001794:	4619      	mov	r1, r3
 8001796:	f7ff fa37 	bl	8000c08 <__aeabi_d2uiz>
 800179a:	4603      	mov	r3, r0
 800179c:	60fb      	str	r3, [r7, #12]
    uint32_t pulse_delay_ms_ = 5; // 6rpm
 800179e:	2305      	movs	r3, #5
 80017a0:	60bb      	str	r3, [r7, #8]

    for (int i = 0; i < steps; i++) {
 80017a2:	2300      	movs	r3, #0
 80017a4:	617b      	str	r3, [r7, #20]
 80017a6:	e012      	b.n	80017ce <stepRev+0xaa>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET); //CLK
 80017a8:	2201      	movs	r2, #1
 80017aa:	2110      	movs	r1, #16
 80017ac:	4811      	ldr	r0, [pc, #68]	; (80017f4 <stepRev+0xd0>)
 80017ae:	f001 fa1b 	bl	8002be8 <HAL_GPIO_WritePin>
      HAL_Delay(pulse_delay_ms_);
 80017b2:	68b8      	ldr	r0, [r7, #8]
 80017b4:	f000 fc92 	bl	80020dc <HAL_Delay>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); //CLK
 80017b8:	2200      	movs	r2, #0
 80017ba:	2110      	movs	r1, #16
 80017bc:	480d      	ldr	r0, [pc, #52]	; (80017f4 <stepRev+0xd0>)
 80017be:	f001 fa13 	bl	8002be8 <HAL_GPIO_WritePin>
      HAL_Delay(pulse_delay_ms_);
 80017c2:	68b8      	ldr	r0, [r7, #8]
 80017c4:	f000 fc8a 	bl	80020dc <HAL_Delay>
    for (int i = 0; i < steps; i++) {
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	3301      	adds	r3, #1
 80017cc:	617b      	str	r3, [r7, #20]
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	68fa      	ldr	r2, [r7, #12]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d8e8      	bhi.n	80017a8 <stepRev+0x84>
  }
  else {
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET); // ENA
  }

}
 80017d6:	e004      	b.n	80017e2 <stepRev+0xbe>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET); // ENA
 80017d8:	2200      	movs	r2, #0
 80017da:	2140      	movs	r1, #64	; 0x40
 80017dc:	4803      	ldr	r0, [pc, #12]	; (80017ec <stepRev+0xc8>)
 80017de:	f001 fa03 	bl	8002be8 <HAL_GPIO_WritePin>
}
 80017e2:	bf00      	nop
 80017e4:	3718      	adds	r7, #24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40021800 	.word	0x40021800
 80017f0:	40768000 	.word	0x40768000
 80017f4:	40020400 	.word	0x40020400

080017f8 <stepLin>:

void stepLin(int DIST) {
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b088      	sub	sp, #32
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]

	// ENA D5 PI0 GPIOI GPIO_PIN_0
	// CLK D8 PI2 GPIOI GPIO_PIN_2
	// DIR D7 PI3 GPIOI GPIO_PIN_3

	float ANG = DIST * 360.0 / 8; // 1 rev -> 8 mm
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f7fe febf 	bl	8000584 <__aeabi_i2d>
 8001806:	f04f 0200 	mov.w	r2, #0
 800180a:	4b44      	ldr	r3, [pc, #272]	; (800191c <stepLin+0x124>)
 800180c:	f7fe ff24 	bl	8000658 <__aeabi_dmul>
 8001810:	4602      	mov	r2, r0
 8001812:	460b      	mov	r3, r1
 8001814:	4610      	mov	r0, r2
 8001816:	4619      	mov	r1, r3
 8001818:	f04f 0200 	mov.w	r2, #0
 800181c:	4b40      	ldr	r3, [pc, #256]	; (8001920 <stepLin+0x128>)
 800181e:	f7ff f845 	bl	80008ac <__aeabi_ddiv>
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	4610      	mov	r0, r2
 8001828:	4619      	mov	r1, r3
 800182a:	f7ff fa0d 	bl	8000c48 <__aeabi_d2f>
 800182e:	4603      	mov	r3, r0
 8001830:	61bb      	str	r3, [r7, #24]


  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);  // ENA
 8001832:	2201      	movs	r2, #1
 8001834:	2101      	movs	r1, #1
 8001836:	483b      	ldr	r0, [pc, #236]	; (8001924 <stepLin+0x12c>)
 8001838:	f001 f9d6 	bl	8002be8 <HAL_GPIO_WritePin>

  if (ANG != 0) {
 800183c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001840:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001848:	d05a      	beq.n	8001900 <stepLin+0x108>
    int direction = (ANG > 0) ? 1 : -1;
 800184a:	edd7 7a06 	vldr	s15, [r7, #24]
 800184e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001856:	dd01      	ble.n	800185c <stepLin+0x64>
 8001858:	2301      	movs	r3, #1
 800185a:	e001      	b.n	8001860 <stepLin+0x68>
 800185c:	f04f 33ff 	mov.w	r3, #4294967295
 8001860:	617b      	str	r3, [r7, #20]
    ANG *= direction;
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	ee07 3a90 	vmov	s15, r3
 8001868:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800186c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001870:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001874:	edc7 7a06 	vstr	s15, [r7, #24]
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_3, direction == 1 ? GPIO_PIN_SET : GPIO_PIN_RESET); // DIR
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	2b01      	cmp	r3, #1
 800187c:	bf0c      	ite	eq
 800187e:	2301      	moveq	r3, #1
 8001880:	2300      	movne	r3, #0
 8001882:	b2db      	uxtb	r3, r3
 8001884:	461a      	mov	r2, r3
 8001886:	2108      	movs	r1, #8
 8001888:	4826      	ldr	r0, [pc, #152]	; (8001924 <stepLin+0x12c>)
 800188a:	f001 f9ad 	bl	8002be8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);  // ENA
 800188e:	2200      	movs	r2, #0
 8001890:	2101      	movs	r1, #1
 8001892:	4824      	ldr	r0, [pc, #144]	; (8001924 <stepLin+0x12c>)
 8001894:	f001 f9a8 	bl	8002be8 <HAL_GPIO_WritePin>
    uint32_t steps = PULSE * ANG / 360.0;
 8001898:	edd7 7a06 	vldr	s15, [r7, #24]
 800189c:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001928 <stepLin+0x130>
 80018a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018a4:	ee17 0a90 	vmov	r0, s15
 80018a8:	f7fe fe7e 	bl	80005a8 <__aeabi_f2d>
 80018ac:	f04f 0200 	mov.w	r2, #0
 80018b0:	4b1a      	ldr	r3, [pc, #104]	; (800191c <stepLin+0x124>)
 80018b2:	f7fe fffb 	bl	80008ac <__aeabi_ddiv>
 80018b6:	4602      	mov	r2, r0
 80018b8:	460b      	mov	r3, r1
 80018ba:	4610      	mov	r0, r2
 80018bc:	4619      	mov	r1, r3
 80018be:	f7ff f9a3 	bl	8000c08 <__aeabi_d2uiz>
 80018c2:	4603      	mov	r3, r0
 80018c4:	613b      	str	r3, [r7, #16]
    uint32_t pulse_delay_ms_ = 1; // 6rpm
 80018c6:	2301      	movs	r3, #1
 80018c8:	60fb      	str	r3, [r7, #12]

    for (int i = 0; i < steps; i++) {
 80018ca:	2300      	movs	r3, #0
 80018cc:	61fb      	str	r3, [r7, #28]
 80018ce:	e012      	b.n	80018f6 <stepLin+0xfe>
      HAL_GPIO_WritePin(GPIOI, GPIO_PIN_2, GPIO_PIN_SET); // CLK
 80018d0:	2201      	movs	r2, #1
 80018d2:	2104      	movs	r1, #4
 80018d4:	4813      	ldr	r0, [pc, #76]	; (8001924 <stepLin+0x12c>)
 80018d6:	f001 f987 	bl	8002be8 <HAL_GPIO_WritePin>
      HAL_Delay(pulse_delay_ms_);
 80018da:	68f8      	ldr	r0, [r7, #12]
 80018dc:	f000 fbfe 	bl	80020dc <HAL_Delay>
      HAL_GPIO_WritePin(GPIOI, GPIO_PIN_2, GPIO_PIN_RESET); // CLK
 80018e0:	2200      	movs	r2, #0
 80018e2:	2104      	movs	r1, #4
 80018e4:	480f      	ldr	r0, [pc, #60]	; (8001924 <stepLin+0x12c>)
 80018e6:	f001 f97f 	bl	8002be8 <HAL_GPIO_WritePin>
      HAL_Delay(pulse_delay_ms_);
 80018ea:	68f8      	ldr	r0, [r7, #12]
 80018ec:	f000 fbf6 	bl	80020dc <HAL_Delay>
    for (int i = 0; i < steps; i++) {
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	3301      	adds	r3, #1
 80018f4:	61fb      	str	r3, [r7, #28]
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d8e8      	bhi.n	80018d0 <stepLin+0xd8>
 80018fe:	e004      	b.n	800190a <stepLin+0x112>
    }
  }
  else {
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);  // ENA
 8001900:	2200      	movs	r2, #0
 8001902:	2101      	movs	r1, #1
 8001904:	4807      	ldr	r0, [pc, #28]	; (8001924 <stepLin+0x12c>)
 8001906:	f001 f96f 	bl	8002be8 <HAL_GPIO_WritePin>
  }

  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);  // ENA
 800190a:	2201      	movs	r2, #1
 800190c:	2101      	movs	r1, #1
 800190e:	4805      	ldr	r0, [pc, #20]	; (8001924 <stepLin+0x12c>)
 8001910:	f001 f96a 	bl	8002be8 <HAL_GPIO_WritePin>

}
 8001914:	bf00      	nop
 8001916:	3720      	adds	r7, #32
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40768000 	.word	0x40768000
 8001920:	40200000 	.word	0x40200000
 8001924:	40022000 	.word	0x40022000
 8001928:	43480000 	.word	0x43480000

0800192c <servo_angle>:

void servo_angle(TIM_HandleTypeDef *htim, uint32_t channel, uint16_t angle) {
 800192c:	b480      	push	{r7}
 800192e:	b087      	sub	sp, #28
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	4613      	mov	r3, r2
 8001938:	80fb      	strh	r3, [r7, #6]
    if (angle > 180)
 800193a:	88fb      	ldrh	r3, [r7, #6]
 800193c:	2bb4      	cmp	r3, #180	; 0xb4
 800193e:	d901      	bls.n	8001944 <servo_angle+0x18>
        angle = 180; // 최대 각도 제한
 8001940:	23b4      	movs	r3, #180	; 0xb4
 8001942:	80fb      	strh	r3, [r7, #6]

    uint32_t pulse_width = 3 + angle; // 듀티 사이클 계산 (0도에서 180도까지)
 8001944:	88fb      	ldrh	r3, [r7, #6]
 8001946:	3303      	adds	r3, #3
 8001948:	617b      	str	r3, [r7, #20]
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d104      	bne.n	800195a <servo_angle+0x2e>
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	697a      	ldr	r2, [r7, #20]
 8001956:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001958:	e023      	b.n	80019a2 <servo_angle+0x76>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	2b04      	cmp	r3, #4
 800195e:	d104      	bne.n	800196a <servo_angle+0x3e>
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001968:	e01b      	b.n	80019a2 <servo_angle+0x76>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	2b08      	cmp	r3, #8
 800196e:	d104      	bne.n	800197a <servo_angle+0x4e>
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001978:	e013      	b.n	80019a2 <servo_angle+0x76>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	2b0c      	cmp	r3, #12
 800197e:	d104      	bne.n	800198a <servo_angle+0x5e>
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001988:	e00b      	b.n	80019a2 <servo_angle+0x76>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	2b10      	cmp	r3, #16
 800198e:	d104      	bne.n	800199a <servo_angle+0x6e>
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	6593      	str	r3, [r2, #88]	; 0x58
}
 8001998:	e003      	b.n	80019a2 <servo_angle+0x76>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 80019a2:	bf00      	nop
 80019a4:	371c      	adds	r7, #28
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
	...

080019b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80019b6:	4b0f      	ldr	r3, [pc, #60]	; (80019f4 <HAL_MspInit+0x44>)
 80019b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ba:	4a0e      	ldr	r2, [pc, #56]	; (80019f4 <HAL_MspInit+0x44>)
 80019bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c0:	6413      	str	r3, [r2, #64]	; 0x40
 80019c2:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <HAL_MspInit+0x44>)
 80019c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ca:	607b      	str	r3, [r7, #4]
 80019cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ce:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <HAL_MspInit+0x44>)
 80019d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d2:	4a08      	ldr	r2, [pc, #32]	; (80019f4 <HAL_MspInit+0x44>)
 80019d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019d8:	6453      	str	r3, [r2, #68]	; 0x44
 80019da:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <HAL_MspInit+0x44>)
 80019dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019e2:	603b      	str	r3, [r7, #0]
 80019e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019e6:	bf00      	nop
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	40023800 	.word	0x40023800

080019f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019fc:	e7fe      	b.n	80019fc <NMI_Handler+0x4>

080019fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019fe:	b480      	push	{r7}
 8001a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a02:	e7fe      	b.n	8001a02 <HardFault_Handler+0x4>

08001a04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a08:	e7fe      	b.n	8001a08 <MemManage_Handler+0x4>

08001a0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a0e:	e7fe      	b.n	8001a0e <BusFault_Handler+0x4>

08001a10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a14:	e7fe      	b.n	8001a14 <UsageFault_Handler+0x4>

08001a16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a16:	b480      	push	{r7}
 8001a18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a32:	b480      	push	{r7}
 8001a34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a36:	bf00      	nop
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a44:	f000 fb2a 	bl	800209c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a48:	bf00      	nop
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001a50:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001a54:	f001 f8f4 	bl	8002c40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001a58:	bf00      	nop
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a60:	4802      	ldr	r0, [pc, #8]	; (8001a6c <USART1_IRQHandler+0x10>)
 8001a62:	f005 fc0b 	bl	800727c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	200003b8 	.word	0x200003b8

08001a70 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001a74:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001a78:	f001 f8e2 	bl	8002c40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a7c:	bf00      	nop
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001a84:	4802      	ldr	r0, [pc, #8]	; (8001a90 <TIM7_IRQHandler+0x10>)
 8001a86:	f003 fd43 	bl	8005510 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	2000036c 	.word	0x2000036c

08001a94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  return 1;
 8001a98:	2301      	movs	r3, #1
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <_kill>:

int _kill(int pid, int sig)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001aae:	f006 fef3 	bl	8008898 <__errno>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2216      	movs	r2, #22
 8001ab6:	601a      	str	r2, [r3, #0]
  return -1;
 8001ab8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <_exit>:

void _exit (int status)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001acc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f7ff ffe7 	bl	8001aa4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ad6:	e7fe      	b.n	8001ad6 <_exit+0x12>

08001ad8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]
 8001ae8:	e00a      	b.n	8001b00 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001aea:	f3af 8000 	nop.w
 8001aee:	4601      	mov	r1, r0
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	1c5a      	adds	r2, r3, #1
 8001af4:	60ba      	str	r2, [r7, #8]
 8001af6:	b2ca      	uxtb	r2, r1
 8001af8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	3301      	adds	r3, #1
 8001afe:	617b      	str	r3, [r7, #20]
 8001b00:	697a      	ldr	r2, [r7, #20]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	dbf0      	blt.n	8001aea <_read+0x12>
  }

  return len;
 8001b08:	687b      	ldr	r3, [r7, #4]
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3718      	adds	r7, #24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b086      	sub	sp, #24
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	60f8      	str	r0, [r7, #12]
 8001b1a:	60b9      	str	r1, [r7, #8]
 8001b1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b1e:	2300      	movs	r3, #0
 8001b20:	617b      	str	r3, [r7, #20]
 8001b22:	e009      	b.n	8001b38 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	1c5a      	adds	r2, r3, #1
 8001b28:	60ba      	str	r2, [r7, #8]
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	3301      	adds	r3, #1
 8001b36:	617b      	str	r3, [r7, #20]
 8001b38:	697a      	ldr	r2, [r7, #20]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	dbf1      	blt.n	8001b24 <_write+0x12>
  }
  return len;
 8001b40:	687b      	ldr	r3, [r7, #4]
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3718      	adds	r7, #24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <_close>:

int _close(int file)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	b083      	sub	sp, #12
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b62:	b480      	push	{r7}
 8001b64:	b083      	sub	sp, #12
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
 8001b6a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b72:	605a      	str	r2, [r3, #4]
  return 0;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <_isatty>:

int _isatty(int file)
{
 8001b82:	b480      	push	{r7}
 8001b84:	b083      	sub	sp, #12
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b8a:	2301      	movs	r3, #1
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3714      	adds	r7, #20
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
	...

08001bb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bbc:	4a14      	ldr	r2, [pc, #80]	; (8001c10 <_sbrk+0x5c>)
 8001bbe:	4b15      	ldr	r3, [pc, #84]	; (8001c14 <_sbrk+0x60>)
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bc8:	4b13      	ldr	r3, [pc, #76]	; (8001c18 <_sbrk+0x64>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d102      	bne.n	8001bd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bd0:	4b11      	ldr	r3, [pc, #68]	; (8001c18 <_sbrk+0x64>)
 8001bd2:	4a12      	ldr	r2, [pc, #72]	; (8001c1c <_sbrk+0x68>)
 8001bd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bd6:	4b10      	ldr	r3, [pc, #64]	; (8001c18 <_sbrk+0x64>)
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4413      	add	r3, r2
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d207      	bcs.n	8001bf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001be4:	f006 fe58 	bl	8008898 <__errno>
 8001be8:	4603      	mov	r3, r0
 8001bea:	220c      	movs	r2, #12
 8001bec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bee:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf2:	e009      	b.n	8001c08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bf4:	4b08      	ldr	r3, [pc, #32]	; (8001c18 <_sbrk+0x64>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bfa:	4b07      	ldr	r3, [pc, #28]	; (8001c18 <_sbrk+0x64>)
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4413      	add	r3, r2
 8001c02:	4a05      	ldr	r2, [pc, #20]	; (8001c18 <_sbrk+0x64>)
 8001c04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c06:	68fb      	ldr	r3, [r7, #12]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3718      	adds	r7, #24
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	20050000 	.word	0x20050000
 8001c14:	00000400 	.word	0x00000400
 8001c18:	2000031c 	.word	0x2000031c
 8001c1c:	20000458 	.word	0x20000458

08001c20 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c24:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <SystemInit+0x20>)
 8001c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c2a:	4a05      	ldr	r2, [pc, #20]	; (8001c40 <SystemInit+0x20>)
 8001c2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	e000ed00 	.word	0xe000ed00

08001c44 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b08e      	sub	sp, #56	; 0x38
 8001c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	605a      	str	r2, [r3, #4]
 8001c54:	609a      	str	r2, [r3, #8]
 8001c56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c58:	f107 031c 	add.w	r3, r7, #28
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	605a      	str	r2, [r3, #4]
 8001c62:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c64:	463b      	mov	r3, r7
 8001c66:	2200      	movs	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	605a      	str	r2, [r3, #4]
 8001c6c:	609a      	str	r2, [r3, #8]
 8001c6e:	60da      	str	r2, [r3, #12]
 8001c70:	611a      	str	r2, [r3, #16]
 8001c72:	615a      	str	r2, [r3, #20]
 8001c74:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c76:	4b2d      	ldr	r3, [pc, #180]	; (8001d2c <MX_TIM2_Init+0xe8>)
 8001c78:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c7c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10800-1;
 8001c7e:	4b2b      	ldr	r3, [pc, #172]	; (8001d2c <MX_TIM2_Init+0xe8>)
 8001c80:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8001c84:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c86:	4b29      	ldr	r3, [pc, #164]	; (8001d2c <MX_TIM2_Init+0xe8>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50-1;
 8001c8c:	4b27      	ldr	r3, [pc, #156]	; (8001d2c <MX_TIM2_Init+0xe8>)
 8001c8e:	2231      	movs	r2, #49	; 0x31
 8001c90:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c92:	4b26      	ldr	r3, [pc, #152]	; (8001d2c <MX_TIM2_Init+0xe8>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c98:	4b24      	ldr	r3, [pc, #144]	; (8001d2c <MX_TIM2_Init+0xe8>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c9e:	4823      	ldr	r0, [pc, #140]	; (8001d2c <MX_TIM2_Init+0xe8>)
 8001ca0:	f003 f822 	bl	8004ce8 <HAL_TIM_Base_Init>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001caa:	f7ff fd2b 	bl	8001704 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cb2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001cb4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cb8:	4619      	mov	r1, r3
 8001cba:	481c      	ldr	r0, [pc, #112]	; (8001d2c <MX_TIM2_Init+0xe8>)
 8001cbc:	f003 ffb0 	bl	8005c20 <HAL_TIM_ConfigClockSource>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001cc6:	f7ff fd1d 	bl	8001704 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001cca:	4818      	ldr	r0, [pc, #96]	; (8001d2c <MX_TIM2_Init+0xe8>)
 8001ccc:	f003 f92c 	bl	8004f28 <HAL_TIM_PWM_Init>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001cd6:	f7ff fd15 	bl	8001704 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ce2:	f107 031c 	add.w	r3, r7, #28
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4810      	ldr	r0, [pc, #64]	; (8001d2c <MX_TIM2_Init+0xe8>)
 8001cea:	f004 ffc9 	bl	8006c80 <HAL_TIMEx_MasterConfigSynchronization>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001cf4:	f7ff fd06 	bl	8001704 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cf8:	2360      	movs	r3, #96	; 0x60
 8001cfa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d00:	2300      	movs	r3, #0
 8001d02:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d04:	2300      	movs	r3, #0
 8001d06:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d08:	463b      	mov	r3, r7
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4807      	ldr	r0, [pc, #28]	; (8001d2c <MX_TIM2_Init+0xe8>)
 8001d10:	f003 fd1e 	bl	8005750 <HAL_TIM_PWM_ConfigChannel>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001d1a:	f7ff fcf3 	bl	8001704 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001d1e:	4803      	ldr	r0, [pc, #12]	; (8001d2c <MX_TIM2_Init+0xe8>)
 8001d20:	f000 f86e 	bl	8001e00 <HAL_TIM_MspPostInit>

}
 8001d24:	bf00      	nop
 8001d26:	3738      	adds	r7, #56	; 0x38
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	20000320 	.word	0x20000320

08001d30 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d36:	1d3b      	adds	r3, r7, #4
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	605a      	str	r2, [r3, #4]
 8001d3e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001d40:	4b14      	ldr	r3, [pc, #80]	; (8001d94 <MX_TIM7_Init+0x64>)
 8001d42:	4a15      	ldr	r2, [pc, #84]	; (8001d98 <MX_TIM7_Init+0x68>)
 8001d44:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10800-1;
 8001d46:	4b13      	ldr	r3, [pc, #76]	; (8001d94 <MX_TIM7_Init+0x64>)
 8001d48:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8001d4c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d4e:	4b11      	ldr	r3, [pc, #68]	; (8001d94 <MX_TIM7_Init+0x64>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 50-1;
 8001d54:	4b0f      	ldr	r3, [pc, #60]	; (8001d94 <MX_TIM7_Init+0x64>)
 8001d56:	2231      	movs	r2, #49	; 0x31
 8001d58:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d5a:	4b0e      	ldr	r3, [pc, #56]	; (8001d94 <MX_TIM7_Init+0x64>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001d60:	480c      	ldr	r0, [pc, #48]	; (8001d94 <MX_TIM7_Init+0x64>)
 8001d62:	f002 ffc1 	bl	8004ce8 <HAL_TIM_Base_Init>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001d6c:	f7ff fcca 	bl	8001704 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d70:	2300      	movs	r3, #0
 8001d72:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d74:	2300      	movs	r3, #0
 8001d76:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001d78:	1d3b      	adds	r3, r7, #4
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4805      	ldr	r0, [pc, #20]	; (8001d94 <MX_TIM7_Init+0x64>)
 8001d7e:	f004 ff7f 	bl	8006c80 <HAL_TIMEx_MasterConfigSynchronization>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001d88:	f7ff fcbc 	bl	8001704 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001d8c:	bf00      	nop
 8001d8e:	3710      	adds	r7, #16
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	2000036c 	.word	0x2000036c
 8001d98:	40001400 	.word	0x40001400

08001d9c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dac:	d10c      	bne.n	8001dc8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dae:	4b12      	ldr	r3, [pc, #72]	; (8001df8 <HAL_TIM_Base_MspInit+0x5c>)
 8001db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db2:	4a11      	ldr	r2, [pc, #68]	; (8001df8 <HAL_TIM_Base_MspInit+0x5c>)
 8001db4:	f043 0301 	orr.w	r3, r3, #1
 8001db8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dba:	4b0f      	ldr	r3, [pc, #60]	; (8001df8 <HAL_TIM_Base_MspInit+0x5c>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001dc6:	e010      	b.n	8001dea <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM7)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a0b      	ldr	r2, [pc, #44]	; (8001dfc <HAL_TIM_Base_MspInit+0x60>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d10b      	bne.n	8001dea <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001dd2:	4b09      	ldr	r3, [pc, #36]	; (8001df8 <HAL_TIM_Base_MspInit+0x5c>)
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	4a08      	ldr	r2, [pc, #32]	; (8001df8 <HAL_TIM_Base_MspInit+0x5c>)
 8001dd8:	f043 0320 	orr.w	r3, r3, #32
 8001ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8001dde:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <HAL_TIM_Base_MspInit+0x5c>)
 8001de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de2:	f003 0320 	and.w	r3, r3, #32
 8001de6:	60bb      	str	r3, [r7, #8]
 8001de8:	68bb      	ldr	r3, [r7, #8]
}
 8001dea:	bf00      	nop
 8001dec:	3714      	adds	r7, #20
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	40001400 	.word	0x40001400

08001e00 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b088      	sub	sp, #32
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e08:	f107 030c 	add.w	r3, r7, #12
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	605a      	str	r2, [r3, #4]
 8001e12:	609a      	str	r2, [r3, #8]
 8001e14:	60da      	str	r2, [r3, #12]
 8001e16:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e20:	d11c      	bne.n	8001e5c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e22:	4b10      	ldr	r3, [pc, #64]	; (8001e64 <HAL_TIM_MspPostInit+0x64>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	4a0f      	ldr	r2, [pc, #60]	; (8001e64 <HAL_TIM_MspPostInit+0x64>)
 8001e28:	f043 0301 	orr.w	r3, r3, #1
 8001e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2e:	4b0d      	ldr	r3, [pc, #52]	; (8001e64 <HAL_TIM_MspPostInit+0x64>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	60bb      	str	r3, [r7, #8]
 8001e38:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001e3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e3e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e40:	2302      	movs	r3, #2
 8001e42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e44:	2300      	movs	r3, #0
 8001e46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e50:	f107 030c 	add.w	r3, r7, #12
 8001e54:	4619      	mov	r1, r3
 8001e56:	4804      	ldr	r0, [pc, #16]	; (8001e68 <HAL_TIM_MspPostInit+0x68>)
 8001e58:	f000 fb36 	bl	80024c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001e5c:	bf00      	nop
 8001e5e:	3720      	adds	r7, #32
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40023800 	.word	0x40023800
 8001e68:	40020000 	.word	0x40020000

08001e6c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e70:	4b14      	ldr	r3, [pc, #80]	; (8001ec4 <MX_USART1_UART_Init+0x58>)
 8001e72:	4a15      	ldr	r2, [pc, #84]	; (8001ec8 <MX_USART1_UART_Init+0x5c>)
 8001e74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e76:	4b13      	ldr	r3, [pc, #76]	; (8001ec4 <MX_USART1_UART_Init+0x58>)
 8001e78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e7e:	4b11      	ldr	r3, [pc, #68]	; (8001ec4 <MX_USART1_UART_Init+0x58>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e84:	4b0f      	ldr	r3, [pc, #60]	; (8001ec4 <MX_USART1_UART_Init+0x58>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ec4 <MX_USART1_UART_Init+0x58>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e90:	4b0c      	ldr	r3, [pc, #48]	; (8001ec4 <MX_USART1_UART_Init+0x58>)
 8001e92:	220c      	movs	r2, #12
 8001e94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e96:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <MX_USART1_UART_Init+0x58>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e9c:	4b09      	ldr	r3, [pc, #36]	; (8001ec4 <MX_USART1_UART_Init+0x58>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ea2:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <MX_USART1_UART_Init+0x58>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ea8:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <MX_USART1_UART_Init+0x58>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001eae:	4805      	ldr	r0, [pc, #20]	; (8001ec4 <MX_USART1_UART_Init+0x58>)
 8001eb0:	f005 f85c 	bl	8006f6c <HAL_UART_Init>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001eba:	f7ff fc23 	bl	8001704 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	200003b8 	.word	0x200003b8
 8001ec8:	40011000 	.word	0x40011000

08001ecc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b0ac      	sub	sp, #176	; 0xb0
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	605a      	str	r2, [r3, #4]
 8001ede:	609a      	str	r2, [r3, #8]
 8001ee0:	60da      	str	r2, [r3, #12]
 8001ee2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ee4:	f107 0318 	add.w	r3, r7, #24
 8001ee8:	2284      	movs	r2, #132	; 0x84
 8001eea:	2100      	movs	r1, #0
 8001eec:	4618      	mov	r0, r3
 8001eee:	f006 fd0b 	bl	8008908 <memset>
  if(uartHandle->Instance==USART1)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a32      	ldr	r2, [pc, #200]	; (8001fc0 <HAL_UART_MspInit+0xf4>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d15c      	bne.n	8001fb6 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001efc:	2340      	movs	r3, #64	; 0x40
 8001efe:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001f00:	2300      	movs	r3, #0
 8001f02:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f04:	f107 0318 	add.w	r3, r7, #24
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f001 ff09 	bl	8003d20 <HAL_RCCEx_PeriphCLKConfig>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f14:	f7ff fbf6 	bl	8001704 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f18:	4b2a      	ldr	r3, [pc, #168]	; (8001fc4 <HAL_UART_MspInit+0xf8>)
 8001f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1c:	4a29      	ldr	r2, [pc, #164]	; (8001fc4 <HAL_UART_MspInit+0xf8>)
 8001f1e:	f043 0310 	orr.w	r3, r3, #16
 8001f22:	6453      	str	r3, [r2, #68]	; 0x44
 8001f24:	4b27      	ldr	r3, [pc, #156]	; (8001fc4 <HAL_UART_MspInit+0xf8>)
 8001f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f28:	f003 0310 	and.w	r3, r3, #16
 8001f2c:	617b      	str	r3, [r7, #20]
 8001f2e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f30:	4b24      	ldr	r3, [pc, #144]	; (8001fc4 <HAL_UART_MspInit+0xf8>)
 8001f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f34:	4a23      	ldr	r2, [pc, #140]	; (8001fc4 <HAL_UART_MspInit+0xf8>)
 8001f36:	f043 0302 	orr.w	r3, r3, #2
 8001f3a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f3c:	4b21      	ldr	r3, [pc, #132]	; (8001fc4 <HAL_UART_MspInit+0xf8>)
 8001f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	613b      	str	r3, [r7, #16]
 8001f46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f48:	4b1e      	ldr	r3, [pc, #120]	; (8001fc4 <HAL_UART_MspInit+0xf8>)
 8001f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4c:	4a1d      	ldr	r2, [pc, #116]	; (8001fc4 <HAL_UART_MspInit+0xf8>)
 8001f4e:	f043 0301 	orr.w	r3, r3, #1
 8001f52:	6313      	str	r3, [r2, #48]	; 0x30
 8001f54:	4b1b      	ldr	r3, [pc, #108]	; (8001fc4 <HAL_UART_MspInit+0xf8>)
 8001f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f58:	f003 0301 	and.w	r3, r3, #1
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001f60:	2380      	movs	r3, #128	; 0x80
 8001f62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f66:	2302      	movs	r3, #2
 8001f68:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f72:	2303      	movs	r3, #3
 8001f74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f78:	2307      	movs	r3, #7
 8001f7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f7e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f82:	4619      	mov	r1, r3
 8001f84:	4810      	ldr	r0, [pc, #64]	; (8001fc8 <HAL_UART_MspInit+0xfc>)
 8001f86:	f000 fa9f 	bl	80024c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f92:	2302      	movs	r3, #2
 8001f94:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001fa4:	2307      	movs	r3, #7
 8001fa6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001faa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001fae:	4619      	mov	r1, r3
 8001fb0:	4806      	ldr	r0, [pc, #24]	; (8001fcc <HAL_UART_MspInit+0x100>)
 8001fb2:	f000 fa89 	bl	80024c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001fb6:	bf00      	nop
 8001fb8:	37b0      	adds	r7, #176	; 0xb0
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40011000 	.word	0x40011000
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	40020400 	.word	0x40020400
 8001fcc:	40020000 	.word	0x40020000

08001fd0 <Reset_Handler>:
 8001fd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002008 <LoopFillZerobss+0x12>
 8001fd4:	480d      	ldr	r0, [pc, #52]	; (800200c <LoopFillZerobss+0x16>)
 8001fd6:	490e      	ldr	r1, [pc, #56]	; (8002010 <LoopFillZerobss+0x1a>)
 8001fd8:	4a0e      	ldr	r2, [pc, #56]	; (8002014 <LoopFillZerobss+0x1e>)
 8001fda:	2300      	movs	r3, #0
 8001fdc:	e002      	b.n	8001fe4 <LoopCopyDataInit>

08001fde <CopyDataInit>:
 8001fde:	58d4      	ldr	r4, [r2, r3]
 8001fe0:	50c4      	str	r4, [r0, r3]
 8001fe2:	3304      	adds	r3, #4

08001fe4 <LoopCopyDataInit>:
 8001fe4:	18c4      	adds	r4, r0, r3
 8001fe6:	428c      	cmp	r4, r1
 8001fe8:	d3f9      	bcc.n	8001fde <CopyDataInit>
 8001fea:	4a0b      	ldr	r2, [pc, #44]	; (8002018 <LoopFillZerobss+0x22>)
 8001fec:	4c0b      	ldr	r4, [pc, #44]	; (800201c <LoopFillZerobss+0x26>)
 8001fee:	2300      	movs	r3, #0
 8001ff0:	e001      	b.n	8001ff6 <LoopFillZerobss>

08001ff2 <FillZerobss>:
 8001ff2:	6013      	str	r3, [r2, #0]
 8001ff4:	3204      	adds	r2, #4

08001ff6 <LoopFillZerobss>:
 8001ff6:	42a2      	cmp	r2, r4
 8001ff8:	d3fb      	bcc.n	8001ff2 <FillZerobss>
 8001ffa:	f7ff fe11 	bl	8001c20 <SystemInit>
 8001ffe:	f006 fc51 	bl	80088a4 <__libc_init_array>
 8002002:	f7ff f99d 	bl	8001340 <main>
 8002006:	4770      	bx	lr
 8002008:	20050000 	.word	0x20050000
 800200c:	20000000 	.word	0x20000000
 8002010:	200001e0 	.word	0x200001e0
 8002014:	0800e19c 	.word	0x0800e19c
 8002018:	200001e0 	.word	0x200001e0
 800201c:	20000454 	.word	0x20000454

08002020 <ADC_IRQHandler>:
 8002020:	e7fe      	b.n	8002020 <ADC_IRQHandler>

08002022 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002026:	2003      	movs	r0, #3
 8002028:	f000 f94c 	bl	80022c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800202c:	200f      	movs	r0, #15
 800202e:	f000 f805 	bl	800203c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002032:	f7ff fcbd 	bl	80019b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002036:	2300      	movs	r3, #0
}
 8002038:	4618      	mov	r0, r3
 800203a:	bd80      	pop	{r7, pc}

0800203c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002044:	4b12      	ldr	r3, [pc, #72]	; (8002090 <HAL_InitTick+0x54>)
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	4b12      	ldr	r3, [pc, #72]	; (8002094 <HAL_InitTick+0x58>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	4619      	mov	r1, r3
 800204e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002052:	fbb3 f3f1 	udiv	r3, r3, r1
 8002056:	fbb2 f3f3 	udiv	r3, r2, r3
 800205a:	4618      	mov	r0, r3
 800205c:	f000 f996 	bl	800238c <HAL_SYSTICK_Config>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e00e      	b.n	8002088 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2b0f      	cmp	r3, #15
 800206e:	d80a      	bhi.n	8002086 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002070:	2200      	movs	r2, #0
 8002072:	6879      	ldr	r1, [r7, #4]
 8002074:	f04f 30ff 	mov.w	r0, #4294967295
 8002078:	f000 f944 	bl	8002304 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800207c:	4a06      	ldr	r2, [pc, #24]	; (8002098 <HAL_InitTick+0x5c>)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002082:	2300      	movs	r3, #0
 8002084:	e000      	b.n	8002088 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
}
 8002088:	4618      	mov	r0, r3
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	20000000 	.word	0x20000000
 8002094:	20000008 	.word	0x20000008
 8002098:	20000004 	.word	0x20000004

0800209c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020a0:	4b06      	ldr	r3, [pc, #24]	; (80020bc <HAL_IncTick+0x20>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	461a      	mov	r2, r3
 80020a6:	4b06      	ldr	r3, [pc, #24]	; (80020c0 <HAL_IncTick+0x24>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4413      	add	r3, r2
 80020ac:	4a04      	ldr	r2, [pc, #16]	; (80020c0 <HAL_IncTick+0x24>)
 80020ae:	6013      	str	r3, [r2, #0]
}
 80020b0:	bf00      	nop
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	20000008 	.word	0x20000008
 80020c0:	20000440 	.word	0x20000440

080020c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  return uwTick;
 80020c8:	4b03      	ldr	r3, [pc, #12]	; (80020d8 <HAL_GetTick+0x14>)
 80020ca:	681b      	ldr	r3, [r3, #0]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	20000440 	.word	0x20000440

080020dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020e4:	f7ff ffee 	bl	80020c4 <HAL_GetTick>
 80020e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020f4:	d005      	beq.n	8002102 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020f6:	4b0a      	ldr	r3, [pc, #40]	; (8002120 <HAL_Delay+0x44>)
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	461a      	mov	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	4413      	add	r3, r2
 8002100:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002102:	bf00      	nop
 8002104:	f7ff ffde 	bl	80020c4 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	429a      	cmp	r2, r3
 8002112:	d8f7      	bhi.n	8002104 <HAL_Delay+0x28>
  {
  }
}
 8002114:	bf00      	nop
 8002116:	bf00      	nop
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	20000008 	.word	0x20000008

08002124 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002134:	4b0b      	ldr	r3, [pc, #44]	; (8002164 <__NVIC_SetPriorityGrouping+0x40>)
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800213a:	68ba      	ldr	r2, [r7, #8]
 800213c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002140:	4013      	ands	r3, r2
 8002142:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800214c:	4b06      	ldr	r3, [pc, #24]	; (8002168 <__NVIC_SetPriorityGrouping+0x44>)
 800214e:	4313      	orrs	r3, r2
 8002150:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002152:	4a04      	ldr	r2, [pc, #16]	; (8002164 <__NVIC_SetPriorityGrouping+0x40>)
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	60d3      	str	r3, [r2, #12]
}
 8002158:	bf00      	nop
 800215a:	3714      	adds	r7, #20
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	e000ed00 	.word	0xe000ed00
 8002168:	05fa0000 	.word	0x05fa0000

0800216c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002170:	4b04      	ldr	r3, [pc, #16]	; (8002184 <__NVIC_GetPriorityGrouping+0x18>)
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	0a1b      	lsrs	r3, r3, #8
 8002176:	f003 0307 	and.w	r3, r3, #7
}
 800217a:	4618      	mov	r0, r3
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	e000ed00 	.word	0xe000ed00

08002188 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	4603      	mov	r3, r0
 8002190:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002196:	2b00      	cmp	r3, #0
 8002198:	db0b      	blt.n	80021b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800219a:	79fb      	ldrb	r3, [r7, #7]
 800219c:	f003 021f 	and.w	r2, r3, #31
 80021a0:	4907      	ldr	r1, [pc, #28]	; (80021c0 <__NVIC_EnableIRQ+0x38>)
 80021a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a6:	095b      	lsrs	r3, r3, #5
 80021a8:	2001      	movs	r0, #1
 80021aa:	fa00 f202 	lsl.w	r2, r0, r2
 80021ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021b2:	bf00      	nop
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	e000e100 	.word	0xe000e100

080021c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	4603      	mov	r3, r0
 80021cc:	6039      	str	r1, [r7, #0]
 80021ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	db0a      	blt.n	80021ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	490c      	ldr	r1, [pc, #48]	; (8002210 <__NVIC_SetPriority+0x4c>)
 80021de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e2:	0112      	lsls	r2, r2, #4
 80021e4:	b2d2      	uxtb	r2, r2
 80021e6:	440b      	add	r3, r1
 80021e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021ec:	e00a      	b.n	8002204 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	b2da      	uxtb	r2, r3
 80021f2:	4908      	ldr	r1, [pc, #32]	; (8002214 <__NVIC_SetPriority+0x50>)
 80021f4:	79fb      	ldrb	r3, [r7, #7]
 80021f6:	f003 030f 	and.w	r3, r3, #15
 80021fa:	3b04      	subs	r3, #4
 80021fc:	0112      	lsls	r2, r2, #4
 80021fe:	b2d2      	uxtb	r2, r2
 8002200:	440b      	add	r3, r1
 8002202:	761a      	strb	r2, [r3, #24]
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	e000e100 	.word	0xe000e100
 8002214:	e000ed00 	.word	0xe000ed00

08002218 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002218:	b480      	push	{r7}
 800221a:	b089      	sub	sp, #36	; 0x24
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f003 0307 	and.w	r3, r3, #7
 800222a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	f1c3 0307 	rsb	r3, r3, #7
 8002232:	2b04      	cmp	r3, #4
 8002234:	bf28      	it	cs
 8002236:	2304      	movcs	r3, #4
 8002238:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	3304      	adds	r3, #4
 800223e:	2b06      	cmp	r3, #6
 8002240:	d902      	bls.n	8002248 <NVIC_EncodePriority+0x30>
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	3b03      	subs	r3, #3
 8002246:	e000      	b.n	800224a <NVIC_EncodePriority+0x32>
 8002248:	2300      	movs	r3, #0
 800224a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800224c:	f04f 32ff 	mov.w	r2, #4294967295
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	43da      	mvns	r2, r3
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	401a      	ands	r2, r3
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002260:	f04f 31ff 	mov.w	r1, #4294967295
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	fa01 f303 	lsl.w	r3, r1, r3
 800226a:	43d9      	mvns	r1, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002270:	4313      	orrs	r3, r2
         );
}
 8002272:	4618      	mov	r0, r3
 8002274:	3724      	adds	r7, #36	; 0x24
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
	...

08002280 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3b01      	subs	r3, #1
 800228c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002290:	d301      	bcc.n	8002296 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002292:	2301      	movs	r3, #1
 8002294:	e00f      	b.n	80022b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002296:	4a0a      	ldr	r2, [pc, #40]	; (80022c0 <SysTick_Config+0x40>)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3b01      	subs	r3, #1
 800229c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800229e:	210f      	movs	r1, #15
 80022a0:	f04f 30ff 	mov.w	r0, #4294967295
 80022a4:	f7ff ff8e 	bl	80021c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022a8:	4b05      	ldr	r3, [pc, #20]	; (80022c0 <SysTick_Config+0x40>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ae:	4b04      	ldr	r3, [pc, #16]	; (80022c0 <SysTick_Config+0x40>)
 80022b0:	2207      	movs	r2, #7
 80022b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	e000e010 	.word	0xe000e010

080022c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2b07      	cmp	r3, #7
 80022d0:	d00f      	beq.n	80022f2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2b06      	cmp	r3, #6
 80022d6:	d00c      	beq.n	80022f2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b05      	cmp	r3, #5
 80022dc:	d009      	beq.n	80022f2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2b04      	cmp	r3, #4
 80022e2:	d006      	beq.n	80022f2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2b03      	cmp	r3, #3
 80022e8:	d003      	beq.n	80022f2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80022ea:	2191      	movs	r1, #145	; 0x91
 80022ec:	4804      	ldr	r0, [pc, #16]	; (8002300 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80022ee:	f7ff fa0e 	bl	800170e <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f7ff ff16 	bl	8002124 <__NVIC_SetPriorityGrouping>
}
 80022f8:	bf00      	nop
 80022fa:	3708      	adds	r7, #8
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	0800da9c 	.word	0x0800da9c

08002304 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
 800230a:	4603      	mov	r3, r0
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
 8002310:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002312:	2300      	movs	r3, #0
 8002314:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2b0f      	cmp	r3, #15
 800231a:	d903      	bls.n	8002324 <HAL_NVIC_SetPriority+0x20>
 800231c:	21a9      	movs	r1, #169	; 0xa9
 800231e:	480e      	ldr	r0, [pc, #56]	; (8002358 <HAL_NVIC_SetPriority+0x54>)
 8002320:	f7ff f9f5 	bl	800170e <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	2b0f      	cmp	r3, #15
 8002328:	d903      	bls.n	8002332 <HAL_NVIC_SetPriority+0x2e>
 800232a:	21aa      	movs	r1, #170	; 0xaa
 800232c:	480a      	ldr	r0, [pc, #40]	; (8002358 <HAL_NVIC_SetPriority+0x54>)
 800232e:	f7ff f9ee 	bl	800170e <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002332:	f7ff ff1b 	bl	800216c <__NVIC_GetPriorityGrouping>
 8002336:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	68b9      	ldr	r1, [r7, #8]
 800233c:	6978      	ldr	r0, [r7, #20]
 800233e:	f7ff ff6b 	bl	8002218 <NVIC_EncodePriority>
 8002342:	4602      	mov	r2, r0
 8002344:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002348:	4611      	mov	r1, r2
 800234a:	4618      	mov	r0, r3
 800234c:	f7ff ff3a 	bl	80021c4 <__NVIC_SetPriority>
}
 8002350:	bf00      	nop
 8002352:	3718      	adds	r7, #24
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	0800da9c 	.word	0x0800da9c

0800235c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236a:	2b00      	cmp	r3, #0
 800236c:	da03      	bge.n	8002376 <HAL_NVIC_EnableIRQ+0x1a>
 800236e:	21bd      	movs	r1, #189	; 0xbd
 8002370:	4805      	ldr	r0, [pc, #20]	; (8002388 <HAL_NVIC_EnableIRQ+0x2c>)
 8002372:	f7ff f9cc 	bl	800170e <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff ff04 	bl	8002188 <__NVIC_EnableIRQ>
}
 8002380:	bf00      	nop
 8002382:	3708      	adds	r7, #8
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	0800da9c 	.word	0x0800da9c

0800238c <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f7ff ff73 	bl	8002280 <SysTick_Config>
 800239a:	4603      	mov	r3, r0
}
 800239c:	4618      	mov	r0, r3
 800239e:	3708      	adds	r7, #8
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80023b2:	f7ff fe87 	bl	80020c4 <HAL_GetTick>
 80023b6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d008      	beq.n	80023d6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2280      	movs	r2, #128	; 0x80
 80023c8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e052      	b.n	800247c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 0216 	bic.w	r2, r2, #22
 80023e4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	695a      	ldr	r2, [r3, #20]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023f4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d103      	bne.n	8002406 <HAL_DMA_Abort+0x62>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002402:	2b00      	cmp	r3, #0
 8002404:	d007      	beq.n	8002416 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f022 0208 	bic.w	r2, r2, #8
 8002414:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f022 0201 	bic.w	r2, r2, #1
 8002424:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002426:	e013      	b.n	8002450 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002428:	f7ff fe4c 	bl	80020c4 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b05      	cmp	r3, #5
 8002434:	d90c      	bls.n	8002450 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2220      	movs	r2, #32
 800243a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2203      	movs	r2, #3
 8002440:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e015      	b.n	800247c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	2b00      	cmp	r3, #0
 800245c:	d1e4      	bne.n	8002428 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002462:	223f      	movs	r2, #63	; 0x3f
 8002464:	409a      	lsls	r2, r3
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2201      	movs	r2, #1
 800246e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	3710      	adds	r7, #16
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002492:	b2db      	uxtb	r3, r3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d004      	beq.n	80024a2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2280      	movs	r2, #128	; 0x80
 800249c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e00c      	b.n	80024bc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2205      	movs	r2, #5
 80024a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f022 0201 	bic.w	r2, r2, #1
 80024b8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b088      	sub	sp, #32
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80024d2:	2300      	movs	r3, #0
 80024d4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80024d6:	2300      	movs	r3, #0
 80024d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80024da:	2300      	movs	r3, #0
 80024dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80024de:	2300      	movs	r3, #0
 80024e0:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a3a      	ldr	r2, [pc, #232]	; (80025d0 <HAL_GPIO_Init+0x108>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d02b      	beq.n	8002542 <HAL_GPIO_Init+0x7a>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a39      	ldr	r2, [pc, #228]	; (80025d4 <HAL_GPIO_Init+0x10c>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d027      	beq.n	8002542 <HAL_GPIO_Init+0x7a>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a38      	ldr	r2, [pc, #224]	; (80025d8 <HAL_GPIO_Init+0x110>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d023      	beq.n	8002542 <HAL_GPIO_Init+0x7a>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a37      	ldr	r2, [pc, #220]	; (80025dc <HAL_GPIO_Init+0x114>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d01f      	beq.n	8002542 <HAL_GPIO_Init+0x7a>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a36      	ldr	r2, [pc, #216]	; (80025e0 <HAL_GPIO_Init+0x118>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d01b      	beq.n	8002542 <HAL_GPIO_Init+0x7a>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a35      	ldr	r2, [pc, #212]	; (80025e4 <HAL_GPIO_Init+0x11c>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d017      	beq.n	8002542 <HAL_GPIO_Init+0x7a>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a34      	ldr	r2, [pc, #208]	; (80025e8 <HAL_GPIO_Init+0x120>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d013      	beq.n	8002542 <HAL_GPIO_Init+0x7a>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a33      	ldr	r2, [pc, #204]	; (80025ec <HAL_GPIO_Init+0x124>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d00f      	beq.n	8002542 <HAL_GPIO_Init+0x7a>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a32      	ldr	r2, [pc, #200]	; (80025f0 <HAL_GPIO_Init+0x128>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d00b      	beq.n	8002542 <HAL_GPIO_Init+0x7a>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a31      	ldr	r2, [pc, #196]	; (80025f4 <HAL_GPIO_Init+0x12c>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d007      	beq.n	8002542 <HAL_GPIO_Init+0x7a>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a30      	ldr	r2, [pc, #192]	; (80025f8 <HAL_GPIO_Init+0x130>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d003      	beq.n	8002542 <HAL_GPIO_Init+0x7a>
 800253a:	21aa      	movs	r1, #170	; 0xaa
 800253c:	482f      	ldr	r0, [pc, #188]	; (80025fc <HAL_GPIO_Init+0x134>)
 800253e:	f7ff f8e6 	bl	800170e <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	b29b      	uxth	r3, r3
 8002548:	2b00      	cmp	r3, #0
 800254a:	d103      	bne.n	8002554 <HAL_GPIO_Init+0x8c>
 800254c:	21ab      	movs	r1, #171	; 0xab
 800254e:	482b      	ldr	r0, [pc, #172]	; (80025fc <HAL_GPIO_Init+0x134>)
 8002550:	f7ff f8dd 	bl	800170e <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d035      	beq.n	80025c8 <HAL_GPIO_Init+0x100>
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d031      	beq.n	80025c8 <HAL_GPIO_Init+0x100>
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	2b11      	cmp	r3, #17
 800256a:	d02d      	beq.n	80025c8 <HAL_GPIO_Init+0x100>
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	2b02      	cmp	r3, #2
 8002572:	d029      	beq.n	80025c8 <HAL_GPIO_Init+0x100>
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	2b12      	cmp	r3, #18
 800257a:	d025      	beq.n	80025c8 <HAL_GPIO_Init+0x100>
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8002584:	d020      	beq.n	80025c8 <HAL_GPIO_Init+0x100>
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800258e:	d01b      	beq.n	80025c8 <HAL_GPIO_Init+0x100>
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8002598:	d016      	beq.n	80025c8 <HAL_GPIO_Init+0x100>
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 80025a2:	d011      	beq.n	80025c8 <HAL_GPIO_Init+0x100>
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 80025ac:	d00c      	beq.n	80025c8 <HAL_GPIO_Init+0x100>
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 80025b6:	d007      	beq.n	80025c8 <HAL_GPIO_Init+0x100>
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	2b03      	cmp	r3, #3
 80025be:	d003      	beq.n	80025c8 <HAL_GPIO_Init+0x100>
 80025c0:	21ac      	movs	r1, #172	; 0xac
 80025c2:	480e      	ldr	r0, [pc, #56]	; (80025fc <HAL_GPIO_Init+0x134>)
 80025c4:	f7ff f8a3 	bl	800170e <assert_failed>

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80025c8:	2300      	movs	r3, #0
 80025ca:	61fb      	str	r3, [r7, #28]
 80025cc:	e2c7      	b.n	8002b5e <HAL_GPIO_Init+0x696>
 80025ce:	bf00      	nop
 80025d0:	40020000 	.word	0x40020000
 80025d4:	40020400 	.word	0x40020400
 80025d8:	40020800 	.word	0x40020800
 80025dc:	40020c00 	.word	0x40020c00
 80025e0:	40021000 	.word	0x40021000
 80025e4:	40021400 	.word	0x40021400
 80025e8:	40021800 	.word	0x40021800
 80025ec:	40021c00 	.word	0x40021c00
 80025f0:	40022000 	.word	0x40022000
 80025f4:	40022400 	.word	0x40022400
 80025f8:	40022800 	.word	0x40022800
 80025fc:	0800dad8 	.word	0x0800dad8
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002600:	2201      	movs	r2, #1
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	4013      	ands	r3, r2
 8002612:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	429a      	cmp	r2, r3
 800261a:	f040 829d 	bne.w	8002b58 <HAL_GPIO_Init+0x690>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f003 0303 	and.w	r3, r3, #3
 8002626:	2b01      	cmp	r3, #1
 8002628:	d005      	beq.n	8002636 <HAL_GPIO_Init+0x16e>
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f003 0303 	and.w	r3, r3, #3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d144      	bne.n	80026c0 <HAL_GPIO_Init+0x1f8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00f      	beq.n	800265e <HAL_GPIO_Init+0x196>
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d00b      	beq.n	800265e <HAL_GPIO_Init+0x196>
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	2b02      	cmp	r3, #2
 800264c:	d007      	beq.n	800265e <HAL_GPIO_Init+0x196>
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	2b03      	cmp	r3, #3
 8002654:	d003      	beq.n	800265e <HAL_GPIO_Init+0x196>
 8002656:	21bd      	movs	r1, #189	; 0xbd
 8002658:	4831      	ldr	r0, [pc, #196]	; (8002720 <HAL_GPIO_Init+0x258>)
 800265a:	f7ff f858 	bl	800170e <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	2203      	movs	r2, #3
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	43db      	mvns	r3, r3
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	4013      	ands	r3, r2
 8002674:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	68da      	ldr	r2, [r3, #12]
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	4313      	orrs	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002694:	2201      	movs	r2, #1
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	fa02 f303 	lsl.w	r3, r2, r3
 800269c:	43db      	mvns	r3, r3
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	4013      	ands	r3, r2
 80026a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	091b      	lsrs	r3, r3, #4
 80026aa:	f003 0201 	and.w	r2, r3, #1
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f003 0303 	and.w	r3, r3, #3
 80026c8:	2b03      	cmp	r3, #3
 80026ca:	d02b      	beq.n	8002724 <HAL_GPIO_Init+0x25c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d00b      	beq.n	80026ec <HAL_GPIO_Init+0x224>
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d007      	beq.n	80026ec <HAL_GPIO_Init+0x224>
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d003      	beq.n	80026ec <HAL_GPIO_Init+0x224>
 80026e4:	21ce      	movs	r1, #206	; 0xce
 80026e6:	480e      	ldr	r0, [pc, #56]	; (8002720 <HAL_GPIO_Init+0x258>)
 80026e8:	f7ff f811 	bl	800170e <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	2203      	movs	r2, #3
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	43db      	mvns	r3, r3
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	4013      	ands	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	689a      	ldr	r2, [r3, #8]
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	4313      	orrs	r3, r2
 8002714:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	60da      	str	r2, [r3, #12]
 800271c:	e002      	b.n	8002724 <HAL_GPIO_Init+0x25c>
 800271e:	bf00      	nop
 8002720:	0800dad8 	.word	0x0800dad8
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f003 0303 	and.w	r3, r3, #3
 800272c:	2b02      	cmp	r3, #2
 800272e:	f040 8134 	bne.w	800299a <HAL_GPIO_Init+0x4d2>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	2b00      	cmp	r3, #0
 8002738:	f000 810b 	beq.w	8002952 <HAL_GPIO_Init+0x48a>
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	2b01      	cmp	r3, #1
 8002742:	f000 8106 	beq.w	8002952 <HAL_GPIO_Init+0x48a>
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	2b00      	cmp	r3, #0
 800274c:	f000 8101 	beq.w	8002952 <HAL_GPIO_Init+0x48a>
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	2b00      	cmp	r3, #0
 8002756:	f000 80fc 	beq.w	8002952 <HAL_GPIO_Init+0x48a>
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	2b00      	cmp	r3, #0
 8002760:	f000 80f7 	beq.w	8002952 <HAL_GPIO_Init+0x48a>
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	2b01      	cmp	r3, #1
 800276a:	f000 80f2 	beq.w	8002952 <HAL_GPIO_Init+0x48a>
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	2b02      	cmp	r3, #2
 8002774:	f000 80ed 	beq.w	8002952 <HAL_GPIO_Init+0x48a>
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	2b02      	cmp	r3, #2
 800277e:	f000 80e8 	beq.w	8002952 <HAL_GPIO_Init+0x48a>
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	2b02      	cmp	r3, #2
 8002788:	f000 80e3 	beq.w	8002952 <HAL_GPIO_Init+0x48a>
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	2b03      	cmp	r3, #3
 8002792:	f000 80de 	beq.w	8002952 <HAL_GPIO_Init+0x48a>
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	2b03      	cmp	r3, #3
 800279c:	f000 80d9 	beq.w	8002952 <HAL_GPIO_Init+0x48a>
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	2b03      	cmp	r3, #3
 80027a6:	f000 80d4 	beq.w	8002952 <HAL_GPIO_Init+0x48a>
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	2b03      	cmp	r3, #3
 80027b0:	f000 80cf 	beq.w	8002952 <HAL_GPIO_Init+0x48a>
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	2b03      	cmp	r3, #3
 80027ba:	f000 80ca 	beq.w	8002952 <HAL_GPIO_Init+0x48a>
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	2b03      	cmp	r3, #3
 80027c4:	f000 80c5 	beq.w	8002952 <HAL_GPIO_Init+0x48a>
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	2b04      	cmp	r3, #4
 80027ce:	f000 80c0 	beq.w	8002952 <HAL_GPIO_Init+0x48a>
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	2b04      	cmp	r3, #4
 80027d8:	f000 80bb 	beq.w	8002952 <HAL_GPIO_Init+0x48a>
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	691b      	ldr	r3, [r3, #16]
 80027e0:	2b04      	cmp	r3, #4
 80027e2:	f000 80b6 	beq.w	8002952 <HAL_GPIO_Init+0x48a>
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	2b04      	cmp	r3, #4
 80027ec:	f000 80b1 	beq.w	8002952 <HAL_GPIO_Init+0x48a>
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	2b04      	cmp	r3, #4
 80027f6:	f000 80ac 	beq.w	8002952 <HAL_GPIO_Init+0x48a>
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	2b05      	cmp	r3, #5
 8002800:	f000 80a7 	beq.w	8002952 <HAL_GPIO_Init+0x48a>
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	2b05      	cmp	r3, #5
 800280a:	f000 80a2 	beq.w	8002952 <HAL_GPIO_Init+0x48a>
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	2b05      	cmp	r3, #5
 8002814:	f000 809d 	beq.w	8002952 <HAL_GPIO_Init+0x48a>
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	2b05      	cmp	r3, #5
 800281e:	f000 8098 	beq.w	8002952 <HAL_GPIO_Init+0x48a>
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	2b05      	cmp	r3, #5
 8002828:	f000 8093 	beq.w	8002952 <HAL_GPIO_Init+0x48a>
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	691b      	ldr	r3, [r3, #16]
 8002830:	2b05      	cmp	r3, #5
 8002832:	f000 808e 	beq.w	8002952 <HAL_GPIO_Init+0x48a>
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	2b06      	cmp	r3, #6
 800283c:	f000 8089 	beq.w	8002952 <HAL_GPIO_Init+0x48a>
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	2b06      	cmp	r3, #6
 8002846:	f000 8084 	beq.w	8002952 <HAL_GPIO_Init+0x48a>
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	2b07      	cmp	r3, #7
 8002850:	d07f      	beq.n	8002952 <HAL_GPIO_Init+0x48a>
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	2b07      	cmp	r3, #7
 8002858:	d07b      	beq.n	8002952 <HAL_GPIO_Init+0x48a>
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	2b07      	cmp	r3, #7
 8002860:	d077      	beq.n	8002952 <HAL_GPIO_Init+0x48a>
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	2b07      	cmp	r3, #7
 8002868:	d073      	beq.n	8002952 <HAL_GPIO_Init+0x48a>
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	2b07      	cmp	r3, #7
 8002870:	d06f      	beq.n	8002952 <HAL_GPIO_Init+0x48a>
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	2b07      	cmp	r3, #7
 8002878:	d06b      	beq.n	8002952 <HAL_GPIO_Init+0x48a>
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	2b07      	cmp	r3, #7
 8002880:	d067      	beq.n	8002952 <HAL_GPIO_Init+0x48a>
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	2b08      	cmp	r3, #8
 8002888:	d063      	beq.n	8002952 <HAL_GPIO_Init+0x48a>
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	2b08      	cmp	r3, #8
 8002890:	d05f      	beq.n	8002952 <HAL_GPIO_Init+0x48a>
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	2b08      	cmp	r3, #8
 8002898:	d05b      	beq.n	8002952 <HAL_GPIO_Init+0x48a>
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	2b08      	cmp	r3, #8
 80028a0:	d057      	beq.n	8002952 <HAL_GPIO_Init+0x48a>
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	2b08      	cmp	r3, #8
 80028a8:	d053      	beq.n	8002952 <HAL_GPIO_Init+0x48a>
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	2b08      	cmp	r3, #8
 80028b0:	d04f      	beq.n	8002952 <HAL_GPIO_Init+0x48a>
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	2b08      	cmp	r3, #8
 80028b8:	d04b      	beq.n	8002952 <HAL_GPIO_Init+0x48a>
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	2b09      	cmp	r3, #9
 80028c0:	d047      	beq.n	8002952 <HAL_GPIO_Init+0x48a>
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	2b09      	cmp	r3, #9
 80028c8:	d043      	beq.n	8002952 <HAL_GPIO_Init+0x48a>
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	2b09      	cmp	r3, #9
 80028d0:	d03f      	beq.n	8002952 <HAL_GPIO_Init+0x48a>
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	2b09      	cmp	r3, #9
 80028d8:	d03b      	beq.n	8002952 <HAL_GPIO_Init+0x48a>
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	2b09      	cmp	r3, #9
 80028e0:	d037      	beq.n	8002952 <HAL_GPIO_Init+0x48a>
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	2b09      	cmp	r3, #9
 80028e8:	d033      	beq.n	8002952 <HAL_GPIO_Init+0x48a>
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	2b09      	cmp	r3, #9
 80028f0:	d02f      	beq.n	8002952 <HAL_GPIO_Init+0x48a>
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	2b0a      	cmp	r3, #10
 80028f8:	d02b      	beq.n	8002952 <HAL_GPIO_Init+0x48a>
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	2b0a      	cmp	r3, #10
 8002900:	d027      	beq.n	8002952 <HAL_GPIO_Init+0x48a>
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	2b0a      	cmp	r3, #10
 8002908:	d023      	beq.n	8002952 <HAL_GPIO_Init+0x48a>
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	2b0a      	cmp	r3, #10
 8002910:	d01f      	beq.n	8002952 <HAL_GPIO_Init+0x48a>
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	2b0b      	cmp	r3, #11
 8002918:	d01b      	beq.n	8002952 <HAL_GPIO_Init+0x48a>
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	2b0c      	cmp	r3, #12
 8002920:	d017      	beq.n	8002952 <HAL_GPIO_Init+0x48a>
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	2b0c      	cmp	r3, #12
 8002928:	d013      	beq.n	8002952 <HAL_GPIO_Init+0x48a>
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	2b0c      	cmp	r3, #12
 8002930:	d00f      	beq.n	8002952 <HAL_GPIO_Init+0x48a>
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	2b0f      	cmp	r3, #15
 8002938:	d00b      	beq.n	8002952 <HAL_GPIO_Init+0x48a>
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	2b0d      	cmp	r3, #13
 8002940:	d007      	beq.n	8002952 <HAL_GPIO_Init+0x48a>
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	2b0e      	cmp	r3, #14
 8002948:	d003      	beq.n	8002952 <HAL_GPIO_Init+0x48a>
 800294a:	21db      	movs	r1, #219	; 0xdb
 800294c:	4888      	ldr	r0, [pc, #544]	; (8002b70 <HAL_GPIO_Init+0x6a8>)
 800294e:	f7fe fede 	bl	800170e <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	08da      	lsrs	r2, r3, #3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	3208      	adds	r2, #8
 800295a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800295e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	f003 0307 	and.w	r3, r3, #7
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	220f      	movs	r2, #15
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	43db      	mvns	r3, r3
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	4013      	ands	r3, r2
 8002974:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	691a      	ldr	r2, [r3, #16]
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	4313      	orrs	r3, r2
 800298a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	08da      	lsrs	r2, r3, #3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	3208      	adds	r2, #8
 8002994:	69b9      	ldr	r1, [r7, #24]
 8002996:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	2203      	movs	r2, #3
 80029a6:	fa02 f303 	lsl.w	r3, r2, r3
 80029aa:	43db      	mvns	r3, r3
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	4013      	ands	r3, r2
 80029b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f003 0203 	and.w	r2, r3, #3
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	fa02 f303 	lsl.w	r3, r2, r3
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	f000 80be 	beq.w	8002b58 <HAL_GPIO_Init+0x690>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029dc:	4b65      	ldr	r3, [pc, #404]	; (8002b74 <HAL_GPIO_Init+0x6ac>)
 80029de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e0:	4a64      	ldr	r2, [pc, #400]	; (8002b74 <HAL_GPIO_Init+0x6ac>)
 80029e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029e6:	6453      	str	r3, [r2, #68]	; 0x44
 80029e8:	4b62      	ldr	r3, [pc, #392]	; (8002b74 <HAL_GPIO_Init+0x6ac>)
 80029ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029f0:	60fb      	str	r3, [r7, #12]
 80029f2:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80029f4:	4a60      	ldr	r2, [pc, #384]	; (8002b78 <HAL_GPIO_Init+0x6b0>)
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	089b      	lsrs	r3, r3, #2
 80029fa:	3302      	adds	r3, #2
 80029fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a00:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	f003 0303 	and.w	r3, r3, #3
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	220f      	movs	r2, #15
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	43db      	mvns	r3, r3
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	4013      	ands	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4a58      	ldr	r2, [pc, #352]	; (8002b7c <HAL_GPIO_Init+0x6b4>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d037      	beq.n	8002a90 <HAL_GPIO_Init+0x5c8>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4a57      	ldr	r2, [pc, #348]	; (8002b80 <HAL_GPIO_Init+0x6b8>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d031      	beq.n	8002a8c <HAL_GPIO_Init+0x5c4>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4a56      	ldr	r2, [pc, #344]	; (8002b84 <HAL_GPIO_Init+0x6bc>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d02b      	beq.n	8002a88 <HAL_GPIO_Init+0x5c0>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4a55      	ldr	r2, [pc, #340]	; (8002b88 <HAL_GPIO_Init+0x6c0>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d025      	beq.n	8002a84 <HAL_GPIO_Init+0x5bc>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	4a54      	ldr	r2, [pc, #336]	; (8002b8c <HAL_GPIO_Init+0x6c4>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d01f      	beq.n	8002a80 <HAL_GPIO_Init+0x5b8>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a53      	ldr	r2, [pc, #332]	; (8002b90 <HAL_GPIO_Init+0x6c8>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d019      	beq.n	8002a7c <HAL_GPIO_Init+0x5b4>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4a52      	ldr	r2, [pc, #328]	; (8002b94 <HAL_GPIO_Init+0x6cc>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d013      	beq.n	8002a78 <HAL_GPIO_Init+0x5b0>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a51      	ldr	r2, [pc, #324]	; (8002b98 <HAL_GPIO_Init+0x6d0>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d00d      	beq.n	8002a74 <HAL_GPIO_Init+0x5ac>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4a50      	ldr	r2, [pc, #320]	; (8002b9c <HAL_GPIO_Init+0x6d4>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d007      	beq.n	8002a70 <HAL_GPIO_Init+0x5a8>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a4f      	ldr	r2, [pc, #316]	; (8002ba0 <HAL_GPIO_Init+0x6d8>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d101      	bne.n	8002a6c <HAL_GPIO_Init+0x5a4>
 8002a68:	2309      	movs	r3, #9
 8002a6a:	e012      	b.n	8002a92 <HAL_GPIO_Init+0x5ca>
 8002a6c:	230a      	movs	r3, #10
 8002a6e:	e010      	b.n	8002a92 <HAL_GPIO_Init+0x5ca>
 8002a70:	2308      	movs	r3, #8
 8002a72:	e00e      	b.n	8002a92 <HAL_GPIO_Init+0x5ca>
 8002a74:	2307      	movs	r3, #7
 8002a76:	e00c      	b.n	8002a92 <HAL_GPIO_Init+0x5ca>
 8002a78:	2306      	movs	r3, #6
 8002a7a:	e00a      	b.n	8002a92 <HAL_GPIO_Init+0x5ca>
 8002a7c:	2305      	movs	r3, #5
 8002a7e:	e008      	b.n	8002a92 <HAL_GPIO_Init+0x5ca>
 8002a80:	2304      	movs	r3, #4
 8002a82:	e006      	b.n	8002a92 <HAL_GPIO_Init+0x5ca>
 8002a84:	2303      	movs	r3, #3
 8002a86:	e004      	b.n	8002a92 <HAL_GPIO_Init+0x5ca>
 8002a88:	2302      	movs	r3, #2
 8002a8a:	e002      	b.n	8002a92 <HAL_GPIO_Init+0x5ca>
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e000      	b.n	8002a92 <HAL_GPIO_Init+0x5ca>
 8002a90:	2300      	movs	r3, #0
 8002a92:	69fa      	ldr	r2, [r7, #28]
 8002a94:	f002 0203 	and.w	r2, r2, #3
 8002a98:	0092      	lsls	r2, r2, #2
 8002a9a:	4093      	lsls	r3, r2
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002aa2:	4935      	ldr	r1, [pc, #212]	; (8002b78 <HAL_GPIO_Init+0x6b0>)
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	089b      	lsrs	r3, r3, #2
 8002aa8:	3302      	adds	r3, #2
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ab0:	4b3c      	ldr	r3, [pc, #240]	; (8002ba4 <HAL_GPIO_Init+0x6dc>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	43db      	mvns	r3, r3
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	4013      	ands	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d003      	beq.n	8002ad4 <HAL_GPIO_Init+0x60c>
        {
          temp |= iocurrent;
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ad4:	4a33      	ldr	r2, [pc, #204]	; (8002ba4 <HAL_GPIO_Init+0x6dc>)
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ada:	4b32      	ldr	r3, [pc, #200]	; (8002ba4 <HAL_GPIO_Init+0x6dc>)
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	43db      	mvns	r3, r3
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d003      	beq.n	8002afe <HAL_GPIO_Init+0x636>
        {
          temp |= iocurrent;
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002afe:	4a29      	ldr	r2, [pc, #164]	; (8002ba4 <HAL_GPIO_Init+0x6dc>)
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b04:	4b27      	ldr	r3, [pc, #156]	; (8002ba4 <HAL_GPIO_Init+0x6dc>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	4013      	ands	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d003      	beq.n	8002b28 <HAL_GPIO_Init+0x660>
        {
          temp |= iocurrent;
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b28:	4a1e      	ldr	r2, [pc, #120]	; (8002ba4 <HAL_GPIO_Init+0x6dc>)
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b2e:	4b1d      	ldr	r3, [pc, #116]	; (8002ba4 <HAL_GPIO_Init+0x6dc>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	43db      	mvns	r3, r3
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d003      	beq.n	8002b52 <HAL_GPIO_Init+0x68a>
        {
          temp |= iocurrent;
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b52:	4a14      	ldr	r2, [pc, #80]	; (8002ba4 <HAL_GPIO_Init+0x6dc>)
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	61fb      	str	r3, [r7, #28]
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	2b0f      	cmp	r3, #15
 8002b62:	f67f ad4d 	bls.w	8002600 <HAL_GPIO_Init+0x138>
      }
    }
  }
}
 8002b66:	bf00      	nop
 8002b68:	bf00      	nop
 8002b6a:	3720      	adds	r7, #32
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	0800dad8 	.word	0x0800dad8
 8002b74:	40023800 	.word	0x40023800
 8002b78:	40013800 	.word	0x40013800
 8002b7c:	40020000 	.word	0x40020000
 8002b80:	40020400 	.word	0x40020400
 8002b84:	40020800 	.word	0x40020800
 8002b88:	40020c00 	.word	0x40020c00
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	40021400 	.word	0x40021400
 8002b94:	40021800 	.word	0x40021800
 8002b98:	40021c00 	.word	0x40021c00
 8002b9c:	40022000 	.word	0x40022000
 8002ba0:	40022400 	.word	0x40022400
 8002ba4:	40013c00 	.word	0x40013c00

08002ba8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002bb4:	887b      	ldrh	r3, [r7, #2]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d104      	bne.n	8002bc4 <HAL_GPIO_ReadPin+0x1c>
 8002bba:	f240 1177 	movw	r1, #375	; 0x177
 8002bbe:	4809      	ldr	r0, [pc, #36]	; (8002be4 <HAL_GPIO_ReadPin+0x3c>)
 8002bc0:	f7fe fda5 	bl	800170e <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	691a      	ldr	r2, [r3, #16]
 8002bc8:	887b      	ldrh	r3, [r7, #2]
 8002bca:	4013      	ands	r3, r2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d002      	beq.n	8002bd6 <HAL_GPIO_ReadPin+0x2e>
  {
    bitstatus = GPIO_PIN_SET;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	73fb      	strb	r3, [r7, #15]
 8002bd4:	e001      	b.n	8002bda <HAL_GPIO_ReadPin+0x32>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3710      	adds	r7, #16
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	0800dad8 	.word	0x0800dad8

08002be8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	807b      	strh	r3, [r7, #2]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002bf8:	887b      	ldrh	r3, [r7, #2]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d104      	bne.n	8002c08 <HAL_GPIO_WritePin+0x20>
 8002bfe:	f240 1197 	movw	r1, #407	; 0x197
 8002c02:	480e      	ldr	r0, [pc, #56]	; (8002c3c <HAL_GPIO_WritePin+0x54>)
 8002c04:	f7fe fd83 	bl	800170e <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002c08:	787b      	ldrb	r3, [r7, #1]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d007      	beq.n	8002c1e <HAL_GPIO_WritePin+0x36>
 8002c0e:	787b      	ldrb	r3, [r7, #1]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d004      	beq.n	8002c1e <HAL_GPIO_WritePin+0x36>
 8002c14:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8002c18:	4808      	ldr	r0, [pc, #32]	; (8002c3c <HAL_GPIO_WritePin+0x54>)
 8002c1a:	f7fe fd78 	bl	800170e <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8002c1e:	787b      	ldrb	r3, [r7, #1]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d003      	beq.n	8002c2c <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c24:	887a      	ldrh	r2, [r7, #2]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002c2a:	e003      	b.n	8002c34 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002c2c:	887b      	ldrh	r3, [r7, #2]
 8002c2e:	041a      	lsls	r2, r3, #16
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	619a      	str	r2, [r3, #24]
}
 8002c34:	bf00      	nop
 8002c36:	3708      	adds	r7, #8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	0800dad8 	.word	0x0800dad8

08002c40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	4603      	mov	r3, r0
 8002c48:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002c4a:	4b08      	ldr	r3, [pc, #32]	; (8002c6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c4c:	695a      	ldr	r2, [r3, #20]
 8002c4e:	88fb      	ldrh	r3, [r7, #6]
 8002c50:	4013      	ands	r3, r2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d006      	beq.n	8002c64 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c56:	4a05      	ldr	r2, [pc, #20]	; (8002c6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c58:	88fb      	ldrh	r3, [r7, #6]
 8002c5a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c5c:	88fb      	ldrh	r3, [r7, #6]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7fe fd12 	bl	8001688 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c64:	bf00      	nop
 8002c66:	3708      	adds	r7, #8
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	40013c00 	.word	0x40013c00

08002c70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e107      	b.n	8002e92 <HAL_I2C_Init+0x222>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a85      	ldr	r2, [pc, #532]	; (8002e9c <HAL_I2C_Init+0x22c>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d013      	beq.n	8002cb4 <HAL_I2C_Init+0x44>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a83      	ldr	r2, [pc, #524]	; (8002ea0 <HAL_I2C_Init+0x230>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d00e      	beq.n	8002cb4 <HAL_I2C_Init+0x44>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a82      	ldr	r2, [pc, #520]	; (8002ea4 <HAL_I2C_Init+0x234>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d009      	beq.n	8002cb4 <HAL_I2C_Init+0x44>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a80      	ldr	r2, [pc, #512]	; (8002ea8 <HAL_I2C_Init+0x238>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d004      	beq.n	8002cb4 <HAL_I2C_Init+0x44>
 8002caa:	f240 2119 	movw	r1, #537	; 0x219
 8002cae:	487f      	ldr	r0, [pc, #508]	; (8002eac <HAL_I2C_Init+0x23c>)
 8002cb0:	f7fe fd2d 	bl	800170e <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cbc:	d304      	bcc.n	8002cc8 <HAL_I2C_Init+0x58>
 8002cbe:	f240 211a 	movw	r1, #538	; 0x21a
 8002cc2:	487a      	ldr	r0, [pc, #488]	; (8002eac <HAL_I2C_Init+0x23c>)
 8002cc4:	f7fe fd23 	bl	800170e <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d008      	beq.n	8002ce2 <HAL_I2C_Init+0x72>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d004      	beq.n	8002ce2 <HAL_I2C_Init+0x72>
 8002cd8:	f240 211b 	movw	r1, #539	; 0x21b
 8002cdc:	4873      	ldr	r0, [pc, #460]	; (8002eac <HAL_I2C_Init+0x23c>)
 8002cde:	f7fe fd16 	bl	800170e <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d009      	beq.n	8002cfe <HAL_I2C_Init+0x8e>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cf2:	d004      	beq.n	8002cfe <HAL_I2C_Init+0x8e>
 8002cf4:	f44f 7107 	mov.w	r1, #540	; 0x21c
 8002cf8:	486c      	ldr	r0, [pc, #432]	; (8002eac <HAL_I2C_Init+0x23c>)
 8002cfa:	f7fe fd08 	bl	800170e <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	695b      	ldr	r3, [r3, #20]
 8002d02:	2bff      	cmp	r3, #255	; 0xff
 8002d04:	d904      	bls.n	8002d10 <HAL_I2C_Init+0xa0>
 8002d06:	f240 211d 	movw	r1, #541	; 0x21d
 8002d0a:	4868      	ldr	r0, [pc, #416]	; (8002eac <HAL_I2C_Init+0x23c>)
 8002d0c:	f7fe fcff 	bl	800170e <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d020      	beq.n	8002d5a <HAL_I2C_Init+0xea>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d01c      	beq.n	8002d5a <HAL_I2C_Init+0xea>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d018      	beq.n	8002d5a <HAL_I2C_Init+0xea>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	2b03      	cmp	r3, #3
 8002d2e:	d014      	beq.n	8002d5a <HAL_I2C_Init+0xea>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	2b04      	cmp	r3, #4
 8002d36:	d010      	beq.n	8002d5a <HAL_I2C_Init+0xea>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	2b05      	cmp	r3, #5
 8002d3e:	d00c      	beq.n	8002d5a <HAL_I2C_Init+0xea>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	2b06      	cmp	r3, #6
 8002d46:	d008      	beq.n	8002d5a <HAL_I2C_Init+0xea>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	2b07      	cmp	r3, #7
 8002d4e:	d004      	beq.n	8002d5a <HAL_I2C_Init+0xea>
 8002d50:	f240 211e 	movw	r1, #542	; 0x21e
 8002d54:	4855      	ldr	r0, [pc, #340]	; (8002eac <HAL_I2C_Init+0x23c>)
 8002d56:	f7fe fcda 	bl	800170e <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	69db      	ldr	r3, [r3, #28]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d009      	beq.n	8002d76 <HAL_I2C_Init+0x106>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	69db      	ldr	r3, [r3, #28]
 8002d66:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002d6a:	d004      	beq.n	8002d76 <HAL_I2C_Init+0x106>
 8002d6c:	f240 211f 	movw	r1, #543	; 0x21f
 8002d70:	484e      	ldr	r0, [pc, #312]	; (8002eac <HAL_I2C_Init+0x23c>)
 8002d72:	f7fe fccc 	bl	800170e <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a1b      	ldr	r3, [r3, #32]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d009      	beq.n	8002d92 <HAL_I2C_Init+0x122>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d86:	d004      	beq.n	8002d92 <HAL_I2C_Init+0x122>
 8002d88:	f44f 7108 	mov.w	r1, #544	; 0x220
 8002d8c:	4847      	ldr	r0, [pc, #284]	; (8002eac <HAL_I2C_Init+0x23c>)
 8002d8e:	f7fe fcbe 	bl	800170e <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d106      	bne.n	8002dac <HAL_I2C_Init+0x13c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f7fe fa6a 	bl	8001280 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2224      	movs	r2, #36	; 0x24
 8002db0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f022 0201 	bic.w	r2, r2, #1
 8002dc2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685a      	ldr	r2, [r3, #4]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002dd0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	689a      	ldr	r2, [r3, #8]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002de0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d107      	bne.n	8002dfa <HAL_I2C_Init+0x18a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	689a      	ldr	r2, [r3, #8]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002df6:	609a      	str	r2, [r3, #8]
 8002df8:	e006      	b.n	8002e08 <HAL_I2C_Init+0x198>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	689a      	ldr	r2, [r3, #8]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002e06:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d104      	bne.n	8002e1a <HAL_I2C_Init+0x1aa>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e18:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	6859      	ldr	r1, [r3, #4]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	4b22      	ldr	r3, [pc, #136]	; (8002eb0 <HAL_I2C_Init+0x240>)
 8002e26:	430b      	orrs	r3, r1
 8002e28:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68da      	ldr	r2, [r3, #12]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e38:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	691a      	ldr	r2, [r3, #16]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	430a      	orrs	r2, r1
 8002e52:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	69d9      	ldr	r1, [r3, #28]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a1a      	ldr	r2, [r3, #32]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	430a      	orrs	r2, r1
 8002e62:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f042 0201 	orr.w	r2, r2, #1
 8002e72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2220      	movs	r2, #32
 8002e7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	40005400 	.word	0x40005400
 8002ea0:	40005800 	.word	0x40005800
 8002ea4:	40005c00 	.word	0x40005c00
 8002ea8:	40006000 	.word	0x40006000
 8002eac:	0800db14 	.word	0x0800db14
 8002eb0:	02008000 	.word	0x02008000

08002eb4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a32      	ldr	r2, [pc, #200]	; (8002f8c <HAL_I2CEx_ConfigAnalogFilter+0xd8>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d012      	beq.n	8002eee <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a30      	ldr	r2, [pc, #192]	; (8002f90 <HAL_I2CEx_ConfigAnalogFilter+0xdc>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d00d      	beq.n	8002eee <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a2f      	ldr	r2, [pc, #188]	; (8002f94 <HAL_I2CEx_ConfigAnalogFilter+0xe0>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d008      	beq.n	8002eee <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a2d      	ldr	r2, [pc, #180]	; (8002f98 <HAL_I2CEx_ConfigAnalogFilter+0xe4>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d003      	beq.n	8002eee <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8002ee6:	215e      	movs	r1, #94	; 0x5e
 8002ee8:	482c      	ldr	r0, [pc, #176]	; (8002f9c <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 8002eea:	f7fe fc10 	bl	800170e <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d007      	beq.n	8002f04 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002efa:	d003      	beq.n	8002f04 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8002efc:	215f      	movs	r1, #95	; 0x5f
 8002efe:	4827      	ldr	r0, [pc, #156]	; (8002f9c <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 8002f00:	f7fe fc05 	bl	800170e <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	2b20      	cmp	r3, #32
 8002f0e:	d138      	bne.n	8002f82 <HAL_I2CEx_ConfigAnalogFilter+0xce>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d101      	bne.n	8002f1e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	e032      	b.n	8002f84 <HAL_I2CEx_ConfigAnalogFilter+0xd0>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2224      	movs	r2, #36	; 0x24
 8002f2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f022 0201 	bic.w	r2, r2, #1
 8002f3c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f4c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	6819      	ldr	r1, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f042 0201 	orr.w	r2, r2, #1
 8002f6c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2220      	movs	r2, #32
 8002f72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	e000      	b.n	8002f84 <HAL_I2CEx_ConfigAnalogFilter+0xd0>
  }
  else
  {
    return HAL_BUSY;
 8002f82:	2302      	movs	r3, #2
  }
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3708      	adds	r7, #8
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	40005400 	.word	0x40005400
 8002f90:	40005800 	.word	0x40005800
 8002f94:	40005c00 	.word	0x40005c00
 8002f98:	40006000 	.word	0x40006000
 8002f9c:	0800db4c 	.word	0x0800db4c

08002fa0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a31      	ldr	r2, [pc, #196]	; (8003074 <HAL_I2CEx_ConfigDigitalFilter+0xd4>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d012      	beq.n	8002fda <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a2f      	ldr	r2, [pc, #188]	; (8003078 <HAL_I2CEx_ConfigDigitalFilter+0xd8>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d00d      	beq.n	8002fda <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a2e      	ldr	r2, [pc, #184]	; (800307c <HAL_I2CEx_ConfigDigitalFilter+0xdc>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d008      	beq.n	8002fda <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a2c      	ldr	r2, [pc, #176]	; (8003080 <HAL_I2CEx_ConfigDigitalFilter+0xe0>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d003      	beq.n	8002fda <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8002fd2:	218c      	movs	r1, #140	; 0x8c
 8002fd4:	482b      	ldr	r0, [pc, #172]	; (8003084 <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 8002fd6:	f7fe fb9a 	bl	800170e <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	2b0f      	cmp	r3, #15
 8002fde:	d903      	bls.n	8002fe8 <HAL_I2CEx_ConfigDigitalFilter+0x48>
 8002fe0:	218d      	movs	r1, #141	; 0x8d
 8002fe2:	4828      	ldr	r0, [pc, #160]	; (8003084 <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 8002fe4:	f7fe fb93 	bl	800170e <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	2b20      	cmp	r3, #32
 8002ff2:	d139      	bne.n	8003068 <HAL_I2CEx_ConfigDigitalFilter+0xc8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d101      	bne.n	8003002 <HAL_I2CEx_ConfigDigitalFilter+0x62>
 8002ffe:	2302      	movs	r3, #2
 8003000:	e033      	b.n	800306a <HAL_I2CEx_ConfigDigitalFilter+0xca>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2201      	movs	r2, #1
 8003006:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2224      	movs	r2, #36	; 0x24
 800300e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f022 0201 	bic.w	r2, r2, #1
 8003020:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003030:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	021b      	lsls	r3, r3, #8
 8003036:	68fa      	ldr	r2, [r7, #12]
 8003038:	4313      	orrs	r3, r2
 800303a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f042 0201 	orr.w	r2, r2, #1
 8003052:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2220      	movs	r2, #32
 8003058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003064:	2300      	movs	r3, #0
 8003066:	e000      	b.n	800306a <HAL_I2CEx_ConfigDigitalFilter+0xca>
  }
  else
  {
    return HAL_BUSY;
 8003068:	2302      	movs	r3, #2
  }
}
 800306a:	4618      	mov	r0, r3
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	40005400 	.word	0x40005400
 8003078:	40005800 	.word	0x40005800
 800307c:	40005c00 	.word	0x40005c00
 8003080:	40006000 	.word	0x40006000
 8003084:	0800db4c 	.word	0x0800db4c

08003088 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800308e:	2300      	movs	r3, #0
 8003090:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003092:	4b23      	ldr	r3, [pc, #140]	; (8003120 <HAL_PWREx_EnableOverDrive+0x98>)
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	4a22      	ldr	r2, [pc, #136]	; (8003120 <HAL_PWREx_EnableOverDrive+0x98>)
 8003098:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800309c:	6413      	str	r3, [r2, #64]	; 0x40
 800309e:	4b20      	ldr	r3, [pc, #128]	; (8003120 <HAL_PWREx_EnableOverDrive+0x98>)
 80030a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a6:	603b      	str	r3, [r7, #0]
 80030a8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80030aa:	4b1e      	ldr	r3, [pc, #120]	; (8003124 <HAL_PWREx_EnableOverDrive+0x9c>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a1d      	ldr	r2, [pc, #116]	; (8003124 <HAL_PWREx_EnableOverDrive+0x9c>)
 80030b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030b4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030b6:	f7ff f805 	bl	80020c4 <HAL_GetTick>
 80030ba:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80030bc:	e009      	b.n	80030d2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80030be:	f7ff f801 	bl	80020c4 <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030cc:	d901      	bls.n	80030d2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e022      	b.n	8003118 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80030d2:	4b14      	ldr	r3, [pc, #80]	; (8003124 <HAL_PWREx_EnableOverDrive+0x9c>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030de:	d1ee      	bne.n	80030be <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80030e0:	4b10      	ldr	r3, [pc, #64]	; (8003124 <HAL_PWREx_EnableOverDrive+0x9c>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a0f      	ldr	r2, [pc, #60]	; (8003124 <HAL_PWREx_EnableOverDrive+0x9c>)
 80030e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030ea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030ec:	f7fe ffea 	bl	80020c4 <HAL_GetTick>
 80030f0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80030f2:	e009      	b.n	8003108 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80030f4:	f7fe ffe6 	bl	80020c4 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003102:	d901      	bls.n	8003108 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e007      	b.n	8003118 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003108:	4b06      	ldr	r3, [pc, #24]	; (8003124 <HAL_PWREx_EnableOverDrive+0x9c>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003110:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003114:	d1ee      	bne.n	80030f4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	3708      	adds	r7, #8
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	40023800 	.word	0x40023800
 8003124:	40007000 	.word	0x40007000

08003128 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003130:	2300      	movs	r3, #0
 8003132:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e345      	b.n	80037ca <HAL_RCC_OscConfig+0x6a2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2b0f      	cmp	r3, #15
 8003144:	d904      	bls.n	8003150 <HAL_RCC_OscConfig+0x28>
 8003146:	f240 1163 	movw	r1, #355	; 0x163
 800314a:	4892      	ldr	r0, [pc, #584]	; (8003394 <HAL_RCC_OscConfig+0x26c>)
 800314c:	f7fe fadf 	bl	800170e <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0301 	and.w	r3, r3, #1
 8003158:	2b00      	cmp	r3, #0
 800315a:	f000 809a 	beq.w	8003292 <HAL_RCC_OscConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00e      	beq.n	8003184 <HAL_RCC_OscConfig+0x5c>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800316e:	d009      	beq.n	8003184 <HAL_RCC_OscConfig+0x5c>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003178:	d004      	beq.n	8003184 <HAL_RCC_OscConfig+0x5c>
 800317a:	f240 1169 	movw	r1, #361	; 0x169
 800317e:	4885      	ldr	r0, [pc, #532]	; (8003394 <HAL_RCC_OscConfig+0x26c>)
 8003180:	f7fe fac5 	bl	800170e <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003184:	4b84      	ldr	r3, [pc, #528]	; (8003398 <HAL_RCC_OscConfig+0x270>)
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f003 030c 	and.w	r3, r3, #12
 800318c:	2b04      	cmp	r3, #4
 800318e:	d00c      	beq.n	80031aa <HAL_RCC_OscConfig+0x82>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003190:	4b81      	ldr	r3, [pc, #516]	; (8003398 <HAL_RCC_OscConfig+0x270>)
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f003 030c 	and.w	r3, r3, #12
 8003198:	2b08      	cmp	r3, #8
 800319a:	d112      	bne.n	80031c2 <HAL_RCC_OscConfig+0x9a>
 800319c:	4b7e      	ldr	r3, [pc, #504]	; (8003398 <HAL_RCC_OscConfig+0x270>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031a8:	d10b      	bne.n	80031c2 <HAL_RCC_OscConfig+0x9a>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031aa:	4b7b      	ldr	r3, [pc, #492]	; (8003398 <HAL_RCC_OscConfig+0x270>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d06c      	beq.n	8003290 <HAL_RCC_OscConfig+0x168>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d168      	bne.n	8003290 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e303      	b.n	80037ca <HAL_RCC_OscConfig+0x6a2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ca:	d106      	bne.n	80031da <HAL_RCC_OscConfig+0xb2>
 80031cc:	4b72      	ldr	r3, [pc, #456]	; (8003398 <HAL_RCC_OscConfig+0x270>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a71      	ldr	r2, [pc, #452]	; (8003398 <HAL_RCC_OscConfig+0x270>)
 80031d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031d6:	6013      	str	r3, [r2, #0]
 80031d8:	e02e      	b.n	8003238 <HAL_RCC_OscConfig+0x110>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d10c      	bne.n	80031fc <HAL_RCC_OscConfig+0xd4>
 80031e2:	4b6d      	ldr	r3, [pc, #436]	; (8003398 <HAL_RCC_OscConfig+0x270>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a6c      	ldr	r2, [pc, #432]	; (8003398 <HAL_RCC_OscConfig+0x270>)
 80031e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ec:	6013      	str	r3, [r2, #0]
 80031ee:	4b6a      	ldr	r3, [pc, #424]	; (8003398 <HAL_RCC_OscConfig+0x270>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a69      	ldr	r2, [pc, #420]	; (8003398 <HAL_RCC_OscConfig+0x270>)
 80031f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031f8:	6013      	str	r3, [r2, #0]
 80031fa:	e01d      	b.n	8003238 <HAL_RCC_OscConfig+0x110>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003204:	d10c      	bne.n	8003220 <HAL_RCC_OscConfig+0xf8>
 8003206:	4b64      	ldr	r3, [pc, #400]	; (8003398 <HAL_RCC_OscConfig+0x270>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a63      	ldr	r2, [pc, #396]	; (8003398 <HAL_RCC_OscConfig+0x270>)
 800320c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003210:	6013      	str	r3, [r2, #0]
 8003212:	4b61      	ldr	r3, [pc, #388]	; (8003398 <HAL_RCC_OscConfig+0x270>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a60      	ldr	r2, [pc, #384]	; (8003398 <HAL_RCC_OscConfig+0x270>)
 8003218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800321c:	6013      	str	r3, [r2, #0]
 800321e:	e00b      	b.n	8003238 <HAL_RCC_OscConfig+0x110>
 8003220:	4b5d      	ldr	r3, [pc, #372]	; (8003398 <HAL_RCC_OscConfig+0x270>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a5c      	ldr	r2, [pc, #368]	; (8003398 <HAL_RCC_OscConfig+0x270>)
 8003226:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800322a:	6013      	str	r3, [r2, #0]
 800322c:	4b5a      	ldr	r3, [pc, #360]	; (8003398 <HAL_RCC_OscConfig+0x270>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a59      	ldr	r2, [pc, #356]	; (8003398 <HAL_RCC_OscConfig+0x270>)
 8003232:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003236:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d013      	beq.n	8003268 <HAL_RCC_OscConfig+0x140>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003240:	f7fe ff40 	bl	80020c4 <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0x132>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003248:	f7fe ff3c 	bl	80020c4 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b64      	cmp	r3, #100	; 0x64
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x132>
          {
            return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e2b7      	b.n	80037ca <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800325a:	4b4f      	ldr	r3, [pc, #316]	; (8003398 <HAL_RCC_OscConfig+0x270>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d0f0      	beq.n	8003248 <HAL_RCC_OscConfig+0x120>
 8003266:	e014      	b.n	8003292 <HAL_RCC_OscConfig+0x16a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003268:	f7fe ff2c 	bl	80020c4 <HAL_GetTick>
 800326c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800326e:	e008      	b.n	8003282 <HAL_RCC_OscConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003270:	f7fe ff28 	bl	80020c4 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b64      	cmp	r3, #100	; 0x64
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e2a3      	b.n	80037ca <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003282:	4b45      	ldr	r3, [pc, #276]	; (8003398 <HAL_RCC_OscConfig+0x270>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1f0      	bne.n	8003270 <HAL_RCC_OscConfig+0x148>
 800328e:	e000      	b.n	8003292 <HAL_RCC_OscConfig+0x16a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003290:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	f000 8084 	beq.w	80033a8 <HAL_RCC_OscConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d008      	beq.n	80032ba <HAL_RCC_OscConfig+0x192>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d004      	beq.n	80032ba <HAL_RCC_OscConfig+0x192>
 80032b0:	f240 119b 	movw	r1, #411	; 0x19b
 80032b4:	4837      	ldr	r0, [pc, #220]	; (8003394 <HAL_RCC_OscConfig+0x26c>)
 80032b6:	f7fe fa2a 	bl	800170e <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	2b1f      	cmp	r3, #31
 80032c0:	d904      	bls.n	80032cc <HAL_RCC_OscConfig+0x1a4>
 80032c2:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 80032c6:	4833      	ldr	r0, [pc, #204]	; (8003394 <HAL_RCC_OscConfig+0x26c>)
 80032c8:	f7fe fa21 	bl	800170e <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032cc:	4b32      	ldr	r3, [pc, #200]	; (8003398 <HAL_RCC_OscConfig+0x270>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f003 030c 	and.w	r3, r3, #12
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d00b      	beq.n	80032f0 <HAL_RCC_OscConfig+0x1c8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032d8:	4b2f      	ldr	r3, [pc, #188]	; (8003398 <HAL_RCC_OscConfig+0x270>)
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f003 030c 	and.w	r3, r3, #12
 80032e0:	2b08      	cmp	r3, #8
 80032e2:	d11c      	bne.n	800331e <HAL_RCC_OscConfig+0x1f6>
 80032e4:	4b2c      	ldr	r3, [pc, #176]	; (8003398 <HAL_RCC_OscConfig+0x270>)
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d116      	bne.n	800331e <HAL_RCC_OscConfig+0x1f6>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032f0:	4b29      	ldr	r3, [pc, #164]	; (8003398 <HAL_RCC_OscConfig+0x270>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d005      	beq.n	8003308 <HAL_RCC_OscConfig+0x1e0>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d001      	beq.n	8003308 <HAL_RCC_OscConfig+0x1e0>
      {
        return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e260      	b.n	80037ca <HAL_RCC_OscConfig+0x6a2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003308:	4b23      	ldr	r3, [pc, #140]	; (8003398 <HAL_RCC_OscConfig+0x270>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	691b      	ldr	r3, [r3, #16]
 8003314:	00db      	lsls	r3, r3, #3
 8003316:	4920      	ldr	r1, [pc, #128]	; (8003398 <HAL_RCC_OscConfig+0x270>)
 8003318:	4313      	orrs	r3, r2
 800331a:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800331c:	e044      	b.n	80033a8 <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d023      	beq.n	800336e <HAL_RCC_OscConfig+0x246>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003326:	4b1c      	ldr	r3, [pc, #112]	; (8003398 <HAL_RCC_OscConfig+0x270>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a1b      	ldr	r2, [pc, #108]	; (8003398 <HAL_RCC_OscConfig+0x270>)
 800332c:	f043 0301 	orr.w	r3, r3, #1
 8003330:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003332:	f7fe fec7 	bl	80020c4 <HAL_GetTick>
 8003336:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003338:	e008      	b.n	800334c <HAL_RCC_OscConfig+0x224>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800333a:	f7fe fec3 	bl	80020c4 <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	2b02      	cmp	r3, #2
 8003346:	d901      	bls.n	800334c <HAL_RCC_OscConfig+0x224>
          {
            return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e23e      	b.n	80037ca <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800334c:	4b12      	ldr	r3, [pc, #72]	; (8003398 <HAL_RCC_OscConfig+0x270>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0302 	and.w	r3, r3, #2
 8003354:	2b00      	cmp	r3, #0
 8003356:	d0f0      	beq.n	800333a <HAL_RCC_OscConfig+0x212>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003358:	4b0f      	ldr	r3, [pc, #60]	; (8003398 <HAL_RCC_OscConfig+0x270>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	00db      	lsls	r3, r3, #3
 8003366:	490c      	ldr	r1, [pc, #48]	; (8003398 <HAL_RCC_OscConfig+0x270>)
 8003368:	4313      	orrs	r3, r2
 800336a:	600b      	str	r3, [r1, #0]
 800336c:	e01c      	b.n	80033a8 <HAL_RCC_OscConfig+0x280>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800336e:	4b0a      	ldr	r3, [pc, #40]	; (8003398 <HAL_RCC_OscConfig+0x270>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a09      	ldr	r2, [pc, #36]	; (8003398 <HAL_RCC_OscConfig+0x270>)
 8003374:	f023 0301 	bic.w	r3, r3, #1
 8003378:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800337a:	f7fe fea3 	bl	80020c4 <HAL_GetTick>
 800337e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003380:	e00c      	b.n	800339c <HAL_RCC_OscConfig+0x274>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003382:	f7fe fe9f 	bl	80020c4 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d905      	bls.n	800339c <HAL_RCC_OscConfig+0x274>
          {
            return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e21a      	b.n	80037ca <HAL_RCC_OscConfig+0x6a2>
 8003394:	0800db88 	.word	0x0800db88
 8003398:	40023800 	.word	0x40023800
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800339c:	4b7e      	ldr	r3, [pc, #504]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0302 	and.w	r3, r3, #2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d1ec      	bne.n	8003382 <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0308 	and.w	r3, r3, #8
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d043      	beq.n	800343c <HAL_RCC_OscConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	695b      	ldr	r3, [r3, #20]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d008      	beq.n	80033ce <HAL_RCC_OscConfig+0x2a6>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d004      	beq.n	80033ce <HAL_RCC_OscConfig+0x2a6>
 80033c4:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 80033c8:	4874      	ldr	r0, [pc, #464]	; (800359c <HAL_RCC_OscConfig+0x474>)
 80033ca:	f7fe f9a0 	bl	800170e <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d019      	beq.n	800340a <HAL_RCC_OscConfig+0x2e2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033d6:	4b70      	ldr	r3, [pc, #448]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 80033d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033da:	4a6f      	ldr	r2, [pc, #444]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 80033dc:	f043 0301 	orr.w	r3, r3, #1
 80033e0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e2:	f7fe fe6f 	bl	80020c4 <HAL_GetTick>
 80033e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033e8:	e008      	b.n	80033fc <HAL_RCC_OscConfig+0x2d4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033ea:	f7fe fe6b 	bl	80020c4 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d901      	bls.n	80033fc <HAL_RCC_OscConfig+0x2d4>
        {
          return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e1e6      	b.n	80037ca <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033fc:	4b66      	ldr	r3, [pc, #408]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 80033fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d0f0      	beq.n	80033ea <HAL_RCC_OscConfig+0x2c2>
 8003408:	e018      	b.n	800343c <HAL_RCC_OscConfig+0x314>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800340a:	4b63      	ldr	r3, [pc, #396]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 800340c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800340e:	4a62      	ldr	r2, [pc, #392]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 8003410:	f023 0301 	bic.w	r3, r3, #1
 8003414:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003416:	f7fe fe55 	bl	80020c4 <HAL_GetTick>
 800341a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800341c:	e008      	b.n	8003430 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800341e:	f7fe fe51 	bl	80020c4 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b02      	cmp	r3, #2
 800342a:	d901      	bls.n	8003430 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e1cc      	b.n	80037ca <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003430:	4b59      	ldr	r3, [pc, #356]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 8003432:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003434:	f003 0302 	and.w	r3, r3, #2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1f0      	bne.n	800341e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0304 	and.w	r3, r3, #4
 8003444:	2b00      	cmp	r3, #0
 8003446:	f000 80bc 	beq.w	80035c2 <HAL_RCC_OscConfig+0x49a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00c      	beq.n	800346c <HAL_RCC_OscConfig+0x344>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d008      	beq.n	800346c <HAL_RCC_OscConfig+0x344>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	2b05      	cmp	r3, #5
 8003460:	d004      	beq.n	800346c <HAL_RCC_OscConfig+0x344>
 8003462:	f240 2106 	movw	r1, #518	; 0x206
 8003466:	484d      	ldr	r0, [pc, #308]	; (800359c <HAL_RCC_OscConfig+0x474>)
 8003468:	f7fe f951 	bl	800170e <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800346c:	4b4a      	ldr	r3, [pc, #296]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 800346e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d10d      	bne.n	8003494 <HAL_RCC_OscConfig+0x36c>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003478:	4b47      	ldr	r3, [pc, #284]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 800347a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347c:	4a46      	ldr	r2, [pc, #280]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 800347e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003482:	6413      	str	r3, [r2, #64]	; 0x40
 8003484:	4b44      	ldr	r3, [pc, #272]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 8003486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800348c:	60bb      	str	r3, [r7, #8]
 800348e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003490:	2301      	movs	r3, #1
 8003492:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003494:	4b42      	ldr	r3, [pc, #264]	; (80035a0 <HAL_RCC_OscConfig+0x478>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800349c:	2b00      	cmp	r3, #0
 800349e:	d118      	bne.n	80034d2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80034a0:	4b3f      	ldr	r3, [pc, #252]	; (80035a0 <HAL_RCC_OscConfig+0x478>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a3e      	ldr	r2, [pc, #248]	; (80035a0 <HAL_RCC_OscConfig+0x478>)
 80034a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034ac:	f7fe fe0a 	bl	80020c4 <HAL_GetTick>
 80034b0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034b2:	e008      	b.n	80034c6 <HAL_RCC_OscConfig+0x39e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034b4:	f7fe fe06 	bl	80020c4 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b64      	cmp	r3, #100	; 0x64
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e181      	b.n	80037ca <HAL_RCC_OscConfig+0x6a2>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034c6:	4b36      	ldr	r3, [pc, #216]	; (80035a0 <HAL_RCC_OscConfig+0x478>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d0f0      	beq.n	80034b4 <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d106      	bne.n	80034e8 <HAL_RCC_OscConfig+0x3c0>
 80034da:	4b2f      	ldr	r3, [pc, #188]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 80034dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034de:	4a2e      	ldr	r2, [pc, #184]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 80034e0:	f043 0301 	orr.w	r3, r3, #1
 80034e4:	6713      	str	r3, [r2, #112]	; 0x70
 80034e6:	e02d      	b.n	8003544 <HAL_RCC_OscConfig+0x41c>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d10c      	bne.n	800350a <HAL_RCC_OscConfig+0x3e2>
 80034f0:	4b29      	ldr	r3, [pc, #164]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 80034f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f4:	4a28      	ldr	r2, [pc, #160]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 80034f6:	f023 0301 	bic.w	r3, r3, #1
 80034fa:	6713      	str	r3, [r2, #112]	; 0x70
 80034fc:	4b26      	ldr	r3, [pc, #152]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 80034fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003500:	4a25      	ldr	r2, [pc, #148]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 8003502:	f023 0304 	bic.w	r3, r3, #4
 8003506:	6713      	str	r3, [r2, #112]	; 0x70
 8003508:	e01c      	b.n	8003544 <HAL_RCC_OscConfig+0x41c>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	2b05      	cmp	r3, #5
 8003510:	d10c      	bne.n	800352c <HAL_RCC_OscConfig+0x404>
 8003512:	4b21      	ldr	r3, [pc, #132]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 8003514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003516:	4a20      	ldr	r2, [pc, #128]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 8003518:	f043 0304 	orr.w	r3, r3, #4
 800351c:	6713      	str	r3, [r2, #112]	; 0x70
 800351e:	4b1e      	ldr	r3, [pc, #120]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 8003520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003522:	4a1d      	ldr	r2, [pc, #116]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 8003524:	f043 0301 	orr.w	r3, r3, #1
 8003528:	6713      	str	r3, [r2, #112]	; 0x70
 800352a:	e00b      	b.n	8003544 <HAL_RCC_OscConfig+0x41c>
 800352c:	4b1a      	ldr	r3, [pc, #104]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 800352e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003530:	4a19      	ldr	r2, [pc, #100]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 8003532:	f023 0301 	bic.w	r3, r3, #1
 8003536:	6713      	str	r3, [r2, #112]	; 0x70
 8003538:	4b17      	ldr	r3, [pc, #92]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 800353a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800353c:	4a16      	ldr	r2, [pc, #88]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 800353e:	f023 0304 	bic.w	r3, r3, #4
 8003542:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d015      	beq.n	8003578 <HAL_RCC_OscConfig+0x450>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800354c:	f7fe fdba 	bl	80020c4 <HAL_GetTick>
 8003550:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003552:	e00a      	b.n	800356a <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003554:	f7fe fdb6 	bl	80020c4 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003562:	4293      	cmp	r3, r2
 8003564:	d901      	bls.n	800356a <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e12f      	b.n	80037ca <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800356a:	4b0b      	ldr	r3, [pc, #44]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 800356c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d0ee      	beq.n	8003554 <HAL_RCC_OscConfig+0x42c>
 8003576:	e01b      	b.n	80035b0 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003578:	f7fe fda4 	bl	80020c4 <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800357e:	e011      	b.n	80035a4 <HAL_RCC_OscConfig+0x47c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003580:	f7fe fda0 	bl	80020c4 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	f241 3288 	movw	r2, #5000	; 0x1388
 800358e:	4293      	cmp	r3, r2
 8003590:	d908      	bls.n	80035a4 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e119      	b.n	80037ca <HAL_RCC_OscConfig+0x6a2>
 8003596:	bf00      	nop
 8003598:	40023800 	.word	0x40023800
 800359c:	0800db88 	.word	0x0800db88
 80035a0:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035a4:	4b8b      	ldr	r3, [pc, #556]	; (80037d4 <HAL_RCC_OscConfig+0x6ac>)
 80035a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a8:	f003 0302 	and.w	r3, r3, #2
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d1e7      	bne.n	8003580 <HAL_RCC_OscConfig+0x458>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80035b0:	7dfb      	ldrb	r3, [r7, #23]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d105      	bne.n	80035c2 <HAL_RCC_OscConfig+0x49a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035b6:	4b87      	ldr	r3, [pc, #540]	; (80037d4 <HAL_RCC_OscConfig+0x6ac>)
 80035b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ba:	4a86      	ldr	r2, [pc, #536]	; (80037d4 <HAL_RCC_OscConfig+0x6ac>)
 80035bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00c      	beq.n	80035e4 <HAL_RCC_OscConfig+0x4bc>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d008      	beq.n	80035e4 <HAL_RCC_OscConfig+0x4bc>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d004      	beq.n	80035e4 <HAL_RCC_OscConfig+0x4bc>
 80035da:	f240 214a 	movw	r1, #586	; 0x24a
 80035de:	487e      	ldr	r0, [pc, #504]	; (80037d8 <HAL_RCC_OscConfig+0x6b0>)
 80035e0:	f7fe f895 	bl	800170e <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f000 80ed 	beq.w	80037c8 <HAL_RCC_OscConfig+0x6a0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035ee:	4b79      	ldr	r3, [pc, #484]	; (80037d4 <HAL_RCC_OscConfig+0x6ac>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f003 030c 	and.w	r3, r3, #12
 80035f6:	2b08      	cmp	r3, #8
 80035f8:	f000 80b4 	beq.w	8003764 <HAL_RCC_OscConfig+0x63c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	699b      	ldr	r3, [r3, #24]
 8003600:	2b02      	cmp	r3, #2
 8003602:	f040 8095 	bne.w	8003730 <HAL_RCC_OscConfig+0x608>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	69db      	ldr	r3, [r3, #28]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d009      	beq.n	8003622 <HAL_RCC_OscConfig+0x4fa>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	69db      	ldr	r3, [r3, #28]
 8003612:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003616:	d004      	beq.n	8003622 <HAL_RCC_OscConfig+0x4fa>
 8003618:	f240 2153 	movw	r1, #595	; 0x253
 800361c:	486e      	ldr	r0, [pc, #440]	; (80037d8 <HAL_RCC_OscConfig+0x6b0>)
 800361e:	f7fe f876 	bl	800170e <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a1b      	ldr	r3, [r3, #32]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d903      	bls.n	8003632 <HAL_RCC_OscConfig+0x50a>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a1b      	ldr	r3, [r3, #32]
 800362e:	2b3f      	cmp	r3, #63	; 0x3f
 8003630:	d904      	bls.n	800363c <HAL_RCC_OscConfig+0x514>
 8003632:	f44f 7115 	mov.w	r1, #596	; 0x254
 8003636:	4868      	ldr	r0, [pc, #416]	; (80037d8 <HAL_RCC_OscConfig+0x6b0>)
 8003638:	f7fe f869 	bl	800170e <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003640:	2b31      	cmp	r3, #49	; 0x31
 8003642:	d904      	bls.n	800364e <HAL_RCC_OscConfig+0x526>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003648:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 800364c:	d904      	bls.n	8003658 <HAL_RCC_OscConfig+0x530>
 800364e:	f240 2155 	movw	r1, #597	; 0x255
 8003652:	4861      	ldr	r0, [pc, #388]	; (80037d8 <HAL_RCC_OscConfig+0x6b0>)
 8003654:	f7fe f85b 	bl	800170e <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365c:	2b02      	cmp	r3, #2
 800365e:	d010      	beq.n	8003682 <HAL_RCC_OscConfig+0x55a>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003664:	2b04      	cmp	r3, #4
 8003666:	d00c      	beq.n	8003682 <HAL_RCC_OscConfig+0x55a>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366c:	2b06      	cmp	r3, #6
 800366e:	d008      	beq.n	8003682 <HAL_RCC_OscConfig+0x55a>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003674:	2b08      	cmp	r3, #8
 8003676:	d004      	beq.n	8003682 <HAL_RCC_OscConfig+0x55a>
 8003678:	f240 2156 	movw	r1, #598	; 0x256
 800367c:	4856      	ldr	r0, [pc, #344]	; (80037d8 <HAL_RCC_OscConfig+0x6b0>)
 800367e:	f7fe f846 	bl	800170e <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003686:	2b01      	cmp	r3, #1
 8003688:	d903      	bls.n	8003692 <HAL_RCC_OscConfig+0x56a>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368e:	2b0f      	cmp	r3, #15
 8003690:	d904      	bls.n	800369c <HAL_RCC_OscConfig+0x574>
 8003692:	f240 2157 	movw	r1, #599	; 0x257
 8003696:	4850      	ldr	r0, [pc, #320]	; (80037d8 <HAL_RCC_OscConfig+0x6b0>)
 8003698:	f7fe f839 	bl	800170e <assert_failed>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800369c:	4b4d      	ldr	r3, [pc, #308]	; (80037d4 <HAL_RCC_OscConfig+0x6ac>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a4c      	ldr	r2, [pc, #304]	; (80037d4 <HAL_RCC_OscConfig+0x6ac>)
 80036a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a8:	f7fe fd0c 	bl	80020c4 <HAL_GetTick>
 80036ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ae:	e008      	b.n	80036c2 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036b0:	f7fe fd08 	bl	80020c4 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e083      	b.n	80037ca <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036c2:	4b44      	ldr	r3, [pc, #272]	; (80037d4 <HAL_RCC_OscConfig+0x6ac>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1f0      	bne.n	80036b0 <HAL_RCC_OscConfig+0x588>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	69da      	ldr	r2, [r3, #28]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a1b      	ldr	r3, [r3, #32]
 80036d6:	431a      	orrs	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036dc:	019b      	lsls	r3, r3, #6
 80036de:	431a      	orrs	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e4:	085b      	lsrs	r3, r3, #1
 80036e6:	3b01      	subs	r3, #1
 80036e8:	041b      	lsls	r3, r3, #16
 80036ea:	431a      	orrs	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f0:	061b      	lsls	r3, r3, #24
 80036f2:	4313      	orrs	r3, r2
 80036f4:	4a37      	ldr	r2, [pc, #220]	; (80037d4 <HAL_RCC_OscConfig+0x6ac>)
 80036f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80036fa:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036fc:	4b35      	ldr	r3, [pc, #212]	; (80037d4 <HAL_RCC_OscConfig+0x6ac>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a34      	ldr	r2, [pc, #208]	; (80037d4 <HAL_RCC_OscConfig+0x6ac>)
 8003702:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003706:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003708:	f7fe fcdc 	bl	80020c4 <HAL_GetTick>
 800370c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800370e:	e008      	b.n	8003722 <HAL_RCC_OscConfig+0x5fa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003710:	f7fe fcd8 	bl	80020c4 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b02      	cmp	r3, #2
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0x5fa>
          {
            return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e053      	b.n	80037ca <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003722:	4b2c      	ldr	r3, [pc, #176]	; (80037d4 <HAL_RCC_OscConfig+0x6ac>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d0f0      	beq.n	8003710 <HAL_RCC_OscConfig+0x5e8>
 800372e:	e04b      	b.n	80037c8 <HAL_RCC_OscConfig+0x6a0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003730:	4b28      	ldr	r3, [pc, #160]	; (80037d4 <HAL_RCC_OscConfig+0x6ac>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a27      	ldr	r2, [pc, #156]	; (80037d4 <HAL_RCC_OscConfig+0x6ac>)
 8003736:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800373a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800373c:	f7fe fcc2 	bl	80020c4 <HAL_GetTick>
 8003740:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003742:	e008      	b.n	8003756 <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003744:	f7fe fcbe 	bl	80020c4 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b02      	cmp	r3, #2
 8003750:	d901      	bls.n	8003756 <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e039      	b.n	80037ca <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003756:	4b1f      	ldr	r3, [pc, #124]	; (80037d4 <HAL_RCC_OscConfig+0x6ac>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1f0      	bne.n	8003744 <HAL_RCC_OscConfig+0x61c>
 8003762:	e031      	b.n	80037c8 <HAL_RCC_OscConfig+0x6a0>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003764:	4b1b      	ldr	r3, [pc, #108]	; (80037d4 <HAL_RCC_OscConfig+0x6ac>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	2b01      	cmp	r3, #1
 8003770:	d028      	beq.n	80037c4 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800377c:	429a      	cmp	r2, r3
 800377e:	d121      	bne.n	80037c4 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800378a:	429a      	cmp	r2, r3
 800378c:	d11a      	bne.n	80037c4 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003794:	4013      	ands	r3, r2
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800379a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800379c:	4293      	cmp	r3, r2
 800379e:	d111      	bne.n	80037c4 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037aa:	085b      	lsrs	r3, r3, #1
 80037ac:	3b01      	subs	r3, #1
 80037ae:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d107      	bne.n	80037c4 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037be:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d001      	beq.n	80037c8 <HAL_RCC_OscConfig+0x6a0>
#endif
      {
        return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e000      	b.n	80037ca <HAL_RCC_OscConfig+0x6a2>
      }
    }
  }
  return HAL_OK;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3718      	adds	r7, #24
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	40023800 	.word	0x40023800
 80037d8:	0800db88 	.word	0x0800db88

080037dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80037e6:	2300      	movs	r3, #0
 80037e8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d101      	bne.n	80037f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e18c      	b.n	8003b0e <HAL_RCC_ClockConfig+0x332>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d003      	beq.n	8003804 <HAL_RCC_ClockConfig+0x28>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2b0f      	cmp	r3, #15
 8003802:	d904      	bls.n	800380e <HAL_RCC_ClockConfig+0x32>
 8003804:	f240 21dd 	movw	r1, #733	; 0x2dd
 8003808:	4887      	ldr	r0, [pc, #540]	; (8003a28 <HAL_RCC_ClockConfig+0x24c>)
 800380a:	f7fd ff80 	bl	800170e <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d031      	beq.n	8003878 <HAL_RCC_ClockConfig+0x9c>
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d02e      	beq.n	8003878 <HAL_RCC_ClockConfig+0x9c>
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	2b02      	cmp	r3, #2
 800381e:	d02b      	beq.n	8003878 <HAL_RCC_ClockConfig+0x9c>
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	2b03      	cmp	r3, #3
 8003824:	d028      	beq.n	8003878 <HAL_RCC_ClockConfig+0x9c>
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	2b04      	cmp	r3, #4
 800382a:	d025      	beq.n	8003878 <HAL_RCC_ClockConfig+0x9c>
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	2b05      	cmp	r3, #5
 8003830:	d022      	beq.n	8003878 <HAL_RCC_ClockConfig+0x9c>
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	2b06      	cmp	r3, #6
 8003836:	d01f      	beq.n	8003878 <HAL_RCC_ClockConfig+0x9c>
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	2b07      	cmp	r3, #7
 800383c:	d01c      	beq.n	8003878 <HAL_RCC_ClockConfig+0x9c>
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	2b08      	cmp	r3, #8
 8003842:	d019      	beq.n	8003878 <HAL_RCC_ClockConfig+0x9c>
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	2b09      	cmp	r3, #9
 8003848:	d016      	beq.n	8003878 <HAL_RCC_ClockConfig+0x9c>
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	2b0a      	cmp	r3, #10
 800384e:	d013      	beq.n	8003878 <HAL_RCC_ClockConfig+0x9c>
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	2b0b      	cmp	r3, #11
 8003854:	d010      	beq.n	8003878 <HAL_RCC_ClockConfig+0x9c>
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	2b0c      	cmp	r3, #12
 800385a:	d00d      	beq.n	8003878 <HAL_RCC_ClockConfig+0x9c>
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	2b0d      	cmp	r3, #13
 8003860:	d00a      	beq.n	8003878 <HAL_RCC_ClockConfig+0x9c>
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	2b0e      	cmp	r3, #14
 8003866:	d007      	beq.n	8003878 <HAL_RCC_ClockConfig+0x9c>
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	2b0f      	cmp	r3, #15
 800386c:	d004      	beq.n	8003878 <HAL_RCC_ClockConfig+0x9c>
 800386e:	f240 21de 	movw	r1, #734	; 0x2de
 8003872:	486d      	ldr	r0, [pc, #436]	; (8003a28 <HAL_RCC_ClockConfig+0x24c>)
 8003874:	f7fd ff4b 	bl	800170e <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003878:	4b6c      	ldr	r3, [pc, #432]	; (8003a2c <HAL_RCC_ClockConfig+0x250>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 030f 	and.w	r3, r3, #15
 8003880:	683a      	ldr	r2, [r7, #0]
 8003882:	429a      	cmp	r2, r3
 8003884:	d910      	bls.n	80038a8 <HAL_RCC_ClockConfig+0xcc>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003886:	4b69      	ldr	r3, [pc, #420]	; (8003a2c <HAL_RCC_ClockConfig+0x250>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f023 020f 	bic.w	r2, r3, #15
 800388e:	4967      	ldr	r1, [pc, #412]	; (8003a2c <HAL_RCC_ClockConfig+0x250>)
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	4313      	orrs	r3, r2
 8003894:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003896:	4b65      	ldr	r3, [pc, #404]	; (8003a2c <HAL_RCC_ClockConfig+0x250>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 030f 	and.w	r3, r3, #15
 800389e:	683a      	ldr	r2, [r7, #0]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d001      	beq.n	80038a8 <HAL_RCC_ClockConfig+0xcc>
    {
      return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e132      	b.n	8003b0e <HAL_RCC_ClockConfig+0x332>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d049      	beq.n	8003948 <HAL_RCC_ClockConfig+0x16c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0304 	and.w	r3, r3, #4
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d005      	beq.n	80038cc <HAL_RCC_ClockConfig+0xf0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038c0:	4b5b      	ldr	r3, [pc, #364]	; (8003a30 <HAL_RCC_ClockConfig+0x254>)
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	4a5a      	ldr	r2, [pc, #360]	; (8003a30 <HAL_RCC_ClockConfig+0x254>)
 80038c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0308 	and.w	r3, r3, #8
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d005      	beq.n	80038e4 <HAL_RCC_ClockConfig+0x108>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038d8:	4b55      	ldr	r3, [pc, #340]	; (8003a30 <HAL_RCC_ClockConfig+0x254>)
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	4a54      	ldr	r2, [pc, #336]	; (8003a30 <HAL_RCC_ClockConfig+0x254>)
 80038de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038e2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d024      	beq.n	8003936 <HAL_RCC_ClockConfig+0x15a>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	2b80      	cmp	r3, #128	; 0x80
 80038f2:	d020      	beq.n	8003936 <HAL_RCC_ClockConfig+0x15a>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	2b90      	cmp	r3, #144	; 0x90
 80038fa:	d01c      	beq.n	8003936 <HAL_RCC_ClockConfig+0x15a>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	2ba0      	cmp	r3, #160	; 0xa0
 8003902:	d018      	beq.n	8003936 <HAL_RCC_ClockConfig+0x15a>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	2bb0      	cmp	r3, #176	; 0xb0
 800390a:	d014      	beq.n	8003936 <HAL_RCC_ClockConfig+0x15a>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	2bc0      	cmp	r3, #192	; 0xc0
 8003912:	d010      	beq.n	8003936 <HAL_RCC_ClockConfig+0x15a>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	2bd0      	cmp	r3, #208	; 0xd0
 800391a:	d00c      	beq.n	8003936 <HAL_RCC_ClockConfig+0x15a>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	2be0      	cmp	r3, #224	; 0xe0
 8003922:	d008      	beq.n	8003936 <HAL_RCC_ClockConfig+0x15a>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	2bf0      	cmp	r3, #240	; 0xf0
 800392a:	d004      	beq.n	8003936 <HAL_RCC_ClockConfig+0x15a>
 800392c:	f240 3102 	movw	r1, #770	; 0x302
 8003930:	483d      	ldr	r0, [pc, #244]	; (8003a28 <HAL_RCC_ClockConfig+0x24c>)
 8003932:	f7fd feec 	bl	800170e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003936:	4b3e      	ldr	r3, [pc, #248]	; (8003a30 <HAL_RCC_ClockConfig+0x254>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	493b      	ldr	r1, [pc, #236]	; (8003a30 <HAL_RCC_ClockConfig+0x254>)
 8003944:	4313      	orrs	r3, r2
 8003946:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0301 	and.w	r3, r3, #1
 8003950:	2b00      	cmp	r3, #0
 8003952:	d051      	beq.n	80039f8 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d00c      	beq.n	8003976 <HAL_RCC_ClockConfig+0x19a>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d008      	beq.n	8003976 <HAL_RCC_ClockConfig+0x19a>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	2b02      	cmp	r3, #2
 800396a:	d004      	beq.n	8003976 <HAL_RCC_ClockConfig+0x19a>
 800396c:	f240 3109 	movw	r1, #777	; 0x309
 8003970:	482d      	ldr	r0, [pc, #180]	; (8003a28 <HAL_RCC_ClockConfig+0x24c>)
 8003972:	f7fd fecc 	bl	800170e <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d107      	bne.n	800398e <HAL_RCC_ClockConfig+0x1b2>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800397e:	4b2c      	ldr	r3, [pc, #176]	; (8003a30 <HAL_RCC_ClockConfig+0x254>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d115      	bne.n	80039b6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e0bf      	b.n	8003b0e <HAL_RCC_ClockConfig+0x332>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	2b02      	cmp	r3, #2
 8003994:	d107      	bne.n	80039a6 <HAL_RCC_ClockConfig+0x1ca>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003996:	4b26      	ldr	r3, [pc, #152]	; (8003a30 <HAL_RCC_ClockConfig+0x254>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d109      	bne.n	80039b6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e0b3      	b.n	8003b0e <HAL_RCC_ClockConfig+0x332>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039a6:	4b22      	ldr	r3, [pc, #136]	; (8003a30 <HAL_RCC_ClockConfig+0x254>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e0ab      	b.n	8003b0e <HAL_RCC_ClockConfig+0x332>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039b6:	4b1e      	ldr	r3, [pc, #120]	; (8003a30 <HAL_RCC_ClockConfig+0x254>)
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f023 0203 	bic.w	r2, r3, #3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	491b      	ldr	r1, [pc, #108]	; (8003a30 <HAL_RCC_ClockConfig+0x254>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039c8:	f7fe fb7c 	bl	80020c4 <HAL_GetTick>
 80039cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ce:	e00a      	b.n	80039e6 <HAL_RCC_ClockConfig+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039d0:	f7fe fb78 	bl	80020c4 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	f241 3288 	movw	r2, #5000	; 0x1388
 80039de:	4293      	cmp	r3, r2
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_ClockConfig+0x20a>
      {
        return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e093      	b.n	8003b0e <HAL_RCC_ClockConfig+0x332>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039e6:	4b12      	ldr	r3, [pc, #72]	; (8003a30 <HAL_RCC_ClockConfig+0x254>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f003 020c 	and.w	r2, r3, #12
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d1eb      	bne.n	80039d0 <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039f8:	4b0c      	ldr	r3, [pc, #48]	; (8003a2c <HAL_RCC_ClockConfig+0x250>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 030f 	and.w	r3, r3, #15
 8003a00:	683a      	ldr	r2, [r7, #0]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d216      	bcs.n	8003a34 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a06:	4b09      	ldr	r3, [pc, #36]	; (8003a2c <HAL_RCC_ClockConfig+0x250>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f023 020f 	bic.w	r2, r3, #15
 8003a0e:	4907      	ldr	r1, [pc, #28]	; (8003a2c <HAL_RCC_ClockConfig+0x250>)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a16:	4b05      	ldr	r3, [pc, #20]	; (8003a2c <HAL_RCC_ClockConfig+0x250>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 030f 	and.w	r3, r3, #15
 8003a1e:	683a      	ldr	r2, [r7, #0]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d007      	beq.n	8003a34 <HAL_RCC_ClockConfig+0x258>
    {
      return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e072      	b.n	8003b0e <HAL_RCC_ClockConfig+0x332>
 8003a28:	0800db88 	.word	0x0800db88
 8003a2c:	40023c00 	.word	0x40023c00
 8003a30:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0304 	and.w	r3, r3, #4
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d025      	beq.n	8003a8c <HAL_RCC_ClockConfig+0x2b0>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d018      	beq.n	8003a7a <HAL_RCC_ClockConfig+0x29e>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a50:	d013      	beq.n	8003a7a <HAL_RCC_ClockConfig+0x29e>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003a5a:	d00e      	beq.n	8003a7a <HAL_RCC_ClockConfig+0x29e>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003a64:	d009      	beq.n	8003a7a <HAL_RCC_ClockConfig+0x29e>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8003a6e:	d004      	beq.n	8003a7a <HAL_RCC_ClockConfig+0x29e>
 8003a70:	f240 3146 	movw	r1, #838	; 0x346
 8003a74:	4828      	ldr	r0, [pc, #160]	; (8003b18 <HAL_RCC_ClockConfig+0x33c>)
 8003a76:	f7fd fe4a 	bl	800170e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a7a:	4b28      	ldr	r3, [pc, #160]	; (8003b1c <HAL_RCC_ClockConfig+0x340>)
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	4925      	ldr	r1, [pc, #148]	; (8003b1c <HAL_RCC_ClockConfig+0x340>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0308 	and.w	r3, r3, #8
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d026      	beq.n	8003ae6 <HAL_RCC_ClockConfig+0x30a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d018      	beq.n	8003ad2 <HAL_RCC_ClockConfig+0x2f6>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	691b      	ldr	r3, [r3, #16]
 8003aa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aa8:	d013      	beq.n	8003ad2 <HAL_RCC_ClockConfig+0x2f6>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003ab2:	d00e      	beq.n	8003ad2 <HAL_RCC_ClockConfig+0x2f6>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	691b      	ldr	r3, [r3, #16]
 8003ab8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003abc:	d009      	beq.n	8003ad2 <HAL_RCC_ClockConfig+0x2f6>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8003ac6:	d004      	beq.n	8003ad2 <HAL_RCC_ClockConfig+0x2f6>
 8003ac8:	f240 314d 	movw	r1, #845	; 0x34d
 8003acc:	4812      	ldr	r0, [pc, #72]	; (8003b18 <HAL_RCC_ClockConfig+0x33c>)
 8003ace:	f7fd fe1e 	bl	800170e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ad2:	4b12      	ldr	r3, [pc, #72]	; (8003b1c <HAL_RCC_ClockConfig+0x340>)
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	00db      	lsls	r3, r3, #3
 8003ae0:	490e      	ldr	r1, [pc, #56]	; (8003b1c <HAL_RCC_ClockConfig+0x340>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ae6:	f000 f821 	bl	8003b2c <HAL_RCC_GetSysClockFreq>
 8003aea:	4602      	mov	r2, r0
 8003aec:	4b0b      	ldr	r3, [pc, #44]	; (8003b1c <HAL_RCC_ClockConfig+0x340>)
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	091b      	lsrs	r3, r3, #4
 8003af2:	f003 030f 	and.w	r3, r3, #15
 8003af6:	490a      	ldr	r1, [pc, #40]	; (8003b20 <HAL_RCC_ClockConfig+0x344>)
 8003af8:	5ccb      	ldrb	r3, [r1, r3]
 8003afa:	fa22 f303 	lsr.w	r3, r2, r3
 8003afe:	4a09      	ldr	r2, [pc, #36]	; (8003b24 <HAL_RCC_ClockConfig+0x348>)
 8003b00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b02:	4b09      	ldr	r3, [pc, #36]	; (8003b28 <HAL_RCC_ClockConfig+0x34c>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4618      	mov	r0, r3
 8003b08:	f7fe fa98 	bl	800203c <HAL_InitTick>

  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	0800db88 	.word	0x0800db88
 8003b1c:	40023800 	.word	0x40023800
 8003b20:	0800dcb8 	.word	0x0800dcb8
 8003b24:	20000000 	.word	0x20000000
 8003b28:	20000004 	.word	0x20000004

08003b2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b30:	b090      	sub	sp, #64	; 0x40
 8003b32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003b34:	2300      	movs	r3, #0
 8003b36:	637b      	str	r3, [r7, #52]	; 0x34
 8003b38:	2300      	movs	r3, #0
 8003b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8003b40:	2300      	movs	r3, #0
 8003b42:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b44:	4b59      	ldr	r3, [pc, #356]	; (8003cac <HAL_RCC_GetSysClockFreq+0x180>)
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f003 030c 	and.w	r3, r3, #12
 8003b4c:	2b08      	cmp	r3, #8
 8003b4e:	d00d      	beq.n	8003b6c <HAL_RCC_GetSysClockFreq+0x40>
 8003b50:	2b08      	cmp	r3, #8
 8003b52:	f200 80a1 	bhi.w	8003c98 <HAL_RCC_GetSysClockFreq+0x16c>
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d002      	beq.n	8003b60 <HAL_RCC_GetSysClockFreq+0x34>
 8003b5a:	2b04      	cmp	r3, #4
 8003b5c:	d003      	beq.n	8003b66 <HAL_RCC_GetSysClockFreq+0x3a>
 8003b5e:	e09b      	b.n	8003c98 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b60:	4b53      	ldr	r3, [pc, #332]	; (8003cb0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003b62:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b64:	e09b      	b.n	8003c9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b66:	4b53      	ldr	r3, [pc, #332]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b68:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b6a:	e098      	b.n	8003c9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b6c:	4b4f      	ldr	r3, [pc, #316]	; (8003cac <HAL_RCC_GetSysClockFreq+0x180>)
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b74:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003b76:	4b4d      	ldr	r3, [pc, #308]	; (8003cac <HAL_RCC_GetSysClockFreq+0x180>)
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d028      	beq.n	8003bd4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b82:	4b4a      	ldr	r3, [pc, #296]	; (8003cac <HAL_RCC_GetSysClockFreq+0x180>)
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	099b      	lsrs	r3, r3, #6
 8003b88:	2200      	movs	r2, #0
 8003b8a:	623b      	str	r3, [r7, #32]
 8003b8c:	627a      	str	r2, [r7, #36]	; 0x24
 8003b8e:	6a3b      	ldr	r3, [r7, #32]
 8003b90:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003b94:	2100      	movs	r1, #0
 8003b96:	4b47      	ldr	r3, [pc, #284]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b98:	fb03 f201 	mul.w	r2, r3, r1
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	fb00 f303 	mul.w	r3, r0, r3
 8003ba2:	4413      	add	r3, r2
 8003ba4:	4a43      	ldr	r2, [pc, #268]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ba6:	fba0 1202 	umull	r1, r2, r0, r2
 8003baa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003bac:	460a      	mov	r2, r1
 8003bae:	62ba      	str	r2, [r7, #40]	; 0x28
 8003bb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bb2:	4413      	add	r3, r2
 8003bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bb8:	2200      	movs	r2, #0
 8003bba:	61bb      	str	r3, [r7, #24]
 8003bbc:	61fa      	str	r2, [r7, #28]
 8003bbe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bc2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003bc6:	f7fd f88f 	bl	8000ce8 <__aeabi_uldivmod>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	460b      	mov	r3, r1
 8003bce:	4613      	mov	r3, r2
 8003bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bd2:	e053      	b.n	8003c7c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bd4:	4b35      	ldr	r3, [pc, #212]	; (8003cac <HAL_RCC_GetSysClockFreq+0x180>)
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	099b      	lsrs	r3, r3, #6
 8003bda:	2200      	movs	r2, #0
 8003bdc:	613b      	str	r3, [r7, #16]
 8003bde:	617a      	str	r2, [r7, #20]
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003be6:	f04f 0b00 	mov.w	fp, #0
 8003bea:	4652      	mov	r2, sl
 8003bec:	465b      	mov	r3, fp
 8003bee:	f04f 0000 	mov.w	r0, #0
 8003bf2:	f04f 0100 	mov.w	r1, #0
 8003bf6:	0159      	lsls	r1, r3, #5
 8003bf8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bfc:	0150      	lsls	r0, r2, #5
 8003bfe:	4602      	mov	r2, r0
 8003c00:	460b      	mov	r3, r1
 8003c02:	ebb2 080a 	subs.w	r8, r2, sl
 8003c06:	eb63 090b 	sbc.w	r9, r3, fp
 8003c0a:	f04f 0200 	mov.w	r2, #0
 8003c0e:	f04f 0300 	mov.w	r3, #0
 8003c12:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003c16:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003c1a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003c1e:	ebb2 0408 	subs.w	r4, r2, r8
 8003c22:	eb63 0509 	sbc.w	r5, r3, r9
 8003c26:	f04f 0200 	mov.w	r2, #0
 8003c2a:	f04f 0300 	mov.w	r3, #0
 8003c2e:	00eb      	lsls	r3, r5, #3
 8003c30:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c34:	00e2      	lsls	r2, r4, #3
 8003c36:	4614      	mov	r4, r2
 8003c38:	461d      	mov	r5, r3
 8003c3a:	eb14 030a 	adds.w	r3, r4, sl
 8003c3e:	603b      	str	r3, [r7, #0]
 8003c40:	eb45 030b 	adc.w	r3, r5, fp
 8003c44:	607b      	str	r3, [r7, #4]
 8003c46:	f04f 0200 	mov.w	r2, #0
 8003c4a:	f04f 0300 	mov.w	r3, #0
 8003c4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c52:	4629      	mov	r1, r5
 8003c54:	028b      	lsls	r3, r1, #10
 8003c56:	4621      	mov	r1, r4
 8003c58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c5c:	4621      	mov	r1, r4
 8003c5e:	028a      	lsls	r2, r1, #10
 8003c60:	4610      	mov	r0, r2
 8003c62:	4619      	mov	r1, r3
 8003c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c66:	2200      	movs	r2, #0
 8003c68:	60bb      	str	r3, [r7, #8]
 8003c6a:	60fa      	str	r2, [r7, #12]
 8003c6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c70:	f7fd f83a 	bl	8000ce8 <__aeabi_uldivmod>
 8003c74:	4602      	mov	r2, r0
 8003c76:	460b      	mov	r3, r1
 8003c78:	4613      	mov	r3, r2
 8003c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003c7c:	4b0b      	ldr	r3, [pc, #44]	; (8003cac <HAL_RCC_GetSysClockFreq+0x180>)
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	0c1b      	lsrs	r3, r3, #16
 8003c82:	f003 0303 	and.w	r3, r3, #3
 8003c86:	3301      	adds	r3, #1
 8003c88:	005b      	lsls	r3, r3, #1
 8003c8a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8003c8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c94:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c96:	e002      	b.n	8003c9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c98:	4b05      	ldr	r3, [pc, #20]	; (8003cb0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c9a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3740      	adds	r7, #64	; 0x40
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003caa:	bf00      	nop
 8003cac:	40023800 	.word	0x40023800
 8003cb0:	00f42400 	.word	0x00f42400
 8003cb4:	017d7840 	.word	0x017d7840

08003cb8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cbc:	4b03      	ldr	r3, [pc, #12]	; (8003ccc <HAL_RCC_GetHCLKFreq+0x14>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	20000000 	.word	0x20000000

08003cd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003cd4:	f7ff fff0 	bl	8003cb8 <HAL_RCC_GetHCLKFreq>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	4b05      	ldr	r3, [pc, #20]	; (8003cf0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	0a9b      	lsrs	r3, r3, #10
 8003ce0:	f003 0307 	and.w	r3, r3, #7
 8003ce4:	4903      	ldr	r1, [pc, #12]	; (8003cf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ce6:	5ccb      	ldrb	r3, [r1, r3]
 8003ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	40023800 	.word	0x40023800
 8003cf4:	0800dcc8 	.word	0x0800dcc8

08003cf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003cfc:	f7ff ffdc 	bl	8003cb8 <HAL_RCC_GetHCLKFreq>
 8003d00:	4602      	mov	r2, r0
 8003d02:	4b05      	ldr	r3, [pc, #20]	; (8003d18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	0b5b      	lsrs	r3, r3, #13
 8003d08:	f003 0307 	and.w	r3, r3, #7
 8003d0c:	4903      	ldr	r1, [pc, #12]	; (8003d1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d0e:	5ccb      	ldrb	r3, [r1, r3]
 8003d10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	40023800 	.word	0x40023800
 8003d1c:	0800dcc8 	.word	0x0800dcc8

08003d20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b088      	sub	sp, #32
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003d30:	2300      	movs	r3, #0
 8003d32:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003d34:	2300      	movs	r3, #0
 8003d36:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0301 	and.w	r3, r3, #1
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f040 8089 	bne.w	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0308 	and.w	r3, r3, #8
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	f040 8082 	bne.w	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0310 	and.w	r3, r3, #16
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d17b      	bne.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d175      	bne.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d16f      	bne.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d169      	bne.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d163      	bne.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d15d      	bne.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d157      	bne.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d151      	bne.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d14b      	bne.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d145      	bne.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d13f      	bne.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d139      	bne.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d133      	bne.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d12d      	bne.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d127      	bne.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d121      	bne.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d11b      	bne.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d115      	bne.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d10f      	bne.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d109      	bne.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0320 	and.w	r3, r3, #32
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d103      	bne.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003e54:	2172      	movs	r1, #114	; 0x72
 8003e56:	4895      	ldr	r0, [pc, #596]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8003e58:	f7fd fc59 	bl	800170e <assert_failed>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0301 	and.w	r3, r3, #1
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d01f      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d008      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x162>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e74:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e78:	d003      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x162>
 8003e7a:	2178      	movs	r1, #120	; 0x78
 8003e7c:	488b      	ldr	r0, [pc, #556]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8003e7e:	f7fd fc46 	bl	800170e <assert_failed>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e82:	4b8b      	ldr	r3, [pc, #556]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	4a8a      	ldr	r2, [pc, #552]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003e88:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003e8c:	6093      	str	r3, [r2, #8]
 8003e8e:	4b88      	ldr	r3, [pc, #544]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003e90:	689a      	ldr	r2, [r3, #8]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e96:	4986      	ldr	r1, [pc, #536]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d101      	bne.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x188>
    {
      plli2sused = 1;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d029      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00d      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ec4:	d008      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ece:	d003      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003ed0:	2188      	movs	r1, #136	; 0x88
 8003ed2:	4876      	ldr	r0, [pc, #472]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8003ed4:	f7fd fc1b 	bl	800170e <assert_failed>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ed8:	4b75      	ldr	r3, [pc, #468]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003eda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ede:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ee6:	4972      	ldr	r1, [pc, #456]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ef6:	d101      	bne.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      plli2sused = 1;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d101      	bne.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    {
      pllsaiused = 1;
 8003f04:	2301      	movs	r3, #1
 8003f06:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d029      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00d      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f24:	d008      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f2e:	d003      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003f30:	219c      	movs	r1, #156	; 0x9c
 8003f32:	485e      	ldr	r0, [pc, #376]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8003f34:	f7fd fbeb 	bl	800170e <assert_failed>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f38:	4b5d      	ldr	r3, [pc, #372]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003f3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f3e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f46:	495a      	ldr	r1, [pc, #360]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f56:	d101      	bne.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      plli2sused = 1;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d101      	bne.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      pllsaiused = 1;
 8003f64:	2301      	movs	r3, #1
 8003f66:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d001      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
      plli2sused = 1;
 8003f74:	2301      	movs	r3, #1
 8003f76:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0320 	and.w	r3, r3, #32
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	f000 8186 	beq.w	8004292 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f8e:	f000 80e4 	beq.w	800415a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f9a:	f000 80de 	beq.w	800415a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa2:	4a44      	ldr	r2, [pc, #272]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	f000 80d8 	beq.w	800415a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fae:	4a42      	ldr	r2, [pc, #264]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	f000 80d2 	beq.w	800415a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fba:	4a40      	ldr	r2, [pc, #256]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	f000 80cc 	beq.w	800415a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc6:	4a3e      	ldr	r2, [pc, #248]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	f000 80c6 	beq.w	800415a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd2:	4a3c      	ldr	r2, [pc, #240]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	f000 80c0 	beq.w	800415a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fde:	4a3a      	ldr	r2, [pc, #232]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	f000 80ba 	beq.w	800415a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fea:	4a38      	ldr	r2, [pc, #224]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	f000 80b4 	beq.w	800415a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff6:	4a36      	ldr	r2, [pc, #216]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	f000 80ae 	beq.w	800415a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004002:	4a34      	ldr	r2, [pc, #208]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8004004:	4293      	cmp	r3, r2
 8004006:	f000 80a8 	beq.w	800415a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400e:	4a32      	ldr	r2, [pc, #200]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>)
 8004010:	4293      	cmp	r3, r2
 8004012:	f000 80a2 	beq.w	800415a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401a:	4a30      	ldr	r2, [pc, #192]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 800401c:	4293      	cmp	r3, r2
 800401e:	f000 809c 	beq.w	800415a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004026:	4a2e      	ldr	r2, [pc, #184]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>)
 8004028:	4293      	cmp	r3, r2
 800402a:	f000 8096 	beq.w	800415a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004032:	4a2c      	ldr	r2, [pc, #176]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 8004034:	4293      	cmp	r3, r2
 8004036:	f000 8090 	beq.w	800415a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403e:	4a2a      	ldr	r2, [pc, #168]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 8004040:	4293      	cmp	r3, r2
 8004042:	f000 808a 	beq.w	800415a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404a:	4a28      	ldr	r2, [pc, #160]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800404c:	4293      	cmp	r3, r2
 800404e:	f000 8084 	beq.w	800415a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004056:	4a26      	ldr	r2, [pc, #152]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d07e      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004060:	4a24      	ldr	r2, [pc, #144]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d079      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406a:	4a23      	ldr	r2, [pc, #140]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d074      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004074:	4a21      	ldr	r2, [pc, #132]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d06f      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407e:	4a20      	ldr	r2, [pc, #128]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d06a      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004088:	4a1e      	ldr	r2, [pc, #120]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d065      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004092:	4a1d      	ldr	r2, [pc, #116]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d060      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409c:	4a1b      	ldr	r2, [pc, #108]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d05b      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a6:	4a1a      	ldr	r2, [pc, #104]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	e033      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 80040ac:	0800dbc0 	.word	0x0800dbc0
 80040b0:	40023800 	.word	0x40023800
 80040b4:	00020300 	.word	0x00020300
 80040b8:	00030300 	.word	0x00030300
 80040bc:	00040300 	.word	0x00040300
 80040c0:	00050300 	.word	0x00050300
 80040c4:	00060300 	.word	0x00060300
 80040c8:	00070300 	.word	0x00070300
 80040cc:	00080300 	.word	0x00080300
 80040d0:	00090300 	.word	0x00090300
 80040d4:	000a0300 	.word	0x000a0300
 80040d8:	000b0300 	.word	0x000b0300
 80040dc:	000c0300 	.word	0x000c0300
 80040e0:	000d0300 	.word	0x000d0300
 80040e4:	000e0300 	.word	0x000e0300
 80040e8:	000f0300 	.word	0x000f0300
 80040ec:	00100300 	.word	0x00100300
 80040f0:	00110300 	.word	0x00110300
 80040f4:	00120300 	.word	0x00120300
 80040f8:	00130300 	.word	0x00130300
 80040fc:	00140300 	.word	0x00140300
 8004100:	00150300 	.word	0x00150300
 8004104:	00160300 	.word	0x00160300
 8004108:	00170300 	.word	0x00170300
 800410c:	00180300 	.word	0x00180300
 8004110:	00190300 	.word	0x00190300
 8004114:	d021      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411a:	4a4c      	ldr	r2, [pc, #304]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d01c      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004124:	4a4a      	ldr	r2, [pc, #296]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d017      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412e:	4a49      	ldr	r2, [pc, #292]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d012      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004138:	4a47      	ldr	r2, [pc, #284]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d00d      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004142:	4a46      	ldr	r2, [pc, #280]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d008      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414c:	4a44      	ldr	r2, [pc, #272]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d003      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004152:	21b7      	movs	r1, #183	; 0xb7
 8004154:	4843      	ldr	r0, [pc, #268]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8004156:	f7fd fada 	bl	800170e <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800415a:	4b43      	ldr	r3, [pc, #268]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800415c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415e:	4a42      	ldr	r2, [pc, #264]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004164:	6413      	str	r3, [r2, #64]	; 0x40
 8004166:	4b40      	ldr	r3, [pc, #256]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800416e:	60bb      	str	r3, [r7, #8]
 8004170:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004172:	4b3e      	ldr	r3, [pc, #248]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a3d      	ldr	r2, [pc, #244]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8004178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800417c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800417e:	f7fd ffa1 	bl	80020c4 <HAL_GetTick>
 8004182:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004184:	e009      	b.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x47a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004186:	f7fd ff9d 	bl	80020c4 <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	2b64      	cmp	r3, #100	; 0x64
 8004192:	d902      	bls.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x47a>
      {
        return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	f000 bd9f 	b.w	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800419a:	4b34      	ldr	r3, [pc, #208]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d0ef      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x466>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80041a6:	4b30      	ldr	r3, [pc, #192]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80041a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041ae:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d036      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041be:	693a      	ldr	r2, [r7, #16]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d02f      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041c4:	4b28      	ldr	r3, [pc, #160]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80041c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041cc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80041ce:	4b26      	ldr	r3, [pc, #152]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80041d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d2:	4a25      	ldr	r2, [pc, #148]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80041d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041d8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80041da:	4b23      	ldr	r3, [pc, #140]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80041dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041de:	4a22      	ldr	r2, [pc, #136]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80041e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041e4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80041e6:	4a20      	ldr	r2, [pc, #128]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80041ec:	4b1e      	ldr	r3, [pc, #120]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80041ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f0:	f003 0301 	and.w	r3, r3, #1
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d115      	bne.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x504>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f8:	f7fd ff64 	bl	80020c4 <HAL_GetTick>
 80041fc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041fe:	e00b      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004200:	f7fd ff60 	bl	80020c4 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	f241 3288 	movw	r2, #5000	; 0x1388
 800420e:	4293      	cmp	r3, r2
 8004210:	d902      	bls.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	f000 bd60 	b.w	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004218:	4b13      	ldr	r3, [pc, #76]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800421a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800421c:	f003 0302 	and.w	r3, r3, #2
 8004220:	2b00      	cmp	r3, #0
 8004222:	d0ed      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004228:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800422c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004230:	d120      	bne.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8004232:	4b0d      	ldr	r3, [pc, #52]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800423e:	4b0c      	ldr	r3, [pc, #48]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8004240:	400b      	ands	r3, r1
 8004242:	4909      	ldr	r1, [pc, #36]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004244:	4313      	orrs	r3, r2
 8004246:	608b      	str	r3, [r1, #8]
 8004248:	e01a      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x560>
 800424a:	bf00      	nop
 800424c:	001a0300 	.word	0x001a0300
 8004250:	001b0300 	.word	0x001b0300
 8004254:	001c0300 	.word	0x001c0300
 8004258:	001d0300 	.word	0x001d0300
 800425c:	001e0300 	.word	0x001e0300
 8004260:	001f0300 	.word	0x001f0300
 8004264:	0800dbc0 	.word	0x0800dbc0
 8004268:	40023800 	.word	0x40023800
 800426c:	40007000 	.word	0x40007000
 8004270:	0ffffcff 	.word	0x0ffffcff
 8004274:	4b9a      	ldr	r3, [pc, #616]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	4a99      	ldr	r2, [pc, #612]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800427a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800427e:	6093      	str	r3, [r2, #8]
 8004280:	4b97      	ldr	r3, [pc, #604]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004282:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004288:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800428c:	4994      	ldr	r1, [pc, #592]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800428e:	4313      	orrs	r3, r2
 8004290:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0310 	and.w	r3, r3, #16
 800429a:	2b00      	cmp	r3, #0
 800429c:	d01d      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d008      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x598>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042ae:	d003      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x598>
 80042b0:	21f1      	movs	r1, #241	; 0xf1
 80042b2:	488c      	ldr	r0, [pc, #560]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 80042b4:	f7fd fa2b 	bl	800170e <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80042b8:	4b89      	ldr	r3, [pc, #548]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80042ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042be:	4a88      	ldr	r2, [pc, #544]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80042c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042c4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80042c8:	4b85      	ldr	r3, [pc, #532]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80042ca:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d2:	4983      	ldr	r1, [pc, #524]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d01c      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x600>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00d      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042f6:	d008      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004300:	d003      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8004302:	21fb      	movs	r1, #251	; 0xfb
 8004304:	4877      	ldr	r0, [pc, #476]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8004306:	f7fd fa02 	bl	800170e <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800430a:	4b75      	ldr	r3, [pc, #468]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800430c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004310:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004318:	4971      	ldr	r1, [pc, #452]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800431a:	4313      	orrs	r3, r2
 800431c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004328:	2b00      	cmp	r3, #0
 800432a:	d01d      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x648>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004330:	2b00      	cmp	r3, #0
 8004332:	d00e      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x632>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004338:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800433c:	d009      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x632>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004342:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004346:	d004      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x632>
 8004348:	f240 1105 	movw	r1, #261	; 0x105
 800434c:	4865      	ldr	r0, [pc, #404]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 800434e:	f7fd f9de 	bl	800170e <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004352:	4b63      	ldr	r3, [pc, #396]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004358:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004360:	495f      	ldr	r1, [pc, #380]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004362:	4313      	orrs	r3, r2
 8004364:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d01d      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x690>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004378:	2b00      	cmp	r3, #0
 800437a:	d00e      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x67a>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004380:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004384:	d009      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800438a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800438e:	d004      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8004390:	f240 110f 	movw	r1, #271	; 0x10f
 8004394:	4853      	ldr	r0, [pc, #332]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8004396:	f7fd f9ba 	bl	800170e <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800439a:	4b51      	ldr	r3, [pc, #324]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800439c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043a8:	494d      	ldr	r1, [pc, #308]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d01d      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d00e      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043cc:	d009      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80043d6:	d004      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 80043d8:	f240 1119 	movw	r1, #281	; 0x119
 80043dc:	4841      	ldr	r0, [pc, #260]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 80043de:	f7fd f996 	bl	800170e <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80043e2:	4b3f      	ldr	r3, [pc, #252]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80043e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f0:	493b      	ldr	r1, [pc, #236]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004400:	2b00      	cmp	r3, #0
 8004402:	d01f      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x724>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004408:	2b00      	cmp	r3, #0
 800440a:	d010      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x70e>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004410:	2b01      	cmp	r3, #1
 8004412:	d00c      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004418:	2b03      	cmp	r3, #3
 800441a:	d008      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x70e>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004420:	2b02      	cmp	r3, #2
 8004422:	d004      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8004424:	f240 1123 	movw	r1, #291	; 0x123
 8004428:	482e      	ldr	r0, [pc, #184]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 800442a:	f7fd f970 	bl	800170e <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800442e:	4b2c      	ldr	r3, [pc, #176]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004434:	f023 0203 	bic.w	r2, r3, #3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800443c:	4928      	ldr	r1, [pc, #160]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800443e:	4313      	orrs	r3, r2
 8004440:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800444c:	2b00      	cmp	r3, #0
 800444e:	d01f      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x770>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004454:	2b00      	cmp	r3, #0
 8004456:	d010      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800445c:	2b04      	cmp	r3, #4
 800445e:	d00c      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004464:	2b0c      	cmp	r3, #12
 8004466:	d008      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800446c:	2b08      	cmp	r3, #8
 800446e:	d004      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8004470:	f240 112d 	movw	r1, #301	; 0x12d
 8004474:	481b      	ldr	r0, [pc, #108]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8004476:	f7fd f94a 	bl	800170e <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800447a:	4b19      	ldr	r3, [pc, #100]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800447c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004480:	f023 020c 	bic.w	r2, r3, #12
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004488:	4915      	ldr	r1, [pc, #84]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800448a:	4313      	orrs	r3, r2
 800448c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004498:	2b00      	cmp	r3, #0
 800449a:	d025      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d010      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044a8:	2b10      	cmp	r3, #16
 80044aa:	d00c      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044b0:	2b30      	cmp	r3, #48	; 0x30
 80044b2:	d008      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044b8:	2b20      	cmp	r3, #32
 80044ba:	d004      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 80044bc:	f240 1137 	movw	r1, #311	; 0x137
 80044c0:	4808      	ldr	r0, [pc, #32]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 80044c2:	f7fd f924 	bl	800170e <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80044c6:	4b06      	ldr	r3, [pc, #24]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80044c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044d4:	4902      	ldr	r1, [pc, #8]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80044dc:	e004      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
 80044de:	bf00      	nop
 80044e0:	40023800 	.word	0x40023800
 80044e4:	0800dbc0 	.word	0x0800dbc0
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d01f      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x814>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d010      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004500:	2b40      	cmp	r3, #64	; 0x40
 8004502:	d00c      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004508:	2bc0      	cmp	r3, #192	; 0xc0
 800450a:	d008      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004510:	2b80      	cmp	r3, #128	; 0x80
 8004512:	d004      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8004514:	f240 1141 	movw	r1, #321	; 0x141
 8004518:	48a0      	ldr	r0, [pc, #640]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 800451a:	f7fd f8f8 	bl	800170e <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800451e:	4ba0      	ldr	r3, [pc, #640]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004524:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800452c:	499c      	ldr	r1, [pc, #624]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800452e:	4313      	orrs	r3, r2
 8004530:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800453c:	2b00      	cmp	r3, #0
 800453e:	d022      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x866>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004544:	2b00      	cmp	r3, #0
 8004546:	d013      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800454c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004550:	d00e      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004556:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800455a:	d009      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x850>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004560:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004564:	d004      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8004566:	f240 114b 	movw	r1, #331	; 0x14b
 800456a:	488c      	ldr	r0, [pc, #560]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 800456c:	f7fd f8cf 	bl	800170e <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004570:	4b8b      	ldr	r3, [pc, #556]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004576:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800457e:	4988      	ldr	r1, [pc, #544]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004580:	4313      	orrs	r3, r2
 8004582:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800458e:	2b00      	cmp	r3, #0
 8004590:	d022      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004596:	2b00      	cmp	r3, #0
 8004598:	d013      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800459e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045a2:	d00e      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80045ac:	d009      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045b6:	d004      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 80045b8:	f240 1155 	movw	r1, #341	; 0x155
 80045bc:	4877      	ldr	r0, [pc, #476]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 80045be:	f7fd f8a6 	bl	800170e <assert_failed>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80045c2:	4b77      	ldr	r3, [pc, #476]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80045c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045c8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045d0:	4973      	ldr	r1, [pc, #460]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d022      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x90a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d013      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045f4:	d00e      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045fa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80045fe:	d009      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004604:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004608:	d004      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 800460a:	f240 115f 	movw	r1, #351	; 0x15f
 800460e:	4863      	ldr	r0, [pc, #396]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8004610:	f7fd f87d 	bl	800170e <assert_failed>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004614:	4b62      	ldr	r3, [pc, #392]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800461a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004622:	495f      	ldr	r1, [pc, #380]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004624:	4313      	orrs	r3, r2
 8004626:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d022      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800463a:	2b00      	cmp	r3, #0
 800463c:	d013      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x946>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004642:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004646:	d00e      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x946>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800464c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004650:	d009      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x946>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004656:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800465a:	d004      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x946>
 800465c:	f240 1169 	movw	r1, #361	; 0x169
 8004660:	484e      	ldr	r0, [pc, #312]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8004662:	f7fd f854 	bl	800170e <assert_failed>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004666:	4b4e      	ldr	r3, [pc, #312]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800466c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004674:	494a      	ldr	r1, [pc, #296]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004676:	4313      	orrs	r3, r2
 8004678:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d018      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x99a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800468c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004690:	d008      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004696:	2b00      	cmp	r3, #0
 8004698:	d004      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800469a:	f240 1173 	movw	r1, #371	; 0x173
 800469e:	483f      	ldr	r0, [pc, #252]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 80046a0:	f7fd f835 	bl	800170e <assert_failed>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80046a4:	4b3e      	ldr	r3, [pc, #248]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80046a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046aa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046b2:	493b      	ldr	r1, [pc, #236]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d01f      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046ce:	d008      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d004      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 80046d8:	f240 117d 	movw	r1, #381	; 0x17d
 80046dc:	482f      	ldr	r0, [pc, #188]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 80046de:	f7fd f816 	bl	800170e <assert_failed>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80046e2:	4b2f      	ldr	r3, [pc, #188]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80046e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046e8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046f0:	492b      	ldr	r1, [pc, #172]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004700:	d101      	bne.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    {
      pllsaiused = 1;
 8004702:	2301      	movs	r3, #1
 8004704:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0308 	and.w	r3, r3, #8
 800470e:	2b00      	cmp	r3, #0
 8004710:	d001      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x9f6>
  {
    pllsaiused = 1;
 8004712:	2301      	movs	r3, #1
 8004714:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d022      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0xa48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004726:	2b00      	cmp	r3, #0
 8004728:	d013      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800472e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004732:	d00e      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004738:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800473c:	d009      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004742:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004746:	d004      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8004748:	f240 1195 	movw	r1, #405	; 0x195
 800474c:	4813      	ldr	r0, [pc, #76]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 800474e:	f7fc ffde 	bl	800170e <assert_failed>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004752:	4b13      	ldr	r3, [pc, #76]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004758:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004760:	490f      	ldr	r1, [pc, #60]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004762:	4313      	orrs	r3, r2
 8004764:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d020      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0xa96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800477a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800477e:	d009      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004786:	2b00      	cmp	r3, #0
 8004788:	d004      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800478a:	f240 119f 	movw	r1, #415	; 0x19f
 800478e:	4803      	ldr	r0, [pc, #12]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8004790:	f7fc ffbd 	bl	800170e <assert_failed>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004794:	4b02      	ldr	r3, [pc, #8]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800479a:	e003      	b.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
 800479c:	0800dbc0 	.word	0x0800dbc0
 80047a0:	40023800 	.word	0x40023800
 80047a4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047ae:	4910      	ldr	r1, [pc, #64]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 80047b0:	4313      	orrs	r3, r2
 80047b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d006      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f000 8155 	beq.w	8004a74 <HAL_RCCEx_PeriphCLKConfig+0xd54>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80047ca:	4b09      	ldr	r3, [pc, #36]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a08      	ldr	r2, [pc, #32]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 80047d0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80047d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047d6:	f7fd fc75 	bl	80020c4 <HAL_GetTick>
 80047da:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047dc:	e00a      	b.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0xad4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80047de:	f7fd fc71 	bl	80020c4 <HAL_GetTick>
 80047e2:	4602      	mov	r2, r0
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	2b64      	cmp	r3, #100	; 0x64
 80047ea:	d903      	bls.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0xad4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e273      	b.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 80047f0:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047f4:	4b9a      	ldr	r3, [pc, #616]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d1ee      	bne.n	80047de <HAL_RCCEx_PeriphCLKConfig+0xabe>
      }
    }

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	2b31      	cmp	r3, #49	; 0x31
 8004806:	d904      	bls.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8004810:	d904      	bls.n	800481c <HAL_RCCEx_PeriphCLKConfig+0xafc>
 8004812:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8004816:	4893      	ldr	r0, [pc, #588]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8004818:	f7fc ff79 	bl	800170e <assert_failed>

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0301 	and.w	r3, r3, #1
 8004824:	2b00      	cmp	r3, #0
 8004826:	d02e      	beq.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0xb66>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800482c:	2b00      	cmp	r3, #0
 800482e:	d12a      	bne.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0xb66>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d903      	bls.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0xb20>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	2b07      	cmp	r3, #7
 800483e:	d904      	bls.n	800484a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8004840:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8004844:	4887      	ldr	r0, [pc, #540]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8004846:	f7fc ff62 	bl	800170e <assert_failed>

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800484a:	4b85      	ldr	r3, [pc, #532]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800484c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004850:	0c1b      	lsrs	r3, r3, #16
 8004852:	f003 0303 	and.w	r3, r3, #3
 8004856:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004858:	4b81      	ldr	r3, [pc, #516]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800485a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800485e:	0e1b      	lsrs	r3, r3, #24
 8004860:	f003 030f 	and.w	r3, r3, #15
 8004864:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	019a      	lsls	r2, r3, #6
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	041b      	lsls	r3, r3, #16
 8004870:	431a      	orrs	r2, r3
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	061b      	lsls	r3, r3, #24
 8004876:	431a      	orrs	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	071b      	lsls	r3, r3, #28
 800487e:	4978      	ldr	r1, [pc, #480]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8004880:	4313      	orrs	r3, r2
 8004882:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d004      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004896:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800489a:	d00a      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0xb92>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d048      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048b0:	d143      	bne.n	800493a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {
      /* Check for PLLI2S Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d903      	bls.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0xba2>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	2b0f      	cmp	r3, #15
 80048c0:	d904      	bls.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80048c2:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 80048c6:	4867      	ldr	r0, [pc, #412]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80048c8:	f7fc ff21 	bl	800170e <assert_failed>
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d003      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0xbbc>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d8:	2b20      	cmp	r3, #32
 80048da:	d904      	bls.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0xbc6>
 80048dc:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 80048e0:	4860      	ldr	r0, [pc, #384]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80048e2:	f7fc ff14 	bl	800170e <assert_failed>

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80048e6:	4b5e      	ldr	r3, [pc, #376]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80048e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048ec:	0c1b      	lsrs	r3, r3, #16
 80048ee:	f003 0303 	and.w	r3, r3, #3
 80048f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80048f4:	4b5a      	ldr	r3, [pc, #360]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80048f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048fa:	0f1b      	lsrs	r3, r3, #28
 80048fc:	f003 0307 	and.w	r3, r3, #7
 8004900:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	019a      	lsls	r2, r3, #6
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	041b      	lsls	r3, r3, #16
 800490c:	431a      	orrs	r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	061b      	lsls	r3, r3, #24
 8004914:	431a      	orrs	r2, r3
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	071b      	lsls	r3, r3, #28
 800491a:	4951      	ldr	r1, [pc, #324]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800491c:	4313      	orrs	r3, r2
 800491e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004922:	4b4f      	ldr	r3, [pc, #316]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8004924:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004928:	f023 021f 	bic.w	r2, r3, #31
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004930:	3b01      	subs	r3, #1
 8004932:	494b      	ldr	r1, [pc, #300]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8004934:	4313      	orrs	r3, r2
 8004936:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d032      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d010      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	2b01      	cmp	r3, #1
 8004954:	d00c      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	2b02      	cmp	r3, #2
 800495c:	d008      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	2b03      	cmp	r3, #3
 8004964:	d004      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8004966:	f240 2105 	movw	r1, #517	; 0x205
 800496a:	483e      	ldr	r0, [pc, #248]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 800496c:	f7fc fecf 	bl	800170e <assert_failed>

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004970:	4b3b      	ldr	r3, [pc, #236]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8004972:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004976:	0e1b      	lsrs	r3, r3, #24
 8004978:	f003 030f 	and.w	r3, r3, #15
 800497c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800497e:	4b38      	ldr	r3, [pc, #224]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8004980:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004984:	0f1b      	lsrs	r3, r3, #28
 8004986:	f003 0307 	and.w	r3, r3, #7
 800498a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	019a      	lsls	r2, r3, #6
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	041b      	lsls	r3, r3, #16
 8004998:	431a      	orrs	r2, r3
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	061b      	lsls	r3, r3, #24
 800499e:	431a      	orrs	r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	071b      	lsls	r3, r3, #28
 80049a4:	492e      	ldr	r1, [pc, #184]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d040      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	691b      	ldr	r3, [r3, #16]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d010      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d00c      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d008      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	691b      	ldr	r3, [r3, #16]
 80049d4:	2b03      	cmp	r3, #3
 80049d6:	d004      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80049d8:	f44f 7105 	mov.w	r1, #532	; 0x214
 80049dc:	4821      	ldr	r0, [pc, #132]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80049de:	f7fc fe96 	bl	800170e <assert_failed>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d903      	bls.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	2b07      	cmp	r3, #7
 80049f0:	d904      	bls.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80049f2:	f240 2115 	movw	r1, #533	; 0x215
 80049f6:	481b      	ldr	r0, [pc, #108]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80049f8:	f7fc fe89 	bl	800170e <assert_failed>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d903      	bls.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0xcec>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	2b0f      	cmp	r3, #15
 8004a0a:	d904      	bls.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
 8004a0c:	f240 2116 	movw	r1, #534	; 0x216
 8004a10:	4814      	ldr	r0, [pc, #80]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8004a12:	f7fc fe7c 	bl	800170e <assert_failed>

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	019a      	lsls	r2, r3, #6
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	041b      	lsls	r3, r3, #16
 8004a22:	431a      	orrs	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	061b      	lsls	r3, r3, #24
 8004a2a:	431a      	orrs	r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	071b      	lsls	r3, r3, #28
 8004a32:	490b      	ldr	r1, [pc, #44]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8004a34:	4313      	orrs	r3, r2
 8004a36:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004a3a:	4b09      	ldr	r3, [pc, #36]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a08      	ldr	r2, [pc, #32]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8004a40:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a46:	f7fd fb3d 	bl	80020c4 <HAL_GetTick>
 8004a4a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a4c:	e00c      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0xd48>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a4e:	f7fd fb39 	bl	80020c4 <HAL_GetTick>
 8004a52:	4602      	mov	r2, r0
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	2b64      	cmp	r3, #100	; 0x64
 8004a5a:	d905      	bls.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0xd48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e13b      	b.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 8004a60:	40023800 	.word	0x40023800
 8004a64:	0800dbc0 	.word	0x0800dbc0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a68:	4b9d      	ldr	r3, [pc, #628]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d0ec      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0xd2e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	f040 812d 	bne.w	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004a7c:	4b98      	ldr	r3, [pc, #608]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a97      	ldr	r2, [pc, #604]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004a82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a88:	f7fd fb1c 	bl	80020c4 <HAL_GetTick>
 8004a8c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a8e:	e008      	b.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0xd82>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004a90:	f7fd fb18 	bl	80020c4 <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	2b64      	cmp	r3, #100	; 0x64
 8004a9c:	d901      	bls.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0xd82>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e11a      	b.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004aa2:	4b8f      	ldr	r3, [pc, #572]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004aaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004aae:	d0ef      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0xd70>
      }
    }

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	695b      	ldr	r3, [r3, #20]
 8004ab4:	2b31      	cmp	r3, #49	; 0x31
 8004ab6:	d904      	bls.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0xda2>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	695b      	ldr	r3, [r3, #20]
 8004abc:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8004ac0:	d904      	bls.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0xdac>
 8004ac2:	f44f 7111 	mov.w	r1, #580	; 0x244
 8004ac6:	4887      	ldr	r0, [pc, #540]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8004ac8:	f7fc fe21 	bl	800170e <assert_failed>

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d003      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d009      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0xdd4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d048      	beq.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0xe5e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d144      	bne.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0xe5e>
    {
      /* check for PLLSAIQ Parameter */
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	699b      	ldr	r3, [r3, #24]
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d903      	bls.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0xde4>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	699b      	ldr	r3, [r3, #24]
 8004b00:	2b0f      	cmp	r3, #15
 8004b02:	d904      	bls.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0xdee>
 8004b04:	f240 214b 	movw	r1, #587	; 0x24b
 8004b08:	4876      	ldr	r0, [pc, #472]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8004b0a:	f7fc fe00 	bl	800170e <assert_failed>
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d003      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0xdfe>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b1a:	2b20      	cmp	r3, #32
 8004b1c:	d904      	bls.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0xe08>
 8004b1e:	f240 214d 	movw	r1, #589	; 0x24d
 8004b22:	4870      	ldr	r0, [pc, #448]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8004b24:	f7fc fdf3 	bl	800170e <assert_failed>

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b28:	4b6d      	ldr	r3, [pc, #436]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b2e:	0c1b      	lsrs	r3, r3, #16
 8004b30:	f003 0303 	and.w	r3, r3, #3
 8004b34:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b36:	4b6a      	ldr	r3, [pc, #424]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b3c:	0f1b      	lsrs	r3, r3, #28
 8004b3e:	f003 0307 	and.w	r3, r3, #7
 8004b42:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	695b      	ldr	r3, [r3, #20]
 8004b48:	019a      	lsls	r2, r3, #6
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	041b      	lsls	r3, r3, #16
 8004b4e:	431a      	orrs	r2, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	699b      	ldr	r3, [r3, #24]
 8004b54:	061b      	lsls	r3, r3, #24
 8004b56:	431a      	orrs	r2, r3
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	071b      	lsls	r3, r3, #28
 8004b5c:	4960      	ldr	r1, [pc, #384]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004b64:	4b5e      	ldr	r3, [pc, #376]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004b66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b6a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b72:	3b01      	subs	r3, #1
 8004b74:	021b      	lsls	r3, r3, #8
 8004b76:	495a      	ldr	r1, [pc, #360]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d037      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0xeda>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b92:	d132      	bne.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0xeda>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a1b      	ldr	r3, [r3, #32]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d010      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a1b      	ldr	r3, [r3, #32]
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d00c      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a1b      	ldr	r3, [r3, #32]
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d008      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a1b      	ldr	r3, [r3, #32]
 8004bb0:	2b03      	cmp	r3, #3
 8004bb2:	d004      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8004bb4:	f44f 7118 	mov.w	r1, #608	; 0x260
 8004bb8:	484a      	ldr	r0, [pc, #296]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8004bba:	f7fc fda8 	bl	800170e <assert_failed>
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004bbe:	4b48      	ldr	r3, [pc, #288]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc4:	0e1b      	lsrs	r3, r3, #24
 8004bc6:	f003 030f 	and.w	r3, r3, #15
 8004bca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004bcc:	4b44      	ldr	r3, [pc, #272]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bd2:	0f1b      	lsrs	r3, r3, #28
 8004bd4:	f003 0307 	and.w	r3, r3, #7
 8004bd8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	695b      	ldr	r3, [r3, #20]
 8004bde:	019a      	lsls	r2, r3, #6
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a1b      	ldr	r3, [r3, #32]
 8004be4:	041b      	lsls	r3, r3, #16
 8004be6:	431a      	orrs	r2, r3
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	061b      	lsls	r3, r3, #24
 8004bec:	431a      	orrs	r2, r3
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	071b      	lsls	r3, r3, #28
 8004bf2:	493b      	ldr	r1, [pc, #236]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0308 	and.w	r3, r3, #8
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d04d      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0xf82>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	69db      	ldr	r3, [r3, #28]
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d903      	bls.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0xef6>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	69db      	ldr	r3, [r3, #28]
 8004c12:	2b07      	cmp	r3, #7
 8004c14:	d904      	bls.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0xf00>
 8004c16:	f240 216f 	movw	r1, #623	; 0x26f
 8004c1a:	4832      	ldr	r0, [pc, #200]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8004c1c:	f7fc fd77 	bl	800170e <assert_failed>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d013      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c30:	d00e      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c3a:	d009      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c40:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004c44:	d004      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 8004c46:	f44f 711c 	mov.w	r1, #624	; 0x270
 8004c4a:	4826      	ldr	r0, [pc, #152]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8004c4c:	f7fc fd5f 	bl	800170e <assert_failed>

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004c50:	4b23      	ldr	r3, [pc, #140]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c56:	0e1b      	lsrs	r3, r3, #24
 8004c58:	f003 030f 	and.w	r3, r3, #15
 8004c5c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004c5e:	4b20      	ldr	r3, [pc, #128]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c64:	0c1b      	lsrs	r3, r3, #16
 8004c66:	f003 0303 	and.w	r3, r3, #3
 8004c6a:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	695b      	ldr	r3, [r3, #20]
 8004c70:	019a      	lsls	r2, r3, #6
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	041b      	lsls	r3, r3, #16
 8004c76:	431a      	orrs	r2, r3
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	061b      	lsls	r3, r3, #24
 8004c7c:	431a      	orrs	r2, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	69db      	ldr	r3, [r3, #28]
 8004c82:	071b      	lsls	r3, r3, #28
 8004c84:	4916      	ldr	r1, [pc, #88]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004c8c:	4b14      	ldr	r3, [pc, #80]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004c8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c92:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9a:	4911      	ldr	r1, [pc, #68]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004ca2:	4b0f      	ldr	r3, [pc, #60]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a0e      	ldr	r2, [pc, #56]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cae:	f7fd fa09 	bl	80020c4 <HAL_GetTick>
 8004cb2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004cb4:	e008      	b.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004cb6:	f7fd fa05 	bl	80020c4 <HAL_GetTick>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	2b64      	cmp	r3, #100	; 0x64
 8004cc2:	d901      	bls.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	e007      	b.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004cc8:	4b05      	ldr	r3, [pc, #20]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cd4:	d1ef      	bne.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0xf96>
      }
    }
  }
  return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3720      	adds	r7, #32
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	40023800 	.word	0x40023800
 8004ce4:	0800dbc0 	.word	0x0800dbc0

08004ce8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d101      	bne.n	8004cfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e0f5      	b.n	8004ee6 <HAL_TIM_Base_Init+0x1fe>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a7c      	ldr	r2, [pc, #496]	; (8004ef0 <HAL_TIM_Base_Init+0x208>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d045      	beq.n	8004d90 <HAL_TIM_Base_Init+0xa8>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d0c:	d040      	beq.n	8004d90 <HAL_TIM_Base_Init+0xa8>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a78      	ldr	r2, [pc, #480]	; (8004ef4 <HAL_TIM_Base_Init+0x20c>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d03b      	beq.n	8004d90 <HAL_TIM_Base_Init+0xa8>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a76      	ldr	r2, [pc, #472]	; (8004ef8 <HAL_TIM_Base_Init+0x210>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d036      	beq.n	8004d90 <HAL_TIM_Base_Init+0xa8>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a75      	ldr	r2, [pc, #468]	; (8004efc <HAL_TIM_Base_Init+0x214>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d031      	beq.n	8004d90 <HAL_TIM_Base_Init+0xa8>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a73      	ldr	r2, [pc, #460]	; (8004f00 <HAL_TIM_Base_Init+0x218>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d02c      	beq.n	8004d90 <HAL_TIM_Base_Init+0xa8>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a72      	ldr	r2, [pc, #456]	; (8004f04 <HAL_TIM_Base_Init+0x21c>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d027      	beq.n	8004d90 <HAL_TIM_Base_Init+0xa8>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a70      	ldr	r2, [pc, #448]	; (8004f08 <HAL_TIM_Base_Init+0x220>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d022      	beq.n	8004d90 <HAL_TIM_Base_Init+0xa8>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a6f      	ldr	r2, [pc, #444]	; (8004f0c <HAL_TIM_Base_Init+0x224>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d01d      	beq.n	8004d90 <HAL_TIM_Base_Init+0xa8>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a6d      	ldr	r2, [pc, #436]	; (8004f10 <HAL_TIM_Base_Init+0x228>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d018      	beq.n	8004d90 <HAL_TIM_Base_Init+0xa8>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a6c      	ldr	r2, [pc, #432]	; (8004f14 <HAL_TIM_Base_Init+0x22c>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d013      	beq.n	8004d90 <HAL_TIM_Base_Init+0xa8>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a6a      	ldr	r2, [pc, #424]	; (8004f18 <HAL_TIM_Base_Init+0x230>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d00e      	beq.n	8004d90 <HAL_TIM_Base_Init+0xa8>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a69      	ldr	r2, [pc, #420]	; (8004f1c <HAL_TIM_Base_Init+0x234>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d009      	beq.n	8004d90 <HAL_TIM_Base_Init+0xa8>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a67      	ldr	r2, [pc, #412]	; (8004f20 <HAL_TIM_Base_Init+0x238>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d004      	beq.n	8004d90 <HAL_TIM_Base_Init+0xa8>
 8004d86:	f44f 718b 	mov.w	r1, #278	; 0x116
 8004d8a:	4866      	ldr	r0, [pc, #408]	; (8004f24 <HAL_TIM_Base_Init+0x23c>)
 8004d8c:	f7fc fcbf 	bl	800170e <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d014      	beq.n	8004dc2 <HAL_TIM_Base_Init+0xda>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	2b10      	cmp	r3, #16
 8004d9e:	d010      	beq.n	8004dc2 <HAL_TIM_Base_Init+0xda>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	2b20      	cmp	r3, #32
 8004da6:	d00c      	beq.n	8004dc2 <HAL_TIM_Base_Init+0xda>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	2b40      	cmp	r3, #64	; 0x40
 8004dae:	d008      	beq.n	8004dc2 <HAL_TIM_Base_Init+0xda>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	2b60      	cmp	r3, #96	; 0x60
 8004db6:	d004      	beq.n	8004dc2 <HAL_TIM_Base_Init+0xda>
 8004db8:	f240 1117 	movw	r1, #279	; 0x117
 8004dbc:	4859      	ldr	r0, [pc, #356]	; (8004f24 <HAL_TIM_Base_Init+0x23c>)
 8004dbe:	f7fc fca6 	bl	800170e <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00e      	beq.n	8004de8 <HAL_TIM_Base_Init+0x100>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dd2:	d009      	beq.n	8004de8 <HAL_TIM_Base_Init+0x100>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ddc:	d004      	beq.n	8004de8 <HAL_TIM_Base_Init+0x100>
 8004dde:	f44f 718c 	mov.w	r1, #280	; 0x118
 8004de2:	4850      	ldr	r0, [pc, #320]	; (8004f24 <HAL_TIM_Base_Init+0x23c>)
 8004de4:	f7fc fc93 	bl	800170e <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004df0:	d004      	beq.n	8004dfc <HAL_TIM_Base_Init+0x114>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a41      	ldr	r2, [pc, #260]	; (8004efc <HAL_TIM_Base_Init+0x214>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d107      	bne.n	8004e0c <HAL_TIM_Base_Init+0x124>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	bf14      	ite	ne
 8004e04:	2301      	movne	r3, #1
 8004e06:	2300      	moveq	r3, #0
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	e00e      	b.n	8004e2a <HAL_TIM_Base_Init+0x142>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d006      	beq.n	8004e22 <HAL_TIM_Base_Init+0x13a>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e1c:	d201      	bcs.n	8004e22 <HAL_TIM_Base_Init+0x13a>
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e000      	b.n	8004e24 <HAL_TIM_Base_Init+0x13c>
 8004e22:	2300      	movs	r3, #0
 8004e24:	f003 0301 	and.w	r3, r3, #1
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d104      	bne.n	8004e38 <HAL_TIM_Base_Init+0x150>
 8004e2e:	f240 1119 	movw	r1, #281	; 0x119
 8004e32:	483c      	ldr	r0, [pc, #240]	; (8004f24 <HAL_TIM_Base_Init+0x23c>)
 8004e34:	f7fc fc6b 	bl	800170e <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	699b      	ldr	r3, [r3, #24]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d008      	beq.n	8004e52 <HAL_TIM_Base_Init+0x16a>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	699b      	ldr	r3, [r3, #24]
 8004e44:	2b80      	cmp	r3, #128	; 0x80
 8004e46:	d004      	beq.n	8004e52 <HAL_TIM_Base_Init+0x16a>
 8004e48:	f44f 718d 	mov.w	r1, #282	; 0x11a
 8004e4c:	4835      	ldr	r0, [pc, #212]	; (8004f24 <HAL_TIM_Base_Init+0x23c>)
 8004e4e:	f7fc fc5e 	bl	800170e <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d106      	bne.n	8004e6c <HAL_TIM_Base_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f7fc ff98 	bl	8001d9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2202      	movs	r2, #2
 8004e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	3304      	adds	r3, #4
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	4610      	mov	r0, r2
 8004e80:	f001 fa52 	bl	8006328 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3708      	adds	r7, #8
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	40010000 	.word	0x40010000
 8004ef4:	40000400 	.word	0x40000400
 8004ef8:	40000800 	.word	0x40000800
 8004efc:	40000c00 	.word	0x40000c00
 8004f00:	40001000 	.word	0x40001000
 8004f04:	40001400 	.word	0x40001400
 8004f08:	40010400 	.word	0x40010400
 8004f0c:	40014000 	.word	0x40014000
 8004f10:	40014400 	.word	0x40014400
 8004f14:	40014800 	.word	0x40014800
 8004f18:	40001800 	.word	0x40001800
 8004f1c:	40001c00 	.word	0x40001c00
 8004f20:	40002000 	.word	0x40002000
 8004f24:	0800dbfc 	.word	0x0800dbfc

08004f28 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d101      	bne.n	8004f3a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e0f5      	b.n	8005126 <HAL_TIM_PWM_Init+0x1fe>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a7c      	ldr	r2, [pc, #496]	; (8005130 <HAL_TIM_PWM_Init+0x208>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d045      	beq.n	8004fd0 <HAL_TIM_PWM_Init+0xa8>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f4c:	d040      	beq.n	8004fd0 <HAL_TIM_PWM_Init+0xa8>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a78      	ldr	r2, [pc, #480]	; (8005134 <HAL_TIM_PWM_Init+0x20c>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d03b      	beq.n	8004fd0 <HAL_TIM_PWM_Init+0xa8>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a76      	ldr	r2, [pc, #472]	; (8005138 <HAL_TIM_PWM_Init+0x210>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d036      	beq.n	8004fd0 <HAL_TIM_PWM_Init+0xa8>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a75      	ldr	r2, [pc, #468]	; (800513c <HAL_TIM_PWM_Init+0x214>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d031      	beq.n	8004fd0 <HAL_TIM_PWM_Init+0xa8>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a73      	ldr	r2, [pc, #460]	; (8005140 <HAL_TIM_PWM_Init+0x218>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d02c      	beq.n	8004fd0 <HAL_TIM_PWM_Init+0xa8>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a72      	ldr	r2, [pc, #456]	; (8005144 <HAL_TIM_PWM_Init+0x21c>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d027      	beq.n	8004fd0 <HAL_TIM_PWM_Init+0xa8>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a70      	ldr	r2, [pc, #448]	; (8005148 <HAL_TIM_PWM_Init+0x220>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d022      	beq.n	8004fd0 <HAL_TIM_PWM_Init+0xa8>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a6f      	ldr	r2, [pc, #444]	; (800514c <HAL_TIM_PWM_Init+0x224>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d01d      	beq.n	8004fd0 <HAL_TIM_PWM_Init+0xa8>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a6d      	ldr	r2, [pc, #436]	; (8005150 <HAL_TIM_PWM_Init+0x228>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d018      	beq.n	8004fd0 <HAL_TIM_PWM_Init+0xa8>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a6c      	ldr	r2, [pc, #432]	; (8005154 <HAL_TIM_PWM_Init+0x22c>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d013      	beq.n	8004fd0 <HAL_TIM_PWM_Init+0xa8>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a6a      	ldr	r2, [pc, #424]	; (8005158 <HAL_TIM_PWM_Init+0x230>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d00e      	beq.n	8004fd0 <HAL_TIM_PWM_Init+0xa8>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a69      	ldr	r2, [pc, #420]	; (800515c <HAL_TIM_PWM_Init+0x234>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d009      	beq.n	8004fd0 <HAL_TIM_PWM_Init+0xa8>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a67      	ldr	r2, [pc, #412]	; (8005160 <HAL_TIM_PWM_Init+0x238>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d004      	beq.n	8004fd0 <HAL_TIM_PWM_Init+0xa8>
 8004fc6:	f240 5133 	movw	r1, #1331	; 0x533
 8004fca:	4866      	ldr	r0, [pc, #408]	; (8005164 <HAL_TIM_PWM_Init+0x23c>)
 8004fcc:	f7fc fb9f 	bl	800170e <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d014      	beq.n	8005002 <HAL_TIM_PWM_Init+0xda>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	2b10      	cmp	r3, #16
 8004fde:	d010      	beq.n	8005002 <HAL_TIM_PWM_Init+0xda>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	2b20      	cmp	r3, #32
 8004fe6:	d00c      	beq.n	8005002 <HAL_TIM_PWM_Init+0xda>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	2b40      	cmp	r3, #64	; 0x40
 8004fee:	d008      	beq.n	8005002 <HAL_TIM_PWM_Init+0xda>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	2b60      	cmp	r3, #96	; 0x60
 8004ff6:	d004      	beq.n	8005002 <HAL_TIM_PWM_Init+0xda>
 8004ff8:	f240 5134 	movw	r1, #1332	; 0x534
 8004ffc:	4859      	ldr	r0, [pc, #356]	; (8005164 <HAL_TIM_PWM_Init+0x23c>)
 8004ffe:	f7fc fb86 	bl	800170e <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d00e      	beq.n	8005028 <HAL_TIM_PWM_Init+0x100>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005012:	d009      	beq.n	8005028 <HAL_TIM_PWM_Init+0x100>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800501c:	d004      	beq.n	8005028 <HAL_TIM_PWM_Init+0x100>
 800501e:	f240 5135 	movw	r1, #1333	; 0x535
 8005022:	4850      	ldr	r0, [pc, #320]	; (8005164 <HAL_TIM_PWM_Init+0x23c>)
 8005024:	f7fc fb73 	bl	800170e <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005030:	d004      	beq.n	800503c <HAL_TIM_PWM_Init+0x114>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a41      	ldr	r2, [pc, #260]	; (800513c <HAL_TIM_PWM_Init+0x214>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d107      	bne.n	800504c <HAL_TIM_PWM_Init+0x124>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	2b00      	cmp	r3, #0
 8005042:	bf14      	ite	ne
 8005044:	2301      	movne	r3, #1
 8005046:	2300      	moveq	r3, #0
 8005048:	b2db      	uxtb	r3, r3
 800504a:	e00e      	b.n	800506a <HAL_TIM_PWM_Init+0x142>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d006      	beq.n	8005062 <HAL_TIM_PWM_Init+0x13a>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800505c:	d201      	bcs.n	8005062 <HAL_TIM_PWM_Init+0x13a>
 800505e:	2301      	movs	r3, #1
 8005060:	e000      	b.n	8005064 <HAL_TIM_PWM_Init+0x13c>
 8005062:	2300      	movs	r3, #0
 8005064:	f003 0301 	and.w	r3, r3, #1
 8005068:	b2db      	uxtb	r3, r3
 800506a:	2b00      	cmp	r3, #0
 800506c:	d104      	bne.n	8005078 <HAL_TIM_PWM_Init+0x150>
 800506e:	f240 5136 	movw	r1, #1334	; 0x536
 8005072:	483c      	ldr	r0, [pc, #240]	; (8005164 <HAL_TIM_PWM_Init+0x23c>)
 8005074:	f7fc fb4b 	bl	800170e <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	699b      	ldr	r3, [r3, #24]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d008      	beq.n	8005092 <HAL_TIM_PWM_Init+0x16a>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	699b      	ldr	r3, [r3, #24]
 8005084:	2b80      	cmp	r3, #128	; 0x80
 8005086:	d004      	beq.n	8005092 <HAL_TIM_PWM_Init+0x16a>
 8005088:	f240 5137 	movw	r1, #1335	; 0x537
 800508c:	4835      	ldr	r0, [pc, #212]	; (8005164 <HAL_TIM_PWM_Init+0x23c>)
 800508e:	f7fc fb3e 	bl	800170e <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005098:	b2db      	uxtb	r3, r3
 800509a:	2b00      	cmp	r3, #0
 800509c:	d106      	bne.n	80050ac <HAL_TIM_PWM_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 f85e 	bl	8005168 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2202      	movs	r2, #2
 80050b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	3304      	adds	r3, #4
 80050bc:	4619      	mov	r1, r3
 80050be:	4610      	mov	r0, r2
 80050c0:	f001 f932 	bl	8006328 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3708      	adds	r7, #8
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	40010000 	.word	0x40010000
 8005134:	40000400 	.word	0x40000400
 8005138:	40000800 	.word	0x40000800
 800513c:	40000c00 	.word	0x40000c00
 8005140:	40001000 	.word	0x40001000
 8005144:	40001400 	.word	0x40001400
 8005148:	40010400 	.word	0x40010400
 800514c:	40014000 	.word	0x40014000
 8005150:	40014400 	.word	0x40014400
 8005154:	40014800 	.word	0x40014800
 8005158:	40001800 	.word	0x40001800
 800515c:	40001c00 	.word	0x40001c00
 8005160:	40002000 	.word	0x40002000
 8005164:	0800dbfc 	.word	0x0800dbfc

08005168 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a89      	ldr	r2, [pc, #548]	; (80053b0 <HAL_TIM_PWM_Start+0x234>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d117      	bne.n	80051c0 <HAL_TIM_PWM_Start+0x44>
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	2b00      	cmp	r3, #0
 8005194:	f000 80ae 	beq.w	80052f4 <HAL_TIM_PWM_Start+0x178>
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	2b04      	cmp	r3, #4
 800519c:	f000 80aa 	beq.w	80052f4 <HAL_TIM_PWM_Start+0x178>
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	2b08      	cmp	r3, #8
 80051a4:	f000 80a6 	beq.w	80052f4 <HAL_TIM_PWM_Start+0x178>
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	2b0c      	cmp	r3, #12
 80051ac:	f000 80a2 	beq.w	80052f4 <HAL_TIM_PWM_Start+0x178>
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	2b10      	cmp	r3, #16
 80051b4:	f000 809e 	beq.w	80052f4 <HAL_TIM_PWM_Start+0x178>
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	2b14      	cmp	r3, #20
 80051bc:	f000 809a 	beq.w	80052f4 <HAL_TIM_PWM_Start+0x178>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051c8:	d10f      	bne.n	80051ea <HAL_TIM_PWM_Start+0x6e>
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	f000 8091 	beq.w	80052f4 <HAL_TIM_PWM_Start+0x178>
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	2b04      	cmp	r3, #4
 80051d6:	f000 808d 	beq.w	80052f4 <HAL_TIM_PWM_Start+0x178>
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	2b08      	cmp	r3, #8
 80051de:	f000 8089 	beq.w	80052f4 <HAL_TIM_PWM_Start+0x178>
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	2b0c      	cmp	r3, #12
 80051e6:	f000 8085 	beq.w	80052f4 <HAL_TIM_PWM_Start+0x178>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a71      	ldr	r2, [pc, #452]	; (80053b4 <HAL_TIM_PWM_Start+0x238>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d10b      	bne.n	800520c <HAL_TIM_PWM_Start+0x90>
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d07c      	beq.n	80052f4 <HAL_TIM_PWM_Start+0x178>
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	2b04      	cmp	r3, #4
 80051fe:	d079      	beq.n	80052f4 <HAL_TIM_PWM_Start+0x178>
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	2b08      	cmp	r3, #8
 8005204:	d076      	beq.n	80052f4 <HAL_TIM_PWM_Start+0x178>
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	2b0c      	cmp	r3, #12
 800520a:	d073      	beq.n	80052f4 <HAL_TIM_PWM_Start+0x178>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a69      	ldr	r2, [pc, #420]	; (80053b8 <HAL_TIM_PWM_Start+0x23c>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d10b      	bne.n	800522e <HAL_TIM_PWM_Start+0xb2>
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d06b      	beq.n	80052f4 <HAL_TIM_PWM_Start+0x178>
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	2b04      	cmp	r3, #4
 8005220:	d068      	beq.n	80052f4 <HAL_TIM_PWM_Start+0x178>
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	2b08      	cmp	r3, #8
 8005226:	d065      	beq.n	80052f4 <HAL_TIM_PWM_Start+0x178>
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	2b0c      	cmp	r3, #12
 800522c:	d062      	beq.n	80052f4 <HAL_TIM_PWM_Start+0x178>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a62      	ldr	r2, [pc, #392]	; (80053bc <HAL_TIM_PWM_Start+0x240>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d10b      	bne.n	8005250 <HAL_TIM_PWM_Start+0xd4>
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d05a      	beq.n	80052f4 <HAL_TIM_PWM_Start+0x178>
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	2b04      	cmp	r3, #4
 8005242:	d057      	beq.n	80052f4 <HAL_TIM_PWM_Start+0x178>
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	2b08      	cmp	r3, #8
 8005248:	d054      	beq.n	80052f4 <HAL_TIM_PWM_Start+0x178>
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	2b0c      	cmp	r3, #12
 800524e:	d051      	beq.n	80052f4 <HAL_TIM_PWM_Start+0x178>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a5a      	ldr	r2, [pc, #360]	; (80053c0 <HAL_TIM_PWM_Start+0x244>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d111      	bne.n	800527e <HAL_TIM_PWM_Start+0x102>
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d049      	beq.n	80052f4 <HAL_TIM_PWM_Start+0x178>
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	2b04      	cmp	r3, #4
 8005264:	d046      	beq.n	80052f4 <HAL_TIM_PWM_Start+0x178>
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	2b08      	cmp	r3, #8
 800526a:	d043      	beq.n	80052f4 <HAL_TIM_PWM_Start+0x178>
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	2b0c      	cmp	r3, #12
 8005270:	d040      	beq.n	80052f4 <HAL_TIM_PWM_Start+0x178>
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	2b10      	cmp	r3, #16
 8005276:	d03d      	beq.n	80052f4 <HAL_TIM_PWM_Start+0x178>
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	2b14      	cmp	r3, #20
 800527c:	d03a      	beq.n	80052f4 <HAL_TIM_PWM_Start+0x178>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a50      	ldr	r2, [pc, #320]	; (80053c4 <HAL_TIM_PWM_Start+0x248>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d105      	bne.n	8005294 <HAL_TIM_PWM_Start+0x118>
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d032      	beq.n	80052f4 <HAL_TIM_PWM_Start+0x178>
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	2b04      	cmp	r3, #4
 8005292:	d02f      	beq.n	80052f4 <HAL_TIM_PWM_Start+0x178>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a4b      	ldr	r2, [pc, #300]	; (80053c8 <HAL_TIM_PWM_Start+0x24c>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d102      	bne.n	80052a4 <HAL_TIM_PWM_Start+0x128>
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d027      	beq.n	80052f4 <HAL_TIM_PWM_Start+0x178>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a48      	ldr	r2, [pc, #288]	; (80053cc <HAL_TIM_PWM_Start+0x250>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d102      	bne.n	80052b4 <HAL_TIM_PWM_Start+0x138>
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d01f      	beq.n	80052f4 <HAL_TIM_PWM_Start+0x178>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a45      	ldr	r2, [pc, #276]	; (80053d0 <HAL_TIM_PWM_Start+0x254>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d105      	bne.n	80052ca <HAL_TIM_PWM_Start+0x14e>
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d017      	beq.n	80052f4 <HAL_TIM_PWM_Start+0x178>
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	2b04      	cmp	r3, #4
 80052c8:	d014      	beq.n	80052f4 <HAL_TIM_PWM_Start+0x178>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a41      	ldr	r2, [pc, #260]	; (80053d4 <HAL_TIM_PWM_Start+0x258>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d102      	bne.n	80052da <HAL_TIM_PWM_Start+0x15e>
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d00c      	beq.n	80052f4 <HAL_TIM_PWM_Start+0x178>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a3e      	ldr	r2, [pc, #248]	; (80053d8 <HAL_TIM_PWM_Start+0x25c>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d102      	bne.n	80052ea <HAL_TIM_PWM_Start+0x16e>
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d004      	beq.n	80052f4 <HAL_TIM_PWM_Start+0x178>
 80052ea:	f240 51bc 	movw	r1, #1468	; 0x5bc
 80052ee:	483b      	ldr	r0, [pc, #236]	; (80053dc <HAL_TIM_PWM_Start+0x260>)
 80052f0:	f7fc fa0d 	bl	800170e <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d109      	bne.n	800530e <HAL_TIM_PWM_Start+0x192>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005300:	b2db      	uxtb	r3, r3
 8005302:	2b01      	cmp	r3, #1
 8005304:	bf14      	ite	ne
 8005306:	2301      	movne	r3, #1
 8005308:	2300      	moveq	r3, #0
 800530a:	b2db      	uxtb	r3, r3
 800530c:	e03c      	b.n	8005388 <HAL_TIM_PWM_Start+0x20c>
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	2b04      	cmp	r3, #4
 8005312:	d109      	bne.n	8005328 <HAL_TIM_PWM_Start+0x1ac>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800531a:	b2db      	uxtb	r3, r3
 800531c:	2b01      	cmp	r3, #1
 800531e:	bf14      	ite	ne
 8005320:	2301      	movne	r3, #1
 8005322:	2300      	moveq	r3, #0
 8005324:	b2db      	uxtb	r3, r3
 8005326:	e02f      	b.n	8005388 <HAL_TIM_PWM_Start+0x20c>
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	2b08      	cmp	r3, #8
 800532c:	d109      	bne.n	8005342 <HAL_TIM_PWM_Start+0x1c6>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005334:	b2db      	uxtb	r3, r3
 8005336:	2b01      	cmp	r3, #1
 8005338:	bf14      	ite	ne
 800533a:	2301      	movne	r3, #1
 800533c:	2300      	moveq	r3, #0
 800533e:	b2db      	uxtb	r3, r3
 8005340:	e022      	b.n	8005388 <HAL_TIM_PWM_Start+0x20c>
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	2b0c      	cmp	r3, #12
 8005346:	d109      	bne.n	800535c <HAL_TIM_PWM_Start+0x1e0>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800534e:	b2db      	uxtb	r3, r3
 8005350:	2b01      	cmp	r3, #1
 8005352:	bf14      	ite	ne
 8005354:	2301      	movne	r3, #1
 8005356:	2300      	moveq	r3, #0
 8005358:	b2db      	uxtb	r3, r3
 800535a:	e015      	b.n	8005388 <HAL_TIM_PWM_Start+0x20c>
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	2b10      	cmp	r3, #16
 8005360:	d109      	bne.n	8005376 <HAL_TIM_PWM_Start+0x1fa>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005368:	b2db      	uxtb	r3, r3
 800536a:	2b01      	cmp	r3, #1
 800536c:	bf14      	ite	ne
 800536e:	2301      	movne	r3, #1
 8005370:	2300      	moveq	r3, #0
 8005372:	b2db      	uxtb	r3, r3
 8005374:	e008      	b.n	8005388 <HAL_TIM_PWM_Start+0x20c>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800537c:	b2db      	uxtb	r3, r3
 800537e:	2b01      	cmp	r3, #1
 8005380:	bf14      	ite	ne
 8005382:	2301      	movne	r3, #1
 8005384:	2300      	moveq	r3, #0
 8005386:	b2db      	uxtb	r3, r3
 8005388:	2b00      	cmp	r3, #0
 800538a:	d001      	beq.n	8005390 <HAL_TIM_PWM_Start+0x214>
  {
    return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e0aa      	b.n	80054e6 <HAL_TIM_PWM_Start+0x36a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d104      	bne.n	80053a0 <HAL_TIM_PWM_Start+0x224>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2202      	movs	r2, #2
 800539a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800539e:	e03b      	b.n	8005418 <HAL_TIM_PWM_Start+0x29c>
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	2b04      	cmp	r3, #4
 80053a4:	d11c      	bne.n	80053e0 <HAL_TIM_PWM_Start+0x264>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2202      	movs	r2, #2
 80053aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053ae:	e033      	b.n	8005418 <HAL_TIM_PWM_Start+0x29c>
 80053b0:	40010000 	.word	0x40010000
 80053b4:	40000400 	.word	0x40000400
 80053b8:	40000800 	.word	0x40000800
 80053bc:	40000c00 	.word	0x40000c00
 80053c0:	40010400 	.word	0x40010400
 80053c4:	40014000 	.word	0x40014000
 80053c8:	40014400 	.word	0x40014400
 80053cc:	40014800 	.word	0x40014800
 80053d0:	40001800 	.word	0x40001800
 80053d4:	40001c00 	.word	0x40001c00
 80053d8:	40002000 	.word	0x40002000
 80053dc:	0800dbfc 	.word	0x0800dbfc
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	2b08      	cmp	r3, #8
 80053e4:	d104      	bne.n	80053f0 <HAL_TIM_PWM_Start+0x274>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2202      	movs	r2, #2
 80053ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053ee:	e013      	b.n	8005418 <HAL_TIM_PWM_Start+0x29c>
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	2b0c      	cmp	r3, #12
 80053f4:	d104      	bne.n	8005400 <HAL_TIM_PWM_Start+0x284>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2202      	movs	r2, #2
 80053fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053fe:	e00b      	b.n	8005418 <HAL_TIM_PWM_Start+0x29c>
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	2b10      	cmp	r3, #16
 8005404:	d104      	bne.n	8005410 <HAL_TIM_PWM_Start+0x294>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2202      	movs	r2, #2
 800540a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800540e:	e003      	b.n	8005418 <HAL_TIM_PWM_Start+0x29c>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2202      	movs	r2, #2
 8005414:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2201      	movs	r2, #1
 800541e:	6839      	ldr	r1, [r7, #0]
 8005420:	4618      	mov	r0, r3
 8005422:	f001 fba3 	bl	8006b6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a31      	ldr	r2, [pc, #196]	; (80054f0 <HAL_TIM_PWM_Start+0x374>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d004      	beq.n	800543a <HAL_TIM_PWM_Start+0x2be>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a2f      	ldr	r2, [pc, #188]	; (80054f4 <HAL_TIM_PWM_Start+0x378>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d101      	bne.n	800543e <HAL_TIM_PWM_Start+0x2c2>
 800543a:	2301      	movs	r3, #1
 800543c:	e000      	b.n	8005440 <HAL_TIM_PWM_Start+0x2c4>
 800543e:	2300      	movs	r3, #0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d007      	beq.n	8005454 <HAL_TIM_PWM_Start+0x2d8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005452:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a25      	ldr	r2, [pc, #148]	; (80054f0 <HAL_TIM_PWM_Start+0x374>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d022      	beq.n	80054a4 <HAL_TIM_PWM_Start+0x328>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005466:	d01d      	beq.n	80054a4 <HAL_TIM_PWM_Start+0x328>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a22      	ldr	r2, [pc, #136]	; (80054f8 <HAL_TIM_PWM_Start+0x37c>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d018      	beq.n	80054a4 <HAL_TIM_PWM_Start+0x328>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a21      	ldr	r2, [pc, #132]	; (80054fc <HAL_TIM_PWM_Start+0x380>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d013      	beq.n	80054a4 <HAL_TIM_PWM_Start+0x328>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a1f      	ldr	r2, [pc, #124]	; (8005500 <HAL_TIM_PWM_Start+0x384>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d00e      	beq.n	80054a4 <HAL_TIM_PWM_Start+0x328>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a1a      	ldr	r2, [pc, #104]	; (80054f4 <HAL_TIM_PWM_Start+0x378>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d009      	beq.n	80054a4 <HAL_TIM_PWM_Start+0x328>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a1b      	ldr	r2, [pc, #108]	; (8005504 <HAL_TIM_PWM_Start+0x388>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d004      	beq.n	80054a4 <HAL_TIM_PWM_Start+0x328>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a1a      	ldr	r2, [pc, #104]	; (8005508 <HAL_TIM_PWM_Start+0x38c>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d115      	bne.n	80054d0 <HAL_TIM_PWM_Start+0x354>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	689a      	ldr	r2, [r3, #8]
 80054aa:	4b18      	ldr	r3, [pc, #96]	; (800550c <HAL_TIM_PWM_Start+0x390>)
 80054ac:	4013      	ands	r3, r2
 80054ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2b06      	cmp	r3, #6
 80054b4:	d015      	beq.n	80054e2 <HAL_TIM_PWM_Start+0x366>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054bc:	d011      	beq.n	80054e2 <HAL_TIM_PWM_Start+0x366>
    {
      __HAL_TIM_ENABLE(htim);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f042 0201 	orr.w	r2, r2, #1
 80054cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054ce:	e008      	b.n	80054e2 <HAL_TIM_PWM_Start+0x366>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f042 0201 	orr.w	r2, r2, #1
 80054de:	601a      	str	r2, [r3, #0]
 80054e0:	e000      	b.n	80054e4 <HAL_TIM_PWM_Start+0x368>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3710      	adds	r7, #16
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop
 80054f0:	40010000 	.word	0x40010000
 80054f4:	40010400 	.word	0x40010400
 80054f8:	40000400 	.word	0x40000400
 80054fc:	40000800 	.word	0x40000800
 8005500:	40000c00 	.word	0x40000c00
 8005504:	40014000 	.word	0x40014000
 8005508:	40001800 	.word	0x40001800
 800550c:	00010007 	.word	0x00010007

08005510 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b082      	sub	sp, #8
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	f003 0302 	and.w	r3, r3, #2
 8005522:	2b02      	cmp	r3, #2
 8005524:	d122      	bne.n	800556c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	f003 0302 	and.w	r3, r3, #2
 8005530:	2b02      	cmp	r3, #2
 8005532:	d11b      	bne.n	800556c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f06f 0202 	mvn.w	r2, #2
 800553c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2201      	movs	r2, #1
 8005542:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	699b      	ldr	r3, [r3, #24]
 800554a:	f003 0303 	and.w	r3, r3, #3
 800554e:	2b00      	cmp	r3, #0
 8005550:	d003      	beq.n	800555a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 feca 	bl	80062ec <HAL_TIM_IC_CaptureCallback>
 8005558:	e005      	b.n	8005566 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 febc 	bl	80062d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f000 fecd 	bl	8006300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	691b      	ldr	r3, [r3, #16]
 8005572:	f003 0304 	and.w	r3, r3, #4
 8005576:	2b04      	cmp	r3, #4
 8005578:	d122      	bne.n	80055c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	f003 0304 	and.w	r3, r3, #4
 8005584:	2b04      	cmp	r3, #4
 8005586:	d11b      	bne.n	80055c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f06f 0204 	mvn.w	r2, #4
 8005590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2202      	movs	r2, #2
 8005596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	699b      	ldr	r3, [r3, #24]
 800559e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d003      	beq.n	80055ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 fea0 	bl	80062ec <HAL_TIM_IC_CaptureCallback>
 80055ac:	e005      	b.n	80055ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 fe92 	bl	80062d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f000 fea3 	bl	8006300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	f003 0308 	and.w	r3, r3, #8
 80055ca:	2b08      	cmp	r3, #8
 80055cc:	d122      	bne.n	8005614 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	f003 0308 	and.w	r3, r3, #8
 80055d8:	2b08      	cmp	r3, #8
 80055da:	d11b      	bne.n	8005614 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f06f 0208 	mvn.w	r2, #8
 80055e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2204      	movs	r2, #4
 80055ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	69db      	ldr	r3, [r3, #28]
 80055f2:	f003 0303 	and.w	r3, r3, #3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d003      	beq.n	8005602 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f000 fe76 	bl	80062ec <HAL_TIM_IC_CaptureCallback>
 8005600:	e005      	b.n	800560e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 fe68 	bl	80062d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f000 fe79 	bl	8006300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	f003 0310 	and.w	r3, r3, #16
 800561e:	2b10      	cmp	r3, #16
 8005620:	d122      	bne.n	8005668 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	f003 0310 	and.w	r3, r3, #16
 800562c:	2b10      	cmp	r3, #16
 800562e:	d11b      	bne.n	8005668 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f06f 0210 	mvn.w	r2, #16
 8005638:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2208      	movs	r2, #8
 800563e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	69db      	ldr	r3, [r3, #28]
 8005646:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800564a:	2b00      	cmp	r3, #0
 800564c:	d003      	beq.n	8005656 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 fe4c 	bl	80062ec <HAL_TIM_IC_CaptureCallback>
 8005654:	e005      	b.n	8005662 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 fe3e 	bl	80062d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f000 fe4f 	bl	8006300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	f003 0301 	and.w	r3, r3, #1
 8005672:	2b01      	cmp	r3, #1
 8005674:	d10e      	bne.n	8005694 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	f003 0301 	and.w	r3, r3, #1
 8005680:	2b01      	cmp	r3, #1
 8005682:	d107      	bne.n	8005694 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f06f 0201 	mvn.w	r2, #1
 800568c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 fe18 	bl	80062c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800569e:	2b80      	cmp	r3, #128	; 0x80
 80056a0:	d10e      	bne.n	80056c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ac:	2b80      	cmp	r3, #128	; 0x80
 80056ae:	d107      	bne.n	80056c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80056b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f001 fc42 	bl	8006f44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056ce:	d10e      	bne.n	80056ee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056da:	2b80      	cmp	r3, #128	; 0x80
 80056dc:	d107      	bne.n	80056ee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80056e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f001 fc35 	bl	8006f58 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	691b      	ldr	r3, [r3, #16]
 80056f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056f8:	2b40      	cmp	r3, #64	; 0x40
 80056fa:	d10e      	bne.n	800571a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005706:	2b40      	cmp	r3, #64	; 0x40
 8005708:	d107      	bne.n	800571a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005712:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 fdfd 	bl	8006314 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	691b      	ldr	r3, [r3, #16]
 8005720:	f003 0320 	and.w	r3, r3, #32
 8005724:	2b20      	cmp	r3, #32
 8005726:	d10e      	bne.n	8005746 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	f003 0320 	and.w	r3, r3, #32
 8005732:	2b20      	cmp	r3, #32
 8005734:	d107      	bne.n	8005746 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f06f 0220 	mvn.w	r2, #32
 800573e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f001 fbf5 	bl	8006f30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005746:	bf00      	nop
 8005748:	3708      	adds	r7, #8
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
	...

08005750 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b086      	sub	sp, #24
 8005754:	af00      	add	r7, sp, #0
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800575c:	2300      	movs	r3, #0
 800575e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d016      	beq.n	8005794 <HAL_TIM_PWM_ConfigChannel+0x44>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2b04      	cmp	r3, #4
 800576a:	d013      	beq.n	8005794 <HAL_TIM_PWM_ConfigChannel+0x44>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2b08      	cmp	r3, #8
 8005770:	d010      	beq.n	8005794 <HAL_TIM_PWM_ConfigChannel+0x44>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2b0c      	cmp	r3, #12
 8005776:	d00d      	beq.n	8005794 <HAL_TIM_PWM_ConfigChannel+0x44>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2b10      	cmp	r3, #16
 800577c:	d00a      	beq.n	8005794 <HAL_TIM_PWM_ConfigChannel+0x44>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2b14      	cmp	r3, #20
 8005782:	d007      	beq.n	8005794 <HAL_TIM_PWM_ConfigChannel+0x44>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2b3c      	cmp	r3, #60	; 0x3c
 8005788:	d004      	beq.n	8005794 <HAL_TIM_PWM_ConfigChannel+0x44>
 800578a:	f241 01af 	movw	r1, #4271	; 0x10af
 800578e:	4895      	ldr	r0, [pc, #596]	; (80059e4 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8005790:	f7fb ffbd 	bl	800170e <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2b60      	cmp	r3, #96	; 0x60
 800579a:	d01c      	beq.n	80057d6 <HAL_TIM_PWM_ConfigChannel+0x86>
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2b70      	cmp	r3, #112	; 0x70
 80057a2:	d018      	beq.n	80057d6 <HAL_TIM_PWM_ConfigChannel+0x86>
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a8f      	ldr	r2, [pc, #572]	; (80059e8 <HAL_TIM_PWM_ConfigChannel+0x298>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d013      	beq.n	80057d6 <HAL_TIM_PWM_ConfigChannel+0x86>
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a8e      	ldr	r2, [pc, #568]	; (80059ec <HAL_TIM_PWM_ConfigChannel+0x29c>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d00e      	beq.n	80057d6 <HAL_TIM_PWM_ConfigChannel+0x86>
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a8c      	ldr	r2, [pc, #560]	; (80059f0 <HAL_TIM_PWM_ConfigChannel+0x2a0>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d009      	beq.n	80057d6 <HAL_TIM_PWM_ConfigChannel+0x86>
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a8b      	ldr	r2, [pc, #556]	; (80059f4 <HAL_TIM_PWM_ConfigChannel+0x2a4>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d004      	beq.n	80057d6 <HAL_TIM_PWM_ConfigChannel+0x86>
 80057cc:	f241 01b0 	movw	r1, #4272	; 0x10b0
 80057d0:	4884      	ldr	r0, [pc, #528]	; (80059e4 <HAL_TIM_PWM_ConfigChannel+0x294>)
 80057d2:	f7fb ff9c 	bl	800170e <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d008      	beq.n	80057f0 <HAL_TIM_PWM_ConfigChannel+0xa0>
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	2b02      	cmp	r3, #2
 80057e4:	d004      	beq.n	80057f0 <HAL_TIM_PWM_ConfigChannel+0xa0>
 80057e6:	f241 01b1 	movw	r1, #4273	; 0x10b1
 80057ea:	487e      	ldr	r0, [pc, #504]	; (80059e4 <HAL_TIM_PWM_ConfigChannel+0x294>)
 80057ec:	f7fb ff8f 	bl	800170e <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d008      	beq.n	800580a <HAL_TIM_PWM_ConfigChannel+0xba>
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	2b04      	cmp	r3, #4
 80057fe:	d004      	beq.n	800580a <HAL_TIM_PWM_ConfigChannel+0xba>
 8005800:	f241 01b2 	movw	r1, #4274	; 0x10b2
 8005804:	4877      	ldr	r0, [pc, #476]	; (80059e4 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8005806:	f7fb ff82 	bl	800170e <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005810:	2b01      	cmp	r3, #1
 8005812:	d101      	bne.n	8005818 <HAL_TIM_PWM_ConfigChannel+0xc8>
 8005814:	2302      	movs	r3, #2
 8005816:	e1f3      	b.n	8005c00 <HAL_TIM_PWM_ConfigChannel+0x4b0>
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2b14      	cmp	r3, #20
 8005824:	f200 81e4 	bhi.w	8005bf0 <HAL_TIM_PWM_ConfigChannel+0x4a0>
 8005828:	a201      	add	r2, pc, #4	; (adr r2, 8005830 <HAL_TIM_PWM_ConfigChannel+0xe0>)
 800582a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800582e:	bf00      	nop
 8005830:	08005885 	.word	0x08005885
 8005834:	08005bf1 	.word	0x08005bf1
 8005838:	08005bf1 	.word	0x08005bf1
 800583c:	08005bf1 	.word	0x08005bf1
 8005840:	08005947 	.word	0x08005947
 8005844:	08005bf1 	.word	0x08005bf1
 8005848:	08005bf1 	.word	0x08005bf1
 800584c:	08005bf1 	.word	0x08005bf1
 8005850:	08005a25 	.word	0x08005a25
 8005854:	08005bf1 	.word	0x08005bf1
 8005858:	08005bf1 	.word	0x08005bf1
 800585c:	08005bf1 	.word	0x08005bf1
 8005860:	08005aab 	.word	0x08005aab
 8005864:	08005bf1 	.word	0x08005bf1
 8005868:	08005bf1 	.word	0x08005bf1
 800586c:	08005bf1 	.word	0x08005bf1
 8005870:	08005b33 	.word	0x08005b33
 8005874:	08005bf1 	.word	0x08005bf1
 8005878:	08005bf1 	.word	0x08005bf1
 800587c:	08005bf1 	.word	0x08005bf1
 8005880:	08005b91 	.word	0x08005b91
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a5b      	ldr	r2, [pc, #364]	; (80059f8 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d03b      	beq.n	8005906 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005896:	d036      	beq.n	8005906 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a57      	ldr	r2, [pc, #348]	; (80059fc <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d031      	beq.n	8005906 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a56      	ldr	r2, [pc, #344]	; (8005a00 <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d02c      	beq.n	8005906 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a54      	ldr	r2, [pc, #336]	; (8005a04 <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d027      	beq.n	8005906 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a53      	ldr	r2, [pc, #332]	; (8005a08 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d022      	beq.n	8005906 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a51      	ldr	r2, [pc, #324]	; (8005a0c <HAL_TIM_PWM_ConfigChannel+0x2bc>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d01d      	beq.n	8005906 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a50      	ldr	r2, [pc, #320]	; (8005a10 <HAL_TIM_PWM_ConfigChannel+0x2c0>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d018      	beq.n	8005906 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a4e      	ldr	r2, [pc, #312]	; (8005a14 <HAL_TIM_PWM_ConfigChannel+0x2c4>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d013      	beq.n	8005906 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a4d      	ldr	r2, [pc, #308]	; (8005a18 <HAL_TIM_PWM_ConfigChannel+0x2c8>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d00e      	beq.n	8005906 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a4b      	ldr	r2, [pc, #300]	; (8005a1c <HAL_TIM_PWM_ConfigChannel+0x2cc>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d009      	beq.n	8005906 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a4a      	ldr	r2, [pc, #296]	; (8005a20 <HAL_TIM_PWM_ConfigChannel+0x2d0>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d004      	beq.n	8005906 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80058fc:	f241 01bc 	movw	r1, #4284	; 0x10bc
 8005900:	4838      	ldr	r0, [pc, #224]	; (80059e4 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8005902:	f7fb ff04 	bl	800170e <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68b9      	ldr	r1, [r7, #8]
 800590c:	4618      	mov	r0, r3
 800590e:	f000 fdab 	bl	8006468 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	699a      	ldr	r2, [r3, #24]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f042 0208 	orr.w	r2, r2, #8
 8005920:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	699a      	ldr	r2, [r3, #24]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f022 0204 	bic.w	r2, r2, #4
 8005930:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	6999      	ldr	r1, [r3, #24]
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	691a      	ldr	r2, [r3, #16]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	430a      	orrs	r2, r1
 8005942:	619a      	str	r2, [r3, #24]
      break;
 8005944:	e157      	b.n	8005bf6 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a2b      	ldr	r2, [pc, #172]	; (80059f8 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d027      	beq.n	80059a0 <HAL_TIM_PWM_ConfigChannel+0x250>
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005958:	d022      	beq.n	80059a0 <HAL_TIM_PWM_ConfigChannel+0x250>
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a27      	ldr	r2, [pc, #156]	; (80059fc <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d01d      	beq.n	80059a0 <HAL_TIM_PWM_ConfigChannel+0x250>
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a25      	ldr	r2, [pc, #148]	; (8005a00 <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d018      	beq.n	80059a0 <HAL_TIM_PWM_ConfigChannel+0x250>
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a24      	ldr	r2, [pc, #144]	; (8005a04 <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d013      	beq.n	80059a0 <HAL_TIM_PWM_ConfigChannel+0x250>
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a22      	ldr	r2, [pc, #136]	; (8005a08 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d00e      	beq.n	80059a0 <HAL_TIM_PWM_ConfigChannel+0x250>
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a21      	ldr	r2, [pc, #132]	; (8005a0c <HAL_TIM_PWM_ConfigChannel+0x2bc>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d009      	beq.n	80059a0 <HAL_TIM_PWM_ConfigChannel+0x250>
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a21      	ldr	r2, [pc, #132]	; (8005a18 <HAL_TIM_PWM_ConfigChannel+0x2c8>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d004      	beq.n	80059a0 <HAL_TIM_PWM_ConfigChannel+0x250>
 8005996:	f241 01cd 	movw	r1, #4301	; 0x10cd
 800599a:	4812      	ldr	r0, [pc, #72]	; (80059e4 <HAL_TIM_PWM_ConfigChannel+0x294>)
 800599c:	f7fb feb7 	bl	800170e <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68b9      	ldr	r1, [r7, #8]
 80059a6:	4618      	mov	r0, r3
 80059a8:	f000 fdfa 	bl	80065a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	699a      	ldr	r2, [r3, #24]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	699a      	ldr	r2, [r3, #24]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	6999      	ldr	r1, [r3, #24]
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	021a      	lsls	r2, r3, #8
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	430a      	orrs	r2, r1
 80059de:	619a      	str	r2, [r3, #24]
      break;
 80059e0:	e109      	b.n	8005bf6 <HAL_TIM_PWM_ConfigChannel+0x4a6>
 80059e2:	bf00      	nop
 80059e4:	0800dbfc 	.word	0x0800dbfc
 80059e8:	00010040 	.word	0x00010040
 80059ec:	00010050 	.word	0x00010050
 80059f0:	00010060 	.word	0x00010060
 80059f4:	00010070 	.word	0x00010070
 80059f8:	40010000 	.word	0x40010000
 80059fc:	40000400 	.word	0x40000400
 8005a00:	40000800 	.word	0x40000800
 8005a04:	40000c00 	.word	0x40000c00
 8005a08:	40010400 	.word	0x40010400
 8005a0c:	40014000 	.word	0x40014000
 8005a10:	40014400 	.word	0x40014400
 8005a14:	40014800 	.word	0x40014800
 8005a18:	40001800 	.word	0x40001800
 8005a1c:	40001c00 	.word	0x40001c00
 8005a20:	40002000 	.word	0x40002000
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a77      	ldr	r2, [pc, #476]	; (8005c08 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d01d      	beq.n	8005a6a <HAL_TIM_PWM_ConfigChannel+0x31a>
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a36:	d018      	beq.n	8005a6a <HAL_TIM_PWM_ConfigChannel+0x31a>
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a73      	ldr	r2, [pc, #460]	; (8005c0c <HAL_TIM_PWM_ConfigChannel+0x4bc>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d013      	beq.n	8005a6a <HAL_TIM_PWM_ConfigChannel+0x31a>
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a72      	ldr	r2, [pc, #456]	; (8005c10 <HAL_TIM_PWM_ConfigChannel+0x4c0>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d00e      	beq.n	8005a6a <HAL_TIM_PWM_ConfigChannel+0x31a>
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a70      	ldr	r2, [pc, #448]	; (8005c14 <HAL_TIM_PWM_ConfigChannel+0x4c4>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d009      	beq.n	8005a6a <HAL_TIM_PWM_ConfigChannel+0x31a>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a6f      	ldr	r2, [pc, #444]	; (8005c18 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d004      	beq.n	8005a6a <HAL_TIM_PWM_ConfigChannel+0x31a>
 8005a60:	f241 01de 	movw	r1, #4318	; 0x10de
 8005a64:	486d      	ldr	r0, [pc, #436]	; (8005c1c <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 8005a66:	f7fb fe52 	bl	800170e <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	68b9      	ldr	r1, [r7, #8]
 8005a70:	4618      	mov	r0, r3
 8005a72:	f000 fe35 	bl	80066e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	69da      	ldr	r2, [r3, #28]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f042 0208 	orr.w	r2, r2, #8
 8005a84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	69da      	ldr	r2, [r3, #28]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f022 0204 	bic.w	r2, r2, #4
 8005a94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	69d9      	ldr	r1, [r3, #28]
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	691a      	ldr	r2, [r3, #16]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	430a      	orrs	r2, r1
 8005aa6:	61da      	str	r2, [r3, #28]
      break;
 8005aa8:	e0a5      	b.n	8005bf6 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a56      	ldr	r2, [pc, #344]	; (8005c08 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d01d      	beq.n	8005af0 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005abc:	d018      	beq.n	8005af0 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a52      	ldr	r2, [pc, #328]	; (8005c0c <HAL_TIM_PWM_ConfigChannel+0x4bc>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d013      	beq.n	8005af0 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a50      	ldr	r2, [pc, #320]	; (8005c10 <HAL_TIM_PWM_ConfigChannel+0x4c0>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d00e      	beq.n	8005af0 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a4f      	ldr	r2, [pc, #316]	; (8005c14 <HAL_TIM_PWM_ConfigChannel+0x4c4>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d009      	beq.n	8005af0 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a4d      	ldr	r2, [pc, #308]	; (8005c18 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d004      	beq.n	8005af0 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8005ae6:	f241 01ef 	movw	r1, #4335	; 0x10ef
 8005aea:	484c      	ldr	r0, [pc, #304]	; (8005c1c <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 8005aec:	f7fb fe0f 	bl	800170e <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	68b9      	ldr	r1, [r7, #8]
 8005af6:	4618      	mov	r0, r3
 8005af8:	f000 fe92 	bl	8006820 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	69da      	ldr	r2, [r3, #28]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b0a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	69da      	ldr	r2, [r3, #28]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b1a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	69d9      	ldr	r1, [r3, #28]
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	021a      	lsls	r2, r3, #8
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	430a      	orrs	r2, r1
 8005b2e:	61da      	str	r2, [r3, #28]
      break;
 8005b30:	e061      	b.n	8005bf6 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a34      	ldr	r2, [pc, #208]	; (8005c08 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d009      	beq.n	8005b50 <HAL_TIM_PWM_ConfigChannel+0x400>
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a35      	ldr	r2, [pc, #212]	; (8005c18 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d004      	beq.n	8005b50 <HAL_TIM_PWM_ConfigChannel+0x400>
 8005b46:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 8005b4a:	4834      	ldr	r0, [pc, #208]	; (8005c1c <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 8005b4c:	f7fb fddf 	bl	800170e <assert_failed>

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68b9      	ldr	r1, [r7, #8]
 8005b56:	4618      	mov	r0, r3
 8005b58:	f000 fec8 	bl	80068ec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f042 0208 	orr.w	r2, r2, #8
 8005b6a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f022 0204 	bic.w	r2, r2, #4
 8005b7a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	691a      	ldr	r2, [r3, #16]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	430a      	orrs	r2, r1
 8005b8c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005b8e:	e032      	b.n	8005bf6 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a1c      	ldr	r2, [pc, #112]	; (8005c08 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d009      	beq.n	8005bae <HAL_TIM_PWM_ConfigChannel+0x45e>
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a1e      	ldr	r2, [pc, #120]	; (8005c18 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d004      	beq.n	8005bae <HAL_TIM_PWM_ConfigChannel+0x45e>
 8005ba4:	f241 1111 	movw	r1, #4369	; 0x1111
 8005ba8:	481c      	ldr	r0, [pc, #112]	; (8005c1c <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 8005baa:	f7fb fdb0 	bl	800170e <assert_failed>

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	68b9      	ldr	r1, [r7, #8]
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f000 feeb 	bl	8006990 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bc8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bd8:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	691b      	ldr	r3, [r3, #16]
 8005be4:	021a      	lsls	r2, r3, #8
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	430a      	orrs	r2, r1
 8005bec:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005bee:	e002      	b.n	8005bf6 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    default:
      status = HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	75fb      	strb	r3, [r7, #23]
      break;
 8005bf4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005bfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3718      	adds	r7, #24
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	40010000 	.word	0x40010000
 8005c0c:	40000400 	.word	0x40000400
 8005c10:	40000800 	.word	0x40000800
 8005c14:	40000c00 	.word	0x40000c00
 8005c18:	40010400 	.word	0x40010400
 8005c1c:	0800dbfc 	.word	0x0800dbfc

08005c20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d101      	bne.n	8005c3c <HAL_TIM_ConfigClockSource+0x1c>
 8005c38:	2302      	movs	r3, #2
 8005c3a:	e332      	b.n	80062a2 <HAL_TIM_ConfigClockSource+0x682>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2202      	movs	r2, #2
 8005c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c54:	d029      	beq.n	8005caa <HAL_TIM_ConfigClockSource+0x8a>
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	2b70      	cmp	r3, #112	; 0x70
 8005c5c:	d025      	beq.n	8005caa <HAL_TIM_ConfigClockSource+0x8a>
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c66:	d020      	beq.n	8005caa <HAL_TIM_ConfigClockSource+0x8a>
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	2b40      	cmp	r3, #64	; 0x40
 8005c6e:	d01c      	beq.n	8005caa <HAL_TIM_ConfigClockSource+0x8a>
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2b50      	cmp	r3, #80	; 0x50
 8005c76:	d018      	beq.n	8005caa <HAL_TIM_ConfigClockSource+0x8a>
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2b60      	cmp	r3, #96	; 0x60
 8005c7e:	d014      	beq.n	8005caa <HAL_TIM_ConfigClockSource+0x8a>
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d010      	beq.n	8005caa <HAL_TIM_ConfigClockSource+0x8a>
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2b10      	cmp	r3, #16
 8005c8e:	d00c      	beq.n	8005caa <HAL_TIM_ConfigClockSource+0x8a>
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2b20      	cmp	r3, #32
 8005c96:	d008      	beq.n	8005caa <HAL_TIM_ConfigClockSource+0x8a>
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	2b30      	cmp	r3, #48	; 0x30
 8005c9e:	d004      	beq.n	8005caa <HAL_TIM_ConfigClockSource+0x8a>
 8005ca0:	f241 514c 	movw	r1, #5452	; 0x154c
 8005ca4:	4893      	ldr	r0, [pc, #588]	; (8005ef4 <HAL_TIM_ConfigClockSource+0x2d4>)
 8005ca6:	f7fb fd32 	bl	800170e <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005cb2:	68ba      	ldr	r2, [r7, #8]
 8005cb4:	4b90      	ldr	r3, [pc, #576]	; (8005ef8 <HAL_TIM_ConfigClockSource+0x2d8>)
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005cc0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	68ba      	ldr	r2, [r7, #8]
 8005cc8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cd2:	f000 812d 	beq.w	8005f30 <HAL_TIM_ConfigClockSource+0x310>
 8005cd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cda:	f200 82d5 	bhi.w	8006288 <HAL_TIM_ConfigClockSource+0x668>
 8005cde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ce2:	d02e      	beq.n	8005d42 <HAL_TIM_ConfigClockSource+0x122>
 8005ce4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ce8:	f200 82ce 	bhi.w	8006288 <HAL_TIM_ConfigClockSource+0x668>
 8005cec:	2b70      	cmp	r3, #112	; 0x70
 8005cee:	f000 8082 	beq.w	8005df6 <HAL_TIM_ConfigClockSource+0x1d6>
 8005cf2:	2b70      	cmp	r3, #112	; 0x70
 8005cf4:	f200 82c8 	bhi.w	8006288 <HAL_TIM_ConfigClockSource+0x668>
 8005cf8:	2b60      	cmp	r3, #96	; 0x60
 8005cfa:	f000 81e0 	beq.w	80060be <HAL_TIM_ConfigClockSource+0x49e>
 8005cfe:	2b60      	cmp	r3, #96	; 0x60
 8005d00:	f200 82c2 	bhi.w	8006288 <HAL_TIM_ConfigClockSource+0x668>
 8005d04:	2b50      	cmp	r3, #80	; 0x50
 8005d06:	f000 8184 	beq.w	8006012 <HAL_TIM_ConfigClockSource+0x3f2>
 8005d0a:	2b50      	cmp	r3, #80	; 0x50
 8005d0c:	f200 82bc 	bhi.w	8006288 <HAL_TIM_ConfigClockSource+0x668>
 8005d10:	2b40      	cmp	r3, #64	; 0x40
 8005d12:	f000 8237 	beq.w	8006184 <HAL_TIM_ConfigClockSource+0x564>
 8005d16:	2b40      	cmp	r3, #64	; 0x40
 8005d18:	f200 82b6 	bhi.w	8006288 <HAL_TIM_ConfigClockSource+0x668>
 8005d1c:	2b30      	cmp	r3, #48	; 0x30
 8005d1e:	f000 8287 	beq.w	8006230 <HAL_TIM_ConfigClockSource+0x610>
 8005d22:	2b30      	cmp	r3, #48	; 0x30
 8005d24:	f200 82b0 	bhi.w	8006288 <HAL_TIM_ConfigClockSource+0x668>
 8005d28:	2b20      	cmp	r3, #32
 8005d2a:	f000 8281 	beq.w	8006230 <HAL_TIM_ConfigClockSource+0x610>
 8005d2e:	2b20      	cmp	r3, #32
 8005d30:	f200 82aa 	bhi.w	8006288 <HAL_TIM_ConfigClockSource+0x668>
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	f000 827b 	beq.w	8006230 <HAL_TIM_ConfigClockSource+0x610>
 8005d3a:	2b10      	cmp	r3, #16
 8005d3c:	f000 8278 	beq.w	8006230 <HAL_TIM_ConfigClockSource+0x610>
 8005d40:	e2a2      	b.n	8006288 <HAL_TIM_ConfigClockSource+0x668>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a6d      	ldr	r2, [pc, #436]	; (8005efc <HAL_TIM_ConfigClockSource+0x2dc>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	f000 82a0 	beq.w	800628e <HAL_TIM_ConfigClockSource+0x66e>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d56:	f000 829a 	beq.w	800628e <HAL_TIM_ConfigClockSource+0x66e>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a68      	ldr	r2, [pc, #416]	; (8005f00 <HAL_TIM_ConfigClockSource+0x2e0>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	f000 8294 	beq.w	800628e <HAL_TIM_ConfigClockSource+0x66e>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a66      	ldr	r2, [pc, #408]	; (8005f04 <HAL_TIM_ConfigClockSource+0x2e4>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	f000 828e 	beq.w	800628e <HAL_TIM_ConfigClockSource+0x66e>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a64      	ldr	r2, [pc, #400]	; (8005f08 <HAL_TIM_ConfigClockSource+0x2e8>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	f000 8288 	beq.w	800628e <HAL_TIM_ConfigClockSource+0x66e>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a62      	ldr	r2, [pc, #392]	; (8005f0c <HAL_TIM_ConfigClockSource+0x2ec>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	f000 8282 	beq.w	800628e <HAL_TIM_ConfigClockSource+0x66e>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a60      	ldr	r2, [pc, #384]	; (8005f10 <HAL_TIM_ConfigClockSource+0x2f0>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	f000 827c 	beq.w	800628e <HAL_TIM_ConfigClockSource+0x66e>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a5e      	ldr	r2, [pc, #376]	; (8005f14 <HAL_TIM_ConfigClockSource+0x2f4>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	f000 8276 	beq.w	800628e <HAL_TIM_ConfigClockSource+0x66e>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a5c      	ldr	r2, [pc, #368]	; (8005f18 <HAL_TIM_ConfigClockSource+0x2f8>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	f000 8270 	beq.w	800628e <HAL_TIM_ConfigClockSource+0x66e>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a5a      	ldr	r2, [pc, #360]	; (8005f1c <HAL_TIM_ConfigClockSource+0x2fc>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	f000 826a 	beq.w	800628e <HAL_TIM_ConfigClockSource+0x66e>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a58      	ldr	r2, [pc, #352]	; (8005f20 <HAL_TIM_ConfigClockSource+0x300>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	f000 8264 	beq.w	800628e <HAL_TIM_ConfigClockSource+0x66e>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a56      	ldr	r2, [pc, #344]	; (8005f24 <HAL_TIM_ConfigClockSource+0x304>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	f000 825e 	beq.w	800628e <HAL_TIM_ConfigClockSource+0x66e>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a54      	ldr	r2, [pc, #336]	; (8005f28 <HAL_TIM_ConfigClockSource+0x308>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	f000 8258 	beq.w	800628e <HAL_TIM_ConfigClockSource+0x66e>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a52      	ldr	r2, [pc, #328]	; (8005f2c <HAL_TIM_ConfigClockSource+0x30c>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	f000 8252 	beq.w	800628e <HAL_TIM_ConfigClockSource+0x66e>
 8005dea:	f241 5158 	movw	r1, #5464	; 0x1558
 8005dee:	4841      	ldr	r0, [pc, #260]	; (8005ef4 <HAL_TIM_ConfigClockSource+0x2d4>)
 8005df0:	f7fb fc8d 	bl	800170e <assert_failed>
      break;
 8005df4:	e24b      	b.n	800628e <HAL_TIM_ConfigClockSource+0x66e>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a40      	ldr	r2, [pc, #256]	; (8005efc <HAL_TIM_ConfigClockSource+0x2dc>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d027      	beq.n	8005e50 <HAL_TIM_ConfigClockSource+0x230>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e08:	d022      	beq.n	8005e50 <HAL_TIM_ConfigClockSource+0x230>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a3c      	ldr	r2, [pc, #240]	; (8005f00 <HAL_TIM_ConfigClockSource+0x2e0>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d01d      	beq.n	8005e50 <HAL_TIM_ConfigClockSource+0x230>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a3a      	ldr	r2, [pc, #232]	; (8005f04 <HAL_TIM_ConfigClockSource+0x2e4>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d018      	beq.n	8005e50 <HAL_TIM_ConfigClockSource+0x230>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a39      	ldr	r2, [pc, #228]	; (8005f08 <HAL_TIM_ConfigClockSource+0x2e8>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d013      	beq.n	8005e50 <HAL_TIM_ConfigClockSource+0x230>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a39      	ldr	r2, [pc, #228]	; (8005f14 <HAL_TIM_ConfigClockSource+0x2f4>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d00e      	beq.n	8005e50 <HAL_TIM_ConfigClockSource+0x230>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a38      	ldr	r2, [pc, #224]	; (8005f18 <HAL_TIM_ConfigClockSource+0x2f8>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d009      	beq.n	8005e50 <HAL_TIM_ConfigClockSource+0x230>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a38      	ldr	r2, [pc, #224]	; (8005f24 <HAL_TIM_ConfigClockSource+0x304>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d004      	beq.n	8005e50 <HAL_TIM_ConfigClockSource+0x230>
 8005e46:	f241 515f 	movw	r1, #5471	; 0x155f
 8005e4a:	482a      	ldr	r0, [pc, #168]	; (8005ef4 <HAL_TIM_ConfigClockSource+0x2d4>)
 8005e4c:	f7fb fc5f 	bl	800170e <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d013      	beq.n	8005e80 <HAL_TIM_ConfigClockSource+0x260>
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e60:	d00e      	beq.n	8005e80 <HAL_TIM_ConfigClockSource+0x260>
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e6a:	d009      	beq.n	8005e80 <HAL_TIM_ConfigClockSource+0x260>
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005e74:	d004      	beq.n	8005e80 <HAL_TIM_ConfigClockSource+0x260>
 8005e76:	f241 5162 	movw	r1, #5474	; 0x1562
 8005e7a:	481e      	ldr	r0, [pc, #120]	; (8005ef4 <HAL_TIM_ConfigClockSource+0x2d4>)
 8005e7c:	f7fb fc47 	bl	800170e <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e88:	d014      	beq.n	8005eb4 <HAL_TIM_ConfigClockSource+0x294>
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d010      	beq.n	8005eb4 <HAL_TIM_ConfigClockSource+0x294>
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d00c      	beq.n	8005eb4 <HAL_TIM_ConfigClockSource+0x294>
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	d008      	beq.n	8005eb4 <HAL_TIM_ConfigClockSource+0x294>
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	2b0a      	cmp	r3, #10
 8005ea8:	d004      	beq.n	8005eb4 <HAL_TIM_ConfigClockSource+0x294>
 8005eaa:	f241 5163 	movw	r1, #5475	; 0x1563
 8005eae:	4811      	ldr	r0, [pc, #68]	; (8005ef4 <HAL_TIM_ConfigClockSource+0x2d4>)
 8005eb0:	f7fb fc2d 	bl	800170e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	2b0f      	cmp	r3, #15
 8005eba:	d904      	bls.n	8005ec6 <HAL_TIM_ConfigClockSource+0x2a6>
 8005ebc:	f241 5164 	movw	r1, #5476	; 0x1564
 8005ec0:	480c      	ldr	r0, [pc, #48]	; (8005ef4 <HAL_TIM_ConfigClockSource+0x2d4>)
 8005ec2:	f7fb fc24 	bl	800170e <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6818      	ldr	r0, [r3, #0]
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	6899      	ldr	r1, [r3, #8]
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	685a      	ldr	r2, [r3, #4]
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	f000 fe29 	bl	8006b2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ee8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	68ba      	ldr	r2, [r7, #8]
 8005ef0:	609a      	str	r2, [r3, #8]
      break;
 8005ef2:	e1cd      	b.n	8006290 <HAL_TIM_ConfigClockSource+0x670>
 8005ef4:	0800dbfc 	.word	0x0800dbfc
 8005ef8:	fffeff88 	.word	0xfffeff88
 8005efc:	40010000 	.word	0x40010000
 8005f00:	40000400 	.word	0x40000400
 8005f04:	40000800 	.word	0x40000800
 8005f08:	40000c00 	.word	0x40000c00
 8005f0c:	40001000 	.word	0x40001000
 8005f10:	40001400 	.word	0x40001400
 8005f14:	40010400 	.word	0x40010400
 8005f18:	40014000 	.word	0x40014000
 8005f1c:	40014400 	.word	0x40014400
 8005f20:	40014800 	.word	0x40014800
 8005f24:	40001800 	.word	0x40001800
 8005f28:	40001c00 	.word	0x40001c00
 8005f2c:	40002000 	.word	0x40002000
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a8d      	ldr	r2, [pc, #564]	; (800616c <HAL_TIM_ConfigClockSource+0x54c>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d01d      	beq.n	8005f76 <HAL_TIM_ConfigClockSource+0x356>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f42:	d018      	beq.n	8005f76 <HAL_TIM_ConfigClockSource+0x356>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a89      	ldr	r2, [pc, #548]	; (8006170 <HAL_TIM_ConfigClockSource+0x550>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d013      	beq.n	8005f76 <HAL_TIM_ConfigClockSource+0x356>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a88      	ldr	r2, [pc, #544]	; (8006174 <HAL_TIM_ConfigClockSource+0x554>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d00e      	beq.n	8005f76 <HAL_TIM_ConfigClockSource+0x356>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a86      	ldr	r2, [pc, #536]	; (8006178 <HAL_TIM_ConfigClockSource+0x558>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d009      	beq.n	8005f76 <HAL_TIM_ConfigClockSource+0x356>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a85      	ldr	r2, [pc, #532]	; (800617c <HAL_TIM_ConfigClockSource+0x55c>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d004      	beq.n	8005f76 <HAL_TIM_ConfigClockSource+0x356>
 8005f6c:	f241 5177 	movw	r1, #5495	; 0x1577
 8005f70:	4883      	ldr	r0, [pc, #524]	; (8006180 <HAL_TIM_ConfigClockSource+0x560>)
 8005f72:	f7fb fbcc 	bl	800170e <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d013      	beq.n	8005fa6 <HAL_TIM_ConfigClockSource+0x386>
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f86:	d00e      	beq.n	8005fa6 <HAL_TIM_ConfigClockSource+0x386>
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f90:	d009      	beq.n	8005fa6 <HAL_TIM_ConfigClockSource+0x386>
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005f9a:	d004      	beq.n	8005fa6 <HAL_TIM_ConfigClockSource+0x386>
 8005f9c:	f241 517a 	movw	r1, #5498	; 0x157a
 8005fa0:	4877      	ldr	r0, [pc, #476]	; (8006180 <HAL_TIM_ConfigClockSource+0x560>)
 8005fa2:	f7fb fbb4 	bl	800170e <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fae:	d014      	beq.n	8005fda <HAL_TIM_ConfigClockSource+0x3ba>
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d010      	beq.n	8005fda <HAL_TIM_ConfigClockSource+0x3ba>
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d00c      	beq.n	8005fda <HAL_TIM_ConfigClockSource+0x3ba>
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	2b02      	cmp	r3, #2
 8005fc6:	d008      	beq.n	8005fda <HAL_TIM_ConfigClockSource+0x3ba>
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	2b0a      	cmp	r3, #10
 8005fce:	d004      	beq.n	8005fda <HAL_TIM_ConfigClockSource+0x3ba>
 8005fd0:	f241 517b 	movw	r1, #5499	; 0x157b
 8005fd4:	486a      	ldr	r0, [pc, #424]	; (8006180 <HAL_TIM_ConfigClockSource+0x560>)
 8005fd6:	f7fb fb9a 	bl	800170e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	2b0f      	cmp	r3, #15
 8005fe0:	d904      	bls.n	8005fec <HAL_TIM_ConfigClockSource+0x3cc>
 8005fe2:	f241 517c 	movw	r1, #5500	; 0x157c
 8005fe6:	4866      	ldr	r0, [pc, #408]	; (8006180 <HAL_TIM_ConfigClockSource+0x560>)
 8005fe8:	f7fb fb91 	bl	800170e <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6818      	ldr	r0, [r3, #0]
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	6899      	ldr	r1, [r3, #8]
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	685a      	ldr	r2, [r3, #4]
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	f000 fd96 	bl	8006b2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	689a      	ldr	r2, [r3, #8]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800600e:	609a      	str	r2, [r3, #8]
      break;
 8006010:	e13e      	b.n	8006290 <HAL_TIM_ConfigClockSource+0x670>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a55      	ldr	r2, [pc, #340]	; (800616c <HAL_TIM_ConfigClockSource+0x54c>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d01d      	beq.n	8006058 <HAL_TIM_ConfigClockSource+0x438>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006024:	d018      	beq.n	8006058 <HAL_TIM_ConfigClockSource+0x438>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a51      	ldr	r2, [pc, #324]	; (8006170 <HAL_TIM_ConfigClockSource+0x550>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d013      	beq.n	8006058 <HAL_TIM_ConfigClockSource+0x438>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a4f      	ldr	r2, [pc, #316]	; (8006174 <HAL_TIM_ConfigClockSource+0x554>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d00e      	beq.n	8006058 <HAL_TIM_ConfigClockSource+0x438>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a4e      	ldr	r2, [pc, #312]	; (8006178 <HAL_TIM_ConfigClockSource+0x558>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d009      	beq.n	8006058 <HAL_TIM_ConfigClockSource+0x438>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a4c      	ldr	r2, [pc, #304]	; (800617c <HAL_TIM_ConfigClockSource+0x55c>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d004      	beq.n	8006058 <HAL_TIM_ConfigClockSource+0x438>
 800604e:	f241 518b 	movw	r1, #5515	; 0x158b
 8006052:	484b      	ldr	r0, [pc, #300]	; (8006180 <HAL_TIM_ConfigClockSource+0x560>)
 8006054:	f7fb fb5b 	bl	800170e <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006060:	d014      	beq.n	800608c <HAL_TIM_ConfigClockSource+0x46c>
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d010      	beq.n	800608c <HAL_TIM_ConfigClockSource+0x46c>
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d00c      	beq.n	800608c <HAL_TIM_ConfigClockSource+0x46c>
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	2b02      	cmp	r3, #2
 8006078:	d008      	beq.n	800608c <HAL_TIM_ConfigClockSource+0x46c>
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	2b0a      	cmp	r3, #10
 8006080:	d004      	beq.n	800608c <HAL_TIM_ConfigClockSource+0x46c>
 8006082:	f241 518e 	movw	r1, #5518	; 0x158e
 8006086:	483e      	ldr	r0, [pc, #248]	; (8006180 <HAL_TIM_ConfigClockSource+0x560>)
 8006088:	f7fb fb41 	bl	800170e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	2b0f      	cmp	r3, #15
 8006092:	d904      	bls.n	800609e <HAL_TIM_ConfigClockSource+0x47e>
 8006094:	f241 518f 	movw	r1, #5519	; 0x158f
 8006098:	4839      	ldr	r0, [pc, #228]	; (8006180 <HAL_TIM_ConfigClockSource+0x560>)
 800609a:	f7fb fb38 	bl	800170e <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6818      	ldr	r0, [r3, #0]
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	6859      	ldr	r1, [r3, #4]
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	461a      	mov	r2, r3
 80060ac:	f000 fcc4 	bl	8006a38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	2150      	movs	r1, #80	; 0x50
 80060b6:	4618      	mov	r0, r3
 80060b8:	f000 fd1d 	bl	8006af6 <TIM_ITRx_SetConfig>
      break;
 80060bc:	e0e8      	b.n	8006290 <HAL_TIM_ConfigClockSource+0x670>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a2a      	ldr	r2, [pc, #168]	; (800616c <HAL_TIM_ConfigClockSource+0x54c>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d01d      	beq.n	8006104 <HAL_TIM_ConfigClockSource+0x4e4>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060d0:	d018      	beq.n	8006104 <HAL_TIM_ConfigClockSource+0x4e4>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a26      	ldr	r2, [pc, #152]	; (8006170 <HAL_TIM_ConfigClockSource+0x550>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d013      	beq.n	8006104 <HAL_TIM_ConfigClockSource+0x4e4>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a24      	ldr	r2, [pc, #144]	; (8006174 <HAL_TIM_ConfigClockSource+0x554>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d00e      	beq.n	8006104 <HAL_TIM_ConfigClockSource+0x4e4>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a23      	ldr	r2, [pc, #140]	; (8006178 <HAL_TIM_ConfigClockSource+0x558>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d009      	beq.n	8006104 <HAL_TIM_ConfigClockSource+0x4e4>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a21      	ldr	r2, [pc, #132]	; (800617c <HAL_TIM_ConfigClockSource+0x55c>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d004      	beq.n	8006104 <HAL_TIM_ConfigClockSource+0x4e4>
 80060fa:	f241 519b 	movw	r1, #5531	; 0x159b
 80060fe:	4820      	ldr	r0, [pc, #128]	; (8006180 <HAL_TIM_ConfigClockSource+0x560>)
 8006100:	f7fb fb05 	bl	800170e <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800610c:	d014      	beq.n	8006138 <HAL_TIM_ConfigClockSource+0x518>
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d010      	beq.n	8006138 <HAL_TIM_ConfigClockSource+0x518>
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d00c      	beq.n	8006138 <HAL_TIM_ConfigClockSource+0x518>
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	2b02      	cmp	r3, #2
 8006124:	d008      	beq.n	8006138 <HAL_TIM_ConfigClockSource+0x518>
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	2b0a      	cmp	r3, #10
 800612c:	d004      	beq.n	8006138 <HAL_TIM_ConfigClockSource+0x518>
 800612e:	f241 519e 	movw	r1, #5534	; 0x159e
 8006132:	4813      	ldr	r0, [pc, #76]	; (8006180 <HAL_TIM_ConfigClockSource+0x560>)
 8006134:	f7fb faeb 	bl	800170e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	2b0f      	cmp	r3, #15
 800613e:	d904      	bls.n	800614a <HAL_TIM_ConfigClockSource+0x52a>
 8006140:	f241 519f 	movw	r1, #5535	; 0x159f
 8006144:	480e      	ldr	r0, [pc, #56]	; (8006180 <HAL_TIM_ConfigClockSource+0x560>)
 8006146:	f7fb fae2 	bl	800170e <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6818      	ldr	r0, [r3, #0]
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	6859      	ldr	r1, [r3, #4]
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	68db      	ldr	r3, [r3, #12]
 8006156:	461a      	mov	r2, r3
 8006158:	f000 fc9d 	bl	8006a96 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2160      	movs	r1, #96	; 0x60
 8006162:	4618      	mov	r0, r3
 8006164:	f000 fcc7 	bl	8006af6 <TIM_ITRx_SetConfig>
      break;
 8006168:	e092      	b.n	8006290 <HAL_TIM_ConfigClockSource+0x670>
 800616a:	bf00      	nop
 800616c:	40010000 	.word	0x40010000
 8006170:	40000400 	.word	0x40000400
 8006174:	40000800 	.word	0x40000800
 8006178:	40000c00 	.word	0x40000c00
 800617c:	40010400 	.word	0x40010400
 8006180:	0800dbfc 	.word	0x0800dbfc
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a48      	ldr	r2, [pc, #288]	; (80062ac <HAL_TIM_ConfigClockSource+0x68c>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d01d      	beq.n	80061ca <HAL_TIM_ConfigClockSource+0x5aa>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006196:	d018      	beq.n	80061ca <HAL_TIM_ConfigClockSource+0x5aa>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a44      	ldr	r2, [pc, #272]	; (80062b0 <HAL_TIM_ConfigClockSource+0x690>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d013      	beq.n	80061ca <HAL_TIM_ConfigClockSource+0x5aa>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a43      	ldr	r2, [pc, #268]	; (80062b4 <HAL_TIM_ConfigClockSource+0x694>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d00e      	beq.n	80061ca <HAL_TIM_ConfigClockSource+0x5aa>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a41      	ldr	r2, [pc, #260]	; (80062b8 <HAL_TIM_ConfigClockSource+0x698>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d009      	beq.n	80061ca <HAL_TIM_ConfigClockSource+0x5aa>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a40      	ldr	r2, [pc, #256]	; (80062bc <HAL_TIM_ConfigClockSource+0x69c>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d004      	beq.n	80061ca <HAL_TIM_ConfigClockSource+0x5aa>
 80061c0:	f241 51ab 	movw	r1, #5547	; 0x15ab
 80061c4:	483e      	ldr	r0, [pc, #248]	; (80062c0 <HAL_TIM_ConfigClockSource+0x6a0>)
 80061c6:	f7fb faa2 	bl	800170e <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061d2:	d014      	beq.n	80061fe <HAL_TIM_ConfigClockSource+0x5de>
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d010      	beq.n	80061fe <HAL_TIM_ConfigClockSource+0x5de>
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d00c      	beq.n	80061fe <HAL_TIM_ConfigClockSource+0x5de>
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	2b02      	cmp	r3, #2
 80061ea:	d008      	beq.n	80061fe <HAL_TIM_ConfigClockSource+0x5de>
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	2b0a      	cmp	r3, #10
 80061f2:	d004      	beq.n	80061fe <HAL_TIM_ConfigClockSource+0x5de>
 80061f4:	f241 51ae 	movw	r1, #5550	; 0x15ae
 80061f8:	4831      	ldr	r0, [pc, #196]	; (80062c0 <HAL_TIM_ConfigClockSource+0x6a0>)
 80061fa:	f7fb fa88 	bl	800170e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	2b0f      	cmp	r3, #15
 8006204:	d904      	bls.n	8006210 <HAL_TIM_ConfigClockSource+0x5f0>
 8006206:	f241 51af 	movw	r1, #5551	; 0x15af
 800620a:	482d      	ldr	r0, [pc, #180]	; (80062c0 <HAL_TIM_ConfigClockSource+0x6a0>)
 800620c:	f7fb fa7f 	bl	800170e <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6818      	ldr	r0, [r3, #0]
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	6859      	ldr	r1, [r3, #4]
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	461a      	mov	r2, r3
 800621e:	f000 fc0b 	bl	8006a38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	2140      	movs	r1, #64	; 0x40
 8006228:	4618      	mov	r0, r3
 800622a:	f000 fc64 	bl	8006af6 <TIM_ITRx_SetConfig>
      break;
 800622e:	e02f      	b.n	8006290 <HAL_TIM_ConfigClockSource+0x670>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a1d      	ldr	r2, [pc, #116]	; (80062ac <HAL_TIM_ConfigClockSource+0x68c>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d01d      	beq.n	8006276 <HAL_TIM_ConfigClockSource+0x656>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006242:	d018      	beq.n	8006276 <HAL_TIM_ConfigClockSource+0x656>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a19      	ldr	r2, [pc, #100]	; (80062b0 <HAL_TIM_ConfigClockSource+0x690>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d013      	beq.n	8006276 <HAL_TIM_ConfigClockSource+0x656>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a18      	ldr	r2, [pc, #96]	; (80062b4 <HAL_TIM_ConfigClockSource+0x694>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d00e      	beq.n	8006276 <HAL_TIM_ConfigClockSource+0x656>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a16      	ldr	r2, [pc, #88]	; (80062b8 <HAL_TIM_ConfigClockSource+0x698>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d009      	beq.n	8006276 <HAL_TIM_ConfigClockSource+0x656>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a15      	ldr	r2, [pc, #84]	; (80062bc <HAL_TIM_ConfigClockSource+0x69c>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d004      	beq.n	8006276 <HAL_TIM_ConfigClockSource+0x656>
 800626c:	f241 51be 	movw	r1, #5566	; 0x15be
 8006270:	4813      	ldr	r0, [pc, #76]	; (80062c0 <HAL_TIM_ConfigClockSource+0x6a0>)
 8006272:	f7fb fa4c 	bl	800170e <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4619      	mov	r1, r3
 8006280:	4610      	mov	r0, r2
 8006282:	f000 fc38 	bl	8006af6 <TIM_ITRx_SetConfig>
      break;
 8006286:	e003      	b.n	8006290 <HAL_TIM_ConfigClockSource+0x670>
    }

    default:
      status = HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	73fb      	strb	r3, [r7, #15]
      break;
 800628c:	e000      	b.n	8006290 <HAL_TIM_ConfigClockSource+0x670>
      break;
 800628e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2201      	movs	r2, #1
 8006294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80062a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3710      	adds	r7, #16
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	40010000 	.word	0x40010000
 80062b0:	40000400 	.word	0x40000400
 80062b4:	40000800 	.word	0x40000800
 80062b8:	40000c00 	.word	0x40000c00
 80062bc:	40010400 	.word	0x40010400
 80062c0:	0800dbfc 	.word	0x0800dbfc

080062c4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80062cc:	bf00      	nop
 80062ce:	370c      	adds	r7, #12
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr

080062d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062e0:	bf00      	nop
 80062e2:	370c      	adds	r7, #12
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062f4:	bf00      	nop
 80062f6:	370c      	adds	r7, #12
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006300:	b480      	push	{r7}
 8006302:	b083      	sub	sp, #12
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006308:	bf00      	nop
 800630a:	370c      	adds	r7, #12
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr

08006314 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800631c:	bf00      	nop
 800631e:	370c      	adds	r7, #12
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr

08006328 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006328:	b480      	push	{r7}
 800632a:	b085      	sub	sp, #20
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	4a40      	ldr	r2, [pc, #256]	; (800643c <TIM_Base_SetConfig+0x114>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d013      	beq.n	8006368 <TIM_Base_SetConfig+0x40>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006346:	d00f      	beq.n	8006368 <TIM_Base_SetConfig+0x40>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4a3d      	ldr	r2, [pc, #244]	; (8006440 <TIM_Base_SetConfig+0x118>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d00b      	beq.n	8006368 <TIM_Base_SetConfig+0x40>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4a3c      	ldr	r2, [pc, #240]	; (8006444 <TIM_Base_SetConfig+0x11c>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d007      	beq.n	8006368 <TIM_Base_SetConfig+0x40>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	4a3b      	ldr	r2, [pc, #236]	; (8006448 <TIM_Base_SetConfig+0x120>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d003      	beq.n	8006368 <TIM_Base_SetConfig+0x40>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4a3a      	ldr	r2, [pc, #232]	; (800644c <TIM_Base_SetConfig+0x124>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d108      	bne.n	800637a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800636e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	4313      	orrs	r3, r2
 8006378:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4a2f      	ldr	r2, [pc, #188]	; (800643c <TIM_Base_SetConfig+0x114>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d02b      	beq.n	80063da <TIM_Base_SetConfig+0xb2>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006388:	d027      	beq.n	80063da <TIM_Base_SetConfig+0xb2>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a2c      	ldr	r2, [pc, #176]	; (8006440 <TIM_Base_SetConfig+0x118>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d023      	beq.n	80063da <TIM_Base_SetConfig+0xb2>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a2b      	ldr	r2, [pc, #172]	; (8006444 <TIM_Base_SetConfig+0x11c>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d01f      	beq.n	80063da <TIM_Base_SetConfig+0xb2>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4a2a      	ldr	r2, [pc, #168]	; (8006448 <TIM_Base_SetConfig+0x120>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d01b      	beq.n	80063da <TIM_Base_SetConfig+0xb2>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a29      	ldr	r2, [pc, #164]	; (800644c <TIM_Base_SetConfig+0x124>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d017      	beq.n	80063da <TIM_Base_SetConfig+0xb2>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4a28      	ldr	r2, [pc, #160]	; (8006450 <TIM_Base_SetConfig+0x128>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d013      	beq.n	80063da <TIM_Base_SetConfig+0xb2>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4a27      	ldr	r2, [pc, #156]	; (8006454 <TIM_Base_SetConfig+0x12c>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d00f      	beq.n	80063da <TIM_Base_SetConfig+0xb2>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4a26      	ldr	r2, [pc, #152]	; (8006458 <TIM_Base_SetConfig+0x130>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d00b      	beq.n	80063da <TIM_Base_SetConfig+0xb2>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4a25      	ldr	r2, [pc, #148]	; (800645c <TIM_Base_SetConfig+0x134>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d007      	beq.n	80063da <TIM_Base_SetConfig+0xb2>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a24      	ldr	r2, [pc, #144]	; (8006460 <TIM_Base_SetConfig+0x138>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d003      	beq.n	80063da <TIM_Base_SetConfig+0xb2>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4a23      	ldr	r2, [pc, #140]	; (8006464 <TIM_Base_SetConfig+0x13c>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d108      	bne.n	80063ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	68fa      	ldr	r2, [r7, #12]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	695b      	ldr	r3, [r3, #20]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	68fa      	ldr	r2, [r7, #12]
 80063fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	689a      	ldr	r2, [r3, #8]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4a0a      	ldr	r2, [pc, #40]	; (800643c <TIM_Base_SetConfig+0x114>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d003      	beq.n	8006420 <TIM_Base_SetConfig+0xf8>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	4a0c      	ldr	r2, [pc, #48]	; (800644c <TIM_Base_SetConfig+0x124>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d103      	bne.n	8006428 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	691a      	ldr	r2, [r3, #16]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2201      	movs	r2, #1
 800642c:	615a      	str	r2, [r3, #20]
}
 800642e:	bf00      	nop
 8006430:	3714      	adds	r7, #20
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr
 800643a:	bf00      	nop
 800643c:	40010000 	.word	0x40010000
 8006440:	40000400 	.word	0x40000400
 8006444:	40000800 	.word	0x40000800
 8006448:	40000c00 	.word	0x40000c00
 800644c:	40010400 	.word	0x40010400
 8006450:	40014000 	.word	0x40014000
 8006454:	40014400 	.word	0x40014400
 8006458:	40014800 	.word	0x40014800
 800645c:	40001800 	.word	0x40001800
 8006460:	40001c00 	.word	0x40001c00
 8006464:	40002000 	.word	0x40002000

08006468 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b086      	sub	sp, #24
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a1b      	ldr	r3, [r3, #32]
 8006476:	f023 0201 	bic.w	r2, r3, #1
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a1b      	ldr	r3, [r3, #32]
 8006482:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	699b      	ldr	r3, [r3, #24]
 800648e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006490:	68fa      	ldr	r2, [r7, #12]
 8006492:	4b3f      	ldr	r3, [pc, #252]	; (8006590 <TIM_OC1_SetConfig+0x128>)
 8006494:	4013      	ands	r3, r2
 8006496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f023 0303 	bic.w	r3, r3, #3
 800649e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	68fa      	ldr	r2, [r7, #12]
 80064a6:	4313      	orrs	r3, r2
 80064a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	f023 0302 	bic.w	r3, r3, #2
 80064b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	697a      	ldr	r2, [r7, #20]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	4a35      	ldr	r2, [pc, #212]	; (8006594 <TIM_OC1_SetConfig+0x12c>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d003      	beq.n	80064cc <TIM_OC1_SetConfig+0x64>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4a34      	ldr	r2, [pc, #208]	; (8006598 <TIM_OC1_SetConfig+0x130>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d119      	bne.n	8006500 <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d008      	beq.n	80064e6 <TIM_OC1_SetConfig+0x7e>
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	2b08      	cmp	r3, #8
 80064da:	d004      	beq.n	80064e6 <TIM_OC1_SetConfig+0x7e>
 80064dc:	f641 3167 	movw	r1, #7015	; 0x1b67
 80064e0:	482e      	ldr	r0, [pc, #184]	; (800659c <TIM_OC1_SetConfig+0x134>)
 80064e2:	f7fb f914 	bl	800170e <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	f023 0308 	bic.w	r3, r3, #8
 80064ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	68db      	ldr	r3, [r3, #12]
 80064f2:	697a      	ldr	r2, [r7, #20]
 80064f4:	4313      	orrs	r3, r2
 80064f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	f023 0304 	bic.w	r3, r3, #4
 80064fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4a24      	ldr	r2, [pc, #144]	; (8006594 <TIM_OC1_SetConfig+0x12c>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d003      	beq.n	8006510 <TIM_OC1_SetConfig+0xa8>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4a23      	ldr	r2, [pc, #140]	; (8006598 <TIM_OC1_SetConfig+0x130>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d12d      	bne.n	800656c <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	699b      	ldr	r3, [r3, #24]
 8006514:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006518:	d008      	beq.n	800652c <TIM_OC1_SetConfig+0xc4>
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	699b      	ldr	r3, [r3, #24]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d004      	beq.n	800652c <TIM_OC1_SetConfig+0xc4>
 8006522:	f641 3174 	movw	r1, #7028	; 0x1b74
 8006526:	481d      	ldr	r0, [pc, #116]	; (800659c <TIM_OC1_SetConfig+0x134>)
 8006528:	f7fb f8f1 	bl	800170e <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	695b      	ldr	r3, [r3, #20]
 8006530:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006534:	d008      	beq.n	8006548 <TIM_OC1_SetConfig+0xe0>
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	695b      	ldr	r3, [r3, #20]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d004      	beq.n	8006548 <TIM_OC1_SetConfig+0xe0>
 800653e:	f641 3175 	movw	r1, #7029	; 0x1b75
 8006542:	4816      	ldr	r0, [pc, #88]	; (800659c <TIM_OC1_SetConfig+0x134>)
 8006544:	f7fb f8e3 	bl	800170e <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800654e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006556:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	695b      	ldr	r3, [r3, #20]
 800655c:	693a      	ldr	r2, [r7, #16]
 800655e:	4313      	orrs	r3, r2
 8006560:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	699b      	ldr	r3, [r3, #24]
 8006566:	693a      	ldr	r2, [r7, #16]
 8006568:	4313      	orrs	r3, r2
 800656a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	693a      	ldr	r2, [r7, #16]
 8006570:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	68fa      	ldr	r2, [r7, #12]
 8006576:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	685a      	ldr	r2, [r3, #4]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	697a      	ldr	r2, [r7, #20]
 8006584:	621a      	str	r2, [r3, #32]
}
 8006586:	bf00      	nop
 8006588:	3718      	adds	r7, #24
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	fffeff8f 	.word	0xfffeff8f
 8006594:	40010000 	.word	0x40010000
 8006598:	40010400 	.word	0x40010400
 800659c:	0800dbfc 	.word	0x0800dbfc

080065a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b086      	sub	sp, #24
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6a1b      	ldr	r3, [r3, #32]
 80065ae:	f023 0210 	bic.w	r2, r3, #16
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a1b      	ldr	r3, [r3, #32]
 80065ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	699b      	ldr	r3, [r3, #24]
 80065c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80065c8:	68fa      	ldr	r2, [r7, #12]
 80065ca:	4b41      	ldr	r3, [pc, #260]	; (80066d0 <TIM_OC2_SetConfig+0x130>)
 80065cc:	4013      	ands	r3, r2
 80065ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	021b      	lsls	r3, r3, #8
 80065de:	68fa      	ldr	r2, [r7, #12]
 80065e0:	4313      	orrs	r3, r2
 80065e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	f023 0320 	bic.w	r3, r3, #32
 80065ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	011b      	lsls	r3, r3, #4
 80065f2:	697a      	ldr	r2, [r7, #20]
 80065f4:	4313      	orrs	r3, r2
 80065f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	4a36      	ldr	r2, [pc, #216]	; (80066d4 <TIM_OC2_SetConfig+0x134>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d003      	beq.n	8006608 <TIM_OC2_SetConfig+0x68>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	4a35      	ldr	r2, [pc, #212]	; (80066d8 <TIM_OC2_SetConfig+0x138>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d11a      	bne.n	800663e <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d008      	beq.n	8006622 <TIM_OC2_SetConfig+0x82>
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	2b08      	cmp	r3, #8
 8006616:	d004      	beq.n	8006622 <TIM_OC2_SetConfig+0x82>
 8006618:	f641 31b2 	movw	r1, #7090	; 0x1bb2
 800661c:	482f      	ldr	r0, [pc, #188]	; (80066dc <TIM_OC2_SetConfig+0x13c>)
 800661e:	f7fb f876 	bl	800170e <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006628:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	011b      	lsls	r3, r3, #4
 8006630:	697a      	ldr	r2, [r7, #20]
 8006632:	4313      	orrs	r3, r2
 8006634:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800663c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4a24      	ldr	r2, [pc, #144]	; (80066d4 <TIM_OC2_SetConfig+0x134>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d003      	beq.n	800664e <TIM_OC2_SetConfig+0xae>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	4a23      	ldr	r2, [pc, #140]	; (80066d8 <TIM_OC2_SetConfig+0x138>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d12f      	bne.n	80066ae <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	699b      	ldr	r3, [r3, #24]
 8006652:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006656:	d008      	beq.n	800666a <TIM_OC2_SetConfig+0xca>
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	699b      	ldr	r3, [r3, #24]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d004      	beq.n	800666a <TIM_OC2_SetConfig+0xca>
 8006660:	f44f 51de 	mov.w	r1, #7104	; 0x1bc0
 8006664:	481d      	ldr	r0, [pc, #116]	; (80066dc <TIM_OC2_SetConfig+0x13c>)
 8006666:	f7fb f852 	bl	800170e <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	695b      	ldr	r3, [r3, #20]
 800666e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006672:	d008      	beq.n	8006686 <TIM_OC2_SetConfig+0xe6>
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	695b      	ldr	r3, [r3, #20]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d004      	beq.n	8006686 <TIM_OC2_SetConfig+0xe6>
 800667c:	f641 31c1 	movw	r1, #7105	; 0x1bc1
 8006680:	4816      	ldr	r0, [pc, #88]	; (80066dc <TIM_OC2_SetConfig+0x13c>)
 8006682:	f7fb f844 	bl	800170e <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800668c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006694:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	695b      	ldr	r3, [r3, #20]
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	693a      	ldr	r2, [r7, #16]
 800669e:	4313      	orrs	r3, r2
 80066a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	699b      	ldr	r3, [r3, #24]
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	693a      	ldr	r2, [r7, #16]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	693a      	ldr	r2, [r7, #16]
 80066b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	68fa      	ldr	r2, [r7, #12]
 80066b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	685a      	ldr	r2, [r3, #4]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	697a      	ldr	r2, [r7, #20]
 80066c6:	621a      	str	r2, [r3, #32]
}
 80066c8:	bf00      	nop
 80066ca:	3718      	adds	r7, #24
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	feff8fff 	.word	0xfeff8fff
 80066d4:	40010000 	.word	0x40010000
 80066d8:	40010400 	.word	0x40010400
 80066dc:	0800dbfc 	.word	0x0800dbfc

080066e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b086      	sub	sp, #24
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6a1b      	ldr	r3, [r3, #32]
 80066ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6a1b      	ldr	r3, [r3, #32]
 80066fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	69db      	ldr	r3, [r3, #28]
 8006706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006708:	68fa      	ldr	r2, [r7, #12]
 800670a:	4b41      	ldr	r3, [pc, #260]	; (8006810 <TIM_OC3_SetConfig+0x130>)
 800670c:	4013      	ands	r3, r2
 800670e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f023 0303 	bic.w	r3, r3, #3
 8006716:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	4313      	orrs	r3, r2
 8006720:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006728:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	021b      	lsls	r3, r3, #8
 8006730:	697a      	ldr	r2, [r7, #20]
 8006732:	4313      	orrs	r3, r2
 8006734:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4a36      	ldr	r2, [pc, #216]	; (8006814 <TIM_OC3_SetConfig+0x134>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d003      	beq.n	8006746 <TIM_OC3_SetConfig+0x66>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	4a35      	ldr	r2, [pc, #212]	; (8006818 <TIM_OC3_SetConfig+0x138>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d11a      	bne.n	800677c <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d008      	beq.n	8006760 <TIM_OC3_SetConfig+0x80>
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	68db      	ldr	r3, [r3, #12]
 8006752:	2b08      	cmp	r3, #8
 8006754:	d004      	beq.n	8006760 <TIM_OC3_SetConfig+0x80>
 8006756:	f641 31fd 	movw	r1, #7165	; 0x1bfd
 800675a:	4830      	ldr	r0, [pc, #192]	; (800681c <TIM_OC3_SetConfig+0x13c>)
 800675c:	f7fa ffd7 	bl	800170e <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006766:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	68db      	ldr	r3, [r3, #12]
 800676c:	021b      	lsls	r3, r3, #8
 800676e:	697a      	ldr	r2, [r7, #20]
 8006770:	4313      	orrs	r3, r2
 8006772:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800677a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	4a25      	ldr	r2, [pc, #148]	; (8006814 <TIM_OC3_SetConfig+0x134>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d003      	beq.n	800678c <TIM_OC3_SetConfig+0xac>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	4a24      	ldr	r2, [pc, #144]	; (8006818 <TIM_OC3_SetConfig+0x138>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d12f      	bne.n	80067ec <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	699b      	ldr	r3, [r3, #24]
 8006790:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006794:	d008      	beq.n	80067a8 <TIM_OC3_SetConfig+0xc8>
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	699b      	ldr	r3, [r3, #24]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d004      	beq.n	80067a8 <TIM_OC3_SetConfig+0xc8>
 800679e:	f641 410a 	movw	r1, #7178	; 0x1c0a
 80067a2:	481e      	ldr	r0, [pc, #120]	; (800681c <TIM_OC3_SetConfig+0x13c>)
 80067a4:	f7fa ffb3 	bl	800170e <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	695b      	ldr	r3, [r3, #20]
 80067ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067b0:	d008      	beq.n	80067c4 <TIM_OC3_SetConfig+0xe4>
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	695b      	ldr	r3, [r3, #20]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d004      	beq.n	80067c4 <TIM_OC3_SetConfig+0xe4>
 80067ba:	f641 410b 	movw	r1, #7179	; 0x1c0b
 80067be:	4817      	ldr	r0, [pc, #92]	; (800681c <TIM_OC3_SetConfig+0x13c>)
 80067c0:	f7fa ffa5 	bl	800170e <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80067d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	695b      	ldr	r3, [r3, #20]
 80067d8:	011b      	lsls	r3, r3, #4
 80067da:	693a      	ldr	r2, [r7, #16]
 80067dc:	4313      	orrs	r3, r2
 80067de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	699b      	ldr	r3, [r3, #24]
 80067e4:	011b      	lsls	r3, r3, #4
 80067e6:	693a      	ldr	r2, [r7, #16]
 80067e8:	4313      	orrs	r3, r2
 80067ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	693a      	ldr	r2, [r7, #16]
 80067f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	68fa      	ldr	r2, [r7, #12]
 80067f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	685a      	ldr	r2, [r3, #4]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	697a      	ldr	r2, [r7, #20]
 8006804:	621a      	str	r2, [r3, #32]
}
 8006806:	bf00      	nop
 8006808:	3718      	adds	r7, #24
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	fffeff8f 	.word	0xfffeff8f
 8006814:	40010000 	.word	0x40010000
 8006818:	40010400 	.word	0x40010400
 800681c:	0800dbfc 	.word	0x0800dbfc

08006820 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b086      	sub	sp, #24
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6a1b      	ldr	r3, [r3, #32]
 800682e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a1b      	ldr	r3, [r3, #32]
 800683a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	69db      	ldr	r3, [r3, #28]
 8006846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006848:	68fa      	ldr	r2, [r7, #12]
 800684a:	4b24      	ldr	r3, [pc, #144]	; (80068dc <TIM_OC4_SetConfig+0xbc>)
 800684c:	4013      	ands	r3, r2
 800684e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006856:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	021b      	lsls	r3, r3, #8
 800685e:	68fa      	ldr	r2, [r7, #12]
 8006860:	4313      	orrs	r3, r2
 8006862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800686a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	031b      	lsls	r3, r3, #12
 8006872:	693a      	ldr	r2, [r7, #16]
 8006874:	4313      	orrs	r3, r2
 8006876:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	4a19      	ldr	r2, [pc, #100]	; (80068e0 <TIM_OC4_SetConfig+0xc0>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d003      	beq.n	8006888 <TIM_OC4_SetConfig+0x68>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a18      	ldr	r2, [pc, #96]	; (80068e4 <TIM_OC4_SetConfig+0xc4>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d117      	bne.n	80068b8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	695b      	ldr	r3, [r3, #20]
 800688c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006890:	d008      	beq.n	80068a4 <TIM_OC4_SetConfig+0x84>
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	695b      	ldr	r3, [r3, #20]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d004      	beq.n	80068a4 <TIM_OC4_SetConfig+0x84>
 800689a:	f641 4149 	movw	r1, #7241	; 0x1c49
 800689e:	4812      	ldr	r0, [pc, #72]	; (80068e8 <TIM_OC4_SetConfig+0xc8>)
 80068a0:	f7fa ff35 	bl	800170e <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	695b      	ldr	r3, [r3, #20]
 80068b0:	019b      	lsls	r3, r3, #6
 80068b2:	697a      	ldr	r2, [r7, #20]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	697a      	ldr	r2, [r7, #20]
 80068bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	685a      	ldr	r2, [r3, #4]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	693a      	ldr	r2, [r7, #16]
 80068d0:	621a      	str	r2, [r3, #32]
}
 80068d2:	bf00      	nop
 80068d4:	3718      	adds	r7, #24
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
 80068da:	bf00      	nop
 80068dc:	feff8fff 	.word	0xfeff8fff
 80068e0:	40010000 	.word	0x40010000
 80068e4:	40010400 	.word	0x40010400
 80068e8:	0800dbfc 	.word	0x0800dbfc

080068ec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b087      	sub	sp, #28
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6a1b      	ldr	r3, [r3, #32]
 80068fa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6a1b      	ldr	r3, [r3, #32]
 8006906:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006914:	68fa      	ldr	r2, [r7, #12]
 8006916:	4b1b      	ldr	r3, [pc, #108]	; (8006984 <TIM_OC5_SetConfig+0x98>)
 8006918:	4013      	ands	r3, r2
 800691a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	68fa      	ldr	r2, [r7, #12]
 8006922:	4313      	orrs	r3, r2
 8006924:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800692c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	041b      	lsls	r3, r3, #16
 8006934:	693a      	ldr	r2, [r7, #16]
 8006936:	4313      	orrs	r3, r2
 8006938:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4a12      	ldr	r2, [pc, #72]	; (8006988 <TIM_OC5_SetConfig+0x9c>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d003      	beq.n	800694a <TIM_OC5_SetConfig+0x5e>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4a11      	ldr	r2, [pc, #68]	; (800698c <TIM_OC5_SetConfig+0xa0>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d109      	bne.n	800695e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006950:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	695b      	ldr	r3, [r3, #20]
 8006956:	021b      	lsls	r3, r3, #8
 8006958:	697a      	ldr	r2, [r7, #20]
 800695a:	4313      	orrs	r3, r2
 800695c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	697a      	ldr	r2, [r7, #20]
 8006962:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	68fa      	ldr	r2, [r7, #12]
 8006968:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	685a      	ldr	r2, [r3, #4]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	693a      	ldr	r2, [r7, #16]
 8006976:	621a      	str	r2, [r3, #32]
}
 8006978:	bf00      	nop
 800697a:	371c      	adds	r7, #28
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr
 8006984:	fffeff8f 	.word	0xfffeff8f
 8006988:	40010000 	.word	0x40010000
 800698c:	40010400 	.word	0x40010400

08006990 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006990:	b480      	push	{r7}
 8006992:	b087      	sub	sp, #28
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6a1b      	ldr	r3, [r3, #32]
 800699e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6a1b      	ldr	r3, [r3, #32]
 80069aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80069b8:	68fa      	ldr	r2, [r7, #12]
 80069ba:	4b1c      	ldr	r3, [pc, #112]	; (8006a2c <TIM_OC6_SetConfig+0x9c>)
 80069bc:	4013      	ands	r3, r2
 80069be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	021b      	lsls	r3, r3, #8
 80069c6:	68fa      	ldr	r2, [r7, #12]
 80069c8:	4313      	orrs	r3, r2
 80069ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80069d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	051b      	lsls	r3, r3, #20
 80069da:	693a      	ldr	r2, [r7, #16]
 80069dc:	4313      	orrs	r3, r2
 80069de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	4a13      	ldr	r2, [pc, #76]	; (8006a30 <TIM_OC6_SetConfig+0xa0>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d003      	beq.n	80069f0 <TIM_OC6_SetConfig+0x60>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	4a12      	ldr	r2, [pc, #72]	; (8006a34 <TIM_OC6_SetConfig+0xa4>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d109      	bne.n	8006a04 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	695b      	ldr	r3, [r3, #20]
 80069fc:	029b      	lsls	r3, r3, #10
 80069fe:	697a      	ldr	r2, [r7, #20]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	697a      	ldr	r2, [r7, #20]
 8006a08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	68fa      	ldr	r2, [r7, #12]
 8006a0e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	685a      	ldr	r2, [r3, #4]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	693a      	ldr	r2, [r7, #16]
 8006a1c:	621a      	str	r2, [r3, #32]
}
 8006a1e:	bf00      	nop
 8006a20:	371c      	adds	r7, #28
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr
 8006a2a:	bf00      	nop
 8006a2c:	feff8fff 	.word	0xfeff8fff
 8006a30:	40010000 	.word	0x40010000
 8006a34:	40010400 	.word	0x40010400

08006a38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b087      	sub	sp, #28
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6a1b      	ldr	r3, [r3, #32]
 8006a48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	6a1b      	ldr	r3, [r3, #32]
 8006a4e:	f023 0201 	bic.w	r2, r3, #1
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	699b      	ldr	r3, [r3, #24]
 8006a5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	011b      	lsls	r3, r3, #4
 8006a68:	693a      	ldr	r2, [r7, #16]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	f023 030a 	bic.w	r3, r3, #10
 8006a74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a76:	697a      	ldr	r2, [r7, #20]
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	693a      	ldr	r2, [r7, #16]
 8006a82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	697a      	ldr	r2, [r7, #20]
 8006a88:	621a      	str	r2, [r3, #32]
}
 8006a8a:	bf00      	nop
 8006a8c:	371c      	adds	r7, #28
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr

08006a96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a96:	b480      	push	{r7}
 8006a98:	b087      	sub	sp, #28
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	60f8      	str	r0, [r7, #12]
 8006a9e:	60b9      	str	r1, [r7, #8]
 8006aa0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	6a1b      	ldr	r3, [r3, #32]
 8006aa6:	f023 0210 	bic.w	r2, r3, #16
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	699b      	ldr	r3, [r3, #24]
 8006ab2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	6a1b      	ldr	r3, [r3, #32]
 8006ab8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ac0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	031b      	lsls	r3, r3, #12
 8006ac6:	697a      	ldr	r2, [r7, #20]
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ad2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	011b      	lsls	r3, r3, #4
 8006ad8:	693a      	ldr	r2, [r7, #16]
 8006ada:	4313      	orrs	r3, r2
 8006adc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	697a      	ldr	r2, [r7, #20]
 8006ae2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	693a      	ldr	r2, [r7, #16]
 8006ae8:	621a      	str	r2, [r3, #32]
}
 8006aea:	bf00      	nop
 8006aec:	371c      	adds	r7, #28
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr

08006af6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006af6:	b480      	push	{r7}
 8006af8:	b085      	sub	sp, #20
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]
 8006afe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b0e:	683a      	ldr	r2, [r7, #0]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	f043 0307 	orr.w	r3, r3, #7
 8006b18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	68fa      	ldr	r2, [r7, #12]
 8006b1e:	609a      	str	r2, [r3, #8]
}
 8006b20:	bf00      	nop
 8006b22:	3714      	adds	r7, #20
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr

08006b2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b087      	sub	sp, #28
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	60b9      	str	r1, [r7, #8]
 8006b36:	607a      	str	r2, [r7, #4]
 8006b38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	021a      	lsls	r2, r3, #8
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	431a      	orrs	r2, r3
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	697a      	ldr	r2, [r7, #20]
 8006b56:	4313      	orrs	r3, r2
 8006b58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	697a      	ldr	r2, [r7, #20]
 8006b5e:	609a      	str	r2, [r3, #8]
}
 8006b60:	bf00      	nop
 8006b62:	371c      	adds	r7, #28
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b086      	sub	sp, #24
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	60f8      	str	r0, [r7, #12]
 8006b74:	60b9      	str	r1, [r7, #8]
 8006b76:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	4a35      	ldr	r2, [pc, #212]	; (8006c50 <TIM_CCxChannelCmd+0xe4>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d030      	beq.n	8006be2 <TIM_CCxChannelCmd+0x76>
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b86:	d02c      	beq.n	8006be2 <TIM_CCxChannelCmd+0x76>
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	4a32      	ldr	r2, [pc, #200]	; (8006c54 <TIM_CCxChannelCmd+0xe8>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d028      	beq.n	8006be2 <TIM_CCxChannelCmd+0x76>
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	4a31      	ldr	r2, [pc, #196]	; (8006c58 <TIM_CCxChannelCmd+0xec>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d024      	beq.n	8006be2 <TIM_CCxChannelCmd+0x76>
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	4a30      	ldr	r2, [pc, #192]	; (8006c5c <TIM_CCxChannelCmd+0xf0>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d020      	beq.n	8006be2 <TIM_CCxChannelCmd+0x76>
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	4a2f      	ldr	r2, [pc, #188]	; (8006c60 <TIM_CCxChannelCmd+0xf4>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d01c      	beq.n	8006be2 <TIM_CCxChannelCmd+0x76>
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	4a2e      	ldr	r2, [pc, #184]	; (8006c64 <TIM_CCxChannelCmd+0xf8>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d018      	beq.n	8006be2 <TIM_CCxChannelCmd+0x76>
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	4a2d      	ldr	r2, [pc, #180]	; (8006c68 <TIM_CCxChannelCmd+0xfc>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d014      	beq.n	8006be2 <TIM_CCxChannelCmd+0x76>
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	4a2c      	ldr	r2, [pc, #176]	; (8006c6c <TIM_CCxChannelCmd+0x100>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d010      	beq.n	8006be2 <TIM_CCxChannelCmd+0x76>
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	4a2b      	ldr	r2, [pc, #172]	; (8006c70 <TIM_CCxChannelCmd+0x104>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d00c      	beq.n	8006be2 <TIM_CCxChannelCmd+0x76>
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	4a2a      	ldr	r2, [pc, #168]	; (8006c74 <TIM_CCxChannelCmd+0x108>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d008      	beq.n	8006be2 <TIM_CCxChannelCmd+0x76>
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	4a29      	ldr	r2, [pc, #164]	; (8006c78 <TIM_CCxChannelCmd+0x10c>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d004      	beq.n	8006be2 <TIM_CCxChannelCmd+0x76>
 8006bd8:	f641 61a1 	movw	r1, #7841	; 0x1ea1
 8006bdc:	4827      	ldr	r0, [pc, #156]	; (8006c7c <TIM_CCxChannelCmd+0x110>)
 8006bde:	f7fa fd96 	bl	800170e <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d016      	beq.n	8006c16 <TIM_CCxChannelCmd+0xaa>
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	2b04      	cmp	r3, #4
 8006bec:	d013      	beq.n	8006c16 <TIM_CCxChannelCmd+0xaa>
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	2b08      	cmp	r3, #8
 8006bf2:	d010      	beq.n	8006c16 <TIM_CCxChannelCmd+0xaa>
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	2b0c      	cmp	r3, #12
 8006bf8:	d00d      	beq.n	8006c16 <TIM_CCxChannelCmd+0xaa>
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	2b10      	cmp	r3, #16
 8006bfe:	d00a      	beq.n	8006c16 <TIM_CCxChannelCmd+0xaa>
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	2b14      	cmp	r3, #20
 8006c04:	d007      	beq.n	8006c16 <TIM_CCxChannelCmd+0xaa>
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	2b3c      	cmp	r3, #60	; 0x3c
 8006c0a:	d004      	beq.n	8006c16 <TIM_CCxChannelCmd+0xaa>
 8006c0c:	f641 61a2 	movw	r1, #7842	; 0x1ea2
 8006c10:	481a      	ldr	r0, [pc, #104]	; (8006c7c <TIM_CCxChannelCmd+0x110>)
 8006c12:	f7fa fd7c 	bl	800170e <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	f003 031f 	and.w	r3, r3, #31
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c22:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	6a1a      	ldr	r2, [r3, #32]
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	43db      	mvns	r3, r3
 8006c2c:	401a      	ands	r2, r3
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	6a1a      	ldr	r2, [r3, #32]
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	f003 031f 	and.w	r3, r3, #31
 8006c3c:	6879      	ldr	r1, [r7, #4]
 8006c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8006c42:	431a      	orrs	r2, r3
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	621a      	str	r2, [r3, #32]
}
 8006c48:	bf00      	nop
 8006c4a:	3718      	adds	r7, #24
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}
 8006c50:	40010000 	.word	0x40010000
 8006c54:	40000400 	.word	0x40000400
 8006c58:	40000800 	.word	0x40000800
 8006c5c:	40000c00 	.word	0x40000c00
 8006c60:	40010400 	.word	0x40010400
 8006c64:	40014000 	.word	0x40014000
 8006c68:	40014400 	.word	0x40014400
 8006c6c:	40014800 	.word	0x40014800
 8006c70:	40001800 	.word	0x40001800
 8006c74:	40001c00 	.word	0x40001c00
 8006c78:	40002000 	.word	0x40002000
 8006c7c:	0800dbfc 	.word	0x0800dbfc

08006c80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b084      	sub	sp, #16
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a32      	ldr	r2, [pc, #200]	; (8006d58 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d027      	beq.n	8006ce4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c9c:	d022      	beq.n	8006ce4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a2e      	ldr	r2, [pc, #184]	; (8006d5c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d01d      	beq.n	8006ce4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a2c      	ldr	r2, [pc, #176]	; (8006d60 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d018      	beq.n	8006ce4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a2b      	ldr	r2, [pc, #172]	; (8006d64 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d013      	beq.n	8006ce4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a29      	ldr	r2, [pc, #164]	; (8006d68 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d00e      	beq.n	8006ce4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a28      	ldr	r2, [pc, #160]	; (8006d6c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d009      	beq.n	8006ce4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a26      	ldr	r2, [pc, #152]	; (8006d70 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d004      	beq.n	8006ce4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8006cda:	f240 71b6 	movw	r1, #1974	; 0x7b6
 8006cde:	4825      	ldr	r0, [pc, #148]	; (8006d74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006ce0:	f7fa fd15 	bl	800170e <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d020      	beq.n	8006d2e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	2b10      	cmp	r3, #16
 8006cf2:	d01c      	beq.n	8006d2e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	2b20      	cmp	r3, #32
 8006cfa:	d018      	beq.n	8006d2e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	2b30      	cmp	r3, #48	; 0x30
 8006d02:	d014      	beq.n	8006d2e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	2b40      	cmp	r3, #64	; 0x40
 8006d0a:	d010      	beq.n	8006d2e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	2b50      	cmp	r3, #80	; 0x50
 8006d12:	d00c      	beq.n	8006d2e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	2b60      	cmp	r3, #96	; 0x60
 8006d1a:	d008      	beq.n	8006d2e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	2b70      	cmp	r3, #112	; 0x70
 8006d22:	d004      	beq.n	8006d2e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006d24:	f240 71b7 	movw	r1, #1975	; 0x7b7
 8006d28:	4812      	ldr	r0, [pc, #72]	; (8006d74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006d2a:	f7fa fcf0 	bl	800170e <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	2b80      	cmp	r3, #128	; 0x80
 8006d34:	d008      	beq.n	8006d48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d004      	beq.n	8006d48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d3e:	f44f 61f7 	mov.w	r1, #1976	; 0x7b8
 8006d42:	480c      	ldr	r0, [pc, #48]	; (8006d74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006d44:	f7fa fce3 	bl	800170e <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	d112      	bne.n	8006d78 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8006d52:	2302      	movs	r3, #2
 8006d54:	e0d7      	b.n	8006f06 <HAL_TIMEx_MasterConfigSynchronization+0x286>
 8006d56:	bf00      	nop
 8006d58:	40010000 	.word	0x40010000
 8006d5c:	40000400 	.word	0x40000400
 8006d60:	40000800 	.word	0x40000800
 8006d64:	40000c00 	.word	0x40000c00
 8006d68:	40001000 	.word	0x40001000
 8006d6c:	40001400 	.word	0x40001400
 8006d70:	40010400 	.word	0x40010400
 8006d74:	0800dc34 	.word	0x0800dc34
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2202      	movs	r2, #2
 8006d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a5c      	ldr	r2, [pc, #368]	; (8006f10 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d004      	beq.n	8006dac <HAL_TIMEx_MasterConfigSynchronization+0x12c>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a5b      	ldr	r2, [pc, #364]	; (8006f14 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d161      	bne.n	8006e70 <HAL_TIMEx_MasterConfigSynchronization+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d054      	beq.n	8006e5e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006dbc:	d04f      	beq.n	8006e5e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006dc6:	d04a      	beq.n	8006e5e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006dd0:	d045      	beq.n	8006e5e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006dda:	d040      	beq.n	8006e5e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8006de4:	d03b      	beq.n	8006e5e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006dee:	d036      	beq.n	8006e5e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006df8:	d031      	beq.n	8006e5e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 8006e02:	d02c      	beq.n	8006e5e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006e0c:	d027      	beq.n	8006e5e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	f5b3 0f10 	cmp.w	r3, #9437184	; 0x900000
 8006e16:	d022      	beq.n	8006e5e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8006e20:	d01d      	beq.n	8006e5e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	f5b3 0f30 	cmp.w	r3, #11534336	; 0xb00000
 8006e2a:	d018      	beq.n	8006e5e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006e34:	d013      	beq.n	8006e5e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	f5b3 0f50 	cmp.w	r3, #13631488	; 0xd00000
 8006e3e:	d00e      	beq.n	8006e5e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	f5b3 0f60 	cmp.w	r3, #14680064	; 0xe00000
 8006e48:	d009      	beq.n	8006e5e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	f5b3 0f70 	cmp.w	r3, #15728640	; 0xf00000
 8006e52:	d004      	beq.n	8006e5e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8006e54:	f240 71ca 	movw	r1, #1994	; 0x7ca
 8006e58:	482f      	ldr	r0, [pc, #188]	; (8006f18 <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 8006e5a:	f7fa fc58 	bl	800170e <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006e64:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	68fa      	ldr	r2, [r7, #12]
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	68fa      	ldr	r2, [r7, #12]
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	68fa      	ldr	r2, [r7, #12]
 8006e88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a20      	ldr	r2, [pc, #128]	; (8006f10 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d022      	beq.n	8006eda <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e9c:	d01d      	beq.n	8006eda <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a1e      	ldr	r2, [pc, #120]	; (8006f1c <HAL_TIMEx_MasterConfigSynchronization+0x29c>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d018      	beq.n	8006eda <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a1c      	ldr	r2, [pc, #112]	; (8006f20 <HAL_TIMEx_MasterConfigSynchronization+0x2a0>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d013      	beq.n	8006eda <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a1b      	ldr	r2, [pc, #108]	; (8006f24 <HAL_TIMEx_MasterConfigSynchronization+0x2a4>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d00e      	beq.n	8006eda <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a14      	ldr	r2, [pc, #80]	; (8006f14 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d009      	beq.n	8006eda <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a17      	ldr	r2, [pc, #92]	; (8006f28 <HAL_TIMEx_MasterConfigSynchronization+0x2a8>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d004      	beq.n	8006eda <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a15      	ldr	r2, [pc, #84]	; (8006f2c <HAL_TIMEx_MasterConfigSynchronization+0x2ac>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d10c      	bne.n	8006ef4 <HAL_TIMEx_MasterConfigSynchronization+0x274>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ee0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	68ba      	ldr	r2, [r7, #8]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	68ba      	ldr	r2, [r7, #8]
 8006ef2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3710      	adds	r7, #16
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	bf00      	nop
 8006f10:	40010000 	.word	0x40010000
 8006f14:	40010400 	.word	0x40010400
 8006f18:	0800dc34 	.word	0x0800dc34
 8006f1c:	40000400 	.word	0x40000400
 8006f20:	40000800 	.word	0x40000800
 8006f24:	40000c00 	.word	0x40000c00
 8006f28:	40014000 	.word	0x40014000
 8006f2c:	40001800 	.word	0x40001800

08006f30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b083      	sub	sp, #12
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f38:	bf00      	nop
 8006f3a:	370c      	adds	r7, #12
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr

08006f44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b083      	sub	sp, #12
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f4c:	bf00      	nop
 8006f4e:	370c      	adds	r7, #12
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr

08006f58 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006f60:	bf00      	nop
 8006f62:	370c      	adds	r7, #12
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b082      	sub	sp, #8
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d101      	bne.n	8006f7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	e09f      	b.n	80070be <HAL_UART_Init+0x152>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	699b      	ldr	r3, [r3, #24]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d02d      	beq.n	8006fe2 <HAL_UART_Init+0x76>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a4f      	ldr	r2, [pc, #316]	; (80070c8 <HAL_UART_Init+0x15c>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d055      	beq.n	800703c <HAL_UART_Init+0xd0>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a4d      	ldr	r2, [pc, #308]	; (80070cc <HAL_UART_Init+0x160>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d050      	beq.n	800703c <HAL_UART_Init+0xd0>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a4c      	ldr	r2, [pc, #304]	; (80070d0 <HAL_UART_Init+0x164>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d04b      	beq.n	800703c <HAL_UART_Init+0xd0>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a4a      	ldr	r2, [pc, #296]	; (80070d4 <HAL_UART_Init+0x168>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d046      	beq.n	800703c <HAL_UART_Init+0xd0>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a49      	ldr	r2, [pc, #292]	; (80070d8 <HAL_UART_Init+0x16c>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d041      	beq.n	800703c <HAL_UART_Init+0xd0>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a47      	ldr	r2, [pc, #284]	; (80070dc <HAL_UART_Init+0x170>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d03c      	beq.n	800703c <HAL_UART_Init+0xd0>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a46      	ldr	r2, [pc, #280]	; (80070e0 <HAL_UART_Init+0x174>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d037      	beq.n	800703c <HAL_UART_Init+0xd0>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a44      	ldr	r2, [pc, #272]	; (80070e4 <HAL_UART_Init+0x178>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d032      	beq.n	800703c <HAL_UART_Init+0xd0>
 8006fd6:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8006fda:	4843      	ldr	r0, [pc, #268]	; (80070e8 <HAL_UART_Init+0x17c>)
 8006fdc:	f7fa fb97 	bl	800170e <assert_failed>
 8006fe0:	e02c      	b.n	800703c <HAL_UART_Init+0xd0>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a38      	ldr	r2, [pc, #224]	; (80070c8 <HAL_UART_Init+0x15c>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d027      	beq.n	800703c <HAL_UART_Init+0xd0>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a36      	ldr	r2, [pc, #216]	; (80070cc <HAL_UART_Init+0x160>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d022      	beq.n	800703c <HAL_UART_Init+0xd0>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a35      	ldr	r2, [pc, #212]	; (80070d0 <HAL_UART_Init+0x164>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d01d      	beq.n	800703c <HAL_UART_Init+0xd0>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a33      	ldr	r2, [pc, #204]	; (80070d4 <HAL_UART_Init+0x168>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d018      	beq.n	800703c <HAL_UART_Init+0xd0>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a32      	ldr	r2, [pc, #200]	; (80070d8 <HAL_UART_Init+0x16c>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d013      	beq.n	800703c <HAL_UART_Init+0xd0>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a30      	ldr	r2, [pc, #192]	; (80070dc <HAL_UART_Init+0x170>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d00e      	beq.n	800703c <HAL_UART_Init+0xd0>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a2f      	ldr	r2, [pc, #188]	; (80070e0 <HAL_UART_Init+0x174>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d009      	beq.n	800703c <HAL_UART_Init+0xd0>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a2d      	ldr	r2, [pc, #180]	; (80070e4 <HAL_UART_Init+0x178>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d004      	beq.n	800703c <HAL_UART_Init+0xd0>
 8007032:	f240 1131 	movw	r1, #305	; 0x131
 8007036:	482c      	ldr	r0, [pc, #176]	; (80070e8 <HAL_UART_Init+0x17c>)
 8007038:	f7fa fb69 	bl	800170e <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007040:	2b00      	cmp	r3, #0
 8007042:	d106      	bne.n	8007052 <HAL_UART_Init+0xe6>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2200      	movs	r2, #0
 8007048:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f7fa ff3d 	bl	8001ecc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2224      	movs	r2, #36	; 0x24
 8007056:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f022 0201 	bic.w	r2, r2, #1
 8007066:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 fbf9 	bl	8007860 <UART_SetConfig>
 800706e:	4603      	mov	r3, r0
 8007070:	2b01      	cmp	r3, #1
 8007072:	d101      	bne.n	8007078 <HAL_UART_Init+0x10c>
  {
    return HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	e022      	b.n	80070be <HAL_UART_Init+0x152>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707c:	2b00      	cmp	r3, #0
 800707e:	d002      	beq.n	8007086 <HAL_UART_Init+0x11a>
  {
    UART_AdvFeatureConfig(huart);
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 fee3 	bl	8007e4c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	685a      	ldr	r2, [r3, #4]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007094:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	689a      	ldr	r2, [r3, #8]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80070a4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f042 0201 	orr.w	r2, r2, #1
 80070b4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f001 f820 	bl	80080fc <UART_CheckIdleState>
 80070bc:	4603      	mov	r3, r0
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3708      	adds	r7, #8
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop
 80070c8:	40011000 	.word	0x40011000
 80070cc:	40004400 	.word	0x40004400
 80070d0:	40004800 	.word	0x40004800
 80070d4:	40004c00 	.word	0x40004c00
 80070d8:	40005000 	.word	0x40005000
 80070dc:	40011400 	.word	0x40011400
 80070e0:	40007800 	.word	0x40007800
 80070e4:	40007c00 	.word	0x40007c00
 80070e8:	0800dc70 	.word	0x0800dc70

080070ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b08a      	sub	sp, #40	; 0x28
 80070f0:	af02      	add	r7, sp, #8
 80070f2:	60f8      	str	r0, [r7, #12]
 80070f4:	60b9      	str	r1, [r7, #8]
 80070f6:	603b      	str	r3, [r7, #0]
 80070f8:	4613      	mov	r3, r2
 80070fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007100:	2b20      	cmp	r3, #32
 8007102:	d171      	bne.n	80071e8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d002      	beq.n	8007110 <HAL_UART_Transmit+0x24>
 800710a:	88fb      	ldrh	r3, [r7, #6]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d101      	bne.n	8007114 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007110:	2301      	movs	r3, #1
 8007112:	e06a      	b.n	80071ea <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2200      	movs	r2, #0
 8007118:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2221      	movs	r2, #33	; 0x21
 8007120:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007122:	f7fa ffcf 	bl	80020c4 <HAL_GetTick>
 8007126:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	88fa      	ldrh	r2, [r7, #6]
 800712c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	88fa      	ldrh	r2, [r7, #6]
 8007134:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007140:	d108      	bne.n	8007154 <HAL_UART_Transmit+0x68>
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	691b      	ldr	r3, [r3, #16]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d104      	bne.n	8007154 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800714a:	2300      	movs	r3, #0
 800714c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	61bb      	str	r3, [r7, #24]
 8007152:	e003      	b.n	800715c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007158:	2300      	movs	r3, #0
 800715a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800715c:	e02c      	b.n	80071b8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	9300      	str	r3, [sp, #0]
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	2200      	movs	r2, #0
 8007166:	2180      	movs	r1, #128	; 0x80
 8007168:	68f8      	ldr	r0, [r7, #12]
 800716a:	f000 fffe 	bl	800816a <UART_WaitOnFlagUntilTimeout>
 800716e:	4603      	mov	r3, r0
 8007170:	2b00      	cmp	r3, #0
 8007172:	d001      	beq.n	8007178 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8007174:	2303      	movs	r3, #3
 8007176:	e038      	b.n	80071ea <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8007178:	69fb      	ldr	r3, [r7, #28]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d10b      	bne.n	8007196 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800717e:	69bb      	ldr	r3, [r7, #24]
 8007180:	881b      	ldrh	r3, [r3, #0]
 8007182:	461a      	mov	r2, r3
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800718c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800718e:	69bb      	ldr	r3, [r7, #24]
 8007190:	3302      	adds	r3, #2
 8007192:	61bb      	str	r3, [r7, #24]
 8007194:	e007      	b.n	80071a6 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007196:	69fb      	ldr	r3, [r7, #28]
 8007198:	781a      	ldrb	r2, [r3, #0]
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80071a0:	69fb      	ldr	r3, [r7, #28]
 80071a2:	3301      	adds	r3, #1
 80071a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	3b01      	subs	r3, #1
 80071b0:	b29a      	uxth	r2, r3
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80071be:	b29b      	uxth	r3, r3
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d1cc      	bne.n	800715e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	9300      	str	r3, [sp, #0]
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	2200      	movs	r2, #0
 80071cc:	2140      	movs	r1, #64	; 0x40
 80071ce:	68f8      	ldr	r0, [r7, #12]
 80071d0:	f000 ffcb 	bl	800816a <UART_WaitOnFlagUntilTimeout>
 80071d4:	4603      	mov	r3, r0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d001      	beq.n	80071de <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80071da:	2303      	movs	r3, #3
 80071dc:	e005      	b.n	80071ea <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2220      	movs	r2, #32
 80071e2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80071e4:	2300      	movs	r3, #0
 80071e6:	e000      	b.n	80071ea <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80071e8:	2302      	movs	r3, #2
  }
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3720      	adds	r7, #32
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}

080071f2 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80071f2:	b580      	push	{r7, lr}
 80071f4:	b08a      	sub	sp, #40	; 0x28
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	60f8      	str	r0, [r7, #12]
 80071fa:	60b9      	str	r1, [r7, #8]
 80071fc:	4613      	mov	r3, r2
 80071fe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007206:	2b20      	cmp	r3, #32
 8007208:	d132      	bne.n	8007270 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d002      	beq.n	8007216 <HAL_UART_Receive_IT+0x24>
 8007210:	88fb      	ldrh	r3, [r7, #6]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d101      	bne.n	800721a <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007216:	2301      	movs	r3, #1
 8007218:	e02b      	b.n	8007272 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2200      	movs	r2, #0
 800721e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800722a:	2b00      	cmp	r3, #0
 800722c:	d018      	beq.n	8007260 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	e853 3f00 	ldrex	r3, [r3]
 800723a:	613b      	str	r3, [r7, #16]
   return(result);
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007242:	627b      	str	r3, [r7, #36]	; 0x24
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	461a      	mov	r2, r3
 800724a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724c:	623b      	str	r3, [r7, #32]
 800724e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007250:	69f9      	ldr	r1, [r7, #28]
 8007252:	6a3a      	ldr	r2, [r7, #32]
 8007254:	e841 2300 	strex	r3, r2, [r1]
 8007258:	61bb      	str	r3, [r7, #24]
   return(result);
 800725a:	69bb      	ldr	r3, [r7, #24]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d1e6      	bne.n	800722e <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007260:	88fb      	ldrh	r3, [r7, #6]
 8007262:	461a      	mov	r2, r3
 8007264:	68b9      	ldr	r1, [r7, #8]
 8007266:	68f8      	ldr	r0, [r7, #12]
 8007268:	f001 f846 	bl	80082f8 <UART_Start_Receive_IT>
 800726c:	4603      	mov	r3, r0
 800726e:	e000      	b.n	8007272 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8007270:	2302      	movs	r3, #2
  }
}
 8007272:	4618      	mov	r0, r3
 8007274:	3728      	adds	r7, #40	; 0x28
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
	...

0800727c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b0ba      	sub	sp, #232	; 0xe8
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	69db      	ldr	r3, [r3, #28]
 800728a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80072a2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80072a6:	f640 030f 	movw	r3, #2063	; 0x80f
 80072aa:	4013      	ands	r3, r2
 80072ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80072b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d115      	bne.n	80072e4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80072b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072bc:	f003 0320 	and.w	r3, r3, #32
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d00f      	beq.n	80072e4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80072c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072c8:	f003 0320 	and.w	r3, r3, #32
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d009      	beq.n	80072e4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	f000 8297 	beq.w	8007808 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	4798      	blx	r3
      }
      return;
 80072e2:	e291      	b.n	8007808 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80072e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	f000 8117 	beq.w	800751c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80072ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072f2:	f003 0301 	and.w	r3, r3, #1
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d106      	bne.n	8007308 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80072fa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80072fe:	4b85      	ldr	r3, [pc, #532]	; (8007514 <HAL_UART_IRQHandler+0x298>)
 8007300:	4013      	ands	r3, r2
 8007302:	2b00      	cmp	r3, #0
 8007304:	f000 810a 	beq.w	800751c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007308:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800730c:	f003 0301 	and.w	r3, r3, #1
 8007310:	2b00      	cmp	r3, #0
 8007312:	d011      	beq.n	8007338 <HAL_UART_IRQHandler+0xbc>
 8007314:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800731c:	2b00      	cmp	r3, #0
 800731e:	d00b      	beq.n	8007338 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	2201      	movs	r2, #1
 8007326:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800732e:	f043 0201 	orr.w	r2, r3, #1
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007338:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800733c:	f003 0302 	and.w	r3, r3, #2
 8007340:	2b00      	cmp	r3, #0
 8007342:	d011      	beq.n	8007368 <HAL_UART_IRQHandler+0xec>
 8007344:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007348:	f003 0301 	and.w	r3, r3, #1
 800734c:	2b00      	cmp	r3, #0
 800734e:	d00b      	beq.n	8007368 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	2202      	movs	r2, #2
 8007356:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800735e:	f043 0204 	orr.w	r2, r3, #4
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800736c:	f003 0304 	and.w	r3, r3, #4
 8007370:	2b00      	cmp	r3, #0
 8007372:	d011      	beq.n	8007398 <HAL_UART_IRQHandler+0x11c>
 8007374:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007378:	f003 0301 	and.w	r3, r3, #1
 800737c:	2b00      	cmp	r3, #0
 800737e:	d00b      	beq.n	8007398 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	2204      	movs	r2, #4
 8007386:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800738e:	f043 0202 	orr.w	r2, r3, #2
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800739c:	f003 0308 	and.w	r3, r3, #8
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d017      	beq.n	80073d4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80073a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073a8:	f003 0320 	and.w	r3, r3, #32
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d105      	bne.n	80073bc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80073b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073b4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d00b      	beq.n	80073d4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	2208      	movs	r2, #8
 80073c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073ca:	f043 0208 	orr.w	r2, r3, #8
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80073d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d012      	beq.n	8007406 <HAL_UART_IRQHandler+0x18a>
 80073e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d00c      	beq.n	8007406 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80073f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073fc:	f043 0220 	orr.w	r2, r3, #32
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800740c:	2b00      	cmp	r3, #0
 800740e:	f000 81fd 	beq.w	800780c <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007416:	f003 0320 	and.w	r3, r3, #32
 800741a:	2b00      	cmp	r3, #0
 800741c:	d00d      	beq.n	800743a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800741e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007422:	f003 0320 	and.w	r3, r3, #32
 8007426:	2b00      	cmp	r3, #0
 8007428:	d007      	beq.n	800743a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800742e:	2b00      	cmp	r3, #0
 8007430:	d003      	beq.n	800743a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007440:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800744e:	2b40      	cmp	r3, #64	; 0x40
 8007450:	d005      	beq.n	800745e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007452:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007456:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800745a:	2b00      	cmp	r3, #0
 800745c:	d04f      	beq.n	80074fe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f001 f810 	bl	8008484 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800746e:	2b40      	cmp	r3, #64	; 0x40
 8007470:	d141      	bne.n	80074f6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	3308      	adds	r3, #8
 8007478:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800747c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007480:	e853 3f00 	ldrex	r3, [r3]
 8007484:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007488:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800748c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007490:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	3308      	adds	r3, #8
 800749a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800749e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80074a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80074aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80074ae:	e841 2300 	strex	r3, r2, [r1]
 80074b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80074b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d1d9      	bne.n	8007472 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d013      	beq.n	80074ee <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074ca:	4a13      	ldr	r2, [pc, #76]	; (8007518 <HAL_UART_IRQHandler+0x29c>)
 80074cc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074d2:	4618      	mov	r0, r3
 80074d4:	f7fa ffd6 	bl	8002484 <HAL_DMA_Abort_IT>
 80074d8:	4603      	mov	r3, r0
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d017      	beq.n	800750e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80074e8:	4610      	mov	r0, r2
 80074ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074ec:	e00f      	b.n	800750e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 f9a0 	bl	8007834 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074f4:	e00b      	b.n	800750e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 f99c 	bl	8007834 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074fc:	e007      	b.n	800750e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f000 f998 	bl	8007834 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800750c:	e17e      	b.n	800780c <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800750e:	bf00      	nop
    return;
 8007510:	e17c      	b.n	800780c <HAL_UART_IRQHandler+0x590>
 8007512:	bf00      	nop
 8007514:	04000120 	.word	0x04000120
 8007518:	0800854d 	.word	0x0800854d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007520:	2b01      	cmp	r3, #1
 8007522:	f040 814c 	bne.w	80077be <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800752a:	f003 0310 	and.w	r3, r3, #16
 800752e:	2b00      	cmp	r3, #0
 8007530:	f000 8145 	beq.w	80077be <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007538:	f003 0310 	and.w	r3, r3, #16
 800753c:	2b00      	cmp	r3, #0
 800753e:	f000 813e 	beq.w	80077be <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	2210      	movs	r2, #16
 8007548:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007554:	2b40      	cmp	r3, #64	; 0x40
 8007556:	f040 80b6 	bne.w	80076c6 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007566:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800756a:	2b00      	cmp	r3, #0
 800756c:	f000 8150 	beq.w	8007810 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007576:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800757a:	429a      	cmp	r2, r3
 800757c:	f080 8148 	bcs.w	8007810 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007586:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800758e:	69db      	ldr	r3, [r3, #28]
 8007590:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007594:	f000 8086 	beq.w	80076a4 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80075a4:	e853 3f00 	ldrex	r3, [r3]
 80075a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80075ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80075b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	461a      	mov	r2, r3
 80075be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80075c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80075c6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80075ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80075d2:	e841 2300 	strex	r3, r2, [r1]
 80075d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80075da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d1da      	bne.n	8007598 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	3308      	adds	r3, #8
 80075e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075ec:	e853 3f00 	ldrex	r3, [r3]
 80075f0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80075f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80075f4:	f023 0301 	bic.w	r3, r3, #1
 80075f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	3308      	adds	r3, #8
 8007602:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007606:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800760a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800760c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800760e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007612:	e841 2300 	strex	r3, r2, [r1]
 8007616:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007618:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800761a:	2b00      	cmp	r3, #0
 800761c:	d1e1      	bne.n	80075e2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	3308      	adds	r3, #8
 8007624:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007626:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007628:	e853 3f00 	ldrex	r3, [r3]
 800762c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800762e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007630:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007634:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	3308      	adds	r3, #8
 800763e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007642:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007644:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007646:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007648:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800764a:	e841 2300 	strex	r3, r2, [r1]
 800764e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007650:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007652:	2b00      	cmp	r3, #0
 8007654:	d1e3      	bne.n	800761e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2220      	movs	r2, #32
 800765a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800766a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800766c:	e853 3f00 	ldrex	r3, [r3]
 8007670:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007672:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007674:	f023 0310 	bic.w	r3, r3, #16
 8007678:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	461a      	mov	r2, r3
 8007682:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007686:	65bb      	str	r3, [r7, #88]	; 0x58
 8007688:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800768a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800768c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800768e:	e841 2300 	strex	r3, r2, [r1]
 8007692:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007694:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007696:	2b00      	cmp	r3, #0
 8007698:	d1e4      	bne.n	8007664 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800769e:	4618      	mov	r0, r3
 80076a0:	f7fa fe80 	bl	80023a4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2202      	movs	r2, #2
 80076a8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	1ad3      	subs	r3, r2, r3
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	4619      	mov	r1, r3
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 f8c2 	bl	8007848 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80076c4:	e0a4      	b.n	8007810 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	1ad3      	subs	r3, r2, r3
 80076d6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	f000 8096 	beq.w	8007814 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80076e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	f000 8091 	beq.w	8007814 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076fa:	e853 3f00 	ldrex	r3, [r3]
 80076fe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007702:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007706:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	461a      	mov	r2, r3
 8007710:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007714:	647b      	str	r3, [r7, #68]	; 0x44
 8007716:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007718:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800771a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800771c:	e841 2300 	strex	r3, r2, [r1]
 8007720:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007724:	2b00      	cmp	r3, #0
 8007726:	d1e4      	bne.n	80076f2 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	3308      	adds	r3, #8
 800772e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007732:	e853 3f00 	ldrex	r3, [r3]
 8007736:	623b      	str	r3, [r7, #32]
   return(result);
 8007738:	6a3b      	ldr	r3, [r7, #32]
 800773a:	f023 0301 	bic.w	r3, r3, #1
 800773e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	3308      	adds	r3, #8
 8007748:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800774c:	633a      	str	r2, [r7, #48]	; 0x30
 800774e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007750:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007752:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007754:	e841 2300 	strex	r3, r2, [r1]
 8007758:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800775a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800775c:	2b00      	cmp	r3, #0
 800775e:	d1e3      	bne.n	8007728 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2220      	movs	r2, #32
 8007764:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2200      	movs	r2, #0
 8007772:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	e853 3f00 	ldrex	r3, [r3]
 8007780:	60fb      	str	r3, [r7, #12]
   return(result);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	f023 0310 	bic.w	r3, r3, #16
 8007788:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	461a      	mov	r2, r3
 8007792:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007796:	61fb      	str	r3, [r7, #28]
 8007798:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800779a:	69b9      	ldr	r1, [r7, #24]
 800779c:	69fa      	ldr	r2, [r7, #28]
 800779e:	e841 2300 	strex	r3, r2, [r1]
 80077a2:	617b      	str	r3, [r7, #20]
   return(result);
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d1e4      	bne.n	8007774 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2202      	movs	r2, #2
 80077ae:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80077b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80077b4:	4619      	mov	r1, r3
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 f846 	bl	8007848 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80077bc:	e02a      	b.n	8007814 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80077be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d00e      	beq.n	80077e8 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80077ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d008      	beq.n	80077e8 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d01c      	beq.n	8007818 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	4798      	blx	r3
    }
    return;
 80077e6:	e017      	b.n	8007818 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80077e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d012      	beq.n	800781a <HAL_UART_IRQHandler+0x59e>
 80077f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d00c      	beq.n	800781a <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f000 feb9 	bl	8008578 <UART_EndTransmit_IT>
    return;
 8007806:	e008      	b.n	800781a <HAL_UART_IRQHandler+0x59e>
      return;
 8007808:	bf00      	nop
 800780a:	e006      	b.n	800781a <HAL_UART_IRQHandler+0x59e>
    return;
 800780c:	bf00      	nop
 800780e:	e004      	b.n	800781a <HAL_UART_IRQHandler+0x59e>
      return;
 8007810:	bf00      	nop
 8007812:	e002      	b.n	800781a <HAL_UART_IRQHandler+0x59e>
      return;
 8007814:	bf00      	nop
 8007816:	e000      	b.n	800781a <HAL_UART_IRQHandler+0x59e>
    return;
 8007818:	bf00      	nop
  }

}
 800781a:	37e8      	adds	r7, #232	; 0xe8
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007828:	bf00      	nop
 800782a:	370c      	adds	r7, #12
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr

08007834 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007834:	b480      	push	{r7}
 8007836:	b083      	sub	sp, #12
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800783c:	bf00      	nop
 800783e:	370c      	adds	r7, #12
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr

08007848 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007848:	b480      	push	{r7}
 800784a:	b083      	sub	sp, #12
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	460b      	mov	r3, r1
 8007852:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007854:	bf00      	nop
 8007856:	370c      	adds	r7, #12
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b088      	sub	sp, #32
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007868:	2300      	movs	r3, #0
 800786a:	77bb      	strb	r3, [r7, #30]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	4aa0      	ldr	r2, [pc, #640]	; (8007af4 <UART_SetConfig+0x294>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d904      	bls.n	8007880 <UART_SetConfig+0x20>
 8007876:	f640 315d 	movw	r1, #2909	; 0xb5d
 800787a:	489f      	ldr	r0, [pc, #636]	; (8007af8 <UART_SetConfig+0x298>)
 800787c:	f7f9 ff47 	bl	800170e <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	689b      	ldr	r3, [r3, #8]
 8007884:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007888:	d00d      	beq.n	80078a6 <UART_SetConfig+0x46>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d009      	beq.n	80078a6 <UART_SetConfig+0x46>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	689b      	ldr	r3, [r3, #8]
 8007896:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800789a:	d004      	beq.n	80078a6 <UART_SetConfig+0x46>
 800789c:	f640 315e 	movw	r1, #2910	; 0xb5e
 80078a0:	4895      	ldr	r0, [pc, #596]	; (8007af8 <UART_SetConfig+0x298>)
 80078a2:	f7f9 ff34 	bl	800170e <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	68db      	ldr	r3, [r3, #12]
 80078aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078ae:	d012      	beq.n	80078d6 <UART_SetConfig+0x76>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	68db      	ldr	r3, [r3, #12]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d00e      	beq.n	80078d6 <UART_SetConfig+0x76>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	68db      	ldr	r3, [r3, #12]
 80078bc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80078c0:	d009      	beq.n	80078d6 <UART_SetConfig+0x76>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	68db      	ldr	r3, [r3, #12]
 80078c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078ca:	d004      	beq.n	80078d6 <UART_SetConfig+0x76>
 80078cc:	f640 315f 	movw	r1, #2911	; 0xb5f
 80078d0:	4889      	ldr	r0, [pc, #548]	; (8007af8 <UART_SetConfig+0x298>)
 80078d2:	f7f9 ff1c 	bl	800170e <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6a1b      	ldr	r3, [r3, #32]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d009      	beq.n	80078f2 <UART_SetConfig+0x92>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6a1b      	ldr	r3, [r3, #32]
 80078e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078e6:	d004      	beq.n	80078f2 <UART_SetConfig+0x92>
 80078e8:	f44f 6136 	mov.w	r1, #2912	; 0xb60
 80078ec:	4882      	ldr	r0, [pc, #520]	; (8007af8 <UART_SetConfig+0x298>)
 80078ee:	f7f9 ff0e 	bl	800170e <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	691b      	ldr	r3, [r3, #16]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d00e      	beq.n	8007918 <UART_SetConfig+0xb8>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	691b      	ldr	r3, [r3, #16]
 80078fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007902:	d009      	beq.n	8007918 <UART_SetConfig+0xb8>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	691b      	ldr	r3, [r3, #16]
 8007908:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800790c:	d004      	beq.n	8007918 <UART_SetConfig+0xb8>
 800790e:	f640 3162 	movw	r1, #2914	; 0xb62
 8007912:	4879      	ldr	r0, [pc, #484]	; (8007af8 <UART_SetConfig+0x298>)
 8007914:	f7f9 fefb 	bl	800170e <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	695b      	ldr	r3, [r3, #20]
 800791c:	f023 030c 	bic.w	r3, r3, #12
 8007920:	2b00      	cmp	r3, #0
 8007922:	d103      	bne.n	800792c <UART_SetConfig+0xcc>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	695b      	ldr	r3, [r3, #20]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d104      	bne.n	8007936 <UART_SetConfig+0xd6>
 800792c:	f640 3163 	movw	r1, #2915	; 0xb63
 8007930:	4871      	ldr	r0, [pc, #452]	; (8007af8 <UART_SetConfig+0x298>)
 8007932:	f7f9 feec 	bl	800170e <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	699b      	ldr	r3, [r3, #24]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d013      	beq.n	8007966 <UART_SetConfig+0x106>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	699b      	ldr	r3, [r3, #24]
 8007942:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007946:	d00e      	beq.n	8007966 <UART_SetConfig+0x106>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	699b      	ldr	r3, [r3, #24]
 800794c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007950:	d009      	beq.n	8007966 <UART_SetConfig+0x106>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	699b      	ldr	r3, [r3, #24]
 8007956:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800795a:	d004      	beq.n	8007966 <UART_SetConfig+0x106>
 800795c:	f640 3164 	movw	r1, #2916	; 0xb64
 8007960:	4865      	ldr	r0, [pc, #404]	; (8007af8 <UART_SetConfig+0x298>)
 8007962:	f7f9 fed4 	bl	800170e <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	69db      	ldr	r3, [r3, #28]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d009      	beq.n	8007982 <UART_SetConfig+0x122>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	69db      	ldr	r3, [r3, #28]
 8007972:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007976:	d004      	beq.n	8007982 <UART_SetConfig+0x122>
 8007978:	f640 3165 	movw	r1, #2917	; 0xb65
 800797c:	485e      	ldr	r0, [pc, #376]	; (8007af8 <UART_SetConfig+0x298>)
 800797e:	f7f9 fec6 	bl	800170e <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	689a      	ldr	r2, [r3, #8]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	691b      	ldr	r3, [r3, #16]
 800798a:	431a      	orrs	r2, r3
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	695b      	ldr	r3, [r3, #20]
 8007990:	431a      	orrs	r2, r3
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	69db      	ldr	r3, [r3, #28]
 8007996:	4313      	orrs	r3, r2
 8007998:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	681a      	ldr	r2, [r3, #0]
 80079a0:	4b56      	ldr	r3, [pc, #344]	; (8007afc <UART_SetConfig+0x29c>)
 80079a2:	4013      	ands	r3, r2
 80079a4:	687a      	ldr	r2, [r7, #4]
 80079a6:	6812      	ldr	r2, [r2, #0]
 80079a8:	6979      	ldr	r1, [r7, #20]
 80079aa:	430b      	orrs	r3, r1
 80079ac:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	68da      	ldr	r2, [r3, #12]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	430a      	orrs	r2, r1
 80079c2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	699b      	ldr	r3, [r3, #24]
 80079c8:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6a1b      	ldr	r3, [r3, #32]
 80079ce:	697a      	ldr	r2, [r7, #20]
 80079d0:	4313      	orrs	r3, r2
 80079d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	689b      	ldr	r3, [r3, #8]
 80079da:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	697a      	ldr	r2, [r7, #20]
 80079e4:	430a      	orrs	r2, r1
 80079e6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a44      	ldr	r2, [pc, #272]	; (8007b00 <UART_SetConfig+0x2a0>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d121      	bne.n	8007a36 <UART_SetConfig+0x1d6>
 80079f2:	4b44      	ldr	r3, [pc, #272]	; (8007b04 <UART_SetConfig+0x2a4>)
 80079f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079f8:	f003 0303 	and.w	r3, r3, #3
 80079fc:	2b03      	cmp	r3, #3
 80079fe:	d817      	bhi.n	8007a30 <UART_SetConfig+0x1d0>
 8007a00:	a201      	add	r2, pc, #4	; (adr r2, 8007a08 <UART_SetConfig+0x1a8>)
 8007a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a06:	bf00      	nop
 8007a08:	08007a19 	.word	0x08007a19
 8007a0c:	08007a25 	.word	0x08007a25
 8007a10:	08007a1f 	.word	0x08007a1f
 8007a14:	08007a2b 	.word	0x08007a2b
 8007a18:	2301      	movs	r3, #1
 8007a1a:	77fb      	strb	r3, [r7, #31]
 8007a1c:	e14c      	b.n	8007cb8 <UART_SetConfig+0x458>
 8007a1e:	2302      	movs	r3, #2
 8007a20:	77fb      	strb	r3, [r7, #31]
 8007a22:	e149      	b.n	8007cb8 <UART_SetConfig+0x458>
 8007a24:	2304      	movs	r3, #4
 8007a26:	77fb      	strb	r3, [r7, #31]
 8007a28:	e146      	b.n	8007cb8 <UART_SetConfig+0x458>
 8007a2a:	2308      	movs	r3, #8
 8007a2c:	77fb      	strb	r3, [r7, #31]
 8007a2e:	e143      	b.n	8007cb8 <UART_SetConfig+0x458>
 8007a30:	2310      	movs	r3, #16
 8007a32:	77fb      	strb	r3, [r7, #31]
 8007a34:	e140      	b.n	8007cb8 <UART_SetConfig+0x458>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a33      	ldr	r2, [pc, #204]	; (8007b08 <UART_SetConfig+0x2a8>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d132      	bne.n	8007aa6 <UART_SetConfig+0x246>
 8007a40:	4b30      	ldr	r3, [pc, #192]	; (8007b04 <UART_SetConfig+0x2a4>)
 8007a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a46:	f003 030c 	and.w	r3, r3, #12
 8007a4a:	2b0c      	cmp	r3, #12
 8007a4c:	d828      	bhi.n	8007aa0 <UART_SetConfig+0x240>
 8007a4e:	a201      	add	r2, pc, #4	; (adr r2, 8007a54 <UART_SetConfig+0x1f4>)
 8007a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a54:	08007a89 	.word	0x08007a89
 8007a58:	08007aa1 	.word	0x08007aa1
 8007a5c:	08007aa1 	.word	0x08007aa1
 8007a60:	08007aa1 	.word	0x08007aa1
 8007a64:	08007a95 	.word	0x08007a95
 8007a68:	08007aa1 	.word	0x08007aa1
 8007a6c:	08007aa1 	.word	0x08007aa1
 8007a70:	08007aa1 	.word	0x08007aa1
 8007a74:	08007a8f 	.word	0x08007a8f
 8007a78:	08007aa1 	.word	0x08007aa1
 8007a7c:	08007aa1 	.word	0x08007aa1
 8007a80:	08007aa1 	.word	0x08007aa1
 8007a84:	08007a9b 	.word	0x08007a9b
 8007a88:	2300      	movs	r3, #0
 8007a8a:	77fb      	strb	r3, [r7, #31]
 8007a8c:	e114      	b.n	8007cb8 <UART_SetConfig+0x458>
 8007a8e:	2302      	movs	r3, #2
 8007a90:	77fb      	strb	r3, [r7, #31]
 8007a92:	e111      	b.n	8007cb8 <UART_SetConfig+0x458>
 8007a94:	2304      	movs	r3, #4
 8007a96:	77fb      	strb	r3, [r7, #31]
 8007a98:	e10e      	b.n	8007cb8 <UART_SetConfig+0x458>
 8007a9a:	2308      	movs	r3, #8
 8007a9c:	77fb      	strb	r3, [r7, #31]
 8007a9e:	e10b      	b.n	8007cb8 <UART_SetConfig+0x458>
 8007aa0:	2310      	movs	r3, #16
 8007aa2:	77fb      	strb	r3, [r7, #31]
 8007aa4:	e108      	b.n	8007cb8 <UART_SetConfig+0x458>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a18      	ldr	r2, [pc, #96]	; (8007b0c <UART_SetConfig+0x2ac>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d12f      	bne.n	8007b10 <UART_SetConfig+0x2b0>
 8007ab0:	4b14      	ldr	r3, [pc, #80]	; (8007b04 <UART_SetConfig+0x2a4>)
 8007ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ab6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007aba:	2b30      	cmp	r3, #48	; 0x30
 8007abc:	d013      	beq.n	8007ae6 <UART_SetConfig+0x286>
 8007abe:	2b30      	cmp	r3, #48	; 0x30
 8007ac0:	d814      	bhi.n	8007aec <UART_SetConfig+0x28c>
 8007ac2:	2b20      	cmp	r3, #32
 8007ac4:	d009      	beq.n	8007ada <UART_SetConfig+0x27a>
 8007ac6:	2b20      	cmp	r3, #32
 8007ac8:	d810      	bhi.n	8007aec <UART_SetConfig+0x28c>
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d002      	beq.n	8007ad4 <UART_SetConfig+0x274>
 8007ace:	2b10      	cmp	r3, #16
 8007ad0:	d006      	beq.n	8007ae0 <UART_SetConfig+0x280>
 8007ad2:	e00b      	b.n	8007aec <UART_SetConfig+0x28c>
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	77fb      	strb	r3, [r7, #31]
 8007ad8:	e0ee      	b.n	8007cb8 <UART_SetConfig+0x458>
 8007ada:	2302      	movs	r3, #2
 8007adc:	77fb      	strb	r3, [r7, #31]
 8007ade:	e0eb      	b.n	8007cb8 <UART_SetConfig+0x458>
 8007ae0:	2304      	movs	r3, #4
 8007ae2:	77fb      	strb	r3, [r7, #31]
 8007ae4:	e0e8      	b.n	8007cb8 <UART_SetConfig+0x458>
 8007ae6:	2308      	movs	r3, #8
 8007ae8:	77fb      	strb	r3, [r7, #31]
 8007aea:	e0e5      	b.n	8007cb8 <UART_SetConfig+0x458>
 8007aec:	2310      	movs	r3, #16
 8007aee:	77fb      	strb	r3, [r7, #31]
 8007af0:	e0e2      	b.n	8007cb8 <UART_SetConfig+0x458>
 8007af2:	bf00      	nop
 8007af4:	019bfcc0 	.word	0x019bfcc0
 8007af8:	0800dc70 	.word	0x0800dc70
 8007afc:	efff69f3 	.word	0xefff69f3
 8007b00:	40011000 	.word	0x40011000
 8007b04:	40023800 	.word	0x40023800
 8007b08:	40004400 	.word	0x40004400
 8007b0c:	40004800 	.word	0x40004800
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4aa5      	ldr	r2, [pc, #660]	; (8007dac <UART_SetConfig+0x54c>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d120      	bne.n	8007b5c <UART_SetConfig+0x2fc>
 8007b1a:	4ba5      	ldr	r3, [pc, #660]	; (8007db0 <UART_SetConfig+0x550>)
 8007b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b20:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007b24:	2bc0      	cmp	r3, #192	; 0xc0
 8007b26:	d013      	beq.n	8007b50 <UART_SetConfig+0x2f0>
 8007b28:	2bc0      	cmp	r3, #192	; 0xc0
 8007b2a:	d814      	bhi.n	8007b56 <UART_SetConfig+0x2f6>
 8007b2c:	2b80      	cmp	r3, #128	; 0x80
 8007b2e:	d009      	beq.n	8007b44 <UART_SetConfig+0x2e4>
 8007b30:	2b80      	cmp	r3, #128	; 0x80
 8007b32:	d810      	bhi.n	8007b56 <UART_SetConfig+0x2f6>
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d002      	beq.n	8007b3e <UART_SetConfig+0x2de>
 8007b38:	2b40      	cmp	r3, #64	; 0x40
 8007b3a:	d006      	beq.n	8007b4a <UART_SetConfig+0x2ea>
 8007b3c:	e00b      	b.n	8007b56 <UART_SetConfig+0x2f6>
 8007b3e:	2300      	movs	r3, #0
 8007b40:	77fb      	strb	r3, [r7, #31]
 8007b42:	e0b9      	b.n	8007cb8 <UART_SetConfig+0x458>
 8007b44:	2302      	movs	r3, #2
 8007b46:	77fb      	strb	r3, [r7, #31]
 8007b48:	e0b6      	b.n	8007cb8 <UART_SetConfig+0x458>
 8007b4a:	2304      	movs	r3, #4
 8007b4c:	77fb      	strb	r3, [r7, #31]
 8007b4e:	e0b3      	b.n	8007cb8 <UART_SetConfig+0x458>
 8007b50:	2308      	movs	r3, #8
 8007b52:	77fb      	strb	r3, [r7, #31]
 8007b54:	e0b0      	b.n	8007cb8 <UART_SetConfig+0x458>
 8007b56:	2310      	movs	r3, #16
 8007b58:	77fb      	strb	r3, [r7, #31]
 8007b5a:	e0ad      	b.n	8007cb8 <UART_SetConfig+0x458>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a94      	ldr	r2, [pc, #592]	; (8007db4 <UART_SetConfig+0x554>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d125      	bne.n	8007bb2 <UART_SetConfig+0x352>
 8007b66:	4b92      	ldr	r3, [pc, #584]	; (8007db0 <UART_SetConfig+0x550>)
 8007b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b74:	d017      	beq.n	8007ba6 <UART_SetConfig+0x346>
 8007b76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b7a:	d817      	bhi.n	8007bac <UART_SetConfig+0x34c>
 8007b7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b80:	d00b      	beq.n	8007b9a <UART_SetConfig+0x33a>
 8007b82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b86:	d811      	bhi.n	8007bac <UART_SetConfig+0x34c>
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d003      	beq.n	8007b94 <UART_SetConfig+0x334>
 8007b8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b90:	d006      	beq.n	8007ba0 <UART_SetConfig+0x340>
 8007b92:	e00b      	b.n	8007bac <UART_SetConfig+0x34c>
 8007b94:	2300      	movs	r3, #0
 8007b96:	77fb      	strb	r3, [r7, #31]
 8007b98:	e08e      	b.n	8007cb8 <UART_SetConfig+0x458>
 8007b9a:	2302      	movs	r3, #2
 8007b9c:	77fb      	strb	r3, [r7, #31]
 8007b9e:	e08b      	b.n	8007cb8 <UART_SetConfig+0x458>
 8007ba0:	2304      	movs	r3, #4
 8007ba2:	77fb      	strb	r3, [r7, #31]
 8007ba4:	e088      	b.n	8007cb8 <UART_SetConfig+0x458>
 8007ba6:	2308      	movs	r3, #8
 8007ba8:	77fb      	strb	r3, [r7, #31]
 8007baa:	e085      	b.n	8007cb8 <UART_SetConfig+0x458>
 8007bac:	2310      	movs	r3, #16
 8007bae:	77fb      	strb	r3, [r7, #31]
 8007bb0:	e082      	b.n	8007cb8 <UART_SetConfig+0x458>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a80      	ldr	r2, [pc, #512]	; (8007db8 <UART_SetConfig+0x558>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d125      	bne.n	8007c08 <UART_SetConfig+0x3a8>
 8007bbc:	4b7c      	ldr	r3, [pc, #496]	; (8007db0 <UART_SetConfig+0x550>)
 8007bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bc2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007bc6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007bca:	d017      	beq.n	8007bfc <UART_SetConfig+0x39c>
 8007bcc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007bd0:	d817      	bhi.n	8007c02 <UART_SetConfig+0x3a2>
 8007bd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bd6:	d00b      	beq.n	8007bf0 <UART_SetConfig+0x390>
 8007bd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bdc:	d811      	bhi.n	8007c02 <UART_SetConfig+0x3a2>
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d003      	beq.n	8007bea <UART_SetConfig+0x38a>
 8007be2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007be6:	d006      	beq.n	8007bf6 <UART_SetConfig+0x396>
 8007be8:	e00b      	b.n	8007c02 <UART_SetConfig+0x3a2>
 8007bea:	2301      	movs	r3, #1
 8007bec:	77fb      	strb	r3, [r7, #31]
 8007bee:	e063      	b.n	8007cb8 <UART_SetConfig+0x458>
 8007bf0:	2302      	movs	r3, #2
 8007bf2:	77fb      	strb	r3, [r7, #31]
 8007bf4:	e060      	b.n	8007cb8 <UART_SetConfig+0x458>
 8007bf6:	2304      	movs	r3, #4
 8007bf8:	77fb      	strb	r3, [r7, #31]
 8007bfa:	e05d      	b.n	8007cb8 <UART_SetConfig+0x458>
 8007bfc:	2308      	movs	r3, #8
 8007bfe:	77fb      	strb	r3, [r7, #31]
 8007c00:	e05a      	b.n	8007cb8 <UART_SetConfig+0x458>
 8007c02:	2310      	movs	r3, #16
 8007c04:	77fb      	strb	r3, [r7, #31]
 8007c06:	e057      	b.n	8007cb8 <UART_SetConfig+0x458>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a6b      	ldr	r2, [pc, #428]	; (8007dbc <UART_SetConfig+0x55c>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d125      	bne.n	8007c5e <UART_SetConfig+0x3fe>
 8007c12:	4b67      	ldr	r3, [pc, #412]	; (8007db0 <UART_SetConfig+0x550>)
 8007c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c18:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007c1c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007c20:	d017      	beq.n	8007c52 <UART_SetConfig+0x3f2>
 8007c22:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007c26:	d817      	bhi.n	8007c58 <UART_SetConfig+0x3f8>
 8007c28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c2c:	d00b      	beq.n	8007c46 <UART_SetConfig+0x3e6>
 8007c2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c32:	d811      	bhi.n	8007c58 <UART_SetConfig+0x3f8>
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d003      	beq.n	8007c40 <UART_SetConfig+0x3e0>
 8007c38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c3c:	d006      	beq.n	8007c4c <UART_SetConfig+0x3ec>
 8007c3e:	e00b      	b.n	8007c58 <UART_SetConfig+0x3f8>
 8007c40:	2300      	movs	r3, #0
 8007c42:	77fb      	strb	r3, [r7, #31]
 8007c44:	e038      	b.n	8007cb8 <UART_SetConfig+0x458>
 8007c46:	2302      	movs	r3, #2
 8007c48:	77fb      	strb	r3, [r7, #31]
 8007c4a:	e035      	b.n	8007cb8 <UART_SetConfig+0x458>
 8007c4c:	2304      	movs	r3, #4
 8007c4e:	77fb      	strb	r3, [r7, #31]
 8007c50:	e032      	b.n	8007cb8 <UART_SetConfig+0x458>
 8007c52:	2308      	movs	r3, #8
 8007c54:	77fb      	strb	r3, [r7, #31]
 8007c56:	e02f      	b.n	8007cb8 <UART_SetConfig+0x458>
 8007c58:	2310      	movs	r3, #16
 8007c5a:	77fb      	strb	r3, [r7, #31]
 8007c5c:	e02c      	b.n	8007cb8 <UART_SetConfig+0x458>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a57      	ldr	r2, [pc, #348]	; (8007dc0 <UART_SetConfig+0x560>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d125      	bne.n	8007cb4 <UART_SetConfig+0x454>
 8007c68:	4b51      	ldr	r3, [pc, #324]	; (8007db0 <UART_SetConfig+0x550>)
 8007c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c6e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007c72:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007c76:	d017      	beq.n	8007ca8 <UART_SetConfig+0x448>
 8007c78:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007c7c:	d817      	bhi.n	8007cae <UART_SetConfig+0x44e>
 8007c7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c82:	d00b      	beq.n	8007c9c <UART_SetConfig+0x43c>
 8007c84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c88:	d811      	bhi.n	8007cae <UART_SetConfig+0x44e>
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d003      	beq.n	8007c96 <UART_SetConfig+0x436>
 8007c8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c92:	d006      	beq.n	8007ca2 <UART_SetConfig+0x442>
 8007c94:	e00b      	b.n	8007cae <UART_SetConfig+0x44e>
 8007c96:	2300      	movs	r3, #0
 8007c98:	77fb      	strb	r3, [r7, #31]
 8007c9a:	e00d      	b.n	8007cb8 <UART_SetConfig+0x458>
 8007c9c:	2302      	movs	r3, #2
 8007c9e:	77fb      	strb	r3, [r7, #31]
 8007ca0:	e00a      	b.n	8007cb8 <UART_SetConfig+0x458>
 8007ca2:	2304      	movs	r3, #4
 8007ca4:	77fb      	strb	r3, [r7, #31]
 8007ca6:	e007      	b.n	8007cb8 <UART_SetConfig+0x458>
 8007ca8:	2308      	movs	r3, #8
 8007caa:	77fb      	strb	r3, [r7, #31]
 8007cac:	e004      	b.n	8007cb8 <UART_SetConfig+0x458>
 8007cae:	2310      	movs	r3, #16
 8007cb0:	77fb      	strb	r3, [r7, #31]
 8007cb2:	e001      	b.n	8007cb8 <UART_SetConfig+0x458>
 8007cb4:	2310      	movs	r3, #16
 8007cb6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	69db      	ldr	r3, [r3, #28]
 8007cbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cc0:	d15c      	bne.n	8007d7c <UART_SetConfig+0x51c>
  {
    switch (clocksource)
 8007cc2:	7ffb      	ldrb	r3, [r7, #31]
 8007cc4:	2b08      	cmp	r3, #8
 8007cc6:	d828      	bhi.n	8007d1a <UART_SetConfig+0x4ba>
 8007cc8:	a201      	add	r2, pc, #4	; (adr r2, 8007cd0 <UART_SetConfig+0x470>)
 8007cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cce:	bf00      	nop
 8007cd0:	08007cf5 	.word	0x08007cf5
 8007cd4:	08007cfd 	.word	0x08007cfd
 8007cd8:	08007d05 	.word	0x08007d05
 8007cdc:	08007d1b 	.word	0x08007d1b
 8007ce0:	08007d0b 	.word	0x08007d0b
 8007ce4:	08007d1b 	.word	0x08007d1b
 8007ce8:	08007d1b 	.word	0x08007d1b
 8007cec:	08007d1b 	.word	0x08007d1b
 8007cf0:	08007d13 	.word	0x08007d13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cf4:	f7fb ffec 	bl	8003cd0 <HAL_RCC_GetPCLK1Freq>
 8007cf8:	61b8      	str	r0, [r7, #24]
        break;
 8007cfa:	e013      	b.n	8007d24 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007cfc:	f7fb fffc 	bl	8003cf8 <HAL_RCC_GetPCLK2Freq>
 8007d00:	61b8      	str	r0, [r7, #24]
        break;
 8007d02:	e00f      	b.n	8007d24 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d04:	4b2f      	ldr	r3, [pc, #188]	; (8007dc4 <UART_SetConfig+0x564>)
 8007d06:	61bb      	str	r3, [r7, #24]
        break;
 8007d08:	e00c      	b.n	8007d24 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d0a:	f7fb ff0f 	bl	8003b2c <HAL_RCC_GetSysClockFreq>
 8007d0e:	61b8      	str	r0, [r7, #24]
        break;
 8007d10:	e008      	b.n	8007d24 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d16:	61bb      	str	r3, [r7, #24]
        break;
 8007d18:	e004      	b.n	8007d24 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	77bb      	strb	r3, [r7, #30]
        break;
 8007d22:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007d24:	69bb      	ldr	r3, [r7, #24]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	f000 8082 	beq.w	8007e30 <UART_SetConfig+0x5d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007d2c:	69bb      	ldr	r3, [r7, #24]
 8007d2e:	005a      	lsls	r2, r3, #1
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	085b      	lsrs	r3, r3, #1
 8007d36:	441a      	add	r2, r3
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d40:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	2b0f      	cmp	r3, #15
 8007d46:	d916      	bls.n	8007d76 <UART_SetConfig+0x516>
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d4e:	d212      	bcs.n	8007d76 <UART_SetConfig+0x516>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	f023 030f 	bic.w	r3, r3, #15
 8007d58:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	085b      	lsrs	r3, r3, #1
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	f003 0307 	and.w	r3, r3, #7
 8007d64:	b29a      	uxth	r2, r3
 8007d66:	89fb      	ldrh	r3, [r7, #14]
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	89fa      	ldrh	r2, [r7, #14]
 8007d72:	60da      	str	r2, [r3, #12]
 8007d74:	e05c      	b.n	8007e30 <UART_SetConfig+0x5d0>
      }
      else
      {
        ret = HAL_ERROR;
 8007d76:	2301      	movs	r3, #1
 8007d78:	77bb      	strb	r3, [r7, #30]
 8007d7a:	e059      	b.n	8007e30 <UART_SetConfig+0x5d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d7c:	7ffb      	ldrb	r3, [r7, #31]
 8007d7e:	2b08      	cmp	r3, #8
 8007d80:	d835      	bhi.n	8007dee <UART_SetConfig+0x58e>
 8007d82:	a201      	add	r2, pc, #4	; (adr r2, 8007d88 <UART_SetConfig+0x528>)
 8007d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d88:	08007dc9 	.word	0x08007dc9
 8007d8c:	08007dd1 	.word	0x08007dd1
 8007d90:	08007dd9 	.word	0x08007dd9
 8007d94:	08007def 	.word	0x08007def
 8007d98:	08007ddf 	.word	0x08007ddf
 8007d9c:	08007def 	.word	0x08007def
 8007da0:	08007def 	.word	0x08007def
 8007da4:	08007def 	.word	0x08007def
 8007da8:	08007de7 	.word	0x08007de7
 8007dac:	40004c00 	.word	0x40004c00
 8007db0:	40023800 	.word	0x40023800
 8007db4:	40005000 	.word	0x40005000
 8007db8:	40011400 	.word	0x40011400
 8007dbc:	40007800 	.word	0x40007800
 8007dc0:	40007c00 	.word	0x40007c00
 8007dc4:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007dc8:	f7fb ff82 	bl	8003cd0 <HAL_RCC_GetPCLK1Freq>
 8007dcc:	61b8      	str	r0, [r7, #24]
        break;
 8007dce:	e013      	b.n	8007df8 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007dd0:	f7fb ff92 	bl	8003cf8 <HAL_RCC_GetPCLK2Freq>
 8007dd4:	61b8      	str	r0, [r7, #24]
        break;
 8007dd6:	e00f      	b.n	8007df8 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007dd8:	4b1b      	ldr	r3, [pc, #108]	; (8007e48 <UART_SetConfig+0x5e8>)
 8007dda:	61bb      	str	r3, [r7, #24]
        break;
 8007ddc:	e00c      	b.n	8007df8 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007dde:	f7fb fea5 	bl	8003b2c <HAL_RCC_GetSysClockFreq>
 8007de2:	61b8      	str	r0, [r7, #24]
        break;
 8007de4:	e008      	b.n	8007df8 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007de6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007dea:	61bb      	str	r3, [r7, #24]
        break;
 8007dec:	e004      	b.n	8007df8 <UART_SetConfig+0x598>
      default:
        pclk = 0U;
 8007dee:	2300      	movs	r3, #0
 8007df0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007df2:	2301      	movs	r3, #1
 8007df4:	77bb      	strb	r3, [r7, #30]
        break;
 8007df6:	bf00      	nop
    }

    if (pclk != 0U)
 8007df8:	69bb      	ldr	r3, [r7, #24]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d018      	beq.n	8007e30 <UART_SetConfig+0x5d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	085a      	lsrs	r2, r3, #1
 8007e04:	69bb      	ldr	r3, [r7, #24]
 8007e06:	441a      	add	r2, r3
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e10:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	2b0f      	cmp	r3, #15
 8007e16:	d909      	bls.n	8007e2c <UART_SetConfig+0x5cc>
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e1e:	d205      	bcs.n	8007e2c <UART_SetConfig+0x5cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	b29a      	uxth	r2, r3
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	60da      	str	r2, [r3, #12]
 8007e2a:	e001      	b.n	8007e30 <UART_SetConfig+0x5d0>
      }
      else
      {
        ret = HAL_ERROR;
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2200      	movs	r2, #0
 8007e34:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007e3c:	7fbb      	ldrb	r3, [r7, #30]
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3720      	adds	r7, #32
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
 8007e46:	bf00      	nop
 8007e48:	00f42400 	.word	0x00f42400

08007e4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b082      	sub	sp, #8
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e58:	2bff      	cmp	r3, #255	; 0xff
 8007e5a:	d904      	bls.n	8007e66 <UART_AdvFeatureConfig+0x1a>
 8007e5c:	f640 31e6 	movw	r1, #3046	; 0xbe6
 8007e60:	488e      	ldr	r0, [pc, #568]	; (800809c <UART_AdvFeatureConfig+0x250>)
 8007e62:	f7f9 fc54 	bl	800170e <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e6a:	f003 0301 	and.w	r3, r3, #1
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d018      	beq.n	8007ea4 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d009      	beq.n	8007e8e <UART_AdvFeatureConfig+0x42>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e82:	d004      	beq.n	8007e8e <UART_AdvFeatureConfig+0x42>
 8007e84:	f640 31eb 	movw	r1, #3051	; 0xbeb
 8007e88:	4884      	ldr	r0, [pc, #528]	; (800809c <UART_AdvFeatureConfig+0x250>)
 8007e8a:	f7f9 fc40 	bl	800170e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	430a      	orrs	r2, r1
 8007ea2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea8:	f003 0302 	and.w	r3, r3, #2
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d018      	beq.n	8007ee2 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d009      	beq.n	8007ecc <UART_AdvFeatureConfig+0x80>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ec0:	d004      	beq.n	8007ecc <UART_AdvFeatureConfig+0x80>
 8007ec2:	f640 31f2 	movw	r1, #3058	; 0xbf2
 8007ec6:	4875      	ldr	r0, [pc, #468]	; (800809c <UART_AdvFeatureConfig+0x250>)
 8007ec8:	f7f9 fc21 	bl	800170e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	430a      	orrs	r2, r1
 8007ee0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee6:	f003 0304 	and.w	r3, r3, #4
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d018      	beq.n	8007f20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d009      	beq.n	8007f0a <UART_AdvFeatureConfig+0xbe>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007efa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007efe:	d004      	beq.n	8007f0a <UART_AdvFeatureConfig+0xbe>
 8007f00:	f640 31f9 	movw	r1, #3065	; 0xbf9
 8007f04:	4865      	ldr	r0, [pc, #404]	; (800809c <UART_AdvFeatureConfig+0x250>)
 8007f06:	f7f9 fc02 	bl	800170e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	430a      	orrs	r2, r1
 8007f1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f24:	f003 0308 	and.w	r3, r3, #8
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d018      	beq.n	8007f5e <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d009      	beq.n	8007f48 <UART_AdvFeatureConfig+0xfc>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f3c:	d004      	beq.n	8007f48 <UART_AdvFeatureConfig+0xfc>
 8007f3e:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8007f42:	4856      	ldr	r0, [pc, #344]	; (800809c <UART_AdvFeatureConfig+0x250>)
 8007f44:	f7f9 fbe3 	bl	800170e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	430a      	orrs	r2, r1
 8007f5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f62:	f003 0310 	and.w	r3, r3, #16
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d018      	beq.n	8007f9c <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d009      	beq.n	8007f86 <UART_AdvFeatureConfig+0x13a>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f7a:	d004      	beq.n	8007f86 <UART_AdvFeatureConfig+0x13a>
 8007f7c:	f640 4107 	movw	r1, #3079	; 0xc07
 8007f80:	4846      	ldr	r0, [pc, #280]	; (800809c <UART_AdvFeatureConfig+0x250>)
 8007f82:	f7f9 fbc4 	bl	800170e <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	689b      	ldr	r3, [r3, #8]
 8007f8c:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	430a      	orrs	r2, r1
 8007f9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa0:	f003 0320 	and.w	r3, r3, #32
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d018      	beq.n	8007fda <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d009      	beq.n	8007fc4 <UART_AdvFeatureConfig+0x178>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fb8:	d004      	beq.n	8007fc4 <UART_AdvFeatureConfig+0x178>
 8007fba:	f640 410e 	movw	r1, #3086	; 0xc0e
 8007fbe:	4837      	ldr	r0, [pc, #220]	; (800809c <UART_AdvFeatureConfig+0x250>)
 8007fc0:	f7f9 fba5 	bl	800170e <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	689b      	ldr	r3, [r3, #8]
 8007fca:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	430a      	orrs	r2, r1
 8007fd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d064      	beq.n	80080b0 <UART_AdvFeatureConfig+0x264>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a2d      	ldr	r2, [pc, #180]	; (80080a0 <UART_AdvFeatureConfig+0x254>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d013      	beq.n	8008018 <UART_AdvFeatureConfig+0x1cc>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a2b      	ldr	r2, [pc, #172]	; (80080a4 <UART_AdvFeatureConfig+0x258>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d00e      	beq.n	8008018 <UART_AdvFeatureConfig+0x1cc>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a2a      	ldr	r2, [pc, #168]	; (80080a8 <UART_AdvFeatureConfig+0x25c>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d009      	beq.n	8008018 <UART_AdvFeatureConfig+0x1cc>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a28      	ldr	r2, [pc, #160]	; (80080ac <UART_AdvFeatureConfig+0x260>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d004      	beq.n	8008018 <UART_AdvFeatureConfig+0x1cc>
 800800e:	f640 4115 	movw	r1, #3093	; 0xc15
 8008012:	4822      	ldr	r0, [pc, #136]	; (800809c <UART_AdvFeatureConfig+0x250>)
 8008014:	f7f9 fb7b 	bl	800170e <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800801c:	2b00      	cmp	r3, #0
 800801e:	d009      	beq.n	8008034 <UART_AdvFeatureConfig+0x1e8>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008024:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008028:	d004      	beq.n	8008034 <UART_AdvFeatureConfig+0x1e8>
 800802a:	f640 4116 	movw	r1, #3094	; 0xc16
 800802e:	481b      	ldr	r0, [pc, #108]	; (800809c <UART_AdvFeatureConfig+0x250>)
 8008030:	f7f9 fb6d 	bl	800170e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	430a      	orrs	r2, r1
 8008048:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800804e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008052:	d12d      	bne.n	80080b0 <UART_AdvFeatureConfig+0x264>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008058:	2b00      	cmp	r3, #0
 800805a:	d013      	beq.n	8008084 <UART_AdvFeatureConfig+0x238>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008060:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008064:	d00e      	beq.n	8008084 <UART_AdvFeatureConfig+0x238>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800806a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800806e:	d009      	beq.n	8008084 <UART_AdvFeatureConfig+0x238>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008074:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008078:	d004      	beq.n	8008084 <UART_AdvFeatureConfig+0x238>
 800807a:	f640 411b 	movw	r1, #3099	; 0xc1b
 800807e:	4807      	ldr	r0, [pc, #28]	; (800809c <UART_AdvFeatureConfig+0x250>)
 8008080:	f7f9 fb45 	bl	800170e <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	430a      	orrs	r2, r1
 8008098:	605a      	str	r2, [r3, #4]
 800809a:	e009      	b.n	80080b0 <UART_AdvFeatureConfig+0x264>
 800809c:	0800dc70 	.word	0x0800dc70
 80080a0:	40011000 	.word	0x40011000
 80080a4:	40004400 	.word	0x40004400
 80080a8:	40004800 	.word	0x40004800
 80080ac:	40011400 	.word	0x40011400
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d018      	beq.n	80080ee <UART_AdvFeatureConfig+0x2a2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d009      	beq.n	80080d8 <UART_AdvFeatureConfig+0x28c>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080c8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80080cc:	d004      	beq.n	80080d8 <UART_AdvFeatureConfig+0x28c>
 80080ce:	f640 4123 	movw	r1, #3107	; 0xc23
 80080d2:	4809      	ldr	r0, [pc, #36]	; (80080f8 <UART_AdvFeatureConfig+0x2ac>)
 80080d4:	f7f9 fb1b 	bl	800170e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	430a      	orrs	r2, r1
 80080ec:	605a      	str	r2, [r3, #4]
  }
}
 80080ee:	bf00      	nop
 80080f0:	3708      	adds	r7, #8
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}
 80080f6:	bf00      	nop
 80080f8:	0800dc70 	.word	0x0800dc70

080080fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b086      	sub	sp, #24
 8008100:	af02      	add	r7, sp, #8
 8008102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2200      	movs	r2, #0
 8008108:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800810c:	f7f9 ffda 	bl	80020c4 <HAL_GetTick>
 8008110:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f003 0308 	and.w	r3, r3, #8
 800811c:	2b08      	cmp	r3, #8
 800811e:	d10e      	bne.n	800813e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008120:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008124:	9300      	str	r3, [sp, #0]
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2200      	movs	r2, #0
 800812a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 f81b 	bl	800816a <UART_WaitOnFlagUntilTimeout>
 8008134:	4603      	mov	r3, r0
 8008136:	2b00      	cmp	r3, #0
 8008138:	d001      	beq.n	800813e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800813a:	2303      	movs	r3, #3
 800813c:	e011      	b.n	8008162 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2220      	movs	r2, #32
 8008142:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2220      	movs	r2, #32
 8008148:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2200      	movs	r2, #0
 8008150:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2200      	movs	r2, #0
 8008156:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2200      	movs	r2, #0
 800815c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008160:	2300      	movs	r3, #0
}
 8008162:	4618      	mov	r0, r3
 8008164:	3710      	adds	r7, #16
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}

0800816a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800816a:	b580      	push	{r7, lr}
 800816c:	b09c      	sub	sp, #112	; 0x70
 800816e:	af00      	add	r7, sp, #0
 8008170:	60f8      	str	r0, [r7, #12]
 8008172:	60b9      	str	r1, [r7, #8]
 8008174:	603b      	str	r3, [r7, #0]
 8008176:	4613      	mov	r3, r2
 8008178:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800817a:	e0a7      	b.n	80082cc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800817c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800817e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008182:	f000 80a3 	beq.w	80082cc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008186:	f7f9 ff9d 	bl	80020c4 <HAL_GetTick>
 800818a:	4602      	mov	r2, r0
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	1ad3      	subs	r3, r2, r3
 8008190:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008192:	429a      	cmp	r2, r3
 8008194:	d302      	bcc.n	800819c <UART_WaitOnFlagUntilTimeout+0x32>
 8008196:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008198:	2b00      	cmp	r3, #0
 800819a:	d13f      	bne.n	800821c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081a4:	e853 3f00 	ldrex	r3, [r3]
 80081a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80081aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80081b0:	667b      	str	r3, [r7, #100]	; 0x64
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	461a      	mov	r2, r3
 80081b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80081bc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80081c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80081c2:	e841 2300 	strex	r3, r2, [r1]
 80081c6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80081c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d1e6      	bne.n	800819c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	3308      	adds	r3, #8
 80081d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081d8:	e853 3f00 	ldrex	r3, [r3]
 80081dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80081de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e0:	f023 0301 	bic.w	r3, r3, #1
 80081e4:	663b      	str	r3, [r7, #96]	; 0x60
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	3308      	adds	r3, #8
 80081ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80081ee:	64ba      	str	r2, [r7, #72]	; 0x48
 80081f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80081f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80081f6:	e841 2300 	strex	r3, r2, [r1]
 80081fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80081fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d1e5      	bne.n	80081ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2220      	movs	r2, #32
 8008206:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2220      	movs	r2, #32
 800820c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	2200      	movs	r2, #0
 8008214:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8008218:	2303      	movs	r3, #3
 800821a:	e068      	b.n	80082ee <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f003 0304 	and.w	r3, r3, #4
 8008226:	2b00      	cmp	r3, #0
 8008228:	d050      	beq.n	80082cc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	69db      	ldr	r3, [r3, #28]
 8008230:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008234:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008238:	d148      	bne.n	80082cc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008242:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800824a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800824c:	e853 3f00 	ldrex	r3, [r3]
 8008250:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008254:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008258:	66fb      	str	r3, [r7, #108]	; 0x6c
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	461a      	mov	r2, r3
 8008260:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008262:	637b      	str	r3, [r7, #52]	; 0x34
 8008264:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008266:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008268:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800826a:	e841 2300 	strex	r3, r2, [r1]
 800826e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008272:	2b00      	cmp	r3, #0
 8008274:	d1e6      	bne.n	8008244 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	3308      	adds	r3, #8
 800827c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	e853 3f00 	ldrex	r3, [r3]
 8008284:	613b      	str	r3, [r7, #16]
   return(result);
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	f023 0301 	bic.w	r3, r3, #1
 800828c:	66bb      	str	r3, [r7, #104]	; 0x68
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	3308      	adds	r3, #8
 8008294:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008296:	623a      	str	r2, [r7, #32]
 8008298:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800829a:	69f9      	ldr	r1, [r7, #28]
 800829c:	6a3a      	ldr	r2, [r7, #32]
 800829e:	e841 2300 	strex	r3, r2, [r1]
 80082a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80082a4:	69bb      	ldr	r3, [r7, #24]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d1e5      	bne.n	8008276 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	2220      	movs	r2, #32
 80082ae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2220      	movs	r2, #32
 80082b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2220      	movs	r2, #32
 80082bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2200      	movs	r2, #0
 80082c4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80082c8:	2303      	movs	r3, #3
 80082ca:	e010      	b.n	80082ee <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	69da      	ldr	r2, [r3, #28]
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	4013      	ands	r3, r2
 80082d6:	68ba      	ldr	r2, [r7, #8]
 80082d8:	429a      	cmp	r2, r3
 80082da:	bf0c      	ite	eq
 80082dc:	2301      	moveq	r3, #1
 80082de:	2300      	movne	r3, #0
 80082e0:	b2db      	uxtb	r3, r3
 80082e2:	461a      	mov	r2, r3
 80082e4:	79fb      	ldrb	r3, [r7, #7]
 80082e6:	429a      	cmp	r2, r3
 80082e8:	f43f af48 	beq.w	800817c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80082ec:	2300      	movs	r3, #0
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3770      	adds	r7, #112	; 0x70
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}
	...

080082f8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b097      	sub	sp, #92	; 0x5c
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	60f8      	str	r0, [r7, #12]
 8008300:	60b9      	str	r1, [r7, #8]
 8008302:	4613      	mov	r3, r2
 8008304:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	68ba      	ldr	r2, [r7, #8]
 800830a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	88fa      	ldrh	r2, [r7, #6]
 8008310:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	88fa      	ldrh	r2, [r7, #6]
 8008318:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2200      	movs	r2, #0
 8008320:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	689b      	ldr	r3, [r3, #8]
 8008326:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800832a:	d10e      	bne.n	800834a <UART_Start_Receive_IT+0x52>
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	691b      	ldr	r3, [r3, #16]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d105      	bne.n	8008340 <UART_Start_Receive_IT+0x48>
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f240 12ff 	movw	r2, #511	; 0x1ff
 800833a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800833e:	e02d      	b.n	800839c <UART_Start_Receive_IT+0xa4>
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	22ff      	movs	r2, #255	; 0xff
 8008344:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008348:	e028      	b.n	800839c <UART_Start_Receive_IT+0xa4>
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	689b      	ldr	r3, [r3, #8]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d10d      	bne.n	800836e <UART_Start_Receive_IT+0x76>
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	691b      	ldr	r3, [r3, #16]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d104      	bne.n	8008364 <UART_Start_Receive_IT+0x6c>
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	22ff      	movs	r2, #255	; 0xff
 800835e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008362:	e01b      	b.n	800839c <UART_Start_Receive_IT+0xa4>
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	227f      	movs	r2, #127	; 0x7f
 8008368:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800836c:	e016      	b.n	800839c <UART_Start_Receive_IT+0xa4>
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	689b      	ldr	r3, [r3, #8]
 8008372:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008376:	d10d      	bne.n	8008394 <UART_Start_Receive_IT+0x9c>
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	691b      	ldr	r3, [r3, #16]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d104      	bne.n	800838a <UART_Start_Receive_IT+0x92>
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	227f      	movs	r2, #127	; 0x7f
 8008384:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008388:	e008      	b.n	800839c <UART_Start_Receive_IT+0xa4>
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	223f      	movs	r2, #63	; 0x3f
 800838e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008392:	e003      	b.n	800839c <UART_Start_Receive_IT+0xa4>
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2200      	movs	r2, #0
 8008398:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	2200      	movs	r2, #0
 80083a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2222      	movs	r2, #34	; 0x22
 80083a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	3308      	adds	r3, #8
 80083b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083b6:	e853 3f00 	ldrex	r3, [r3]
 80083ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80083bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083be:	f043 0301 	orr.w	r3, r3, #1
 80083c2:	657b      	str	r3, [r7, #84]	; 0x54
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	3308      	adds	r3, #8
 80083ca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80083cc:	64ba      	str	r2, [r7, #72]	; 0x48
 80083ce:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083d0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80083d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083d4:	e841 2300 	strex	r3, r2, [r1]
 80083d8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80083da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d1e5      	bne.n	80083ac <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	689b      	ldr	r3, [r3, #8]
 80083e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083e8:	d107      	bne.n	80083fa <UART_Start_Receive_IT+0x102>
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	691b      	ldr	r3, [r3, #16]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d103      	bne.n	80083fa <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	4a21      	ldr	r2, [pc, #132]	; (800847c <UART_Start_Receive_IT+0x184>)
 80083f6:	669a      	str	r2, [r3, #104]	; 0x68
 80083f8:	e002      	b.n	8008400 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	4a20      	ldr	r2, [pc, #128]	; (8008480 <UART_Start_Receive_IT+0x188>)
 80083fe:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	691b      	ldr	r3, [r3, #16]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d019      	beq.n	800843c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800840e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008410:	e853 3f00 	ldrex	r3, [r3]
 8008414:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008418:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800841c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	461a      	mov	r2, r3
 8008424:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008426:	637b      	str	r3, [r7, #52]	; 0x34
 8008428:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800842a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800842c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800842e:	e841 2300 	strex	r3, r2, [r1]
 8008432:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008436:	2b00      	cmp	r3, #0
 8008438:	d1e6      	bne.n	8008408 <UART_Start_Receive_IT+0x110>
 800843a:	e018      	b.n	800846e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	e853 3f00 	ldrex	r3, [r3]
 8008448:	613b      	str	r3, [r7, #16]
   return(result);
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	f043 0320 	orr.w	r3, r3, #32
 8008450:	653b      	str	r3, [r7, #80]	; 0x50
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	461a      	mov	r2, r3
 8008458:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800845a:	623b      	str	r3, [r7, #32]
 800845c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800845e:	69f9      	ldr	r1, [r7, #28]
 8008460:	6a3a      	ldr	r2, [r7, #32]
 8008462:	e841 2300 	strex	r3, r2, [r1]
 8008466:	61bb      	str	r3, [r7, #24]
   return(result);
 8008468:	69bb      	ldr	r3, [r7, #24]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d1e6      	bne.n	800843c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800846e:	2300      	movs	r3, #0
}
 8008470:	4618      	mov	r0, r3
 8008472:	375c      	adds	r7, #92	; 0x5c
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr
 800847c:	08008733 	.word	0x08008733
 8008480:	080085cd 	.word	0x080085cd

08008484 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008484:	b480      	push	{r7}
 8008486:	b095      	sub	sp, #84	; 0x54
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008494:	e853 3f00 	ldrex	r3, [r3]
 8008498:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800849a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800849c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80084a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	461a      	mov	r2, r3
 80084a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084aa:	643b      	str	r3, [r7, #64]	; 0x40
 80084ac:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80084b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80084b2:	e841 2300 	strex	r3, r2, [r1]
 80084b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80084b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d1e6      	bne.n	800848c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	3308      	adds	r3, #8
 80084c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c6:	6a3b      	ldr	r3, [r7, #32]
 80084c8:	e853 3f00 	ldrex	r3, [r3]
 80084cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80084ce:	69fb      	ldr	r3, [r7, #28]
 80084d0:	f023 0301 	bic.w	r3, r3, #1
 80084d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	3308      	adds	r3, #8
 80084dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80084e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80084e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084e6:	e841 2300 	strex	r3, r2, [r1]
 80084ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80084ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d1e5      	bne.n	80084be <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084f6:	2b01      	cmp	r3, #1
 80084f8:	d118      	bne.n	800852c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	e853 3f00 	ldrex	r3, [r3]
 8008506:	60bb      	str	r3, [r7, #8]
   return(result);
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	f023 0310 	bic.w	r3, r3, #16
 800850e:	647b      	str	r3, [r7, #68]	; 0x44
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	461a      	mov	r2, r3
 8008516:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008518:	61bb      	str	r3, [r7, #24]
 800851a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800851c:	6979      	ldr	r1, [r7, #20]
 800851e:	69ba      	ldr	r2, [r7, #24]
 8008520:	e841 2300 	strex	r3, r2, [r1]
 8008524:	613b      	str	r3, [r7, #16]
   return(result);
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d1e6      	bne.n	80084fa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2220      	movs	r2, #32
 8008530:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2200      	movs	r2, #0
 8008538:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2200      	movs	r2, #0
 800853e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008540:	bf00      	nop
 8008542:	3754      	adds	r7, #84	; 0x54
 8008544:	46bd      	mov	sp, r7
 8008546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854a:	4770      	bx	lr

0800854c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b084      	sub	sp, #16
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008558:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2200      	movs	r2, #0
 800855e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2200      	movs	r2, #0
 8008566:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800856a:	68f8      	ldr	r0, [r7, #12]
 800856c:	f7ff f962 	bl	8007834 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008570:	bf00      	nop
 8008572:	3710      	adds	r7, #16
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}

08008578 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b088      	sub	sp, #32
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	e853 3f00 	ldrex	r3, [r3]
 800858c:	60bb      	str	r3, [r7, #8]
   return(result);
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008594:	61fb      	str	r3, [r7, #28]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	461a      	mov	r2, r3
 800859c:	69fb      	ldr	r3, [r7, #28]
 800859e:	61bb      	str	r3, [r7, #24]
 80085a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085a2:	6979      	ldr	r1, [r7, #20]
 80085a4:	69ba      	ldr	r2, [r7, #24]
 80085a6:	e841 2300 	strex	r3, r2, [r1]
 80085aa:	613b      	str	r3, [r7, #16]
   return(result);
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d1e6      	bne.n	8008580 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2220      	movs	r2, #32
 80085b6:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2200      	movs	r2, #0
 80085bc:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f7ff f92e 	bl	8007820 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085c4:	bf00      	nop
 80085c6:	3720      	adds	r7, #32
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b096      	sub	sp, #88	; 0x58
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80085da:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80085e4:	2b22      	cmp	r3, #34	; 0x22
 80085e6:	f040 8098 	bne.w	800871a <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80085f4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80085f8:	b2d9      	uxtb	r1, r3
 80085fa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80085fe:	b2da      	uxtb	r2, r3
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008604:	400a      	ands	r2, r1
 8008606:	b2d2      	uxtb	r2, r2
 8008608:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800860e:	1c5a      	adds	r2, r3, #1
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800861a:	b29b      	uxth	r3, r3
 800861c:	3b01      	subs	r3, #1
 800861e:	b29a      	uxth	r2, r3
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800862c:	b29b      	uxth	r3, r3
 800862e:	2b00      	cmp	r3, #0
 8008630:	d17b      	bne.n	800872a <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800863a:	e853 3f00 	ldrex	r3, [r3]
 800863e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008642:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008646:	653b      	str	r3, [r7, #80]	; 0x50
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	461a      	mov	r2, r3
 800864e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008650:	647b      	str	r3, [r7, #68]	; 0x44
 8008652:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008654:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008656:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008658:	e841 2300 	strex	r3, r2, [r1]
 800865c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800865e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008660:	2b00      	cmp	r3, #0
 8008662:	d1e6      	bne.n	8008632 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	3308      	adds	r3, #8
 800866a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800866c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866e:	e853 3f00 	ldrex	r3, [r3]
 8008672:	623b      	str	r3, [r7, #32]
   return(result);
 8008674:	6a3b      	ldr	r3, [r7, #32]
 8008676:	f023 0301 	bic.w	r3, r3, #1
 800867a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	3308      	adds	r3, #8
 8008682:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008684:	633a      	str	r2, [r7, #48]	; 0x30
 8008686:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008688:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800868a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800868c:	e841 2300 	strex	r3, r2, [r1]
 8008690:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008694:	2b00      	cmp	r3, #0
 8008696:	d1e5      	bne.n	8008664 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2220      	movs	r2, #32
 800869c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2200      	movs	r2, #0
 80086a4:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2200      	movs	r2, #0
 80086aa:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	d12e      	bne.n	8008712 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2200      	movs	r2, #0
 80086b8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	e853 3f00 	ldrex	r3, [r3]
 80086c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f023 0310 	bic.w	r3, r3, #16
 80086ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	461a      	mov	r2, r3
 80086d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086d8:	61fb      	str	r3, [r7, #28]
 80086da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086dc:	69b9      	ldr	r1, [r7, #24]
 80086de:	69fa      	ldr	r2, [r7, #28]
 80086e0:	e841 2300 	strex	r3, r2, [r1]
 80086e4:	617b      	str	r3, [r7, #20]
   return(result);
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d1e6      	bne.n	80086ba <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	69db      	ldr	r3, [r3, #28]
 80086f2:	f003 0310 	and.w	r3, r3, #16
 80086f6:	2b10      	cmp	r3, #16
 80086f8:	d103      	bne.n	8008702 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	2210      	movs	r2, #16
 8008700:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008708:	4619      	mov	r1, r3
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f7ff f89c 	bl	8007848 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008710:	e00b      	b.n	800872a <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f7f8 ff7a 	bl	800160c <HAL_UART_RxCpltCallback>
}
 8008718:	e007      	b.n	800872a <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	699a      	ldr	r2, [r3, #24]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f042 0208 	orr.w	r2, r2, #8
 8008728:	619a      	str	r2, [r3, #24]
}
 800872a:	bf00      	nop
 800872c:	3758      	adds	r7, #88	; 0x58
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}

08008732 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008732:	b580      	push	{r7, lr}
 8008734:	b096      	sub	sp, #88	; 0x58
 8008736:	af00      	add	r7, sp, #0
 8008738:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008740:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800874a:	2b22      	cmp	r3, #34	; 0x22
 800874c:	f040 8098 	bne.w	8008880 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008756:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800875e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008760:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008764:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008768:	4013      	ands	r3, r2
 800876a:	b29a      	uxth	r2, r3
 800876c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800876e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008774:	1c9a      	adds	r2, r3, #2
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008780:	b29b      	uxth	r3, r3
 8008782:	3b01      	subs	r3, #1
 8008784:	b29a      	uxth	r2, r3
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008792:	b29b      	uxth	r3, r3
 8008794:	2b00      	cmp	r3, #0
 8008796:	d17b      	bne.n	8008890 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800879e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087a0:	e853 3f00 	ldrex	r3, [r3]
 80087a4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80087a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80087ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	461a      	mov	r2, r3
 80087b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087b6:	643b      	str	r3, [r7, #64]	; 0x40
 80087b8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80087bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80087be:	e841 2300 	strex	r3, r2, [r1]
 80087c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80087c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d1e6      	bne.n	8008798 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	3308      	adds	r3, #8
 80087d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d2:	6a3b      	ldr	r3, [r7, #32]
 80087d4:	e853 3f00 	ldrex	r3, [r3]
 80087d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80087da:	69fb      	ldr	r3, [r7, #28]
 80087dc:	f023 0301 	bic.w	r3, r3, #1
 80087e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	3308      	adds	r3, #8
 80087e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80087ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80087f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087f2:	e841 2300 	strex	r3, r2, [r1]
 80087f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80087f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d1e5      	bne.n	80087ca <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2220      	movs	r2, #32
 8008802:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2200      	movs	r2, #0
 800880a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2200      	movs	r2, #0
 8008810:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008816:	2b01      	cmp	r3, #1
 8008818:	d12e      	bne.n	8008878 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2200      	movs	r2, #0
 800881e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	e853 3f00 	ldrex	r3, [r3]
 800882c:	60bb      	str	r3, [r7, #8]
   return(result);
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	f023 0310 	bic.w	r3, r3, #16
 8008834:	647b      	str	r3, [r7, #68]	; 0x44
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	461a      	mov	r2, r3
 800883c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800883e:	61bb      	str	r3, [r7, #24]
 8008840:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008842:	6979      	ldr	r1, [r7, #20]
 8008844:	69ba      	ldr	r2, [r7, #24]
 8008846:	e841 2300 	strex	r3, r2, [r1]
 800884a:	613b      	str	r3, [r7, #16]
   return(result);
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d1e6      	bne.n	8008820 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	69db      	ldr	r3, [r3, #28]
 8008858:	f003 0310 	and.w	r3, r3, #16
 800885c:	2b10      	cmp	r3, #16
 800885e:	d103      	bne.n	8008868 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	2210      	movs	r2, #16
 8008866:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800886e:	4619      	mov	r1, r3
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f7fe ffe9 	bl	8007848 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008876:	e00b      	b.n	8008890 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f7f8 fec7 	bl	800160c <HAL_UART_RxCpltCallback>
}
 800887e:	e007      	b.n	8008890 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	699a      	ldr	r2, [r3, #24]
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f042 0208 	orr.w	r2, r2, #8
 800888e:	619a      	str	r2, [r3, #24]
}
 8008890:	bf00      	nop
 8008892:	3758      	adds	r7, #88	; 0x58
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}

08008898 <__errno>:
 8008898:	4b01      	ldr	r3, [pc, #4]	; (80088a0 <__errno+0x8>)
 800889a:	6818      	ldr	r0, [r3, #0]
 800889c:	4770      	bx	lr
 800889e:	bf00      	nop
 80088a0:	2000000c 	.word	0x2000000c

080088a4 <__libc_init_array>:
 80088a4:	b570      	push	{r4, r5, r6, lr}
 80088a6:	4d0d      	ldr	r5, [pc, #52]	; (80088dc <__libc_init_array+0x38>)
 80088a8:	4c0d      	ldr	r4, [pc, #52]	; (80088e0 <__libc_init_array+0x3c>)
 80088aa:	1b64      	subs	r4, r4, r5
 80088ac:	10a4      	asrs	r4, r4, #2
 80088ae:	2600      	movs	r6, #0
 80088b0:	42a6      	cmp	r6, r4
 80088b2:	d109      	bne.n	80088c8 <__libc_init_array+0x24>
 80088b4:	4d0b      	ldr	r5, [pc, #44]	; (80088e4 <__libc_init_array+0x40>)
 80088b6:	4c0c      	ldr	r4, [pc, #48]	; (80088e8 <__libc_init_array+0x44>)
 80088b8:	f005 f8c8 	bl	800da4c <_init>
 80088bc:	1b64      	subs	r4, r4, r5
 80088be:	10a4      	asrs	r4, r4, #2
 80088c0:	2600      	movs	r6, #0
 80088c2:	42a6      	cmp	r6, r4
 80088c4:	d105      	bne.n	80088d2 <__libc_init_array+0x2e>
 80088c6:	bd70      	pop	{r4, r5, r6, pc}
 80088c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80088cc:	4798      	blx	r3
 80088ce:	3601      	adds	r6, #1
 80088d0:	e7ee      	b.n	80088b0 <__libc_init_array+0xc>
 80088d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80088d6:	4798      	blx	r3
 80088d8:	3601      	adds	r6, #1
 80088da:	e7f2      	b.n	80088c2 <__libc_init_array+0x1e>
 80088dc:	0800e194 	.word	0x0800e194
 80088e0:	0800e194 	.word	0x0800e194
 80088e4:	0800e194 	.word	0x0800e194
 80088e8:	0800e198 	.word	0x0800e198

080088ec <memcpy>:
 80088ec:	440a      	add	r2, r1
 80088ee:	4291      	cmp	r1, r2
 80088f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80088f4:	d100      	bne.n	80088f8 <memcpy+0xc>
 80088f6:	4770      	bx	lr
 80088f8:	b510      	push	{r4, lr}
 80088fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008902:	4291      	cmp	r1, r2
 8008904:	d1f9      	bne.n	80088fa <memcpy+0xe>
 8008906:	bd10      	pop	{r4, pc}

08008908 <memset>:
 8008908:	4402      	add	r2, r0
 800890a:	4603      	mov	r3, r0
 800890c:	4293      	cmp	r3, r2
 800890e:	d100      	bne.n	8008912 <memset+0xa>
 8008910:	4770      	bx	lr
 8008912:	f803 1b01 	strb.w	r1, [r3], #1
 8008916:	e7f9      	b.n	800890c <memset+0x4>

08008918 <__cvt>:
 8008918:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800891c:	ec55 4b10 	vmov	r4, r5, d0
 8008920:	2d00      	cmp	r5, #0
 8008922:	460e      	mov	r6, r1
 8008924:	4619      	mov	r1, r3
 8008926:	462b      	mov	r3, r5
 8008928:	bfbb      	ittet	lt
 800892a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800892e:	461d      	movlt	r5, r3
 8008930:	2300      	movge	r3, #0
 8008932:	232d      	movlt	r3, #45	; 0x2d
 8008934:	700b      	strb	r3, [r1, #0]
 8008936:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008938:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800893c:	4691      	mov	r9, r2
 800893e:	f023 0820 	bic.w	r8, r3, #32
 8008942:	bfbc      	itt	lt
 8008944:	4622      	movlt	r2, r4
 8008946:	4614      	movlt	r4, r2
 8008948:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800894c:	d005      	beq.n	800895a <__cvt+0x42>
 800894e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008952:	d100      	bne.n	8008956 <__cvt+0x3e>
 8008954:	3601      	adds	r6, #1
 8008956:	2102      	movs	r1, #2
 8008958:	e000      	b.n	800895c <__cvt+0x44>
 800895a:	2103      	movs	r1, #3
 800895c:	ab03      	add	r3, sp, #12
 800895e:	9301      	str	r3, [sp, #4]
 8008960:	ab02      	add	r3, sp, #8
 8008962:	9300      	str	r3, [sp, #0]
 8008964:	ec45 4b10 	vmov	d0, r4, r5
 8008968:	4653      	mov	r3, sl
 800896a:	4632      	mov	r2, r6
 800896c:	f001 fe44 	bl	800a5f8 <_dtoa_r>
 8008970:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008974:	4607      	mov	r7, r0
 8008976:	d102      	bne.n	800897e <__cvt+0x66>
 8008978:	f019 0f01 	tst.w	r9, #1
 800897c:	d022      	beq.n	80089c4 <__cvt+0xac>
 800897e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008982:	eb07 0906 	add.w	r9, r7, r6
 8008986:	d110      	bne.n	80089aa <__cvt+0x92>
 8008988:	783b      	ldrb	r3, [r7, #0]
 800898a:	2b30      	cmp	r3, #48	; 0x30
 800898c:	d10a      	bne.n	80089a4 <__cvt+0x8c>
 800898e:	2200      	movs	r2, #0
 8008990:	2300      	movs	r3, #0
 8008992:	4620      	mov	r0, r4
 8008994:	4629      	mov	r1, r5
 8008996:	f7f8 f8c7 	bl	8000b28 <__aeabi_dcmpeq>
 800899a:	b918      	cbnz	r0, 80089a4 <__cvt+0x8c>
 800899c:	f1c6 0601 	rsb	r6, r6, #1
 80089a0:	f8ca 6000 	str.w	r6, [sl]
 80089a4:	f8da 3000 	ldr.w	r3, [sl]
 80089a8:	4499      	add	r9, r3
 80089aa:	2200      	movs	r2, #0
 80089ac:	2300      	movs	r3, #0
 80089ae:	4620      	mov	r0, r4
 80089b0:	4629      	mov	r1, r5
 80089b2:	f7f8 f8b9 	bl	8000b28 <__aeabi_dcmpeq>
 80089b6:	b108      	cbz	r0, 80089bc <__cvt+0xa4>
 80089b8:	f8cd 900c 	str.w	r9, [sp, #12]
 80089bc:	2230      	movs	r2, #48	; 0x30
 80089be:	9b03      	ldr	r3, [sp, #12]
 80089c0:	454b      	cmp	r3, r9
 80089c2:	d307      	bcc.n	80089d4 <__cvt+0xbc>
 80089c4:	9b03      	ldr	r3, [sp, #12]
 80089c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80089c8:	1bdb      	subs	r3, r3, r7
 80089ca:	4638      	mov	r0, r7
 80089cc:	6013      	str	r3, [r2, #0]
 80089ce:	b004      	add	sp, #16
 80089d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089d4:	1c59      	adds	r1, r3, #1
 80089d6:	9103      	str	r1, [sp, #12]
 80089d8:	701a      	strb	r2, [r3, #0]
 80089da:	e7f0      	b.n	80089be <__cvt+0xa6>

080089dc <__exponent>:
 80089dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80089de:	4603      	mov	r3, r0
 80089e0:	2900      	cmp	r1, #0
 80089e2:	bfb8      	it	lt
 80089e4:	4249      	neglt	r1, r1
 80089e6:	f803 2b02 	strb.w	r2, [r3], #2
 80089ea:	bfb4      	ite	lt
 80089ec:	222d      	movlt	r2, #45	; 0x2d
 80089ee:	222b      	movge	r2, #43	; 0x2b
 80089f0:	2909      	cmp	r1, #9
 80089f2:	7042      	strb	r2, [r0, #1]
 80089f4:	dd2a      	ble.n	8008a4c <__exponent+0x70>
 80089f6:	f10d 0407 	add.w	r4, sp, #7
 80089fa:	46a4      	mov	ip, r4
 80089fc:	270a      	movs	r7, #10
 80089fe:	46a6      	mov	lr, r4
 8008a00:	460a      	mov	r2, r1
 8008a02:	fb91 f6f7 	sdiv	r6, r1, r7
 8008a06:	fb07 1516 	mls	r5, r7, r6, r1
 8008a0a:	3530      	adds	r5, #48	; 0x30
 8008a0c:	2a63      	cmp	r2, #99	; 0x63
 8008a0e:	f104 34ff 	add.w	r4, r4, #4294967295
 8008a12:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008a16:	4631      	mov	r1, r6
 8008a18:	dcf1      	bgt.n	80089fe <__exponent+0x22>
 8008a1a:	3130      	adds	r1, #48	; 0x30
 8008a1c:	f1ae 0502 	sub.w	r5, lr, #2
 8008a20:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008a24:	1c44      	adds	r4, r0, #1
 8008a26:	4629      	mov	r1, r5
 8008a28:	4561      	cmp	r1, ip
 8008a2a:	d30a      	bcc.n	8008a42 <__exponent+0x66>
 8008a2c:	f10d 0209 	add.w	r2, sp, #9
 8008a30:	eba2 020e 	sub.w	r2, r2, lr
 8008a34:	4565      	cmp	r5, ip
 8008a36:	bf88      	it	hi
 8008a38:	2200      	movhi	r2, #0
 8008a3a:	4413      	add	r3, r2
 8008a3c:	1a18      	subs	r0, r3, r0
 8008a3e:	b003      	add	sp, #12
 8008a40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a46:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008a4a:	e7ed      	b.n	8008a28 <__exponent+0x4c>
 8008a4c:	2330      	movs	r3, #48	; 0x30
 8008a4e:	3130      	adds	r1, #48	; 0x30
 8008a50:	7083      	strb	r3, [r0, #2]
 8008a52:	70c1      	strb	r1, [r0, #3]
 8008a54:	1d03      	adds	r3, r0, #4
 8008a56:	e7f1      	b.n	8008a3c <__exponent+0x60>

08008a58 <_printf_float>:
 8008a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a5c:	ed2d 8b02 	vpush	{d8}
 8008a60:	b08d      	sub	sp, #52	; 0x34
 8008a62:	460c      	mov	r4, r1
 8008a64:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008a68:	4616      	mov	r6, r2
 8008a6a:	461f      	mov	r7, r3
 8008a6c:	4605      	mov	r5, r0
 8008a6e:	f002 ff21 	bl	800b8b4 <_localeconv_r>
 8008a72:	f8d0 a000 	ldr.w	sl, [r0]
 8008a76:	4650      	mov	r0, sl
 8008a78:	f7f7 fbd4 	bl	8000224 <strlen>
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	930a      	str	r3, [sp, #40]	; 0x28
 8008a80:	6823      	ldr	r3, [r4, #0]
 8008a82:	9305      	str	r3, [sp, #20]
 8008a84:	f8d8 3000 	ldr.w	r3, [r8]
 8008a88:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008a8c:	3307      	adds	r3, #7
 8008a8e:	f023 0307 	bic.w	r3, r3, #7
 8008a92:	f103 0208 	add.w	r2, r3, #8
 8008a96:	f8c8 2000 	str.w	r2, [r8]
 8008a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a9e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008aa2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008aa6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008aaa:	9307      	str	r3, [sp, #28]
 8008aac:	f8cd 8018 	str.w	r8, [sp, #24]
 8008ab0:	ee08 0a10 	vmov	s16, r0
 8008ab4:	4b9f      	ldr	r3, [pc, #636]	; (8008d34 <_printf_float+0x2dc>)
 8008ab6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008aba:	f04f 32ff 	mov.w	r2, #4294967295
 8008abe:	f7f8 f865 	bl	8000b8c <__aeabi_dcmpun>
 8008ac2:	bb88      	cbnz	r0, 8008b28 <_printf_float+0xd0>
 8008ac4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008ac8:	4b9a      	ldr	r3, [pc, #616]	; (8008d34 <_printf_float+0x2dc>)
 8008aca:	f04f 32ff 	mov.w	r2, #4294967295
 8008ace:	f7f8 f83f 	bl	8000b50 <__aeabi_dcmple>
 8008ad2:	bb48      	cbnz	r0, 8008b28 <_printf_float+0xd0>
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	4640      	mov	r0, r8
 8008ada:	4649      	mov	r1, r9
 8008adc:	f7f8 f82e 	bl	8000b3c <__aeabi_dcmplt>
 8008ae0:	b110      	cbz	r0, 8008ae8 <_printf_float+0x90>
 8008ae2:	232d      	movs	r3, #45	; 0x2d
 8008ae4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ae8:	4b93      	ldr	r3, [pc, #588]	; (8008d38 <_printf_float+0x2e0>)
 8008aea:	4894      	ldr	r0, [pc, #592]	; (8008d3c <_printf_float+0x2e4>)
 8008aec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008af0:	bf94      	ite	ls
 8008af2:	4698      	movls	r8, r3
 8008af4:	4680      	movhi	r8, r0
 8008af6:	2303      	movs	r3, #3
 8008af8:	6123      	str	r3, [r4, #16]
 8008afa:	9b05      	ldr	r3, [sp, #20]
 8008afc:	f023 0204 	bic.w	r2, r3, #4
 8008b00:	6022      	str	r2, [r4, #0]
 8008b02:	f04f 0900 	mov.w	r9, #0
 8008b06:	9700      	str	r7, [sp, #0]
 8008b08:	4633      	mov	r3, r6
 8008b0a:	aa0b      	add	r2, sp, #44	; 0x2c
 8008b0c:	4621      	mov	r1, r4
 8008b0e:	4628      	mov	r0, r5
 8008b10:	f000 f9d8 	bl	8008ec4 <_printf_common>
 8008b14:	3001      	adds	r0, #1
 8008b16:	f040 8090 	bne.w	8008c3a <_printf_float+0x1e2>
 8008b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8008b1e:	b00d      	add	sp, #52	; 0x34
 8008b20:	ecbd 8b02 	vpop	{d8}
 8008b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b28:	4642      	mov	r2, r8
 8008b2a:	464b      	mov	r3, r9
 8008b2c:	4640      	mov	r0, r8
 8008b2e:	4649      	mov	r1, r9
 8008b30:	f7f8 f82c 	bl	8000b8c <__aeabi_dcmpun>
 8008b34:	b140      	cbz	r0, 8008b48 <_printf_float+0xf0>
 8008b36:	464b      	mov	r3, r9
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	bfbc      	itt	lt
 8008b3c:	232d      	movlt	r3, #45	; 0x2d
 8008b3e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008b42:	487f      	ldr	r0, [pc, #508]	; (8008d40 <_printf_float+0x2e8>)
 8008b44:	4b7f      	ldr	r3, [pc, #508]	; (8008d44 <_printf_float+0x2ec>)
 8008b46:	e7d1      	b.n	8008aec <_printf_float+0x94>
 8008b48:	6863      	ldr	r3, [r4, #4]
 8008b4a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008b4e:	9206      	str	r2, [sp, #24]
 8008b50:	1c5a      	adds	r2, r3, #1
 8008b52:	d13f      	bne.n	8008bd4 <_printf_float+0x17c>
 8008b54:	2306      	movs	r3, #6
 8008b56:	6063      	str	r3, [r4, #4]
 8008b58:	9b05      	ldr	r3, [sp, #20]
 8008b5a:	6861      	ldr	r1, [r4, #4]
 8008b5c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008b60:	2300      	movs	r3, #0
 8008b62:	9303      	str	r3, [sp, #12]
 8008b64:	ab0a      	add	r3, sp, #40	; 0x28
 8008b66:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008b6a:	ab09      	add	r3, sp, #36	; 0x24
 8008b6c:	ec49 8b10 	vmov	d0, r8, r9
 8008b70:	9300      	str	r3, [sp, #0]
 8008b72:	6022      	str	r2, [r4, #0]
 8008b74:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008b78:	4628      	mov	r0, r5
 8008b7a:	f7ff fecd 	bl	8008918 <__cvt>
 8008b7e:	9b06      	ldr	r3, [sp, #24]
 8008b80:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008b82:	2b47      	cmp	r3, #71	; 0x47
 8008b84:	4680      	mov	r8, r0
 8008b86:	d108      	bne.n	8008b9a <_printf_float+0x142>
 8008b88:	1cc8      	adds	r0, r1, #3
 8008b8a:	db02      	blt.n	8008b92 <_printf_float+0x13a>
 8008b8c:	6863      	ldr	r3, [r4, #4]
 8008b8e:	4299      	cmp	r1, r3
 8008b90:	dd41      	ble.n	8008c16 <_printf_float+0x1be>
 8008b92:	f1ab 0b02 	sub.w	fp, fp, #2
 8008b96:	fa5f fb8b 	uxtb.w	fp, fp
 8008b9a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008b9e:	d820      	bhi.n	8008be2 <_printf_float+0x18a>
 8008ba0:	3901      	subs	r1, #1
 8008ba2:	465a      	mov	r2, fp
 8008ba4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008ba8:	9109      	str	r1, [sp, #36]	; 0x24
 8008baa:	f7ff ff17 	bl	80089dc <__exponent>
 8008bae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008bb0:	1813      	adds	r3, r2, r0
 8008bb2:	2a01      	cmp	r2, #1
 8008bb4:	4681      	mov	r9, r0
 8008bb6:	6123      	str	r3, [r4, #16]
 8008bb8:	dc02      	bgt.n	8008bc0 <_printf_float+0x168>
 8008bba:	6822      	ldr	r2, [r4, #0]
 8008bbc:	07d2      	lsls	r2, r2, #31
 8008bbe:	d501      	bpl.n	8008bc4 <_printf_float+0x16c>
 8008bc0:	3301      	adds	r3, #1
 8008bc2:	6123      	str	r3, [r4, #16]
 8008bc4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d09c      	beq.n	8008b06 <_printf_float+0xae>
 8008bcc:	232d      	movs	r3, #45	; 0x2d
 8008bce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008bd2:	e798      	b.n	8008b06 <_printf_float+0xae>
 8008bd4:	9a06      	ldr	r2, [sp, #24]
 8008bd6:	2a47      	cmp	r2, #71	; 0x47
 8008bd8:	d1be      	bne.n	8008b58 <_printf_float+0x100>
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d1bc      	bne.n	8008b58 <_printf_float+0x100>
 8008bde:	2301      	movs	r3, #1
 8008be0:	e7b9      	b.n	8008b56 <_printf_float+0xfe>
 8008be2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008be6:	d118      	bne.n	8008c1a <_printf_float+0x1c2>
 8008be8:	2900      	cmp	r1, #0
 8008bea:	6863      	ldr	r3, [r4, #4]
 8008bec:	dd0b      	ble.n	8008c06 <_printf_float+0x1ae>
 8008bee:	6121      	str	r1, [r4, #16]
 8008bf0:	b913      	cbnz	r3, 8008bf8 <_printf_float+0x1a0>
 8008bf2:	6822      	ldr	r2, [r4, #0]
 8008bf4:	07d0      	lsls	r0, r2, #31
 8008bf6:	d502      	bpl.n	8008bfe <_printf_float+0x1a6>
 8008bf8:	3301      	adds	r3, #1
 8008bfa:	440b      	add	r3, r1
 8008bfc:	6123      	str	r3, [r4, #16]
 8008bfe:	65a1      	str	r1, [r4, #88]	; 0x58
 8008c00:	f04f 0900 	mov.w	r9, #0
 8008c04:	e7de      	b.n	8008bc4 <_printf_float+0x16c>
 8008c06:	b913      	cbnz	r3, 8008c0e <_printf_float+0x1b6>
 8008c08:	6822      	ldr	r2, [r4, #0]
 8008c0a:	07d2      	lsls	r2, r2, #31
 8008c0c:	d501      	bpl.n	8008c12 <_printf_float+0x1ba>
 8008c0e:	3302      	adds	r3, #2
 8008c10:	e7f4      	b.n	8008bfc <_printf_float+0x1a4>
 8008c12:	2301      	movs	r3, #1
 8008c14:	e7f2      	b.n	8008bfc <_printf_float+0x1a4>
 8008c16:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008c1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c1c:	4299      	cmp	r1, r3
 8008c1e:	db05      	blt.n	8008c2c <_printf_float+0x1d4>
 8008c20:	6823      	ldr	r3, [r4, #0]
 8008c22:	6121      	str	r1, [r4, #16]
 8008c24:	07d8      	lsls	r0, r3, #31
 8008c26:	d5ea      	bpl.n	8008bfe <_printf_float+0x1a6>
 8008c28:	1c4b      	adds	r3, r1, #1
 8008c2a:	e7e7      	b.n	8008bfc <_printf_float+0x1a4>
 8008c2c:	2900      	cmp	r1, #0
 8008c2e:	bfd4      	ite	le
 8008c30:	f1c1 0202 	rsble	r2, r1, #2
 8008c34:	2201      	movgt	r2, #1
 8008c36:	4413      	add	r3, r2
 8008c38:	e7e0      	b.n	8008bfc <_printf_float+0x1a4>
 8008c3a:	6823      	ldr	r3, [r4, #0]
 8008c3c:	055a      	lsls	r2, r3, #21
 8008c3e:	d407      	bmi.n	8008c50 <_printf_float+0x1f8>
 8008c40:	6923      	ldr	r3, [r4, #16]
 8008c42:	4642      	mov	r2, r8
 8008c44:	4631      	mov	r1, r6
 8008c46:	4628      	mov	r0, r5
 8008c48:	47b8      	blx	r7
 8008c4a:	3001      	adds	r0, #1
 8008c4c:	d12c      	bne.n	8008ca8 <_printf_float+0x250>
 8008c4e:	e764      	b.n	8008b1a <_printf_float+0xc2>
 8008c50:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008c54:	f240 80e0 	bls.w	8008e18 <_printf_float+0x3c0>
 8008c58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	2300      	movs	r3, #0
 8008c60:	f7f7 ff62 	bl	8000b28 <__aeabi_dcmpeq>
 8008c64:	2800      	cmp	r0, #0
 8008c66:	d034      	beq.n	8008cd2 <_printf_float+0x27a>
 8008c68:	4a37      	ldr	r2, [pc, #220]	; (8008d48 <_printf_float+0x2f0>)
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	4631      	mov	r1, r6
 8008c6e:	4628      	mov	r0, r5
 8008c70:	47b8      	blx	r7
 8008c72:	3001      	adds	r0, #1
 8008c74:	f43f af51 	beq.w	8008b1a <_printf_float+0xc2>
 8008c78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008c7c:	429a      	cmp	r2, r3
 8008c7e:	db02      	blt.n	8008c86 <_printf_float+0x22e>
 8008c80:	6823      	ldr	r3, [r4, #0]
 8008c82:	07d8      	lsls	r0, r3, #31
 8008c84:	d510      	bpl.n	8008ca8 <_printf_float+0x250>
 8008c86:	ee18 3a10 	vmov	r3, s16
 8008c8a:	4652      	mov	r2, sl
 8008c8c:	4631      	mov	r1, r6
 8008c8e:	4628      	mov	r0, r5
 8008c90:	47b8      	blx	r7
 8008c92:	3001      	adds	r0, #1
 8008c94:	f43f af41 	beq.w	8008b1a <_printf_float+0xc2>
 8008c98:	f04f 0800 	mov.w	r8, #0
 8008c9c:	f104 091a 	add.w	r9, r4, #26
 8008ca0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ca2:	3b01      	subs	r3, #1
 8008ca4:	4543      	cmp	r3, r8
 8008ca6:	dc09      	bgt.n	8008cbc <_printf_float+0x264>
 8008ca8:	6823      	ldr	r3, [r4, #0]
 8008caa:	079b      	lsls	r3, r3, #30
 8008cac:	f100 8105 	bmi.w	8008eba <_printf_float+0x462>
 8008cb0:	68e0      	ldr	r0, [r4, #12]
 8008cb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008cb4:	4298      	cmp	r0, r3
 8008cb6:	bfb8      	it	lt
 8008cb8:	4618      	movlt	r0, r3
 8008cba:	e730      	b.n	8008b1e <_printf_float+0xc6>
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	464a      	mov	r2, r9
 8008cc0:	4631      	mov	r1, r6
 8008cc2:	4628      	mov	r0, r5
 8008cc4:	47b8      	blx	r7
 8008cc6:	3001      	adds	r0, #1
 8008cc8:	f43f af27 	beq.w	8008b1a <_printf_float+0xc2>
 8008ccc:	f108 0801 	add.w	r8, r8, #1
 8008cd0:	e7e6      	b.n	8008ca0 <_printf_float+0x248>
 8008cd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	dc39      	bgt.n	8008d4c <_printf_float+0x2f4>
 8008cd8:	4a1b      	ldr	r2, [pc, #108]	; (8008d48 <_printf_float+0x2f0>)
 8008cda:	2301      	movs	r3, #1
 8008cdc:	4631      	mov	r1, r6
 8008cde:	4628      	mov	r0, r5
 8008ce0:	47b8      	blx	r7
 8008ce2:	3001      	adds	r0, #1
 8008ce4:	f43f af19 	beq.w	8008b1a <_printf_float+0xc2>
 8008ce8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008cec:	4313      	orrs	r3, r2
 8008cee:	d102      	bne.n	8008cf6 <_printf_float+0x29e>
 8008cf0:	6823      	ldr	r3, [r4, #0]
 8008cf2:	07d9      	lsls	r1, r3, #31
 8008cf4:	d5d8      	bpl.n	8008ca8 <_printf_float+0x250>
 8008cf6:	ee18 3a10 	vmov	r3, s16
 8008cfa:	4652      	mov	r2, sl
 8008cfc:	4631      	mov	r1, r6
 8008cfe:	4628      	mov	r0, r5
 8008d00:	47b8      	blx	r7
 8008d02:	3001      	adds	r0, #1
 8008d04:	f43f af09 	beq.w	8008b1a <_printf_float+0xc2>
 8008d08:	f04f 0900 	mov.w	r9, #0
 8008d0c:	f104 0a1a 	add.w	sl, r4, #26
 8008d10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d12:	425b      	negs	r3, r3
 8008d14:	454b      	cmp	r3, r9
 8008d16:	dc01      	bgt.n	8008d1c <_printf_float+0x2c4>
 8008d18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d1a:	e792      	b.n	8008c42 <_printf_float+0x1ea>
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	4652      	mov	r2, sl
 8008d20:	4631      	mov	r1, r6
 8008d22:	4628      	mov	r0, r5
 8008d24:	47b8      	blx	r7
 8008d26:	3001      	adds	r0, #1
 8008d28:	f43f aef7 	beq.w	8008b1a <_printf_float+0xc2>
 8008d2c:	f109 0901 	add.w	r9, r9, #1
 8008d30:	e7ee      	b.n	8008d10 <_printf_float+0x2b8>
 8008d32:	bf00      	nop
 8008d34:	7fefffff 	.word	0x7fefffff
 8008d38:	0800dcd4 	.word	0x0800dcd4
 8008d3c:	0800dcd8 	.word	0x0800dcd8
 8008d40:	0800dce0 	.word	0x0800dce0
 8008d44:	0800dcdc 	.word	0x0800dcdc
 8008d48:	0800e0d9 	.word	0x0800e0d9
 8008d4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008d50:	429a      	cmp	r2, r3
 8008d52:	bfa8      	it	ge
 8008d54:	461a      	movge	r2, r3
 8008d56:	2a00      	cmp	r2, #0
 8008d58:	4691      	mov	r9, r2
 8008d5a:	dc37      	bgt.n	8008dcc <_printf_float+0x374>
 8008d5c:	f04f 0b00 	mov.w	fp, #0
 8008d60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008d64:	f104 021a 	add.w	r2, r4, #26
 8008d68:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008d6a:	9305      	str	r3, [sp, #20]
 8008d6c:	eba3 0309 	sub.w	r3, r3, r9
 8008d70:	455b      	cmp	r3, fp
 8008d72:	dc33      	bgt.n	8008ddc <_printf_float+0x384>
 8008d74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	db3b      	blt.n	8008df4 <_printf_float+0x39c>
 8008d7c:	6823      	ldr	r3, [r4, #0]
 8008d7e:	07da      	lsls	r2, r3, #31
 8008d80:	d438      	bmi.n	8008df4 <_printf_float+0x39c>
 8008d82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d84:	9a05      	ldr	r2, [sp, #20]
 8008d86:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d88:	1a9a      	subs	r2, r3, r2
 8008d8a:	eba3 0901 	sub.w	r9, r3, r1
 8008d8e:	4591      	cmp	r9, r2
 8008d90:	bfa8      	it	ge
 8008d92:	4691      	movge	r9, r2
 8008d94:	f1b9 0f00 	cmp.w	r9, #0
 8008d98:	dc35      	bgt.n	8008e06 <_printf_float+0x3ae>
 8008d9a:	f04f 0800 	mov.w	r8, #0
 8008d9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008da2:	f104 0a1a 	add.w	sl, r4, #26
 8008da6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008daa:	1a9b      	subs	r3, r3, r2
 8008dac:	eba3 0309 	sub.w	r3, r3, r9
 8008db0:	4543      	cmp	r3, r8
 8008db2:	f77f af79 	ble.w	8008ca8 <_printf_float+0x250>
 8008db6:	2301      	movs	r3, #1
 8008db8:	4652      	mov	r2, sl
 8008dba:	4631      	mov	r1, r6
 8008dbc:	4628      	mov	r0, r5
 8008dbe:	47b8      	blx	r7
 8008dc0:	3001      	adds	r0, #1
 8008dc2:	f43f aeaa 	beq.w	8008b1a <_printf_float+0xc2>
 8008dc6:	f108 0801 	add.w	r8, r8, #1
 8008dca:	e7ec      	b.n	8008da6 <_printf_float+0x34e>
 8008dcc:	4613      	mov	r3, r2
 8008dce:	4631      	mov	r1, r6
 8008dd0:	4642      	mov	r2, r8
 8008dd2:	4628      	mov	r0, r5
 8008dd4:	47b8      	blx	r7
 8008dd6:	3001      	adds	r0, #1
 8008dd8:	d1c0      	bne.n	8008d5c <_printf_float+0x304>
 8008dda:	e69e      	b.n	8008b1a <_printf_float+0xc2>
 8008ddc:	2301      	movs	r3, #1
 8008dde:	4631      	mov	r1, r6
 8008de0:	4628      	mov	r0, r5
 8008de2:	9205      	str	r2, [sp, #20]
 8008de4:	47b8      	blx	r7
 8008de6:	3001      	adds	r0, #1
 8008de8:	f43f ae97 	beq.w	8008b1a <_printf_float+0xc2>
 8008dec:	9a05      	ldr	r2, [sp, #20]
 8008dee:	f10b 0b01 	add.w	fp, fp, #1
 8008df2:	e7b9      	b.n	8008d68 <_printf_float+0x310>
 8008df4:	ee18 3a10 	vmov	r3, s16
 8008df8:	4652      	mov	r2, sl
 8008dfa:	4631      	mov	r1, r6
 8008dfc:	4628      	mov	r0, r5
 8008dfe:	47b8      	blx	r7
 8008e00:	3001      	adds	r0, #1
 8008e02:	d1be      	bne.n	8008d82 <_printf_float+0x32a>
 8008e04:	e689      	b.n	8008b1a <_printf_float+0xc2>
 8008e06:	9a05      	ldr	r2, [sp, #20]
 8008e08:	464b      	mov	r3, r9
 8008e0a:	4442      	add	r2, r8
 8008e0c:	4631      	mov	r1, r6
 8008e0e:	4628      	mov	r0, r5
 8008e10:	47b8      	blx	r7
 8008e12:	3001      	adds	r0, #1
 8008e14:	d1c1      	bne.n	8008d9a <_printf_float+0x342>
 8008e16:	e680      	b.n	8008b1a <_printf_float+0xc2>
 8008e18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e1a:	2a01      	cmp	r2, #1
 8008e1c:	dc01      	bgt.n	8008e22 <_printf_float+0x3ca>
 8008e1e:	07db      	lsls	r3, r3, #31
 8008e20:	d538      	bpl.n	8008e94 <_printf_float+0x43c>
 8008e22:	2301      	movs	r3, #1
 8008e24:	4642      	mov	r2, r8
 8008e26:	4631      	mov	r1, r6
 8008e28:	4628      	mov	r0, r5
 8008e2a:	47b8      	blx	r7
 8008e2c:	3001      	adds	r0, #1
 8008e2e:	f43f ae74 	beq.w	8008b1a <_printf_float+0xc2>
 8008e32:	ee18 3a10 	vmov	r3, s16
 8008e36:	4652      	mov	r2, sl
 8008e38:	4631      	mov	r1, r6
 8008e3a:	4628      	mov	r0, r5
 8008e3c:	47b8      	blx	r7
 8008e3e:	3001      	adds	r0, #1
 8008e40:	f43f ae6b 	beq.w	8008b1a <_printf_float+0xc2>
 8008e44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008e48:	2200      	movs	r2, #0
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	f7f7 fe6c 	bl	8000b28 <__aeabi_dcmpeq>
 8008e50:	b9d8      	cbnz	r0, 8008e8a <_printf_float+0x432>
 8008e52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e54:	f108 0201 	add.w	r2, r8, #1
 8008e58:	3b01      	subs	r3, #1
 8008e5a:	4631      	mov	r1, r6
 8008e5c:	4628      	mov	r0, r5
 8008e5e:	47b8      	blx	r7
 8008e60:	3001      	adds	r0, #1
 8008e62:	d10e      	bne.n	8008e82 <_printf_float+0x42a>
 8008e64:	e659      	b.n	8008b1a <_printf_float+0xc2>
 8008e66:	2301      	movs	r3, #1
 8008e68:	4652      	mov	r2, sl
 8008e6a:	4631      	mov	r1, r6
 8008e6c:	4628      	mov	r0, r5
 8008e6e:	47b8      	blx	r7
 8008e70:	3001      	adds	r0, #1
 8008e72:	f43f ae52 	beq.w	8008b1a <_printf_float+0xc2>
 8008e76:	f108 0801 	add.w	r8, r8, #1
 8008e7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e7c:	3b01      	subs	r3, #1
 8008e7e:	4543      	cmp	r3, r8
 8008e80:	dcf1      	bgt.n	8008e66 <_printf_float+0x40e>
 8008e82:	464b      	mov	r3, r9
 8008e84:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008e88:	e6dc      	b.n	8008c44 <_printf_float+0x1ec>
 8008e8a:	f04f 0800 	mov.w	r8, #0
 8008e8e:	f104 0a1a 	add.w	sl, r4, #26
 8008e92:	e7f2      	b.n	8008e7a <_printf_float+0x422>
 8008e94:	2301      	movs	r3, #1
 8008e96:	4642      	mov	r2, r8
 8008e98:	e7df      	b.n	8008e5a <_printf_float+0x402>
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	464a      	mov	r2, r9
 8008e9e:	4631      	mov	r1, r6
 8008ea0:	4628      	mov	r0, r5
 8008ea2:	47b8      	blx	r7
 8008ea4:	3001      	adds	r0, #1
 8008ea6:	f43f ae38 	beq.w	8008b1a <_printf_float+0xc2>
 8008eaa:	f108 0801 	add.w	r8, r8, #1
 8008eae:	68e3      	ldr	r3, [r4, #12]
 8008eb0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008eb2:	1a5b      	subs	r3, r3, r1
 8008eb4:	4543      	cmp	r3, r8
 8008eb6:	dcf0      	bgt.n	8008e9a <_printf_float+0x442>
 8008eb8:	e6fa      	b.n	8008cb0 <_printf_float+0x258>
 8008eba:	f04f 0800 	mov.w	r8, #0
 8008ebe:	f104 0919 	add.w	r9, r4, #25
 8008ec2:	e7f4      	b.n	8008eae <_printf_float+0x456>

08008ec4 <_printf_common>:
 8008ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ec8:	4616      	mov	r6, r2
 8008eca:	4699      	mov	r9, r3
 8008ecc:	688a      	ldr	r2, [r1, #8]
 8008ece:	690b      	ldr	r3, [r1, #16]
 8008ed0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	bfb8      	it	lt
 8008ed8:	4613      	movlt	r3, r2
 8008eda:	6033      	str	r3, [r6, #0]
 8008edc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008ee0:	4607      	mov	r7, r0
 8008ee2:	460c      	mov	r4, r1
 8008ee4:	b10a      	cbz	r2, 8008eea <_printf_common+0x26>
 8008ee6:	3301      	adds	r3, #1
 8008ee8:	6033      	str	r3, [r6, #0]
 8008eea:	6823      	ldr	r3, [r4, #0]
 8008eec:	0699      	lsls	r1, r3, #26
 8008eee:	bf42      	ittt	mi
 8008ef0:	6833      	ldrmi	r3, [r6, #0]
 8008ef2:	3302      	addmi	r3, #2
 8008ef4:	6033      	strmi	r3, [r6, #0]
 8008ef6:	6825      	ldr	r5, [r4, #0]
 8008ef8:	f015 0506 	ands.w	r5, r5, #6
 8008efc:	d106      	bne.n	8008f0c <_printf_common+0x48>
 8008efe:	f104 0a19 	add.w	sl, r4, #25
 8008f02:	68e3      	ldr	r3, [r4, #12]
 8008f04:	6832      	ldr	r2, [r6, #0]
 8008f06:	1a9b      	subs	r3, r3, r2
 8008f08:	42ab      	cmp	r3, r5
 8008f0a:	dc26      	bgt.n	8008f5a <_printf_common+0x96>
 8008f0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008f10:	1e13      	subs	r3, r2, #0
 8008f12:	6822      	ldr	r2, [r4, #0]
 8008f14:	bf18      	it	ne
 8008f16:	2301      	movne	r3, #1
 8008f18:	0692      	lsls	r2, r2, #26
 8008f1a:	d42b      	bmi.n	8008f74 <_printf_common+0xb0>
 8008f1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008f20:	4649      	mov	r1, r9
 8008f22:	4638      	mov	r0, r7
 8008f24:	47c0      	blx	r8
 8008f26:	3001      	adds	r0, #1
 8008f28:	d01e      	beq.n	8008f68 <_printf_common+0xa4>
 8008f2a:	6823      	ldr	r3, [r4, #0]
 8008f2c:	68e5      	ldr	r5, [r4, #12]
 8008f2e:	6832      	ldr	r2, [r6, #0]
 8008f30:	f003 0306 	and.w	r3, r3, #6
 8008f34:	2b04      	cmp	r3, #4
 8008f36:	bf08      	it	eq
 8008f38:	1aad      	subeq	r5, r5, r2
 8008f3a:	68a3      	ldr	r3, [r4, #8]
 8008f3c:	6922      	ldr	r2, [r4, #16]
 8008f3e:	bf0c      	ite	eq
 8008f40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f44:	2500      	movne	r5, #0
 8008f46:	4293      	cmp	r3, r2
 8008f48:	bfc4      	itt	gt
 8008f4a:	1a9b      	subgt	r3, r3, r2
 8008f4c:	18ed      	addgt	r5, r5, r3
 8008f4e:	2600      	movs	r6, #0
 8008f50:	341a      	adds	r4, #26
 8008f52:	42b5      	cmp	r5, r6
 8008f54:	d11a      	bne.n	8008f8c <_printf_common+0xc8>
 8008f56:	2000      	movs	r0, #0
 8008f58:	e008      	b.n	8008f6c <_printf_common+0xa8>
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	4652      	mov	r2, sl
 8008f5e:	4649      	mov	r1, r9
 8008f60:	4638      	mov	r0, r7
 8008f62:	47c0      	blx	r8
 8008f64:	3001      	adds	r0, #1
 8008f66:	d103      	bne.n	8008f70 <_printf_common+0xac>
 8008f68:	f04f 30ff 	mov.w	r0, #4294967295
 8008f6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f70:	3501      	adds	r5, #1
 8008f72:	e7c6      	b.n	8008f02 <_printf_common+0x3e>
 8008f74:	18e1      	adds	r1, r4, r3
 8008f76:	1c5a      	adds	r2, r3, #1
 8008f78:	2030      	movs	r0, #48	; 0x30
 8008f7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008f7e:	4422      	add	r2, r4
 8008f80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008f84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008f88:	3302      	adds	r3, #2
 8008f8a:	e7c7      	b.n	8008f1c <_printf_common+0x58>
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	4622      	mov	r2, r4
 8008f90:	4649      	mov	r1, r9
 8008f92:	4638      	mov	r0, r7
 8008f94:	47c0      	blx	r8
 8008f96:	3001      	adds	r0, #1
 8008f98:	d0e6      	beq.n	8008f68 <_printf_common+0xa4>
 8008f9a:	3601      	adds	r6, #1
 8008f9c:	e7d9      	b.n	8008f52 <_printf_common+0x8e>
	...

08008fa0 <_printf_i>:
 8008fa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008fa4:	7e0f      	ldrb	r7, [r1, #24]
 8008fa6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008fa8:	2f78      	cmp	r7, #120	; 0x78
 8008faa:	4691      	mov	r9, r2
 8008fac:	4680      	mov	r8, r0
 8008fae:	460c      	mov	r4, r1
 8008fb0:	469a      	mov	sl, r3
 8008fb2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008fb6:	d807      	bhi.n	8008fc8 <_printf_i+0x28>
 8008fb8:	2f62      	cmp	r7, #98	; 0x62
 8008fba:	d80a      	bhi.n	8008fd2 <_printf_i+0x32>
 8008fbc:	2f00      	cmp	r7, #0
 8008fbe:	f000 80d8 	beq.w	8009172 <_printf_i+0x1d2>
 8008fc2:	2f58      	cmp	r7, #88	; 0x58
 8008fc4:	f000 80a3 	beq.w	800910e <_printf_i+0x16e>
 8008fc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008fcc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008fd0:	e03a      	b.n	8009048 <_printf_i+0xa8>
 8008fd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008fd6:	2b15      	cmp	r3, #21
 8008fd8:	d8f6      	bhi.n	8008fc8 <_printf_i+0x28>
 8008fda:	a101      	add	r1, pc, #4	; (adr r1, 8008fe0 <_printf_i+0x40>)
 8008fdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008fe0:	08009039 	.word	0x08009039
 8008fe4:	0800904d 	.word	0x0800904d
 8008fe8:	08008fc9 	.word	0x08008fc9
 8008fec:	08008fc9 	.word	0x08008fc9
 8008ff0:	08008fc9 	.word	0x08008fc9
 8008ff4:	08008fc9 	.word	0x08008fc9
 8008ff8:	0800904d 	.word	0x0800904d
 8008ffc:	08008fc9 	.word	0x08008fc9
 8009000:	08008fc9 	.word	0x08008fc9
 8009004:	08008fc9 	.word	0x08008fc9
 8009008:	08008fc9 	.word	0x08008fc9
 800900c:	08009159 	.word	0x08009159
 8009010:	0800907d 	.word	0x0800907d
 8009014:	0800913b 	.word	0x0800913b
 8009018:	08008fc9 	.word	0x08008fc9
 800901c:	08008fc9 	.word	0x08008fc9
 8009020:	0800917b 	.word	0x0800917b
 8009024:	08008fc9 	.word	0x08008fc9
 8009028:	0800907d 	.word	0x0800907d
 800902c:	08008fc9 	.word	0x08008fc9
 8009030:	08008fc9 	.word	0x08008fc9
 8009034:	08009143 	.word	0x08009143
 8009038:	682b      	ldr	r3, [r5, #0]
 800903a:	1d1a      	adds	r2, r3, #4
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	602a      	str	r2, [r5, #0]
 8009040:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009044:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009048:	2301      	movs	r3, #1
 800904a:	e0a3      	b.n	8009194 <_printf_i+0x1f4>
 800904c:	6820      	ldr	r0, [r4, #0]
 800904e:	6829      	ldr	r1, [r5, #0]
 8009050:	0606      	lsls	r6, r0, #24
 8009052:	f101 0304 	add.w	r3, r1, #4
 8009056:	d50a      	bpl.n	800906e <_printf_i+0xce>
 8009058:	680e      	ldr	r6, [r1, #0]
 800905a:	602b      	str	r3, [r5, #0]
 800905c:	2e00      	cmp	r6, #0
 800905e:	da03      	bge.n	8009068 <_printf_i+0xc8>
 8009060:	232d      	movs	r3, #45	; 0x2d
 8009062:	4276      	negs	r6, r6
 8009064:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009068:	485e      	ldr	r0, [pc, #376]	; (80091e4 <_printf_i+0x244>)
 800906a:	230a      	movs	r3, #10
 800906c:	e019      	b.n	80090a2 <_printf_i+0x102>
 800906e:	680e      	ldr	r6, [r1, #0]
 8009070:	602b      	str	r3, [r5, #0]
 8009072:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009076:	bf18      	it	ne
 8009078:	b236      	sxthne	r6, r6
 800907a:	e7ef      	b.n	800905c <_printf_i+0xbc>
 800907c:	682b      	ldr	r3, [r5, #0]
 800907e:	6820      	ldr	r0, [r4, #0]
 8009080:	1d19      	adds	r1, r3, #4
 8009082:	6029      	str	r1, [r5, #0]
 8009084:	0601      	lsls	r1, r0, #24
 8009086:	d501      	bpl.n	800908c <_printf_i+0xec>
 8009088:	681e      	ldr	r6, [r3, #0]
 800908a:	e002      	b.n	8009092 <_printf_i+0xf2>
 800908c:	0646      	lsls	r6, r0, #25
 800908e:	d5fb      	bpl.n	8009088 <_printf_i+0xe8>
 8009090:	881e      	ldrh	r6, [r3, #0]
 8009092:	4854      	ldr	r0, [pc, #336]	; (80091e4 <_printf_i+0x244>)
 8009094:	2f6f      	cmp	r7, #111	; 0x6f
 8009096:	bf0c      	ite	eq
 8009098:	2308      	moveq	r3, #8
 800909a:	230a      	movne	r3, #10
 800909c:	2100      	movs	r1, #0
 800909e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80090a2:	6865      	ldr	r5, [r4, #4]
 80090a4:	60a5      	str	r5, [r4, #8]
 80090a6:	2d00      	cmp	r5, #0
 80090a8:	bfa2      	ittt	ge
 80090aa:	6821      	ldrge	r1, [r4, #0]
 80090ac:	f021 0104 	bicge.w	r1, r1, #4
 80090b0:	6021      	strge	r1, [r4, #0]
 80090b2:	b90e      	cbnz	r6, 80090b8 <_printf_i+0x118>
 80090b4:	2d00      	cmp	r5, #0
 80090b6:	d04d      	beq.n	8009154 <_printf_i+0x1b4>
 80090b8:	4615      	mov	r5, r2
 80090ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80090be:	fb03 6711 	mls	r7, r3, r1, r6
 80090c2:	5dc7      	ldrb	r7, [r0, r7]
 80090c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80090c8:	4637      	mov	r7, r6
 80090ca:	42bb      	cmp	r3, r7
 80090cc:	460e      	mov	r6, r1
 80090ce:	d9f4      	bls.n	80090ba <_printf_i+0x11a>
 80090d0:	2b08      	cmp	r3, #8
 80090d2:	d10b      	bne.n	80090ec <_printf_i+0x14c>
 80090d4:	6823      	ldr	r3, [r4, #0]
 80090d6:	07de      	lsls	r6, r3, #31
 80090d8:	d508      	bpl.n	80090ec <_printf_i+0x14c>
 80090da:	6923      	ldr	r3, [r4, #16]
 80090dc:	6861      	ldr	r1, [r4, #4]
 80090de:	4299      	cmp	r1, r3
 80090e0:	bfde      	ittt	le
 80090e2:	2330      	movle	r3, #48	; 0x30
 80090e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80090e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80090ec:	1b52      	subs	r2, r2, r5
 80090ee:	6122      	str	r2, [r4, #16]
 80090f0:	f8cd a000 	str.w	sl, [sp]
 80090f4:	464b      	mov	r3, r9
 80090f6:	aa03      	add	r2, sp, #12
 80090f8:	4621      	mov	r1, r4
 80090fa:	4640      	mov	r0, r8
 80090fc:	f7ff fee2 	bl	8008ec4 <_printf_common>
 8009100:	3001      	adds	r0, #1
 8009102:	d14c      	bne.n	800919e <_printf_i+0x1fe>
 8009104:	f04f 30ff 	mov.w	r0, #4294967295
 8009108:	b004      	add	sp, #16
 800910a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800910e:	4835      	ldr	r0, [pc, #212]	; (80091e4 <_printf_i+0x244>)
 8009110:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009114:	6829      	ldr	r1, [r5, #0]
 8009116:	6823      	ldr	r3, [r4, #0]
 8009118:	f851 6b04 	ldr.w	r6, [r1], #4
 800911c:	6029      	str	r1, [r5, #0]
 800911e:	061d      	lsls	r5, r3, #24
 8009120:	d514      	bpl.n	800914c <_printf_i+0x1ac>
 8009122:	07df      	lsls	r7, r3, #31
 8009124:	bf44      	itt	mi
 8009126:	f043 0320 	orrmi.w	r3, r3, #32
 800912a:	6023      	strmi	r3, [r4, #0]
 800912c:	b91e      	cbnz	r6, 8009136 <_printf_i+0x196>
 800912e:	6823      	ldr	r3, [r4, #0]
 8009130:	f023 0320 	bic.w	r3, r3, #32
 8009134:	6023      	str	r3, [r4, #0]
 8009136:	2310      	movs	r3, #16
 8009138:	e7b0      	b.n	800909c <_printf_i+0xfc>
 800913a:	6823      	ldr	r3, [r4, #0]
 800913c:	f043 0320 	orr.w	r3, r3, #32
 8009140:	6023      	str	r3, [r4, #0]
 8009142:	2378      	movs	r3, #120	; 0x78
 8009144:	4828      	ldr	r0, [pc, #160]	; (80091e8 <_printf_i+0x248>)
 8009146:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800914a:	e7e3      	b.n	8009114 <_printf_i+0x174>
 800914c:	0659      	lsls	r1, r3, #25
 800914e:	bf48      	it	mi
 8009150:	b2b6      	uxthmi	r6, r6
 8009152:	e7e6      	b.n	8009122 <_printf_i+0x182>
 8009154:	4615      	mov	r5, r2
 8009156:	e7bb      	b.n	80090d0 <_printf_i+0x130>
 8009158:	682b      	ldr	r3, [r5, #0]
 800915a:	6826      	ldr	r6, [r4, #0]
 800915c:	6961      	ldr	r1, [r4, #20]
 800915e:	1d18      	adds	r0, r3, #4
 8009160:	6028      	str	r0, [r5, #0]
 8009162:	0635      	lsls	r5, r6, #24
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	d501      	bpl.n	800916c <_printf_i+0x1cc>
 8009168:	6019      	str	r1, [r3, #0]
 800916a:	e002      	b.n	8009172 <_printf_i+0x1d2>
 800916c:	0670      	lsls	r0, r6, #25
 800916e:	d5fb      	bpl.n	8009168 <_printf_i+0x1c8>
 8009170:	8019      	strh	r1, [r3, #0]
 8009172:	2300      	movs	r3, #0
 8009174:	6123      	str	r3, [r4, #16]
 8009176:	4615      	mov	r5, r2
 8009178:	e7ba      	b.n	80090f0 <_printf_i+0x150>
 800917a:	682b      	ldr	r3, [r5, #0]
 800917c:	1d1a      	adds	r2, r3, #4
 800917e:	602a      	str	r2, [r5, #0]
 8009180:	681d      	ldr	r5, [r3, #0]
 8009182:	6862      	ldr	r2, [r4, #4]
 8009184:	2100      	movs	r1, #0
 8009186:	4628      	mov	r0, r5
 8009188:	f7f7 f85a 	bl	8000240 <memchr>
 800918c:	b108      	cbz	r0, 8009192 <_printf_i+0x1f2>
 800918e:	1b40      	subs	r0, r0, r5
 8009190:	6060      	str	r0, [r4, #4]
 8009192:	6863      	ldr	r3, [r4, #4]
 8009194:	6123      	str	r3, [r4, #16]
 8009196:	2300      	movs	r3, #0
 8009198:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800919c:	e7a8      	b.n	80090f0 <_printf_i+0x150>
 800919e:	6923      	ldr	r3, [r4, #16]
 80091a0:	462a      	mov	r2, r5
 80091a2:	4649      	mov	r1, r9
 80091a4:	4640      	mov	r0, r8
 80091a6:	47d0      	blx	sl
 80091a8:	3001      	adds	r0, #1
 80091aa:	d0ab      	beq.n	8009104 <_printf_i+0x164>
 80091ac:	6823      	ldr	r3, [r4, #0]
 80091ae:	079b      	lsls	r3, r3, #30
 80091b0:	d413      	bmi.n	80091da <_printf_i+0x23a>
 80091b2:	68e0      	ldr	r0, [r4, #12]
 80091b4:	9b03      	ldr	r3, [sp, #12]
 80091b6:	4298      	cmp	r0, r3
 80091b8:	bfb8      	it	lt
 80091ba:	4618      	movlt	r0, r3
 80091bc:	e7a4      	b.n	8009108 <_printf_i+0x168>
 80091be:	2301      	movs	r3, #1
 80091c0:	4632      	mov	r2, r6
 80091c2:	4649      	mov	r1, r9
 80091c4:	4640      	mov	r0, r8
 80091c6:	47d0      	blx	sl
 80091c8:	3001      	adds	r0, #1
 80091ca:	d09b      	beq.n	8009104 <_printf_i+0x164>
 80091cc:	3501      	adds	r5, #1
 80091ce:	68e3      	ldr	r3, [r4, #12]
 80091d0:	9903      	ldr	r1, [sp, #12]
 80091d2:	1a5b      	subs	r3, r3, r1
 80091d4:	42ab      	cmp	r3, r5
 80091d6:	dcf2      	bgt.n	80091be <_printf_i+0x21e>
 80091d8:	e7eb      	b.n	80091b2 <_printf_i+0x212>
 80091da:	2500      	movs	r5, #0
 80091dc:	f104 0619 	add.w	r6, r4, #25
 80091e0:	e7f5      	b.n	80091ce <_printf_i+0x22e>
 80091e2:	bf00      	nop
 80091e4:	0800dce4 	.word	0x0800dce4
 80091e8:	0800dcf5 	.word	0x0800dcf5

080091ec <_scanf_float>:
 80091ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091f0:	b087      	sub	sp, #28
 80091f2:	4617      	mov	r7, r2
 80091f4:	9303      	str	r3, [sp, #12]
 80091f6:	688b      	ldr	r3, [r1, #8]
 80091f8:	1e5a      	subs	r2, r3, #1
 80091fa:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80091fe:	bf83      	ittte	hi
 8009200:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009204:	195b      	addhi	r3, r3, r5
 8009206:	9302      	strhi	r3, [sp, #8]
 8009208:	2300      	movls	r3, #0
 800920a:	bf86      	itte	hi
 800920c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009210:	608b      	strhi	r3, [r1, #8]
 8009212:	9302      	strls	r3, [sp, #8]
 8009214:	680b      	ldr	r3, [r1, #0]
 8009216:	468b      	mov	fp, r1
 8009218:	2500      	movs	r5, #0
 800921a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800921e:	f84b 3b1c 	str.w	r3, [fp], #28
 8009222:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009226:	4680      	mov	r8, r0
 8009228:	460c      	mov	r4, r1
 800922a:	465e      	mov	r6, fp
 800922c:	46aa      	mov	sl, r5
 800922e:	46a9      	mov	r9, r5
 8009230:	9501      	str	r5, [sp, #4]
 8009232:	68a2      	ldr	r2, [r4, #8]
 8009234:	b152      	cbz	r2, 800924c <_scanf_float+0x60>
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	781b      	ldrb	r3, [r3, #0]
 800923a:	2b4e      	cmp	r3, #78	; 0x4e
 800923c:	d864      	bhi.n	8009308 <_scanf_float+0x11c>
 800923e:	2b40      	cmp	r3, #64	; 0x40
 8009240:	d83c      	bhi.n	80092bc <_scanf_float+0xd0>
 8009242:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009246:	b2c8      	uxtb	r0, r1
 8009248:	280e      	cmp	r0, #14
 800924a:	d93a      	bls.n	80092c2 <_scanf_float+0xd6>
 800924c:	f1b9 0f00 	cmp.w	r9, #0
 8009250:	d003      	beq.n	800925a <_scanf_float+0x6e>
 8009252:	6823      	ldr	r3, [r4, #0]
 8009254:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009258:	6023      	str	r3, [r4, #0]
 800925a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800925e:	f1ba 0f01 	cmp.w	sl, #1
 8009262:	f200 8113 	bhi.w	800948c <_scanf_float+0x2a0>
 8009266:	455e      	cmp	r6, fp
 8009268:	f200 8105 	bhi.w	8009476 <_scanf_float+0x28a>
 800926c:	2501      	movs	r5, #1
 800926e:	4628      	mov	r0, r5
 8009270:	b007      	add	sp, #28
 8009272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009276:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800927a:	2a0d      	cmp	r2, #13
 800927c:	d8e6      	bhi.n	800924c <_scanf_float+0x60>
 800927e:	a101      	add	r1, pc, #4	; (adr r1, 8009284 <_scanf_float+0x98>)
 8009280:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009284:	080093c3 	.word	0x080093c3
 8009288:	0800924d 	.word	0x0800924d
 800928c:	0800924d 	.word	0x0800924d
 8009290:	0800924d 	.word	0x0800924d
 8009294:	08009423 	.word	0x08009423
 8009298:	080093fb 	.word	0x080093fb
 800929c:	0800924d 	.word	0x0800924d
 80092a0:	0800924d 	.word	0x0800924d
 80092a4:	080093d1 	.word	0x080093d1
 80092a8:	0800924d 	.word	0x0800924d
 80092ac:	0800924d 	.word	0x0800924d
 80092b0:	0800924d 	.word	0x0800924d
 80092b4:	0800924d 	.word	0x0800924d
 80092b8:	08009389 	.word	0x08009389
 80092bc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80092c0:	e7db      	b.n	800927a <_scanf_float+0x8e>
 80092c2:	290e      	cmp	r1, #14
 80092c4:	d8c2      	bhi.n	800924c <_scanf_float+0x60>
 80092c6:	a001      	add	r0, pc, #4	; (adr r0, 80092cc <_scanf_float+0xe0>)
 80092c8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80092cc:	0800937b 	.word	0x0800937b
 80092d0:	0800924d 	.word	0x0800924d
 80092d4:	0800937b 	.word	0x0800937b
 80092d8:	0800940f 	.word	0x0800940f
 80092dc:	0800924d 	.word	0x0800924d
 80092e0:	08009329 	.word	0x08009329
 80092e4:	08009365 	.word	0x08009365
 80092e8:	08009365 	.word	0x08009365
 80092ec:	08009365 	.word	0x08009365
 80092f0:	08009365 	.word	0x08009365
 80092f4:	08009365 	.word	0x08009365
 80092f8:	08009365 	.word	0x08009365
 80092fc:	08009365 	.word	0x08009365
 8009300:	08009365 	.word	0x08009365
 8009304:	08009365 	.word	0x08009365
 8009308:	2b6e      	cmp	r3, #110	; 0x6e
 800930a:	d809      	bhi.n	8009320 <_scanf_float+0x134>
 800930c:	2b60      	cmp	r3, #96	; 0x60
 800930e:	d8b2      	bhi.n	8009276 <_scanf_float+0x8a>
 8009310:	2b54      	cmp	r3, #84	; 0x54
 8009312:	d077      	beq.n	8009404 <_scanf_float+0x218>
 8009314:	2b59      	cmp	r3, #89	; 0x59
 8009316:	d199      	bne.n	800924c <_scanf_float+0x60>
 8009318:	2d07      	cmp	r5, #7
 800931a:	d197      	bne.n	800924c <_scanf_float+0x60>
 800931c:	2508      	movs	r5, #8
 800931e:	e029      	b.n	8009374 <_scanf_float+0x188>
 8009320:	2b74      	cmp	r3, #116	; 0x74
 8009322:	d06f      	beq.n	8009404 <_scanf_float+0x218>
 8009324:	2b79      	cmp	r3, #121	; 0x79
 8009326:	e7f6      	b.n	8009316 <_scanf_float+0x12a>
 8009328:	6821      	ldr	r1, [r4, #0]
 800932a:	05c8      	lsls	r0, r1, #23
 800932c:	d51a      	bpl.n	8009364 <_scanf_float+0x178>
 800932e:	9b02      	ldr	r3, [sp, #8]
 8009330:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009334:	6021      	str	r1, [r4, #0]
 8009336:	f109 0901 	add.w	r9, r9, #1
 800933a:	b11b      	cbz	r3, 8009344 <_scanf_float+0x158>
 800933c:	3b01      	subs	r3, #1
 800933e:	3201      	adds	r2, #1
 8009340:	9302      	str	r3, [sp, #8]
 8009342:	60a2      	str	r2, [r4, #8]
 8009344:	68a3      	ldr	r3, [r4, #8]
 8009346:	3b01      	subs	r3, #1
 8009348:	60a3      	str	r3, [r4, #8]
 800934a:	6923      	ldr	r3, [r4, #16]
 800934c:	3301      	adds	r3, #1
 800934e:	6123      	str	r3, [r4, #16]
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	3b01      	subs	r3, #1
 8009354:	2b00      	cmp	r3, #0
 8009356:	607b      	str	r3, [r7, #4]
 8009358:	f340 8084 	ble.w	8009464 <_scanf_float+0x278>
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	3301      	adds	r3, #1
 8009360:	603b      	str	r3, [r7, #0]
 8009362:	e766      	b.n	8009232 <_scanf_float+0x46>
 8009364:	eb1a 0f05 	cmn.w	sl, r5
 8009368:	f47f af70 	bne.w	800924c <_scanf_float+0x60>
 800936c:	6822      	ldr	r2, [r4, #0]
 800936e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009372:	6022      	str	r2, [r4, #0]
 8009374:	f806 3b01 	strb.w	r3, [r6], #1
 8009378:	e7e4      	b.n	8009344 <_scanf_float+0x158>
 800937a:	6822      	ldr	r2, [r4, #0]
 800937c:	0610      	lsls	r0, r2, #24
 800937e:	f57f af65 	bpl.w	800924c <_scanf_float+0x60>
 8009382:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009386:	e7f4      	b.n	8009372 <_scanf_float+0x186>
 8009388:	f1ba 0f00 	cmp.w	sl, #0
 800938c:	d10e      	bne.n	80093ac <_scanf_float+0x1c0>
 800938e:	f1b9 0f00 	cmp.w	r9, #0
 8009392:	d10e      	bne.n	80093b2 <_scanf_float+0x1c6>
 8009394:	6822      	ldr	r2, [r4, #0]
 8009396:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800939a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800939e:	d108      	bne.n	80093b2 <_scanf_float+0x1c6>
 80093a0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80093a4:	6022      	str	r2, [r4, #0]
 80093a6:	f04f 0a01 	mov.w	sl, #1
 80093aa:	e7e3      	b.n	8009374 <_scanf_float+0x188>
 80093ac:	f1ba 0f02 	cmp.w	sl, #2
 80093b0:	d055      	beq.n	800945e <_scanf_float+0x272>
 80093b2:	2d01      	cmp	r5, #1
 80093b4:	d002      	beq.n	80093bc <_scanf_float+0x1d0>
 80093b6:	2d04      	cmp	r5, #4
 80093b8:	f47f af48 	bne.w	800924c <_scanf_float+0x60>
 80093bc:	3501      	adds	r5, #1
 80093be:	b2ed      	uxtb	r5, r5
 80093c0:	e7d8      	b.n	8009374 <_scanf_float+0x188>
 80093c2:	f1ba 0f01 	cmp.w	sl, #1
 80093c6:	f47f af41 	bne.w	800924c <_scanf_float+0x60>
 80093ca:	f04f 0a02 	mov.w	sl, #2
 80093ce:	e7d1      	b.n	8009374 <_scanf_float+0x188>
 80093d0:	b97d      	cbnz	r5, 80093f2 <_scanf_float+0x206>
 80093d2:	f1b9 0f00 	cmp.w	r9, #0
 80093d6:	f47f af3c 	bne.w	8009252 <_scanf_float+0x66>
 80093da:	6822      	ldr	r2, [r4, #0]
 80093dc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80093e0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80093e4:	f47f af39 	bne.w	800925a <_scanf_float+0x6e>
 80093e8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80093ec:	6022      	str	r2, [r4, #0]
 80093ee:	2501      	movs	r5, #1
 80093f0:	e7c0      	b.n	8009374 <_scanf_float+0x188>
 80093f2:	2d03      	cmp	r5, #3
 80093f4:	d0e2      	beq.n	80093bc <_scanf_float+0x1d0>
 80093f6:	2d05      	cmp	r5, #5
 80093f8:	e7de      	b.n	80093b8 <_scanf_float+0x1cc>
 80093fa:	2d02      	cmp	r5, #2
 80093fc:	f47f af26 	bne.w	800924c <_scanf_float+0x60>
 8009400:	2503      	movs	r5, #3
 8009402:	e7b7      	b.n	8009374 <_scanf_float+0x188>
 8009404:	2d06      	cmp	r5, #6
 8009406:	f47f af21 	bne.w	800924c <_scanf_float+0x60>
 800940a:	2507      	movs	r5, #7
 800940c:	e7b2      	b.n	8009374 <_scanf_float+0x188>
 800940e:	6822      	ldr	r2, [r4, #0]
 8009410:	0591      	lsls	r1, r2, #22
 8009412:	f57f af1b 	bpl.w	800924c <_scanf_float+0x60>
 8009416:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800941a:	6022      	str	r2, [r4, #0]
 800941c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009420:	e7a8      	b.n	8009374 <_scanf_float+0x188>
 8009422:	6822      	ldr	r2, [r4, #0]
 8009424:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009428:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800942c:	d006      	beq.n	800943c <_scanf_float+0x250>
 800942e:	0550      	lsls	r0, r2, #21
 8009430:	f57f af0c 	bpl.w	800924c <_scanf_float+0x60>
 8009434:	f1b9 0f00 	cmp.w	r9, #0
 8009438:	f43f af0f 	beq.w	800925a <_scanf_float+0x6e>
 800943c:	0591      	lsls	r1, r2, #22
 800943e:	bf58      	it	pl
 8009440:	9901      	ldrpl	r1, [sp, #4]
 8009442:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009446:	bf58      	it	pl
 8009448:	eba9 0101 	subpl.w	r1, r9, r1
 800944c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009450:	bf58      	it	pl
 8009452:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009456:	6022      	str	r2, [r4, #0]
 8009458:	f04f 0900 	mov.w	r9, #0
 800945c:	e78a      	b.n	8009374 <_scanf_float+0x188>
 800945e:	f04f 0a03 	mov.w	sl, #3
 8009462:	e787      	b.n	8009374 <_scanf_float+0x188>
 8009464:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009468:	4639      	mov	r1, r7
 800946a:	4640      	mov	r0, r8
 800946c:	4798      	blx	r3
 800946e:	2800      	cmp	r0, #0
 8009470:	f43f aedf 	beq.w	8009232 <_scanf_float+0x46>
 8009474:	e6ea      	b.n	800924c <_scanf_float+0x60>
 8009476:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800947a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800947e:	463a      	mov	r2, r7
 8009480:	4640      	mov	r0, r8
 8009482:	4798      	blx	r3
 8009484:	6923      	ldr	r3, [r4, #16]
 8009486:	3b01      	subs	r3, #1
 8009488:	6123      	str	r3, [r4, #16]
 800948a:	e6ec      	b.n	8009266 <_scanf_float+0x7a>
 800948c:	1e6b      	subs	r3, r5, #1
 800948e:	2b06      	cmp	r3, #6
 8009490:	d825      	bhi.n	80094de <_scanf_float+0x2f2>
 8009492:	2d02      	cmp	r5, #2
 8009494:	d836      	bhi.n	8009504 <_scanf_float+0x318>
 8009496:	455e      	cmp	r6, fp
 8009498:	f67f aee8 	bls.w	800926c <_scanf_float+0x80>
 800949c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80094a0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80094a4:	463a      	mov	r2, r7
 80094a6:	4640      	mov	r0, r8
 80094a8:	4798      	blx	r3
 80094aa:	6923      	ldr	r3, [r4, #16]
 80094ac:	3b01      	subs	r3, #1
 80094ae:	6123      	str	r3, [r4, #16]
 80094b0:	e7f1      	b.n	8009496 <_scanf_float+0x2aa>
 80094b2:	9802      	ldr	r0, [sp, #8]
 80094b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80094b8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80094bc:	9002      	str	r0, [sp, #8]
 80094be:	463a      	mov	r2, r7
 80094c0:	4640      	mov	r0, r8
 80094c2:	4798      	blx	r3
 80094c4:	6923      	ldr	r3, [r4, #16]
 80094c6:	3b01      	subs	r3, #1
 80094c8:	6123      	str	r3, [r4, #16]
 80094ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80094ce:	fa5f fa8a 	uxtb.w	sl, sl
 80094d2:	f1ba 0f02 	cmp.w	sl, #2
 80094d6:	d1ec      	bne.n	80094b2 <_scanf_float+0x2c6>
 80094d8:	3d03      	subs	r5, #3
 80094da:	b2ed      	uxtb	r5, r5
 80094dc:	1b76      	subs	r6, r6, r5
 80094de:	6823      	ldr	r3, [r4, #0]
 80094e0:	05da      	lsls	r2, r3, #23
 80094e2:	d52f      	bpl.n	8009544 <_scanf_float+0x358>
 80094e4:	055b      	lsls	r3, r3, #21
 80094e6:	d510      	bpl.n	800950a <_scanf_float+0x31e>
 80094e8:	455e      	cmp	r6, fp
 80094ea:	f67f aebf 	bls.w	800926c <_scanf_float+0x80>
 80094ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80094f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80094f6:	463a      	mov	r2, r7
 80094f8:	4640      	mov	r0, r8
 80094fa:	4798      	blx	r3
 80094fc:	6923      	ldr	r3, [r4, #16]
 80094fe:	3b01      	subs	r3, #1
 8009500:	6123      	str	r3, [r4, #16]
 8009502:	e7f1      	b.n	80094e8 <_scanf_float+0x2fc>
 8009504:	46aa      	mov	sl, r5
 8009506:	9602      	str	r6, [sp, #8]
 8009508:	e7df      	b.n	80094ca <_scanf_float+0x2de>
 800950a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800950e:	6923      	ldr	r3, [r4, #16]
 8009510:	2965      	cmp	r1, #101	; 0x65
 8009512:	f103 33ff 	add.w	r3, r3, #4294967295
 8009516:	f106 35ff 	add.w	r5, r6, #4294967295
 800951a:	6123      	str	r3, [r4, #16]
 800951c:	d00c      	beq.n	8009538 <_scanf_float+0x34c>
 800951e:	2945      	cmp	r1, #69	; 0x45
 8009520:	d00a      	beq.n	8009538 <_scanf_float+0x34c>
 8009522:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009526:	463a      	mov	r2, r7
 8009528:	4640      	mov	r0, r8
 800952a:	4798      	blx	r3
 800952c:	6923      	ldr	r3, [r4, #16]
 800952e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009532:	3b01      	subs	r3, #1
 8009534:	1eb5      	subs	r5, r6, #2
 8009536:	6123      	str	r3, [r4, #16]
 8009538:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800953c:	463a      	mov	r2, r7
 800953e:	4640      	mov	r0, r8
 8009540:	4798      	blx	r3
 8009542:	462e      	mov	r6, r5
 8009544:	6825      	ldr	r5, [r4, #0]
 8009546:	f015 0510 	ands.w	r5, r5, #16
 800954a:	d159      	bne.n	8009600 <_scanf_float+0x414>
 800954c:	7035      	strb	r5, [r6, #0]
 800954e:	6823      	ldr	r3, [r4, #0]
 8009550:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009554:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009558:	d11b      	bne.n	8009592 <_scanf_float+0x3a6>
 800955a:	9b01      	ldr	r3, [sp, #4]
 800955c:	454b      	cmp	r3, r9
 800955e:	eba3 0209 	sub.w	r2, r3, r9
 8009562:	d123      	bne.n	80095ac <_scanf_float+0x3c0>
 8009564:	2200      	movs	r2, #0
 8009566:	4659      	mov	r1, fp
 8009568:	4640      	mov	r0, r8
 800956a:	f000 ff0b 	bl	800a384 <_strtod_r>
 800956e:	6822      	ldr	r2, [r4, #0]
 8009570:	9b03      	ldr	r3, [sp, #12]
 8009572:	f012 0f02 	tst.w	r2, #2
 8009576:	ec57 6b10 	vmov	r6, r7, d0
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	d021      	beq.n	80095c2 <_scanf_float+0x3d6>
 800957e:	9903      	ldr	r1, [sp, #12]
 8009580:	1d1a      	adds	r2, r3, #4
 8009582:	600a      	str	r2, [r1, #0]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	e9c3 6700 	strd	r6, r7, [r3]
 800958a:	68e3      	ldr	r3, [r4, #12]
 800958c:	3301      	adds	r3, #1
 800958e:	60e3      	str	r3, [r4, #12]
 8009590:	e66d      	b.n	800926e <_scanf_float+0x82>
 8009592:	9b04      	ldr	r3, [sp, #16]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d0e5      	beq.n	8009564 <_scanf_float+0x378>
 8009598:	9905      	ldr	r1, [sp, #20]
 800959a:	230a      	movs	r3, #10
 800959c:	462a      	mov	r2, r5
 800959e:	3101      	adds	r1, #1
 80095a0:	4640      	mov	r0, r8
 80095a2:	f000 ff77 	bl	800a494 <_strtol_r>
 80095a6:	9b04      	ldr	r3, [sp, #16]
 80095a8:	9e05      	ldr	r6, [sp, #20]
 80095aa:	1ac2      	subs	r2, r0, r3
 80095ac:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80095b0:	429e      	cmp	r6, r3
 80095b2:	bf28      	it	cs
 80095b4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80095b8:	4912      	ldr	r1, [pc, #72]	; (8009604 <_scanf_float+0x418>)
 80095ba:	4630      	mov	r0, r6
 80095bc:	f000 f82c 	bl	8009618 <siprintf>
 80095c0:	e7d0      	b.n	8009564 <_scanf_float+0x378>
 80095c2:	9903      	ldr	r1, [sp, #12]
 80095c4:	f012 0f04 	tst.w	r2, #4
 80095c8:	f103 0204 	add.w	r2, r3, #4
 80095cc:	600a      	str	r2, [r1, #0]
 80095ce:	d1d9      	bne.n	8009584 <_scanf_float+0x398>
 80095d0:	f8d3 8000 	ldr.w	r8, [r3]
 80095d4:	ee10 2a10 	vmov	r2, s0
 80095d8:	ee10 0a10 	vmov	r0, s0
 80095dc:	463b      	mov	r3, r7
 80095de:	4639      	mov	r1, r7
 80095e0:	f7f7 fad4 	bl	8000b8c <__aeabi_dcmpun>
 80095e4:	b128      	cbz	r0, 80095f2 <_scanf_float+0x406>
 80095e6:	4808      	ldr	r0, [pc, #32]	; (8009608 <_scanf_float+0x41c>)
 80095e8:	f000 f810 	bl	800960c <nanf>
 80095ec:	ed88 0a00 	vstr	s0, [r8]
 80095f0:	e7cb      	b.n	800958a <_scanf_float+0x39e>
 80095f2:	4630      	mov	r0, r6
 80095f4:	4639      	mov	r1, r7
 80095f6:	f7f7 fb27 	bl	8000c48 <__aeabi_d2f>
 80095fa:	f8c8 0000 	str.w	r0, [r8]
 80095fe:	e7c4      	b.n	800958a <_scanf_float+0x39e>
 8009600:	2500      	movs	r5, #0
 8009602:	e634      	b.n	800926e <_scanf_float+0x82>
 8009604:	0800dd06 	.word	0x0800dd06
 8009608:	0800e12b 	.word	0x0800e12b

0800960c <nanf>:
 800960c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009614 <nanf+0x8>
 8009610:	4770      	bx	lr
 8009612:	bf00      	nop
 8009614:	7fc00000 	.word	0x7fc00000

08009618 <siprintf>:
 8009618:	b40e      	push	{r1, r2, r3}
 800961a:	b500      	push	{lr}
 800961c:	b09c      	sub	sp, #112	; 0x70
 800961e:	ab1d      	add	r3, sp, #116	; 0x74
 8009620:	9002      	str	r0, [sp, #8]
 8009622:	9006      	str	r0, [sp, #24]
 8009624:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009628:	4809      	ldr	r0, [pc, #36]	; (8009650 <siprintf+0x38>)
 800962a:	9107      	str	r1, [sp, #28]
 800962c:	9104      	str	r1, [sp, #16]
 800962e:	4909      	ldr	r1, [pc, #36]	; (8009654 <siprintf+0x3c>)
 8009630:	f853 2b04 	ldr.w	r2, [r3], #4
 8009634:	9105      	str	r1, [sp, #20]
 8009636:	6800      	ldr	r0, [r0, #0]
 8009638:	9301      	str	r3, [sp, #4]
 800963a:	a902      	add	r1, sp, #8
 800963c:	f002 ff7e 	bl	800c53c <_svfiprintf_r>
 8009640:	9b02      	ldr	r3, [sp, #8]
 8009642:	2200      	movs	r2, #0
 8009644:	701a      	strb	r2, [r3, #0]
 8009646:	b01c      	add	sp, #112	; 0x70
 8009648:	f85d eb04 	ldr.w	lr, [sp], #4
 800964c:	b003      	add	sp, #12
 800964e:	4770      	bx	lr
 8009650:	2000000c 	.word	0x2000000c
 8009654:	ffff0208 	.word	0xffff0208

08009658 <siscanf>:
 8009658:	b40e      	push	{r1, r2, r3}
 800965a:	b510      	push	{r4, lr}
 800965c:	b09f      	sub	sp, #124	; 0x7c
 800965e:	ac21      	add	r4, sp, #132	; 0x84
 8009660:	f44f 7101 	mov.w	r1, #516	; 0x204
 8009664:	f854 2b04 	ldr.w	r2, [r4], #4
 8009668:	9201      	str	r2, [sp, #4]
 800966a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800966e:	9004      	str	r0, [sp, #16]
 8009670:	9008      	str	r0, [sp, #32]
 8009672:	f7f6 fdd7 	bl	8000224 <strlen>
 8009676:	4b0c      	ldr	r3, [pc, #48]	; (80096a8 <siscanf+0x50>)
 8009678:	9005      	str	r0, [sp, #20]
 800967a:	9009      	str	r0, [sp, #36]	; 0x24
 800967c:	930d      	str	r3, [sp, #52]	; 0x34
 800967e:	480b      	ldr	r0, [pc, #44]	; (80096ac <siscanf+0x54>)
 8009680:	9a01      	ldr	r2, [sp, #4]
 8009682:	6800      	ldr	r0, [r0, #0]
 8009684:	9403      	str	r4, [sp, #12]
 8009686:	2300      	movs	r3, #0
 8009688:	9311      	str	r3, [sp, #68]	; 0x44
 800968a:	9316      	str	r3, [sp, #88]	; 0x58
 800968c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009690:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009694:	a904      	add	r1, sp, #16
 8009696:	4623      	mov	r3, r4
 8009698:	f003 f8aa 	bl	800c7f0 <__ssvfiscanf_r>
 800969c:	b01f      	add	sp, #124	; 0x7c
 800969e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096a2:	b003      	add	sp, #12
 80096a4:	4770      	bx	lr
 80096a6:	bf00      	nop
 80096a8:	080096d3 	.word	0x080096d3
 80096ac:	2000000c 	.word	0x2000000c

080096b0 <__sread>:
 80096b0:	b510      	push	{r4, lr}
 80096b2:	460c      	mov	r4, r1
 80096b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096b8:	f003 fb64 	bl	800cd84 <_read_r>
 80096bc:	2800      	cmp	r0, #0
 80096be:	bfab      	itete	ge
 80096c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80096c2:	89a3      	ldrhlt	r3, [r4, #12]
 80096c4:	181b      	addge	r3, r3, r0
 80096c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80096ca:	bfac      	ite	ge
 80096cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80096ce:	81a3      	strhlt	r3, [r4, #12]
 80096d0:	bd10      	pop	{r4, pc}

080096d2 <__seofread>:
 80096d2:	2000      	movs	r0, #0
 80096d4:	4770      	bx	lr

080096d6 <__swrite>:
 80096d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096da:	461f      	mov	r7, r3
 80096dc:	898b      	ldrh	r3, [r1, #12]
 80096de:	05db      	lsls	r3, r3, #23
 80096e0:	4605      	mov	r5, r0
 80096e2:	460c      	mov	r4, r1
 80096e4:	4616      	mov	r6, r2
 80096e6:	d505      	bpl.n	80096f4 <__swrite+0x1e>
 80096e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096ec:	2302      	movs	r3, #2
 80096ee:	2200      	movs	r2, #0
 80096f0:	f002 f8e4 	bl	800b8bc <_lseek_r>
 80096f4:	89a3      	ldrh	r3, [r4, #12]
 80096f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80096fe:	81a3      	strh	r3, [r4, #12]
 8009700:	4632      	mov	r2, r6
 8009702:	463b      	mov	r3, r7
 8009704:	4628      	mov	r0, r5
 8009706:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800970a:	f000 bec5 	b.w	800a498 <_write_r>

0800970e <__sseek>:
 800970e:	b510      	push	{r4, lr}
 8009710:	460c      	mov	r4, r1
 8009712:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009716:	f002 f8d1 	bl	800b8bc <_lseek_r>
 800971a:	1c43      	adds	r3, r0, #1
 800971c:	89a3      	ldrh	r3, [r4, #12]
 800971e:	bf15      	itete	ne
 8009720:	6560      	strne	r0, [r4, #84]	; 0x54
 8009722:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009726:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800972a:	81a3      	strheq	r3, [r4, #12]
 800972c:	bf18      	it	ne
 800972e:	81a3      	strhne	r3, [r4, #12]
 8009730:	bd10      	pop	{r4, pc}

08009732 <__sclose>:
 8009732:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009736:	f000 bec1 	b.w	800a4bc <_close_r>

0800973a <sulp>:
 800973a:	b570      	push	{r4, r5, r6, lr}
 800973c:	4604      	mov	r4, r0
 800973e:	460d      	mov	r5, r1
 8009740:	ec45 4b10 	vmov	d0, r4, r5
 8009744:	4616      	mov	r6, r2
 8009746:	f002 fc57 	bl	800bff8 <__ulp>
 800974a:	ec51 0b10 	vmov	r0, r1, d0
 800974e:	b17e      	cbz	r6, 8009770 <sulp+0x36>
 8009750:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009754:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009758:	2b00      	cmp	r3, #0
 800975a:	dd09      	ble.n	8009770 <sulp+0x36>
 800975c:	051b      	lsls	r3, r3, #20
 800975e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009762:	2400      	movs	r4, #0
 8009764:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009768:	4622      	mov	r2, r4
 800976a:	462b      	mov	r3, r5
 800976c:	f7f6 ff74 	bl	8000658 <__aeabi_dmul>
 8009770:	bd70      	pop	{r4, r5, r6, pc}
 8009772:	0000      	movs	r0, r0
 8009774:	0000      	movs	r0, r0
	...

08009778 <_strtod_l>:
 8009778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800977c:	ed2d 8b02 	vpush	{d8}
 8009780:	b09d      	sub	sp, #116	; 0x74
 8009782:	461f      	mov	r7, r3
 8009784:	2300      	movs	r3, #0
 8009786:	9318      	str	r3, [sp, #96]	; 0x60
 8009788:	4ba2      	ldr	r3, [pc, #648]	; (8009a14 <_strtod_l+0x29c>)
 800978a:	9213      	str	r2, [sp, #76]	; 0x4c
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	9305      	str	r3, [sp, #20]
 8009790:	4604      	mov	r4, r0
 8009792:	4618      	mov	r0, r3
 8009794:	4688      	mov	r8, r1
 8009796:	f7f6 fd45 	bl	8000224 <strlen>
 800979a:	f04f 0a00 	mov.w	sl, #0
 800979e:	4605      	mov	r5, r0
 80097a0:	f04f 0b00 	mov.w	fp, #0
 80097a4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80097a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80097aa:	781a      	ldrb	r2, [r3, #0]
 80097ac:	2a2b      	cmp	r2, #43	; 0x2b
 80097ae:	d04e      	beq.n	800984e <_strtod_l+0xd6>
 80097b0:	d83b      	bhi.n	800982a <_strtod_l+0xb2>
 80097b2:	2a0d      	cmp	r2, #13
 80097b4:	d834      	bhi.n	8009820 <_strtod_l+0xa8>
 80097b6:	2a08      	cmp	r2, #8
 80097b8:	d834      	bhi.n	8009824 <_strtod_l+0xac>
 80097ba:	2a00      	cmp	r2, #0
 80097bc:	d03e      	beq.n	800983c <_strtod_l+0xc4>
 80097be:	2300      	movs	r3, #0
 80097c0:	930a      	str	r3, [sp, #40]	; 0x28
 80097c2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80097c4:	7833      	ldrb	r3, [r6, #0]
 80097c6:	2b30      	cmp	r3, #48	; 0x30
 80097c8:	f040 80b0 	bne.w	800992c <_strtod_l+0x1b4>
 80097cc:	7873      	ldrb	r3, [r6, #1]
 80097ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80097d2:	2b58      	cmp	r3, #88	; 0x58
 80097d4:	d168      	bne.n	80098a8 <_strtod_l+0x130>
 80097d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097d8:	9301      	str	r3, [sp, #4]
 80097da:	ab18      	add	r3, sp, #96	; 0x60
 80097dc:	9702      	str	r7, [sp, #8]
 80097de:	9300      	str	r3, [sp, #0]
 80097e0:	4a8d      	ldr	r2, [pc, #564]	; (8009a18 <_strtod_l+0x2a0>)
 80097e2:	ab19      	add	r3, sp, #100	; 0x64
 80097e4:	a917      	add	r1, sp, #92	; 0x5c
 80097e6:	4620      	mov	r0, r4
 80097e8:	f001 fd5c 	bl	800b2a4 <__gethex>
 80097ec:	f010 0707 	ands.w	r7, r0, #7
 80097f0:	4605      	mov	r5, r0
 80097f2:	d005      	beq.n	8009800 <_strtod_l+0x88>
 80097f4:	2f06      	cmp	r7, #6
 80097f6:	d12c      	bne.n	8009852 <_strtod_l+0xda>
 80097f8:	3601      	adds	r6, #1
 80097fa:	2300      	movs	r3, #0
 80097fc:	9617      	str	r6, [sp, #92]	; 0x5c
 80097fe:	930a      	str	r3, [sp, #40]	; 0x28
 8009800:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009802:	2b00      	cmp	r3, #0
 8009804:	f040 8590 	bne.w	800a328 <_strtod_l+0xbb0>
 8009808:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800980a:	b1eb      	cbz	r3, 8009848 <_strtod_l+0xd0>
 800980c:	4652      	mov	r2, sl
 800980e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009812:	ec43 2b10 	vmov	d0, r2, r3
 8009816:	b01d      	add	sp, #116	; 0x74
 8009818:	ecbd 8b02 	vpop	{d8}
 800981c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009820:	2a20      	cmp	r2, #32
 8009822:	d1cc      	bne.n	80097be <_strtod_l+0x46>
 8009824:	3301      	adds	r3, #1
 8009826:	9317      	str	r3, [sp, #92]	; 0x5c
 8009828:	e7be      	b.n	80097a8 <_strtod_l+0x30>
 800982a:	2a2d      	cmp	r2, #45	; 0x2d
 800982c:	d1c7      	bne.n	80097be <_strtod_l+0x46>
 800982e:	2201      	movs	r2, #1
 8009830:	920a      	str	r2, [sp, #40]	; 0x28
 8009832:	1c5a      	adds	r2, r3, #1
 8009834:	9217      	str	r2, [sp, #92]	; 0x5c
 8009836:	785b      	ldrb	r3, [r3, #1]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d1c2      	bne.n	80097c2 <_strtod_l+0x4a>
 800983c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800983e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009842:	2b00      	cmp	r3, #0
 8009844:	f040 856e 	bne.w	800a324 <_strtod_l+0xbac>
 8009848:	4652      	mov	r2, sl
 800984a:	465b      	mov	r3, fp
 800984c:	e7e1      	b.n	8009812 <_strtod_l+0x9a>
 800984e:	2200      	movs	r2, #0
 8009850:	e7ee      	b.n	8009830 <_strtod_l+0xb8>
 8009852:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009854:	b13a      	cbz	r2, 8009866 <_strtod_l+0xee>
 8009856:	2135      	movs	r1, #53	; 0x35
 8009858:	a81a      	add	r0, sp, #104	; 0x68
 800985a:	f002 fcd8 	bl	800c20e <__copybits>
 800985e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009860:	4620      	mov	r0, r4
 8009862:	f002 f897 	bl	800b994 <_Bfree>
 8009866:	3f01      	subs	r7, #1
 8009868:	2f04      	cmp	r7, #4
 800986a:	d806      	bhi.n	800987a <_strtod_l+0x102>
 800986c:	e8df f007 	tbb	[pc, r7]
 8009870:	1714030a 	.word	0x1714030a
 8009874:	0a          	.byte	0x0a
 8009875:	00          	.byte	0x00
 8009876:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800987a:	0728      	lsls	r0, r5, #28
 800987c:	d5c0      	bpl.n	8009800 <_strtod_l+0x88>
 800987e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009882:	e7bd      	b.n	8009800 <_strtod_l+0x88>
 8009884:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8009888:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800988a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800988e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009892:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009896:	e7f0      	b.n	800987a <_strtod_l+0x102>
 8009898:	f8df b180 	ldr.w	fp, [pc, #384]	; 8009a1c <_strtod_l+0x2a4>
 800989c:	e7ed      	b.n	800987a <_strtod_l+0x102>
 800989e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80098a2:	f04f 3aff 	mov.w	sl, #4294967295
 80098a6:	e7e8      	b.n	800987a <_strtod_l+0x102>
 80098a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80098aa:	1c5a      	adds	r2, r3, #1
 80098ac:	9217      	str	r2, [sp, #92]	; 0x5c
 80098ae:	785b      	ldrb	r3, [r3, #1]
 80098b0:	2b30      	cmp	r3, #48	; 0x30
 80098b2:	d0f9      	beq.n	80098a8 <_strtod_l+0x130>
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d0a3      	beq.n	8009800 <_strtod_l+0x88>
 80098b8:	2301      	movs	r3, #1
 80098ba:	f04f 0900 	mov.w	r9, #0
 80098be:	9304      	str	r3, [sp, #16]
 80098c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80098c2:	9308      	str	r3, [sp, #32]
 80098c4:	f8cd 901c 	str.w	r9, [sp, #28]
 80098c8:	464f      	mov	r7, r9
 80098ca:	220a      	movs	r2, #10
 80098cc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80098ce:	7806      	ldrb	r6, [r0, #0]
 80098d0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80098d4:	b2d9      	uxtb	r1, r3
 80098d6:	2909      	cmp	r1, #9
 80098d8:	d92a      	bls.n	8009930 <_strtod_l+0x1b8>
 80098da:	9905      	ldr	r1, [sp, #20]
 80098dc:	462a      	mov	r2, r5
 80098de:	f003 fab3 	bl	800ce48 <strncmp>
 80098e2:	b398      	cbz	r0, 800994c <_strtod_l+0x1d4>
 80098e4:	2000      	movs	r0, #0
 80098e6:	4632      	mov	r2, r6
 80098e8:	463d      	mov	r5, r7
 80098ea:	9005      	str	r0, [sp, #20]
 80098ec:	4603      	mov	r3, r0
 80098ee:	2a65      	cmp	r2, #101	; 0x65
 80098f0:	d001      	beq.n	80098f6 <_strtod_l+0x17e>
 80098f2:	2a45      	cmp	r2, #69	; 0x45
 80098f4:	d118      	bne.n	8009928 <_strtod_l+0x1b0>
 80098f6:	b91d      	cbnz	r5, 8009900 <_strtod_l+0x188>
 80098f8:	9a04      	ldr	r2, [sp, #16]
 80098fa:	4302      	orrs	r2, r0
 80098fc:	d09e      	beq.n	800983c <_strtod_l+0xc4>
 80098fe:	2500      	movs	r5, #0
 8009900:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8009904:	f108 0201 	add.w	r2, r8, #1
 8009908:	9217      	str	r2, [sp, #92]	; 0x5c
 800990a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800990e:	2a2b      	cmp	r2, #43	; 0x2b
 8009910:	d075      	beq.n	80099fe <_strtod_l+0x286>
 8009912:	2a2d      	cmp	r2, #45	; 0x2d
 8009914:	d07b      	beq.n	8009a0e <_strtod_l+0x296>
 8009916:	f04f 0c00 	mov.w	ip, #0
 800991a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800991e:	2909      	cmp	r1, #9
 8009920:	f240 8082 	bls.w	8009a28 <_strtod_l+0x2b0>
 8009924:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009928:	2600      	movs	r6, #0
 800992a:	e09d      	b.n	8009a68 <_strtod_l+0x2f0>
 800992c:	2300      	movs	r3, #0
 800992e:	e7c4      	b.n	80098ba <_strtod_l+0x142>
 8009930:	2f08      	cmp	r7, #8
 8009932:	bfd8      	it	le
 8009934:	9907      	ldrle	r1, [sp, #28]
 8009936:	f100 0001 	add.w	r0, r0, #1
 800993a:	bfda      	itte	le
 800993c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009940:	9307      	strle	r3, [sp, #28]
 8009942:	fb02 3909 	mlagt	r9, r2, r9, r3
 8009946:	3701      	adds	r7, #1
 8009948:	9017      	str	r0, [sp, #92]	; 0x5c
 800994a:	e7bf      	b.n	80098cc <_strtod_l+0x154>
 800994c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800994e:	195a      	adds	r2, r3, r5
 8009950:	9217      	str	r2, [sp, #92]	; 0x5c
 8009952:	5d5a      	ldrb	r2, [r3, r5]
 8009954:	2f00      	cmp	r7, #0
 8009956:	d037      	beq.n	80099c8 <_strtod_l+0x250>
 8009958:	9005      	str	r0, [sp, #20]
 800995a:	463d      	mov	r5, r7
 800995c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009960:	2b09      	cmp	r3, #9
 8009962:	d912      	bls.n	800998a <_strtod_l+0x212>
 8009964:	2301      	movs	r3, #1
 8009966:	e7c2      	b.n	80098ee <_strtod_l+0x176>
 8009968:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800996a:	1c5a      	adds	r2, r3, #1
 800996c:	9217      	str	r2, [sp, #92]	; 0x5c
 800996e:	785a      	ldrb	r2, [r3, #1]
 8009970:	3001      	adds	r0, #1
 8009972:	2a30      	cmp	r2, #48	; 0x30
 8009974:	d0f8      	beq.n	8009968 <_strtod_l+0x1f0>
 8009976:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800997a:	2b08      	cmp	r3, #8
 800997c:	f200 84d9 	bhi.w	800a332 <_strtod_l+0xbba>
 8009980:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009982:	9005      	str	r0, [sp, #20]
 8009984:	2000      	movs	r0, #0
 8009986:	9308      	str	r3, [sp, #32]
 8009988:	4605      	mov	r5, r0
 800998a:	3a30      	subs	r2, #48	; 0x30
 800998c:	f100 0301 	add.w	r3, r0, #1
 8009990:	d014      	beq.n	80099bc <_strtod_l+0x244>
 8009992:	9905      	ldr	r1, [sp, #20]
 8009994:	4419      	add	r1, r3
 8009996:	9105      	str	r1, [sp, #20]
 8009998:	462b      	mov	r3, r5
 800999a:	eb00 0e05 	add.w	lr, r0, r5
 800999e:	210a      	movs	r1, #10
 80099a0:	4573      	cmp	r3, lr
 80099a2:	d113      	bne.n	80099cc <_strtod_l+0x254>
 80099a4:	182b      	adds	r3, r5, r0
 80099a6:	2b08      	cmp	r3, #8
 80099a8:	f105 0501 	add.w	r5, r5, #1
 80099ac:	4405      	add	r5, r0
 80099ae:	dc1c      	bgt.n	80099ea <_strtod_l+0x272>
 80099b0:	9907      	ldr	r1, [sp, #28]
 80099b2:	230a      	movs	r3, #10
 80099b4:	fb03 2301 	mla	r3, r3, r1, r2
 80099b8:	9307      	str	r3, [sp, #28]
 80099ba:	2300      	movs	r3, #0
 80099bc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80099be:	1c51      	adds	r1, r2, #1
 80099c0:	9117      	str	r1, [sp, #92]	; 0x5c
 80099c2:	7852      	ldrb	r2, [r2, #1]
 80099c4:	4618      	mov	r0, r3
 80099c6:	e7c9      	b.n	800995c <_strtod_l+0x1e4>
 80099c8:	4638      	mov	r0, r7
 80099ca:	e7d2      	b.n	8009972 <_strtod_l+0x1fa>
 80099cc:	2b08      	cmp	r3, #8
 80099ce:	dc04      	bgt.n	80099da <_strtod_l+0x262>
 80099d0:	9e07      	ldr	r6, [sp, #28]
 80099d2:	434e      	muls	r6, r1
 80099d4:	9607      	str	r6, [sp, #28]
 80099d6:	3301      	adds	r3, #1
 80099d8:	e7e2      	b.n	80099a0 <_strtod_l+0x228>
 80099da:	f103 0c01 	add.w	ip, r3, #1
 80099de:	f1bc 0f10 	cmp.w	ip, #16
 80099e2:	bfd8      	it	le
 80099e4:	fb01 f909 	mulle.w	r9, r1, r9
 80099e8:	e7f5      	b.n	80099d6 <_strtod_l+0x25e>
 80099ea:	2d10      	cmp	r5, #16
 80099ec:	bfdc      	itt	le
 80099ee:	230a      	movle	r3, #10
 80099f0:	fb03 2909 	mlale	r9, r3, r9, r2
 80099f4:	e7e1      	b.n	80099ba <_strtod_l+0x242>
 80099f6:	2300      	movs	r3, #0
 80099f8:	9305      	str	r3, [sp, #20]
 80099fa:	2301      	movs	r3, #1
 80099fc:	e77c      	b.n	80098f8 <_strtod_l+0x180>
 80099fe:	f04f 0c00 	mov.w	ip, #0
 8009a02:	f108 0202 	add.w	r2, r8, #2
 8009a06:	9217      	str	r2, [sp, #92]	; 0x5c
 8009a08:	f898 2002 	ldrb.w	r2, [r8, #2]
 8009a0c:	e785      	b.n	800991a <_strtod_l+0x1a2>
 8009a0e:	f04f 0c01 	mov.w	ip, #1
 8009a12:	e7f6      	b.n	8009a02 <_strtod_l+0x28a>
 8009a14:	0800df58 	.word	0x0800df58
 8009a18:	0800dd0c 	.word	0x0800dd0c
 8009a1c:	7ff00000 	.word	0x7ff00000
 8009a20:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009a22:	1c51      	adds	r1, r2, #1
 8009a24:	9117      	str	r1, [sp, #92]	; 0x5c
 8009a26:	7852      	ldrb	r2, [r2, #1]
 8009a28:	2a30      	cmp	r2, #48	; 0x30
 8009a2a:	d0f9      	beq.n	8009a20 <_strtod_l+0x2a8>
 8009a2c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009a30:	2908      	cmp	r1, #8
 8009a32:	f63f af79 	bhi.w	8009928 <_strtod_l+0x1b0>
 8009a36:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009a3a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009a3c:	9206      	str	r2, [sp, #24]
 8009a3e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009a40:	1c51      	adds	r1, r2, #1
 8009a42:	9117      	str	r1, [sp, #92]	; 0x5c
 8009a44:	7852      	ldrb	r2, [r2, #1]
 8009a46:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8009a4a:	2e09      	cmp	r6, #9
 8009a4c:	d937      	bls.n	8009abe <_strtod_l+0x346>
 8009a4e:	9e06      	ldr	r6, [sp, #24]
 8009a50:	1b89      	subs	r1, r1, r6
 8009a52:	2908      	cmp	r1, #8
 8009a54:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009a58:	dc02      	bgt.n	8009a60 <_strtod_l+0x2e8>
 8009a5a:	4576      	cmp	r6, lr
 8009a5c:	bfa8      	it	ge
 8009a5e:	4676      	movge	r6, lr
 8009a60:	f1bc 0f00 	cmp.w	ip, #0
 8009a64:	d000      	beq.n	8009a68 <_strtod_l+0x2f0>
 8009a66:	4276      	negs	r6, r6
 8009a68:	2d00      	cmp	r5, #0
 8009a6a:	d14d      	bne.n	8009b08 <_strtod_l+0x390>
 8009a6c:	9904      	ldr	r1, [sp, #16]
 8009a6e:	4301      	orrs	r1, r0
 8009a70:	f47f aec6 	bne.w	8009800 <_strtod_l+0x88>
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	f47f aee1 	bne.w	800983c <_strtod_l+0xc4>
 8009a7a:	2a69      	cmp	r2, #105	; 0x69
 8009a7c:	d027      	beq.n	8009ace <_strtod_l+0x356>
 8009a7e:	dc24      	bgt.n	8009aca <_strtod_l+0x352>
 8009a80:	2a49      	cmp	r2, #73	; 0x49
 8009a82:	d024      	beq.n	8009ace <_strtod_l+0x356>
 8009a84:	2a4e      	cmp	r2, #78	; 0x4e
 8009a86:	f47f aed9 	bne.w	800983c <_strtod_l+0xc4>
 8009a8a:	499f      	ldr	r1, [pc, #636]	; (8009d08 <_strtod_l+0x590>)
 8009a8c:	a817      	add	r0, sp, #92	; 0x5c
 8009a8e:	f001 fe61 	bl	800b754 <__match>
 8009a92:	2800      	cmp	r0, #0
 8009a94:	f43f aed2 	beq.w	800983c <_strtod_l+0xc4>
 8009a98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009a9a:	781b      	ldrb	r3, [r3, #0]
 8009a9c:	2b28      	cmp	r3, #40	; 0x28
 8009a9e:	d12d      	bne.n	8009afc <_strtod_l+0x384>
 8009aa0:	499a      	ldr	r1, [pc, #616]	; (8009d0c <_strtod_l+0x594>)
 8009aa2:	aa1a      	add	r2, sp, #104	; 0x68
 8009aa4:	a817      	add	r0, sp, #92	; 0x5c
 8009aa6:	f001 fe69 	bl	800b77c <__hexnan>
 8009aaa:	2805      	cmp	r0, #5
 8009aac:	d126      	bne.n	8009afc <_strtod_l+0x384>
 8009aae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009ab0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8009ab4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009ab8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009abc:	e6a0      	b.n	8009800 <_strtod_l+0x88>
 8009abe:	210a      	movs	r1, #10
 8009ac0:	fb01 2e0e 	mla	lr, r1, lr, r2
 8009ac4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009ac8:	e7b9      	b.n	8009a3e <_strtod_l+0x2c6>
 8009aca:	2a6e      	cmp	r2, #110	; 0x6e
 8009acc:	e7db      	b.n	8009a86 <_strtod_l+0x30e>
 8009ace:	4990      	ldr	r1, [pc, #576]	; (8009d10 <_strtod_l+0x598>)
 8009ad0:	a817      	add	r0, sp, #92	; 0x5c
 8009ad2:	f001 fe3f 	bl	800b754 <__match>
 8009ad6:	2800      	cmp	r0, #0
 8009ad8:	f43f aeb0 	beq.w	800983c <_strtod_l+0xc4>
 8009adc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009ade:	498d      	ldr	r1, [pc, #564]	; (8009d14 <_strtod_l+0x59c>)
 8009ae0:	3b01      	subs	r3, #1
 8009ae2:	a817      	add	r0, sp, #92	; 0x5c
 8009ae4:	9317      	str	r3, [sp, #92]	; 0x5c
 8009ae6:	f001 fe35 	bl	800b754 <__match>
 8009aea:	b910      	cbnz	r0, 8009af2 <_strtod_l+0x37a>
 8009aec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009aee:	3301      	adds	r3, #1
 8009af0:	9317      	str	r3, [sp, #92]	; 0x5c
 8009af2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8009d24 <_strtod_l+0x5ac>
 8009af6:	f04f 0a00 	mov.w	sl, #0
 8009afa:	e681      	b.n	8009800 <_strtod_l+0x88>
 8009afc:	4886      	ldr	r0, [pc, #536]	; (8009d18 <_strtod_l+0x5a0>)
 8009afe:	f003 f953 	bl	800cda8 <nan>
 8009b02:	ec5b ab10 	vmov	sl, fp, d0
 8009b06:	e67b      	b.n	8009800 <_strtod_l+0x88>
 8009b08:	9b05      	ldr	r3, [sp, #20]
 8009b0a:	9807      	ldr	r0, [sp, #28]
 8009b0c:	1af3      	subs	r3, r6, r3
 8009b0e:	2f00      	cmp	r7, #0
 8009b10:	bf08      	it	eq
 8009b12:	462f      	moveq	r7, r5
 8009b14:	2d10      	cmp	r5, #16
 8009b16:	9306      	str	r3, [sp, #24]
 8009b18:	46a8      	mov	r8, r5
 8009b1a:	bfa8      	it	ge
 8009b1c:	f04f 0810 	movge.w	r8, #16
 8009b20:	f7f6 fd20 	bl	8000564 <__aeabi_ui2d>
 8009b24:	2d09      	cmp	r5, #9
 8009b26:	4682      	mov	sl, r0
 8009b28:	468b      	mov	fp, r1
 8009b2a:	dd13      	ble.n	8009b54 <_strtod_l+0x3dc>
 8009b2c:	4b7b      	ldr	r3, [pc, #492]	; (8009d1c <_strtod_l+0x5a4>)
 8009b2e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009b32:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009b36:	f7f6 fd8f 	bl	8000658 <__aeabi_dmul>
 8009b3a:	4682      	mov	sl, r0
 8009b3c:	4648      	mov	r0, r9
 8009b3e:	468b      	mov	fp, r1
 8009b40:	f7f6 fd10 	bl	8000564 <__aeabi_ui2d>
 8009b44:	4602      	mov	r2, r0
 8009b46:	460b      	mov	r3, r1
 8009b48:	4650      	mov	r0, sl
 8009b4a:	4659      	mov	r1, fp
 8009b4c:	f7f6 fbce 	bl	80002ec <__adddf3>
 8009b50:	4682      	mov	sl, r0
 8009b52:	468b      	mov	fp, r1
 8009b54:	2d0f      	cmp	r5, #15
 8009b56:	dc38      	bgt.n	8009bca <_strtod_l+0x452>
 8009b58:	9b06      	ldr	r3, [sp, #24]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	f43f ae50 	beq.w	8009800 <_strtod_l+0x88>
 8009b60:	dd24      	ble.n	8009bac <_strtod_l+0x434>
 8009b62:	2b16      	cmp	r3, #22
 8009b64:	dc0b      	bgt.n	8009b7e <_strtod_l+0x406>
 8009b66:	496d      	ldr	r1, [pc, #436]	; (8009d1c <_strtod_l+0x5a4>)
 8009b68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009b6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b70:	4652      	mov	r2, sl
 8009b72:	465b      	mov	r3, fp
 8009b74:	f7f6 fd70 	bl	8000658 <__aeabi_dmul>
 8009b78:	4682      	mov	sl, r0
 8009b7a:	468b      	mov	fp, r1
 8009b7c:	e640      	b.n	8009800 <_strtod_l+0x88>
 8009b7e:	9a06      	ldr	r2, [sp, #24]
 8009b80:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8009b84:	4293      	cmp	r3, r2
 8009b86:	db20      	blt.n	8009bca <_strtod_l+0x452>
 8009b88:	4c64      	ldr	r4, [pc, #400]	; (8009d1c <_strtod_l+0x5a4>)
 8009b8a:	f1c5 050f 	rsb	r5, r5, #15
 8009b8e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009b92:	4652      	mov	r2, sl
 8009b94:	465b      	mov	r3, fp
 8009b96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b9a:	f7f6 fd5d 	bl	8000658 <__aeabi_dmul>
 8009b9e:	9b06      	ldr	r3, [sp, #24]
 8009ba0:	1b5d      	subs	r5, r3, r5
 8009ba2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009ba6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009baa:	e7e3      	b.n	8009b74 <_strtod_l+0x3fc>
 8009bac:	9b06      	ldr	r3, [sp, #24]
 8009bae:	3316      	adds	r3, #22
 8009bb0:	db0b      	blt.n	8009bca <_strtod_l+0x452>
 8009bb2:	9b05      	ldr	r3, [sp, #20]
 8009bb4:	1b9e      	subs	r6, r3, r6
 8009bb6:	4b59      	ldr	r3, [pc, #356]	; (8009d1c <_strtod_l+0x5a4>)
 8009bb8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8009bbc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009bc0:	4650      	mov	r0, sl
 8009bc2:	4659      	mov	r1, fp
 8009bc4:	f7f6 fe72 	bl	80008ac <__aeabi_ddiv>
 8009bc8:	e7d6      	b.n	8009b78 <_strtod_l+0x400>
 8009bca:	9b06      	ldr	r3, [sp, #24]
 8009bcc:	eba5 0808 	sub.w	r8, r5, r8
 8009bd0:	4498      	add	r8, r3
 8009bd2:	f1b8 0f00 	cmp.w	r8, #0
 8009bd6:	dd74      	ble.n	8009cc2 <_strtod_l+0x54a>
 8009bd8:	f018 030f 	ands.w	r3, r8, #15
 8009bdc:	d00a      	beq.n	8009bf4 <_strtod_l+0x47c>
 8009bde:	494f      	ldr	r1, [pc, #316]	; (8009d1c <_strtod_l+0x5a4>)
 8009be0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009be4:	4652      	mov	r2, sl
 8009be6:	465b      	mov	r3, fp
 8009be8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009bec:	f7f6 fd34 	bl	8000658 <__aeabi_dmul>
 8009bf0:	4682      	mov	sl, r0
 8009bf2:	468b      	mov	fp, r1
 8009bf4:	f038 080f 	bics.w	r8, r8, #15
 8009bf8:	d04f      	beq.n	8009c9a <_strtod_l+0x522>
 8009bfa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009bfe:	dd22      	ble.n	8009c46 <_strtod_l+0x4ce>
 8009c00:	2500      	movs	r5, #0
 8009c02:	462e      	mov	r6, r5
 8009c04:	9507      	str	r5, [sp, #28]
 8009c06:	9505      	str	r5, [sp, #20]
 8009c08:	2322      	movs	r3, #34	; 0x22
 8009c0a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8009d24 <_strtod_l+0x5ac>
 8009c0e:	6023      	str	r3, [r4, #0]
 8009c10:	f04f 0a00 	mov.w	sl, #0
 8009c14:	9b07      	ldr	r3, [sp, #28]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	f43f adf2 	beq.w	8009800 <_strtod_l+0x88>
 8009c1c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009c1e:	4620      	mov	r0, r4
 8009c20:	f001 feb8 	bl	800b994 <_Bfree>
 8009c24:	9905      	ldr	r1, [sp, #20]
 8009c26:	4620      	mov	r0, r4
 8009c28:	f001 feb4 	bl	800b994 <_Bfree>
 8009c2c:	4631      	mov	r1, r6
 8009c2e:	4620      	mov	r0, r4
 8009c30:	f001 feb0 	bl	800b994 <_Bfree>
 8009c34:	9907      	ldr	r1, [sp, #28]
 8009c36:	4620      	mov	r0, r4
 8009c38:	f001 feac 	bl	800b994 <_Bfree>
 8009c3c:	4629      	mov	r1, r5
 8009c3e:	4620      	mov	r0, r4
 8009c40:	f001 fea8 	bl	800b994 <_Bfree>
 8009c44:	e5dc      	b.n	8009800 <_strtod_l+0x88>
 8009c46:	4b36      	ldr	r3, [pc, #216]	; (8009d20 <_strtod_l+0x5a8>)
 8009c48:	9304      	str	r3, [sp, #16]
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009c50:	4650      	mov	r0, sl
 8009c52:	4659      	mov	r1, fp
 8009c54:	4699      	mov	r9, r3
 8009c56:	f1b8 0f01 	cmp.w	r8, #1
 8009c5a:	dc21      	bgt.n	8009ca0 <_strtod_l+0x528>
 8009c5c:	b10b      	cbz	r3, 8009c62 <_strtod_l+0x4ea>
 8009c5e:	4682      	mov	sl, r0
 8009c60:	468b      	mov	fp, r1
 8009c62:	4b2f      	ldr	r3, [pc, #188]	; (8009d20 <_strtod_l+0x5a8>)
 8009c64:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009c68:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009c6c:	4652      	mov	r2, sl
 8009c6e:	465b      	mov	r3, fp
 8009c70:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009c74:	f7f6 fcf0 	bl	8000658 <__aeabi_dmul>
 8009c78:	4b2a      	ldr	r3, [pc, #168]	; (8009d24 <_strtod_l+0x5ac>)
 8009c7a:	460a      	mov	r2, r1
 8009c7c:	400b      	ands	r3, r1
 8009c7e:	492a      	ldr	r1, [pc, #168]	; (8009d28 <_strtod_l+0x5b0>)
 8009c80:	428b      	cmp	r3, r1
 8009c82:	4682      	mov	sl, r0
 8009c84:	d8bc      	bhi.n	8009c00 <_strtod_l+0x488>
 8009c86:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009c8a:	428b      	cmp	r3, r1
 8009c8c:	bf86      	itte	hi
 8009c8e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8009d2c <_strtod_l+0x5b4>
 8009c92:	f04f 3aff 	movhi.w	sl, #4294967295
 8009c96:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	9304      	str	r3, [sp, #16]
 8009c9e:	e084      	b.n	8009daa <_strtod_l+0x632>
 8009ca0:	f018 0f01 	tst.w	r8, #1
 8009ca4:	d005      	beq.n	8009cb2 <_strtod_l+0x53a>
 8009ca6:	9b04      	ldr	r3, [sp, #16]
 8009ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cac:	f7f6 fcd4 	bl	8000658 <__aeabi_dmul>
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	9a04      	ldr	r2, [sp, #16]
 8009cb4:	3208      	adds	r2, #8
 8009cb6:	f109 0901 	add.w	r9, r9, #1
 8009cba:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009cbe:	9204      	str	r2, [sp, #16]
 8009cc0:	e7c9      	b.n	8009c56 <_strtod_l+0x4de>
 8009cc2:	d0ea      	beq.n	8009c9a <_strtod_l+0x522>
 8009cc4:	f1c8 0800 	rsb	r8, r8, #0
 8009cc8:	f018 020f 	ands.w	r2, r8, #15
 8009ccc:	d00a      	beq.n	8009ce4 <_strtod_l+0x56c>
 8009cce:	4b13      	ldr	r3, [pc, #76]	; (8009d1c <_strtod_l+0x5a4>)
 8009cd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009cd4:	4650      	mov	r0, sl
 8009cd6:	4659      	mov	r1, fp
 8009cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cdc:	f7f6 fde6 	bl	80008ac <__aeabi_ddiv>
 8009ce0:	4682      	mov	sl, r0
 8009ce2:	468b      	mov	fp, r1
 8009ce4:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009ce8:	d0d7      	beq.n	8009c9a <_strtod_l+0x522>
 8009cea:	f1b8 0f1f 	cmp.w	r8, #31
 8009cee:	dd1f      	ble.n	8009d30 <_strtod_l+0x5b8>
 8009cf0:	2500      	movs	r5, #0
 8009cf2:	462e      	mov	r6, r5
 8009cf4:	9507      	str	r5, [sp, #28]
 8009cf6:	9505      	str	r5, [sp, #20]
 8009cf8:	2322      	movs	r3, #34	; 0x22
 8009cfa:	f04f 0a00 	mov.w	sl, #0
 8009cfe:	f04f 0b00 	mov.w	fp, #0
 8009d02:	6023      	str	r3, [r4, #0]
 8009d04:	e786      	b.n	8009c14 <_strtod_l+0x49c>
 8009d06:	bf00      	nop
 8009d08:	0800dce1 	.word	0x0800dce1
 8009d0c:	0800dd20 	.word	0x0800dd20
 8009d10:	0800dcd9 	.word	0x0800dcd9
 8009d14:	0800de64 	.word	0x0800de64
 8009d18:	0800e12b 	.word	0x0800e12b
 8009d1c:	0800dff0 	.word	0x0800dff0
 8009d20:	0800dfc8 	.word	0x0800dfc8
 8009d24:	7ff00000 	.word	0x7ff00000
 8009d28:	7ca00000 	.word	0x7ca00000
 8009d2c:	7fefffff 	.word	0x7fefffff
 8009d30:	f018 0310 	ands.w	r3, r8, #16
 8009d34:	bf18      	it	ne
 8009d36:	236a      	movne	r3, #106	; 0x6a
 8009d38:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800a0e8 <_strtod_l+0x970>
 8009d3c:	9304      	str	r3, [sp, #16]
 8009d3e:	4650      	mov	r0, sl
 8009d40:	4659      	mov	r1, fp
 8009d42:	2300      	movs	r3, #0
 8009d44:	f018 0f01 	tst.w	r8, #1
 8009d48:	d004      	beq.n	8009d54 <_strtod_l+0x5dc>
 8009d4a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009d4e:	f7f6 fc83 	bl	8000658 <__aeabi_dmul>
 8009d52:	2301      	movs	r3, #1
 8009d54:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009d58:	f109 0908 	add.w	r9, r9, #8
 8009d5c:	d1f2      	bne.n	8009d44 <_strtod_l+0x5cc>
 8009d5e:	b10b      	cbz	r3, 8009d64 <_strtod_l+0x5ec>
 8009d60:	4682      	mov	sl, r0
 8009d62:	468b      	mov	fp, r1
 8009d64:	9b04      	ldr	r3, [sp, #16]
 8009d66:	b1c3      	cbz	r3, 8009d9a <_strtod_l+0x622>
 8009d68:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009d6c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	4659      	mov	r1, fp
 8009d74:	dd11      	ble.n	8009d9a <_strtod_l+0x622>
 8009d76:	2b1f      	cmp	r3, #31
 8009d78:	f340 8124 	ble.w	8009fc4 <_strtod_l+0x84c>
 8009d7c:	2b34      	cmp	r3, #52	; 0x34
 8009d7e:	bfde      	ittt	le
 8009d80:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009d84:	f04f 33ff 	movle.w	r3, #4294967295
 8009d88:	fa03 f202 	lslle.w	r2, r3, r2
 8009d8c:	f04f 0a00 	mov.w	sl, #0
 8009d90:	bfcc      	ite	gt
 8009d92:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009d96:	ea02 0b01 	andle.w	fp, r2, r1
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	4650      	mov	r0, sl
 8009da0:	4659      	mov	r1, fp
 8009da2:	f7f6 fec1 	bl	8000b28 <__aeabi_dcmpeq>
 8009da6:	2800      	cmp	r0, #0
 8009da8:	d1a2      	bne.n	8009cf0 <_strtod_l+0x578>
 8009daa:	9b07      	ldr	r3, [sp, #28]
 8009dac:	9300      	str	r3, [sp, #0]
 8009dae:	9908      	ldr	r1, [sp, #32]
 8009db0:	462b      	mov	r3, r5
 8009db2:	463a      	mov	r2, r7
 8009db4:	4620      	mov	r0, r4
 8009db6:	f001 fe55 	bl	800ba64 <__s2b>
 8009dba:	9007      	str	r0, [sp, #28]
 8009dbc:	2800      	cmp	r0, #0
 8009dbe:	f43f af1f 	beq.w	8009c00 <_strtod_l+0x488>
 8009dc2:	9b05      	ldr	r3, [sp, #20]
 8009dc4:	1b9e      	subs	r6, r3, r6
 8009dc6:	9b06      	ldr	r3, [sp, #24]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	bfb4      	ite	lt
 8009dcc:	4633      	movlt	r3, r6
 8009dce:	2300      	movge	r3, #0
 8009dd0:	930c      	str	r3, [sp, #48]	; 0x30
 8009dd2:	9b06      	ldr	r3, [sp, #24]
 8009dd4:	2500      	movs	r5, #0
 8009dd6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009dda:	9312      	str	r3, [sp, #72]	; 0x48
 8009ddc:	462e      	mov	r6, r5
 8009dde:	9b07      	ldr	r3, [sp, #28]
 8009de0:	4620      	mov	r0, r4
 8009de2:	6859      	ldr	r1, [r3, #4]
 8009de4:	f001 fd96 	bl	800b914 <_Balloc>
 8009de8:	9005      	str	r0, [sp, #20]
 8009dea:	2800      	cmp	r0, #0
 8009dec:	f43f af0c 	beq.w	8009c08 <_strtod_l+0x490>
 8009df0:	9b07      	ldr	r3, [sp, #28]
 8009df2:	691a      	ldr	r2, [r3, #16]
 8009df4:	3202      	adds	r2, #2
 8009df6:	f103 010c 	add.w	r1, r3, #12
 8009dfa:	0092      	lsls	r2, r2, #2
 8009dfc:	300c      	adds	r0, #12
 8009dfe:	f7fe fd75 	bl	80088ec <memcpy>
 8009e02:	ec4b ab10 	vmov	d0, sl, fp
 8009e06:	aa1a      	add	r2, sp, #104	; 0x68
 8009e08:	a919      	add	r1, sp, #100	; 0x64
 8009e0a:	4620      	mov	r0, r4
 8009e0c:	f002 f970 	bl	800c0f0 <__d2b>
 8009e10:	ec4b ab18 	vmov	d8, sl, fp
 8009e14:	9018      	str	r0, [sp, #96]	; 0x60
 8009e16:	2800      	cmp	r0, #0
 8009e18:	f43f aef6 	beq.w	8009c08 <_strtod_l+0x490>
 8009e1c:	2101      	movs	r1, #1
 8009e1e:	4620      	mov	r0, r4
 8009e20:	f001 feba 	bl	800bb98 <__i2b>
 8009e24:	4606      	mov	r6, r0
 8009e26:	2800      	cmp	r0, #0
 8009e28:	f43f aeee 	beq.w	8009c08 <_strtod_l+0x490>
 8009e2c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009e2e:	9904      	ldr	r1, [sp, #16]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	bfab      	itete	ge
 8009e34:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8009e36:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009e38:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009e3a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8009e3e:	bfac      	ite	ge
 8009e40:	eb03 0902 	addge.w	r9, r3, r2
 8009e44:	1ad7      	sublt	r7, r2, r3
 8009e46:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009e48:	eba3 0801 	sub.w	r8, r3, r1
 8009e4c:	4490      	add	r8, r2
 8009e4e:	4ba1      	ldr	r3, [pc, #644]	; (800a0d4 <_strtod_l+0x95c>)
 8009e50:	f108 38ff 	add.w	r8, r8, #4294967295
 8009e54:	4598      	cmp	r8, r3
 8009e56:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009e5a:	f280 80c7 	bge.w	8009fec <_strtod_l+0x874>
 8009e5e:	eba3 0308 	sub.w	r3, r3, r8
 8009e62:	2b1f      	cmp	r3, #31
 8009e64:	eba2 0203 	sub.w	r2, r2, r3
 8009e68:	f04f 0101 	mov.w	r1, #1
 8009e6c:	f300 80b1 	bgt.w	8009fd2 <_strtod_l+0x85a>
 8009e70:	fa01 f303 	lsl.w	r3, r1, r3
 8009e74:	930d      	str	r3, [sp, #52]	; 0x34
 8009e76:	2300      	movs	r3, #0
 8009e78:	9308      	str	r3, [sp, #32]
 8009e7a:	eb09 0802 	add.w	r8, r9, r2
 8009e7e:	9b04      	ldr	r3, [sp, #16]
 8009e80:	45c1      	cmp	r9, r8
 8009e82:	4417      	add	r7, r2
 8009e84:	441f      	add	r7, r3
 8009e86:	464b      	mov	r3, r9
 8009e88:	bfa8      	it	ge
 8009e8a:	4643      	movge	r3, r8
 8009e8c:	42bb      	cmp	r3, r7
 8009e8e:	bfa8      	it	ge
 8009e90:	463b      	movge	r3, r7
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	bfc2      	ittt	gt
 8009e96:	eba8 0803 	subgt.w	r8, r8, r3
 8009e9a:	1aff      	subgt	r7, r7, r3
 8009e9c:	eba9 0903 	subgt.w	r9, r9, r3
 8009ea0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	dd17      	ble.n	8009ed6 <_strtod_l+0x75e>
 8009ea6:	4631      	mov	r1, r6
 8009ea8:	461a      	mov	r2, r3
 8009eaa:	4620      	mov	r0, r4
 8009eac:	f001 ff34 	bl	800bd18 <__pow5mult>
 8009eb0:	4606      	mov	r6, r0
 8009eb2:	2800      	cmp	r0, #0
 8009eb4:	f43f aea8 	beq.w	8009c08 <_strtod_l+0x490>
 8009eb8:	4601      	mov	r1, r0
 8009eba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009ebc:	4620      	mov	r0, r4
 8009ebe:	f001 fe81 	bl	800bbc4 <__multiply>
 8009ec2:	900b      	str	r0, [sp, #44]	; 0x2c
 8009ec4:	2800      	cmp	r0, #0
 8009ec6:	f43f ae9f 	beq.w	8009c08 <_strtod_l+0x490>
 8009eca:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009ecc:	4620      	mov	r0, r4
 8009ece:	f001 fd61 	bl	800b994 <_Bfree>
 8009ed2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ed4:	9318      	str	r3, [sp, #96]	; 0x60
 8009ed6:	f1b8 0f00 	cmp.w	r8, #0
 8009eda:	f300 808c 	bgt.w	8009ff6 <_strtod_l+0x87e>
 8009ede:	9b06      	ldr	r3, [sp, #24]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	dd08      	ble.n	8009ef6 <_strtod_l+0x77e>
 8009ee4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009ee6:	9905      	ldr	r1, [sp, #20]
 8009ee8:	4620      	mov	r0, r4
 8009eea:	f001 ff15 	bl	800bd18 <__pow5mult>
 8009eee:	9005      	str	r0, [sp, #20]
 8009ef0:	2800      	cmp	r0, #0
 8009ef2:	f43f ae89 	beq.w	8009c08 <_strtod_l+0x490>
 8009ef6:	2f00      	cmp	r7, #0
 8009ef8:	dd08      	ble.n	8009f0c <_strtod_l+0x794>
 8009efa:	9905      	ldr	r1, [sp, #20]
 8009efc:	463a      	mov	r2, r7
 8009efe:	4620      	mov	r0, r4
 8009f00:	f001 ff64 	bl	800bdcc <__lshift>
 8009f04:	9005      	str	r0, [sp, #20]
 8009f06:	2800      	cmp	r0, #0
 8009f08:	f43f ae7e 	beq.w	8009c08 <_strtod_l+0x490>
 8009f0c:	f1b9 0f00 	cmp.w	r9, #0
 8009f10:	dd08      	ble.n	8009f24 <_strtod_l+0x7ac>
 8009f12:	4631      	mov	r1, r6
 8009f14:	464a      	mov	r2, r9
 8009f16:	4620      	mov	r0, r4
 8009f18:	f001 ff58 	bl	800bdcc <__lshift>
 8009f1c:	4606      	mov	r6, r0
 8009f1e:	2800      	cmp	r0, #0
 8009f20:	f43f ae72 	beq.w	8009c08 <_strtod_l+0x490>
 8009f24:	9a05      	ldr	r2, [sp, #20]
 8009f26:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009f28:	4620      	mov	r0, r4
 8009f2a:	f001 ffdb 	bl	800bee4 <__mdiff>
 8009f2e:	4605      	mov	r5, r0
 8009f30:	2800      	cmp	r0, #0
 8009f32:	f43f ae69 	beq.w	8009c08 <_strtod_l+0x490>
 8009f36:	68c3      	ldr	r3, [r0, #12]
 8009f38:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	60c3      	str	r3, [r0, #12]
 8009f3e:	4631      	mov	r1, r6
 8009f40:	f001 ffb4 	bl	800beac <__mcmp>
 8009f44:	2800      	cmp	r0, #0
 8009f46:	da60      	bge.n	800a00a <_strtod_l+0x892>
 8009f48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f4a:	ea53 030a 	orrs.w	r3, r3, sl
 8009f4e:	f040 8082 	bne.w	800a056 <_strtod_l+0x8de>
 8009f52:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d17d      	bne.n	800a056 <_strtod_l+0x8de>
 8009f5a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009f5e:	0d1b      	lsrs	r3, r3, #20
 8009f60:	051b      	lsls	r3, r3, #20
 8009f62:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009f66:	d976      	bls.n	800a056 <_strtod_l+0x8de>
 8009f68:	696b      	ldr	r3, [r5, #20]
 8009f6a:	b913      	cbnz	r3, 8009f72 <_strtod_l+0x7fa>
 8009f6c:	692b      	ldr	r3, [r5, #16]
 8009f6e:	2b01      	cmp	r3, #1
 8009f70:	dd71      	ble.n	800a056 <_strtod_l+0x8de>
 8009f72:	4629      	mov	r1, r5
 8009f74:	2201      	movs	r2, #1
 8009f76:	4620      	mov	r0, r4
 8009f78:	f001 ff28 	bl	800bdcc <__lshift>
 8009f7c:	4631      	mov	r1, r6
 8009f7e:	4605      	mov	r5, r0
 8009f80:	f001 ff94 	bl	800beac <__mcmp>
 8009f84:	2800      	cmp	r0, #0
 8009f86:	dd66      	ble.n	800a056 <_strtod_l+0x8de>
 8009f88:	9904      	ldr	r1, [sp, #16]
 8009f8a:	4a53      	ldr	r2, [pc, #332]	; (800a0d8 <_strtod_l+0x960>)
 8009f8c:	465b      	mov	r3, fp
 8009f8e:	2900      	cmp	r1, #0
 8009f90:	f000 8081 	beq.w	800a096 <_strtod_l+0x91e>
 8009f94:	ea02 010b 	and.w	r1, r2, fp
 8009f98:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009f9c:	dc7b      	bgt.n	800a096 <_strtod_l+0x91e>
 8009f9e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009fa2:	f77f aea9 	ble.w	8009cf8 <_strtod_l+0x580>
 8009fa6:	4b4d      	ldr	r3, [pc, #308]	; (800a0dc <_strtod_l+0x964>)
 8009fa8:	4650      	mov	r0, sl
 8009faa:	4659      	mov	r1, fp
 8009fac:	2200      	movs	r2, #0
 8009fae:	f7f6 fb53 	bl	8000658 <__aeabi_dmul>
 8009fb2:	460b      	mov	r3, r1
 8009fb4:	4303      	orrs	r3, r0
 8009fb6:	bf08      	it	eq
 8009fb8:	2322      	moveq	r3, #34	; 0x22
 8009fba:	4682      	mov	sl, r0
 8009fbc:	468b      	mov	fp, r1
 8009fbe:	bf08      	it	eq
 8009fc0:	6023      	streq	r3, [r4, #0]
 8009fc2:	e62b      	b.n	8009c1c <_strtod_l+0x4a4>
 8009fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8009fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8009fcc:	ea03 0a0a 	and.w	sl, r3, sl
 8009fd0:	e6e3      	b.n	8009d9a <_strtod_l+0x622>
 8009fd2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009fd6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009fda:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009fde:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009fe2:	fa01 f308 	lsl.w	r3, r1, r8
 8009fe6:	9308      	str	r3, [sp, #32]
 8009fe8:	910d      	str	r1, [sp, #52]	; 0x34
 8009fea:	e746      	b.n	8009e7a <_strtod_l+0x702>
 8009fec:	2300      	movs	r3, #0
 8009fee:	9308      	str	r3, [sp, #32]
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	930d      	str	r3, [sp, #52]	; 0x34
 8009ff4:	e741      	b.n	8009e7a <_strtod_l+0x702>
 8009ff6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009ff8:	4642      	mov	r2, r8
 8009ffa:	4620      	mov	r0, r4
 8009ffc:	f001 fee6 	bl	800bdcc <__lshift>
 800a000:	9018      	str	r0, [sp, #96]	; 0x60
 800a002:	2800      	cmp	r0, #0
 800a004:	f47f af6b 	bne.w	8009ede <_strtod_l+0x766>
 800a008:	e5fe      	b.n	8009c08 <_strtod_l+0x490>
 800a00a:	465f      	mov	r7, fp
 800a00c:	d16e      	bne.n	800a0ec <_strtod_l+0x974>
 800a00e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a010:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a014:	b342      	cbz	r2, 800a068 <_strtod_l+0x8f0>
 800a016:	4a32      	ldr	r2, [pc, #200]	; (800a0e0 <_strtod_l+0x968>)
 800a018:	4293      	cmp	r3, r2
 800a01a:	d128      	bne.n	800a06e <_strtod_l+0x8f6>
 800a01c:	9b04      	ldr	r3, [sp, #16]
 800a01e:	4651      	mov	r1, sl
 800a020:	b1eb      	cbz	r3, 800a05e <_strtod_l+0x8e6>
 800a022:	4b2d      	ldr	r3, [pc, #180]	; (800a0d8 <_strtod_l+0x960>)
 800a024:	403b      	ands	r3, r7
 800a026:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a02a:	f04f 32ff 	mov.w	r2, #4294967295
 800a02e:	d819      	bhi.n	800a064 <_strtod_l+0x8ec>
 800a030:	0d1b      	lsrs	r3, r3, #20
 800a032:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a036:	fa02 f303 	lsl.w	r3, r2, r3
 800a03a:	4299      	cmp	r1, r3
 800a03c:	d117      	bne.n	800a06e <_strtod_l+0x8f6>
 800a03e:	4b29      	ldr	r3, [pc, #164]	; (800a0e4 <_strtod_l+0x96c>)
 800a040:	429f      	cmp	r7, r3
 800a042:	d102      	bne.n	800a04a <_strtod_l+0x8d2>
 800a044:	3101      	adds	r1, #1
 800a046:	f43f addf 	beq.w	8009c08 <_strtod_l+0x490>
 800a04a:	4b23      	ldr	r3, [pc, #140]	; (800a0d8 <_strtod_l+0x960>)
 800a04c:	403b      	ands	r3, r7
 800a04e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a052:	f04f 0a00 	mov.w	sl, #0
 800a056:	9b04      	ldr	r3, [sp, #16]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d1a4      	bne.n	8009fa6 <_strtod_l+0x82e>
 800a05c:	e5de      	b.n	8009c1c <_strtod_l+0x4a4>
 800a05e:	f04f 33ff 	mov.w	r3, #4294967295
 800a062:	e7ea      	b.n	800a03a <_strtod_l+0x8c2>
 800a064:	4613      	mov	r3, r2
 800a066:	e7e8      	b.n	800a03a <_strtod_l+0x8c2>
 800a068:	ea53 030a 	orrs.w	r3, r3, sl
 800a06c:	d08c      	beq.n	8009f88 <_strtod_l+0x810>
 800a06e:	9b08      	ldr	r3, [sp, #32]
 800a070:	b1db      	cbz	r3, 800a0aa <_strtod_l+0x932>
 800a072:	423b      	tst	r3, r7
 800a074:	d0ef      	beq.n	800a056 <_strtod_l+0x8de>
 800a076:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a078:	9a04      	ldr	r2, [sp, #16]
 800a07a:	4650      	mov	r0, sl
 800a07c:	4659      	mov	r1, fp
 800a07e:	b1c3      	cbz	r3, 800a0b2 <_strtod_l+0x93a>
 800a080:	f7ff fb5b 	bl	800973a <sulp>
 800a084:	4602      	mov	r2, r0
 800a086:	460b      	mov	r3, r1
 800a088:	ec51 0b18 	vmov	r0, r1, d8
 800a08c:	f7f6 f92e 	bl	80002ec <__adddf3>
 800a090:	4682      	mov	sl, r0
 800a092:	468b      	mov	fp, r1
 800a094:	e7df      	b.n	800a056 <_strtod_l+0x8de>
 800a096:	4013      	ands	r3, r2
 800a098:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a09c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a0a0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a0a4:	f04f 3aff 	mov.w	sl, #4294967295
 800a0a8:	e7d5      	b.n	800a056 <_strtod_l+0x8de>
 800a0aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0ac:	ea13 0f0a 	tst.w	r3, sl
 800a0b0:	e7e0      	b.n	800a074 <_strtod_l+0x8fc>
 800a0b2:	f7ff fb42 	bl	800973a <sulp>
 800a0b6:	4602      	mov	r2, r0
 800a0b8:	460b      	mov	r3, r1
 800a0ba:	ec51 0b18 	vmov	r0, r1, d8
 800a0be:	f7f6 f913 	bl	80002e8 <__aeabi_dsub>
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	4682      	mov	sl, r0
 800a0c8:	468b      	mov	fp, r1
 800a0ca:	f7f6 fd2d 	bl	8000b28 <__aeabi_dcmpeq>
 800a0ce:	2800      	cmp	r0, #0
 800a0d0:	d0c1      	beq.n	800a056 <_strtod_l+0x8de>
 800a0d2:	e611      	b.n	8009cf8 <_strtod_l+0x580>
 800a0d4:	fffffc02 	.word	0xfffffc02
 800a0d8:	7ff00000 	.word	0x7ff00000
 800a0dc:	39500000 	.word	0x39500000
 800a0e0:	000fffff 	.word	0x000fffff
 800a0e4:	7fefffff 	.word	0x7fefffff
 800a0e8:	0800dd38 	.word	0x0800dd38
 800a0ec:	4631      	mov	r1, r6
 800a0ee:	4628      	mov	r0, r5
 800a0f0:	f002 f85a 	bl	800c1a8 <__ratio>
 800a0f4:	ec59 8b10 	vmov	r8, r9, d0
 800a0f8:	ee10 0a10 	vmov	r0, s0
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a102:	4649      	mov	r1, r9
 800a104:	f7f6 fd24 	bl	8000b50 <__aeabi_dcmple>
 800a108:	2800      	cmp	r0, #0
 800a10a:	d07a      	beq.n	800a202 <_strtod_l+0xa8a>
 800a10c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d04a      	beq.n	800a1a8 <_strtod_l+0xa30>
 800a112:	4b95      	ldr	r3, [pc, #596]	; (800a368 <_strtod_l+0xbf0>)
 800a114:	2200      	movs	r2, #0
 800a116:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a11a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800a368 <_strtod_l+0xbf0>
 800a11e:	f04f 0800 	mov.w	r8, #0
 800a122:	4b92      	ldr	r3, [pc, #584]	; (800a36c <_strtod_l+0xbf4>)
 800a124:	403b      	ands	r3, r7
 800a126:	930d      	str	r3, [sp, #52]	; 0x34
 800a128:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a12a:	4b91      	ldr	r3, [pc, #580]	; (800a370 <_strtod_l+0xbf8>)
 800a12c:	429a      	cmp	r2, r3
 800a12e:	f040 80b0 	bne.w	800a292 <_strtod_l+0xb1a>
 800a132:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a136:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800a13a:	ec4b ab10 	vmov	d0, sl, fp
 800a13e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a142:	f001 ff59 	bl	800bff8 <__ulp>
 800a146:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a14a:	ec53 2b10 	vmov	r2, r3, d0
 800a14e:	f7f6 fa83 	bl	8000658 <__aeabi_dmul>
 800a152:	4652      	mov	r2, sl
 800a154:	465b      	mov	r3, fp
 800a156:	f7f6 f8c9 	bl	80002ec <__adddf3>
 800a15a:	460b      	mov	r3, r1
 800a15c:	4983      	ldr	r1, [pc, #524]	; (800a36c <_strtod_l+0xbf4>)
 800a15e:	4a85      	ldr	r2, [pc, #532]	; (800a374 <_strtod_l+0xbfc>)
 800a160:	4019      	ands	r1, r3
 800a162:	4291      	cmp	r1, r2
 800a164:	4682      	mov	sl, r0
 800a166:	d960      	bls.n	800a22a <_strtod_l+0xab2>
 800a168:	ee18 3a90 	vmov	r3, s17
 800a16c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a170:	4293      	cmp	r3, r2
 800a172:	d104      	bne.n	800a17e <_strtod_l+0xa06>
 800a174:	ee18 3a10 	vmov	r3, s16
 800a178:	3301      	adds	r3, #1
 800a17a:	f43f ad45 	beq.w	8009c08 <_strtod_l+0x490>
 800a17e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800a380 <_strtod_l+0xc08>
 800a182:	f04f 3aff 	mov.w	sl, #4294967295
 800a186:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a188:	4620      	mov	r0, r4
 800a18a:	f001 fc03 	bl	800b994 <_Bfree>
 800a18e:	9905      	ldr	r1, [sp, #20]
 800a190:	4620      	mov	r0, r4
 800a192:	f001 fbff 	bl	800b994 <_Bfree>
 800a196:	4631      	mov	r1, r6
 800a198:	4620      	mov	r0, r4
 800a19a:	f001 fbfb 	bl	800b994 <_Bfree>
 800a19e:	4629      	mov	r1, r5
 800a1a0:	4620      	mov	r0, r4
 800a1a2:	f001 fbf7 	bl	800b994 <_Bfree>
 800a1a6:	e61a      	b.n	8009dde <_strtod_l+0x666>
 800a1a8:	f1ba 0f00 	cmp.w	sl, #0
 800a1ac:	d11b      	bne.n	800a1e6 <_strtod_l+0xa6e>
 800a1ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a1b2:	b9f3      	cbnz	r3, 800a1f2 <_strtod_l+0xa7a>
 800a1b4:	4b6c      	ldr	r3, [pc, #432]	; (800a368 <_strtod_l+0xbf0>)
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	4640      	mov	r0, r8
 800a1ba:	4649      	mov	r1, r9
 800a1bc:	f7f6 fcbe 	bl	8000b3c <__aeabi_dcmplt>
 800a1c0:	b9d0      	cbnz	r0, 800a1f8 <_strtod_l+0xa80>
 800a1c2:	4640      	mov	r0, r8
 800a1c4:	4649      	mov	r1, r9
 800a1c6:	4b6c      	ldr	r3, [pc, #432]	; (800a378 <_strtod_l+0xc00>)
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	f7f6 fa45 	bl	8000658 <__aeabi_dmul>
 800a1ce:	4680      	mov	r8, r0
 800a1d0:	4689      	mov	r9, r1
 800a1d2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a1d6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800a1da:	9315      	str	r3, [sp, #84]	; 0x54
 800a1dc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a1e0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a1e4:	e79d      	b.n	800a122 <_strtod_l+0x9aa>
 800a1e6:	f1ba 0f01 	cmp.w	sl, #1
 800a1ea:	d102      	bne.n	800a1f2 <_strtod_l+0xa7a>
 800a1ec:	2f00      	cmp	r7, #0
 800a1ee:	f43f ad83 	beq.w	8009cf8 <_strtod_l+0x580>
 800a1f2:	4b62      	ldr	r3, [pc, #392]	; (800a37c <_strtod_l+0xc04>)
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	e78e      	b.n	800a116 <_strtod_l+0x99e>
 800a1f8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800a378 <_strtod_l+0xc00>
 800a1fc:	f04f 0800 	mov.w	r8, #0
 800a200:	e7e7      	b.n	800a1d2 <_strtod_l+0xa5a>
 800a202:	4b5d      	ldr	r3, [pc, #372]	; (800a378 <_strtod_l+0xc00>)
 800a204:	4640      	mov	r0, r8
 800a206:	4649      	mov	r1, r9
 800a208:	2200      	movs	r2, #0
 800a20a:	f7f6 fa25 	bl	8000658 <__aeabi_dmul>
 800a20e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a210:	4680      	mov	r8, r0
 800a212:	4689      	mov	r9, r1
 800a214:	b933      	cbnz	r3, 800a224 <_strtod_l+0xaac>
 800a216:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a21a:	900e      	str	r0, [sp, #56]	; 0x38
 800a21c:	930f      	str	r3, [sp, #60]	; 0x3c
 800a21e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a222:	e7dd      	b.n	800a1e0 <_strtod_l+0xa68>
 800a224:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800a228:	e7f9      	b.n	800a21e <_strtod_l+0xaa6>
 800a22a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a22e:	9b04      	ldr	r3, [sp, #16]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d1a8      	bne.n	800a186 <_strtod_l+0xa0e>
 800a234:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a238:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a23a:	0d1b      	lsrs	r3, r3, #20
 800a23c:	051b      	lsls	r3, r3, #20
 800a23e:	429a      	cmp	r2, r3
 800a240:	d1a1      	bne.n	800a186 <_strtod_l+0xa0e>
 800a242:	4640      	mov	r0, r8
 800a244:	4649      	mov	r1, r9
 800a246:	f7f6 fd67 	bl	8000d18 <__aeabi_d2lz>
 800a24a:	f7f6 f9d7 	bl	80005fc <__aeabi_l2d>
 800a24e:	4602      	mov	r2, r0
 800a250:	460b      	mov	r3, r1
 800a252:	4640      	mov	r0, r8
 800a254:	4649      	mov	r1, r9
 800a256:	f7f6 f847 	bl	80002e8 <__aeabi_dsub>
 800a25a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a25c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a260:	ea43 030a 	orr.w	r3, r3, sl
 800a264:	4313      	orrs	r3, r2
 800a266:	4680      	mov	r8, r0
 800a268:	4689      	mov	r9, r1
 800a26a:	d055      	beq.n	800a318 <_strtod_l+0xba0>
 800a26c:	a336      	add	r3, pc, #216	; (adr r3, 800a348 <_strtod_l+0xbd0>)
 800a26e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a272:	f7f6 fc63 	bl	8000b3c <__aeabi_dcmplt>
 800a276:	2800      	cmp	r0, #0
 800a278:	f47f acd0 	bne.w	8009c1c <_strtod_l+0x4a4>
 800a27c:	a334      	add	r3, pc, #208	; (adr r3, 800a350 <_strtod_l+0xbd8>)
 800a27e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a282:	4640      	mov	r0, r8
 800a284:	4649      	mov	r1, r9
 800a286:	f7f6 fc77 	bl	8000b78 <__aeabi_dcmpgt>
 800a28a:	2800      	cmp	r0, #0
 800a28c:	f43f af7b 	beq.w	800a186 <_strtod_l+0xa0e>
 800a290:	e4c4      	b.n	8009c1c <_strtod_l+0x4a4>
 800a292:	9b04      	ldr	r3, [sp, #16]
 800a294:	b333      	cbz	r3, 800a2e4 <_strtod_l+0xb6c>
 800a296:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a298:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a29c:	d822      	bhi.n	800a2e4 <_strtod_l+0xb6c>
 800a29e:	a32e      	add	r3, pc, #184	; (adr r3, 800a358 <_strtod_l+0xbe0>)
 800a2a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a4:	4640      	mov	r0, r8
 800a2a6:	4649      	mov	r1, r9
 800a2a8:	f7f6 fc52 	bl	8000b50 <__aeabi_dcmple>
 800a2ac:	b1a0      	cbz	r0, 800a2d8 <_strtod_l+0xb60>
 800a2ae:	4649      	mov	r1, r9
 800a2b0:	4640      	mov	r0, r8
 800a2b2:	f7f6 fca9 	bl	8000c08 <__aeabi_d2uiz>
 800a2b6:	2801      	cmp	r0, #1
 800a2b8:	bf38      	it	cc
 800a2ba:	2001      	movcc	r0, #1
 800a2bc:	f7f6 f952 	bl	8000564 <__aeabi_ui2d>
 800a2c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2c2:	4680      	mov	r8, r0
 800a2c4:	4689      	mov	r9, r1
 800a2c6:	bb23      	cbnz	r3, 800a312 <_strtod_l+0xb9a>
 800a2c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a2cc:	9010      	str	r0, [sp, #64]	; 0x40
 800a2ce:	9311      	str	r3, [sp, #68]	; 0x44
 800a2d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a2d4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a2d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a2dc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a2e0:	1a9b      	subs	r3, r3, r2
 800a2e2:	9309      	str	r3, [sp, #36]	; 0x24
 800a2e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a2e8:	eeb0 0a48 	vmov.f32	s0, s16
 800a2ec:	eef0 0a68 	vmov.f32	s1, s17
 800a2f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a2f4:	f001 fe80 	bl	800bff8 <__ulp>
 800a2f8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a2fc:	ec53 2b10 	vmov	r2, r3, d0
 800a300:	f7f6 f9aa 	bl	8000658 <__aeabi_dmul>
 800a304:	ec53 2b18 	vmov	r2, r3, d8
 800a308:	f7f5 fff0 	bl	80002ec <__adddf3>
 800a30c:	4682      	mov	sl, r0
 800a30e:	468b      	mov	fp, r1
 800a310:	e78d      	b.n	800a22e <_strtod_l+0xab6>
 800a312:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800a316:	e7db      	b.n	800a2d0 <_strtod_l+0xb58>
 800a318:	a311      	add	r3, pc, #68	; (adr r3, 800a360 <_strtod_l+0xbe8>)
 800a31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a31e:	f7f6 fc0d 	bl	8000b3c <__aeabi_dcmplt>
 800a322:	e7b2      	b.n	800a28a <_strtod_l+0xb12>
 800a324:	2300      	movs	r3, #0
 800a326:	930a      	str	r3, [sp, #40]	; 0x28
 800a328:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a32a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a32c:	6013      	str	r3, [r2, #0]
 800a32e:	f7ff ba6b 	b.w	8009808 <_strtod_l+0x90>
 800a332:	2a65      	cmp	r2, #101	; 0x65
 800a334:	f43f ab5f 	beq.w	80099f6 <_strtod_l+0x27e>
 800a338:	2a45      	cmp	r2, #69	; 0x45
 800a33a:	f43f ab5c 	beq.w	80099f6 <_strtod_l+0x27e>
 800a33e:	2301      	movs	r3, #1
 800a340:	f7ff bb94 	b.w	8009a6c <_strtod_l+0x2f4>
 800a344:	f3af 8000 	nop.w
 800a348:	94a03595 	.word	0x94a03595
 800a34c:	3fdfffff 	.word	0x3fdfffff
 800a350:	35afe535 	.word	0x35afe535
 800a354:	3fe00000 	.word	0x3fe00000
 800a358:	ffc00000 	.word	0xffc00000
 800a35c:	41dfffff 	.word	0x41dfffff
 800a360:	94a03595 	.word	0x94a03595
 800a364:	3fcfffff 	.word	0x3fcfffff
 800a368:	3ff00000 	.word	0x3ff00000
 800a36c:	7ff00000 	.word	0x7ff00000
 800a370:	7fe00000 	.word	0x7fe00000
 800a374:	7c9fffff 	.word	0x7c9fffff
 800a378:	3fe00000 	.word	0x3fe00000
 800a37c:	bff00000 	.word	0xbff00000
 800a380:	7fefffff 	.word	0x7fefffff

0800a384 <_strtod_r>:
 800a384:	4b01      	ldr	r3, [pc, #4]	; (800a38c <_strtod_r+0x8>)
 800a386:	f7ff b9f7 	b.w	8009778 <_strtod_l>
 800a38a:	bf00      	nop
 800a38c:	20000074 	.word	0x20000074

0800a390 <_strtol_l.constprop.0>:
 800a390:	2b01      	cmp	r3, #1
 800a392:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a396:	d001      	beq.n	800a39c <_strtol_l.constprop.0+0xc>
 800a398:	2b24      	cmp	r3, #36	; 0x24
 800a39a:	d906      	bls.n	800a3aa <_strtol_l.constprop.0+0x1a>
 800a39c:	f7fe fa7c 	bl	8008898 <__errno>
 800a3a0:	2316      	movs	r3, #22
 800a3a2:	6003      	str	r3, [r0, #0]
 800a3a4:	2000      	movs	r0, #0
 800a3a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3aa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a490 <_strtol_l.constprop.0+0x100>
 800a3ae:	460d      	mov	r5, r1
 800a3b0:	462e      	mov	r6, r5
 800a3b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a3b6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a3ba:	f017 0708 	ands.w	r7, r7, #8
 800a3be:	d1f7      	bne.n	800a3b0 <_strtol_l.constprop.0+0x20>
 800a3c0:	2c2d      	cmp	r4, #45	; 0x2d
 800a3c2:	d132      	bne.n	800a42a <_strtol_l.constprop.0+0x9a>
 800a3c4:	782c      	ldrb	r4, [r5, #0]
 800a3c6:	2701      	movs	r7, #1
 800a3c8:	1cb5      	adds	r5, r6, #2
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d05b      	beq.n	800a486 <_strtol_l.constprop.0+0xf6>
 800a3ce:	2b10      	cmp	r3, #16
 800a3d0:	d109      	bne.n	800a3e6 <_strtol_l.constprop.0+0x56>
 800a3d2:	2c30      	cmp	r4, #48	; 0x30
 800a3d4:	d107      	bne.n	800a3e6 <_strtol_l.constprop.0+0x56>
 800a3d6:	782c      	ldrb	r4, [r5, #0]
 800a3d8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a3dc:	2c58      	cmp	r4, #88	; 0x58
 800a3de:	d14d      	bne.n	800a47c <_strtol_l.constprop.0+0xec>
 800a3e0:	786c      	ldrb	r4, [r5, #1]
 800a3e2:	2310      	movs	r3, #16
 800a3e4:	3502      	adds	r5, #2
 800a3e6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a3ea:	f108 38ff 	add.w	r8, r8, #4294967295
 800a3ee:	f04f 0c00 	mov.w	ip, #0
 800a3f2:	fbb8 f9f3 	udiv	r9, r8, r3
 800a3f6:	4666      	mov	r6, ip
 800a3f8:	fb03 8a19 	mls	sl, r3, r9, r8
 800a3fc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a400:	f1be 0f09 	cmp.w	lr, #9
 800a404:	d816      	bhi.n	800a434 <_strtol_l.constprop.0+0xa4>
 800a406:	4674      	mov	r4, lr
 800a408:	42a3      	cmp	r3, r4
 800a40a:	dd24      	ble.n	800a456 <_strtol_l.constprop.0+0xc6>
 800a40c:	f1bc 0f00 	cmp.w	ip, #0
 800a410:	db1e      	blt.n	800a450 <_strtol_l.constprop.0+0xc0>
 800a412:	45b1      	cmp	r9, r6
 800a414:	d31c      	bcc.n	800a450 <_strtol_l.constprop.0+0xc0>
 800a416:	d101      	bne.n	800a41c <_strtol_l.constprop.0+0x8c>
 800a418:	45a2      	cmp	sl, r4
 800a41a:	db19      	blt.n	800a450 <_strtol_l.constprop.0+0xc0>
 800a41c:	fb06 4603 	mla	r6, r6, r3, r4
 800a420:	f04f 0c01 	mov.w	ip, #1
 800a424:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a428:	e7e8      	b.n	800a3fc <_strtol_l.constprop.0+0x6c>
 800a42a:	2c2b      	cmp	r4, #43	; 0x2b
 800a42c:	bf04      	itt	eq
 800a42e:	782c      	ldrbeq	r4, [r5, #0]
 800a430:	1cb5      	addeq	r5, r6, #2
 800a432:	e7ca      	b.n	800a3ca <_strtol_l.constprop.0+0x3a>
 800a434:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a438:	f1be 0f19 	cmp.w	lr, #25
 800a43c:	d801      	bhi.n	800a442 <_strtol_l.constprop.0+0xb2>
 800a43e:	3c37      	subs	r4, #55	; 0x37
 800a440:	e7e2      	b.n	800a408 <_strtol_l.constprop.0+0x78>
 800a442:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a446:	f1be 0f19 	cmp.w	lr, #25
 800a44a:	d804      	bhi.n	800a456 <_strtol_l.constprop.0+0xc6>
 800a44c:	3c57      	subs	r4, #87	; 0x57
 800a44e:	e7db      	b.n	800a408 <_strtol_l.constprop.0+0x78>
 800a450:	f04f 3cff 	mov.w	ip, #4294967295
 800a454:	e7e6      	b.n	800a424 <_strtol_l.constprop.0+0x94>
 800a456:	f1bc 0f00 	cmp.w	ip, #0
 800a45a:	da05      	bge.n	800a468 <_strtol_l.constprop.0+0xd8>
 800a45c:	2322      	movs	r3, #34	; 0x22
 800a45e:	6003      	str	r3, [r0, #0]
 800a460:	4646      	mov	r6, r8
 800a462:	b942      	cbnz	r2, 800a476 <_strtol_l.constprop.0+0xe6>
 800a464:	4630      	mov	r0, r6
 800a466:	e79e      	b.n	800a3a6 <_strtol_l.constprop.0+0x16>
 800a468:	b107      	cbz	r7, 800a46c <_strtol_l.constprop.0+0xdc>
 800a46a:	4276      	negs	r6, r6
 800a46c:	2a00      	cmp	r2, #0
 800a46e:	d0f9      	beq.n	800a464 <_strtol_l.constprop.0+0xd4>
 800a470:	f1bc 0f00 	cmp.w	ip, #0
 800a474:	d000      	beq.n	800a478 <_strtol_l.constprop.0+0xe8>
 800a476:	1e69      	subs	r1, r5, #1
 800a478:	6011      	str	r1, [r2, #0]
 800a47a:	e7f3      	b.n	800a464 <_strtol_l.constprop.0+0xd4>
 800a47c:	2430      	movs	r4, #48	; 0x30
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d1b1      	bne.n	800a3e6 <_strtol_l.constprop.0+0x56>
 800a482:	2308      	movs	r3, #8
 800a484:	e7af      	b.n	800a3e6 <_strtol_l.constprop.0+0x56>
 800a486:	2c30      	cmp	r4, #48	; 0x30
 800a488:	d0a5      	beq.n	800a3d6 <_strtol_l.constprop.0+0x46>
 800a48a:	230a      	movs	r3, #10
 800a48c:	e7ab      	b.n	800a3e6 <_strtol_l.constprop.0+0x56>
 800a48e:	bf00      	nop
 800a490:	0800dd61 	.word	0x0800dd61

0800a494 <_strtol_r>:
 800a494:	f7ff bf7c 	b.w	800a390 <_strtol_l.constprop.0>

0800a498 <_write_r>:
 800a498:	b538      	push	{r3, r4, r5, lr}
 800a49a:	4d07      	ldr	r5, [pc, #28]	; (800a4b8 <_write_r+0x20>)
 800a49c:	4604      	mov	r4, r0
 800a49e:	4608      	mov	r0, r1
 800a4a0:	4611      	mov	r1, r2
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	602a      	str	r2, [r5, #0]
 800a4a6:	461a      	mov	r2, r3
 800a4a8:	f7f7 fb33 	bl	8001b12 <_write>
 800a4ac:	1c43      	adds	r3, r0, #1
 800a4ae:	d102      	bne.n	800a4b6 <_write_r+0x1e>
 800a4b0:	682b      	ldr	r3, [r5, #0]
 800a4b2:	b103      	cbz	r3, 800a4b6 <_write_r+0x1e>
 800a4b4:	6023      	str	r3, [r4, #0]
 800a4b6:	bd38      	pop	{r3, r4, r5, pc}
 800a4b8:	2000044c 	.word	0x2000044c

0800a4bc <_close_r>:
 800a4bc:	b538      	push	{r3, r4, r5, lr}
 800a4be:	4d06      	ldr	r5, [pc, #24]	; (800a4d8 <_close_r+0x1c>)
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	4604      	mov	r4, r0
 800a4c4:	4608      	mov	r0, r1
 800a4c6:	602b      	str	r3, [r5, #0]
 800a4c8:	f7f7 fb3f 	bl	8001b4a <_close>
 800a4cc:	1c43      	adds	r3, r0, #1
 800a4ce:	d102      	bne.n	800a4d6 <_close_r+0x1a>
 800a4d0:	682b      	ldr	r3, [r5, #0]
 800a4d2:	b103      	cbz	r3, 800a4d6 <_close_r+0x1a>
 800a4d4:	6023      	str	r3, [r4, #0]
 800a4d6:	bd38      	pop	{r3, r4, r5, pc}
 800a4d8:	2000044c 	.word	0x2000044c

0800a4dc <quorem>:
 800a4dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4e0:	6903      	ldr	r3, [r0, #16]
 800a4e2:	690c      	ldr	r4, [r1, #16]
 800a4e4:	42a3      	cmp	r3, r4
 800a4e6:	4607      	mov	r7, r0
 800a4e8:	f2c0 8081 	blt.w	800a5ee <quorem+0x112>
 800a4ec:	3c01      	subs	r4, #1
 800a4ee:	f101 0814 	add.w	r8, r1, #20
 800a4f2:	f100 0514 	add.w	r5, r0, #20
 800a4f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a4fa:	9301      	str	r3, [sp, #4]
 800a4fc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a500:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a504:	3301      	adds	r3, #1
 800a506:	429a      	cmp	r2, r3
 800a508:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a50c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a510:	fbb2 f6f3 	udiv	r6, r2, r3
 800a514:	d331      	bcc.n	800a57a <quorem+0x9e>
 800a516:	f04f 0e00 	mov.w	lr, #0
 800a51a:	4640      	mov	r0, r8
 800a51c:	46ac      	mov	ip, r5
 800a51e:	46f2      	mov	sl, lr
 800a520:	f850 2b04 	ldr.w	r2, [r0], #4
 800a524:	b293      	uxth	r3, r2
 800a526:	fb06 e303 	mla	r3, r6, r3, lr
 800a52a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a52e:	b29b      	uxth	r3, r3
 800a530:	ebaa 0303 	sub.w	r3, sl, r3
 800a534:	f8dc a000 	ldr.w	sl, [ip]
 800a538:	0c12      	lsrs	r2, r2, #16
 800a53a:	fa13 f38a 	uxtah	r3, r3, sl
 800a53e:	fb06 e202 	mla	r2, r6, r2, lr
 800a542:	9300      	str	r3, [sp, #0]
 800a544:	9b00      	ldr	r3, [sp, #0]
 800a546:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a54a:	b292      	uxth	r2, r2
 800a54c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a550:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a554:	f8bd 3000 	ldrh.w	r3, [sp]
 800a558:	4581      	cmp	r9, r0
 800a55a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a55e:	f84c 3b04 	str.w	r3, [ip], #4
 800a562:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a566:	d2db      	bcs.n	800a520 <quorem+0x44>
 800a568:	f855 300b 	ldr.w	r3, [r5, fp]
 800a56c:	b92b      	cbnz	r3, 800a57a <quorem+0x9e>
 800a56e:	9b01      	ldr	r3, [sp, #4]
 800a570:	3b04      	subs	r3, #4
 800a572:	429d      	cmp	r5, r3
 800a574:	461a      	mov	r2, r3
 800a576:	d32e      	bcc.n	800a5d6 <quorem+0xfa>
 800a578:	613c      	str	r4, [r7, #16]
 800a57a:	4638      	mov	r0, r7
 800a57c:	f001 fc96 	bl	800beac <__mcmp>
 800a580:	2800      	cmp	r0, #0
 800a582:	db24      	blt.n	800a5ce <quorem+0xf2>
 800a584:	3601      	adds	r6, #1
 800a586:	4628      	mov	r0, r5
 800a588:	f04f 0c00 	mov.w	ip, #0
 800a58c:	f858 2b04 	ldr.w	r2, [r8], #4
 800a590:	f8d0 e000 	ldr.w	lr, [r0]
 800a594:	b293      	uxth	r3, r2
 800a596:	ebac 0303 	sub.w	r3, ip, r3
 800a59a:	0c12      	lsrs	r2, r2, #16
 800a59c:	fa13 f38e 	uxtah	r3, r3, lr
 800a5a0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a5a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a5a8:	b29b      	uxth	r3, r3
 800a5aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a5ae:	45c1      	cmp	r9, r8
 800a5b0:	f840 3b04 	str.w	r3, [r0], #4
 800a5b4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a5b8:	d2e8      	bcs.n	800a58c <quorem+0xb0>
 800a5ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a5be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a5c2:	b922      	cbnz	r2, 800a5ce <quorem+0xf2>
 800a5c4:	3b04      	subs	r3, #4
 800a5c6:	429d      	cmp	r5, r3
 800a5c8:	461a      	mov	r2, r3
 800a5ca:	d30a      	bcc.n	800a5e2 <quorem+0x106>
 800a5cc:	613c      	str	r4, [r7, #16]
 800a5ce:	4630      	mov	r0, r6
 800a5d0:	b003      	add	sp, #12
 800a5d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5d6:	6812      	ldr	r2, [r2, #0]
 800a5d8:	3b04      	subs	r3, #4
 800a5da:	2a00      	cmp	r2, #0
 800a5dc:	d1cc      	bne.n	800a578 <quorem+0x9c>
 800a5de:	3c01      	subs	r4, #1
 800a5e0:	e7c7      	b.n	800a572 <quorem+0x96>
 800a5e2:	6812      	ldr	r2, [r2, #0]
 800a5e4:	3b04      	subs	r3, #4
 800a5e6:	2a00      	cmp	r2, #0
 800a5e8:	d1f0      	bne.n	800a5cc <quorem+0xf0>
 800a5ea:	3c01      	subs	r4, #1
 800a5ec:	e7eb      	b.n	800a5c6 <quorem+0xea>
 800a5ee:	2000      	movs	r0, #0
 800a5f0:	e7ee      	b.n	800a5d0 <quorem+0xf4>
 800a5f2:	0000      	movs	r0, r0
 800a5f4:	0000      	movs	r0, r0
	...

0800a5f8 <_dtoa_r>:
 800a5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5fc:	ed2d 8b04 	vpush	{d8-d9}
 800a600:	ec57 6b10 	vmov	r6, r7, d0
 800a604:	b093      	sub	sp, #76	; 0x4c
 800a606:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a608:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a60c:	9106      	str	r1, [sp, #24]
 800a60e:	ee10 aa10 	vmov	sl, s0
 800a612:	4604      	mov	r4, r0
 800a614:	9209      	str	r2, [sp, #36]	; 0x24
 800a616:	930c      	str	r3, [sp, #48]	; 0x30
 800a618:	46bb      	mov	fp, r7
 800a61a:	b975      	cbnz	r5, 800a63a <_dtoa_r+0x42>
 800a61c:	2010      	movs	r0, #16
 800a61e:	f001 f95f 	bl	800b8e0 <malloc>
 800a622:	4602      	mov	r2, r0
 800a624:	6260      	str	r0, [r4, #36]	; 0x24
 800a626:	b920      	cbnz	r0, 800a632 <_dtoa_r+0x3a>
 800a628:	4ba7      	ldr	r3, [pc, #668]	; (800a8c8 <_dtoa_r+0x2d0>)
 800a62a:	21ea      	movs	r1, #234	; 0xea
 800a62c:	48a7      	ldr	r0, [pc, #668]	; (800a8cc <_dtoa_r+0x2d4>)
 800a62e:	f002 fcdb 	bl	800cfe8 <__assert_func>
 800a632:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a636:	6005      	str	r5, [r0, #0]
 800a638:	60c5      	str	r5, [r0, #12]
 800a63a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a63c:	6819      	ldr	r1, [r3, #0]
 800a63e:	b151      	cbz	r1, 800a656 <_dtoa_r+0x5e>
 800a640:	685a      	ldr	r2, [r3, #4]
 800a642:	604a      	str	r2, [r1, #4]
 800a644:	2301      	movs	r3, #1
 800a646:	4093      	lsls	r3, r2
 800a648:	608b      	str	r3, [r1, #8]
 800a64a:	4620      	mov	r0, r4
 800a64c:	f001 f9a2 	bl	800b994 <_Bfree>
 800a650:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a652:	2200      	movs	r2, #0
 800a654:	601a      	str	r2, [r3, #0]
 800a656:	1e3b      	subs	r3, r7, #0
 800a658:	bfaa      	itet	ge
 800a65a:	2300      	movge	r3, #0
 800a65c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a660:	f8c8 3000 	strge.w	r3, [r8]
 800a664:	4b9a      	ldr	r3, [pc, #616]	; (800a8d0 <_dtoa_r+0x2d8>)
 800a666:	bfbc      	itt	lt
 800a668:	2201      	movlt	r2, #1
 800a66a:	f8c8 2000 	strlt.w	r2, [r8]
 800a66e:	ea33 030b 	bics.w	r3, r3, fp
 800a672:	d11b      	bne.n	800a6ac <_dtoa_r+0xb4>
 800a674:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a676:	f242 730f 	movw	r3, #9999	; 0x270f
 800a67a:	6013      	str	r3, [r2, #0]
 800a67c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a680:	4333      	orrs	r3, r6
 800a682:	f000 8592 	beq.w	800b1aa <_dtoa_r+0xbb2>
 800a686:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a688:	b963      	cbnz	r3, 800a6a4 <_dtoa_r+0xac>
 800a68a:	4b92      	ldr	r3, [pc, #584]	; (800a8d4 <_dtoa_r+0x2dc>)
 800a68c:	e022      	b.n	800a6d4 <_dtoa_r+0xdc>
 800a68e:	4b92      	ldr	r3, [pc, #584]	; (800a8d8 <_dtoa_r+0x2e0>)
 800a690:	9301      	str	r3, [sp, #4]
 800a692:	3308      	adds	r3, #8
 800a694:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a696:	6013      	str	r3, [r2, #0]
 800a698:	9801      	ldr	r0, [sp, #4]
 800a69a:	b013      	add	sp, #76	; 0x4c
 800a69c:	ecbd 8b04 	vpop	{d8-d9}
 800a6a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6a4:	4b8b      	ldr	r3, [pc, #556]	; (800a8d4 <_dtoa_r+0x2dc>)
 800a6a6:	9301      	str	r3, [sp, #4]
 800a6a8:	3303      	adds	r3, #3
 800a6aa:	e7f3      	b.n	800a694 <_dtoa_r+0x9c>
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	4650      	mov	r0, sl
 800a6b2:	4659      	mov	r1, fp
 800a6b4:	f7f6 fa38 	bl	8000b28 <__aeabi_dcmpeq>
 800a6b8:	ec4b ab19 	vmov	d9, sl, fp
 800a6bc:	4680      	mov	r8, r0
 800a6be:	b158      	cbz	r0, 800a6d8 <_dtoa_r+0xe0>
 800a6c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	6013      	str	r3, [r2, #0]
 800a6c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	f000 856b 	beq.w	800b1a4 <_dtoa_r+0xbac>
 800a6ce:	4883      	ldr	r0, [pc, #524]	; (800a8dc <_dtoa_r+0x2e4>)
 800a6d0:	6018      	str	r0, [r3, #0]
 800a6d2:	1e43      	subs	r3, r0, #1
 800a6d4:	9301      	str	r3, [sp, #4]
 800a6d6:	e7df      	b.n	800a698 <_dtoa_r+0xa0>
 800a6d8:	ec4b ab10 	vmov	d0, sl, fp
 800a6dc:	aa10      	add	r2, sp, #64	; 0x40
 800a6de:	a911      	add	r1, sp, #68	; 0x44
 800a6e0:	4620      	mov	r0, r4
 800a6e2:	f001 fd05 	bl	800c0f0 <__d2b>
 800a6e6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a6ea:	ee08 0a10 	vmov	s16, r0
 800a6ee:	2d00      	cmp	r5, #0
 800a6f0:	f000 8084 	beq.w	800a7fc <_dtoa_r+0x204>
 800a6f4:	ee19 3a90 	vmov	r3, s19
 800a6f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a6fc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a700:	4656      	mov	r6, sl
 800a702:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a706:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a70a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a70e:	4b74      	ldr	r3, [pc, #464]	; (800a8e0 <_dtoa_r+0x2e8>)
 800a710:	2200      	movs	r2, #0
 800a712:	4630      	mov	r0, r6
 800a714:	4639      	mov	r1, r7
 800a716:	f7f5 fde7 	bl	80002e8 <__aeabi_dsub>
 800a71a:	a365      	add	r3, pc, #404	; (adr r3, 800a8b0 <_dtoa_r+0x2b8>)
 800a71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a720:	f7f5 ff9a 	bl	8000658 <__aeabi_dmul>
 800a724:	a364      	add	r3, pc, #400	; (adr r3, 800a8b8 <_dtoa_r+0x2c0>)
 800a726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a72a:	f7f5 fddf 	bl	80002ec <__adddf3>
 800a72e:	4606      	mov	r6, r0
 800a730:	4628      	mov	r0, r5
 800a732:	460f      	mov	r7, r1
 800a734:	f7f5 ff26 	bl	8000584 <__aeabi_i2d>
 800a738:	a361      	add	r3, pc, #388	; (adr r3, 800a8c0 <_dtoa_r+0x2c8>)
 800a73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a73e:	f7f5 ff8b 	bl	8000658 <__aeabi_dmul>
 800a742:	4602      	mov	r2, r0
 800a744:	460b      	mov	r3, r1
 800a746:	4630      	mov	r0, r6
 800a748:	4639      	mov	r1, r7
 800a74a:	f7f5 fdcf 	bl	80002ec <__adddf3>
 800a74e:	4606      	mov	r6, r0
 800a750:	460f      	mov	r7, r1
 800a752:	f7f6 fa31 	bl	8000bb8 <__aeabi_d2iz>
 800a756:	2200      	movs	r2, #0
 800a758:	9000      	str	r0, [sp, #0]
 800a75a:	2300      	movs	r3, #0
 800a75c:	4630      	mov	r0, r6
 800a75e:	4639      	mov	r1, r7
 800a760:	f7f6 f9ec 	bl	8000b3c <__aeabi_dcmplt>
 800a764:	b150      	cbz	r0, 800a77c <_dtoa_r+0x184>
 800a766:	9800      	ldr	r0, [sp, #0]
 800a768:	f7f5 ff0c 	bl	8000584 <__aeabi_i2d>
 800a76c:	4632      	mov	r2, r6
 800a76e:	463b      	mov	r3, r7
 800a770:	f7f6 f9da 	bl	8000b28 <__aeabi_dcmpeq>
 800a774:	b910      	cbnz	r0, 800a77c <_dtoa_r+0x184>
 800a776:	9b00      	ldr	r3, [sp, #0]
 800a778:	3b01      	subs	r3, #1
 800a77a:	9300      	str	r3, [sp, #0]
 800a77c:	9b00      	ldr	r3, [sp, #0]
 800a77e:	2b16      	cmp	r3, #22
 800a780:	d85a      	bhi.n	800a838 <_dtoa_r+0x240>
 800a782:	9a00      	ldr	r2, [sp, #0]
 800a784:	4b57      	ldr	r3, [pc, #348]	; (800a8e4 <_dtoa_r+0x2ec>)
 800a786:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a78a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a78e:	ec51 0b19 	vmov	r0, r1, d9
 800a792:	f7f6 f9d3 	bl	8000b3c <__aeabi_dcmplt>
 800a796:	2800      	cmp	r0, #0
 800a798:	d050      	beq.n	800a83c <_dtoa_r+0x244>
 800a79a:	9b00      	ldr	r3, [sp, #0]
 800a79c:	3b01      	subs	r3, #1
 800a79e:	9300      	str	r3, [sp, #0]
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	930b      	str	r3, [sp, #44]	; 0x2c
 800a7a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a7a6:	1b5d      	subs	r5, r3, r5
 800a7a8:	1e6b      	subs	r3, r5, #1
 800a7aa:	9305      	str	r3, [sp, #20]
 800a7ac:	bf45      	ittet	mi
 800a7ae:	f1c5 0301 	rsbmi	r3, r5, #1
 800a7b2:	9304      	strmi	r3, [sp, #16]
 800a7b4:	2300      	movpl	r3, #0
 800a7b6:	2300      	movmi	r3, #0
 800a7b8:	bf4c      	ite	mi
 800a7ba:	9305      	strmi	r3, [sp, #20]
 800a7bc:	9304      	strpl	r3, [sp, #16]
 800a7be:	9b00      	ldr	r3, [sp, #0]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	db3d      	blt.n	800a840 <_dtoa_r+0x248>
 800a7c4:	9b05      	ldr	r3, [sp, #20]
 800a7c6:	9a00      	ldr	r2, [sp, #0]
 800a7c8:	920a      	str	r2, [sp, #40]	; 0x28
 800a7ca:	4413      	add	r3, r2
 800a7cc:	9305      	str	r3, [sp, #20]
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	9307      	str	r3, [sp, #28]
 800a7d2:	9b06      	ldr	r3, [sp, #24]
 800a7d4:	2b09      	cmp	r3, #9
 800a7d6:	f200 8089 	bhi.w	800a8ec <_dtoa_r+0x2f4>
 800a7da:	2b05      	cmp	r3, #5
 800a7dc:	bfc4      	itt	gt
 800a7de:	3b04      	subgt	r3, #4
 800a7e0:	9306      	strgt	r3, [sp, #24]
 800a7e2:	9b06      	ldr	r3, [sp, #24]
 800a7e4:	f1a3 0302 	sub.w	r3, r3, #2
 800a7e8:	bfcc      	ite	gt
 800a7ea:	2500      	movgt	r5, #0
 800a7ec:	2501      	movle	r5, #1
 800a7ee:	2b03      	cmp	r3, #3
 800a7f0:	f200 8087 	bhi.w	800a902 <_dtoa_r+0x30a>
 800a7f4:	e8df f003 	tbb	[pc, r3]
 800a7f8:	59383a2d 	.word	0x59383a2d
 800a7fc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a800:	441d      	add	r5, r3
 800a802:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a806:	2b20      	cmp	r3, #32
 800a808:	bfc1      	itttt	gt
 800a80a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a80e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a812:	fa0b f303 	lslgt.w	r3, fp, r3
 800a816:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a81a:	bfda      	itte	le
 800a81c:	f1c3 0320 	rsble	r3, r3, #32
 800a820:	fa06 f003 	lslle.w	r0, r6, r3
 800a824:	4318      	orrgt	r0, r3
 800a826:	f7f5 fe9d 	bl	8000564 <__aeabi_ui2d>
 800a82a:	2301      	movs	r3, #1
 800a82c:	4606      	mov	r6, r0
 800a82e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a832:	3d01      	subs	r5, #1
 800a834:	930e      	str	r3, [sp, #56]	; 0x38
 800a836:	e76a      	b.n	800a70e <_dtoa_r+0x116>
 800a838:	2301      	movs	r3, #1
 800a83a:	e7b2      	b.n	800a7a2 <_dtoa_r+0x1aa>
 800a83c:	900b      	str	r0, [sp, #44]	; 0x2c
 800a83e:	e7b1      	b.n	800a7a4 <_dtoa_r+0x1ac>
 800a840:	9b04      	ldr	r3, [sp, #16]
 800a842:	9a00      	ldr	r2, [sp, #0]
 800a844:	1a9b      	subs	r3, r3, r2
 800a846:	9304      	str	r3, [sp, #16]
 800a848:	4253      	negs	r3, r2
 800a84a:	9307      	str	r3, [sp, #28]
 800a84c:	2300      	movs	r3, #0
 800a84e:	930a      	str	r3, [sp, #40]	; 0x28
 800a850:	e7bf      	b.n	800a7d2 <_dtoa_r+0x1da>
 800a852:	2300      	movs	r3, #0
 800a854:	9308      	str	r3, [sp, #32]
 800a856:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a858:	2b00      	cmp	r3, #0
 800a85a:	dc55      	bgt.n	800a908 <_dtoa_r+0x310>
 800a85c:	2301      	movs	r3, #1
 800a85e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a862:	461a      	mov	r2, r3
 800a864:	9209      	str	r2, [sp, #36]	; 0x24
 800a866:	e00c      	b.n	800a882 <_dtoa_r+0x28a>
 800a868:	2301      	movs	r3, #1
 800a86a:	e7f3      	b.n	800a854 <_dtoa_r+0x25c>
 800a86c:	2300      	movs	r3, #0
 800a86e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a870:	9308      	str	r3, [sp, #32]
 800a872:	9b00      	ldr	r3, [sp, #0]
 800a874:	4413      	add	r3, r2
 800a876:	9302      	str	r3, [sp, #8]
 800a878:	3301      	adds	r3, #1
 800a87a:	2b01      	cmp	r3, #1
 800a87c:	9303      	str	r3, [sp, #12]
 800a87e:	bfb8      	it	lt
 800a880:	2301      	movlt	r3, #1
 800a882:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a884:	2200      	movs	r2, #0
 800a886:	6042      	str	r2, [r0, #4]
 800a888:	2204      	movs	r2, #4
 800a88a:	f102 0614 	add.w	r6, r2, #20
 800a88e:	429e      	cmp	r6, r3
 800a890:	6841      	ldr	r1, [r0, #4]
 800a892:	d93d      	bls.n	800a910 <_dtoa_r+0x318>
 800a894:	4620      	mov	r0, r4
 800a896:	f001 f83d 	bl	800b914 <_Balloc>
 800a89a:	9001      	str	r0, [sp, #4]
 800a89c:	2800      	cmp	r0, #0
 800a89e:	d13b      	bne.n	800a918 <_dtoa_r+0x320>
 800a8a0:	4b11      	ldr	r3, [pc, #68]	; (800a8e8 <_dtoa_r+0x2f0>)
 800a8a2:	4602      	mov	r2, r0
 800a8a4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a8a8:	e6c0      	b.n	800a62c <_dtoa_r+0x34>
 800a8aa:	2301      	movs	r3, #1
 800a8ac:	e7df      	b.n	800a86e <_dtoa_r+0x276>
 800a8ae:	bf00      	nop
 800a8b0:	636f4361 	.word	0x636f4361
 800a8b4:	3fd287a7 	.word	0x3fd287a7
 800a8b8:	8b60c8b3 	.word	0x8b60c8b3
 800a8bc:	3fc68a28 	.word	0x3fc68a28
 800a8c0:	509f79fb 	.word	0x509f79fb
 800a8c4:	3fd34413 	.word	0x3fd34413
 800a8c8:	0800de6e 	.word	0x0800de6e
 800a8cc:	0800de85 	.word	0x0800de85
 800a8d0:	7ff00000 	.word	0x7ff00000
 800a8d4:	0800de6a 	.word	0x0800de6a
 800a8d8:	0800de61 	.word	0x0800de61
 800a8dc:	0800e0da 	.word	0x0800e0da
 800a8e0:	3ff80000 	.word	0x3ff80000
 800a8e4:	0800dff0 	.word	0x0800dff0
 800a8e8:	0800dee0 	.word	0x0800dee0
 800a8ec:	2501      	movs	r5, #1
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	9306      	str	r3, [sp, #24]
 800a8f2:	9508      	str	r5, [sp, #32]
 800a8f4:	f04f 33ff 	mov.w	r3, #4294967295
 800a8f8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	2312      	movs	r3, #18
 800a900:	e7b0      	b.n	800a864 <_dtoa_r+0x26c>
 800a902:	2301      	movs	r3, #1
 800a904:	9308      	str	r3, [sp, #32]
 800a906:	e7f5      	b.n	800a8f4 <_dtoa_r+0x2fc>
 800a908:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a90a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a90e:	e7b8      	b.n	800a882 <_dtoa_r+0x28a>
 800a910:	3101      	adds	r1, #1
 800a912:	6041      	str	r1, [r0, #4]
 800a914:	0052      	lsls	r2, r2, #1
 800a916:	e7b8      	b.n	800a88a <_dtoa_r+0x292>
 800a918:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a91a:	9a01      	ldr	r2, [sp, #4]
 800a91c:	601a      	str	r2, [r3, #0]
 800a91e:	9b03      	ldr	r3, [sp, #12]
 800a920:	2b0e      	cmp	r3, #14
 800a922:	f200 809d 	bhi.w	800aa60 <_dtoa_r+0x468>
 800a926:	2d00      	cmp	r5, #0
 800a928:	f000 809a 	beq.w	800aa60 <_dtoa_r+0x468>
 800a92c:	9b00      	ldr	r3, [sp, #0]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	dd32      	ble.n	800a998 <_dtoa_r+0x3a0>
 800a932:	4ab7      	ldr	r2, [pc, #732]	; (800ac10 <_dtoa_r+0x618>)
 800a934:	f003 030f 	and.w	r3, r3, #15
 800a938:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a93c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a940:	9b00      	ldr	r3, [sp, #0]
 800a942:	05d8      	lsls	r0, r3, #23
 800a944:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a948:	d516      	bpl.n	800a978 <_dtoa_r+0x380>
 800a94a:	4bb2      	ldr	r3, [pc, #712]	; (800ac14 <_dtoa_r+0x61c>)
 800a94c:	ec51 0b19 	vmov	r0, r1, d9
 800a950:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a954:	f7f5 ffaa 	bl	80008ac <__aeabi_ddiv>
 800a958:	f007 070f 	and.w	r7, r7, #15
 800a95c:	4682      	mov	sl, r0
 800a95e:	468b      	mov	fp, r1
 800a960:	2503      	movs	r5, #3
 800a962:	4eac      	ldr	r6, [pc, #688]	; (800ac14 <_dtoa_r+0x61c>)
 800a964:	b957      	cbnz	r7, 800a97c <_dtoa_r+0x384>
 800a966:	4642      	mov	r2, r8
 800a968:	464b      	mov	r3, r9
 800a96a:	4650      	mov	r0, sl
 800a96c:	4659      	mov	r1, fp
 800a96e:	f7f5 ff9d 	bl	80008ac <__aeabi_ddiv>
 800a972:	4682      	mov	sl, r0
 800a974:	468b      	mov	fp, r1
 800a976:	e028      	b.n	800a9ca <_dtoa_r+0x3d2>
 800a978:	2502      	movs	r5, #2
 800a97a:	e7f2      	b.n	800a962 <_dtoa_r+0x36a>
 800a97c:	07f9      	lsls	r1, r7, #31
 800a97e:	d508      	bpl.n	800a992 <_dtoa_r+0x39a>
 800a980:	4640      	mov	r0, r8
 800a982:	4649      	mov	r1, r9
 800a984:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a988:	f7f5 fe66 	bl	8000658 <__aeabi_dmul>
 800a98c:	3501      	adds	r5, #1
 800a98e:	4680      	mov	r8, r0
 800a990:	4689      	mov	r9, r1
 800a992:	107f      	asrs	r7, r7, #1
 800a994:	3608      	adds	r6, #8
 800a996:	e7e5      	b.n	800a964 <_dtoa_r+0x36c>
 800a998:	f000 809b 	beq.w	800aad2 <_dtoa_r+0x4da>
 800a99c:	9b00      	ldr	r3, [sp, #0]
 800a99e:	4f9d      	ldr	r7, [pc, #628]	; (800ac14 <_dtoa_r+0x61c>)
 800a9a0:	425e      	negs	r6, r3
 800a9a2:	4b9b      	ldr	r3, [pc, #620]	; (800ac10 <_dtoa_r+0x618>)
 800a9a4:	f006 020f 	and.w	r2, r6, #15
 800a9a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9b0:	ec51 0b19 	vmov	r0, r1, d9
 800a9b4:	f7f5 fe50 	bl	8000658 <__aeabi_dmul>
 800a9b8:	1136      	asrs	r6, r6, #4
 800a9ba:	4682      	mov	sl, r0
 800a9bc:	468b      	mov	fp, r1
 800a9be:	2300      	movs	r3, #0
 800a9c0:	2502      	movs	r5, #2
 800a9c2:	2e00      	cmp	r6, #0
 800a9c4:	d17a      	bne.n	800aabc <_dtoa_r+0x4c4>
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d1d3      	bne.n	800a972 <_dtoa_r+0x37a>
 800a9ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	f000 8082 	beq.w	800aad6 <_dtoa_r+0x4de>
 800a9d2:	4b91      	ldr	r3, [pc, #580]	; (800ac18 <_dtoa_r+0x620>)
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	4650      	mov	r0, sl
 800a9d8:	4659      	mov	r1, fp
 800a9da:	f7f6 f8af 	bl	8000b3c <__aeabi_dcmplt>
 800a9de:	2800      	cmp	r0, #0
 800a9e0:	d079      	beq.n	800aad6 <_dtoa_r+0x4de>
 800a9e2:	9b03      	ldr	r3, [sp, #12]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d076      	beq.n	800aad6 <_dtoa_r+0x4de>
 800a9e8:	9b02      	ldr	r3, [sp, #8]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	dd36      	ble.n	800aa5c <_dtoa_r+0x464>
 800a9ee:	9b00      	ldr	r3, [sp, #0]
 800a9f0:	4650      	mov	r0, sl
 800a9f2:	4659      	mov	r1, fp
 800a9f4:	1e5f      	subs	r7, r3, #1
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	4b88      	ldr	r3, [pc, #544]	; (800ac1c <_dtoa_r+0x624>)
 800a9fa:	f7f5 fe2d 	bl	8000658 <__aeabi_dmul>
 800a9fe:	9e02      	ldr	r6, [sp, #8]
 800aa00:	4682      	mov	sl, r0
 800aa02:	468b      	mov	fp, r1
 800aa04:	3501      	adds	r5, #1
 800aa06:	4628      	mov	r0, r5
 800aa08:	f7f5 fdbc 	bl	8000584 <__aeabi_i2d>
 800aa0c:	4652      	mov	r2, sl
 800aa0e:	465b      	mov	r3, fp
 800aa10:	f7f5 fe22 	bl	8000658 <__aeabi_dmul>
 800aa14:	4b82      	ldr	r3, [pc, #520]	; (800ac20 <_dtoa_r+0x628>)
 800aa16:	2200      	movs	r2, #0
 800aa18:	f7f5 fc68 	bl	80002ec <__adddf3>
 800aa1c:	46d0      	mov	r8, sl
 800aa1e:	46d9      	mov	r9, fp
 800aa20:	4682      	mov	sl, r0
 800aa22:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800aa26:	2e00      	cmp	r6, #0
 800aa28:	d158      	bne.n	800aadc <_dtoa_r+0x4e4>
 800aa2a:	4b7e      	ldr	r3, [pc, #504]	; (800ac24 <_dtoa_r+0x62c>)
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	4640      	mov	r0, r8
 800aa30:	4649      	mov	r1, r9
 800aa32:	f7f5 fc59 	bl	80002e8 <__aeabi_dsub>
 800aa36:	4652      	mov	r2, sl
 800aa38:	465b      	mov	r3, fp
 800aa3a:	4680      	mov	r8, r0
 800aa3c:	4689      	mov	r9, r1
 800aa3e:	f7f6 f89b 	bl	8000b78 <__aeabi_dcmpgt>
 800aa42:	2800      	cmp	r0, #0
 800aa44:	f040 8295 	bne.w	800af72 <_dtoa_r+0x97a>
 800aa48:	4652      	mov	r2, sl
 800aa4a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800aa4e:	4640      	mov	r0, r8
 800aa50:	4649      	mov	r1, r9
 800aa52:	f7f6 f873 	bl	8000b3c <__aeabi_dcmplt>
 800aa56:	2800      	cmp	r0, #0
 800aa58:	f040 8289 	bne.w	800af6e <_dtoa_r+0x976>
 800aa5c:	ec5b ab19 	vmov	sl, fp, d9
 800aa60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	f2c0 8148 	blt.w	800acf8 <_dtoa_r+0x700>
 800aa68:	9a00      	ldr	r2, [sp, #0]
 800aa6a:	2a0e      	cmp	r2, #14
 800aa6c:	f300 8144 	bgt.w	800acf8 <_dtoa_r+0x700>
 800aa70:	4b67      	ldr	r3, [pc, #412]	; (800ac10 <_dtoa_r+0x618>)
 800aa72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa76:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aa7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	f280 80d5 	bge.w	800ac2c <_dtoa_r+0x634>
 800aa82:	9b03      	ldr	r3, [sp, #12]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	f300 80d1 	bgt.w	800ac2c <_dtoa_r+0x634>
 800aa8a:	f040 826f 	bne.w	800af6c <_dtoa_r+0x974>
 800aa8e:	4b65      	ldr	r3, [pc, #404]	; (800ac24 <_dtoa_r+0x62c>)
 800aa90:	2200      	movs	r2, #0
 800aa92:	4640      	mov	r0, r8
 800aa94:	4649      	mov	r1, r9
 800aa96:	f7f5 fddf 	bl	8000658 <__aeabi_dmul>
 800aa9a:	4652      	mov	r2, sl
 800aa9c:	465b      	mov	r3, fp
 800aa9e:	f7f6 f861 	bl	8000b64 <__aeabi_dcmpge>
 800aaa2:	9e03      	ldr	r6, [sp, #12]
 800aaa4:	4637      	mov	r7, r6
 800aaa6:	2800      	cmp	r0, #0
 800aaa8:	f040 8245 	bne.w	800af36 <_dtoa_r+0x93e>
 800aaac:	9d01      	ldr	r5, [sp, #4]
 800aaae:	2331      	movs	r3, #49	; 0x31
 800aab0:	f805 3b01 	strb.w	r3, [r5], #1
 800aab4:	9b00      	ldr	r3, [sp, #0]
 800aab6:	3301      	adds	r3, #1
 800aab8:	9300      	str	r3, [sp, #0]
 800aaba:	e240      	b.n	800af3e <_dtoa_r+0x946>
 800aabc:	07f2      	lsls	r2, r6, #31
 800aabe:	d505      	bpl.n	800aacc <_dtoa_r+0x4d4>
 800aac0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aac4:	f7f5 fdc8 	bl	8000658 <__aeabi_dmul>
 800aac8:	3501      	adds	r5, #1
 800aaca:	2301      	movs	r3, #1
 800aacc:	1076      	asrs	r6, r6, #1
 800aace:	3708      	adds	r7, #8
 800aad0:	e777      	b.n	800a9c2 <_dtoa_r+0x3ca>
 800aad2:	2502      	movs	r5, #2
 800aad4:	e779      	b.n	800a9ca <_dtoa_r+0x3d2>
 800aad6:	9f00      	ldr	r7, [sp, #0]
 800aad8:	9e03      	ldr	r6, [sp, #12]
 800aada:	e794      	b.n	800aa06 <_dtoa_r+0x40e>
 800aadc:	9901      	ldr	r1, [sp, #4]
 800aade:	4b4c      	ldr	r3, [pc, #304]	; (800ac10 <_dtoa_r+0x618>)
 800aae0:	4431      	add	r1, r6
 800aae2:	910d      	str	r1, [sp, #52]	; 0x34
 800aae4:	9908      	ldr	r1, [sp, #32]
 800aae6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800aaea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aaee:	2900      	cmp	r1, #0
 800aaf0:	d043      	beq.n	800ab7a <_dtoa_r+0x582>
 800aaf2:	494d      	ldr	r1, [pc, #308]	; (800ac28 <_dtoa_r+0x630>)
 800aaf4:	2000      	movs	r0, #0
 800aaf6:	f7f5 fed9 	bl	80008ac <__aeabi_ddiv>
 800aafa:	4652      	mov	r2, sl
 800aafc:	465b      	mov	r3, fp
 800aafe:	f7f5 fbf3 	bl	80002e8 <__aeabi_dsub>
 800ab02:	9d01      	ldr	r5, [sp, #4]
 800ab04:	4682      	mov	sl, r0
 800ab06:	468b      	mov	fp, r1
 800ab08:	4649      	mov	r1, r9
 800ab0a:	4640      	mov	r0, r8
 800ab0c:	f7f6 f854 	bl	8000bb8 <__aeabi_d2iz>
 800ab10:	4606      	mov	r6, r0
 800ab12:	f7f5 fd37 	bl	8000584 <__aeabi_i2d>
 800ab16:	4602      	mov	r2, r0
 800ab18:	460b      	mov	r3, r1
 800ab1a:	4640      	mov	r0, r8
 800ab1c:	4649      	mov	r1, r9
 800ab1e:	f7f5 fbe3 	bl	80002e8 <__aeabi_dsub>
 800ab22:	3630      	adds	r6, #48	; 0x30
 800ab24:	f805 6b01 	strb.w	r6, [r5], #1
 800ab28:	4652      	mov	r2, sl
 800ab2a:	465b      	mov	r3, fp
 800ab2c:	4680      	mov	r8, r0
 800ab2e:	4689      	mov	r9, r1
 800ab30:	f7f6 f804 	bl	8000b3c <__aeabi_dcmplt>
 800ab34:	2800      	cmp	r0, #0
 800ab36:	d163      	bne.n	800ac00 <_dtoa_r+0x608>
 800ab38:	4642      	mov	r2, r8
 800ab3a:	464b      	mov	r3, r9
 800ab3c:	4936      	ldr	r1, [pc, #216]	; (800ac18 <_dtoa_r+0x620>)
 800ab3e:	2000      	movs	r0, #0
 800ab40:	f7f5 fbd2 	bl	80002e8 <__aeabi_dsub>
 800ab44:	4652      	mov	r2, sl
 800ab46:	465b      	mov	r3, fp
 800ab48:	f7f5 fff8 	bl	8000b3c <__aeabi_dcmplt>
 800ab4c:	2800      	cmp	r0, #0
 800ab4e:	f040 80b5 	bne.w	800acbc <_dtoa_r+0x6c4>
 800ab52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab54:	429d      	cmp	r5, r3
 800ab56:	d081      	beq.n	800aa5c <_dtoa_r+0x464>
 800ab58:	4b30      	ldr	r3, [pc, #192]	; (800ac1c <_dtoa_r+0x624>)
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	4650      	mov	r0, sl
 800ab5e:	4659      	mov	r1, fp
 800ab60:	f7f5 fd7a 	bl	8000658 <__aeabi_dmul>
 800ab64:	4b2d      	ldr	r3, [pc, #180]	; (800ac1c <_dtoa_r+0x624>)
 800ab66:	4682      	mov	sl, r0
 800ab68:	468b      	mov	fp, r1
 800ab6a:	4640      	mov	r0, r8
 800ab6c:	4649      	mov	r1, r9
 800ab6e:	2200      	movs	r2, #0
 800ab70:	f7f5 fd72 	bl	8000658 <__aeabi_dmul>
 800ab74:	4680      	mov	r8, r0
 800ab76:	4689      	mov	r9, r1
 800ab78:	e7c6      	b.n	800ab08 <_dtoa_r+0x510>
 800ab7a:	4650      	mov	r0, sl
 800ab7c:	4659      	mov	r1, fp
 800ab7e:	f7f5 fd6b 	bl	8000658 <__aeabi_dmul>
 800ab82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab84:	9d01      	ldr	r5, [sp, #4]
 800ab86:	930f      	str	r3, [sp, #60]	; 0x3c
 800ab88:	4682      	mov	sl, r0
 800ab8a:	468b      	mov	fp, r1
 800ab8c:	4649      	mov	r1, r9
 800ab8e:	4640      	mov	r0, r8
 800ab90:	f7f6 f812 	bl	8000bb8 <__aeabi_d2iz>
 800ab94:	4606      	mov	r6, r0
 800ab96:	f7f5 fcf5 	bl	8000584 <__aeabi_i2d>
 800ab9a:	3630      	adds	r6, #48	; 0x30
 800ab9c:	4602      	mov	r2, r0
 800ab9e:	460b      	mov	r3, r1
 800aba0:	4640      	mov	r0, r8
 800aba2:	4649      	mov	r1, r9
 800aba4:	f7f5 fba0 	bl	80002e8 <__aeabi_dsub>
 800aba8:	f805 6b01 	strb.w	r6, [r5], #1
 800abac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800abae:	429d      	cmp	r5, r3
 800abb0:	4680      	mov	r8, r0
 800abb2:	4689      	mov	r9, r1
 800abb4:	f04f 0200 	mov.w	r2, #0
 800abb8:	d124      	bne.n	800ac04 <_dtoa_r+0x60c>
 800abba:	4b1b      	ldr	r3, [pc, #108]	; (800ac28 <_dtoa_r+0x630>)
 800abbc:	4650      	mov	r0, sl
 800abbe:	4659      	mov	r1, fp
 800abc0:	f7f5 fb94 	bl	80002ec <__adddf3>
 800abc4:	4602      	mov	r2, r0
 800abc6:	460b      	mov	r3, r1
 800abc8:	4640      	mov	r0, r8
 800abca:	4649      	mov	r1, r9
 800abcc:	f7f5 ffd4 	bl	8000b78 <__aeabi_dcmpgt>
 800abd0:	2800      	cmp	r0, #0
 800abd2:	d173      	bne.n	800acbc <_dtoa_r+0x6c4>
 800abd4:	4652      	mov	r2, sl
 800abd6:	465b      	mov	r3, fp
 800abd8:	4913      	ldr	r1, [pc, #76]	; (800ac28 <_dtoa_r+0x630>)
 800abda:	2000      	movs	r0, #0
 800abdc:	f7f5 fb84 	bl	80002e8 <__aeabi_dsub>
 800abe0:	4602      	mov	r2, r0
 800abe2:	460b      	mov	r3, r1
 800abe4:	4640      	mov	r0, r8
 800abe6:	4649      	mov	r1, r9
 800abe8:	f7f5 ffa8 	bl	8000b3c <__aeabi_dcmplt>
 800abec:	2800      	cmp	r0, #0
 800abee:	f43f af35 	beq.w	800aa5c <_dtoa_r+0x464>
 800abf2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800abf4:	1e6b      	subs	r3, r5, #1
 800abf6:	930f      	str	r3, [sp, #60]	; 0x3c
 800abf8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800abfc:	2b30      	cmp	r3, #48	; 0x30
 800abfe:	d0f8      	beq.n	800abf2 <_dtoa_r+0x5fa>
 800ac00:	9700      	str	r7, [sp, #0]
 800ac02:	e049      	b.n	800ac98 <_dtoa_r+0x6a0>
 800ac04:	4b05      	ldr	r3, [pc, #20]	; (800ac1c <_dtoa_r+0x624>)
 800ac06:	f7f5 fd27 	bl	8000658 <__aeabi_dmul>
 800ac0a:	4680      	mov	r8, r0
 800ac0c:	4689      	mov	r9, r1
 800ac0e:	e7bd      	b.n	800ab8c <_dtoa_r+0x594>
 800ac10:	0800dff0 	.word	0x0800dff0
 800ac14:	0800dfc8 	.word	0x0800dfc8
 800ac18:	3ff00000 	.word	0x3ff00000
 800ac1c:	40240000 	.word	0x40240000
 800ac20:	401c0000 	.word	0x401c0000
 800ac24:	40140000 	.word	0x40140000
 800ac28:	3fe00000 	.word	0x3fe00000
 800ac2c:	9d01      	ldr	r5, [sp, #4]
 800ac2e:	4656      	mov	r6, sl
 800ac30:	465f      	mov	r7, fp
 800ac32:	4642      	mov	r2, r8
 800ac34:	464b      	mov	r3, r9
 800ac36:	4630      	mov	r0, r6
 800ac38:	4639      	mov	r1, r7
 800ac3a:	f7f5 fe37 	bl	80008ac <__aeabi_ddiv>
 800ac3e:	f7f5 ffbb 	bl	8000bb8 <__aeabi_d2iz>
 800ac42:	4682      	mov	sl, r0
 800ac44:	f7f5 fc9e 	bl	8000584 <__aeabi_i2d>
 800ac48:	4642      	mov	r2, r8
 800ac4a:	464b      	mov	r3, r9
 800ac4c:	f7f5 fd04 	bl	8000658 <__aeabi_dmul>
 800ac50:	4602      	mov	r2, r0
 800ac52:	460b      	mov	r3, r1
 800ac54:	4630      	mov	r0, r6
 800ac56:	4639      	mov	r1, r7
 800ac58:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800ac5c:	f7f5 fb44 	bl	80002e8 <__aeabi_dsub>
 800ac60:	f805 6b01 	strb.w	r6, [r5], #1
 800ac64:	9e01      	ldr	r6, [sp, #4]
 800ac66:	9f03      	ldr	r7, [sp, #12]
 800ac68:	1bae      	subs	r6, r5, r6
 800ac6a:	42b7      	cmp	r7, r6
 800ac6c:	4602      	mov	r2, r0
 800ac6e:	460b      	mov	r3, r1
 800ac70:	d135      	bne.n	800acde <_dtoa_r+0x6e6>
 800ac72:	f7f5 fb3b 	bl	80002ec <__adddf3>
 800ac76:	4642      	mov	r2, r8
 800ac78:	464b      	mov	r3, r9
 800ac7a:	4606      	mov	r6, r0
 800ac7c:	460f      	mov	r7, r1
 800ac7e:	f7f5 ff7b 	bl	8000b78 <__aeabi_dcmpgt>
 800ac82:	b9d0      	cbnz	r0, 800acba <_dtoa_r+0x6c2>
 800ac84:	4642      	mov	r2, r8
 800ac86:	464b      	mov	r3, r9
 800ac88:	4630      	mov	r0, r6
 800ac8a:	4639      	mov	r1, r7
 800ac8c:	f7f5 ff4c 	bl	8000b28 <__aeabi_dcmpeq>
 800ac90:	b110      	cbz	r0, 800ac98 <_dtoa_r+0x6a0>
 800ac92:	f01a 0f01 	tst.w	sl, #1
 800ac96:	d110      	bne.n	800acba <_dtoa_r+0x6c2>
 800ac98:	4620      	mov	r0, r4
 800ac9a:	ee18 1a10 	vmov	r1, s16
 800ac9e:	f000 fe79 	bl	800b994 <_Bfree>
 800aca2:	2300      	movs	r3, #0
 800aca4:	9800      	ldr	r0, [sp, #0]
 800aca6:	702b      	strb	r3, [r5, #0]
 800aca8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800acaa:	3001      	adds	r0, #1
 800acac:	6018      	str	r0, [r3, #0]
 800acae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	f43f acf1 	beq.w	800a698 <_dtoa_r+0xa0>
 800acb6:	601d      	str	r5, [r3, #0]
 800acb8:	e4ee      	b.n	800a698 <_dtoa_r+0xa0>
 800acba:	9f00      	ldr	r7, [sp, #0]
 800acbc:	462b      	mov	r3, r5
 800acbe:	461d      	mov	r5, r3
 800acc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800acc4:	2a39      	cmp	r2, #57	; 0x39
 800acc6:	d106      	bne.n	800acd6 <_dtoa_r+0x6de>
 800acc8:	9a01      	ldr	r2, [sp, #4]
 800acca:	429a      	cmp	r2, r3
 800accc:	d1f7      	bne.n	800acbe <_dtoa_r+0x6c6>
 800acce:	9901      	ldr	r1, [sp, #4]
 800acd0:	2230      	movs	r2, #48	; 0x30
 800acd2:	3701      	adds	r7, #1
 800acd4:	700a      	strb	r2, [r1, #0]
 800acd6:	781a      	ldrb	r2, [r3, #0]
 800acd8:	3201      	adds	r2, #1
 800acda:	701a      	strb	r2, [r3, #0]
 800acdc:	e790      	b.n	800ac00 <_dtoa_r+0x608>
 800acde:	4ba6      	ldr	r3, [pc, #664]	; (800af78 <_dtoa_r+0x980>)
 800ace0:	2200      	movs	r2, #0
 800ace2:	f7f5 fcb9 	bl	8000658 <__aeabi_dmul>
 800ace6:	2200      	movs	r2, #0
 800ace8:	2300      	movs	r3, #0
 800acea:	4606      	mov	r6, r0
 800acec:	460f      	mov	r7, r1
 800acee:	f7f5 ff1b 	bl	8000b28 <__aeabi_dcmpeq>
 800acf2:	2800      	cmp	r0, #0
 800acf4:	d09d      	beq.n	800ac32 <_dtoa_r+0x63a>
 800acf6:	e7cf      	b.n	800ac98 <_dtoa_r+0x6a0>
 800acf8:	9a08      	ldr	r2, [sp, #32]
 800acfa:	2a00      	cmp	r2, #0
 800acfc:	f000 80d7 	beq.w	800aeae <_dtoa_r+0x8b6>
 800ad00:	9a06      	ldr	r2, [sp, #24]
 800ad02:	2a01      	cmp	r2, #1
 800ad04:	f300 80ba 	bgt.w	800ae7c <_dtoa_r+0x884>
 800ad08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ad0a:	2a00      	cmp	r2, #0
 800ad0c:	f000 80b2 	beq.w	800ae74 <_dtoa_r+0x87c>
 800ad10:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ad14:	9e07      	ldr	r6, [sp, #28]
 800ad16:	9d04      	ldr	r5, [sp, #16]
 800ad18:	9a04      	ldr	r2, [sp, #16]
 800ad1a:	441a      	add	r2, r3
 800ad1c:	9204      	str	r2, [sp, #16]
 800ad1e:	9a05      	ldr	r2, [sp, #20]
 800ad20:	2101      	movs	r1, #1
 800ad22:	441a      	add	r2, r3
 800ad24:	4620      	mov	r0, r4
 800ad26:	9205      	str	r2, [sp, #20]
 800ad28:	f000 ff36 	bl	800bb98 <__i2b>
 800ad2c:	4607      	mov	r7, r0
 800ad2e:	2d00      	cmp	r5, #0
 800ad30:	dd0c      	ble.n	800ad4c <_dtoa_r+0x754>
 800ad32:	9b05      	ldr	r3, [sp, #20]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	dd09      	ble.n	800ad4c <_dtoa_r+0x754>
 800ad38:	42ab      	cmp	r3, r5
 800ad3a:	9a04      	ldr	r2, [sp, #16]
 800ad3c:	bfa8      	it	ge
 800ad3e:	462b      	movge	r3, r5
 800ad40:	1ad2      	subs	r2, r2, r3
 800ad42:	9204      	str	r2, [sp, #16]
 800ad44:	9a05      	ldr	r2, [sp, #20]
 800ad46:	1aed      	subs	r5, r5, r3
 800ad48:	1ad3      	subs	r3, r2, r3
 800ad4a:	9305      	str	r3, [sp, #20]
 800ad4c:	9b07      	ldr	r3, [sp, #28]
 800ad4e:	b31b      	cbz	r3, 800ad98 <_dtoa_r+0x7a0>
 800ad50:	9b08      	ldr	r3, [sp, #32]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	f000 80af 	beq.w	800aeb6 <_dtoa_r+0x8be>
 800ad58:	2e00      	cmp	r6, #0
 800ad5a:	dd13      	ble.n	800ad84 <_dtoa_r+0x78c>
 800ad5c:	4639      	mov	r1, r7
 800ad5e:	4632      	mov	r2, r6
 800ad60:	4620      	mov	r0, r4
 800ad62:	f000 ffd9 	bl	800bd18 <__pow5mult>
 800ad66:	ee18 2a10 	vmov	r2, s16
 800ad6a:	4601      	mov	r1, r0
 800ad6c:	4607      	mov	r7, r0
 800ad6e:	4620      	mov	r0, r4
 800ad70:	f000 ff28 	bl	800bbc4 <__multiply>
 800ad74:	ee18 1a10 	vmov	r1, s16
 800ad78:	4680      	mov	r8, r0
 800ad7a:	4620      	mov	r0, r4
 800ad7c:	f000 fe0a 	bl	800b994 <_Bfree>
 800ad80:	ee08 8a10 	vmov	s16, r8
 800ad84:	9b07      	ldr	r3, [sp, #28]
 800ad86:	1b9a      	subs	r2, r3, r6
 800ad88:	d006      	beq.n	800ad98 <_dtoa_r+0x7a0>
 800ad8a:	ee18 1a10 	vmov	r1, s16
 800ad8e:	4620      	mov	r0, r4
 800ad90:	f000 ffc2 	bl	800bd18 <__pow5mult>
 800ad94:	ee08 0a10 	vmov	s16, r0
 800ad98:	2101      	movs	r1, #1
 800ad9a:	4620      	mov	r0, r4
 800ad9c:	f000 fefc 	bl	800bb98 <__i2b>
 800ada0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	4606      	mov	r6, r0
 800ada6:	f340 8088 	ble.w	800aeba <_dtoa_r+0x8c2>
 800adaa:	461a      	mov	r2, r3
 800adac:	4601      	mov	r1, r0
 800adae:	4620      	mov	r0, r4
 800adb0:	f000 ffb2 	bl	800bd18 <__pow5mult>
 800adb4:	9b06      	ldr	r3, [sp, #24]
 800adb6:	2b01      	cmp	r3, #1
 800adb8:	4606      	mov	r6, r0
 800adba:	f340 8081 	ble.w	800aec0 <_dtoa_r+0x8c8>
 800adbe:	f04f 0800 	mov.w	r8, #0
 800adc2:	6933      	ldr	r3, [r6, #16]
 800adc4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800adc8:	6918      	ldr	r0, [r3, #16]
 800adca:	f000 fe95 	bl	800baf8 <__hi0bits>
 800adce:	f1c0 0020 	rsb	r0, r0, #32
 800add2:	9b05      	ldr	r3, [sp, #20]
 800add4:	4418      	add	r0, r3
 800add6:	f010 001f 	ands.w	r0, r0, #31
 800adda:	f000 8092 	beq.w	800af02 <_dtoa_r+0x90a>
 800adde:	f1c0 0320 	rsb	r3, r0, #32
 800ade2:	2b04      	cmp	r3, #4
 800ade4:	f340 808a 	ble.w	800aefc <_dtoa_r+0x904>
 800ade8:	f1c0 001c 	rsb	r0, r0, #28
 800adec:	9b04      	ldr	r3, [sp, #16]
 800adee:	4403      	add	r3, r0
 800adf0:	9304      	str	r3, [sp, #16]
 800adf2:	9b05      	ldr	r3, [sp, #20]
 800adf4:	4403      	add	r3, r0
 800adf6:	4405      	add	r5, r0
 800adf8:	9305      	str	r3, [sp, #20]
 800adfa:	9b04      	ldr	r3, [sp, #16]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	dd07      	ble.n	800ae10 <_dtoa_r+0x818>
 800ae00:	ee18 1a10 	vmov	r1, s16
 800ae04:	461a      	mov	r2, r3
 800ae06:	4620      	mov	r0, r4
 800ae08:	f000 ffe0 	bl	800bdcc <__lshift>
 800ae0c:	ee08 0a10 	vmov	s16, r0
 800ae10:	9b05      	ldr	r3, [sp, #20]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	dd05      	ble.n	800ae22 <_dtoa_r+0x82a>
 800ae16:	4631      	mov	r1, r6
 800ae18:	461a      	mov	r2, r3
 800ae1a:	4620      	mov	r0, r4
 800ae1c:	f000 ffd6 	bl	800bdcc <__lshift>
 800ae20:	4606      	mov	r6, r0
 800ae22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d06e      	beq.n	800af06 <_dtoa_r+0x90e>
 800ae28:	ee18 0a10 	vmov	r0, s16
 800ae2c:	4631      	mov	r1, r6
 800ae2e:	f001 f83d 	bl	800beac <__mcmp>
 800ae32:	2800      	cmp	r0, #0
 800ae34:	da67      	bge.n	800af06 <_dtoa_r+0x90e>
 800ae36:	9b00      	ldr	r3, [sp, #0]
 800ae38:	3b01      	subs	r3, #1
 800ae3a:	ee18 1a10 	vmov	r1, s16
 800ae3e:	9300      	str	r3, [sp, #0]
 800ae40:	220a      	movs	r2, #10
 800ae42:	2300      	movs	r3, #0
 800ae44:	4620      	mov	r0, r4
 800ae46:	f000 fdc7 	bl	800b9d8 <__multadd>
 800ae4a:	9b08      	ldr	r3, [sp, #32]
 800ae4c:	ee08 0a10 	vmov	s16, r0
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	f000 81b1 	beq.w	800b1b8 <_dtoa_r+0xbc0>
 800ae56:	2300      	movs	r3, #0
 800ae58:	4639      	mov	r1, r7
 800ae5a:	220a      	movs	r2, #10
 800ae5c:	4620      	mov	r0, r4
 800ae5e:	f000 fdbb 	bl	800b9d8 <__multadd>
 800ae62:	9b02      	ldr	r3, [sp, #8]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	4607      	mov	r7, r0
 800ae68:	f300 808e 	bgt.w	800af88 <_dtoa_r+0x990>
 800ae6c:	9b06      	ldr	r3, [sp, #24]
 800ae6e:	2b02      	cmp	r3, #2
 800ae70:	dc51      	bgt.n	800af16 <_dtoa_r+0x91e>
 800ae72:	e089      	b.n	800af88 <_dtoa_r+0x990>
 800ae74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ae76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ae7a:	e74b      	b.n	800ad14 <_dtoa_r+0x71c>
 800ae7c:	9b03      	ldr	r3, [sp, #12]
 800ae7e:	1e5e      	subs	r6, r3, #1
 800ae80:	9b07      	ldr	r3, [sp, #28]
 800ae82:	42b3      	cmp	r3, r6
 800ae84:	bfbf      	itttt	lt
 800ae86:	9b07      	ldrlt	r3, [sp, #28]
 800ae88:	9607      	strlt	r6, [sp, #28]
 800ae8a:	1af2      	sublt	r2, r6, r3
 800ae8c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ae8e:	bfb6      	itet	lt
 800ae90:	189b      	addlt	r3, r3, r2
 800ae92:	1b9e      	subge	r6, r3, r6
 800ae94:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ae96:	9b03      	ldr	r3, [sp, #12]
 800ae98:	bfb8      	it	lt
 800ae9a:	2600      	movlt	r6, #0
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	bfb7      	itett	lt
 800aea0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800aea4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800aea8:	1a9d      	sublt	r5, r3, r2
 800aeaa:	2300      	movlt	r3, #0
 800aeac:	e734      	b.n	800ad18 <_dtoa_r+0x720>
 800aeae:	9e07      	ldr	r6, [sp, #28]
 800aeb0:	9d04      	ldr	r5, [sp, #16]
 800aeb2:	9f08      	ldr	r7, [sp, #32]
 800aeb4:	e73b      	b.n	800ad2e <_dtoa_r+0x736>
 800aeb6:	9a07      	ldr	r2, [sp, #28]
 800aeb8:	e767      	b.n	800ad8a <_dtoa_r+0x792>
 800aeba:	9b06      	ldr	r3, [sp, #24]
 800aebc:	2b01      	cmp	r3, #1
 800aebe:	dc18      	bgt.n	800aef2 <_dtoa_r+0x8fa>
 800aec0:	f1ba 0f00 	cmp.w	sl, #0
 800aec4:	d115      	bne.n	800aef2 <_dtoa_r+0x8fa>
 800aec6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aeca:	b993      	cbnz	r3, 800aef2 <_dtoa_r+0x8fa>
 800aecc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800aed0:	0d1b      	lsrs	r3, r3, #20
 800aed2:	051b      	lsls	r3, r3, #20
 800aed4:	b183      	cbz	r3, 800aef8 <_dtoa_r+0x900>
 800aed6:	9b04      	ldr	r3, [sp, #16]
 800aed8:	3301      	adds	r3, #1
 800aeda:	9304      	str	r3, [sp, #16]
 800aedc:	9b05      	ldr	r3, [sp, #20]
 800aede:	3301      	adds	r3, #1
 800aee0:	9305      	str	r3, [sp, #20]
 800aee2:	f04f 0801 	mov.w	r8, #1
 800aee6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	f47f af6a 	bne.w	800adc2 <_dtoa_r+0x7ca>
 800aeee:	2001      	movs	r0, #1
 800aef0:	e76f      	b.n	800add2 <_dtoa_r+0x7da>
 800aef2:	f04f 0800 	mov.w	r8, #0
 800aef6:	e7f6      	b.n	800aee6 <_dtoa_r+0x8ee>
 800aef8:	4698      	mov	r8, r3
 800aefa:	e7f4      	b.n	800aee6 <_dtoa_r+0x8ee>
 800aefc:	f43f af7d 	beq.w	800adfa <_dtoa_r+0x802>
 800af00:	4618      	mov	r0, r3
 800af02:	301c      	adds	r0, #28
 800af04:	e772      	b.n	800adec <_dtoa_r+0x7f4>
 800af06:	9b03      	ldr	r3, [sp, #12]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	dc37      	bgt.n	800af7c <_dtoa_r+0x984>
 800af0c:	9b06      	ldr	r3, [sp, #24]
 800af0e:	2b02      	cmp	r3, #2
 800af10:	dd34      	ble.n	800af7c <_dtoa_r+0x984>
 800af12:	9b03      	ldr	r3, [sp, #12]
 800af14:	9302      	str	r3, [sp, #8]
 800af16:	9b02      	ldr	r3, [sp, #8]
 800af18:	b96b      	cbnz	r3, 800af36 <_dtoa_r+0x93e>
 800af1a:	4631      	mov	r1, r6
 800af1c:	2205      	movs	r2, #5
 800af1e:	4620      	mov	r0, r4
 800af20:	f000 fd5a 	bl	800b9d8 <__multadd>
 800af24:	4601      	mov	r1, r0
 800af26:	4606      	mov	r6, r0
 800af28:	ee18 0a10 	vmov	r0, s16
 800af2c:	f000 ffbe 	bl	800beac <__mcmp>
 800af30:	2800      	cmp	r0, #0
 800af32:	f73f adbb 	bgt.w	800aaac <_dtoa_r+0x4b4>
 800af36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af38:	9d01      	ldr	r5, [sp, #4]
 800af3a:	43db      	mvns	r3, r3
 800af3c:	9300      	str	r3, [sp, #0]
 800af3e:	f04f 0800 	mov.w	r8, #0
 800af42:	4631      	mov	r1, r6
 800af44:	4620      	mov	r0, r4
 800af46:	f000 fd25 	bl	800b994 <_Bfree>
 800af4a:	2f00      	cmp	r7, #0
 800af4c:	f43f aea4 	beq.w	800ac98 <_dtoa_r+0x6a0>
 800af50:	f1b8 0f00 	cmp.w	r8, #0
 800af54:	d005      	beq.n	800af62 <_dtoa_r+0x96a>
 800af56:	45b8      	cmp	r8, r7
 800af58:	d003      	beq.n	800af62 <_dtoa_r+0x96a>
 800af5a:	4641      	mov	r1, r8
 800af5c:	4620      	mov	r0, r4
 800af5e:	f000 fd19 	bl	800b994 <_Bfree>
 800af62:	4639      	mov	r1, r7
 800af64:	4620      	mov	r0, r4
 800af66:	f000 fd15 	bl	800b994 <_Bfree>
 800af6a:	e695      	b.n	800ac98 <_dtoa_r+0x6a0>
 800af6c:	2600      	movs	r6, #0
 800af6e:	4637      	mov	r7, r6
 800af70:	e7e1      	b.n	800af36 <_dtoa_r+0x93e>
 800af72:	9700      	str	r7, [sp, #0]
 800af74:	4637      	mov	r7, r6
 800af76:	e599      	b.n	800aaac <_dtoa_r+0x4b4>
 800af78:	40240000 	.word	0x40240000
 800af7c:	9b08      	ldr	r3, [sp, #32]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	f000 80ca 	beq.w	800b118 <_dtoa_r+0xb20>
 800af84:	9b03      	ldr	r3, [sp, #12]
 800af86:	9302      	str	r3, [sp, #8]
 800af88:	2d00      	cmp	r5, #0
 800af8a:	dd05      	ble.n	800af98 <_dtoa_r+0x9a0>
 800af8c:	4639      	mov	r1, r7
 800af8e:	462a      	mov	r2, r5
 800af90:	4620      	mov	r0, r4
 800af92:	f000 ff1b 	bl	800bdcc <__lshift>
 800af96:	4607      	mov	r7, r0
 800af98:	f1b8 0f00 	cmp.w	r8, #0
 800af9c:	d05b      	beq.n	800b056 <_dtoa_r+0xa5e>
 800af9e:	6879      	ldr	r1, [r7, #4]
 800afa0:	4620      	mov	r0, r4
 800afa2:	f000 fcb7 	bl	800b914 <_Balloc>
 800afa6:	4605      	mov	r5, r0
 800afa8:	b928      	cbnz	r0, 800afb6 <_dtoa_r+0x9be>
 800afaa:	4b87      	ldr	r3, [pc, #540]	; (800b1c8 <_dtoa_r+0xbd0>)
 800afac:	4602      	mov	r2, r0
 800afae:	f240 21ea 	movw	r1, #746	; 0x2ea
 800afb2:	f7ff bb3b 	b.w	800a62c <_dtoa_r+0x34>
 800afb6:	693a      	ldr	r2, [r7, #16]
 800afb8:	3202      	adds	r2, #2
 800afba:	0092      	lsls	r2, r2, #2
 800afbc:	f107 010c 	add.w	r1, r7, #12
 800afc0:	300c      	adds	r0, #12
 800afc2:	f7fd fc93 	bl	80088ec <memcpy>
 800afc6:	2201      	movs	r2, #1
 800afc8:	4629      	mov	r1, r5
 800afca:	4620      	mov	r0, r4
 800afcc:	f000 fefe 	bl	800bdcc <__lshift>
 800afd0:	9b01      	ldr	r3, [sp, #4]
 800afd2:	f103 0901 	add.w	r9, r3, #1
 800afd6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800afda:	4413      	add	r3, r2
 800afdc:	9305      	str	r3, [sp, #20]
 800afde:	f00a 0301 	and.w	r3, sl, #1
 800afe2:	46b8      	mov	r8, r7
 800afe4:	9304      	str	r3, [sp, #16]
 800afe6:	4607      	mov	r7, r0
 800afe8:	4631      	mov	r1, r6
 800afea:	ee18 0a10 	vmov	r0, s16
 800afee:	f7ff fa75 	bl	800a4dc <quorem>
 800aff2:	4641      	mov	r1, r8
 800aff4:	9002      	str	r0, [sp, #8]
 800aff6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800affa:	ee18 0a10 	vmov	r0, s16
 800affe:	f000 ff55 	bl	800beac <__mcmp>
 800b002:	463a      	mov	r2, r7
 800b004:	9003      	str	r0, [sp, #12]
 800b006:	4631      	mov	r1, r6
 800b008:	4620      	mov	r0, r4
 800b00a:	f000 ff6b 	bl	800bee4 <__mdiff>
 800b00e:	68c2      	ldr	r2, [r0, #12]
 800b010:	f109 3bff 	add.w	fp, r9, #4294967295
 800b014:	4605      	mov	r5, r0
 800b016:	bb02      	cbnz	r2, 800b05a <_dtoa_r+0xa62>
 800b018:	4601      	mov	r1, r0
 800b01a:	ee18 0a10 	vmov	r0, s16
 800b01e:	f000 ff45 	bl	800beac <__mcmp>
 800b022:	4602      	mov	r2, r0
 800b024:	4629      	mov	r1, r5
 800b026:	4620      	mov	r0, r4
 800b028:	9207      	str	r2, [sp, #28]
 800b02a:	f000 fcb3 	bl	800b994 <_Bfree>
 800b02e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b032:	ea43 0102 	orr.w	r1, r3, r2
 800b036:	9b04      	ldr	r3, [sp, #16]
 800b038:	430b      	orrs	r3, r1
 800b03a:	464d      	mov	r5, r9
 800b03c:	d10f      	bne.n	800b05e <_dtoa_r+0xa66>
 800b03e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b042:	d02a      	beq.n	800b09a <_dtoa_r+0xaa2>
 800b044:	9b03      	ldr	r3, [sp, #12]
 800b046:	2b00      	cmp	r3, #0
 800b048:	dd02      	ble.n	800b050 <_dtoa_r+0xa58>
 800b04a:	9b02      	ldr	r3, [sp, #8]
 800b04c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b050:	f88b a000 	strb.w	sl, [fp]
 800b054:	e775      	b.n	800af42 <_dtoa_r+0x94a>
 800b056:	4638      	mov	r0, r7
 800b058:	e7ba      	b.n	800afd0 <_dtoa_r+0x9d8>
 800b05a:	2201      	movs	r2, #1
 800b05c:	e7e2      	b.n	800b024 <_dtoa_r+0xa2c>
 800b05e:	9b03      	ldr	r3, [sp, #12]
 800b060:	2b00      	cmp	r3, #0
 800b062:	db04      	blt.n	800b06e <_dtoa_r+0xa76>
 800b064:	9906      	ldr	r1, [sp, #24]
 800b066:	430b      	orrs	r3, r1
 800b068:	9904      	ldr	r1, [sp, #16]
 800b06a:	430b      	orrs	r3, r1
 800b06c:	d122      	bne.n	800b0b4 <_dtoa_r+0xabc>
 800b06e:	2a00      	cmp	r2, #0
 800b070:	ddee      	ble.n	800b050 <_dtoa_r+0xa58>
 800b072:	ee18 1a10 	vmov	r1, s16
 800b076:	2201      	movs	r2, #1
 800b078:	4620      	mov	r0, r4
 800b07a:	f000 fea7 	bl	800bdcc <__lshift>
 800b07e:	4631      	mov	r1, r6
 800b080:	ee08 0a10 	vmov	s16, r0
 800b084:	f000 ff12 	bl	800beac <__mcmp>
 800b088:	2800      	cmp	r0, #0
 800b08a:	dc03      	bgt.n	800b094 <_dtoa_r+0xa9c>
 800b08c:	d1e0      	bne.n	800b050 <_dtoa_r+0xa58>
 800b08e:	f01a 0f01 	tst.w	sl, #1
 800b092:	d0dd      	beq.n	800b050 <_dtoa_r+0xa58>
 800b094:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b098:	d1d7      	bne.n	800b04a <_dtoa_r+0xa52>
 800b09a:	2339      	movs	r3, #57	; 0x39
 800b09c:	f88b 3000 	strb.w	r3, [fp]
 800b0a0:	462b      	mov	r3, r5
 800b0a2:	461d      	mov	r5, r3
 800b0a4:	3b01      	subs	r3, #1
 800b0a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b0aa:	2a39      	cmp	r2, #57	; 0x39
 800b0ac:	d071      	beq.n	800b192 <_dtoa_r+0xb9a>
 800b0ae:	3201      	adds	r2, #1
 800b0b0:	701a      	strb	r2, [r3, #0]
 800b0b2:	e746      	b.n	800af42 <_dtoa_r+0x94a>
 800b0b4:	2a00      	cmp	r2, #0
 800b0b6:	dd07      	ble.n	800b0c8 <_dtoa_r+0xad0>
 800b0b8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b0bc:	d0ed      	beq.n	800b09a <_dtoa_r+0xaa2>
 800b0be:	f10a 0301 	add.w	r3, sl, #1
 800b0c2:	f88b 3000 	strb.w	r3, [fp]
 800b0c6:	e73c      	b.n	800af42 <_dtoa_r+0x94a>
 800b0c8:	9b05      	ldr	r3, [sp, #20]
 800b0ca:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b0ce:	4599      	cmp	r9, r3
 800b0d0:	d047      	beq.n	800b162 <_dtoa_r+0xb6a>
 800b0d2:	ee18 1a10 	vmov	r1, s16
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	220a      	movs	r2, #10
 800b0da:	4620      	mov	r0, r4
 800b0dc:	f000 fc7c 	bl	800b9d8 <__multadd>
 800b0e0:	45b8      	cmp	r8, r7
 800b0e2:	ee08 0a10 	vmov	s16, r0
 800b0e6:	f04f 0300 	mov.w	r3, #0
 800b0ea:	f04f 020a 	mov.w	r2, #10
 800b0ee:	4641      	mov	r1, r8
 800b0f0:	4620      	mov	r0, r4
 800b0f2:	d106      	bne.n	800b102 <_dtoa_r+0xb0a>
 800b0f4:	f000 fc70 	bl	800b9d8 <__multadd>
 800b0f8:	4680      	mov	r8, r0
 800b0fa:	4607      	mov	r7, r0
 800b0fc:	f109 0901 	add.w	r9, r9, #1
 800b100:	e772      	b.n	800afe8 <_dtoa_r+0x9f0>
 800b102:	f000 fc69 	bl	800b9d8 <__multadd>
 800b106:	4639      	mov	r1, r7
 800b108:	4680      	mov	r8, r0
 800b10a:	2300      	movs	r3, #0
 800b10c:	220a      	movs	r2, #10
 800b10e:	4620      	mov	r0, r4
 800b110:	f000 fc62 	bl	800b9d8 <__multadd>
 800b114:	4607      	mov	r7, r0
 800b116:	e7f1      	b.n	800b0fc <_dtoa_r+0xb04>
 800b118:	9b03      	ldr	r3, [sp, #12]
 800b11a:	9302      	str	r3, [sp, #8]
 800b11c:	9d01      	ldr	r5, [sp, #4]
 800b11e:	ee18 0a10 	vmov	r0, s16
 800b122:	4631      	mov	r1, r6
 800b124:	f7ff f9da 	bl	800a4dc <quorem>
 800b128:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b12c:	9b01      	ldr	r3, [sp, #4]
 800b12e:	f805 ab01 	strb.w	sl, [r5], #1
 800b132:	1aea      	subs	r2, r5, r3
 800b134:	9b02      	ldr	r3, [sp, #8]
 800b136:	4293      	cmp	r3, r2
 800b138:	dd09      	ble.n	800b14e <_dtoa_r+0xb56>
 800b13a:	ee18 1a10 	vmov	r1, s16
 800b13e:	2300      	movs	r3, #0
 800b140:	220a      	movs	r2, #10
 800b142:	4620      	mov	r0, r4
 800b144:	f000 fc48 	bl	800b9d8 <__multadd>
 800b148:	ee08 0a10 	vmov	s16, r0
 800b14c:	e7e7      	b.n	800b11e <_dtoa_r+0xb26>
 800b14e:	9b02      	ldr	r3, [sp, #8]
 800b150:	2b00      	cmp	r3, #0
 800b152:	bfc8      	it	gt
 800b154:	461d      	movgt	r5, r3
 800b156:	9b01      	ldr	r3, [sp, #4]
 800b158:	bfd8      	it	le
 800b15a:	2501      	movle	r5, #1
 800b15c:	441d      	add	r5, r3
 800b15e:	f04f 0800 	mov.w	r8, #0
 800b162:	ee18 1a10 	vmov	r1, s16
 800b166:	2201      	movs	r2, #1
 800b168:	4620      	mov	r0, r4
 800b16a:	f000 fe2f 	bl	800bdcc <__lshift>
 800b16e:	4631      	mov	r1, r6
 800b170:	ee08 0a10 	vmov	s16, r0
 800b174:	f000 fe9a 	bl	800beac <__mcmp>
 800b178:	2800      	cmp	r0, #0
 800b17a:	dc91      	bgt.n	800b0a0 <_dtoa_r+0xaa8>
 800b17c:	d102      	bne.n	800b184 <_dtoa_r+0xb8c>
 800b17e:	f01a 0f01 	tst.w	sl, #1
 800b182:	d18d      	bne.n	800b0a0 <_dtoa_r+0xaa8>
 800b184:	462b      	mov	r3, r5
 800b186:	461d      	mov	r5, r3
 800b188:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b18c:	2a30      	cmp	r2, #48	; 0x30
 800b18e:	d0fa      	beq.n	800b186 <_dtoa_r+0xb8e>
 800b190:	e6d7      	b.n	800af42 <_dtoa_r+0x94a>
 800b192:	9a01      	ldr	r2, [sp, #4]
 800b194:	429a      	cmp	r2, r3
 800b196:	d184      	bne.n	800b0a2 <_dtoa_r+0xaaa>
 800b198:	9b00      	ldr	r3, [sp, #0]
 800b19a:	3301      	adds	r3, #1
 800b19c:	9300      	str	r3, [sp, #0]
 800b19e:	2331      	movs	r3, #49	; 0x31
 800b1a0:	7013      	strb	r3, [r2, #0]
 800b1a2:	e6ce      	b.n	800af42 <_dtoa_r+0x94a>
 800b1a4:	4b09      	ldr	r3, [pc, #36]	; (800b1cc <_dtoa_r+0xbd4>)
 800b1a6:	f7ff ba95 	b.w	800a6d4 <_dtoa_r+0xdc>
 800b1aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	f47f aa6e 	bne.w	800a68e <_dtoa_r+0x96>
 800b1b2:	4b07      	ldr	r3, [pc, #28]	; (800b1d0 <_dtoa_r+0xbd8>)
 800b1b4:	f7ff ba8e 	b.w	800a6d4 <_dtoa_r+0xdc>
 800b1b8:	9b02      	ldr	r3, [sp, #8]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	dcae      	bgt.n	800b11c <_dtoa_r+0xb24>
 800b1be:	9b06      	ldr	r3, [sp, #24]
 800b1c0:	2b02      	cmp	r3, #2
 800b1c2:	f73f aea8 	bgt.w	800af16 <_dtoa_r+0x91e>
 800b1c6:	e7a9      	b.n	800b11c <_dtoa_r+0xb24>
 800b1c8:	0800dee0 	.word	0x0800dee0
 800b1cc:	0800e0d9 	.word	0x0800e0d9
 800b1d0:	0800de61 	.word	0x0800de61

0800b1d4 <rshift>:
 800b1d4:	6903      	ldr	r3, [r0, #16]
 800b1d6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b1da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b1de:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b1e2:	f100 0414 	add.w	r4, r0, #20
 800b1e6:	dd45      	ble.n	800b274 <rshift+0xa0>
 800b1e8:	f011 011f 	ands.w	r1, r1, #31
 800b1ec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b1f0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b1f4:	d10c      	bne.n	800b210 <rshift+0x3c>
 800b1f6:	f100 0710 	add.w	r7, r0, #16
 800b1fa:	4629      	mov	r1, r5
 800b1fc:	42b1      	cmp	r1, r6
 800b1fe:	d334      	bcc.n	800b26a <rshift+0x96>
 800b200:	1a9b      	subs	r3, r3, r2
 800b202:	009b      	lsls	r3, r3, #2
 800b204:	1eea      	subs	r2, r5, #3
 800b206:	4296      	cmp	r6, r2
 800b208:	bf38      	it	cc
 800b20a:	2300      	movcc	r3, #0
 800b20c:	4423      	add	r3, r4
 800b20e:	e015      	b.n	800b23c <rshift+0x68>
 800b210:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b214:	f1c1 0820 	rsb	r8, r1, #32
 800b218:	40cf      	lsrs	r7, r1
 800b21a:	f105 0e04 	add.w	lr, r5, #4
 800b21e:	46a1      	mov	r9, r4
 800b220:	4576      	cmp	r6, lr
 800b222:	46f4      	mov	ip, lr
 800b224:	d815      	bhi.n	800b252 <rshift+0x7e>
 800b226:	1a9a      	subs	r2, r3, r2
 800b228:	0092      	lsls	r2, r2, #2
 800b22a:	3a04      	subs	r2, #4
 800b22c:	3501      	adds	r5, #1
 800b22e:	42ae      	cmp	r6, r5
 800b230:	bf38      	it	cc
 800b232:	2200      	movcc	r2, #0
 800b234:	18a3      	adds	r3, r4, r2
 800b236:	50a7      	str	r7, [r4, r2]
 800b238:	b107      	cbz	r7, 800b23c <rshift+0x68>
 800b23a:	3304      	adds	r3, #4
 800b23c:	1b1a      	subs	r2, r3, r4
 800b23e:	42a3      	cmp	r3, r4
 800b240:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b244:	bf08      	it	eq
 800b246:	2300      	moveq	r3, #0
 800b248:	6102      	str	r2, [r0, #16]
 800b24a:	bf08      	it	eq
 800b24c:	6143      	streq	r3, [r0, #20]
 800b24e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b252:	f8dc c000 	ldr.w	ip, [ip]
 800b256:	fa0c fc08 	lsl.w	ip, ip, r8
 800b25a:	ea4c 0707 	orr.w	r7, ip, r7
 800b25e:	f849 7b04 	str.w	r7, [r9], #4
 800b262:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b266:	40cf      	lsrs	r7, r1
 800b268:	e7da      	b.n	800b220 <rshift+0x4c>
 800b26a:	f851 cb04 	ldr.w	ip, [r1], #4
 800b26e:	f847 cf04 	str.w	ip, [r7, #4]!
 800b272:	e7c3      	b.n	800b1fc <rshift+0x28>
 800b274:	4623      	mov	r3, r4
 800b276:	e7e1      	b.n	800b23c <rshift+0x68>

0800b278 <__hexdig_fun>:
 800b278:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b27c:	2b09      	cmp	r3, #9
 800b27e:	d802      	bhi.n	800b286 <__hexdig_fun+0xe>
 800b280:	3820      	subs	r0, #32
 800b282:	b2c0      	uxtb	r0, r0
 800b284:	4770      	bx	lr
 800b286:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b28a:	2b05      	cmp	r3, #5
 800b28c:	d801      	bhi.n	800b292 <__hexdig_fun+0x1a>
 800b28e:	3847      	subs	r0, #71	; 0x47
 800b290:	e7f7      	b.n	800b282 <__hexdig_fun+0xa>
 800b292:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b296:	2b05      	cmp	r3, #5
 800b298:	d801      	bhi.n	800b29e <__hexdig_fun+0x26>
 800b29a:	3827      	subs	r0, #39	; 0x27
 800b29c:	e7f1      	b.n	800b282 <__hexdig_fun+0xa>
 800b29e:	2000      	movs	r0, #0
 800b2a0:	4770      	bx	lr
	...

0800b2a4 <__gethex>:
 800b2a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2a8:	ed2d 8b02 	vpush	{d8}
 800b2ac:	b089      	sub	sp, #36	; 0x24
 800b2ae:	ee08 0a10 	vmov	s16, r0
 800b2b2:	9304      	str	r3, [sp, #16]
 800b2b4:	4bb4      	ldr	r3, [pc, #720]	; (800b588 <__gethex+0x2e4>)
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	9301      	str	r3, [sp, #4]
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	468b      	mov	fp, r1
 800b2be:	4690      	mov	r8, r2
 800b2c0:	f7f4 ffb0 	bl	8000224 <strlen>
 800b2c4:	9b01      	ldr	r3, [sp, #4]
 800b2c6:	f8db 2000 	ldr.w	r2, [fp]
 800b2ca:	4403      	add	r3, r0
 800b2cc:	4682      	mov	sl, r0
 800b2ce:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b2d2:	9305      	str	r3, [sp, #20]
 800b2d4:	1c93      	adds	r3, r2, #2
 800b2d6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b2da:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b2de:	32fe      	adds	r2, #254	; 0xfe
 800b2e0:	18d1      	adds	r1, r2, r3
 800b2e2:	461f      	mov	r7, r3
 800b2e4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b2e8:	9100      	str	r1, [sp, #0]
 800b2ea:	2830      	cmp	r0, #48	; 0x30
 800b2ec:	d0f8      	beq.n	800b2e0 <__gethex+0x3c>
 800b2ee:	f7ff ffc3 	bl	800b278 <__hexdig_fun>
 800b2f2:	4604      	mov	r4, r0
 800b2f4:	2800      	cmp	r0, #0
 800b2f6:	d13a      	bne.n	800b36e <__gethex+0xca>
 800b2f8:	9901      	ldr	r1, [sp, #4]
 800b2fa:	4652      	mov	r2, sl
 800b2fc:	4638      	mov	r0, r7
 800b2fe:	f001 fda3 	bl	800ce48 <strncmp>
 800b302:	4605      	mov	r5, r0
 800b304:	2800      	cmp	r0, #0
 800b306:	d168      	bne.n	800b3da <__gethex+0x136>
 800b308:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b30c:	eb07 060a 	add.w	r6, r7, sl
 800b310:	f7ff ffb2 	bl	800b278 <__hexdig_fun>
 800b314:	2800      	cmp	r0, #0
 800b316:	d062      	beq.n	800b3de <__gethex+0x13a>
 800b318:	4633      	mov	r3, r6
 800b31a:	7818      	ldrb	r0, [r3, #0]
 800b31c:	2830      	cmp	r0, #48	; 0x30
 800b31e:	461f      	mov	r7, r3
 800b320:	f103 0301 	add.w	r3, r3, #1
 800b324:	d0f9      	beq.n	800b31a <__gethex+0x76>
 800b326:	f7ff ffa7 	bl	800b278 <__hexdig_fun>
 800b32a:	2301      	movs	r3, #1
 800b32c:	fab0 f480 	clz	r4, r0
 800b330:	0964      	lsrs	r4, r4, #5
 800b332:	4635      	mov	r5, r6
 800b334:	9300      	str	r3, [sp, #0]
 800b336:	463a      	mov	r2, r7
 800b338:	4616      	mov	r6, r2
 800b33a:	3201      	adds	r2, #1
 800b33c:	7830      	ldrb	r0, [r6, #0]
 800b33e:	f7ff ff9b 	bl	800b278 <__hexdig_fun>
 800b342:	2800      	cmp	r0, #0
 800b344:	d1f8      	bne.n	800b338 <__gethex+0x94>
 800b346:	9901      	ldr	r1, [sp, #4]
 800b348:	4652      	mov	r2, sl
 800b34a:	4630      	mov	r0, r6
 800b34c:	f001 fd7c 	bl	800ce48 <strncmp>
 800b350:	b980      	cbnz	r0, 800b374 <__gethex+0xd0>
 800b352:	b94d      	cbnz	r5, 800b368 <__gethex+0xc4>
 800b354:	eb06 050a 	add.w	r5, r6, sl
 800b358:	462a      	mov	r2, r5
 800b35a:	4616      	mov	r6, r2
 800b35c:	3201      	adds	r2, #1
 800b35e:	7830      	ldrb	r0, [r6, #0]
 800b360:	f7ff ff8a 	bl	800b278 <__hexdig_fun>
 800b364:	2800      	cmp	r0, #0
 800b366:	d1f8      	bne.n	800b35a <__gethex+0xb6>
 800b368:	1bad      	subs	r5, r5, r6
 800b36a:	00ad      	lsls	r5, r5, #2
 800b36c:	e004      	b.n	800b378 <__gethex+0xd4>
 800b36e:	2400      	movs	r4, #0
 800b370:	4625      	mov	r5, r4
 800b372:	e7e0      	b.n	800b336 <__gethex+0x92>
 800b374:	2d00      	cmp	r5, #0
 800b376:	d1f7      	bne.n	800b368 <__gethex+0xc4>
 800b378:	7833      	ldrb	r3, [r6, #0]
 800b37a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b37e:	2b50      	cmp	r3, #80	; 0x50
 800b380:	d13b      	bne.n	800b3fa <__gethex+0x156>
 800b382:	7873      	ldrb	r3, [r6, #1]
 800b384:	2b2b      	cmp	r3, #43	; 0x2b
 800b386:	d02c      	beq.n	800b3e2 <__gethex+0x13e>
 800b388:	2b2d      	cmp	r3, #45	; 0x2d
 800b38a:	d02e      	beq.n	800b3ea <__gethex+0x146>
 800b38c:	1c71      	adds	r1, r6, #1
 800b38e:	f04f 0900 	mov.w	r9, #0
 800b392:	7808      	ldrb	r0, [r1, #0]
 800b394:	f7ff ff70 	bl	800b278 <__hexdig_fun>
 800b398:	1e43      	subs	r3, r0, #1
 800b39a:	b2db      	uxtb	r3, r3
 800b39c:	2b18      	cmp	r3, #24
 800b39e:	d82c      	bhi.n	800b3fa <__gethex+0x156>
 800b3a0:	f1a0 0210 	sub.w	r2, r0, #16
 800b3a4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b3a8:	f7ff ff66 	bl	800b278 <__hexdig_fun>
 800b3ac:	1e43      	subs	r3, r0, #1
 800b3ae:	b2db      	uxtb	r3, r3
 800b3b0:	2b18      	cmp	r3, #24
 800b3b2:	d91d      	bls.n	800b3f0 <__gethex+0x14c>
 800b3b4:	f1b9 0f00 	cmp.w	r9, #0
 800b3b8:	d000      	beq.n	800b3bc <__gethex+0x118>
 800b3ba:	4252      	negs	r2, r2
 800b3bc:	4415      	add	r5, r2
 800b3be:	f8cb 1000 	str.w	r1, [fp]
 800b3c2:	b1e4      	cbz	r4, 800b3fe <__gethex+0x15a>
 800b3c4:	9b00      	ldr	r3, [sp, #0]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	bf14      	ite	ne
 800b3ca:	2700      	movne	r7, #0
 800b3cc:	2706      	moveq	r7, #6
 800b3ce:	4638      	mov	r0, r7
 800b3d0:	b009      	add	sp, #36	; 0x24
 800b3d2:	ecbd 8b02 	vpop	{d8}
 800b3d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3da:	463e      	mov	r6, r7
 800b3dc:	4625      	mov	r5, r4
 800b3de:	2401      	movs	r4, #1
 800b3e0:	e7ca      	b.n	800b378 <__gethex+0xd4>
 800b3e2:	f04f 0900 	mov.w	r9, #0
 800b3e6:	1cb1      	adds	r1, r6, #2
 800b3e8:	e7d3      	b.n	800b392 <__gethex+0xee>
 800b3ea:	f04f 0901 	mov.w	r9, #1
 800b3ee:	e7fa      	b.n	800b3e6 <__gethex+0x142>
 800b3f0:	230a      	movs	r3, #10
 800b3f2:	fb03 0202 	mla	r2, r3, r2, r0
 800b3f6:	3a10      	subs	r2, #16
 800b3f8:	e7d4      	b.n	800b3a4 <__gethex+0x100>
 800b3fa:	4631      	mov	r1, r6
 800b3fc:	e7df      	b.n	800b3be <__gethex+0x11a>
 800b3fe:	1bf3      	subs	r3, r6, r7
 800b400:	3b01      	subs	r3, #1
 800b402:	4621      	mov	r1, r4
 800b404:	2b07      	cmp	r3, #7
 800b406:	dc0b      	bgt.n	800b420 <__gethex+0x17c>
 800b408:	ee18 0a10 	vmov	r0, s16
 800b40c:	f000 fa82 	bl	800b914 <_Balloc>
 800b410:	4604      	mov	r4, r0
 800b412:	b940      	cbnz	r0, 800b426 <__gethex+0x182>
 800b414:	4b5d      	ldr	r3, [pc, #372]	; (800b58c <__gethex+0x2e8>)
 800b416:	4602      	mov	r2, r0
 800b418:	21de      	movs	r1, #222	; 0xde
 800b41a:	485d      	ldr	r0, [pc, #372]	; (800b590 <__gethex+0x2ec>)
 800b41c:	f001 fde4 	bl	800cfe8 <__assert_func>
 800b420:	3101      	adds	r1, #1
 800b422:	105b      	asrs	r3, r3, #1
 800b424:	e7ee      	b.n	800b404 <__gethex+0x160>
 800b426:	f100 0914 	add.w	r9, r0, #20
 800b42a:	f04f 0b00 	mov.w	fp, #0
 800b42e:	f1ca 0301 	rsb	r3, sl, #1
 800b432:	f8cd 9008 	str.w	r9, [sp, #8]
 800b436:	f8cd b000 	str.w	fp, [sp]
 800b43a:	9306      	str	r3, [sp, #24]
 800b43c:	42b7      	cmp	r7, r6
 800b43e:	d340      	bcc.n	800b4c2 <__gethex+0x21e>
 800b440:	9802      	ldr	r0, [sp, #8]
 800b442:	9b00      	ldr	r3, [sp, #0]
 800b444:	f840 3b04 	str.w	r3, [r0], #4
 800b448:	eba0 0009 	sub.w	r0, r0, r9
 800b44c:	1080      	asrs	r0, r0, #2
 800b44e:	0146      	lsls	r6, r0, #5
 800b450:	6120      	str	r0, [r4, #16]
 800b452:	4618      	mov	r0, r3
 800b454:	f000 fb50 	bl	800baf8 <__hi0bits>
 800b458:	1a30      	subs	r0, r6, r0
 800b45a:	f8d8 6000 	ldr.w	r6, [r8]
 800b45e:	42b0      	cmp	r0, r6
 800b460:	dd63      	ble.n	800b52a <__gethex+0x286>
 800b462:	1b87      	subs	r7, r0, r6
 800b464:	4639      	mov	r1, r7
 800b466:	4620      	mov	r0, r4
 800b468:	f000 fef4 	bl	800c254 <__any_on>
 800b46c:	4682      	mov	sl, r0
 800b46e:	b1a8      	cbz	r0, 800b49c <__gethex+0x1f8>
 800b470:	1e7b      	subs	r3, r7, #1
 800b472:	1159      	asrs	r1, r3, #5
 800b474:	f003 021f 	and.w	r2, r3, #31
 800b478:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b47c:	f04f 0a01 	mov.w	sl, #1
 800b480:	fa0a f202 	lsl.w	r2, sl, r2
 800b484:	420a      	tst	r2, r1
 800b486:	d009      	beq.n	800b49c <__gethex+0x1f8>
 800b488:	4553      	cmp	r3, sl
 800b48a:	dd05      	ble.n	800b498 <__gethex+0x1f4>
 800b48c:	1eb9      	subs	r1, r7, #2
 800b48e:	4620      	mov	r0, r4
 800b490:	f000 fee0 	bl	800c254 <__any_on>
 800b494:	2800      	cmp	r0, #0
 800b496:	d145      	bne.n	800b524 <__gethex+0x280>
 800b498:	f04f 0a02 	mov.w	sl, #2
 800b49c:	4639      	mov	r1, r7
 800b49e:	4620      	mov	r0, r4
 800b4a0:	f7ff fe98 	bl	800b1d4 <rshift>
 800b4a4:	443d      	add	r5, r7
 800b4a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b4aa:	42ab      	cmp	r3, r5
 800b4ac:	da4c      	bge.n	800b548 <__gethex+0x2a4>
 800b4ae:	ee18 0a10 	vmov	r0, s16
 800b4b2:	4621      	mov	r1, r4
 800b4b4:	f000 fa6e 	bl	800b994 <_Bfree>
 800b4b8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	6013      	str	r3, [r2, #0]
 800b4be:	27a3      	movs	r7, #163	; 0xa3
 800b4c0:	e785      	b.n	800b3ce <__gethex+0x12a>
 800b4c2:	1e73      	subs	r3, r6, #1
 800b4c4:	9a05      	ldr	r2, [sp, #20]
 800b4c6:	9303      	str	r3, [sp, #12]
 800b4c8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b4cc:	4293      	cmp	r3, r2
 800b4ce:	d019      	beq.n	800b504 <__gethex+0x260>
 800b4d0:	f1bb 0f20 	cmp.w	fp, #32
 800b4d4:	d107      	bne.n	800b4e6 <__gethex+0x242>
 800b4d6:	9b02      	ldr	r3, [sp, #8]
 800b4d8:	9a00      	ldr	r2, [sp, #0]
 800b4da:	f843 2b04 	str.w	r2, [r3], #4
 800b4de:	9302      	str	r3, [sp, #8]
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	9300      	str	r3, [sp, #0]
 800b4e4:	469b      	mov	fp, r3
 800b4e6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b4ea:	f7ff fec5 	bl	800b278 <__hexdig_fun>
 800b4ee:	9b00      	ldr	r3, [sp, #0]
 800b4f0:	f000 000f 	and.w	r0, r0, #15
 800b4f4:	fa00 f00b 	lsl.w	r0, r0, fp
 800b4f8:	4303      	orrs	r3, r0
 800b4fa:	9300      	str	r3, [sp, #0]
 800b4fc:	f10b 0b04 	add.w	fp, fp, #4
 800b500:	9b03      	ldr	r3, [sp, #12]
 800b502:	e00d      	b.n	800b520 <__gethex+0x27c>
 800b504:	9b03      	ldr	r3, [sp, #12]
 800b506:	9a06      	ldr	r2, [sp, #24]
 800b508:	4413      	add	r3, r2
 800b50a:	42bb      	cmp	r3, r7
 800b50c:	d3e0      	bcc.n	800b4d0 <__gethex+0x22c>
 800b50e:	4618      	mov	r0, r3
 800b510:	9901      	ldr	r1, [sp, #4]
 800b512:	9307      	str	r3, [sp, #28]
 800b514:	4652      	mov	r2, sl
 800b516:	f001 fc97 	bl	800ce48 <strncmp>
 800b51a:	9b07      	ldr	r3, [sp, #28]
 800b51c:	2800      	cmp	r0, #0
 800b51e:	d1d7      	bne.n	800b4d0 <__gethex+0x22c>
 800b520:	461e      	mov	r6, r3
 800b522:	e78b      	b.n	800b43c <__gethex+0x198>
 800b524:	f04f 0a03 	mov.w	sl, #3
 800b528:	e7b8      	b.n	800b49c <__gethex+0x1f8>
 800b52a:	da0a      	bge.n	800b542 <__gethex+0x29e>
 800b52c:	1a37      	subs	r7, r6, r0
 800b52e:	4621      	mov	r1, r4
 800b530:	ee18 0a10 	vmov	r0, s16
 800b534:	463a      	mov	r2, r7
 800b536:	f000 fc49 	bl	800bdcc <__lshift>
 800b53a:	1bed      	subs	r5, r5, r7
 800b53c:	4604      	mov	r4, r0
 800b53e:	f100 0914 	add.w	r9, r0, #20
 800b542:	f04f 0a00 	mov.w	sl, #0
 800b546:	e7ae      	b.n	800b4a6 <__gethex+0x202>
 800b548:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b54c:	42a8      	cmp	r0, r5
 800b54e:	dd72      	ble.n	800b636 <__gethex+0x392>
 800b550:	1b45      	subs	r5, r0, r5
 800b552:	42ae      	cmp	r6, r5
 800b554:	dc36      	bgt.n	800b5c4 <__gethex+0x320>
 800b556:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b55a:	2b02      	cmp	r3, #2
 800b55c:	d02a      	beq.n	800b5b4 <__gethex+0x310>
 800b55e:	2b03      	cmp	r3, #3
 800b560:	d02c      	beq.n	800b5bc <__gethex+0x318>
 800b562:	2b01      	cmp	r3, #1
 800b564:	d11c      	bne.n	800b5a0 <__gethex+0x2fc>
 800b566:	42ae      	cmp	r6, r5
 800b568:	d11a      	bne.n	800b5a0 <__gethex+0x2fc>
 800b56a:	2e01      	cmp	r6, #1
 800b56c:	d112      	bne.n	800b594 <__gethex+0x2f0>
 800b56e:	9a04      	ldr	r2, [sp, #16]
 800b570:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b574:	6013      	str	r3, [r2, #0]
 800b576:	2301      	movs	r3, #1
 800b578:	6123      	str	r3, [r4, #16]
 800b57a:	f8c9 3000 	str.w	r3, [r9]
 800b57e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b580:	2762      	movs	r7, #98	; 0x62
 800b582:	601c      	str	r4, [r3, #0]
 800b584:	e723      	b.n	800b3ce <__gethex+0x12a>
 800b586:	bf00      	nop
 800b588:	0800df58 	.word	0x0800df58
 800b58c:	0800dee0 	.word	0x0800dee0
 800b590:	0800def1 	.word	0x0800def1
 800b594:	1e71      	subs	r1, r6, #1
 800b596:	4620      	mov	r0, r4
 800b598:	f000 fe5c 	bl	800c254 <__any_on>
 800b59c:	2800      	cmp	r0, #0
 800b59e:	d1e6      	bne.n	800b56e <__gethex+0x2ca>
 800b5a0:	ee18 0a10 	vmov	r0, s16
 800b5a4:	4621      	mov	r1, r4
 800b5a6:	f000 f9f5 	bl	800b994 <_Bfree>
 800b5aa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	6013      	str	r3, [r2, #0]
 800b5b0:	2750      	movs	r7, #80	; 0x50
 800b5b2:	e70c      	b.n	800b3ce <__gethex+0x12a>
 800b5b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d1f2      	bne.n	800b5a0 <__gethex+0x2fc>
 800b5ba:	e7d8      	b.n	800b56e <__gethex+0x2ca>
 800b5bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d1d5      	bne.n	800b56e <__gethex+0x2ca>
 800b5c2:	e7ed      	b.n	800b5a0 <__gethex+0x2fc>
 800b5c4:	1e6f      	subs	r7, r5, #1
 800b5c6:	f1ba 0f00 	cmp.w	sl, #0
 800b5ca:	d131      	bne.n	800b630 <__gethex+0x38c>
 800b5cc:	b127      	cbz	r7, 800b5d8 <__gethex+0x334>
 800b5ce:	4639      	mov	r1, r7
 800b5d0:	4620      	mov	r0, r4
 800b5d2:	f000 fe3f 	bl	800c254 <__any_on>
 800b5d6:	4682      	mov	sl, r0
 800b5d8:	117b      	asrs	r3, r7, #5
 800b5da:	2101      	movs	r1, #1
 800b5dc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b5e0:	f007 071f 	and.w	r7, r7, #31
 800b5e4:	fa01 f707 	lsl.w	r7, r1, r7
 800b5e8:	421f      	tst	r7, r3
 800b5ea:	4629      	mov	r1, r5
 800b5ec:	4620      	mov	r0, r4
 800b5ee:	bf18      	it	ne
 800b5f0:	f04a 0a02 	orrne.w	sl, sl, #2
 800b5f4:	1b76      	subs	r6, r6, r5
 800b5f6:	f7ff fded 	bl	800b1d4 <rshift>
 800b5fa:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b5fe:	2702      	movs	r7, #2
 800b600:	f1ba 0f00 	cmp.w	sl, #0
 800b604:	d048      	beq.n	800b698 <__gethex+0x3f4>
 800b606:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b60a:	2b02      	cmp	r3, #2
 800b60c:	d015      	beq.n	800b63a <__gethex+0x396>
 800b60e:	2b03      	cmp	r3, #3
 800b610:	d017      	beq.n	800b642 <__gethex+0x39e>
 800b612:	2b01      	cmp	r3, #1
 800b614:	d109      	bne.n	800b62a <__gethex+0x386>
 800b616:	f01a 0f02 	tst.w	sl, #2
 800b61a:	d006      	beq.n	800b62a <__gethex+0x386>
 800b61c:	f8d9 0000 	ldr.w	r0, [r9]
 800b620:	ea4a 0a00 	orr.w	sl, sl, r0
 800b624:	f01a 0f01 	tst.w	sl, #1
 800b628:	d10e      	bne.n	800b648 <__gethex+0x3a4>
 800b62a:	f047 0710 	orr.w	r7, r7, #16
 800b62e:	e033      	b.n	800b698 <__gethex+0x3f4>
 800b630:	f04f 0a01 	mov.w	sl, #1
 800b634:	e7d0      	b.n	800b5d8 <__gethex+0x334>
 800b636:	2701      	movs	r7, #1
 800b638:	e7e2      	b.n	800b600 <__gethex+0x35c>
 800b63a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b63c:	f1c3 0301 	rsb	r3, r3, #1
 800b640:	9315      	str	r3, [sp, #84]	; 0x54
 800b642:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b644:	2b00      	cmp	r3, #0
 800b646:	d0f0      	beq.n	800b62a <__gethex+0x386>
 800b648:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b64c:	f104 0314 	add.w	r3, r4, #20
 800b650:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b654:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b658:	f04f 0c00 	mov.w	ip, #0
 800b65c:	4618      	mov	r0, r3
 800b65e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b662:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b666:	d01c      	beq.n	800b6a2 <__gethex+0x3fe>
 800b668:	3201      	adds	r2, #1
 800b66a:	6002      	str	r2, [r0, #0]
 800b66c:	2f02      	cmp	r7, #2
 800b66e:	f104 0314 	add.w	r3, r4, #20
 800b672:	d13f      	bne.n	800b6f4 <__gethex+0x450>
 800b674:	f8d8 2000 	ldr.w	r2, [r8]
 800b678:	3a01      	subs	r2, #1
 800b67a:	42b2      	cmp	r2, r6
 800b67c:	d10a      	bne.n	800b694 <__gethex+0x3f0>
 800b67e:	1171      	asrs	r1, r6, #5
 800b680:	2201      	movs	r2, #1
 800b682:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b686:	f006 061f 	and.w	r6, r6, #31
 800b68a:	fa02 f606 	lsl.w	r6, r2, r6
 800b68e:	421e      	tst	r6, r3
 800b690:	bf18      	it	ne
 800b692:	4617      	movne	r7, r2
 800b694:	f047 0720 	orr.w	r7, r7, #32
 800b698:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b69a:	601c      	str	r4, [r3, #0]
 800b69c:	9b04      	ldr	r3, [sp, #16]
 800b69e:	601d      	str	r5, [r3, #0]
 800b6a0:	e695      	b.n	800b3ce <__gethex+0x12a>
 800b6a2:	4299      	cmp	r1, r3
 800b6a4:	f843 cc04 	str.w	ip, [r3, #-4]
 800b6a8:	d8d8      	bhi.n	800b65c <__gethex+0x3b8>
 800b6aa:	68a3      	ldr	r3, [r4, #8]
 800b6ac:	459b      	cmp	fp, r3
 800b6ae:	db19      	blt.n	800b6e4 <__gethex+0x440>
 800b6b0:	6861      	ldr	r1, [r4, #4]
 800b6b2:	ee18 0a10 	vmov	r0, s16
 800b6b6:	3101      	adds	r1, #1
 800b6b8:	f000 f92c 	bl	800b914 <_Balloc>
 800b6bc:	4681      	mov	r9, r0
 800b6be:	b918      	cbnz	r0, 800b6c8 <__gethex+0x424>
 800b6c0:	4b1a      	ldr	r3, [pc, #104]	; (800b72c <__gethex+0x488>)
 800b6c2:	4602      	mov	r2, r0
 800b6c4:	2184      	movs	r1, #132	; 0x84
 800b6c6:	e6a8      	b.n	800b41a <__gethex+0x176>
 800b6c8:	6922      	ldr	r2, [r4, #16]
 800b6ca:	3202      	adds	r2, #2
 800b6cc:	f104 010c 	add.w	r1, r4, #12
 800b6d0:	0092      	lsls	r2, r2, #2
 800b6d2:	300c      	adds	r0, #12
 800b6d4:	f7fd f90a 	bl	80088ec <memcpy>
 800b6d8:	4621      	mov	r1, r4
 800b6da:	ee18 0a10 	vmov	r0, s16
 800b6de:	f000 f959 	bl	800b994 <_Bfree>
 800b6e2:	464c      	mov	r4, r9
 800b6e4:	6923      	ldr	r3, [r4, #16]
 800b6e6:	1c5a      	adds	r2, r3, #1
 800b6e8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b6ec:	6122      	str	r2, [r4, #16]
 800b6ee:	2201      	movs	r2, #1
 800b6f0:	615a      	str	r2, [r3, #20]
 800b6f2:	e7bb      	b.n	800b66c <__gethex+0x3c8>
 800b6f4:	6922      	ldr	r2, [r4, #16]
 800b6f6:	455a      	cmp	r2, fp
 800b6f8:	dd0b      	ble.n	800b712 <__gethex+0x46e>
 800b6fa:	2101      	movs	r1, #1
 800b6fc:	4620      	mov	r0, r4
 800b6fe:	f7ff fd69 	bl	800b1d4 <rshift>
 800b702:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b706:	3501      	adds	r5, #1
 800b708:	42ab      	cmp	r3, r5
 800b70a:	f6ff aed0 	blt.w	800b4ae <__gethex+0x20a>
 800b70e:	2701      	movs	r7, #1
 800b710:	e7c0      	b.n	800b694 <__gethex+0x3f0>
 800b712:	f016 061f 	ands.w	r6, r6, #31
 800b716:	d0fa      	beq.n	800b70e <__gethex+0x46a>
 800b718:	4453      	add	r3, sl
 800b71a:	f1c6 0620 	rsb	r6, r6, #32
 800b71e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b722:	f000 f9e9 	bl	800baf8 <__hi0bits>
 800b726:	42b0      	cmp	r0, r6
 800b728:	dbe7      	blt.n	800b6fa <__gethex+0x456>
 800b72a:	e7f0      	b.n	800b70e <__gethex+0x46a>
 800b72c:	0800dee0 	.word	0x0800dee0

0800b730 <L_shift>:
 800b730:	f1c2 0208 	rsb	r2, r2, #8
 800b734:	0092      	lsls	r2, r2, #2
 800b736:	b570      	push	{r4, r5, r6, lr}
 800b738:	f1c2 0620 	rsb	r6, r2, #32
 800b73c:	6843      	ldr	r3, [r0, #4]
 800b73e:	6804      	ldr	r4, [r0, #0]
 800b740:	fa03 f506 	lsl.w	r5, r3, r6
 800b744:	432c      	orrs	r4, r5
 800b746:	40d3      	lsrs	r3, r2
 800b748:	6004      	str	r4, [r0, #0]
 800b74a:	f840 3f04 	str.w	r3, [r0, #4]!
 800b74e:	4288      	cmp	r0, r1
 800b750:	d3f4      	bcc.n	800b73c <L_shift+0xc>
 800b752:	bd70      	pop	{r4, r5, r6, pc}

0800b754 <__match>:
 800b754:	b530      	push	{r4, r5, lr}
 800b756:	6803      	ldr	r3, [r0, #0]
 800b758:	3301      	adds	r3, #1
 800b75a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b75e:	b914      	cbnz	r4, 800b766 <__match+0x12>
 800b760:	6003      	str	r3, [r0, #0]
 800b762:	2001      	movs	r0, #1
 800b764:	bd30      	pop	{r4, r5, pc}
 800b766:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b76a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b76e:	2d19      	cmp	r5, #25
 800b770:	bf98      	it	ls
 800b772:	3220      	addls	r2, #32
 800b774:	42a2      	cmp	r2, r4
 800b776:	d0f0      	beq.n	800b75a <__match+0x6>
 800b778:	2000      	movs	r0, #0
 800b77a:	e7f3      	b.n	800b764 <__match+0x10>

0800b77c <__hexnan>:
 800b77c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b780:	680b      	ldr	r3, [r1, #0]
 800b782:	115e      	asrs	r6, r3, #5
 800b784:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b788:	f013 031f 	ands.w	r3, r3, #31
 800b78c:	b087      	sub	sp, #28
 800b78e:	bf18      	it	ne
 800b790:	3604      	addne	r6, #4
 800b792:	2500      	movs	r5, #0
 800b794:	1f37      	subs	r7, r6, #4
 800b796:	4690      	mov	r8, r2
 800b798:	6802      	ldr	r2, [r0, #0]
 800b79a:	9301      	str	r3, [sp, #4]
 800b79c:	4682      	mov	sl, r0
 800b79e:	f846 5c04 	str.w	r5, [r6, #-4]
 800b7a2:	46b9      	mov	r9, r7
 800b7a4:	463c      	mov	r4, r7
 800b7a6:	9502      	str	r5, [sp, #8]
 800b7a8:	46ab      	mov	fp, r5
 800b7aa:	7851      	ldrb	r1, [r2, #1]
 800b7ac:	1c53      	adds	r3, r2, #1
 800b7ae:	9303      	str	r3, [sp, #12]
 800b7b0:	b341      	cbz	r1, 800b804 <__hexnan+0x88>
 800b7b2:	4608      	mov	r0, r1
 800b7b4:	9205      	str	r2, [sp, #20]
 800b7b6:	9104      	str	r1, [sp, #16]
 800b7b8:	f7ff fd5e 	bl	800b278 <__hexdig_fun>
 800b7bc:	2800      	cmp	r0, #0
 800b7be:	d14f      	bne.n	800b860 <__hexnan+0xe4>
 800b7c0:	9904      	ldr	r1, [sp, #16]
 800b7c2:	9a05      	ldr	r2, [sp, #20]
 800b7c4:	2920      	cmp	r1, #32
 800b7c6:	d818      	bhi.n	800b7fa <__hexnan+0x7e>
 800b7c8:	9b02      	ldr	r3, [sp, #8]
 800b7ca:	459b      	cmp	fp, r3
 800b7cc:	dd13      	ble.n	800b7f6 <__hexnan+0x7a>
 800b7ce:	454c      	cmp	r4, r9
 800b7d0:	d206      	bcs.n	800b7e0 <__hexnan+0x64>
 800b7d2:	2d07      	cmp	r5, #7
 800b7d4:	dc04      	bgt.n	800b7e0 <__hexnan+0x64>
 800b7d6:	462a      	mov	r2, r5
 800b7d8:	4649      	mov	r1, r9
 800b7da:	4620      	mov	r0, r4
 800b7dc:	f7ff ffa8 	bl	800b730 <L_shift>
 800b7e0:	4544      	cmp	r4, r8
 800b7e2:	d950      	bls.n	800b886 <__hexnan+0x10a>
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	f1a4 0904 	sub.w	r9, r4, #4
 800b7ea:	f844 3c04 	str.w	r3, [r4, #-4]
 800b7ee:	f8cd b008 	str.w	fp, [sp, #8]
 800b7f2:	464c      	mov	r4, r9
 800b7f4:	461d      	mov	r5, r3
 800b7f6:	9a03      	ldr	r2, [sp, #12]
 800b7f8:	e7d7      	b.n	800b7aa <__hexnan+0x2e>
 800b7fa:	2929      	cmp	r1, #41	; 0x29
 800b7fc:	d156      	bne.n	800b8ac <__hexnan+0x130>
 800b7fe:	3202      	adds	r2, #2
 800b800:	f8ca 2000 	str.w	r2, [sl]
 800b804:	f1bb 0f00 	cmp.w	fp, #0
 800b808:	d050      	beq.n	800b8ac <__hexnan+0x130>
 800b80a:	454c      	cmp	r4, r9
 800b80c:	d206      	bcs.n	800b81c <__hexnan+0xa0>
 800b80e:	2d07      	cmp	r5, #7
 800b810:	dc04      	bgt.n	800b81c <__hexnan+0xa0>
 800b812:	462a      	mov	r2, r5
 800b814:	4649      	mov	r1, r9
 800b816:	4620      	mov	r0, r4
 800b818:	f7ff ff8a 	bl	800b730 <L_shift>
 800b81c:	4544      	cmp	r4, r8
 800b81e:	d934      	bls.n	800b88a <__hexnan+0x10e>
 800b820:	f1a8 0204 	sub.w	r2, r8, #4
 800b824:	4623      	mov	r3, r4
 800b826:	f853 1b04 	ldr.w	r1, [r3], #4
 800b82a:	f842 1f04 	str.w	r1, [r2, #4]!
 800b82e:	429f      	cmp	r7, r3
 800b830:	d2f9      	bcs.n	800b826 <__hexnan+0xaa>
 800b832:	1b3b      	subs	r3, r7, r4
 800b834:	f023 0303 	bic.w	r3, r3, #3
 800b838:	3304      	adds	r3, #4
 800b83a:	3401      	adds	r4, #1
 800b83c:	3e03      	subs	r6, #3
 800b83e:	42b4      	cmp	r4, r6
 800b840:	bf88      	it	hi
 800b842:	2304      	movhi	r3, #4
 800b844:	4443      	add	r3, r8
 800b846:	2200      	movs	r2, #0
 800b848:	f843 2b04 	str.w	r2, [r3], #4
 800b84c:	429f      	cmp	r7, r3
 800b84e:	d2fb      	bcs.n	800b848 <__hexnan+0xcc>
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	b91b      	cbnz	r3, 800b85c <__hexnan+0xe0>
 800b854:	4547      	cmp	r7, r8
 800b856:	d127      	bne.n	800b8a8 <__hexnan+0x12c>
 800b858:	2301      	movs	r3, #1
 800b85a:	603b      	str	r3, [r7, #0]
 800b85c:	2005      	movs	r0, #5
 800b85e:	e026      	b.n	800b8ae <__hexnan+0x132>
 800b860:	3501      	adds	r5, #1
 800b862:	2d08      	cmp	r5, #8
 800b864:	f10b 0b01 	add.w	fp, fp, #1
 800b868:	dd06      	ble.n	800b878 <__hexnan+0xfc>
 800b86a:	4544      	cmp	r4, r8
 800b86c:	d9c3      	bls.n	800b7f6 <__hexnan+0x7a>
 800b86e:	2300      	movs	r3, #0
 800b870:	f844 3c04 	str.w	r3, [r4, #-4]
 800b874:	2501      	movs	r5, #1
 800b876:	3c04      	subs	r4, #4
 800b878:	6822      	ldr	r2, [r4, #0]
 800b87a:	f000 000f 	and.w	r0, r0, #15
 800b87e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b882:	6022      	str	r2, [r4, #0]
 800b884:	e7b7      	b.n	800b7f6 <__hexnan+0x7a>
 800b886:	2508      	movs	r5, #8
 800b888:	e7b5      	b.n	800b7f6 <__hexnan+0x7a>
 800b88a:	9b01      	ldr	r3, [sp, #4]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d0df      	beq.n	800b850 <__hexnan+0xd4>
 800b890:	f04f 32ff 	mov.w	r2, #4294967295
 800b894:	f1c3 0320 	rsb	r3, r3, #32
 800b898:	fa22 f303 	lsr.w	r3, r2, r3
 800b89c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b8a0:	401a      	ands	r2, r3
 800b8a2:	f846 2c04 	str.w	r2, [r6, #-4]
 800b8a6:	e7d3      	b.n	800b850 <__hexnan+0xd4>
 800b8a8:	3f04      	subs	r7, #4
 800b8aa:	e7d1      	b.n	800b850 <__hexnan+0xd4>
 800b8ac:	2004      	movs	r0, #4
 800b8ae:	b007      	add	sp, #28
 800b8b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b8b4 <_localeconv_r>:
 800b8b4:	4800      	ldr	r0, [pc, #0]	; (800b8b8 <_localeconv_r+0x4>)
 800b8b6:	4770      	bx	lr
 800b8b8:	20000164 	.word	0x20000164

0800b8bc <_lseek_r>:
 800b8bc:	b538      	push	{r3, r4, r5, lr}
 800b8be:	4d07      	ldr	r5, [pc, #28]	; (800b8dc <_lseek_r+0x20>)
 800b8c0:	4604      	mov	r4, r0
 800b8c2:	4608      	mov	r0, r1
 800b8c4:	4611      	mov	r1, r2
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	602a      	str	r2, [r5, #0]
 800b8ca:	461a      	mov	r2, r3
 800b8cc:	f7f6 f964 	bl	8001b98 <_lseek>
 800b8d0:	1c43      	adds	r3, r0, #1
 800b8d2:	d102      	bne.n	800b8da <_lseek_r+0x1e>
 800b8d4:	682b      	ldr	r3, [r5, #0]
 800b8d6:	b103      	cbz	r3, 800b8da <_lseek_r+0x1e>
 800b8d8:	6023      	str	r3, [r4, #0]
 800b8da:	bd38      	pop	{r3, r4, r5, pc}
 800b8dc:	2000044c 	.word	0x2000044c

0800b8e0 <malloc>:
 800b8e0:	4b02      	ldr	r3, [pc, #8]	; (800b8ec <malloc+0xc>)
 800b8e2:	4601      	mov	r1, r0
 800b8e4:	6818      	ldr	r0, [r3, #0]
 800b8e6:	f000 bd59 	b.w	800c39c <_malloc_r>
 800b8ea:	bf00      	nop
 800b8ec:	2000000c 	.word	0x2000000c

0800b8f0 <__ascii_mbtowc>:
 800b8f0:	b082      	sub	sp, #8
 800b8f2:	b901      	cbnz	r1, 800b8f6 <__ascii_mbtowc+0x6>
 800b8f4:	a901      	add	r1, sp, #4
 800b8f6:	b142      	cbz	r2, 800b90a <__ascii_mbtowc+0x1a>
 800b8f8:	b14b      	cbz	r3, 800b90e <__ascii_mbtowc+0x1e>
 800b8fa:	7813      	ldrb	r3, [r2, #0]
 800b8fc:	600b      	str	r3, [r1, #0]
 800b8fe:	7812      	ldrb	r2, [r2, #0]
 800b900:	1e10      	subs	r0, r2, #0
 800b902:	bf18      	it	ne
 800b904:	2001      	movne	r0, #1
 800b906:	b002      	add	sp, #8
 800b908:	4770      	bx	lr
 800b90a:	4610      	mov	r0, r2
 800b90c:	e7fb      	b.n	800b906 <__ascii_mbtowc+0x16>
 800b90e:	f06f 0001 	mvn.w	r0, #1
 800b912:	e7f8      	b.n	800b906 <__ascii_mbtowc+0x16>

0800b914 <_Balloc>:
 800b914:	b570      	push	{r4, r5, r6, lr}
 800b916:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b918:	4604      	mov	r4, r0
 800b91a:	460d      	mov	r5, r1
 800b91c:	b976      	cbnz	r6, 800b93c <_Balloc+0x28>
 800b91e:	2010      	movs	r0, #16
 800b920:	f7ff ffde 	bl	800b8e0 <malloc>
 800b924:	4602      	mov	r2, r0
 800b926:	6260      	str	r0, [r4, #36]	; 0x24
 800b928:	b920      	cbnz	r0, 800b934 <_Balloc+0x20>
 800b92a:	4b18      	ldr	r3, [pc, #96]	; (800b98c <_Balloc+0x78>)
 800b92c:	4818      	ldr	r0, [pc, #96]	; (800b990 <_Balloc+0x7c>)
 800b92e:	2166      	movs	r1, #102	; 0x66
 800b930:	f001 fb5a 	bl	800cfe8 <__assert_func>
 800b934:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b938:	6006      	str	r6, [r0, #0]
 800b93a:	60c6      	str	r6, [r0, #12]
 800b93c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b93e:	68f3      	ldr	r3, [r6, #12]
 800b940:	b183      	cbz	r3, 800b964 <_Balloc+0x50>
 800b942:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b944:	68db      	ldr	r3, [r3, #12]
 800b946:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b94a:	b9b8      	cbnz	r0, 800b97c <_Balloc+0x68>
 800b94c:	2101      	movs	r1, #1
 800b94e:	fa01 f605 	lsl.w	r6, r1, r5
 800b952:	1d72      	adds	r2, r6, #5
 800b954:	0092      	lsls	r2, r2, #2
 800b956:	4620      	mov	r0, r4
 800b958:	f000 fc9d 	bl	800c296 <_calloc_r>
 800b95c:	b160      	cbz	r0, 800b978 <_Balloc+0x64>
 800b95e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b962:	e00e      	b.n	800b982 <_Balloc+0x6e>
 800b964:	2221      	movs	r2, #33	; 0x21
 800b966:	2104      	movs	r1, #4
 800b968:	4620      	mov	r0, r4
 800b96a:	f000 fc94 	bl	800c296 <_calloc_r>
 800b96e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b970:	60f0      	str	r0, [r6, #12]
 800b972:	68db      	ldr	r3, [r3, #12]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d1e4      	bne.n	800b942 <_Balloc+0x2e>
 800b978:	2000      	movs	r0, #0
 800b97a:	bd70      	pop	{r4, r5, r6, pc}
 800b97c:	6802      	ldr	r2, [r0, #0]
 800b97e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b982:	2300      	movs	r3, #0
 800b984:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b988:	e7f7      	b.n	800b97a <_Balloc+0x66>
 800b98a:	bf00      	nop
 800b98c:	0800de6e 	.word	0x0800de6e
 800b990:	0800df6c 	.word	0x0800df6c

0800b994 <_Bfree>:
 800b994:	b570      	push	{r4, r5, r6, lr}
 800b996:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b998:	4605      	mov	r5, r0
 800b99a:	460c      	mov	r4, r1
 800b99c:	b976      	cbnz	r6, 800b9bc <_Bfree+0x28>
 800b99e:	2010      	movs	r0, #16
 800b9a0:	f7ff ff9e 	bl	800b8e0 <malloc>
 800b9a4:	4602      	mov	r2, r0
 800b9a6:	6268      	str	r0, [r5, #36]	; 0x24
 800b9a8:	b920      	cbnz	r0, 800b9b4 <_Bfree+0x20>
 800b9aa:	4b09      	ldr	r3, [pc, #36]	; (800b9d0 <_Bfree+0x3c>)
 800b9ac:	4809      	ldr	r0, [pc, #36]	; (800b9d4 <_Bfree+0x40>)
 800b9ae:	218a      	movs	r1, #138	; 0x8a
 800b9b0:	f001 fb1a 	bl	800cfe8 <__assert_func>
 800b9b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b9b8:	6006      	str	r6, [r0, #0]
 800b9ba:	60c6      	str	r6, [r0, #12]
 800b9bc:	b13c      	cbz	r4, 800b9ce <_Bfree+0x3a>
 800b9be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b9c0:	6862      	ldr	r2, [r4, #4]
 800b9c2:	68db      	ldr	r3, [r3, #12]
 800b9c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b9c8:	6021      	str	r1, [r4, #0]
 800b9ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b9ce:	bd70      	pop	{r4, r5, r6, pc}
 800b9d0:	0800de6e 	.word	0x0800de6e
 800b9d4:	0800df6c 	.word	0x0800df6c

0800b9d8 <__multadd>:
 800b9d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9dc:	690d      	ldr	r5, [r1, #16]
 800b9de:	4607      	mov	r7, r0
 800b9e0:	460c      	mov	r4, r1
 800b9e2:	461e      	mov	r6, r3
 800b9e4:	f101 0c14 	add.w	ip, r1, #20
 800b9e8:	2000      	movs	r0, #0
 800b9ea:	f8dc 3000 	ldr.w	r3, [ip]
 800b9ee:	b299      	uxth	r1, r3
 800b9f0:	fb02 6101 	mla	r1, r2, r1, r6
 800b9f4:	0c1e      	lsrs	r6, r3, #16
 800b9f6:	0c0b      	lsrs	r3, r1, #16
 800b9f8:	fb02 3306 	mla	r3, r2, r6, r3
 800b9fc:	b289      	uxth	r1, r1
 800b9fe:	3001      	adds	r0, #1
 800ba00:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ba04:	4285      	cmp	r5, r0
 800ba06:	f84c 1b04 	str.w	r1, [ip], #4
 800ba0a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ba0e:	dcec      	bgt.n	800b9ea <__multadd+0x12>
 800ba10:	b30e      	cbz	r6, 800ba56 <__multadd+0x7e>
 800ba12:	68a3      	ldr	r3, [r4, #8]
 800ba14:	42ab      	cmp	r3, r5
 800ba16:	dc19      	bgt.n	800ba4c <__multadd+0x74>
 800ba18:	6861      	ldr	r1, [r4, #4]
 800ba1a:	4638      	mov	r0, r7
 800ba1c:	3101      	adds	r1, #1
 800ba1e:	f7ff ff79 	bl	800b914 <_Balloc>
 800ba22:	4680      	mov	r8, r0
 800ba24:	b928      	cbnz	r0, 800ba32 <__multadd+0x5a>
 800ba26:	4602      	mov	r2, r0
 800ba28:	4b0c      	ldr	r3, [pc, #48]	; (800ba5c <__multadd+0x84>)
 800ba2a:	480d      	ldr	r0, [pc, #52]	; (800ba60 <__multadd+0x88>)
 800ba2c:	21b5      	movs	r1, #181	; 0xb5
 800ba2e:	f001 fadb 	bl	800cfe8 <__assert_func>
 800ba32:	6922      	ldr	r2, [r4, #16]
 800ba34:	3202      	adds	r2, #2
 800ba36:	f104 010c 	add.w	r1, r4, #12
 800ba3a:	0092      	lsls	r2, r2, #2
 800ba3c:	300c      	adds	r0, #12
 800ba3e:	f7fc ff55 	bl	80088ec <memcpy>
 800ba42:	4621      	mov	r1, r4
 800ba44:	4638      	mov	r0, r7
 800ba46:	f7ff ffa5 	bl	800b994 <_Bfree>
 800ba4a:	4644      	mov	r4, r8
 800ba4c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ba50:	3501      	adds	r5, #1
 800ba52:	615e      	str	r6, [r3, #20]
 800ba54:	6125      	str	r5, [r4, #16]
 800ba56:	4620      	mov	r0, r4
 800ba58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba5c:	0800dee0 	.word	0x0800dee0
 800ba60:	0800df6c 	.word	0x0800df6c

0800ba64 <__s2b>:
 800ba64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba68:	460c      	mov	r4, r1
 800ba6a:	4615      	mov	r5, r2
 800ba6c:	461f      	mov	r7, r3
 800ba6e:	2209      	movs	r2, #9
 800ba70:	3308      	adds	r3, #8
 800ba72:	4606      	mov	r6, r0
 800ba74:	fb93 f3f2 	sdiv	r3, r3, r2
 800ba78:	2100      	movs	r1, #0
 800ba7a:	2201      	movs	r2, #1
 800ba7c:	429a      	cmp	r2, r3
 800ba7e:	db09      	blt.n	800ba94 <__s2b+0x30>
 800ba80:	4630      	mov	r0, r6
 800ba82:	f7ff ff47 	bl	800b914 <_Balloc>
 800ba86:	b940      	cbnz	r0, 800ba9a <__s2b+0x36>
 800ba88:	4602      	mov	r2, r0
 800ba8a:	4b19      	ldr	r3, [pc, #100]	; (800baf0 <__s2b+0x8c>)
 800ba8c:	4819      	ldr	r0, [pc, #100]	; (800baf4 <__s2b+0x90>)
 800ba8e:	21ce      	movs	r1, #206	; 0xce
 800ba90:	f001 faaa 	bl	800cfe8 <__assert_func>
 800ba94:	0052      	lsls	r2, r2, #1
 800ba96:	3101      	adds	r1, #1
 800ba98:	e7f0      	b.n	800ba7c <__s2b+0x18>
 800ba9a:	9b08      	ldr	r3, [sp, #32]
 800ba9c:	6143      	str	r3, [r0, #20]
 800ba9e:	2d09      	cmp	r5, #9
 800baa0:	f04f 0301 	mov.w	r3, #1
 800baa4:	6103      	str	r3, [r0, #16]
 800baa6:	dd16      	ble.n	800bad6 <__s2b+0x72>
 800baa8:	f104 0909 	add.w	r9, r4, #9
 800baac:	46c8      	mov	r8, r9
 800baae:	442c      	add	r4, r5
 800bab0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bab4:	4601      	mov	r1, r0
 800bab6:	3b30      	subs	r3, #48	; 0x30
 800bab8:	220a      	movs	r2, #10
 800baba:	4630      	mov	r0, r6
 800babc:	f7ff ff8c 	bl	800b9d8 <__multadd>
 800bac0:	45a0      	cmp	r8, r4
 800bac2:	d1f5      	bne.n	800bab0 <__s2b+0x4c>
 800bac4:	f1a5 0408 	sub.w	r4, r5, #8
 800bac8:	444c      	add	r4, r9
 800baca:	1b2d      	subs	r5, r5, r4
 800bacc:	1963      	adds	r3, r4, r5
 800bace:	42bb      	cmp	r3, r7
 800bad0:	db04      	blt.n	800badc <__s2b+0x78>
 800bad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bad6:	340a      	adds	r4, #10
 800bad8:	2509      	movs	r5, #9
 800bada:	e7f6      	b.n	800baca <__s2b+0x66>
 800badc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bae0:	4601      	mov	r1, r0
 800bae2:	3b30      	subs	r3, #48	; 0x30
 800bae4:	220a      	movs	r2, #10
 800bae6:	4630      	mov	r0, r6
 800bae8:	f7ff ff76 	bl	800b9d8 <__multadd>
 800baec:	e7ee      	b.n	800bacc <__s2b+0x68>
 800baee:	bf00      	nop
 800baf0:	0800dee0 	.word	0x0800dee0
 800baf4:	0800df6c 	.word	0x0800df6c

0800baf8 <__hi0bits>:
 800baf8:	0c03      	lsrs	r3, r0, #16
 800bafa:	041b      	lsls	r3, r3, #16
 800bafc:	b9d3      	cbnz	r3, 800bb34 <__hi0bits+0x3c>
 800bafe:	0400      	lsls	r0, r0, #16
 800bb00:	2310      	movs	r3, #16
 800bb02:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bb06:	bf04      	itt	eq
 800bb08:	0200      	lsleq	r0, r0, #8
 800bb0a:	3308      	addeq	r3, #8
 800bb0c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bb10:	bf04      	itt	eq
 800bb12:	0100      	lsleq	r0, r0, #4
 800bb14:	3304      	addeq	r3, #4
 800bb16:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bb1a:	bf04      	itt	eq
 800bb1c:	0080      	lsleq	r0, r0, #2
 800bb1e:	3302      	addeq	r3, #2
 800bb20:	2800      	cmp	r0, #0
 800bb22:	db05      	blt.n	800bb30 <__hi0bits+0x38>
 800bb24:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bb28:	f103 0301 	add.w	r3, r3, #1
 800bb2c:	bf08      	it	eq
 800bb2e:	2320      	moveq	r3, #32
 800bb30:	4618      	mov	r0, r3
 800bb32:	4770      	bx	lr
 800bb34:	2300      	movs	r3, #0
 800bb36:	e7e4      	b.n	800bb02 <__hi0bits+0xa>

0800bb38 <__lo0bits>:
 800bb38:	6803      	ldr	r3, [r0, #0]
 800bb3a:	f013 0207 	ands.w	r2, r3, #7
 800bb3e:	4601      	mov	r1, r0
 800bb40:	d00b      	beq.n	800bb5a <__lo0bits+0x22>
 800bb42:	07da      	lsls	r2, r3, #31
 800bb44:	d423      	bmi.n	800bb8e <__lo0bits+0x56>
 800bb46:	0798      	lsls	r0, r3, #30
 800bb48:	bf49      	itett	mi
 800bb4a:	085b      	lsrmi	r3, r3, #1
 800bb4c:	089b      	lsrpl	r3, r3, #2
 800bb4e:	2001      	movmi	r0, #1
 800bb50:	600b      	strmi	r3, [r1, #0]
 800bb52:	bf5c      	itt	pl
 800bb54:	600b      	strpl	r3, [r1, #0]
 800bb56:	2002      	movpl	r0, #2
 800bb58:	4770      	bx	lr
 800bb5a:	b298      	uxth	r0, r3
 800bb5c:	b9a8      	cbnz	r0, 800bb8a <__lo0bits+0x52>
 800bb5e:	0c1b      	lsrs	r3, r3, #16
 800bb60:	2010      	movs	r0, #16
 800bb62:	b2da      	uxtb	r2, r3
 800bb64:	b90a      	cbnz	r2, 800bb6a <__lo0bits+0x32>
 800bb66:	3008      	adds	r0, #8
 800bb68:	0a1b      	lsrs	r3, r3, #8
 800bb6a:	071a      	lsls	r2, r3, #28
 800bb6c:	bf04      	itt	eq
 800bb6e:	091b      	lsreq	r3, r3, #4
 800bb70:	3004      	addeq	r0, #4
 800bb72:	079a      	lsls	r2, r3, #30
 800bb74:	bf04      	itt	eq
 800bb76:	089b      	lsreq	r3, r3, #2
 800bb78:	3002      	addeq	r0, #2
 800bb7a:	07da      	lsls	r2, r3, #31
 800bb7c:	d403      	bmi.n	800bb86 <__lo0bits+0x4e>
 800bb7e:	085b      	lsrs	r3, r3, #1
 800bb80:	f100 0001 	add.w	r0, r0, #1
 800bb84:	d005      	beq.n	800bb92 <__lo0bits+0x5a>
 800bb86:	600b      	str	r3, [r1, #0]
 800bb88:	4770      	bx	lr
 800bb8a:	4610      	mov	r0, r2
 800bb8c:	e7e9      	b.n	800bb62 <__lo0bits+0x2a>
 800bb8e:	2000      	movs	r0, #0
 800bb90:	4770      	bx	lr
 800bb92:	2020      	movs	r0, #32
 800bb94:	4770      	bx	lr
	...

0800bb98 <__i2b>:
 800bb98:	b510      	push	{r4, lr}
 800bb9a:	460c      	mov	r4, r1
 800bb9c:	2101      	movs	r1, #1
 800bb9e:	f7ff feb9 	bl	800b914 <_Balloc>
 800bba2:	4602      	mov	r2, r0
 800bba4:	b928      	cbnz	r0, 800bbb2 <__i2b+0x1a>
 800bba6:	4b05      	ldr	r3, [pc, #20]	; (800bbbc <__i2b+0x24>)
 800bba8:	4805      	ldr	r0, [pc, #20]	; (800bbc0 <__i2b+0x28>)
 800bbaa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bbae:	f001 fa1b 	bl	800cfe8 <__assert_func>
 800bbb2:	2301      	movs	r3, #1
 800bbb4:	6144      	str	r4, [r0, #20]
 800bbb6:	6103      	str	r3, [r0, #16]
 800bbb8:	bd10      	pop	{r4, pc}
 800bbba:	bf00      	nop
 800bbbc:	0800dee0 	.word	0x0800dee0
 800bbc0:	0800df6c 	.word	0x0800df6c

0800bbc4 <__multiply>:
 800bbc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbc8:	4691      	mov	r9, r2
 800bbca:	690a      	ldr	r2, [r1, #16]
 800bbcc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bbd0:	429a      	cmp	r2, r3
 800bbd2:	bfb8      	it	lt
 800bbd4:	460b      	movlt	r3, r1
 800bbd6:	460c      	mov	r4, r1
 800bbd8:	bfbc      	itt	lt
 800bbda:	464c      	movlt	r4, r9
 800bbdc:	4699      	movlt	r9, r3
 800bbde:	6927      	ldr	r7, [r4, #16]
 800bbe0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bbe4:	68a3      	ldr	r3, [r4, #8]
 800bbe6:	6861      	ldr	r1, [r4, #4]
 800bbe8:	eb07 060a 	add.w	r6, r7, sl
 800bbec:	42b3      	cmp	r3, r6
 800bbee:	b085      	sub	sp, #20
 800bbf0:	bfb8      	it	lt
 800bbf2:	3101      	addlt	r1, #1
 800bbf4:	f7ff fe8e 	bl	800b914 <_Balloc>
 800bbf8:	b930      	cbnz	r0, 800bc08 <__multiply+0x44>
 800bbfa:	4602      	mov	r2, r0
 800bbfc:	4b44      	ldr	r3, [pc, #272]	; (800bd10 <__multiply+0x14c>)
 800bbfe:	4845      	ldr	r0, [pc, #276]	; (800bd14 <__multiply+0x150>)
 800bc00:	f240 115d 	movw	r1, #349	; 0x15d
 800bc04:	f001 f9f0 	bl	800cfe8 <__assert_func>
 800bc08:	f100 0514 	add.w	r5, r0, #20
 800bc0c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bc10:	462b      	mov	r3, r5
 800bc12:	2200      	movs	r2, #0
 800bc14:	4543      	cmp	r3, r8
 800bc16:	d321      	bcc.n	800bc5c <__multiply+0x98>
 800bc18:	f104 0314 	add.w	r3, r4, #20
 800bc1c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bc20:	f109 0314 	add.w	r3, r9, #20
 800bc24:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bc28:	9202      	str	r2, [sp, #8]
 800bc2a:	1b3a      	subs	r2, r7, r4
 800bc2c:	3a15      	subs	r2, #21
 800bc2e:	f022 0203 	bic.w	r2, r2, #3
 800bc32:	3204      	adds	r2, #4
 800bc34:	f104 0115 	add.w	r1, r4, #21
 800bc38:	428f      	cmp	r7, r1
 800bc3a:	bf38      	it	cc
 800bc3c:	2204      	movcc	r2, #4
 800bc3e:	9201      	str	r2, [sp, #4]
 800bc40:	9a02      	ldr	r2, [sp, #8]
 800bc42:	9303      	str	r3, [sp, #12]
 800bc44:	429a      	cmp	r2, r3
 800bc46:	d80c      	bhi.n	800bc62 <__multiply+0x9e>
 800bc48:	2e00      	cmp	r6, #0
 800bc4a:	dd03      	ble.n	800bc54 <__multiply+0x90>
 800bc4c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d05a      	beq.n	800bd0a <__multiply+0x146>
 800bc54:	6106      	str	r6, [r0, #16]
 800bc56:	b005      	add	sp, #20
 800bc58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc5c:	f843 2b04 	str.w	r2, [r3], #4
 800bc60:	e7d8      	b.n	800bc14 <__multiply+0x50>
 800bc62:	f8b3 a000 	ldrh.w	sl, [r3]
 800bc66:	f1ba 0f00 	cmp.w	sl, #0
 800bc6a:	d024      	beq.n	800bcb6 <__multiply+0xf2>
 800bc6c:	f104 0e14 	add.w	lr, r4, #20
 800bc70:	46a9      	mov	r9, r5
 800bc72:	f04f 0c00 	mov.w	ip, #0
 800bc76:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bc7a:	f8d9 1000 	ldr.w	r1, [r9]
 800bc7e:	fa1f fb82 	uxth.w	fp, r2
 800bc82:	b289      	uxth	r1, r1
 800bc84:	fb0a 110b 	mla	r1, sl, fp, r1
 800bc88:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bc8c:	f8d9 2000 	ldr.w	r2, [r9]
 800bc90:	4461      	add	r1, ip
 800bc92:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bc96:	fb0a c20b 	mla	r2, sl, fp, ip
 800bc9a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bc9e:	b289      	uxth	r1, r1
 800bca0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bca4:	4577      	cmp	r7, lr
 800bca6:	f849 1b04 	str.w	r1, [r9], #4
 800bcaa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bcae:	d8e2      	bhi.n	800bc76 <__multiply+0xb2>
 800bcb0:	9a01      	ldr	r2, [sp, #4]
 800bcb2:	f845 c002 	str.w	ip, [r5, r2]
 800bcb6:	9a03      	ldr	r2, [sp, #12]
 800bcb8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bcbc:	3304      	adds	r3, #4
 800bcbe:	f1b9 0f00 	cmp.w	r9, #0
 800bcc2:	d020      	beq.n	800bd06 <__multiply+0x142>
 800bcc4:	6829      	ldr	r1, [r5, #0]
 800bcc6:	f104 0c14 	add.w	ip, r4, #20
 800bcca:	46ae      	mov	lr, r5
 800bccc:	f04f 0a00 	mov.w	sl, #0
 800bcd0:	f8bc b000 	ldrh.w	fp, [ip]
 800bcd4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bcd8:	fb09 220b 	mla	r2, r9, fp, r2
 800bcdc:	4492      	add	sl, r2
 800bcde:	b289      	uxth	r1, r1
 800bce0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800bce4:	f84e 1b04 	str.w	r1, [lr], #4
 800bce8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bcec:	f8be 1000 	ldrh.w	r1, [lr]
 800bcf0:	0c12      	lsrs	r2, r2, #16
 800bcf2:	fb09 1102 	mla	r1, r9, r2, r1
 800bcf6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800bcfa:	4567      	cmp	r7, ip
 800bcfc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bd00:	d8e6      	bhi.n	800bcd0 <__multiply+0x10c>
 800bd02:	9a01      	ldr	r2, [sp, #4]
 800bd04:	50a9      	str	r1, [r5, r2]
 800bd06:	3504      	adds	r5, #4
 800bd08:	e79a      	b.n	800bc40 <__multiply+0x7c>
 800bd0a:	3e01      	subs	r6, #1
 800bd0c:	e79c      	b.n	800bc48 <__multiply+0x84>
 800bd0e:	bf00      	nop
 800bd10:	0800dee0 	.word	0x0800dee0
 800bd14:	0800df6c 	.word	0x0800df6c

0800bd18 <__pow5mult>:
 800bd18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd1c:	4615      	mov	r5, r2
 800bd1e:	f012 0203 	ands.w	r2, r2, #3
 800bd22:	4606      	mov	r6, r0
 800bd24:	460f      	mov	r7, r1
 800bd26:	d007      	beq.n	800bd38 <__pow5mult+0x20>
 800bd28:	4c25      	ldr	r4, [pc, #148]	; (800bdc0 <__pow5mult+0xa8>)
 800bd2a:	3a01      	subs	r2, #1
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bd32:	f7ff fe51 	bl	800b9d8 <__multadd>
 800bd36:	4607      	mov	r7, r0
 800bd38:	10ad      	asrs	r5, r5, #2
 800bd3a:	d03d      	beq.n	800bdb8 <__pow5mult+0xa0>
 800bd3c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bd3e:	b97c      	cbnz	r4, 800bd60 <__pow5mult+0x48>
 800bd40:	2010      	movs	r0, #16
 800bd42:	f7ff fdcd 	bl	800b8e0 <malloc>
 800bd46:	4602      	mov	r2, r0
 800bd48:	6270      	str	r0, [r6, #36]	; 0x24
 800bd4a:	b928      	cbnz	r0, 800bd58 <__pow5mult+0x40>
 800bd4c:	4b1d      	ldr	r3, [pc, #116]	; (800bdc4 <__pow5mult+0xac>)
 800bd4e:	481e      	ldr	r0, [pc, #120]	; (800bdc8 <__pow5mult+0xb0>)
 800bd50:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bd54:	f001 f948 	bl	800cfe8 <__assert_func>
 800bd58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bd5c:	6004      	str	r4, [r0, #0]
 800bd5e:	60c4      	str	r4, [r0, #12]
 800bd60:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bd64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bd68:	b94c      	cbnz	r4, 800bd7e <__pow5mult+0x66>
 800bd6a:	f240 2171 	movw	r1, #625	; 0x271
 800bd6e:	4630      	mov	r0, r6
 800bd70:	f7ff ff12 	bl	800bb98 <__i2b>
 800bd74:	2300      	movs	r3, #0
 800bd76:	f8c8 0008 	str.w	r0, [r8, #8]
 800bd7a:	4604      	mov	r4, r0
 800bd7c:	6003      	str	r3, [r0, #0]
 800bd7e:	f04f 0900 	mov.w	r9, #0
 800bd82:	07eb      	lsls	r3, r5, #31
 800bd84:	d50a      	bpl.n	800bd9c <__pow5mult+0x84>
 800bd86:	4639      	mov	r1, r7
 800bd88:	4622      	mov	r2, r4
 800bd8a:	4630      	mov	r0, r6
 800bd8c:	f7ff ff1a 	bl	800bbc4 <__multiply>
 800bd90:	4639      	mov	r1, r7
 800bd92:	4680      	mov	r8, r0
 800bd94:	4630      	mov	r0, r6
 800bd96:	f7ff fdfd 	bl	800b994 <_Bfree>
 800bd9a:	4647      	mov	r7, r8
 800bd9c:	106d      	asrs	r5, r5, #1
 800bd9e:	d00b      	beq.n	800bdb8 <__pow5mult+0xa0>
 800bda0:	6820      	ldr	r0, [r4, #0]
 800bda2:	b938      	cbnz	r0, 800bdb4 <__pow5mult+0x9c>
 800bda4:	4622      	mov	r2, r4
 800bda6:	4621      	mov	r1, r4
 800bda8:	4630      	mov	r0, r6
 800bdaa:	f7ff ff0b 	bl	800bbc4 <__multiply>
 800bdae:	6020      	str	r0, [r4, #0]
 800bdb0:	f8c0 9000 	str.w	r9, [r0]
 800bdb4:	4604      	mov	r4, r0
 800bdb6:	e7e4      	b.n	800bd82 <__pow5mult+0x6a>
 800bdb8:	4638      	mov	r0, r7
 800bdba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bdbe:	bf00      	nop
 800bdc0:	0800e0b8 	.word	0x0800e0b8
 800bdc4:	0800de6e 	.word	0x0800de6e
 800bdc8:	0800df6c 	.word	0x0800df6c

0800bdcc <__lshift>:
 800bdcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bdd0:	460c      	mov	r4, r1
 800bdd2:	6849      	ldr	r1, [r1, #4]
 800bdd4:	6923      	ldr	r3, [r4, #16]
 800bdd6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bdda:	68a3      	ldr	r3, [r4, #8]
 800bddc:	4607      	mov	r7, r0
 800bdde:	4691      	mov	r9, r2
 800bde0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bde4:	f108 0601 	add.w	r6, r8, #1
 800bde8:	42b3      	cmp	r3, r6
 800bdea:	db0b      	blt.n	800be04 <__lshift+0x38>
 800bdec:	4638      	mov	r0, r7
 800bdee:	f7ff fd91 	bl	800b914 <_Balloc>
 800bdf2:	4605      	mov	r5, r0
 800bdf4:	b948      	cbnz	r0, 800be0a <__lshift+0x3e>
 800bdf6:	4602      	mov	r2, r0
 800bdf8:	4b2a      	ldr	r3, [pc, #168]	; (800bea4 <__lshift+0xd8>)
 800bdfa:	482b      	ldr	r0, [pc, #172]	; (800bea8 <__lshift+0xdc>)
 800bdfc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800be00:	f001 f8f2 	bl	800cfe8 <__assert_func>
 800be04:	3101      	adds	r1, #1
 800be06:	005b      	lsls	r3, r3, #1
 800be08:	e7ee      	b.n	800bde8 <__lshift+0x1c>
 800be0a:	2300      	movs	r3, #0
 800be0c:	f100 0114 	add.w	r1, r0, #20
 800be10:	f100 0210 	add.w	r2, r0, #16
 800be14:	4618      	mov	r0, r3
 800be16:	4553      	cmp	r3, sl
 800be18:	db37      	blt.n	800be8a <__lshift+0xbe>
 800be1a:	6920      	ldr	r0, [r4, #16]
 800be1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800be20:	f104 0314 	add.w	r3, r4, #20
 800be24:	f019 091f 	ands.w	r9, r9, #31
 800be28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800be2c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800be30:	d02f      	beq.n	800be92 <__lshift+0xc6>
 800be32:	f1c9 0e20 	rsb	lr, r9, #32
 800be36:	468a      	mov	sl, r1
 800be38:	f04f 0c00 	mov.w	ip, #0
 800be3c:	681a      	ldr	r2, [r3, #0]
 800be3e:	fa02 f209 	lsl.w	r2, r2, r9
 800be42:	ea42 020c 	orr.w	r2, r2, ip
 800be46:	f84a 2b04 	str.w	r2, [sl], #4
 800be4a:	f853 2b04 	ldr.w	r2, [r3], #4
 800be4e:	4298      	cmp	r0, r3
 800be50:	fa22 fc0e 	lsr.w	ip, r2, lr
 800be54:	d8f2      	bhi.n	800be3c <__lshift+0x70>
 800be56:	1b03      	subs	r3, r0, r4
 800be58:	3b15      	subs	r3, #21
 800be5a:	f023 0303 	bic.w	r3, r3, #3
 800be5e:	3304      	adds	r3, #4
 800be60:	f104 0215 	add.w	r2, r4, #21
 800be64:	4290      	cmp	r0, r2
 800be66:	bf38      	it	cc
 800be68:	2304      	movcc	r3, #4
 800be6a:	f841 c003 	str.w	ip, [r1, r3]
 800be6e:	f1bc 0f00 	cmp.w	ip, #0
 800be72:	d001      	beq.n	800be78 <__lshift+0xac>
 800be74:	f108 0602 	add.w	r6, r8, #2
 800be78:	3e01      	subs	r6, #1
 800be7a:	4638      	mov	r0, r7
 800be7c:	612e      	str	r6, [r5, #16]
 800be7e:	4621      	mov	r1, r4
 800be80:	f7ff fd88 	bl	800b994 <_Bfree>
 800be84:	4628      	mov	r0, r5
 800be86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be8a:	f842 0f04 	str.w	r0, [r2, #4]!
 800be8e:	3301      	adds	r3, #1
 800be90:	e7c1      	b.n	800be16 <__lshift+0x4a>
 800be92:	3904      	subs	r1, #4
 800be94:	f853 2b04 	ldr.w	r2, [r3], #4
 800be98:	f841 2f04 	str.w	r2, [r1, #4]!
 800be9c:	4298      	cmp	r0, r3
 800be9e:	d8f9      	bhi.n	800be94 <__lshift+0xc8>
 800bea0:	e7ea      	b.n	800be78 <__lshift+0xac>
 800bea2:	bf00      	nop
 800bea4:	0800dee0 	.word	0x0800dee0
 800bea8:	0800df6c 	.word	0x0800df6c

0800beac <__mcmp>:
 800beac:	b530      	push	{r4, r5, lr}
 800beae:	6902      	ldr	r2, [r0, #16]
 800beb0:	690c      	ldr	r4, [r1, #16]
 800beb2:	1b12      	subs	r2, r2, r4
 800beb4:	d10e      	bne.n	800bed4 <__mcmp+0x28>
 800beb6:	f100 0314 	add.w	r3, r0, #20
 800beba:	3114      	adds	r1, #20
 800bebc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bec0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bec4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bec8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800becc:	42a5      	cmp	r5, r4
 800bece:	d003      	beq.n	800bed8 <__mcmp+0x2c>
 800bed0:	d305      	bcc.n	800bede <__mcmp+0x32>
 800bed2:	2201      	movs	r2, #1
 800bed4:	4610      	mov	r0, r2
 800bed6:	bd30      	pop	{r4, r5, pc}
 800bed8:	4283      	cmp	r3, r0
 800beda:	d3f3      	bcc.n	800bec4 <__mcmp+0x18>
 800bedc:	e7fa      	b.n	800bed4 <__mcmp+0x28>
 800bede:	f04f 32ff 	mov.w	r2, #4294967295
 800bee2:	e7f7      	b.n	800bed4 <__mcmp+0x28>

0800bee4 <__mdiff>:
 800bee4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bee8:	460c      	mov	r4, r1
 800beea:	4606      	mov	r6, r0
 800beec:	4611      	mov	r1, r2
 800beee:	4620      	mov	r0, r4
 800bef0:	4690      	mov	r8, r2
 800bef2:	f7ff ffdb 	bl	800beac <__mcmp>
 800bef6:	1e05      	subs	r5, r0, #0
 800bef8:	d110      	bne.n	800bf1c <__mdiff+0x38>
 800befa:	4629      	mov	r1, r5
 800befc:	4630      	mov	r0, r6
 800befe:	f7ff fd09 	bl	800b914 <_Balloc>
 800bf02:	b930      	cbnz	r0, 800bf12 <__mdiff+0x2e>
 800bf04:	4b3a      	ldr	r3, [pc, #232]	; (800bff0 <__mdiff+0x10c>)
 800bf06:	4602      	mov	r2, r0
 800bf08:	f240 2132 	movw	r1, #562	; 0x232
 800bf0c:	4839      	ldr	r0, [pc, #228]	; (800bff4 <__mdiff+0x110>)
 800bf0e:	f001 f86b 	bl	800cfe8 <__assert_func>
 800bf12:	2301      	movs	r3, #1
 800bf14:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bf18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf1c:	bfa4      	itt	ge
 800bf1e:	4643      	movge	r3, r8
 800bf20:	46a0      	movge	r8, r4
 800bf22:	4630      	mov	r0, r6
 800bf24:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bf28:	bfa6      	itte	ge
 800bf2a:	461c      	movge	r4, r3
 800bf2c:	2500      	movge	r5, #0
 800bf2e:	2501      	movlt	r5, #1
 800bf30:	f7ff fcf0 	bl	800b914 <_Balloc>
 800bf34:	b920      	cbnz	r0, 800bf40 <__mdiff+0x5c>
 800bf36:	4b2e      	ldr	r3, [pc, #184]	; (800bff0 <__mdiff+0x10c>)
 800bf38:	4602      	mov	r2, r0
 800bf3a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bf3e:	e7e5      	b.n	800bf0c <__mdiff+0x28>
 800bf40:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bf44:	6926      	ldr	r6, [r4, #16]
 800bf46:	60c5      	str	r5, [r0, #12]
 800bf48:	f104 0914 	add.w	r9, r4, #20
 800bf4c:	f108 0514 	add.w	r5, r8, #20
 800bf50:	f100 0e14 	add.w	lr, r0, #20
 800bf54:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bf58:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bf5c:	f108 0210 	add.w	r2, r8, #16
 800bf60:	46f2      	mov	sl, lr
 800bf62:	2100      	movs	r1, #0
 800bf64:	f859 3b04 	ldr.w	r3, [r9], #4
 800bf68:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bf6c:	fa1f f883 	uxth.w	r8, r3
 800bf70:	fa11 f18b 	uxtah	r1, r1, fp
 800bf74:	0c1b      	lsrs	r3, r3, #16
 800bf76:	eba1 0808 	sub.w	r8, r1, r8
 800bf7a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bf7e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bf82:	fa1f f888 	uxth.w	r8, r8
 800bf86:	1419      	asrs	r1, r3, #16
 800bf88:	454e      	cmp	r6, r9
 800bf8a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bf8e:	f84a 3b04 	str.w	r3, [sl], #4
 800bf92:	d8e7      	bhi.n	800bf64 <__mdiff+0x80>
 800bf94:	1b33      	subs	r3, r6, r4
 800bf96:	3b15      	subs	r3, #21
 800bf98:	f023 0303 	bic.w	r3, r3, #3
 800bf9c:	3304      	adds	r3, #4
 800bf9e:	3415      	adds	r4, #21
 800bfa0:	42a6      	cmp	r6, r4
 800bfa2:	bf38      	it	cc
 800bfa4:	2304      	movcc	r3, #4
 800bfa6:	441d      	add	r5, r3
 800bfa8:	4473      	add	r3, lr
 800bfaa:	469e      	mov	lr, r3
 800bfac:	462e      	mov	r6, r5
 800bfae:	4566      	cmp	r6, ip
 800bfb0:	d30e      	bcc.n	800bfd0 <__mdiff+0xec>
 800bfb2:	f10c 0203 	add.w	r2, ip, #3
 800bfb6:	1b52      	subs	r2, r2, r5
 800bfb8:	f022 0203 	bic.w	r2, r2, #3
 800bfbc:	3d03      	subs	r5, #3
 800bfbe:	45ac      	cmp	ip, r5
 800bfc0:	bf38      	it	cc
 800bfc2:	2200      	movcc	r2, #0
 800bfc4:	441a      	add	r2, r3
 800bfc6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bfca:	b17b      	cbz	r3, 800bfec <__mdiff+0x108>
 800bfcc:	6107      	str	r7, [r0, #16]
 800bfce:	e7a3      	b.n	800bf18 <__mdiff+0x34>
 800bfd0:	f856 8b04 	ldr.w	r8, [r6], #4
 800bfd4:	fa11 f288 	uxtah	r2, r1, r8
 800bfd8:	1414      	asrs	r4, r2, #16
 800bfda:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bfde:	b292      	uxth	r2, r2
 800bfe0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bfe4:	f84e 2b04 	str.w	r2, [lr], #4
 800bfe8:	1421      	asrs	r1, r4, #16
 800bfea:	e7e0      	b.n	800bfae <__mdiff+0xca>
 800bfec:	3f01      	subs	r7, #1
 800bfee:	e7ea      	b.n	800bfc6 <__mdiff+0xe2>
 800bff0:	0800dee0 	.word	0x0800dee0
 800bff4:	0800df6c 	.word	0x0800df6c

0800bff8 <__ulp>:
 800bff8:	b082      	sub	sp, #8
 800bffa:	ed8d 0b00 	vstr	d0, [sp]
 800bffe:	9b01      	ldr	r3, [sp, #4]
 800c000:	4912      	ldr	r1, [pc, #72]	; (800c04c <__ulp+0x54>)
 800c002:	4019      	ands	r1, r3
 800c004:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c008:	2900      	cmp	r1, #0
 800c00a:	dd05      	ble.n	800c018 <__ulp+0x20>
 800c00c:	2200      	movs	r2, #0
 800c00e:	460b      	mov	r3, r1
 800c010:	ec43 2b10 	vmov	d0, r2, r3
 800c014:	b002      	add	sp, #8
 800c016:	4770      	bx	lr
 800c018:	4249      	negs	r1, r1
 800c01a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c01e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c022:	f04f 0200 	mov.w	r2, #0
 800c026:	f04f 0300 	mov.w	r3, #0
 800c02a:	da04      	bge.n	800c036 <__ulp+0x3e>
 800c02c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c030:	fa41 f300 	asr.w	r3, r1, r0
 800c034:	e7ec      	b.n	800c010 <__ulp+0x18>
 800c036:	f1a0 0114 	sub.w	r1, r0, #20
 800c03a:	291e      	cmp	r1, #30
 800c03c:	bfda      	itte	le
 800c03e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c042:	fa20 f101 	lsrle.w	r1, r0, r1
 800c046:	2101      	movgt	r1, #1
 800c048:	460a      	mov	r2, r1
 800c04a:	e7e1      	b.n	800c010 <__ulp+0x18>
 800c04c:	7ff00000 	.word	0x7ff00000

0800c050 <__b2d>:
 800c050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c052:	6905      	ldr	r5, [r0, #16]
 800c054:	f100 0714 	add.w	r7, r0, #20
 800c058:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c05c:	1f2e      	subs	r6, r5, #4
 800c05e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c062:	4620      	mov	r0, r4
 800c064:	f7ff fd48 	bl	800baf8 <__hi0bits>
 800c068:	f1c0 0320 	rsb	r3, r0, #32
 800c06c:	280a      	cmp	r0, #10
 800c06e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c0ec <__b2d+0x9c>
 800c072:	600b      	str	r3, [r1, #0]
 800c074:	dc14      	bgt.n	800c0a0 <__b2d+0x50>
 800c076:	f1c0 0e0b 	rsb	lr, r0, #11
 800c07a:	fa24 f10e 	lsr.w	r1, r4, lr
 800c07e:	42b7      	cmp	r7, r6
 800c080:	ea41 030c 	orr.w	r3, r1, ip
 800c084:	bf34      	ite	cc
 800c086:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c08a:	2100      	movcs	r1, #0
 800c08c:	3015      	adds	r0, #21
 800c08e:	fa04 f000 	lsl.w	r0, r4, r0
 800c092:	fa21 f10e 	lsr.w	r1, r1, lr
 800c096:	ea40 0201 	orr.w	r2, r0, r1
 800c09a:	ec43 2b10 	vmov	d0, r2, r3
 800c09e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0a0:	42b7      	cmp	r7, r6
 800c0a2:	bf3a      	itte	cc
 800c0a4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c0a8:	f1a5 0608 	subcc.w	r6, r5, #8
 800c0ac:	2100      	movcs	r1, #0
 800c0ae:	380b      	subs	r0, #11
 800c0b0:	d017      	beq.n	800c0e2 <__b2d+0x92>
 800c0b2:	f1c0 0c20 	rsb	ip, r0, #32
 800c0b6:	fa04 f500 	lsl.w	r5, r4, r0
 800c0ba:	42be      	cmp	r6, r7
 800c0bc:	fa21 f40c 	lsr.w	r4, r1, ip
 800c0c0:	ea45 0504 	orr.w	r5, r5, r4
 800c0c4:	bf8c      	ite	hi
 800c0c6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c0ca:	2400      	movls	r4, #0
 800c0cc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c0d0:	fa01 f000 	lsl.w	r0, r1, r0
 800c0d4:	fa24 f40c 	lsr.w	r4, r4, ip
 800c0d8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c0dc:	ea40 0204 	orr.w	r2, r0, r4
 800c0e0:	e7db      	b.n	800c09a <__b2d+0x4a>
 800c0e2:	ea44 030c 	orr.w	r3, r4, ip
 800c0e6:	460a      	mov	r2, r1
 800c0e8:	e7d7      	b.n	800c09a <__b2d+0x4a>
 800c0ea:	bf00      	nop
 800c0ec:	3ff00000 	.word	0x3ff00000

0800c0f0 <__d2b>:
 800c0f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c0f4:	4689      	mov	r9, r1
 800c0f6:	2101      	movs	r1, #1
 800c0f8:	ec57 6b10 	vmov	r6, r7, d0
 800c0fc:	4690      	mov	r8, r2
 800c0fe:	f7ff fc09 	bl	800b914 <_Balloc>
 800c102:	4604      	mov	r4, r0
 800c104:	b930      	cbnz	r0, 800c114 <__d2b+0x24>
 800c106:	4602      	mov	r2, r0
 800c108:	4b25      	ldr	r3, [pc, #148]	; (800c1a0 <__d2b+0xb0>)
 800c10a:	4826      	ldr	r0, [pc, #152]	; (800c1a4 <__d2b+0xb4>)
 800c10c:	f240 310a 	movw	r1, #778	; 0x30a
 800c110:	f000 ff6a 	bl	800cfe8 <__assert_func>
 800c114:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c118:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c11c:	bb35      	cbnz	r5, 800c16c <__d2b+0x7c>
 800c11e:	2e00      	cmp	r6, #0
 800c120:	9301      	str	r3, [sp, #4]
 800c122:	d028      	beq.n	800c176 <__d2b+0x86>
 800c124:	4668      	mov	r0, sp
 800c126:	9600      	str	r6, [sp, #0]
 800c128:	f7ff fd06 	bl	800bb38 <__lo0bits>
 800c12c:	9900      	ldr	r1, [sp, #0]
 800c12e:	b300      	cbz	r0, 800c172 <__d2b+0x82>
 800c130:	9a01      	ldr	r2, [sp, #4]
 800c132:	f1c0 0320 	rsb	r3, r0, #32
 800c136:	fa02 f303 	lsl.w	r3, r2, r3
 800c13a:	430b      	orrs	r3, r1
 800c13c:	40c2      	lsrs	r2, r0
 800c13e:	6163      	str	r3, [r4, #20]
 800c140:	9201      	str	r2, [sp, #4]
 800c142:	9b01      	ldr	r3, [sp, #4]
 800c144:	61a3      	str	r3, [r4, #24]
 800c146:	2b00      	cmp	r3, #0
 800c148:	bf14      	ite	ne
 800c14a:	2202      	movne	r2, #2
 800c14c:	2201      	moveq	r2, #1
 800c14e:	6122      	str	r2, [r4, #16]
 800c150:	b1d5      	cbz	r5, 800c188 <__d2b+0x98>
 800c152:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c156:	4405      	add	r5, r0
 800c158:	f8c9 5000 	str.w	r5, [r9]
 800c15c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c160:	f8c8 0000 	str.w	r0, [r8]
 800c164:	4620      	mov	r0, r4
 800c166:	b003      	add	sp, #12
 800c168:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c16c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c170:	e7d5      	b.n	800c11e <__d2b+0x2e>
 800c172:	6161      	str	r1, [r4, #20]
 800c174:	e7e5      	b.n	800c142 <__d2b+0x52>
 800c176:	a801      	add	r0, sp, #4
 800c178:	f7ff fcde 	bl	800bb38 <__lo0bits>
 800c17c:	9b01      	ldr	r3, [sp, #4]
 800c17e:	6163      	str	r3, [r4, #20]
 800c180:	2201      	movs	r2, #1
 800c182:	6122      	str	r2, [r4, #16]
 800c184:	3020      	adds	r0, #32
 800c186:	e7e3      	b.n	800c150 <__d2b+0x60>
 800c188:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c18c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c190:	f8c9 0000 	str.w	r0, [r9]
 800c194:	6918      	ldr	r0, [r3, #16]
 800c196:	f7ff fcaf 	bl	800baf8 <__hi0bits>
 800c19a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c19e:	e7df      	b.n	800c160 <__d2b+0x70>
 800c1a0:	0800dee0 	.word	0x0800dee0
 800c1a4:	0800df6c 	.word	0x0800df6c

0800c1a8 <__ratio>:
 800c1a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1ac:	4688      	mov	r8, r1
 800c1ae:	4669      	mov	r1, sp
 800c1b0:	4681      	mov	r9, r0
 800c1b2:	f7ff ff4d 	bl	800c050 <__b2d>
 800c1b6:	a901      	add	r1, sp, #4
 800c1b8:	4640      	mov	r0, r8
 800c1ba:	ec55 4b10 	vmov	r4, r5, d0
 800c1be:	f7ff ff47 	bl	800c050 <__b2d>
 800c1c2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c1c6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c1ca:	eba3 0c02 	sub.w	ip, r3, r2
 800c1ce:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c1d2:	1a9b      	subs	r3, r3, r2
 800c1d4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c1d8:	ec51 0b10 	vmov	r0, r1, d0
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	bfd6      	itet	le
 800c1e0:	460a      	movle	r2, r1
 800c1e2:	462a      	movgt	r2, r5
 800c1e4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c1e8:	468b      	mov	fp, r1
 800c1ea:	462f      	mov	r7, r5
 800c1ec:	bfd4      	ite	le
 800c1ee:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c1f2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c1f6:	4620      	mov	r0, r4
 800c1f8:	ee10 2a10 	vmov	r2, s0
 800c1fc:	465b      	mov	r3, fp
 800c1fe:	4639      	mov	r1, r7
 800c200:	f7f4 fb54 	bl	80008ac <__aeabi_ddiv>
 800c204:	ec41 0b10 	vmov	d0, r0, r1
 800c208:	b003      	add	sp, #12
 800c20a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c20e <__copybits>:
 800c20e:	3901      	subs	r1, #1
 800c210:	b570      	push	{r4, r5, r6, lr}
 800c212:	1149      	asrs	r1, r1, #5
 800c214:	6914      	ldr	r4, [r2, #16]
 800c216:	3101      	adds	r1, #1
 800c218:	f102 0314 	add.w	r3, r2, #20
 800c21c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c220:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c224:	1f05      	subs	r5, r0, #4
 800c226:	42a3      	cmp	r3, r4
 800c228:	d30c      	bcc.n	800c244 <__copybits+0x36>
 800c22a:	1aa3      	subs	r3, r4, r2
 800c22c:	3b11      	subs	r3, #17
 800c22e:	f023 0303 	bic.w	r3, r3, #3
 800c232:	3211      	adds	r2, #17
 800c234:	42a2      	cmp	r2, r4
 800c236:	bf88      	it	hi
 800c238:	2300      	movhi	r3, #0
 800c23a:	4418      	add	r0, r3
 800c23c:	2300      	movs	r3, #0
 800c23e:	4288      	cmp	r0, r1
 800c240:	d305      	bcc.n	800c24e <__copybits+0x40>
 800c242:	bd70      	pop	{r4, r5, r6, pc}
 800c244:	f853 6b04 	ldr.w	r6, [r3], #4
 800c248:	f845 6f04 	str.w	r6, [r5, #4]!
 800c24c:	e7eb      	b.n	800c226 <__copybits+0x18>
 800c24e:	f840 3b04 	str.w	r3, [r0], #4
 800c252:	e7f4      	b.n	800c23e <__copybits+0x30>

0800c254 <__any_on>:
 800c254:	f100 0214 	add.w	r2, r0, #20
 800c258:	6900      	ldr	r0, [r0, #16]
 800c25a:	114b      	asrs	r3, r1, #5
 800c25c:	4298      	cmp	r0, r3
 800c25e:	b510      	push	{r4, lr}
 800c260:	db11      	blt.n	800c286 <__any_on+0x32>
 800c262:	dd0a      	ble.n	800c27a <__any_on+0x26>
 800c264:	f011 011f 	ands.w	r1, r1, #31
 800c268:	d007      	beq.n	800c27a <__any_on+0x26>
 800c26a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c26e:	fa24 f001 	lsr.w	r0, r4, r1
 800c272:	fa00 f101 	lsl.w	r1, r0, r1
 800c276:	428c      	cmp	r4, r1
 800c278:	d10b      	bne.n	800c292 <__any_on+0x3e>
 800c27a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c27e:	4293      	cmp	r3, r2
 800c280:	d803      	bhi.n	800c28a <__any_on+0x36>
 800c282:	2000      	movs	r0, #0
 800c284:	bd10      	pop	{r4, pc}
 800c286:	4603      	mov	r3, r0
 800c288:	e7f7      	b.n	800c27a <__any_on+0x26>
 800c28a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c28e:	2900      	cmp	r1, #0
 800c290:	d0f5      	beq.n	800c27e <__any_on+0x2a>
 800c292:	2001      	movs	r0, #1
 800c294:	e7f6      	b.n	800c284 <__any_on+0x30>

0800c296 <_calloc_r>:
 800c296:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c298:	fba1 2402 	umull	r2, r4, r1, r2
 800c29c:	b94c      	cbnz	r4, 800c2b2 <_calloc_r+0x1c>
 800c29e:	4611      	mov	r1, r2
 800c2a0:	9201      	str	r2, [sp, #4]
 800c2a2:	f000 f87b 	bl	800c39c <_malloc_r>
 800c2a6:	9a01      	ldr	r2, [sp, #4]
 800c2a8:	4605      	mov	r5, r0
 800c2aa:	b930      	cbnz	r0, 800c2ba <_calloc_r+0x24>
 800c2ac:	4628      	mov	r0, r5
 800c2ae:	b003      	add	sp, #12
 800c2b0:	bd30      	pop	{r4, r5, pc}
 800c2b2:	220c      	movs	r2, #12
 800c2b4:	6002      	str	r2, [r0, #0]
 800c2b6:	2500      	movs	r5, #0
 800c2b8:	e7f8      	b.n	800c2ac <_calloc_r+0x16>
 800c2ba:	4621      	mov	r1, r4
 800c2bc:	f7fc fb24 	bl	8008908 <memset>
 800c2c0:	e7f4      	b.n	800c2ac <_calloc_r+0x16>
	...

0800c2c4 <_free_r>:
 800c2c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c2c6:	2900      	cmp	r1, #0
 800c2c8:	d044      	beq.n	800c354 <_free_r+0x90>
 800c2ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2ce:	9001      	str	r0, [sp, #4]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	f1a1 0404 	sub.w	r4, r1, #4
 800c2d6:	bfb8      	it	lt
 800c2d8:	18e4      	addlt	r4, r4, r3
 800c2da:	f001 f889 	bl	800d3f0 <__malloc_lock>
 800c2de:	4a1e      	ldr	r2, [pc, #120]	; (800c358 <_free_r+0x94>)
 800c2e0:	9801      	ldr	r0, [sp, #4]
 800c2e2:	6813      	ldr	r3, [r2, #0]
 800c2e4:	b933      	cbnz	r3, 800c2f4 <_free_r+0x30>
 800c2e6:	6063      	str	r3, [r4, #4]
 800c2e8:	6014      	str	r4, [r2, #0]
 800c2ea:	b003      	add	sp, #12
 800c2ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c2f0:	f001 b884 	b.w	800d3fc <__malloc_unlock>
 800c2f4:	42a3      	cmp	r3, r4
 800c2f6:	d908      	bls.n	800c30a <_free_r+0x46>
 800c2f8:	6825      	ldr	r5, [r4, #0]
 800c2fa:	1961      	adds	r1, r4, r5
 800c2fc:	428b      	cmp	r3, r1
 800c2fe:	bf01      	itttt	eq
 800c300:	6819      	ldreq	r1, [r3, #0]
 800c302:	685b      	ldreq	r3, [r3, #4]
 800c304:	1949      	addeq	r1, r1, r5
 800c306:	6021      	streq	r1, [r4, #0]
 800c308:	e7ed      	b.n	800c2e6 <_free_r+0x22>
 800c30a:	461a      	mov	r2, r3
 800c30c:	685b      	ldr	r3, [r3, #4]
 800c30e:	b10b      	cbz	r3, 800c314 <_free_r+0x50>
 800c310:	42a3      	cmp	r3, r4
 800c312:	d9fa      	bls.n	800c30a <_free_r+0x46>
 800c314:	6811      	ldr	r1, [r2, #0]
 800c316:	1855      	adds	r5, r2, r1
 800c318:	42a5      	cmp	r5, r4
 800c31a:	d10b      	bne.n	800c334 <_free_r+0x70>
 800c31c:	6824      	ldr	r4, [r4, #0]
 800c31e:	4421      	add	r1, r4
 800c320:	1854      	adds	r4, r2, r1
 800c322:	42a3      	cmp	r3, r4
 800c324:	6011      	str	r1, [r2, #0]
 800c326:	d1e0      	bne.n	800c2ea <_free_r+0x26>
 800c328:	681c      	ldr	r4, [r3, #0]
 800c32a:	685b      	ldr	r3, [r3, #4]
 800c32c:	6053      	str	r3, [r2, #4]
 800c32e:	4421      	add	r1, r4
 800c330:	6011      	str	r1, [r2, #0]
 800c332:	e7da      	b.n	800c2ea <_free_r+0x26>
 800c334:	d902      	bls.n	800c33c <_free_r+0x78>
 800c336:	230c      	movs	r3, #12
 800c338:	6003      	str	r3, [r0, #0]
 800c33a:	e7d6      	b.n	800c2ea <_free_r+0x26>
 800c33c:	6825      	ldr	r5, [r4, #0]
 800c33e:	1961      	adds	r1, r4, r5
 800c340:	428b      	cmp	r3, r1
 800c342:	bf04      	itt	eq
 800c344:	6819      	ldreq	r1, [r3, #0]
 800c346:	685b      	ldreq	r3, [r3, #4]
 800c348:	6063      	str	r3, [r4, #4]
 800c34a:	bf04      	itt	eq
 800c34c:	1949      	addeq	r1, r1, r5
 800c34e:	6021      	streq	r1, [r4, #0]
 800c350:	6054      	str	r4, [r2, #4]
 800c352:	e7ca      	b.n	800c2ea <_free_r+0x26>
 800c354:	b003      	add	sp, #12
 800c356:	bd30      	pop	{r4, r5, pc}
 800c358:	20000444 	.word	0x20000444

0800c35c <sbrk_aligned>:
 800c35c:	b570      	push	{r4, r5, r6, lr}
 800c35e:	4e0e      	ldr	r6, [pc, #56]	; (800c398 <sbrk_aligned+0x3c>)
 800c360:	460c      	mov	r4, r1
 800c362:	6831      	ldr	r1, [r6, #0]
 800c364:	4605      	mov	r5, r0
 800c366:	b911      	cbnz	r1, 800c36e <sbrk_aligned+0x12>
 800c368:	f000 fd26 	bl	800cdb8 <_sbrk_r>
 800c36c:	6030      	str	r0, [r6, #0]
 800c36e:	4621      	mov	r1, r4
 800c370:	4628      	mov	r0, r5
 800c372:	f000 fd21 	bl	800cdb8 <_sbrk_r>
 800c376:	1c43      	adds	r3, r0, #1
 800c378:	d00a      	beq.n	800c390 <sbrk_aligned+0x34>
 800c37a:	1cc4      	adds	r4, r0, #3
 800c37c:	f024 0403 	bic.w	r4, r4, #3
 800c380:	42a0      	cmp	r0, r4
 800c382:	d007      	beq.n	800c394 <sbrk_aligned+0x38>
 800c384:	1a21      	subs	r1, r4, r0
 800c386:	4628      	mov	r0, r5
 800c388:	f000 fd16 	bl	800cdb8 <_sbrk_r>
 800c38c:	3001      	adds	r0, #1
 800c38e:	d101      	bne.n	800c394 <sbrk_aligned+0x38>
 800c390:	f04f 34ff 	mov.w	r4, #4294967295
 800c394:	4620      	mov	r0, r4
 800c396:	bd70      	pop	{r4, r5, r6, pc}
 800c398:	20000448 	.word	0x20000448

0800c39c <_malloc_r>:
 800c39c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3a0:	1ccd      	adds	r5, r1, #3
 800c3a2:	f025 0503 	bic.w	r5, r5, #3
 800c3a6:	3508      	adds	r5, #8
 800c3a8:	2d0c      	cmp	r5, #12
 800c3aa:	bf38      	it	cc
 800c3ac:	250c      	movcc	r5, #12
 800c3ae:	2d00      	cmp	r5, #0
 800c3b0:	4607      	mov	r7, r0
 800c3b2:	db01      	blt.n	800c3b8 <_malloc_r+0x1c>
 800c3b4:	42a9      	cmp	r1, r5
 800c3b6:	d905      	bls.n	800c3c4 <_malloc_r+0x28>
 800c3b8:	230c      	movs	r3, #12
 800c3ba:	603b      	str	r3, [r7, #0]
 800c3bc:	2600      	movs	r6, #0
 800c3be:	4630      	mov	r0, r6
 800c3c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3c4:	4e2e      	ldr	r6, [pc, #184]	; (800c480 <_malloc_r+0xe4>)
 800c3c6:	f001 f813 	bl	800d3f0 <__malloc_lock>
 800c3ca:	6833      	ldr	r3, [r6, #0]
 800c3cc:	461c      	mov	r4, r3
 800c3ce:	bb34      	cbnz	r4, 800c41e <_malloc_r+0x82>
 800c3d0:	4629      	mov	r1, r5
 800c3d2:	4638      	mov	r0, r7
 800c3d4:	f7ff ffc2 	bl	800c35c <sbrk_aligned>
 800c3d8:	1c43      	adds	r3, r0, #1
 800c3da:	4604      	mov	r4, r0
 800c3dc:	d14d      	bne.n	800c47a <_malloc_r+0xde>
 800c3de:	6834      	ldr	r4, [r6, #0]
 800c3e0:	4626      	mov	r6, r4
 800c3e2:	2e00      	cmp	r6, #0
 800c3e4:	d140      	bne.n	800c468 <_malloc_r+0xcc>
 800c3e6:	6823      	ldr	r3, [r4, #0]
 800c3e8:	4631      	mov	r1, r6
 800c3ea:	4638      	mov	r0, r7
 800c3ec:	eb04 0803 	add.w	r8, r4, r3
 800c3f0:	f000 fce2 	bl	800cdb8 <_sbrk_r>
 800c3f4:	4580      	cmp	r8, r0
 800c3f6:	d13a      	bne.n	800c46e <_malloc_r+0xd2>
 800c3f8:	6821      	ldr	r1, [r4, #0]
 800c3fa:	3503      	adds	r5, #3
 800c3fc:	1a6d      	subs	r5, r5, r1
 800c3fe:	f025 0503 	bic.w	r5, r5, #3
 800c402:	3508      	adds	r5, #8
 800c404:	2d0c      	cmp	r5, #12
 800c406:	bf38      	it	cc
 800c408:	250c      	movcc	r5, #12
 800c40a:	4629      	mov	r1, r5
 800c40c:	4638      	mov	r0, r7
 800c40e:	f7ff ffa5 	bl	800c35c <sbrk_aligned>
 800c412:	3001      	adds	r0, #1
 800c414:	d02b      	beq.n	800c46e <_malloc_r+0xd2>
 800c416:	6823      	ldr	r3, [r4, #0]
 800c418:	442b      	add	r3, r5
 800c41a:	6023      	str	r3, [r4, #0]
 800c41c:	e00e      	b.n	800c43c <_malloc_r+0xa0>
 800c41e:	6822      	ldr	r2, [r4, #0]
 800c420:	1b52      	subs	r2, r2, r5
 800c422:	d41e      	bmi.n	800c462 <_malloc_r+0xc6>
 800c424:	2a0b      	cmp	r2, #11
 800c426:	d916      	bls.n	800c456 <_malloc_r+0xba>
 800c428:	1961      	adds	r1, r4, r5
 800c42a:	42a3      	cmp	r3, r4
 800c42c:	6025      	str	r5, [r4, #0]
 800c42e:	bf18      	it	ne
 800c430:	6059      	strne	r1, [r3, #4]
 800c432:	6863      	ldr	r3, [r4, #4]
 800c434:	bf08      	it	eq
 800c436:	6031      	streq	r1, [r6, #0]
 800c438:	5162      	str	r2, [r4, r5]
 800c43a:	604b      	str	r3, [r1, #4]
 800c43c:	4638      	mov	r0, r7
 800c43e:	f104 060b 	add.w	r6, r4, #11
 800c442:	f000 ffdb 	bl	800d3fc <__malloc_unlock>
 800c446:	f026 0607 	bic.w	r6, r6, #7
 800c44a:	1d23      	adds	r3, r4, #4
 800c44c:	1af2      	subs	r2, r6, r3
 800c44e:	d0b6      	beq.n	800c3be <_malloc_r+0x22>
 800c450:	1b9b      	subs	r3, r3, r6
 800c452:	50a3      	str	r3, [r4, r2]
 800c454:	e7b3      	b.n	800c3be <_malloc_r+0x22>
 800c456:	6862      	ldr	r2, [r4, #4]
 800c458:	42a3      	cmp	r3, r4
 800c45a:	bf0c      	ite	eq
 800c45c:	6032      	streq	r2, [r6, #0]
 800c45e:	605a      	strne	r2, [r3, #4]
 800c460:	e7ec      	b.n	800c43c <_malloc_r+0xa0>
 800c462:	4623      	mov	r3, r4
 800c464:	6864      	ldr	r4, [r4, #4]
 800c466:	e7b2      	b.n	800c3ce <_malloc_r+0x32>
 800c468:	4634      	mov	r4, r6
 800c46a:	6876      	ldr	r6, [r6, #4]
 800c46c:	e7b9      	b.n	800c3e2 <_malloc_r+0x46>
 800c46e:	230c      	movs	r3, #12
 800c470:	603b      	str	r3, [r7, #0]
 800c472:	4638      	mov	r0, r7
 800c474:	f000 ffc2 	bl	800d3fc <__malloc_unlock>
 800c478:	e7a1      	b.n	800c3be <_malloc_r+0x22>
 800c47a:	6025      	str	r5, [r4, #0]
 800c47c:	e7de      	b.n	800c43c <_malloc_r+0xa0>
 800c47e:	bf00      	nop
 800c480:	20000444 	.word	0x20000444

0800c484 <__ssputs_r>:
 800c484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c488:	688e      	ldr	r6, [r1, #8]
 800c48a:	429e      	cmp	r6, r3
 800c48c:	4682      	mov	sl, r0
 800c48e:	460c      	mov	r4, r1
 800c490:	4690      	mov	r8, r2
 800c492:	461f      	mov	r7, r3
 800c494:	d838      	bhi.n	800c508 <__ssputs_r+0x84>
 800c496:	898a      	ldrh	r2, [r1, #12]
 800c498:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c49c:	d032      	beq.n	800c504 <__ssputs_r+0x80>
 800c49e:	6825      	ldr	r5, [r4, #0]
 800c4a0:	6909      	ldr	r1, [r1, #16]
 800c4a2:	eba5 0901 	sub.w	r9, r5, r1
 800c4a6:	6965      	ldr	r5, [r4, #20]
 800c4a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c4ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c4b0:	3301      	adds	r3, #1
 800c4b2:	444b      	add	r3, r9
 800c4b4:	106d      	asrs	r5, r5, #1
 800c4b6:	429d      	cmp	r5, r3
 800c4b8:	bf38      	it	cc
 800c4ba:	461d      	movcc	r5, r3
 800c4bc:	0553      	lsls	r3, r2, #21
 800c4be:	d531      	bpl.n	800c524 <__ssputs_r+0xa0>
 800c4c0:	4629      	mov	r1, r5
 800c4c2:	f7ff ff6b 	bl	800c39c <_malloc_r>
 800c4c6:	4606      	mov	r6, r0
 800c4c8:	b950      	cbnz	r0, 800c4e0 <__ssputs_r+0x5c>
 800c4ca:	230c      	movs	r3, #12
 800c4cc:	f8ca 3000 	str.w	r3, [sl]
 800c4d0:	89a3      	ldrh	r3, [r4, #12]
 800c4d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4d6:	81a3      	strh	r3, [r4, #12]
 800c4d8:	f04f 30ff 	mov.w	r0, #4294967295
 800c4dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4e0:	6921      	ldr	r1, [r4, #16]
 800c4e2:	464a      	mov	r2, r9
 800c4e4:	f7fc fa02 	bl	80088ec <memcpy>
 800c4e8:	89a3      	ldrh	r3, [r4, #12]
 800c4ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c4ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4f2:	81a3      	strh	r3, [r4, #12]
 800c4f4:	6126      	str	r6, [r4, #16]
 800c4f6:	6165      	str	r5, [r4, #20]
 800c4f8:	444e      	add	r6, r9
 800c4fa:	eba5 0509 	sub.w	r5, r5, r9
 800c4fe:	6026      	str	r6, [r4, #0]
 800c500:	60a5      	str	r5, [r4, #8]
 800c502:	463e      	mov	r6, r7
 800c504:	42be      	cmp	r6, r7
 800c506:	d900      	bls.n	800c50a <__ssputs_r+0x86>
 800c508:	463e      	mov	r6, r7
 800c50a:	6820      	ldr	r0, [r4, #0]
 800c50c:	4632      	mov	r2, r6
 800c50e:	4641      	mov	r1, r8
 800c510:	f000 ff54 	bl	800d3bc <memmove>
 800c514:	68a3      	ldr	r3, [r4, #8]
 800c516:	1b9b      	subs	r3, r3, r6
 800c518:	60a3      	str	r3, [r4, #8]
 800c51a:	6823      	ldr	r3, [r4, #0]
 800c51c:	4433      	add	r3, r6
 800c51e:	6023      	str	r3, [r4, #0]
 800c520:	2000      	movs	r0, #0
 800c522:	e7db      	b.n	800c4dc <__ssputs_r+0x58>
 800c524:	462a      	mov	r2, r5
 800c526:	f000 ff6f 	bl	800d408 <_realloc_r>
 800c52a:	4606      	mov	r6, r0
 800c52c:	2800      	cmp	r0, #0
 800c52e:	d1e1      	bne.n	800c4f4 <__ssputs_r+0x70>
 800c530:	6921      	ldr	r1, [r4, #16]
 800c532:	4650      	mov	r0, sl
 800c534:	f7ff fec6 	bl	800c2c4 <_free_r>
 800c538:	e7c7      	b.n	800c4ca <__ssputs_r+0x46>
	...

0800c53c <_svfiprintf_r>:
 800c53c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c540:	4698      	mov	r8, r3
 800c542:	898b      	ldrh	r3, [r1, #12]
 800c544:	061b      	lsls	r3, r3, #24
 800c546:	b09d      	sub	sp, #116	; 0x74
 800c548:	4607      	mov	r7, r0
 800c54a:	460d      	mov	r5, r1
 800c54c:	4614      	mov	r4, r2
 800c54e:	d50e      	bpl.n	800c56e <_svfiprintf_r+0x32>
 800c550:	690b      	ldr	r3, [r1, #16]
 800c552:	b963      	cbnz	r3, 800c56e <_svfiprintf_r+0x32>
 800c554:	2140      	movs	r1, #64	; 0x40
 800c556:	f7ff ff21 	bl	800c39c <_malloc_r>
 800c55a:	6028      	str	r0, [r5, #0]
 800c55c:	6128      	str	r0, [r5, #16]
 800c55e:	b920      	cbnz	r0, 800c56a <_svfiprintf_r+0x2e>
 800c560:	230c      	movs	r3, #12
 800c562:	603b      	str	r3, [r7, #0]
 800c564:	f04f 30ff 	mov.w	r0, #4294967295
 800c568:	e0d1      	b.n	800c70e <_svfiprintf_r+0x1d2>
 800c56a:	2340      	movs	r3, #64	; 0x40
 800c56c:	616b      	str	r3, [r5, #20]
 800c56e:	2300      	movs	r3, #0
 800c570:	9309      	str	r3, [sp, #36]	; 0x24
 800c572:	2320      	movs	r3, #32
 800c574:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c578:	f8cd 800c 	str.w	r8, [sp, #12]
 800c57c:	2330      	movs	r3, #48	; 0x30
 800c57e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c728 <_svfiprintf_r+0x1ec>
 800c582:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c586:	f04f 0901 	mov.w	r9, #1
 800c58a:	4623      	mov	r3, r4
 800c58c:	469a      	mov	sl, r3
 800c58e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c592:	b10a      	cbz	r2, 800c598 <_svfiprintf_r+0x5c>
 800c594:	2a25      	cmp	r2, #37	; 0x25
 800c596:	d1f9      	bne.n	800c58c <_svfiprintf_r+0x50>
 800c598:	ebba 0b04 	subs.w	fp, sl, r4
 800c59c:	d00b      	beq.n	800c5b6 <_svfiprintf_r+0x7a>
 800c59e:	465b      	mov	r3, fp
 800c5a0:	4622      	mov	r2, r4
 800c5a2:	4629      	mov	r1, r5
 800c5a4:	4638      	mov	r0, r7
 800c5a6:	f7ff ff6d 	bl	800c484 <__ssputs_r>
 800c5aa:	3001      	adds	r0, #1
 800c5ac:	f000 80aa 	beq.w	800c704 <_svfiprintf_r+0x1c8>
 800c5b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c5b2:	445a      	add	r2, fp
 800c5b4:	9209      	str	r2, [sp, #36]	; 0x24
 800c5b6:	f89a 3000 	ldrb.w	r3, [sl]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	f000 80a2 	beq.w	800c704 <_svfiprintf_r+0x1c8>
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	f04f 32ff 	mov.w	r2, #4294967295
 800c5c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c5ca:	f10a 0a01 	add.w	sl, sl, #1
 800c5ce:	9304      	str	r3, [sp, #16]
 800c5d0:	9307      	str	r3, [sp, #28]
 800c5d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c5d6:	931a      	str	r3, [sp, #104]	; 0x68
 800c5d8:	4654      	mov	r4, sl
 800c5da:	2205      	movs	r2, #5
 800c5dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5e0:	4851      	ldr	r0, [pc, #324]	; (800c728 <_svfiprintf_r+0x1ec>)
 800c5e2:	f7f3 fe2d 	bl	8000240 <memchr>
 800c5e6:	9a04      	ldr	r2, [sp, #16]
 800c5e8:	b9d8      	cbnz	r0, 800c622 <_svfiprintf_r+0xe6>
 800c5ea:	06d0      	lsls	r0, r2, #27
 800c5ec:	bf44      	itt	mi
 800c5ee:	2320      	movmi	r3, #32
 800c5f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5f4:	0711      	lsls	r1, r2, #28
 800c5f6:	bf44      	itt	mi
 800c5f8:	232b      	movmi	r3, #43	; 0x2b
 800c5fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5fe:	f89a 3000 	ldrb.w	r3, [sl]
 800c602:	2b2a      	cmp	r3, #42	; 0x2a
 800c604:	d015      	beq.n	800c632 <_svfiprintf_r+0xf6>
 800c606:	9a07      	ldr	r2, [sp, #28]
 800c608:	4654      	mov	r4, sl
 800c60a:	2000      	movs	r0, #0
 800c60c:	f04f 0c0a 	mov.w	ip, #10
 800c610:	4621      	mov	r1, r4
 800c612:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c616:	3b30      	subs	r3, #48	; 0x30
 800c618:	2b09      	cmp	r3, #9
 800c61a:	d94e      	bls.n	800c6ba <_svfiprintf_r+0x17e>
 800c61c:	b1b0      	cbz	r0, 800c64c <_svfiprintf_r+0x110>
 800c61e:	9207      	str	r2, [sp, #28]
 800c620:	e014      	b.n	800c64c <_svfiprintf_r+0x110>
 800c622:	eba0 0308 	sub.w	r3, r0, r8
 800c626:	fa09 f303 	lsl.w	r3, r9, r3
 800c62a:	4313      	orrs	r3, r2
 800c62c:	9304      	str	r3, [sp, #16]
 800c62e:	46a2      	mov	sl, r4
 800c630:	e7d2      	b.n	800c5d8 <_svfiprintf_r+0x9c>
 800c632:	9b03      	ldr	r3, [sp, #12]
 800c634:	1d19      	adds	r1, r3, #4
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	9103      	str	r1, [sp, #12]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	bfbb      	ittet	lt
 800c63e:	425b      	neglt	r3, r3
 800c640:	f042 0202 	orrlt.w	r2, r2, #2
 800c644:	9307      	strge	r3, [sp, #28]
 800c646:	9307      	strlt	r3, [sp, #28]
 800c648:	bfb8      	it	lt
 800c64a:	9204      	strlt	r2, [sp, #16]
 800c64c:	7823      	ldrb	r3, [r4, #0]
 800c64e:	2b2e      	cmp	r3, #46	; 0x2e
 800c650:	d10c      	bne.n	800c66c <_svfiprintf_r+0x130>
 800c652:	7863      	ldrb	r3, [r4, #1]
 800c654:	2b2a      	cmp	r3, #42	; 0x2a
 800c656:	d135      	bne.n	800c6c4 <_svfiprintf_r+0x188>
 800c658:	9b03      	ldr	r3, [sp, #12]
 800c65a:	1d1a      	adds	r2, r3, #4
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	9203      	str	r2, [sp, #12]
 800c660:	2b00      	cmp	r3, #0
 800c662:	bfb8      	it	lt
 800c664:	f04f 33ff 	movlt.w	r3, #4294967295
 800c668:	3402      	adds	r4, #2
 800c66a:	9305      	str	r3, [sp, #20]
 800c66c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c738 <_svfiprintf_r+0x1fc>
 800c670:	7821      	ldrb	r1, [r4, #0]
 800c672:	2203      	movs	r2, #3
 800c674:	4650      	mov	r0, sl
 800c676:	f7f3 fde3 	bl	8000240 <memchr>
 800c67a:	b140      	cbz	r0, 800c68e <_svfiprintf_r+0x152>
 800c67c:	2340      	movs	r3, #64	; 0x40
 800c67e:	eba0 000a 	sub.w	r0, r0, sl
 800c682:	fa03 f000 	lsl.w	r0, r3, r0
 800c686:	9b04      	ldr	r3, [sp, #16]
 800c688:	4303      	orrs	r3, r0
 800c68a:	3401      	adds	r4, #1
 800c68c:	9304      	str	r3, [sp, #16]
 800c68e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c692:	4826      	ldr	r0, [pc, #152]	; (800c72c <_svfiprintf_r+0x1f0>)
 800c694:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c698:	2206      	movs	r2, #6
 800c69a:	f7f3 fdd1 	bl	8000240 <memchr>
 800c69e:	2800      	cmp	r0, #0
 800c6a0:	d038      	beq.n	800c714 <_svfiprintf_r+0x1d8>
 800c6a2:	4b23      	ldr	r3, [pc, #140]	; (800c730 <_svfiprintf_r+0x1f4>)
 800c6a4:	bb1b      	cbnz	r3, 800c6ee <_svfiprintf_r+0x1b2>
 800c6a6:	9b03      	ldr	r3, [sp, #12]
 800c6a8:	3307      	adds	r3, #7
 800c6aa:	f023 0307 	bic.w	r3, r3, #7
 800c6ae:	3308      	adds	r3, #8
 800c6b0:	9303      	str	r3, [sp, #12]
 800c6b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6b4:	4433      	add	r3, r6
 800c6b6:	9309      	str	r3, [sp, #36]	; 0x24
 800c6b8:	e767      	b.n	800c58a <_svfiprintf_r+0x4e>
 800c6ba:	fb0c 3202 	mla	r2, ip, r2, r3
 800c6be:	460c      	mov	r4, r1
 800c6c0:	2001      	movs	r0, #1
 800c6c2:	e7a5      	b.n	800c610 <_svfiprintf_r+0xd4>
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	3401      	adds	r4, #1
 800c6c8:	9305      	str	r3, [sp, #20]
 800c6ca:	4619      	mov	r1, r3
 800c6cc:	f04f 0c0a 	mov.w	ip, #10
 800c6d0:	4620      	mov	r0, r4
 800c6d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c6d6:	3a30      	subs	r2, #48	; 0x30
 800c6d8:	2a09      	cmp	r2, #9
 800c6da:	d903      	bls.n	800c6e4 <_svfiprintf_r+0x1a8>
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d0c5      	beq.n	800c66c <_svfiprintf_r+0x130>
 800c6e0:	9105      	str	r1, [sp, #20]
 800c6e2:	e7c3      	b.n	800c66c <_svfiprintf_r+0x130>
 800c6e4:	fb0c 2101 	mla	r1, ip, r1, r2
 800c6e8:	4604      	mov	r4, r0
 800c6ea:	2301      	movs	r3, #1
 800c6ec:	e7f0      	b.n	800c6d0 <_svfiprintf_r+0x194>
 800c6ee:	ab03      	add	r3, sp, #12
 800c6f0:	9300      	str	r3, [sp, #0]
 800c6f2:	462a      	mov	r2, r5
 800c6f4:	4b0f      	ldr	r3, [pc, #60]	; (800c734 <_svfiprintf_r+0x1f8>)
 800c6f6:	a904      	add	r1, sp, #16
 800c6f8:	4638      	mov	r0, r7
 800c6fa:	f7fc f9ad 	bl	8008a58 <_printf_float>
 800c6fe:	1c42      	adds	r2, r0, #1
 800c700:	4606      	mov	r6, r0
 800c702:	d1d6      	bne.n	800c6b2 <_svfiprintf_r+0x176>
 800c704:	89ab      	ldrh	r3, [r5, #12]
 800c706:	065b      	lsls	r3, r3, #25
 800c708:	f53f af2c 	bmi.w	800c564 <_svfiprintf_r+0x28>
 800c70c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c70e:	b01d      	add	sp, #116	; 0x74
 800c710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c714:	ab03      	add	r3, sp, #12
 800c716:	9300      	str	r3, [sp, #0]
 800c718:	462a      	mov	r2, r5
 800c71a:	4b06      	ldr	r3, [pc, #24]	; (800c734 <_svfiprintf_r+0x1f8>)
 800c71c:	a904      	add	r1, sp, #16
 800c71e:	4638      	mov	r0, r7
 800c720:	f7fc fc3e 	bl	8008fa0 <_printf_i>
 800c724:	e7eb      	b.n	800c6fe <_svfiprintf_r+0x1c2>
 800c726:	bf00      	nop
 800c728:	0800e0c4 	.word	0x0800e0c4
 800c72c:	0800e0ce 	.word	0x0800e0ce
 800c730:	08008a59 	.word	0x08008a59
 800c734:	0800c485 	.word	0x0800c485
 800c738:	0800e0ca 	.word	0x0800e0ca

0800c73c <_sungetc_r>:
 800c73c:	b538      	push	{r3, r4, r5, lr}
 800c73e:	1c4b      	adds	r3, r1, #1
 800c740:	4614      	mov	r4, r2
 800c742:	d103      	bne.n	800c74c <_sungetc_r+0x10>
 800c744:	f04f 35ff 	mov.w	r5, #4294967295
 800c748:	4628      	mov	r0, r5
 800c74a:	bd38      	pop	{r3, r4, r5, pc}
 800c74c:	8993      	ldrh	r3, [r2, #12]
 800c74e:	f023 0320 	bic.w	r3, r3, #32
 800c752:	8193      	strh	r3, [r2, #12]
 800c754:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c756:	6852      	ldr	r2, [r2, #4]
 800c758:	b2cd      	uxtb	r5, r1
 800c75a:	b18b      	cbz	r3, 800c780 <_sungetc_r+0x44>
 800c75c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c75e:	4293      	cmp	r3, r2
 800c760:	dd08      	ble.n	800c774 <_sungetc_r+0x38>
 800c762:	6823      	ldr	r3, [r4, #0]
 800c764:	1e5a      	subs	r2, r3, #1
 800c766:	6022      	str	r2, [r4, #0]
 800c768:	f803 5c01 	strb.w	r5, [r3, #-1]
 800c76c:	6863      	ldr	r3, [r4, #4]
 800c76e:	3301      	adds	r3, #1
 800c770:	6063      	str	r3, [r4, #4]
 800c772:	e7e9      	b.n	800c748 <_sungetc_r+0xc>
 800c774:	4621      	mov	r1, r4
 800c776:	f000 fbef 	bl	800cf58 <__submore>
 800c77a:	2800      	cmp	r0, #0
 800c77c:	d0f1      	beq.n	800c762 <_sungetc_r+0x26>
 800c77e:	e7e1      	b.n	800c744 <_sungetc_r+0x8>
 800c780:	6921      	ldr	r1, [r4, #16]
 800c782:	6823      	ldr	r3, [r4, #0]
 800c784:	b151      	cbz	r1, 800c79c <_sungetc_r+0x60>
 800c786:	4299      	cmp	r1, r3
 800c788:	d208      	bcs.n	800c79c <_sungetc_r+0x60>
 800c78a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800c78e:	42a9      	cmp	r1, r5
 800c790:	d104      	bne.n	800c79c <_sungetc_r+0x60>
 800c792:	3b01      	subs	r3, #1
 800c794:	3201      	adds	r2, #1
 800c796:	6023      	str	r3, [r4, #0]
 800c798:	6062      	str	r2, [r4, #4]
 800c79a:	e7d5      	b.n	800c748 <_sungetc_r+0xc>
 800c79c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800c7a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c7a4:	6363      	str	r3, [r4, #52]	; 0x34
 800c7a6:	2303      	movs	r3, #3
 800c7a8:	63a3      	str	r3, [r4, #56]	; 0x38
 800c7aa:	4623      	mov	r3, r4
 800c7ac:	f803 5f46 	strb.w	r5, [r3, #70]!
 800c7b0:	6023      	str	r3, [r4, #0]
 800c7b2:	2301      	movs	r3, #1
 800c7b4:	e7dc      	b.n	800c770 <_sungetc_r+0x34>

0800c7b6 <__ssrefill_r>:
 800c7b6:	b510      	push	{r4, lr}
 800c7b8:	460c      	mov	r4, r1
 800c7ba:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c7bc:	b169      	cbz	r1, 800c7da <__ssrefill_r+0x24>
 800c7be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c7c2:	4299      	cmp	r1, r3
 800c7c4:	d001      	beq.n	800c7ca <__ssrefill_r+0x14>
 800c7c6:	f7ff fd7d 	bl	800c2c4 <_free_r>
 800c7ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c7cc:	6063      	str	r3, [r4, #4]
 800c7ce:	2000      	movs	r0, #0
 800c7d0:	6360      	str	r0, [r4, #52]	; 0x34
 800c7d2:	b113      	cbz	r3, 800c7da <__ssrefill_r+0x24>
 800c7d4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c7d6:	6023      	str	r3, [r4, #0]
 800c7d8:	bd10      	pop	{r4, pc}
 800c7da:	6923      	ldr	r3, [r4, #16]
 800c7dc:	6023      	str	r3, [r4, #0]
 800c7de:	2300      	movs	r3, #0
 800c7e0:	6063      	str	r3, [r4, #4]
 800c7e2:	89a3      	ldrh	r3, [r4, #12]
 800c7e4:	f043 0320 	orr.w	r3, r3, #32
 800c7e8:	81a3      	strh	r3, [r4, #12]
 800c7ea:	f04f 30ff 	mov.w	r0, #4294967295
 800c7ee:	e7f3      	b.n	800c7d8 <__ssrefill_r+0x22>

0800c7f0 <__ssvfiscanf_r>:
 800c7f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7f4:	460c      	mov	r4, r1
 800c7f6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800c7fa:	2100      	movs	r1, #0
 800c7fc:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800c800:	49a6      	ldr	r1, [pc, #664]	; (800ca9c <__ssvfiscanf_r+0x2ac>)
 800c802:	91a0      	str	r1, [sp, #640]	; 0x280
 800c804:	f10d 0804 	add.w	r8, sp, #4
 800c808:	49a5      	ldr	r1, [pc, #660]	; (800caa0 <__ssvfiscanf_r+0x2b0>)
 800c80a:	4fa6      	ldr	r7, [pc, #664]	; (800caa4 <__ssvfiscanf_r+0x2b4>)
 800c80c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800caa8 <__ssvfiscanf_r+0x2b8>
 800c810:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800c814:	4606      	mov	r6, r0
 800c816:	91a1      	str	r1, [sp, #644]	; 0x284
 800c818:	9300      	str	r3, [sp, #0]
 800c81a:	7813      	ldrb	r3, [r2, #0]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	f000 815a 	beq.w	800cad6 <__ssvfiscanf_r+0x2e6>
 800c822:	5dd9      	ldrb	r1, [r3, r7]
 800c824:	f011 0108 	ands.w	r1, r1, #8
 800c828:	f102 0501 	add.w	r5, r2, #1
 800c82c:	d019      	beq.n	800c862 <__ssvfiscanf_r+0x72>
 800c82e:	6863      	ldr	r3, [r4, #4]
 800c830:	2b00      	cmp	r3, #0
 800c832:	dd0f      	ble.n	800c854 <__ssvfiscanf_r+0x64>
 800c834:	6823      	ldr	r3, [r4, #0]
 800c836:	781a      	ldrb	r2, [r3, #0]
 800c838:	5cba      	ldrb	r2, [r7, r2]
 800c83a:	0712      	lsls	r2, r2, #28
 800c83c:	d401      	bmi.n	800c842 <__ssvfiscanf_r+0x52>
 800c83e:	462a      	mov	r2, r5
 800c840:	e7eb      	b.n	800c81a <__ssvfiscanf_r+0x2a>
 800c842:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c844:	3201      	adds	r2, #1
 800c846:	9245      	str	r2, [sp, #276]	; 0x114
 800c848:	6862      	ldr	r2, [r4, #4]
 800c84a:	3301      	adds	r3, #1
 800c84c:	3a01      	subs	r2, #1
 800c84e:	6062      	str	r2, [r4, #4]
 800c850:	6023      	str	r3, [r4, #0]
 800c852:	e7ec      	b.n	800c82e <__ssvfiscanf_r+0x3e>
 800c854:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c856:	4621      	mov	r1, r4
 800c858:	4630      	mov	r0, r6
 800c85a:	4798      	blx	r3
 800c85c:	2800      	cmp	r0, #0
 800c85e:	d0e9      	beq.n	800c834 <__ssvfiscanf_r+0x44>
 800c860:	e7ed      	b.n	800c83e <__ssvfiscanf_r+0x4e>
 800c862:	2b25      	cmp	r3, #37	; 0x25
 800c864:	d012      	beq.n	800c88c <__ssvfiscanf_r+0x9c>
 800c866:	469a      	mov	sl, r3
 800c868:	6863      	ldr	r3, [r4, #4]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	f340 8091 	ble.w	800c992 <__ssvfiscanf_r+0x1a2>
 800c870:	6822      	ldr	r2, [r4, #0]
 800c872:	7813      	ldrb	r3, [r2, #0]
 800c874:	4553      	cmp	r3, sl
 800c876:	f040 812e 	bne.w	800cad6 <__ssvfiscanf_r+0x2e6>
 800c87a:	6863      	ldr	r3, [r4, #4]
 800c87c:	3b01      	subs	r3, #1
 800c87e:	6063      	str	r3, [r4, #4]
 800c880:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800c882:	3201      	adds	r2, #1
 800c884:	3301      	adds	r3, #1
 800c886:	6022      	str	r2, [r4, #0]
 800c888:	9345      	str	r3, [sp, #276]	; 0x114
 800c88a:	e7d8      	b.n	800c83e <__ssvfiscanf_r+0x4e>
 800c88c:	9141      	str	r1, [sp, #260]	; 0x104
 800c88e:	9143      	str	r1, [sp, #268]	; 0x10c
 800c890:	7853      	ldrb	r3, [r2, #1]
 800c892:	2b2a      	cmp	r3, #42	; 0x2a
 800c894:	bf02      	ittt	eq
 800c896:	2310      	moveq	r3, #16
 800c898:	1c95      	addeq	r5, r2, #2
 800c89a:	9341      	streq	r3, [sp, #260]	; 0x104
 800c89c:	220a      	movs	r2, #10
 800c89e:	46aa      	mov	sl, r5
 800c8a0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800c8a4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800c8a8:	2b09      	cmp	r3, #9
 800c8aa:	d91d      	bls.n	800c8e8 <__ssvfiscanf_r+0xf8>
 800c8ac:	487e      	ldr	r0, [pc, #504]	; (800caa8 <__ssvfiscanf_r+0x2b8>)
 800c8ae:	2203      	movs	r2, #3
 800c8b0:	f7f3 fcc6 	bl	8000240 <memchr>
 800c8b4:	b140      	cbz	r0, 800c8c8 <__ssvfiscanf_r+0xd8>
 800c8b6:	2301      	movs	r3, #1
 800c8b8:	eba0 0009 	sub.w	r0, r0, r9
 800c8bc:	fa03 f000 	lsl.w	r0, r3, r0
 800c8c0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c8c2:	4318      	orrs	r0, r3
 800c8c4:	9041      	str	r0, [sp, #260]	; 0x104
 800c8c6:	4655      	mov	r5, sl
 800c8c8:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c8cc:	2b78      	cmp	r3, #120	; 0x78
 800c8ce:	d806      	bhi.n	800c8de <__ssvfiscanf_r+0xee>
 800c8d0:	2b57      	cmp	r3, #87	; 0x57
 800c8d2:	d810      	bhi.n	800c8f6 <__ssvfiscanf_r+0x106>
 800c8d4:	2b25      	cmp	r3, #37	; 0x25
 800c8d6:	d0c6      	beq.n	800c866 <__ssvfiscanf_r+0x76>
 800c8d8:	d856      	bhi.n	800c988 <__ssvfiscanf_r+0x198>
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d064      	beq.n	800c9a8 <__ssvfiscanf_r+0x1b8>
 800c8de:	2303      	movs	r3, #3
 800c8e0:	9347      	str	r3, [sp, #284]	; 0x11c
 800c8e2:	230a      	movs	r3, #10
 800c8e4:	9342      	str	r3, [sp, #264]	; 0x108
 800c8e6:	e071      	b.n	800c9cc <__ssvfiscanf_r+0x1dc>
 800c8e8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800c8ea:	fb02 1103 	mla	r1, r2, r3, r1
 800c8ee:	3930      	subs	r1, #48	; 0x30
 800c8f0:	9143      	str	r1, [sp, #268]	; 0x10c
 800c8f2:	4655      	mov	r5, sl
 800c8f4:	e7d3      	b.n	800c89e <__ssvfiscanf_r+0xae>
 800c8f6:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800c8fa:	2a20      	cmp	r2, #32
 800c8fc:	d8ef      	bhi.n	800c8de <__ssvfiscanf_r+0xee>
 800c8fe:	a101      	add	r1, pc, #4	; (adr r1, 800c904 <__ssvfiscanf_r+0x114>)
 800c900:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c904:	0800c9b7 	.word	0x0800c9b7
 800c908:	0800c8df 	.word	0x0800c8df
 800c90c:	0800c8df 	.word	0x0800c8df
 800c910:	0800ca15 	.word	0x0800ca15
 800c914:	0800c8df 	.word	0x0800c8df
 800c918:	0800c8df 	.word	0x0800c8df
 800c91c:	0800c8df 	.word	0x0800c8df
 800c920:	0800c8df 	.word	0x0800c8df
 800c924:	0800c8df 	.word	0x0800c8df
 800c928:	0800c8df 	.word	0x0800c8df
 800c92c:	0800c8df 	.word	0x0800c8df
 800c930:	0800ca2b 	.word	0x0800ca2b
 800c934:	0800ca01 	.word	0x0800ca01
 800c938:	0800c98f 	.word	0x0800c98f
 800c93c:	0800c98f 	.word	0x0800c98f
 800c940:	0800c98f 	.word	0x0800c98f
 800c944:	0800c8df 	.word	0x0800c8df
 800c948:	0800ca05 	.word	0x0800ca05
 800c94c:	0800c8df 	.word	0x0800c8df
 800c950:	0800c8df 	.word	0x0800c8df
 800c954:	0800c8df 	.word	0x0800c8df
 800c958:	0800c8df 	.word	0x0800c8df
 800c95c:	0800ca3b 	.word	0x0800ca3b
 800c960:	0800ca0d 	.word	0x0800ca0d
 800c964:	0800c9af 	.word	0x0800c9af
 800c968:	0800c8df 	.word	0x0800c8df
 800c96c:	0800c8df 	.word	0x0800c8df
 800c970:	0800ca37 	.word	0x0800ca37
 800c974:	0800c8df 	.word	0x0800c8df
 800c978:	0800ca01 	.word	0x0800ca01
 800c97c:	0800c8df 	.word	0x0800c8df
 800c980:	0800c8df 	.word	0x0800c8df
 800c984:	0800c9b7 	.word	0x0800c9b7
 800c988:	3b45      	subs	r3, #69	; 0x45
 800c98a:	2b02      	cmp	r3, #2
 800c98c:	d8a7      	bhi.n	800c8de <__ssvfiscanf_r+0xee>
 800c98e:	2305      	movs	r3, #5
 800c990:	e01b      	b.n	800c9ca <__ssvfiscanf_r+0x1da>
 800c992:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c994:	4621      	mov	r1, r4
 800c996:	4630      	mov	r0, r6
 800c998:	4798      	blx	r3
 800c99a:	2800      	cmp	r0, #0
 800c99c:	f43f af68 	beq.w	800c870 <__ssvfiscanf_r+0x80>
 800c9a0:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c9a2:	2800      	cmp	r0, #0
 800c9a4:	f040 808d 	bne.w	800cac2 <__ssvfiscanf_r+0x2d2>
 800c9a8:	f04f 30ff 	mov.w	r0, #4294967295
 800c9ac:	e08f      	b.n	800cace <__ssvfiscanf_r+0x2de>
 800c9ae:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c9b0:	f042 0220 	orr.w	r2, r2, #32
 800c9b4:	9241      	str	r2, [sp, #260]	; 0x104
 800c9b6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c9b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c9bc:	9241      	str	r2, [sp, #260]	; 0x104
 800c9be:	2210      	movs	r2, #16
 800c9c0:	2b6f      	cmp	r3, #111	; 0x6f
 800c9c2:	9242      	str	r2, [sp, #264]	; 0x108
 800c9c4:	bf34      	ite	cc
 800c9c6:	2303      	movcc	r3, #3
 800c9c8:	2304      	movcs	r3, #4
 800c9ca:	9347      	str	r3, [sp, #284]	; 0x11c
 800c9cc:	6863      	ldr	r3, [r4, #4]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	dd42      	ble.n	800ca58 <__ssvfiscanf_r+0x268>
 800c9d2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c9d4:	0659      	lsls	r1, r3, #25
 800c9d6:	d404      	bmi.n	800c9e2 <__ssvfiscanf_r+0x1f2>
 800c9d8:	6823      	ldr	r3, [r4, #0]
 800c9da:	781a      	ldrb	r2, [r3, #0]
 800c9dc:	5cba      	ldrb	r2, [r7, r2]
 800c9de:	0712      	lsls	r2, r2, #28
 800c9e0:	d441      	bmi.n	800ca66 <__ssvfiscanf_r+0x276>
 800c9e2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800c9e4:	2b02      	cmp	r3, #2
 800c9e6:	dc50      	bgt.n	800ca8a <__ssvfiscanf_r+0x29a>
 800c9e8:	466b      	mov	r3, sp
 800c9ea:	4622      	mov	r2, r4
 800c9ec:	a941      	add	r1, sp, #260	; 0x104
 800c9ee:	4630      	mov	r0, r6
 800c9f0:	f000 f876 	bl	800cae0 <_scanf_chars>
 800c9f4:	2801      	cmp	r0, #1
 800c9f6:	d06e      	beq.n	800cad6 <__ssvfiscanf_r+0x2e6>
 800c9f8:	2802      	cmp	r0, #2
 800c9fa:	f47f af20 	bne.w	800c83e <__ssvfiscanf_r+0x4e>
 800c9fe:	e7cf      	b.n	800c9a0 <__ssvfiscanf_r+0x1b0>
 800ca00:	220a      	movs	r2, #10
 800ca02:	e7dd      	b.n	800c9c0 <__ssvfiscanf_r+0x1d0>
 800ca04:	2300      	movs	r3, #0
 800ca06:	9342      	str	r3, [sp, #264]	; 0x108
 800ca08:	2303      	movs	r3, #3
 800ca0a:	e7de      	b.n	800c9ca <__ssvfiscanf_r+0x1da>
 800ca0c:	2308      	movs	r3, #8
 800ca0e:	9342      	str	r3, [sp, #264]	; 0x108
 800ca10:	2304      	movs	r3, #4
 800ca12:	e7da      	b.n	800c9ca <__ssvfiscanf_r+0x1da>
 800ca14:	4629      	mov	r1, r5
 800ca16:	4640      	mov	r0, r8
 800ca18:	f000 f9de 	bl	800cdd8 <__sccl>
 800ca1c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ca1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca22:	9341      	str	r3, [sp, #260]	; 0x104
 800ca24:	4605      	mov	r5, r0
 800ca26:	2301      	movs	r3, #1
 800ca28:	e7cf      	b.n	800c9ca <__ssvfiscanf_r+0x1da>
 800ca2a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ca2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca30:	9341      	str	r3, [sp, #260]	; 0x104
 800ca32:	2300      	movs	r3, #0
 800ca34:	e7c9      	b.n	800c9ca <__ssvfiscanf_r+0x1da>
 800ca36:	2302      	movs	r3, #2
 800ca38:	e7c7      	b.n	800c9ca <__ssvfiscanf_r+0x1da>
 800ca3a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800ca3c:	06c3      	lsls	r3, r0, #27
 800ca3e:	f53f aefe 	bmi.w	800c83e <__ssvfiscanf_r+0x4e>
 800ca42:	9b00      	ldr	r3, [sp, #0]
 800ca44:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ca46:	1d19      	adds	r1, r3, #4
 800ca48:	9100      	str	r1, [sp, #0]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	f010 0f01 	tst.w	r0, #1
 800ca50:	bf14      	ite	ne
 800ca52:	801a      	strhne	r2, [r3, #0]
 800ca54:	601a      	streq	r2, [r3, #0]
 800ca56:	e6f2      	b.n	800c83e <__ssvfiscanf_r+0x4e>
 800ca58:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ca5a:	4621      	mov	r1, r4
 800ca5c:	4630      	mov	r0, r6
 800ca5e:	4798      	blx	r3
 800ca60:	2800      	cmp	r0, #0
 800ca62:	d0b6      	beq.n	800c9d2 <__ssvfiscanf_r+0x1e2>
 800ca64:	e79c      	b.n	800c9a0 <__ssvfiscanf_r+0x1b0>
 800ca66:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ca68:	3201      	adds	r2, #1
 800ca6a:	9245      	str	r2, [sp, #276]	; 0x114
 800ca6c:	6862      	ldr	r2, [r4, #4]
 800ca6e:	3a01      	subs	r2, #1
 800ca70:	2a00      	cmp	r2, #0
 800ca72:	6062      	str	r2, [r4, #4]
 800ca74:	dd02      	ble.n	800ca7c <__ssvfiscanf_r+0x28c>
 800ca76:	3301      	adds	r3, #1
 800ca78:	6023      	str	r3, [r4, #0]
 800ca7a:	e7ad      	b.n	800c9d8 <__ssvfiscanf_r+0x1e8>
 800ca7c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ca7e:	4621      	mov	r1, r4
 800ca80:	4630      	mov	r0, r6
 800ca82:	4798      	blx	r3
 800ca84:	2800      	cmp	r0, #0
 800ca86:	d0a7      	beq.n	800c9d8 <__ssvfiscanf_r+0x1e8>
 800ca88:	e78a      	b.n	800c9a0 <__ssvfiscanf_r+0x1b0>
 800ca8a:	2b04      	cmp	r3, #4
 800ca8c:	dc0e      	bgt.n	800caac <__ssvfiscanf_r+0x2bc>
 800ca8e:	466b      	mov	r3, sp
 800ca90:	4622      	mov	r2, r4
 800ca92:	a941      	add	r1, sp, #260	; 0x104
 800ca94:	4630      	mov	r0, r6
 800ca96:	f000 f87d 	bl	800cb94 <_scanf_i>
 800ca9a:	e7ab      	b.n	800c9f4 <__ssvfiscanf_r+0x204>
 800ca9c:	0800c73d 	.word	0x0800c73d
 800caa0:	0800c7b7 	.word	0x0800c7b7
 800caa4:	0800dd61 	.word	0x0800dd61
 800caa8:	0800e0ca 	.word	0x0800e0ca
 800caac:	4b0b      	ldr	r3, [pc, #44]	; (800cadc <__ssvfiscanf_r+0x2ec>)
 800caae:	2b00      	cmp	r3, #0
 800cab0:	f43f aec5 	beq.w	800c83e <__ssvfiscanf_r+0x4e>
 800cab4:	466b      	mov	r3, sp
 800cab6:	4622      	mov	r2, r4
 800cab8:	a941      	add	r1, sp, #260	; 0x104
 800caba:	4630      	mov	r0, r6
 800cabc:	f7fc fb96 	bl	80091ec <_scanf_float>
 800cac0:	e798      	b.n	800c9f4 <__ssvfiscanf_r+0x204>
 800cac2:	89a3      	ldrh	r3, [r4, #12]
 800cac4:	f013 0f40 	tst.w	r3, #64	; 0x40
 800cac8:	bf18      	it	ne
 800caca:	f04f 30ff 	movne.w	r0, #4294967295
 800cace:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800cad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cad6:	9844      	ldr	r0, [sp, #272]	; 0x110
 800cad8:	e7f9      	b.n	800cace <__ssvfiscanf_r+0x2de>
 800cada:	bf00      	nop
 800cadc:	080091ed 	.word	0x080091ed

0800cae0 <_scanf_chars>:
 800cae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cae4:	4615      	mov	r5, r2
 800cae6:	688a      	ldr	r2, [r1, #8]
 800cae8:	4680      	mov	r8, r0
 800caea:	460c      	mov	r4, r1
 800caec:	b932      	cbnz	r2, 800cafc <_scanf_chars+0x1c>
 800caee:	698a      	ldr	r2, [r1, #24]
 800caf0:	2a00      	cmp	r2, #0
 800caf2:	bf0c      	ite	eq
 800caf4:	2201      	moveq	r2, #1
 800caf6:	f04f 32ff 	movne.w	r2, #4294967295
 800cafa:	608a      	str	r2, [r1, #8]
 800cafc:	6822      	ldr	r2, [r4, #0]
 800cafe:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800cb90 <_scanf_chars+0xb0>
 800cb02:	06d1      	lsls	r1, r2, #27
 800cb04:	bf5f      	itttt	pl
 800cb06:	681a      	ldrpl	r2, [r3, #0]
 800cb08:	1d11      	addpl	r1, r2, #4
 800cb0a:	6019      	strpl	r1, [r3, #0]
 800cb0c:	6816      	ldrpl	r6, [r2, #0]
 800cb0e:	2700      	movs	r7, #0
 800cb10:	69a0      	ldr	r0, [r4, #24]
 800cb12:	b188      	cbz	r0, 800cb38 <_scanf_chars+0x58>
 800cb14:	2801      	cmp	r0, #1
 800cb16:	d107      	bne.n	800cb28 <_scanf_chars+0x48>
 800cb18:	682a      	ldr	r2, [r5, #0]
 800cb1a:	7811      	ldrb	r1, [r2, #0]
 800cb1c:	6962      	ldr	r2, [r4, #20]
 800cb1e:	5c52      	ldrb	r2, [r2, r1]
 800cb20:	b952      	cbnz	r2, 800cb38 <_scanf_chars+0x58>
 800cb22:	2f00      	cmp	r7, #0
 800cb24:	d031      	beq.n	800cb8a <_scanf_chars+0xaa>
 800cb26:	e022      	b.n	800cb6e <_scanf_chars+0x8e>
 800cb28:	2802      	cmp	r0, #2
 800cb2a:	d120      	bne.n	800cb6e <_scanf_chars+0x8e>
 800cb2c:	682b      	ldr	r3, [r5, #0]
 800cb2e:	781b      	ldrb	r3, [r3, #0]
 800cb30:	f813 3009 	ldrb.w	r3, [r3, r9]
 800cb34:	071b      	lsls	r3, r3, #28
 800cb36:	d41a      	bmi.n	800cb6e <_scanf_chars+0x8e>
 800cb38:	6823      	ldr	r3, [r4, #0]
 800cb3a:	06da      	lsls	r2, r3, #27
 800cb3c:	bf5e      	ittt	pl
 800cb3e:	682b      	ldrpl	r3, [r5, #0]
 800cb40:	781b      	ldrbpl	r3, [r3, #0]
 800cb42:	f806 3b01 	strbpl.w	r3, [r6], #1
 800cb46:	682a      	ldr	r2, [r5, #0]
 800cb48:	686b      	ldr	r3, [r5, #4]
 800cb4a:	3201      	adds	r2, #1
 800cb4c:	602a      	str	r2, [r5, #0]
 800cb4e:	68a2      	ldr	r2, [r4, #8]
 800cb50:	3b01      	subs	r3, #1
 800cb52:	3a01      	subs	r2, #1
 800cb54:	606b      	str	r3, [r5, #4]
 800cb56:	3701      	adds	r7, #1
 800cb58:	60a2      	str	r2, [r4, #8]
 800cb5a:	b142      	cbz	r2, 800cb6e <_scanf_chars+0x8e>
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	dcd7      	bgt.n	800cb10 <_scanf_chars+0x30>
 800cb60:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800cb64:	4629      	mov	r1, r5
 800cb66:	4640      	mov	r0, r8
 800cb68:	4798      	blx	r3
 800cb6a:	2800      	cmp	r0, #0
 800cb6c:	d0d0      	beq.n	800cb10 <_scanf_chars+0x30>
 800cb6e:	6823      	ldr	r3, [r4, #0]
 800cb70:	f013 0310 	ands.w	r3, r3, #16
 800cb74:	d105      	bne.n	800cb82 <_scanf_chars+0xa2>
 800cb76:	68e2      	ldr	r2, [r4, #12]
 800cb78:	3201      	adds	r2, #1
 800cb7a:	60e2      	str	r2, [r4, #12]
 800cb7c:	69a2      	ldr	r2, [r4, #24]
 800cb7e:	b102      	cbz	r2, 800cb82 <_scanf_chars+0xa2>
 800cb80:	7033      	strb	r3, [r6, #0]
 800cb82:	6923      	ldr	r3, [r4, #16]
 800cb84:	443b      	add	r3, r7
 800cb86:	6123      	str	r3, [r4, #16]
 800cb88:	2000      	movs	r0, #0
 800cb8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb8e:	bf00      	nop
 800cb90:	0800dd61 	.word	0x0800dd61

0800cb94 <_scanf_i>:
 800cb94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb98:	4698      	mov	r8, r3
 800cb9a:	4b76      	ldr	r3, [pc, #472]	; (800cd74 <_scanf_i+0x1e0>)
 800cb9c:	460c      	mov	r4, r1
 800cb9e:	4682      	mov	sl, r0
 800cba0:	4616      	mov	r6, r2
 800cba2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cba6:	b087      	sub	sp, #28
 800cba8:	ab03      	add	r3, sp, #12
 800cbaa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800cbae:	4b72      	ldr	r3, [pc, #456]	; (800cd78 <_scanf_i+0x1e4>)
 800cbb0:	69a1      	ldr	r1, [r4, #24]
 800cbb2:	4a72      	ldr	r2, [pc, #456]	; (800cd7c <_scanf_i+0x1e8>)
 800cbb4:	2903      	cmp	r1, #3
 800cbb6:	bf18      	it	ne
 800cbb8:	461a      	movne	r2, r3
 800cbba:	68a3      	ldr	r3, [r4, #8]
 800cbbc:	9201      	str	r2, [sp, #4]
 800cbbe:	1e5a      	subs	r2, r3, #1
 800cbc0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800cbc4:	bf88      	it	hi
 800cbc6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800cbca:	4627      	mov	r7, r4
 800cbcc:	bf82      	ittt	hi
 800cbce:	eb03 0905 	addhi.w	r9, r3, r5
 800cbd2:	f240 135d 	movwhi	r3, #349	; 0x15d
 800cbd6:	60a3      	strhi	r3, [r4, #8]
 800cbd8:	f857 3b1c 	ldr.w	r3, [r7], #28
 800cbdc:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800cbe0:	bf98      	it	ls
 800cbe2:	f04f 0900 	movls.w	r9, #0
 800cbe6:	6023      	str	r3, [r4, #0]
 800cbe8:	463d      	mov	r5, r7
 800cbea:	f04f 0b00 	mov.w	fp, #0
 800cbee:	6831      	ldr	r1, [r6, #0]
 800cbf0:	ab03      	add	r3, sp, #12
 800cbf2:	7809      	ldrb	r1, [r1, #0]
 800cbf4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800cbf8:	2202      	movs	r2, #2
 800cbfa:	f7f3 fb21 	bl	8000240 <memchr>
 800cbfe:	b328      	cbz	r0, 800cc4c <_scanf_i+0xb8>
 800cc00:	f1bb 0f01 	cmp.w	fp, #1
 800cc04:	d159      	bne.n	800ccba <_scanf_i+0x126>
 800cc06:	6862      	ldr	r2, [r4, #4]
 800cc08:	b92a      	cbnz	r2, 800cc16 <_scanf_i+0x82>
 800cc0a:	6822      	ldr	r2, [r4, #0]
 800cc0c:	2308      	movs	r3, #8
 800cc0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cc12:	6063      	str	r3, [r4, #4]
 800cc14:	6022      	str	r2, [r4, #0]
 800cc16:	6822      	ldr	r2, [r4, #0]
 800cc18:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800cc1c:	6022      	str	r2, [r4, #0]
 800cc1e:	68a2      	ldr	r2, [r4, #8]
 800cc20:	1e51      	subs	r1, r2, #1
 800cc22:	60a1      	str	r1, [r4, #8]
 800cc24:	b192      	cbz	r2, 800cc4c <_scanf_i+0xb8>
 800cc26:	6832      	ldr	r2, [r6, #0]
 800cc28:	1c51      	adds	r1, r2, #1
 800cc2a:	6031      	str	r1, [r6, #0]
 800cc2c:	7812      	ldrb	r2, [r2, #0]
 800cc2e:	f805 2b01 	strb.w	r2, [r5], #1
 800cc32:	6872      	ldr	r2, [r6, #4]
 800cc34:	3a01      	subs	r2, #1
 800cc36:	2a00      	cmp	r2, #0
 800cc38:	6072      	str	r2, [r6, #4]
 800cc3a:	dc07      	bgt.n	800cc4c <_scanf_i+0xb8>
 800cc3c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800cc40:	4631      	mov	r1, r6
 800cc42:	4650      	mov	r0, sl
 800cc44:	4790      	blx	r2
 800cc46:	2800      	cmp	r0, #0
 800cc48:	f040 8085 	bne.w	800cd56 <_scanf_i+0x1c2>
 800cc4c:	f10b 0b01 	add.w	fp, fp, #1
 800cc50:	f1bb 0f03 	cmp.w	fp, #3
 800cc54:	d1cb      	bne.n	800cbee <_scanf_i+0x5a>
 800cc56:	6863      	ldr	r3, [r4, #4]
 800cc58:	b90b      	cbnz	r3, 800cc5e <_scanf_i+0xca>
 800cc5a:	230a      	movs	r3, #10
 800cc5c:	6063      	str	r3, [r4, #4]
 800cc5e:	6863      	ldr	r3, [r4, #4]
 800cc60:	4947      	ldr	r1, [pc, #284]	; (800cd80 <_scanf_i+0x1ec>)
 800cc62:	6960      	ldr	r0, [r4, #20]
 800cc64:	1ac9      	subs	r1, r1, r3
 800cc66:	f000 f8b7 	bl	800cdd8 <__sccl>
 800cc6a:	f04f 0b00 	mov.w	fp, #0
 800cc6e:	68a3      	ldr	r3, [r4, #8]
 800cc70:	6822      	ldr	r2, [r4, #0]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d03d      	beq.n	800ccf2 <_scanf_i+0x15e>
 800cc76:	6831      	ldr	r1, [r6, #0]
 800cc78:	6960      	ldr	r0, [r4, #20]
 800cc7a:	f891 c000 	ldrb.w	ip, [r1]
 800cc7e:	f810 000c 	ldrb.w	r0, [r0, ip]
 800cc82:	2800      	cmp	r0, #0
 800cc84:	d035      	beq.n	800ccf2 <_scanf_i+0x15e>
 800cc86:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800cc8a:	d124      	bne.n	800ccd6 <_scanf_i+0x142>
 800cc8c:	0510      	lsls	r0, r2, #20
 800cc8e:	d522      	bpl.n	800ccd6 <_scanf_i+0x142>
 800cc90:	f10b 0b01 	add.w	fp, fp, #1
 800cc94:	f1b9 0f00 	cmp.w	r9, #0
 800cc98:	d003      	beq.n	800cca2 <_scanf_i+0x10e>
 800cc9a:	3301      	adds	r3, #1
 800cc9c:	f109 39ff 	add.w	r9, r9, #4294967295
 800cca0:	60a3      	str	r3, [r4, #8]
 800cca2:	6873      	ldr	r3, [r6, #4]
 800cca4:	3b01      	subs	r3, #1
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	6073      	str	r3, [r6, #4]
 800ccaa:	dd1b      	ble.n	800cce4 <_scanf_i+0x150>
 800ccac:	6833      	ldr	r3, [r6, #0]
 800ccae:	3301      	adds	r3, #1
 800ccb0:	6033      	str	r3, [r6, #0]
 800ccb2:	68a3      	ldr	r3, [r4, #8]
 800ccb4:	3b01      	subs	r3, #1
 800ccb6:	60a3      	str	r3, [r4, #8]
 800ccb8:	e7d9      	b.n	800cc6e <_scanf_i+0xda>
 800ccba:	f1bb 0f02 	cmp.w	fp, #2
 800ccbe:	d1ae      	bne.n	800cc1e <_scanf_i+0x8a>
 800ccc0:	6822      	ldr	r2, [r4, #0]
 800ccc2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800ccc6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800ccca:	d1bf      	bne.n	800cc4c <_scanf_i+0xb8>
 800cccc:	2310      	movs	r3, #16
 800ccce:	6063      	str	r3, [r4, #4]
 800ccd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ccd4:	e7a2      	b.n	800cc1c <_scanf_i+0x88>
 800ccd6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800ccda:	6022      	str	r2, [r4, #0]
 800ccdc:	780b      	ldrb	r3, [r1, #0]
 800ccde:	f805 3b01 	strb.w	r3, [r5], #1
 800cce2:	e7de      	b.n	800cca2 <_scanf_i+0x10e>
 800cce4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800cce8:	4631      	mov	r1, r6
 800ccea:	4650      	mov	r0, sl
 800ccec:	4798      	blx	r3
 800ccee:	2800      	cmp	r0, #0
 800ccf0:	d0df      	beq.n	800ccb2 <_scanf_i+0x11e>
 800ccf2:	6823      	ldr	r3, [r4, #0]
 800ccf4:	05db      	lsls	r3, r3, #23
 800ccf6:	d50d      	bpl.n	800cd14 <_scanf_i+0x180>
 800ccf8:	42bd      	cmp	r5, r7
 800ccfa:	d909      	bls.n	800cd10 <_scanf_i+0x17c>
 800ccfc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800cd00:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cd04:	4632      	mov	r2, r6
 800cd06:	4650      	mov	r0, sl
 800cd08:	4798      	blx	r3
 800cd0a:	f105 39ff 	add.w	r9, r5, #4294967295
 800cd0e:	464d      	mov	r5, r9
 800cd10:	42bd      	cmp	r5, r7
 800cd12:	d02d      	beq.n	800cd70 <_scanf_i+0x1dc>
 800cd14:	6822      	ldr	r2, [r4, #0]
 800cd16:	f012 0210 	ands.w	r2, r2, #16
 800cd1a:	d113      	bne.n	800cd44 <_scanf_i+0x1b0>
 800cd1c:	702a      	strb	r2, [r5, #0]
 800cd1e:	6863      	ldr	r3, [r4, #4]
 800cd20:	9e01      	ldr	r6, [sp, #4]
 800cd22:	4639      	mov	r1, r7
 800cd24:	4650      	mov	r0, sl
 800cd26:	47b0      	blx	r6
 800cd28:	6821      	ldr	r1, [r4, #0]
 800cd2a:	f8d8 3000 	ldr.w	r3, [r8]
 800cd2e:	f011 0f20 	tst.w	r1, #32
 800cd32:	d013      	beq.n	800cd5c <_scanf_i+0x1c8>
 800cd34:	1d1a      	adds	r2, r3, #4
 800cd36:	f8c8 2000 	str.w	r2, [r8]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	6018      	str	r0, [r3, #0]
 800cd3e:	68e3      	ldr	r3, [r4, #12]
 800cd40:	3301      	adds	r3, #1
 800cd42:	60e3      	str	r3, [r4, #12]
 800cd44:	1bed      	subs	r5, r5, r7
 800cd46:	44ab      	add	fp, r5
 800cd48:	6925      	ldr	r5, [r4, #16]
 800cd4a:	445d      	add	r5, fp
 800cd4c:	6125      	str	r5, [r4, #16]
 800cd4e:	2000      	movs	r0, #0
 800cd50:	b007      	add	sp, #28
 800cd52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd56:	f04f 0b00 	mov.w	fp, #0
 800cd5a:	e7ca      	b.n	800ccf2 <_scanf_i+0x15e>
 800cd5c:	1d1a      	adds	r2, r3, #4
 800cd5e:	f8c8 2000 	str.w	r2, [r8]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	f011 0f01 	tst.w	r1, #1
 800cd68:	bf14      	ite	ne
 800cd6a:	8018      	strhne	r0, [r3, #0]
 800cd6c:	6018      	streq	r0, [r3, #0]
 800cd6e:	e7e6      	b.n	800cd3e <_scanf_i+0x1aa>
 800cd70:	2001      	movs	r0, #1
 800cd72:	e7ed      	b.n	800cd50 <_scanf_i+0x1bc>
 800cd74:	0800dcac 	.word	0x0800dcac
 800cd78:	0800cf55 	.word	0x0800cf55
 800cd7c:	0800a495 	.word	0x0800a495
 800cd80:	0800e0ee 	.word	0x0800e0ee

0800cd84 <_read_r>:
 800cd84:	b538      	push	{r3, r4, r5, lr}
 800cd86:	4d07      	ldr	r5, [pc, #28]	; (800cda4 <_read_r+0x20>)
 800cd88:	4604      	mov	r4, r0
 800cd8a:	4608      	mov	r0, r1
 800cd8c:	4611      	mov	r1, r2
 800cd8e:	2200      	movs	r2, #0
 800cd90:	602a      	str	r2, [r5, #0]
 800cd92:	461a      	mov	r2, r3
 800cd94:	f7f4 fea0 	bl	8001ad8 <_read>
 800cd98:	1c43      	adds	r3, r0, #1
 800cd9a:	d102      	bne.n	800cda2 <_read_r+0x1e>
 800cd9c:	682b      	ldr	r3, [r5, #0]
 800cd9e:	b103      	cbz	r3, 800cda2 <_read_r+0x1e>
 800cda0:	6023      	str	r3, [r4, #0]
 800cda2:	bd38      	pop	{r3, r4, r5, pc}
 800cda4:	2000044c 	.word	0x2000044c

0800cda8 <nan>:
 800cda8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cdb0 <nan+0x8>
 800cdac:	4770      	bx	lr
 800cdae:	bf00      	nop
 800cdb0:	00000000 	.word	0x00000000
 800cdb4:	7ff80000 	.word	0x7ff80000

0800cdb8 <_sbrk_r>:
 800cdb8:	b538      	push	{r3, r4, r5, lr}
 800cdba:	4d06      	ldr	r5, [pc, #24]	; (800cdd4 <_sbrk_r+0x1c>)
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	4604      	mov	r4, r0
 800cdc0:	4608      	mov	r0, r1
 800cdc2:	602b      	str	r3, [r5, #0]
 800cdc4:	f7f4 fef6 	bl	8001bb4 <_sbrk>
 800cdc8:	1c43      	adds	r3, r0, #1
 800cdca:	d102      	bne.n	800cdd2 <_sbrk_r+0x1a>
 800cdcc:	682b      	ldr	r3, [r5, #0]
 800cdce:	b103      	cbz	r3, 800cdd2 <_sbrk_r+0x1a>
 800cdd0:	6023      	str	r3, [r4, #0]
 800cdd2:	bd38      	pop	{r3, r4, r5, pc}
 800cdd4:	2000044c 	.word	0x2000044c

0800cdd8 <__sccl>:
 800cdd8:	b570      	push	{r4, r5, r6, lr}
 800cdda:	780b      	ldrb	r3, [r1, #0]
 800cddc:	4604      	mov	r4, r0
 800cdde:	2b5e      	cmp	r3, #94	; 0x5e
 800cde0:	bf0b      	itete	eq
 800cde2:	784b      	ldrbeq	r3, [r1, #1]
 800cde4:	1c48      	addne	r0, r1, #1
 800cde6:	1c88      	addeq	r0, r1, #2
 800cde8:	2200      	movne	r2, #0
 800cdea:	bf08      	it	eq
 800cdec:	2201      	moveq	r2, #1
 800cdee:	1e61      	subs	r1, r4, #1
 800cdf0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800cdf4:	f801 2f01 	strb.w	r2, [r1, #1]!
 800cdf8:	42a9      	cmp	r1, r5
 800cdfa:	d1fb      	bne.n	800cdf4 <__sccl+0x1c>
 800cdfc:	b90b      	cbnz	r3, 800ce02 <__sccl+0x2a>
 800cdfe:	3801      	subs	r0, #1
 800ce00:	bd70      	pop	{r4, r5, r6, pc}
 800ce02:	f082 0201 	eor.w	r2, r2, #1
 800ce06:	54e2      	strb	r2, [r4, r3]
 800ce08:	4605      	mov	r5, r0
 800ce0a:	4628      	mov	r0, r5
 800ce0c:	f810 1b01 	ldrb.w	r1, [r0], #1
 800ce10:	292d      	cmp	r1, #45	; 0x2d
 800ce12:	d006      	beq.n	800ce22 <__sccl+0x4a>
 800ce14:	295d      	cmp	r1, #93	; 0x5d
 800ce16:	d0f3      	beq.n	800ce00 <__sccl+0x28>
 800ce18:	b909      	cbnz	r1, 800ce1e <__sccl+0x46>
 800ce1a:	4628      	mov	r0, r5
 800ce1c:	e7f0      	b.n	800ce00 <__sccl+0x28>
 800ce1e:	460b      	mov	r3, r1
 800ce20:	e7f1      	b.n	800ce06 <__sccl+0x2e>
 800ce22:	786e      	ldrb	r6, [r5, #1]
 800ce24:	2e5d      	cmp	r6, #93	; 0x5d
 800ce26:	d0fa      	beq.n	800ce1e <__sccl+0x46>
 800ce28:	42b3      	cmp	r3, r6
 800ce2a:	dcf8      	bgt.n	800ce1e <__sccl+0x46>
 800ce2c:	3502      	adds	r5, #2
 800ce2e:	4619      	mov	r1, r3
 800ce30:	3101      	adds	r1, #1
 800ce32:	428e      	cmp	r6, r1
 800ce34:	5462      	strb	r2, [r4, r1]
 800ce36:	dcfb      	bgt.n	800ce30 <__sccl+0x58>
 800ce38:	1af1      	subs	r1, r6, r3
 800ce3a:	3901      	subs	r1, #1
 800ce3c:	1c58      	adds	r0, r3, #1
 800ce3e:	42b3      	cmp	r3, r6
 800ce40:	bfa8      	it	ge
 800ce42:	2100      	movge	r1, #0
 800ce44:	1843      	adds	r3, r0, r1
 800ce46:	e7e0      	b.n	800ce0a <__sccl+0x32>

0800ce48 <strncmp>:
 800ce48:	b510      	push	{r4, lr}
 800ce4a:	b17a      	cbz	r2, 800ce6c <strncmp+0x24>
 800ce4c:	4603      	mov	r3, r0
 800ce4e:	3901      	subs	r1, #1
 800ce50:	1884      	adds	r4, r0, r2
 800ce52:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ce56:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ce5a:	4290      	cmp	r0, r2
 800ce5c:	d101      	bne.n	800ce62 <strncmp+0x1a>
 800ce5e:	42a3      	cmp	r3, r4
 800ce60:	d101      	bne.n	800ce66 <strncmp+0x1e>
 800ce62:	1a80      	subs	r0, r0, r2
 800ce64:	bd10      	pop	{r4, pc}
 800ce66:	2800      	cmp	r0, #0
 800ce68:	d1f3      	bne.n	800ce52 <strncmp+0xa>
 800ce6a:	e7fa      	b.n	800ce62 <strncmp+0x1a>
 800ce6c:	4610      	mov	r0, r2
 800ce6e:	e7f9      	b.n	800ce64 <strncmp+0x1c>

0800ce70 <_strtoul_l.constprop.0>:
 800ce70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ce74:	4f36      	ldr	r7, [pc, #216]	; (800cf50 <_strtoul_l.constprop.0+0xe0>)
 800ce76:	4686      	mov	lr, r0
 800ce78:	460d      	mov	r5, r1
 800ce7a:	4628      	mov	r0, r5
 800ce7c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ce80:	5de6      	ldrb	r6, [r4, r7]
 800ce82:	f016 0608 	ands.w	r6, r6, #8
 800ce86:	d1f8      	bne.n	800ce7a <_strtoul_l.constprop.0+0xa>
 800ce88:	2c2d      	cmp	r4, #45	; 0x2d
 800ce8a:	d12f      	bne.n	800ceec <_strtoul_l.constprop.0+0x7c>
 800ce8c:	782c      	ldrb	r4, [r5, #0]
 800ce8e:	2601      	movs	r6, #1
 800ce90:	1c85      	adds	r5, r0, #2
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d057      	beq.n	800cf46 <_strtoul_l.constprop.0+0xd6>
 800ce96:	2b10      	cmp	r3, #16
 800ce98:	d109      	bne.n	800ceae <_strtoul_l.constprop.0+0x3e>
 800ce9a:	2c30      	cmp	r4, #48	; 0x30
 800ce9c:	d107      	bne.n	800ceae <_strtoul_l.constprop.0+0x3e>
 800ce9e:	7828      	ldrb	r0, [r5, #0]
 800cea0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800cea4:	2858      	cmp	r0, #88	; 0x58
 800cea6:	d149      	bne.n	800cf3c <_strtoul_l.constprop.0+0xcc>
 800cea8:	786c      	ldrb	r4, [r5, #1]
 800ceaa:	2310      	movs	r3, #16
 800ceac:	3502      	adds	r5, #2
 800ceae:	f04f 38ff 	mov.w	r8, #4294967295
 800ceb2:	2700      	movs	r7, #0
 800ceb4:	fbb8 f8f3 	udiv	r8, r8, r3
 800ceb8:	fb03 f908 	mul.w	r9, r3, r8
 800cebc:	ea6f 0909 	mvn.w	r9, r9
 800cec0:	4638      	mov	r0, r7
 800cec2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800cec6:	f1bc 0f09 	cmp.w	ip, #9
 800ceca:	d814      	bhi.n	800cef6 <_strtoul_l.constprop.0+0x86>
 800cecc:	4664      	mov	r4, ip
 800cece:	42a3      	cmp	r3, r4
 800ced0:	dd22      	ble.n	800cf18 <_strtoul_l.constprop.0+0xa8>
 800ced2:	2f00      	cmp	r7, #0
 800ced4:	db1d      	blt.n	800cf12 <_strtoul_l.constprop.0+0xa2>
 800ced6:	4580      	cmp	r8, r0
 800ced8:	d31b      	bcc.n	800cf12 <_strtoul_l.constprop.0+0xa2>
 800ceda:	d101      	bne.n	800cee0 <_strtoul_l.constprop.0+0x70>
 800cedc:	45a1      	cmp	r9, r4
 800cede:	db18      	blt.n	800cf12 <_strtoul_l.constprop.0+0xa2>
 800cee0:	fb00 4003 	mla	r0, r0, r3, r4
 800cee4:	2701      	movs	r7, #1
 800cee6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ceea:	e7ea      	b.n	800cec2 <_strtoul_l.constprop.0+0x52>
 800ceec:	2c2b      	cmp	r4, #43	; 0x2b
 800ceee:	bf04      	itt	eq
 800cef0:	782c      	ldrbeq	r4, [r5, #0]
 800cef2:	1c85      	addeq	r5, r0, #2
 800cef4:	e7cd      	b.n	800ce92 <_strtoul_l.constprop.0+0x22>
 800cef6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800cefa:	f1bc 0f19 	cmp.w	ip, #25
 800cefe:	d801      	bhi.n	800cf04 <_strtoul_l.constprop.0+0x94>
 800cf00:	3c37      	subs	r4, #55	; 0x37
 800cf02:	e7e4      	b.n	800cece <_strtoul_l.constprop.0+0x5e>
 800cf04:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800cf08:	f1bc 0f19 	cmp.w	ip, #25
 800cf0c:	d804      	bhi.n	800cf18 <_strtoul_l.constprop.0+0xa8>
 800cf0e:	3c57      	subs	r4, #87	; 0x57
 800cf10:	e7dd      	b.n	800cece <_strtoul_l.constprop.0+0x5e>
 800cf12:	f04f 37ff 	mov.w	r7, #4294967295
 800cf16:	e7e6      	b.n	800cee6 <_strtoul_l.constprop.0+0x76>
 800cf18:	2f00      	cmp	r7, #0
 800cf1a:	da07      	bge.n	800cf2c <_strtoul_l.constprop.0+0xbc>
 800cf1c:	2322      	movs	r3, #34	; 0x22
 800cf1e:	f8ce 3000 	str.w	r3, [lr]
 800cf22:	f04f 30ff 	mov.w	r0, #4294967295
 800cf26:	b932      	cbnz	r2, 800cf36 <_strtoul_l.constprop.0+0xc6>
 800cf28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf2c:	b106      	cbz	r6, 800cf30 <_strtoul_l.constprop.0+0xc0>
 800cf2e:	4240      	negs	r0, r0
 800cf30:	2a00      	cmp	r2, #0
 800cf32:	d0f9      	beq.n	800cf28 <_strtoul_l.constprop.0+0xb8>
 800cf34:	b107      	cbz	r7, 800cf38 <_strtoul_l.constprop.0+0xc8>
 800cf36:	1e69      	subs	r1, r5, #1
 800cf38:	6011      	str	r1, [r2, #0]
 800cf3a:	e7f5      	b.n	800cf28 <_strtoul_l.constprop.0+0xb8>
 800cf3c:	2430      	movs	r4, #48	; 0x30
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d1b5      	bne.n	800ceae <_strtoul_l.constprop.0+0x3e>
 800cf42:	2308      	movs	r3, #8
 800cf44:	e7b3      	b.n	800ceae <_strtoul_l.constprop.0+0x3e>
 800cf46:	2c30      	cmp	r4, #48	; 0x30
 800cf48:	d0a9      	beq.n	800ce9e <_strtoul_l.constprop.0+0x2e>
 800cf4a:	230a      	movs	r3, #10
 800cf4c:	e7af      	b.n	800ceae <_strtoul_l.constprop.0+0x3e>
 800cf4e:	bf00      	nop
 800cf50:	0800dd61 	.word	0x0800dd61

0800cf54 <_strtoul_r>:
 800cf54:	f7ff bf8c 	b.w	800ce70 <_strtoul_l.constprop.0>

0800cf58 <__submore>:
 800cf58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf5c:	460c      	mov	r4, r1
 800cf5e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800cf60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cf64:	4299      	cmp	r1, r3
 800cf66:	d11d      	bne.n	800cfa4 <__submore+0x4c>
 800cf68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800cf6c:	f7ff fa16 	bl	800c39c <_malloc_r>
 800cf70:	b918      	cbnz	r0, 800cf7a <__submore+0x22>
 800cf72:	f04f 30ff 	mov.w	r0, #4294967295
 800cf76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cf7e:	63a3      	str	r3, [r4, #56]	; 0x38
 800cf80:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800cf84:	6360      	str	r0, [r4, #52]	; 0x34
 800cf86:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800cf8a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800cf8e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800cf92:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800cf96:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800cf9a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800cf9e:	6020      	str	r0, [r4, #0]
 800cfa0:	2000      	movs	r0, #0
 800cfa2:	e7e8      	b.n	800cf76 <__submore+0x1e>
 800cfa4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800cfa6:	0077      	lsls	r7, r6, #1
 800cfa8:	463a      	mov	r2, r7
 800cfaa:	f000 fa2d 	bl	800d408 <_realloc_r>
 800cfae:	4605      	mov	r5, r0
 800cfb0:	2800      	cmp	r0, #0
 800cfb2:	d0de      	beq.n	800cf72 <__submore+0x1a>
 800cfb4:	eb00 0806 	add.w	r8, r0, r6
 800cfb8:	4601      	mov	r1, r0
 800cfba:	4632      	mov	r2, r6
 800cfbc:	4640      	mov	r0, r8
 800cfbe:	f7fb fc95 	bl	80088ec <memcpy>
 800cfc2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800cfc6:	f8c4 8000 	str.w	r8, [r4]
 800cfca:	e7e9      	b.n	800cfa0 <__submore+0x48>

0800cfcc <__ascii_wctomb>:
 800cfcc:	b149      	cbz	r1, 800cfe2 <__ascii_wctomb+0x16>
 800cfce:	2aff      	cmp	r2, #255	; 0xff
 800cfd0:	bf85      	ittet	hi
 800cfd2:	238a      	movhi	r3, #138	; 0x8a
 800cfd4:	6003      	strhi	r3, [r0, #0]
 800cfd6:	700a      	strbls	r2, [r1, #0]
 800cfd8:	f04f 30ff 	movhi.w	r0, #4294967295
 800cfdc:	bf98      	it	ls
 800cfde:	2001      	movls	r0, #1
 800cfe0:	4770      	bx	lr
 800cfe2:	4608      	mov	r0, r1
 800cfe4:	4770      	bx	lr
	...

0800cfe8 <__assert_func>:
 800cfe8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cfea:	4614      	mov	r4, r2
 800cfec:	461a      	mov	r2, r3
 800cfee:	4b09      	ldr	r3, [pc, #36]	; (800d014 <__assert_func+0x2c>)
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	4605      	mov	r5, r0
 800cff4:	68d8      	ldr	r0, [r3, #12]
 800cff6:	b14c      	cbz	r4, 800d00c <__assert_func+0x24>
 800cff8:	4b07      	ldr	r3, [pc, #28]	; (800d018 <__assert_func+0x30>)
 800cffa:	9100      	str	r1, [sp, #0]
 800cffc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d000:	4906      	ldr	r1, [pc, #24]	; (800d01c <__assert_func+0x34>)
 800d002:	462b      	mov	r3, r5
 800d004:	f000 f9a6 	bl	800d354 <fiprintf>
 800d008:	f000 fc46 	bl	800d898 <abort>
 800d00c:	4b04      	ldr	r3, [pc, #16]	; (800d020 <__assert_func+0x38>)
 800d00e:	461c      	mov	r4, r3
 800d010:	e7f3      	b.n	800cffa <__assert_func+0x12>
 800d012:	bf00      	nop
 800d014:	2000000c 	.word	0x2000000c
 800d018:	0800e0f0 	.word	0x0800e0f0
 800d01c:	0800e0fd 	.word	0x0800e0fd
 800d020:	0800e12b 	.word	0x0800e12b

0800d024 <__sflush_r>:
 800d024:	898a      	ldrh	r2, [r1, #12]
 800d026:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d02a:	4605      	mov	r5, r0
 800d02c:	0710      	lsls	r0, r2, #28
 800d02e:	460c      	mov	r4, r1
 800d030:	d458      	bmi.n	800d0e4 <__sflush_r+0xc0>
 800d032:	684b      	ldr	r3, [r1, #4]
 800d034:	2b00      	cmp	r3, #0
 800d036:	dc05      	bgt.n	800d044 <__sflush_r+0x20>
 800d038:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	dc02      	bgt.n	800d044 <__sflush_r+0x20>
 800d03e:	2000      	movs	r0, #0
 800d040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d044:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d046:	2e00      	cmp	r6, #0
 800d048:	d0f9      	beq.n	800d03e <__sflush_r+0x1a>
 800d04a:	2300      	movs	r3, #0
 800d04c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d050:	682f      	ldr	r7, [r5, #0]
 800d052:	602b      	str	r3, [r5, #0]
 800d054:	d032      	beq.n	800d0bc <__sflush_r+0x98>
 800d056:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d058:	89a3      	ldrh	r3, [r4, #12]
 800d05a:	075a      	lsls	r2, r3, #29
 800d05c:	d505      	bpl.n	800d06a <__sflush_r+0x46>
 800d05e:	6863      	ldr	r3, [r4, #4]
 800d060:	1ac0      	subs	r0, r0, r3
 800d062:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d064:	b10b      	cbz	r3, 800d06a <__sflush_r+0x46>
 800d066:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d068:	1ac0      	subs	r0, r0, r3
 800d06a:	2300      	movs	r3, #0
 800d06c:	4602      	mov	r2, r0
 800d06e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d070:	6a21      	ldr	r1, [r4, #32]
 800d072:	4628      	mov	r0, r5
 800d074:	47b0      	blx	r6
 800d076:	1c43      	adds	r3, r0, #1
 800d078:	89a3      	ldrh	r3, [r4, #12]
 800d07a:	d106      	bne.n	800d08a <__sflush_r+0x66>
 800d07c:	6829      	ldr	r1, [r5, #0]
 800d07e:	291d      	cmp	r1, #29
 800d080:	d82c      	bhi.n	800d0dc <__sflush_r+0xb8>
 800d082:	4a2a      	ldr	r2, [pc, #168]	; (800d12c <__sflush_r+0x108>)
 800d084:	40ca      	lsrs	r2, r1
 800d086:	07d6      	lsls	r6, r2, #31
 800d088:	d528      	bpl.n	800d0dc <__sflush_r+0xb8>
 800d08a:	2200      	movs	r2, #0
 800d08c:	6062      	str	r2, [r4, #4]
 800d08e:	04d9      	lsls	r1, r3, #19
 800d090:	6922      	ldr	r2, [r4, #16]
 800d092:	6022      	str	r2, [r4, #0]
 800d094:	d504      	bpl.n	800d0a0 <__sflush_r+0x7c>
 800d096:	1c42      	adds	r2, r0, #1
 800d098:	d101      	bne.n	800d09e <__sflush_r+0x7a>
 800d09a:	682b      	ldr	r3, [r5, #0]
 800d09c:	b903      	cbnz	r3, 800d0a0 <__sflush_r+0x7c>
 800d09e:	6560      	str	r0, [r4, #84]	; 0x54
 800d0a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d0a2:	602f      	str	r7, [r5, #0]
 800d0a4:	2900      	cmp	r1, #0
 800d0a6:	d0ca      	beq.n	800d03e <__sflush_r+0x1a>
 800d0a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d0ac:	4299      	cmp	r1, r3
 800d0ae:	d002      	beq.n	800d0b6 <__sflush_r+0x92>
 800d0b0:	4628      	mov	r0, r5
 800d0b2:	f7ff f907 	bl	800c2c4 <_free_r>
 800d0b6:	2000      	movs	r0, #0
 800d0b8:	6360      	str	r0, [r4, #52]	; 0x34
 800d0ba:	e7c1      	b.n	800d040 <__sflush_r+0x1c>
 800d0bc:	6a21      	ldr	r1, [r4, #32]
 800d0be:	2301      	movs	r3, #1
 800d0c0:	4628      	mov	r0, r5
 800d0c2:	47b0      	blx	r6
 800d0c4:	1c41      	adds	r1, r0, #1
 800d0c6:	d1c7      	bne.n	800d058 <__sflush_r+0x34>
 800d0c8:	682b      	ldr	r3, [r5, #0]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d0c4      	beq.n	800d058 <__sflush_r+0x34>
 800d0ce:	2b1d      	cmp	r3, #29
 800d0d0:	d001      	beq.n	800d0d6 <__sflush_r+0xb2>
 800d0d2:	2b16      	cmp	r3, #22
 800d0d4:	d101      	bne.n	800d0da <__sflush_r+0xb6>
 800d0d6:	602f      	str	r7, [r5, #0]
 800d0d8:	e7b1      	b.n	800d03e <__sflush_r+0x1a>
 800d0da:	89a3      	ldrh	r3, [r4, #12]
 800d0dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0e0:	81a3      	strh	r3, [r4, #12]
 800d0e2:	e7ad      	b.n	800d040 <__sflush_r+0x1c>
 800d0e4:	690f      	ldr	r7, [r1, #16]
 800d0e6:	2f00      	cmp	r7, #0
 800d0e8:	d0a9      	beq.n	800d03e <__sflush_r+0x1a>
 800d0ea:	0793      	lsls	r3, r2, #30
 800d0ec:	680e      	ldr	r6, [r1, #0]
 800d0ee:	bf08      	it	eq
 800d0f0:	694b      	ldreq	r3, [r1, #20]
 800d0f2:	600f      	str	r7, [r1, #0]
 800d0f4:	bf18      	it	ne
 800d0f6:	2300      	movne	r3, #0
 800d0f8:	eba6 0807 	sub.w	r8, r6, r7
 800d0fc:	608b      	str	r3, [r1, #8]
 800d0fe:	f1b8 0f00 	cmp.w	r8, #0
 800d102:	dd9c      	ble.n	800d03e <__sflush_r+0x1a>
 800d104:	6a21      	ldr	r1, [r4, #32]
 800d106:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d108:	4643      	mov	r3, r8
 800d10a:	463a      	mov	r2, r7
 800d10c:	4628      	mov	r0, r5
 800d10e:	47b0      	blx	r6
 800d110:	2800      	cmp	r0, #0
 800d112:	dc06      	bgt.n	800d122 <__sflush_r+0xfe>
 800d114:	89a3      	ldrh	r3, [r4, #12]
 800d116:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d11a:	81a3      	strh	r3, [r4, #12]
 800d11c:	f04f 30ff 	mov.w	r0, #4294967295
 800d120:	e78e      	b.n	800d040 <__sflush_r+0x1c>
 800d122:	4407      	add	r7, r0
 800d124:	eba8 0800 	sub.w	r8, r8, r0
 800d128:	e7e9      	b.n	800d0fe <__sflush_r+0xda>
 800d12a:	bf00      	nop
 800d12c:	20400001 	.word	0x20400001

0800d130 <_fflush_r>:
 800d130:	b538      	push	{r3, r4, r5, lr}
 800d132:	690b      	ldr	r3, [r1, #16]
 800d134:	4605      	mov	r5, r0
 800d136:	460c      	mov	r4, r1
 800d138:	b913      	cbnz	r3, 800d140 <_fflush_r+0x10>
 800d13a:	2500      	movs	r5, #0
 800d13c:	4628      	mov	r0, r5
 800d13e:	bd38      	pop	{r3, r4, r5, pc}
 800d140:	b118      	cbz	r0, 800d14a <_fflush_r+0x1a>
 800d142:	6983      	ldr	r3, [r0, #24]
 800d144:	b90b      	cbnz	r3, 800d14a <_fflush_r+0x1a>
 800d146:	f000 f887 	bl	800d258 <__sinit>
 800d14a:	4b14      	ldr	r3, [pc, #80]	; (800d19c <_fflush_r+0x6c>)
 800d14c:	429c      	cmp	r4, r3
 800d14e:	d11b      	bne.n	800d188 <_fflush_r+0x58>
 800d150:	686c      	ldr	r4, [r5, #4]
 800d152:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d0ef      	beq.n	800d13a <_fflush_r+0xa>
 800d15a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d15c:	07d0      	lsls	r0, r2, #31
 800d15e:	d404      	bmi.n	800d16a <_fflush_r+0x3a>
 800d160:	0599      	lsls	r1, r3, #22
 800d162:	d402      	bmi.n	800d16a <_fflush_r+0x3a>
 800d164:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d166:	f000 f927 	bl	800d3b8 <__retarget_lock_acquire_recursive>
 800d16a:	4628      	mov	r0, r5
 800d16c:	4621      	mov	r1, r4
 800d16e:	f7ff ff59 	bl	800d024 <__sflush_r>
 800d172:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d174:	07da      	lsls	r2, r3, #31
 800d176:	4605      	mov	r5, r0
 800d178:	d4e0      	bmi.n	800d13c <_fflush_r+0xc>
 800d17a:	89a3      	ldrh	r3, [r4, #12]
 800d17c:	059b      	lsls	r3, r3, #22
 800d17e:	d4dd      	bmi.n	800d13c <_fflush_r+0xc>
 800d180:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d182:	f000 f91a 	bl	800d3ba <__retarget_lock_release_recursive>
 800d186:	e7d9      	b.n	800d13c <_fflush_r+0xc>
 800d188:	4b05      	ldr	r3, [pc, #20]	; (800d1a0 <_fflush_r+0x70>)
 800d18a:	429c      	cmp	r4, r3
 800d18c:	d101      	bne.n	800d192 <_fflush_r+0x62>
 800d18e:	68ac      	ldr	r4, [r5, #8]
 800d190:	e7df      	b.n	800d152 <_fflush_r+0x22>
 800d192:	4b04      	ldr	r3, [pc, #16]	; (800d1a4 <_fflush_r+0x74>)
 800d194:	429c      	cmp	r4, r3
 800d196:	bf08      	it	eq
 800d198:	68ec      	ldreq	r4, [r5, #12]
 800d19a:	e7da      	b.n	800d152 <_fflush_r+0x22>
 800d19c:	0800e14c 	.word	0x0800e14c
 800d1a0:	0800e16c 	.word	0x0800e16c
 800d1a4:	0800e12c 	.word	0x0800e12c

0800d1a8 <std>:
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	b510      	push	{r4, lr}
 800d1ac:	4604      	mov	r4, r0
 800d1ae:	e9c0 3300 	strd	r3, r3, [r0]
 800d1b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d1b6:	6083      	str	r3, [r0, #8]
 800d1b8:	8181      	strh	r1, [r0, #12]
 800d1ba:	6643      	str	r3, [r0, #100]	; 0x64
 800d1bc:	81c2      	strh	r2, [r0, #14]
 800d1be:	6183      	str	r3, [r0, #24]
 800d1c0:	4619      	mov	r1, r3
 800d1c2:	2208      	movs	r2, #8
 800d1c4:	305c      	adds	r0, #92	; 0x5c
 800d1c6:	f7fb fb9f 	bl	8008908 <memset>
 800d1ca:	4b05      	ldr	r3, [pc, #20]	; (800d1e0 <std+0x38>)
 800d1cc:	6263      	str	r3, [r4, #36]	; 0x24
 800d1ce:	4b05      	ldr	r3, [pc, #20]	; (800d1e4 <std+0x3c>)
 800d1d0:	62a3      	str	r3, [r4, #40]	; 0x28
 800d1d2:	4b05      	ldr	r3, [pc, #20]	; (800d1e8 <std+0x40>)
 800d1d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d1d6:	4b05      	ldr	r3, [pc, #20]	; (800d1ec <std+0x44>)
 800d1d8:	6224      	str	r4, [r4, #32]
 800d1da:	6323      	str	r3, [r4, #48]	; 0x30
 800d1dc:	bd10      	pop	{r4, pc}
 800d1de:	bf00      	nop
 800d1e0:	080096b1 	.word	0x080096b1
 800d1e4:	080096d7 	.word	0x080096d7
 800d1e8:	0800970f 	.word	0x0800970f
 800d1ec:	08009733 	.word	0x08009733

0800d1f0 <_cleanup_r>:
 800d1f0:	4901      	ldr	r1, [pc, #4]	; (800d1f8 <_cleanup_r+0x8>)
 800d1f2:	f000 b8c1 	b.w	800d378 <_fwalk_reent>
 800d1f6:	bf00      	nop
 800d1f8:	0800d131 	.word	0x0800d131

0800d1fc <__sfmoreglue>:
 800d1fc:	b570      	push	{r4, r5, r6, lr}
 800d1fe:	2268      	movs	r2, #104	; 0x68
 800d200:	1e4d      	subs	r5, r1, #1
 800d202:	4355      	muls	r5, r2
 800d204:	460e      	mov	r6, r1
 800d206:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d20a:	f7ff f8c7 	bl	800c39c <_malloc_r>
 800d20e:	4604      	mov	r4, r0
 800d210:	b140      	cbz	r0, 800d224 <__sfmoreglue+0x28>
 800d212:	2100      	movs	r1, #0
 800d214:	e9c0 1600 	strd	r1, r6, [r0]
 800d218:	300c      	adds	r0, #12
 800d21a:	60a0      	str	r0, [r4, #8]
 800d21c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d220:	f7fb fb72 	bl	8008908 <memset>
 800d224:	4620      	mov	r0, r4
 800d226:	bd70      	pop	{r4, r5, r6, pc}

0800d228 <__sfp_lock_acquire>:
 800d228:	4801      	ldr	r0, [pc, #4]	; (800d230 <__sfp_lock_acquire+0x8>)
 800d22a:	f000 b8c5 	b.w	800d3b8 <__retarget_lock_acquire_recursive>
 800d22e:	bf00      	nop
 800d230:	20000451 	.word	0x20000451

0800d234 <__sfp_lock_release>:
 800d234:	4801      	ldr	r0, [pc, #4]	; (800d23c <__sfp_lock_release+0x8>)
 800d236:	f000 b8c0 	b.w	800d3ba <__retarget_lock_release_recursive>
 800d23a:	bf00      	nop
 800d23c:	20000451 	.word	0x20000451

0800d240 <__sinit_lock_acquire>:
 800d240:	4801      	ldr	r0, [pc, #4]	; (800d248 <__sinit_lock_acquire+0x8>)
 800d242:	f000 b8b9 	b.w	800d3b8 <__retarget_lock_acquire_recursive>
 800d246:	bf00      	nop
 800d248:	20000452 	.word	0x20000452

0800d24c <__sinit_lock_release>:
 800d24c:	4801      	ldr	r0, [pc, #4]	; (800d254 <__sinit_lock_release+0x8>)
 800d24e:	f000 b8b4 	b.w	800d3ba <__retarget_lock_release_recursive>
 800d252:	bf00      	nop
 800d254:	20000452 	.word	0x20000452

0800d258 <__sinit>:
 800d258:	b510      	push	{r4, lr}
 800d25a:	4604      	mov	r4, r0
 800d25c:	f7ff fff0 	bl	800d240 <__sinit_lock_acquire>
 800d260:	69a3      	ldr	r3, [r4, #24]
 800d262:	b11b      	cbz	r3, 800d26c <__sinit+0x14>
 800d264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d268:	f7ff bff0 	b.w	800d24c <__sinit_lock_release>
 800d26c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d270:	6523      	str	r3, [r4, #80]	; 0x50
 800d272:	4b13      	ldr	r3, [pc, #76]	; (800d2c0 <__sinit+0x68>)
 800d274:	4a13      	ldr	r2, [pc, #76]	; (800d2c4 <__sinit+0x6c>)
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	62a2      	str	r2, [r4, #40]	; 0x28
 800d27a:	42a3      	cmp	r3, r4
 800d27c:	bf04      	itt	eq
 800d27e:	2301      	moveq	r3, #1
 800d280:	61a3      	streq	r3, [r4, #24]
 800d282:	4620      	mov	r0, r4
 800d284:	f000 f820 	bl	800d2c8 <__sfp>
 800d288:	6060      	str	r0, [r4, #4]
 800d28a:	4620      	mov	r0, r4
 800d28c:	f000 f81c 	bl	800d2c8 <__sfp>
 800d290:	60a0      	str	r0, [r4, #8]
 800d292:	4620      	mov	r0, r4
 800d294:	f000 f818 	bl	800d2c8 <__sfp>
 800d298:	2200      	movs	r2, #0
 800d29a:	60e0      	str	r0, [r4, #12]
 800d29c:	2104      	movs	r1, #4
 800d29e:	6860      	ldr	r0, [r4, #4]
 800d2a0:	f7ff ff82 	bl	800d1a8 <std>
 800d2a4:	68a0      	ldr	r0, [r4, #8]
 800d2a6:	2201      	movs	r2, #1
 800d2a8:	2109      	movs	r1, #9
 800d2aa:	f7ff ff7d 	bl	800d1a8 <std>
 800d2ae:	68e0      	ldr	r0, [r4, #12]
 800d2b0:	2202      	movs	r2, #2
 800d2b2:	2112      	movs	r1, #18
 800d2b4:	f7ff ff78 	bl	800d1a8 <std>
 800d2b8:	2301      	movs	r3, #1
 800d2ba:	61a3      	str	r3, [r4, #24]
 800d2bc:	e7d2      	b.n	800d264 <__sinit+0xc>
 800d2be:	bf00      	nop
 800d2c0:	0800dcd0 	.word	0x0800dcd0
 800d2c4:	0800d1f1 	.word	0x0800d1f1

0800d2c8 <__sfp>:
 800d2c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2ca:	4607      	mov	r7, r0
 800d2cc:	f7ff ffac 	bl	800d228 <__sfp_lock_acquire>
 800d2d0:	4b1e      	ldr	r3, [pc, #120]	; (800d34c <__sfp+0x84>)
 800d2d2:	681e      	ldr	r6, [r3, #0]
 800d2d4:	69b3      	ldr	r3, [r6, #24]
 800d2d6:	b913      	cbnz	r3, 800d2de <__sfp+0x16>
 800d2d8:	4630      	mov	r0, r6
 800d2da:	f7ff ffbd 	bl	800d258 <__sinit>
 800d2de:	3648      	adds	r6, #72	; 0x48
 800d2e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d2e4:	3b01      	subs	r3, #1
 800d2e6:	d503      	bpl.n	800d2f0 <__sfp+0x28>
 800d2e8:	6833      	ldr	r3, [r6, #0]
 800d2ea:	b30b      	cbz	r3, 800d330 <__sfp+0x68>
 800d2ec:	6836      	ldr	r6, [r6, #0]
 800d2ee:	e7f7      	b.n	800d2e0 <__sfp+0x18>
 800d2f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d2f4:	b9d5      	cbnz	r5, 800d32c <__sfp+0x64>
 800d2f6:	4b16      	ldr	r3, [pc, #88]	; (800d350 <__sfp+0x88>)
 800d2f8:	60e3      	str	r3, [r4, #12]
 800d2fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d2fe:	6665      	str	r5, [r4, #100]	; 0x64
 800d300:	f000 f859 	bl	800d3b6 <__retarget_lock_init_recursive>
 800d304:	f7ff ff96 	bl	800d234 <__sfp_lock_release>
 800d308:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d30c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d310:	6025      	str	r5, [r4, #0]
 800d312:	61a5      	str	r5, [r4, #24]
 800d314:	2208      	movs	r2, #8
 800d316:	4629      	mov	r1, r5
 800d318:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d31c:	f7fb faf4 	bl	8008908 <memset>
 800d320:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d324:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d328:	4620      	mov	r0, r4
 800d32a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d32c:	3468      	adds	r4, #104	; 0x68
 800d32e:	e7d9      	b.n	800d2e4 <__sfp+0x1c>
 800d330:	2104      	movs	r1, #4
 800d332:	4638      	mov	r0, r7
 800d334:	f7ff ff62 	bl	800d1fc <__sfmoreglue>
 800d338:	4604      	mov	r4, r0
 800d33a:	6030      	str	r0, [r6, #0]
 800d33c:	2800      	cmp	r0, #0
 800d33e:	d1d5      	bne.n	800d2ec <__sfp+0x24>
 800d340:	f7ff ff78 	bl	800d234 <__sfp_lock_release>
 800d344:	230c      	movs	r3, #12
 800d346:	603b      	str	r3, [r7, #0]
 800d348:	e7ee      	b.n	800d328 <__sfp+0x60>
 800d34a:	bf00      	nop
 800d34c:	0800dcd0 	.word	0x0800dcd0
 800d350:	ffff0001 	.word	0xffff0001

0800d354 <fiprintf>:
 800d354:	b40e      	push	{r1, r2, r3}
 800d356:	b503      	push	{r0, r1, lr}
 800d358:	4601      	mov	r1, r0
 800d35a:	ab03      	add	r3, sp, #12
 800d35c:	4805      	ldr	r0, [pc, #20]	; (800d374 <fiprintf+0x20>)
 800d35e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d362:	6800      	ldr	r0, [r0, #0]
 800d364:	9301      	str	r3, [sp, #4]
 800d366:	f000 f8a7 	bl	800d4b8 <_vfiprintf_r>
 800d36a:	b002      	add	sp, #8
 800d36c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d370:	b003      	add	sp, #12
 800d372:	4770      	bx	lr
 800d374:	2000000c 	.word	0x2000000c

0800d378 <_fwalk_reent>:
 800d378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d37c:	4606      	mov	r6, r0
 800d37e:	4688      	mov	r8, r1
 800d380:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d384:	2700      	movs	r7, #0
 800d386:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d38a:	f1b9 0901 	subs.w	r9, r9, #1
 800d38e:	d505      	bpl.n	800d39c <_fwalk_reent+0x24>
 800d390:	6824      	ldr	r4, [r4, #0]
 800d392:	2c00      	cmp	r4, #0
 800d394:	d1f7      	bne.n	800d386 <_fwalk_reent+0xe>
 800d396:	4638      	mov	r0, r7
 800d398:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d39c:	89ab      	ldrh	r3, [r5, #12]
 800d39e:	2b01      	cmp	r3, #1
 800d3a0:	d907      	bls.n	800d3b2 <_fwalk_reent+0x3a>
 800d3a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d3a6:	3301      	adds	r3, #1
 800d3a8:	d003      	beq.n	800d3b2 <_fwalk_reent+0x3a>
 800d3aa:	4629      	mov	r1, r5
 800d3ac:	4630      	mov	r0, r6
 800d3ae:	47c0      	blx	r8
 800d3b0:	4307      	orrs	r7, r0
 800d3b2:	3568      	adds	r5, #104	; 0x68
 800d3b4:	e7e9      	b.n	800d38a <_fwalk_reent+0x12>

0800d3b6 <__retarget_lock_init_recursive>:
 800d3b6:	4770      	bx	lr

0800d3b8 <__retarget_lock_acquire_recursive>:
 800d3b8:	4770      	bx	lr

0800d3ba <__retarget_lock_release_recursive>:
 800d3ba:	4770      	bx	lr

0800d3bc <memmove>:
 800d3bc:	4288      	cmp	r0, r1
 800d3be:	b510      	push	{r4, lr}
 800d3c0:	eb01 0402 	add.w	r4, r1, r2
 800d3c4:	d902      	bls.n	800d3cc <memmove+0x10>
 800d3c6:	4284      	cmp	r4, r0
 800d3c8:	4623      	mov	r3, r4
 800d3ca:	d807      	bhi.n	800d3dc <memmove+0x20>
 800d3cc:	1e43      	subs	r3, r0, #1
 800d3ce:	42a1      	cmp	r1, r4
 800d3d0:	d008      	beq.n	800d3e4 <memmove+0x28>
 800d3d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d3d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d3da:	e7f8      	b.n	800d3ce <memmove+0x12>
 800d3dc:	4402      	add	r2, r0
 800d3de:	4601      	mov	r1, r0
 800d3e0:	428a      	cmp	r2, r1
 800d3e2:	d100      	bne.n	800d3e6 <memmove+0x2a>
 800d3e4:	bd10      	pop	{r4, pc}
 800d3e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d3ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d3ee:	e7f7      	b.n	800d3e0 <memmove+0x24>

0800d3f0 <__malloc_lock>:
 800d3f0:	4801      	ldr	r0, [pc, #4]	; (800d3f8 <__malloc_lock+0x8>)
 800d3f2:	f7ff bfe1 	b.w	800d3b8 <__retarget_lock_acquire_recursive>
 800d3f6:	bf00      	nop
 800d3f8:	20000450 	.word	0x20000450

0800d3fc <__malloc_unlock>:
 800d3fc:	4801      	ldr	r0, [pc, #4]	; (800d404 <__malloc_unlock+0x8>)
 800d3fe:	f7ff bfdc 	b.w	800d3ba <__retarget_lock_release_recursive>
 800d402:	bf00      	nop
 800d404:	20000450 	.word	0x20000450

0800d408 <_realloc_r>:
 800d408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d40c:	4680      	mov	r8, r0
 800d40e:	4614      	mov	r4, r2
 800d410:	460e      	mov	r6, r1
 800d412:	b921      	cbnz	r1, 800d41e <_realloc_r+0x16>
 800d414:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d418:	4611      	mov	r1, r2
 800d41a:	f7fe bfbf 	b.w	800c39c <_malloc_r>
 800d41e:	b92a      	cbnz	r2, 800d42c <_realloc_r+0x24>
 800d420:	f7fe ff50 	bl	800c2c4 <_free_r>
 800d424:	4625      	mov	r5, r4
 800d426:	4628      	mov	r0, r5
 800d428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d42c:	f000 faa0 	bl	800d970 <_malloc_usable_size_r>
 800d430:	4284      	cmp	r4, r0
 800d432:	4607      	mov	r7, r0
 800d434:	d802      	bhi.n	800d43c <_realloc_r+0x34>
 800d436:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d43a:	d812      	bhi.n	800d462 <_realloc_r+0x5a>
 800d43c:	4621      	mov	r1, r4
 800d43e:	4640      	mov	r0, r8
 800d440:	f7fe ffac 	bl	800c39c <_malloc_r>
 800d444:	4605      	mov	r5, r0
 800d446:	2800      	cmp	r0, #0
 800d448:	d0ed      	beq.n	800d426 <_realloc_r+0x1e>
 800d44a:	42bc      	cmp	r4, r7
 800d44c:	4622      	mov	r2, r4
 800d44e:	4631      	mov	r1, r6
 800d450:	bf28      	it	cs
 800d452:	463a      	movcs	r2, r7
 800d454:	f7fb fa4a 	bl	80088ec <memcpy>
 800d458:	4631      	mov	r1, r6
 800d45a:	4640      	mov	r0, r8
 800d45c:	f7fe ff32 	bl	800c2c4 <_free_r>
 800d460:	e7e1      	b.n	800d426 <_realloc_r+0x1e>
 800d462:	4635      	mov	r5, r6
 800d464:	e7df      	b.n	800d426 <_realloc_r+0x1e>

0800d466 <__sfputc_r>:
 800d466:	6893      	ldr	r3, [r2, #8]
 800d468:	3b01      	subs	r3, #1
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	b410      	push	{r4}
 800d46e:	6093      	str	r3, [r2, #8]
 800d470:	da08      	bge.n	800d484 <__sfputc_r+0x1e>
 800d472:	6994      	ldr	r4, [r2, #24]
 800d474:	42a3      	cmp	r3, r4
 800d476:	db01      	blt.n	800d47c <__sfputc_r+0x16>
 800d478:	290a      	cmp	r1, #10
 800d47a:	d103      	bne.n	800d484 <__sfputc_r+0x1e>
 800d47c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d480:	f000 b94a 	b.w	800d718 <__swbuf_r>
 800d484:	6813      	ldr	r3, [r2, #0]
 800d486:	1c58      	adds	r0, r3, #1
 800d488:	6010      	str	r0, [r2, #0]
 800d48a:	7019      	strb	r1, [r3, #0]
 800d48c:	4608      	mov	r0, r1
 800d48e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d492:	4770      	bx	lr

0800d494 <__sfputs_r>:
 800d494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d496:	4606      	mov	r6, r0
 800d498:	460f      	mov	r7, r1
 800d49a:	4614      	mov	r4, r2
 800d49c:	18d5      	adds	r5, r2, r3
 800d49e:	42ac      	cmp	r4, r5
 800d4a0:	d101      	bne.n	800d4a6 <__sfputs_r+0x12>
 800d4a2:	2000      	movs	r0, #0
 800d4a4:	e007      	b.n	800d4b6 <__sfputs_r+0x22>
 800d4a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4aa:	463a      	mov	r2, r7
 800d4ac:	4630      	mov	r0, r6
 800d4ae:	f7ff ffda 	bl	800d466 <__sfputc_r>
 800d4b2:	1c43      	adds	r3, r0, #1
 800d4b4:	d1f3      	bne.n	800d49e <__sfputs_r+0xa>
 800d4b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d4b8 <_vfiprintf_r>:
 800d4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4bc:	460d      	mov	r5, r1
 800d4be:	b09d      	sub	sp, #116	; 0x74
 800d4c0:	4614      	mov	r4, r2
 800d4c2:	4698      	mov	r8, r3
 800d4c4:	4606      	mov	r6, r0
 800d4c6:	b118      	cbz	r0, 800d4d0 <_vfiprintf_r+0x18>
 800d4c8:	6983      	ldr	r3, [r0, #24]
 800d4ca:	b90b      	cbnz	r3, 800d4d0 <_vfiprintf_r+0x18>
 800d4cc:	f7ff fec4 	bl	800d258 <__sinit>
 800d4d0:	4b89      	ldr	r3, [pc, #548]	; (800d6f8 <_vfiprintf_r+0x240>)
 800d4d2:	429d      	cmp	r5, r3
 800d4d4:	d11b      	bne.n	800d50e <_vfiprintf_r+0x56>
 800d4d6:	6875      	ldr	r5, [r6, #4]
 800d4d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d4da:	07d9      	lsls	r1, r3, #31
 800d4dc:	d405      	bmi.n	800d4ea <_vfiprintf_r+0x32>
 800d4de:	89ab      	ldrh	r3, [r5, #12]
 800d4e0:	059a      	lsls	r2, r3, #22
 800d4e2:	d402      	bmi.n	800d4ea <_vfiprintf_r+0x32>
 800d4e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d4e6:	f7ff ff67 	bl	800d3b8 <__retarget_lock_acquire_recursive>
 800d4ea:	89ab      	ldrh	r3, [r5, #12]
 800d4ec:	071b      	lsls	r3, r3, #28
 800d4ee:	d501      	bpl.n	800d4f4 <_vfiprintf_r+0x3c>
 800d4f0:	692b      	ldr	r3, [r5, #16]
 800d4f2:	b9eb      	cbnz	r3, 800d530 <_vfiprintf_r+0x78>
 800d4f4:	4629      	mov	r1, r5
 800d4f6:	4630      	mov	r0, r6
 800d4f8:	f000 f960 	bl	800d7bc <__swsetup_r>
 800d4fc:	b1c0      	cbz	r0, 800d530 <_vfiprintf_r+0x78>
 800d4fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d500:	07dc      	lsls	r4, r3, #31
 800d502:	d50e      	bpl.n	800d522 <_vfiprintf_r+0x6a>
 800d504:	f04f 30ff 	mov.w	r0, #4294967295
 800d508:	b01d      	add	sp, #116	; 0x74
 800d50a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d50e:	4b7b      	ldr	r3, [pc, #492]	; (800d6fc <_vfiprintf_r+0x244>)
 800d510:	429d      	cmp	r5, r3
 800d512:	d101      	bne.n	800d518 <_vfiprintf_r+0x60>
 800d514:	68b5      	ldr	r5, [r6, #8]
 800d516:	e7df      	b.n	800d4d8 <_vfiprintf_r+0x20>
 800d518:	4b79      	ldr	r3, [pc, #484]	; (800d700 <_vfiprintf_r+0x248>)
 800d51a:	429d      	cmp	r5, r3
 800d51c:	bf08      	it	eq
 800d51e:	68f5      	ldreq	r5, [r6, #12]
 800d520:	e7da      	b.n	800d4d8 <_vfiprintf_r+0x20>
 800d522:	89ab      	ldrh	r3, [r5, #12]
 800d524:	0598      	lsls	r0, r3, #22
 800d526:	d4ed      	bmi.n	800d504 <_vfiprintf_r+0x4c>
 800d528:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d52a:	f7ff ff46 	bl	800d3ba <__retarget_lock_release_recursive>
 800d52e:	e7e9      	b.n	800d504 <_vfiprintf_r+0x4c>
 800d530:	2300      	movs	r3, #0
 800d532:	9309      	str	r3, [sp, #36]	; 0x24
 800d534:	2320      	movs	r3, #32
 800d536:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d53a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d53e:	2330      	movs	r3, #48	; 0x30
 800d540:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d704 <_vfiprintf_r+0x24c>
 800d544:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d548:	f04f 0901 	mov.w	r9, #1
 800d54c:	4623      	mov	r3, r4
 800d54e:	469a      	mov	sl, r3
 800d550:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d554:	b10a      	cbz	r2, 800d55a <_vfiprintf_r+0xa2>
 800d556:	2a25      	cmp	r2, #37	; 0x25
 800d558:	d1f9      	bne.n	800d54e <_vfiprintf_r+0x96>
 800d55a:	ebba 0b04 	subs.w	fp, sl, r4
 800d55e:	d00b      	beq.n	800d578 <_vfiprintf_r+0xc0>
 800d560:	465b      	mov	r3, fp
 800d562:	4622      	mov	r2, r4
 800d564:	4629      	mov	r1, r5
 800d566:	4630      	mov	r0, r6
 800d568:	f7ff ff94 	bl	800d494 <__sfputs_r>
 800d56c:	3001      	adds	r0, #1
 800d56e:	f000 80aa 	beq.w	800d6c6 <_vfiprintf_r+0x20e>
 800d572:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d574:	445a      	add	r2, fp
 800d576:	9209      	str	r2, [sp, #36]	; 0x24
 800d578:	f89a 3000 	ldrb.w	r3, [sl]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	f000 80a2 	beq.w	800d6c6 <_vfiprintf_r+0x20e>
 800d582:	2300      	movs	r3, #0
 800d584:	f04f 32ff 	mov.w	r2, #4294967295
 800d588:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d58c:	f10a 0a01 	add.w	sl, sl, #1
 800d590:	9304      	str	r3, [sp, #16]
 800d592:	9307      	str	r3, [sp, #28]
 800d594:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d598:	931a      	str	r3, [sp, #104]	; 0x68
 800d59a:	4654      	mov	r4, sl
 800d59c:	2205      	movs	r2, #5
 800d59e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5a2:	4858      	ldr	r0, [pc, #352]	; (800d704 <_vfiprintf_r+0x24c>)
 800d5a4:	f7f2 fe4c 	bl	8000240 <memchr>
 800d5a8:	9a04      	ldr	r2, [sp, #16]
 800d5aa:	b9d8      	cbnz	r0, 800d5e4 <_vfiprintf_r+0x12c>
 800d5ac:	06d1      	lsls	r1, r2, #27
 800d5ae:	bf44      	itt	mi
 800d5b0:	2320      	movmi	r3, #32
 800d5b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d5b6:	0713      	lsls	r3, r2, #28
 800d5b8:	bf44      	itt	mi
 800d5ba:	232b      	movmi	r3, #43	; 0x2b
 800d5bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d5c0:	f89a 3000 	ldrb.w	r3, [sl]
 800d5c4:	2b2a      	cmp	r3, #42	; 0x2a
 800d5c6:	d015      	beq.n	800d5f4 <_vfiprintf_r+0x13c>
 800d5c8:	9a07      	ldr	r2, [sp, #28]
 800d5ca:	4654      	mov	r4, sl
 800d5cc:	2000      	movs	r0, #0
 800d5ce:	f04f 0c0a 	mov.w	ip, #10
 800d5d2:	4621      	mov	r1, r4
 800d5d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d5d8:	3b30      	subs	r3, #48	; 0x30
 800d5da:	2b09      	cmp	r3, #9
 800d5dc:	d94e      	bls.n	800d67c <_vfiprintf_r+0x1c4>
 800d5de:	b1b0      	cbz	r0, 800d60e <_vfiprintf_r+0x156>
 800d5e0:	9207      	str	r2, [sp, #28]
 800d5e2:	e014      	b.n	800d60e <_vfiprintf_r+0x156>
 800d5e4:	eba0 0308 	sub.w	r3, r0, r8
 800d5e8:	fa09 f303 	lsl.w	r3, r9, r3
 800d5ec:	4313      	orrs	r3, r2
 800d5ee:	9304      	str	r3, [sp, #16]
 800d5f0:	46a2      	mov	sl, r4
 800d5f2:	e7d2      	b.n	800d59a <_vfiprintf_r+0xe2>
 800d5f4:	9b03      	ldr	r3, [sp, #12]
 800d5f6:	1d19      	adds	r1, r3, #4
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	9103      	str	r1, [sp, #12]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	bfbb      	ittet	lt
 800d600:	425b      	neglt	r3, r3
 800d602:	f042 0202 	orrlt.w	r2, r2, #2
 800d606:	9307      	strge	r3, [sp, #28]
 800d608:	9307      	strlt	r3, [sp, #28]
 800d60a:	bfb8      	it	lt
 800d60c:	9204      	strlt	r2, [sp, #16]
 800d60e:	7823      	ldrb	r3, [r4, #0]
 800d610:	2b2e      	cmp	r3, #46	; 0x2e
 800d612:	d10c      	bne.n	800d62e <_vfiprintf_r+0x176>
 800d614:	7863      	ldrb	r3, [r4, #1]
 800d616:	2b2a      	cmp	r3, #42	; 0x2a
 800d618:	d135      	bne.n	800d686 <_vfiprintf_r+0x1ce>
 800d61a:	9b03      	ldr	r3, [sp, #12]
 800d61c:	1d1a      	adds	r2, r3, #4
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	9203      	str	r2, [sp, #12]
 800d622:	2b00      	cmp	r3, #0
 800d624:	bfb8      	it	lt
 800d626:	f04f 33ff 	movlt.w	r3, #4294967295
 800d62a:	3402      	adds	r4, #2
 800d62c:	9305      	str	r3, [sp, #20]
 800d62e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d714 <_vfiprintf_r+0x25c>
 800d632:	7821      	ldrb	r1, [r4, #0]
 800d634:	2203      	movs	r2, #3
 800d636:	4650      	mov	r0, sl
 800d638:	f7f2 fe02 	bl	8000240 <memchr>
 800d63c:	b140      	cbz	r0, 800d650 <_vfiprintf_r+0x198>
 800d63e:	2340      	movs	r3, #64	; 0x40
 800d640:	eba0 000a 	sub.w	r0, r0, sl
 800d644:	fa03 f000 	lsl.w	r0, r3, r0
 800d648:	9b04      	ldr	r3, [sp, #16]
 800d64a:	4303      	orrs	r3, r0
 800d64c:	3401      	adds	r4, #1
 800d64e:	9304      	str	r3, [sp, #16]
 800d650:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d654:	482c      	ldr	r0, [pc, #176]	; (800d708 <_vfiprintf_r+0x250>)
 800d656:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d65a:	2206      	movs	r2, #6
 800d65c:	f7f2 fdf0 	bl	8000240 <memchr>
 800d660:	2800      	cmp	r0, #0
 800d662:	d03f      	beq.n	800d6e4 <_vfiprintf_r+0x22c>
 800d664:	4b29      	ldr	r3, [pc, #164]	; (800d70c <_vfiprintf_r+0x254>)
 800d666:	bb1b      	cbnz	r3, 800d6b0 <_vfiprintf_r+0x1f8>
 800d668:	9b03      	ldr	r3, [sp, #12]
 800d66a:	3307      	adds	r3, #7
 800d66c:	f023 0307 	bic.w	r3, r3, #7
 800d670:	3308      	adds	r3, #8
 800d672:	9303      	str	r3, [sp, #12]
 800d674:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d676:	443b      	add	r3, r7
 800d678:	9309      	str	r3, [sp, #36]	; 0x24
 800d67a:	e767      	b.n	800d54c <_vfiprintf_r+0x94>
 800d67c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d680:	460c      	mov	r4, r1
 800d682:	2001      	movs	r0, #1
 800d684:	e7a5      	b.n	800d5d2 <_vfiprintf_r+0x11a>
 800d686:	2300      	movs	r3, #0
 800d688:	3401      	adds	r4, #1
 800d68a:	9305      	str	r3, [sp, #20]
 800d68c:	4619      	mov	r1, r3
 800d68e:	f04f 0c0a 	mov.w	ip, #10
 800d692:	4620      	mov	r0, r4
 800d694:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d698:	3a30      	subs	r2, #48	; 0x30
 800d69a:	2a09      	cmp	r2, #9
 800d69c:	d903      	bls.n	800d6a6 <_vfiprintf_r+0x1ee>
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d0c5      	beq.n	800d62e <_vfiprintf_r+0x176>
 800d6a2:	9105      	str	r1, [sp, #20]
 800d6a4:	e7c3      	b.n	800d62e <_vfiprintf_r+0x176>
 800d6a6:	fb0c 2101 	mla	r1, ip, r1, r2
 800d6aa:	4604      	mov	r4, r0
 800d6ac:	2301      	movs	r3, #1
 800d6ae:	e7f0      	b.n	800d692 <_vfiprintf_r+0x1da>
 800d6b0:	ab03      	add	r3, sp, #12
 800d6b2:	9300      	str	r3, [sp, #0]
 800d6b4:	462a      	mov	r2, r5
 800d6b6:	4b16      	ldr	r3, [pc, #88]	; (800d710 <_vfiprintf_r+0x258>)
 800d6b8:	a904      	add	r1, sp, #16
 800d6ba:	4630      	mov	r0, r6
 800d6bc:	f7fb f9cc 	bl	8008a58 <_printf_float>
 800d6c0:	4607      	mov	r7, r0
 800d6c2:	1c78      	adds	r0, r7, #1
 800d6c4:	d1d6      	bne.n	800d674 <_vfiprintf_r+0x1bc>
 800d6c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d6c8:	07d9      	lsls	r1, r3, #31
 800d6ca:	d405      	bmi.n	800d6d8 <_vfiprintf_r+0x220>
 800d6cc:	89ab      	ldrh	r3, [r5, #12]
 800d6ce:	059a      	lsls	r2, r3, #22
 800d6d0:	d402      	bmi.n	800d6d8 <_vfiprintf_r+0x220>
 800d6d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d6d4:	f7ff fe71 	bl	800d3ba <__retarget_lock_release_recursive>
 800d6d8:	89ab      	ldrh	r3, [r5, #12]
 800d6da:	065b      	lsls	r3, r3, #25
 800d6dc:	f53f af12 	bmi.w	800d504 <_vfiprintf_r+0x4c>
 800d6e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d6e2:	e711      	b.n	800d508 <_vfiprintf_r+0x50>
 800d6e4:	ab03      	add	r3, sp, #12
 800d6e6:	9300      	str	r3, [sp, #0]
 800d6e8:	462a      	mov	r2, r5
 800d6ea:	4b09      	ldr	r3, [pc, #36]	; (800d710 <_vfiprintf_r+0x258>)
 800d6ec:	a904      	add	r1, sp, #16
 800d6ee:	4630      	mov	r0, r6
 800d6f0:	f7fb fc56 	bl	8008fa0 <_printf_i>
 800d6f4:	e7e4      	b.n	800d6c0 <_vfiprintf_r+0x208>
 800d6f6:	bf00      	nop
 800d6f8:	0800e14c 	.word	0x0800e14c
 800d6fc:	0800e16c 	.word	0x0800e16c
 800d700:	0800e12c 	.word	0x0800e12c
 800d704:	0800e0c4 	.word	0x0800e0c4
 800d708:	0800e0ce 	.word	0x0800e0ce
 800d70c:	08008a59 	.word	0x08008a59
 800d710:	0800d495 	.word	0x0800d495
 800d714:	0800e0ca 	.word	0x0800e0ca

0800d718 <__swbuf_r>:
 800d718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d71a:	460e      	mov	r6, r1
 800d71c:	4614      	mov	r4, r2
 800d71e:	4605      	mov	r5, r0
 800d720:	b118      	cbz	r0, 800d72a <__swbuf_r+0x12>
 800d722:	6983      	ldr	r3, [r0, #24]
 800d724:	b90b      	cbnz	r3, 800d72a <__swbuf_r+0x12>
 800d726:	f7ff fd97 	bl	800d258 <__sinit>
 800d72a:	4b21      	ldr	r3, [pc, #132]	; (800d7b0 <__swbuf_r+0x98>)
 800d72c:	429c      	cmp	r4, r3
 800d72e:	d12b      	bne.n	800d788 <__swbuf_r+0x70>
 800d730:	686c      	ldr	r4, [r5, #4]
 800d732:	69a3      	ldr	r3, [r4, #24]
 800d734:	60a3      	str	r3, [r4, #8]
 800d736:	89a3      	ldrh	r3, [r4, #12]
 800d738:	071a      	lsls	r2, r3, #28
 800d73a:	d52f      	bpl.n	800d79c <__swbuf_r+0x84>
 800d73c:	6923      	ldr	r3, [r4, #16]
 800d73e:	b36b      	cbz	r3, 800d79c <__swbuf_r+0x84>
 800d740:	6923      	ldr	r3, [r4, #16]
 800d742:	6820      	ldr	r0, [r4, #0]
 800d744:	1ac0      	subs	r0, r0, r3
 800d746:	6963      	ldr	r3, [r4, #20]
 800d748:	b2f6      	uxtb	r6, r6
 800d74a:	4283      	cmp	r3, r0
 800d74c:	4637      	mov	r7, r6
 800d74e:	dc04      	bgt.n	800d75a <__swbuf_r+0x42>
 800d750:	4621      	mov	r1, r4
 800d752:	4628      	mov	r0, r5
 800d754:	f7ff fcec 	bl	800d130 <_fflush_r>
 800d758:	bb30      	cbnz	r0, 800d7a8 <__swbuf_r+0x90>
 800d75a:	68a3      	ldr	r3, [r4, #8]
 800d75c:	3b01      	subs	r3, #1
 800d75e:	60a3      	str	r3, [r4, #8]
 800d760:	6823      	ldr	r3, [r4, #0]
 800d762:	1c5a      	adds	r2, r3, #1
 800d764:	6022      	str	r2, [r4, #0]
 800d766:	701e      	strb	r6, [r3, #0]
 800d768:	6963      	ldr	r3, [r4, #20]
 800d76a:	3001      	adds	r0, #1
 800d76c:	4283      	cmp	r3, r0
 800d76e:	d004      	beq.n	800d77a <__swbuf_r+0x62>
 800d770:	89a3      	ldrh	r3, [r4, #12]
 800d772:	07db      	lsls	r3, r3, #31
 800d774:	d506      	bpl.n	800d784 <__swbuf_r+0x6c>
 800d776:	2e0a      	cmp	r6, #10
 800d778:	d104      	bne.n	800d784 <__swbuf_r+0x6c>
 800d77a:	4621      	mov	r1, r4
 800d77c:	4628      	mov	r0, r5
 800d77e:	f7ff fcd7 	bl	800d130 <_fflush_r>
 800d782:	b988      	cbnz	r0, 800d7a8 <__swbuf_r+0x90>
 800d784:	4638      	mov	r0, r7
 800d786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d788:	4b0a      	ldr	r3, [pc, #40]	; (800d7b4 <__swbuf_r+0x9c>)
 800d78a:	429c      	cmp	r4, r3
 800d78c:	d101      	bne.n	800d792 <__swbuf_r+0x7a>
 800d78e:	68ac      	ldr	r4, [r5, #8]
 800d790:	e7cf      	b.n	800d732 <__swbuf_r+0x1a>
 800d792:	4b09      	ldr	r3, [pc, #36]	; (800d7b8 <__swbuf_r+0xa0>)
 800d794:	429c      	cmp	r4, r3
 800d796:	bf08      	it	eq
 800d798:	68ec      	ldreq	r4, [r5, #12]
 800d79a:	e7ca      	b.n	800d732 <__swbuf_r+0x1a>
 800d79c:	4621      	mov	r1, r4
 800d79e:	4628      	mov	r0, r5
 800d7a0:	f000 f80c 	bl	800d7bc <__swsetup_r>
 800d7a4:	2800      	cmp	r0, #0
 800d7a6:	d0cb      	beq.n	800d740 <__swbuf_r+0x28>
 800d7a8:	f04f 37ff 	mov.w	r7, #4294967295
 800d7ac:	e7ea      	b.n	800d784 <__swbuf_r+0x6c>
 800d7ae:	bf00      	nop
 800d7b0:	0800e14c 	.word	0x0800e14c
 800d7b4:	0800e16c 	.word	0x0800e16c
 800d7b8:	0800e12c 	.word	0x0800e12c

0800d7bc <__swsetup_r>:
 800d7bc:	4b32      	ldr	r3, [pc, #200]	; (800d888 <__swsetup_r+0xcc>)
 800d7be:	b570      	push	{r4, r5, r6, lr}
 800d7c0:	681d      	ldr	r5, [r3, #0]
 800d7c2:	4606      	mov	r6, r0
 800d7c4:	460c      	mov	r4, r1
 800d7c6:	b125      	cbz	r5, 800d7d2 <__swsetup_r+0x16>
 800d7c8:	69ab      	ldr	r3, [r5, #24]
 800d7ca:	b913      	cbnz	r3, 800d7d2 <__swsetup_r+0x16>
 800d7cc:	4628      	mov	r0, r5
 800d7ce:	f7ff fd43 	bl	800d258 <__sinit>
 800d7d2:	4b2e      	ldr	r3, [pc, #184]	; (800d88c <__swsetup_r+0xd0>)
 800d7d4:	429c      	cmp	r4, r3
 800d7d6:	d10f      	bne.n	800d7f8 <__swsetup_r+0x3c>
 800d7d8:	686c      	ldr	r4, [r5, #4]
 800d7da:	89a3      	ldrh	r3, [r4, #12]
 800d7dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d7e0:	0719      	lsls	r1, r3, #28
 800d7e2:	d42c      	bmi.n	800d83e <__swsetup_r+0x82>
 800d7e4:	06dd      	lsls	r5, r3, #27
 800d7e6:	d411      	bmi.n	800d80c <__swsetup_r+0x50>
 800d7e8:	2309      	movs	r3, #9
 800d7ea:	6033      	str	r3, [r6, #0]
 800d7ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d7f0:	81a3      	strh	r3, [r4, #12]
 800d7f2:	f04f 30ff 	mov.w	r0, #4294967295
 800d7f6:	e03e      	b.n	800d876 <__swsetup_r+0xba>
 800d7f8:	4b25      	ldr	r3, [pc, #148]	; (800d890 <__swsetup_r+0xd4>)
 800d7fa:	429c      	cmp	r4, r3
 800d7fc:	d101      	bne.n	800d802 <__swsetup_r+0x46>
 800d7fe:	68ac      	ldr	r4, [r5, #8]
 800d800:	e7eb      	b.n	800d7da <__swsetup_r+0x1e>
 800d802:	4b24      	ldr	r3, [pc, #144]	; (800d894 <__swsetup_r+0xd8>)
 800d804:	429c      	cmp	r4, r3
 800d806:	bf08      	it	eq
 800d808:	68ec      	ldreq	r4, [r5, #12]
 800d80a:	e7e6      	b.n	800d7da <__swsetup_r+0x1e>
 800d80c:	0758      	lsls	r0, r3, #29
 800d80e:	d512      	bpl.n	800d836 <__swsetup_r+0x7a>
 800d810:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d812:	b141      	cbz	r1, 800d826 <__swsetup_r+0x6a>
 800d814:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d818:	4299      	cmp	r1, r3
 800d81a:	d002      	beq.n	800d822 <__swsetup_r+0x66>
 800d81c:	4630      	mov	r0, r6
 800d81e:	f7fe fd51 	bl	800c2c4 <_free_r>
 800d822:	2300      	movs	r3, #0
 800d824:	6363      	str	r3, [r4, #52]	; 0x34
 800d826:	89a3      	ldrh	r3, [r4, #12]
 800d828:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d82c:	81a3      	strh	r3, [r4, #12]
 800d82e:	2300      	movs	r3, #0
 800d830:	6063      	str	r3, [r4, #4]
 800d832:	6923      	ldr	r3, [r4, #16]
 800d834:	6023      	str	r3, [r4, #0]
 800d836:	89a3      	ldrh	r3, [r4, #12]
 800d838:	f043 0308 	orr.w	r3, r3, #8
 800d83c:	81a3      	strh	r3, [r4, #12]
 800d83e:	6923      	ldr	r3, [r4, #16]
 800d840:	b94b      	cbnz	r3, 800d856 <__swsetup_r+0x9a>
 800d842:	89a3      	ldrh	r3, [r4, #12]
 800d844:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d848:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d84c:	d003      	beq.n	800d856 <__swsetup_r+0x9a>
 800d84e:	4621      	mov	r1, r4
 800d850:	4630      	mov	r0, r6
 800d852:	f000 f84d 	bl	800d8f0 <__smakebuf_r>
 800d856:	89a0      	ldrh	r0, [r4, #12]
 800d858:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d85c:	f010 0301 	ands.w	r3, r0, #1
 800d860:	d00a      	beq.n	800d878 <__swsetup_r+0xbc>
 800d862:	2300      	movs	r3, #0
 800d864:	60a3      	str	r3, [r4, #8]
 800d866:	6963      	ldr	r3, [r4, #20]
 800d868:	425b      	negs	r3, r3
 800d86a:	61a3      	str	r3, [r4, #24]
 800d86c:	6923      	ldr	r3, [r4, #16]
 800d86e:	b943      	cbnz	r3, 800d882 <__swsetup_r+0xc6>
 800d870:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d874:	d1ba      	bne.n	800d7ec <__swsetup_r+0x30>
 800d876:	bd70      	pop	{r4, r5, r6, pc}
 800d878:	0781      	lsls	r1, r0, #30
 800d87a:	bf58      	it	pl
 800d87c:	6963      	ldrpl	r3, [r4, #20]
 800d87e:	60a3      	str	r3, [r4, #8]
 800d880:	e7f4      	b.n	800d86c <__swsetup_r+0xb0>
 800d882:	2000      	movs	r0, #0
 800d884:	e7f7      	b.n	800d876 <__swsetup_r+0xba>
 800d886:	bf00      	nop
 800d888:	2000000c 	.word	0x2000000c
 800d88c:	0800e14c 	.word	0x0800e14c
 800d890:	0800e16c 	.word	0x0800e16c
 800d894:	0800e12c 	.word	0x0800e12c

0800d898 <abort>:
 800d898:	b508      	push	{r3, lr}
 800d89a:	2006      	movs	r0, #6
 800d89c:	f000 f898 	bl	800d9d0 <raise>
 800d8a0:	2001      	movs	r0, #1
 800d8a2:	f7f4 f90f 	bl	8001ac4 <_exit>

0800d8a6 <__swhatbuf_r>:
 800d8a6:	b570      	push	{r4, r5, r6, lr}
 800d8a8:	460e      	mov	r6, r1
 800d8aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8ae:	2900      	cmp	r1, #0
 800d8b0:	b096      	sub	sp, #88	; 0x58
 800d8b2:	4614      	mov	r4, r2
 800d8b4:	461d      	mov	r5, r3
 800d8b6:	da08      	bge.n	800d8ca <__swhatbuf_r+0x24>
 800d8b8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d8bc:	2200      	movs	r2, #0
 800d8be:	602a      	str	r2, [r5, #0]
 800d8c0:	061a      	lsls	r2, r3, #24
 800d8c2:	d410      	bmi.n	800d8e6 <__swhatbuf_r+0x40>
 800d8c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d8c8:	e00e      	b.n	800d8e8 <__swhatbuf_r+0x42>
 800d8ca:	466a      	mov	r2, sp
 800d8cc:	f000 f89c 	bl	800da08 <_fstat_r>
 800d8d0:	2800      	cmp	r0, #0
 800d8d2:	dbf1      	blt.n	800d8b8 <__swhatbuf_r+0x12>
 800d8d4:	9a01      	ldr	r2, [sp, #4]
 800d8d6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d8da:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d8de:	425a      	negs	r2, r3
 800d8e0:	415a      	adcs	r2, r3
 800d8e2:	602a      	str	r2, [r5, #0]
 800d8e4:	e7ee      	b.n	800d8c4 <__swhatbuf_r+0x1e>
 800d8e6:	2340      	movs	r3, #64	; 0x40
 800d8e8:	2000      	movs	r0, #0
 800d8ea:	6023      	str	r3, [r4, #0]
 800d8ec:	b016      	add	sp, #88	; 0x58
 800d8ee:	bd70      	pop	{r4, r5, r6, pc}

0800d8f0 <__smakebuf_r>:
 800d8f0:	898b      	ldrh	r3, [r1, #12]
 800d8f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d8f4:	079d      	lsls	r5, r3, #30
 800d8f6:	4606      	mov	r6, r0
 800d8f8:	460c      	mov	r4, r1
 800d8fa:	d507      	bpl.n	800d90c <__smakebuf_r+0x1c>
 800d8fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d900:	6023      	str	r3, [r4, #0]
 800d902:	6123      	str	r3, [r4, #16]
 800d904:	2301      	movs	r3, #1
 800d906:	6163      	str	r3, [r4, #20]
 800d908:	b002      	add	sp, #8
 800d90a:	bd70      	pop	{r4, r5, r6, pc}
 800d90c:	ab01      	add	r3, sp, #4
 800d90e:	466a      	mov	r2, sp
 800d910:	f7ff ffc9 	bl	800d8a6 <__swhatbuf_r>
 800d914:	9900      	ldr	r1, [sp, #0]
 800d916:	4605      	mov	r5, r0
 800d918:	4630      	mov	r0, r6
 800d91a:	f7fe fd3f 	bl	800c39c <_malloc_r>
 800d91e:	b948      	cbnz	r0, 800d934 <__smakebuf_r+0x44>
 800d920:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d924:	059a      	lsls	r2, r3, #22
 800d926:	d4ef      	bmi.n	800d908 <__smakebuf_r+0x18>
 800d928:	f023 0303 	bic.w	r3, r3, #3
 800d92c:	f043 0302 	orr.w	r3, r3, #2
 800d930:	81a3      	strh	r3, [r4, #12]
 800d932:	e7e3      	b.n	800d8fc <__smakebuf_r+0xc>
 800d934:	4b0d      	ldr	r3, [pc, #52]	; (800d96c <__smakebuf_r+0x7c>)
 800d936:	62b3      	str	r3, [r6, #40]	; 0x28
 800d938:	89a3      	ldrh	r3, [r4, #12]
 800d93a:	6020      	str	r0, [r4, #0]
 800d93c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d940:	81a3      	strh	r3, [r4, #12]
 800d942:	9b00      	ldr	r3, [sp, #0]
 800d944:	6163      	str	r3, [r4, #20]
 800d946:	9b01      	ldr	r3, [sp, #4]
 800d948:	6120      	str	r0, [r4, #16]
 800d94a:	b15b      	cbz	r3, 800d964 <__smakebuf_r+0x74>
 800d94c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d950:	4630      	mov	r0, r6
 800d952:	f000 f86b 	bl	800da2c <_isatty_r>
 800d956:	b128      	cbz	r0, 800d964 <__smakebuf_r+0x74>
 800d958:	89a3      	ldrh	r3, [r4, #12]
 800d95a:	f023 0303 	bic.w	r3, r3, #3
 800d95e:	f043 0301 	orr.w	r3, r3, #1
 800d962:	81a3      	strh	r3, [r4, #12]
 800d964:	89a0      	ldrh	r0, [r4, #12]
 800d966:	4305      	orrs	r5, r0
 800d968:	81a5      	strh	r5, [r4, #12]
 800d96a:	e7cd      	b.n	800d908 <__smakebuf_r+0x18>
 800d96c:	0800d1f1 	.word	0x0800d1f1

0800d970 <_malloc_usable_size_r>:
 800d970:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d974:	1f18      	subs	r0, r3, #4
 800d976:	2b00      	cmp	r3, #0
 800d978:	bfbc      	itt	lt
 800d97a:	580b      	ldrlt	r3, [r1, r0]
 800d97c:	18c0      	addlt	r0, r0, r3
 800d97e:	4770      	bx	lr

0800d980 <_raise_r>:
 800d980:	291f      	cmp	r1, #31
 800d982:	b538      	push	{r3, r4, r5, lr}
 800d984:	4604      	mov	r4, r0
 800d986:	460d      	mov	r5, r1
 800d988:	d904      	bls.n	800d994 <_raise_r+0x14>
 800d98a:	2316      	movs	r3, #22
 800d98c:	6003      	str	r3, [r0, #0]
 800d98e:	f04f 30ff 	mov.w	r0, #4294967295
 800d992:	bd38      	pop	{r3, r4, r5, pc}
 800d994:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d996:	b112      	cbz	r2, 800d99e <_raise_r+0x1e>
 800d998:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d99c:	b94b      	cbnz	r3, 800d9b2 <_raise_r+0x32>
 800d99e:	4620      	mov	r0, r4
 800d9a0:	f000 f830 	bl	800da04 <_getpid_r>
 800d9a4:	462a      	mov	r2, r5
 800d9a6:	4601      	mov	r1, r0
 800d9a8:	4620      	mov	r0, r4
 800d9aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d9ae:	f000 b817 	b.w	800d9e0 <_kill_r>
 800d9b2:	2b01      	cmp	r3, #1
 800d9b4:	d00a      	beq.n	800d9cc <_raise_r+0x4c>
 800d9b6:	1c59      	adds	r1, r3, #1
 800d9b8:	d103      	bne.n	800d9c2 <_raise_r+0x42>
 800d9ba:	2316      	movs	r3, #22
 800d9bc:	6003      	str	r3, [r0, #0]
 800d9be:	2001      	movs	r0, #1
 800d9c0:	e7e7      	b.n	800d992 <_raise_r+0x12>
 800d9c2:	2400      	movs	r4, #0
 800d9c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d9c8:	4628      	mov	r0, r5
 800d9ca:	4798      	blx	r3
 800d9cc:	2000      	movs	r0, #0
 800d9ce:	e7e0      	b.n	800d992 <_raise_r+0x12>

0800d9d0 <raise>:
 800d9d0:	4b02      	ldr	r3, [pc, #8]	; (800d9dc <raise+0xc>)
 800d9d2:	4601      	mov	r1, r0
 800d9d4:	6818      	ldr	r0, [r3, #0]
 800d9d6:	f7ff bfd3 	b.w	800d980 <_raise_r>
 800d9da:	bf00      	nop
 800d9dc:	2000000c 	.word	0x2000000c

0800d9e0 <_kill_r>:
 800d9e0:	b538      	push	{r3, r4, r5, lr}
 800d9e2:	4d07      	ldr	r5, [pc, #28]	; (800da00 <_kill_r+0x20>)
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	4604      	mov	r4, r0
 800d9e8:	4608      	mov	r0, r1
 800d9ea:	4611      	mov	r1, r2
 800d9ec:	602b      	str	r3, [r5, #0]
 800d9ee:	f7f4 f859 	bl	8001aa4 <_kill>
 800d9f2:	1c43      	adds	r3, r0, #1
 800d9f4:	d102      	bne.n	800d9fc <_kill_r+0x1c>
 800d9f6:	682b      	ldr	r3, [r5, #0]
 800d9f8:	b103      	cbz	r3, 800d9fc <_kill_r+0x1c>
 800d9fa:	6023      	str	r3, [r4, #0]
 800d9fc:	bd38      	pop	{r3, r4, r5, pc}
 800d9fe:	bf00      	nop
 800da00:	2000044c 	.word	0x2000044c

0800da04 <_getpid_r>:
 800da04:	f7f4 b846 	b.w	8001a94 <_getpid>

0800da08 <_fstat_r>:
 800da08:	b538      	push	{r3, r4, r5, lr}
 800da0a:	4d07      	ldr	r5, [pc, #28]	; (800da28 <_fstat_r+0x20>)
 800da0c:	2300      	movs	r3, #0
 800da0e:	4604      	mov	r4, r0
 800da10:	4608      	mov	r0, r1
 800da12:	4611      	mov	r1, r2
 800da14:	602b      	str	r3, [r5, #0]
 800da16:	f7f4 f8a4 	bl	8001b62 <_fstat>
 800da1a:	1c43      	adds	r3, r0, #1
 800da1c:	d102      	bne.n	800da24 <_fstat_r+0x1c>
 800da1e:	682b      	ldr	r3, [r5, #0]
 800da20:	b103      	cbz	r3, 800da24 <_fstat_r+0x1c>
 800da22:	6023      	str	r3, [r4, #0]
 800da24:	bd38      	pop	{r3, r4, r5, pc}
 800da26:	bf00      	nop
 800da28:	2000044c 	.word	0x2000044c

0800da2c <_isatty_r>:
 800da2c:	b538      	push	{r3, r4, r5, lr}
 800da2e:	4d06      	ldr	r5, [pc, #24]	; (800da48 <_isatty_r+0x1c>)
 800da30:	2300      	movs	r3, #0
 800da32:	4604      	mov	r4, r0
 800da34:	4608      	mov	r0, r1
 800da36:	602b      	str	r3, [r5, #0]
 800da38:	f7f4 f8a3 	bl	8001b82 <_isatty>
 800da3c:	1c43      	adds	r3, r0, #1
 800da3e:	d102      	bne.n	800da46 <_isatty_r+0x1a>
 800da40:	682b      	ldr	r3, [r5, #0]
 800da42:	b103      	cbz	r3, 800da46 <_isatty_r+0x1a>
 800da44:	6023      	str	r3, [r4, #0]
 800da46:	bd38      	pop	{r3, r4, r5, pc}
 800da48:	2000044c 	.word	0x2000044c

0800da4c <_init>:
 800da4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da4e:	bf00      	nop
 800da50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da52:	bc08      	pop	{r3}
 800da54:	469e      	mov	lr, r3
 800da56:	4770      	bx	lr

0800da58 <_fini>:
 800da58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da5a:	bf00      	nop
 800da5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da5e:	bc08      	pop	{r3}
 800da60:	469e      	mov	lr, r3
 800da62:	4770      	bx	lr
