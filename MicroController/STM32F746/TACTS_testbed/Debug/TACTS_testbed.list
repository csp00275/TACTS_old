
TACTS_testbed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013fa4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009e4  08014178  08014178  00024178  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014b5c  08014b5c  0003049c  2**0
                  CONTENTS
  4 .ARM          00000008  08014b5c  08014b5c  00024b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014b64  08014b64  0003049c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014b64  08014b64  00024b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014b68  08014b68  00024b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000049c  20000000  08014b6c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002dc  2000049c  08015008  0003049c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000778  08015008  00030778  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003049c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020f37  00000000  00000000  000304cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ac5  00000000  00000000  00051403  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001750  00000000  00000000  00054ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015b8  00000000  00000000  00056618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029826  00000000  00000000  00057bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022013  00000000  00000000  000813f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f96f6  00000000  00000000  000a3409  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019caff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000079cc  00000000  00000000  0019cb50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000049c 	.word	0x2000049c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801415c 	.word	0x0801415c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200004a0 	.word	0x200004a0
 800020c:	0801415c 	.word	0x0801415c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08a      	sub	sp, #40	; 0x28
 800103c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	605a      	str	r2, [r3, #4]
 8001048:	609a      	str	r2, [r3, #8]
 800104a:	60da      	str	r2, [r3, #12]
 800104c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800104e:	4b59      	ldr	r3, [pc, #356]	; (80011b4 <MX_GPIO_Init+0x17c>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	4a58      	ldr	r2, [pc, #352]	; (80011b4 <MX_GPIO_Init+0x17c>)
 8001054:	f043 0302 	orr.w	r3, r3, #2
 8001058:	6313      	str	r3, [r2, #48]	; 0x30
 800105a:	4b56      	ldr	r3, [pc, #344]	; (80011b4 <MX_GPIO_Init+0x17c>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	f003 0302 	and.w	r3, r3, #2
 8001062:	613b      	str	r3, [r7, #16]
 8001064:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001066:	4b53      	ldr	r3, [pc, #332]	; (80011b4 <MX_GPIO_Init+0x17c>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a52      	ldr	r2, [pc, #328]	; (80011b4 <MX_GPIO_Init+0x17c>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b50      	ldr	r3, [pc, #320]	; (80011b4 <MX_GPIO_Init+0x17c>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800107e:	4b4d      	ldr	r3, [pc, #308]	; (80011b4 <MX_GPIO_Init+0x17c>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	4a4c      	ldr	r2, [pc, #304]	; (80011b4 <MX_GPIO_Init+0x17c>)
 8001084:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001088:	6313      	str	r3, [r2, #48]	; 0x30
 800108a:	4b4a      	ldr	r3, [pc, #296]	; (80011b4 <MX_GPIO_Init+0x17c>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001096:	4b47      	ldr	r3, [pc, #284]	; (80011b4 <MX_GPIO_Init+0x17c>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	4a46      	ldr	r2, [pc, #280]	; (80011b4 <MX_GPIO_Init+0x17c>)
 800109c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010a0:	6313      	str	r3, [r2, #48]	; 0x30
 80010a2:	4b44      	ldr	r3, [pc, #272]	; (80011b4 <MX_GPIO_Init+0x17c>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010ae:	4b41      	ldr	r3, [pc, #260]	; (80011b4 <MX_GPIO_Init+0x17c>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	4a40      	ldr	r2, [pc, #256]	; (80011b4 <MX_GPIO_Init+0x17c>)
 80010b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010b8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ba:	4b3e      	ldr	r3, [pc, #248]	; (80011b4 <MX_GPIO_Init+0x17c>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010c2:	603b      	str	r3, [r7, #0]
 80010c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80010c6:	2200      	movs	r2, #0
 80010c8:	2110      	movs	r1, #16
 80010ca:	483b      	ldr	r0, [pc, #236]	; (80011b8 <MX_GPIO_Init+0x180>)
 80010cc:	f002 fc40 	bl	8003950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0, GPIO_PIN_RESET);
 80010d0:	2200      	movs	r2, #0
 80010d2:	210f      	movs	r1, #15
 80010d4:	4839      	ldr	r0, [pc, #228]	; (80011bc <MX_GPIO_Init+0x184>)
 80010d6:	f002 fc3b 	bl	8003950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7|GPIO_PIN_6, GPIO_PIN_RESET);
 80010da:	2200      	movs	r2, #0
 80010dc:	21c0      	movs	r1, #192	; 0xc0
 80010de:	4838      	ldr	r0, [pc, #224]	; (80011c0 <MX_GPIO_Init+0x188>)
 80010e0:	f002 fc36 	bl	8003950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80010e4:	2310      	movs	r3, #16
 80010e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e8:	2301      	movs	r3, #1
 80010ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f0:	2300      	movs	r3, #0
 80010f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	4619      	mov	r1, r3
 80010fa:	482f      	ldr	r0, [pc, #188]	; (80011b8 <MX_GPIO_Init+0x180>)
 80010fc:	f002 f898 	bl	8003230 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI3 PI2 PI1 PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0;
 8001100:	230f      	movs	r3, #15
 8001102:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001104:	2301      	movs	r3, #1
 8001106:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110c:	2300      	movs	r3, #0
 800110e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	4619      	mov	r1, r3
 8001116:	4829      	ldr	r0, [pc, #164]	; (80011bc <MX_GPIO_Init+0x184>)
 8001118:	f002 f88a 	bl	8003230 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800111c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001120:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001122:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001126:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	4619      	mov	r1, r3
 8001132:	4824      	ldr	r0, [pc, #144]	; (80011c4 <MX_GPIO_Init+0x18c>)
 8001134:	f002 f87c 	bl	8003230 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001138:	23c0      	movs	r3, #192	; 0xc0
 800113a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113c:	2301      	movs	r3, #1
 800113e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001144:	2300      	movs	r3, #0
 8001146:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	4619      	mov	r1, r3
 800114e:	481c      	ldr	r0, [pc, #112]	; (80011c0 <MX_GPIO_Init+0x188>)
 8001150:	f002 f86e 	bl	8003230 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001154:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001158:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800115a:	2300      	movs	r3, #0
 800115c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001162:	f107 0314 	add.w	r3, r7, #20
 8001166:	4619      	mov	r1, r3
 8001168:	4813      	ldr	r0, [pc, #76]	; (80011b8 <MX_GPIO_Init+0x180>)
 800116a:	f002 f861 	bl	8003230 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800116e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001172:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001174:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001178:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117e:	f107 0314 	add.w	r3, r7, #20
 8001182:	4619      	mov	r1, r3
 8001184:	480c      	ldr	r0, [pc, #48]	; (80011b8 <MX_GPIO_Init+0x180>)
 8001186:	f002 f853 	bl	8003230 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800118a:	2200      	movs	r2, #0
 800118c:	2100      	movs	r1, #0
 800118e:	2017      	movs	r0, #23
 8001190:	f001 ff6c 	bl	800306c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001194:	2017      	movs	r0, #23
 8001196:	f001 ff95 	bl	80030c4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800119a:	2200      	movs	r2, #0
 800119c:	2100      	movs	r1, #0
 800119e:	2028      	movs	r0, #40	; 0x28
 80011a0:	f001 ff64 	bl	800306c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011a4:	2028      	movs	r0, #40	; 0x28
 80011a6:	f001 ff8d 	bl	80030c4 <HAL_NVIC_EnableIRQ>

}
 80011aa:	bf00      	nop
 80011ac:	3728      	adds	r7, #40	; 0x28
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40020400 	.word	0x40020400
 80011bc:	40022000 	.word	0x40022000
 80011c0:	40021800 	.word	0x40021800
 80011c4:	40020000 	.word	0x40020000

080011c8 <HX711_Init>:




void HX711_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  // Set the SCK pin to low
  HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_RESET);
 80011cc:	2200      	movs	r2, #0
 80011ce:	2102      	movs	r1, #2
 80011d0:	4802      	ldr	r0, [pc, #8]	; (80011dc <HX711_Init+0x14>)
 80011d2:	f002 fbbd 	bl	8003950 <HAL_GPIO_WritePin>
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40022000 	.word	0x40022000

080011e0 <Read_HX711>:

int32_t Read_HX711(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
  int32_t data = 0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	607b      	str	r3, [r7, #4]

  // Wait until the DT pin goes low
  while (HAL_GPIO_ReadPin(HX711_DT_GPIO_Port, HX711_DT_Pin) == GPIO_PIN_SET);
 80011ea:	bf00      	nop
 80011ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011f0:	4820      	ldr	r0, [pc, #128]	; (8001274 <Read_HX711+0x94>)
 80011f2:	f002 fb8d 	bl	8003910 <HAL_GPIO_ReadPin>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d0f7      	beq.n	80011ec <Read_HX711+0xc>

  // Read the 24-bit data
  for (int i = 0; i < 24; i++)
 80011fc:	2300      	movs	r3, #0
 80011fe:	603b      	str	r3, [r7, #0]
 8001200:	e020      	b.n	8001244 <Read_HX711+0x64>
  {
    // Generate a clock pulse on SCK pin
    HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_SET);
 8001202:	2201      	movs	r2, #1
 8001204:	2102      	movs	r1, #2
 8001206:	481c      	ldr	r0, [pc, #112]	; (8001278 <Read_HX711+0x98>)
 8001208:	f002 fba2 	bl	8003950 <HAL_GPIO_WritePin>
    DelayMicroseconds(1);
 800120c:	2001      	movs	r0, #1
 800120e:	f000 f86f 	bl	80012f0 <DelayMicroseconds>
    data = (data << 1);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	607b      	str	r3, [r7, #4]
    if (HAL_GPIO_ReadPin(HX711_DT_GPIO_Port, HX711_DT_Pin) == GPIO_PIN_SET)
 8001218:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800121c:	4815      	ldr	r0, [pc, #84]	; (8001274 <Read_HX711+0x94>)
 800121e:	f002 fb77 	bl	8003910 <HAL_GPIO_ReadPin>
 8001222:	4603      	mov	r3, r0
 8001224:	2b01      	cmp	r3, #1
 8001226:	d102      	bne.n	800122e <Read_HX711+0x4e>
    {
      data++;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3301      	adds	r3, #1
 800122c:	607b      	str	r3, [r7, #4]
    }
    HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_RESET);
 800122e:	2200      	movs	r2, #0
 8001230:	2102      	movs	r1, #2
 8001232:	4811      	ldr	r0, [pc, #68]	; (8001278 <Read_HX711+0x98>)
 8001234:	f002 fb8c 	bl	8003950 <HAL_GPIO_WritePin>
    DelayMicroseconds(1);
 8001238:	2001      	movs	r0, #1
 800123a:	f000 f859 	bl	80012f0 <DelayMicroseconds>
  for (int i = 0; i < 24; i++)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	3301      	adds	r3, #1
 8001242:	603b      	str	r3, [r7, #0]
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	2b17      	cmp	r3, #23
 8001248:	dddb      	ble.n	8001202 <Read_HX711+0x22>
  }

  // Generate an additional 25th pulse to set the HX711 back to idle mode
  HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_SET);
 800124a:	2201      	movs	r2, #1
 800124c:	2102      	movs	r1, #2
 800124e:	480a      	ldr	r0, [pc, #40]	; (8001278 <Read_HX711+0x98>)
 8001250:	f002 fb7e 	bl	8003950 <HAL_GPIO_WritePin>
  DelayMicroseconds(1);
 8001254:	2001      	movs	r0, #1
 8001256:	f000 f84b 	bl	80012f0 <DelayMicroseconds>
  HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_RESET);
 800125a:	2200      	movs	r2, #0
 800125c:	2102      	movs	r1, #2
 800125e:	4806      	ldr	r0, [pc, #24]	; (8001278 <Read_HX711+0x98>)
 8001260:	f002 fb76 	bl	8003950 <HAL_GPIO_WritePin>
  DelayMicroseconds(1);
 8001264:	2001      	movs	r0, #1
 8001266:	f000 f843 	bl	80012f0 <DelayMicroseconds>


  // Return the 24-bit data
  return data;
 800126a:	687b      	ldr	r3, [r7, #4]
}
 800126c:	4618      	mov	r0, r3
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40020400 	.word	0x40020400
 8001278:	40022000 	.word	0x40022000

0800127c <UART_SendWeight_g>:

void UART_SendWeight_g(float rawData,float loadcell_slope,float loadcell_bias)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b090      	sub	sp, #64	; 0x40
 8001280:	af00      	add	r7, sp, #0
 8001282:	ed87 0a03 	vstr	s0, [r7, #12]
 8001286:	edc7 0a02 	vstr	s1, [r7, #8]
 800128a:	ed87 1a01 	vstr	s2, [r7, #4]
  float weight = loadcell_slope * rawData  + loadcell_bias;
 800128e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001292:	edd7 7a03 	vldr	s15, [r7, #12]
 8001296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800129a:	ed97 7a01 	vldr	s14, [r7, #4]
 800129e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012a2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
  char buffer[32];
  int len = sprintf(buffer, "Weight(g):");
 80012a6:	f107 0314 	add.w	r3, r7, #20
 80012aa:	490e      	ldr	r1, [pc, #56]	; (80012e4 <UART_SendWeight_g+0x68>)
 80012ac:	4618      	mov	r0, r3
 80012ae:	f00e fd35 	bl	800fd1c <siprintf>
 80012b2:	63b8      	str	r0, [r7, #56]	; 0x38
  int data = sprintf(buffer, "%.2f", weight);
 80012b4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80012b6:	f7ff f967 	bl	8000588 <__aeabi_f2d>
 80012ba:	4602      	mov	r2, r0
 80012bc:	460b      	mov	r3, r1
 80012be:	f107 0014 	add.w	r0, r7, #20
 80012c2:	4909      	ldr	r1, [pc, #36]	; (80012e8 <UART_SendWeight_g+0x6c>)
 80012c4:	f00e fd2a 	bl	800fd1c <siprintf>
 80012c8:	6378      	str	r0, [r7, #52]	; 0x34

  // Send the buffer content via UART
#if 0
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, len, 1000);
#endif
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, data, 1000);
 80012ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	f107 0114 	add.w	r1, r7, #20
 80012d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012d6:	4805      	ldr	r0, [pc, #20]	; (80012ec <UART_SendWeight_g+0x70>)
 80012d8:	f007 fa5c 	bl	8008794 <HAL_UART_Transmit>
}
 80012dc:	bf00      	nop
 80012de:	3740      	adds	r7, #64	; 0x40
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	08014178 	.word	0x08014178
 80012e8:	08014184 	.word	0x08014184
 80012ec:	2000069c 	.word	0x2000069c

080012f0 <DelayMicroseconds>:

  // Send the buffer content via UART
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, len, 1000);
}
void DelayMicroseconds(uint32_t microseconds)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  uint32_t ticks = microseconds;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	60fb      	str	r3, [r7, #12]
  while (ticks--)
 80012fc:	e000      	b.n	8001300 <DelayMicroseconds+0x10>
  {
    __NOP();
 80012fe:	bf00      	nop
  while (ticks--)
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	1e5a      	subs	r2, r3, #1
 8001304:	60fa      	str	r2, [r7, #12]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d1f9      	bne.n	80012fe <DelayMicroseconds+0xe>
  }
}
 800130a:	bf00      	nop
 800130c:	bf00      	nop
 800130e:	3714      	adds	r7, #20
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800131c:	4b1b      	ldr	r3, [pc, #108]	; (800138c <MX_I2C1_Init+0x74>)
 800131e:	4a1c      	ldr	r2, [pc, #112]	; (8001390 <MX_I2C1_Init+0x78>)
 8001320:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 8001322:	4b1a      	ldr	r3, [pc, #104]	; (800138c <MX_I2C1_Init+0x74>)
 8001324:	4a1b      	ldr	r2, [pc, #108]	; (8001394 <MX_I2C1_Init+0x7c>)
 8001326:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001328:	4b18      	ldr	r3, [pc, #96]	; (800138c <MX_I2C1_Init+0x74>)
 800132a:	2200      	movs	r2, #0
 800132c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800132e:	4b17      	ldr	r3, [pc, #92]	; (800138c <MX_I2C1_Init+0x74>)
 8001330:	2201      	movs	r2, #1
 8001332:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001334:	4b15      	ldr	r3, [pc, #84]	; (800138c <MX_I2C1_Init+0x74>)
 8001336:	2200      	movs	r2, #0
 8001338:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800133a:	4b14      	ldr	r3, [pc, #80]	; (800138c <MX_I2C1_Init+0x74>)
 800133c:	2200      	movs	r2, #0
 800133e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001340:	4b12      	ldr	r3, [pc, #72]	; (800138c <MX_I2C1_Init+0x74>)
 8001342:	2200      	movs	r2, #0
 8001344:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001346:	4b11      	ldr	r3, [pc, #68]	; (800138c <MX_I2C1_Init+0x74>)
 8001348:	2200      	movs	r2, #0
 800134a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800134c:	4b0f      	ldr	r3, [pc, #60]	; (800138c <MX_I2C1_Init+0x74>)
 800134e:	2200      	movs	r2, #0
 8001350:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001352:	480e      	ldr	r0, [pc, #56]	; (800138c <MX_I2C1_Init+0x74>)
 8001354:	f002 fb40 	bl	80039d8 <HAL_I2C_Init>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800135e:	f001 f885 	bl	800246c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001362:	2100      	movs	r1, #0
 8001364:	4809      	ldr	r0, [pc, #36]	; (800138c <MX_I2C1_Init+0x74>)
 8001366:	f003 f8f9 	bl	800455c <HAL_I2CEx_ConfigAnalogFilter>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001370:	f001 f87c 	bl	800246c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001374:	2100      	movs	r1, #0
 8001376:	4805      	ldr	r0, [pc, #20]	; (800138c <MX_I2C1_Init+0x74>)
 8001378:	f003 f966 	bl	8004648 <HAL_I2CEx_ConfigDigitalFilter>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001382:	f001 f873 	bl	800246c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	200004b8 	.word	0x200004b8
 8001390:	40005400 	.word	0x40005400
 8001394:	6000030d 	.word	0x6000030d

08001398 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b0aa      	sub	sp, #168	; 0xa8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
 80013ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013b0:	f107 0310 	add.w	r3, r7, #16
 80013b4:	2284      	movs	r2, #132	; 0x84
 80013b6:	2100      	movs	r1, #0
 80013b8:	4618      	mov	r0, r3
 80013ba:	f00d fe27 	bl	800f00c <memset>
  if(i2cHandle->Instance==I2C1)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a22      	ldr	r2, [pc, #136]	; (800144c <HAL_I2C_MspInit+0xb4>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d13c      	bne.n	8001442 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013cc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80013ce:	2300      	movs	r3, #0
 80013d0:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013d2:	f107 0310 	add.w	r3, r7, #16
 80013d6:	4618      	mov	r0, r3
 80013d8:	f003 fff6 	bl	80053c8 <HAL_RCCEx_PeriphCLKConfig>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80013e2:	f001 f843 	bl	800246c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e6:	4b1a      	ldr	r3, [pc, #104]	; (8001450 <HAL_I2C_MspInit+0xb8>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	4a19      	ldr	r2, [pc, #100]	; (8001450 <HAL_I2C_MspInit+0xb8>)
 80013ec:	f043 0302 	orr.w	r3, r3, #2
 80013f0:	6313      	str	r3, [r2, #48]	; 0x30
 80013f2:	4b17      	ldr	r3, [pc, #92]	; (8001450 <HAL_I2C_MspInit+0xb8>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001402:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001406:	2312      	movs	r3, #18
 8001408:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001412:	2303      	movs	r3, #3
 8001414:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001418:	2304      	movs	r3, #4
 800141a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800141e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001422:	4619      	mov	r1, r3
 8001424:	480b      	ldr	r0, [pc, #44]	; (8001454 <HAL_I2C_MspInit+0xbc>)
 8001426:	f001 ff03 	bl	8003230 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800142a:	4b09      	ldr	r3, [pc, #36]	; (8001450 <HAL_I2C_MspInit+0xb8>)
 800142c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142e:	4a08      	ldr	r2, [pc, #32]	; (8001450 <HAL_I2C_MspInit+0xb8>)
 8001430:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001434:	6413      	str	r3, [r2, #64]	; 0x40
 8001436:	4b06      	ldr	r3, [pc, #24]	; (8001450 <HAL_I2C_MspInit+0xb8>)
 8001438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800143e:	60bb      	str	r3, [r7, #8]
 8001440:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001442:	bf00      	nop
 8001444:	37a8      	adds	r7, #168	; 0xa8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40005400 	.word	0x40005400
 8001450:	40023800 	.word	0x40023800
 8001454:	40020400 	.word	0x40020400

08001458 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	f5ad 6d40 	sub.w	sp, sp, #3072	; 0xc00
 800145e:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001460:	f001 fc93 	bl	8002d8a <HAL_Init>

  /* USER CODE BEGIN Init */

  uint8_t buffer[100]; // 데이터를 저장할 버퍼 m
  uint8_t received_data;
  uint32_t string_index = 0;
 8001464:	2300      	movs	r3, #0
 8001466:	f8c7 3bcc 	str.w	r3, [r7, #3020]	; 0xbcc
  HAL_StatusTypeDef status;

	// VL53L0X initialization stuff
	//
	uint32_t refSpadCount = 0;
 800146a:	2300      	movs	r3, #0
 800146c:	f8c7 3b28 	str.w	r3, [r7, #2856]	; 0xb28
	uint8_t isApertureSpads = 0;
 8001470:	2300      	movs	r3, #0
 8001472:	f887 3b27 	strb.w	r3, [r7, #2855]	; 0xb27
	uint8_t VhvSettings = 0;
 8001476:	2300      	movs	r3, #0
 8001478:	f887 3b26 	strb.w	r3, [r7, #2854]	; 0xb26
	uint8_t PhaseCal = 0;
 800147c:	2300      	movs	r3, #0
 800147e:	f887 3b25 	strb.w	r3, [r7, #2853]	; 0xb25
	VL53L0X_Dev_t vl53l0x_s[NUM_SENSOR];
//	VL53L0X_Dev_t vl53l0x_s;

	VL53L0X_DEV Dev;
	//KalmanFilter kalman_filters[NUM_SENSOR];
	uint16_t distance[NUM_SENSOR] = {0,};
 8001482:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 8001486:	f6a3 33d4 	subw	r3, r3, #3028	; 0xbd4
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	609a      	str	r2, [r3, #8]
 8001492:	819a      	strh	r2, [r3, #12]
//	float filtered_distance[NUM_SENSOR] = {0,};

	uint8_t tca_ch[8] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80}; // control register of TCA9548A
 8001494:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 8001498:	f6a3 33dc 	subw	r3, r3, #3036	; 0xbdc
 800149c:	4a40      	ldr	r2, [pc, #256]	; (80015a0 <main+0x148>)
 800149e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014a2:	e883 0003 	stmia.w	r3, {r0, r1}
	//uint8_t tca_ch[8] = {0b00000001, 0b00000010, 0b00000100, 0b00001000, 0b00010000, 0b00100000, 0b01000000, 0b10000000};
	uint8_t tca_ch_reset = 0x00;
 80014a6:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 80014aa:	f6a3 33dd 	subw	r3, r3, #3037	; 0xbdd
 80014ae:	2200      	movs	r2, #0
 80014b0:	701a      	strb	r2, [r3, #0]
	//uint8_t tca_ch_reset = 0b00000000;
    uint8_t tca_addr[] = {0x70};
 80014b2:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 80014b6:	f5a3 633e 	sub.w	r3, r3, #3040	; 0xbe0
 80014ba:	2270      	movs	r2, #112	; 0x70
 80014bc:	701a      	strb	r2, [r3, #0]

//    uint8_t tca_addr[] = {0x70,0x71,0x72};


    HAL_UART_Receive_IT(&huart1,&rxData,1);
 80014be:	2201      	movs	r2, #1
 80014c0:	4938      	ldr	r1, [pc, #224]	; (80015a4 <main+0x14c>)
 80014c2:	4839      	ldr	r0, [pc, #228]	; (80015a8 <main+0x150>)
 80014c4:	f007 f9e9 	bl	800889a <HAL_UART_Receive_IT>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014c8:	f000 fed2 	bl	8002270 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014cc:	f7ff fdb4 	bl	8001038 <MX_GPIO_Init>
  MX_I2C1_Init();
 80014d0:	f7ff ff22 	bl	8001318 <MX_I2C1_Init>
  MX_TIM7_Init();
 80014d4:	f001 fae0 	bl	8002a98 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 80014d8:	f001 fb7c 	bl	8002bd4 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80014dc:	f001 fa66 	bl	80029ac <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80014e0:	f000 ff34 	bl	800234c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */


  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 80014e4:	2100      	movs	r1, #0
 80014e6:	4831      	ldr	r0, [pc, #196]	; (80015ac <main+0x154>)
 80014e8:	f005 f99c 	bl	8006824 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart1, &rxData, 1);
 80014ec:	2201      	movs	r2, #1
 80014ee:	492d      	ldr	r1, [pc, #180]	; (80015a4 <main+0x14c>)
 80014f0:	482d      	ldr	r0, [pc, #180]	; (80015a8 <main+0x150>)
 80014f2:	f007 f9d2 	bl	800889a <HAL_UART_Receive_IT>

  // Initialize the HX711
  HX711_Init();
 80014f6:	f7ff fe67 	bl	80011c8 <HX711_Init>

  /* UART interrupt initialization */
  HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "JH TACTS test\n\r"), 100);
 80014fa:	492d      	ldr	r1, [pc, #180]	; (80015b0 <main+0x158>)
 80014fc:	482d      	ldr	r0, [pc, #180]	; (80015b4 <main+0x15c>)
 80014fe:	f00e fc0d 	bl	800fd1c <siprintf>
 8001502:	4603      	mov	r3, r0
 8001504:	b29a      	uxth	r2, r3
 8001506:	2364      	movs	r3, #100	; 0x64
 8001508:	492a      	ldr	r1, [pc, #168]	; (80015b4 <main+0x15c>)
 800150a:	4827      	ldr	r0, [pc, #156]	; (80015a8 <main+0x150>)
 800150c:	f007 f942 	bl	8008794 <HAL_UART_Transmit>

		for (int i = 0; i < sizeof(tca_addr); i++) {
 8001510:	2300      	movs	r3, #0
 8001512:	f8c7 3bf4 	str.w	r3, [r7, #3060]	; 0xbf4
 8001516:	e018      	b.n	800154a <main+0xf2>
		    HAL_I2C_Master_Transmit(&hi2c1, tca_addr[i] << 1, &tca_ch_reset, 1, 1000);
 8001518:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 800151c:	f5a3 623e 	sub.w	r2, r3, #3040	; 0xbe0
 8001520:	f8d7 3bf4 	ldr.w	r3, [r7, #3060]	; 0xbf4
 8001524:	4413      	add	r3, r2
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	b29b      	uxth	r3, r3
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	b299      	uxth	r1, r3
 800152e:	f107 021b 	add.w	r2, r7, #27
 8001532:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001536:	9300      	str	r3, [sp, #0]
 8001538:	2301      	movs	r3, #1
 800153a:	481f      	ldr	r0, [pc, #124]	; (80015b8 <main+0x160>)
 800153c:	f002 fb6e 	bl	8003c1c <HAL_I2C_Master_Transmit>
		for (int i = 0; i < sizeof(tca_addr); i++) {
 8001540:	f8d7 3bf4 	ldr.w	r3, [r7, #3060]	; 0xbf4
 8001544:	3301      	adds	r3, #1
 8001546:	f8c7 3bf4 	str.w	r3, [r7, #3060]	; 0xbf4
 800154a:	f8d7 3bf4 	ldr.w	r3, [r7, #3060]	; 0xbf4
 800154e:	2b00      	cmp	r3, #0
 8001550:	d0e2      	beq.n	8001518 <main+0xc0>
		}

		for (int i = 0; i < NUM_SENSOR; i++) {
 8001552:	2300      	movs	r3, #0
 8001554:	f8c7 3bf0 	str.w	r3, [r7, #3056]	; 0xbf0
 8001558:	e0c7      	b.n	80016ea <main+0x292>

			uint8_t q = i / 8;
 800155a:	f8d7 3bf0 	ldr.w	r3, [r7, #3056]	; 0xbf0
 800155e:	2b00      	cmp	r3, #0
 8001560:	da00      	bge.n	8001564 <main+0x10c>
 8001562:	3307      	adds	r3, #7
 8001564:	10db      	asrs	r3, r3, #3
 8001566:	f887 3b97 	strb.w	r3, [r7, #2967]	; 0xb97
			uint8_t r = i % 8;
 800156a:	f8d7 3bf0 	ldr.w	r3, [r7, #3056]	; 0xbf0
 800156e:	425a      	negs	r2, r3
 8001570:	f003 0307 	and.w	r3, r3, #7
 8001574:	f002 0207 	and.w	r2, r2, #7
 8001578:	bf58      	it	pl
 800157a:	4253      	negpl	r3, r2
 800157c:	f887 3b96 	strb.w	r3, [r7, #2966]	; 0xb96

		    for (int j = 0; j < sizeof(tca_addr); j++) {
 8001580:	2300      	movs	r3, #0
 8001582:	f8c7 3bec 	str.w	r3, [r7, #3052]	; 0xbec
 8001586:	e036      	b.n	80015f6 <main+0x19e>
		        uint8_t *channel = (j == q) ? &tca_ch[r] : &tca_ch_reset;
 8001588:	f897 3b97 	ldrb.w	r3, [r7, #2967]	; 0xb97
 800158c:	f8d7 2bec 	ldr.w	r2, [r7, #3052]	; 0xbec
 8001590:	429a      	cmp	r2, r3
 8001592:	d113      	bne.n	80015bc <main+0x164>
 8001594:	f897 3b96 	ldrb.w	r3, [r7, #2966]	; 0xb96
 8001598:	f107 021c 	add.w	r2, r7, #28
 800159c:	4413      	add	r3, r2
 800159e:	e00f      	b.n	80015c0 <main+0x168>
 80015a0:	08014468 	.word	0x08014468
 80015a4:	2000058e 	.word	0x2000058e
 80015a8:	2000069c 	.word	0x2000069c
 80015ac:	20000604 	.word	0x20000604
 80015b0:	080141a0 	.word	0x080141a0
 80015b4:	200005a0 	.word	0x200005a0
 80015b8:	200004b8 	.word	0x200004b8
 80015bc:	f107 031b 	add.w	r3, r7, #27
 80015c0:	f8c7 3b90 	str.w	r3, [r7, #2960]	; 0xb90
		        HAL_I2C_Master_Transmit(&hi2c1, tca_addr[j] << 1, channel, 1, 1000);
 80015c4:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 80015c8:	f5a3 623e 	sub.w	r2, r3, #3040	; 0xbe0
 80015cc:	f8d7 3bec 	ldr.w	r3, [r7, #3052]	; 0xbec
 80015d0:	4413      	add	r3, r2
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	b299      	uxth	r1, r3
 80015da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	2301      	movs	r3, #1
 80015e2:	f8d7 2b90 	ldr.w	r2, [r7, #2960]	; 0xb90
 80015e6:	48cc      	ldr	r0, [pc, #816]	; (8001918 <main+0x4c0>)
 80015e8:	f002 fb18 	bl	8003c1c <HAL_I2C_Master_Transmit>
		    for (int j = 0; j < sizeof(tca_addr); j++) {
 80015ec:	f8d7 3bec 	ldr.w	r3, [r7, #3052]	; 0xbec
 80015f0:	3301      	adds	r3, #1
 80015f2:	f8c7 3bec 	str.w	r3, [r7, #3052]	; 0xbec
 80015f6:	f8d7 3bec 	ldr.w	r3, [r7, #3052]	; 0xbec
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d0c4      	beq.n	8001588 <main+0x130>
		    }

			Dev = &vl53l0x_s[i];
 80015fe:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001602:	f8d7 3bf0 	ldr.w	r3, [r7, #3056]	; 0xbf0
 8001606:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800160a:	fb01 f303 	mul.w	r3, r1, r3
 800160e:	4413      	add	r3, r2
 8001610:	f8c7 3bb0 	str.w	r3, [r7, #2992]	; 0xbb0
			Dev->I2cHandle = &hi2c1;
 8001614:	f8d7 3bb0 	ldr.w	r3, [r7, #2992]	; 0xbb0
 8001618:	4abf      	ldr	r2, [pc, #764]	; (8001918 <main+0x4c0>)
 800161a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
			Dev->I2cDevAddr = VL53L0X_ADDR;
 800161e:	f8d7 3bb0 	ldr.w	r3, [r7, #2992]	; 0xbb0
 8001622:	2252      	movs	r2, #82	; 0x52
 8001624:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

			VL53L0X_WaitDeviceBooted( Dev );
 8001628:	f8d7 0bb0 	ldr.w	r0, [r7, #2992]	; 0xbb0
 800162c:	f008 ff82 	bl	800a534 <VL53L0X_WaitDeviceBooted>
			VL53L0X_DataInit( Dev );
 8001630:	f8d7 0bb0 	ldr.w	r0, [r7, #2992]	; 0xbb0
 8001634:	f008 fc98 	bl	8009f68 <VL53L0X_DataInit>
			VL53L0X_StaticInit( Dev );
 8001638:	f8d7 0bb0 	ldr.w	r0, [r7, #2992]	; 0xbb0
 800163c:	f008 fdf8 	bl	800a230 <VL53L0X_StaticInit>
			VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 8001640:	2101      	movs	r1, #1
 8001642:	f8d7 0bb0 	ldr.w	r0, [r7, #2992]	; 0xbb0
 8001646:	f009 f813 	bl	800a670 <VL53L0X_SetDeviceMode>
			VL53L0X_PerformRefCalibration( Dev, &VhvSettings, &PhaseCal);
 800164a:	f607 3225 	addw	r2, r7, #2853	; 0xb25
 800164e:	f607 3326 	addw	r3, r7, #2854	; 0xb26
 8001652:	4619      	mov	r1, r3
 8001654:	f8d7 0bb0 	ldr.w	r0, [r7, #2992]	; 0xbb0
 8001658:	f009 fc8c 	bl	800af74 <VL53L0X_PerformRefCalibration>
			VL53L0X_PerformRefSpadManagement( Dev, &refSpadCount, &isApertureSpads);
 800165c:	f607 3227 	addw	r2, r7, #2855	; 0xb27
 8001660:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 8001664:	4619      	mov	r1, r3
 8001666:	f8d7 0bb0 	ldr.w	r0, [r7, #2992]	; 0xbb0
 800166a:	f00a f911 	bl	800b890 <VL53L0X_PerformRefSpadManagement>
			VL53L0X_SetLimitCheckEnable( Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 800166e:	2201      	movs	r2, #1
 8001670:	2100      	movs	r1, #0
 8001672:	f8d7 0bb0 	ldr.w	r0, [r7, #2992]	; 0xbb0
 8001676:	f009 fa77 	bl	800ab68 <VL53L0X_SetLimitCheckEnable>
			VL53L0X_SetLimitCheckEnable( Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 800167a:	2201      	movs	r2, #1
 800167c:	2101      	movs	r1, #1
 800167e:	f8d7 0bb0 	ldr.w	r0, [r7, #2992]	; 0xbb0
 8001682:	f009 fa71 	bl	800ab68 <VL53L0X_SetLimitCheckEnable>
			VL53L0X_SetLimitCheckValue( Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 8001686:	f641 1299 	movw	r2, #6553	; 0x1999
 800168a:	2101      	movs	r1, #1
 800168c:	f8d7 0bb0 	ldr.w	r0, [r7, #2992]	; 0xbb0
 8001690:	f009 fb1a 	bl	800acc8 <VL53L0X_SetLimitCheckValue>
			VL53L0X_SetLimitCheckValue( Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 8001694:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001698:	2100      	movs	r1, #0
 800169a:	f8d7 0bb0 	ldr.w	r0, [r7, #2992]	; 0xbb0
 800169e:	f009 fb13 	bl	800acc8 <VL53L0X_SetLimitCheckValue>
			VL53L0X_SetMeasurementTimingBudgetMicroSeconds( Dev, 33000);
 80016a2:	f248 01e8 	movw	r1, #33000	; 0x80e8
 80016a6:	f8d7 0bb0 	ldr.w	r0, [r7, #2992]	; 0xbb0
 80016aa:	f009 f83f 	bl	800a72c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
			VL53L0X_SetVcselPulsePeriod( Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 80016ae:	2212      	movs	r2, #18
 80016b0:	2100      	movs	r1, #0
 80016b2:	f8d7 0bb0 	ldr.w	r0, [r7, #2992]	; 0xbb0
 80016b6:	f009 f85f 	bl	800a778 <VL53L0X_SetVcselPulsePeriod>
			VL53L0X_SetVcselPulsePeriod( Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 80016ba:	220e      	movs	r2, #14
 80016bc:	2101      	movs	r1, #1
 80016be:	f8d7 0bb0 	ldr.w	r0, [r7, #2992]	; 0xbb0
 80016c2:	f009 f859 	bl	800a778 <VL53L0X_SetVcselPulsePeriod>
			// KalmanFilter initializer BEGIN //
			float Q = 0.1f; // Process noise covariance
			float R = 1.0f;   // Measurement noise covariance
			KalmanFilter_Init(&kalman_filters[i], Q, R);
			// KalmanFilter initializer END //			 */
			HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "%d complete \n\r",i), 100);
 80016c6:	f8d7 2bf0 	ldr.w	r2, [r7, #3056]	; 0xbf0
 80016ca:	4994      	ldr	r1, [pc, #592]	; (800191c <main+0x4c4>)
 80016cc:	4894      	ldr	r0, [pc, #592]	; (8001920 <main+0x4c8>)
 80016ce:	f00e fb25 	bl	800fd1c <siprintf>
 80016d2:	4603      	mov	r3, r0
 80016d4:	b29a      	uxth	r2, r3
 80016d6:	2364      	movs	r3, #100	; 0x64
 80016d8:	4991      	ldr	r1, [pc, #580]	; (8001920 <main+0x4c8>)
 80016da:	4892      	ldr	r0, [pc, #584]	; (8001924 <main+0x4cc>)
 80016dc:	f007 f85a 	bl	8008794 <HAL_UART_Transmit>
		for (int i = 0; i < NUM_SENSOR; i++) {
 80016e0:	f8d7 3bf0 	ldr.w	r3, [r7, #3056]	; 0xbf0
 80016e4:	3301      	adds	r3, #1
 80016e6:	f8c7 3bf0 	str.w	r3, [r7, #3056]	; 0xbf0
 80016ea:	f8d7 3bf0 	ldr.w	r3, [r7, #3056]	; 0xbf0
 80016ee:	2b06      	cmp	r3, #6
 80016f0:	f77f af33 	ble.w	800155a <main+0x102>



  while (1)
  {
	  if(startMessage==0){
 80016f4:	4b8c      	ldr	r3, [pc, #560]	; (8001928 <main+0x4d0>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d15a      	bne.n	80017b2 <main+0x35a>
		  HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "--------------------------------------------------------------\n"), 100);
 80016fc:	498b      	ldr	r1, [pc, #556]	; (800192c <main+0x4d4>)
 80016fe:	4888      	ldr	r0, [pc, #544]	; (8001920 <main+0x4c8>)
 8001700:	f00e fb0c 	bl	800fd1c <siprintf>
 8001704:	4603      	mov	r3, r0
 8001706:	b29a      	uxth	r2, r3
 8001708:	2364      	movs	r3, #100	; 0x64
 800170a:	4985      	ldr	r1, [pc, #532]	; (8001920 <main+0x4c8>)
 800170c:	4885      	ldr	r0, [pc, #532]	; (8001924 <main+0x4cc>)
 800170e:	f007 f841 	bl	8008794 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "----- Auto Data Logging Device for TACTS made by JaeHyeong----\n"), 100);
 8001712:	4987      	ldr	r1, [pc, #540]	; (8001930 <main+0x4d8>)
 8001714:	4882      	ldr	r0, [pc, #520]	; (8001920 <main+0x4c8>)
 8001716:	f00e fb01 	bl	800fd1c <siprintf>
 800171a:	4603      	mov	r3, r0
 800171c:	b29a      	uxth	r2, r3
 800171e:	2364      	movs	r3, #100	; 0x64
 8001720:	497f      	ldr	r1, [pc, #508]	; (8001920 <main+0x4c8>)
 8001722:	4880      	ldr	r0, [pc, #512]	; (8001924 <main+0x4cc>)
 8001724:	f007 f836 	bl	8008794 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "-----------rev XX : Rotaing Revolution Motor (Deg)------------\n"), 100);
 8001728:	4982      	ldr	r1, [pc, #520]	; (8001934 <main+0x4dc>)
 800172a:	487d      	ldr	r0, [pc, #500]	; (8001920 <main+0x4c8>)
 800172c:	f00e faf6 	bl	800fd1c <siprintf>
 8001730:	4603      	mov	r3, r0
 8001732:	b29a      	uxth	r2, r3
 8001734:	2364      	movs	r3, #100	; 0x64
 8001736:	497a      	ldr	r1, [pc, #488]	; (8001920 <main+0x4c8>)
 8001738:	487a      	ldr	r0, [pc, #488]	; (8001924 <main+0x4cc>)
 800173a:	f007 f82b 	bl	8008794 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "-----------lin XX : Moving Linear Motor (mm)------------------\n"), 100);
 800173e:	497e      	ldr	r1, [pc, #504]	; (8001938 <main+0x4e0>)
 8001740:	4877      	ldr	r0, [pc, #476]	; (8001920 <main+0x4c8>)
 8001742:	f00e faeb 	bl	800fd1c <siprintf>
 8001746:	4603      	mov	r3, r0
 8001748:	b29a      	uxth	r2, r3
 800174a:	2364      	movs	r3, #100	; 0x64
 800174c:	4974      	ldr	r1, [pc, #464]	; (8001920 <main+0x4c8>)
 800174e:	4875      	ldr	r0, [pc, #468]	; (8001924 <main+0x4cc>)
 8001750:	f007 f820 	bl	8008794 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "-----------servo XX : Poking XX * 0.8 (mm)--------------------\n"), 100);
 8001754:	4979      	ldr	r1, [pc, #484]	; (800193c <main+0x4e4>)
 8001756:	4872      	ldr	r0, [pc, #456]	; (8001920 <main+0x4c8>)
 8001758:	f00e fae0 	bl	800fd1c <siprintf>
 800175c:	4603      	mov	r3, r0
 800175e:	b29a      	uxth	r2, r3
 8001760:	2364      	movs	r3, #100	; 0x64
 8001762:	496f      	ldr	r1, [pc, #444]	; (8001920 <main+0x4c8>)
 8001764:	486f      	ldr	r0, [pc, #444]	; (8001924 <main+0x4cc>)
 8001766:	f007 f815 	bl	8008794 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "-----------auto : Poking the designed point and data logging--\n"), 100);
 800176a:	4975      	ldr	r1, [pc, #468]	; (8001940 <main+0x4e8>)
 800176c:	486c      	ldr	r0, [pc, #432]	; (8001920 <main+0x4c8>)
 800176e:	f00e fad5 	bl	800fd1c <siprintf>
 8001772:	4603      	mov	r3, r0
 8001774:	b29a      	uxth	r2, r3
 8001776:	2364      	movs	r3, #100	; 0x64
 8001778:	4969      	ldr	r1, [pc, #420]	; (8001920 <main+0x4c8>)
 800177a:	486a      	ldr	r0, [pc, #424]	; (8001924 <main+0x4cc>)
 800177c:	f007 f80a 	bl	8008794 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "-------------------------testbed_axial------------------------\n"), 100);
 8001780:	4970      	ldr	r1, [pc, #448]	; (8001944 <main+0x4ec>)
 8001782:	4867      	ldr	r0, [pc, #412]	; (8001920 <main+0x4c8>)
 8001784:	f00e faca 	bl	800fd1c <siprintf>
 8001788:	4603      	mov	r3, r0
 800178a:	b29a      	uxth	r2, r3
 800178c:	2364      	movs	r3, #100	; 0x64
 800178e:	4964      	ldr	r1, [pc, #400]	; (8001920 <main+0x4c8>)
 8001790:	4864      	ldr	r0, [pc, #400]	; (8001924 <main+0x4cc>)
 8001792:	f006 ffff 	bl	8008794 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "--------------------------------------------------------------\n"), 100);
 8001796:	4965      	ldr	r1, [pc, #404]	; (800192c <main+0x4d4>)
 8001798:	4861      	ldr	r0, [pc, #388]	; (8001920 <main+0x4c8>)
 800179a:	f00e fabf 	bl	800fd1c <siprintf>
 800179e:	4603      	mov	r3, r0
 80017a0:	b29a      	uxth	r2, r3
 80017a2:	2364      	movs	r3, #100	; 0x64
 80017a4:	495e      	ldr	r1, [pc, #376]	; (8001920 <main+0x4c8>)
 80017a6:	485f      	ldr	r0, [pc, #380]	; (8001924 <main+0x4cc>)
 80017a8:	f006 fff4 	bl	8008794 <HAL_UART_Transmit>
		  startMessage =1;
 80017ac:	4b5e      	ldr	r3, [pc, #376]	; (8001928 <main+0x4d0>)
 80017ae:	2201      	movs	r2, #1
 80017b0:	701a      	strb	r2, [r3, #0]
	  }

	  if(receivedFlag)
 80017b2:	4b65      	ldr	r3, [pc, #404]	; (8001948 <main+0x4f0>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d09c      	beq.n	80016f4 <main+0x29c>
	  {
		  ///////////////////// Step rev /////////////////////

		  char* command = "all";
 80017ba:	4b64      	ldr	r3, [pc, #400]	; (800194c <main+0x4f4>)
 80017bc:	f8c7 3bc8 	str.w	r3, [r7, #3016]	; 0xbc8
		  if(strncmp((char*)rxBuffer, command,strlen(command)) == 0)
 80017c0:	f8d7 0bc8 	ldr.w	r0, [r7, #3016]	; 0xbc8
 80017c4:	f7fe fd24 	bl	8000210 <strlen>
 80017c8:	4603      	mov	r3, r0
 80017ca:	461a      	mov	r2, r3
 80017cc:	f8d7 1bc8 	ldr.w	r1, [r7, #3016]	; 0xbc8
 80017d0:	485f      	ldr	r0, [pc, #380]	; (8001950 <main+0x4f8>)
 80017d2:	f00e fb3c 	bl	800fe4e <strncmp>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	f040 80e3 	bne.w	80019a4 <main+0x54c>
		     {
		         float servo_dist=0;
 80017de:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 80017e2:	f6a3 33e4 	subw	r3, r3, #3044	; 0xbe4
 80017e6:	f04f 0200 	mov.w	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
		         int step_rev_angle=0;
 80017ec:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 80017f0:	f6a3 33e8 	subw	r3, r3, #3048	; 0xbe8
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
		         int step_lin_dist=0;
 80017f8:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 80017fc:	f6a3 33ec 	subw	r3, r3, #3052	; 0xbec
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]

		         // Check if three integers are successfully parsed
		         if(sscanf((char*)rxBuffer + strlen(command)+1, "%f,%d,%d",&servo_dist, &step_rev_angle, &step_lin_dist) == 3)
 8001804:	f8d7 0bc8 	ldr.w	r0, [r7, #3016]	; 0xbc8
 8001808:	f7fe fd02 	bl	8000210 <strlen>
 800180c:	4603      	mov	r3, r0
 800180e:	3301      	adds	r3, #1
 8001810:	4a4f      	ldr	r2, [pc, #316]	; (8001950 <main+0x4f8>)
 8001812:	1898      	adds	r0, r3, r2
 8001814:	f107 0110 	add.w	r1, r7, #16
 8001818:	f107 0214 	add.w	r2, r7, #20
 800181c:	f107 030c 	add.w	r3, r7, #12
 8001820:	9300      	str	r3, [sp, #0]
 8001822:	460b      	mov	r3, r1
 8001824:	494b      	ldr	r1, [pc, #300]	; (8001954 <main+0x4fc>)
 8001826:	f00e fa99 	bl	800fd5c <siscanf>
 800182a:	4603      	mov	r3, r0
 800182c:	2b03      	cmp	r3, #3
 800182e:	f040 80a7 	bne.w	8001980 <main+0x528>
		         {
		             stepRev(step_rev_angle);
 8001832:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 8001836:	f6a3 33e8 	subw	r3, r3, #3048	; 0xbe8
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4618      	mov	r0, r3
 800183e:	f000 fe25 	bl	800248c <stepRev>
		             stepLin(step_lin_dist);
 8001842:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 8001846:	f6a3 33ec 	subw	r3, r3, #3052	; 0xbec
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f000 fe87 	bl	8002560 <stepLin>
		             servo_angle(&htim2, TIM_CHANNEL_1, servo_dist);
 8001852:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 8001856:	f6a3 33e4 	subw	r3, r3, #3044	; 0xbe4
 800185a:	edd3 7a00 	vldr	s15, [r3]
 800185e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001862:	ee17 2a90 	vmov	r2, s15
 8001866:	2100      	movs	r1, #0
 8001868:	483b      	ldr	r0, [pc, #236]	; (8001958 <main+0x500>)
 800186a:	f000 ff13 	bl	8002694 <servo_angle>
		             servo_dist *=0.8;
 800186e:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 8001872:	f6a3 33e4 	subw	r3, r3, #3044	; 0xbe4
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4618      	mov	r0, r3
 800187a:	f7fe fe85 	bl	8000588 <__aeabi_f2d>
 800187e:	a324      	add	r3, pc, #144	; (adr r3, 8001910 <main+0x4b8>)
 8001880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001884:	f7fe fed8 	bl	8000638 <__aeabi_dmul>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	4610      	mov	r0, r2
 800188e:	4619      	mov	r1, r3
 8001890:	f7ff f9ca 	bl	8000c28 <__aeabi_d2f>
 8001894:	4602      	mov	r2, r0
 8001896:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 800189a:	f6a3 33e4 	subw	r3, r3, #3044	; 0xbe4
 800189e:	601a      	str	r2, [r3, #0]

		 			HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "%d deg rev \n\r",step_rev_angle), 100);
 80018a0:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 80018a4:	f6a3 33e8 	subw	r3, r3, #3048	; 0xbe8
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	461a      	mov	r2, r3
 80018ac:	492b      	ldr	r1, [pc, #172]	; (800195c <main+0x504>)
 80018ae:	481c      	ldr	r0, [pc, #112]	; (8001920 <main+0x4c8>)
 80018b0:	f00e fa34 	bl	800fd1c <siprintf>
 80018b4:	4603      	mov	r3, r0
 80018b6:	b29a      	uxth	r2, r3
 80018b8:	2364      	movs	r3, #100	; 0x64
 80018ba:	4919      	ldr	r1, [pc, #100]	; (8001920 <main+0x4c8>)
 80018bc:	4819      	ldr	r0, [pc, #100]	; (8001924 <main+0x4cc>)
 80018be:	f006 ff69 	bl	8008794 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "%d mm lin \n\r",step_lin_dist), 100);
 80018c2:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 80018c6:	f6a3 33ec 	subw	r3, r3, #3052	; 0xbec
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	461a      	mov	r2, r3
 80018ce:	4924      	ldr	r1, [pc, #144]	; (8001960 <main+0x508>)
 80018d0:	4813      	ldr	r0, [pc, #76]	; (8001920 <main+0x4c8>)
 80018d2:	f00e fa23 	bl	800fd1c <siprintf>
 80018d6:	4603      	mov	r3, r0
 80018d8:	b29a      	uxth	r2, r3
 80018da:	2364      	movs	r3, #100	; 0x64
 80018dc:	4910      	ldr	r1, [pc, #64]	; (8001920 <main+0x4c8>)
 80018de:	4811      	ldr	r0, [pc, #68]	; (8001924 <main+0x4cc>)
 80018e0:	f006 ff58 	bl	8008794 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "%.2f servo \n\r",servo_dist), 100);
 80018e4:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 80018e8:	f6a3 33e4 	subw	r3, r3, #3044	; 0xbe4
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7fe fe4a 	bl	8000588 <__aeabi_f2d>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	491a      	ldr	r1, [pc, #104]	; (8001964 <main+0x50c>)
 80018fa:	4809      	ldr	r0, [pc, #36]	; (8001920 <main+0x4c8>)
 80018fc:	f00e fa0e 	bl	800fd1c <siprintf>
 8001900:	4603      	mov	r3, r0
 8001902:	b29a      	uxth	r2, r3
 8001904:	2364      	movs	r3, #100	; 0x64
 8001906:	4906      	ldr	r1, [pc, #24]	; (8001920 <main+0x4c8>)
 8001908:	4806      	ldr	r0, [pc, #24]	; (8001924 <main+0x4cc>)
 800190a:	f006 ff43 	bl	8008794 <HAL_UART_Transmit>
 800190e:	e02b      	b.n	8001968 <main+0x510>
 8001910:	9999999a 	.word	0x9999999a
 8001914:	3fe99999 	.word	0x3fe99999
 8001918:	200004b8 	.word	0x200004b8
 800191c:	080141b0 	.word	0x080141b0
 8001920:	200005a0 	.word	0x200005a0
 8001924:	2000069c 	.word	0x2000069c
 8001928:	2000059c 	.word	0x2000059c
 800192c:	080141c0 	.word	0x080141c0
 8001930:	08014200 	.word	0x08014200
 8001934:	08014240 	.word	0x08014240
 8001938:	08014280 	.word	0x08014280
 800193c:	080142c0 	.word	0x080142c0
 8001940:	08014300 	.word	0x08014300
 8001944:	08014340 	.word	0x08014340
 8001948:	2000058f 	.word	0x2000058f
 800194c:	08014380 	.word	0x08014380
 8001950:	2000050c 	.word	0x2000050c
 8001954:	08014384 	.word	0x08014384
 8001958:	20000604 	.word	0x20000604
 800195c:	08014390 	.word	0x08014390
 8001960:	080143a0 	.word	0x080143a0
 8001964:	080143b0 	.word	0x080143b0
					HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "vaild data\r\n"), 100);
 8001968:	49c1      	ldr	r1, [pc, #772]	; (8001c70 <main+0x818>)
 800196a:	48c2      	ldr	r0, [pc, #776]	; (8001c74 <main+0x81c>)
 800196c:	f00e f9d6 	bl	800fd1c <siprintf>
 8001970:	4603      	mov	r3, r0
 8001972:	b29a      	uxth	r2, r3
 8001974:	2364      	movs	r3, #100	; 0x64
 8001976:	49bf      	ldr	r1, [pc, #764]	; (8001c74 <main+0x81c>)
 8001978:	48bf      	ldr	r0, [pc, #764]	; (8001c78 <main+0x820>)
 800197a:	f006 ff0b 	bl	8008794 <HAL_UART_Transmit>
 800197e:	e00a      	b.n	8001996 <main+0x53e>

		         }
		         else
		         {
		        	 HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "invalid data\r\n"), 100);
 8001980:	49be      	ldr	r1, [pc, #760]	; (8001c7c <main+0x824>)
 8001982:	48bc      	ldr	r0, [pc, #752]	; (8001c74 <main+0x81c>)
 8001984:	f00e f9ca 	bl	800fd1c <siprintf>
 8001988:	4603      	mov	r3, r0
 800198a:	b29a      	uxth	r2, r3
 800198c:	2364      	movs	r3, #100	; 0x64
 800198e:	49b9      	ldr	r1, [pc, #740]	; (8001c74 <main+0x81c>)
 8001990:	48b9      	ldr	r0, [pc, #740]	; (8001c78 <main+0x820>)
 8001992:	f006 feff 	bl	8008794 <HAL_UART_Transmit>
		         }
		         HAL_Delay(1000); // Delay for 1 second
 8001996:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800199a:	f001 fa53 	bl	8002e44 <HAL_Delay>
		         receivedFlag = 0;
 800199e:	4bb8      	ldr	r3, [pc, #736]	; (8001c80 <main+0x828>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	701a      	strb	r2, [r3, #0]
		     }

		  command = "rev";
 80019a4:	4bb7      	ldr	r3, [pc, #732]	; (8001c84 <main+0x82c>)
 80019a6:	f8c7 3bc8 	str.w	r3, [r7, #3016]	; 0xbc8
		  if(strncmp((char*)rxBuffer, command,strlen(command)) == 0)
 80019aa:	f8d7 0bc8 	ldr.w	r0, [r7, #3016]	; 0xbc8
 80019ae:	f7fe fc2f 	bl	8000210 <strlen>
 80019b2:	4603      	mov	r3, r0
 80019b4:	461a      	mov	r2, r3
 80019b6:	f8d7 1bc8 	ldr.w	r1, [r7, #3016]	; 0xbc8
 80019ba:	48b3      	ldr	r0, [pc, #716]	; (8001c88 <main+0x830>)
 80019bc:	f00e fa47 	bl	800fe4e <strncmp>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d142      	bne.n	8001a4c <main+0x5f4>
		     {
		         int step_rev_angle=0;
 80019c6:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 80019ca:	f5a3 633f 	sub.w	r3, r3, #3056	; 0xbf0
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]
		         if(sscanf((char*)rxBuffer + strlen(command) + 1, "%d",&step_rev_angle) == 1)
 80019d2:	f8d7 0bc8 	ldr.w	r0, [r7, #3016]	; 0xbc8
 80019d6:	f7fe fc1b 	bl	8000210 <strlen>
 80019da:	4603      	mov	r3, r0
 80019dc:	3301      	adds	r3, #1
 80019de:	4aaa      	ldr	r2, [pc, #680]	; (8001c88 <main+0x830>)
 80019e0:	4413      	add	r3, r2
 80019e2:	f107 0208 	add.w	r2, r7, #8
 80019e6:	49a9      	ldr	r1, [pc, #676]	; (8001c8c <main+0x834>)
 80019e8:	4618      	mov	r0, r3
 80019ea:	f00e f9b7 	bl	800fd5c <siscanf>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d119      	bne.n	8001a28 <main+0x5d0>
		         {
					 stepRev(step_rev_angle);
 80019f4:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 80019f8:	f5a3 633f 	sub.w	r3, r3, #3056	; 0xbf0
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f000 fd44 	bl	800248c <stepRev>
		 			HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "%d deg rev \n\r",step_rev_angle), 100);
 8001a04:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 8001a08:	f5a3 633f 	sub.w	r3, r3, #3056	; 0xbf0
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	461a      	mov	r2, r3
 8001a10:	499f      	ldr	r1, [pc, #636]	; (8001c90 <main+0x838>)
 8001a12:	4898      	ldr	r0, [pc, #608]	; (8001c74 <main+0x81c>)
 8001a14:	f00e f982 	bl	800fd1c <siprintf>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	2364      	movs	r3, #100	; 0x64
 8001a1e:	4995      	ldr	r1, [pc, #596]	; (8001c74 <main+0x81c>)
 8001a20:	4895      	ldr	r0, [pc, #596]	; (8001c78 <main+0x820>)
 8001a22:	f006 feb7 	bl	8008794 <HAL_UART_Transmit>
 8001a26:	e00a      	b.n	8001a3e <main+0x5e6>
		         }
		         else
		         {
		        	 HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "invalid data\r\n"), 100);
 8001a28:	4994      	ldr	r1, [pc, #592]	; (8001c7c <main+0x824>)
 8001a2a:	4892      	ldr	r0, [pc, #584]	; (8001c74 <main+0x81c>)
 8001a2c:	f00e f976 	bl	800fd1c <siprintf>
 8001a30:	4603      	mov	r3, r0
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	2364      	movs	r3, #100	; 0x64
 8001a36:	498f      	ldr	r1, [pc, #572]	; (8001c74 <main+0x81c>)
 8001a38:	488f      	ldr	r0, [pc, #572]	; (8001c78 <main+0x820>)
 8001a3a:	f006 feab 	bl	8008794 <HAL_UART_Transmit>
		         }
		         HAL_Delay(1000); // Delay for 1 second
 8001a3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a42:	f001 f9ff 	bl	8002e44 <HAL_Delay>
		         receivedFlag = 0;
 8001a46:	4b8e      	ldr	r3, [pc, #568]	; (8001c80 <main+0x828>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	701a      	strb	r2, [r3, #0]
		     }

		  command = "lin";
 8001a4c:	4b91      	ldr	r3, [pc, #580]	; (8001c94 <main+0x83c>)
 8001a4e:	f8c7 3bc8 	str.w	r3, [r7, #3016]	; 0xbc8
		  if (strncmp((char*)rxBuffer, command, strlen(command)) == 0) {
 8001a52:	f8d7 0bc8 	ldr.w	r0, [r7, #3016]	; 0xbc8
 8001a56:	f7fe fbdb 	bl	8000210 <strlen>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	f8d7 1bc8 	ldr.w	r1, [r7, #3016]	; 0xbc8
 8001a62:	4889      	ldr	r0, [pc, #548]	; (8001c88 <main+0x830>)
 8001a64:	f00e f9f3 	bl	800fe4e <strncmp>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d14d      	bne.n	8001b0a <main+0x6b2>
		      int step_lin_dist = 0;
 8001a6e:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 8001a72:	f6a3 33f4 	subw	r3, r3, #3060	; 0xbf4
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
		      if (sscanf((char*)rxBuffer + strlen(command) + 1, "%d", &step_lin_dist) == 1) {
 8001a7a:	f8d7 0bc8 	ldr.w	r0, [r7, #3016]	; 0xbc8
 8001a7e:	f7fe fbc7 	bl	8000210 <strlen>
 8001a82:	4603      	mov	r3, r0
 8001a84:	3301      	adds	r3, #1
 8001a86:	4a80      	ldr	r2, [pc, #512]	; (8001c88 <main+0x830>)
 8001a88:	4413      	add	r3, r2
 8001a8a:	1d3a      	adds	r2, r7, #4
 8001a8c:	497f      	ldr	r1, [pc, #508]	; (8001c8c <main+0x834>)
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f00e f964 	bl	800fd5c <siscanf>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d125      	bne.n	8001ae6 <main+0x68e>
		          stepLin(step_lin_dist);
 8001a9a:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 8001a9e:	f6a3 33f4 	subw	r3, r3, #3060	; 0xbf4
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f000 fd5b 	bl	8002560 <stepLin>
		          HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "%d mm %s \n\r", step_lin_dist, command), 100);
 8001aaa:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 8001aae:	f6a3 33f4 	subw	r3, r3, #3060	; 0xbf4
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	f8d7 3bc8 	ldr.w	r3, [r7, #3016]	; 0xbc8
 8001ab8:	4977      	ldr	r1, [pc, #476]	; (8001c98 <main+0x840>)
 8001aba:	486e      	ldr	r0, [pc, #440]	; (8001c74 <main+0x81c>)
 8001abc:	f00e f92e 	bl	800fd1c <siprintf>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	2364      	movs	r3, #100	; 0x64
 8001ac6:	496b      	ldr	r1, [pc, #428]	; (8001c74 <main+0x81c>)
 8001ac8:	486b      	ldr	r0, [pc, #428]	; (8001c78 <main+0x820>)
 8001aca:	f006 fe63 	bl	8008794 <HAL_UART_Transmit>
		          HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "valid data\r\n"), 100);
 8001ace:	4973      	ldr	r1, [pc, #460]	; (8001c9c <main+0x844>)
 8001ad0:	4868      	ldr	r0, [pc, #416]	; (8001c74 <main+0x81c>)
 8001ad2:	f00e f923 	bl	800fd1c <siprintf>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	b29a      	uxth	r2, r3
 8001ada:	2364      	movs	r3, #100	; 0x64
 8001adc:	4965      	ldr	r1, [pc, #404]	; (8001c74 <main+0x81c>)
 8001ade:	4866      	ldr	r0, [pc, #408]	; (8001c78 <main+0x820>)
 8001ae0:	f006 fe58 	bl	8008794 <HAL_UART_Transmit>
 8001ae4:	e00a      	b.n	8001afc <main+0x6a4>
		      } else {
		          HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "invalid data\r\n"), 100);
 8001ae6:	4965      	ldr	r1, [pc, #404]	; (8001c7c <main+0x824>)
 8001ae8:	4862      	ldr	r0, [pc, #392]	; (8001c74 <main+0x81c>)
 8001aea:	f00e f917 	bl	800fd1c <siprintf>
 8001aee:	4603      	mov	r3, r0
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	2364      	movs	r3, #100	; 0x64
 8001af4:	495f      	ldr	r1, [pc, #380]	; (8001c74 <main+0x81c>)
 8001af6:	4860      	ldr	r0, [pc, #384]	; (8001c78 <main+0x820>)
 8001af8:	f006 fe4c 	bl	8008794 <HAL_UART_Transmit>
		      }
		      HAL_Delay(1000);
 8001afc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b00:	f001 f9a0 	bl	8002e44 <HAL_Delay>
		      receivedFlag = 0;
 8001b04:	4b5e      	ldr	r3, [pc, #376]	; (8001c80 <main+0x828>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	701a      	strb	r2, [r3, #0]
		  }

		  command = "servo";
 8001b0a:	4b65      	ldr	r3, [pc, #404]	; (8001ca0 <main+0x848>)
 8001b0c:	f8c7 3bc8 	str.w	r3, [r7, #3016]	; 0xbc8
		  if(strncmp((char*)rxBuffer, command,strlen(command)) == 0)
 8001b10:	f8d7 0bc8 	ldr.w	r0, [r7, #3016]	; 0xbc8
 8001b14:	f7fe fb7c 	bl	8000210 <strlen>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	f8d7 1bc8 	ldr.w	r1, [r7, #3016]	; 0xbc8
 8001b20:	4859      	ldr	r0, [pc, #356]	; (8001c88 <main+0x830>)
 8001b22:	f00e f994 	bl	800fe4e <strncmp>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d175      	bne.n	8001c18 <main+0x7c0>
		     {
		         float servo_dist=0;
 8001b2c:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 8001b30:	f6a3 33f8 	subw	r3, r3, #3064	; 0xbf8
 8001b34:	f04f 0200 	mov.w	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
		         if(sscanf((char*)rxBuffer + strlen(command)+1, "%f",&servo_dist) == 1)
 8001b3a:	f8d7 0bc8 	ldr.w	r0, [r7, #3016]	; 0xbc8
 8001b3e:	f7fe fb67 	bl	8000210 <strlen>
 8001b42:	4603      	mov	r3, r0
 8001b44:	3301      	adds	r3, #1
 8001b46:	4a50      	ldr	r2, [pc, #320]	; (8001c88 <main+0x830>)
 8001b48:	4413      	add	r3, r2
 8001b4a:	463a      	mov	r2, r7
 8001b4c:	4955      	ldr	r1, [pc, #340]	; (8001ca4 <main+0x84c>)
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f00e f904 	bl	800fd5c <siscanf>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d147      	bne.n	8001bea <main+0x792>
		         {
		            servo_angle(&htim2, TIM_CHANNEL_1, servo_dist);
 8001b5a:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 8001b5e:	f6a3 33f8 	subw	r3, r3, #3064	; 0xbf8
 8001b62:	edd3 7a00 	vldr	s15, [r3]
 8001b66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b6a:	ee17 2a90 	vmov	r2, s15
 8001b6e:	2100      	movs	r1, #0
 8001b70:	484d      	ldr	r0, [pc, #308]	; (8001ca8 <main+0x850>)
 8001b72:	f000 fd8f 	bl	8002694 <servo_angle>
		            servo_dist *=0.8;
 8001b76:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 8001b7a:	f6a3 33f8 	subw	r3, r3, #3064	; 0xbf8
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7fe fd01 	bl	8000588 <__aeabi_f2d>
 8001b86:	a338      	add	r3, pc, #224	; (adr r3, 8001c68 <main+0x810>)
 8001b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b8c:	f7fe fd54 	bl	8000638 <__aeabi_dmul>
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	4610      	mov	r0, r2
 8001b96:	4619      	mov	r1, r3
 8001b98:	f7ff f846 	bl	8000c28 <__aeabi_d2f>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 8001ba2:	f6a3 33f8 	subw	r3, r3, #3064	; 0xbf8
 8001ba6:	601a      	str	r2, [r3, #0]
					HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "%.2f servo \n\r",servo_dist), 100);
 8001ba8:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 8001bac:	f6a3 33f8 	subw	r3, r3, #3064	; 0xbf8
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7fe fce8 	bl	8000588 <__aeabi_f2d>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	460b      	mov	r3, r1
 8001bbc:	493b      	ldr	r1, [pc, #236]	; (8001cac <main+0x854>)
 8001bbe:	482d      	ldr	r0, [pc, #180]	; (8001c74 <main+0x81c>)
 8001bc0:	f00e f8ac 	bl	800fd1c <siprintf>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	2364      	movs	r3, #100	; 0x64
 8001bca:	492a      	ldr	r1, [pc, #168]	; (8001c74 <main+0x81c>)
 8001bcc:	482a      	ldr	r0, [pc, #168]	; (8001c78 <main+0x820>)
 8001bce:	f006 fde1 	bl	8008794 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "vaild data\r\n"), 100);
 8001bd2:	4927      	ldr	r1, [pc, #156]	; (8001c70 <main+0x818>)
 8001bd4:	4827      	ldr	r0, [pc, #156]	; (8001c74 <main+0x81c>)
 8001bd6:	f00e f8a1 	bl	800fd1c <siprintf>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	b29a      	uxth	r2, r3
 8001bde:	2364      	movs	r3, #100	; 0x64
 8001be0:	4924      	ldr	r1, [pc, #144]	; (8001c74 <main+0x81c>)
 8001be2:	4825      	ldr	r0, [pc, #148]	; (8001c78 <main+0x820>)
 8001be4:	f006 fdd6 	bl	8008794 <HAL_UART_Transmit>
 8001be8:	e00a      	b.n	8001c00 <main+0x7a8>
		         }
		         else
		         {
		        	 HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "invalid data\r\n"), 100);
 8001bea:	4924      	ldr	r1, [pc, #144]	; (8001c7c <main+0x824>)
 8001bec:	4821      	ldr	r0, [pc, #132]	; (8001c74 <main+0x81c>)
 8001bee:	f00e f895 	bl	800fd1c <siprintf>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	b29a      	uxth	r2, r3
 8001bf6:	2364      	movs	r3, #100	; 0x64
 8001bf8:	491e      	ldr	r1, [pc, #120]	; (8001c74 <main+0x81c>)
 8001bfa:	481f      	ldr	r0, [pc, #124]	; (8001c78 <main+0x820>)
 8001bfc:	f006 fdca 	bl	8008794 <HAL_UART_Transmit>
		         }
		         HAL_Delay(2000); // Delay for 1 second
 8001c00:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001c04:	f001 f91e 	bl	8002e44 <HAL_Delay>

		         servo_angle(&htim2, TIM_CHANNEL_1, 0); // return to servo origin
 8001c08:	2200      	movs	r2, #0
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	4826      	ldr	r0, [pc, #152]	; (8001ca8 <main+0x850>)
 8001c0e:	f000 fd41 	bl	8002694 <servo_angle>

		         receivedFlag = 0;
 8001c12:	4b1b      	ldr	r3, [pc, #108]	; (8001c80 <main+0x828>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	701a      	strb	r2, [r3, #0]
		     }

		  command = "sensor";
 8001c18:	4b25      	ldr	r3, [pc, #148]	; (8001cb0 <main+0x858>)
 8001c1a:	f8c7 3bc8 	str.w	r3, [r7, #3016]	; 0xbc8
		  if(strncmp((char*)rxBuffer, command,strlen(command)) == 0)
 8001c1e:	f8d7 0bc8 	ldr.w	r0, [r7, #3016]	; 0xbc8
 8001c22:	f7fe faf5 	bl	8000210 <strlen>
 8001c26:	4603      	mov	r3, r0
 8001c28:	461a      	mov	r2, r3
 8001c2a:	f8d7 1bc8 	ldr.w	r1, [r7, #3016]	; 0xbc8
 8001c2e:	4816      	ldr	r0, [pc, #88]	; (8001c88 <main+0x830>)
 8001c30:	f00e f90d 	bl	800fe4e <strncmp>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	f040 813a 	bne.w	8001eb0 <main+0xa58>
		     {
	        	 HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "sensor test\r\n"), 100);
 8001c3c:	491d      	ldr	r1, [pc, #116]	; (8001cb4 <main+0x85c>)
 8001c3e:	480d      	ldr	r0, [pc, #52]	; (8001c74 <main+0x81c>)
 8001c40:	f00e f86c 	bl	800fd1c <siprintf>
 8001c44:	4603      	mov	r3, r0
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	2364      	movs	r3, #100	; 0x64
 8001c4a:	490a      	ldr	r1, [pc, #40]	; (8001c74 <main+0x81c>)
 8001c4c:	480a      	ldr	r0, [pc, #40]	; (8001c78 <main+0x820>)
 8001c4e:	f006 fda1 	bl	8008794 <HAL_UART_Transmit>

							 ///////////////////////////////////////////////////////
							 ////////////////////Logging Start//////////////////////
							 ///////////////////////////////////////////////////////
							 start_time = HAL_GetTick(); // 시작 시간 측정
 8001c52:	f001 f8eb 	bl	8002e2c <HAL_GetTick>
 8001c56:	4603      	mov	r3, r0
 8001c58:	4a17      	ldr	r2, [pc, #92]	; (8001cb8 <main+0x860>)
 8001c5a:	6013      	str	r3, [r2, #0]
							 do{
							  /// Read the VL53l0x data ///
							   for (int i = 0; i < NUM_SENSOR; i++) {
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	f8c7 3be8 	str.w	r3, [r7, #3048]	; 0xbe8
 8001c62:	e0b2      	b.n	8001dca <main+0x972>
 8001c64:	f3af 8000 	nop.w
 8001c68:	9999999a 	.word	0x9999999a
 8001c6c:	3fe99999 	.word	0x3fe99999
 8001c70:	080143c0 	.word	0x080143c0
 8001c74:	200005a0 	.word	0x200005a0
 8001c78:	2000069c 	.word	0x2000069c
 8001c7c:	080143d0 	.word	0x080143d0
 8001c80:	2000058f 	.word	0x2000058f
 8001c84:	080143e0 	.word	0x080143e0
 8001c88:	2000050c 	.word	0x2000050c
 8001c8c:	080143e4 	.word	0x080143e4
 8001c90:	08014390 	.word	0x08014390
 8001c94:	080143e8 	.word	0x080143e8
 8001c98:	080143ec 	.word	0x080143ec
 8001c9c:	080143f8 	.word	0x080143f8
 8001ca0:	08014408 	.word	0x08014408
 8001ca4:	08014410 	.word	0x08014410
 8001ca8:	20000604 	.word	0x20000604
 8001cac:	080143b0 	.word	0x080143b0
 8001cb0:	08014414 	.word	0x08014414
 8001cb4:	0801441c 	.word	0x0801441c
 8001cb8:	20000594 	.word	0x20000594
									uint8_t q = i / 8;
 8001cbc:	f8d7 3be8 	ldr.w	r3, [r7, #3048]	; 0xbe8
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	da00      	bge.n	8001cc6 <main+0x86e>
 8001cc4:	3307      	adds	r3, #7
 8001cc6:	10db      	asrs	r3, r3, #3
 8001cc8:	f887 3bb7 	strb.w	r3, [r7, #2999]	; 0xbb7
									uint8_t r = i % 8;
 8001ccc:	f8d7 3be8 	ldr.w	r3, [r7, #3048]	; 0xbe8
 8001cd0:	425a      	negs	r2, r3
 8001cd2:	f003 0307 	and.w	r3, r3, #7
 8001cd6:	f002 0207 	and.w	r2, r2, #7
 8001cda:	bf58      	it	pl
 8001cdc:	4253      	negpl	r3, r2
 8001cde:	f887 3bb6 	strb.w	r3, [r7, #2998]	; 0xbb6
									for (int j = 0; j < sizeof(tca_addr); j++) {
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	f8c7 3be4 	str.w	r3, [r7, #3044]	; 0xbe4
 8001ce8:	e028      	b.n	8001d3c <main+0x8e4>
										uint8_t *channel = (j == q) ? &tca_ch[r] : &tca_ch_reset;
 8001cea:	f897 3bb7 	ldrb.w	r3, [r7, #2999]	; 0xbb7
 8001cee:	f8d7 2be4 	ldr.w	r2, [r7, #3044]	; 0xbe4
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d105      	bne.n	8001d02 <main+0x8aa>
 8001cf6:	f897 3bb6 	ldrb.w	r3, [r7, #2998]	; 0xbb6
 8001cfa:	f107 021c 	add.w	r2, r7, #28
 8001cfe:	4413      	add	r3, r2
 8001d00:	e001      	b.n	8001d06 <main+0x8ae>
 8001d02:	f107 031b 	add.w	r3, r7, #27
 8001d06:	f8c7 3bac 	str.w	r3, [r7, #2988]	; 0xbac
										HAL_I2C_Master_Transmit(&hi2c1, tca_addr[j] << 1, channel, 1, 1000);
 8001d0a:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 8001d0e:	f5a3 623e 	sub.w	r2, r3, #3040	; 0xbe0
 8001d12:	f8d7 3be4 	ldr.w	r3, [r7, #3044]	; 0xbe4
 8001d16:	4413      	add	r3, r2
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	b299      	uxth	r1, r3
 8001d20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d24:	9300      	str	r3, [sp, #0]
 8001d26:	2301      	movs	r3, #1
 8001d28:	f8d7 2bac 	ldr.w	r2, [r7, #2988]	; 0xbac
 8001d2c:	48af      	ldr	r0, [pc, #700]	; (8001fec <main+0xb94>)
 8001d2e:	f001 ff75 	bl	8003c1c <HAL_I2C_Master_Transmit>
									for (int j = 0; j < sizeof(tca_addr); j++) {
 8001d32:	f8d7 3be4 	ldr.w	r3, [r7, #3044]	; 0xbe4
 8001d36:	3301      	adds	r3, #1
 8001d38:	f8c7 3be4 	str.w	r3, [r7, #3044]	; 0xbe4
 8001d3c:	f8d7 3be4 	ldr.w	r3, [r7, #3044]	; 0xbe4
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d0d2      	beq.n	8001cea <main+0x892>
									}
								   Dev = &vl53l0x_s[i];
 8001d44:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001d48:	f8d7 3be8 	ldr.w	r3, [r7, #3048]	; 0xbe8
 8001d4c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001d50:	fb01 f303 	mul.w	r3, r1, r3
 8001d54:	4413      	add	r3, r2
 8001d56:	f8c7 3bb0 	str.w	r3, [r7, #2992]	; 0xbb0
								   VL53L0X_PerformContinuousRangingMeasurement(Dev, &RangingData); // 1500us
 8001d5a:	49a5      	ldr	r1, [pc, #660]	; (8001ff0 <main+0xb98>)
 8001d5c:	f8d7 0bb0 	ldr.w	r0, [r7, #2992]	; 0xbb0
 8001d60:	f009 fdab 	bl	800b8ba <VL53L0X_PerformContinuousRangingMeasurement>
								   if (RangingData.RangeStatus == 0) {
 8001d64:	4ba2      	ldr	r3, [pc, #648]	; (8001ff0 <main+0xb98>)
 8001d66:	7e1b      	ldrb	r3, [r3, #24]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d11e      	bne.n	8001daa <main+0x952>
									   distance[i] = RangingData.RangeMilliMeter;
 8001d6c:	4ba0      	ldr	r3, [pc, #640]	; (8001ff0 <main+0xb98>)
 8001d6e:	8919      	ldrh	r1, [r3, #8]
 8001d70:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 8001d74:	f6a3 33d4 	subw	r3, r3, #3028	; 0xbd4
 8001d78:	f8d7 2be8 	ldr.w	r2, [r7, #3048]	; 0xbe8
 8001d7c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
									   HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "%d ",distance[i]), 100);
 8001d80:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 8001d84:	f6a3 33d4 	subw	r3, r3, #3028	; 0xbd4
 8001d88:	f8d7 2be8 	ldr.w	r2, [r7, #3048]	; 0xbe8
 8001d8c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001d90:	461a      	mov	r2, r3
 8001d92:	4998      	ldr	r1, [pc, #608]	; (8001ff4 <main+0xb9c>)
 8001d94:	4898      	ldr	r0, [pc, #608]	; (8001ff8 <main+0xba0>)
 8001d96:	f00d ffc1 	bl	800fd1c <siprintf>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	b29a      	uxth	r2, r3
 8001d9e:	2364      	movs	r3, #100	; 0x64
 8001da0:	4995      	ldr	r1, [pc, #596]	; (8001ff8 <main+0xba0>)
 8001da2:	4896      	ldr	r0, [pc, #600]	; (8001ffc <main+0xba4>)
 8001da4:	f006 fcf6 	bl	8008794 <HAL_UART_Transmit>
 8001da8:	e00a      	b.n	8001dc0 <main+0x968>
								   }else{
									   HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "NaN "), 100);
 8001daa:	4995      	ldr	r1, [pc, #596]	; (8002000 <main+0xba8>)
 8001dac:	4892      	ldr	r0, [pc, #584]	; (8001ff8 <main+0xba0>)
 8001dae:	f00d ffb5 	bl	800fd1c <siprintf>
 8001db2:	4603      	mov	r3, r0
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	2364      	movs	r3, #100	; 0x64
 8001db8:	498f      	ldr	r1, [pc, #572]	; (8001ff8 <main+0xba0>)
 8001dba:	4890      	ldr	r0, [pc, #576]	; (8001ffc <main+0xba4>)
 8001dbc:	f006 fcea 	bl	8008794 <HAL_UART_Transmit>
							   for (int i = 0; i < NUM_SENSOR; i++) {
 8001dc0:	f8d7 3be8 	ldr.w	r3, [r7, #3048]	; 0xbe8
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	f8c7 3be8 	str.w	r3, [r7, #3048]	; 0xbe8
 8001dca:	f8d7 3be8 	ldr.w	r3, [r7, #3048]	; 0xbe8
 8001dce:	2b06      	cmp	r3, #6
 8001dd0:	f77f af74 	ble.w	8001cbc <main+0x864>
							   }
							   /// End of Reading Vl53l0x data ///


						  /// Read the raw data from HX711 ///
						  rawData = Read_HX711();
 8001dd4:	f7ff fa04 	bl	80011e0 <Read_HX711>
 8001dd8:	f8c7 0bc4 	str.w	r0, [r7, #3012]	; 0xbc4
						  float loadcell_slope = -1/1600.00f; // Convert the raw data to weight (replace the calibration factor with your own)
 8001ddc:	4b89      	ldr	r3, [pc, #548]	; (8002004 <main+0xbac>)
 8001dde:	f507 623c 	add.w	r2, r7, #3008	; 0xbc0
 8001de2:	6013      	str	r3, [r2, #0]
						  float loadcell_bias = 10002;
 8001de4:	4b88      	ldr	r3, [pc, #544]	; (8002008 <main+0xbb0>)
 8001de6:	f607 32bc 	addw	r2, r7, #3004	; 0xbbc
 8001dea:	6013      	str	r3, [r2, #0]
						  UART_SendWeight_g(rawData,loadcell_slope,loadcell_bias); // Send the weight data over UART
 8001dec:	f8d7 3bc4 	ldr.w	r3, [r7, #3012]	; 0xbc4
 8001df0:	ee07 3a90 	vmov	s15, r3
 8001df4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001df8:	f607 33bc 	addw	r3, r7, #3004	; 0xbbc
 8001dfc:	ed93 1a00 	vldr	s2, [r3]
 8001e00:	f507 633c 	add.w	r3, r7, #3008	; 0xbc0
 8001e04:	edd3 0a00 	vldr	s1, [r3]
 8001e08:	eeb0 0a67 	vmov.f32	s0, s15
 8001e0c:	f7ff fa36 	bl	800127c <UART_SendWeight_g>
						  /// End of Reading HX711 data ///

						  /// Read the raw data from AMT103 ///
						  float encoderAngle = encoderCount*360.0/4096.0;
 8001e10:	4b7e      	ldr	r3, [pc, #504]	; (800200c <main+0xbb4>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7fe fba5 	bl	8000564 <__aeabi_i2d>
 8001e1a:	f04f 0200 	mov.w	r2, #0
 8001e1e:	4b7c      	ldr	r3, [pc, #496]	; (8002010 <main+0xbb8>)
 8001e20:	f7fe fc0a 	bl	8000638 <__aeabi_dmul>
 8001e24:	4602      	mov	r2, r0
 8001e26:	460b      	mov	r3, r1
 8001e28:	4610      	mov	r0, r2
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	f04f 0200 	mov.w	r2, #0
 8001e30:	4b78      	ldr	r3, [pc, #480]	; (8002014 <main+0xbbc>)
 8001e32:	f7fe fd2b 	bl	800088c <__aeabi_ddiv>
 8001e36:	4602      	mov	r2, r0
 8001e38:	460b      	mov	r3, r1
 8001e3a:	4610      	mov	r0, r2
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	f7fe fef3 	bl	8000c28 <__aeabi_d2f>
 8001e42:	4603      	mov	r3, r0
 8001e44:	f607 32b8 	addw	r2, r7, #3000	; 0xbb8
 8001e48:	6013      	str	r3, [r2, #0]
						  HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, " %.2f ",encoderAngle), 100);
 8001e4a:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8001e4e:	6818      	ldr	r0, [r3, #0]
 8001e50:	f7fe fb9a 	bl	8000588 <__aeabi_f2d>
 8001e54:	4602      	mov	r2, r0
 8001e56:	460b      	mov	r3, r1
 8001e58:	496f      	ldr	r1, [pc, #444]	; (8002018 <main+0xbc0>)
 8001e5a:	4867      	ldr	r0, [pc, #412]	; (8001ff8 <main+0xba0>)
 8001e5c:	f00d ff5e 	bl	800fd1c <siprintf>
 8001e60:	4603      	mov	r3, r0
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	2364      	movs	r3, #100	; 0x64
 8001e66:	4964      	ldr	r1, [pc, #400]	; (8001ff8 <main+0xba0>)
 8001e68:	4864      	ldr	r0, [pc, #400]	; (8001ffc <main+0xba4>)
 8001e6a:	f006 fc93 	bl	8008794 <HAL_UART_Transmit>
						  /// End of Reading AMT103 data ///

						 end_time = HAL_GetTick(); // 끝 시간 측정
 8001e6e:	f000 ffdd 	bl	8002e2c <HAL_GetTick>
 8001e72:	4603      	mov	r3, r0
 8001e74:	4a69      	ldr	r2, [pc, #420]	; (800201c <main+0xbc4>)
 8001e76:	6013      	str	r3, [r2, #0]
						 time_diff = end_time - start_time; // 시간 차이 계산
 8001e78:	4b68      	ldr	r3, [pc, #416]	; (800201c <main+0xbc4>)
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	4b68      	ldr	r3, [pc, #416]	; (8002020 <main+0xbc8>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	4a68      	ldr	r2, [pc, #416]	; (8002024 <main+0xbcc>)
 8001e84:	6013      	str	r3, [r2, #0]

						 HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "\n"), 100);
 8001e86:	4968      	ldr	r1, [pc, #416]	; (8002028 <main+0xbd0>)
 8001e88:	485b      	ldr	r0, [pc, #364]	; (8001ff8 <main+0xba0>)
 8001e8a:	f00d ff47 	bl	800fd1c <siprintf>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	2364      	movs	r3, #100	; 0x64
 8001e94:	4958      	ldr	r1, [pc, #352]	; (8001ff8 <main+0xba0>)
 8001e96:	4859      	ldr	r0, [pc, #356]	; (8001ffc <main+0xba4>)
 8001e98:	f006 fc7c 	bl	8008794 <HAL_UART_Transmit>

						 }while(time_diff<5000);
 8001e9c:	4b61      	ldr	r3, [pc, #388]	; (8002024 <main+0xbcc>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f241 3287 	movw	r2, #4999	; 0x1387
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	f67f aed9 	bls.w	8001c5c <main+0x804>


		         receivedFlag = 0;
 8001eaa:	4b60      	ldr	r3, [pc, #384]	; (800202c <main+0xbd4>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	701a      	strb	r2, [r3, #0]

		     }

		  command = "auto";
 8001eb0:	4b5f      	ldr	r3, [pc, #380]	; (8002030 <main+0xbd8>)
 8001eb2:	f8c7 3bc8 	str.w	r3, [r7, #3016]	; 0xbc8
		  if(strncmp((char*)rxBuffer, command,strlen(command)) == 0)
 8001eb6:	f8d7 0bc8 	ldr.w	r0, [r7, #3016]	; 0xbc8
 8001eba:	f7fe f9a9 	bl	8000210 <strlen>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	f8d7 1bc8 	ldr.w	r1, [r7, #3016]	; 0xbc8
 8001ec6:	485b      	ldr	r0, [pc, #364]	; (8002034 <main+0xbdc>)
 8001ec8:	f00d ffc1 	bl	800fe4e <strncmp>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	f040 819e 	bne.w	8002210 <main+0xdb8>
		     {
	        	 HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "autoMode\r\n"), 100);
 8001ed4:	4958      	ldr	r1, [pc, #352]	; (8002038 <main+0xbe0>)
 8001ed6:	4848      	ldr	r0, [pc, #288]	; (8001ff8 <main+0xba0>)
 8001ed8:	f00d ff20 	bl	800fd1c <siprintf>
 8001edc:	4603      	mov	r3, r0
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	2364      	movs	r3, #100	; 0x64
 8001ee2:	4945      	ldr	r1, [pc, #276]	; (8001ff8 <main+0xba0>)
 8001ee4:	4845      	ldr	r0, [pc, #276]	; (8001ffc <main+0xba4>)
 8001ee6:	f006 fc55 	bl	8008794 <HAL_UART_Transmit>
//		             stepRev(0); // fix the position
//
//		             stepLin(10); // moving horizontal
//		             stepLin(-10); //

	        	 for( int lin = 0; lin < 16;lin ++){
 8001eea:	2300      	movs	r3, #0
 8001eec:	f8c7 3be0 	str.w	r3, [r7, #3040]	; 0xbe0
 8001ef0:	e186      	b.n	8002200 <main+0xda8>
	        		 stepLin(10); // moving horizontal
 8001ef2:	200a      	movs	r0, #10
 8001ef4:	f000 fb34 	bl	8002560 <stepLin>
					 for(int rev = 0; rev<1; rev++){
 8001ef8:	2300      	movs	r3, #0
 8001efa:	f8c7 3bdc 	str.w	r3, [r7, #3036]	; 0xbdc
 8001efe:	e175      	b.n	80021ec <main+0xd94>
						 //stepRev(10); // revolution
						 for(int r = 0;r<16;r++){
 8001f00:	2300      	movs	r3, #0
 8001f02:	f8c7 3bd8 	str.w	r3, [r7, #3032]	; 0xbd8
 8001f06:	e167      	b.n	80021d8 <main+0xd80>

							 servo_angle(&htim2, TIM_CHANNEL_1, r); // poking
 8001f08:	f8d7 2bd8 	ldr.w	r2, [r7, #3032]	; 0xbd8
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	484b      	ldr	r0, [pc, #300]	; (800203c <main+0xbe4>)
 8001f10:	f000 fbc0 	bl	8002694 <servo_angle>

							 ///////////////////////////////////////////////////////
							 ////////////////////Logging Start//////////////////////
							 ///////////////////////////////////////////////////////
							 start_time = HAL_GetTick(); // 시작 시간 측정
 8001f14:	f000 ff8a 	bl	8002e2c <HAL_GetTick>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	4a41      	ldr	r2, [pc, #260]	; (8002020 <main+0xbc8>)
 8001f1c:	6013      	str	r3, [r2, #0]
							 do{
							  /// Read the VL53l0x data ///
							   for (int i = 0; i < NUM_SENSOR; i++) {
 8001f1e:	2300      	movs	r3, #0
 8001f20:	f8c7 3bd4 	str.w	r3, [r7, #3028]	; 0xbd4
 8001f24:	e0ae      	b.n	8002084 <main+0xc2c>
									uint8_t q = i / 8;
 8001f26:	f8d7 3bd4 	ldr.w	r3, [r7, #3028]	; 0xbd4
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	da00      	bge.n	8001f30 <main+0xad8>
 8001f2e:	3307      	adds	r3, #7
 8001f30:	10db      	asrs	r3, r3, #3
 8001f32:	f887 3b9f 	strb.w	r3, [r7, #2975]	; 0xb9f
									uint8_t r = i % 8;
 8001f36:	f8d7 3bd4 	ldr.w	r3, [r7, #3028]	; 0xbd4
 8001f3a:	425a      	negs	r2, r3
 8001f3c:	f003 0307 	and.w	r3, r3, #7
 8001f40:	f002 0207 	and.w	r2, r2, #7
 8001f44:	bf58      	it	pl
 8001f46:	4253      	negpl	r3, r2
 8001f48:	f887 3b9e 	strb.w	r3, [r7, #2974]	; 0xb9e
									for (int j = 0; j < sizeof(tca_addr); j++) {
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	f8c7 3bd0 	str.w	r3, [r7, #3024]	; 0xbd0
 8001f52:	e028      	b.n	8001fa6 <main+0xb4e>
										uint8_t *channel = (j == q) ? &tca_ch[r] : &tca_ch_reset;
 8001f54:	f897 3b9f 	ldrb.w	r3, [r7, #2975]	; 0xb9f
 8001f58:	f8d7 2bd0 	ldr.w	r2, [r7, #3024]	; 0xbd0
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d105      	bne.n	8001f6c <main+0xb14>
 8001f60:	f897 3b9e 	ldrb.w	r3, [r7, #2974]	; 0xb9e
 8001f64:	f107 021c 	add.w	r2, r7, #28
 8001f68:	4413      	add	r3, r2
 8001f6a:	e001      	b.n	8001f70 <main+0xb18>
 8001f6c:	f107 031b 	add.w	r3, r7, #27
 8001f70:	f8c7 3b98 	str.w	r3, [r7, #2968]	; 0xb98
										HAL_I2C_Master_Transmit(&hi2c1, tca_addr[j] << 1, channel, 1, 1000);
 8001f74:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 8001f78:	f5a3 623e 	sub.w	r2, r3, #3040	; 0xbe0
 8001f7c:	f8d7 3bd0 	ldr.w	r3, [r7, #3024]	; 0xbd0
 8001f80:	4413      	add	r3, r2
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	b299      	uxth	r1, r3
 8001f8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f8e:	9300      	str	r3, [sp, #0]
 8001f90:	2301      	movs	r3, #1
 8001f92:	f8d7 2b98 	ldr.w	r2, [r7, #2968]	; 0xb98
 8001f96:	4815      	ldr	r0, [pc, #84]	; (8001fec <main+0xb94>)
 8001f98:	f001 fe40 	bl	8003c1c <HAL_I2C_Master_Transmit>
									for (int j = 0; j < sizeof(tca_addr); j++) {
 8001f9c:	f8d7 3bd0 	ldr.w	r3, [r7, #3024]	; 0xbd0
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	f8c7 3bd0 	str.w	r3, [r7, #3024]	; 0xbd0
 8001fa6:	f8d7 3bd0 	ldr.w	r3, [r7, #3024]	; 0xbd0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d0d2      	beq.n	8001f54 <main+0xafc>
									}
								   Dev = &vl53l0x_s[i];
 8001fae:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001fb2:	f8d7 3bd4 	ldr.w	r3, [r7, #3028]	; 0xbd4
 8001fb6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001fba:	fb01 f303 	mul.w	r3, r1, r3
 8001fbe:	4413      	add	r3, r2
 8001fc0:	f8c7 3bb0 	str.w	r3, [r7, #2992]	; 0xbb0
								   VL53L0X_PerformContinuousRangingMeasurement(Dev, &RangingData); // 1500us
 8001fc4:	490a      	ldr	r1, [pc, #40]	; (8001ff0 <main+0xb98>)
 8001fc6:	f8d7 0bb0 	ldr.w	r0, [r7, #2992]	; 0xbb0
 8001fca:	f009 fc76 	bl	800b8ba <VL53L0X_PerformContinuousRangingMeasurement>
								   if (RangingData.RangeStatus == 0) {
 8001fce:	4b08      	ldr	r3, [pc, #32]	; (8001ff0 <main+0xb98>)
 8001fd0:	7e1b      	ldrb	r3, [r3, #24]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d134      	bne.n	8002040 <main+0xbe8>
									   distance[i] = RangingData.RangeMilliMeter;
 8001fd6:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <main+0xb98>)
 8001fd8:	8919      	ldrh	r1, [r3, #8]
 8001fda:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 8001fde:	f6a3 33d4 	subw	r3, r3, #3028	; 0xbd4
 8001fe2:	f8d7 2bd4 	ldr.w	r2, [r7, #3028]	; 0xbd4
 8001fe6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8001fea:	e032      	b.n	8002052 <main+0xbfa>
 8001fec:	200004b8 	.word	0x200004b8
 8001ff0:	200005e0 	.word	0x200005e0
 8001ff4:	0801442c 	.word	0x0801442c
 8001ff8:	200005a0 	.word	0x200005a0
 8001ffc:	2000069c 	.word	0x2000069c
 8002000:	08014430 	.word	0x08014430
 8002004:	ba23d70a 	.word	0xba23d70a
 8002008:	461c4800 	.word	0x461c4800
 800200c:	200005fc 	.word	0x200005fc
 8002010:	40768000 	.word	0x40768000
 8002014:	40b00000 	.word	0x40b00000
 8002018:	08014438 	.word	0x08014438
 800201c:	20000598 	.word	0x20000598
 8002020:	20000594 	.word	0x20000594
 8002024:	20000590 	.word	0x20000590
 8002028:	08014440 	.word	0x08014440
 800202c:	2000058f 	.word	0x2000058f
 8002030:	08014444 	.word	0x08014444
 8002034:	2000050c 	.word	0x2000050c
 8002038:	0801444c 	.word	0x0801444c
 800203c:	20000604 	.word	0x20000604
								   }else{
									   distance[i] = 0;
 8002040:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 8002044:	f6a3 33d4 	subw	r3, r3, #3028	; 0xbd4
 8002048:	f8d7 2bd4 	ldr.w	r2, [r7, #3028]	; 0xbd4
 800204c:	2100      	movs	r1, #0
 800204e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
								   }
								 HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "%d ",distance[i]), 100);
 8002052:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 8002056:	f6a3 33d4 	subw	r3, r3, #3028	; 0xbd4
 800205a:	f8d7 2bd4 	ldr.w	r2, [r7, #3028]	; 0xbd4
 800205e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002062:	461a      	mov	r2, r3
 8002064:	4971      	ldr	r1, [pc, #452]	; (800222c <main+0xdd4>)
 8002066:	4872      	ldr	r0, [pc, #456]	; (8002230 <main+0xdd8>)
 8002068:	f00d fe58 	bl	800fd1c <siprintf>
 800206c:	4603      	mov	r3, r0
 800206e:	b29a      	uxth	r2, r3
 8002070:	2364      	movs	r3, #100	; 0x64
 8002072:	496f      	ldr	r1, [pc, #444]	; (8002230 <main+0xdd8>)
 8002074:	486f      	ldr	r0, [pc, #444]	; (8002234 <main+0xddc>)
 8002076:	f006 fb8d 	bl	8008794 <HAL_UART_Transmit>
							   for (int i = 0; i < NUM_SENSOR; i++) {
 800207a:	f8d7 3bd4 	ldr.w	r3, [r7, #3028]	; 0xbd4
 800207e:	3301      	adds	r3, #1
 8002080:	f8c7 3bd4 	str.w	r3, [r7, #3028]	; 0xbd4
 8002084:	f8d7 3bd4 	ldr.w	r3, [r7, #3028]	; 0xbd4
 8002088:	2b06      	cmp	r3, #6
 800208a:	f77f af4c 	ble.w	8001f26 <main+0xace>
							   }
							   /// End of Reading Vl53l0x data ///


						  /// Read the raw data from HX711 ///
						  rawData = Read_HX711();
 800208e:	f7ff f8a7 	bl	80011e0 <Read_HX711>
 8002092:	f8c7 0bc4 	str.w	r0, [r7, #3012]	; 0xbc4
						  float loadcell_slope = -1/1600.00f; // Convert the raw data to weight (replace the calibration factor with your own)
 8002096:	4b68      	ldr	r3, [pc, #416]	; (8002238 <main+0xde0>)
 8002098:	f607 32a8 	addw	r2, r7, #2984	; 0xba8
 800209c:	6013      	str	r3, [r2, #0]
						  float loadcell_bias = 10002;
 800209e:	4b67      	ldr	r3, [pc, #412]	; (800223c <main+0xde4>)
 80020a0:	f607 32a4 	addw	r2, r7, #2980	; 0xba4
 80020a4:	6013      	str	r3, [r2, #0]
						  UART_SendWeight_g(rawData,loadcell_slope,loadcell_bias); // Send the weight data over UART
 80020a6:	f8d7 3bc4 	ldr.w	r3, [r7, #3012]	; 0xbc4
 80020aa:	ee07 3a90 	vmov	s15, r3
 80020ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020b2:	f607 33a4 	addw	r3, r7, #2980	; 0xba4
 80020b6:	ed93 1a00 	vldr	s2, [r3]
 80020ba:	f607 33a8 	addw	r3, r7, #2984	; 0xba8
 80020be:	edd3 0a00 	vldr	s1, [r3]
 80020c2:	eeb0 0a67 	vmov.f32	s0, s15
 80020c6:	f7ff f8d9 	bl	800127c <UART_SendWeight_g>
						  /// End of Reading HX711 data ///

						  /// Read the raw data from AMT103 ///
						  float encoderAngle = encoderCount*360.0/4096.0;
 80020ca:	4b5d      	ldr	r3, [pc, #372]	; (8002240 <main+0xde8>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7fe fa48 	bl	8000564 <__aeabi_i2d>
 80020d4:	f04f 0200 	mov.w	r2, #0
 80020d8:	4b5a      	ldr	r3, [pc, #360]	; (8002244 <main+0xdec>)
 80020da:	f7fe faad 	bl	8000638 <__aeabi_dmul>
 80020de:	4602      	mov	r2, r0
 80020e0:	460b      	mov	r3, r1
 80020e2:	4610      	mov	r0, r2
 80020e4:	4619      	mov	r1, r3
 80020e6:	f04f 0200 	mov.w	r2, #0
 80020ea:	4b57      	ldr	r3, [pc, #348]	; (8002248 <main+0xdf0>)
 80020ec:	f7fe fbce 	bl	800088c <__aeabi_ddiv>
 80020f0:	4602      	mov	r2, r0
 80020f2:	460b      	mov	r3, r1
 80020f4:	4610      	mov	r0, r2
 80020f6:	4619      	mov	r1, r3
 80020f8:	f7fe fd96 	bl	8000c28 <__aeabi_d2f>
 80020fc:	4603      	mov	r3, r0
 80020fe:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 8002102:	6013      	str	r3, [r2, #0]
						  HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, " %.2f ",encoderAngle), 100);
 8002104:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 8002108:	6818      	ldr	r0, [r3, #0]
 800210a:	f7fe fa3d 	bl	8000588 <__aeabi_f2d>
 800210e:	4602      	mov	r2, r0
 8002110:	460b      	mov	r3, r1
 8002112:	494e      	ldr	r1, [pc, #312]	; (800224c <main+0xdf4>)
 8002114:	4846      	ldr	r0, [pc, #280]	; (8002230 <main+0xdd8>)
 8002116:	f00d fe01 	bl	800fd1c <siprintf>
 800211a:	4603      	mov	r3, r0
 800211c:	b29a      	uxth	r2, r3
 800211e:	2364      	movs	r3, #100	; 0x64
 8002120:	4943      	ldr	r1, [pc, #268]	; (8002230 <main+0xdd8>)
 8002122:	4844      	ldr	r0, [pc, #272]	; (8002234 <main+0xddc>)
 8002124:	f006 fb36 	bl	8008794 <HAL_UART_Transmit>
						  /// End of Reading AMT103 data ///

						 end_time = HAL_GetTick(); // 끝 시간 측정
 8002128:	f000 fe80 	bl	8002e2c <HAL_GetTick>
 800212c:	4603      	mov	r3, r0
 800212e:	4a48      	ldr	r2, [pc, #288]	; (8002250 <main+0xdf8>)
 8002130:	6013      	str	r3, [r2, #0]
						 time_diff = end_time - start_time; // 시간 차이 계산
 8002132:	4b47      	ldr	r3, [pc, #284]	; (8002250 <main+0xdf8>)
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	4b47      	ldr	r3, [pc, #284]	; (8002254 <main+0xdfc>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	4a46      	ldr	r2, [pc, #280]	; (8002258 <main+0xe00>)
 800213e:	6013      	str	r3, [r2, #0]


						 HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "%d ",10*lin), 100);
 8002140:	f8d7 2be0 	ldr.w	r2, [r7, #3040]	; 0xbe0
 8002144:	4613      	mov	r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	4413      	add	r3, r2
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	461a      	mov	r2, r3
 800214e:	4937      	ldr	r1, [pc, #220]	; (800222c <main+0xdd4>)
 8002150:	4837      	ldr	r0, [pc, #220]	; (8002230 <main+0xdd8>)
 8002152:	f00d fde3 	bl	800fd1c <siprintf>
 8002156:	4603      	mov	r3, r0
 8002158:	b29a      	uxth	r2, r3
 800215a:	2364      	movs	r3, #100	; 0x64
 800215c:	4934      	ldr	r1, [pc, #208]	; (8002230 <main+0xdd8>)
 800215e:	4835      	ldr	r0, [pc, #212]	; (8002234 <main+0xddc>)
 8002160:	f006 fb18 	bl	8008794 <HAL_UART_Transmit>
						 HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "%d ",rev), 100);
 8002164:	f8d7 2bdc 	ldr.w	r2, [r7, #3036]	; 0xbdc
 8002168:	4930      	ldr	r1, [pc, #192]	; (800222c <main+0xdd4>)
 800216a:	4831      	ldr	r0, [pc, #196]	; (8002230 <main+0xdd8>)
 800216c:	f00d fdd6 	bl	800fd1c <siprintf>
 8002170:	4603      	mov	r3, r0
 8002172:	b29a      	uxth	r2, r3
 8002174:	2364      	movs	r3, #100	; 0x64
 8002176:	492e      	ldr	r1, [pc, #184]	; (8002230 <main+0xdd8>)
 8002178:	482e      	ldr	r0, [pc, #184]	; (8002234 <main+0xddc>)
 800217a:	f006 fb0b 	bl	8008794 <HAL_UART_Transmit>
						 HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "%d",r), 100);
 800217e:	f8d7 2bd8 	ldr.w	r2, [r7, #3032]	; 0xbd8
 8002182:	4936      	ldr	r1, [pc, #216]	; (800225c <main+0xe04>)
 8002184:	482a      	ldr	r0, [pc, #168]	; (8002230 <main+0xdd8>)
 8002186:	f00d fdc9 	bl	800fd1c <siprintf>
 800218a:	4603      	mov	r3, r0
 800218c:	b29a      	uxth	r2, r3
 800218e:	2364      	movs	r3, #100	; 0x64
 8002190:	4927      	ldr	r1, [pc, #156]	; (8002230 <main+0xdd8>)
 8002192:	4828      	ldr	r0, [pc, #160]	; (8002234 <main+0xddc>)
 8002194:	f006 fafe 	bl	8008794 <HAL_UART_Transmit>
						 HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "\n"), 100);
 8002198:	4931      	ldr	r1, [pc, #196]	; (8002260 <main+0xe08>)
 800219a:	4825      	ldr	r0, [pc, #148]	; (8002230 <main+0xdd8>)
 800219c:	f00d fdbe 	bl	800fd1c <siprintf>
 80021a0:	4603      	mov	r3, r0
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	2364      	movs	r3, #100	; 0x64
 80021a6:	4922      	ldr	r1, [pc, #136]	; (8002230 <main+0xdd8>)
 80021a8:	4822      	ldr	r0, [pc, #136]	; (8002234 <main+0xddc>)
 80021aa:	f006 faf3 	bl	8008794 <HAL_UART_Transmit>

						 }while(time_diff<3000);
 80021ae:	4b2a      	ldr	r3, [pc, #168]	; (8002258 <main+0xe00>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80021b6:	4293      	cmp	r3, r2
 80021b8:	f67f aeb1 	bls.w	8001f1e <main+0xac6>
						 ///////////////////////////////////////////////////////
						 ////////////////////Logging End////////////////////////
						 ///////////////////////////////////////////////////////
						 servo_angle(&htim2, TIM_CHANNEL_1, 0); // turn to origin
 80021bc:	2200      	movs	r2, #0
 80021be:	2100      	movs	r1, #0
 80021c0:	4828      	ldr	r0, [pc, #160]	; (8002264 <main+0xe0c>)
 80021c2:	f000 fa67 	bl	8002694 <servo_angle>
						 HAL_Delay(500);
 80021c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80021ca:	f000 fe3b 	bl	8002e44 <HAL_Delay>
						 for(int r = 0;r<16;r++){
 80021ce:	f8d7 3bd8 	ldr.w	r3, [r7, #3032]	; 0xbd8
 80021d2:	3301      	adds	r3, #1
 80021d4:	f8c7 3bd8 	str.w	r3, [r7, #3032]	; 0xbd8
 80021d8:	f8d7 3bd8 	ldr.w	r3, [r7, #3032]	; 0xbd8
 80021dc:	2b0f      	cmp	r3, #15
 80021de:	f77f ae93 	ble.w	8001f08 <main+0xab0>
					 for(int rev = 0; rev<1; rev++){
 80021e2:	f8d7 3bdc 	ldr.w	r3, [r7, #3036]	; 0xbdc
 80021e6:	3301      	adds	r3, #1
 80021e8:	f8c7 3bdc 	str.w	r3, [r7, #3036]	; 0xbdc
 80021ec:	f8d7 3bdc 	ldr.w	r3, [r7, #3036]	; 0xbdc
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f77f ae85 	ble.w	8001f00 <main+0xaa8>
	        	 for( int lin = 0; lin < 16;lin ++){
 80021f6:	f8d7 3be0 	ldr.w	r3, [r7, #3040]	; 0xbe0
 80021fa:	3301      	adds	r3, #1
 80021fc:	f8c7 3be0 	str.w	r3, [r7, #3040]	; 0xbe0
 8002200:	f8d7 3be0 	ldr.w	r3, [r7, #3040]	; 0xbe0
 8002204:	2b0f      	cmp	r3, #15
 8002206:	f77f ae74 	ble.w	8001ef2 <main+0xa9a>
						 }
					 }
	        	 }


		         receivedFlag = 0;
 800220a:	4b17      	ldr	r3, [pc, #92]	; (8002268 <main+0xe10>)
 800220c:	2200      	movs	r2, #0
 800220e:	701a      	strb	r2, [r3, #0]
		     }

     	 HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "Message end\r\n"), 100);
 8002210:	4916      	ldr	r1, [pc, #88]	; (800226c <main+0xe14>)
 8002212:	4807      	ldr	r0, [pc, #28]	; (8002230 <main+0xdd8>)
 8002214:	f00d fd82 	bl	800fd1c <siprintf>
 8002218:	4603      	mov	r3, r0
 800221a:	b29a      	uxth	r2, r3
 800221c:	2364      	movs	r3, #100	; 0x64
 800221e:	4904      	ldr	r1, [pc, #16]	; (8002230 <main+0xdd8>)
 8002220:	4804      	ldr	r0, [pc, #16]	; (8002234 <main+0xddc>)
 8002222:	f006 fab7 	bl	8008794 <HAL_UART_Transmit>
	  if(startMessage==0){
 8002226:	f7ff ba65 	b.w	80016f4 <main+0x29c>
 800222a:	bf00      	nop
 800222c:	0801442c 	.word	0x0801442c
 8002230:	200005a0 	.word	0x200005a0
 8002234:	2000069c 	.word	0x2000069c
 8002238:	ba23d70a 	.word	0xba23d70a
 800223c:	461c4800 	.word	0x461c4800
 8002240:	200005fc 	.word	0x200005fc
 8002244:	40768000 	.word	0x40768000
 8002248:	40b00000 	.word	0x40b00000
 800224c:	08014438 	.word	0x08014438
 8002250:	20000598 	.word	0x20000598
 8002254:	20000594 	.word	0x20000594
 8002258:	20000590 	.word	0x20000590
 800225c:	080143e4 	.word	0x080143e4
 8002260:	08014440 	.word	0x08014440
 8002264:	20000604 	.word	0x20000604
 8002268:	2000058f 	.word	0x2000058f
 800226c:	08014458 	.word	0x08014458

08002270 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b094      	sub	sp, #80	; 0x50
 8002274:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002276:	f107 0320 	add.w	r3, r7, #32
 800227a:	2230      	movs	r2, #48	; 0x30
 800227c:	2100      	movs	r1, #0
 800227e:	4618      	mov	r0, r3
 8002280:	f00c fec4 	bl	800f00c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002284:	f107 030c 	add.w	r3, r7, #12
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	605a      	str	r2, [r3, #4]
 800228e:	609a      	str	r2, [r3, #8]
 8002290:	60da      	str	r2, [r3, #12]
 8002292:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002294:	4b2b      	ldr	r3, [pc, #172]	; (8002344 <SystemClock_Config+0xd4>)
 8002296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002298:	4a2a      	ldr	r2, [pc, #168]	; (8002344 <SystemClock_Config+0xd4>)
 800229a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800229e:	6413      	str	r3, [r2, #64]	; 0x40
 80022a0:	4b28      	ldr	r3, [pc, #160]	; (8002344 <SystemClock_Config+0xd4>)
 80022a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a8:	60bb      	str	r3, [r7, #8]
 80022aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022ac:	4b26      	ldr	r3, [pc, #152]	; (8002348 <SystemClock_Config+0xd8>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a25      	ldr	r2, [pc, #148]	; (8002348 <SystemClock_Config+0xd8>)
 80022b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022b6:	6013      	str	r3, [r2, #0]
 80022b8:	4b23      	ldr	r3, [pc, #140]	; (8002348 <SystemClock_Config+0xd8>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80022c0:	607b      	str	r3, [r7, #4]
 80022c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80022c4:	2301      	movs	r3, #1
 80022c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80022c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022ce:	2302      	movs	r3, #2
 80022d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80022d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80022d8:	2319      	movs	r3, #25
 80022da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 80022dc:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80022e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80022e2:	2302      	movs	r3, #2
 80022e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80022e6:	2302      	movs	r3, #2
 80022e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022ea:	f107 0320 	add.w	r3, r7, #32
 80022ee:	4618      	mov	r0, r3
 80022f0:	f002 fa6e 	bl	80047d0 <HAL_RCC_OscConfig>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80022fa:	f000 f8b7 	bl	800246c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80022fe:	f002 fa17 	bl	8004730 <HAL_PWREx_EnableOverDrive>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002308:	f000 f8b0 	bl	800246c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800230c:	230f      	movs	r3, #15
 800230e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002310:	2302      	movs	r3, #2
 8002312:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002314:	2300      	movs	r3, #0
 8002316:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002318:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800231c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800231e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002322:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002324:	f107 030c 	add.w	r3, r7, #12
 8002328:	2107      	movs	r1, #7
 800232a:	4618      	mov	r0, r3
 800232c:	f002 fdaa 	bl	8004e84 <HAL_RCC_ClockConfig>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8002336:	f000 f899 	bl	800246c <Error_Handler>
  }
}
 800233a:	bf00      	nop
 800233c:	3750      	adds	r7, #80	; 0x50
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40023800 	.word	0x40023800
 8002348:	40007000 	.word	0x40007000

0800234c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002350:	2200      	movs	r2, #0
 8002352:	2100      	movs	r1, #0
 8002354:	2025      	movs	r0, #37	; 0x25
 8002356:	f000 fe89 	bl	800306c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 800235a:	2025      	movs	r0, #37	; 0x25
 800235c:	f000 feb2 	bl	80030c4 <HAL_NVIC_EnableIRQ>
  /* TIM7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 8002360:	2200      	movs	r2, #0
 8002362:	2101      	movs	r1, #1
 8002364:	2037      	movs	r0, #55	; 0x37
 8002366:	f000 fe81 	bl	800306c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800236a:	2037      	movs	r0, #55	; 0x37
 800236c:	f000 feaa 	bl	80030c4 <HAL_NVIC_EnableIRQ>
}
 8002370:	bf00      	nop
 8002372:	bd80      	pop	{r7, pc}

08002374 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a15      	ldr	r2, [pc, #84]	; (80023d8 <HAL_UART_RxCpltCallback+0x64>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d124      	bne.n	80023d0 <HAL_UART_RxCpltCallback+0x5c>
  {
    if (rxData != '\n' && rxBufferIndex < RX_BUFFER_SIZE - 1)
 8002386:	4b15      	ldr	r3, [pc, #84]	; (80023dc <HAL_UART_RxCpltCallback+0x68>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	2b0a      	cmp	r3, #10
 800238c:	d00f      	beq.n	80023ae <HAL_UART_RxCpltCallback+0x3a>
 800238e:	4b14      	ldr	r3, [pc, #80]	; (80023e0 <HAL_UART_RxCpltCallback+0x6c>)
 8002390:	881b      	ldrh	r3, [r3, #0]
 8002392:	2b7e      	cmp	r3, #126	; 0x7e
 8002394:	d80b      	bhi.n	80023ae <HAL_UART_RxCpltCallback+0x3a>
    {
      rxBuffer[rxBufferIndex++] = rxData;
 8002396:	4b12      	ldr	r3, [pc, #72]	; (80023e0 <HAL_UART_RxCpltCallback+0x6c>)
 8002398:	881b      	ldrh	r3, [r3, #0]
 800239a:	1c5a      	adds	r2, r3, #1
 800239c:	b291      	uxth	r1, r2
 800239e:	4a10      	ldr	r2, [pc, #64]	; (80023e0 <HAL_UART_RxCpltCallback+0x6c>)
 80023a0:	8011      	strh	r1, [r2, #0]
 80023a2:	461a      	mov	r2, r3
 80023a4:	4b0d      	ldr	r3, [pc, #52]	; (80023dc <HAL_UART_RxCpltCallback+0x68>)
 80023a6:	7819      	ldrb	r1, [r3, #0]
 80023a8:	4b0e      	ldr	r3, [pc, #56]	; (80023e4 <HAL_UART_RxCpltCallback+0x70>)
 80023aa:	5499      	strb	r1, [r3, r2]
 80023ac:	e00b      	b.n	80023c6 <HAL_UART_RxCpltCallback+0x52>
    }
    else
    {
      rxBuffer[rxBufferIndex] = '\0';
 80023ae:	4b0c      	ldr	r3, [pc, #48]	; (80023e0 <HAL_UART_RxCpltCallback+0x6c>)
 80023b0:	881b      	ldrh	r3, [r3, #0]
 80023b2:	461a      	mov	r2, r3
 80023b4:	4b0b      	ldr	r3, [pc, #44]	; (80023e4 <HAL_UART_RxCpltCallback+0x70>)
 80023b6:	2100      	movs	r1, #0
 80023b8:	5499      	strb	r1, [r3, r2]
      rxBufferIndex = 0;
 80023ba:	4b09      	ldr	r3, [pc, #36]	; (80023e0 <HAL_UART_RxCpltCallback+0x6c>)
 80023bc:	2200      	movs	r2, #0
 80023be:	801a      	strh	r2, [r3, #0]
      receivedFlag = 1; // 문자?��?�� ?��?��?��?��?��?�� ?��리는 ?��?��그�?? ?��?��?��?��?��.
 80023c0:	4b09      	ldr	r3, [pc, #36]	; (80023e8 <HAL_UART_RxCpltCallback+0x74>)
 80023c2:	2201      	movs	r2, #1
 80023c4:	701a      	strb	r2, [r3, #0]
    }
    HAL_UART_Receive_IT(&huart1, &rxData, 1);
 80023c6:	2201      	movs	r2, #1
 80023c8:	4904      	ldr	r1, [pc, #16]	; (80023dc <HAL_UART_RxCpltCallback+0x68>)
 80023ca:	4808      	ldr	r0, [pc, #32]	; (80023ec <HAL_UART_RxCpltCallback+0x78>)
 80023cc:	f006 fa65 	bl	800889a <HAL_UART_Receive_IT>
  }
}
 80023d0:	bf00      	nop
 80023d2:	3708      	adds	r7, #8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40011000 	.word	0x40011000
 80023dc:	2000058e 	.word	0x2000058e
 80023e0:	2000058c 	.word	0x2000058c
 80023e4:	2000050c 	.word	0x2000050c
 80023e8:	2000058f 	.word	0x2000058f
 80023ec:	2000069c 	.word	0x2000069c

080023f0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_8) // A?��?�� ???�� ?��?��?��?��
 80023fa:	88fb      	ldrh	r3, [r7, #6]
 80023fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002400:	d113      	bne.n	800242a <HAL_GPIO_EXTI_Callback+0x3a>
  {
    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)) // B?�� 값을 ?��?��
 8002402:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002406:	4816      	ldr	r0, [pc, #88]	; (8002460 <HAL_GPIO_EXTI_Callback+0x70>)
 8002408:	f001 fa82 	bl	8003910 <HAL_GPIO_ReadPin>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d005      	beq.n	800241e <HAL_GPIO_EXTI_Callback+0x2e>
    {
      encoderCount++;
 8002412:	4b14      	ldr	r3, [pc, #80]	; (8002464 <HAL_GPIO_EXTI_Callback+0x74>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	3301      	adds	r3, #1
 8002418:	4a12      	ldr	r2, [pc, #72]	; (8002464 <HAL_GPIO_EXTI_Callback+0x74>)
 800241a:	6013      	str	r3, [r2, #0]
    else
    {
      encoderCount++;
    }
  }
}
 800241c:	e01c      	b.n	8002458 <HAL_GPIO_EXTI_Callback+0x68>
      encoderCount--;
 800241e:	4b11      	ldr	r3, [pc, #68]	; (8002464 <HAL_GPIO_EXTI_Callback+0x74>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	3b01      	subs	r3, #1
 8002424:	4a0f      	ldr	r2, [pc, #60]	; (8002464 <HAL_GPIO_EXTI_Callback+0x74>)
 8002426:	6013      	str	r3, [r2, #0]
}
 8002428:	e016      	b.n	8002458 <HAL_GPIO_EXTI_Callback+0x68>
  else if (GPIO_Pin == GPIO_PIN_15) // B?��?�� ???�� ?��?��?��?��
 800242a:	88fb      	ldrh	r3, [r7, #6]
 800242c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002430:	d112      	bne.n	8002458 <HAL_GPIO_EXTI_Callback+0x68>
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) // A?�� 값을 ?��?��
 8002432:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002436:	480c      	ldr	r0, [pc, #48]	; (8002468 <HAL_GPIO_EXTI_Callback+0x78>)
 8002438:	f001 fa6a 	bl	8003910 <HAL_GPIO_ReadPin>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d005      	beq.n	800244e <HAL_GPIO_EXTI_Callback+0x5e>
      encoderCount--;
 8002442:	4b08      	ldr	r3, [pc, #32]	; (8002464 <HAL_GPIO_EXTI_Callback+0x74>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	3b01      	subs	r3, #1
 8002448:	4a06      	ldr	r2, [pc, #24]	; (8002464 <HAL_GPIO_EXTI_Callback+0x74>)
 800244a:	6013      	str	r3, [r2, #0]
}
 800244c:	e004      	b.n	8002458 <HAL_GPIO_EXTI_Callback+0x68>
      encoderCount++;
 800244e:	4b05      	ldr	r3, [pc, #20]	; (8002464 <HAL_GPIO_EXTI_Callback+0x74>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	3301      	adds	r3, #1
 8002454:	4a03      	ldr	r2, [pc, #12]	; (8002464 <HAL_GPIO_EXTI_Callback+0x74>)
 8002456:	6013      	str	r3, [r2, #0]
}
 8002458:	bf00      	nop
 800245a:	3708      	adds	r7, #8
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	40020400 	.word	0x40020400
 8002464:	200005fc 	.word	0x200005fc
 8002468:	40020000 	.word	0x40020000

0800246c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002470:	b672      	cpsid	i
}
 8002472:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002474:	e7fe      	b.n	8002474 <Error_Handler+0x8>

08002476 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8002476:	b480      	push	{r7}
 8002478:	b083      	sub	sp, #12
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
 800247e:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <stepRev>:
#include "gpio.h"
#include "tim.h"

#define PULSE 200

void stepRev(int ANG) {
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
	// ENA D2 PG7 GPIOG GPIO_PIN_6
	// CLK D3 PB4 GPIOB GPIO_PIN_4
	// DIR D4 PG7 GPIOG GPIO_PIN_7


  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);  // ENA
 8002494:	2200      	movs	r2, #0
 8002496:	2140      	movs	r1, #64	; 0x40
 8002498:	482e      	ldr	r0, [pc, #184]	; (8002554 <stepRev+0xc8>)
 800249a:	f001 fa59 	bl	8003950 <HAL_GPIO_WritePin>

  if (ANG != 0) {
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d04d      	beq.n	8002540 <stepRev+0xb4>
    int direction = (ANG > 0) ? 1 : -1;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	dd01      	ble.n	80024ae <stepRev+0x22>
 80024aa:	2301      	movs	r3, #1
 80024ac:	e001      	b.n	80024b2 <stepRev+0x26>
 80024ae:	f04f 33ff 	mov.w	r3, #4294967295
 80024b2:	613b      	str	r3, [r7, #16]
    ANG *= direction;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	fb02 f303 	mul.w	r3, r2, r3
 80024bc:	607b      	str	r3, [r7, #4]
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, direction == 1 ? GPIO_PIN_SET : GPIO_PIN_RESET); // DIR
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	bf0c      	ite	eq
 80024c4:	2301      	moveq	r3, #1
 80024c6:	2300      	movne	r3, #0
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	461a      	mov	r2, r3
 80024cc:	2180      	movs	r1, #128	; 0x80
 80024ce:	4821      	ldr	r0, [pc, #132]	; (8002554 <stepRev+0xc8>)
 80024d0:	f001 fa3e 	bl	8003950 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET); // ENA
 80024d4:	2200      	movs	r2, #0
 80024d6:	2140      	movs	r1, #64	; 0x40
 80024d8:	481e      	ldr	r0, [pc, #120]	; (8002554 <stepRev+0xc8>)
 80024da:	f001 fa39 	bl	8003950 <HAL_GPIO_WritePin>
    uint32_t steps = PULSE * ANG / 360.0;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	22c8      	movs	r2, #200	; 0xc8
 80024e2:	fb02 f303 	mul.w	r3, r2, r3
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7fe f83c 	bl	8000564 <__aeabi_i2d>
 80024ec:	f04f 0200 	mov.w	r2, #0
 80024f0:	4b19      	ldr	r3, [pc, #100]	; (8002558 <stepRev+0xcc>)
 80024f2:	f7fe f9cb 	bl	800088c <__aeabi_ddiv>
 80024f6:	4602      	mov	r2, r0
 80024f8:	460b      	mov	r3, r1
 80024fa:	4610      	mov	r0, r2
 80024fc:	4619      	mov	r1, r3
 80024fe:	f7fe fb73 	bl	8000be8 <__aeabi_d2uiz>
 8002502:	4603      	mov	r3, r0
 8002504:	60fb      	str	r3, [r7, #12]
    uint32_t pulse_delay_ms_ = 5; // 6rpm
 8002506:	2305      	movs	r3, #5
 8002508:	60bb      	str	r3, [r7, #8]

    for (int i = 0; i < steps; i++) {
 800250a:	2300      	movs	r3, #0
 800250c:	617b      	str	r3, [r7, #20]
 800250e:	e012      	b.n	8002536 <stepRev+0xaa>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET); //CLK
 8002510:	2201      	movs	r2, #1
 8002512:	2110      	movs	r1, #16
 8002514:	4811      	ldr	r0, [pc, #68]	; (800255c <stepRev+0xd0>)
 8002516:	f001 fa1b 	bl	8003950 <HAL_GPIO_WritePin>
      HAL_Delay(pulse_delay_ms_);
 800251a:	68b8      	ldr	r0, [r7, #8]
 800251c:	f000 fc92 	bl	8002e44 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); //CLK
 8002520:	2200      	movs	r2, #0
 8002522:	2110      	movs	r1, #16
 8002524:	480d      	ldr	r0, [pc, #52]	; (800255c <stepRev+0xd0>)
 8002526:	f001 fa13 	bl	8003950 <HAL_GPIO_WritePin>
      HAL_Delay(pulse_delay_ms_);
 800252a:	68b8      	ldr	r0, [r7, #8]
 800252c:	f000 fc8a 	bl	8002e44 <HAL_Delay>
    for (int i = 0; i < steps; i++) {
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	3301      	adds	r3, #1
 8002534:	617b      	str	r3, [r7, #20]
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	429a      	cmp	r2, r3
 800253c:	d8e8      	bhi.n	8002510 <stepRev+0x84>
  }
  else {
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET); // ENA
  }

}
 800253e:	e004      	b.n	800254a <stepRev+0xbe>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET); // ENA
 8002540:	2200      	movs	r2, #0
 8002542:	2140      	movs	r1, #64	; 0x40
 8002544:	4803      	ldr	r0, [pc, #12]	; (8002554 <stepRev+0xc8>)
 8002546:	f001 fa03 	bl	8003950 <HAL_GPIO_WritePin>
}
 800254a:	bf00      	nop
 800254c:	3718      	adds	r7, #24
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	40021800 	.word	0x40021800
 8002558:	40768000 	.word	0x40768000
 800255c:	40020400 	.word	0x40020400

08002560 <stepLin>:

void stepLin(int DIST) {
 8002560:	b580      	push	{r7, lr}
 8002562:	b088      	sub	sp, #32
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]

	// ENA D5 PI0 GPIOI GPIO_PIN_0
	// CLK D8 PI2 GPIOI GPIO_PIN_2
	// DIR D7 PI3 GPIOI GPIO_PIN_3

	float ANG = DIST * 360.0 / 8; // 1 rev -> 8 mm
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f7fd fffb 	bl	8000564 <__aeabi_i2d>
 800256e:	f04f 0200 	mov.w	r2, #0
 8002572:	4b44      	ldr	r3, [pc, #272]	; (8002684 <stepLin+0x124>)
 8002574:	f7fe f860 	bl	8000638 <__aeabi_dmul>
 8002578:	4602      	mov	r2, r0
 800257a:	460b      	mov	r3, r1
 800257c:	4610      	mov	r0, r2
 800257e:	4619      	mov	r1, r3
 8002580:	f04f 0200 	mov.w	r2, #0
 8002584:	4b40      	ldr	r3, [pc, #256]	; (8002688 <stepLin+0x128>)
 8002586:	f7fe f981 	bl	800088c <__aeabi_ddiv>
 800258a:	4602      	mov	r2, r0
 800258c:	460b      	mov	r3, r1
 800258e:	4610      	mov	r0, r2
 8002590:	4619      	mov	r1, r3
 8002592:	f7fe fb49 	bl	8000c28 <__aeabi_d2f>
 8002596:	4603      	mov	r3, r0
 8002598:	61bb      	str	r3, [r7, #24]


  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);  // ENA
 800259a:	2201      	movs	r2, #1
 800259c:	2101      	movs	r1, #1
 800259e:	483b      	ldr	r0, [pc, #236]	; (800268c <stepLin+0x12c>)
 80025a0:	f001 f9d6 	bl	8003950 <HAL_GPIO_WritePin>

  if (ANG != 0) {
 80025a4:	edd7 7a06 	vldr	s15, [r7, #24]
 80025a8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80025ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025b0:	d05a      	beq.n	8002668 <stepLin+0x108>
    int direction = (ANG > 0) ? 1 : -1;
 80025b2:	edd7 7a06 	vldr	s15, [r7, #24]
 80025b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025be:	dd01      	ble.n	80025c4 <stepLin+0x64>
 80025c0:	2301      	movs	r3, #1
 80025c2:	e001      	b.n	80025c8 <stepLin+0x68>
 80025c4:	f04f 33ff 	mov.w	r3, #4294967295
 80025c8:	617b      	str	r3, [r7, #20]
    ANG *= direction;
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	ee07 3a90 	vmov	s15, r3
 80025d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025d4:	ed97 7a06 	vldr	s14, [r7, #24]
 80025d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025dc:	edc7 7a06 	vstr	s15, [r7, #24]
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_3, direction == 1 ? GPIO_PIN_SET : GPIO_PIN_RESET); // DIR
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	bf0c      	ite	eq
 80025e6:	2301      	moveq	r3, #1
 80025e8:	2300      	movne	r3, #0
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	461a      	mov	r2, r3
 80025ee:	2108      	movs	r1, #8
 80025f0:	4826      	ldr	r0, [pc, #152]	; (800268c <stepLin+0x12c>)
 80025f2:	f001 f9ad 	bl	8003950 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);  // ENA
 80025f6:	2200      	movs	r2, #0
 80025f8:	2101      	movs	r1, #1
 80025fa:	4824      	ldr	r0, [pc, #144]	; (800268c <stepLin+0x12c>)
 80025fc:	f001 f9a8 	bl	8003950 <HAL_GPIO_WritePin>
    uint32_t steps = PULSE * ANG / 360.0;
 8002600:	edd7 7a06 	vldr	s15, [r7, #24]
 8002604:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002690 <stepLin+0x130>
 8002608:	ee67 7a87 	vmul.f32	s15, s15, s14
 800260c:	ee17 0a90 	vmov	r0, s15
 8002610:	f7fd ffba 	bl	8000588 <__aeabi_f2d>
 8002614:	f04f 0200 	mov.w	r2, #0
 8002618:	4b1a      	ldr	r3, [pc, #104]	; (8002684 <stepLin+0x124>)
 800261a:	f7fe f937 	bl	800088c <__aeabi_ddiv>
 800261e:	4602      	mov	r2, r0
 8002620:	460b      	mov	r3, r1
 8002622:	4610      	mov	r0, r2
 8002624:	4619      	mov	r1, r3
 8002626:	f7fe fadf 	bl	8000be8 <__aeabi_d2uiz>
 800262a:	4603      	mov	r3, r0
 800262c:	613b      	str	r3, [r7, #16]
    uint32_t pulse_delay_ms_ = 1; // 6rpm
 800262e:	2301      	movs	r3, #1
 8002630:	60fb      	str	r3, [r7, #12]

    for (int i = 0; i < steps; i++) {
 8002632:	2300      	movs	r3, #0
 8002634:	61fb      	str	r3, [r7, #28]
 8002636:	e012      	b.n	800265e <stepLin+0xfe>
      HAL_GPIO_WritePin(GPIOI, GPIO_PIN_2, GPIO_PIN_SET); // CLK
 8002638:	2201      	movs	r2, #1
 800263a:	2104      	movs	r1, #4
 800263c:	4813      	ldr	r0, [pc, #76]	; (800268c <stepLin+0x12c>)
 800263e:	f001 f987 	bl	8003950 <HAL_GPIO_WritePin>
      HAL_Delay(pulse_delay_ms_);
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f000 fbfe 	bl	8002e44 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOI, GPIO_PIN_2, GPIO_PIN_RESET); // CLK
 8002648:	2200      	movs	r2, #0
 800264a:	2104      	movs	r1, #4
 800264c:	480f      	ldr	r0, [pc, #60]	; (800268c <stepLin+0x12c>)
 800264e:	f001 f97f 	bl	8003950 <HAL_GPIO_WritePin>
      HAL_Delay(pulse_delay_ms_);
 8002652:	68f8      	ldr	r0, [r7, #12]
 8002654:	f000 fbf6 	bl	8002e44 <HAL_Delay>
    for (int i = 0; i < steps; i++) {
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	3301      	adds	r3, #1
 800265c:	61fb      	str	r3, [r7, #28]
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	429a      	cmp	r2, r3
 8002664:	d8e8      	bhi.n	8002638 <stepLin+0xd8>
 8002666:	e004      	b.n	8002672 <stepLin+0x112>
    }
  }
  else {
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);  // ENA
 8002668:	2200      	movs	r2, #0
 800266a:	2101      	movs	r1, #1
 800266c:	4807      	ldr	r0, [pc, #28]	; (800268c <stepLin+0x12c>)
 800266e:	f001 f96f 	bl	8003950 <HAL_GPIO_WritePin>
  }

  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);  // ENA
 8002672:	2201      	movs	r2, #1
 8002674:	2101      	movs	r1, #1
 8002676:	4805      	ldr	r0, [pc, #20]	; (800268c <stepLin+0x12c>)
 8002678:	f001 f96a 	bl	8003950 <HAL_GPIO_WritePin>

}
 800267c:	bf00      	nop
 800267e:	3720      	adds	r7, #32
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40768000 	.word	0x40768000
 8002688:	40200000 	.word	0x40200000
 800268c:	40022000 	.word	0x40022000
 8002690:	43480000 	.word	0x43480000

08002694 <servo_angle>:

void servo_angle(TIM_HandleTypeDef *htim, uint32_t channel, int step) {
 8002694:	b480      	push	{r7}
 8002696:	b087      	sub	sp, #28
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	607a      	str	r2, [r7, #4]

	// 1 step is 0.8 mm
    if (step > 17)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2b11      	cmp	r3, #17
 80026a4:	dd01      	ble.n	80026aa <servo_angle+0x16>
    	step = 17; // 최대 각도 제한
 80026a6:	2311      	movs	r3, #17
 80026a8:	607b      	str	r3, [r7, #4]

    int pulse_width = 21-step; // 듀티 사이클 계산 (0도에서 180도까지)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f1c3 0315 	rsb	r3, r3, #21
 80026b0:	617b      	str	r3, [r7, #20]
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d104      	bne.n	80026c2 <servo_angle+0x2e>
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	697a      	ldr	r2, [r7, #20]
 80026be:	635a      	str	r2, [r3, #52]	; 0x34
}
 80026c0:	e023      	b.n	800270a <servo_angle+0x76>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	2b04      	cmp	r3, #4
 80026c6:	d104      	bne.n	80026d2 <servo_angle+0x3e>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	6393      	str	r3, [r2, #56]	; 0x38
}
 80026d0:	e01b      	b.n	800270a <servo_angle+0x76>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	2b08      	cmp	r3, #8
 80026d6:	d104      	bne.n	80026e2 <servo_angle+0x4e>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80026e0:	e013      	b.n	800270a <servo_angle+0x76>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	2b0c      	cmp	r3, #12
 80026e6:	d104      	bne.n	80026f2 <servo_angle+0x5e>
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	6413      	str	r3, [r2, #64]	; 0x40
}
 80026f0:	e00b      	b.n	800270a <servo_angle+0x76>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	2b10      	cmp	r3, #16
 80026f6:	d104      	bne.n	8002702 <servo_angle+0x6e>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	6593      	str	r3, [r2, #88]	; 0x58
}
 8002700:	e003      	b.n	800270a <servo_angle+0x76>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 800270a:	bf00      	nop
 800270c:	371c      	adds	r7, #28
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
	...

08002718 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800271e:	4b0f      	ldr	r3, [pc, #60]	; (800275c <HAL_MspInit+0x44>)
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	4a0e      	ldr	r2, [pc, #56]	; (800275c <HAL_MspInit+0x44>)
 8002724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002728:	6413      	str	r3, [r2, #64]	; 0x40
 800272a:	4b0c      	ldr	r3, [pc, #48]	; (800275c <HAL_MspInit+0x44>)
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002732:	607b      	str	r3, [r7, #4]
 8002734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002736:	4b09      	ldr	r3, [pc, #36]	; (800275c <HAL_MspInit+0x44>)
 8002738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273a:	4a08      	ldr	r2, [pc, #32]	; (800275c <HAL_MspInit+0x44>)
 800273c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002740:	6453      	str	r3, [r2, #68]	; 0x44
 8002742:	4b06      	ldr	r3, [pc, #24]	; (800275c <HAL_MspInit+0x44>)
 8002744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002746:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800274a:	603b      	str	r3, [r7, #0]
 800274c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800274e:	bf00      	nop
 8002750:	370c      	adds	r7, #12
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	40023800 	.word	0x40023800

08002760 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002764:	e7fe      	b.n	8002764 <NMI_Handler+0x4>

08002766 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002766:	b480      	push	{r7}
 8002768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800276a:	e7fe      	b.n	800276a <HardFault_Handler+0x4>

0800276c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002770:	e7fe      	b.n	8002770 <MemManage_Handler+0x4>

08002772 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002772:	b480      	push	{r7}
 8002774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002776:	e7fe      	b.n	8002776 <BusFault_Handler+0x4>

08002778 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800277c:	e7fe      	b.n	800277c <UsageFault_Handler+0x4>

0800277e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800277e:	b480      	push	{r7}
 8002780:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002782:	bf00      	nop
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002790:	bf00      	nop
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr

0800279a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800279a:	b480      	push	{r7}
 800279c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800279e:	bf00      	nop
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027ac:	f000 fb2a 	bl	8002e04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027b0:	bf00      	nop
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80027b8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80027bc:	f001 f8f4 	bl	80039a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80027c0:	bf00      	nop
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80027c8:	4802      	ldr	r0, [pc, #8]	; (80027d4 <USART1_IRQHandler+0x10>)
 80027ca:	f006 f8ab 	bl	8008924 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80027ce:	bf00      	nop
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	2000069c 	.word	0x2000069c

080027d8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80027dc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80027e0:	f001 f8e2 	bl	80039a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80027e4:	bf00      	nop
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80027ec:	4802      	ldr	r0, [pc, #8]	; (80027f8 <TIM7_IRQHandler+0x10>)
 80027ee:	f004 f9e3 	bl	8006bb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80027f2:	bf00      	nop
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	20000650 	.word	0x20000650

080027fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  return 1;
 8002800:	2301      	movs	r3, #1
}
 8002802:	4618      	mov	r0, r3
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <_kill>:

int _kill(int pid, int sig)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002816:	f00c fbc1 	bl	800ef9c <__errno>
 800281a:	4603      	mov	r3, r0
 800281c:	2216      	movs	r2, #22
 800281e:	601a      	str	r2, [r3, #0]
  return -1;
 8002820:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002824:	4618      	mov	r0, r3
 8002826:	3708      	adds	r7, #8
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <_exit>:

void _exit (int status)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002834:	f04f 31ff 	mov.w	r1, #4294967295
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f7ff ffe7 	bl	800280c <_kill>
  while (1) {}    /* Make sure we hang here */
 800283e:	e7fe      	b.n	800283e <_exit+0x12>

08002840 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800284c:	2300      	movs	r3, #0
 800284e:	617b      	str	r3, [r7, #20]
 8002850:	e00a      	b.n	8002868 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002852:	f3af 8000 	nop.w
 8002856:	4601      	mov	r1, r0
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	1c5a      	adds	r2, r3, #1
 800285c:	60ba      	str	r2, [r7, #8]
 800285e:	b2ca      	uxtb	r2, r1
 8002860:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	3301      	adds	r3, #1
 8002866:	617b      	str	r3, [r7, #20]
 8002868:	697a      	ldr	r2, [r7, #20]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	429a      	cmp	r2, r3
 800286e:	dbf0      	blt.n	8002852 <_read+0x12>
  }

  return len;
 8002870:	687b      	ldr	r3, [r7, #4]
}
 8002872:	4618      	mov	r0, r3
 8002874:	3718      	adds	r7, #24
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800287a:	b580      	push	{r7, lr}
 800287c:	b086      	sub	sp, #24
 800287e:	af00      	add	r7, sp, #0
 8002880:	60f8      	str	r0, [r7, #12]
 8002882:	60b9      	str	r1, [r7, #8]
 8002884:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002886:	2300      	movs	r3, #0
 8002888:	617b      	str	r3, [r7, #20]
 800288a:	e009      	b.n	80028a0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	1c5a      	adds	r2, r3, #1
 8002890:	60ba      	str	r2, [r7, #8]
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	4618      	mov	r0, r3
 8002896:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	3301      	adds	r3, #1
 800289e:	617b      	str	r3, [r7, #20]
 80028a0:	697a      	ldr	r2, [r7, #20]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	dbf1      	blt.n	800288c <_write+0x12>
  }
  return len;
 80028a8:	687b      	ldr	r3, [r7, #4]
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3718      	adds	r7, #24
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <_close>:

int _close(int file)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b083      	sub	sp, #12
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80028ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028be:	4618      	mov	r0, r3
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr

080028ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028ca:	b480      	push	{r7}
 80028cc:	b083      	sub	sp, #12
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
 80028d2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028da:	605a      	str	r2, [r3, #4]
  return 0;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr

080028ea <_isatty>:

int _isatty(int file)
{
 80028ea:	b480      	push	{r7}
 80028ec:	b083      	sub	sp, #12
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80028f2:	2301      	movs	r3, #1
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3714      	adds	r7, #20
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
	...

0800291c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002924:	4a14      	ldr	r2, [pc, #80]	; (8002978 <_sbrk+0x5c>)
 8002926:	4b15      	ldr	r3, [pc, #84]	; (800297c <_sbrk+0x60>)
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002930:	4b13      	ldr	r3, [pc, #76]	; (8002980 <_sbrk+0x64>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d102      	bne.n	800293e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002938:	4b11      	ldr	r3, [pc, #68]	; (8002980 <_sbrk+0x64>)
 800293a:	4a12      	ldr	r2, [pc, #72]	; (8002984 <_sbrk+0x68>)
 800293c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800293e:	4b10      	ldr	r3, [pc, #64]	; (8002980 <_sbrk+0x64>)
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4413      	add	r3, r2
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	429a      	cmp	r2, r3
 800294a:	d207      	bcs.n	800295c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800294c:	f00c fb26 	bl	800ef9c <__errno>
 8002950:	4603      	mov	r3, r0
 8002952:	220c      	movs	r2, #12
 8002954:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002956:	f04f 33ff 	mov.w	r3, #4294967295
 800295a:	e009      	b.n	8002970 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800295c:	4b08      	ldr	r3, [pc, #32]	; (8002980 <_sbrk+0x64>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002962:	4b07      	ldr	r3, [pc, #28]	; (8002980 <_sbrk+0x64>)
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4413      	add	r3, r2
 800296a:	4a05      	ldr	r2, [pc, #20]	; (8002980 <_sbrk+0x64>)
 800296c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800296e:	68fb      	ldr	r3, [r7, #12]
}
 8002970:	4618      	mov	r0, r3
 8002972:	3718      	adds	r7, #24
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	20050000 	.word	0x20050000
 800297c:	00000400 	.word	0x00000400
 8002980:	20000600 	.word	0x20000600
 8002984:	20000778 	.word	0x20000778

08002988 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800298c:	4b06      	ldr	r3, [pc, #24]	; (80029a8 <SystemInit+0x20>)
 800298e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002992:	4a05      	ldr	r2, [pc, #20]	; (80029a8 <SystemInit+0x20>)
 8002994:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002998:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800299c:	bf00      	nop
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	e000ed00 	.word	0xe000ed00

080029ac <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b08e      	sub	sp, #56	; 0x38
 80029b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029b6:	2200      	movs	r2, #0
 80029b8:	601a      	str	r2, [r3, #0]
 80029ba:	605a      	str	r2, [r3, #4]
 80029bc:	609a      	str	r2, [r3, #8]
 80029be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029c0:	f107 031c 	add.w	r3, r7, #28
 80029c4:	2200      	movs	r2, #0
 80029c6:	601a      	str	r2, [r3, #0]
 80029c8:	605a      	str	r2, [r3, #4]
 80029ca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029cc:	463b      	mov	r3, r7
 80029ce:	2200      	movs	r2, #0
 80029d0:	601a      	str	r2, [r3, #0]
 80029d2:	605a      	str	r2, [r3, #4]
 80029d4:	609a      	str	r2, [r3, #8]
 80029d6:	60da      	str	r2, [r3, #12]
 80029d8:	611a      	str	r2, [r3, #16]
 80029da:	615a      	str	r2, [r3, #20]
 80029dc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80029de:	4b2d      	ldr	r3, [pc, #180]	; (8002a94 <MX_TIM2_Init+0xe8>)
 80029e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80029e4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10800-1;
 80029e6:	4b2b      	ldr	r3, [pc, #172]	; (8002a94 <MX_TIM2_Init+0xe8>)
 80029e8:	f642 222f 	movw	r2, #10799	; 0x2a2f
 80029ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029ee:	4b29      	ldr	r3, [pc, #164]	; (8002a94 <MX_TIM2_Init+0xe8>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50-1;
 80029f4:	4b27      	ldr	r3, [pc, #156]	; (8002a94 <MX_TIM2_Init+0xe8>)
 80029f6:	2231      	movs	r2, #49	; 0x31
 80029f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029fa:	4b26      	ldr	r3, [pc, #152]	; (8002a94 <MX_TIM2_Init+0xe8>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a00:	4b24      	ldr	r3, [pc, #144]	; (8002a94 <MX_TIM2_Init+0xe8>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002a06:	4823      	ldr	r0, [pc, #140]	; (8002a94 <MX_TIM2_Init+0xe8>)
 8002a08:	f003 fcc2 	bl	8006390 <HAL_TIM_Base_Init>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002a12:	f7ff fd2b 	bl	800246c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a1c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a20:	4619      	mov	r1, r3
 8002a22:	481c      	ldr	r0, [pc, #112]	; (8002a94 <MX_TIM2_Init+0xe8>)
 8002a24:	f004 fc50 	bl	80072c8 <HAL_TIM_ConfigClockSource>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002a2e:	f7ff fd1d 	bl	800246c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002a32:	4818      	ldr	r0, [pc, #96]	; (8002a94 <MX_TIM2_Init+0xe8>)
 8002a34:	f003 fdcc 	bl	80065d0 <HAL_TIM_PWM_Init>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002a3e:	f7ff fd15 	bl	800246c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a42:	2300      	movs	r3, #0
 8002a44:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a46:	2300      	movs	r3, #0
 8002a48:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a4a:	f107 031c 	add.w	r3, r7, #28
 8002a4e:	4619      	mov	r1, r3
 8002a50:	4810      	ldr	r0, [pc, #64]	; (8002a94 <MX_TIM2_Init+0xe8>)
 8002a52:	f005 fc69 	bl	8008328 <HAL_TIMEx_MasterConfigSynchronization>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002a5c:	f7ff fd06 	bl	800246c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a60:	2360      	movs	r3, #96	; 0x60
 8002a62:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002a64:	2300      	movs	r3, #0
 8002a66:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a70:	463b      	mov	r3, r7
 8002a72:	2200      	movs	r2, #0
 8002a74:	4619      	mov	r1, r3
 8002a76:	4807      	ldr	r0, [pc, #28]	; (8002a94 <MX_TIM2_Init+0xe8>)
 8002a78:	f004 f9be 	bl	8006df8 <HAL_TIM_PWM_ConfigChannel>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002a82:	f7ff fcf3 	bl	800246c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002a86:	4803      	ldr	r0, [pc, #12]	; (8002a94 <MX_TIM2_Init+0xe8>)
 8002a88:	f000 f86e 	bl	8002b68 <HAL_TIM_MspPostInit>

}
 8002a8c:	bf00      	nop
 8002a8e:	3738      	adds	r7, #56	; 0x38
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	20000604 	.word	0x20000604

08002a98 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a9e:	1d3b      	adds	r3, r7, #4
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	605a      	str	r2, [r3, #4]
 8002aa6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002aa8:	4b14      	ldr	r3, [pc, #80]	; (8002afc <MX_TIM7_Init+0x64>)
 8002aaa:	4a15      	ldr	r2, [pc, #84]	; (8002b00 <MX_TIM7_Init+0x68>)
 8002aac:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10800-1;
 8002aae:	4b13      	ldr	r3, [pc, #76]	; (8002afc <MX_TIM7_Init+0x64>)
 8002ab0:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8002ab4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ab6:	4b11      	ldr	r3, [pc, #68]	; (8002afc <MX_TIM7_Init+0x64>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 50-1;
 8002abc:	4b0f      	ldr	r3, [pc, #60]	; (8002afc <MX_TIM7_Init+0x64>)
 8002abe:	2231      	movs	r2, #49	; 0x31
 8002ac0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ac2:	4b0e      	ldr	r3, [pc, #56]	; (8002afc <MX_TIM7_Init+0x64>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002ac8:	480c      	ldr	r0, [pc, #48]	; (8002afc <MX_TIM7_Init+0x64>)
 8002aca:	f003 fc61 	bl	8006390 <HAL_TIM_Base_Init>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002ad4:	f7ff fcca 	bl	800246c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002adc:	2300      	movs	r3, #0
 8002ade:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002ae0:	1d3b      	adds	r3, r7, #4
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	4805      	ldr	r0, [pc, #20]	; (8002afc <MX_TIM7_Init+0x64>)
 8002ae6:	f005 fc1f 	bl	8008328 <HAL_TIMEx_MasterConfigSynchronization>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002af0:	f7ff fcbc 	bl	800246c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002af4:	bf00      	nop
 8002af6:	3710      	adds	r7, #16
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	20000650 	.word	0x20000650
 8002b00:	40001400 	.word	0x40001400

08002b04 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b14:	d10c      	bne.n	8002b30 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b16:	4b12      	ldr	r3, [pc, #72]	; (8002b60 <HAL_TIM_Base_MspInit+0x5c>)
 8002b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1a:	4a11      	ldr	r2, [pc, #68]	; (8002b60 <HAL_TIM_Base_MspInit+0x5c>)
 8002b1c:	f043 0301 	orr.w	r3, r3, #1
 8002b20:	6413      	str	r3, [r2, #64]	; 0x40
 8002b22:	4b0f      	ldr	r3, [pc, #60]	; (8002b60 <HAL_TIM_Base_MspInit+0x5c>)
 8002b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	60fb      	str	r3, [r7, #12]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8002b2e:	e010      	b.n	8002b52 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM7)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a0b      	ldr	r2, [pc, #44]	; (8002b64 <HAL_TIM_Base_MspInit+0x60>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d10b      	bne.n	8002b52 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002b3a:	4b09      	ldr	r3, [pc, #36]	; (8002b60 <HAL_TIM_Base_MspInit+0x5c>)
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	4a08      	ldr	r2, [pc, #32]	; (8002b60 <HAL_TIM_Base_MspInit+0x5c>)
 8002b40:	f043 0320 	orr.w	r3, r3, #32
 8002b44:	6413      	str	r3, [r2, #64]	; 0x40
 8002b46:	4b06      	ldr	r3, [pc, #24]	; (8002b60 <HAL_TIM_Base_MspInit+0x5c>)
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	f003 0320 	and.w	r3, r3, #32
 8002b4e:	60bb      	str	r3, [r7, #8]
 8002b50:	68bb      	ldr	r3, [r7, #8]
}
 8002b52:	bf00      	nop
 8002b54:	3714      	adds	r7, #20
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	40023800 	.word	0x40023800
 8002b64:	40001400 	.word	0x40001400

08002b68 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b088      	sub	sp, #32
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b70:	f107 030c 	add.w	r3, r7, #12
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	605a      	str	r2, [r3, #4]
 8002b7a:	609a      	str	r2, [r3, #8]
 8002b7c:	60da      	str	r2, [r3, #12]
 8002b7e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b88:	d11c      	bne.n	8002bc4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b8a:	4b10      	ldr	r3, [pc, #64]	; (8002bcc <HAL_TIM_MspPostInit+0x64>)
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8e:	4a0f      	ldr	r2, [pc, #60]	; (8002bcc <HAL_TIM_MspPostInit+0x64>)
 8002b90:	f043 0301 	orr.w	r3, r3, #1
 8002b94:	6313      	str	r3, [r2, #48]	; 0x30
 8002b96:	4b0d      	ldr	r3, [pc, #52]	; (8002bcc <HAL_TIM_MspPostInit+0x64>)
 8002b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	60bb      	str	r3, [r7, #8]
 8002ba0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002ba2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ba6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba8:	2302      	movs	r3, #2
 8002baa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bac:	2300      	movs	r3, #0
 8002bae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bb8:	f107 030c 	add.w	r3, r7, #12
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	4804      	ldr	r0, [pc, #16]	; (8002bd0 <HAL_TIM_MspPostInit+0x68>)
 8002bc0:	f000 fb36 	bl	8003230 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002bc4:	bf00      	nop
 8002bc6:	3720      	adds	r7, #32
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	40023800 	.word	0x40023800
 8002bd0:	40020000 	.word	0x40020000

08002bd4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002bd8:	4b14      	ldr	r3, [pc, #80]	; (8002c2c <MX_USART1_UART_Init+0x58>)
 8002bda:	4a15      	ldr	r2, [pc, #84]	; (8002c30 <MX_USART1_UART_Init+0x5c>)
 8002bdc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002bde:	4b13      	ldr	r3, [pc, #76]	; (8002c2c <MX_USART1_UART_Init+0x58>)
 8002be0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002be4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002be6:	4b11      	ldr	r3, [pc, #68]	; (8002c2c <MX_USART1_UART_Init+0x58>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002bec:	4b0f      	ldr	r3, [pc, #60]	; (8002c2c <MX_USART1_UART_Init+0x58>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002bf2:	4b0e      	ldr	r3, [pc, #56]	; (8002c2c <MX_USART1_UART_Init+0x58>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002bf8:	4b0c      	ldr	r3, [pc, #48]	; (8002c2c <MX_USART1_UART_Init+0x58>)
 8002bfa:	220c      	movs	r2, #12
 8002bfc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bfe:	4b0b      	ldr	r3, [pc, #44]	; (8002c2c <MX_USART1_UART_Init+0x58>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c04:	4b09      	ldr	r3, [pc, #36]	; (8002c2c <MX_USART1_UART_Init+0x58>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c0a:	4b08      	ldr	r3, [pc, #32]	; (8002c2c <MX_USART1_UART_Init+0x58>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c10:	4b06      	ldr	r3, [pc, #24]	; (8002c2c <MX_USART1_UART_Init+0x58>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c16:	4805      	ldr	r0, [pc, #20]	; (8002c2c <MX_USART1_UART_Init+0x58>)
 8002c18:	f005 fcfc 	bl	8008614 <HAL_UART_Init>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002c22:	f7ff fc23 	bl	800246c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002c26:	bf00      	nop
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	2000069c 	.word	0x2000069c
 8002c30:	40011000 	.word	0x40011000

08002c34 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b0ac      	sub	sp, #176	; 0xb0
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c3c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	605a      	str	r2, [r3, #4]
 8002c46:	609a      	str	r2, [r3, #8]
 8002c48:	60da      	str	r2, [r3, #12]
 8002c4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c4c:	f107 0318 	add.w	r3, r7, #24
 8002c50:	2284      	movs	r2, #132	; 0x84
 8002c52:	2100      	movs	r1, #0
 8002c54:	4618      	mov	r0, r3
 8002c56:	f00c f9d9 	bl	800f00c <memset>
  if(uartHandle->Instance==USART1)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a32      	ldr	r2, [pc, #200]	; (8002d28 <HAL_UART_MspInit+0xf4>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d15c      	bne.n	8002d1e <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002c64:	2340      	movs	r3, #64	; 0x40
 8002c66:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c6c:	f107 0318 	add.w	r3, r7, #24
 8002c70:	4618      	mov	r0, r3
 8002c72:	f002 fba9 	bl	80053c8 <HAL_RCCEx_PeriphCLKConfig>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002c7c:	f7ff fbf6 	bl	800246c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c80:	4b2a      	ldr	r3, [pc, #168]	; (8002d2c <HAL_UART_MspInit+0xf8>)
 8002c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c84:	4a29      	ldr	r2, [pc, #164]	; (8002d2c <HAL_UART_MspInit+0xf8>)
 8002c86:	f043 0310 	orr.w	r3, r3, #16
 8002c8a:	6453      	str	r3, [r2, #68]	; 0x44
 8002c8c:	4b27      	ldr	r3, [pc, #156]	; (8002d2c <HAL_UART_MspInit+0xf8>)
 8002c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c90:	f003 0310 	and.w	r3, r3, #16
 8002c94:	617b      	str	r3, [r7, #20]
 8002c96:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c98:	4b24      	ldr	r3, [pc, #144]	; (8002d2c <HAL_UART_MspInit+0xf8>)
 8002c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9c:	4a23      	ldr	r2, [pc, #140]	; (8002d2c <HAL_UART_MspInit+0xf8>)
 8002c9e:	f043 0302 	orr.w	r3, r3, #2
 8002ca2:	6313      	str	r3, [r2, #48]	; 0x30
 8002ca4:	4b21      	ldr	r3, [pc, #132]	; (8002d2c <HAL_UART_MspInit+0xf8>)
 8002ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca8:	f003 0302 	and.w	r3, r3, #2
 8002cac:	613b      	str	r3, [r7, #16]
 8002cae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cb0:	4b1e      	ldr	r3, [pc, #120]	; (8002d2c <HAL_UART_MspInit+0xf8>)
 8002cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb4:	4a1d      	ldr	r2, [pc, #116]	; (8002d2c <HAL_UART_MspInit+0xf8>)
 8002cb6:	f043 0301 	orr.w	r3, r3, #1
 8002cba:	6313      	str	r3, [r2, #48]	; 0x30
 8002cbc:	4b1b      	ldr	r3, [pc, #108]	; (8002d2c <HAL_UART_MspInit+0xf8>)
 8002cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc0:	f003 0301 	and.w	r3, r3, #1
 8002cc4:	60fb      	str	r3, [r7, #12]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002cc8:	2380      	movs	r3, #128	; 0x80
 8002cca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cce:	2302      	movs	r3, #2
 8002cd0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ce0:	2307      	movs	r3, #7
 8002ce2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ce6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002cea:	4619      	mov	r1, r3
 8002cec:	4810      	ldr	r0, [pc, #64]	; (8002d30 <HAL_UART_MspInit+0xfc>)
 8002cee:	f000 fa9f 	bl	8003230 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002cf2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cf6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d00:	2300      	movs	r3, #0
 8002d02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d06:	2303      	movs	r3, #3
 8002d08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d0c:	2307      	movs	r3, #7
 8002d0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d12:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002d16:	4619      	mov	r1, r3
 8002d18:	4806      	ldr	r0, [pc, #24]	; (8002d34 <HAL_UART_MspInit+0x100>)
 8002d1a:	f000 fa89 	bl	8003230 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002d1e:	bf00      	nop
 8002d20:	37b0      	adds	r7, #176	; 0xb0
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	40011000 	.word	0x40011000
 8002d2c:	40023800 	.word	0x40023800
 8002d30:	40020400 	.word	0x40020400
 8002d34:	40020000 	.word	0x40020000

08002d38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002d38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d3c:	480d      	ldr	r0, [pc, #52]	; (8002d74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d3e:	490e      	ldr	r1, [pc, #56]	; (8002d78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d40:	4a0e      	ldr	r2, [pc, #56]	; (8002d7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d44:	e002      	b.n	8002d4c <LoopCopyDataInit>

08002d46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d4a:	3304      	adds	r3, #4

08002d4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d50:	d3f9      	bcc.n	8002d46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d52:	4a0b      	ldr	r2, [pc, #44]	; (8002d80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d54:	4c0b      	ldr	r4, [pc, #44]	; (8002d84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d58:	e001      	b.n	8002d5e <LoopFillZerobss>

08002d5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d5c:	3204      	adds	r2, #4

08002d5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d60:	d3fb      	bcc.n	8002d5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002d62:	f7ff fe11 	bl	8002988 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d66:	f00c f91f 	bl	800efa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d6a:	f7fe fb75 	bl	8001458 <main>
  bx  lr    
 8002d6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002d70:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002d74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d78:	2000049c 	.word	0x2000049c
  ldr r2, =_sidata
 8002d7c:	08014b6c 	.word	0x08014b6c
  ldr r2, =_sbss
 8002d80:	2000049c 	.word	0x2000049c
  ldr r4, =_ebss
 8002d84:	20000778 	.word	0x20000778

08002d88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d88:	e7fe      	b.n	8002d88 <ADC_IRQHandler>

08002d8a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d8e:	2003      	movs	r0, #3
 8002d90:	f000 f94c 	bl	800302c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d94:	200f      	movs	r0, #15
 8002d96:	f000 f805 	bl	8002da4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d9a:	f7ff fcbd 	bl	8002718 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002dac:	4b12      	ldr	r3, [pc, #72]	; (8002df8 <HAL_InitTick+0x54>)
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	4b12      	ldr	r3, [pc, #72]	; (8002dfc <HAL_InitTick+0x58>)
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	4619      	mov	r1, r3
 8002db6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dba:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f000 f996 	bl	80030f4 <HAL_SYSTICK_Config>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e00e      	b.n	8002df0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2b0f      	cmp	r3, #15
 8002dd6:	d80a      	bhi.n	8002dee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002dd8:	2200      	movs	r2, #0
 8002dda:	6879      	ldr	r1, [r7, #4]
 8002ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8002de0:	f000 f944 	bl	800306c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002de4:	4a06      	ldr	r2, [pc, #24]	; (8002e00 <HAL_InitTick+0x5c>)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
 8002dec:	e000      	b.n	8002df0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3708      	adds	r7, #8
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	20000000 	.word	0x20000000
 8002dfc:	20000008 	.word	0x20000008
 8002e00:	20000004 	.word	0x20000004

08002e04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e08:	4b06      	ldr	r3, [pc, #24]	; (8002e24 <HAL_IncTick+0x20>)
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	4b06      	ldr	r3, [pc, #24]	; (8002e28 <HAL_IncTick+0x24>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4413      	add	r3, r2
 8002e14:	4a04      	ldr	r2, [pc, #16]	; (8002e28 <HAL_IncTick+0x24>)
 8002e16:	6013      	str	r3, [r2, #0]
}
 8002e18:	bf00      	nop
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	20000008 	.word	0x20000008
 8002e28:	20000724 	.word	0x20000724

08002e2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0
  return uwTick;
 8002e30:	4b03      	ldr	r3, [pc, #12]	; (8002e40 <HAL_GetTick+0x14>)
 8002e32:	681b      	ldr	r3, [r3, #0]
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	20000724 	.word	0x20000724

08002e44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e4c:	f7ff ffee 	bl	8002e2c <HAL_GetTick>
 8002e50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e5c:	d005      	beq.n	8002e6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e5e:	4b0a      	ldr	r3, [pc, #40]	; (8002e88 <HAL_Delay+0x44>)
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	461a      	mov	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	4413      	add	r3, r2
 8002e68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e6a:	bf00      	nop
 8002e6c:	f7ff ffde 	bl	8002e2c <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d8f7      	bhi.n	8002e6c <HAL_Delay+0x28>
  {
  }
}
 8002e7c:	bf00      	nop
 8002e7e:	bf00      	nop
 8002e80:	3710      	adds	r7, #16
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	20000008 	.word	0x20000008

08002e8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b085      	sub	sp, #20
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f003 0307 	and.w	r3, r3, #7
 8002e9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e9c:	4b0b      	ldr	r3, [pc, #44]	; (8002ecc <__NVIC_SetPriorityGrouping+0x40>)
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ea2:	68ba      	ldr	r2, [r7, #8]
 8002ea4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002eb4:	4b06      	ldr	r3, [pc, #24]	; (8002ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eba:	4a04      	ldr	r2, [pc, #16]	; (8002ecc <__NVIC_SetPriorityGrouping+0x40>)
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	60d3      	str	r3, [r2, #12]
}
 8002ec0:	bf00      	nop
 8002ec2:	3714      	adds	r7, #20
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr
 8002ecc:	e000ed00 	.word	0xe000ed00
 8002ed0:	05fa0000 	.word	0x05fa0000

08002ed4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ed8:	4b04      	ldr	r3, [pc, #16]	; (8002eec <__NVIC_GetPriorityGrouping+0x18>)
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	0a1b      	lsrs	r3, r3, #8
 8002ede:	f003 0307 	and.w	r3, r3, #7
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr
 8002eec:	e000ed00 	.word	0xe000ed00

08002ef0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	db0b      	blt.n	8002f1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f02:	79fb      	ldrb	r3, [r7, #7]
 8002f04:	f003 021f 	and.w	r2, r3, #31
 8002f08:	4907      	ldr	r1, [pc, #28]	; (8002f28 <__NVIC_EnableIRQ+0x38>)
 8002f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f0e:	095b      	lsrs	r3, r3, #5
 8002f10:	2001      	movs	r0, #1
 8002f12:	fa00 f202 	lsl.w	r2, r0, r2
 8002f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f1a:	bf00      	nop
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	e000e100 	.word	0xe000e100

08002f2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	4603      	mov	r3, r0
 8002f34:	6039      	str	r1, [r7, #0]
 8002f36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	db0a      	blt.n	8002f56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	b2da      	uxtb	r2, r3
 8002f44:	490c      	ldr	r1, [pc, #48]	; (8002f78 <__NVIC_SetPriority+0x4c>)
 8002f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f4a:	0112      	lsls	r2, r2, #4
 8002f4c:	b2d2      	uxtb	r2, r2
 8002f4e:	440b      	add	r3, r1
 8002f50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f54:	e00a      	b.n	8002f6c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	b2da      	uxtb	r2, r3
 8002f5a:	4908      	ldr	r1, [pc, #32]	; (8002f7c <__NVIC_SetPriority+0x50>)
 8002f5c:	79fb      	ldrb	r3, [r7, #7]
 8002f5e:	f003 030f 	and.w	r3, r3, #15
 8002f62:	3b04      	subs	r3, #4
 8002f64:	0112      	lsls	r2, r2, #4
 8002f66:	b2d2      	uxtb	r2, r2
 8002f68:	440b      	add	r3, r1
 8002f6a:	761a      	strb	r2, [r3, #24]
}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr
 8002f78:	e000e100 	.word	0xe000e100
 8002f7c:	e000ed00 	.word	0xe000ed00

08002f80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b089      	sub	sp, #36	; 0x24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f003 0307 	and.w	r3, r3, #7
 8002f92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	f1c3 0307 	rsb	r3, r3, #7
 8002f9a:	2b04      	cmp	r3, #4
 8002f9c:	bf28      	it	cs
 8002f9e:	2304      	movcs	r3, #4
 8002fa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	3304      	adds	r3, #4
 8002fa6:	2b06      	cmp	r3, #6
 8002fa8:	d902      	bls.n	8002fb0 <NVIC_EncodePriority+0x30>
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	3b03      	subs	r3, #3
 8002fae:	e000      	b.n	8002fb2 <NVIC_EncodePriority+0x32>
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbe:	43da      	mvns	r2, r3
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	401a      	ands	r2, r3
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fc8:	f04f 31ff 	mov.w	r1, #4294967295
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd2:	43d9      	mvns	r1, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fd8:	4313      	orrs	r3, r2
         );
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3724      	adds	r7, #36	; 0x24
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
	...

08002fe8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ff8:	d301      	bcc.n	8002ffe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e00f      	b.n	800301e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ffe:	4a0a      	ldr	r2, [pc, #40]	; (8003028 <SysTick_Config+0x40>)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	3b01      	subs	r3, #1
 8003004:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003006:	210f      	movs	r1, #15
 8003008:	f04f 30ff 	mov.w	r0, #4294967295
 800300c:	f7ff ff8e 	bl	8002f2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003010:	4b05      	ldr	r3, [pc, #20]	; (8003028 <SysTick_Config+0x40>)
 8003012:	2200      	movs	r2, #0
 8003014:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003016:	4b04      	ldr	r3, [pc, #16]	; (8003028 <SysTick_Config+0x40>)
 8003018:	2207      	movs	r2, #7
 800301a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	e000e010 	.word	0xe000e010

0800302c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b07      	cmp	r3, #7
 8003038:	d00f      	beq.n	800305a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2b06      	cmp	r3, #6
 800303e:	d00c      	beq.n	800305a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2b05      	cmp	r3, #5
 8003044:	d009      	beq.n	800305a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2b04      	cmp	r3, #4
 800304a:	d006      	beq.n	800305a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2b03      	cmp	r3, #3
 8003050:	d003      	beq.n	800305a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003052:	2191      	movs	r1, #145	; 0x91
 8003054:	4804      	ldr	r0, [pc, #16]	; (8003068 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8003056:	f7ff fa0e 	bl	8002476 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f7ff ff16 	bl	8002e8c <__NVIC_SetPriorityGrouping>
}
 8003060:	bf00      	nop
 8003062:	3708      	adds	r7, #8
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	08014470 	.word	0x08014470

0800306c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800306c:	b580      	push	{r7, lr}
 800306e:	b086      	sub	sp, #24
 8003070:	af00      	add	r7, sp, #0
 8003072:	4603      	mov	r3, r0
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
 8003078:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800307a:	2300      	movs	r3, #0
 800307c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2b0f      	cmp	r3, #15
 8003082:	d903      	bls.n	800308c <HAL_NVIC_SetPriority+0x20>
 8003084:	21a9      	movs	r1, #169	; 0xa9
 8003086:	480e      	ldr	r0, [pc, #56]	; (80030c0 <HAL_NVIC_SetPriority+0x54>)
 8003088:	f7ff f9f5 	bl	8002476 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	2b0f      	cmp	r3, #15
 8003090:	d903      	bls.n	800309a <HAL_NVIC_SetPriority+0x2e>
 8003092:	21aa      	movs	r1, #170	; 0xaa
 8003094:	480a      	ldr	r0, [pc, #40]	; (80030c0 <HAL_NVIC_SetPriority+0x54>)
 8003096:	f7ff f9ee 	bl	8002476 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800309a:	f7ff ff1b 	bl	8002ed4 <__NVIC_GetPriorityGrouping>
 800309e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	68b9      	ldr	r1, [r7, #8]
 80030a4:	6978      	ldr	r0, [r7, #20]
 80030a6:	f7ff ff6b 	bl	8002f80 <NVIC_EncodePriority>
 80030aa:	4602      	mov	r2, r0
 80030ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030b0:	4611      	mov	r1, r2
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7ff ff3a 	bl	8002f2c <__NVIC_SetPriority>
}
 80030b8:	bf00      	nop
 80030ba:	3718      	adds	r7, #24
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	08014470 	.word	0x08014470

080030c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	4603      	mov	r3, r0
 80030cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80030ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	da03      	bge.n	80030de <HAL_NVIC_EnableIRQ+0x1a>
 80030d6:	21bd      	movs	r1, #189	; 0xbd
 80030d8:	4805      	ldr	r0, [pc, #20]	; (80030f0 <HAL_NVIC_EnableIRQ+0x2c>)
 80030da:	f7ff f9cc 	bl	8002476 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7ff ff04 	bl	8002ef0 <__NVIC_EnableIRQ>
}
 80030e8:	bf00      	nop
 80030ea:	3708      	adds	r7, #8
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	08014470 	.word	0x08014470

080030f4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f7ff ff73 	bl	8002fe8 <SysTick_Config>
 8003102:	4603      	mov	r3, r0
}
 8003104:	4618      	mov	r0, r3
 8003106:	3708      	adds	r7, #8
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003118:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800311a:	f7ff fe87 	bl	8002e2c <HAL_GetTick>
 800311e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003126:	b2db      	uxtb	r3, r3
 8003128:	2b02      	cmp	r3, #2
 800312a:	d008      	beq.n	800313e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2280      	movs	r2, #128	; 0x80
 8003130:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e052      	b.n	80031e4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f022 0216 	bic.w	r2, r2, #22
 800314c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	695a      	ldr	r2, [r3, #20]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800315c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003162:	2b00      	cmp	r3, #0
 8003164:	d103      	bne.n	800316e <HAL_DMA_Abort+0x62>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800316a:	2b00      	cmp	r3, #0
 800316c:	d007      	beq.n	800317e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f022 0208 	bic.w	r2, r2, #8
 800317c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f022 0201 	bic.w	r2, r2, #1
 800318c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800318e:	e013      	b.n	80031b8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003190:	f7ff fe4c 	bl	8002e2c <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b05      	cmp	r3, #5
 800319c:	d90c      	bls.n	80031b8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2220      	movs	r2, #32
 80031a2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2203      	movs	r2, #3
 80031a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e015      	b.n	80031e4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d1e4      	bne.n	8003190 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ca:	223f      	movs	r2, #63	; 0x3f
 80031cc:	409a      	lsls	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2201      	movs	r2, #1
 80031d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3710      	adds	r7, #16
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d004      	beq.n	800320a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2280      	movs	r2, #128	; 0x80
 8003204:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e00c      	b.n	8003224 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2205      	movs	r2, #5
 800320e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f022 0201 	bic.w	r2, r2, #1
 8003220:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b088      	sub	sp, #32
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800323a:	2300      	movs	r3, #0
 800323c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800323e:	2300      	movs	r3, #0
 8003240:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003242:	2300      	movs	r3, #0
 8003244:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003246:	2300      	movs	r3, #0
 8003248:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a3a      	ldr	r2, [pc, #232]	; (8003338 <HAL_GPIO_Init+0x108>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d02b      	beq.n	80032aa <HAL_GPIO_Init+0x7a>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a39      	ldr	r2, [pc, #228]	; (800333c <HAL_GPIO_Init+0x10c>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d027      	beq.n	80032aa <HAL_GPIO_Init+0x7a>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a38      	ldr	r2, [pc, #224]	; (8003340 <HAL_GPIO_Init+0x110>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d023      	beq.n	80032aa <HAL_GPIO_Init+0x7a>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a37      	ldr	r2, [pc, #220]	; (8003344 <HAL_GPIO_Init+0x114>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d01f      	beq.n	80032aa <HAL_GPIO_Init+0x7a>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a36      	ldr	r2, [pc, #216]	; (8003348 <HAL_GPIO_Init+0x118>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d01b      	beq.n	80032aa <HAL_GPIO_Init+0x7a>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a35      	ldr	r2, [pc, #212]	; (800334c <HAL_GPIO_Init+0x11c>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d017      	beq.n	80032aa <HAL_GPIO_Init+0x7a>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a34      	ldr	r2, [pc, #208]	; (8003350 <HAL_GPIO_Init+0x120>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d013      	beq.n	80032aa <HAL_GPIO_Init+0x7a>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a33      	ldr	r2, [pc, #204]	; (8003354 <HAL_GPIO_Init+0x124>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d00f      	beq.n	80032aa <HAL_GPIO_Init+0x7a>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a32      	ldr	r2, [pc, #200]	; (8003358 <HAL_GPIO_Init+0x128>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d00b      	beq.n	80032aa <HAL_GPIO_Init+0x7a>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a31      	ldr	r2, [pc, #196]	; (800335c <HAL_GPIO_Init+0x12c>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d007      	beq.n	80032aa <HAL_GPIO_Init+0x7a>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a30      	ldr	r2, [pc, #192]	; (8003360 <HAL_GPIO_Init+0x130>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d003      	beq.n	80032aa <HAL_GPIO_Init+0x7a>
 80032a2:	21aa      	movs	r1, #170	; 0xaa
 80032a4:	482f      	ldr	r0, [pc, #188]	; (8003364 <HAL_GPIO_Init+0x134>)
 80032a6:	f7ff f8e6 	bl	8002476 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d103      	bne.n	80032bc <HAL_GPIO_Init+0x8c>
 80032b4:	21ab      	movs	r1, #171	; 0xab
 80032b6:	482b      	ldr	r0, [pc, #172]	; (8003364 <HAL_GPIO_Init+0x134>)
 80032b8:	f7ff f8dd 	bl	8002476 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d035      	beq.n	8003330 <HAL_GPIO_Init+0x100>
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d031      	beq.n	8003330 <HAL_GPIO_Init+0x100>
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	2b11      	cmp	r3, #17
 80032d2:	d02d      	beq.n	8003330 <HAL_GPIO_Init+0x100>
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d029      	beq.n	8003330 <HAL_GPIO_Init+0x100>
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	2b12      	cmp	r3, #18
 80032e2:	d025      	beq.n	8003330 <HAL_GPIO_Init+0x100>
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 80032ec:	d020      	beq.n	8003330 <HAL_GPIO_Init+0x100>
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80032f6:	d01b      	beq.n	8003330 <HAL_GPIO_Init+0x100>
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8003300:	d016      	beq.n	8003330 <HAL_GPIO_Init+0x100>
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 800330a:	d011      	beq.n	8003330 <HAL_GPIO_Init+0x100>
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8003314:	d00c      	beq.n	8003330 <HAL_GPIO_Init+0x100>
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 800331e:	d007      	beq.n	8003330 <HAL_GPIO_Init+0x100>
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	2b03      	cmp	r3, #3
 8003326:	d003      	beq.n	8003330 <HAL_GPIO_Init+0x100>
 8003328:	21ac      	movs	r1, #172	; 0xac
 800332a:	480e      	ldr	r0, [pc, #56]	; (8003364 <HAL_GPIO_Init+0x134>)
 800332c:	f7ff f8a3 	bl	8002476 <assert_failed>

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003330:	2300      	movs	r3, #0
 8003332:	61fb      	str	r3, [r7, #28]
 8003334:	e2c7      	b.n	80038c6 <HAL_GPIO_Init+0x696>
 8003336:	bf00      	nop
 8003338:	40020000 	.word	0x40020000
 800333c:	40020400 	.word	0x40020400
 8003340:	40020800 	.word	0x40020800
 8003344:	40020c00 	.word	0x40020c00
 8003348:	40021000 	.word	0x40021000
 800334c:	40021400 	.word	0x40021400
 8003350:	40021800 	.word	0x40021800
 8003354:	40021c00 	.word	0x40021c00
 8003358:	40022000 	.word	0x40022000
 800335c:	40022400 	.word	0x40022400
 8003360:	40022800 	.word	0x40022800
 8003364:	080144ac 	.word	0x080144ac
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003368:	2201      	movs	r2, #1
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	fa02 f303 	lsl.w	r3, r2, r3
 8003370:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	4013      	ands	r3, r2
 800337a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	429a      	cmp	r2, r3
 8003382:	f040 829d 	bne.w	80038c0 <HAL_GPIO_Init+0x690>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f003 0303 	and.w	r3, r3, #3
 800338e:	2b01      	cmp	r3, #1
 8003390:	d005      	beq.n	800339e <HAL_GPIO_Init+0x16e>
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f003 0303 	and.w	r3, r3, #3
 800339a:	2b02      	cmp	r3, #2
 800339c:	d144      	bne.n	8003428 <HAL_GPIO_Init+0x1f8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00f      	beq.n	80033c6 <HAL_GPIO_Init+0x196>
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d00b      	beq.n	80033c6 <HAL_GPIO_Init+0x196>
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d007      	beq.n	80033c6 <HAL_GPIO_Init+0x196>
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	2b03      	cmp	r3, #3
 80033bc:	d003      	beq.n	80033c6 <HAL_GPIO_Init+0x196>
 80033be:	21bd      	movs	r1, #189	; 0xbd
 80033c0:	4831      	ldr	r0, [pc, #196]	; (8003488 <HAL_GPIO_Init+0x258>)
 80033c2:	f7ff f858 	bl	8002476 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	005b      	lsls	r3, r3, #1
 80033d0:	2203      	movs	r2, #3
 80033d2:	fa02 f303 	lsl.w	r3, r2, r3
 80033d6:	43db      	mvns	r3, r3
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	4013      	ands	r3, r2
 80033dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	68da      	ldr	r2, [r3, #12]
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ea:	69ba      	ldr	r2, [r7, #24]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033fc:	2201      	movs	r2, #1
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	43db      	mvns	r3, r3
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	4013      	ands	r3, r2
 800340a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	091b      	lsrs	r3, r3, #4
 8003412:	f003 0201 	and.w	r2, r3, #1
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	fa02 f303 	lsl.w	r3, r2, r3
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	4313      	orrs	r3, r2
 8003420:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f003 0303 	and.w	r3, r3, #3
 8003430:	2b03      	cmp	r3, #3
 8003432:	d02b      	beq.n	800348c <HAL_GPIO_Init+0x25c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d00b      	beq.n	8003454 <HAL_GPIO_Init+0x224>
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d007      	beq.n	8003454 <HAL_GPIO_Init+0x224>
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	2b02      	cmp	r3, #2
 800344a:	d003      	beq.n	8003454 <HAL_GPIO_Init+0x224>
 800344c:	21ce      	movs	r1, #206	; 0xce
 800344e:	480e      	ldr	r0, [pc, #56]	; (8003488 <HAL_GPIO_Init+0x258>)
 8003450:	f7ff f811 	bl	8002476 <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	2203      	movs	r2, #3
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	43db      	mvns	r3, r3
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	4013      	ands	r3, r2
 800346a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	689a      	ldr	r2, [r3, #8]
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	fa02 f303 	lsl.w	r3, r2, r3
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	4313      	orrs	r3, r2
 800347c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	60da      	str	r2, [r3, #12]
 8003484:	e002      	b.n	800348c <HAL_GPIO_Init+0x25c>
 8003486:	bf00      	nop
 8003488:	080144ac 	.word	0x080144ac
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f003 0303 	and.w	r3, r3, #3
 8003494:	2b02      	cmp	r3, #2
 8003496:	f040 8134 	bne.w	8003702 <HAL_GPIO_Init+0x4d2>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f000 810b 	beq.w	80036ba <HAL_GPIO_Init+0x48a>
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	f000 8106 	beq.w	80036ba <HAL_GPIO_Init+0x48a>
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f000 8101 	beq.w	80036ba <HAL_GPIO_Init+0x48a>
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	691b      	ldr	r3, [r3, #16]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f000 80fc 	beq.w	80036ba <HAL_GPIO_Init+0x48a>
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f000 80f7 	beq.w	80036ba <HAL_GPIO_Init+0x48a>
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	f000 80f2 	beq.w	80036ba <HAL_GPIO_Init+0x48a>
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	2b02      	cmp	r3, #2
 80034dc:	f000 80ed 	beq.w	80036ba <HAL_GPIO_Init+0x48a>
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	f000 80e8 	beq.w	80036ba <HAL_GPIO_Init+0x48a>
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	f000 80e3 	beq.w	80036ba <HAL_GPIO_Init+0x48a>
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	2b03      	cmp	r3, #3
 80034fa:	f000 80de 	beq.w	80036ba <HAL_GPIO_Init+0x48a>
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	2b03      	cmp	r3, #3
 8003504:	f000 80d9 	beq.w	80036ba <HAL_GPIO_Init+0x48a>
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	2b03      	cmp	r3, #3
 800350e:	f000 80d4 	beq.w	80036ba <HAL_GPIO_Init+0x48a>
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	2b03      	cmp	r3, #3
 8003518:	f000 80cf 	beq.w	80036ba <HAL_GPIO_Init+0x48a>
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	2b03      	cmp	r3, #3
 8003522:	f000 80ca 	beq.w	80036ba <HAL_GPIO_Init+0x48a>
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	2b03      	cmp	r3, #3
 800352c:	f000 80c5 	beq.w	80036ba <HAL_GPIO_Init+0x48a>
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	2b04      	cmp	r3, #4
 8003536:	f000 80c0 	beq.w	80036ba <HAL_GPIO_Init+0x48a>
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	2b04      	cmp	r3, #4
 8003540:	f000 80bb 	beq.w	80036ba <HAL_GPIO_Init+0x48a>
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	2b04      	cmp	r3, #4
 800354a:	f000 80b6 	beq.w	80036ba <HAL_GPIO_Init+0x48a>
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	2b04      	cmp	r3, #4
 8003554:	f000 80b1 	beq.w	80036ba <HAL_GPIO_Init+0x48a>
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	2b04      	cmp	r3, #4
 800355e:	f000 80ac 	beq.w	80036ba <HAL_GPIO_Init+0x48a>
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	2b05      	cmp	r3, #5
 8003568:	f000 80a7 	beq.w	80036ba <HAL_GPIO_Init+0x48a>
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	691b      	ldr	r3, [r3, #16]
 8003570:	2b05      	cmp	r3, #5
 8003572:	f000 80a2 	beq.w	80036ba <HAL_GPIO_Init+0x48a>
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	2b05      	cmp	r3, #5
 800357c:	f000 809d 	beq.w	80036ba <HAL_GPIO_Init+0x48a>
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	2b05      	cmp	r3, #5
 8003586:	f000 8098 	beq.w	80036ba <HAL_GPIO_Init+0x48a>
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	2b05      	cmp	r3, #5
 8003590:	f000 8093 	beq.w	80036ba <HAL_GPIO_Init+0x48a>
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	691b      	ldr	r3, [r3, #16]
 8003598:	2b05      	cmp	r3, #5
 800359a:	f000 808e 	beq.w	80036ba <HAL_GPIO_Init+0x48a>
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	2b06      	cmp	r3, #6
 80035a4:	f000 8089 	beq.w	80036ba <HAL_GPIO_Init+0x48a>
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	2b06      	cmp	r3, #6
 80035ae:	f000 8084 	beq.w	80036ba <HAL_GPIO_Init+0x48a>
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	2b07      	cmp	r3, #7
 80035b8:	d07f      	beq.n	80036ba <HAL_GPIO_Init+0x48a>
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	2b07      	cmp	r3, #7
 80035c0:	d07b      	beq.n	80036ba <HAL_GPIO_Init+0x48a>
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	2b07      	cmp	r3, #7
 80035c8:	d077      	beq.n	80036ba <HAL_GPIO_Init+0x48a>
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	2b07      	cmp	r3, #7
 80035d0:	d073      	beq.n	80036ba <HAL_GPIO_Init+0x48a>
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	2b07      	cmp	r3, #7
 80035d8:	d06f      	beq.n	80036ba <HAL_GPIO_Init+0x48a>
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	2b07      	cmp	r3, #7
 80035e0:	d06b      	beq.n	80036ba <HAL_GPIO_Init+0x48a>
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	2b07      	cmp	r3, #7
 80035e8:	d067      	beq.n	80036ba <HAL_GPIO_Init+0x48a>
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	2b08      	cmp	r3, #8
 80035f0:	d063      	beq.n	80036ba <HAL_GPIO_Init+0x48a>
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	2b08      	cmp	r3, #8
 80035f8:	d05f      	beq.n	80036ba <HAL_GPIO_Init+0x48a>
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	2b08      	cmp	r3, #8
 8003600:	d05b      	beq.n	80036ba <HAL_GPIO_Init+0x48a>
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	2b08      	cmp	r3, #8
 8003608:	d057      	beq.n	80036ba <HAL_GPIO_Init+0x48a>
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	2b08      	cmp	r3, #8
 8003610:	d053      	beq.n	80036ba <HAL_GPIO_Init+0x48a>
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	2b08      	cmp	r3, #8
 8003618:	d04f      	beq.n	80036ba <HAL_GPIO_Init+0x48a>
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	2b08      	cmp	r3, #8
 8003620:	d04b      	beq.n	80036ba <HAL_GPIO_Init+0x48a>
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	2b09      	cmp	r3, #9
 8003628:	d047      	beq.n	80036ba <HAL_GPIO_Init+0x48a>
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	2b09      	cmp	r3, #9
 8003630:	d043      	beq.n	80036ba <HAL_GPIO_Init+0x48a>
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	2b09      	cmp	r3, #9
 8003638:	d03f      	beq.n	80036ba <HAL_GPIO_Init+0x48a>
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	2b09      	cmp	r3, #9
 8003640:	d03b      	beq.n	80036ba <HAL_GPIO_Init+0x48a>
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	2b09      	cmp	r3, #9
 8003648:	d037      	beq.n	80036ba <HAL_GPIO_Init+0x48a>
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	2b09      	cmp	r3, #9
 8003650:	d033      	beq.n	80036ba <HAL_GPIO_Init+0x48a>
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	2b09      	cmp	r3, #9
 8003658:	d02f      	beq.n	80036ba <HAL_GPIO_Init+0x48a>
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	2b0a      	cmp	r3, #10
 8003660:	d02b      	beq.n	80036ba <HAL_GPIO_Init+0x48a>
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	2b0a      	cmp	r3, #10
 8003668:	d027      	beq.n	80036ba <HAL_GPIO_Init+0x48a>
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	2b0a      	cmp	r3, #10
 8003670:	d023      	beq.n	80036ba <HAL_GPIO_Init+0x48a>
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	2b0a      	cmp	r3, #10
 8003678:	d01f      	beq.n	80036ba <HAL_GPIO_Init+0x48a>
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	2b0b      	cmp	r3, #11
 8003680:	d01b      	beq.n	80036ba <HAL_GPIO_Init+0x48a>
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	2b0c      	cmp	r3, #12
 8003688:	d017      	beq.n	80036ba <HAL_GPIO_Init+0x48a>
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	2b0c      	cmp	r3, #12
 8003690:	d013      	beq.n	80036ba <HAL_GPIO_Init+0x48a>
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	2b0c      	cmp	r3, #12
 8003698:	d00f      	beq.n	80036ba <HAL_GPIO_Init+0x48a>
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	2b0f      	cmp	r3, #15
 80036a0:	d00b      	beq.n	80036ba <HAL_GPIO_Init+0x48a>
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	2b0d      	cmp	r3, #13
 80036a8:	d007      	beq.n	80036ba <HAL_GPIO_Init+0x48a>
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	2b0e      	cmp	r3, #14
 80036b0:	d003      	beq.n	80036ba <HAL_GPIO_Init+0x48a>
 80036b2:	21db      	movs	r1, #219	; 0xdb
 80036b4:	4888      	ldr	r0, [pc, #544]	; (80038d8 <HAL_GPIO_Init+0x6a8>)
 80036b6:	f7fe fede 	bl	8002476 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	08da      	lsrs	r2, r3, #3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	3208      	adds	r2, #8
 80036c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	f003 0307 	and.w	r3, r3, #7
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	220f      	movs	r2, #15
 80036d2:	fa02 f303 	lsl.w	r3, r2, r3
 80036d6:	43db      	mvns	r3, r3
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	4013      	ands	r3, r2
 80036dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	691a      	ldr	r2, [r3, #16]
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	f003 0307 	and.w	r3, r3, #7
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	fa02 f303 	lsl.w	r3, r2, r3
 80036ee:	69ba      	ldr	r2, [r7, #24]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	08da      	lsrs	r2, r3, #3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	3208      	adds	r2, #8
 80036fc:	69b9      	ldr	r1, [r7, #24]
 80036fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	005b      	lsls	r3, r3, #1
 800370c:	2203      	movs	r2, #3
 800370e:	fa02 f303 	lsl.w	r3, r2, r3
 8003712:	43db      	mvns	r3, r3
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	4013      	ands	r3, r2
 8003718:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f003 0203 	and.w	r2, r3, #3
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	005b      	lsls	r3, r3, #1
 8003726:	fa02 f303 	lsl.w	r3, r2, r3
 800372a:	69ba      	ldr	r2, [r7, #24]
 800372c:	4313      	orrs	r3, r2
 800372e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	69ba      	ldr	r2, [r7, #24]
 8003734:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800373e:	2b00      	cmp	r3, #0
 8003740:	f000 80be 	beq.w	80038c0 <HAL_GPIO_Init+0x690>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003744:	4b65      	ldr	r3, [pc, #404]	; (80038dc <HAL_GPIO_Init+0x6ac>)
 8003746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003748:	4a64      	ldr	r2, [pc, #400]	; (80038dc <HAL_GPIO_Init+0x6ac>)
 800374a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800374e:	6453      	str	r3, [r2, #68]	; 0x44
 8003750:	4b62      	ldr	r3, [pc, #392]	; (80038dc <HAL_GPIO_Init+0x6ac>)
 8003752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003754:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003758:	60fb      	str	r3, [r7, #12]
 800375a:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800375c:	4a60      	ldr	r2, [pc, #384]	; (80038e0 <HAL_GPIO_Init+0x6b0>)
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	089b      	lsrs	r3, r3, #2
 8003762:	3302      	adds	r3, #2
 8003764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003768:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	f003 0303 	and.w	r3, r3, #3
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	220f      	movs	r2, #15
 8003774:	fa02 f303 	lsl.w	r3, r2, r3
 8003778:	43db      	mvns	r3, r3
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	4013      	ands	r3, r2
 800377e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a58      	ldr	r2, [pc, #352]	; (80038e4 <HAL_GPIO_Init+0x6b4>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d037      	beq.n	80037f8 <HAL_GPIO_Init+0x5c8>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4a57      	ldr	r2, [pc, #348]	; (80038e8 <HAL_GPIO_Init+0x6b8>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d031      	beq.n	80037f4 <HAL_GPIO_Init+0x5c4>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4a56      	ldr	r2, [pc, #344]	; (80038ec <HAL_GPIO_Init+0x6bc>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d02b      	beq.n	80037f0 <HAL_GPIO_Init+0x5c0>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	4a55      	ldr	r2, [pc, #340]	; (80038f0 <HAL_GPIO_Init+0x6c0>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d025      	beq.n	80037ec <HAL_GPIO_Init+0x5bc>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a54      	ldr	r2, [pc, #336]	; (80038f4 <HAL_GPIO_Init+0x6c4>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d01f      	beq.n	80037e8 <HAL_GPIO_Init+0x5b8>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a53      	ldr	r2, [pc, #332]	; (80038f8 <HAL_GPIO_Init+0x6c8>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d019      	beq.n	80037e4 <HAL_GPIO_Init+0x5b4>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a52      	ldr	r2, [pc, #328]	; (80038fc <HAL_GPIO_Init+0x6cc>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d013      	beq.n	80037e0 <HAL_GPIO_Init+0x5b0>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a51      	ldr	r2, [pc, #324]	; (8003900 <HAL_GPIO_Init+0x6d0>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d00d      	beq.n	80037dc <HAL_GPIO_Init+0x5ac>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a50      	ldr	r2, [pc, #320]	; (8003904 <HAL_GPIO_Init+0x6d4>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d007      	beq.n	80037d8 <HAL_GPIO_Init+0x5a8>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a4f      	ldr	r2, [pc, #316]	; (8003908 <HAL_GPIO_Init+0x6d8>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d101      	bne.n	80037d4 <HAL_GPIO_Init+0x5a4>
 80037d0:	2309      	movs	r3, #9
 80037d2:	e012      	b.n	80037fa <HAL_GPIO_Init+0x5ca>
 80037d4:	230a      	movs	r3, #10
 80037d6:	e010      	b.n	80037fa <HAL_GPIO_Init+0x5ca>
 80037d8:	2308      	movs	r3, #8
 80037da:	e00e      	b.n	80037fa <HAL_GPIO_Init+0x5ca>
 80037dc:	2307      	movs	r3, #7
 80037de:	e00c      	b.n	80037fa <HAL_GPIO_Init+0x5ca>
 80037e0:	2306      	movs	r3, #6
 80037e2:	e00a      	b.n	80037fa <HAL_GPIO_Init+0x5ca>
 80037e4:	2305      	movs	r3, #5
 80037e6:	e008      	b.n	80037fa <HAL_GPIO_Init+0x5ca>
 80037e8:	2304      	movs	r3, #4
 80037ea:	e006      	b.n	80037fa <HAL_GPIO_Init+0x5ca>
 80037ec:	2303      	movs	r3, #3
 80037ee:	e004      	b.n	80037fa <HAL_GPIO_Init+0x5ca>
 80037f0:	2302      	movs	r3, #2
 80037f2:	e002      	b.n	80037fa <HAL_GPIO_Init+0x5ca>
 80037f4:	2301      	movs	r3, #1
 80037f6:	e000      	b.n	80037fa <HAL_GPIO_Init+0x5ca>
 80037f8:	2300      	movs	r3, #0
 80037fa:	69fa      	ldr	r2, [r7, #28]
 80037fc:	f002 0203 	and.w	r2, r2, #3
 8003800:	0092      	lsls	r2, r2, #2
 8003802:	4093      	lsls	r3, r2
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	4313      	orrs	r3, r2
 8003808:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800380a:	4935      	ldr	r1, [pc, #212]	; (80038e0 <HAL_GPIO_Init+0x6b0>)
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	089b      	lsrs	r3, r3, #2
 8003810:	3302      	adds	r3, #2
 8003812:	69ba      	ldr	r2, [r7, #24]
 8003814:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003818:	4b3c      	ldr	r3, [pc, #240]	; (800390c <HAL_GPIO_Init+0x6dc>)
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	43db      	mvns	r3, r3
 8003822:	69ba      	ldr	r2, [r7, #24]
 8003824:	4013      	ands	r3, r2
 8003826:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d003      	beq.n	800383c <HAL_GPIO_Init+0x60c>
        {
          temp |= iocurrent;
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	4313      	orrs	r3, r2
 800383a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800383c:	4a33      	ldr	r2, [pc, #204]	; (800390c <HAL_GPIO_Init+0x6dc>)
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003842:	4b32      	ldr	r3, [pc, #200]	; (800390c <HAL_GPIO_Init+0x6dc>)
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	43db      	mvns	r3, r3
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	4013      	ands	r3, r2
 8003850:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d003      	beq.n	8003866 <HAL_GPIO_Init+0x636>
        {
          temp |= iocurrent;
 800385e:	69ba      	ldr	r2, [r7, #24]
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	4313      	orrs	r3, r2
 8003864:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003866:	4a29      	ldr	r2, [pc, #164]	; (800390c <HAL_GPIO_Init+0x6dc>)
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800386c:	4b27      	ldr	r3, [pc, #156]	; (800390c <HAL_GPIO_Init+0x6dc>)
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	43db      	mvns	r3, r3
 8003876:	69ba      	ldr	r2, [r7, #24]
 8003878:	4013      	ands	r3, r2
 800387a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d003      	beq.n	8003890 <HAL_GPIO_Init+0x660>
        {
          temp |= iocurrent;
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	4313      	orrs	r3, r2
 800388e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003890:	4a1e      	ldr	r2, [pc, #120]	; (800390c <HAL_GPIO_Init+0x6dc>)
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003896:	4b1d      	ldr	r3, [pc, #116]	; (800390c <HAL_GPIO_Init+0x6dc>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	43db      	mvns	r3, r3
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	4013      	ands	r3, r2
 80038a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d003      	beq.n	80038ba <HAL_GPIO_Init+0x68a>
        {
          temp |= iocurrent;
 80038b2:	69ba      	ldr	r2, [r7, #24]
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80038ba:	4a14      	ldr	r2, [pc, #80]	; (800390c <HAL_GPIO_Init+0x6dc>)
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	3301      	adds	r3, #1
 80038c4:	61fb      	str	r3, [r7, #28]
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	2b0f      	cmp	r3, #15
 80038ca:	f67f ad4d 	bls.w	8003368 <HAL_GPIO_Init+0x138>
      }
    }
  }
}
 80038ce:	bf00      	nop
 80038d0:	bf00      	nop
 80038d2:	3720      	adds	r7, #32
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	080144ac 	.word	0x080144ac
 80038dc:	40023800 	.word	0x40023800
 80038e0:	40013800 	.word	0x40013800
 80038e4:	40020000 	.word	0x40020000
 80038e8:	40020400 	.word	0x40020400
 80038ec:	40020800 	.word	0x40020800
 80038f0:	40020c00 	.word	0x40020c00
 80038f4:	40021000 	.word	0x40021000
 80038f8:	40021400 	.word	0x40021400
 80038fc:	40021800 	.word	0x40021800
 8003900:	40021c00 	.word	0x40021c00
 8003904:	40022000 	.word	0x40022000
 8003908:	40022400 	.word	0x40022400
 800390c:	40013c00 	.word	0x40013c00

08003910 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	460b      	mov	r3, r1
 800391a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800391c:	887b      	ldrh	r3, [r7, #2]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d104      	bne.n	800392c <HAL_GPIO_ReadPin+0x1c>
 8003922:	f240 1177 	movw	r1, #375	; 0x177
 8003926:	4809      	ldr	r0, [pc, #36]	; (800394c <HAL_GPIO_ReadPin+0x3c>)
 8003928:	f7fe fda5 	bl	8002476 <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	691a      	ldr	r2, [r3, #16]
 8003930:	887b      	ldrh	r3, [r7, #2]
 8003932:	4013      	ands	r3, r2
 8003934:	2b00      	cmp	r3, #0
 8003936:	d002      	beq.n	800393e <HAL_GPIO_ReadPin+0x2e>
  {
    bitstatus = GPIO_PIN_SET;
 8003938:	2301      	movs	r3, #1
 800393a:	73fb      	strb	r3, [r7, #15]
 800393c:	e001      	b.n	8003942 <HAL_GPIO_ReadPin+0x32>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800393e:	2300      	movs	r3, #0
 8003940:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003942:	7bfb      	ldrb	r3, [r7, #15]
}
 8003944:	4618      	mov	r0, r3
 8003946:	3710      	adds	r7, #16
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	080144ac 	.word	0x080144ac

08003950 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	460b      	mov	r3, r1
 800395a:	807b      	strh	r3, [r7, #2]
 800395c:	4613      	mov	r3, r2
 800395e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003960:	887b      	ldrh	r3, [r7, #2]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d104      	bne.n	8003970 <HAL_GPIO_WritePin+0x20>
 8003966:	f240 1197 	movw	r1, #407	; 0x197
 800396a:	480e      	ldr	r0, [pc, #56]	; (80039a4 <HAL_GPIO_WritePin+0x54>)
 800396c:	f7fe fd83 	bl	8002476 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003970:	787b      	ldrb	r3, [r7, #1]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d007      	beq.n	8003986 <HAL_GPIO_WritePin+0x36>
 8003976:	787b      	ldrb	r3, [r7, #1]
 8003978:	2b01      	cmp	r3, #1
 800397a:	d004      	beq.n	8003986 <HAL_GPIO_WritePin+0x36>
 800397c:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8003980:	4808      	ldr	r0, [pc, #32]	; (80039a4 <HAL_GPIO_WritePin+0x54>)
 8003982:	f7fe fd78 	bl	8002476 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8003986:	787b      	ldrb	r3, [r7, #1]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d003      	beq.n	8003994 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 800398c:	887a      	ldrh	r2, [r7, #2]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003992:	e003      	b.n	800399c <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003994:	887b      	ldrh	r3, [r7, #2]
 8003996:	041a      	lsls	r2, r3, #16
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	619a      	str	r2, [r3, #24]
}
 800399c:	bf00      	nop
 800399e:	3708      	adds	r7, #8
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	080144ac 	.word	0x080144ac

080039a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	4603      	mov	r3, r0
 80039b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80039b2:	4b08      	ldr	r3, [pc, #32]	; (80039d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039b4:	695a      	ldr	r2, [r3, #20]
 80039b6:	88fb      	ldrh	r3, [r7, #6]
 80039b8:	4013      	ands	r3, r2
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d006      	beq.n	80039cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80039be:	4a05      	ldr	r2, [pc, #20]	; (80039d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039c0:	88fb      	ldrh	r3, [r7, #6]
 80039c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80039c4:	88fb      	ldrh	r3, [r7, #6]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7fe fd12 	bl	80023f0 <HAL_GPIO_EXTI_Callback>
  }
}
 80039cc:	bf00      	nop
 80039ce:	3708      	adds	r7, #8
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	40013c00 	.word	0x40013c00

080039d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d101      	bne.n	80039ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e107      	b.n	8003bfa <HAL_I2C_Init+0x222>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a85      	ldr	r2, [pc, #532]	; (8003c04 <HAL_I2C_Init+0x22c>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d013      	beq.n	8003a1c <HAL_I2C_Init+0x44>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a83      	ldr	r2, [pc, #524]	; (8003c08 <HAL_I2C_Init+0x230>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d00e      	beq.n	8003a1c <HAL_I2C_Init+0x44>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a82      	ldr	r2, [pc, #520]	; (8003c0c <HAL_I2C_Init+0x234>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d009      	beq.n	8003a1c <HAL_I2C_Init+0x44>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a80      	ldr	r2, [pc, #512]	; (8003c10 <HAL_I2C_Init+0x238>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d004      	beq.n	8003a1c <HAL_I2C_Init+0x44>
 8003a12:	f240 2119 	movw	r1, #537	; 0x219
 8003a16:	487f      	ldr	r0, [pc, #508]	; (8003c14 <HAL_I2C_Init+0x23c>)
 8003a18:	f7fe fd2d 	bl	8002476 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a24:	d304      	bcc.n	8003a30 <HAL_I2C_Init+0x58>
 8003a26:	f240 211a 	movw	r1, #538	; 0x21a
 8003a2a:	487a      	ldr	r0, [pc, #488]	; (8003c14 <HAL_I2C_Init+0x23c>)
 8003a2c:	f7fe fd23 	bl	8002476 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d008      	beq.n	8003a4a <HAL_I2C_Init+0x72>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d004      	beq.n	8003a4a <HAL_I2C_Init+0x72>
 8003a40:	f240 211b 	movw	r1, #539	; 0x21b
 8003a44:	4873      	ldr	r0, [pc, #460]	; (8003c14 <HAL_I2C_Init+0x23c>)
 8003a46:	f7fe fd16 	bl	8002476 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d009      	beq.n	8003a66 <HAL_I2C_Init+0x8e>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a5a:	d004      	beq.n	8003a66 <HAL_I2C_Init+0x8e>
 8003a5c:	f44f 7107 	mov.w	r1, #540	; 0x21c
 8003a60:	486c      	ldr	r0, [pc, #432]	; (8003c14 <HAL_I2C_Init+0x23c>)
 8003a62:	f7fe fd08 	bl	8002476 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	2bff      	cmp	r3, #255	; 0xff
 8003a6c:	d904      	bls.n	8003a78 <HAL_I2C_Init+0xa0>
 8003a6e:	f240 211d 	movw	r1, #541	; 0x21d
 8003a72:	4868      	ldr	r0, [pc, #416]	; (8003c14 <HAL_I2C_Init+0x23c>)
 8003a74:	f7fe fcff 	bl	8002476 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	699b      	ldr	r3, [r3, #24]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d020      	beq.n	8003ac2 <HAL_I2C_Init+0xea>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d01c      	beq.n	8003ac2 <HAL_I2C_Init+0xea>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d018      	beq.n	8003ac2 <HAL_I2C_Init+0xea>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	2b03      	cmp	r3, #3
 8003a96:	d014      	beq.n	8003ac2 <HAL_I2C_Init+0xea>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	699b      	ldr	r3, [r3, #24]
 8003a9c:	2b04      	cmp	r3, #4
 8003a9e:	d010      	beq.n	8003ac2 <HAL_I2C_Init+0xea>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	699b      	ldr	r3, [r3, #24]
 8003aa4:	2b05      	cmp	r3, #5
 8003aa6:	d00c      	beq.n	8003ac2 <HAL_I2C_Init+0xea>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	2b06      	cmp	r3, #6
 8003aae:	d008      	beq.n	8003ac2 <HAL_I2C_Init+0xea>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	2b07      	cmp	r3, #7
 8003ab6:	d004      	beq.n	8003ac2 <HAL_I2C_Init+0xea>
 8003ab8:	f240 211e 	movw	r1, #542	; 0x21e
 8003abc:	4855      	ldr	r0, [pc, #340]	; (8003c14 <HAL_I2C_Init+0x23c>)
 8003abe:	f7fe fcda 	bl	8002476 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	69db      	ldr	r3, [r3, #28]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d009      	beq.n	8003ade <HAL_I2C_Init+0x106>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	69db      	ldr	r3, [r3, #28]
 8003ace:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003ad2:	d004      	beq.n	8003ade <HAL_I2C_Init+0x106>
 8003ad4:	f240 211f 	movw	r1, #543	; 0x21f
 8003ad8:	484e      	ldr	r0, [pc, #312]	; (8003c14 <HAL_I2C_Init+0x23c>)
 8003ada:	f7fe fccc 	bl	8002476 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a1b      	ldr	r3, [r3, #32]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d009      	beq.n	8003afa <HAL_I2C_Init+0x122>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
 8003aea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003aee:	d004      	beq.n	8003afa <HAL_I2C_Init+0x122>
 8003af0:	f44f 7108 	mov.w	r1, #544	; 0x220
 8003af4:	4847      	ldr	r0, [pc, #284]	; (8003c14 <HAL_I2C_Init+0x23c>)
 8003af6:	f7fe fcbe 	bl	8002476 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d106      	bne.n	8003b14 <HAL_I2C_Init+0x13c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f7fd fc42 	bl	8001398 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2224      	movs	r2, #36	; 0x24
 8003b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f022 0201 	bic.w	r2, r2, #1
 8003b2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685a      	ldr	r2, [r3, #4]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b38:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	689a      	ldr	r2, [r3, #8]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b48:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d107      	bne.n	8003b62 <HAL_I2C_Init+0x18a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	689a      	ldr	r2, [r3, #8]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b5e:	609a      	str	r2, [r3, #8]
 8003b60:	e006      	b.n	8003b70 <HAL_I2C_Init+0x198>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	689a      	ldr	r2, [r3, #8]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003b6e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d104      	bne.n	8003b82 <HAL_I2C_Init+0x1aa>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b80:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	6859      	ldr	r1, [r3, #4]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	4b22      	ldr	r3, [pc, #136]	; (8003c18 <HAL_I2C_Init+0x240>)
 8003b8e:	430b      	orrs	r3, r1
 8003b90:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68da      	ldr	r2, [r3, #12]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ba0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	691a      	ldr	r2, [r3, #16]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	430a      	orrs	r2, r1
 8003bba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	69d9      	ldr	r1, [r3, #28]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a1a      	ldr	r2, [r3, #32]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	430a      	orrs	r2, r1
 8003bca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f042 0201 	orr.w	r2, r2, #1
 8003bda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2220      	movs	r2, #32
 8003be6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3708      	adds	r7, #8
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	40005400 	.word	0x40005400
 8003c08:	40005800 	.word	0x40005800
 8003c0c:	40005c00 	.word	0x40005c00
 8003c10:	40006000 	.word	0x40006000
 8003c14:	080144e8 	.word	0x080144e8
 8003c18:	02008000 	.word	0x02008000

08003c1c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b088      	sub	sp, #32
 8003c20:	af02      	add	r7, sp, #8
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	607a      	str	r2, [r7, #4]
 8003c26:	461a      	mov	r2, r3
 8003c28:	460b      	mov	r3, r1
 8003c2a:	817b      	strh	r3, [r7, #10]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	2b20      	cmp	r3, #32
 8003c3a:	f040 80da 	bne.w	8003df2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d101      	bne.n	8003c4c <HAL_I2C_Master_Transmit+0x30>
 8003c48:	2302      	movs	r3, #2
 8003c4a:	e0d3      	b.n	8003df4 <HAL_I2C_Master_Transmit+0x1d8>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003c54:	f7ff f8ea 	bl	8002e2c <HAL_GetTick>
 8003c58:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	9300      	str	r3, [sp, #0]
 8003c5e:	2319      	movs	r3, #25
 8003c60:	2201      	movs	r2, #1
 8003c62:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	f000 f9e6 	bl	8004038 <I2C_WaitOnFlagUntilTimeout>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d001      	beq.n	8003c76 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e0be      	b.n	8003df4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2221      	movs	r2, #33	; 0x21
 8003c7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2210      	movs	r2, #16
 8003c82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	893a      	ldrh	r2, [r7, #8]
 8003c96:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	2bff      	cmp	r3, #255	; 0xff
 8003ca6:	d90e      	bls.n	8003cc6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	22ff      	movs	r2, #255	; 0xff
 8003cac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cb2:	b2da      	uxtb	r2, r3
 8003cb4:	8979      	ldrh	r1, [r7, #10]
 8003cb6:	4b51      	ldr	r3, [pc, #324]	; (8003dfc <HAL_I2C_Master_Transmit+0x1e0>)
 8003cb8:	9300      	str	r3, [sp, #0]
 8003cba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003cbe:	68f8      	ldr	r0, [r7, #12]
 8003cc0:	f000 fbd0 	bl	8004464 <I2C_TransferConfig>
 8003cc4:	e06c      	b.n	8003da0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cca:	b29a      	uxth	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd4:	b2da      	uxtb	r2, r3
 8003cd6:	8979      	ldrh	r1, [r7, #10]
 8003cd8:	4b48      	ldr	r3, [pc, #288]	; (8003dfc <HAL_I2C_Master_Transmit+0x1e0>)
 8003cda:	9300      	str	r3, [sp, #0]
 8003cdc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ce0:	68f8      	ldr	r0, [r7, #12]
 8003ce2:	f000 fbbf 	bl	8004464 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003ce6:	e05b      	b.n	8003da0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	6a39      	ldr	r1, [r7, #32]
 8003cec:	68f8      	ldr	r0, [r7, #12]
 8003cee:	f000 f9e3 	bl	80040b8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d001      	beq.n	8003cfc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e07b      	b.n	8003df4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d00:	781a      	ldrb	r2, [r3, #0]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0c:	1c5a      	adds	r2, r3, #1
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	b29a      	uxth	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d24:	3b01      	subs	r3, #1
 8003d26:	b29a      	uxth	r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d034      	beq.n	8003da0 <HAL_I2C_Master_Transmit+0x184>
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d130      	bne.n	8003da0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	9300      	str	r3, [sp, #0]
 8003d42:	6a3b      	ldr	r3, [r7, #32]
 8003d44:	2200      	movs	r2, #0
 8003d46:	2180      	movs	r1, #128	; 0x80
 8003d48:	68f8      	ldr	r0, [r7, #12]
 8003d4a:	f000 f975 	bl	8004038 <I2C_WaitOnFlagUntilTimeout>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d001      	beq.n	8003d58 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e04d      	b.n	8003df4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	2bff      	cmp	r3, #255	; 0xff
 8003d60:	d90e      	bls.n	8003d80 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	22ff      	movs	r2, #255	; 0xff
 8003d66:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d6c:	b2da      	uxtb	r2, r3
 8003d6e:	8979      	ldrh	r1, [r7, #10]
 8003d70:	2300      	movs	r3, #0
 8003d72:	9300      	str	r3, [sp, #0]
 8003d74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d78:	68f8      	ldr	r0, [r7, #12]
 8003d7a:	f000 fb73 	bl	8004464 <I2C_TransferConfig>
 8003d7e:	e00f      	b.n	8003da0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d84:	b29a      	uxth	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d8e:	b2da      	uxtb	r2, r3
 8003d90:	8979      	ldrh	r1, [r7, #10]
 8003d92:	2300      	movs	r3, #0
 8003d94:	9300      	str	r3, [sp, #0]
 8003d96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f000 fb62 	bl	8004464 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d19e      	bne.n	8003ce8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003daa:	697a      	ldr	r2, [r7, #20]
 8003dac:	6a39      	ldr	r1, [r7, #32]
 8003dae:	68f8      	ldr	r0, [r7, #12]
 8003db0:	f000 f9c2 	bl	8004138 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d001      	beq.n	8003dbe <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e01a      	b.n	8003df4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2220      	movs	r2, #32
 8003dc4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	6859      	ldr	r1, [r3, #4]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	4b0b      	ldr	r3, [pc, #44]	; (8003e00 <HAL_I2C_Master_Transmit+0x1e4>)
 8003dd2:	400b      	ands	r3, r1
 8003dd4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2220      	movs	r2, #32
 8003dda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003dee:	2300      	movs	r3, #0
 8003df0:	e000      	b.n	8003df4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003df2:	2302      	movs	r3, #2
  }
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3718      	adds	r7, #24
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	80002000 	.word	0x80002000
 8003e00:	fe00e800 	.word	0xfe00e800

08003e04 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b088      	sub	sp, #32
 8003e08:	af02      	add	r7, sp, #8
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	607a      	str	r2, [r7, #4]
 8003e0e:	461a      	mov	r2, r3
 8003e10:	460b      	mov	r3, r1
 8003e12:	817b      	strh	r3, [r7, #10]
 8003e14:	4613      	mov	r3, r2
 8003e16:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	2b20      	cmp	r3, #32
 8003e22:	f040 80db 	bne.w	8003fdc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d101      	bne.n	8003e34 <HAL_I2C_Master_Receive+0x30>
 8003e30:	2302      	movs	r3, #2
 8003e32:	e0d4      	b.n	8003fde <HAL_I2C_Master_Receive+0x1da>
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e3c:	f7fe fff6 	bl	8002e2c <HAL_GetTick>
 8003e40:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	9300      	str	r3, [sp, #0]
 8003e46:	2319      	movs	r3, #25
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	f000 f8f2 	bl	8004038 <I2C_WaitOnFlagUntilTimeout>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e0bf      	b.n	8003fde <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2222      	movs	r2, #34	; 0x22
 8003e62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2210      	movs	r2, #16
 8003e6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	893a      	ldrh	r2, [r7, #8]
 8003e7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	2bff      	cmp	r3, #255	; 0xff
 8003e8e:	d90e      	bls.n	8003eae <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	22ff      	movs	r2, #255	; 0xff
 8003e94:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e9a:	b2da      	uxtb	r2, r3
 8003e9c:	8979      	ldrh	r1, [r7, #10]
 8003e9e:	4b52      	ldr	r3, [pc, #328]	; (8003fe8 <HAL_I2C_Master_Receive+0x1e4>)
 8003ea0:	9300      	str	r3, [sp, #0]
 8003ea2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ea6:	68f8      	ldr	r0, [r7, #12]
 8003ea8:	f000 fadc 	bl	8004464 <I2C_TransferConfig>
 8003eac:	e06d      	b.n	8003f8a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ebc:	b2da      	uxtb	r2, r3
 8003ebe:	8979      	ldrh	r1, [r7, #10]
 8003ec0:	4b49      	ldr	r3, [pc, #292]	; (8003fe8 <HAL_I2C_Master_Receive+0x1e4>)
 8003ec2:	9300      	str	r3, [sp, #0]
 8003ec4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	f000 facb 	bl	8004464 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003ece:	e05c      	b.n	8003f8a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ed0:	697a      	ldr	r2, [r7, #20]
 8003ed2:	6a39      	ldr	r1, [r7, #32]
 8003ed4:	68f8      	ldr	r0, [r7, #12]
 8003ed6:	f000 f96b 	bl	80041b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d001      	beq.n	8003ee4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e07c      	b.n	8003fde <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eee:	b2d2      	uxtb	r2, r2
 8003ef0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef6:	1c5a      	adds	r2, r3, #1
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f00:	3b01      	subs	r3, #1
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d034      	beq.n	8003f8a <HAL_I2C_Master_Receive+0x186>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d130      	bne.n	8003f8a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	9300      	str	r3, [sp, #0]
 8003f2c:	6a3b      	ldr	r3, [r7, #32]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	2180      	movs	r1, #128	; 0x80
 8003f32:	68f8      	ldr	r0, [r7, #12]
 8003f34:	f000 f880 	bl	8004038 <I2C_WaitOnFlagUntilTimeout>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d001      	beq.n	8003f42 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e04d      	b.n	8003fde <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	2bff      	cmp	r3, #255	; 0xff
 8003f4a:	d90e      	bls.n	8003f6a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	22ff      	movs	r2, #255	; 0xff
 8003f50:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f56:	b2da      	uxtb	r2, r3
 8003f58:	8979      	ldrh	r1, [r7, #10]
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	9300      	str	r3, [sp, #0]
 8003f5e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f62:	68f8      	ldr	r0, [r7, #12]
 8003f64:	f000 fa7e 	bl	8004464 <I2C_TransferConfig>
 8003f68:	e00f      	b.n	8003f8a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f6e:	b29a      	uxth	r2, r3
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f78:	b2da      	uxtb	r2, r3
 8003f7a:	8979      	ldrh	r1, [r7, #10]
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	9300      	str	r3, [sp, #0]
 8003f80:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f84:	68f8      	ldr	r0, [r7, #12]
 8003f86:	f000 fa6d 	bl	8004464 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d19d      	bne.n	8003ed0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f94:	697a      	ldr	r2, [r7, #20]
 8003f96:	6a39      	ldr	r1, [r7, #32]
 8003f98:	68f8      	ldr	r0, [r7, #12]
 8003f9a:	f000 f8cd 	bl	8004138 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d001      	beq.n	8003fa8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e01a      	b.n	8003fde <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2220      	movs	r2, #32
 8003fae:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	6859      	ldr	r1, [r3, #4]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	4b0c      	ldr	r3, [pc, #48]	; (8003fec <HAL_I2C_Master_Receive+0x1e8>)
 8003fbc:	400b      	ands	r3, r1
 8003fbe:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2220      	movs	r2, #32
 8003fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	e000      	b.n	8003fde <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003fdc:	2302      	movs	r3, #2
  }
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3718      	adds	r7, #24
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	80002400 	.word	0x80002400
 8003fec:	fe00e800 	.word	0xfe00e800

08003ff0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	2b02      	cmp	r3, #2
 8004004:	d103      	bne.n	800400e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2200      	movs	r2, #0
 800400c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	f003 0301 	and.w	r3, r3, #1
 8004018:	2b01      	cmp	r3, #1
 800401a:	d007      	beq.n	800402c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	699a      	ldr	r2, [r3, #24]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f042 0201 	orr.w	r2, r2, #1
 800402a:	619a      	str	r2, [r3, #24]
  }
}
 800402c:	bf00      	nop
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	603b      	str	r3, [r7, #0]
 8004044:	4613      	mov	r3, r2
 8004046:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004048:	e022      	b.n	8004090 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004050:	d01e      	beq.n	8004090 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004052:	f7fe feeb 	bl	8002e2c <HAL_GetTick>
 8004056:	4602      	mov	r2, r0
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	683a      	ldr	r2, [r7, #0]
 800405e:	429a      	cmp	r2, r3
 8004060:	d302      	bcc.n	8004068 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d113      	bne.n	8004090 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800406c:	f043 0220 	orr.w	r2, r3, #32
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2220      	movs	r2, #32
 8004078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e00f      	b.n	80040b0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	699a      	ldr	r2, [r3, #24]
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	4013      	ands	r3, r2
 800409a:	68ba      	ldr	r2, [r7, #8]
 800409c:	429a      	cmp	r2, r3
 800409e:	bf0c      	ite	eq
 80040a0:	2301      	moveq	r3, #1
 80040a2:	2300      	movne	r3, #0
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	461a      	mov	r2, r3
 80040a8:	79fb      	ldrb	r3, [r7, #7]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d0cd      	beq.n	800404a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040ae:	2300      	movs	r3, #0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3710      	adds	r7, #16
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80040c4:	e02c      	b.n	8004120 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	68b9      	ldr	r1, [r7, #8]
 80040ca:	68f8      	ldr	r0, [r7, #12]
 80040cc:	f000 f8ea 	bl	80042a4 <I2C_IsErrorOccurred>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d001      	beq.n	80040da <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e02a      	b.n	8004130 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e0:	d01e      	beq.n	8004120 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040e2:	f7fe fea3 	bl	8002e2c <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	68ba      	ldr	r2, [r7, #8]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d302      	bcc.n	80040f8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d113      	bne.n	8004120 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040fc:	f043 0220 	orr.w	r2, r3, #32
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2220      	movs	r2, #32
 8004108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e007      	b.n	8004130 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	f003 0302 	and.w	r3, r3, #2
 800412a:	2b02      	cmp	r3, #2
 800412c:	d1cb      	bne.n	80040c6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800412e:	2300      	movs	r3, #0
}
 8004130:	4618      	mov	r0, r3
 8004132:	3710      	adds	r7, #16
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004144:	e028      	b.n	8004198 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	68b9      	ldr	r1, [r7, #8]
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	f000 f8aa 	bl	80042a4 <I2C_IsErrorOccurred>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d001      	beq.n	800415a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e026      	b.n	80041a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800415a:	f7fe fe67 	bl	8002e2c <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	68ba      	ldr	r2, [r7, #8]
 8004166:	429a      	cmp	r2, r3
 8004168:	d302      	bcc.n	8004170 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d113      	bne.n	8004198 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004174:	f043 0220 	orr.w	r2, r3, #32
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2220      	movs	r2, #32
 8004180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e007      	b.n	80041a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	f003 0320 	and.w	r3, r3, #32
 80041a2:	2b20      	cmp	r3, #32
 80041a4:	d1cf      	bne.n	8004146 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80041a6:	2300      	movs	r3, #0
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3710      	adds	r7, #16
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80041bc:	e064      	b.n	8004288 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	68b9      	ldr	r1, [r7, #8]
 80041c2:	68f8      	ldr	r0, [r7, #12]
 80041c4:	f000 f86e 	bl	80042a4 <I2C_IsErrorOccurred>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d001      	beq.n	80041d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e062      	b.n	8004298 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	f003 0320 	and.w	r3, r3, #32
 80041dc:	2b20      	cmp	r3, #32
 80041de:	d138      	bne.n	8004252 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	f003 0304 	and.w	r3, r3, #4
 80041ea:	2b04      	cmp	r3, #4
 80041ec:	d105      	bne.n	80041fa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d001      	beq.n	80041fa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80041f6:	2300      	movs	r3, #0
 80041f8:	e04e      	b.n	8004298 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	699b      	ldr	r3, [r3, #24]
 8004200:	f003 0310 	and.w	r3, r3, #16
 8004204:	2b10      	cmp	r3, #16
 8004206:	d107      	bne.n	8004218 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2210      	movs	r2, #16
 800420e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2204      	movs	r2, #4
 8004214:	645a      	str	r2, [r3, #68]	; 0x44
 8004216:	e002      	b.n	800421e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2220      	movs	r2, #32
 8004224:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	6859      	ldr	r1, [r3, #4]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	4b1b      	ldr	r3, [pc, #108]	; (80042a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8004232:	400b      	ands	r3, r1
 8004234:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2220      	movs	r2, #32
 800423a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e022      	b.n	8004298 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004252:	f7fe fdeb 	bl	8002e2c <HAL_GetTick>
 8004256:	4602      	mov	r2, r0
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	68ba      	ldr	r2, [r7, #8]
 800425e:	429a      	cmp	r2, r3
 8004260:	d302      	bcc.n	8004268 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d10f      	bne.n	8004288 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800426c:	f043 0220 	orr.w	r2, r3, #32
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2220      	movs	r2, #32
 8004278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e007      	b.n	8004298 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	f003 0304 	and.w	r3, r3, #4
 8004292:	2b04      	cmp	r3, #4
 8004294:	d193      	bne.n	80041be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004296:	2300      	movs	r3, #0
}
 8004298:	4618      	mov	r0, r3
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	fe00e800 	.word	0xfe00e800

080042a4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b08a      	sub	sp, #40	; 0x28
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042b0:	2300      	movs	r3, #0
 80042b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	699b      	ldr	r3, [r3, #24]
 80042bc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80042be:	2300      	movs	r3, #0
 80042c0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	f003 0310 	and.w	r3, r3, #16
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d068      	beq.n	80043a2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2210      	movs	r2, #16
 80042d6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80042d8:	e049      	b.n	800436e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e0:	d045      	beq.n	800436e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80042e2:	f7fe fda3 	bl	8002e2c <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	68ba      	ldr	r2, [r7, #8]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d302      	bcc.n	80042f8 <I2C_IsErrorOccurred+0x54>
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d13a      	bne.n	800436e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004302:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800430a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	699b      	ldr	r3, [r3, #24]
 8004312:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004316:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800431a:	d121      	bne.n	8004360 <I2C_IsErrorOccurred+0xbc>
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004322:	d01d      	beq.n	8004360 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004324:	7cfb      	ldrb	r3, [r7, #19]
 8004326:	2b20      	cmp	r3, #32
 8004328:	d01a      	beq.n	8004360 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	685a      	ldr	r2, [r3, #4]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004338:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800433a:	f7fe fd77 	bl	8002e2c <HAL_GetTick>
 800433e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004340:	e00e      	b.n	8004360 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004342:	f7fe fd73 	bl	8002e2c <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	2b19      	cmp	r3, #25
 800434e:	d907      	bls.n	8004360 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8004350:	6a3b      	ldr	r3, [r7, #32]
 8004352:	f043 0320 	orr.w	r3, r3, #32
 8004356:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800435e:	e006      	b.n	800436e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	f003 0320 	and.w	r3, r3, #32
 800436a:	2b20      	cmp	r3, #32
 800436c:	d1e9      	bne.n	8004342 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	f003 0320 	and.w	r3, r3, #32
 8004378:	2b20      	cmp	r3, #32
 800437a:	d003      	beq.n	8004384 <I2C_IsErrorOccurred+0xe0>
 800437c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004380:	2b00      	cmp	r3, #0
 8004382:	d0aa      	beq.n	80042da <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004384:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004388:	2b00      	cmp	r3, #0
 800438a:	d103      	bne.n	8004394 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2220      	movs	r2, #32
 8004392:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004394:	6a3b      	ldr	r3, [r7, #32]
 8004396:	f043 0304 	orr.w	r3, r3, #4
 800439a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00b      	beq.n	80043cc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80043b4:	6a3b      	ldr	r3, [r7, #32]
 80043b6:	f043 0301 	orr.w	r3, r3, #1
 80043ba:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00b      	beq.n	80043ee <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80043d6:	6a3b      	ldr	r3, [r7, #32]
 80043d8:	f043 0308 	orr.w	r3, r3, #8
 80043dc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80043e6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d00b      	beq.n	8004410 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80043f8:	6a3b      	ldr	r3, [r7, #32]
 80043fa:	f043 0302 	orr.w	r3, r3, #2
 80043fe:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004408:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004410:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004414:	2b00      	cmp	r3, #0
 8004416:	d01c      	beq.n	8004452 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004418:	68f8      	ldr	r0, [r7, #12]
 800441a:	f7ff fde9 	bl	8003ff0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	6859      	ldr	r1, [r3, #4]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	4b0d      	ldr	r3, [pc, #52]	; (8004460 <I2C_IsErrorOccurred+0x1bc>)
 800442a:	400b      	ands	r3, r1
 800442c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004432:	6a3b      	ldr	r3, [r7, #32]
 8004434:	431a      	orrs	r2, r3
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2220      	movs	r2, #32
 800443e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004452:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004456:	4618      	mov	r0, r3
 8004458:	3728      	adds	r7, #40	; 0x28
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	fe00e800 	.word	0xfe00e800

08004464 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b086      	sub	sp, #24
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	607b      	str	r3, [r7, #4]
 800446e:	460b      	mov	r3, r1
 8004470:	817b      	strh	r3, [r7, #10]
 8004472:	4613      	mov	r3, r2
 8004474:	727b      	strb	r3, [r7, #9]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a2f      	ldr	r2, [pc, #188]	; (8004538 <I2C_TransferConfig+0xd4>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d013      	beq.n	80044a8 <I2C_TransferConfig+0x44>
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a2d      	ldr	r2, [pc, #180]	; (800453c <I2C_TransferConfig+0xd8>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d00e      	beq.n	80044a8 <I2C_TransferConfig+0x44>
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a2c      	ldr	r2, [pc, #176]	; (8004540 <I2C_TransferConfig+0xdc>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d009      	beq.n	80044a8 <I2C_TransferConfig+0x44>
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a2a      	ldr	r2, [pc, #168]	; (8004544 <I2C_TransferConfig+0xe0>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d004      	beq.n	80044a8 <I2C_TransferConfig+0x44>
 800449e:	f641 3147 	movw	r1, #6983	; 0x1b47
 80044a2:	4829      	ldr	r0, [pc, #164]	; (8004548 <I2C_TransferConfig+0xe4>)
 80044a4:	f7fd ffe7 	bl	8002476 <assert_failed>
  assert_param(IS_TRANSFER_MODE(Mode));
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80044ae:	d00b      	beq.n	80044c8 <I2C_TransferConfig+0x64>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80044b6:	d007      	beq.n	80044c8 <I2C_TransferConfig+0x64>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d004      	beq.n	80044c8 <I2C_TransferConfig+0x64>
 80044be:	f641 3148 	movw	r1, #6984	; 0x1b48
 80044c2:	4821      	ldr	r0, [pc, #132]	; (8004548 <I2C_TransferConfig+0xe4>)
 80044c4:	f7fd ffd7 	bl	8002476 <assert_failed>
  assert_param(IS_TRANSFER_REQUEST(Request));
 80044c8:	6a3b      	ldr	r3, [r7, #32]
 80044ca:	4a20      	ldr	r2, [pc, #128]	; (800454c <I2C_TransferConfig+0xe8>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d00f      	beq.n	80044f0 <I2C_TransferConfig+0x8c>
 80044d0:	6a3b      	ldr	r3, [r7, #32]
 80044d2:	4a1f      	ldr	r2, [pc, #124]	; (8004550 <I2C_TransferConfig+0xec>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d00b      	beq.n	80044f0 <I2C_TransferConfig+0x8c>
 80044d8:	6a3b      	ldr	r3, [r7, #32]
 80044da:	4a1e      	ldr	r2, [pc, #120]	; (8004554 <I2C_TransferConfig+0xf0>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d007      	beq.n	80044f0 <I2C_TransferConfig+0x8c>
 80044e0:	6a3b      	ldr	r3, [r7, #32]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d004      	beq.n	80044f0 <I2C_TransferConfig+0x8c>
 80044e6:	f641 3149 	movw	r1, #6985	; 0x1b49
 80044ea:	4817      	ldr	r0, [pc, #92]	; (8004548 <I2C_TransferConfig+0xe4>)
 80044ec:	f7fd ffc3 	bl	8002476 <assert_failed>

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80044f0:	897b      	ldrh	r3, [r7, #10]
 80044f2:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80044f6:	7a7b      	ldrb	r3, [r7, #9]
 80044f8:	041b      	lsls	r3, r3, #16
 80044fa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80044fe:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004504:	6a3b      	ldr	r3, [r7, #32]
 8004506:	4313      	orrs	r3, r2
 8004508:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800450c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	685a      	ldr	r2, [r3, #4]
 8004514:	6a3b      	ldr	r3, [r7, #32]
 8004516:	0d5b      	lsrs	r3, r3, #21
 8004518:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800451c:	4b0e      	ldr	r3, [pc, #56]	; (8004558 <I2C_TransferConfig+0xf4>)
 800451e:	430b      	orrs	r3, r1
 8004520:	43db      	mvns	r3, r3
 8004522:	ea02 0103 	and.w	r1, r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	697a      	ldr	r2, [r7, #20]
 800452c:	430a      	orrs	r2, r1
 800452e:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004530:	bf00      	nop
 8004532:	3718      	adds	r7, #24
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}
 8004538:	40005400 	.word	0x40005400
 800453c:	40005800 	.word	0x40005800
 8004540:	40005c00 	.word	0x40005c00
 8004544:	40006000 	.word	0x40006000
 8004548:	080144e8 	.word	0x080144e8
 800454c:	80004000 	.word	0x80004000
 8004550:	80002400 	.word	0x80002400
 8004554:	80002000 	.word	0x80002000
 8004558:	03ff63ff 	.word	0x03ff63ff

0800455c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a32      	ldr	r2, [pc, #200]	; (8004634 <HAL_I2CEx_ConfigAnalogFilter+0xd8>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d012      	beq.n	8004596 <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a30      	ldr	r2, [pc, #192]	; (8004638 <HAL_I2CEx_ConfigAnalogFilter+0xdc>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d00d      	beq.n	8004596 <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a2f      	ldr	r2, [pc, #188]	; (800463c <HAL_I2CEx_ConfigAnalogFilter+0xe0>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d008      	beq.n	8004596 <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a2d      	ldr	r2, [pc, #180]	; (8004640 <HAL_I2CEx_ConfigAnalogFilter+0xe4>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d003      	beq.n	8004596 <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 800458e:	215e      	movs	r1, #94	; 0x5e
 8004590:	482c      	ldr	r0, [pc, #176]	; (8004644 <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 8004592:	f7fd ff70 	bl	8002476 <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d007      	beq.n	80045ac <HAL_I2CEx_ConfigAnalogFilter+0x50>
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045a2:	d003      	beq.n	80045ac <HAL_I2CEx_ConfigAnalogFilter+0x50>
 80045a4:	215f      	movs	r1, #95	; 0x5f
 80045a6:	4827      	ldr	r0, [pc, #156]	; (8004644 <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 80045a8:	f7fd ff65 	bl	8002476 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	2b20      	cmp	r3, #32
 80045b6:	d138      	bne.n	800462a <HAL_I2CEx_ConfigAnalogFilter+0xce>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d101      	bne.n	80045c6 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
 80045c2:	2302      	movs	r3, #2
 80045c4:	e032      	b.n	800462c <HAL_I2CEx_ConfigAnalogFilter+0xd0>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2201      	movs	r2, #1
 80045ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2224      	movs	r2, #36	; 0x24
 80045d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f022 0201 	bic.w	r2, r2, #1
 80045e4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80045f4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	6819      	ldr	r1, [r3, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	683a      	ldr	r2, [r7, #0]
 8004602:	430a      	orrs	r2, r1
 8004604:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f042 0201 	orr.w	r2, r2, #1
 8004614:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2220      	movs	r2, #32
 800461a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004626:	2300      	movs	r3, #0
 8004628:	e000      	b.n	800462c <HAL_I2CEx_ConfigAnalogFilter+0xd0>
  }
  else
  {
    return HAL_BUSY;
 800462a:	2302      	movs	r3, #2
  }
}
 800462c:	4618      	mov	r0, r3
 800462e:	3708      	adds	r7, #8
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}
 8004634:	40005400 	.word	0x40005400
 8004638:	40005800 	.word	0x40005800
 800463c:	40005c00 	.word	0x40005c00
 8004640:	40006000 	.word	0x40006000
 8004644:	08014520 	.word	0x08014520

08004648 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a31      	ldr	r2, [pc, #196]	; (800471c <HAL_I2CEx_ConfigDigitalFilter+0xd4>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d012      	beq.n	8004682 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a2f      	ldr	r2, [pc, #188]	; (8004720 <HAL_I2CEx_ConfigDigitalFilter+0xd8>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d00d      	beq.n	8004682 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a2e      	ldr	r2, [pc, #184]	; (8004724 <HAL_I2CEx_ConfigDigitalFilter+0xdc>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d008      	beq.n	8004682 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a2c      	ldr	r2, [pc, #176]	; (8004728 <HAL_I2CEx_ConfigDigitalFilter+0xe0>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d003      	beq.n	8004682 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 800467a:	218c      	movs	r1, #140	; 0x8c
 800467c:	482b      	ldr	r0, [pc, #172]	; (800472c <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 800467e:	f7fd fefa 	bl	8002476 <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	2b0f      	cmp	r3, #15
 8004686:	d903      	bls.n	8004690 <HAL_I2CEx_ConfigDigitalFilter+0x48>
 8004688:	218d      	movs	r1, #141	; 0x8d
 800468a:	4828      	ldr	r0, [pc, #160]	; (800472c <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 800468c:	f7fd fef3 	bl	8002476 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004696:	b2db      	uxtb	r3, r3
 8004698:	2b20      	cmp	r3, #32
 800469a:	d139      	bne.n	8004710 <HAL_I2CEx_ConfigDigitalFilter+0xc8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d101      	bne.n	80046aa <HAL_I2CEx_ConfigDigitalFilter+0x62>
 80046a6:	2302      	movs	r3, #2
 80046a8:	e033      	b.n	8004712 <HAL_I2CEx_ConfigDigitalFilter+0xca>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2201      	movs	r2, #1
 80046ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2224      	movs	r2, #36	; 0x24
 80046b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f022 0201 	bic.w	r2, r2, #1
 80046c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80046d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	021b      	lsls	r3, r3, #8
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68fa      	ldr	r2, [r7, #12]
 80046ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f042 0201 	orr.w	r2, r2, #1
 80046fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2220      	movs	r2, #32
 8004700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800470c:	2300      	movs	r3, #0
 800470e:	e000      	b.n	8004712 <HAL_I2CEx_ConfigDigitalFilter+0xca>
  }
  else
  {
    return HAL_BUSY;
 8004710:	2302      	movs	r3, #2
  }
}
 8004712:	4618      	mov	r0, r3
 8004714:	3710      	adds	r7, #16
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	40005400 	.word	0x40005400
 8004720:	40005800 	.word	0x40005800
 8004724:	40005c00 	.word	0x40005c00
 8004728:	40006000 	.word	0x40006000
 800472c:	08014520 	.word	0x08014520

08004730 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004736:	2300      	movs	r3, #0
 8004738:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800473a:	4b23      	ldr	r3, [pc, #140]	; (80047c8 <HAL_PWREx_EnableOverDrive+0x98>)
 800473c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473e:	4a22      	ldr	r2, [pc, #136]	; (80047c8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004744:	6413      	str	r3, [r2, #64]	; 0x40
 8004746:	4b20      	ldr	r3, [pc, #128]	; (80047c8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800474e:	603b      	str	r3, [r7, #0]
 8004750:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004752:	4b1e      	ldr	r3, [pc, #120]	; (80047cc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a1d      	ldr	r2, [pc, #116]	; (80047cc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800475c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800475e:	f7fe fb65 	bl	8002e2c <HAL_GetTick>
 8004762:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004764:	e009      	b.n	800477a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004766:	f7fe fb61 	bl	8002e2c <HAL_GetTick>
 800476a:	4602      	mov	r2, r0
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004774:	d901      	bls.n	800477a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e022      	b.n	80047c0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800477a:	4b14      	ldr	r3, [pc, #80]	; (80047cc <HAL_PWREx_EnableOverDrive+0x9c>)
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004782:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004786:	d1ee      	bne.n	8004766 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004788:	4b10      	ldr	r3, [pc, #64]	; (80047cc <HAL_PWREx_EnableOverDrive+0x9c>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a0f      	ldr	r2, [pc, #60]	; (80047cc <HAL_PWREx_EnableOverDrive+0x9c>)
 800478e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004792:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004794:	f7fe fb4a 	bl	8002e2c <HAL_GetTick>
 8004798:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800479a:	e009      	b.n	80047b0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800479c:	f7fe fb46 	bl	8002e2c <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047aa:	d901      	bls.n	80047b0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e007      	b.n	80047c0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80047b0:	4b06      	ldr	r3, [pc, #24]	; (80047cc <HAL_PWREx_EnableOverDrive+0x9c>)
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047bc:	d1ee      	bne.n	800479c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3708      	adds	r7, #8
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	40023800 	.word	0x40023800
 80047cc:	40007000 	.word	0x40007000

080047d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b086      	sub	sp, #24
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80047d8:	2300      	movs	r3, #0
 80047da:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d101      	bne.n	80047e6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e345      	b.n	8004e72 <HAL_RCC_OscConfig+0x6a2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2b0f      	cmp	r3, #15
 80047ec:	d904      	bls.n	80047f8 <HAL_RCC_OscConfig+0x28>
 80047ee:	f240 1163 	movw	r1, #355	; 0x163
 80047f2:	4892      	ldr	r0, [pc, #584]	; (8004a3c <HAL_RCC_OscConfig+0x26c>)
 80047f4:	f7fd fe3f 	bl	8002476 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0301 	and.w	r3, r3, #1
 8004800:	2b00      	cmp	r3, #0
 8004802:	f000 809a 	beq.w	800493a <HAL_RCC_OscConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00e      	beq.n	800482c <HAL_RCC_OscConfig+0x5c>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004816:	d009      	beq.n	800482c <HAL_RCC_OscConfig+0x5c>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004820:	d004      	beq.n	800482c <HAL_RCC_OscConfig+0x5c>
 8004822:	f240 1169 	movw	r1, #361	; 0x169
 8004826:	4885      	ldr	r0, [pc, #532]	; (8004a3c <HAL_RCC_OscConfig+0x26c>)
 8004828:	f7fd fe25 	bl	8002476 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800482c:	4b84      	ldr	r3, [pc, #528]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	f003 030c 	and.w	r3, r3, #12
 8004834:	2b04      	cmp	r3, #4
 8004836:	d00c      	beq.n	8004852 <HAL_RCC_OscConfig+0x82>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004838:	4b81      	ldr	r3, [pc, #516]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	f003 030c 	and.w	r3, r3, #12
 8004840:	2b08      	cmp	r3, #8
 8004842:	d112      	bne.n	800486a <HAL_RCC_OscConfig+0x9a>
 8004844:	4b7e      	ldr	r3, [pc, #504]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800484c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004850:	d10b      	bne.n	800486a <HAL_RCC_OscConfig+0x9a>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004852:	4b7b      	ldr	r3, [pc, #492]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d06c      	beq.n	8004938 <HAL_RCC_OscConfig+0x168>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d168      	bne.n	8004938 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e303      	b.n	8004e72 <HAL_RCC_OscConfig+0x6a2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004872:	d106      	bne.n	8004882 <HAL_RCC_OscConfig+0xb2>
 8004874:	4b72      	ldr	r3, [pc, #456]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a71      	ldr	r2, [pc, #452]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 800487a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800487e:	6013      	str	r3, [r2, #0]
 8004880:	e02e      	b.n	80048e0 <HAL_RCC_OscConfig+0x110>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d10c      	bne.n	80048a4 <HAL_RCC_OscConfig+0xd4>
 800488a:	4b6d      	ldr	r3, [pc, #436]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a6c      	ldr	r2, [pc, #432]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 8004890:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004894:	6013      	str	r3, [r2, #0]
 8004896:	4b6a      	ldr	r3, [pc, #424]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a69      	ldr	r2, [pc, #420]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 800489c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048a0:	6013      	str	r3, [r2, #0]
 80048a2:	e01d      	b.n	80048e0 <HAL_RCC_OscConfig+0x110>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048ac:	d10c      	bne.n	80048c8 <HAL_RCC_OscConfig+0xf8>
 80048ae:	4b64      	ldr	r3, [pc, #400]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a63      	ldr	r2, [pc, #396]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 80048b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048b8:	6013      	str	r3, [r2, #0]
 80048ba:	4b61      	ldr	r3, [pc, #388]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a60      	ldr	r2, [pc, #384]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 80048c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048c4:	6013      	str	r3, [r2, #0]
 80048c6:	e00b      	b.n	80048e0 <HAL_RCC_OscConfig+0x110>
 80048c8:	4b5d      	ldr	r3, [pc, #372]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a5c      	ldr	r2, [pc, #368]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 80048ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048d2:	6013      	str	r3, [r2, #0]
 80048d4:	4b5a      	ldr	r3, [pc, #360]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a59      	ldr	r2, [pc, #356]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 80048da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d013      	beq.n	8004910 <HAL_RCC_OscConfig+0x140>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e8:	f7fe faa0 	bl	8002e2c <HAL_GetTick>
 80048ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ee:	e008      	b.n	8004902 <HAL_RCC_OscConfig+0x132>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048f0:	f7fe fa9c 	bl	8002e2c <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	2b64      	cmp	r3, #100	; 0x64
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_OscConfig+0x132>
          {
            return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e2b7      	b.n	8004e72 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004902:	4b4f      	ldr	r3, [pc, #316]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d0f0      	beq.n	80048f0 <HAL_RCC_OscConfig+0x120>
 800490e:	e014      	b.n	800493a <HAL_RCC_OscConfig+0x16a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004910:	f7fe fa8c 	bl	8002e2c <HAL_GetTick>
 8004914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004916:	e008      	b.n	800492a <HAL_RCC_OscConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004918:	f7fe fa88 	bl	8002e2c <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	2b64      	cmp	r3, #100	; 0x64
 8004924:	d901      	bls.n	800492a <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e2a3      	b.n	8004e72 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800492a:	4b45      	ldr	r3, [pc, #276]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1f0      	bne.n	8004918 <HAL_RCC_OscConfig+0x148>
 8004936:	e000      	b.n	800493a <HAL_RCC_OscConfig+0x16a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004938:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0302 	and.w	r3, r3, #2
 8004942:	2b00      	cmp	r3, #0
 8004944:	f000 8084 	beq.w	8004a50 <HAL_RCC_OscConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d008      	beq.n	8004962 <HAL_RCC_OscConfig+0x192>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	2b01      	cmp	r3, #1
 8004956:	d004      	beq.n	8004962 <HAL_RCC_OscConfig+0x192>
 8004958:	f240 119b 	movw	r1, #411	; 0x19b
 800495c:	4837      	ldr	r0, [pc, #220]	; (8004a3c <HAL_RCC_OscConfig+0x26c>)
 800495e:	f7fd fd8a 	bl	8002476 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	2b1f      	cmp	r3, #31
 8004968:	d904      	bls.n	8004974 <HAL_RCC_OscConfig+0x1a4>
 800496a:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 800496e:	4833      	ldr	r0, [pc, #204]	; (8004a3c <HAL_RCC_OscConfig+0x26c>)
 8004970:	f7fd fd81 	bl	8002476 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004974:	4b32      	ldr	r3, [pc, #200]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f003 030c 	and.w	r3, r3, #12
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00b      	beq.n	8004998 <HAL_RCC_OscConfig+0x1c8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004980:	4b2f      	ldr	r3, [pc, #188]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	f003 030c 	and.w	r3, r3, #12
 8004988:	2b08      	cmp	r3, #8
 800498a:	d11c      	bne.n	80049c6 <HAL_RCC_OscConfig+0x1f6>
 800498c:	4b2c      	ldr	r3, [pc, #176]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d116      	bne.n	80049c6 <HAL_RCC_OscConfig+0x1f6>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004998:	4b29      	ldr	r3, [pc, #164]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0302 	and.w	r3, r3, #2
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d005      	beq.n	80049b0 <HAL_RCC_OscConfig+0x1e0>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d001      	beq.n	80049b0 <HAL_RCC_OscConfig+0x1e0>
      {
        return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e260      	b.n	8004e72 <HAL_RCC_OscConfig+0x6a2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049b0:	4b23      	ldr	r3, [pc, #140]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	691b      	ldr	r3, [r3, #16]
 80049bc:	00db      	lsls	r3, r3, #3
 80049be:	4920      	ldr	r1, [pc, #128]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 80049c0:	4313      	orrs	r3, r2
 80049c2:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049c4:	e044      	b.n	8004a50 <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d023      	beq.n	8004a16 <HAL_RCC_OscConfig+0x246>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049ce:	4b1c      	ldr	r3, [pc, #112]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a1b      	ldr	r2, [pc, #108]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 80049d4:	f043 0301 	orr.w	r3, r3, #1
 80049d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049da:	f7fe fa27 	bl	8002e2c <HAL_GetTick>
 80049de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049e0:	e008      	b.n	80049f4 <HAL_RCC_OscConfig+0x224>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049e2:	f7fe fa23 	bl	8002e2c <HAL_GetTick>
 80049e6:	4602      	mov	r2, r0
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	2b02      	cmp	r3, #2
 80049ee:	d901      	bls.n	80049f4 <HAL_RCC_OscConfig+0x224>
          {
            return HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	e23e      	b.n	8004e72 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049f4:	4b12      	ldr	r3, [pc, #72]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0302 	and.w	r3, r3, #2
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d0f0      	beq.n	80049e2 <HAL_RCC_OscConfig+0x212>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a00:	4b0f      	ldr	r3, [pc, #60]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	00db      	lsls	r3, r3, #3
 8004a0e:	490c      	ldr	r1, [pc, #48]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 8004a10:	4313      	orrs	r3, r2
 8004a12:	600b      	str	r3, [r1, #0]
 8004a14:	e01c      	b.n	8004a50 <HAL_RCC_OscConfig+0x280>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a16:	4b0a      	ldr	r3, [pc, #40]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a09      	ldr	r2, [pc, #36]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 8004a1c:	f023 0301 	bic.w	r3, r3, #1
 8004a20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a22:	f7fe fa03 	bl	8002e2c <HAL_GetTick>
 8004a26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a28:	e00c      	b.n	8004a44 <HAL_RCC_OscConfig+0x274>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a2a:	f7fe f9ff 	bl	8002e2c <HAL_GetTick>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d905      	bls.n	8004a44 <HAL_RCC_OscConfig+0x274>
          {
            return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e21a      	b.n	8004e72 <HAL_RCC_OscConfig+0x6a2>
 8004a3c:	0801455c 	.word	0x0801455c
 8004a40:	40023800 	.word	0x40023800
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a44:	4b7e      	ldr	r3, [pc, #504]	; (8004c40 <HAL_RCC_OscConfig+0x470>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0302 	and.w	r3, r3, #2
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d1ec      	bne.n	8004a2a <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0308 	and.w	r3, r3, #8
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d043      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	695b      	ldr	r3, [r3, #20]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d008      	beq.n	8004a76 <HAL_RCC_OscConfig+0x2a6>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	695b      	ldr	r3, [r3, #20]
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d004      	beq.n	8004a76 <HAL_RCC_OscConfig+0x2a6>
 8004a6c:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8004a70:	4874      	ldr	r0, [pc, #464]	; (8004c44 <HAL_RCC_OscConfig+0x474>)
 8004a72:	f7fd fd00 	bl	8002476 <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d019      	beq.n	8004ab2 <HAL_RCC_OscConfig+0x2e2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a7e:	4b70      	ldr	r3, [pc, #448]	; (8004c40 <HAL_RCC_OscConfig+0x470>)
 8004a80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a82:	4a6f      	ldr	r2, [pc, #444]	; (8004c40 <HAL_RCC_OscConfig+0x470>)
 8004a84:	f043 0301 	orr.w	r3, r3, #1
 8004a88:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a8a:	f7fe f9cf 	bl	8002e2c <HAL_GetTick>
 8004a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a90:	e008      	b.n	8004aa4 <HAL_RCC_OscConfig+0x2d4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a92:	f7fe f9cb 	bl	8002e2c <HAL_GetTick>
 8004a96:	4602      	mov	r2, r0
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d901      	bls.n	8004aa4 <HAL_RCC_OscConfig+0x2d4>
        {
          return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e1e6      	b.n	8004e72 <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004aa4:	4b66      	ldr	r3, [pc, #408]	; (8004c40 <HAL_RCC_OscConfig+0x470>)
 8004aa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aa8:	f003 0302 	and.w	r3, r3, #2
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d0f0      	beq.n	8004a92 <HAL_RCC_OscConfig+0x2c2>
 8004ab0:	e018      	b.n	8004ae4 <HAL_RCC_OscConfig+0x314>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ab2:	4b63      	ldr	r3, [pc, #396]	; (8004c40 <HAL_RCC_OscConfig+0x470>)
 8004ab4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ab6:	4a62      	ldr	r2, [pc, #392]	; (8004c40 <HAL_RCC_OscConfig+0x470>)
 8004ab8:	f023 0301 	bic.w	r3, r3, #1
 8004abc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004abe:	f7fe f9b5 	bl	8002e2c <HAL_GetTick>
 8004ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ac4:	e008      	b.n	8004ad8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ac6:	f7fe f9b1 	bl	8002e2c <HAL_GetTick>
 8004aca:	4602      	mov	r2, r0
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d901      	bls.n	8004ad8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	e1cc      	b.n	8004e72 <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ad8:	4b59      	ldr	r3, [pc, #356]	; (8004c40 <HAL_RCC_OscConfig+0x470>)
 8004ada:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004adc:	f003 0302 	and.w	r3, r3, #2
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d1f0      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0304 	and.w	r3, r3, #4
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	f000 80bc 	beq.w	8004c6a <HAL_RCC_OscConfig+0x49a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d00c      	beq.n	8004b14 <HAL_RCC_OscConfig+0x344>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d008      	beq.n	8004b14 <HAL_RCC_OscConfig+0x344>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	2b05      	cmp	r3, #5
 8004b08:	d004      	beq.n	8004b14 <HAL_RCC_OscConfig+0x344>
 8004b0a:	f240 2106 	movw	r1, #518	; 0x206
 8004b0e:	484d      	ldr	r0, [pc, #308]	; (8004c44 <HAL_RCC_OscConfig+0x474>)
 8004b10:	f7fd fcb1 	bl	8002476 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b14:	4b4a      	ldr	r3, [pc, #296]	; (8004c40 <HAL_RCC_OscConfig+0x470>)
 8004b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d10d      	bne.n	8004b3c <HAL_RCC_OscConfig+0x36c>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b20:	4b47      	ldr	r3, [pc, #284]	; (8004c40 <HAL_RCC_OscConfig+0x470>)
 8004b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b24:	4a46      	ldr	r2, [pc, #280]	; (8004c40 <HAL_RCC_OscConfig+0x470>)
 8004b26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b2a:	6413      	str	r3, [r2, #64]	; 0x40
 8004b2c:	4b44      	ldr	r3, [pc, #272]	; (8004c40 <HAL_RCC_OscConfig+0x470>)
 8004b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b34:	60bb      	str	r3, [r7, #8]
 8004b36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b3c:	4b42      	ldr	r3, [pc, #264]	; (8004c48 <HAL_RCC_OscConfig+0x478>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d118      	bne.n	8004b7a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004b48:	4b3f      	ldr	r3, [pc, #252]	; (8004c48 <HAL_RCC_OscConfig+0x478>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a3e      	ldr	r2, [pc, #248]	; (8004c48 <HAL_RCC_OscConfig+0x478>)
 8004b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b52:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b54:	f7fe f96a 	bl	8002e2c <HAL_GetTick>
 8004b58:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b5a:	e008      	b.n	8004b6e <HAL_RCC_OscConfig+0x39e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b5c:	f7fe f966 	bl	8002e2c <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	2b64      	cmp	r3, #100	; 0x64
 8004b68:	d901      	bls.n	8004b6e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e181      	b.n	8004e72 <HAL_RCC_OscConfig+0x6a2>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b6e:	4b36      	ldr	r3, [pc, #216]	; (8004c48 <HAL_RCC_OscConfig+0x478>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d0f0      	beq.n	8004b5c <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d106      	bne.n	8004b90 <HAL_RCC_OscConfig+0x3c0>
 8004b82:	4b2f      	ldr	r3, [pc, #188]	; (8004c40 <HAL_RCC_OscConfig+0x470>)
 8004b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b86:	4a2e      	ldr	r2, [pc, #184]	; (8004c40 <HAL_RCC_OscConfig+0x470>)
 8004b88:	f043 0301 	orr.w	r3, r3, #1
 8004b8c:	6713      	str	r3, [r2, #112]	; 0x70
 8004b8e:	e02d      	b.n	8004bec <HAL_RCC_OscConfig+0x41c>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d10c      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x3e2>
 8004b98:	4b29      	ldr	r3, [pc, #164]	; (8004c40 <HAL_RCC_OscConfig+0x470>)
 8004b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b9c:	4a28      	ldr	r2, [pc, #160]	; (8004c40 <HAL_RCC_OscConfig+0x470>)
 8004b9e:	f023 0301 	bic.w	r3, r3, #1
 8004ba2:	6713      	str	r3, [r2, #112]	; 0x70
 8004ba4:	4b26      	ldr	r3, [pc, #152]	; (8004c40 <HAL_RCC_OscConfig+0x470>)
 8004ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba8:	4a25      	ldr	r2, [pc, #148]	; (8004c40 <HAL_RCC_OscConfig+0x470>)
 8004baa:	f023 0304 	bic.w	r3, r3, #4
 8004bae:	6713      	str	r3, [r2, #112]	; 0x70
 8004bb0:	e01c      	b.n	8004bec <HAL_RCC_OscConfig+0x41c>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	2b05      	cmp	r3, #5
 8004bb8:	d10c      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x404>
 8004bba:	4b21      	ldr	r3, [pc, #132]	; (8004c40 <HAL_RCC_OscConfig+0x470>)
 8004bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bbe:	4a20      	ldr	r2, [pc, #128]	; (8004c40 <HAL_RCC_OscConfig+0x470>)
 8004bc0:	f043 0304 	orr.w	r3, r3, #4
 8004bc4:	6713      	str	r3, [r2, #112]	; 0x70
 8004bc6:	4b1e      	ldr	r3, [pc, #120]	; (8004c40 <HAL_RCC_OscConfig+0x470>)
 8004bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bca:	4a1d      	ldr	r2, [pc, #116]	; (8004c40 <HAL_RCC_OscConfig+0x470>)
 8004bcc:	f043 0301 	orr.w	r3, r3, #1
 8004bd0:	6713      	str	r3, [r2, #112]	; 0x70
 8004bd2:	e00b      	b.n	8004bec <HAL_RCC_OscConfig+0x41c>
 8004bd4:	4b1a      	ldr	r3, [pc, #104]	; (8004c40 <HAL_RCC_OscConfig+0x470>)
 8004bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bd8:	4a19      	ldr	r2, [pc, #100]	; (8004c40 <HAL_RCC_OscConfig+0x470>)
 8004bda:	f023 0301 	bic.w	r3, r3, #1
 8004bde:	6713      	str	r3, [r2, #112]	; 0x70
 8004be0:	4b17      	ldr	r3, [pc, #92]	; (8004c40 <HAL_RCC_OscConfig+0x470>)
 8004be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be4:	4a16      	ldr	r2, [pc, #88]	; (8004c40 <HAL_RCC_OscConfig+0x470>)
 8004be6:	f023 0304 	bic.w	r3, r3, #4
 8004bea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d015      	beq.n	8004c20 <HAL_RCC_OscConfig+0x450>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bf4:	f7fe f91a 	bl	8002e2c <HAL_GetTick>
 8004bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bfa:	e00a      	b.n	8004c12 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bfc:	f7fe f916 	bl	8002e2c <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d901      	bls.n	8004c12 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e12f      	b.n	8004e72 <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c12:	4b0b      	ldr	r3, [pc, #44]	; (8004c40 <HAL_RCC_OscConfig+0x470>)
 8004c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c16:	f003 0302 	and.w	r3, r3, #2
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d0ee      	beq.n	8004bfc <HAL_RCC_OscConfig+0x42c>
 8004c1e:	e01b      	b.n	8004c58 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c20:	f7fe f904 	bl	8002e2c <HAL_GetTick>
 8004c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c26:	e011      	b.n	8004c4c <HAL_RCC_OscConfig+0x47c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c28:	f7fe f900 	bl	8002e2c <HAL_GetTick>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d908      	bls.n	8004c4c <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e119      	b.n	8004e72 <HAL_RCC_OscConfig+0x6a2>
 8004c3e:	bf00      	nop
 8004c40:	40023800 	.word	0x40023800
 8004c44:	0801455c 	.word	0x0801455c
 8004c48:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c4c:	4b8b      	ldr	r3, [pc, #556]	; (8004e7c <HAL_RCC_OscConfig+0x6ac>)
 8004c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c50:	f003 0302 	and.w	r3, r3, #2
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d1e7      	bne.n	8004c28 <HAL_RCC_OscConfig+0x458>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c58:	7dfb      	ldrb	r3, [r7, #23]
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d105      	bne.n	8004c6a <HAL_RCC_OscConfig+0x49a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c5e:	4b87      	ldr	r3, [pc, #540]	; (8004e7c <HAL_RCC_OscConfig+0x6ac>)
 8004c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c62:	4a86      	ldr	r2, [pc, #536]	; (8004e7c <HAL_RCC_OscConfig+0x6ac>)
 8004c64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c68:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	699b      	ldr	r3, [r3, #24]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00c      	beq.n	8004c8c <HAL_RCC_OscConfig+0x4bc>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d008      	beq.n	8004c8c <HAL_RCC_OscConfig+0x4bc>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d004      	beq.n	8004c8c <HAL_RCC_OscConfig+0x4bc>
 8004c82:	f240 214a 	movw	r1, #586	; 0x24a
 8004c86:	487e      	ldr	r0, [pc, #504]	; (8004e80 <HAL_RCC_OscConfig+0x6b0>)
 8004c88:	f7fd fbf5 	bl	8002476 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	699b      	ldr	r3, [r3, #24]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	f000 80ed 	beq.w	8004e70 <HAL_RCC_OscConfig+0x6a0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c96:	4b79      	ldr	r3, [pc, #484]	; (8004e7c <HAL_RCC_OscConfig+0x6ac>)
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	f003 030c 	and.w	r3, r3, #12
 8004c9e:	2b08      	cmp	r3, #8
 8004ca0:	f000 80b4 	beq.w	8004e0c <HAL_RCC_OscConfig+0x63c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	699b      	ldr	r3, [r3, #24]
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	f040 8095 	bne.w	8004dd8 <HAL_RCC_OscConfig+0x608>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	69db      	ldr	r3, [r3, #28]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d009      	beq.n	8004cca <HAL_RCC_OscConfig+0x4fa>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	69db      	ldr	r3, [r3, #28]
 8004cba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cbe:	d004      	beq.n	8004cca <HAL_RCC_OscConfig+0x4fa>
 8004cc0:	f240 2153 	movw	r1, #595	; 0x253
 8004cc4:	486e      	ldr	r0, [pc, #440]	; (8004e80 <HAL_RCC_OscConfig+0x6b0>)
 8004cc6:	f7fd fbd6 	bl	8002476 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a1b      	ldr	r3, [r3, #32]
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d903      	bls.n	8004cda <HAL_RCC_OscConfig+0x50a>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a1b      	ldr	r3, [r3, #32]
 8004cd6:	2b3f      	cmp	r3, #63	; 0x3f
 8004cd8:	d904      	bls.n	8004ce4 <HAL_RCC_OscConfig+0x514>
 8004cda:	f44f 7115 	mov.w	r1, #596	; 0x254
 8004cde:	4868      	ldr	r0, [pc, #416]	; (8004e80 <HAL_RCC_OscConfig+0x6b0>)
 8004ce0:	f7fd fbc9 	bl	8002476 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce8:	2b31      	cmp	r3, #49	; 0x31
 8004cea:	d904      	bls.n	8004cf6 <HAL_RCC_OscConfig+0x526>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf0:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8004cf4:	d904      	bls.n	8004d00 <HAL_RCC_OscConfig+0x530>
 8004cf6:	f240 2155 	movw	r1, #597	; 0x255
 8004cfa:	4861      	ldr	r0, [pc, #388]	; (8004e80 <HAL_RCC_OscConfig+0x6b0>)
 8004cfc:	f7fd fbbb 	bl	8002476 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d010      	beq.n	8004d2a <HAL_RCC_OscConfig+0x55a>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d0c:	2b04      	cmp	r3, #4
 8004d0e:	d00c      	beq.n	8004d2a <HAL_RCC_OscConfig+0x55a>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d14:	2b06      	cmp	r3, #6
 8004d16:	d008      	beq.n	8004d2a <HAL_RCC_OscConfig+0x55a>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d1c:	2b08      	cmp	r3, #8
 8004d1e:	d004      	beq.n	8004d2a <HAL_RCC_OscConfig+0x55a>
 8004d20:	f240 2156 	movw	r1, #598	; 0x256
 8004d24:	4856      	ldr	r0, [pc, #344]	; (8004e80 <HAL_RCC_OscConfig+0x6b0>)
 8004d26:	f7fd fba6 	bl	8002476 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d903      	bls.n	8004d3a <HAL_RCC_OscConfig+0x56a>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d36:	2b0f      	cmp	r3, #15
 8004d38:	d904      	bls.n	8004d44 <HAL_RCC_OscConfig+0x574>
 8004d3a:	f240 2157 	movw	r1, #599	; 0x257
 8004d3e:	4850      	ldr	r0, [pc, #320]	; (8004e80 <HAL_RCC_OscConfig+0x6b0>)
 8004d40:	f7fd fb99 	bl	8002476 <assert_failed>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d44:	4b4d      	ldr	r3, [pc, #308]	; (8004e7c <HAL_RCC_OscConfig+0x6ac>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a4c      	ldr	r2, [pc, #304]	; (8004e7c <HAL_RCC_OscConfig+0x6ac>)
 8004d4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d50:	f7fe f86c 	bl	8002e2c <HAL_GetTick>
 8004d54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d56:	e008      	b.n	8004d6a <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d58:	f7fe f868 	bl	8002e2c <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d901      	bls.n	8004d6a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e083      	b.n	8004e72 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d6a:	4b44      	ldr	r3, [pc, #272]	; (8004e7c <HAL_RCC_OscConfig+0x6ac>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d1f0      	bne.n	8004d58 <HAL_RCC_OscConfig+0x588>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	69da      	ldr	r2, [r3, #28]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
 8004d7e:	431a      	orrs	r2, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d84:	019b      	lsls	r3, r3, #6
 8004d86:	431a      	orrs	r2, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d8c:	085b      	lsrs	r3, r3, #1
 8004d8e:	3b01      	subs	r3, #1
 8004d90:	041b      	lsls	r3, r3, #16
 8004d92:	431a      	orrs	r2, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d98:	061b      	lsls	r3, r3, #24
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	4a37      	ldr	r2, [pc, #220]	; (8004e7c <HAL_RCC_OscConfig+0x6ac>)
 8004d9e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004da2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004da4:	4b35      	ldr	r3, [pc, #212]	; (8004e7c <HAL_RCC_OscConfig+0x6ac>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a34      	ldr	r2, [pc, #208]	; (8004e7c <HAL_RCC_OscConfig+0x6ac>)
 8004daa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004dae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db0:	f7fe f83c 	bl	8002e2c <HAL_GetTick>
 8004db4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004db6:	e008      	b.n	8004dca <HAL_RCC_OscConfig+0x5fa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004db8:	f7fe f838 	bl	8002e2c <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d901      	bls.n	8004dca <HAL_RCC_OscConfig+0x5fa>
          {
            return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e053      	b.n	8004e72 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dca:	4b2c      	ldr	r3, [pc, #176]	; (8004e7c <HAL_RCC_OscConfig+0x6ac>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d0f0      	beq.n	8004db8 <HAL_RCC_OscConfig+0x5e8>
 8004dd6:	e04b      	b.n	8004e70 <HAL_RCC_OscConfig+0x6a0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dd8:	4b28      	ldr	r3, [pc, #160]	; (8004e7c <HAL_RCC_OscConfig+0x6ac>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a27      	ldr	r2, [pc, #156]	; (8004e7c <HAL_RCC_OscConfig+0x6ac>)
 8004dde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004de2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de4:	f7fe f822 	bl	8002e2c <HAL_GetTick>
 8004de8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dea:	e008      	b.n	8004dfe <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dec:	f7fe f81e 	bl	8002e2c <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d901      	bls.n	8004dfe <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e039      	b.n	8004e72 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dfe:	4b1f      	ldr	r3, [pc, #124]	; (8004e7c <HAL_RCC_OscConfig+0x6ac>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d1f0      	bne.n	8004dec <HAL_RCC_OscConfig+0x61c>
 8004e0a:	e031      	b.n	8004e70 <HAL_RCC_OscConfig+0x6a0>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004e0c:	4b1b      	ldr	r3, [pc, #108]	; (8004e7c <HAL_RCC_OscConfig+0x6ac>)
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	699b      	ldr	r3, [r3, #24]
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d028      	beq.n	8004e6c <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d121      	bne.n	8004e6c <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d11a      	bne.n	8004e6c <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e36:	68fa      	ldr	r2, [r7, #12]
 8004e38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e42:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d111      	bne.n	8004e6c <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e52:	085b      	lsrs	r3, r3, #1
 8004e54:	3b01      	subs	r3, #1
 8004e56:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d107      	bne.n	8004e6c <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e66:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d001      	beq.n	8004e70 <HAL_RCC_OscConfig+0x6a0>
#endif
      {
        return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e000      	b.n	8004e72 <HAL_RCC_OscConfig+0x6a2>
      }
    }
  }
  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3718      	adds	r7, #24
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	40023800 	.word	0x40023800
 8004e80:	0801455c 	.word	0x0801455c

08004e84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d101      	bne.n	8004e9c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e18c      	b.n	80051b6 <HAL_RCC_ClockConfig+0x332>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d003      	beq.n	8004eac <HAL_RCC_ClockConfig+0x28>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2b0f      	cmp	r3, #15
 8004eaa:	d904      	bls.n	8004eb6 <HAL_RCC_ClockConfig+0x32>
 8004eac:	f240 21dd 	movw	r1, #733	; 0x2dd
 8004eb0:	4887      	ldr	r0, [pc, #540]	; (80050d0 <HAL_RCC_ClockConfig+0x24c>)
 8004eb2:	f7fd fae0 	bl	8002476 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d031      	beq.n	8004f20 <HAL_RCC_ClockConfig+0x9c>
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d02e      	beq.n	8004f20 <HAL_RCC_ClockConfig+0x9c>
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d02b      	beq.n	8004f20 <HAL_RCC_ClockConfig+0x9c>
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	2b03      	cmp	r3, #3
 8004ecc:	d028      	beq.n	8004f20 <HAL_RCC_ClockConfig+0x9c>
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	2b04      	cmp	r3, #4
 8004ed2:	d025      	beq.n	8004f20 <HAL_RCC_ClockConfig+0x9c>
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	2b05      	cmp	r3, #5
 8004ed8:	d022      	beq.n	8004f20 <HAL_RCC_ClockConfig+0x9c>
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	2b06      	cmp	r3, #6
 8004ede:	d01f      	beq.n	8004f20 <HAL_RCC_ClockConfig+0x9c>
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	2b07      	cmp	r3, #7
 8004ee4:	d01c      	beq.n	8004f20 <HAL_RCC_ClockConfig+0x9c>
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	2b08      	cmp	r3, #8
 8004eea:	d019      	beq.n	8004f20 <HAL_RCC_ClockConfig+0x9c>
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	2b09      	cmp	r3, #9
 8004ef0:	d016      	beq.n	8004f20 <HAL_RCC_ClockConfig+0x9c>
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	2b0a      	cmp	r3, #10
 8004ef6:	d013      	beq.n	8004f20 <HAL_RCC_ClockConfig+0x9c>
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	2b0b      	cmp	r3, #11
 8004efc:	d010      	beq.n	8004f20 <HAL_RCC_ClockConfig+0x9c>
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	2b0c      	cmp	r3, #12
 8004f02:	d00d      	beq.n	8004f20 <HAL_RCC_ClockConfig+0x9c>
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	2b0d      	cmp	r3, #13
 8004f08:	d00a      	beq.n	8004f20 <HAL_RCC_ClockConfig+0x9c>
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	2b0e      	cmp	r3, #14
 8004f0e:	d007      	beq.n	8004f20 <HAL_RCC_ClockConfig+0x9c>
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	2b0f      	cmp	r3, #15
 8004f14:	d004      	beq.n	8004f20 <HAL_RCC_ClockConfig+0x9c>
 8004f16:	f240 21de 	movw	r1, #734	; 0x2de
 8004f1a:	486d      	ldr	r0, [pc, #436]	; (80050d0 <HAL_RCC_ClockConfig+0x24c>)
 8004f1c:	f7fd faab 	bl	8002476 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f20:	4b6c      	ldr	r3, [pc, #432]	; (80050d4 <HAL_RCC_ClockConfig+0x250>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 030f 	and.w	r3, r3, #15
 8004f28:	683a      	ldr	r2, [r7, #0]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d910      	bls.n	8004f50 <HAL_RCC_ClockConfig+0xcc>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f2e:	4b69      	ldr	r3, [pc, #420]	; (80050d4 <HAL_RCC_ClockConfig+0x250>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f023 020f 	bic.w	r2, r3, #15
 8004f36:	4967      	ldr	r1, [pc, #412]	; (80050d4 <HAL_RCC_ClockConfig+0x250>)
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f3e:	4b65      	ldr	r3, [pc, #404]	; (80050d4 <HAL_RCC_ClockConfig+0x250>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 030f 	and.w	r3, r3, #15
 8004f46:	683a      	ldr	r2, [r7, #0]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d001      	beq.n	8004f50 <HAL_RCC_ClockConfig+0xcc>
    {
      return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e132      	b.n	80051b6 <HAL_RCC_ClockConfig+0x332>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0302 	and.w	r3, r3, #2
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d049      	beq.n	8004ff0 <HAL_RCC_ClockConfig+0x16c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0304 	and.w	r3, r3, #4
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d005      	beq.n	8004f74 <HAL_RCC_ClockConfig+0xf0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f68:	4b5b      	ldr	r3, [pc, #364]	; (80050d8 <HAL_RCC_ClockConfig+0x254>)
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	4a5a      	ldr	r2, [pc, #360]	; (80050d8 <HAL_RCC_ClockConfig+0x254>)
 8004f6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f72:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0308 	and.w	r3, r3, #8
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d005      	beq.n	8004f8c <HAL_RCC_ClockConfig+0x108>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f80:	4b55      	ldr	r3, [pc, #340]	; (80050d8 <HAL_RCC_ClockConfig+0x254>)
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	4a54      	ldr	r2, [pc, #336]	; (80050d8 <HAL_RCC_ClockConfig+0x254>)
 8004f86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f8a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d024      	beq.n	8004fde <HAL_RCC_ClockConfig+0x15a>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	2b80      	cmp	r3, #128	; 0x80
 8004f9a:	d020      	beq.n	8004fde <HAL_RCC_ClockConfig+0x15a>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	2b90      	cmp	r3, #144	; 0x90
 8004fa2:	d01c      	beq.n	8004fde <HAL_RCC_ClockConfig+0x15a>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	2ba0      	cmp	r3, #160	; 0xa0
 8004faa:	d018      	beq.n	8004fde <HAL_RCC_ClockConfig+0x15a>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	2bb0      	cmp	r3, #176	; 0xb0
 8004fb2:	d014      	beq.n	8004fde <HAL_RCC_ClockConfig+0x15a>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	2bc0      	cmp	r3, #192	; 0xc0
 8004fba:	d010      	beq.n	8004fde <HAL_RCC_ClockConfig+0x15a>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	2bd0      	cmp	r3, #208	; 0xd0
 8004fc2:	d00c      	beq.n	8004fde <HAL_RCC_ClockConfig+0x15a>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	2be0      	cmp	r3, #224	; 0xe0
 8004fca:	d008      	beq.n	8004fde <HAL_RCC_ClockConfig+0x15a>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	2bf0      	cmp	r3, #240	; 0xf0
 8004fd2:	d004      	beq.n	8004fde <HAL_RCC_ClockConfig+0x15a>
 8004fd4:	f240 3102 	movw	r1, #770	; 0x302
 8004fd8:	483d      	ldr	r0, [pc, #244]	; (80050d0 <HAL_RCC_ClockConfig+0x24c>)
 8004fda:	f7fd fa4c 	bl	8002476 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fde:	4b3e      	ldr	r3, [pc, #248]	; (80050d8 <HAL_RCC_ClockConfig+0x254>)
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	493b      	ldr	r1, [pc, #236]	; (80050d8 <HAL_RCC_ClockConfig+0x254>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0301 	and.w	r3, r3, #1
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d051      	beq.n	80050a0 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d00c      	beq.n	800501e <HAL_RCC_ClockConfig+0x19a>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	2b01      	cmp	r3, #1
 800500a:	d008      	beq.n	800501e <HAL_RCC_ClockConfig+0x19a>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	2b02      	cmp	r3, #2
 8005012:	d004      	beq.n	800501e <HAL_RCC_ClockConfig+0x19a>
 8005014:	f240 3109 	movw	r1, #777	; 0x309
 8005018:	482d      	ldr	r0, [pc, #180]	; (80050d0 <HAL_RCC_ClockConfig+0x24c>)
 800501a:	f7fd fa2c 	bl	8002476 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	2b01      	cmp	r3, #1
 8005024:	d107      	bne.n	8005036 <HAL_RCC_ClockConfig+0x1b2>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005026:	4b2c      	ldr	r3, [pc, #176]	; (80050d8 <HAL_RCC_ClockConfig+0x254>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d115      	bne.n	800505e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e0bf      	b.n	80051b6 <HAL_RCC_ClockConfig+0x332>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	2b02      	cmp	r3, #2
 800503c:	d107      	bne.n	800504e <HAL_RCC_ClockConfig+0x1ca>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800503e:	4b26      	ldr	r3, [pc, #152]	; (80050d8 <HAL_RCC_ClockConfig+0x254>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d109      	bne.n	800505e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e0b3      	b.n	80051b6 <HAL_RCC_ClockConfig+0x332>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800504e:	4b22      	ldr	r3, [pc, #136]	; (80050d8 <HAL_RCC_ClockConfig+0x254>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0302 	and.w	r3, r3, #2
 8005056:	2b00      	cmp	r3, #0
 8005058:	d101      	bne.n	800505e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e0ab      	b.n	80051b6 <HAL_RCC_ClockConfig+0x332>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800505e:	4b1e      	ldr	r3, [pc, #120]	; (80050d8 <HAL_RCC_ClockConfig+0x254>)
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	f023 0203 	bic.w	r2, r3, #3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	491b      	ldr	r1, [pc, #108]	; (80050d8 <HAL_RCC_ClockConfig+0x254>)
 800506c:	4313      	orrs	r3, r2
 800506e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005070:	f7fd fedc 	bl	8002e2c <HAL_GetTick>
 8005074:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005076:	e00a      	b.n	800508e <HAL_RCC_ClockConfig+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005078:	f7fd fed8 	bl	8002e2c <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	f241 3288 	movw	r2, #5000	; 0x1388
 8005086:	4293      	cmp	r3, r2
 8005088:	d901      	bls.n	800508e <HAL_RCC_ClockConfig+0x20a>
      {
        return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e093      	b.n	80051b6 <HAL_RCC_ClockConfig+0x332>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800508e:	4b12      	ldr	r3, [pc, #72]	; (80050d8 <HAL_RCC_ClockConfig+0x254>)
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	f003 020c 	and.w	r2, r3, #12
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	429a      	cmp	r2, r3
 800509e:	d1eb      	bne.n	8005078 <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050a0:	4b0c      	ldr	r3, [pc, #48]	; (80050d4 <HAL_RCC_ClockConfig+0x250>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 030f 	and.w	r3, r3, #15
 80050a8:	683a      	ldr	r2, [r7, #0]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d216      	bcs.n	80050dc <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ae:	4b09      	ldr	r3, [pc, #36]	; (80050d4 <HAL_RCC_ClockConfig+0x250>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f023 020f 	bic.w	r2, r3, #15
 80050b6:	4907      	ldr	r1, [pc, #28]	; (80050d4 <HAL_RCC_ClockConfig+0x250>)
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050be:	4b05      	ldr	r3, [pc, #20]	; (80050d4 <HAL_RCC_ClockConfig+0x250>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 030f 	and.w	r3, r3, #15
 80050c6:	683a      	ldr	r2, [r7, #0]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d007      	beq.n	80050dc <HAL_RCC_ClockConfig+0x258>
    {
      return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e072      	b.n	80051b6 <HAL_RCC_ClockConfig+0x332>
 80050d0:	0801455c 	.word	0x0801455c
 80050d4:	40023c00 	.word	0x40023c00
 80050d8:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 0304 	and.w	r3, r3, #4
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d025      	beq.n	8005134 <HAL_RCC_ClockConfig+0x2b0>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d018      	beq.n	8005122 <HAL_RCC_ClockConfig+0x29e>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050f8:	d013      	beq.n	8005122 <HAL_RCC_ClockConfig+0x29e>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005102:	d00e      	beq.n	8005122 <HAL_RCC_ClockConfig+0x29e>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800510c:	d009      	beq.n	8005122 <HAL_RCC_ClockConfig+0x29e>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8005116:	d004      	beq.n	8005122 <HAL_RCC_ClockConfig+0x29e>
 8005118:	f240 3146 	movw	r1, #838	; 0x346
 800511c:	4828      	ldr	r0, [pc, #160]	; (80051c0 <HAL_RCC_ClockConfig+0x33c>)
 800511e:	f7fd f9aa 	bl	8002476 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005122:	4b28      	ldr	r3, [pc, #160]	; (80051c4 <HAL_RCC_ClockConfig+0x340>)
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	4925      	ldr	r1, [pc, #148]	; (80051c4 <HAL_RCC_ClockConfig+0x340>)
 8005130:	4313      	orrs	r3, r2
 8005132:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0308 	and.w	r3, r3, #8
 800513c:	2b00      	cmp	r3, #0
 800513e:	d026      	beq.n	800518e <HAL_RCC_ClockConfig+0x30a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	691b      	ldr	r3, [r3, #16]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d018      	beq.n	800517a <HAL_RCC_ClockConfig+0x2f6>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	691b      	ldr	r3, [r3, #16]
 800514c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005150:	d013      	beq.n	800517a <HAL_RCC_ClockConfig+0x2f6>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800515a:	d00e      	beq.n	800517a <HAL_RCC_ClockConfig+0x2f6>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	691b      	ldr	r3, [r3, #16]
 8005160:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8005164:	d009      	beq.n	800517a <HAL_RCC_ClockConfig+0x2f6>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800516e:	d004      	beq.n	800517a <HAL_RCC_ClockConfig+0x2f6>
 8005170:	f240 314d 	movw	r1, #845	; 0x34d
 8005174:	4812      	ldr	r0, [pc, #72]	; (80051c0 <HAL_RCC_ClockConfig+0x33c>)
 8005176:	f7fd f97e 	bl	8002476 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800517a:	4b12      	ldr	r3, [pc, #72]	; (80051c4 <HAL_RCC_ClockConfig+0x340>)
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	00db      	lsls	r3, r3, #3
 8005188:	490e      	ldr	r1, [pc, #56]	; (80051c4 <HAL_RCC_ClockConfig+0x340>)
 800518a:	4313      	orrs	r3, r2
 800518c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800518e:	f000 f821 	bl	80051d4 <HAL_RCC_GetSysClockFreq>
 8005192:	4602      	mov	r2, r0
 8005194:	4b0b      	ldr	r3, [pc, #44]	; (80051c4 <HAL_RCC_ClockConfig+0x340>)
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	091b      	lsrs	r3, r3, #4
 800519a:	f003 030f 	and.w	r3, r3, #15
 800519e:	490a      	ldr	r1, [pc, #40]	; (80051c8 <HAL_RCC_ClockConfig+0x344>)
 80051a0:	5ccb      	ldrb	r3, [r1, r3]
 80051a2:	fa22 f303 	lsr.w	r3, r2, r3
 80051a6:	4a09      	ldr	r2, [pc, #36]	; (80051cc <HAL_RCC_ClockConfig+0x348>)
 80051a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80051aa:	4b09      	ldr	r3, [pc, #36]	; (80051d0 <HAL_RCC_ClockConfig+0x34c>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4618      	mov	r0, r3
 80051b0:	f7fd fdf8 	bl	8002da4 <HAL_InitTick>

  return HAL_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3710      	adds	r7, #16
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	0801455c 	.word	0x0801455c
 80051c4:	40023800 	.word	0x40023800
 80051c8:	0801468c 	.word	0x0801468c
 80051cc:	20000000 	.word	0x20000000
 80051d0:	20000004 	.word	0x20000004

080051d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051d8:	b090      	sub	sp, #64	; 0x40
 80051da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80051dc:	2300      	movs	r3, #0
 80051de:	637b      	str	r3, [r7, #52]	; 0x34
 80051e0:	2300      	movs	r3, #0
 80051e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051e4:	2300      	movs	r3, #0
 80051e6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80051e8:	2300      	movs	r3, #0
 80051ea:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051ec:	4b59      	ldr	r3, [pc, #356]	; (8005354 <HAL_RCC_GetSysClockFreq+0x180>)
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	f003 030c 	and.w	r3, r3, #12
 80051f4:	2b08      	cmp	r3, #8
 80051f6:	d00d      	beq.n	8005214 <HAL_RCC_GetSysClockFreq+0x40>
 80051f8:	2b08      	cmp	r3, #8
 80051fa:	f200 80a1 	bhi.w	8005340 <HAL_RCC_GetSysClockFreq+0x16c>
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d002      	beq.n	8005208 <HAL_RCC_GetSysClockFreq+0x34>
 8005202:	2b04      	cmp	r3, #4
 8005204:	d003      	beq.n	800520e <HAL_RCC_GetSysClockFreq+0x3a>
 8005206:	e09b      	b.n	8005340 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005208:	4b53      	ldr	r3, [pc, #332]	; (8005358 <HAL_RCC_GetSysClockFreq+0x184>)
 800520a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800520c:	e09b      	b.n	8005346 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800520e:	4b53      	ldr	r3, [pc, #332]	; (800535c <HAL_RCC_GetSysClockFreq+0x188>)
 8005210:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005212:	e098      	b.n	8005346 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005214:	4b4f      	ldr	r3, [pc, #316]	; (8005354 <HAL_RCC_GetSysClockFreq+0x180>)
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800521c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800521e:	4b4d      	ldr	r3, [pc, #308]	; (8005354 <HAL_RCC_GetSysClockFreq+0x180>)
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005226:	2b00      	cmp	r3, #0
 8005228:	d028      	beq.n	800527c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800522a:	4b4a      	ldr	r3, [pc, #296]	; (8005354 <HAL_RCC_GetSysClockFreq+0x180>)
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	099b      	lsrs	r3, r3, #6
 8005230:	2200      	movs	r2, #0
 8005232:	623b      	str	r3, [r7, #32]
 8005234:	627a      	str	r2, [r7, #36]	; 0x24
 8005236:	6a3b      	ldr	r3, [r7, #32]
 8005238:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800523c:	2100      	movs	r1, #0
 800523e:	4b47      	ldr	r3, [pc, #284]	; (800535c <HAL_RCC_GetSysClockFreq+0x188>)
 8005240:	fb03 f201 	mul.w	r2, r3, r1
 8005244:	2300      	movs	r3, #0
 8005246:	fb00 f303 	mul.w	r3, r0, r3
 800524a:	4413      	add	r3, r2
 800524c:	4a43      	ldr	r2, [pc, #268]	; (800535c <HAL_RCC_GetSysClockFreq+0x188>)
 800524e:	fba0 1202 	umull	r1, r2, r0, r2
 8005252:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005254:	460a      	mov	r2, r1
 8005256:	62ba      	str	r2, [r7, #40]	; 0x28
 8005258:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800525a:	4413      	add	r3, r2
 800525c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800525e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005260:	2200      	movs	r2, #0
 8005262:	61bb      	str	r3, [r7, #24]
 8005264:	61fa      	str	r2, [r7, #28]
 8005266:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800526a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800526e:	f7fb fd2b 	bl	8000cc8 <__aeabi_uldivmod>
 8005272:	4602      	mov	r2, r0
 8005274:	460b      	mov	r3, r1
 8005276:	4613      	mov	r3, r2
 8005278:	63fb      	str	r3, [r7, #60]	; 0x3c
 800527a:	e053      	b.n	8005324 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800527c:	4b35      	ldr	r3, [pc, #212]	; (8005354 <HAL_RCC_GetSysClockFreq+0x180>)
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	099b      	lsrs	r3, r3, #6
 8005282:	2200      	movs	r2, #0
 8005284:	613b      	str	r3, [r7, #16]
 8005286:	617a      	str	r2, [r7, #20]
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800528e:	f04f 0b00 	mov.w	fp, #0
 8005292:	4652      	mov	r2, sl
 8005294:	465b      	mov	r3, fp
 8005296:	f04f 0000 	mov.w	r0, #0
 800529a:	f04f 0100 	mov.w	r1, #0
 800529e:	0159      	lsls	r1, r3, #5
 80052a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052a4:	0150      	lsls	r0, r2, #5
 80052a6:	4602      	mov	r2, r0
 80052a8:	460b      	mov	r3, r1
 80052aa:	ebb2 080a 	subs.w	r8, r2, sl
 80052ae:	eb63 090b 	sbc.w	r9, r3, fp
 80052b2:	f04f 0200 	mov.w	r2, #0
 80052b6:	f04f 0300 	mov.w	r3, #0
 80052ba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80052be:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80052c2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80052c6:	ebb2 0408 	subs.w	r4, r2, r8
 80052ca:	eb63 0509 	sbc.w	r5, r3, r9
 80052ce:	f04f 0200 	mov.w	r2, #0
 80052d2:	f04f 0300 	mov.w	r3, #0
 80052d6:	00eb      	lsls	r3, r5, #3
 80052d8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052dc:	00e2      	lsls	r2, r4, #3
 80052de:	4614      	mov	r4, r2
 80052e0:	461d      	mov	r5, r3
 80052e2:	eb14 030a 	adds.w	r3, r4, sl
 80052e6:	603b      	str	r3, [r7, #0]
 80052e8:	eb45 030b 	adc.w	r3, r5, fp
 80052ec:	607b      	str	r3, [r7, #4]
 80052ee:	f04f 0200 	mov.w	r2, #0
 80052f2:	f04f 0300 	mov.w	r3, #0
 80052f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80052fa:	4629      	mov	r1, r5
 80052fc:	028b      	lsls	r3, r1, #10
 80052fe:	4621      	mov	r1, r4
 8005300:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005304:	4621      	mov	r1, r4
 8005306:	028a      	lsls	r2, r1, #10
 8005308:	4610      	mov	r0, r2
 800530a:	4619      	mov	r1, r3
 800530c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800530e:	2200      	movs	r2, #0
 8005310:	60bb      	str	r3, [r7, #8]
 8005312:	60fa      	str	r2, [r7, #12]
 8005314:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005318:	f7fb fcd6 	bl	8000cc8 <__aeabi_uldivmod>
 800531c:	4602      	mov	r2, r0
 800531e:	460b      	mov	r3, r1
 8005320:	4613      	mov	r3, r2
 8005322:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005324:	4b0b      	ldr	r3, [pc, #44]	; (8005354 <HAL_RCC_GetSysClockFreq+0x180>)
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	0c1b      	lsrs	r3, r3, #16
 800532a:	f003 0303 	and.w	r3, r3, #3
 800532e:	3301      	adds	r3, #1
 8005330:	005b      	lsls	r3, r3, #1
 8005332:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8005334:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005338:	fbb2 f3f3 	udiv	r3, r2, r3
 800533c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800533e:	e002      	b.n	8005346 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005340:	4b05      	ldr	r3, [pc, #20]	; (8005358 <HAL_RCC_GetSysClockFreq+0x184>)
 8005342:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005344:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005348:	4618      	mov	r0, r3
 800534a:	3740      	adds	r7, #64	; 0x40
 800534c:	46bd      	mov	sp, r7
 800534e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005352:	bf00      	nop
 8005354:	40023800 	.word	0x40023800
 8005358:	00f42400 	.word	0x00f42400
 800535c:	017d7840 	.word	0x017d7840

08005360 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005360:	b480      	push	{r7}
 8005362:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005364:	4b03      	ldr	r3, [pc, #12]	; (8005374 <HAL_RCC_GetHCLKFreq+0x14>)
 8005366:	681b      	ldr	r3, [r3, #0]
}
 8005368:	4618      	mov	r0, r3
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	20000000 	.word	0x20000000

08005378 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800537c:	f7ff fff0 	bl	8005360 <HAL_RCC_GetHCLKFreq>
 8005380:	4602      	mov	r2, r0
 8005382:	4b05      	ldr	r3, [pc, #20]	; (8005398 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	0a9b      	lsrs	r3, r3, #10
 8005388:	f003 0307 	and.w	r3, r3, #7
 800538c:	4903      	ldr	r1, [pc, #12]	; (800539c <HAL_RCC_GetPCLK1Freq+0x24>)
 800538e:	5ccb      	ldrb	r3, [r1, r3]
 8005390:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005394:	4618      	mov	r0, r3
 8005396:	bd80      	pop	{r7, pc}
 8005398:	40023800 	.word	0x40023800
 800539c:	0801469c 	.word	0x0801469c

080053a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80053a4:	f7ff ffdc 	bl	8005360 <HAL_RCC_GetHCLKFreq>
 80053a8:	4602      	mov	r2, r0
 80053aa:	4b05      	ldr	r3, [pc, #20]	; (80053c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	0b5b      	lsrs	r3, r3, #13
 80053b0:	f003 0307 	and.w	r3, r3, #7
 80053b4:	4903      	ldr	r1, [pc, #12]	; (80053c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053b6:	5ccb      	ldrb	r3, [r1, r3]
 80053b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053bc:	4618      	mov	r0, r3
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	40023800 	.word	0x40023800
 80053c4:	0801469c 	.word	0x0801469c

080053c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b088      	sub	sp, #32
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80053d0:	2300      	movs	r3, #0
 80053d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80053d4:	2300      	movs	r3, #0
 80053d6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80053d8:	2300      	movs	r3, #0
 80053da:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80053dc:	2300      	movs	r3, #0
 80053de:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80053e0:	2300      	movs	r3, #0
 80053e2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0301 	and.w	r3, r3, #1
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	f040 8089 	bne.w	8005504 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 0308 	and.w	r3, r3, #8
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	f040 8082 	bne.w	8005504 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0310 	and.w	r3, r3, #16
 8005408:	2b00      	cmp	r3, #0
 800540a:	d17b      	bne.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005414:	2b00      	cmp	r3, #0
 8005416:	d175      	bne.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005420:	2b00      	cmp	r3, #0
 8005422:	d16f      	bne.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800542c:	2b00      	cmp	r3, #0
 800542e:	d169      	bne.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005438:	2b00      	cmp	r3, #0
 800543a:	d163      	bne.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005444:	2b00      	cmp	r3, #0
 8005446:	d15d      	bne.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005450:	2b00      	cmp	r3, #0
 8005452:	d157      	bne.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800545c:	2b00      	cmp	r3, #0
 800545e:	d151      	bne.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005468:	2b00      	cmp	r3, #0
 800546a:	d14b      	bne.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005474:	2b00      	cmp	r3, #0
 8005476:	d145      	bne.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005480:	2b00      	cmp	r3, #0
 8005482:	d13f      	bne.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800548c:	2b00      	cmp	r3, #0
 800548e:	d139      	bne.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005498:	2b00      	cmp	r3, #0
 800549a:	d133      	bne.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d12d      	bne.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d127      	bne.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d121      	bne.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d11b      	bne.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d115      	bne.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d10f      	bne.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d109      	bne.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 0320 	and.w	r3, r3, #32
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d103      	bne.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80054fc:	2172      	movs	r1, #114	; 0x72
 80054fe:	4895      	ldr	r0, [pc, #596]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8005500:	f7fc ffb9 	bl	8002476 <assert_failed>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 0301 	and.w	r3, r3, #1
 800550c:	2b00      	cmp	r3, #0
 800550e:	d01f      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005514:	2b00      	cmp	r3, #0
 8005516:	d008      	beq.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x162>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800551c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005520:	d003      	beq.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x162>
 8005522:	2178      	movs	r1, #120	; 0x78
 8005524:	488b      	ldr	r0, [pc, #556]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8005526:	f7fc ffa6 	bl	8002476 <assert_failed>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800552a:	4b8b      	ldr	r3, [pc, #556]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	4a8a      	ldr	r2, [pc, #552]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8005530:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005534:	6093      	str	r3, [r2, #8]
 8005536:	4b88      	ldr	r3, [pc, #544]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8005538:	689a      	ldr	r2, [r3, #8]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800553e:	4986      	ldr	r1, [pc, #536]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8005540:	4313      	orrs	r3, r2
 8005542:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005548:	2b00      	cmp	r3, #0
 800554a:	d101      	bne.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x188>
    {
      plli2sused = 1;
 800554c:	2301      	movs	r3, #1
 800554e:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005558:	2b00      	cmp	r3, #0
 800555a:	d029      	beq.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005560:	2b00      	cmp	r3, #0
 8005562:	d00d      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005568:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800556c:	d008      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005572:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005576:	d003      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8005578:	2188      	movs	r1, #136	; 0x88
 800557a:	4876      	ldr	r0, [pc, #472]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 800557c:	f7fc ff7b 	bl	8002476 <assert_failed>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005580:	4b75      	ldr	r3, [pc, #468]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8005582:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005586:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800558e:	4972      	ldr	r1, [pc, #456]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8005590:	4313      	orrs	r3, r2
 8005592:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800559a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800559e:	d101      	bne.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      plli2sused = 1;
 80055a0:	2301      	movs	r3, #1
 80055a2:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d101      	bne.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    {
      pllsaiused = 1;
 80055ac:	2301      	movs	r3, #1
 80055ae:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d029      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d00d      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055cc:	d008      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80055d6:	d003      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80055d8:	219c      	movs	r1, #156	; 0x9c
 80055da:	485e      	ldr	r0, [pc, #376]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80055dc:	f7fc ff4b 	bl	8002476 <assert_failed>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80055e0:	4b5d      	ldr	r3, [pc, #372]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80055e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055e6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ee:	495a      	ldr	r1, [pc, #360]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80055f0:	4313      	orrs	r3, r2
 80055f2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055fe:	d101      	bne.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      plli2sused = 1;
 8005600:	2301      	movs	r3, #1
 8005602:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005608:	2b00      	cmp	r3, #0
 800560a:	d101      	bne.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      pllsaiused = 1;
 800560c:	2301      	movs	r3, #1
 800560e:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005618:	2b00      	cmp	r3, #0
 800561a:	d001      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
      plli2sused = 1;
 800561c:	2301      	movs	r3, #1
 800561e:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0320 	and.w	r3, r3, #32
 8005628:	2b00      	cmp	r3, #0
 800562a:	f000 8186 	beq.w	800593a <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005632:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005636:	f000 80e4 	beq.w	8005802 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800563e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005642:	f000 80de 	beq.w	8005802 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800564a:	4a44      	ldr	r2, [pc, #272]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x394>)
 800564c:	4293      	cmp	r3, r2
 800564e:	f000 80d8 	beq.w	8005802 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005656:	4a42      	ldr	r2, [pc, #264]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8005658:	4293      	cmp	r3, r2
 800565a:	f000 80d2 	beq.w	8005802 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005662:	4a40      	ldr	r2, [pc, #256]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8005664:	4293      	cmp	r3, r2
 8005666:	f000 80cc 	beq.w	8005802 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800566e:	4a3e      	ldr	r2, [pc, #248]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 8005670:	4293      	cmp	r3, r2
 8005672:	f000 80c6 	beq.w	8005802 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800567a:	4a3c      	ldr	r2, [pc, #240]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 800567c:	4293      	cmp	r3, r2
 800567e:	f000 80c0 	beq.w	8005802 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005686:	4a3a      	ldr	r2, [pc, #232]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8005688:	4293      	cmp	r3, r2
 800568a:	f000 80ba 	beq.w	8005802 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005692:	4a38      	ldr	r2, [pc, #224]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8005694:	4293      	cmp	r3, r2
 8005696:	f000 80b4 	beq.w	8005802 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800569e:	4a36      	ldr	r2, [pc, #216]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x3b0>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	f000 80ae 	beq.w	8005802 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056aa:	4a34      	ldr	r2, [pc, #208]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	f000 80a8 	beq.w	8005802 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b6:	4a32      	ldr	r2, [pc, #200]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x3b8>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	f000 80a2 	beq.w	8005802 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c2:	4a30      	ldr	r2, [pc, #192]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	f000 809c 	beq.w	8005802 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ce:	4a2e      	ldr	r2, [pc, #184]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3c0>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	f000 8096 	beq.w	8005802 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056da:	4a2c      	ldr	r2, [pc, #176]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	f000 8090 	beq.w	8005802 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e6:	4a2a      	ldr	r2, [pc, #168]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	f000 808a 	beq.w	8005802 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f2:	4a28      	ldr	r2, [pc, #160]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	f000 8084 	beq.w	8005802 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056fe:	4a26      	ldr	r2, [pc, #152]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d07e      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005708:	4a24      	ldr	r2, [pc, #144]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d079      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005712:	4a23      	ldr	r2, [pc, #140]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d074      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800571c:	4a21      	ldr	r2, [pc, #132]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d06f      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005726:	4a20      	ldr	r2, [pc, #128]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d06a      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005730:	4a1e      	ldr	r2, [pc, #120]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d065      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800573a:	4a1d      	ldr	r2, [pc, #116]	; (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d060      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005744:	4a1b      	ldr	r2, [pc, #108]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d05b      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800574e:	4a1a      	ldr	r2, [pc, #104]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8005750:	4293      	cmp	r3, r2
 8005752:	e033      	b.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8005754:	08014594 	.word	0x08014594
 8005758:	40023800 	.word	0x40023800
 800575c:	00020300 	.word	0x00020300
 8005760:	00030300 	.word	0x00030300
 8005764:	00040300 	.word	0x00040300
 8005768:	00050300 	.word	0x00050300
 800576c:	00060300 	.word	0x00060300
 8005770:	00070300 	.word	0x00070300
 8005774:	00080300 	.word	0x00080300
 8005778:	00090300 	.word	0x00090300
 800577c:	000a0300 	.word	0x000a0300
 8005780:	000b0300 	.word	0x000b0300
 8005784:	000c0300 	.word	0x000c0300
 8005788:	000d0300 	.word	0x000d0300
 800578c:	000e0300 	.word	0x000e0300
 8005790:	000f0300 	.word	0x000f0300
 8005794:	00100300 	.word	0x00100300
 8005798:	00110300 	.word	0x00110300
 800579c:	00120300 	.word	0x00120300
 80057a0:	00130300 	.word	0x00130300
 80057a4:	00140300 	.word	0x00140300
 80057a8:	00150300 	.word	0x00150300
 80057ac:	00160300 	.word	0x00160300
 80057b0:	00170300 	.word	0x00170300
 80057b4:	00180300 	.word	0x00180300
 80057b8:	00190300 	.word	0x00190300
 80057bc:	d021      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c2:	4a4c      	ldr	r2, [pc, #304]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d01c      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057cc:	4a4a      	ldr	r2, [pc, #296]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d017      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d6:	4a49      	ldr	r2, [pc, #292]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x534>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d012      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e0:	4a47      	ldr	r2, [pc, #284]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d00d      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ea:	4a46      	ldr	r2, [pc, #280]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d008      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f4:	4a44      	ldr	r2, [pc, #272]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d003      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80057fa:	21b7      	movs	r1, #183	; 0xb7
 80057fc:	4843      	ldr	r0, [pc, #268]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x544>)
 80057fe:	f7fc fe3a 	bl	8002476 <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005802:	4b43      	ldr	r3, [pc, #268]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005806:	4a42      	ldr	r2, [pc, #264]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800580c:	6413      	str	r3, [r2, #64]	; 0x40
 800580e:	4b40      	ldr	r3, [pc, #256]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005816:	60bb      	str	r3, [r7, #8]
 8005818:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800581a:	4b3e      	ldr	r3, [pc, #248]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a3d      	ldr	r2, [pc, #244]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8005820:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005824:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005826:	f7fd fb01 	bl	8002e2c <HAL_GetTick>
 800582a:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800582c:	e009      	b.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x47a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800582e:	f7fd fafd 	bl	8002e2c <HAL_GetTick>
 8005832:	4602      	mov	r2, r0
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	2b64      	cmp	r3, #100	; 0x64
 800583a:	d902      	bls.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x47a>
      {
        return HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	f000 bd9f 	b.w	8006380 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005842:	4b34      	ldr	r3, [pc, #208]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800584a:	2b00      	cmp	r3, #0
 800584c:	d0ef      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x466>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800584e:	4b30      	ldr	r3, [pc, #192]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005852:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005856:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d036      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x504>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005862:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005866:	693a      	ldr	r2, [r7, #16]
 8005868:	429a      	cmp	r2, r3
 800586a:	d02f      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800586c:	4b28      	ldr	r3, [pc, #160]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800586e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005870:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005874:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005876:	4b26      	ldr	r3, [pc, #152]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800587a:	4a25      	ldr	r2, [pc, #148]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800587c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005880:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005882:	4b23      	ldr	r3, [pc, #140]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005886:	4a22      	ldr	r2, [pc, #136]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005888:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800588c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800588e:	4a20      	ldr	r2, [pc, #128]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005894:	4b1e      	ldr	r3, [pc, #120]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005898:	f003 0301 	and.w	r3, r3, #1
 800589c:	2b01      	cmp	r3, #1
 800589e:	d115      	bne.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x504>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058a0:	f7fd fac4 	bl	8002e2c <HAL_GetTick>
 80058a4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058a6:	e00b      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058a8:	f7fd fac0 	bl	8002e2c <HAL_GetTick>
 80058ac:	4602      	mov	r2, r0
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d902      	bls.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 80058ba:	2303      	movs	r3, #3
 80058bc:	f000 bd60 	b.w	8006380 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058c0:	4b13      	ldr	r3, [pc, #76]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80058c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058c4:	f003 0302 	and.w	r3, r3, #2
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d0ed      	beq.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058d8:	d120      	bne.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x554>
 80058da:	4b0d      	ldr	r3, [pc, #52]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80058e6:	4b0c      	ldr	r3, [pc, #48]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80058e8:	400b      	ands	r3, r1
 80058ea:	4909      	ldr	r1, [pc, #36]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80058ec:	4313      	orrs	r3, r2
 80058ee:	608b      	str	r3, [r1, #8]
 80058f0:	e01a      	b.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x560>
 80058f2:	bf00      	nop
 80058f4:	001a0300 	.word	0x001a0300
 80058f8:	001b0300 	.word	0x001b0300
 80058fc:	001c0300 	.word	0x001c0300
 8005900:	001d0300 	.word	0x001d0300
 8005904:	001e0300 	.word	0x001e0300
 8005908:	001f0300 	.word	0x001f0300
 800590c:	08014594 	.word	0x08014594
 8005910:	40023800 	.word	0x40023800
 8005914:	40007000 	.word	0x40007000
 8005918:	0ffffcff 	.word	0x0ffffcff
 800591c:	4b9a      	ldr	r3, [pc, #616]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	4a99      	ldr	r2, [pc, #612]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8005922:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005926:	6093      	str	r3, [r2, #8]
 8005928:	4b97      	ldr	r3, [pc, #604]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800592a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005930:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005934:	4994      	ldr	r1, [pc, #592]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8005936:	4313      	orrs	r3, r2
 8005938:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 0310 	and.w	r3, r3, #16
 8005942:	2b00      	cmp	r3, #0
 8005944:	d01d      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594a:	2b00      	cmp	r3, #0
 800594c:	d008      	beq.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005952:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005956:	d003      	beq.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8005958:	21f1      	movs	r1, #241	; 0xf1
 800595a:	488c      	ldr	r0, [pc, #560]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 800595c:	f7fc fd8b 	bl	8002476 <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005960:	4b89      	ldr	r3, [pc, #548]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8005962:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005966:	4a88      	ldr	r2, [pc, #544]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8005968:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800596c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005970:	4b85      	ldr	r3, [pc, #532]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8005972:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800597a:	4983      	ldr	r1, [pc, #524]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800597c:	4313      	orrs	r3, r2
 800597e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800598a:	2b00      	cmp	r3, #0
 800598c:	d01c      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x600>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005992:	2b00      	cmp	r3, #0
 8005994:	d00d      	beq.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800599a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800599e:	d008      	beq.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80059a8:	d003      	beq.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 80059aa:	21fb      	movs	r1, #251	; 0xfb
 80059ac:	4877      	ldr	r0, [pc, #476]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 80059ae:	f7fc fd62 	bl	8002476 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80059b2:	4b75      	ldr	r3, [pc, #468]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80059b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059c0:	4971      	ldr	r1, [pc, #452]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80059c2:	4313      	orrs	r3, r2
 80059c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d01d      	beq.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x648>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d00e      	beq.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x632>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059e0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80059e4:	d009      	beq.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x632>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059ea:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80059ee:	d004      	beq.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x632>
 80059f0:	f240 1105 	movw	r1, #261	; 0x105
 80059f4:	4865      	ldr	r0, [pc, #404]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 80059f6:	f7fc fd3e 	bl	8002476 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80059fa:	4b63      	ldr	r3, [pc, #396]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80059fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a00:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a08:	495f      	ldr	r1, [pc, #380]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d01d      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x690>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d00e      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a2c:	d009      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a36:	d004      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8005a38:	f240 110f 	movw	r1, #271	; 0x10f
 8005a3c:	4853      	ldr	r0, [pc, #332]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8005a3e:	f7fc fd1a 	bl	8002476 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a42:	4b51      	ldr	r3, [pc, #324]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8005a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a50:	494d      	ldr	r1, [pc, #308]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8005a52:	4313      	orrs	r3, r2
 8005a54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d01d      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d00e      	beq.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a74:	d009      	beq.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a7a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a7e:	d004      	beq.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8005a80:	f240 1119 	movw	r1, #281	; 0x119
 8005a84:	4841      	ldr	r0, [pc, #260]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8005a86:	f7fc fcf6 	bl	8002476 <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005a8a:	4b3f      	ldr	r3, [pc, #252]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8005a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a90:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a98:	493b      	ldr	r1, [pc, #236]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d01f      	beq.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x724>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d010      	beq.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d00c      	beq.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ac0:	2b03      	cmp	r3, #3
 8005ac2:	d008      	beq.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ac8:	2b02      	cmp	r3, #2
 8005aca:	d004      	beq.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8005acc:	f240 1123 	movw	r1, #291	; 0x123
 8005ad0:	482e      	ldr	r0, [pc, #184]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8005ad2:	f7fc fcd0 	bl	8002476 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ad6:	4b2c      	ldr	r3, [pc, #176]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8005ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005adc:	f023 0203 	bic.w	r2, r3, #3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ae4:	4928      	ldr	r1, [pc, #160]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d01f      	beq.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x770>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d010      	beq.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b04:	2b04      	cmp	r3, #4
 8005b06:	d00c      	beq.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b0c:	2b0c      	cmp	r3, #12
 8005b0e:	d008      	beq.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b14:	2b08      	cmp	r3, #8
 8005b16:	d004      	beq.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8005b18:	f240 112d 	movw	r1, #301	; 0x12d
 8005b1c:	481b      	ldr	r0, [pc, #108]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8005b1e:	f7fc fcaa 	bl	8002476 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005b22:	4b19      	ldr	r3, [pc, #100]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8005b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b28:	f023 020c 	bic.w	r2, r3, #12
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b30:	4915      	ldr	r1, [pc, #84]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8005b32:	4313      	orrs	r3, r2
 8005b34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d025      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d010      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b50:	2b10      	cmp	r3, #16
 8005b52:	d00c      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b58:	2b30      	cmp	r3, #48	; 0x30
 8005b5a:	d008      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b60:	2b20      	cmp	r3, #32
 8005b62:	d004      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8005b64:	f240 1137 	movw	r1, #311	; 0x137
 8005b68:	4808      	ldr	r0, [pc, #32]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8005b6a:	f7fc fc84 	bl	8002476 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005b6e:	4b06      	ldr	r3, [pc, #24]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8005b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b74:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b7c:	4902      	ldr	r1, [pc, #8]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005b84:	e004      	b.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
 8005b86:	bf00      	nop
 8005b88:	40023800 	.word	0x40023800
 8005b8c:	08014594 	.word	0x08014594
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d01f      	beq.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x814>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d010      	beq.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ba8:	2b40      	cmp	r3, #64	; 0x40
 8005baa:	d00c      	beq.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bb0:	2bc0      	cmp	r3, #192	; 0xc0
 8005bb2:	d008      	beq.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bb8:	2b80      	cmp	r3, #128	; 0x80
 8005bba:	d004      	beq.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8005bbc:	f240 1141 	movw	r1, #321	; 0x141
 8005bc0:	48a0      	ldr	r0, [pc, #640]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8005bc2:	f7fc fc58 	bl	8002476 <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005bc6:	4ba0      	ldr	r3, [pc, #640]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8005bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bcc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bd4:	499c      	ldr	r1, [pc, #624]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d022      	beq.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x866>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d013      	beq.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bf8:	d00e      	beq.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c02:	d009      	beq.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c0c:	d004      	beq.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8005c0e:	f240 114b 	movw	r1, #331	; 0x14b
 8005c12:	488c      	ldr	r0, [pc, #560]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8005c14:	f7fc fc2f 	bl	8002476 <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005c18:	4b8b      	ldr	r3, [pc, #556]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8005c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c1e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c26:	4988      	ldr	r1, [pc, #544]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d022      	beq.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d013      	beq.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c4a:	d00e      	beq.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c50:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c54:	d009      	beq.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c5e:	d004      	beq.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8005c60:	f240 1155 	movw	r1, #341	; 0x155
 8005c64:	4877      	ldr	r0, [pc, #476]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8005c66:	f7fc fc06 	bl	8002476 <assert_failed>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005c6a:	4b77      	ldr	r3, [pc, #476]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8005c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c70:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c78:	4973      	ldr	r1, [pc, #460]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d022      	beq.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x90a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d013      	beq.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c9c:	d00e      	beq.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ca2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005ca6:	d009      	beq.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cb0:	d004      	beq.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8005cb2:	f240 115f 	movw	r1, #351	; 0x15f
 8005cb6:	4863      	ldr	r0, [pc, #396]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8005cb8:	f7fc fbdd 	bl	8002476 <assert_failed>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005cbc:	4b62      	ldr	r3, [pc, #392]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8005cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cc2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cca:	495f      	ldr	r1, [pc, #380]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d022      	beq.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d013      	beq.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x946>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005cee:	d00e      	beq.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x946>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cf4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005cf8:	d009      	beq.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x946>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d02:	d004      	beq.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x946>
 8005d04:	f240 1169 	movw	r1, #361	; 0x169
 8005d08:	484e      	ldr	r0, [pc, #312]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8005d0a:	f7fc fbb4 	bl	8002476 <assert_failed>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005d0e:	4b4e      	ldr	r3, [pc, #312]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8005d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d14:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d1c:	494a      	ldr	r1, [pc, #296]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d018      	beq.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x99a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d38:	d008      	beq.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x984>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d004      	beq.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x984>
 8005d42:	f240 1173 	movw	r1, #371	; 0x173
 8005d46:	483f      	ldr	r0, [pc, #252]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8005d48:	f7fc fb95 	bl	8002476 <assert_failed>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005d4c:	4b3e      	ldr	r3, [pc, #248]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8005d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d52:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d5a:	493b      	ldr	r1, [pc, #236]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d01f      	beq.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d76:	d008      	beq.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d004      	beq.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8005d80:	f240 117d 	movw	r1, #381	; 0x17d
 8005d84:	482f      	ldr	r0, [pc, #188]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8005d86:	f7fc fb76 	bl	8002476 <assert_failed>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005d8a:	4b2f      	ldr	r3, [pc, #188]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8005d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d90:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d98:	492b      	ldr	r1, [pc, #172]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005da4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005da8:	d101      	bne.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    {
      pllsaiused = 1;
 8005daa:	2301      	movs	r3, #1
 8005dac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 0308 	and.w	r3, r3, #8
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d001      	beq.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x9f6>
  {
    pllsaiused = 1;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d022      	beq.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0xa48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d013      	beq.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dd6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005dda:	d00e      	beq.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005de0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005de4:	d009      	beq.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005dee:	d004      	beq.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8005df0:	f240 1195 	movw	r1, #405	; 0x195
 8005df4:	4813      	ldr	r0, [pc, #76]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8005df6:	f7fc fb3e 	bl	8002476 <assert_failed>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005dfa:	4b13      	ldr	r3, [pc, #76]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8005dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e00:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e08:	490f      	ldr	r1, [pc, #60]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d020      	beq.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0xa96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e26:	d009      	beq.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d004      	beq.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005e32:	f240 119f 	movw	r1, #415	; 0x19f
 8005e36:	4803      	ldr	r0, [pc, #12]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8005e38:	f7fc fb1d 	bl	8002476 <assert_failed>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005e3c:	4b02      	ldr	r3, [pc, #8]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8005e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e42:	e003      	b.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0xa84>
 8005e44:	08014594 	.word	0x08014594
 8005e48:	40023800 	.word	0x40023800
 8005e4c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e56:	4910      	ldr	r1, [pc, #64]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d006      	beq.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	f000 8155 	beq.w	800611c <HAL_RCCEx_PeriphCLKConfig+0xd54>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005e72:	4b09      	ldr	r3, [pc, #36]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a08      	ldr	r2, [pc, #32]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 8005e78:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005e7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e7e:	f7fc ffd5 	bl	8002e2c <HAL_GetTick>
 8005e82:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e84:	e00a      	b.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0xad4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005e86:	f7fc ffd1 	bl	8002e2c <HAL_GetTick>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	1ad3      	subs	r3, r2, r3
 8005e90:	2b64      	cmp	r3, #100	; 0x64
 8005e92:	d903      	bls.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0xad4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e94:	2303      	movs	r3, #3
 8005e96:	e273      	b.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 8005e98:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e9c:	4b9a      	ldr	r3, [pc, #616]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d1ee      	bne.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0xabe>
      }
    }

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	2b31      	cmp	r3, #49	; 0x31
 8005eae:	d904      	bls.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8005eb8:	d904      	bls.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
 8005eba:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8005ebe:	4893      	ldr	r0, [pc, #588]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8005ec0:	f7fc fad9 	bl	8002476 <assert_failed>

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f003 0301 	and.w	r3, r3, #1
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d02e      	beq.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0xb66>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d12a      	bne.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0xb66>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d903      	bls.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0xb20>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	2b07      	cmp	r3, #7
 8005ee6:	d904      	bls.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8005ee8:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8005eec:	4887      	ldr	r0, [pc, #540]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8005eee:	f7fc fac2 	bl	8002476 <assert_failed>

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005ef2:	4b85      	ldr	r3, [pc, #532]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8005ef4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ef8:	0c1b      	lsrs	r3, r3, #16
 8005efa:	f003 0303 	and.w	r3, r3, #3
 8005efe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005f00:	4b81      	ldr	r3, [pc, #516]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8005f02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f06:	0e1b      	lsrs	r3, r3, #24
 8005f08:	f003 030f 	and.w	r3, r3, #15
 8005f0c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	019a      	lsls	r2, r3, #6
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	041b      	lsls	r3, r3, #16
 8005f18:	431a      	orrs	r2, r3
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	061b      	lsls	r3, r3, #24
 8005f1e:	431a      	orrs	r2, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	071b      	lsls	r3, r3, #28
 8005f26:	4978      	ldr	r1, [pc, #480]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d004      	beq.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f42:	d00a      	beq.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0xb92>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d048      	beq.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f58:	d143      	bne.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {
      /* Check for PLLI2S Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d903      	bls.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0xba2>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	2b0f      	cmp	r3, #15
 8005f68:	d904      	bls.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8005f6a:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 8005f6e:	4867      	ldr	r0, [pc, #412]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8005f70:	f7fc fa81 	bl	8002476 <assert_failed>
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d003      	beq.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0xbbc>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f80:	2b20      	cmp	r3, #32
 8005f82:	d904      	bls.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0xbc6>
 8005f84:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 8005f88:	4860      	ldr	r0, [pc, #384]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8005f8a:	f7fc fa74 	bl	8002476 <assert_failed>

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005f8e:	4b5e      	ldr	r3, [pc, #376]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8005f90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f94:	0c1b      	lsrs	r3, r3, #16
 8005f96:	f003 0303 	and.w	r3, r3, #3
 8005f9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005f9c:	4b5a      	ldr	r3, [pc, #360]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8005f9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fa2:	0f1b      	lsrs	r3, r3, #28
 8005fa4:	f003 0307 	and.w	r3, r3, #7
 8005fa8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	019a      	lsls	r2, r3, #6
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	041b      	lsls	r3, r3, #16
 8005fb4:	431a      	orrs	r2, r3
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	061b      	lsls	r3, r3, #24
 8005fbc:	431a      	orrs	r2, r3
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	071b      	lsls	r3, r3, #28
 8005fc2:	4951      	ldr	r1, [pc, #324]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005fca:	4b4f      	ldr	r3, [pc, #316]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8005fcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fd0:	f023 021f 	bic.w	r2, r3, #31
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd8:	3b01      	subs	r3, #1
 8005fda:	494b      	ldr	r1, [pc, #300]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d032      	beq.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d010      	beq.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d00c      	beq.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	2b02      	cmp	r3, #2
 8006004:	d008      	beq.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	2b03      	cmp	r3, #3
 800600c:	d004      	beq.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 800600e:	f240 2105 	movw	r1, #517	; 0x205
 8006012:	483e      	ldr	r0, [pc, #248]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8006014:	f7fc fa2f 	bl	8002476 <assert_failed>

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006018:	4b3b      	ldr	r3, [pc, #236]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800601a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800601e:	0e1b      	lsrs	r3, r3, #24
 8006020:	f003 030f 	and.w	r3, r3, #15
 8006024:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006026:	4b38      	ldr	r3, [pc, #224]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8006028:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800602c:	0f1b      	lsrs	r3, r3, #28
 800602e:	f003 0307 	and.w	r3, r3, #7
 8006032:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	019a      	lsls	r2, r3, #6
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	041b      	lsls	r3, r3, #16
 8006040:	431a      	orrs	r2, r3
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	061b      	lsls	r3, r3, #24
 8006046:	431a      	orrs	r2, r3
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	071b      	lsls	r3, r3, #28
 800604c:	492e      	ldr	r1, [pc, #184]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800604e:	4313      	orrs	r3, r2
 8006050:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800605c:	2b00      	cmp	r3, #0
 800605e:	d040      	beq.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d010      	beq.n	800608a <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	691b      	ldr	r3, [r3, #16]
 800606c:	2b01      	cmp	r3, #1
 800606e:	d00c      	beq.n	800608a <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	2b02      	cmp	r3, #2
 8006076:	d008      	beq.n	800608a <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	2b03      	cmp	r3, #3
 800607e:	d004      	beq.n	800608a <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8006080:	f44f 7105 	mov.w	r1, #532	; 0x214
 8006084:	4821      	ldr	r0, [pc, #132]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8006086:	f7fc f9f6 	bl	8002476 <assert_failed>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	2b01      	cmp	r3, #1
 8006090:	d903      	bls.n	800609a <HAL_RCCEx_PeriphCLKConfig+0xcd2>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	2b07      	cmp	r3, #7
 8006098:	d904      	bls.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 800609a:	f240 2115 	movw	r1, #533	; 0x215
 800609e:	481b      	ldr	r0, [pc, #108]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80060a0:	f7fc f9e9 	bl	8002476 <assert_failed>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d903      	bls.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0xcec>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	2b0f      	cmp	r3, #15
 80060b2:	d904      	bls.n	80060be <HAL_RCCEx_PeriphCLKConfig+0xcf6>
 80060b4:	f240 2116 	movw	r1, #534	; 0x216
 80060b8:	4814      	ldr	r0, [pc, #80]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80060ba:	f7fc f9dc 	bl	8002476 <assert_failed>

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	019a      	lsls	r2, r3, #6
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	691b      	ldr	r3, [r3, #16]
 80060c8:	041b      	lsls	r3, r3, #16
 80060ca:	431a      	orrs	r2, r3
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	061b      	lsls	r3, r3, #24
 80060d2:	431a      	orrs	r2, r3
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	071b      	lsls	r3, r3, #28
 80060da:	490b      	ldr	r1, [pc, #44]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80060dc:	4313      	orrs	r3, r2
 80060de:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80060e2:	4b09      	ldr	r3, [pc, #36]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a08      	ldr	r2, [pc, #32]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80060e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80060ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060ee:	f7fc fe9d 	bl	8002e2c <HAL_GetTick>
 80060f2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80060f4:	e00c      	b.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0xd48>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80060f6:	f7fc fe99 	bl	8002e2c <HAL_GetTick>
 80060fa:	4602      	mov	r2, r0
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	1ad3      	subs	r3, r2, r3
 8006100:	2b64      	cmp	r3, #100	; 0x64
 8006102:	d905      	bls.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0xd48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006104:	2303      	movs	r3, #3
 8006106:	e13b      	b.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 8006108:	40023800 	.word	0x40023800
 800610c:	08014594 	.word	0x08014594
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006110:	4b9d      	ldr	r3, [pc, #628]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006118:	2b00      	cmp	r3, #0
 800611a:	d0ec      	beq.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	2b01      	cmp	r3, #1
 8006120:	f040 812d 	bne.w	800637e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006124:	4b98      	ldr	r3, [pc, #608]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a97      	ldr	r2, [pc, #604]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800612a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800612e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006130:	f7fc fe7c 	bl	8002e2c <HAL_GetTick>
 8006134:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006136:	e008      	b.n	800614a <HAL_RCCEx_PeriphCLKConfig+0xd82>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006138:	f7fc fe78 	bl	8002e2c <HAL_GetTick>
 800613c:	4602      	mov	r2, r0
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	2b64      	cmp	r3, #100	; 0x64
 8006144:	d901      	bls.n	800614a <HAL_RCCEx_PeriphCLKConfig+0xd82>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006146:	2303      	movs	r3, #3
 8006148:	e11a      	b.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800614a:	4b8f      	ldr	r3, [pc, #572]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006152:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006156:	d0ef      	beq.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0xd70>
      }
    }

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	695b      	ldr	r3, [r3, #20]
 800615c:	2b31      	cmp	r3, #49	; 0x31
 800615e:	d904      	bls.n	800616a <HAL_RCCEx_PeriphCLKConfig+0xda2>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	695b      	ldr	r3, [r3, #20]
 8006164:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8006168:	d904      	bls.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0xdac>
 800616a:	f44f 7111 	mov.w	r1, #580	; 0x244
 800616e:	4887      	ldr	r0, [pc, #540]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8006170:	f7fc f981 	bl	8002476 <assert_failed>

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800617c:	2b00      	cmp	r3, #0
 800617e:	d003      	beq.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006184:	2b00      	cmp	r3, #0
 8006186:	d009      	beq.n	800619c <HAL_RCCEx_PeriphCLKConfig+0xdd4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006190:	2b00      	cmp	r3, #0
 8006192:	d048      	beq.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0xe5e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006198:	2b00      	cmp	r3, #0
 800619a:	d144      	bne.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0xe5e>
    {
      /* check for PLLSAIQ Parameter */
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	699b      	ldr	r3, [r3, #24]
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d903      	bls.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0xde4>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	699b      	ldr	r3, [r3, #24]
 80061a8:	2b0f      	cmp	r3, #15
 80061aa:	d904      	bls.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0xdee>
 80061ac:	f240 214b 	movw	r1, #587	; 0x24b
 80061b0:	4876      	ldr	r0, [pc, #472]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 80061b2:	f7fc f960 	bl	8002476 <assert_failed>
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d003      	beq.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0xdfe>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c2:	2b20      	cmp	r3, #32
 80061c4:	d904      	bls.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
 80061c6:	f240 214d 	movw	r1, #589	; 0x24d
 80061ca:	4870      	ldr	r0, [pc, #448]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 80061cc:	f7fc f953 	bl	8002476 <assert_failed>

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80061d0:	4b6d      	ldr	r3, [pc, #436]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80061d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061d6:	0c1b      	lsrs	r3, r3, #16
 80061d8:	f003 0303 	and.w	r3, r3, #3
 80061dc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80061de:	4b6a      	ldr	r3, [pc, #424]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80061e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061e4:	0f1b      	lsrs	r3, r3, #28
 80061e6:	f003 0307 	and.w	r3, r3, #7
 80061ea:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	695b      	ldr	r3, [r3, #20]
 80061f0:	019a      	lsls	r2, r3, #6
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	041b      	lsls	r3, r3, #16
 80061f6:	431a      	orrs	r2, r3
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	699b      	ldr	r3, [r3, #24]
 80061fc:	061b      	lsls	r3, r3, #24
 80061fe:	431a      	orrs	r2, r3
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	071b      	lsls	r3, r3, #28
 8006204:	4960      	ldr	r1, [pc, #384]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8006206:	4313      	orrs	r3, r2
 8006208:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800620c:	4b5e      	ldr	r3, [pc, #376]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800620e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006212:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800621a:	3b01      	subs	r3, #1
 800621c:	021b      	lsls	r3, r3, #8
 800621e:	495a      	ldr	r1, [pc, #360]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8006220:	4313      	orrs	r3, r2
 8006222:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800622e:	2b00      	cmp	r3, #0
 8006230:	d037      	beq.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0xeda>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006236:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800623a:	d132      	bne.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0xeda>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6a1b      	ldr	r3, [r3, #32]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d010      	beq.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6a1b      	ldr	r3, [r3, #32]
 8006248:	2b01      	cmp	r3, #1
 800624a:	d00c      	beq.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6a1b      	ldr	r3, [r3, #32]
 8006250:	2b02      	cmp	r3, #2
 8006252:	d008      	beq.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6a1b      	ldr	r3, [r3, #32]
 8006258:	2b03      	cmp	r3, #3
 800625a:	d004      	beq.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 800625c:	f44f 7118 	mov.w	r1, #608	; 0x260
 8006260:	484a      	ldr	r0, [pc, #296]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8006262:	f7fc f908 	bl	8002476 <assert_failed>
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006266:	4b48      	ldr	r3, [pc, #288]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8006268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800626c:	0e1b      	lsrs	r3, r3, #24
 800626e:	f003 030f 	and.w	r3, r3, #15
 8006272:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006274:	4b44      	ldr	r3, [pc, #272]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8006276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800627a:	0f1b      	lsrs	r3, r3, #28
 800627c:	f003 0307 	and.w	r3, r3, #7
 8006280:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	695b      	ldr	r3, [r3, #20]
 8006286:	019a      	lsls	r2, r3, #6
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6a1b      	ldr	r3, [r3, #32]
 800628c:	041b      	lsls	r3, r3, #16
 800628e:	431a      	orrs	r2, r3
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	061b      	lsls	r3, r3, #24
 8006294:	431a      	orrs	r2, r3
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	071b      	lsls	r3, r3, #28
 800629a:	493b      	ldr	r1, [pc, #236]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800629c:	4313      	orrs	r3, r2
 800629e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f003 0308 	and.w	r3, r3, #8
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d04d      	beq.n	800634a <HAL_RCCEx_PeriphCLKConfig+0xf82>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	69db      	ldr	r3, [r3, #28]
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d903      	bls.n	80062be <HAL_RCCEx_PeriphCLKConfig+0xef6>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	69db      	ldr	r3, [r3, #28]
 80062ba:	2b07      	cmp	r3, #7
 80062bc:	d904      	bls.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0xf00>
 80062be:	f240 216f 	movw	r1, #623	; 0x26f
 80062c2:	4832      	ldr	r0, [pc, #200]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 80062c4:	f7fc f8d7 	bl	8002476 <assert_failed>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d013      	beq.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062d8:	d00e      	beq.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80062e2:	d009      	beq.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80062ec:	d004      	beq.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 80062ee:	f44f 711c 	mov.w	r1, #624	; 0x270
 80062f2:	4826      	ldr	r0, [pc, #152]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 80062f4:	f7fc f8bf 	bl	8002476 <assert_failed>

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80062f8:	4b23      	ldr	r3, [pc, #140]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80062fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062fe:	0e1b      	lsrs	r3, r3, #24
 8006300:	f003 030f 	and.w	r3, r3, #15
 8006304:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006306:	4b20      	ldr	r3, [pc, #128]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8006308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800630c:	0c1b      	lsrs	r3, r3, #16
 800630e:	f003 0303 	and.w	r3, r3, #3
 8006312:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	695b      	ldr	r3, [r3, #20]
 8006318:	019a      	lsls	r2, r3, #6
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	041b      	lsls	r3, r3, #16
 800631e:	431a      	orrs	r2, r3
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	061b      	lsls	r3, r3, #24
 8006324:	431a      	orrs	r2, r3
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	69db      	ldr	r3, [r3, #28]
 800632a:	071b      	lsls	r3, r3, #28
 800632c:	4916      	ldr	r1, [pc, #88]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800632e:	4313      	orrs	r3, r2
 8006330:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006334:	4b14      	ldr	r3, [pc, #80]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8006336:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800633a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006342:	4911      	ldr	r1, [pc, #68]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8006344:	4313      	orrs	r3, r2
 8006346:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800634a:	4b0f      	ldr	r3, [pc, #60]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a0e      	ldr	r2, [pc, #56]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8006350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006354:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006356:	f7fc fd69 	bl	8002e2c <HAL_GetTick>
 800635a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800635c:	e008      	b.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800635e:	f7fc fd65 	bl	8002e2c <HAL_GetTick>
 8006362:	4602      	mov	r2, r0
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	1ad3      	subs	r3, r2, r3
 8006368:	2b64      	cmp	r3, #100	; 0x64
 800636a:	d901      	bls.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800636c:	2303      	movs	r3, #3
 800636e:	e007      	b.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006370:	4b05      	ldr	r3, [pc, #20]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006378:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800637c:	d1ef      	bne.n	800635e <HAL_RCCEx_PeriphCLKConfig+0xf96>
      }
    }
  }
  return HAL_OK;
 800637e:	2300      	movs	r3, #0
}
 8006380:	4618      	mov	r0, r3
 8006382:	3720      	adds	r7, #32
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}
 8006388:	40023800 	.word	0x40023800
 800638c:	08014594 	.word	0x08014594

08006390 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b082      	sub	sp, #8
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d101      	bne.n	80063a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	e0f5      	b.n	800658e <HAL_TIM_Base_Init+0x1fe>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a7c      	ldr	r2, [pc, #496]	; (8006598 <HAL_TIM_Base_Init+0x208>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d045      	beq.n	8006438 <HAL_TIM_Base_Init+0xa8>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063b4:	d040      	beq.n	8006438 <HAL_TIM_Base_Init+0xa8>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a78      	ldr	r2, [pc, #480]	; (800659c <HAL_TIM_Base_Init+0x20c>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d03b      	beq.n	8006438 <HAL_TIM_Base_Init+0xa8>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a76      	ldr	r2, [pc, #472]	; (80065a0 <HAL_TIM_Base_Init+0x210>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d036      	beq.n	8006438 <HAL_TIM_Base_Init+0xa8>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a75      	ldr	r2, [pc, #468]	; (80065a4 <HAL_TIM_Base_Init+0x214>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d031      	beq.n	8006438 <HAL_TIM_Base_Init+0xa8>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a73      	ldr	r2, [pc, #460]	; (80065a8 <HAL_TIM_Base_Init+0x218>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d02c      	beq.n	8006438 <HAL_TIM_Base_Init+0xa8>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a72      	ldr	r2, [pc, #456]	; (80065ac <HAL_TIM_Base_Init+0x21c>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d027      	beq.n	8006438 <HAL_TIM_Base_Init+0xa8>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a70      	ldr	r2, [pc, #448]	; (80065b0 <HAL_TIM_Base_Init+0x220>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d022      	beq.n	8006438 <HAL_TIM_Base_Init+0xa8>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a6f      	ldr	r2, [pc, #444]	; (80065b4 <HAL_TIM_Base_Init+0x224>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d01d      	beq.n	8006438 <HAL_TIM_Base_Init+0xa8>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a6d      	ldr	r2, [pc, #436]	; (80065b8 <HAL_TIM_Base_Init+0x228>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d018      	beq.n	8006438 <HAL_TIM_Base_Init+0xa8>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a6c      	ldr	r2, [pc, #432]	; (80065bc <HAL_TIM_Base_Init+0x22c>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d013      	beq.n	8006438 <HAL_TIM_Base_Init+0xa8>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a6a      	ldr	r2, [pc, #424]	; (80065c0 <HAL_TIM_Base_Init+0x230>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d00e      	beq.n	8006438 <HAL_TIM_Base_Init+0xa8>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a69      	ldr	r2, [pc, #420]	; (80065c4 <HAL_TIM_Base_Init+0x234>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d009      	beq.n	8006438 <HAL_TIM_Base_Init+0xa8>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a67      	ldr	r2, [pc, #412]	; (80065c8 <HAL_TIM_Base_Init+0x238>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d004      	beq.n	8006438 <HAL_TIM_Base_Init+0xa8>
 800642e:	f44f 718b 	mov.w	r1, #278	; 0x116
 8006432:	4866      	ldr	r0, [pc, #408]	; (80065cc <HAL_TIM_Base_Init+0x23c>)
 8006434:	f7fc f81f 	bl	8002476 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d014      	beq.n	800646a <HAL_TIM_Base_Init+0xda>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	2b10      	cmp	r3, #16
 8006446:	d010      	beq.n	800646a <HAL_TIM_Base_Init+0xda>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	2b20      	cmp	r3, #32
 800644e:	d00c      	beq.n	800646a <HAL_TIM_Base_Init+0xda>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	2b40      	cmp	r3, #64	; 0x40
 8006456:	d008      	beq.n	800646a <HAL_TIM_Base_Init+0xda>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	2b60      	cmp	r3, #96	; 0x60
 800645e:	d004      	beq.n	800646a <HAL_TIM_Base_Init+0xda>
 8006460:	f240 1117 	movw	r1, #279	; 0x117
 8006464:	4859      	ldr	r0, [pc, #356]	; (80065cc <HAL_TIM_Base_Init+0x23c>)
 8006466:	f7fc f806 	bl	8002476 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d00e      	beq.n	8006490 <HAL_TIM_Base_Init+0x100>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800647a:	d009      	beq.n	8006490 <HAL_TIM_Base_Init+0x100>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	691b      	ldr	r3, [r3, #16]
 8006480:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006484:	d004      	beq.n	8006490 <HAL_TIM_Base_Init+0x100>
 8006486:	f44f 718c 	mov.w	r1, #280	; 0x118
 800648a:	4850      	ldr	r0, [pc, #320]	; (80065cc <HAL_TIM_Base_Init+0x23c>)
 800648c:	f7fb fff3 	bl	8002476 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006498:	d004      	beq.n	80064a4 <HAL_TIM_Base_Init+0x114>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a41      	ldr	r2, [pc, #260]	; (80065a4 <HAL_TIM_Base_Init+0x214>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d107      	bne.n	80064b4 <HAL_TIM_Base_Init+0x124>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	bf14      	ite	ne
 80064ac:	2301      	movne	r3, #1
 80064ae:	2300      	moveq	r3, #0
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	e00e      	b.n	80064d2 <HAL_TIM_Base_Init+0x142>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d006      	beq.n	80064ca <HAL_TIM_Base_Init+0x13a>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064c4:	d201      	bcs.n	80064ca <HAL_TIM_Base_Init+0x13a>
 80064c6:	2301      	movs	r3, #1
 80064c8:	e000      	b.n	80064cc <HAL_TIM_Base_Init+0x13c>
 80064ca:	2300      	movs	r3, #0
 80064cc:	f003 0301 	and.w	r3, r3, #1
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d104      	bne.n	80064e0 <HAL_TIM_Base_Init+0x150>
 80064d6:	f240 1119 	movw	r1, #281	; 0x119
 80064da:	483c      	ldr	r0, [pc, #240]	; (80065cc <HAL_TIM_Base_Init+0x23c>)
 80064dc:	f7fb ffcb 	bl	8002476 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	699b      	ldr	r3, [r3, #24]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d008      	beq.n	80064fa <HAL_TIM_Base_Init+0x16a>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	699b      	ldr	r3, [r3, #24]
 80064ec:	2b80      	cmp	r3, #128	; 0x80
 80064ee:	d004      	beq.n	80064fa <HAL_TIM_Base_Init+0x16a>
 80064f0:	f44f 718d 	mov.w	r1, #282	; 0x11a
 80064f4:	4835      	ldr	r0, [pc, #212]	; (80065cc <HAL_TIM_Base_Init+0x23c>)
 80064f6:	f7fb ffbe 	bl	8002476 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006500:	b2db      	uxtb	r3, r3
 8006502:	2b00      	cmp	r3, #0
 8006504:	d106      	bne.n	8006514 <HAL_TIM_Base_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f7fc faf8 	bl	8002b04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2202      	movs	r2, #2
 8006518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	3304      	adds	r3, #4
 8006524:	4619      	mov	r1, r3
 8006526:	4610      	mov	r0, r2
 8006528:	f001 fa52 	bl	80079d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2201      	movs	r2, #1
 8006548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2201      	movs	r2, #1
 8006568:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2201      	movs	r2, #1
 8006570:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2201      	movs	r2, #1
 8006578:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2201      	movs	r2, #1
 8006580:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800658c:	2300      	movs	r3, #0
}
 800658e:	4618      	mov	r0, r3
 8006590:	3708      	adds	r7, #8
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	40010000 	.word	0x40010000
 800659c:	40000400 	.word	0x40000400
 80065a0:	40000800 	.word	0x40000800
 80065a4:	40000c00 	.word	0x40000c00
 80065a8:	40001000 	.word	0x40001000
 80065ac:	40001400 	.word	0x40001400
 80065b0:	40010400 	.word	0x40010400
 80065b4:	40014000 	.word	0x40014000
 80065b8:	40014400 	.word	0x40014400
 80065bc:	40014800 	.word	0x40014800
 80065c0:	40001800 	.word	0x40001800
 80065c4:	40001c00 	.word	0x40001c00
 80065c8:	40002000 	.word	0x40002000
 80065cc:	080145d0 	.word	0x080145d0

080065d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b082      	sub	sp, #8
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d101      	bne.n	80065e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	e0f5      	b.n	80067ce <HAL_TIM_PWM_Init+0x1fe>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a7c      	ldr	r2, [pc, #496]	; (80067d8 <HAL_TIM_PWM_Init+0x208>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d045      	beq.n	8006678 <HAL_TIM_PWM_Init+0xa8>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065f4:	d040      	beq.n	8006678 <HAL_TIM_PWM_Init+0xa8>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a78      	ldr	r2, [pc, #480]	; (80067dc <HAL_TIM_PWM_Init+0x20c>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d03b      	beq.n	8006678 <HAL_TIM_PWM_Init+0xa8>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a76      	ldr	r2, [pc, #472]	; (80067e0 <HAL_TIM_PWM_Init+0x210>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d036      	beq.n	8006678 <HAL_TIM_PWM_Init+0xa8>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a75      	ldr	r2, [pc, #468]	; (80067e4 <HAL_TIM_PWM_Init+0x214>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d031      	beq.n	8006678 <HAL_TIM_PWM_Init+0xa8>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a73      	ldr	r2, [pc, #460]	; (80067e8 <HAL_TIM_PWM_Init+0x218>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d02c      	beq.n	8006678 <HAL_TIM_PWM_Init+0xa8>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a72      	ldr	r2, [pc, #456]	; (80067ec <HAL_TIM_PWM_Init+0x21c>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d027      	beq.n	8006678 <HAL_TIM_PWM_Init+0xa8>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a70      	ldr	r2, [pc, #448]	; (80067f0 <HAL_TIM_PWM_Init+0x220>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d022      	beq.n	8006678 <HAL_TIM_PWM_Init+0xa8>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a6f      	ldr	r2, [pc, #444]	; (80067f4 <HAL_TIM_PWM_Init+0x224>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d01d      	beq.n	8006678 <HAL_TIM_PWM_Init+0xa8>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a6d      	ldr	r2, [pc, #436]	; (80067f8 <HAL_TIM_PWM_Init+0x228>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d018      	beq.n	8006678 <HAL_TIM_PWM_Init+0xa8>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a6c      	ldr	r2, [pc, #432]	; (80067fc <HAL_TIM_PWM_Init+0x22c>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d013      	beq.n	8006678 <HAL_TIM_PWM_Init+0xa8>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a6a      	ldr	r2, [pc, #424]	; (8006800 <HAL_TIM_PWM_Init+0x230>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d00e      	beq.n	8006678 <HAL_TIM_PWM_Init+0xa8>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a69      	ldr	r2, [pc, #420]	; (8006804 <HAL_TIM_PWM_Init+0x234>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d009      	beq.n	8006678 <HAL_TIM_PWM_Init+0xa8>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a67      	ldr	r2, [pc, #412]	; (8006808 <HAL_TIM_PWM_Init+0x238>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d004      	beq.n	8006678 <HAL_TIM_PWM_Init+0xa8>
 800666e:	f240 5133 	movw	r1, #1331	; 0x533
 8006672:	4866      	ldr	r0, [pc, #408]	; (800680c <HAL_TIM_PWM_Init+0x23c>)
 8006674:	f7fb feff 	bl	8002476 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d014      	beq.n	80066aa <HAL_TIM_PWM_Init+0xda>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	2b10      	cmp	r3, #16
 8006686:	d010      	beq.n	80066aa <HAL_TIM_PWM_Init+0xda>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	2b20      	cmp	r3, #32
 800668e:	d00c      	beq.n	80066aa <HAL_TIM_PWM_Init+0xda>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	2b40      	cmp	r3, #64	; 0x40
 8006696:	d008      	beq.n	80066aa <HAL_TIM_PWM_Init+0xda>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	2b60      	cmp	r3, #96	; 0x60
 800669e:	d004      	beq.n	80066aa <HAL_TIM_PWM_Init+0xda>
 80066a0:	f240 5134 	movw	r1, #1332	; 0x534
 80066a4:	4859      	ldr	r0, [pc, #356]	; (800680c <HAL_TIM_PWM_Init+0x23c>)
 80066a6:	f7fb fee6 	bl	8002476 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d00e      	beq.n	80066d0 <HAL_TIM_PWM_Init+0x100>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	691b      	ldr	r3, [r3, #16]
 80066b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066ba:	d009      	beq.n	80066d0 <HAL_TIM_PWM_Init+0x100>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	691b      	ldr	r3, [r3, #16]
 80066c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066c4:	d004      	beq.n	80066d0 <HAL_TIM_PWM_Init+0x100>
 80066c6:	f240 5135 	movw	r1, #1333	; 0x535
 80066ca:	4850      	ldr	r0, [pc, #320]	; (800680c <HAL_TIM_PWM_Init+0x23c>)
 80066cc:	f7fb fed3 	bl	8002476 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066d8:	d004      	beq.n	80066e4 <HAL_TIM_PWM_Init+0x114>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a41      	ldr	r2, [pc, #260]	; (80067e4 <HAL_TIM_PWM_Init+0x214>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d107      	bne.n	80066f4 <HAL_TIM_PWM_Init+0x124>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	bf14      	ite	ne
 80066ec:	2301      	movne	r3, #1
 80066ee:	2300      	moveq	r3, #0
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	e00e      	b.n	8006712 <HAL_TIM_PWM_Init+0x142>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d006      	beq.n	800670a <HAL_TIM_PWM_Init+0x13a>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006704:	d201      	bcs.n	800670a <HAL_TIM_PWM_Init+0x13a>
 8006706:	2301      	movs	r3, #1
 8006708:	e000      	b.n	800670c <HAL_TIM_PWM_Init+0x13c>
 800670a:	2300      	movs	r3, #0
 800670c:	f003 0301 	and.w	r3, r3, #1
 8006710:	b2db      	uxtb	r3, r3
 8006712:	2b00      	cmp	r3, #0
 8006714:	d104      	bne.n	8006720 <HAL_TIM_PWM_Init+0x150>
 8006716:	f240 5136 	movw	r1, #1334	; 0x536
 800671a:	483c      	ldr	r0, [pc, #240]	; (800680c <HAL_TIM_PWM_Init+0x23c>)
 800671c:	f7fb feab 	bl	8002476 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	699b      	ldr	r3, [r3, #24]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d008      	beq.n	800673a <HAL_TIM_PWM_Init+0x16a>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	699b      	ldr	r3, [r3, #24]
 800672c:	2b80      	cmp	r3, #128	; 0x80
 800672e:	d004      	beq.n	800673a <HAL_TIM_PWM_Init+0x16a>
 8006730:	f240 5137 	movw	r1, #1335	; 0x537
 8006734:	4835      	ldr	r0, [pc, #212]	; (800680c <HAL_TIM_PWM_Init+0x23c>)
 8006736:	f7fb fe9e 	bl	8002476 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006740:	b2db      	uxtb	r3, r3
 8006742:	2b00      	cmp	r3, #0
 8006744:	d106      	bne.n	8006754 <HAL_TIM_PWM_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 f85e 	bl	8006810 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2202      	movs	r2, #2
 8006758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	3304      	adds	r3, #4
 8006764:	4619      	mov	r1, r3
 8006766:	4610      	mov	r0, r2
 8006768:	f001 f932 	bl	80079d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2201      	movs	r2, #1
 8006780:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067cc:	2300      	movs	r3, #0
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3708      	adds	r7, #8
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	40010000 	.word	0x40010000
 80067dc:	40000400 	.word	0x40000400
 80067e0:	40000800 	.word	0x40000800
 80067e4:	40000c00 	.word	0x40000c00
 80067e8:	40001000 	.word	0x40001000
 80067ec:	40001400 	.word	0x40001400
 80067f0:	40010400 	.word	0x40010400
 80067f4:	40014000 	.word	0x40014000
 80067f8:	40014400 	.word	0x40014400
 80067fc:	40014800 	.word	0x40014800
 8006800:	40001800 	.word	0x40001800
 8006804:	40001c00 	.word	0x40001c00
 8006808:	40002000 	.word	0x40002000
 800680c:	080145d0 	.word	0x080145d0

08006810 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006818:	bf00      	nop
 800681a:	370c      	adds	r7, #12
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a89      	ldr	r2, [pc, #548]	; (8006a58 <HAL_TIM_PWM_Start+0x234>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d117      	bne.n	8006868 <HAL_TIM_PWM_Start+0x44>
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	2b00      	cmp	r3, #0
 800683c:	f000 80ae 	beq.w	800699c <HAL_TIM_PWM_Start+0x178>
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	2b04      	cmp	r3, #4
 8006844:	f000 80aa 	beq.w	800699c <HAL_TIM_PWM_Start+0x178>
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	2b08      	cmp	r3, #8
 800684c:	f000 80a6 	beq.w	800699c <HAL_TIM_PWM_Start+0x178>
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	2b0c      	cmp	r3, #12
 8006854:	f000 80a2 	beq.w	800699c <HAL_TIM_PWM_Start+0x178>
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	2b10      	cmp	r3, #16
 800685c:	f000 809e 	beq.w	800699c <HAL_TIM_PWM_Start+0x178>
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	2b14      	cmp	r3, #20
 8006864:	f000 809a 	beq.w	800699c <HAL_TIM_PWM_Start+0x178>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006870:	d10f      	bne.n	8006892 <HAL_TIM_PWM_Start+0x6e>
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	2b00      	cmp	r3, #0
 8006876:	f000 8091 	beq.w	800699c <HAL_TIM_PWM_Start+0x178>
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	2b04      	cmp	r3, #4
 800687e:	f000 808d 	beq.w	800699c <HAL_TIM_PWM_Start+0x178>
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	2b08      	cmp	r3, #8
 8006886:	f000 8089 	beq.w	800699c <HAL_TIM_PWM_Start+0x178>
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	2b0c      	cmp	r3, #12
 800688e:	f000 8085 	beq.w	800699c <HAL_TIM_PWM_Start+0x178>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a71      	ldr	r2, [pc, #452]	; (8006a5c <HAL_TIM_PWM_Start+0x238>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d10b      	bne.n	80068b4 <HAL_TIM_PWM_Start+0x90>
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d07c      	beq.n	800699c <HAL_TIM_PWM_Start+0x178>
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	2b04      	cmp	r3, #4
 80068a6:	d079      	beq.n	800699c <HAL_TIM_PWM_Start+0x178>
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	2b08      	cmp	r3, #8
 80068ac:	d076      	beq.n	800699c <HAL_TIM_PWM_Start+0x178>
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	2b0c      	cmp	r3, #12
 80068b2:	d073      	beq.n	800699c <HAL_TIM_PWM_Start+0x178>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a69      	ldr	r2, [pc, #420]	; (8006a60 <HAL_TIM_PWM_Start+0x23c>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d10b      	bne.n	80068d6 <HAL_TIM_PWM_Start+0xb2>
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d06b      	beq.n	800699c <HAL_TIM_PWM_Start+0x178>
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	2b04      	cmp	r3, #4
 80068c8:	d068      	beq.n	800699c <HAL_TIM_PWM_Start+0x178>
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	2b08      	cmp	r3, #8
 80068ce:	d065      	beq.n	800699c <HAL_TIM_PWM_Start+0x178>
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	2b0c      	cmp	r3, #12
 80068d4:	d062      	beq.n	800699c <HAL_TIM_PWM_Start+0x178>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a62      	ldr	r2, [pc, #392]	; (8006a64 <HAL_TIM_PWM_Start+0x240>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d10b      	bne.n	80068f8 <HAL_TIM_PWM_Start+0xd4>
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d05a      	beq.n	800699c <HAL_TIM_PWM_Start+0x178>
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	2b04      	cmp	r3, #4
 80068ea:	d057      	beq.n	800699c <HAL_TIM_PWM_Start+0x178>
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	2b08      	cmp	r3, #8
 80068f0:	d054      	beq.n	800699c <HAL_TIM_PWM_Start+0x178>
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	2b0c      	cmp	r3, #12
 80068f6:	d051      	beq.n	800699c <HAL_TIM_PWM_Start+0x178>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a5a      	ldr	r2, [pc, #360]	; (8006a68 <HAL_TIM_PWM_Start+0x244>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d111      	bne.n	8006926 <HAL_TIM_PWM_Start+0x102>
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d049      	beq.n	800699c <HAL_TIM_PWM_Start+0x178>
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	2b04      	cmp	r3, #4
 800690c:	d046      	beq.n	800699c <HAL_TIM_PWM_Start+0x178>
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	2b08      	cmp	r3, #8
 8006912:	d043      	beq.n	800699c <HAL_TIM_PWM_Start+0x178>
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	2b0c      	cmp	r3, #12
 8006918:	d040      	beq.n	800699c <HAL_TIM_PWM_Start+0x178>
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	2b10      	cmp	r3, #16
 800691e:	d03d      	beq.n	800699c <HAL_TIM_PWM_Start+0x178>
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	2b14      	cmp	r3, #20
 8006924:	d03a      	beq.n	800699c <HAL_TIM_PWM_Start+0x178>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a50      	ldr	r2, [pc, #320]	; (8006a6c <HAL_TIM_PWM_Start+0x248>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d105      	bne.n	800693c <HAL_TIM_PWM_Start+0x118>
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d032      	beq.n	800699c <HAL_TIM_PWM_Start+0x178>
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	2b04      	cmp	r3, #4
 800693a:	d02f      	beq.n	800699c <HAL_TIM_PWM_Start+0x178>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a4b      	ldr	r2, [pc, #300]	; (8006a70 <HAL_TIM_PWM_Start+0x24c>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d102      	bne.n	800694c <HAL_TIM_PWM_Start+0x128>
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d027      	beq.n	800699c <HAL_TIM_PWM_Start+0x178>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a48      	ldr	r2, [pc, #288]	; (8006a74 <HAL_TIM_PWM_Start+0x250>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d102      	bne.n	800695c <HAL_TIM_PWM_Start+0x138>
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d01f      	beq.n	800699c <HAL_TIM_PWM_Start+0x178>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a45      	ldr	r2, [pc, #276]	; (8006a78 <HAL_TIM_PWM_Start+0x254>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d105      	bne.n	8006972 <HAL_TIM_PWM_Start+0x14e>
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d017      	beq.n	800699c <HAL_TIM_PWM_Start+0x178>
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	2b04      	cmp	r3, #4
 8006970:	d014      	beq.n	800699c <HAL_TIM_PWM_Start+0x178>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a41      	ldr	r2, [pc, #260]	; (8006a7c <HAL_TIM_PWM_Start+0x258>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d102      	bne.n	8006982 <HAL_TIM_PWM_Start+0x15e>
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d00c      	beq.n	800699c <HAL_TIM_PWM_Start+0x178>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a3e      	ldr	r2, [pc, #248]	; (8006a80 <HAL_TIM_PWM_Start+0x25c>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d102      	bne.n	8006992 <HAL_TIM_PWM_Start+0x16e>
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d004      	beq.n	800699c <HAL_TIM_PWM_Start+0x178>
 8006992:	f240 51bc 	movw	r1, #1468	; 0x5bc
 8006996:	483b      	ldr	r0, [pc, #236]	; (8006a84 <HAL_TIM_PWM_Start+0x260>)
 8006998:	f7fb fd6d 	bl	8002476 <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d109      	bne.n	80069b6 <HAL_TIM_PWM_Start+0x192>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	bf14      	ite	ne
 80069ae:	2301      	movne	r3, #1
 80069b0:	2300      	moveq	r3, #0
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	e03c      	b.n	8006a30 <HAL_TIM_PWM_Start+0x20c>
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	2b04      	cmp	r3, #4
 80069ba:	d109      	bne.n	80069d0 <HAL_TIM_PWM_Start+0x1ac>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	bf14      	ite	ne
 80069c8:	2301      	movne	r3, #1
 80069ca:	2300      	moveq	r3, #0
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	e02f      	b.n	8006a30 <HAL_TIM_PWM_Start+0x20c>
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	2b08      	cmp	r3, #8
 80069d4:	d109      	bne.n	80069ea <HAL_TIM_PWM_Start+0x1c6>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	2b01      	cmp	r3, #1
 80069e0:	bf14      	ite	ne
 80069e2:	2301      	movne	r3, #1
 80069e4:	2300      	moveq	r3, #0
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	e022      	b.n	8006a30 <HAL_TIM_PWM_Start+0x20c>
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	2b0c      	cmp	r3, #12
 80069ee:	d109      	bne.n	8006a04 <HAL_TIM_PWM_Start+0x1e0>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	bf14      	ite	ne
 80069fc:	2301      	movne	r3, #1
 80069fe:	2300      	moveq	r3, #0
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	e015      	b.n	8006a30 <HAL_TIM_PWM_Start+0x20c>
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	2b10      	cmp	r3, #16
 8006a08:	d109      	bne.n	8006a1e <HAL_TIM_PWM_Start+0x1fa>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	bf14      	ite	ne
 8006a16:	2301      	movne	r3, #1
 8006a18:	2300      	moveq	r3, #0
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	e008      	b.n	8006a30 <HAL_TIM_PWM_Start+0x20c>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	bf14      	ite	ne
 8006a2a:	2301      	movne	r3, #1
 8006a2c:	2300      	moveq	r3, #0
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d001      	beq.n	8006a38 <HAL_TIM_PWM_Start+0x214>
  {
    return HAL_ERROR;
 8006a34:	2301      	movs	r3, #1
 8006a36:	e0aa      	b.n	8006b8e <HAL_TIM_PWM_Start+0x36a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d104      	bne.n	8006a48 <HAL_TIM_PWM_Start+0x224>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2202      	movs	r2, #2
 8006a42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a46:	e03b      	b.n	8006ac0 <HAL_TIM_PWM_Start+0x29c>
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	2b04      	cmp	r3, #4
 8006a4c:	d11c      	bne.n	8006a88 <HAL_TIM_PWM_Start+0x264>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2202      	movs	r2, #2
 8006a52:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a56:	e033      	b.n	8006ac0 <HAL_TIM_PWM_Start+0x29c>
 8006a58:	40010000 	.word	0x40010000
 8006a5c:	40000400 	.word	0x40000400
 8006a60:	40000800 	.word	0x40000800
 8006a64:	40000c00 	.word	0x40000c00
 8006a68:	40010400 	.word	0x40010400
 8006a6c:	40014000 	.word	0x40014000
 8006a70:	40014400 	.word	0x40014400
 8006a74:	40014800 	.word	0x40014800
 8006a78:	40001800 	.word	0x40001800
 8006a7c:	40001c00 	.word	0x40001c00
 8006a80:	40002000 	.word	0x40002000
 8006a84:	080145d0 	.word	0x080145d0
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	2b08      	cmp	r3, #8
 8006a8c:	d104      	bne.n	8006a98 <HAL_TIM_PWM_Start+0x274>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2202      	movs	r2, #2
 8006a92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a96:	e013      	b.n	8006ac0 <HAL_TIM_PWM_Start+0x29c>
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	2b0c      	cmp	r3, #12
 8006a9c:	d104      	bne.n	8006aa8 <HAL_TIM_PWM_Start+0x284>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2202      	movs	r2, #2
 8006aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006aa6:	e00b      	b.n	8006ac0 <HAL_TIM_PWM_Start+0x29c>
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	2b10      	cmp	r3, #16
 8006aac:	d104      	bne.n	8006ab8 <HAL_TIM_PWM_Start+0x294>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2202      	movs	r2, #2
 8006ab2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ab6:	e003      	b.n	8006ac0 <HAL_TIM_PWM_Start+0x29c>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2202      	movs	r2, #2
 8006abc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	6839      	ldr	r1, [r7, #0]
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f001 fba3 	bl	8008214 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a31      	ldr	r2, [pc, #196]	; (8006b98 <HAL_TIM_PWM_Start+0x374>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d004      	beq.n	8006ae2 <HAL_TIM_PWM_Start+0x2be>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a2f      	ldr	r2, [pc, #188]	; (8006b9c <HAL_TIM_PWM_Start+0x378>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d101      	bne.n	8006ae6 <HAL_TIM_PWM_Start+0x2c2>
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e000      	b.n	8006ae8 <HAL_TIM_PWM_Start+0x2c4>
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d007      	beq.n	8006afc <HAL_TIM_PWM_Start+0x2d8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006afa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a25      	ldr	r2, [pc, #148]	; (8006b98 <HAL_TIM_PWM_Start+0x374>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d022      	beq.n	8006b4c <HAL_TIM_PWM_Start+0x328>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b0e:	d01d      	beq.n	8006b4c <HAL_TIM_PWM_Start+0x328>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a22      	ldr	r2, [pc, #136]	; (8006ba0 <HAL_TIM_PWM_Start+0x37c>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d018      	beq.n	8006b4c <HAL_TIM_PWM_Start+0x328>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a21      	ldr	r2, [pc, #132]	; (8006ba4 <HAL_TIM_PWM_Start+0x380>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d013      	beq.n	8006b4c <HAL_TIM_PWM_Start+0x328>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a1f      	ldr	r2, [pc, #124]	; (8006ba8 <HAL_TIM_PWM_Start+0x384>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d00e      	beq.n	8006b4c <HAL_TIM_PWM_Start+0x328>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a1a      	ldr	r2, [pc, #104]	; (8006b9c <HAL_TIM_PWM_Start+0x378>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d009      	beq.n	8006b4c <HAL_TIM_PWM_Start+0x328>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a1b      	ldr	r2, [pc, #108]	; (8006bac <HAL_TIM_PWM_Start+0x388>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d004      	beq.n	8006b4c <HAL_TIM_PWM_Start+0x328>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a1a      	ldr	r2, [pc, #104]	; (8006bb0 <HAL_TIM_PWM_Start+0x38c>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d115      	bne.n	8006b78 <HAL_TIM_PWM_Start+0x354>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	689a      	ldr	r2, [r3, #8]
 8006b52:	4b18      	ldr	r3, [pc, #96]	; (8006bb4 <HAL_TIM_PWM_Start+0x390>)
 8006b54:	4013      	ands	r3, r2
 8006b56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2b06      	cmp	r3, #6
 8006b5c:	d015      	beq.n	8006b8a <HAL_TIM_PWM_Start+0x366>
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b64:	d011      	beq.n	8006b8a <HAL_TIM_PWM_Start+0x366>
    {
      __HAL_TIM_ENABLE(htim);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f042 0201 	orr.w	r2, r2, #1
 8006b74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b76:	e008      	b.n	8006b8a <HAL_TIM_PWM_Start+0x366>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f042 0201 	orr.w	r2, r2, #1
 8006b86:	601a      	str	r2, [r3, #0]
 8006b88:	e000      	b.n	8006b8c <HAL_TIM_PWM_Start+0x368>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b8a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006b8c:	2300      	movs	r3, #0
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3710      	adds	r7, #16
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop
 8006b98:	40010000 	.word	0x40010000
 8006b9c:	40010400 	.word	0x40010400
 8006ba0:	40000400 	.word	0x40000400
 8006ba4:	40000800 	.word	0x40000800
 8006ba8:	40000c00 	.word	0x40000c00
 8006bac:	40014000 	.word	0x40014000
 8006bb0:	40001800 	.word	0x40001800
 8006bb4:	00010007 	.word	0x00010007

08006bb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b082      	sub	sp, #8
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	f003 0302 	and.w	r3, r3, #2
 8006bca:	2b02      	cmp	r3, #2
 8006bcc:	d122      	bne.n	8006c14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	f003 0302 	and.w	r3, r3, #2
 8006bd8:	2b02      	cmp	r3, #2
 8006bda:	d11b      	bne.n	8006c14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f06f 0202 	mvn.w	r2, #2
 8006be4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2201      	movs	r2, #1
 8006bea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	699b      	ldr	r3, [r3, #24]
 8006bf2:	f003 0303 	and.w	r3, r3, #3
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d003      	beq.n	8006c02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 feca 	bl	8007994 <HAL_TIM_IC_CaptureCallback>
 8006c00:	e005      	b.n	8006c0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 febc 	bl	8007980 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f000 fecd 	bl	80079a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2200      	movs	r2, #0
 8006c12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	691b      	ldr	r3, [r3, #16]
 8006c1a:	f003 0304 	and.w	r3, r3, #4
 8006c1e:	2b04      	cmp	r3, #4
 8006c20:	d122      	bne.n	8006c68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	f003 0304 	and.w	r3, r3, #4
 8006c2c:	2b04      	cmp	r3, #4
 8006c2e:	d11b      	bne.n	8006c68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f06f 0204 	mvn.w	r2, #4
 8006c38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2202      	movs	r2, #2
 8006c3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	699b      	ldr	r3, [r3, #24]
 8006c46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d003      	beq.n	8006c56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f000 fea0 	bl	8007994 <HAL_TIM_IC_CaptureCallback>
 8006c54:	e005      	b.n	8006c62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 fe92 	bl	8007980 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f000 fea3 	bl	80079a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	691b      	ldr	r3, [r3, #16]
 8006c6e:	f003 0308 	and.w	r3, r3, #8
 8006c72:	2b08      	cmp	r3, #8
 8006c74:	d122      	bne.n	8006cbc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	f003 0308 	and.w	r3, r3, #8
 8006c80:	2b08      	cmp	r3, #8
 8006c82:	d11b      	bne.n	8006cbc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f06f 0208 	mvn.w	r2, #8
 8006c8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2204      	movs	r2, #4
 8006c92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	69db      	ldr	r3, [r3, #28]
 8006c9a:	f003 0303 	and.w	r3, r3, #3
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d003      	beq.n	8006caa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f000 fe76 	bl	8007994 <HAL_TIM_IC_CaptureCallback>
 8006ca8:	e005      	b.n	8006cb6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 fe68 	bl	8007980 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f000 fe79 	bl	80079a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	691b      	ldr	r3, [r3, #16]
 8006cc2:	f003 0310 	and.w	r3, r3, #16
 8006cc6:	2b10      	cmp	r3, #16
 8006cc8:	d122      	bne.n	8006d10 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	68db      	ldr	r3, [r3, #12]
 8006cd0:	f003 0310 	and.w	r3, r3, #16
 8006cd4:	2b10      	cmp	r3, #16
 8006cd6:	d11b      	bne.n	8006d10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f06f 0210 	mvn.w	r2, #16
 8006ce0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2208      	movs	r2, #8
 8006ce6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	69db      	ldr	r3, [r3, #28]
 8006cee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d003      	beq.n	8006cfe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 fe4c 	bl	8007994 <HAL_TIM_IC_CaptureCallback>
 8006cfc:	e005      	b.n	8006d0a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 fe3e 	bl	8007980 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f000 fe4f 	bl	80079a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	691b      	ldr	r3, [r3, #16]
 8006d16:	f003 0301 	and.w	r3, r3, #1
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d10e      	bne.n	8006d3c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	68db      	ldr	r3, [r3, #12]
 8006d24:	f003 0301 	and.w	r3, r3, #1
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d107      	bne.n	8006d3c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f06f 0201 	mvn.w	r2, #1
 8006d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 fe18 	bl	800796c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	691b      	ldr	r3, [r3, #16]
 8006d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d46:	2b80      	cmp	r3, #128	; 0x80
 8006d48:	d10e      	bne.n	8006d68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	68db      	ldr	r3, [r3, #12]
 8006d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d54:	2b80      	cmp	r3, #128	; 0x80
 8006d56:	d107      	bne.n	8006d68 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f001 fc42 	bl	80085ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	691b      	ldr	r3, [r3, #16]
 8006d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d76:	d10e      	bne.n	8006d96 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	68db      	ldr	r3, [r3, #12]
 8006d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d82:	2b80      	cmp	r3, #128	; 0x80
 8006d84:	d107      	bne.n	8006d96 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006d8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f001 fc35 	bl	8008600 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	691b      	ldr	r3, [r3, #16]
 8006d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006da0:	2b40      	cmp	r3, #64	; 0x40
 8006da2:	d10e      	bne.n	8006dc2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dae:	2b40      	cmp	r3, #64	; 0x40
 8006db0:	d107      	bne.n	8006dc2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006dba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f000 fdfd 	bl	80079bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	691b      	ldr	r3, [r3, #16]
 8006dc8:	f003 0320 	and.w	r3, r3, #32
 8006dcc:	2b20      	cmp	r3, #32
 8006dce:	d10e      	bne.n	8006dee <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	68db      	ldr	r3, [r3, #12]
 8006dd6:	f003 0320 	and.w	r3, r3, #32
 8006dda:	2b20      	cmp	r3, #32
 8006ddc:	d107      	bne.n	8006dee <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f06f 0220 	mvn.w	r2, #32
 8006de6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f001 fbf5 	bl	80085d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006dee:	bf00      	nop
 8006df0:	3708      	adds	r7, #8
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
	...

08006df8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b086      	sub	sp, #24
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	60b9      	str	r1, [r7, #8]
 8006e02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e04:	2300      	movs	r3, #0
 8006e06:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d016      	beq.n	8006e3c <HAL_TIM_PWM_ConfigChannel+0x44>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2b04      	cmp	r3, #4
 8006e12:	d013      	beq.n	8006e3c <HAL_TIM_PWM_ConfigChannel+0x44>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2b08      	cmp	r3, #8
 8006e18:	d010      	beq.n	8006e3c <HAL_TIM_PWM_ConfigChannel+0x44>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2b0c      	cmp	r3, #12
 8006e1e:	d00d      	beq.n	8006e3c <HAL_TIM_PWM_ConfigChannel+0x44>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2b10      	cmp	r3, #16
 8006e24:	d00a      	beq.n	8006e3c <HAL_TIM_PWM_ConfigChannel+0x44>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2b14      	cmp	r3, #20
 8006e2a:	d007      	beq.n	8006e3c <HAL_TIM_PWM_ConfigChannel+0x44>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2b3c      	cmp	r3, #60	; 0x3c
 8006e30:	d004      	beq.n	8006e3c <HAL_TIM_PWM_ConfigChannel+0x44>
 8006e32:	f241 01af 	movw	r1, #4271	; 0x10af
 8006e36:	4895      	ldr	r0, [pc, #596]	; (800708c <HAL_TIM_PWM_ConfigChannel+0x294>)
 8006e38:	f7fb fb1d 	bl	8002476 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	2b60      	cmp	r3, #96	; 0x60
 8006e42:	d01c      	beq.n	8006e7e <HAL_TIM_PWM_ConfigChannel+0x86>
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	2b70      	cmp	r3, #112	; 0x70
 8006e4a:	d018      	beq.n	8006e7e <HAL_TIM_PWM_ConfigChannel+0x86>
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a8f      	ldr	r2, [pc, #572]	; (8007090 <HAL_TIM_PWM_ConfigChannel+0x298>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d013      	beq.n	8006e7e <HAL_TIM_PWM_ConfigChannel+0x86>
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a8e      	ldr	r2, [pc, #568]	; (8007094 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d00e      	beq.n	8006e7e <HAL_TIM_PWM_ConfigChannel+0x86>
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a8c      	ldr	r2, [pc, #560]	; (8007098 <HAL_TIM_PWM_ConfigChannel+0x2a0>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d009      	beq.n	8006e7e <HAL_TIM_PWM_ConfigChannel+0x86>
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a8b      	ldr	r2, [pc, #556]	; (800709c <HAL_TIM_PWM_ConfigChannel+0x2a4>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d004      	beq.n	8006e7e <HAL_TIM_PWM_ConfigChannel+0x86>
 8006e74:	f241 01b0 	movw	r1, #4272	; 0x10b0
 8006e78:	4884      	ldr	r0, [pc, #528]	; (800708c <HAL_TIM_PWM_ConfigChannel+0x294>)
 8006e7a:	f7fb fafc 	bl	8002476 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d008      	beq.n	8006e98 <HAL_TIM_PWM_ConfigChannel+0xa0>
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	2b02      	cmp	r3, #2
 8006e8c:	d004      	beq.n	8006e98 <HAL_TIM_PWM_ConfigChannel+0xa0>
 8006e8e:	f241 01b1 	movw	r1, #4273	; 0x10b1
 8006e92:	487e      	ldr	r0, [pc, #504]	; (800708c <HAL_TIM_PWM_ConfigChannel+0x294>)
 8006e94:	f7fb faef 	bl	8002476 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	691b      	ldr	r3, [r3, #16]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d008      	beq.n	8006eb2 <HAL_TIM_PWM_ConfigChannel+0xba>
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	691b      	ldr	r3, [r3, #16]
 8006ea4:	2b04      	cmp	r3, #4
 8006ea6:	d004      	beq.n	8006eb2 <HAL_TIM_PWM_ConfigChannel+0xba>
 8006ea8:	f241 01b2 	movw	r1, #4274	; 0x10b2
 8006eac:	4877      	ldr	r0, [pc, #476]	; (800708c <HAL_TIM_PWM_ConfigChannel+0x294>)
 8006eae:	f7fb fae2 	bl	8002476 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d101      	bne.n	8006ec0 <HAL_TIM_PWM_ConfigChannel+0xc8>
 8006ebc:	2302      	movs	r3, #2
 8006ebe:	e1f3      	b.n	80072a8 <HAL_TIM_PWM_ConfigChannel+0x4b0>
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2b14      	cmp	r3, #20
 8006ecc:	f200 81e4 	bhi.w	8007298 <HAL_TIM_PWM_ConfigChannel+0x4a0>
 8006ed0:	a201      	add	r2, pc, #4	; (adr r2, 8006ed8 <HAL_TIM_PWM_ConfigChannel+0xe0>)
 8006ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ed6:	bf00      	nop
 8006ed8:	08006f2d 	.word	0x08006f2d
 8006edc:	08007299 	.word	0x08007299
 8006ee0:	08007299 	.word	0x08007299
 8006ee4:	08007299 	.word	0x08007299
 8006ee8:	08006fef 	.word	0x08006fef
 8006eec:	08007299 	.word	0x08007299
 8006ef0:	08007299 	.word	0x08007299
 8006ef4:	08007299 	.word	0x08007299
 8006ef8:	080070cd 	.word	0x080070cd
 8006efc:	08007299 	.word	0x08007299
 8006f00:	08007299 	.word	0x08007299
 8006f04:	08007299 	.word	0x08007299
 8006f08:	08007153 	.word	0x08007153
 8006f0c:	08007299 	.word	0x08007299
 8006f10:	08007299 	.word	0x08007299
 8006f14:	08007299 	.word	0x08007299
 8006f18:	080071db 	.word	0x080071db
 8006f1c:	08007299 	.word	0x08007299
 8006f20:	08007299 	.word	0x08007299
 8006f24:	08007299 	.word	0x08007299
 8006f28:	08007239 	.word	0x08007239
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a5b      	ldr	r2, [pc, #364]	; (80070a0 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d03b      	beq.n	8006fae <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f3e:	d036      	beq.n	8006fae <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a57      	ldr	r2, [pc, #348]	; (80070a4 <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d031      	beq.n	8006fae <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a56      	ldr	r2, [pc, #344]	; (80070a8 <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d02c      	beq.n	8006fae <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a54      	ldr	r2, [pc, #336]	; (80070ac <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d027      	beq.n	8006fae <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a53      	ldr	r2, [pc, #332]	; (80070b0 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d022      	beq.n	8006fae <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a51      	ldr	r2, [pc, #324]	; (80070b4 <HAL_TIM_PWM_ConfigChannel+0x2bc>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d01d      	beq.n	8006fae <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a50      	ldr	r2, [pc, #320]	; (80070b8 <HAL_TIM_PWM_ConfigChannel+0x2c0>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d018      	beq.n	8006fae <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a4e      	ldr	r2, [pc, #312]	; (80070bc <HAL_TIM_PWM_ConfigChannel+0x2c4>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d013      	beq.n	8006fae <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a4d      	ldr	r2, [pc, #308]	; (80070c0 <HAL_TIM_PWM_ConfigChannel+0x2c8>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d00e      	beq.n	8006fae <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a4b      	ldr	r2, [pc, #300]	; (80070c4 <HAL_TIM_PWM_ConfigChannel+0x2cc>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d009      	beq.n	8006fae <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a4a      	ldr	r2, [pc, #296]	; (80070c8 <HAL_TIM_PWM_ConfigChannel+0x2d0>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d004      	beq.n	8006fae <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8006fa4:	f241 01bc 	movw	r1, #4284	; 0x10bc
 8006fa8:	4838      	ldr	r0, [pc, #224]	; (800708c <HAL_TIM_PWM_ConfigChannel+0x294>)
 8006faa:	f7fb fa64 	bl	8002476 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	68b9      	ldr	r1, [r7, #8]
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f000 fdab 	bl	8007b10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	699a      	ldr	r2, [r3, #24]
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f042 0208 	orr.w	r2, r2, #8
 8006fc8:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	699a      	ldr	r2, [r3, #24]
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f022 0204 	bic.w	r2, r2, #4
 8006fd8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	6999      	ldr	r1, [r3, #24]
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	691a      	ldr	r2, [r3, #16]
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	430a      	orrs	r2, r1
 8006fea:	619a      	str	r2, [r3, #24]
      break;
 8006fec:	e157      	b.n	800729e <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a2b      	ldr	r2, [pc, #172]	; (80070a0 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d027      	beq.n	8007048 <HAL_TIM_PWM_ConfigChannel+0x250>
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007000:	d022      	beq.n	8007048 <HAL_TIM_PWM_ConfigChannel+0x250>
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a27      	ldr	r2, [pc, #156]	; (80070a4 <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d01d      	beq.n	8007048 <HAL_TIM_PWM_ConfigChannel+0x250>
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a25      	ldr	r2, [pc, #148]	; (80070a8 <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d018      	beq.n	8007048 <HAL_TIM_PWM_ConfigChannel+0x250>
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a24      	ldr	r2, [pc, #144]	; (80070ac <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d013      	beq.n	8007048 <HAL_TIM_PWM_ConfigChannel+0x250>
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a22      	ldr	r2, [pc, #136]	; (80070b0 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d00e      	beq.n	8007048 <HAL_TIM_PWM_ConfigChannel+0x250>
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a21      	ldr	r2, [pc, #132]	; (80070b4 <HAL_TIM_PWM_ConfigChannel+0x2bc>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d009      	beq.n	8007048 <HAL_TIM_PWM_ConfigChannel+0x250>
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a21      	ldr	r2, [pc, #132]	; (80070c0 <HAL_TIM_PWM_ConfigChannel+0x2c8>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d004      	beq.n	8007048 <HAL_TIM_PWM_ConfigChannel+0x250>
 800703e:	f241 01cd 	movw	r1, #4301	; 0x10cd
 8007042:	4812      	ldr	r0, [pc, #72]	; (800708c <HAL_TIM_PWM_ConfigChannel+0x294>)
 8007044:	f7fb fa17 	bl	8002476 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	68b9      	ldr	r1, [r7, #8]
 800704e:	4618      	mov	r0, r3
 8007050:	f000 fdfa 	bl	8007c48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	699a      	ldr	r2, [r3, #24]
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007062:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	699a      	ldr	r2, [r3, #24]
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007072:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	6999      	ldr	r1, [r3, #24]
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	691b      	ldr	r3, [r3, #16]
 800707e:	021a      	lsls	r2, r3, #8
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	430a      	orrs	r2, r1
 8007086:	619a      	str	r2, [r3, #24]
      break;
 8007088:	e109      	b.n	800729e <HAL_TIM_PWM_ConfigChannel+0x4a6>
 800708a:	bf00      	nop
 800708c:	080145d0 	.word	0x080145d0
 8007090:	00010040 	.word	0x00010040
 8007094:	00010050 	.word	0x00010050
 8007098:	00010060 	.word	0x00010060
 800709c:	00010070 	.word	0x00010070
 80070a0:	40010000 	.word	0x40010000
 80070a4:	40000400 	.word	0x40000400
 80070a8:	40000800 	.word	0x40000800
 80070ac:	40000c00 	.word	0x40000c00
 80070b0:	40010400 	.word	0x40010400
 80070b4:	40014000 	.word	0x40014000
 80070b8:	40014400 	.word	0x40014400
 80070bc:	40014800 	.word	0x40014800
 80070c0:	40001800 	.word	0x40001800
 80070c4:	40001c00 	.word	0x40001c00
 80070c8:	40002000 	.word	0x40002000
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a77      	ldr	r2, [pc, #476]	; (80072b0 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d01d      	beq.n	8007112 <HAL_TIM_PWM_ConfigChannel+0x31a>
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070de:	d018      	beq.n	8007112 <HAL_TIM_PWM_ConfigChannel+0x31a>
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a73      	ldr	r2, [pc, #460]	; (80072b4 <HAL_TIM_PWM_ConfigChannel+0x4bc>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d013      	beq.n	8007112 <HAL_TIM_PWM_ConfigChannel+0x31a>
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a72      	ldr	r2, [pc, #456]	; (80072b8 <HAL_TIM_PWM_ConfigChannel+0x4c0>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d00e      	beq.n	8007112 <HAL_TIM_PWM_ConfigChannel+0x31a>
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a70      	ldr	r2, [pc, #448]	; (80072bc <HAL_TIM_PWM_ConfigChannel+0x4c4>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d009      	beq.n	8007112 <HAL_TIM_PWM_ConfigChannel+0x31a>
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a6f      	ldr	r2, [pc, #444]	; (80072c0 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d004      	beq.n	8007112 <HAL_TIM_PWM_ConfigChannel+0x31a>
 8007108:	f241 01de 	movw	r1, #4318	; 0x10de
 800710c:	486d      	ldr	r0, [pc, #436]	; (80072c4 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 800710e:	f7fb f9b2 	bl	8002476 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	68b9      	ldr	r1, [r7, #8]
 8007118:	4618      	mov	r0, r3
 800711a:	f000 fe35 	bl	8007d88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	69da      	ldr	r2, [r3, #28]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f042 0208 	orr.w	r2, r2, #8
 800712c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	69da      	ldr	r2, [r3, #28]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f022 0204 	bic.w	r2, r2, #4
 800713c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	69d9      	ldr	r1, [r3, #28]
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	691a      	ldr	r2, [r3, #16]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	430a      	orrs	r2, r1
 800714e:	61da      	str	r2, [r3, #28]
      break;
 8007150:	e0a5      	b.n	800729e <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a56      	ldr	r2, [pc, #344]	; (80072b0 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d01d      	beq.n	8007198 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007164:	d018      	beq.n	8007198 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a52      	ldr	r2, [pc, #328]	; (80072b4 <HAL_TIM_PWM_ConfigChannel+0x4bc>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d013      	beq.n	8007198 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a50      	ldr	r2, [pc, #320]	; (80072b8 <HAL_TIM_PWM_ConfigChannel+0x4c0>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d00e      	beq.n	8007198 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a4f      	ldr	r2, [pc, #316]	; (80072bc <HAL_TIM_PWM_ConfigChannel+0x4c4>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d009      	beq.n	8007198 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a4d      	ldr	r2, [pc, #308]	; (80072c0 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d004      	beq.n	8007198 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 800718e:	f241 01ef 	movw	r1, #4335	; 0x10ef
 8007192:	484c      	ldr	r0, [pc, #304]	; (80072c4 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 8007194:	f7fb f96f 	bl	8002476 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	68b9      	ldr	r1, [r7, #8]
 800719e:	4618      	mov	r0, r3
 80071a0:	f000 fe92 	bl	8007ec8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	69da      	ldr	r2, [r3, #28]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071b2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	69da      	ldr	r2, [r3, #28]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071c2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	69d9      	ldr	r1, [r3, #28]
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	691b      	ldr	r3, [r3, #16]
 80071ce:	021a      	lsls	r2, r3, #8
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	430a      	orrs	r2, r1
 80071d6:	61da      	str	r2, [r3, #28]
      break;
 80071d8:	e061      	b.n	800729e <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a34      	ldr	r2, [pc, #208]	; (80072b0 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d009      	beq.n	80071f8 <HAL_TIM_PWM_ConfigChannel+0x400>
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a35      	ldr	r2, [pc, #212]	; (80072c0 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d004      	beq.n	80071f8 <HAL_TIM_PWM_ConfigChannel+0x400>
 80071ee:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 80071f2:	4834      	ldr	r0, [pc, #208]	; (80072c4 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 80071f4:	f7fb f93f 	bl	8002476 <assert_failed>

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	68b9      	ldr	r1, [r7, #8]
 80071fe:	4618      	mov	r0, r3
 8007200:	f000 fec8 	bl	8007f94 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f042 0208 	orr.w	r2, r2, #8
 8007212:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f022 0204 	bic.w	r2, r2, #4
 8007222:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	691a      	ldr	r2, [r3, #16]
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	430a      	orrs	r2, r1
 8007234:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007236:	e032      	b.n	800729e <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a1c      	ldr	r2, [pc, #112]	; (80072b0 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d009      	beq.n	8007256 <HAL_TIM_PWM_ConfigChannel+0x45e>
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a1e      	ldr	r2, [pc, #120]	; (80072c0 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d004      	beq.n	8007256 <HAL_TIM_PWM_ConfigChannel+0x45e>
 800724c:	f241 1111 	movw	r1, #4369	; 0x1111
 8007250:	481c      	ldr	r0, [pc, #112]	; (80072c4 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 8007252:	f7fb f910 	bl	8002476 <assert_failed>

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	68b9      	ldr	r1, [r7, #8]
 800725c:	4618      	mov	r0, r3
 800725e:	f000 feeb 	bl	8008038 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007270:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007280:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	691b      	ldr	r3, [r3, #16]
 800728c:	021a      	lsls	r2, r3, #8
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	430a      	orrs	r2, r1
 8007294:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007296:	e002      	b.n	800729e <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    default:
      status = HAL_ERROR;
 8007298:	2301      	movs	r3, #1
 800729a:	75fb      	strb	r3, [r7, #23]
      break;
 800729c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2200      	movs	r2, #0
 80072a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80072a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3718      	adds	r7, #24
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}
 80072b0:	40010000 	.word	0x40010000
 80072b4:	40000400 	.word	0x40000400
 80072b8:	40000800 	.word	0x40000800
 80072bc:	40000c00 	.word	0x40000c00
 80072c0:	40010400 	.word	0x40010400
 80072c4:	080145d0 	.word	0x080145d0

080072c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80072d2:	2300      	movs	r3, #0
 80072d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d101      	bne.n	80072e4 <HAL_TIM_ConfigClockSource+0x1c>
 80072e0:	2302      	movs	r3, #2
 80072e2:	e332      	b.n	800794a <HAL_TIM_ConfigClockSource+0x682>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2201      	movs	r2, #1
 80072e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2202      	movs	r2, #2
 80072f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072fc:	d029      	beq.n	8007352 <HAL_TIM_ConfigClockSource+0x8a>
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	2b70      	cmp	r3, #112	; 0x70
 8007304:	d025      	beq.n	8007352 <HAL_TIM_ConfigClockSource+0x8a>
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800730e:	d020      	beq.n	8007352 <HAL_TIM_ConfigClockSource+0x8a>
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	2b40      	cmp	r3, #64	; 0x40
 8007316:	d01c      	beq.n	8007352 <HAL_TIM_ConfigClockSource+0x8a>
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	2b50      	cmp	r3, #80	; 0x50
 800731e:	d018      	beq.n	8007352 <HAL_TIM_ConfigClockSource+0x8a>
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	2b60      	cmp	r3, #96	; 0x60
 8007326:	d014      	beq.n	8007352 <HAL_TIM_ConfigClockSource+0x8a>
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d010      	beq.n	8007352 <HAL_TIM_ConfigClockSource+0x8a>
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	2b10      	cmp	r3, #16
 8007336:	d00c      	beq.n	8007352 <HAL_TIM_ConfigClockSource+0x8a>
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	2b20      	cmp	r3, #32
 800733e:	d008      	beq.n	8007352 <HAL_TIM_ConfigClockSource+0x8a>
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	2b30      	cmp	r3, #48	; 0x30
 8007346:	d004      	beq.n	8007352 <HAL_TIM_ConfigClockSource+0x8a>
 8007348:	f241 514c 	movw	r1, #5452	; 0x154c
 800734c:	4893      	ldr	r0, [pc, #588]	; (800759c <HAL_TIM_ConfigClockSource+0x2d4>)
 800734e:	f7fb f892 	bl	8002476 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800735a:	68ba      	ldr	r2, [r7, #8]
 800735c:	4b90      	ldr	r3, [pc, #576]	; (80075a0 <HAL_TIM_ConfigClockSource+0x2d8>)
 800735e:	4013      	ands	r3, r2
 8007360:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007368:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	68ba      	ldr	r2, [r7, #8]
 8007370:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800737a:	f000 812d 	beq.w	80075d8 <HAL_TIM_ConfigClockSource+0x310>
 800737e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007382:	f200 82d5 	bhi.w	8007930 <HAL_TIM_ConfigClockSource+0x668>
 8007386:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800738a:	d02e      	beq.n	80073ea <HAL_TIM_ConfigClockSource+0x122>
 800738c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007390:	f200 82ce 	bhi.w	8007930 <HAL_TIM_ConfigClockSource+0x668>
 8007394:	2b70      	cmp	r3, #112	; 0x70
 8007396:	f000 8082 	beq.w	800749e <HAL_TIM_ConfigClockSource+0x1d6>
 800739a:	2b70      	cmp	r3, #112	; 0x70
 800739c:	f200 82c8 	bhi.w	8007930 <HAL_TIM_ConfigClockSource+0x668>
 80073a0:	2b60      	cmp	r3, #96	; 0x60
 80073a2:	f000 81e0 	beq.w	8007766 <HAL_TIM_ConfigClockSource+0x49e>
 80073a6:	2b60      	cmp	r3, #96	; 0x60
 80073a8:	f200 82c2 	bhi.w	8007930 <HAL_TIM_ConfigClockSource+0x668>
 80073ac:	2b50      	cmp	r3, #80	; 0x50
 80073ae:	f000 8184 	beq.w	80076ba <HAL_TIM_ConfigClockSource+0x3f2>
 80073b2:	2b50      	cmp	r3, #80	; 0x50
 80073b4:	f200 82bc 	bhi.w	8007930 <HAL_TIM_ConfigClockSource+0x668>
 80073b8:	2b40      	cmp	r3, #64	; 0x40
 80073ba:	f000 8237 	beq.w	800782c <HAL_TIM_ConfigClockSource+0x564>
 80073be:	2b40      	cmp	r3, #64	; 0x40
 80073c0:	f200 82b6 	bhi.w	8007930 <HAL_TIM_ConfigClockSource+0x668>
 80073c4:	2b30      	cmp	r3, #48	; 0x30
 80073c6:	f000 8287 	beq.w	80078d8 <HAL_TIM_ConfigClockSource+0x610>
 80073ca:	2b30      	cmp	r3, #48	; 0x30
 80073cc:	f200 82b0 	bhi.w	8007930 <HAL_TIM_ConfigClockSource+0x668>
 80073d0:	2b20      	cmp	r3, #32
 80073d2:	f000 8281 	beq.w	80078d8 <HAL_TIM_ConfigClockSource+0x610>
 80073d6:	2b20      	cmp	r3, #32
 80073d8:	f200 82aa 	bhi.w	8007930 <HAL_TIM_ConfigClockSource+0x668>
 80073dc:	2b00      	cmp	r3, #0
 80073de:	f000 827b 	beq.w	80078d8 <HAL_TIM_ConfigClockSource+0x610>
 80073e2:	2b10      	cmp	r3, #16
 80073e4:	f000 8278 	beq.w	80078d8 <HAL_TIM_ConfigClockSource+0x610>
 80073e8:	e2a2      	b.n	8007930 <HAL_TIM_ConfigClockSource+0x668>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a6d      	ldr	r2, [pc, #436]	; (80075a4 <HAL_TIM_ConfigClockSource+0x2dc>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	f000 82a0 	beq.w	8007936 <HAL_TIM_ConfigClockSource+0x66e>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073fe:	f000 829a 	beq.w	8007936 <HAL_TIM_ConfigClockSource+0x66e>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a68      	ldr	r2, [pc, #416]	; (80075a8 <HAL_TIM_ConfigClockSource+0x2e0>)
 8007408:	4293      	cmp	r3, r2
 800740a:	f000 8294 	beq.w	8007936 <HAL_TIM_ConfigClockSource+0x66e>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a66      	ldr	r2, [pc, #408]	; (80075ac <HAL_TIM_ConfigClockSource+0x2e4>)
 8007414:	4293      	cmp	r3, r2
 8007416:	f000 828e 	beq.w	8007936 <HAL_TIM_ConfigClockSource+0x66e>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a64      	ldr	r2, [pc, #400]	; (80075b0 <HAL_TIM_ConfigClockSource+0x2e8>)
 8007420:	4293      	cmp	r3, r2
 8007422:	f000 8288 	beq.w	8007936 <HAL_TIM_ConfigClockSource+0x66e>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a62      	ldr	r2, [pc, #392]	; (80075b4 <HAL_TIM_ConfigClockSource+0x2ec>)
 800742c:	4293      	cmp	r3, r2
 800742e:	f000 8282 	beq.w	8007936 <HAL_TIM_ConfigClockSource+0x66e>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a60      	ldr	r2, [pc, #384]	; (80075b8 <HAL_TIM_ConfigClockSource+0x2f0>)
 8007438:	4293      	cmp	r3, r2
 800743a:	f000 827c 	beq.w	8007936 <HAL_TIM_ConfigClockSource+0x66e>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a5e      	ldr	r2, [pc, #376]	; (80075bc <HAL_TIM_ConfigClockSource+0x2f4>)
 8007444:	4293      	cmp	r3, r2
 8007446:	f000 8276 	beq.w	8007936 <HAL_TIM_ConfigClockSource+0x66e>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4a5c      	ldr	r2, [pc, #368]	; (80075c0 <HAL_TIM_ConfigClockSource+0x2f8>)
 8007450:	4293      	cmp	r3, r2
 8007452:	f000 8270 	beq.w	8007936 <HAL_TIM_ConfigClockSource+0x66e>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a5a      	ldr	r2, [pc, #360]	; (80075c4 <HAL_TIM_ConfigClockSource+0x2fc>)
 800745c:	4293      	cmp	r3, r2
 800745e:	f000 826a 	beq.w	8007936 <HAL_TIM_ConfigClockSource+0x66e>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a58      	ldr	r2, [pc, #352]	; (80075c8 <HAL_TIM_ConfigClockSource+0x300>)
 8007468:	4293      	cmp	r3, r2
 800746a:	f000 8264 	beq.w	8007936 <HAL_TIM_ConfigClockSource+0x66e>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a56      	ldr	r2, [pc, #344]	; (80075cc <HAL_TIM_ConfigClockSource+0x304>)
 8007474:	4293      	cmp	r3, r2
 8007476:	f000 825e 	beq.w	8007936 <HAL_TIM_ConfigClockSource+0x66e>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a54      	ldr	r2, [pc, #336]	; (80075d0 <HAL_TIM_ConfigClockSource+0x308>)
 8007480:	4293      	cmp	r3, r2
 8007482:	f000 8258 	beq.w	8007936 <HAL_TIM_ConfigClockSource+0x66e>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a52      	ldr	r2, [pc, #328]	; (80075d4 <HAL_TIM_ConfigClockSource+0x30c>)
 800748c:	4293      	cmp	r3, r2
 800748e:	f000 8252 	beq.w	8007936 <HAL_TIM_ConfigClockSource+0x66e>
 8007492:	f241 5158 	movw	r1, #5464	; 0x1558
 8007496:	4841      	ldr	r0, [pc, #260]	; (800759c <HAL_TIM_ConfigClockSource+0x2d4>)
 8007498:	f7fa ffed 	bl	8002476 <assert_failed>
      break;
 800749c:	e24b      	b.n	8007936 <HAL_TIM_ConfigClockSource+0x66e>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a40      	ldr	r2, [pc, #256]	; (80075a4 <HAL_TIM_ConfigClockSource+0x2dc>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d027      	beq.n	80074f8 <HAL_TIM_ConfigClockSource+0x230>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074b0:	d022      	beq.n	80074f8 <HAL_TIM_ConfigClockSource+0x230>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a3c      	ldr	r2, [pc, #240]	; (80075a8 <HAL_TIM_ConfigClockSource+0x2e0>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d01d      	beq.n	80074f8 <HAL_TIM_ConfigClockSource+0x230>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a3a      	ldr	r2, [pc, #232]	; (80075ac <HAL_TIM_ConfigClockSource+0x2e4>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d018      	beq.n	80074f8 <HAL_TIM_ConfigClockSource+0x230>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a39      	ldr	r2, [pc, #228]	; (80075b0 <HAL_TIM_ConfigClockSource+0x2e8>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d013      	beq.n	80074f8 <HAL_TIM_ConfigClockSource+0x230>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a39      	ldr	r2, [pc, #228]	; (80075bc <HAL_TIM_ConfigClockSource+0x2f4>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d00e      	beq.n	80074f8 <HAL_TIM_ConfigClockSource+0x230>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a38      	ldr	r2, [pc, #224]	; (80075c0 <HAL_TIM_ConfigClockSource+0x2f8>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d009      	beq.n	80074f8 <HAL_TIM_ConfigClockSource+0x230>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a38      	ldr	r2, [pc, #224]	; (80075cc <HAL_TIM_ConfigClockSource+0x304>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d004      	beq.n	80074f8 <HAL_TIM_ConfigClockSource+0x230>
 80074ee:	f241 515f 	movw	r1, #5471	; 0x155f
 80074f2:	482a      	ldr	r0, [pc, #168]	; (800759c <HAL_TIM_ConfigClockSource+0x2d4>)
 80074f4:	f7fa ffbf 	bl	8002476 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	689b      	ldr	r3, [r3, #8]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d013      	beq.n	8007528 <HAL_TIM_ConfigClockSource+0x260>
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007508:	d00e      	beq.n	8007528 <HAL_TIM_ConfigClockSource+0x260>
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007512:	d009      	beq.n	8007528 <HAL_TIM_ConfigClockSource+0x260>
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800751c:	d004      	beq.n	8007528 <HAL_TIM_ConfigClockSource+0x260>
 800751e:	f241 5162 	movw	r1, #5474	; 0x1562
 8007522:	481e      	ldr	r0, [pc, #120]	; (800759c <HAL_TIM_ConfigClockSource+0x2d4>)
 8007524:	f7fa ffa7 	bl	8002476 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007530:	d014      	beq.n	800755c <HAL_TIM_ConfigClockSource+0x294>
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d010      	beq.n	800755c <HAL_TIM_ConfigClockSource+0x294>
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d00c      	beq.n	800755c <HAL_TIM_ConfigClockSource+0x294>
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	2b02      	cmp	r3, #2
 8007548:	d008      	beq.n	800755c <HAL_TIM_ConfigClockSource+0x294>
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	2b0a      	cmp	r3, #10
 8007550:	d004      	beq.n	800755c <HAL_TIM_ConfigClockSource+0x294>
 8007552:	f241 5163 	movw	r1, #5475	; 0x1563
 8007556:	4811      	ldr	r0, [pc, #68]	; (800759c <HAL_TIM_ConfigClockSource+0x2d4>)
 8007558:	f7fa ff8d 	bl	8002476 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	68db      	ldr	r3, [r3, #12]
 8007560:	2b0f      	cmp	r3, #15
 8007562:	d904      	bls.n	800756e <HAL_TIM_ConfigClockSource+0x2a6>
 8007564:	f241 5164 	movw	r1, #5476	; 0x1564
 8007568:	480c      	ldr	r0, [pc, #48]	; (800759c <HAL_TIM_ConfigClockSource+0x2d4>)
 800756a:	f7fa ff84 	bl	8002476 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6818      	ldr	r0, [r3, #0]
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	6899      	ldr	r1, [r3, #8]
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	685a      	ldr	r2, [r3, #4]
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	68db      	ldr	r3, [r3, #12]
 800757e:	f000 fe29 	bl	80081d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007590:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	68ba      	ldr	r2, [r7, #8]
 8007598:	609a      	str	r2, [r3, #8]
      break;
 800759a:	e1cd      	b.n	8007938 <HAL_TIM_ConfigClockSource+0x670>
 800759c:	080145d0 	.word	0x080145d0
 80075a0:	fffeff88 	.word	0xfffeff88
 80075a4:	40010000 	.word	0x40010000
 80075a8:	40000400 	.word	0x40000400
 80075ac:	40000800 	.word	0x40000800
 80075b0:	40000c00 	.word	0x40000c00
 80075b4:	40001000 	.word	0x40001000
 80075b8:	40001400 	.word	0x40001400
 80075bc:	40010400 	.word	0x40010400
 80075c0:	40014000 	.word	0x40014000
 80075c4:	40014400 	.word	0x40014400
 80075c8:	40014800 	.word	0x40014800
 80075cc:	40001800 	.word	0x40001800
 80075d0:	40001c00 	.word	0x40001c00
 80075d4:	40002000 	.word	0x40002000
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a8d      	ldr	r2, [pc, #564]	; (8007814 <HAL_TIM_ConfigClockSource+0x54c>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d01d      	beq.n	800761e <HAL_TIM_ConfigClockSource+0x356>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075ea:	d018      	beq.n	800761e <HAL_TIM_ConfigClockSource+0x356>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a89      	ldr	r2, [pc, #548]	; (8007818 <HAL_TIM_ConfigClockSource+0x550>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d013      	beq.n	800761e <HAL_TIM_ConfigClockSource+0x356>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a88      	ldr	r2, [pc, #544]	; (800781c <HAL_TIM_ConfigClockSource+0x554>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d00e      	beq.n	800761e <HAL_TIM_ConfigClockSource+0x356>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a86      	ldr	r2, [pc, #536]	; (8007820 <HAL_TIM_ConfigClockSource+0x558>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d009      	beq.n	800761e <HAL_TIM_ConfigClockSource+0x356>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a85      	ldr	r2, [pc, #532]	; (8007824 <HAL_TIM_ConfigClockSource+0x55c>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d004      	beq.n	800761e <HAL_TIM_ConfigClockSource+0x356>
 8007614:	f241 5177 	movw	r1, #5495	; 0x1577
 8007618:	4883      	ldr	r0, [pc, #524]	; (8007828 <HAL_TIM_ConfigClockSource+0x560>)
 800761a:	f7fa ff2c 	bl	8002476 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	689b      	ldr	r3, [r3, #8]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d013      	beq.n	800764e <HAL_TIM_ConfigClockSource+0x386>
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800762e:	d00e      	beq.n	800764e <HAL_TIM_ConfigClockSource+0x386>
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007638:	d009      	beq.n	800764e <HAL_TIM_ConfigClockSource+0x386>
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007642:	d004      	beq.n	800764e <HAL_TIM_ConfigClockSource+0x386>
 8007644:	f241 517a 	movw	r1, #5498	; 0x157a
 8007648:	4877      	ldr	r0, [pc, #476]	; (8007828 <HAL_TIM_ConfigClockSource+0x560>)
 800764a:	f7fa ff14 	bl	8002476 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007656:	d014      	beq.n	8007682 <HAL_TIM_ConfigClockSource+0x3ba>
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d010      	beq.n	8007682 <HAL_TIM_ConfigClockSource+0x3ba>
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d00c      	beq.n	8007682 <HAL_TIM_ConfigClockSource+0x3ba>
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	2b02      	cmp	r3, #2
 800766e:	d008      	beq.n	8007682 <HAL_TIM_ConfigClockSource+0x3ba>
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	2b0a      	cmp	r3, #10
 8007676:	d004      	beq.n	8007682 <HAL_TIM_ConfigClockSource+0x3ba>
 8007678:	f241 517b 	movw	r1, #5499	; 0x157b
 800767c:	486a      	ldr	r0, [pc, #424]	; (8007828 <HAL_TIM_ConfigClockSource+0x560>)
 800767e:	f7fa fefa 	bl	8002476 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	68db      	ldr	r3, [r3, #12]
 8007686:	2b0f      	cmp	r3, #15
 8007688:	d904      	bls.n	8007694 <HAL_TIM_ConfigClockSource+0x3cc>
 800768a:	f241 517c 	movw	r1, #5500	; 0x157c
 800768e:	4866      	ldr	r0, [pc, #408]	; (8007828 <HAL_TIM_ConfigClockSource+0x560>)
 8007690:	f7fa fef1 	bl	8002476 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6818      	ldr	r0, [r3, #0]
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	6899      	ldr	r1, [r3, #8]
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	685a      	ldr	r2, [r3, #4]
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	68db      	ldr	r3, [r3, #12]
 80076a4:	f000 fd96 	bl	80081d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	689a      	ldr	r2, [r3, #8]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80076b6:	609a      	str	r2, [r3, #8]
      break;
 80076b8:	e13e      	b.n	8007938 <HAL_TIM_ConfigClockSource+0x670>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a55      	ldr	r2, [pc, #340]	; (8007814 <HAL_TIM_ConfigClockSource+0x54c>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d01d      	beq.n	8007700 <HAL_TIM_ConfigClockSource+0x438>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076cc:	d018      	beq.n	8007700 <HAL_TIM_ConfigClockSource+0x438>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a51      	ldr	r2, [pc, #324]	; (8007818 <HAL_TIM_ConfigClockSource+0x550>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d013      	beq.n	8007700 <HAL_TIM_ConfigClockSource+0x438>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a4f      	ldr	r2, [pc, #316]	; (800781c <HAL_TIM_ConfigClockSource+0x554>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d00e      	beq.n	8007700 <HAL_TIM_ConfigClockSource+0x438>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a4e      	ldr	r2, [pc, #312]	; (8007820 <HAL_TIM_ConfigClockSource+0x558>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d009      	beq.n	8007700 <HAL_TIM_ConfigClockSource+0x438>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a4c      	ldr	r2, [pc, #304]	; (8007824 <HAL_TIM_ConfigClockSource+0x55c>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d004      	beq.n	8007700 <HAL_TIM_ConfigClockSource+0x438>
 80076f6:	f241 518b 	movw	r1, #5515	; 0x158b
 80076fa:	484b      	ldr	r0, [pc, #300]	; (8007828 <HAL_TIM_ConfigClockSource+0x560>)
 80076fc:	f7fa febb 	bl	8002476 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007708:	d014      	beq.n	8007734 <HAL_TIM_ConfigClockSource+0x46c>
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d010      	beq.n	8007734 <HAL_TIM_ConfigClockSource+0x46c>
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d00c      	beq.n	8007734 <HAL_TIM_ConfigClockSource+0x46c>
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	2b02      	cmp	r3, #2
 8007720:	d008      	beq.n	8007734 <HAL_TIM_ConfigClockSource+0x46c>
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	2b0a      	cmp	r3, #10
 8007728:	d004      	beq.n	8007734 <HAL_TIM_ConfigClockSource+0x46c>
 800772a:	f241 518e 	movw	r1, #5518	; 0x158e
 800772e:	483e      	ldr	r0, [pc, #248]	; (8007828 <HAL_TIM_ConfigClockSource+0x560>)
 8007730:	f7fa fea1 	bl	8002476 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	68db      	ldr	r3, [r3, #12]
 8007738:	2b0f      	cmp	r3, #15
 800773a:	d904      	bls.n	8007746 <HAL_TIM_ConfigClockSource+0x47e>
 800773c:	f241 518f 	movw	r1, #5519	; 0x158f
 8007740:	4839      	ldr	r0, [pc, #228]	; (8007828 <HAL_TIM_ConfigClockSource+0x560>)
 8007742:	f7fa fe98 	bl	8002476 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6818      	ldr	r0, [r3, #0]
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	6859      	ldr	r1, [r3, #4]
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	68db      	ldr	r3, [r3, #12]
 8007752:	461a      	mov	r2, r3
 8007754:	f000 fcc4 	bl	80080e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	2150      	movs	r1, #80	; 0x50
 800775e:	4618      	mov	r0, r3
 8007760:	f000 fd1d 	bl	800819e <TIM_ITRx_SetConfig>
      break;
 8007764:	e0e8      	b.n	8007938 <HAL_TIM_ConfigClockSource+0x670>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a2a      	ldr	r2, [pc, #168]	; (8007814 <HAL_TIM_ConfigClockSource+0x54c>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d01d      	beq.n	80077ac <HAL_TIM_ConfigClockSource+0x4e4>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007778:	d018      	beq.n	80077ac <HAL_TIM_ConfigClockSource+0x4e4>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a26      	ldr	r2, [pc, #152]	; (8007818 <HAL_TIM_ConfigClockSource+0x550>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d013      	beq.n	80077ac <HAL_TIM_ConfigClockSource+0x4e4>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a24      	ldr	r2, [pc, #144]	; (800781c <HAL_TIM_ConfigClockSource+0x554>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d00e      	beq.n	80077ac <HAL_TIM_ConfigClockSource+0x4e4>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a23      	ldr	r2, [pc, #140]	; (8007820 <HAL_TIM_ConfigClockSource+0x558>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d009      	beq.n	80077ac <HAL_TIM_ConfigClockSource+0x4e4>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a21      	ldr	r2, [pc, #132]	; (8007824 <HAL_TIM_ConfigClockSource+0x55c>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d004      	beq.n	80077ac <HAL_TIM_ConfigClockSource+0x4e4>
 80077a2:	f241 519b 	movw	r1, #5531	; 0x159b
 80077a6:	4820      	ldr	r0, [pc, #128]	; (8007828 <HAL_TIM_ConfigClockSource+0x560>)
 80077a8:	f7fa fe65 	bl	8002476 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077b4:	d014      	beq.n	80077e0 <HAL_TIM_ConfigClockSource+0x518>
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d010      	beq.n	80077e0 <HAL_TIM_ConfigClockSource+0x518>
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d00c      	beq.n	80077e0 <HAL_TIM_ConfigClockSource+0x518>
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	2b02      	cmp	r3, #2
 80077cc:	d008      	beq.n	80077e0 <HAL_TIM_ConfigClockSource+0x518>
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	2b0a      	cmp	r3, #10
 80077d4:	d004      	beq.n	80077e0 <HAL_TIM_ConfigClockSource+0x518>
 80077d6:	f241 519e 	movw	r1, #5534	; 0x159e
 80077da:	4813      	ldr	r0, [pc, #76]	; (8007828 <HAL_TIM_ConfigClockSource+0x560>)
 80077dc:	f7fa fe4b 	bl	8002476 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	68db      	ldr	r3, [r3, #12]
 80077e4:	2b0f      	cmp	r3, #15
 80077e6:	d904      	bls.n	80077f2 <HAL_TIM_ConfigClockSource+0x52a>
 80077e8:	f241 519f 	movw	r1, #5535	; 0x159f
 80077ec:	480e      	ldr	r0, [pc, #56]	; (8007828 <HAL_TIM_ConfigClockSource+0x560>)
 80077ee:	f7fa fe42 	bl	8002476 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6818      	ldr	r0, [r3, #0]
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	6859      	ldr	r1, [r3, #4]
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	68db      	ldr	r3, [r3, #12]
 80077fe:	461a      	mov	r2, r3
 8007800:	f000 fc9d 	bl	800813e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	2160      	movs	r1, #96	; 0x60
 800780a:	4618      	mov	r0, r3
 800780c:	f000 fcc7 	bl	800819e <TIM_ITRx_SetConfig>
      break;
 8007810:	e092      	b.n	8007938 <HAL_TIM_ConfigClockSource+0x670>
 8007812:	bf00      	nop
 8007814:	40010000 	.word	0x40010000
 8007818:	40000400 	.word	0x40000400
 800781c:	40000800 	.word	0x40000800
 8007820:	40000c00 	.word	0x40000c00
 8007824:	40010400 	.word	0x40010400
 8007828:	080145d0 	.word	0x080145d0
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a48      	ldr	r2, [pc, #288]	; (8007954 <HAL_TIM_ConfigClockSource+0x68c>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d01d      	beq.n	8007872 <HAL_TIM_ConfigClockSource+0x5aa>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800783e:	d018      	beq.n	8007872 <HAL_TIM_ConfigClockSource+0x5aa>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a44      	ldr	r2, [pc, #272]	; (8007958 <HAL_TIM_ConfigClockSource+0x690>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d013      	beq.n	8007872 <HAL_TIM_ConfigClockSource+0x5aa>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a43      	ldr	r2, [pc, #268]	; (800795c <HAL_TIM_ConfigClockSource+0x694>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d00e      	beq.n	8007872 <HAL_TIM_ConfigClockSource+0x5aa>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a41      	ldr	r2, [pc, #260]	; (8007960 <HAL_TIM_ConfigClockSource+0x698>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d009      	beq.n	8007872 <HAL_TIM_ConfigClockSource+0x5aa>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a40      	ldr	r2, [pc, #256]	; (8007964 <HAL_TIM_ConfigClockSource+0x69c>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d004      	beq.n	8007872 <HAL_TIM_ConfigClockSource+0x5aa>
 8007868:	f241 51ab 	movw	r1, #5547	; 0x15ab
 800786c:	483e      	ldr	r0, [pc, #248]	; (8007968 <HAL_TIM_ConfigClockSource+0x6a0>)
 800786e:	f7fa fe02 	bl	8002476 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800787a:	d014      	beq.n	80078a6 <HAL_TIM_ConfigClockSource+0x5de>
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d010      	beq.n	80078a6 <HAL_TIM_ConfigClockSource+0x5de>
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d00c      	beq.n	80078a6 <HAL_TIM_ConfigClockSource+0x5de>
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	2b02      	cmp	r3, #2
 8007892:	d008      	beq.n	80078a6 <HAL_TIM_ConfigClockSource+0x5de>
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	2b0a      	cmp	r3, #10
 800789a:	d004      	beq.n	80078a6 <HAL_TIM_ConfigClockSource+0x5de>
 800789c:	f241 51ae 	movw	r1, #5550	; 0x15ae
 80078a0:	4831      	ldr	r0, [pc, #196]	; (8007968 <HAL_TIM_ConfigClockSource+0x6a0>)
 80078a2:	f7fa fde8 	bl	8002476 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	68db      	ldr	r3, [r3, #12]
 80078aa:	2b0f      	cmp	r3, #15
 80078ac:	d904      	bls.n	80078b8 <HAL_TIM_ConfigClockSource+0x5f0>
 80078ae:	f241 51af 	movw	r1, #5551	; 0x15af
 80078b2:	482d      	ldr	r0, [pc, #180]	; (8007968 <HAL_TIM_ConfigClockSource+0x6a0>)
 80078b4:	f7fa fddf 	bl	8002476 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6818      	ldr	r0, [r3, #0]
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	6859      	ldr	r1, [r3, #4]
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	68db      	ldr	r3, [r3, #12]
 80078c4:	461a      	mov	r2, r3
 80078c6:	f000 fc0b 	bl	80080e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	2140      	movs	r1, #64	; 0x40
 80078d0:	4618      	mov	r0, r3
 80078d2:	f000 fc64 	bl	800819e <TIM_ITRx_SetConfig>
      break;
 80078d6:	e02f      	b.n	8007938 <HAL_TIM_ConfigClockSource+0x670>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a1d      	ldr	r2, [pc, #116]	; (8007954 <HAL_TIM_ConfigClockSource+0x68c>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d01d      	beq.n	800791e <HAL_TIM_ConfigClockSource+0x656>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078ea:	d018      	beq.n	800791e <HAL_TIM_ConfigClockSource+0x656>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a19      	ldr	r2, [pc, #100]	; (8007958 <HAL_TIM_ConfigClockSource+0x690>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d013      	beq.n	800791e <HAL_TIM_ConfigClockSource+0x656>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a18      	ldr	r2, [pc, #96]	; (800795c <HAL_TIM_ConfigClockSource+0x694>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d00e      	beq.n	800791e <HAL_TIM_ConfigClockSource+0x656>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a16      	ldr	r2, [pc, #88]	; (8007960 <HAL_TIM_ConfigClockSource+0x698>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d009      	beq.n	800791e <HAL_TIM_ConfigClockSource+0x656>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a15      	ldr	r2, [pc, #84]	; (8007964 <HAL_TIM_ConfigClockSource+0x69c>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d004      	beq.n	800791e <HAL_TIM_ConfigClockSource+0x656>
 8007914:	f241 51be 	movw	r1, #5566	; 0x15be
 8007918:	4813      	ldr	r0, [pc, #76]	; (8007968 <HAL_TIM_ConfigClockSource+0x6a0>)
 800791a:	f7fa fdac 	bl	8002476 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4619      	mov	r1, r3
 8007928:	4610      	mov	r0, r2
 800792a:	f000 fc38 	bl	800819e <TIM_ITRx_SetConfig>
      break;
 800792e:	e003      	b.n	8007938 <HAL_TIM_ConfigClockSource+0x670>
    }

    default:
      status = HAL_ERROR;
 8007930:	2301      	movs	r3, #1
 8007932:	73fb      	strb	r3, [r7, #15]
      break;
 8007934:	e000      	b.n	8007938 <HAL_TIM_ConfigClockSource+0x670>
      break;
 8007936:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2201      	movs	r2, #1
 800793c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2200      	movs	r2, #0
 8007944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007948:	7bfb      	ldrb	r3, [r7, #15]
}
 800794a:	4618      	mov	r0, r3
 800794c:	3710      	adds	r7, #16
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}
 8007952:	bf00      	nop
 8007954:	40010000 	.word	0x40010000
 8007958:	40000400 	.word	0x40000400
 800795c:	40000800 	.word	0x40000800
 8007960:	40000c00 	.word	0x40000c00
 8007964:	40010400 	.word	0x40010400
 8007968:	080145d0 	.word	0x080145d0

0800796c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800796c:	b480      	push	{r7}
 800796e:	b083      	sub	sp, #12
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007974:	bf00      	nop
 8007976:	370c      	adds	r7, #12
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr

08007980 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007980:	b480      	push	{r7}
 8007982:	b083      	sub	sp, #12
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007988:	bf00      	nop
 800798a:	370c      	adds	r7, #12
 800798c:	46bd      	mov	sp, r7
 800798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007992:	4770      	bx	lr

08007994 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007994:	b480      	push	{r7}
 8007996:	b083      	sub	sp, #12
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800799c:	bf00      	nop
 800799e:	370c      	adds	r7, #12
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr

080079a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b083      	sub	sp, #12
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80079b0:	bf00      	nop
 80079b2:	370c      	adds	r7, #12
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr

080079bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80079bc:	b480      	push	{r7}
 80079be:	b083      	sub	sp, #12
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80079c4:	bf00      	nop
 80079c6:	370c      	adds	r7, #12
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr

080079d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b085      	sub	sp, #20
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	4a40      	ldr	r2, [pc, #256]	; (8007ae4 <TIM_Base_SetConfig+0x114>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d013      	beq.n	8007a10 <TIM_Base_SetConfig+0x40>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079ee:	d00f      	beq.n	8007a10 <TIM_Base_SetConfig+0x40>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	4a3d      	ldr	r2, [pc, #244]	; (8007ae8 <TIM_Base_SetConfig+0x118>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d00b      	beq.n	8007a10 <TIM_Base_SetConfig+0x40>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	4a3c      	ldr	r2, [pc, #240]	; (8007aec <TIM_Base_SetConfig+0x11c>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d007      	beq.n	8007a10 <TIM_Base_SetConfig+0x40>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	4a3b      	ldr	r2, [pc, #236]	; (8007af0 <TIM_Base_SetConfig+0x120>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d003      	beq.n	8007a10 <TIM_Base_SetConfig+0x40>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	4a3a      	ldr	r2, [pc, #232]	; (8007af4 <TIM_Base_SetConfig+0x124>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d108      	bne.n	8007a22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	68fa      	ldr	r2, [r7, #12]
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	4a2f      	ldr	r2, [pc, #188]	; (8007ae4 <TIM_Base_SetConfig+0x114>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d02b      	beq.n	8007a82 <TIM_Base_SetConfig+0xb2>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a30:	d027      	beq.n	8007a82 <TIM_Base_SetConfig+0xb2>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	4a2c      	ldr	r2, [pc, #176]	; (8007ae8 <TIM_Base_SetConfig+0x118>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d023      	beq.n	8007a82 <TIM_Base_SetConfig+0xb2>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	4a2b      	ldr	r2, [pc, #172]	; (8007aec <TIM_Base_SetConfig+0x11c>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d01f      	beq.n	8007a82 <TIM_Base_SetConfig+0xb2>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	4a2a      	ldr	r2, [pc, #168]	; (8007af0 <TIM_Base_SetConfig+0x120>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d01b      	beq.n	8007a82 <TIM_Base_SetConfig+0xb2>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	4a29      	ldr	r2, [pc, #164]	; (8007af4 <TIM_Base_SetConfig+0x124>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d017      	beq.n	8007a82 <TIM_Base_SetConfig+0xb2>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	4a28      	ldr	r2, [pc, #160]	; (8007af8 <TIM_Base_SetConfig+0x128>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d013      	beq.n	8007a82 <TIM_Base_SetConfig+0xb2>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	4a27      	ldr	r2, [pc, #156]	; (8007afc <TIM_Base_SetConfig+0x12c>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d00f      	beq.n	8007a82 <TIM_Base_SetConfig+0xb2>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	4a26      	ldr	r2, [pc, #152]	; (8007b00 <TIM_Base_SetConfig+0x130>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d00b      	beq.n	8007a82 <TIM_Base_SetConfig+0xb2>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	4a25      	ldr	r2, [pc, #148]	; (8007b04 <TIM_Base_SetConfig+0x134>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d007      	beq.n	8007a82 <TIM_Base_SetConfig+0xb2>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	4a24      	ldr	r2, [pc, #144]	; (8007b08 <TIM_Base_SetConfig+0x138>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d003      	beq.n	8007a82 <TIM_Base_SetConfig+0xb2>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	4a23      	ldr	r2, [pc, #140]	; (8007b0c <TIM_Base_SetConfig+0x13c>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d108      	bne.n	8007a94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	68db      	ldr	r3, [r3, #12]
 8007a8e:	68fa      	ldr	r2, [r7, #12]
 8007a90:	4313      	orrs	r3, r2
 8007a92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	695b      	ldr	r3, [r3, #20]
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	68fa      	ldr	r2, [r7, #12]
 8007aa6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	689a      	ldr	r2, [r3, #8]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	681a      	ldr	r2, [r3, #0]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	4a0a      	ldr	r2, [pc, #40]	; (8007ae4 <TIM_Base_SetConfig+0x114>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d003      	beq.n	8007ac8 <TIM_Base_SetConfig+0xf8>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	4a0c      	ldr	r2, [pc, #48]	; (8007af4 <TIM_Base_SetConfig+0x124>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d103      	bne.n	8007ad0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	691a      	ldr	r2, [r3, #16]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	615a      	str	r2, [r3, #20]
}
 8007ad6:	bf00      	nop
 8007ad8:	3714      	adds	r7, #20
 8007ada:	46bd      	mov	sp, r7
 8007adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae0:	4770      	bx	lr
 8007ae2:	bf00      	nop
 8007ae4:	40010000 	.word	0x40010000
 8007ae8:	40000400 	.word	0x40000400
 8007aec:	40000800 	.word	0x40000800
 8007af0:	40000c00 	.word	0x40000c00
 8007af4:	40010400 	.word	0x40010400
 8007af8:	40014000 	.word	0x40014000
 8007afc:	40014400 	.word	0x40014400
 8007b00:	40014800 	.word	0x40014800
 8007b04:	40001800 	.word	0x40001800
 8007b08:	40001c00 	.word	0x40001c00
 8007b0c:	40002000 	.word	0x40002000

08007b10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b086      	sub	sp, #24
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6a1b      	ldr	r3, [r3, #32]
 8007b1e:	f023 0201 	bic.w	r2, r3, #1
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6a1b      	ldr	r3, [r3, #32]
 8007b2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	699b      	ldr	r3, [r3, #24]
 8007b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007b38:	68fa      	ldr	r2, [r7, #12]
 8007b3a:	4b3f      	ldr	r3, [pc, #252]	; (8007c38 <TIM_OC1_SetConfig+0x128>)
 8007b3c:	4013      	ands	r3, r2
 8007b3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f023 0303 	bic.w	r3, r3, #3
 8007b46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	68fa      	ldr	r2, [r7, #12]
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	f023 0302 	bic.w	r3, r3, #2
 8007b58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	689b      	ldr	r3, [r3, #8]
 8007b5e:	697a      	ldr	r2, [r7, #20]
 8007b60:	4313      	orrs	r3, r2
 8007b62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	4a35      	ldr	r2, [pc, #212]	; (8007c3c <TIM_OC1_SetConfig+0x12c>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d003      	beq.n	8007b74 <TIM_OC1_SetConfig+0x64>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	4a34      	ldr	r2, [pc, #208]	; (8007c40 <TIM_OC1_SetConfig+0x130>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d119      	bne.n	8007ba8 <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	68db      	ldr	r3, [r3, #12]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d008      	beq.n	8007b8e <TIM_OC1_SetConfig+0x7e>
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	68db      	ldr	r3, [r3, #12]
 8007b80:	2b08      	cmp	r3, #8
 8007b82:	d004      	beq.n	8007b8e <TIM_OC1_SetConfig+0x7e>
 8007b84:	f641 3167 	movw	r1, #7015	; 0x1b67
 8007b88:	482e      	ldr	r0, [pc, #184]	; (8007c44 <TIM_OC1_SetConfig+0x134>)
 8007b8a:	f7fa fc74 	bl	8002476 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	f023 0308 	bic.w	r3, r3, #8
 8007b94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	68db      	ldr	r3, [r3, #12]
 8007b9a:	697a      	ldr	r2, [r7, #20]
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	f023 0304 	bic.w	r3, r3, #4
 8007ba6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	4a24      	ldr	r2, [pc, #144]	; (8007c3c <TIM_OC1_SetConfig+0x12c>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d003      	beq.n	8007bb8 <TIM_OC1_SetConfig+0xa8>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	4a23      	ldr	r2, [pc, #140]	; (8007c40 <TIM_OC1_SetConfig+0x130>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d12d      	bne.n	8007c14 <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	699b      	ldr	r3, [r3, #24]
 8007bbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bc0:	d008      	beq.n	8007bd4 <TIM_OC1_SetConfig+0xc4>
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	699b      	ldr	r3, [r3, #24]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d004      	beq.n	8007bd4 <TIM_OC1_SetConfig+0xc4>
 8007bca:	f641 3174 	movw	r1, #7028	; 0x1b74
 8007bce:	481d      	ldr	r0, [pc, #116]	; (8007c44 <TIM_OC1_SetConfig+0x134>)
 8007bd0:	f7fa fc51 	bl	8002476 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	695b      	ldr	r3, [r3, #20]
 8007bd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bdc:	d008      	beq.n	8007bf0 <TIM_OC1_SetConfig+0xe0>
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	695b      	ldr	r3, [r3, #20]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d004      	beq.n	8007bf0 <TIM_OC1_SetConfig+0xe0>
 8007be6:	f641 3175 	movw	r1, #7029	; 0x1b75
 8007bea:	4816      	ldr	r0, [pc, #88]	; (8007c44 <TIM_OC1_SetConfig+0x134>)
 8007bec:	f7fa fc43 	bl	8002476 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007bf6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007bfe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	695b      	ldr	r3, [r3, #20]
 8007c04:	693a      	ldr	r2, [r7, #16]
 8007c06:	4313      	orrs	r3, r2
 8007c08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	699b      	ldr	r3, [r3, #24]
 8007c0e:	693a      	ldr	r2, [r7, #16]
 8007c10:	4313      	orrs	r3, r2
 8007c12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	693a      	ldr	r2, [r7, #16]
 8007c18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	68fa      	ldr	r2, [r7, #12]
 8007c1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	685a      	ldr	r2, [r3, #4]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	697a      	ldr	r2, [r7, #20]
 8007c2c:	621a      	str	r2, [r3, #32]
}
 8007c2e:	bf00      	nop
 8007c30:	3718      	adds	r7, #24
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}
 8007c36:	bf00      	nop
 8007c38:	fffeff8f 	.word	0xfffeff8f
 8007c3c:	40010000 	.word	0x40010000
 8007c40:	40010400 	.word	0x40010400
 8007c44:	080145d0 	.word	0x080145d0

08007c48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b086      	sub	sp, #24
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6a1b      	ldr	r3, [r3, #32]
 8007c56:	f023 0210 	bic.w	r2, r3, #16
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6a1b      	ldr	r3, [r3, #32]
 8007c62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	699b      	ldr	r3, [r3, #24]
 8007c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007c70:	68fa      	ldr	r2, [r7, #12]
 8007c72:	4b41      	ldr	r3, [pc, #260]	; (8007d78 <TIM_OC2_SetConfig+0x130>)
 8007c74:	4013      	ands	r3, r2
 8007c76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	021b      	lsls	r3, r3, #8
 8007c86:	68fa      	ldr	r2, [r7, #12]
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007c8c:	697b      	ldr	r3, [r7, #20]
 8007c8e:	f023 0320 	bic.w	r3, r3, #32
 8007c92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	689b      	ldr	r3, [r3, #8]
 8007c98:	011b      	lsls	r3, r3, #4
 8007c9a:	697a      	ldr	r2, [r7, #20]
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	4a36      	ldr	r2, [pc, #216]	; (8007d7c <TIM_OC2_SetConfig+0x134>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d003      	beq.n	8007cb0 <TIM_OC2_SetConfig+0x68>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	4a35      	ldr	r2, [pc, #212]	; (8007d80 <TIM_OC2_SetConfig+0x138>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d11a      	bne.n	8007ce6 <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	68db      	ldr	r3, [r3, #12]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d008      	beq.n	8007cca <TIM_OC2_SetConfig+0x82>
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	68db      	ldr	r3, [r3, #12]
 8007cbc:	2b08      	cmp	r3, #8
 8007cbe:	d004      	beq.n	8007cca <TIM_OC2_SetConfig+0x82>
 8007cc0:	f641 31b2 	movw	r1, #7090	; 0x1bb2
 8007cc4:	482f      	ldr	r0, [pc, #188]	; (8007d84 <TIM_OC2_SetConfig+0x13c>)
 8007cc6:	f7fa fbd6 	bl	8002476 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007cd0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	68db      	ldr	r3, [r3, #12]
 8007cd6:	011b      	lsls	r3, r3, #4
 8007cd8:	697a      	ldr	r2, [r7, #20]
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ce4:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	4a24      	ldr	r2, [pc, #144]	; (8007d7c <TIM_OC2_SetConfig+0x134>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d003      	beq.n	8007cf6 <TIM_OC2_SetConfig+0xae>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	4a23      	ldr	r2, [pc, #140]	; (8007d80 <TIM_OC2_SetConfig+0x138>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d12f      	bne.n	8007d56 <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	699b      	ldr	r3, [r3, #24]
 8007cfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cfe:	d008      	beq.n	8007d12 <TIM_OC2_SetConfig+0xca>
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	699b      	ldr	r3, [r3, #24]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d004      	beq.n	8007d12 <TIM_OC2_SetConfig+0xca>
 8007d08:	f44f 51de 	mov.w	r1, #7104	; 0x1bc0
 8007d0c:	481d      	ldr	r0, [pc, #116]	; (8007d84 <TIM_OC2_SetConfig+0x13c>)
 8007d0e:	f7fa fbb2 	bl	8002476 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	695b      	ldr	r3, [r3, #20]
 8007d16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d1a:	d008      	beq.n	8007d2e <TIM_OC2_SetConfig+0xe6>
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	695b      	ldr	r3, [r3, #20]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d004      	beq.n	8007d2e <TIM_OC2_SetConfig+0xe6>
 8007d24:	f641 31c1 	movw	r1, #7105	; 0x1bc1
 8007d28:	4816      	ldr	r0, [pc, #88]	; (8007d84 <TIM_OC2_SetConfig+0x13c>)
 8007d2a:	f7fa fba4 	bl	8002476 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007d3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	695b      	ldr	r3, [r3, #20]
 8007d42:	009b      	lsls	r3, r3, #2
 8007d44:	693a      	ldr	r2, [r7, #16]
 8007d46:	4313      	orrs	r3, r2
 8007d48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	699b      	ldr	r3, [r3, #24]
 8007d4e:	009b      	lsls	r3, r3, #2
 8007d50:	693a      	ldr	r2, [r7, #16]
 8007d52:	4313      	orrs	r3, r2
 8007d54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	693a      	ldr	r2, [r7, #16]
 8007d5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	68fa      	ldr	r2, [r7, #12]
 8007d60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	685a      	ldr	r2, [r3, #4]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	697a      	ldr	r2, [r7, #20]
 8007d6e:	621a      	str	r2, [r3, #32]
}
 8007d70:	bf00      	nop
 8007d72:	3718      	adds	r7, #24
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}
 8007d78:	feff8fff 	.word	0xfeff8fff
 8007d7c:	40010000 	.word	0x40010000
 8007d80:	40010400 	.word	0x40010400
 8007d84:	080145d0 	.word	0x080145d0

08007d88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b086      	sub	sp, #24
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6a1b      	ldr	r3, [r3, #32]
 8007d96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6a1b      	ldr	r3, [r3, #32]
 8007da2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	69db      	ldr	r3, [r3, #28]
 8007dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007db0:	68fa      	ldr	r2, [r7, #12]
 8007db2:	4b41      	ldr	r3, [pc, #260]	; (8007eb8 <TIM_OC3_SetConfig+0x130>)
 8007db4:	4013      	ands	r3, r2
 8007db6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f023 0303 	bic.w	r3, r3, #3
 8007dbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	68fa      	ldr	r2, [r7, #12]
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007dd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	689b      	ldr	r3, [r3, #8]
 8007dd6:	021b      	lsls	r3, r3, #8
 8007dd8:	697a      	ldr	r2, [r7, #20]
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	4a36      	ldr	r2, [pc, #216]	; (8007ebc <TIM_OC3_SetConfig+0x134>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d003      	beq.n	8007dee <TIM_OC3_SetConfig+0x66>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	4a35      	ldr	r2, [pc, #212]	; (8007ec0 <TIM_OC3_SetConfig+0x138>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d11a      	bne.n	8007e24 <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	68db      	ldr	r3, [r3, #12]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d008      	beq.n	8007e08 <TIM_OC3_SetConfig+0x80>
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	68db      	ldr	r3, [r3, #12]
 8007dfa:	2b08      	cmp	r3, #8
 8007dfc:	d004      	beq.n	8007e08 <TIM_OC3_SetConfig+0x80>
 8007dfe:	f641 31fd 	movw	r1, #7165	; 0x1bfd
 8007e02:	4830      	ldr	r0, [pc, #192]	; (8007ec4 <TIM_OC3_SetConfig+0x13c>)
 8007e04:	f7fa fb37 	bl	8002476 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	68db      	ldr	r3, [r3, #12]
 8007e14:	021b      	lsls	r3, r3, #8
 8007e16:	697a      	ldr	r2, [r7, #20]
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007e1c:	697b      	ldr	r3, [r7, #20]
 8007e1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e22:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	4a25      	ldr	r2, [pc, #148]	; (8007ebc <TIM_OC3_SetConfig+0x134>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d003      	beq.n	8007e34 <TIM_OC3_SetConfig+0xac>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	4a24      	ldr	r2, [pc, #144]	; (8007ec0 <TIM_OC3_SetConfig+0x138>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d12f      	bne.n	8007e94 <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	699b      	ldr	r3, [r3, #24]
 8007e38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e3c:	d008      	beq.n	8007e50 <TIM_OC3_SetConfig+0xc8>
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	699b      	ldr	r3, [r3, #24]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d004      	beq.n	8007e50 <TIM_OC3_SetConfig+0xc8>
 8007e46:	f641 410a 	movw	r1, #7178	; 0x1c0a
 8007e4a:	481e      	ldr	r0, [pc, #120]	; (8007ec4 <TIM_OC3_SetConfig+0x13c>)
 8007e4c:	f7fa fb13 	bl	8002476 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	695b      	ldr	r3, [r3, #20]
 8007e54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e58:	d008      	beq.n	8007e6c <TIM_OC3_SetConfig+0xe4>
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	695b      	ldr	r3, [r3, #20]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d004      	beq.n	8007e6c <TIM_OC3_SetConfig+0xe4>
 8007e62:	f641 410b 	movw	r1, #7179	; 0x1c0b
 8007e66:	4817      	ldr	r0, [pc, #92]	; (8007ec4 <TIM_OC3_SetConfig+0x13c>)
 8007e68:	f7fa fb05 	bl	8002476 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007e74:	693b      	ldr	r3, [r7, #16]
 8007e76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	695b      	ldr	r3, [r3, #20]
 8007e80:	011b      	lsls	r3, r3, #4
 8007e82:	693a      	ldr	r2, [r7, #16]
 8007e84:	4313      	orrs	r3, r2
 8007e86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	699b      	ldr	r3, [r3, #24]
 8007e8c:	011b      	lsls	r3, r3, #4
 8007e8e:	693a      	ldr	r2, [r7, #16]
 8007e90:	4313      	orrs	r3, r2
 8007e92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	693a      	ldr	r2, [r7, #16]
 8007e98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	68fa      	ldr	r2, [r7, #12]
 8007e9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	685a      	ldr	r2, [r3, #4]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	697a      	ldr	r2, [r7, #20]
 8007eac:	621a      	str	r2, [r3, #32]
}
 8007eae:	bf00      	nop
 8007eb0:	3718      	adds	r7, #24
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}
 8007eb6:	bf00      	nop
 8007eb8:	fffeff8f 	.word	0xfffeff8f
 8007ebc:	40010000 	.word	0x40010000
 8007ec0:	40010400 	.word	0x40010400
 8007ec4:	080145d0 	.word	0x080145d0

08007ec8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b086      	sub	sp, #24
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6a1b      	ldr	r3, [r3, #32]
 8007ed6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6a1b      	ldr	r3, [r3, #32]
 8007ee2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	69db      	ldr	r3, [r3, #28]
 8007eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007ef0:	68fa      	ldr	r2, [r7, #12]
 8007ef2:	4b24      	ldr	r3, [pc, #144]	; (8007f84 <TIM_OC4_SetConfig+0xbc>)
 8007ef4:	4013      	ands	r3, r2
 8007ef6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007efe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	021b      	lsls	r3, r3, #8
 8007f06:	68fa      	ldr	r2, [r7, #12]
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007f12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	031b      	lsls	r3, r3, #12
 8007f1a:	693a      	ldr	r2, [r7, #16]
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	4a19      	ldr	r2, [pc, #100]	; (8007f88 <TIM_OC4_SetConfig+0xc0>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d003      	beq.n	8007f30 <TIM_OC4_SetConfig+0x68>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	4a18      	ldr	r2, [pc, #96]	; (8007f8c <TIM_OC4_SetConfig+0xc4>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d117      	bne.n	8007f60 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	695b      	ldr	r3, [r3, #20]
 8007f34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f38:	d008      	beq.n	8007f4c <TIM_OC4_SetConfig+0x84>
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	695b      	ldr	r3, [r3, #20]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d004      	beq.n	8007f4c <TIM_OC4_SetConfig+0x84>
 8007f42:	f641 4149 	movw	r1, #7241	; 0x1c49
 8007f46:	4812      	ldr	r0, [pc, #72]	; (8007f90 <TIM_OC4_SetConfig+0xc8>)
 8007f48:	f7fa fa95 	bl	8002476 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	695b      	ldr	r3, [r3, #20]
 8007f58:	019b      	lsls	r3, r3, #6
 8007f5a:	697a      	ldr	r2, [r7, #20]
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	697a      	ldr	r2, [r7, #20]
 8007f64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	68fa      	ldr	r2, [r7, #12]
 8007f6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	685a      	ldr	r2, [r3, #4]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	693a      	ldr	r2, [r7, #16]
 8007f78:	621a      	str	r2, [r3, #32]
}
 8007f7a:	bf00      	nop
 8007f7c:	3718      	adds	r7, #24
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}
 8007f82:	bf00      	nop
 8007f84:	feff8fff 	.word	0xfeff8fff
 8007f88:	40010000 	.word	0x40010000
 8007f8c:	40010400 	.word	0x40010400
 8007f90:	080145d0 	.word	0x080145d0

08007f94 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b087      	sub	sp, #28
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6a1b      	ldr	r3, [r3, #32]
 8007fa2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6a1b      	ldr	r3, [r3, #32]
 8007fae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007fbc:	68fa      	ldr	r2, [r7, #12]
 8007fbe:	4b1b      	ldr	r3, [pc, #108]	; (800802c <TIM_OC5_SetConfig+0x98>)
 8007fc0:	4013      	ands	r3, r2
 8007fc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	68fa      	ldr	r2, [r7, #12]
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007fd4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	689b      	ldr	r3, [r3, #8]
 8007fda:	041b      	lsls	r3, r3, #16
 8007fdc:	693a      	ldr	r2, [r7, #16]
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	4a12      	ldr	r2, [pc, #72]	; (8008030 <TIM_OC5_SetConfig+0x9c>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d003      	beq.n	8007ff2 <TIM_OC5_SetConfig+0x5e>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	4a11      	ldr	r2, [pc, #68]	; (8008034 <TIM_OC5_SetConfig+0xa0>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d109      	bne.n	8008006 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ff8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	695b      	ldr	r3, [r3, #20]
 8007ffe:	021b      	lsls	r3, r3, #8
 8008000:	697a      	ldr	r2, [r7, #20]
 8008002:	4313      	orrs	r3, r2
 8008004:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	697a      	ldr	r2, [r7, #20]
 800800a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	68fa      	ldr	r2, [r7, #12]
 8008010:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	685a      	ldr	r2, [r3, #4]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	693a      	ldr	r2, [r7, #16]
 800801e:	621a      	str	r2, [r3, #32]
}
 8008020:	bf00      	nop
 8008022:	371c      	adds	r7, #28
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr
 800802c:	fffeff8f 	.word	0xfffeff8f
 8008030:	40010000 	.word	0x40010000
 8008034:	40010400 	.word	0x40010400

08008038 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008038:	b480      	push	{r7}
 800803a:	b087      	sub	sp, #28
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6a1b      	ldr	r3, [r3, #32]
 8008046:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6a1b      	ldr	r3, [r3, #32]
 8008052:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800805e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008060:	68fa      	ldr	r2, [r7, #12]
 8008062:	4b1c      	ldr	r3, [pc, #112]	; (80080d4 <TIM_OC6_SetConfig+0x9c>)
 8008064:	4013      	ands	r3, r2
 8008066:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	021b      	lsls	r3, r3, #8
 800806e:	68fa      	ldr	r2, [r7, #12]
 8008070:	4313      	orrs	r3, r2
 8008072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800807a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	689b      	ldr	r3, [r3, #8]
 8008080:	051b      	lsls	r3, r3, #20
 8008082:	693a      	ldr	r2, [r7, #16]
 8008084:	4313      	orrs	r3, r2
 8008086:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	4a13      	ldr	r2, [pc, #76]	; (80080d8 <TIM_OC6_SetConfig+0xa0>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d003      	beq.n	8008098 <TIM_OC6_SetConfig+0x60>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	4a12      	ldr	r2, [pc, #72]	; (80080dc <TIM_OC6_SetConfig+0xa4>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d109      	bne.n	80080ac <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800809e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	695b      	ldr	r3, [r3, #20]
 80080a4:	029b      	lsls	r3, r3, #10
 80080a6:	697a      	ldr	r2, [r7, #20]
 80080a8:	4313      	orrs	r3, r2
 80080aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	697a      	ldr	r2, [r7, #20]
 80080b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	68fa      	ldr	r2, [r7, #12]
 80080b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	685a      	ldr	r2, [r3, #4]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	693a      	ldr	r2, [r7, #16]
 80080c4:	621a      	str	r2, [r3, #32]
}
 80080c6:	bf00      	nop
 80080c8:	371c      	adds	r7, #28
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr
 80080d2:	bf00      	nop
 80080d4:	feff8fff 	.word	0xfeff8fff
 80080d8:	40010000 	.word	0x40010000
 80080dc:	40010400 	.word	0x40010400

080080e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b087      	sub	sp, #28
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	60f8      	str	r0, [r7, #12]
 80080e8:	60b9      	str	r1, [r7, #8]
 80080ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	6a1b      	ldr	r3, [r3, #32]
 80080f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	6a1b      	ldr	r3, [r3, #32]
 80080f6:	f023 0201 	bic.w	r2, r3, #1
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	699b      	ldr	r3, [r3, #24]
 8008102:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800810a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	011b      	lsls	r3, r3, #4
 8008110:	693a      	ldr	r2, [r7, #16]
 8008112:	4313      	orrs	r3, r2
 8008114:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	f023 030a 	bic.w	r3, r3, #10
 800811c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800811e:	697a      	ldr	r2, [r7, #20]
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	4313      	orrs	r3, r2
 8008124:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	693a      	ldr	r2, [r7, #16]
 800812a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	697a      	ldr	r2, [r7, #20]
 8008130:	621a      	str	r2, [r3, #32]
}
 8008132:	bf00      	nop
 8008134:	371c      	adds	r7, #28
 8008136:	46bd      	mov	sp, r7
 8008138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813c:	4770      	bx	lr

0800813e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800813e:	b480      	push	{r7}
 8008140:	b087      	sub	sp, #28
 8008142:	af00      	add	r7, sp, #0
 8008144:	60f8      	str	r0, [r7, #12]
 8008146:	60b9      	str	r1, [r7, #8]
 8008148:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	6a1b      	ldr	r3, [r3, #32]
 800814e:	f023 0210 	bic.w	r2, r3, #16
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	699b      	ldr	r3, [r3, #24]
 800815a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	6a1b      	ldr	r3, [r3, #32]
 8008160:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008168:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	031b      	lsls	r3, r3, #12
 800816e:	697a      	ldr	r2, [r7, #20]
 8008170:	4313      	orrs	r3, r2
 8008172:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800817a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	011b      	lsls	r3, r3, #4
 8008180:	693a      	ldr	r2, [r7, #16]
 8008182:	4313      	orrs	r3, r2
 8008184:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	697a      	ldr	r2, [r7, #20]
 800818a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	693a      	ldr	r2, [r7, #16]
 8008190:	621a      	str	r2, [r3, #32]
}
 8008192:	bf00      	nop
 8008194:	371c      	adds	r7, #28
 8008196:	46bd      	mov	sp, r7
 8008198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819c:	4770      	bx	lr

0800819e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800819e:	b480      	push	{r7}
 80081a0:	b085      	sub	sp, #20
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	6078      	str	r0, [r7, #4]
 80081a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	689b      	ldr	r3, [r3, #8]
 80081ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80081b6:	683a      	ldr	r2, [r7, #0]
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	4313      	orrs	r3, r2
 80081bc:	f043 0307 	orr.w	r3, r3, #7
 80081c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	68fa      	ldr	r2, [r7, #12]
 80081c6:	609a      	str	r2, [r3, #8]
}
 80081c8:	bf00      	nop
 80081ca:	3714      	adds	r7, #20
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr

080081d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b087      	sub	sp, #28
 80081d8:	af00      	add	r7, sp, #0
 80081da:	60f8      	str	r0, [r7, #12]
 80081dc:	60b9      	str	r1, [r7, #8]
 80081de:	607a      	str	r2, [r7, #4]
 80081e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	689b      	ldr	r3, [r3, #8]
 80081e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80081ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	021a      	lsls	r2, r3, #8
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	431a      	orrs	r2, r3
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	4313      	orrs	r3, r2
 80081fc:	697a      	ldr	r2, [r7, #20]
 80081fe:	4313      	orrs	r3, r2
 8008200:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	697a      	ldr	r2, [r7, #20]
 8008206:	609a      	str	r2, [r3, #8]
}
 8008208:	bf00      	nop
 800820a:	371c      	adds	r7, #28
 800820c:	46bd      	mov	sp, r7
 800820e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008212:	4770      	bx	lr

08008214 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b086      	sub	sp, #24
 8008218:	af00      	add	r7, sp, #0
 800821a:	60f8      	str	r0, [r7, #12]
 800821c:	60b9      	str	r1, [r7, #8]
 800821e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	4a35      	ldr	r2, [pc, #212]	; (80082f8 <TIM_CCxChannelCmd+0xe4>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d030      	beq.n	800828a <TIM_CCxChannelCmd+0x76>
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800822e:	d02c      	beq.n	800828a <TIM_CCxChannelCmd+0x76>
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	4a32      	ldr	r2, [pc, #200]	; (80082fc <TIM_CCxChannelCmd+0xe8>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d028      	beq.n	800828a <TIM_CCxChannelCmd+0x76>
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	4a31      	ldr	r2, [pc, #196]	; (8008300 <TIM_CCxChannelCmd+0xec>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d024      	beq.n	800828a <TIM_CCxChannelCmd+0x76>
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	4a30      	ldr	r2, [pc, #192]	; (8008304 <TIM_CCxChannelCmd+0xf0>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d020      	beq.n	800828a <TIM_CCxChannelCmd+0x76>
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	4a2f      	ldr	r2, [pc, #188]	; (8008308 <TIM_CCxChannelCmd+0xf4>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d01c      	beq.n	800828a <TIM_CCxChannelCmd+0x76>
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	4a2e      	ldr	r2, [pc, #184]	; (800830c <TIM_CCxChannelCmd+0xf8>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d018      	beq.n	800828a <TIM_CCxChannelCmd+0x76>
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	4a2d      	ldr	r2, [pc, #180]	; (8008310 <TIM_CCxChannelCmd+0xfc>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d014      	beq.n	800828a <TIM_CCxChannelCmd+0x76>
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	4a2c      	ldr	r2, [pc, #176]	; (8008314 <TIM_CCxChannelCmd+0x100>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d010      	beq.n	800828a <TIM_CCxChannelCmd+0x76>
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	4a2b      	ldr	r2, [pc, #172]	; (8008318 <TIM_CCxChannelCmd+0x104>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d00c      	beq.n	800828a <TIM_CCxChannelCmd+0x76>
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	4a2a      	ldr	r2, [pc, #168]	; (800831c <TIM_CCxChannelCmd+0x108>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d008      	beq.n	800828a <TIM_CCxChannelCmd+0x76>
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	4a29      	ldr	r2, [pc, #164]	; (8008320 <TIM_CCxChannelCmd+0x10c>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d004      	beq.n	800828a <TIM_CCxChannelCmd+0x76>
 8008280:	f641 61a1 	movw	r1, #7841	; 0x1ea1
 8008284:	4827      	ldr	r0, [pc, #156]	; (8008324 <TIM_CCxChannelCmd+0x110>)
 8008286:	f7fa f8f6 	bl	8002476 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d016      	beq.n	80082be <TIM_CCxChannelCmd+0xaa>
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	2b04      	cmp	r3, #4
 8008294:	d013      	beq.n	80082be <TIM_CCxChannelCmd+0xaa>
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	2b08      	cmp	r3, #8
 800829a:	d010      	beq.n	80082be <TIM_CCxChannelCmd+0xaa>
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	2b0c      	cmp	r3, #12
 80082a0:	d00d      	beq.n	80082be <TIM_CCxChannelCmd+0xaa>
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	2b10      	cmp	r3, #16
 80082a6:	d00a      	beq.n	80082be <TIM_CCxChannelCmd+0xaa>
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	2b14      	cmp	r3, #20
 80082ac:	d007      	beq.n	80082be <TIM_CCxChannelCmd+0xaa>
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	2b3c      	cmp	r3, #60	; 0x3c
 80082b2:	d004      	beq.n	80082be <TIM_CCxChannelCmd+0xaa>
 80082b4:	f641 61a2 	movw	r1, #7842	; 0x1ea2
 80082b8:	481a      	ldr	r0, [pc, #104]	; (8008324 <TIM_CCxChannelCmd+0x110>)
 80082ba:	f7fa f8dc 	bl	8002476 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	f003 031f 	and.w	r3, r3, #31
 80082c4:	2201      	movs	r2, #1
 80082c6:	fa02 f303 	lsl.w	r3, r2, r3
 80082ca:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	6a1a      	ldr	r2, [r3, #32]
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	43db      	mvns	r3, r3
 80082d4:	401a      	ands	r2, r3
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	6a1a      	ldr	r2, [r3, #32]
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	f003 031f 	and.w	r3, r3, #31
 80082e4:	6879      	ldr	r1, [r7, #4]
 80082e6:	fa01 f303 	lsl.w	r3, r1, r3
 80082ea:	431a      	orrs	r2, r3
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	621a      	str	r2, [r3, #32]
}
 80082f0:	bf00      	nop
 80082f2:	3718      	adds	r7, #24
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}
 80082f8:	40010000 	.word	0x40010000
 80082fc:	40000400 	.word	0x40000400
 8008300:	40000800 	.word	0x40000800
 8008304:	40000c00 	.word	0x40000c00
 8008308:	40010400 	.word	0x40010400
 800830c:	40014000 	.word	0x40014000
 8008310:	40014400 	.word	0x40014400
 8008314:	40014800 	.word	0x40014800
 8008318:	40001800 	.word	0x40001800
 800831c:	40001c00 	.word	0x40001c00
 8008320:	40002000 	.word	0x40002000
 8008324:	080145d0 	.word	0x080145d0

08008328 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b084      	sub	sp, #16
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a32      	ldr	r2, [pc, #200]	; (8008400 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d027      	beq.n	800838c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008344:	d022      	beq.n	800838c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a2e      	ldr	r2, [pc, #184]	; (8008404 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d01d      	beq.n	800838c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a2c      	ldr	r2, [pc, #176]	; (8008408 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d018      	beq.n	800838c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a2b      	ldr	r2, [pc, #172]	; (800840c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d013      	beq.n	800838c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a29      	ldr	r2, [pc, #164]	; (8008410 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d00e      	beq.n	800838c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a28      	ldr	r2, [pc, #160]	; (8008414 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d009      	beq.n	800838c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4a26      	ldr	r2, [pc, #152]	; (8008418 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d004      	beq.n	800838c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008382:	f240 71b6 	movw	r1, #1974	; 0x7b6
 8008386:	4825      	ldr	r0, [pc, #148]	; (800841c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008388:	f7fa f875 	bl	8002476 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d020      	beq.n	80083d6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	2b10      	cmp	r3, #16
 800839a:	d01c      	beq.n	80083d6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	2b20      	cmp	r3, #32
 80083a2:	d018      	beq.n	80083d6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	2b30      	cmp	r3, #48	; 0x30
 80083aa:	d014      	beq.n	80083d6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	2b40      	cmp	r3, #64	; 0x40
 80083b2:	d010      	beq.n	80083d6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	2b50      	cmp	r3, #80	; 0x50
 80083ba:	d00c      	beq.n	80083d6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	2b60      	cmp	r3, #96	; 0x60
 80083c2:	d008      	beq.n	80083d6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	2b70      	cmp	r3, #112	; 0x70
 80083ca:	d004      	beq.n	80083d6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80083cc:	f240 71b7 	movw	r1, #1975	; 0x7b7
 80083d0:	4812      	ldr	r0, [pc, #72]	; (800841c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80083d2:	f7fa f850 	bl	8002476 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	689b      	ldr	r3, [r3, #8]
 80083da:	2b80      	cmp	r3, #128	; 0x80
 80083dc:	d008      	beq.n	80083f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	689b      	ldr	r3, [r3, #8]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d004      	beq.n	80083f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80083e6:	f44f 61f7 	mov.w	r1, #1976	; 0x7b8
 80083ea:	480c      	ldr	r0, [pc, #48]	; (800841c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80083ec:	f7fa f843 	bl	8002476 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083f6:	2b01      	cmp	r3, #1
 80083f8:	d112      	bne.n	8008420 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 80083fa:	2302      	movs	r3, #2
 80083fc:	e0d7      	b.n	80085ae <HAL_TIMEx_MasterConfigSynchronization+0x286>
 80083fe:	bf00      	nop
 8008400:	40010000 	.word	0x40010000
 8008404:	40000400 	.word	0x40000400
 8008408:	40000800 	.word	0x40000800
 800840c:	40000c00 	.word	0x40000c00
 8008410:	40001000 	.word	0x40001000
 8008414:	40001400 	.word	0x40001400
 8008418:	40010400 	.word	0x40010400
 800841c:	08014608 	.word	0x08014608
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2201      	movs	r2, #1
 8008424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2202      	movs	r2, #2
 800842c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	689b      	ldr	r3, [r3, #8]
 800843e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a5c      	ldr	r2, [pc, #368]	; (80085b8 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d004      	beq.n	8008454 <HAL_TIMEx_MasterConfigSynchronization+0x12c>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a5b      	ldr	r2, [pc, #364]	; (80085bc <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d161      	bne.n	8008518 <HAL_TIMEx_MasterConfigSynchronization+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d054      	beq.n	8008506 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008464:	d04f      	beq.n	8008506 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800846e:	d04a      	beq.n	8008506 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008478:	d045      	beq.n	8008506 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008482:	d040      	beq.n	8008506 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800848c:	d03b      	beq.n	8008506 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008496:	d036      	beq.n	8008506 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80084a0:	d031      	beq.n	8008506 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 80084aa:	d02c      	beq.n	8008506 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80084b4:	d027      	beq.n	8008506 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	f5b3 0f10 	cmp.w	r3, #9437184	; 0x900000
 80084be:	d022      	beq.n	8008506 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80084c8:	d01d      	beq.n	8008506 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	f5b3 0f30 	cmp.w	r3, #11534336	; 0xb00000
 80084d2:	d018      	beq.n	8008506 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80084dc:	d013      	beq.n	8008506 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	685b      	ldr	r3, [r3, #4]
 80084e2:	f5b3 0f50 	cmp.w	r3, #13631488	; 0xd00000
 80084e6:	d00e      	beq.n	8008506 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	f5b3 0f60 	cmp.w	r3, #14680064	; 0xe00000
 80084f0:	d009      	beq.n	8008506 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	685b      	ldr	r3, [r3, #4]
 80084f6:	f5b3 0f70 	cmp.w	r3, #15728640	; 0xf00000
 80084fa:	d004      	beq.n	8008506 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80084fc:	f240 71ca 	movw	r1, #1994	; 0x7ca
 8008500:	482f      	ldr	r0, [pc, #188]	; (80085c0 <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 8008502:	f7f9 ffb8 	bl	8002476 <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800850c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	68fa      	ldr	r2, [r7, #12]
 8008514:	4313      	orrs	r3, r2
 8008516:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800851e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	68fa      	ldr	r2, [r7, #12]
 8008526:	4313      	orrs	r3, r2
 8008528:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	68fa      	ldr	r2, [r7, #12]
 8008530:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a20      	ldr	r2, [pc, #128]	; (80085b8 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d022      	beq.n	8008582 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008544:	d01d      	beq.n	8008582 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a1e      	ldr	r2, [pc, #120]	; (80085c4 <HAL_TIMEx_MasterConfigSynchronization+0x29c>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d018      	beq.n	8008582 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4a1c      	ldr	r2, [pc, #112]	; (80085c8 <HAL_TIMEx_MasterConfigSynchronization+0x2a0>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d013      	beq.n	8008582 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4a1b      	ldr	r2, [pc, #108]	; (80085cc <HAL_TIMEx_MasterConfigSynchronization+0x2a4>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d00e      	beq.n	8008582 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4a14      	ldr	r2, [pc, #80]	; (80085bc <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d009      	beq.n	8008582 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4a17      	ldr	r2, [pc, #92]	; (80085d0 <HAL_TIMEx_MasterConfigSynchronization+0x2a8>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d004      	beq.n	8008582 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a15      	ldr	r2, [pc, #84]	; (80085d4 <HAL_TIMEx_MasterConfigSynchronization+0x2ac>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d10c      	bne.n	800859c <HAL_TIMEx_MasterConfigSynchronization+0x274>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008588:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	689b      	ldr	r3, [r3, #8]
 800858e:	68ba      	ldr	r2, [r7, #8]
 8008590:	4313      	orrs	r3, r2
 8008592:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	68ba      	ldr	r2, [r7, #8]
 800859a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2201      	movs	r2, #1
 80085a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2200      	movs	r2, #0
 80085a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80085ac:	2300      	movs	r3, #0
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3710      	adds	r7, #16
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}
 80085b6:	bf00      	nop
 80085b8:	40010000 	.word	0x40010000
 80085bc:	40010400 	.word	0x40010400
 80085c0:	08014608 	.word	0x08014608
 80085c4:	40000400 	.word	0x40000400
 80085c8:	40000800 	.word	0x40000800
 80085cc:	40000c00 	.word	0x40000c00
 80085d0:	40014000 	.word	0x40014000
 80085d4:	40001800 	.word	0x40001800

080085d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80085d8:	b480      	push	{r7}
 80085da:	b083      	sub	sp, #12
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80085e0:	bf00      	nop
 80085e2:	370c      	adds	r7, #12
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr

080085ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b083      	sub	sp, #12
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80085f4:	bf00      	nop
 80085f6:	370c      	adds	r7, #12
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr

08008600 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008600:	b480      	push	{r7}
 8008602:	b083      	sub	sp, #12
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008608:	bf00      	nop
 800860a:	370c      	adds	r7, #12
 800860c:	46bd      	mov	sp, r7
 800860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008612:	4770      	bx	lr

08008614 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b082      	sub	sp, #8
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d101      	bne.n	8008626 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008622:	2301      	movs	r3, #1
 8008624:	e09f      	b.n	8008766 <HAL_UART_Init+0x152>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	699b      	ldr	r3, [r3, #24]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d02d      	beq.n	800868a <HAL_UART_Init+0x76>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4a4f      	ldr	r2, [pc, #316]	; (8008770 <HAL_UART_Init+0x15c>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d055      	beq.n	80086e4 <HAL_UART_Init+0xd0>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a4d      	ldr	r2, [pc, #308]	; (8008774 <HAL_UART_Init+0x160>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d050      	beq.n	80086e4 <HAL_UART_Init+0xd0>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a4c      	ldr	r2, [pc, #304]	; (8008778 <HAL_UART_Init+0x164>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d04b      	beq.n	80086e4 <HAL_UART_Init+0xd0>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a4a      	ldr	r2, [pc, #296]	; (800877c <HAL_UART_Init+0x168>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d046      	beq.n	80086e4 <HAL_UART_Init+0xd0>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a49      	ldr	r2, [pc, #292]	; (8008780 <HAL_UART_Init+0x16c>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d041      	beq.n	80086e4 <HAL_UART_Init+0xd0>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a47      	ldr	r2, [pc, #284]	; (8008784 <HAL_UART_Init+0x170>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d03c      	beq.n	80086e4 <HAL_UART_Init+0xd0>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a46      	ldr	r2, [pc, #280]	; (8008788 <HAL_UART_Init+0x174>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d037      	beq.n	80086e4 <HAL_UART_Init+0xd0>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a44      	ldr	r2, [pc, #272]	; (800878c <HAL_UART_Init+0x178>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d032      	beq.n	80086e4 <HAL_UART_Init+0xd0>
 800867e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8008682:	4843      	ldr	r0, [pc, #268]	; (8008790 <HAL_UART_Init+0x17c>)
 8008684:	f7f9 fef7 	bl	8002476 <assert_failed>
 8008688:	e02c      	b.n	80086e4 <HAL_UART_Init+0xd0>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4a38      	ldr	r2, [pc, #224]	; (8008770 <HAL_UART_Init+0x15c>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d027      	beq.n	80086e4 <HAL_UART_Init+0xd0>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4a36      	ldr	r2, [pc, #216]	; (8008774 <HAL_UART_Init+0x160>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d022      	beq.n	80086e4 <HAL_UART_Init+0xd0>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4a35      	ldr	r2, [pc, #212]	; (8008778 <HAL_UART_Init+0x164>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d01d      	beq.n	80086e4 <HAL_UART_Init+0xd0>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a33      	ldr	r2, [pc, #204]	; (800877c <HAL_UART_Init+0x168>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d018      	beq.n	80086e4 <HAL_UART_Init+0xd0>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4a32      	ldr	r2, [pc, #200]	; (8008780 <HAL_UART_Init+0x16c>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d013      	beq.n	80086e4 <HAL_UART_Init+0xd0>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a30      	ldr	r2, [pc, #192]	; (8008784 <HAL_UART_Init+0x170>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d00e      	beq.n	80086e4 <HAL_UART_Init+0xd0>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a2f      	ldr	r2, [pc, #188]	; (8008788 <HAL_UART_Init+0x174>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d009      	beq.n	80086e4 <HAL_UART_Init+0xd0>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4a2d      	ldr	r2, [pc, #180]	; (800878c <HAL_UART_Init+0x178>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d004      	beq.n	80086e4 <HAL_UART_Init+0xd0>
 80086da:	f240 1131 	movw	r1, #305	; 0x131
 80086de:	482c      	ldr	r0, [pc, #176]	; (8008790 <HAL_UART_Init+0x17c>)
 80086e0:	f7f9 fec9 	bl	8002476 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d106      	bne.n	80086fa <HAL_UART_Init+0xe6>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2200      	movs	r2, #0
 80086f0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f7fa fa9d 	bl	8002c34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2224      	movs	r2, #36	; 0x24
 80086fe:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	681a      	ldr	r2, [r3, #0]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f022 0201 	bic.w	r2, r2, #1
 800870e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f000 fbf9 	bl	8008f08 <UART_SetConfig>
 8008716:	4603      	mov	r3, r0
 8008718:	2b01      	cmp	r3, #1
 800871a:	d101      	bne.n	8008720 <HAL_UART_Init+0x10c>
  {
    return HAL_ERROR;
 800871c:	2301      	movs	r3, #1
 800871e:	e022      	b.n	8008766 <HAL_UART_Init+0x152>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008724:	2b00      	cmp	r3, #0
 8008726:	d002      	beq.n	800872e <HAL_UART_Init+0x11a>
  {
    UART_AdvFeatureConfig(huart);
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f000 fee3 	bl	80094f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	685a      	ldr	r2, [r3, #4]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800873c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	689a      	ldr	r2, [r3, #8]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800874c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	681a      	ldr	r2, [r3, #0]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f042 0201 	orr.w	r2, r2, #1
 800875c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f001 f820 	bl	80097a4 <UART_CheckIdleState>
 8008764:	4603      	mov	r3, r0
}
 8008766:	4618      	mov	r0, r3
 8008768:	3708      	adds	r7, #8
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
 800876e:	bf00      	nop
 8008770:	40011000 	.word	0x40011000
 8008774:	40004400 	.word	0x40004400
 8008778:	40004800 	.word	0x40004800
 800877c:	40004c00 	.word	0x40004c00
 8008780:	40005000 	.word	0x40005000
 8008784:	40011400 	.word	0x40011400
 8008788:	40007800 	.word	0x40007800
 800878c:	40007c00 	.word	0x40007c00
 8008790:	08014644 	.word	0x08014644

08008794 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b08a      	sub	sp, #40	; 0x28
 8008798:	af02      	add	r7, sp, #8
 800879a:	60f8      	str	r0, [r7, #12]
 800879c:	60b9      	str	r1, [r7, #8]
 800879e:	603b      	str	r3, [r7, #0]
 80087a0:	4613      	mov	r3, r2
 80087a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087a8:	2b20      	cmp	r3, #32
 80087aa:	d171      	bne.n	8008890 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d002      	beq.n	80087b8 <HAL_UART_Transmit+0x24>
 80087b2:	88fb      	ldrh	r3, [r7, #6]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d101      	bne.n	80087bc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80087b8:	2301      	movs	r3, #1
 80087ba:	e06a      	b.n	8008892 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2200      	movs	r2, #0
 80087c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2221      	movs	r2, #33	; 0x21
 80087c8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80087ca:	f7fa fb2f 	bl	8002e2c <HAL_GetTick>
 80087ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	88fa      	ldrh	r2, [r7, #6]
 80087d4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	88fa      	ldrh	r2, [r7, #6]
 80087dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	689b      	ldr	r3, [r3, #8]
 80087e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087e8:	d108      	bne.n	80087fc <HAL_UART_Transmit+0x68>
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	691b      	ldr	r3, [r3, #16]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d104      	bne.n	80087fc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80087f2:	2300      	movs	r3, #0
 80087f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	61bb      	str	r3, [r7, #24]
 80087fa:	e003      	b.n	8008804 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008800:	2300      	movs	r3, #0
 8008802:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008804:	e02c      	b.n	8008860 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	9300      	str	r3, [sp, #0]
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	2200      	movs	r2, #0
 800880e:	2180      	movs	r1, #128	; 0x80
 8008810:	68f8      	ldr	r0, [r7, #12]
 8008812:	f000 fffe 	bl	8009812 <UART_WaitOnFlagUntilTimeout>
 8008816:	4603      	mov	r3, r0
 8008818:	2b00      	cmp	r3, #0
 800881a:	d001      	beq.n	8008820 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800881c:	2303      	movs	r3, #3
 800881e:	e038      	b.n	8008892 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8008820:	69fb      	ldr	r3, [r7, #28]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d10b      	bne.n	800883e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008826:	69bb      	ldr	r3, [r7, #24]
 8008828:	881b      	ldrh	r3, [r3, #0]
 800882a:	461a      	mov	r2, r3
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008834:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008836:	69bb      	ldr	r3, [r7, #24]
 8008838:	3302      	adds	r3, #2
 800883a:	61bb      	str	r3, [r7, #24]
 800883c:	e007      	b.n	800884e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800883e:	69fb      	ldr	r3, [r7, #28]
 8008840:	781a      	ldrb	r2, [r3, #0]
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008848:	69fb      	ldr	r3, [r7, #28]
 800884a:	3301      	adds	r3, #1
 800884c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008854:	b29b      	uxth	r3, r3
 8008856:	3b01      	subs	r3, #1
 8008858:	b29a      	uxth	r2, r3
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008866:	b29b      	uxth	r3, r3
 8008868:	2b00      	cmp	r3, #0
 800886a:	d1cc      	bne.n	8008806 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	9300      	str	r3, [sp, #0]
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	2200      	movs	r2, #0
 8008874:	2140      	movs	r1, #64	; 0x40
 8008876:	68f8      	ldr	r0, [r7, #12]
 8008878:	f000 ffcb 	bl	8009812 <UART_WaitOnFlagUntilTimeout>
 800887c:	4603      	mov	r3, r0
 800887e:	2b00      	cmp	r3, #0
 8008880:	d001      	beq.n	8008886 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8008882:	2303      	movs	r3, #3
 8008884:	e005      	b.n	8008892 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	2220      	movs	r2, #32
 800888a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800888c:	2300      	movs	r3, #0
 800888e:	e000      	b.n	8008892 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8008890:	2302      	movs	r3, #2
  }
}
 8008892:	4618      	mov	r0, r3
 8008894:	3720      	adds	r7, #32
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}

0800889a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800889a:	b580      	push	{r7, lr}
 800889c:	b08a      	sub	sp, #40	; 0x28
 800889e:	af00      	add	r7, sp, #0
 80088a0:	60f8      	str	r0, [r7, #12]
 80088a2:	60b9      	str	r1, [r7, #8]
 80088a4:	4613      	mov	r3, r2
 80088a6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80088ae:	2b20      	cmp	r3, #32
 80088b0:	d132      	bne.n	8008918 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d002      	beq.n	80088be <HAL_UART_Receive_IT+0x24>
 80088b8:	88fb      	ldrh	r3, [r7, #6]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d101      	bne.n	80088c2 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80088be:	2301      	movs	r3, #1
 80088c0:	e02b      	b.n	800891a <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2200      	movs	r2, #0
 80088c6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d018      	beq.n	8008908 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	e853 3f00 	ldrex	r3, [r3]
 80088e2:	613b      	str	r3, [r7, #16]
   return(result);
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80088ea:	627b      	str	r3, [r7, #36]	; 0x24
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	461a      	mov	r2, r3
 80088f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f4:	623b      	str	r3, [r7, #32]
 80088f6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f8:	69f9      	ldr	r1, [r7, #28]
 80088fa:	6a3a      	ldr	r2, [r7, #32]
 80088fc:	e841 2300 	strex	r3, r2, [r1]
 8008900:	61bb      	str	r3, [r7, #24]
   return(result);
 8008902:	69bb      	ldr	r3, [r7, #24]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d1e6      	bne.n	80088d6 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008908:	88fb      	ldrh	r3, [r7, #6]
 800890a:	461a      	mov	r2, r3
 800890c:	68b9      	ldr	r1, [r7, #8]
 800890e:	68f8      	ldr	r0, [r7, #12]
 8008910:	f001 f846 	bl	80099a0 <UART_Start_Receive_IT>
 8008914:	4603      	mov	r3, r0
 8008916:	e000      	b.n	800891a <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8008918:	2302      	movs	r3, #2
  }
}
 800891a:	4618      	mov	r0, r3
 800891c:	3728      	adds	r7, #40	; 0x28
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}
	...

08008924 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b0ba      	sub	sp, #232	; 0xe8
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	69db      	ldr	r3, [r3, #28]
 8008932:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	689b      	ldr	r3, [r3, #8]
 8008946:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800894a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800894e:	f640 030f 	movw	r3, #2063	; 0x80f
 8008952:	4013      	ands	r3, r2
 8008954:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008958:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800895c:	2b00      	cmp	r3, #0
 800895e:	d115      	bne.n	800898c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008960:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008964:	f003 0320 	and.w	r3, r3, #32
 8008968:	2b00      	cmp	r3, #0
 800896a:	d00f      	beq.n	800898c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800896c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008970:	f003 0320 	and.w	r3, r3, #32
 8008974:	2b00      	cmp	r3, #0
 8008976:	d009      	beq.n	800898c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800897c:	2b00      	cmp	r3, #0
 800897e:	f000 8297 	beq.w	8008eb0 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	4798      	blx	r3
      }
      return;
 800898a:	e291      	b.n	8008eb0 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800898c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008990:	2b00      	cmp	r3, #0
 8008992:	f000 8117 	beq.w	8008bc4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008996:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800899a:	f003 0301 	and.w	r3, r3, #1
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d106      	bne.n	80089b0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80089a2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80089a6:	4b85      	ldr	r3, [pc, #532]	; (8008bbc <HAL_UART_IRQHandler+0x298>)
 80089a8:	4013      	ands	r3, r2
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	f000 810a 	beq.w	8008bc4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80089b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089b4:	f003 0301 	and.w	r3, r3, #1
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d011      	beq.n	80089e0 <HAL_UART_IRQHandler+0xbc>
 80089bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d00b      	beq.n	80089e0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	2201      	movs	r2, #1
 80089ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80089d6:	f043 0201 	orr.w	r2, r3, #1
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80089e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089e4:	f003 0302 	and.w	r3, r3, #2
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d011      	beq.n	8008a10 <HAL_UART_IRQHandler+0xec>
 80089ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089f0:	f003 0301 	and.w	r3, r3, #1
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d00b      	beq.n	8008a10 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	2202      	movs	r2, #2
 80089fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a06:	f043 0204 	orr.w	r2, r3, #4
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008a10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a14:	f003 0304 	and.w	r3, r3, #4
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d011      	beq.n	8008a40 <HAL_UART_IRQHandler+0x11c>
 8008a1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a20:	f003 0301 	and.w	r3, r3, #1
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d00b      	beq.n	8008a40 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	2204      	movs	r2, #4
 8008a2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a36:	f043 0202 	orr.w	r2, r3, #2
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008a40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a44:	f003 0308 	and.w	r3, r3, #8
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d017      	beq.n	8008a7c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008a4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a50:	f003 0320 	and.w	r3, r3, #32
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d105      	bne.n	8008a64 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008a58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a5c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d00b      	beq.n	8008a7c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	2208      	movs	r2, #8
 8008a6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a72:	f043 0208 	orr.w	r2, r3, #8
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d012      	beq.n	8008aae <HAL_UART_IRQHandler+0x18a>
 8008a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a8c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d00c      	beq.n	8008aae <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008a9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008aa4:	f043 0220 	orr.w	r2, r3, #32
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	f000 81fd 	beq.w	8008eb4 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008aba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008abe:	f003 0320 	and.w	r3, r3, #32
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d00d      	beq.n	8008ae2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008ac6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008aca:	f003 0320 	and.w	r3, r3, #32
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d007      	beq.n	8008ae2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d003      	beq.n	8008ae2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ae8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	689b      	ldr	r3, [r3, #8]
 8008af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008af6:	2b40      	cmp	r3, #64	; 0x40
 8008af8:	d005      	beq.n	8008b06 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008afa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008afe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d04f      	beq.n	8008ba6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f001 f810 	bl	8009b2c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	689b      	ldr	r3, [r3, #8]
 8008b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b16:	2b40      	cmp	r3, #64	; 0x40
 8008b18:	d141      	bne.n	8008b9e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	3308      	adds	r3, #8
 8008b20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008b28:	e853 3f00 	ldrex	r3, [r3]
 8008b2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008b30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008b34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	3308      	adds	r3, #8
 8008b42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008b46:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008b4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008b52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008b56:	e841 2300 	strex	r3, r2, [r1]
 8008b5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008b5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d1d9      	bne.n	8008b1a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d013      	beq.n	8008b96 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b72:	4a13      	ldr	r2, [pc, #76]	; (8008bc0 <HAL_UART_IRQHandler+0x29c>)
 8008b74:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f7fa fb36 	bl	80031ec <HAL_DMA_Abort_IT>
 8008b80:	4603      	mov	r3, r0
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d017      	beq.n	8008bb6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b8c:	687a      	ldr	r2, [r7, #4]
 8008b8e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008b90:	4610      	mov	r0, r2
 8008b92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b94:	e00f      	b.n	8008bb6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f000 f9a0 	bl	8008edc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b9c:	e00b      	b.n	8008bb6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f000 f99c 	bl	8008edc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ba4:	e007      	b.n	8008bb6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f000 f998 	bl	8008edc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8008bb4:	e17e      	b.n	8008eb4 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bb6:	bf00      	nop
    return;
 8008bb8:	e17c      	b.n	8008eb4 <HAL_UART_IRQHandler+0x590>
 8008bba:	bf00      	nop
 8008bbc:	04000120 	.word	0x04000120
 8008bc0:	08009bf5 	.word	0x08009bf5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bc8:	2b01      	cmp	r3, #1
 8008bca:	f040 814c 	bne.w	8008e66 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008bce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bd2:	f003 0310 	and.w	r3, r3, #16
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	f000 8145 	beq.w	8008e66 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008be0:	f003 0310 	and.w	r3, r3, #16
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	f000 813e 	beq.w	8008e66 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	2210      	movs	r2, #16
 8008bf0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	689b      	ldr	r3, [r3, #8]
 8008bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bfc:	2b40      	cmp	r3, #64	; 0x40
 8008bfe:	f040 80b6 	bne.w	8008d6e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	685b      	ldr	r3, [r3, #4]
 8008c0a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008c0e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	f000 8150 	beq.w	8008eb8 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008c1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008c22:	429a      	cmp	r2, r3
 8008c24:	f080 8148 	bcs.w	8008eb8 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008c2e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c36:	69db      	ldr	r3, [r3, #28]
 8008c38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c3c:	f000 8086 	beq.w	8008d4c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c48:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008c4c:	e853 3f00 	ldrex	r3, [r3]
 8008c50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008c54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008c58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	461a      	mov	r2, r3
 8008c66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008c6a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008c6e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c72:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008c76:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008c7a:	e841 2300 	strex	r3, r2, [r1]
 8008c7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008c82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d1da      	bne.n	8008c40 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	3308      	adds	r3, #8
 8008c90:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c94:	e853 3f00 	ldrex	r3, [r3]
 8008c98:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008c9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c9c:	f023 0301 	bic.w	r3, r3, #1
 8008ca0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	3308      	adds	r3, #8
 8008caa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008cae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008cb2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cb4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008cb6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008cba:	e841 2300 	strex	r3, r2, [r1]
 8008cbe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008cc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d1e1      	bne.n	8008c8a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	3308      	adds	r3, #8
 8008ccc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008cd0:	e853 3f00 	ldrex	r3, [r3]
 8008cd4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008cd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008cd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cdc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	3308      	adds	r3, #8
 8008ce6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008cea:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008cec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008cf0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008cf2:	e841 2300 	strex	r3, r2, [r1]
 8008cf6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008cf8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d1e3      	bne.n	8008cc6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2220      	movs	r2, #32
 8008d02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d14:	e853 3f00 	ldrex	r3, [r3]
 8008d18:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008d1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d1c:	f023 0310 	bic.w	r3, r3, #16
 8008d20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	461a      	mov	r2, r3
 8008d2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008d2e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008d30:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d32:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008d34:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008d36:	e841 2300 	strex	r3, r2, [r1]
 8008d3a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008d3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d1e4      	bne.n	8008d0c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d46:	4618      	mov	r0, r3
 8008d48:	f7fa f9e0 	bl	800310c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2202      	movs	r2, #2
 8008d50:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008d5e:	b29b      	uxth	r3, r3
 8008d60:	1ad3      	subs	r3, r2, r3
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	4619      	mov	r1, r3
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f000 f8c2 	bl	8008ef0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008d6c:	e0a4      	b.n	8008eb8 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008d7a:	b29b      	uxth	r3, r3
 8008d7c:	1ad3      	subs	r3, r2, r3
 8008d7e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008d88:	b29b      	uxth	r3, r3
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	f000 8096 	beq.w	8008ebc <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8008d90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	f000 8091 	beq.w	8008ebc <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008da2:	e853 3f00 	ldrex	r3, [r3]
 8008da6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008daa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008dae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	461a      	mov	r2, r3
 8008db8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008dbc:	647b      	str	r3, [r7, #68]	; 0x44
 8008dbe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dc0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008dc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008dc4:	e841 2300 	strex	r3, r2, [r1]
 8008dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008dca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d1e4      	bne.n	8008d9a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	3308      	adds	r3, #8
 8008dd6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dda:	e853 3f00 	ldrex	r3, [r3]
 8008dde:	623b      	str	r3, [r7, #32]
   return(result);
 8008de0:	6a3b      	ldr	r3, [r7, #32]
 8008de2:	f023 0301 	bic.w	r3, r3, #1
 8008de6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	3308      	adds	r3, #8
 8008df0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008df4:	633a      	str	r2, [r7, #48]	; 0x30
 8008df6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008df8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008dfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008dfc:	e841 2300 	strex	r3, r2, [r1]
 8008e00:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d1e3      	bne.n	8008dd0 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2220      	movs	r2, #32
 8008e0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2200      	movs	r2, #0
 8008e14:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	e853 3f00 	ldrex	r3, [r3]
 8008e28:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	f023 0310 	bic.w	r3, r3, #16
 8008e30:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	461a      	mov	r2, r3
 8008e3a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008e3e:	61fb      	str	r3, [r7, #28]
 8008e40:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e42:	69b9      	ldr	r1, [r7, #24]
 8008e44:	69fa      	ldr	r2, [r7, #28]
 8008e46:	e841 2300 	strex	r3, r2, [r1]
 8008e4a:	617b      	str	r3, [r7, #20]
   return(result);
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d1e4      	bne.n	8008e1c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2202      	movs	r2, #2
 8008e56:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008e58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008e5c:	4619      	mov	r1, r3
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f000 f846 	bl	8008ef0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008e64:	e02a      	b.n	8008ebc <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d00e      	beq.n	8008e90 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008e72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d008      	beq.n	8008e90 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d01c      	beq.n	8008ec0 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	4798      	blx	r3
    }
    return;
 8008e8e:	e017      	b.n	8008ec0 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008e90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d012      	beq.n	8008ec2 <HAL_UART_IRQHandler+0x59e>
 8008e9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d00c      	beq.n	8008ec2 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f000 feb9 	bl	8009c20 <UART_EndTransmit_IT>
    return;
 8008eae:	e008      	b.n	8008ec2 <HAL_UART_IRQHandler+0x59e>
      return;
 8008eb0:	bf00      	nop
 8008eb2:	e006      	b.n	8008ec2 <HAL_UART_IRQHandler+0x59e>
    return;
 8008eb4:	bf00      	nop
 8008eb6:	e004      	b.n	8008ec2 <HAL_UART_IRQHandler+0x59e>
      return;
 8008eb8:	bf00      	nop
 8008eba:	e002      	b.n	8008ec2 <HAL_UART_IRQHandler+0x59e>
      return;
 8008ebc:	bf00      	nop
 8008ebe:	e000      	b.n	8008ec2 <HAL_UART_IRQHandler+0x59e>
    return;
 8008ec0:	bf00      	nop
  }

}
 8008ec2:	37e8      	adds	r7, #232	; 0xe8
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}

08008ec8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b083      	sub	sp, #12
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008ed0:	bf00      	nop
 8008ed2:	370c      	adds	r7, #12
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr

08008edc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008edc:	b480      	push	{r7}
 8008ede:	b083      	sub	sp, #12
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008ee4:	bf00      	nop
 8008ee6:	370c      	adds	r7, #12
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eee:	4770      	bx	lr

08008ef0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b083      	sub	sp, #12
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	460b      	mov	r3, r1
 8008efa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008efc:	bf00      	nop
 8008efe:	370c      	adds	r7, #12
 8008f00:	46bd      	mov	sp, r7
 8008f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f06:	4770      	bx	lr

08008f08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b088      	sub	sp, #32
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008f10:	2300      	movs	r3, #0
 8008f12:	77bb      	strb	r3, [r7, #30]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	4aa0      	ldr	r2, [pc, #640]	; (800919c <UART_SetConfig+0x294>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d904      	bls.n	8008f28 <UART_SetConfig+0x20>
 8008f1e:	f640 315d 	movw	r1, #2909	; 0xb5d
 8008f22:	489f      	ldr	r0, [pc, #636]	; (80091a0 <UART_SetConfig+0x298>)
 8008f24:	f7f9 faa7 	bl	8002476 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	689b      	ldr	r3, [r3, #8]
 8008f2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f30:	d00d      	beq.n	8008f4e <UART_SetConfig+0x46>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	689b      	ldr	r3, [r3, #8]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d009      	beq.n	8008f4e <UART_SetConfig+0x46>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	689b      	ldr	r3, [r3, #8]
 8008f3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f42:	d004      	beq.n	8008f4e <UART_SetConfig+0x46>
 8008f44:	f640 315e 	movw	r1, #2910	; 0xb5e
 8008f48:	4895      	ldr	r0, [pc, #596]	; (80091a0 <UART_SetConfig+0x298>)
 8008f4a:	f7f9 fa94 	bl	8002476 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	68db      	ldr	r3, [r3, #12]
 8008f52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f56:	d012      	beq.n	8008f7e <UART_SetConfig+0x76>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	68db      	ldr	r3, [r3, #12]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d00e      	beq.n	8008f7e <UART_SetConfig+0x76>
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	68db      	ldr	r3, [r3, #12]
 8008f64:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008f68:	d009      	beq.n	8008f7e <UART_SetConfig+0x76>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	68db      	ldr	r3, [r3, #12]
 8008f6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f72:	d004      	beq.n	8008f7e <UART_SetConfig+0x76>
 8008f74:	f640 315f 	movw	r1, #2911	; 0xb5f
 8008f78:	4889      	ldr	r0, [pc, #548]	; (80091a0 <UART_SetConfig+0x298>)
 8008f7a:	f7f9 fa7c 	bl	8002476 <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6a1b      	ldr	r3, [r3, #32]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d009      	beq.n	8008f9a <UART_SetConfig+0x92>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6a1b      	ldr	r3, [r3, #32]
 8008f8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f8e:	d004      	beq.n	8008f9a <UART_SetConfig+0x92>
 8008f90:	f44f 6136 	mov.w	r1, #2912	; 0xb60
 8008f94:	4882      	ldr	r0, [pc, #520]	; (80091a0 <UART_SetConfig+0x298>)
 8008f96:	f7f9 fa6e 	bl	8002476 <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	691b      	ldr	r3, [r3, #16]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d00e      	beq.n	8008fc0 <UART_SetConfig+0xb8>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	691b      	ldr	r3, [r3, #16]
 8008fa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008faa:	d009      	beq.n	8008fc0 <UART_SetConfig+0xb8>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	691b      	ldr	r3, [r3, #16]
 8008fb0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008fb4:	d004      	beq.n	8008fc0 <UART_SetConfig+0xb8>
 8008fb6:	f640 3162 	movw	r1, #2914	; 0xb62
 8008fba:	4879      	ldr	r0, [pc, #484]	; (80091a0 <UART_SetConfig+0x298>)
 8008fbc:	f7f9 fa5b 	bl	8002476 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	695b      	ldr	r3, [r3, #20]
 8008fc4:	f023 030c 	bic.w	r3, r3, #12
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d103      	bne.n	8008fd4 <UART_SetConfig+0xcc>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	695b      	ldr	r3, [r3, #20]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d104      	bne.n	8008fde <UART_SetConfig+0xd6>
 8008fd4:	f640 3163 	movw	r1, #2915	; 0xb63
 8008fd8:	4871      	ldr	r0, [pc, #452]	; (80091a0 <UART_SetConfig+0x298>)
 8008fda:	f7f9 fa4c 	bl	8002476 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	699b      	ldr	r3, [r3, #24]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d013      	beq.n	800900e <UART_SetConfig+0x106>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	699b      	ldr	r3, [r3, #24]
 8008fea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fee:	d00e      	beq.n	800900e <UART_SetConfig+0x106>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	699b      	ldr	r3, [r3, #24]
 8008ff4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ff8:	d009      	beq.n	800900e <UART_SetConfig+0x106>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	699b      	ldr	r3, [r3, #24]
 8008ffe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009002:	d004      	beq.n	800900e <UART_SetConfig+0x106>
 8009004:	f640 3164 	movw	r1, #2916	; 0xb64
 8009008:	4865      	ldr	r0, [pc, #404]	; (80091a0 <UART_SetConfig+0x298>)
 800900a:	f7f9 fa34 	bl	8002476 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	69db      	ldr	r3, [r3, #28]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d009      	beq.n	800902a <UART_SetConfig+0x122>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	69db      	ldr	r3, [r3, #28]
 800901a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800901e:	d004      	beq.n	800902a <UART_SetConfig+0x122>
 8009020:	f640 3165 	movw	r1, #2917	; 0xb65
 8009024:	485e      	ldr	r0, [pc, #376]	; (80091a0 <UART_SetConfig+0x298>)
 8009026:	f7f9 fa26 	bl	8002476 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	689a      	ldr	r2, [r3, #8]
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	691b      	ldr	r3, [r3, #16]
 8009032:	431a      	orrs	r2, r3
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	695b      	ldr	r3, [r3, #20]
 8009038:	431a      	orrs	r2, r3
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	69db      	ldr	r3, [r3, #28]
 800903e:	4313      	orrs	r3, r2
 8009040:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	681a      	ldr	r2, [r3, #0]
 8009048:	4b56      	ldr	r3, [pc, #344]	; (80091a4 <UART_SetConfig+0x29c>)
 800904a:	4013      	ands	r3, r2
 800904c:	687a      	ldr	r2, [r7, #4]
 800904e:	6812      	ldr	r2, [r2, #0]
 8009050:	6979      	ldr	r1, [r7, #20]
 8009052:	430b      	orrs	r3, r1
 8009054:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	685b      	ldr	r3, [r3, #4]
 800905c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	68da      	ldr	r2, [r3, #12]
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	430a      	orrs	r2, r1
 800906a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	699b      	ldr	r3, [r3, #24]
 8009070:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6a1b      	ldr	r3, [r3, #32]
 8009076:	697a      	ldr	r2, [r7, #20]
 8009078:	4313      	orrs	r3, r2
 800907a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	689b      	ldr	r3, [r3, #8]
 8009082:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	697a      	ldr	r2, [r7, #20]
 800908c:	430a      	orrs	r2, r1
 800908e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	4a44      	ldr	r2, [pc, #272]	; (80091a8 <UART_SetConfig+0x2a0>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d121      	bne.n	80090de <UART_SetConfig+0x1d6>
 800909a:	4b44      	ldr	r3, [pc, #272]	; (80091ac <UART_SetConfig+0x2a4>)
 800909c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090a0:	f003 0303 	and.w	r3, r3, #3
 80090a4:	2b03      	cmp	r3, #3
 80090a6:	d817      	bhi.n	80090d8 <UART_SetConfig+0x1d0>
 80090a8:	a201      	add	r2, pc, #4	; (adr r2, 80090b0 <UART_SetConfig+0x1a8>)
 80090aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090ae:	bf00      	nop
 80090b0:	080090c1 	.word	0x080090c1
 80090b4:	080090cd 	.word	0x080090cd
 80090b8:	080090c7 	.word	0x080090c7
 80090bc:	080090d3 	.word	0x080090d3
 80090c0:	2301      	movs	r3, #1
 80090c2:	77fb      	strb	r3, [r7, #31]
 80090c4:	e14c      	b.n	8009360 <UART_SetConfig+0x458>
 80090c6:	2302      	movs	r3, #2
 80090c8:	77fb      	strb	r3, [r7, #31]
 80090ca:	e149      	b.n	8009360 <UART_SetConfig+0x458>
 80090cc:	2304      	movs	r3, #4
 80090ce:	77fb      	strb	r3, [r7, #31]
 80090d0:	e146      	b.n	8009360 <UART_SetConfig+0x458>
 80090d2:	2308      	movs	r3, #8
 80090d4:	77fb      	strb	r3, [r7, #31]
 80090d6:	e143      	b.n	8009360 <UART_SetConfig+0x458>
 80090d8:	2310      	movs	r3, #16
 80090da:	77fb      	strb	r3, [r7, #31]
 80090dc:	e140      	b.n	8009360 <UART_SetConfig+0x458>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	4a33      	ldr	r2, [pc, #204]	; (80091b0 <UART_SetConfig+0x2a8>)
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d132      	bne.n	800914e <UART_SetConfig+0x246>
 80090e8:	4b30      	ldr	r3, [pc, #192]	; (80091ac <UART_SetConfig+0x2a4>)
 80090ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090ee:	f003 030c 	and.w	r3, r3, #12
 80090f2:	2b0c      	cmp	r3, #12
 80090f4:	d828      	bhi.n	8009148 <UART_SetConfig+0x240>
 80090f6:	a201      	add	r2, pc, #4	; (adr r2, 80090fc <UART_SetConfig+0x1f4>)
 80090f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090fc:	08009131 	.word	0x08009131
 8009100:	08009149 	.word	0x08009149
 8009104:	08009149 	.word	0x08009149
 8009108:	08009149 	.word	0x08009149
 800910c:	0800913d 	.word	0x0800913d
 8009110:	08009149 	.word	0x08009149
 8009114:	08009149 	.word	0x08009149
 8009118:	08009149 	.word	0x08009149
 800911c:	08009137 	.word	0x08009137
 8009120:	08009149 	.word	0x08009149
 8009124:	08009149 	.word	0x08009149
 8009128:	08009149 	.word	0x08009149
 800912c:	08009143 	.word	0x08009143
 8009130:	2300      	movs	r3, #0
 8009132:	77fb      	strb	r3, [r7, #31]
 8009134:	e114      	b.n	8009360 <UART_SetConfig+0x458>
 8009136:	2302      	movs	r3, #2
 8009138:	77fb      	strb	r3, [r7, #31]
 800913a:	e111      	b.n	8009360 <UART_SetConfig+0x458>
 800913c:	2304      	movs	r3, #4
 800913e:	77fb      	strb	r3, [r7, #31]
 8009140:	e10e      	b.n	8009360 <UART_SetConfig+0x458>
 8009142:	2308      	movs	r3, #8
 8009144:	77fb      	strb	r3, [r7, #31]
 8009146:	e10b      	b.n	8009360 <UART_SetConfig+0x458>
 8009148:	2310      	movs	r3, #16
 800914a:	77fb      	strb	r3, [r7, #31]
 800914c:	e108      	b.n	8009360 <UART_SetConfig+0x458>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	4a18      	ldr	r2, [pc, #96]	; (80091b4 <UART_SetConfig+0x2ac>)
 8009154:	4293      	cmp	r3, r2
 8009156:	d12f      	bne.n	80091b8 <UART_SetConfig+0x2b0>
 8009158:	4b14      	ldr	r3, [pc, #80]	; (80091ac <UART_SetConfig+0x2a4>)
 800915a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800915e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009162:	2b30      	cmp	r3, #48	; 0x30
 8009164:	d013      	beq.n	800918e <UART_SetConfig+0x286>
 8009166:	2b30      	cmp	r3, #48	; 0x30
 8009168:	d814      	bhi.n	8009194 <UART_SetConfig+0x28c>
 800916a:	2b20      	cmp	r3, #32
 800916c:	d009      	beq.n	8009182 <UART_SetConfig+0x27a>
 800916e:	2b20      	cmp	r3, #32
 8009170:	d810      	bhi.n	8009194 <UART_SetConfig+0x28c>
 8009172:	2b00      	cmp	r3, #0
 8009174:	d002      	beq.n	800917c <UART_SetConfig+0x274>
 8009176:	2b10      	cmp	r3, #16
 8009178:	d006      	beq.n	8009188 <UART_SetConfig+0x280>
 800917a:	e00b      	b.n	8009194 <UART_SetConfig+0x28c>
 800917c:	2300      	movs	r3, #0
 800917e:	77fb      	strb	r3, [r7, #31]
 8009180:	e0ee      	b.n	8009360 <UART_SetConfig+0x458>
 8009182:	2302      	movs	r3, #2
 8009184:	77fb      	strb	r3, [r7, #31]
 8009186:	e0eb      	b.n	8009360 <UART_SetConfig+0x458>
 8009188:	2304      	movs	r3, #4
 800918a:	77fb      	strb	r3, [r7, #31]
 800918c:	e0e8      	b.n	8009360 <UART_SetConfig+0x458>
 800918e:	2308      	movs	r3, #8
 8009190:	77fb      	strb	r3, [r7, #31]
 8009192:	e0e5      	b.n	8009360 <UART_SetConfig+0x458>
 8009194:	2310      	movs	r3, #16
 8009196:	77fb      	strb	r3, [r7, #31]
 8009198:	e0e2      	b.n	8009360 <UART_SetConfig+0x458>
 800919a:	bf00      	nop
 800919c:	019bfcc0 	.word	0x019bfcc0
 80091a0:	08014644 	.word	0x08014644
 80091a4:	efff69f3 	.word	0xefff69f3
 80091a8:	40011000 	.word	0x40011000
 80091ac:	40023800 	.word	0x40023800
 80091b0:	40004400 	.word	0x40004400
 80091b4:	40004800 	.word	0x40004800
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	4aa5      	ldr	r2, [pc, #660]	; (8009454 <UART_SetConfig+0x54c>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	d120      	bne.n	8009204 <UART_SetConfig+0x2fc>
 80091c2:	4ba5      	ldr	r3, [pc, #660]	; (8009458 <UART_SetConfig+0x550>)
 80091c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091c8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80091cc:	2bc0      	cmp	r3, #192	; 0xc0
 80091ce:	d013      	beq.n	80091f8 <UART_SetConfig+0x2f0>
 80091d0:	2bc0      	cmp	r3, #192	; 0xc0
 80091d2:	d814      	bhi.n	80091fe <UART_SetConfig+0x2f6>
 80091d4:	2b80      	cmp	r3, #128	; 0x80
 80091d6:	d009      	beq.n	80091ec <UART_SetConfig+0x2e4>
 80091d8:	2b80      	cmp	r3, #128	; 0x80
 80091da:	d810      	bhi.n	80091fe <UART_SetConfig+0x2f6>
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d002      	beq.n	80091e6 <UART_SetConfig+0x2de>
 80091e0:	2b40      	cmp	r3, #64	; 0x40
 80091e2:	d006      	beq.n	80091f2 <UART_SetConfig+0x2ea>
 80091e4:	e00b      	b.n	80091fe <UART_SetConfig+0x2f6>
 80091e6:	2300      	movs	r3, #0
 80091e8:	77fb      	strb	r3, [r7, #31]
 80091ea:	e0b9      	b.n	8009360 <UART_SetConfig+0x458>
 80091ec:	2302      	movs	r3, #2
 80091ee:	77fb      	strb	r3, [r7, #31]
 80091f0:	e0b6      	b.n	8009360 <UART_SetConfig+0x458>
 80091f2:	2304      	movs	r3, #4
 80091f4:	77fb      	strb	r3, [r7, #31]
 80091f6:	e0b3      	b.n	8009360 <UART_SetConfig+0x458>
 80091f8:	2308      	movs	r3, #8
 80091fa:	77fb      	strb	r3, [r7, #31]
 80091fc:	e0b0      	b.n	8009360 <UART_SetConfig+0x458>
 80091fe:	2310      	movs	r3, #16
 8009200:	77fb      	strb	r3, [r7, #31]
 8009202:	e0ad      	b.n	8009360 <UART_SetConfig+0x458>
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4a94      	ldr	r2, [pc, #592]	; (800945c <UART_SetConfig+0x554>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d125      	bne.n	800925a <UART_SetConfig+0x352>
 800920e:	4b92      	ldr	r3, [pc, #584]	; (8009458 <UART_SetConfig+0x550>)
 8009210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009214:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009218:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800921c:	d017      	beq.n	800924e <UART_SetConfig+0x346>
 800921e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009222:	d817      	bhi.n	8009254 <UART_SetConfig+0x34c>
 8009224:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009228:	d00b      	beq.n	8009242 <UART_SetConfig+0x33a>
 800922a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800922e:	d811      	bhi.n	8009254 <UART_SetConfig+0x34c>
 8009230:	2b00      	cmp	r3, #0
 8009232:	d003      	beq.n	800923c <UART_SetConfig+0x334>
 8009234:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009238:	d006      	beq.n	8009248 <UART_SetConfig+0x340>
 800923a:	e00b      	b.n	8009254 <UART_SetConfig+0x34c>
 800923c:	2300      	movs	r3, #0
 800923e:	77fb      	strb	r3, [r7, #31]
 8009240:	e08e      	b.n	8009360 <UART_SetConfig+0x458>
 8009242:	2302      	movs	r3, #2
 8009244:	77fb      	strb	r3, [r7, #31]
 8009246:	e08b      	b.n	8009360 <UART_SetConfig+0x458>
 8009248:	2304      	movs	r3, #4
 800924a:	77fb      	strb	r3, [r7, #31]
 800924c:	e088      	b.n	8009360 <UART_SetConfig+0x458>
 800924e:	2308      	movs	r3, #8
 8009250:	77fb      	strb	r3, [r7, #31]
 8009252:	e085      	b.n	8009360 <UART_SetConfig+0x458>
 8009254:	2310      	movs	r3, #16
 8009256:	77fb      	strb	r3, [r7, #31]
 8009258:	e082      	b.n	8009360 <UART_SetConfig+0x458>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	4a80      	ldr	r2, [pc, #512]	; (8009460 <UART_SetConfig+0x558>)
 8009260:	4293      	cmp	r3, r2
 8009262:	d125      	bne.n	80092b0 <UART_SetConfig+0x3a8>
 8009264:	4b7c      	ldr	r3, [pc, #496]	; (8009458 <UART_SetConfig+0x550>)
 8009266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800926a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800926e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009272:	d017      	beq.n	80092a4 <UART_SetConfig+0x39c>
 8009274:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009278:	d817      	bhi.n	80092aa <UART_SetConfig+0x3a2>
 800927a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800927e:	d00b      	beq.n	8009298 <UART_SetConfig+0x390>
 8009280:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009284:	d811      	bhi.n	80092aa <UART_SetConfig+0x3a2>
 8009286:	2b00      	cmp	r3, #0
 8009288:	d003      	beq.n	8009292 <UART_SetConfig+0x38a>
 800928a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800928e:	d006      	beq.n	800929e <UART_SetConfig+0x396>
 8009290:	e00b      	b.n	80092aa <UART_SetConfig+0x3a2>
 8009292:	2301      	movs	r3, #1
 8009294:	77fb      	strb	r3, [r7, #31]
 8009296:	e063      	b.n	8009360 <UART_SetConfig+0x458>
 8009298:	2302      	movs	r3, #2
 800929a:	77fb      	strb	r3, [r7, #31]
 800929c:	e060      	b.n	8009360 <UART_SetConfig+0x458>
 800929e:	2304      	movs	r3, #4
 80092a0:	77fb      	strb	r3, [r7, #31]
 80092a2:	e05d      	b.n	8009360 <UART_SetConfig+0x458>
 80092a4:	2308      	movs	r3, #8
 80092a6:	77fb      	strb	r3, [r7, #31]
 80092a8:	e05a      	b.n	8009360 <UART_SetConfig+0x458>
 80092aa:	2310      	movs	r3, #16
 80092ac:	77fb      	strb	r3, [r7, #31]
 80092ae:	e057      	b.n	8009360 <UART_SetConfig+0x458>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4a6b      	ldr	r2, [pc, #428]	; (8009464 <UART_SetConfig+0x55c>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d125      	bne.n	8009306 <UART_SetConfig+0x3fe>
 80092ba:	4b67      	ldr	r3, [pc, #412]	; (8009458 <UART_SetConfig+0x550>)
 80092bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092c0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80092c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80092c8:	d017      	beq.n	80092fa <UART_SetConfig+0x3f2>
 80092ca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80092ce:	d817      	bhi.n	8009300 <UART_SetConfig+0x3f8>
 80092d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092d4:	d00b      	beq.n	80092ee <UART_SetConfig+0x3e6>
 80092d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092da:	d811      	bhi.n	8009300 <UART_SetConfig+0x3f8>
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d003      	beq.n	80092e8 <UART_SetConfig+0x3e0>
 80092e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092e4:	d006      	beq.n	80092f4 <UART_SetConfig+0x3ec>
 80092e6:	e00b      	b.n	8009300 <UART_SetConfig+0x3f8>
 80092e8:	2300      	movs	r3, #0
 80092ea:	77fb      	strb	r3, [r7, #31]
 80092ec:	e038      	b.n	8009360 <UART_SetConfig+0x458>
 80092ee:	2302      	movs	r3, #2
 80092f0:	77fb      	strb	r3, [r7, #31]
 80092f2:	e035      	b.n	8009360 <UART_SetConfig+0x458>
 80092f4:	2304      	movs	r3, #4
 80092f6:	77fb      	strb	r3, [r7, #31]
 80092f8:	e032      	b.n	8009360 <UART_SetConfig+0x458>
 80092fa:	2308      	movs	r3, #8
 80092fc:	77fb      	strb	r3, [r7, #31]
 80092fe:	e02f      	b.n	8009360 <UART_SetConfig+0x458>
 8009300:	2310      	movs	r3, #16
 8009302:	77fb      	strb	r3, [r7, #31]
 8009304:	e02c      	b.n	8009360 <UART_SetConfig+0x458>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	4a57      	ldr	r2, [pc, #348]	; (8009468 <UART_SetConfig+0x560>)
 800930c:	4293      	cmp	r3, r2
 800930e:	d125      	bne.n	800935c <UART_SetConfig+0x454>
 8009310:	4b51      	ldr	r3, [pc, #324]	; (8009458 <UART_SetConfig+0x550>)
 8009312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009316:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800931a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800931e:	d017      	beq.n	8009350 <UART_SetConfig+0x448>
 8009320:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009324:	d817      	bhi.n	8009356 <UART_SetConfig+0x44e>
 8009326:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800932a:	d00b      	beq.n	8009344 <UART_SetConfig+0x43c>
 800932c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009330:	d811      	bhi.n	8009356 <UART_SetConfig+0x44e>
 8009332:	2b00      	cmp	r3, #0
 8009334:	d003      	beq.n	800933e <UART_SetConfig+0x436>
 8009336:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800933a:	d006      	beq.n	800934a <UART_SetConfig+0x442>
 800933c:	e00b      	b.n	8009356 <UART_SetConfig+0x44e>
 800933e:	2300      	movs	r3, #0
 8009340:	77fb      	strb	r3, [r7, #31]
 8009342:	e00d      	b.n	8009360 <UART_SetConfig+0x458>
 8009344:	2302      	movs	r3, #2
 8009346:	77fb      	strb	r3, [r7, #31]
 8009348:	e00a      	b.n	8009360 <UART_SetConfig+0x458>
 800934a:	2304      	movs	r3, #4
 800934c:	77fb      	strb	r3, [r7, #31]
 800934e:	e007      	b.n	8009360 <UART_SetConfig+0x458>
 8009350:	2308      	movs	r3, #8
 8009352:	77fb      	strb	r3, [r7, #31]
 8009354:	e004      	b.n	8009360 <UART_SetConfig+0x458>
 8009356:	2310      	movs	r3, #16
 8009358:	77fb      	strb	r3, [r7, #31]
 800935a:	e001      	b.n	8009360 <UART_SetConfig+0x458>
 800935c:	2310      	movs	r3, #16
 800935e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	69db      	ldr	r3, [r3, #28]
 8009364:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009368:	d15c      	bne.n	8009424 <UART_SetConfig+0x51c>
  {
    switch (clocksource)
 800936a:	7ffb      	ldrb	r3, [r7, #31]
 800936c:	2b08      	cmp	r3, #8
 800936e:	d828      	bhi.n	80093c2 <UART_SetConfig+0x4ba>
 8009370:	a201      	add	r2, pc, #4	; (adr r2, 8009378 <UART_SetConfig+0x470>)
 8009372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009376:	bf00      	nop
 8009378:	0800939d 	.word	0x0800939d
 800937c:	080093a5 	.word	0x080093a5
 8009380:	080093ad 	.word	0x080093ad
 8009384:	080093c3 	.word	0x080093c3
 8009388:	080093b3 	.word	0x080093b3
 800938c:	080093c3 	.word	0x080093c3
 8009390:	080093c3 	.word	0x080093c3
 8009394:	080093c3 	.word	0x080093c3
 8009398:	080093bb 	.word	0x080093bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800939c:	f7fb ffec 	bl	8005378 <HAL_RCC_GetPCLK1Freq>
 80093a0:	61b8      	str	r0, [r7, #24]
        break;
 80093a2:	e013      	b.n	80093cc <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80093a4:	f7fb fffc 	bl	80053a0 <HAL_RCC_GetPCLK2Freq>
 80093a8:	61b8      	str	r0, [r7, #24]
        break;
 80093aa:	e00f      	b.n	80093cc <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80093ac:	4b2f      	ldr	r3, [pc, #188]	; (800946c <UART_SetConfig+0x564>)
 80093ae:	61bb      	str	r3, [r7, #24]
        break;
 80093b0:	e00c      	b.n	80093cc <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80093b2:	f7fb ff0f 	bl	80051d4 <HAL_RCC_GetSysClockFreq>
 80093b6:	61b8      	str	r0, [r7, #24]
        break;
 80093b8:	e008      	b.n	80093cc <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80093ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80093be:	61bb      	str	r3, [r7, #24]
        break;
 80093c0:	e004      	b.n	80093cc <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 80093c2:	2300      	movs	r3, #0
 80093c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80093c6:	2301      	movs	r3, #1
 80093c8:	77bb      	strb	r3, [r7, #30]
        break;
 80093ca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80093cc:	69bb      	ldr	r3, [r7, #24]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	f000 8082 	beq.w	80094d8 <UART_SetConfig+0x5d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80093d4:	69bb      	ldr	r3, [r7, #24]
 80093d6:	005a      	lsls	r2, r3, #1
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	685b      	ldr	r3, [r3, #4]
 80093dc:	085b      	lsrs	r3, r3, #1
 80093de:	441a      	add	r2, r3
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	685b      	ldr	r3, [r3, #4]
 80093e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80093e8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80093ea:	693b      	ldr	r3, [r7, #16]
 80093ec:	2b0f      	cmp	r3, #15
 80093ee:	d916      	bls.n	800941e <UART_SetConfig+0x516>
 80093f0:	693b      	ldr	r3, [r7, #16]
 80093f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093f6:	d212      	bcs.n	800941e <UART_SetConfig+0x516>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	b29b      	uxth	r3, r3
 80093fc:	f023 030f 	bic.w	r3, r3, #15
 8009400:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	085b      	lsrs	r3, r3, #1
 8009406:	b29b      	uxth	r3, r3
 8009408:	f003 0307 	and.w	r3, r3, #7
 800940c:	b29a      	uxth	r2, r3
 800940e:	89fb      	ldrh	r3, [r7, #14]
 8009410:	4313      	orrs	r3, r2
 8009412:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	89fa      	ldrh	r2, [r7, #14]
 800941a:	60da      	str	r2, [r3, #12]
 800941c:	e05c      	b.n	80094d8 <UART_SetConfig+0x5d0>
      }
      else
      {
        ret = HAL_ERROR;
 800941e:	2301      	movs	r3, #1
 8009420:	77bb      	strb	r3, [r7, #30]
 8009422:	e059      	b.n	80094d8 <UART_SetConfig+0x5d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009424:	7ffb      	ldrb	r3, [r7, #31]
 8009426:	2b08      	cmp	r3, #8
 8009428:	d835      	bhi.n	8009496 <UART_SetConfig+0x58e>
 800942a:	a201      	add	r2, pc, #4	; (adr r2, 8009430 <UART_SetConfig+0x528>)
 800942c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009430:	08009471 	.word	0x08009471
 8009434:	08009479 	.word	0x08009479
 8009438:	08009481 	.word	0x08009481
 800943c:	08009497 	.word	0x08009497
 8009440:	08009487 	.word	0x08009487
 8009444:	08009497 	.word	0x08009497
 8009448:	08009497 	.word	0x08009497
 800944c:	08009497 	.word	0x08009497
 8009450:	0800948f 	.word	0x0800948f
 8009454:	40004c00 	.word	0x40004c00
 8009458:	40023800 	.word	0x40023800
 800945c:	40005000 	.word	0x40005000
 8009460:	40011400 	.word	0x40011400
 8009464:	40007800 	.word	0x40007800
 8009468:	40007c00 	.word	0x40007c00
 800946c:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009470:	f7fb ff82 	bl	8005378 <HAL_RCC_GetPCLK1Freq>
 8009474:	61b8      	str	r0, [r7, #24]
        break;
 8009476:	e013      	b.n	80094a0 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009478:	f7fb ff92 	bl	80053a0 <HAL_RCC_GetPCLK2Freq>
 800947c:	61b8      	str	r0, [r7, #24]
        break;
 800947e:	e00f      	b.n	80094a0 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009480:	4b1b      	ldr	r3, [pc, #108]	; (80094f0 <UART_SetConfig+0x5e8>)
 8009482:	61bb      	str	r3, [r7, #24]
        break;
 8009484:	e00c      	b.n	80094a0 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009486:	f7fb fea5 	bl	80051d4 <HAL_RCC_GetSysClockFreq>
 800948a:	61b8      	str	r0, [r7, #24]
        break;
 800948c:	e008      	b.n	80094a0 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800948e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009492:	61bb      	str	r3, [r7, #24]
        break;
 8009494:	e004      	b.n	80094a0 <UART_SetConfig+0x598>
      default:
        pclk = 0U;
 8009496:	2300      	movs	r3, #0
 8009498:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800949a:	2301      	movs	r3, #1
 800949c:	77bb      	strb	r3, [r7, #30]
        break;
 800949e:	bf00      	nop
    }

    if (pclk != 0U)
 80094a0:	69bb      	ldr	r3, [r7, #24]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d018      	beq.n	80094d8 <UART_SetConfig+0x5d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	685b      	ldr	r3, [r3, #4]
 80094aa:	085a      	lsrs	r2, r3, #1
 80094ac:	69bb      	ldr	r3, [r7, #24]
 80094ae:	441a      	add	r2, r3
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	685b      	ldr	r3, [r3, #4]
 80094b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80094b8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	2b0f      	cmp	r3, #15
 80094be:	d909      	bls.n	80094d4 <UART_SetConfig+0x5cc>
 80094c0:	693b      	ldr	r3, [r7, #16]
 80094c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094c6:	d205      	bcs.n	80094d4 <UART_SetConfig+0x5cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	b29a      	uxth	r2, r3
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	60da      	str	r2, [r3, #12]
 80094d2:	e001      	b.n	80094d8 <UART_SetConfig+0x5d0>
      }
      else
      {
        ret = HAL_ERROR;
 80094d4:	2301      	movs	r3, #1
 80094d6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2200      	movs	r2, #0
 80094dc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2200      	movs	r2, #0
 80094e2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80094e4:	7fbb      	ldrb	r3, [r7, #30]
}
 80094e6:	4618      	mov	r0, r3
 80094e8:	3720      	adds	r7, #32
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}
 80094ee:	bf00      	nop
 80094f0:	00f42400 	.word	0x00f42400

080094f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b082      	sub	sp, #8
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009500:	2bff      	cmp	r3, #255	; 0xff
 8009502:	d904      	bls.n	800950e <UART_AdvFeatureConfig+0x1a>
 8009504:	f640 31e6 	movw	r1, #3046	; 0xbe6
 8009508:	488e      	ldr	r0, [pc, #568]	; (8009744 <UART_AdvFeatureConfig+0x250>)
 800950a:	f7f8 ffb4 	bl	8002476 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009512:	f003 0301 	and.w	r3, r3, #1
 8009516:	2b00      	cmp	r3, #0
 8009518:	d018      	beq.n	800954c <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800951e:	2b00      	cmp	r3, #0
 8009520:	d009      	beq.n	8009536 <UART_AdvFeatureConfig+0x42>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009526:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800952a:	d004      	beq.n	8009536 <UART_AdvFeatureConfig+0x42>
 800952c:	f640 31eb 	movw	r1, #3051	; 0xbeb
 8009530:	4884      	ldr	r0, [pc, #528]	; (8009744 <UART_AdvFeatureConfig+0x250>)
 8009532:	f7f8 ffa0 	bl	8002476 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	685b      	ldr	r3, [r3, #4]
 800953c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	430a      	orrs	r2, r1
 800954a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009550:	f003 0302 	and.w	r3, r3, #2
 8009554:	2b00      	cmp	r3, #0
 8009556:	d018      	beq.n	800958a <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800955c:	2b00      	cmp	r3, #0
 800955e:	d009      	beq.n	8009574 <UART_AdvFeatureConfig+0x80>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009568:	d004      	beq.n	8009574 <UART_AdvFeatureConfig+0x80>
 800956a:	f640 31f2 	movw	r1, #3058	; 0xbf2
 800956e:	4875      	ldr	r0, [pc, #468]	; (8009744 <UART_AdvFeatureConfig+0x250>)
 8009570:	f7f8 ff81 	bl	8002476 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	685b      	ldr	r3, [r3, #4]
 800957a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	430a      	orrs	r2, r1
 8009588:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800958e:	f003 0304 	and.w	r3, r3, #4
 8009592:	2b00      	cmp	r3, #0
 8009594:	d018      	beq.n	80095c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800959a:	2b00      	cmp	r3, #0
 800959c:	d009      	beq.n	80095b2 <UART_AdvFeatureConfig+0xbe>
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80095a6:	d004      	beq.n	80095b2 <UART_AdvFeatureConfig+0xbe>
 80095a8:	f640 31f9 	movw	r1, #3065	; 0xbf9
 80095ac:	4865      	ldr	r0, [pc, #404]	; (8009744 <UART_AdvFeatureConfig+0x250>)
 80095ae:	f7f8 ff62 	bl	8002476 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	685b      	ldr	r3, [r3, #4]
 80095b8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	430a      	orrs	r2, r1
 80095c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095cc:	f003 0308 	and.w	r3, r3, #8
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d018      	beq.n	8009606 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d009      	beq.n	80095f0 <UART_AdvFeatureConfig+0xfc>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095e4:	d004      	beq.n	80095f0 <UART_AdvFeatureConfig+0xfc>
 80095e6:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80095ea:	4856      	ldr	r0, [pc, #344]	; (8009744 <UART_AdvFeatureConfig+0x250>)
 80095ec:	f7f8 ff43 	bl	8002476 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	685b      	ldr	r3, [r3, #4]
 80095f6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	430a      	orrs	r2, r1
 8009604:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800960a:	f003 0310 	and.w	r3, r3, #16
 800960e:	2b00      	cmp	r3, #0
 8009610:	d018      	beq.n	8009644 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009616:	2b00      	cmp	r3, #0
 8009618:	d009      	beq.n	800962e <UART_AdvFeatureConfig+0x13a>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800961e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009622:	d004      	beq.n	800962e <UART_AdvFeatureConfig+0x13a>
 8009624:	f640 4107 	movw	r1, #3079	; 0xc07
 8009628:	4846      	ldr	r0, [pc, #280]	; (8009744 <UART_AdvFeatureConfig+0x250>)
 800962a:	f7f8 ff24 	bl	8002476 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	689b      	ldr	r3, [r3, #8]
 8009634:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	430a      	orrs	r2, r1
 8009642:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009648:	f003 0320 	and.w	r3, r3, #32
 800964c:	2b00      	cmp	r3, #0
 800964e:	d018      	beq.n	8009682 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009654:	2b00      	cmp	r3, #0
 8009656:	d009      	beq.n	800966c <UART_AdvFeatureConfig+0x178>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800965c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009660:	d004      	beq.n	800966c <UART_AdvFeatureConfig+0x178>
 8009662:	f640 410e 	movw	r1, #3086	; 0xc0e
 8009666:	4837      	ldr	r0, [pc, #220]	; (8009744 <UART_AdvFeatureConfig+0x250>)
 8009668:	f7f8 ff05 	bl	8002476 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	689b      	ldr	r3, [r3, #8]
 8009672:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	430a      	orrs	r2, r1
 8009680:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800968a:	2b00      	cmp	r3, #0
 800968c:	d064      	beq.n	8009758 <UART_AdvFeatureConfig+0x264>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	4a2d      	ldr	r2, [pc, #180]	; (8009748 <UART_AdvFeatureConfig+0x254>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d013      	beq.n	80096c0 <UART_AdvFeatureConfig+0x1cc>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	4a2b      	ldr	r2, [pc, #172]	; (800974c <UART_AdvFeatureConfig+0x258>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	d00e      	beq.n	80096c0 <UART_AdvFeatureConfig+0x1cc>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	4a2a      	ldr	r2, [pc, #168]	; (8009750 <UART_AdvFeatureConfig+0x25c>)
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d009      	beq.n	80096c0 <UART_AdvFeatureConfig+0x1cc>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	4a28      	ldr	r2, [pc, #160]	; (8009754 <UART_AdvFeatureConfig+0x260>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d004      	beq.n	80096c0 <UART_AdvFeatureConfig+0x1cc>
 80096b6:	f640 4115 	movw	r1, #3093	; 0xc15
 80096ba:	4822      	ldr	r0, [pc, #136]	; (8009744 <UART_AdvFeatureConfig+0x250>)
 80096bc:	f7f8 fedb 	bl	8002476 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d009      	beq.n	80096dc <UART_AdvFeatureConfig+0x1e8>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80096d0:	d004      	beq.n	80096dc <UART_AdvFeatureConfig+0x1e8>
 80096d2:	f640 4116 	movw	r1, #3094	; 0xc16
 80096d6:	481b      	ldr	r0, [pc, #108]	; (8009744 <UART_AdvFeatureConfig+0x250>)
 80096d8:	f7f8 fecd 	bl	8002476 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	685b      	ldr	r3, [r3, #4]
 80096e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	430a      	orrs	r2, r1
 80096f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80096fa:	d12d      	bne.n	8009758 <UART_AdvFeatureConfig+0x264>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009700:	2b00      	cmp	r3, #0
 8009702:	d013      	beq.n	800972c <UART_AdvFeatureConfig+0x238>
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009708:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800970c:	d00e      	beq.n	800972c <UART_AdvFeatureConfig+0x238>
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009712:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009716:	d009      	beq.n	800972c <UART_AdvFeatureConfig+0x238>
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800971c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009720:	d004      	beq.n	800972c <UART_AdvFeatureConfig+0x238>
 8009722:	f640 411b 	movw	r1, #3099	; 0xc1b
 8009726:	4807      	ldr	r0, [pc, #28]	; (8009744 <UART_AdvFeatureConfig+0x250>)
 8009728:	f7f8 fea5 	bl	8002476 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	685b      	ldr	r3, [r3, #4]
 8009732:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	430a      	orrs	r2, r1
 8009740:	605a      	str	r2, [r3, #4]
 8009742:	e009      	b.n	8009758 <UART_AdvFeatureConfig+0x264>
 8009744:	08014644 	.word	0x08014644
 8009748:	40011000 	.word	0x40011000
 800974c:	40004400 	.word	0x40004400
 8009750:	40004800 	.word	0x40004800
 8009754:	40011400 	.word	0x40011400
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800975c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009760:	2b00      	cmp	r3, #0
 8009762:	d018      	beq.n	8009796 <UART_AdvFeatureConfig+0x2a2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009768:	2b00      	cmp	r3, #0
 800976a:	d009      	beq.n	8009780 <UART_AdvFeatureConfig+0x28c>
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009770:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009774:	d004      	beq.n	8009780 <UART_AdvFeatureConfig+0x28c>
 8009776:	f640 4123 	movw	r1, #3107	; 0xc23
 800977a:	4809      	ldr	r0, [pc, #36]	; (80097a0 <UART_AdvFeatureConfig+0x2ac>)
 800977c:	f7f8 fe7b 	bl	8002476 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	685b      	ldr	r3, [r3, #4]
 8009786:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	430a      	orrs	r2, r1
 8009794:	605a      	str	r2, [r3, #4]
  }
}
 8009796:	bf00      	nop
 8009798:	3708      	adds	r7, #8
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}
 800979e:	bf00      	nop
 80097a0:	08014644 	.word	0x08014644

080097a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b086      	sub	sp, #24
 80097a8:	af02      	add	r7, sp, #8
 80097aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2200      	movs	r2, #0
 80097b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80097b4:	f7f9 fb3a 	bl	8002e2c <HAL_GetTick>
 80097b8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f003 0308 	and.w	r3, r3, #8
 80097c4:	2b08      	cmp	r3, #8
 80097c6:	d10e      	bne.n	80097e6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80097c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80097cc:	9300      	str	r3, [sp, #0]
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	2200      	movs	r2, #0
 80097d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f000 f81b 	bl	8009812 <UART_WaitOnFlagUntilTimeout>
 80097dc:	4603      	mov	r3, r0
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d001      	beq.n	80097e6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80097e2:	2303      	movs	r3, #3
 80097e4:	e011      	b.n	800980a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2220      	movs	r2, #32
 80097ea:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2220      	movs	r2, #32
 80097f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2200      	movs	r2, #0
 80097f8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2200      	movs	r2, #0
 80097fe:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2200      	movs	r2, #0
 8009804:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8009808:	2300      	movs	r3, #0
}
 800980a:	4618      	mov	r0, r3
 800980c:	3710      	adds	r7, #16
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}

08009812 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009812:	b580      	push	{r7, lr}
 8009814:	b09c      	sub	sp, #112	; 0x70
 8009816:	af00      	add	r7, sp, #0
 8009818:	60f8      	str	r0, [r7, #12]
 800981a:	60b9      	str	r1, [r7, #8]
 800981c:	603b      	str	r3, [r7, #0]
 800981e:	4613      	mov	r3, r2
 8009820:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009822:	e0a7      	b.n	8009974 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009824:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800982a:	f000 80a3 	beq.w	8009974 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800982e:	f7f9 fafd 	bl	8002e2c <HAL_GetTick>
 8009832:	4602      	mov	r2, r0
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	1ad3      	subs	r3, r2, r3
 8009838:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800983a:	429a      	cmp	r2, r3
 800983c:	d302      	bcc.n	8009844 <UART_WaitOnFlagUntilTimeout+0x32>
 800983e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009840:	2b00      	cmp	r3, #0
 8009842:	d13f      	bne.n	80098c4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800984a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800984c:	e853 3f00 	ldrex	r3, [r3]
 8009850:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009852:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009854:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009858:	667b      	str	r3, [r7, #100]	; 0x64
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	461a      	mov	r2, r3
 8009860:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009862:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009864:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009866:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009868:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800986a:	e841 2300 	strex	r3, r2, [r1]
 800986e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009870:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009872:	2b00      	cmp	r3, #0
 8009874:	d1e6      	bne.n	8009844 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	3308      	adds	r3, #8
 800987c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800987e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009880:	e853 3f00 	ldrex	r3, [r3]
 8009884:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009888:	f023 0301 	bic.w	r3, r3, #1
 800988c:	663b      	str	r3, [r7, #96]	; 0x60
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	3308      	adds	r3, #8
 8009894:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009896:	64ba      	str	r2, [r7, #72]	; 0x48
 8009898:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800989a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800989c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800989e:	e841 2300 	strex	r3, r2, [r1]
 80098a2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80098a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d1e5      	bne.n	8009876 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	2220      	movs	r2, #32
 80098ae:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	2220      	movs	r2, #32
 80098b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	2200      	movs	r2, #0
 80098bc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80098c0:	2303      	movs	r3, #3
 80098c2:	e068      	b.n	8009996 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f003 0304 	and.w	r3, r3, #4
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d050      	beq.n	8009974 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	69db      	ldr	r3, [r3, #28]
 80098d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80098dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80098e0:	d148      	bne.n	8009974 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80098ea:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098f4:	e853 3f00 	ldrex	r3, [r3]
 80098f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80098fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009900:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	461a      	mov	r2, r3
 8009908:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800990a:	637b      	str	r3, [r7, #52]	; 0x34
 800990c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800990e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009910:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009912:	e841 2300 	strex	r3, r2, [r1]
 8009916:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800991a:	2b00      	cmp	r3, #0
 800991c:	d1e6      	bne.n	80098ec <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	3308      	adds	r3, #8
 8009924:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	e853 3f00 	ldrex	r3, [r3]
 800992c:	613b      	str	r3, [r7, #16]
   return(result);
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	f023 0301 	bic.w	r3, r3, #1
 8009934:	66bb      	str	r3, [r7, #104]	; 0x68
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	3308      	adds	r3, #8
 800993c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800993e:	623a      	str	r2, [r7, #32]
 8009940:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009942:	69f9      	ldr	r1, [r7, #28]
 8009944:	6a3a      	ldr	r2, [r7, #32]
 8009946:	e841 2300 	strex	r3, r2, [r1]
 800994a:	61bb      	str	r3, [r7, #24]
   return(result);
 800994c:	69bb      	ldr	r3, [r7, #24]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d1e5      	bne.n	800991e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	2220      	movs	r2, #32
 8009956:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	2220      	movs	r2, #32
 800995c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	2220      	movs	r2, #32
 8009964:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	2200      	movs	r2, #0
 800996c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8009970:	2303      	movs	r3, #3
 8009972:	e010      	b.n	8009996 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	69da      	ldr	r2, [r3, #28]
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	4013      	ands	r3, r2
 800997e:	68ba      	ldr	r2, [r7, #8]
 8009980:	429a      	cmp	r2, r3
 8009982:	bf0c      	ite	eq
 8009984:	2301      	moveq	r3, #1
 8009986:	2300      	movne	r3, #0
 8009988:	b2db      	uxtb	r3, r3
 800998a:	461a      	mov	r2, r3
 800998c:	79fb      	ldrb	r3, [r7, #7]
 800998e:	429a      	cmp	r2, r3
 8009990:	f43f af48 	beq.w	8009824 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009994:	2300      	movs	r3, #0
}
 8009996:	4618      	mov	r0, r3
 8009998:	3770      	adds	r7, #112	; 0x70
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}
	...

080099a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b097      	sub	sp, #92	; 0x5c
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	60f8      	str	r0, [r7, #12]
 80099a8:	60b9      	str	r1, [r7, #8]
 80099aa:	4613      	mov	r3, r2
 80099ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	68ba      	ldr	r2, [r7, #8]
 80099b2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	88fa      	ldrh	r2, [r7, #6]
 80099b8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	88fa      	ldrh	r2, [r7, #6]
 80099c0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	2200      	movs	r2, #0
 80099c8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	689b      	ldr	r3, [r3, #8]
 80099ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099d2:	d10e      	bne.n	80099f2 <UART_Start_Receive_IT+0x52>
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	691b      	ldr	r3, [r3, #16]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d105      	bne.n	80099e8 <UART_Start_Receive_IT+0x48>
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	f240 12ff 	movw	r2, #511	; 0x1ff
 80099e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80099e6:	e02d      	b.n	8009a44 <UART_Start_Receive_IT+0xa4>
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	22ff      	movs	r2, #255	; 0xff
 80099ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80099f0:	e028      	b.n	8009a44 <UART_Start_Receive_IT+0xa4>
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	689b      	ldr	r3, [r3, #8]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d10d      	bne.n	8009a16 <UART_Start_Receive_IT+0x76>
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	691b      	ldr	r3, [r3, #16]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d104      	bne.n	8009a0c <UART_Start_Receive_IT+0x6c>
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	22ff      	movs	r2, #255	; 0xff
 8009a06:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009a0a:	e01b      	b.n	8009a44 <UART_Start_Receive_IT+0xa4>
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	227f      	movs	r2, #127	; 0x7f
 8009a10:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009a14:	e016      	b.n	8009a44 <UART_Start_Receive_IT+0xa4>
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	689b      	ldr	r3, [r3, #8]
 8009a1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009a1e:	d10d      	bne.n	8009a3c <UART_Start_Receive_IT+0x9c>
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	691b      	ldr	r3, [r3, #16]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d104      	bne.n	8009a32 <UART_Start_Receive_IT+0x92>
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	227f      	movs	r2, #127	; 0x7f
 8009a2c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009a30:	e008      	b.n	8009a44 <UART_Start_Receive_IT+0xa4>
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	223f      	movs	r2, #63	; 0x3f
 8009a36:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009a3a:	e003      	b.n	8009a44 <UART_Start_Receive_IT+0xa4>
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	2200      	movs	r2, #0
 8009a48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	2222      	movs	r2, #34	; 0x22
 8009a50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	3308      	adds	r3, #8
 8009a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a5e:	e853 3f00 	ldrex	r3, [r3]
 8009a62:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a66:	f043 0301 	orr.w	r3, r3, #1
 8009a6a:	657b      	str	r3, [r7, #84]	; 0x54
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	3308      	adds	r3, #8
 8009a72:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009a74:	64ba      	str	r2, [r7, #72]	; 0x48
 8009a76:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a78:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009a7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009a7c:	e841 2300 	strex	r3, r2, [r1]
 8009a80:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009a82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d1e5      	bne.n	8009a54 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	689b      	ldr	r3, [r3, #8]
 8009a8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a90:	d107      	bne.n	8009aa2 <UART_Start_Receive_IT+0x102>
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	691b      	ldr	r3, [r3, #16]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d103      	bne.n	8009aa2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	4a21      	ldr	r2, [pc, #132]	; (8009b24 <UART_Start_Receive_IT+0x184>)
 8009a9e:	669a      	str	r2, [r3, #104]	; 0x68
 8009aa0:	e002      	b.n	8009aa8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	4a20      	ldr	r2, [pc, #128]	; (8009b28 <UART_Start_Receive_IT+0x188>)
 8009aa6:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	691b      	ldr	r3, [r3, #16]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d019      	beq.n	8009ae4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab8:	e853 3f00 	ldrex	r3, [r3]
 8009abc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac0:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8009ac4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	461a      	mov	r2, r3
 8009acc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ace:	637b      	str	r3, [r7, #52]	; 0x34
 8009ad0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ad2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009ad4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ad6:	e841 2300 	strex	r3, r2, [r1]
 8009ada:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d1e6      	bne.n	8009ab0 <UART_Start_Receive_IT+0x110>
 8009ae2:	e018      	b.n	8009b16 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	e853 3f00 	ldrex	r3, [r3]
 8009af0:	613b      	str	r3, [r7, #16]
   return(result);
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	f043 0320 	orr.w	r3, r3, #32
 8009af8:	653b      	str	r3, [r7, #80]	; 0x50
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	461a      	mov	r2, r3
 8009b00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b02:	623b      	str	r3, [r7, #32]
 8009b04:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b06:	69f9      	ldr	r1, [r7, #28]
 8009b08:	6a3a      	ldr	r2, [r7, #32]
 8009b0a:	e841 2300 	strex	r3, r2, [r1]
 8009b0e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009b10:	69bb      	ldr	r3, [r7, #24]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d1e6      	bne.n	8009ae4 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8009b16:	2300      	movs	r3, #0
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	375c      	adds	r7, #92	; 0x5c
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b22:	4770      	bx	lr
 8009b24:	08009ddb 	.word	0x08009ddb
 8009b28:	08009c75 	.word	0x08009c75

08009b2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b095      	sub	sp, #84	; 0x54
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b3c:	e853 3f00 	ldrex	r3, [r3]
 8009b40:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009b48:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	461a      	mov	r2, r3
 8009b50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b52:	643b      	str	r3, [r7, #64]	; 0x40
 8009b54:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b56:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009b58:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009b5a:	e841 2300 	strex	r3, r2, [r1]
 8009b5e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d1e6      	bne.n	8009b34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	3308      	adds	r3, #8
 8009b6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b6e:	6a3b      	ldr	r3, [r7, #32]
 8009b70:	e853 3f00 	ldrex	r3, [r3]
 8009b74:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b76:	69fb      	ldr	r3, [r7, #28]
 8009b78:	f023 0301 	bic.w	r3, r3, #1
 8009b7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	3308      	adds	r3, #8
 8009b84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009b86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009b88:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009b8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b8e:	e841 2300 	strex	r3, r2, [r1]
 8009b92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d1e5      	bne.n	8009b66 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b9e:	2b01      	cmp	r3, #1
 8009ba0:	d118      	bne.n	8009bd4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	e853 3f00 	ldrex	r3, [r3]
 8009bae:	60bb      	str	r3, [r7, #8]
   return(result);
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	f023 0310 	bic.w	r3, r3, #16
 8009bb6:	647b      	str	r3, [r7, #68]	; 0x44
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	461a      	mov	r2, r3
 8009bbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bc0:	61bb      	str	r3, [r7, #24]
 8009bc2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bc4:	6979      	ldr	r1, [r7, #20]
 8009bc6:	69ba      	ldr	r2, [r7, #24]
 8009bc8:	e841 2300 	strex	r3, r2, [r1]
 8009bcc:	613b      	str	r3, [r7, #16]
   return(result);
 8009bce:	693b      	ldr	r3, [r7, #16]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d1e6      	bne.n	8009ba2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2220      	movs	r2, #32
 8009bd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2200      	movs	r2, #0
 8009be0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2200      	movs	r2, #0
 8009be6:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009be8:	bf00      	nop
 8009bea:	3754      	adds	r7, #84	; 0x54
 8009bec:	46bd      	mov	sp, r7
 8009bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf2:	4770      	bx	lr

08009bf4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b084      	sub	sp, #16
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c00:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	2200      	movs	r2, #0
 8009c06:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009c12:	68f8      	ldr	r0, [r7, #12]
 8009c14:	f7ff f962 	bl	8008edc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c18:	bf00      	nop
 8009c1a:	3710      	adds	r7, #16
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}

08009c20 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b088      	sub	sp, #32
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	e853 3f00 	ldrex	r3, [r3]
 8009c34:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c3c:	61fb      	str	r3, [r7, #28]
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	461a      	mov	r2, r3
 8009c44:	69fb      	ldr	r3, [r7, #28]
 8009c46:	61bb      	str	r3, [r7, #24]
 8009c48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c4a:	6979      	ldr	r1, [r7, #20]
 8009c4c:	69ba      	ldr	r2, [r7, #24]
 8009c4e:	e841 2300 	strex	r3, r2, [r1]
 8009c52:	613b      	str	r3, [r7, #16]
   return(result);
 8009c54:	693b      	ldr	r3, [r7, #16]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d1e6      	bne.n	8009c28 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2220      	movs	r2, #32
 8009c5e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2200      	movs	r2, #0
 8009c64:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f7ff f92e 	bl	8008ec8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c6c:	bf00      	nop
 8009c6e:	3720      	adds	r7, #32
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}

08009c74 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b096      	sub	sp, #88	; 0x58
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009c82:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c8c:	2b22      	cmp	r3, #34	; 0x22
 8009c8e:	f040 8098 	bne.w	8009dc2 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c98:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009c9c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8009ca0:	b2d9      	uxtb	r1, r3
 8009ca2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009ca6:	b2da      	uxtb	r2, r3
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cac:	400a      	ands	r2, r1
 8009cae:	b2d2      	uxtb	r2, r2
 8009cb0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cb6:	1c5a      	adds	r2, r3, #1
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009cc2:	b29b      	uxth	r3, r3
 8009cc4:	3b01      	subs	r3, #1
 8009cc6:	b29a      	uxth	r2, r3
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009cd4:	b29b      	uxth	r3, r3
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d17b      	bne.n	8009dd2 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ce2:	e853 3f00 	ldrex	r3, [r3]
 8009ce6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009cee:	653b      	str	r3, [r7, #80]	; 0x50
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	461a      	mov	r2, r3
 8009cf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009cf8:	647b      	str	r3, [r7, #68]	; 0x44
 8009cfa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cfc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009cfe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009d00:	e841 2300 	strex	r3, r2, [r1]
 8009d04:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009d06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d1e6      	bne.n	8009cda <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	3308      	adds	r3, #8
 8009d12:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d16:	e853 3f00 	ldrex	r3, [r3]
 8009d1a:	623b      	str	r3, [r7, #32]
   return(result);
 8009d1c:	6a3b      	ldr	r3, [r7, #32]
 8009d1e:	f023 0301 	bic.w	r3, r3, #1
 8009d22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	3308      	adds	r3, #8
 8009d2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009d2c:	633a      	str	r2, [r7, #48]	; 0x30
 8009d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009d32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d34:	e841 2300 	strex	r3, r2, [r1]
 8009d38:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d1e5      	bne.n	8009d0c <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2220      	movs	r2, #32
 8009d44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2200      	movs	r2, #0
 8009d52:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d58:	2b01      	cmp	r3, #1
 8009d5a:	d12e      	bne.n	8009dba <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	e853 3f00 	ldrex	r3, [r3]
 8009d6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	f023 0310 	bic.w	r3, r3, #16
 8009d76:	64bb      	str	r3, [r7, #72]	; 0x48
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	461a      	mov	r2, r3
 8009d7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d80:	61fb      	str	r3, [r7, #28]
 8009d82:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d84:	69b9      	ldr	r1, [r7, #24]
 8009d86:	69fa      	ldr	r2, [r7, #28]
 8009d88:	e841 2300 	strex	r3, r2, [r1]
 8009d8c:	617b      	str	r3, [r7, #20]
   return(result);
 8009d8e:	697b      	ldr	r3, [r7, #20]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d1e6      	bne.n	8009d62 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	69db      	ldr	r3, [r3, #28]
 8009d9a:	f003 0310 	and.w	r3, r3, #16
 8009d9e:	2b10      	cmp	r3, #16
 8009da0:	d103      	bne.n	8009daa <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	2210      	movs	r2, #16
 8009da8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009db0:	4619      	mov	r1, r3
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f7ff f89c 	bl	8008ef0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009db8:	e00b      	b.n	8009dd2 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f7f8 fada 	bl	8002374 <HAL_UART_RxCpltCallback>
}
 8009dc0:	e007      	b.n	8009dd2 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	699a      	ldr	r2, [r3, #24]
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f042 0208 	orr.w	r2, r2, #8
 8009dd0:	619a      	str	r2, [r3, #24]
}
 8009dd2:	bf00      	nop
 8009dd4:	3758      	adds	r7, #88	; 0x58
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}

08009dda <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009dda:	b580      	push	{r7, lr}
 8009ddc:	b096      	sub	sp, #88	; 0x58
 8009dde:	af00      	add	r7, sp, #0
 8009de0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009de8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009df2:	2b22      	cmp	r3, #34	; 0x22
 8009df4:	f040 8098 	bne.w	8009f28 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dfe:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e06:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8009e08:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8009e0c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009e10:	4013      	ands	r3, r2
 8009e12:	b29a      	uxth	r2, r3
 8009e14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e16:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e1c:	1c9a      	adds	r2, r3, #2
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009e28:	b29b      	uxth	r3, r3
 8009e2a:	3b01      	subs	r3, #1
 8009e2c:	b29a      	uxth	r2, r3
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009e3a:	b29b      	uxth	r3, r3
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d17b      	bne.n	8009f38 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e48:	e853 3f00 	ldrex	r3, [r3]
 8009e4c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009e54:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	461a      	mov	r2, r3
 8009e5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e5e:	643b      	str	r3, [r7, #64]	; 0x40
 8009e60:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e62:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009e64:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009e66:	e841 2300 	strex	r3, r2, [r1]
 8009e6a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d1e6      	bne.n	8009e40 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	3308      	adds	r3, #8
 8009e78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e7a:	6a3b      	ldr	r3, [r7, #32]
 8009e7c:	e853 3f00 	ldrex	r3, [r3]
 8009e80:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e82:	69fb      	ldr	r3, [r7, #28]
 8009e84:	f023 0301 	bic.w	r3, r3, #1
 8009e88:	64bb      	str	r3, [r7, #72]	; 0x48
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	3308      	adds	r3, #8
 8009e90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009e92:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009e94:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009e98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e9a:	e841 2300 	strex	r3, r2, [r1]
 8009e9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d1e5      	bne.n	8009e72 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2220      	movs	r2, #32
 8009eaa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ebe:	2b01      	cmp	r3, #1
 8009ec0:	d12e      	bne.n	8009f20 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	e853 3f00 	ldrex	r3, [r3]
 8009ed4:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	f023 0310 	bic.w	r3, r3, #16
 8009edc:	647b      	str	r3, [r7, #68]	; 0x44
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	461a      	mov	r2, r3
 8009ee4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ee6:	61bb      	str	r3, [r7, #24]
 8009ee8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eea:	6979      	ldr	r1, [r7, #20]
 8009eec:	69ba      	ldr	r2, [r7, #24]
 8009eee:	e841 2300 	strex	r3, r2, [r1]
 8009ef2:	613b      	str	r3, [r7, #16]
   return(result);
 8009ef4:	693b      	ldr	r3, [r7, #16]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d1e6      	bne.n	8009ec8 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	69db      	ldr	r3, [r3, #28]
 8009f00:	f003 0310 	and.w	r3, r3, #16
 8009f04:	2b10      	cmp	r3, #16
 8009f06:	d103      	bne.n	8009f10 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	2210      	movs	r2, #16
 8009f0e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009f16:	4619      	mov	r1, r3
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f7fe ffe9 	bl	8008ef0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009f1e:	e00b      	b.n	8009f38 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f7f8 fa27 	bl	8002374 <HAL_UART_RxCpltCallback>
}
 8009f26:	e007      	b.n	8009f38 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	699a      	ldr	r2, [r3, #24]
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f042 0208 	orr.w	r2, r2, #8
 8009f36:	619a      	str	r2, [r3, #24]
}
 8009f38:	bf00      	nop
 8009f3a:	3758      	adds	r7, #88	; 0x58
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}

08009f40 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b084      	sub	sp, #16
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
 8009f48:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8009f4e:	6839      	ldr	r1, [r7, #0]
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f001 fce2 	bl	800b91a <VL53L0X_get_offset_calibration_data_micro_meter>
 8009f56:	4603      	mov	r3, r0
 8009f58:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8009f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3710      	adds	r7, #16
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}
	...

08009f68 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8009f68:	b5b0      	push	{r4, r5, r7, lr}
 8009f6a:	b096      	sub	sp, #88	; 0x58
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009f70:	2300      	movs	r3, #0
 8009f72:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8009f76:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d107      	bne.n	8009f8e <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8009f7e:	2200      	movs	r2, #0
 8009f80:	2188      	movs	r1, #136	; 0x88
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f004 feda 	bl	800ed3c <VL53L0X_WrByte>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2200      	movs	r2, #0
 8009f92:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009f9c:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009fa6:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	4a9e      	ldr	r2, [pc, #632]	; (800a228 <VL53L0X_DataInit+0x2c0>)
 8009fae:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	4a9d      	ldr	r2, [pc, #628]	; (800a22c <VL53L0X_DataInit+0x2c4>)
 8009fb6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8009fc0:	f107 0310 	add.w	r3, r7, #16
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f000 fac2 	bl	800a550 <VL53L0X_GetDeviceParameters>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8009fd2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d112      	bne.n	800a000 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8009fda:	2300      	movs	r3, #0
 8009fdc:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f103 0410 	add.w	r4, r3, #16
 8009fe8:	f107 0510 	add.w	r5, r7, #16
 8009fec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009fee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009ff0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009ff2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009ff4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009ff6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009ff8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8009ffc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2264      	movs	r2, #100	; 0x64
 800a004:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f44f 7261 	mov.w	r2, #900	; 0x384
 800a00e:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800a018:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800a022:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2201      	movs	r2, #1
 800a02a:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800a02e:	2201      	movs	r2, #1
 800a030:	2180      	movs	r1, #128	; 0x80
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f004 fe82 	bl	800ed3c <VL53L0X_WrByte>
 800a038:	4603      	mov	r3, r0
 800a03a:	461a      	mov	r2, r3
 800a03c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a040:	4313      	orrs	r3, r2
 800a042:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a046:	2201      	movs	r2, #1
 800a048:	21ff      	movs	r1, #255	; 0xff
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f004 fe76 	bl	800ed3c <VL53L0X_WrByte>
 800a050:	4603      	mov	r3, r0
 800a052:	461a      	mov	r2, r3
 800a054:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a058:	4313      	orrs	r3, r2
 800a05a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800a05e:	2200      	movs	r2, #0
 800a060:	2100      	movs	r1, #0
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f004 fe6a 	bl	800ed3c <VL53L0X_WrByte>
 800a068:	4603      	mov	r3, r0
 800a06a:	461a      	mov	r2, r3
 800a06c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a070:	4313      	orrs	r3, r2
 800a072:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 800a076:	f107 030f 	add.w	r3, r7, #15
 800a07a:	461a      	mov	r2, r3
 800a07c:	2191      	movs	r1, #145	; 0x91
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f004 fede 	bl	800ee40 <VL53L0X_RdByte>
 800a084:	4603      	mov	r3, r0
 800a086:	461a      	mov	r2, r3
 800a088:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a08c:	4313      	orrs	r3, r2
 800a08e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 800a092:	7bfa      	ldrb	r2, [r7, #15]
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800a09a:	2201      	movs	r2, #1
 800a09c:	2100      	movs	r1, #0
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f004 fe4c 	bl	800ed3c <VL53L0X_WrByte>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	461a      	mov	r2, r3
 800a0a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a0ac:	4313      	orrs	r3, r2
 800a0ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	21ff      	movs	r1, #255	; 0xff
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f004 fe40 	bl	800ed3c <VL53L0X_WrByte>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	461a      	mov	r2, r3
 800a0c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a0c4:	4313      	orrs	r3, r2
 800a0c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	2180      	movs	r1, #128	; 0x80
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f004 fe34 	bl	800ed3c <VL53L0X_WrByte>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	461a      	mov	r2, r3
 800a0d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a0dc:	4313      	orrs	r3, r2
 800a0de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	653b      	str	r3, [r7, #80]	; 0x50
 800a0e6:	e014      	b.n	800a112 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 800a0e8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d114      	bne.n	800a11a <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 800a0f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0f2:	b29b      	uxth	r3, r3
 800a0f4:	2201      	movs	r2, #1
 800a0f6:	4619      	mov	r1, r3
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f000 fd35 	bl	800ab68 <VL53L0X_SetLimitCheckEnable>
 800a0fe:	4603      	mov	r3, r0
 800a100:	461a      	mov	r2, r3
 800a102:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a106:	4313      	orrs	r3, r2
 800a108:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800a10c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a10e:	3301      	adds	r3, #1
 800a110:	653b      	str	r3, [r7, #80]	; 0x50
 800a112:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a114:	2b05      	cmp	r3, #5
 800a116:	dde7      	ble.n	800a0e8 <VL53L0X_DataInit+0x180>
 800a118:	e000      	b.n	800a11c <VL53L0X_DataInit+0x1b4>
		else
			break;
 800a11a:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 800a11c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a120:	2b00      	cmp	r3, #0
 800a122:	d107      	bne.n	800a134 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800a124:	2200      	movs	r2, #0
 800a126:	2102      	movs	r1, #2
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f000 fd1d 	bl	800ab68 <VL53L0X_SetLimitCheckEnable>
 800a12e:	4603      	mov	r3, r0
 800a130:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800a134:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d107      	bne.n	800a14c <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800a13c:	2200      	movs	r2, #0
 800a13e:	2103      	movs	r1, #3
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f000 fd11 	bl	800ab68 <VL53L0X_SetLimitCheckEnable>
 800a146:	4603      	mov	r3, r0
 800a148:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800a14c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a150:	2b00      	cmp	r3, #0
 800a152:	d107      	bne.n	800a164 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800a154:	2200      	movs	r2, #0
 800a156:	2104      	movs	r1, #4
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f000 fd05 	bl	800ab68 <VL53L0X_SetLimitCheckEnable>
 800a15e:	4603      	mov	r3, r0
 800a160:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800a164:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d107      	bne.n	800a17c <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800a16c:	2200      	movs	r2, #0
 800a16e:	2105      	movs	r1, #5
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f000 fcf9 	bl	800ab68 <VL53L0X_SetLimitCheckEnable>
 800a176:	4603      	mov	r3, r0
 800a178:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 800a17c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a180:	2b00      	cmp	r3, #0
 800a182:	d108      	bne.n	800a196 <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800a184:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 800a188:	2100      	movs	r1, #0
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f000 fd9c 	bl	800acc8 <VL53L0X_SetLimitCheckValue>
 800a190:	4603      	mov	r3, r0
 800a192:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800a196:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d108      	bne.n	800a1b0 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800a19e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a1a2:	2101      	movs	r1, #1
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f000 fd8f 	bl	800acc8 <VL53L0X_SetLimitCheckValue>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a1b0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d108      	bne.n	800a1ca <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800a1b8:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 800a1bc:	2102      	movs	r1, #2
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f000 fd82 	bl	800acc8 <VL53L0X_SetLimitCheckValue>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a1ca:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d107      	bne.n	800a1e2 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	2103      	movs	r1, #3
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f000 fd76 	bl	800acc8 <VL53L0X_SetLimitCheckValue>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a1e2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d10f      	bne.n	800a20a <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	22ff      	movs	r2, #255	; 0xff
 800a1ee:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800a1f2:	22ff      	movs	r2, #255	; 0xff
 800a1f4:	2101      	movs	r1, #1
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	f004 fda0 	bl	800ed3c <VL53L0X_WrByte>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2201      	movs	r2, #1
 800a206:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 800a20a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d103      	bne.n	800a21a <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2200      	movs	r2, #0
 800a216:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 800a21a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800a21e:	4618      	mov	r0, r3
 800a220:	3758      	adds	r7, #88	; 0x58
 800a222:	46bd      	mov	sp, r7
 800a224:	bdb0      	pop	{r4, r5, r7, pc}
 800a226:	bf00      	nop
 800a228:	00016b85 	.word	0x00016b85
 800a22c:	000970a4 	.word	0x000970a4

0800a230 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 800a230:	b5b0      	push	{r4, r5, r7, lr}
 800a232:	b09e      	sub	sp, #120	; 0x78
 800a234:	af02      	add	r7, sp, #8
 800a236:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a238:	2300      	movs	r3, #0
 800a23a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 800a23e:	f107 031c 	add.w	r3, r7, #28
 800a242:	2240      	movs	r2, #64	; 0x40
 800a244:	2100      	movs	r1, #0
 800a246:	4618      	mov	r0, r3
 800a248:	f004 fee0 	bl	800f00c <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 800a24c:	2300      	movs	r3, #0
 800a24e:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 800a250:	2300      	movs	r3, #0
 800a252:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 800a254:	2300      	movs	r3, #0
 800a256:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 800a25a:	2300      	movs	r3, #0
 800a25c:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 800a25e:	2300      	movs	r3, #0
 800a260:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 800a262:	2300      	movs	r3, #0
 800a264:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 800a266:	2300      	movs	r3, #0
 800a268:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 800a26c:	2101      	movs	r1, #1
 800a26e:	6878      	ldr	r0, [r7, #4]
 800a270:	f002 faa9 	bl	800c7c6 <VL53L0X_get_info_from_device>
 800a274:	4603      	mov	r3, r0
 800a276:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 800a280:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 800a288:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 800a28c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a290:	2b01      	cmp	r3, #1
 800a292:	d80d      	bhi.n	800a2b0 <VL53L0X_StaticInit+0x80>
 800a294:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a298:	2b01      	cmp	r3, #1
 800a29a:	d102      	bne.n	800a2a2 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 800a29c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a29e:	2b20      	cmp	r3, #32
 800a2a0:	d806      	bhi.n	800a2b0 <VL53L0X_StaticInit+0x80>
 800a2a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d10e      	bne.n	800a2c8 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 800a2aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a2ac:	2b0c      	cmp	r3, #12
 800a2ae:	d90b      	bls.n	800a2c8 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 800a2b0:	f107 0218 	add.w	r2, r7, #24
 800a2b4:	f107 0314 	add.w	r3, r7, #20
 800a2b8:	4619      	mov	r1, r3
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f001 fd28 	bl	800bd10 <VL53L0X_perform_ref_spad_management>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800a2c6:	e009      	b.n	800a2dc <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 800a2c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a2cc:	461a      	mov	r2, r3
 800a2ce:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	f001 ff29 	bl	800c128 <VL53L0X_set_reference_spads>
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 800a2dc:	4b94      	ldr	r3, [pc, #592]	; (800a530 <VL53L0X_StaticInit+0x300>)
 800a2de:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 800a2e0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d10f      	bne.n	800a308 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 800a2ee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 800a2f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d104      	bne.n	800a304 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800a300:	66bb      	str	r3, [r7, #104]	; 0x68
 800a302:	e001      	b.n	800a308 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 800a304:	4b8a      	ldr	r3, [pc, #552]	; (800a530 <VL53L0X_StaticInit+0x300>)
 800a306:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 800a308:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d106      	bne.n	800a31e <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 800a310:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f003 fdfc 	bl	800df10 <VL53L0X_load_tuning_settings>
 800a318:	4603      	mov	r3, r0
 800a31a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 800a31e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a322:	2b00      	cmp	r3, #0
 800a324:	d10a      	bne.n	800a33c <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 800a326:	2300      	movs	r3, #0
 800a328:	9300      	str	r3, [sp, #0]
 800a32a:	2304      	movs	r3, #4
 800a32c:	2200      	movs	r2, #0
 800a32e:	2100      	movs	r1, #0
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	f001 f8f1 	bl	800b518 <VL53L0X_SetGpioConfig>
 800a336:	4603      	mov	r3, r0
 800a338:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a33c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a340:	2b00      	cmp	r3, #0
 800a342:	d121      	bne.n	800a388 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a344:	2201      	movs	r2, #1
 800a346:	21ff      	movs	r1, #255	; 0xff
 800a348:	6878      	ldr	r0, [r7, #4]
 800a34a:	f004 fcf7 	bl	800ed3c <VL53L0X_WrByte>
 800a34e:	4603      	mov	r3, r0
 800a350:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 800a354:	f107 031a 	add.w	r3, r7, #26
 800a358:	461a      	mov	r2, r3
 800a35a:	2184      	movs	r1, #132	; 0x84
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f004 fd99 	bl	800ee94 <VL53L0X_RdWord>
 800a362:	4603      	mov	r3, r0
 800a364:	461a      	mov	r2, r3
 800a366:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a36a:	4313      	orrs	r3, r2
 800a36c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a370:	2200      	movs	r2, #0
 800a372:	21ff      	movs	r1, #255	; 0xff
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f004 fce1 	bl	800ed3c <VL53L0X_WrByte>
 800a37a:	4603      	mov	r3, r0
 800a37c:	461a      	mov	r2, r3
 800a37e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a382:	4313      	orrs	r3, r2
 800a384:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a388:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d105      	bne.n	800a39c <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 800a390:	8b7b      	ldrh	r3, [r7, #26]
 800a392:	011b      	lsls	r3, r3, #4
 800a394:	461a      	mov	r2, r3
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 800a39c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d108      	bne.n	800a3b6 <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800a3a4:	f107 031c 	add.w	r3, r7, #28
 800a3a8:	4619      	mov	r1, r3
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f000 f8d0 	bl	800a550 <VL53L0X_GetDeviceParameters>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 800a3b6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d110      	bne.n	800a3e0 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 800a3be:	f107 0319 	add.w	r3, r7, #25
 800a3c2:	4619      	mov	r1, r3
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f000 f992 	bl	800a6ee <VL53L0X_GetFractionEnable>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 800a3d0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d103      	bne.n	800a3e0 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 800a3d8:	7e7a      	ldrb	r2, [r7, #25]
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 800a3e0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d10e      	bne.n	800a406 <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f103 0410 	add.w	r4, r3, #16
 800a3ee:	f107 051c 	add.w	r5, r7, #28
 800a3f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a3f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a3f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a3f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a3fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a3fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a3fe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800a402:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 800a406:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d111      	bne.n	800a432 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 800a40e:	f107 0319 	add.w	r3, r7, #25
 800a412:	461a      	mov	r2, r3
 800a414:	2101      	movs	r1, #1
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	f004 fd12 	bl	800ee40 <VL53L0X_RdByte>
 800a41c:	4603      	mov	r3, r0
 800a41e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 800a422:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a426:	2b00      	cmp	r3, #0
 800a428:	d103      	bne.n	800a432 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 800a42a:	7e7a      	ldrb	r2, [r7, #25]
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 800a432:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a436:	2b00      	cmp	r3, #0
 800a438:	d107      	bne.n	800a44a <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800a43a:	2200      	movs	r2, #0
 800a43c:	2100      	movs	r1, #0
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f000 f9ca 	bl	800a7d8 <VL53L0X_SetSequenceStepEnable>
 800a444:	4603      	mov	r3, r0
 800a446:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800a44a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d107      	bne.n	800a462 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800a452:	2200      	movs	r2, #0
 800a454:	2102      	movs	r1, #2
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f000 f9be 	bl	800a7d8 <VL53L0X_SetSequenceStepEnable>
 800a45c:	4603      	mov	r3, r0
 800a45e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 800a462:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a466:	2b00      	cmp	r3, #0
 800a468:	d103      	bne.n	800a472 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2203      	movs	r2, #3
 800a46e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800a472:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a476:	2b00      	cmp	r3, #0
 800a478:	d109      	bne.n	800a48e <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 800a47a:	f107 0313 	add.w	r3, r7, #19
 800a47e:	461a      	mov	r2, r3
 800a480:	2100      	movs	r1, #0
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f000 f990 	bl	800a7a8 <VL53L0X_GetVcselPulsePeriod>
 800a488:	4603      	mov	r3, r0
 800a48a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a48e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a492:	2b00      	cmp	r3, #0
 800a494:	d103      	bne.n	800a49e <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a496:	7cfa      	ldrb	r2, [r7, #19]
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800a49e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d109      	bne.n	800a4ba <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 800a4a6:	f107 0313 	add.w	r3, r7, #19
 800a4aa:	461a      	mov	r2, r3
 800a4ac:	2101      	movs	r1, #1
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	f000 f97a 	bl	800a7a8 <VL53L0X_GetVcselPulsePeriod>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a4ba:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d103      	bne.n	800a4ca <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a4c2:	7cfa      	ldrb	r2, [r7, #19]
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800a4ca:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d109      	bne.n	800a4e6 <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 800a4d2:	f107 030c 	add.w	r3, r7, #12
 800a4d6:	461a      	mov	r2, r3
 800a4d8:	2103      	movs	r1, #3
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f002 fef4 	bl	800d2c8 <get_sequence_step_timeout>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a4e6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d103      	bne.n	800a4f6 <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a4ee:	68fa      	ldr	r2, [r7, #12]
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800a4f6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d109      	bne.n	800a512 <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 800a4fe:	f107 030c 	add.w	r3, r7, #12
 800a502:	461a      	mov	r2, r3
 800a504:	2104      	movs	r1, #4
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f002 fede 	bl	800d2c8 <get_sequence_step_timeout>
 800a50c:	4603      	mov	r3, r0
 800a50e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a512:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a516:	2b00      	cmp	r3, #0
 800a518:	d103      	bne.n	800a522 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a51a:	68fa      	ldr	r2, [r7, #12]
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a522:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 800a526:	4618      	mov	r0, r3
 800a528:	3770      	adds	r7, #112	; 0x70
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bdb0      	pop	{r4, r5, r7, pc}
 800a52e:	bf00      	nop
 800a530:	2000000c 	.word	0x2000000c

0800a534 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 800a534:	b480      	push	{r7}
 800a536:	b085      	sub	sp, #20
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 800a53c:	239d      	movs	r3, #157	; 0x9d
 800a53e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 800a540:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a544:	4618      	mov	r0, r3
 800a546:	3714      	adds	r7, #20
 800a548:	46bd      	mov	sp, r7
 800a54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54e:	4770      	bx	lr

0800a550 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b084      	sub	sp, #16
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
 800a558:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a55a:	2300      	movs	r3, #0
 800a55c:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	4619      	mov	r1, r3
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f000 f8b0 	bl	800a6c8 <VL53L0X_GetDeviceMode>
 800a568:	4603      	mov	r3, r0
 800a56a:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800a56c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d107      	bne.n	800a584 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	3308      	adds	r3, #8
 800a578:	4619      	mov	r1, r3
 800a57a:	6878      	ldr	r0, [r7, #4]
 800a57c:	f000 fa78 	bl	800aa70 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 800a580:	4603      	mov	r3, r0
 800a582:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 800a584:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d102      	bne.n	800a592 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	2200      	movs	r2, #0
 800a590:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 800a592:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d107      	bne.n	800a5aa <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	3310      	adds	r3, #16
 800a59e:	4619      	mov	r1, r3
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f000 faae 	bl	800ab02 <VL53L0X_GetXTalkCompensationRateMegaCps>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 800a5aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d107      	bne.n	800a5c2 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	3314      	adds	r3, #20
 800a5b6:	4619      	mov	r1, r3
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f7ff fcc1 	bl	8009f40 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 800a5c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d134      	bne.n	800a634 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	60bb      	str	r3, [r7, #8]
 800a5ce:	e02a      	b.n	800a626 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800a5d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d12a      	bne.n	800a62e <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	b299      	uxth	r1, r3
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	3308      	adds	r3, #8
 800a5e0:	009b      	lsls	r3, r3, #2
 800a5e2:	683a      	ldr	r2, [r7, #0]
 800a5e4:	4413      	add	r3, r2
 800a5e6:	3304      	adds	r3, #4
 800a5e8:	461a      	mov	r2, r3
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	f000 fbce 	bl	800ad8c <VL53L0X_GetLimitCheckValue>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	461a      	mov	r2, r3
 800a5f4:	7bfb      	ldrb	r3, [r7, #15]
 800a5f6:	4313      	orrs	r3, r2
 800a5f8:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800a5fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d117      	bne.n	800a632 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	b299      	uxth	r1, r3
 800a606:	68bb      	ldr	r3, [r7, #8]
 800a608:	3318      	adds	r3, #24
 800a60a:	683a      	ldr	r2, [r7, #0]
 800a60c:	4413      	add	r3, r2
 800a60e:	461a      	mov	r2, r3
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	f000 fb35 	bl	800ac80 <VL53L0X_GetLimitCheckEnable>
 800a616:	4603      	mov	r3, r0
 800a618:	461a      	mov	r2, r3
 800a61a:	7bfb      	ldrb	r3, [r7, #15]
 800a61c:	4313      	orrs	r3, r2
 800a61e:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	3301      	adds	r3, #1
 800a624:	60bb      	str	r3, [r7, #8]
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	2b05      	cmp	r3, #5
 800a62a:	ddd1      	ble.n	800a5d0 <VL53L0X_GetDeviceParameters+0x80>
 800a62c:	e002      	b.n	800a634 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 800a62e:	bf00      	nop
 800a630:	e000      	b.n	800a634 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 800a632:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a634:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d107      	bne.n	800a64c <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	333c      	adds	r3, #60	; 0x3c
 800a640:	4619      	mov	r1, r3
 800a642:	6878      	ldr	r0, [r7, #4]
 800a644:	f000 fc30 	bl	800aea8 <VL53L0X_GetWrapAroundCheckEnable>
 800a648:	4603      	mov	r3, r0
 800a64a:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 800a64c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d107      	bne.n	800a664 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	3304      	adds	r3, #4
 800a658:	4619      	mov	r1, r3
 800a65a:	6878      	ldr	r0, [r7, #4]
 800a65c:	f000 f879 	bl	800a752 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 800a660:	4603      	mov	r3, r0
 800a662:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a664:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a668:	4618      	mov	r0, r3
 800a66a:	3710      	adds	r7, #16
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}

0800a670 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 800a670:	b480      	push	{r7}
 800a672:	b085      	sub	sp, #20
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
 800a678:	460b      	mov	r3, r1
 800a67a:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a67c:	2300      	movs	r3, #0
 800a67e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 800a680:	78fb      	ldrb	r3, [r7, #3]
 800a682:	2b15      	cmp	r3, #21
 800a684:	bf8c      	ite	hi
 800a686:	2201      	movhi	r2, #1
 800a688:	2200      	movls	r2, #0
 800a68a:	b2d2      	uxtb	r2, r2
 800a68c:	2a00      	cmp	r2, #0
 800a68e:	d10e      	bne.n	800a6ae <VL53L0X_SetDeviceMode+0x3e>
 800a690:	2201      	movs	r2, #1
 800a692:	409a      	lsls	r2, r3
 800a694:	4b0b      	ldr	r3, [pc, #44]	; (800a6c4 <VL53L0X_SetDeviceMode+0x54>)
 800a696:	4013      	ands	r3, r2
 800a698:	2b00      	cmp	r3, #0
 800a69a:	bf14      	ite	ne
 800a69c:	2301      	movne	r3, #1
 800a69e:	2300      	moveq	r3, #0
 800a6a0:	b2db      	uxtb	r3, r3
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d003      	beq.n	800a6ae <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	78fa      	ldrb	r2, [r7, #3]
 800a6aa:	741a      	strb	r2, [r3, #16]
		break;
 800a6ac:	e001      	b.n	800a6b2 <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800a6ae:	23f8      	movs	r3, #248	; 0xf8
 800a6b0:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a6b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	3714      	adds	r7, #20
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c0:	4770      	bx	lr
 800a6c2:	bf00      	nop
 800a6c4:	0030000b 	.word	0x0030000b

0800a6c8 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b085      	sub	sp, #20
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
 800a6d0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	7c1a      	ldrb	r2, [r3, #16]
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800a6de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	3714      	adds	r7, #20
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ec:	4770      	bx	lr

0800a6ee <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 800a6ee:	b580      	push	{r7, lr}
 800a6f0:	b084      	sub	sp, #16
 800a6f2:	af00      	add	r7, sp, #0
 800a6f4:	6078      	str	r0, [r7, #4]
 800a6f6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 800a6fc:	683a      	ldr	r2, [r7, #0]
 800a6fe:	2109      	movs	r1, #9
 800a700:	6878      	ldr	r0, [r7, #4]
 800a702:	f004 fb9d 	bl	800ee40 <VL53L0X_RdByte>
 800a706:	4603      	mov	r3, r0
 800a708:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800a70a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d106      	bne.n	800a720 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	781b      	ldrb	r3, [r3, #0]
 800a716:	f003 0301 	and.w	r3, r3, #1
 800a71a:	b2da      	uxtb	r2, r3
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800a720:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a724:	4618      	mov	r0, r3
 800a726:	3710      	adds	r7, #16
 800a728:	46bd      	mov	sp, r7
 800a72a:	bd80      	pop	{r7, pc}

0800a72c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b084      	sub	sp, #16
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
 800a734:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a736:	2300      	movs	r3, #0
 800a738:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 800a73a:	6839      	ldr	r1, [r7, #0]
 800a73c:	6878      	ldr	r0, [r7, #4]
 800a73e:	f003 fa56 	bl	800dbee <VL53L0X_set_measurement_timing_budget_micro_seconds>
 800a742:	4603      	mov	r3, r0
 800a744:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 800a746:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a74a:	4618      	mov	r0, r3
 800a74c:	3710      	adds	r7, #16
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}

0800a752 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800a752:	b580      	push	{r7, lr}
 800a754:	b084      	sub	sp, #16
 800a756:	af00      	add	r7, sp, #0
 800a758:	6078      	str	r0, [r7, #4]
 800a75a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a75c:	2300      	movs	r3, #0
 800a75e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 800a760:	6839      	ldr	r1, [r7, #0]
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f003 fb23 	bl	800ddae <VL53L0X_get_measurement_timing_budget_micro_seconds>
 800a768:	4603      	mov	r3, r0
 800a76a:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 800a76c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a770:	4618      	mov	r0, r3
 800a772:	3710      	adds	r7, #16
 800a774:	46bd      	mov	sp, r7
 800a776:	bd80      	pop	{r7, pc}

0800a778 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b084      	sub	sp, #16
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
 800a780:	460b      	mov	r3, r1
 800a782:	70fb      	strb	r3, [r7, #3]
 800a784:	4613      	mov	r3, r2
 800a786:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a788:	2300      	movs	r3, #0
 800a78a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 800a78c:	78ba      	ldrb	r2, [r7, #2]
 800a78e:	78fb      	ldrb	r3, [r7, #3]
 800a790:	4619      	mov	r1, r3
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f002 ff6b 	bl	800d66e <VL53L0X_set_vcsel_pulse_period>
 800a798:	4603      	mov	r3, r0
 800a79a:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800a79c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	3710      	adds	r7, #16
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bd80      	pop	{r7, pc}

0800a7a8 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b086      	sub	sp, #24
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	60f8      	str	r0, [r7, #12]
 800a7b0:	460b      	mov	r3, r1
 800a7b2:	607a      	str	r2, [r7, #4]
 800a7b4:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800a7ba:	7afb      	ldrb	r3, [r7, #11]
 800a7bc:	687a      	ldr	r2, [r7, #4]
 800a7be:	4619      	mov	r1, r3
 800a7c0:	68f8      	ldr	r0, [r7, #12]
 800a7c2:	f003 f9dd 	bl	800db80 <VL53L0X_get_vcsel_pulse_period>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800a7ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	3718      	adds	r7, #24
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}
	...

0800a7d8 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b086      	sub	sp, #24
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
 800a7e0:	460b      	mov	r3, r1
 800a7e2:	70fb      	strb	r3, [r7, #3]
 800a7e4:	4613      	mov	r3, r2
 800a7e6:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800a7f4:	f107 030f 	add.w	r3, r7, #15
 800a7f8:	461a      	mov	r2, r3
 800a7fa:	2101      	movs	r1, #1
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	f004 fb1f 	bl	800ee40 <VL53L0X_RdByte>
 800a802:	4603      	mov	r3, r0
 800a804:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 800a806:	7bfb      	ldrb	r3, [r7, #15]
 800a808:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 800a80a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d15a      	bne.n	800a8c8 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 800a812:	78bb      	ldrb	r3, [r7, #2]
 800a814:	2b01      	cmp	r3, #1
 800a816:	d12b      	bne.n	800a870 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 800a818:	78fb      	ldrb	r3, [r7, #3]
 800a81a:	2b04      	cmp	r3, #4
 800a81c:	d825      	bhi.n	800a86a <VL53L0X_SetSequenceStepEnable+0x92>
 800a81e:	a201      	add	r2, pc, #4	; (adr r2, 800a824 <VL53L0X_SetSequenceStepEnable+0x4c>)
 800a820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a824:	0800a839 	.word	0x0800a839
 800a828:	0800a843 	.word	0x0800a843
 800a82c:	0800a84d 	.word	0x0800a84d
 800a830:	0800a857 	.word	0x0800a857
 800a834:	0800a861 	.word	0x0800a861
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 800a838:	7dbb      	ldrb	r3, [r7, #22]
 800a83a:	f043 0310 	orr.w	r3, r3, #16
 800a83e:	75bb      	strb	r3, [r7, #22]
				break;
 800a840:	e043      	b.n	800a8ca <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 800a842:	7dbb      	ldrb	r3, [r7, #22]
 800a844:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800a848:	75bb      	strb	r3, [r7, #22]
				break;
 800a84a:	e03e      	b.n	800a8ca <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 800a84c:	7dbb      	ldrb	r3, [r7, #22]
 800a84e:	f043 0304 	orr.w	r3, r3, #4
 800a852:	75bb      	strb	r3, [r7, #22]
				break;
 800a854:	e039      	b.n	800a8ca <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 800a856:	7dbb      	ldrb	r3, [r7, #22]
 800a858:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a85c:	75bb      	strb	r3, [r7, #22]
				break;
 800a85e:	e034      	b.n	800a8ca <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 800a860:	7dbb      	ldrb	r3, [r7, #22]
 800a862:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a866:	75bb      	strb	r3, [r7, #22]
				break;
 800a868:	e02f      	b.n	800a8ca <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a86a:	23fc      	movs	r3, #252	; 0xfc
 800a86c:	75fb      	strb	r3, [r7, #23]
 800a86e:	e02c      	b.n	800a8ca <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 800a870:	78fb      	ldrb	r3, [r7, #3]
 800a872:	2b04      	cmp	r3, #4
 800a874:	d825      	bhi.n	800a8c2 <VL53L0X_SetSequenceStepEnable+0xea>
 800a876:	a201      	add	r2, pc, #4	; (adr r2, 800a87c <VL53L0X_SetSequenceStepEnable+0xa4>)
 800a878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a87c:	0800a891 	.word	0x0800a891
 800a880:	0800a89b 	.word	0x0800a89b
 800a884:	0800a8a5 	.word	0x0800a8a5
 800a888:	0800a8af 	.word	0x0800a8af
 800a88c:	0800a8b9 	.word	0x0800a8b9
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 800a890:	7dbb      	ldrb	r3, [r7, #22]
 800a892:	f023 0310 	bic.w	r3, r3, #16
 800a896:	75bb      	strb	r3, [r7, #22]
				break;
 800a898:	e017      	b.n	800a8ca <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 800a89a:	7dbb      	ldrb	r3, [r7, #22]
 800a89c:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800a8a0:	75bb      	strb	r3, [r7, #22]
				break;
 800a8a2:	e012      	b.n	800a8ca <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 800a8a4:	7dbb      	ldrb	r3, [r7, #22]
 800a8a6:	f023 0304 	bic.w	r3, r3, #4
 800a8aa:	75bb      	strb	r3, [r7, #22]
				break;
 800a8ac:	e00d      	b.n	800a8ca <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 800a8ae:	7dbb      	ldrb	r3, [r7, #22]
 800a8b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a8b4:	75bb      	strb	r3, [r7, #22]
				break;
 800a8b6:	e008      	b.n	800a8ca <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 800a8b8:	7dbb      	ldrb	r3, [r7, #22]
 800a8ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8be:	75bb      	strb	r3, [r7, #22]
				break;
 800a8c0:	e003      	b.n	800a8ca <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a8c2:	23fc      	movs	r3, #252	; 0xfc
 800a8c4:	75fb      	strb	r3, [r7, #23]
 800a8c6:	e000      	b.n	800a8ca <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 800a8c8:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 800a8ca:	7bfb      	ldrb	r3, [r7, #15]
 800a8cc:	7dba      	ldrb	r2, [r7, #22]
 800a8ce:	429a      	cmp	r2, r3
 800a8d0:	d01e      	beq.n	800a910 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 800a8d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d107      	bne.n	800a8ea <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 800a8da:	7dbb      	ldrb	r3, [r7, #22]
 800a8dc:	461a      	mov	r2, r3
 800a8de:	2101      	movs	r1, #1
 800a8e0:	6878      	ldr	r0, [r7, #4]
 800a8e2:	f004 fa2b 	bl	800ed3c <VL53L0X_WrByte>
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 800a8ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d103      	bne.n	800a8fa <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	7dba      	ldrb	r2, [r7, #22]
 800a8f6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 800a8fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d106      	bne.n	800a910 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	695b      	ldr	r3, [r3, #20]
 800a906:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800a908:	6939      	ldr	r1, [r7, #16]
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f7ff ff0e 	bl	800a72c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800a910:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a914:	4618      	mov	r0, r3
 800a916:	3718      	adds	r7, #24
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}

0800a91c <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 800a91c:	b480      	push	{r7}
 800a91e:	b087      	sub	sp, #28
 800a920:	af00      	add	r7, sp, #0
 800a922:	60f8      	str	r0, [r7, #12]
 800a924:	607b      	str	r3, [r7, #4]
 800a926:	460b      	mov	r3, r1
 800a928:	72fb      	strb	r3, [r7, #11]
 800a92a:	4613      	mov	r3, r2
 800a92c:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a92e:	2300      	movs	r3, #0
 800a930:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2200      	movs	r2, #0
 800a936:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 800a938:	7afb      	ldrb	r3, [r7, #11]
 800a93a:	2b04      	cmp	r3, #4
 800a93c:	d836      	bhi.n	800a9ac <sequence_step_enabled+0x90>
 800a93e:	a201      	add	r2, pc, #4	; (adr r2, 800a944 <sequence_step_enabled+0x28>)
 800a940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a944:	0800a959 	.word	0x0800a959
 800a948:	0800a96b 	.word	0x0800a96b
 800a94c:	0800a97d 	.word	0x0800a97d
 800a950:	0800a98f 	.word	0x0800a98f
 800a954:	0800a9a1 	.word	0x0800a9a1
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 800a958:	7abb      	ldrb	r3, [r7, #10]
 800a95a:	111b      	asrs	r3, r3, #4
 800a95c:	b2db      	uxtb	r3, r3
 800a95e:	f003 0301 	and.w	r3, r3, #1
 800a962:	b2da      	uxtb	r2, r3
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	701a      	strb	r2, [r3, #0]
		break;
 800a968:	e022      	b.n	800a9b0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 800a96a:	7abb      	ldrb	r3, [r7, #10]
 800a96c:	10db      	asrs	r3, r3, #3
 800a96e:	b2db      	uxtb	r3, r3
 800a970:	f003 0301 	and.w	r3, r3, #1
 800a974:	b2da      	uxtb	r2, r3
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	701a      	strb	r2, [r3, #0]
		break;
 800a97a:	e019      	b.n	800a9b0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 800a97c:	7abb      	ldrb	r3, [r7, #10]
 800a97e:	109b      	asrs	r3, r3, #2
 800a980:	b2db      	uxtb	r3, r3
 800a982:	f003 0301 	and.w	r3, r3, #1
 800a986:	b2da      	uxtb	r2, r3
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	701a      	strb	r2, [r3, #0]
		break;
 800a98c:	e010      	b.n	800a9b0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800a98e:	7abb      	ldrb	r3, [r7, #10]
 800a990:	119b      	asrs	r3, r3, #6
 800a992:	b2db      	uxtb	r3, r3
 800a994:	f003 0301 	and.w	r3, r3, #1
 800a998:	b2da      	uxtb	r2, r3
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	701a      	strb	r2, [r3, #0]
		break;
 800a99e:	e007      	b.n	800a9b0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 800a9a0:	7abb      	ldrb	r3, [r7, #10]
 800a9a2:	09db      	lsrs	r3, r3, #7
 800a9a4:	b2da      	uxtb	r2, r3
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	701a      	strb	r2, [r3, #0]
		break;
 800a9aa:	e001      	b.n	800a9b0 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a9ac:	23fc      	movs	r3, #252	; 0xfc
 800a9ae:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a9b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	371c      	adds	r7, #28
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9be:	4770      	bx	lr

0800a9c0 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b084      	sub	sp, #16
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
 800a9c8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800a9d2:	f107 030e 	add.w	r3, r7, #14
 800a9d6:	461a      	mov	r2, r3
 800a9d8:	2101      	movs	r1, #1
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f004 fa30 	bl	800ee40 <VL53L0X_RdByte>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 800a9e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d107      	bne.n	800a9fc <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 800a9ec:	7bba      	ldrb	r2, [r7, #14]
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	2100      	movs	r1, #0
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	f7ff ff92 	bl	800a91c <sequence_step_enabled>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800a9fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d108      	bne.n	800aa16 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 800aa04:	7bba      	ldrb	r2, [r7, #14]
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	3302      	adds	r3, #2
 800aa0a:	2101      	movs	r1, #1
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f7ff ff85 	bl	800a91c <sequence_step_enabled>
 800aa12:	4603      	mov	r3, r0
 800aa14:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800aa16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d108      	bne.n	800aa30 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 800aa1e:	7bba      	ldrb	r2, [r7, #14]
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	3301      	adds	r3, #1
 800aa24:	2102      	movs	r1, #2
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f7ff ff78 	bl	800a91c <sequence_step_enabled>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800aa30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d108      	bne.n	800aa4a <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 800aa38:	7bba      	ldrb	r2, [r7, #14]
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	3303      	adds	r3, #3
 800aa3e:	2103      	movs	r1, #3
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f7ff ff6b 	bl	800a91c <sequence_step_enabled>
 800aa46:	4603      	mov	r3, r0
 800aa48:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800aa4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d108      	bne.n	800aa64 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 800aa52:	7bba      	ldrb	r2, [r7, #14]
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	3304      	adds	r3, #4
 800aa58:	2104      	movs	r1, #4
 800aa5a:	6878      	ldr	r0, [r7, #4]
 800aa5c:	f7ff ff5e 	bl	800a91c <sequence_step_enabled>
 800aa60:	4603      	mov	r3, r0
 800aa62:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800aa64:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aa68:	4618      	mov	r0, r3
 800aa6a:	3710      	adds	r7, #16
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	bd80      	pop	{r7, pc}

0800aa70 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b084      	sub	sp, #16
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
 800aa78:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800aa7e:	f107 030c 	add.w	r3, r7, #12
 800aa82:	461a      	mov	r2, r3
 800aa84:	21f8      	movs	r1, #248	; 0xf8
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f004 fa04 	bl	800ee94 <VL53L0X_RdWord>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 800aa90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d108      	bne.n	800aaaa <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 800aa98:	f107 0308 	add.w	r3, r7, #8
 800aa9c:	461a      	mov	r2, r3
 800aa9e:	2104      	movs	r1, #4
 800aaa0:	6878      	ldr	r0, [r7, #4]
 800aaa2:	f004 fa2f 	bl	800ef04 <VL53L0X_RdDWord>
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800aaaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d10c      	bne.n	800aacc <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 800aab2:	89bb      	ldrh	r3, [r7, #12]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d005      	beq.n	800aac4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 800aab8:	68bb      	ldr	r3, [r7, #8]
 800aaba:	89ba      	ldrh	r2, [r7, #12]
 800aabc:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	681a      	ldr	r2, [r3, #0]
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800aacc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	3710      	adds	r7, #16
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}

0800aad8 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 800aad8:	b480      	push	{r7}
 800aada:	b085      	sub	sp, #20
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
 800aae0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aae2:	2300      	movs	r3, #0
 800aae4:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	7f1b      	ldrb	r3, [r3, #28]
 800aaea:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	7bba      	ldrb	r2, [r7, #14]
 800aaf0:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800aaf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	3714      	adds	r7, #20
 800aafa:	46bd      	mov	sp, r7
 800aafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab00:	4770      	bx	lr

0800ab02 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 800ab02:	b580      	push	{r7, lr}
 800ab04:	b086      	sub	sp, #24
 800ab06:	af00      	add	r7, sp, #0
 800ab08:	6078      	str	r0, [r7, #4]
 800ab0a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 800ab10:	f107 030e 	add.w	r3, r7, #14
 800ab14:	461a      	mov	r2, r3
 800ab16:	2120      	movs	r1, #32
 800ab18:	6878      	ldr	r0, [r7, #4]
 800ab1a:	f004 f9bb 	bl	800ee94 <VL53L0X_RdWord>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 800ab22:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d118      	bne.n	800ab5c <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 800ab2a:	89fb      	ldrh	r3, [r7, #14]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d109      	bne.n	800ab44 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	6a1b      	ldr	r3, [r3, #32]
 800ab34:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	693a      	ldr	r2, [r7, #16]
 800ab3a:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2200      	movs	r2, #0
 800ab40:	771a      	strb	r2, [r3, #28]
 800ab42:	e00b      	b.n	800ab5c <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 800ab44:	89fb      	ldrh	r3, [r7, #14]
 800ab46:	00db      	lsls	r3, r3, #3
 800ab48:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	693a      	ldr	r2, [r7, #16]
 800ab4e:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	693a      	ldr	r2, [r7, #16]
 800ab54:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2201      	movs	r2, #1
 800ab5a:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ab5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	3718      	adds	r7, #24
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bd80      	pop	{r7, pc}

0800ab68 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b086      	sub	sp, #24
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
 800ab70:	460b      	mov	r3, r1
 800ab72:	807b      	strh	r3, [r7, #2]
 800ab74:	4613      	mov	r3, r2
 800ab76:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ab78:	2300      	movs	r3, #0
 800ab7a:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 800ab80:	2300      	movs	r3, #0
 800ab82:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 800ab84:	2300      	movs	r3, #0
 800ab86:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800ab88:	887b      	ldrh	r3, [r7, #2]
 800ab8a:	2b05      	cmp	r3, #5
 800ab8c:	d902      	bls.n	800ab94 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ab8e:	23fc      	movs	r3, #252	; 0xfc
 800ab90:	75fb      	strb	r3, [r7, #23]
 800ab92:	e05b      	b.n	800ac4c <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 800ab94:	787b      	ldrb	r3, [r7, #1]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d106      	bne.n	800aba8 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 800ab9e:	2300      	movs	r3, #0
 800aba0:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 800aba2:	2301      	movs	r3, #1
 800aba4:	73bb      	strb	r3, [r7, #14]
 800aba6:	e00a      	b.n	800abbe <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800aba8:	887b      	ldrh	r3, [r7, #2]
 800abaa:	687a      	ldr	r2, [r7, #4]
 800abac:	330c      	adds	r3, #12
 800abae:	009b      	lsls	r3, r3, #2
 800abb0:	4413      	add	r3, r2
 800abb2:	685b      	ldr	r3, [r3, #4]
 800abb4:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 800abb6:	2300      	movs	r3, #0
 800abb8:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 800abba:	2301      	movs	r3, #1
 800abbc:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 800abbe:	887b      	ldrh	r3, [r7, #2]
 800abc0:	2b05      	cmp	r3, #5
 800abc2:	d841      	bhi.n	800ac48 <VL53L0X_SetLimitCheckEnable+0xe0>
 800abc4:	a201      	add	r2, pc, #4	; (adr r2, 800abcc <VL53L0X_SetLimitCheckEnable+0x64>)
 800abc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abca:	bf00      	nop
 800abcc:	0800abe5 	.word	0x0800abe5
 800abd0:	0800abef 	.word	0x0800abef
 800abd4:	0800ac05 	.word	0x0800ac05
 800abd8:	0800ac0f 	.word	0x0800ac0f
 800abdc:	0800ac19 	.word	0x0800ac19
 800abe0:	0800ac31 	.word	0x0800ac31

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	7bfa      	ldrb	r2, [r7, #15]
 800abe8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 800abec:	e02e      	b.n	800ac4c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 800abee:	693b      	ldr	r3, [r7, #16]
 800abf0:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800abf2:	b29b      	uxth	r3, r3
 800abf4:	461a      	mov	r2, r3
 800abf6:	2144      	movs	r1, #68	; 0x44
 800abf8:	6878      	ldr	r0, [r7, #4]
 800abfa:	f004 f8c3 	bl	800ed84 <VL53L0X_WrWord>
 800abfe:	4603      	mov	r3, r0
 800ac00:	75fb      	strb	r3, [r7, #23]

			break;
 800ac02:	e023      	b.n	800ac4c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	7bfa      	ldrb	r2, [r7, #15]
 800ac08:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 800ac0c:	e01e      	b.n	800ac4c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	7bfa      	ldrb	r2, [r7, #15]
 800ac12:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 800ac16:	e019      	b.n	800ac4c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 800ac18:	7bbb      	ldrb	r3, [r7, #14]
 800ac1a:	005b      	lsls	r3, r3, #1
 800ac1c:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800ac1e:	7b7b      	ldrb	r3, [r7, #13]
 800ac20:	22fe      	movs	r2, #254	; 0xfe
 800ac22:	2160      	movs	r1, #96	; 0x60
 800ac24:	6878      	ldr	r0, [r7, #4]
 800ac26:	f004 f8d7 	bl	800edd8 <VL53L0X_UpdateByte>
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 800ac2e:	e00d      	b.n	800ac4c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 800ac30:	7bbb      	ldrb	r3, [r7, #14]
 800ac32:	011b      	lsls	r3, r3, #4
 800ac34:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800ac36:	7b7b      	ldrb	r3, [r7, #13]
 800ac38:	22ef      	movs	r2, #239	; 0xef
 800ac3a:	2160      	movs	r1, #96	; 0x60
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f004 f8cb 	bl	800edd8 <VL53L0X_UpdateByte>
 800ac42:	4603      	mov	r3, r0
 800ac44:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 800ac46:	e001      	b.n	800ac4c <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ac48:	23fc      	movs	r3, #252	; 0xfc
 800ac4a:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ac4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d10f      	bne.n	800ac74 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 800ac54:	787b      	ldrb	r3, [r7, #1]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d106      	bne.n	800ac68 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800ac5a:	887b      	ldrh	r3, [r7, #2]
 800ac5c:	687a      	ldr	r2, [r7, #4]
 800ac5e:	4413      	add	r3, r2
 800ac60:	2200      	movs	r2, #0
 800ac62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800ac66:	e005      	b.n	800ac74 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800ac68:	887b      	ldrh	r3, [r7, #2]
 800ac6a:	687a      	ldr	r2, [r7, #4]
 800ac6c:	4413      	add	r3, r2
 800ac6e:	2201      	movs	r2, #1
 800ac70:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ac74:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	3718      	adds	r7, #24
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bd80      	pop	{r7, pc}

0800ac80 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800ac80:	b480      	push	{r7}
 800ac82:	b087      	sub	sp, #28
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	60f8      	str	r0, [r7, #12]
 800ac88:	460b      	mov	r3, r1
 800ac8a:	607a      	str	r2, [r7, #4]
 800ac8c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ac8e:	2300      	movs	r3, #0
 800ac90:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800ac92:	897b      	ldrh	r3, [r7, #10]
 800ac94:	2b05      	cmp	r3, #5
 800ac96:	d905      	bls.n	800aca4 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ac98:	23fc      	movs	r3, #252	; 0xfc
 800ac9a:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2200      	movs	r2, #0
 800aca0:	701a      	strb	r2, [r3, #0]
 800aca2:	e008      	b.n	800acb6 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800aca4:	897b      	ldrh	r3, [r7, #10]
 800aca6:	68fa      	ldr	r2, [r7, #12]
 800aca8:	4413      	add	r3, r2
 800acaa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800acae:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	7dba      	ldrb	r2, [r7, #22]
 800acb4:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800acb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800acba:	4618      	mov	r0, r3
 800acbc:	371c      	adds	r7, #28
 800acbe:	46bd      	mov	sp, r7
 800acc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc4:	4770      	bx	lr
	...

0800acc8 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b086      	sub	sp, #24
 800accc:	af00      	add	r7, sp, #0
 800acce:	60f8      	str	r0, [r7, #12]
 800acd0:	460b      	mov	r3, r1
 800acd2:	607a      	str	r2, [r7, #4]
 800acd4:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800acd6:	2300      	movs	r3, #0
 800acd8:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 800acda:	897b      	ldrh	r3, [r7, #10]
 800acdc:	68fa      	ldr	r2, [r7, #12]
 800acde:	4413      	add	r3, r2
 800ace0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ace4:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 800ace6:	7dbb      	ldrb	r3, [r7, #22]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d107      	bne.n	800acfc <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800acec:	897b      	ldrh	r3, [r7, #10]
 800acee:	68fa      	ldr	r2, [r7, #12]
 800acf0:	330c      	adds	r3, #12
 800acf2:	009b      	lsls	r3, r3, #2
 800acf4:	4413      	add	r3, r2
 800acf6:	687a      	ldr	r2, [r7, #4]
 800acf8:	605a      	str	r2, [r3, #4]
 800acfa:	e040      	b.n	800ad7e <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 800acfc:	897b      	ldrh	r3, [r7, #10]
 800acfe:	2b05      	cmp	r3, #5
 800ad00:	d830      	bhi.n	800ad64 <VL53L0X_SetLimitCheckValue+0x9c>
 800ad02:	a201      	add	r2, pc, #4	; (adr r2, 800ad08 <VL53L0X_SetLimitCheckValue+0x40>)
 800ad04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad08:	0800ad21 	.word	0x0800ad21
 800ad0c:	0800ad29 	.word	0x0800ad29
 800ad10:	0800ad3f 	.word	0x0800ad3f
 800ad14:	0800ad47 	.word	0x0800ad47
 800ad18:	0800ad4f 	.word	0x0800ad4f
 800ad1c:	0800ad4f 	.word	0x0800ad4f

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	687a      	ldr	r2, [r7, #4]
 800ad24:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 800ad26:	e01f      	b.n	800ad68 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800ad2c:	b29b      	uxth	r3, r3
 800ad2e:	461a      	mov	r2, r3
 800ad30:	2144      	movs	r1, #68	; 0x44
 800ad32:	68f8      	ldr	r0, [r7, #12]
 800ad34:	f004 f826 	bl	800ed84 <VL53L0X_WrWord>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800ad3c:	e014      	b.n	800ad68 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	687a      	ldr	r2, [r7, #4]
 800ad42:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 800ad44:	e010      	b.n	800ad68 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	687a      	ldr	r2, [r7, #4]
 800ad4a:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 800ad4c:	e00c      	b.n	800ad68 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800ad52:	b29b      	uxth	r3, r3
 800ad54:	461a      	mov	r2, r3
 800ad56:	2164      	movs	r1, #100	; 0x64
 800ad58:	68f8      	ldr	r0, [r7, #12]
 800ad5a:	f004 f813 	bl	800ed84 <VL53L0X_WrWord>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800ad62:	e001      	b.n	800ad68 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ad64:	23fc      	movs	r3, #252	; 0xfc
 800ad66:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 800ad68:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d106      	bne.n	800ad7e <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800ad70:	897b      	ldrh	r3, [r7, #10]
 800ad72:	68fa      	ldr	r2, [r7, #12]
 800ad74:	330c      	adds	r3, #12
 800ad76:	009b      	lsls	r3, r3, #2
 800ad78:	4413      	add	r3, r2
 800ad7a:	687a      	ldr	r2, [r7, #4]
 800ad7c:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ad7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ad82:	4618      	mov	r0, r3
 800ad84:	3718      	adds	r7, #24
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}
 800ad8a:	bf00      	nop

0800ad8c <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b088      	sub	sp, #32
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	60f8      	str	r0, [r7, #12]
 800ad94:	460b      	mov	r3, r1
 800ad96:	607a      	str	r2, [r7, #4]
 800ad98:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 800ad9e:	2300      	movs	r3, #0
 800ada0:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800ada2:	897b      	ldrh	r3, [r7, #10]
 800ada4:	2b05      	cmp	r3, #5
 800ada6:	d847      	bhi.n	800ae38 <VL53L0X_GetLimitCheckValue+0xac>
 800ada8:	a201      	add	r2, pc, #4	; (adr r2, 800adb0 <VL53L0X_GetLimitCheckValue+0x24>)
 800adaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adae:	bf00      	nop
 800adb0:	0800adc9 	.word	0x0800adc9
 800adb4:	0800add5 	.word	0x0800add5
 800adb8:	0800adfb 	.word	0x0800adfb
 800adbc:	0800ae07 	.word	0x0800ae07
 800adc0:	0800ae13 	.word	0x0800ae13
 800adc4:	0800ae13 	.word	0x0800ae13

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adcc:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 800adce:	2300      	movs	r3, #0
 800add0:	77bb      	strb	r3, [r7, #30]
		break;
 800add2:	e033      	b.n	800ae3c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800add4:	f107 0316 	add.w	r3, r7, #22
 800add8:	461a      	mov	r2, r3
 800adda:	2144      	movs	r1, #68	; 0x44
 800addc:	68f8      	ldr	r0, [r7, #12]
 800adde:	f004 f859 	bl	800ee94 <VL53L0X_RdWord>
 800ade2:	4603      	mov	r3, r0
 800ade4:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800ade6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d102      	bne.n	800adf4 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800adee:	8afb      	ldrh	r3, [r7, #22]
 800adf0:	025b      	lsls	r3, r3, #9
 800adf2:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 800adf4:	2301      	movs	r3, #1
 800adf6:	77bb      	strb	r3, [r7, #30]
		break;
 800adf8:	e020      	b.n	800ae3c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adfe:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 800ae00:	2300      	movs	r3, #0
 800ae02:	77bb      	strb	r3, [r7, #30]
		break;
 800ae04:	e01a      	b.n	800ae3c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae0a:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	77bb      	strb	r3, [r7, #30]
		break;
 800ae10:	e014      	b.n	800ae3c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800ae12:	f107 0316 	add.w	r3, r7, #22
 800ae16:	461a      	mov	r2, r3
 800ae18:	2164      	movs	r1, #100	; 0x64
 800ae1a:	68f8      	ldr	r0, [r7, #12]
 800ae1c:	f004 f83a 	bl	800ee94 <VL53L0X_RdWord>
 800ae20:	4603      	mov	r3, r0
 800ae22:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800ae24:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d102      	bne.n	800ae32 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800ae2c:	8afb      	ldrh	r3, [r7, #22]
 800ae2e:	025b      	lsls	r3, r3, #9
 800ae30:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 800ae32:	2300      	movs	r3, #0
 800ae34:	77bb      	strb	r3, [r7, #30]
		break;
 800ae36:	e001      	b.n	800ae3c <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ae38:	23fc      	movs	r3, #252	; 0xfc
 800ae3a:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ae3c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d12a      	bne.n	800ae9a <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 800ae44:	7fbb      	ldrb	r3, [r7, #30]
 800ae46:	2b01      	cmp	r3, #1
 800ae48:	d124      	bne.n	800ae94 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 800ae4a:	69bb      	ldr	r3, [r7, #24]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d110      	bne.n	800ae72 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 800ae50:	897b      	ldrh	r3, [r7, #10]
 800ae52:	68fa      	ldr	r2, [r7, #12]
 800ae54:	330c      	adds	r3, #12
 800ae56:	009b      	lsls	r3, r3, #2
 800ae58:	4413      	add	r3, r2
 800ae5a:	685b      	ldr	r3, [r3, #4]
 800ae5c:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	69ba      	ldr	r2, [r7, #24]
 800ae62:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800ae64:	897b      	ldrh	r3, [r7, #10]
 800ae66:	68fa      	ldr	r2, [r7, #12]
 800ae68:	4413      	add	r3, r2
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800ae70:	e013      	b.n	800ae9a <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	69ba      	ldr	r2, [r7, #24]
 800ae76:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800ae78:	897b      	ldrh	r3, [r7, #10]
 800ae7a:	68fa      	ldr	r2, [r7, #12]
 800ae7c:	330c      	adds	r3, #12
 800ae7e:	009b      	lsls	r3, r3, #2
 800ae80:	4413      	add	r3, r2
 800ae82:	69ba      	ldr	r2, [r7, #24]
 800ae84:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800ae86:	897b      	ldrh	r3, [r7, #10]
 800ae88:	68fa      	ldr	r2, [r7, #12]
 800ae8a:	4413      	add	r3, r2
 800ae8c:	2201      	movs	r2, #1
 800ae8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800ae92:	e002      	b.n	800ae9a <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	69ba      	ldr	r2, [r7, #24]
 800ae98:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ae9a:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800ae9e:	4618      	mov	r0, r3
 800aea0:	3720      	adds	r7, #32
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}
 800aea6:	bf00      	nop

0800aea8 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b084      	sub	sp, #16
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
 800aeb0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 800aeb6:	f107 030e 	add.w	r3, r7, #14
 800aeba:	461a      	mov	r2, r3
 800aebc:	2101      	movs	r1, #1
 800aebe:	6878      	ldr	r0, [r7, #4]
 800aec0:	f003 ffbe 	bl	800ee40 <VL53L0X_RdByte>
 800aec4:	4603      	mov	r3, r0
 800aec6:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 800aec8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d10e      	bne.n	800aeee <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 800aed0:	7bba      	ldrb	r2, [r7, #14]
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 800aed8:	7bbb      	ldrb	r3, [r7, #14]
 800aeda:	b25b      	sxtb	r3, r3
 800aedc:	2b00      	cmp	r3, #0
 800aede:	da03      	bge.n	800aee8 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	2201      	movs	r2, #1
 800aee4:	701a      	strb	r2, [r3, #0]
 800aee6:	e002      	b.n	800aeee <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	2200      	movs	r2, #0
 800aeec:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800aeee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d104      	bne.n	800af00 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	781a      	ldrb	r2, [r3, #0]
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800af00:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800af04:	4618      	mov	r0, r3
 800af06:	3710      	adds	r7, #16
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}

0800af0c <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b084      	sub	sp, #16
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800af14:	2300      	movs	r3, #0
 800af16:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800af18:	f107 030e 	add.w	r3, r7, #14
 800af1c:	4619      	mov	r1, r3
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	f7ff fbd2 	bl	800a6c8 <VL53L0X_GetDeviceMode>
 800af24:	4603      	mov	r3, r0
 800af26:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800af28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d107      	bne.n	800af40 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800af30:	7bbb      	ldrb	r3, [r7, #14]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d104      	bne.n	800af40 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 800af36:	6878      	ldr	r0, [r7, #4]
 800af38:	f000 f898 	bl	800b06c <VL53L0X_StartMeasurement>
 800af3c:	4603      	mov	r3, r0
 800af3e:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800af40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d104      	bne.n	800af52 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800af48:	6878      	ldr	r0, [r7, #4]
 800af4a:	f001 fb6f 	bl	800c62c <VL53L0X_measurement_poll_for_completion>
 800af4e:	4603      	mov	r3, r0
 800af50:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800af52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d106      	bne.n	800af68 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800af5a:	7bbb      	ldrb	r3, [r7, #14]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d103      	bne.n	800af68 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2203      	movs	r2, #3
 800af64:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 800af68:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800af6c:	4618      	mov	r0, r3
 800af6e:	3710      	adds	r7, #16
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}

0800af74 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b086      	sub	sp, #24
 800af78:	af00      	add	r7, sp, #0
 800af7a:	60f8      	str	r0, [r7, #12]
 800af7c:	60b9      	str	r1, [r7, #8]
 800af7e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800af80:	2300      	movs	r3, #0
 800af82:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 800af84:	2301      	movs	r3, #1
 800af86:	687a      	ldr	r2, [r7, #4]
 800af88:	68b9      	ldr	r1, [r7, #8]
 800af8a:	68f8      	ldr	r0, [r7, #12]
 800af8c:	f001 fb11 	bl	800c5b2 <VL53L0X_perform_ref_calibration>
 800af90:	4603      	mov	r3, r0
 800af92:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 800af94:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800af98:	4618      	mov	r0, r3
 800af9a:	3718      	adds	r7, #24
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bd80      	pop	{r7, pc}

0800afa0 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b086      	sub	sp, #24
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
 800afa8:	460b      	mov	r3, r1
 800afaa:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800afac:	2300      	movs	r3, #0
 800afae:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800afb6:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 800afb8:	7dbb      	ldrb	r3, [r7, #22]
 800afba:	2b01      	cmp	r3, #1
 800afbc:	d005      	beq.n	800afca <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 800afbe:	7dbb      	ldrb	r3, [r7, #22]
 800afc0:	2b02      	cmp	r3, #2
 800afc2:	d002      	beq.n	800afca <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 800afc4:	7dbb      	ldrb	r3, [r7, #22]
 800afc6:	2b03      	cmp	r3, #3
 800afc8:	d147      	bne.n	800b05a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 800afca:	f107 030c 	add.w	r3, r7, #12
 800afce:	f107 0210 	add.w	r2, r7, #16
 800afd2:	2101      	movs	r1, #1
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	f000 fbc3 	bl	800b760 <VL53L0X_GetInterruptThresholds>
 800afda:	4603      	mov	r3, r0
 800afdc:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 800afde:	693b      	ldr	r3, [r7, #16]
 800afe0:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800afe4:	d803      	bhi.n	800afee <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 800afe6:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 800afe8:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800afec:	d935      	bls.n	800b05a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 800afee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d131      	bne.n	800b05a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 800aff6:	78fb      	ldrb	r3, [r7, #3]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d006      	beq.n	800b00a <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 800affc:	491a      	ldr	r1, [pc, #104]	; (800b068 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f002 ff86 	bl	800df10 <VL53L0X_load_tuning_settings>
 800b004:	4603      	mov	r3, r0
 800b006:	75fb      	strb	r3, [r7, #23]
 800b008:	e027      	b.n	800b05a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800b00a:	2204      	movs	r2, #4
 800b00c:	21ff      	movs	r1, #255	; 0xff
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	f003 fe94 	bl	800ed3c <VL53L0X_WrByte>
 800b014:	4603      	mov	r3, r0
 800b016:	461a      	mov	r2, r3
 800b018:	7dfb      	ldrb	r3, [r7, #23]
 800b01a:	4313      	orrs	r3, r2
 800b01c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800b01e:	2200      	movs	r2, #0
 800b020:	2170      	movs	r1, #112	; 0x70
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	f003 fe8a 	bl	800ed3c <VL53L0X_WrByte>
 800b028:	4603      	mov	r3, r0
 800b02a:	461a      	mov	r2, r3
 800b02c:	7dfb      	ldrb	r3, [r7, #23]
 800b02e:	4313      	orrs	r3, r2
 800b030:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b032:	2200      	movs	r2, #0
 800b034:	21ff      	movs	r1, #255	; 0xff
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f003 fe80 	bl	800ed3c <VL53L0X_WrByte>
 800b03c:	4603      	mov	r3, r0
 800b03e:	461a      	mov	r2, r3
 800b040:	7dfb      	ldrb	r3, [r7, #23]
 800b042:	4313      	orrs	r3, r2
 800b044:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800b046:	2200      	movs	r2, #0
 800b048:	2180      	movs	r1, #128	; 0x80
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	f003 fe76 	bl	800ed3c <VL53L0X_WrByte>
 800b050:	4603      	mov	r3, r0
 800b052:	461a      	mov	r2, r3
 800b054:	7dfb      	ldrb	r3, [r7, #23]
 800b056:	4313      	orrs	r3, r2
 800b058:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 800b05a:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800b05e:	4618      	mov	r0, r3
 800b060:	3718      	adds	r7, #24
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}
 800b066:	bf00      	nop
 800b068:	20000100 	.word	0x20000100

0800b06c <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b086      	sub	sp, #24
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b074:	2300      	movs	r3, #0
 800b076:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 800b078:	2301      	movs	r3, #1
 800b07a:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800b07c:	f107 030e 	add.w	r3, r7, #14
 800b080:	4619      	mov	r1, r3
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	f7ff fb20 	bl	800a6c8 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 800b088:	2201      	movs	r2, #1
 800b08a:	2180      	movs	r1, #128	; 0x80
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f003 fe55 	bl	800ed3c <VL53L0X_WrByte>
 800b092:	4603      	mov	r3, r0
 800b094:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b096:	2201      	movs	r2, #1
 800b098:	21ff      	movs	r1, #255	; 0xff
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	f003 fe4e 	bl	800ed3c <VL53L0X_WrByte>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	2100      	movs	r1, #0
 800b0a8:	6878      	ldr	r0, [r7, #4]
 800b0aa:	f003 fe47 	bl	800ed3c <VL53L0X_WrByte>
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 800b0b8:	461a      	mov	r2, r3
 800b0ba:	2191      	movs	r1, #145	; 0x91
 800b0bc:	6878      	ldr	r0, [r7, #4]
 800b0be:	f003 fe3d 	bl	800ed3c <VL53L0X_WrByte>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 800b0c6:	2201      	movs	r2, #1
 800b0c8:	2100      	movs	r1, #0
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	f003 fe36 	bl	800ed3c <VL53L0X_WrByte>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	21ff      	movs	r1, #255	; 0xff
 800b0d8:	6878      	ldr	r0, [r7, #4]
 800b0da:	f003 fe2f 	bl	800ed3c <VL53L0X_WrByte>
 800b0de:	4603      	mov	r3, r0
 800b0e0:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	2180      	movs	r1, #128	; 0x80
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f003 fe28 	bl	800ed3c <VL53L0X_WrByte>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 800b0f0:	7bbb      	ldrb	r3, [r7, #14]
 800b0f2:	2b03      	cmp	r3, #3
 800b0f4:	d054      	beq.n	800b1a0 <VL53L0X_StartMeasurement+0x134>
 800b0f6:	2b03      	cmp	r3, #3
 800b0f8:	dc6c      	bgt.n	800b1d4 <VL53L0X_StartMeasurement+0x168>
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d002      	beq.n	800b104 <VL53L0X_StartMeasurement+0x98>
 800b0fe:	2b01      	cmp	r3, #1
 800b100:	d034      	beq.n	800b16c <VL53L0X_StartMeasurement+0x100>
 800b102:	e067      	b.n	800b1d4 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 800b104:	2201      	movs	r2, #1
 800b106:	2100      	movs	r1, #0
 800b108:	6878      	ldr	r0, [r7, #4]
 800b10a:	f003 fe17 	bl	800ed3c <VL53L0X_WrByte>
 800b10e:	4603      	mov	r3, r0
 800b110:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 800b112:	7bfb      	ldrb	r3, [r7, #15]
 800b114:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 800b116:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d15d      	bne.n	800b1da <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 800b11e:	2300      	movs	r3, #0
 800b120:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 800b122:	693b      	ldr	r3, [r7, #16]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d008      	beq.n	800b13a <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 800b128:	f107 030d 	add.w	r3, r7, #13
 800b12c:	461a      	mov	r2, r3
 800b12e:	2100      	movs	r1, #0
 800b130:	6878      	ldr	r0, [r7, #4]
 800b132:	f003 fe85 	bl	800ee40 <VL53L0X_RdByte>
 800b136:	4603      	mov	r3, r0
 800b138:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 800b13a:	693b      	ldr	r3, [r7, #16]
 800b13c:	3301      	adds	r3, #1
 800b13e:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 800b140:	7b7a      	ldrb	r2, [r7, #13]
 800b142:	7bfb      	ldrb	r3, [r7, #15]
 800b144:	4013      	ands	r3, r2
 800b146:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800b148:	7bfa      	ldrb	r2, [r7, #15]
 800b14a:	429a      	cmp	r2, r3
 800b14c:	d107      	bne.n	800b15e <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 800b14e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d103      	bne.n	800b15e <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800b156:	693b      	ldr	r3, [r7, #16]
 800b158:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b15c:	d3e1      	bcc.n	800b122 <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800b15e:	693b      	ldr	r3, [r7, #16]
 800b160:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b164:	d339      	bcc.n	800b1da <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 800b166:	23f9      	movs	r3, #249	; 0xf9
 800b168:	75fb      	strb	r3, [r7, #23]

		}

		break;
 800b16a:	e036      	b.n	800b1da <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800b16c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d105      	bne.n	800b180 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800b174:	2101      	movs	r1, #1
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	f7ff ff12 	bl	800afa0 <VL53L0X_CheckAndLoadInterruptSettings>
 800b17c:	4603      	mov	r3, r0
 800b17e:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800b180:	2202      	movs	r2, #2
 800b182:	2100      	movs	r1, #0
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	f003 fdd9 	bl	800ed3c <VL53L0X_WrByte>
 800b18a:	4603      	mov	r3, r0
 800b18c:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 800b18e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d123      	bne.n	800b1de <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	2204      	movs	r2, #4
 800b19a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800b19e:	e01e      	b.n	800b1de <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800b1a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d105      	bne.n	800b1b4 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800b1a8:	2101      	movs	r1, #1
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f7ff fef8 	bl	800afa0 <VL53L0X_CheckAndLoadInterruptSettings>
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800b1b4:	2204      	movs	r2, #4
 800b1b6:	2100      	movs	r1, #0
 800b1b8:	6878      	ldr	r0, [r7, #4]
 800b1ba:	f003 fdbf 	bl	800ed3c <VL53L0X_WrByte>
 800b1be:	4603      	mov	r3, r0
 800b1c0:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 800b1c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d10b      	bne.n	800b1e2 <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2204      	movs	r2, #4
 800b1ce:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800b1d2:	e006      	b.n	800b1e2 <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800b1d4:	23f8      	movs	r3, #248	; 0xf8
 800b1d6:	75fb      	strb	r3, [r7, #23]
 800b1d8:	e004      	b.n	800b1e4 <VL53L0X_StartMeasurement+0x178>
		break;
 800b1da:	bf00      	nop
 800b1dc:	e002      	b.n	800b1e4 <VL53L0X_StartMeasurement+0x178>
		break;
 800b1de:	bf00      	nop
 800b1e0:	e000      	b.n	800b1e4 <VL53L0X_StartMeasurement+0x178>
		break;
 800b1e2:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800b1e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	3718      	adds	r7, #24
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}

0800b1f0 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b084      	sub	sp, #16
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
 800b1f8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800b204:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 800b206:	7bbb      	ldrb	r3, [r7, #14]
 800b208:	2b04      	cmp	r3, #4
 800b20a:	d112      	bne.n	800b232 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 800b20c:	f107 0308 	add.w	r3, r7, #8
 800b210:	4619      	mov	r1, r3
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	f000 fb1a 	bl	800b84c <VL53L0X_GetInterruptMaskStatus>
 800b218:	4603      	mov	r3, r0
 800b21a:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 800b21c:	68bb      	ldr	r3, [r7, #8]
 800b21e:	2b04      	cmp	r3, #4
 800b220:	d103      	bne.n	800b22a <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	2201      	movs	r2, #1
 800b226:	701a      	strb	r2, [r3, #0]
 800b228:	e01c      	b.n	800b264 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	2200      	movs	r2, #0
 800b22e:	701a      	strb	r2, [r3, #0]
 800b230:	e018      	b.n	800b264 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800b232:	f107 030d 	add.w	r3, r7, #13
 800b236:	461a      	mov	r2, r3
 800b238:	2114      	movs	r1, #20
 800b23a:	6878      	ldr	r0, [r7, #4]
 800b23c:	f003 fe00 	bl	800ee40 <VL53L0X_RdByte>
 800b240:	4603      	mov	r3, r0
 800b242:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 800b244:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d10b      	bne.n	800b264 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 800b24c:	7b7b      	ldrb	r3, [r7, #13]
 800b24e:	f003 0301 	and.w	r3, r3, #1
 800b252:	2b00      	cmp	r3, #0
 800b254:	d003      	beq.n	800b25e <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	2201      	movs	r2, #1
 800b25a:	701a      	strb	r2, [r3, #0]
 800b25c:	e002      	b.n	800b264 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	2200      	movs	r2, #0
 800b262:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b264:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b268:	4618      	mov	r0, r3
 800b26a:	3710      	adds	r7, #16
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}

0800b270 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800b270:	b5b0      	push	{r4, r5, r7, lr}
 800b272:	b096      	sub	sp, #88	; 0x58
 800b274:	af02      	add	r7, sp, #8
 800b276:	6078      	str	r0, [r7, #4]
 800b278:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b27a:	2300      	movs	r3, #0
 800b27c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 800b280:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b284:	230c      	movs	r3, #12
 800b286:	2114      	movs	r1, #20
 800b288:	6878      	ldr	r0, [r7, #4]
 800b28a:	f003 fd2b 	bl	800ece4 <VL53L0X_ReadMulti>
 800b28e:	4603      	mov	r3, r0
 800b290:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 800b294:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800b298:	2b00      	cmp	r3, #0
 800b29a:	f040 80d1 	bne.w	800b440 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 800b2aa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b2ae:	b29b      	uxth	r3, r3
 800b2b0:	021b      	lsls	r3, r3, #8
 800b2b2:	b29a      	uxth	r2, r3
 800b2b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b2b8:	b29b      	uxth	r3, r3
 800b2ba:	4413      	add	r3, r2
 800b2bc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 800b2c6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b2ca:	b29b      	uxth	r3, r3
 800b2cc:	021b      	lsls	r3, r3, #8
 800b2ce:	b29a      	uxth	r2, r3
 800b2d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b2d4:	b29b      	uxth	r3, r3
 800b2d6:	4413      	add	r3, r2
 800b2d8:	b29b      	uxth	r3, r3
 800b2da:	025b      	lsls	r3, r3, #9
 800b2dc:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b2e2:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 800b2e4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800b2e8:	b29b      	uxth	r3, r3
 800b2ea:	021b      	lsls	r3, r3, #8
 800b2ec:	b29a      	uxth	r2, r3
 800b2ee:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800b2f2:	b29b      	uxth	r3, r3
 800b2f4:	4413      	add	r3, r2
 800b2f6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 800b2fa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b2fe:	025b      	lsls	r3, r3, #9
 800b300:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 800b302:	683b      	ldr	r3, [r7, #0]
 800b304:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 800b306:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800b30a:	b29b      	uxth	r3, r3
 800b30c:	021b      	lsls	r3, r3, #8
 800b30e:	b29a      	uxth	r2, r3
 800b310:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b314:	b29b      	uxth	r3, r3
 800b316:	4413      	add	r3, r2
 800b318:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800b322:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 800b324:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b328:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 800b332:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 800b33a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 800b33e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b340:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b344:	d046      	beq.n	800b3d4 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800b346:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b348:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800b34c:	fb02 f303 	mul.w	r3, r2, r3
 800b350:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b354:	4a57      	ldr	r2, [pc, #348]	; (800b4b4 <VL53L0X_GetRangingMeasurementData+0x244>)
 800b356:	fb82 1203 	smull	r1, r2, r2, r3
 800b35a:	1192      	asrs	r2, r2, #6
 800b35c:	17db      	asrs	r3, r3, #31
 800b35e:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 800b360:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	6a1b      	ldr	r3, [r3, #32]
 800b368:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	7f1b      	ldrb	r3, [r3, #28]
 800b36e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 800b372:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b376:	2b00      	cmp	r3, #0
 800b378:	d02c      	beq.n	800b3d4 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 800b37a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800b37c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800b380:	fb02 f303 	mul.w	r3, r2, r3
 800b384:	121a      	asrs	r2, r3, #8
					<= 0) {
 800b386:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 800b388:	429a      	cmp	r2, r3
 800b38a:	d10d      	bne.n	800b3a8 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 800b38c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b390:	2b00      	cmp	r3, #0
 800b392:	d004      	beq.n	800b39e <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 800b394:	f242 23b8 	movw	r3, #8888	; 0x22b8
 800b398:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800b39c:	e016      	b.n	800b3cc <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 800b39e:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 800b3a2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800b3a6:	e011      	b.n	800b3cc <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 800b3a8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800b3ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b3ae:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 800b3b2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800b3b4:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 800b3b8:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 800b3bc:	121b      	asrs	r3, r3, #8
 800b3be:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 800b3c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3c2:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 800b3c4:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 800b3c8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 800b3cc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b3d0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 800b3d4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d00d      	beq.n	800b3f8 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 800b3dc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800b3e0:	089b      	lsrs	r3, r3, #2
 800b3e2:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 800b3e8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800b3ec:	b2db      	uxtb	r3, r3
 800b3ee:	019b      	lsls	r3, r3, #6
 800b3f0:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	75da      	strb	r2, [r3, #23]
 800b3f6:	e006      	b.n	800b406 <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800b3fe:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	2200      	movs	r2, #0
 800b404:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 800b406:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800b40a:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800b40e:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800b412:	9301      	str	r3, [sp, #4]
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	9300      	str	r3, [sp, #0]
 800b418:	4613      	mov	r3, r2
 800b41a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f003 fa15 	bl	800e84c <VL53L0X_get_pal_range_status>
 800b422:	4603      	mov	r3, r0
 800b424:	461a      	mov	r2, r3
 800b426:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b42a:	4313      	orrs	r3, r2
 800b42c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 800b430:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800b434:	2b00      	cmp	r3, #0
 800b436:	d103      	bne.n	800b440 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 800b438:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b440:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800b444:	2b00      	cmp	r3, #0
 800b446:	d12f      	bne.n	800b4a8 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f107 040c 	add.w	r4, r7, #12
 800b44e:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800b452:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b454:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b456:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b45a:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 800b462:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 800b468:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 800b470:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 800b476:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 800b47c:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 800b482:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 800b488:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 800b48e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f103 0450 	add.w	r4, r3, #80	; 0x50
 800b498:	f107 050c 	add.w	r5, r7, #12
 800b49c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b49e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b4a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b4a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b4a8:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	3750      	adds	r7, #80	; 0x50
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bdb0      	pop	{r4, r5, r7, pc}
 800b4b4:	10624dd3 	.word	0x10624dd3

0800b4b8 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b084      	sub	sp, #16
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
 800b4c0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800b4c6:	2100      	movs	r1, #0
 800b4c8:	6878      	ldr	r0, [r7, #4]
 800b4ca:	f7ff f8d1 	bl	800a670 <VL53L0X_SetDeviceMode>
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800b4d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d104      	bne.n	800b4e4 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800b4da:	6878      	ldr	r0, [r7, #4]
 800b4dc:	f7ff fd16 	bl	800af0c <VL53L0X_PerformSingleMeasurement>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800b4e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d105      	bne.n	800b4f8 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 800b4ec:	6839      	ldr	r1, [r7, #0]
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	f7ff febe 	bl	800b270 <VL53L0X_GetRangingMeasurementData>
 800b4f4:	4603      	mov	r3, r0
 800b4f6:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 800b4f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d105      	bne.n	800b50c <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800b500:	2100      	movs	r1, #0
 800b502:	6878      	ldr	r0, [r7, #4]
 800b504:	f000 f962 	bl	800b7cc <VL53L0X_ClearInterruptMask>
 800b508:	4603      	mov	r3, r0
 800b50a:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 800b50c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b510:	4618      	mov	r0, r3
 800b512:	3710      	adds	r7, #16
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}

0800b518 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b084      	sub	sp, #16
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
 800b520:	4608      	mov	r0, r1
 800b522:	4611      	mov	r1, r2
 800b524:	461a      	mov	r2, r3
 800b526:	4603      	mov	r3, r0
 800b528:	70fb      	strb	r3, [r7, #3]
 800b52a:	460b      	mov	r3, r1
 800b52c:	70bb      	strb	r3, [r7, #2]
 800b52e:	4613      	mov	r3, r2
 800b530:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b532:	2300      	movs	r3, #0
 800b534:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800b536:	78fb      	ldrb	r3, [r7, #3]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d002      	beq.n	800b542 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 800b53c:	23f6      	movs	r3, #246	; 0xf6
 800b53e:	73fb      	strb	r3, [r7, #15]
 800b540:	e107      	b.n	800b752 <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800b542:	78bb      	ldrb	r3, [r7, #2]
 800b544:	2b14      	cmp	r3, #20
 800b546:	d110      	bne.n	800b56a <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800b548:	7e3b      	ldrb	r3, [r7, #24]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d102      	bne.n	800b554 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 800b54e:	2310      	movs	r3, #16
 800b550:	73bb      	strb	r3, [r7, #14]
 800b552:	e001      	b.n	800b558 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 800b554:	2301      	movs	r3, #1
 800b556:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 800b558:	7bbb      	ldrb	r3, [r7, #14]
 800b55a:	461a      	mov	r2, r3
 800b55c:	2184      	movs	r1, #132	; 0x84
 800b55e:	6878      	ldr	r0, [r7, #4]
 800b560:	f003 fbec 	bl	800ed3c <VL53L0X_WrByte>
 800b564:	4603      	mov	r3, r0
 800b566:	73fb      	strb	r3, [r7, #15]
 800b568:	e0f3      	b.n	800b752 <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 800b56a:	78bb      	ldrb	r3, [r7, #2]
 800b56c:	2b15      	cmp	r3, #21
 800b56e:	f040 8097 	bne.w	800b6a0 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800b572:	2201      	movs	r2, #1
 800b574:	21ff      	movs	r1, #255	; 0xff
 800b576:	6878      	ldr	r0, [r7, #4]
 800b578:	f003 fbe0 	bl	800ed3c <VL53L0X_WrByte>
 800b57c:	4603      	mov	r3, r0
 800b57e:	461a      	mov	r2, r3
 800b580:	7bfb      	ldrb	r3, [r7, #15]
 800b582:	4313      	orrs	r3, r2
 800b584:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800b586:	2200      	movs	r2, #0
 800b588:	2100      	movs	r1, #0
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f003 fbd6 	bl	800ed3c <VL53L0X_WrByte>
 800b590:	4603      	mov	r3, r0
 800b592:	461a      	mov	r2, r3
 800b594:	7bfb      	ldrb	r3, [r7, #15]
 800b596:	4313      	orrs	r3, r2
 800b598:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800b59a:	2200      	movs	r2, #0
 800b59c:	21ff      	movs	r1, #255	; 0xff
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f003 fbcc 	bl	800ed3c <VL53L0X_WrByte>
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	461a      	mov	r2, r3
 800b5a8:	7bfb      	ldrb	r3, [r7, #15]
 800b5aa:	4313      	orrs	r3, r2
 800b5ac:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800b5ae:	2201      	movs	r2, #1
 800b5b0:	2180      	movs	r1, #128	; 0x80
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	f003 fbc2 	bl	800ed3c <VL53L0X_WrByte>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	461a      	mov	r2, r3
 800b5bc:	7bfb      	ldrb	r3, [r7, #15]
 800b5be:	4313      	orrs	r3, r2
 800b5c0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 800b5c2:	2202      	movs	r2, #2
 800b5c4:	2185      	movs	r1, #133	; 0x85
 800b5c6:	6878      	ldr	r0, [r7, #4]
 800b5c8:	f003 fbb8 	bl	800ed3c <VL53L0X_WrByte>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	461a      	mov	r2, r3
 800b5d0:	7bfb      	ldrb	r3, [r7, #15]
 800b5d2:	4313      	orrs	r3, r2
 800b5d4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800b5d6:	2204      	movs	r2, #4
 800b5d8:	21ff      	movs	r1, #255	; 0xff
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f003 fbae 	bl	800ed3c <VL53L0X_WrByte>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	461a      	mov	r2, r3
 800b5e4:	7bfb      	ldrb	r3, [r7, #15]
 800b5e6:	4313      	orrs	r3, r2
 800b5e8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	21cd      	movs	r1, #205	; 0xcd
 800b5ee:	6878      	ldr	r0, [r7, #4]
 800b5f0:	f003 fba4 	bl	800ed3c <VL53L0X_WrByte>
 800b5f4:	4603      	mov	r3, r0
 800b5f6:	461a      	mov	r2, r3
 800b5f8:	7bfb      	ldrb	r3, [r7, #15]
 800b5fa:	4313      	orrs	r3, r2
 800b5fc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800b5fe:	2211      	movs	r2, #17
 800b600:	21cc      	movs	r1, #204	; 0xcc
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	f003 fb9a 	bl	800ed3c <VL53L0X_WrByte>
 800b608:	4603      	mov	r3, r0
 800b60a:	461a      	mov	r2, r3
 800b60c:	7bfb      	ldrb	r3, [r7, #15]
 800b60e:	4313      	orrs	r3, r2
 800b610:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800b612:	2207      	movs	r2, #7
 800b614:	21ff      	movs	r1, #255	; 0xff
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f003 fb90 	bl	800ed3c <VL53L0X_WrByte>
 800b61c:	4603      	mov	r3, r0
 800b61e:	461a      	mov	r2, r3
 800b620:	7bfb      	ldrb	r3, [r7, #15]
 800b622:	4313      	orrs	r3, r2
 800b624:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800b626:	2200      	movs	r2, #0
 800b628:	21be      	movs	r1, #190	; 0xbe
 800b62a:	6878      	ldr	r0, [r7, #4]
 800b62c:	f003 fb86 	bl	800ed3c <VL53L0X_WrByte>
 800b630:	4603      	mov	r3, r0
 800b632:	461a      	mov	r2, r3
 800b634:	7bfb      	ldrb	r3, [r7, #15]
 800b636:	4313      	orrs	r3, r2
 800b638:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800b63a:	2206      	movs	r2, #6
 800b63c:	21ff      	movs	r1, #255	; 0xff
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f003 fb7c 	bl	800ed3c <VL53L0X_WrByte>
 800b644:	4603      	mov	r3, r0
 800b646:	461a      	mov	r2, r3
 800b648:	7bfb      	ldrb	r3, [r7, #15]
 800b64a:	4313      	orrs	r3, r2
 800b64c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800b64e:	2209      	movs	r2, #9
 800b650:	21cc      	movs	r1, #204	; 0xcc
 800b652:	6878      	ldr	r0, [r7, #4]
 800b654:	f003 fb72 	bl	800ed3c <VL53L0X_WrByte>
 800b658:	4603      	mov	r3, r0
 800b65a:	461a      	mov	r2, r3
 800b65c:	7bfb      	ldrb	r3, [r7, #15]
 800b65e:	4313      	orrs	r3, r2
 800b660:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800b662:	2200      	movs	r2, #0
 800b664:	21ff      	movs	r1, #255	; 0xff
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	f003 fb68 	bl	800ed3c <VL53L0X_WrByte>
 800b66c:	4603      	mov	r3, r0
 800b66e:	461a      	mov	r2, r3
 800b670:	7bfb      	ldrb	r3, [r7, #15]
 800b672:	4313      	orrs	r3, r2
 800b674:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800b676:	2201      	movs	r2, #1
 800b678:	21ff      	movs	r1, #255	; 0xff
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f003 fb5e 	bl	800ed3c <VL53L0X_WrByte>
 800b680:	4603      	mov	r3, r0
 800b682:	461a      	mov	r2, r3
 800b684:	7bfb      	ldrb	r3, [r7, #15]
 800b686:	4313      	orrs	r3, r2
 800b688:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800b68a:	2200      	movs	r2, #0
 800b68c:	2100      	movs	r1, #0
 800b68e:	6878      	ldr	r0, [r7, #4]
 800b690:	f003 fb54 	bl	800ed3c <VL53L0X_WrByte>
 800b694:	4603      	mov	r3, r0
 800b696:	461a      	mov	r2, r3
 800b698:	7bfb      	ldrb	r3, [r7, #15]
 800b69a:	4313      	orrs	r3, r2
 800b69c:	73fb      	strb	r3, [r7, #15]
 800b69e:	e058      	b.n	800b752 <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 800b6a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d121      	bne.n	800b6ec <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 800b6a8:	787b      	ldrb	r3, [r7, #1]
 800b6aa:	2b04      	cmp	r3, #4
 800b6ac:	d81b      	bhi.n	800b6e6 <VL53L0X_SetGpioConfig+0x1ce>
 800b6ae:	a201      	add	r2, pc, #4	; (adr r2, 800b6b4 <VL53L0X_SetGpioConfig+0x19c>)
 800b6b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6b4:	0800b6c9 	.word	0x0800b6c9
 800b6b8:	0800b6cf 	.word	0x0800b6cf
 800b6bc:	0800b6d5 	.word	0x0800b6d5
 800b6c0:	0800b6db 	.word	0x0800b6db
 800b6c4:	0800b6e1 	.word	0x0800b6e1
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	73bb      	strb	r3, [r7, #14]
				break;
 800b6cc:	e00f      	b.n	800b6ee <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	73bb      	strb	r3, [r7, #14]
				break;
 800b6d2:	e00c      	b.n	800b6ee <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 800b6d4:	2302      	movs	r3, #2
 800b6d6:	73bb      	strb	r3, [r7, #14]
				break;
 800b6d8:	e009      	b.n	800b6ee <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 800b6da:	2303      	movs	r3, #3
 800b6dc:	73bb      	strb	r3, [r7, #14]
				break;
 800b6de:	e006      	b.n	800b6ee <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 800b6e0:	2304      	movs	r3, #4
 800b6e2:	73bb      	strb	r3, [r7, #14]
				break;
 800b6e4:	e003      	b.n	800b6ee <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 800b6e6:	23f5      	movs	r3, #245	; 0xf5
 800b6e8:	73fb      	strb	r3, [r7, #15]
 800b6ea:	e000      	b.n	800b6ee <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 800b6ec:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 800b6ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d107      	bne.n	800b706 <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 800b6f6:	7bbb      	ldrb	r3, [r7, #14]
 800b6f8:	461a      	mov	r2, r3
 800b6fa:	210a      	movs	r1, #10
 800b6fc:	6878      	ldr	r0, [r7, #4]
 800b6fe:	f003 fb1d 	bl	800ed3c <VL53L0X_WrByte>
 800b702:	4603      	mov	r3, r0
 800b704:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 800b706:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d10f      	bne.n	800b72e <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800b70e:	7e3b      	ldrb	r3, [r7, #24]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d102      	bne.n	800b71a <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 800b714:	2300      	movs	r3, #0
 800b716:	73bb      	strb	r3, [r7, #14]
 800b718:	e001      	b.n	800b71e <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 800b71a:	2310      	movs	r3, #16
 800b71c:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 800b71e:	7bbb      	ldrb	r3, [r7, #14]
 800b720:	22ef      	movs	r2, #239	; 0xef
 800b722:	2184      	movs	r1, #132	; 0x84
 800b724:	6878      	ldr	r0, [r7, #4]
 800b726:	f003 fb57 	bl	800edd8 <VL53L0X_UpdateByte>
 800b72a:	4603      	mov	r3, r0
 800b72c:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 800b72e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d103      	bne.n	800b73e <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	787a      	ldrb	r2, [r7, #1]
 800b73a:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 800b73e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d105      	bne.n	800b752 <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800b746:	2100      	movs	r1, #0
 800b748:	6878      	ldr	r0, [r7, #4]
 800b74a:	f000 f83f 	bl	800b7cc <VL53L0X_ClearInterruptMask>
 800b74e:	4603      	mov	r3, r0
 800b750:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b752:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b756:	4618      	mov	r0, r3
 800b758:	3710      	adds	r7, #16
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}
 800b75e:	bf00      	nop

0800b760 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b086      	sub	sp, #24
 800b764:	af00      	add	r7, sp, #0
 800b766:	60f8      	str	r0, [r7, #12]
 800b768:	607a      	str	r2, [r7, #4]
 800b76a:	603b      	str	r3, [r7, #0]
 800b76c:	460b      	mov	r3, r1
 800b76e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b770:	2300      	movs	r3, #0
 800b772:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 800b774:	f107 0314 	add.w	r3, r7, #20
 800b778:	461a      	mov	r2, r3
 800b77a:	210e      	movs	r1, #14
 800b77c:	68f8      	ldr	r0, [r7, #12]
 800b77e:	f003 fb89 	bl	800ee94 <VL53L0X_RdWord>
 800b782:	4603      	mov	r3, r0
 800b784:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800b786:	8abb      	ldrh	r3, [r7, #20]
 800b788:	045b      	lsls	r3, r3, #17
 800b78a:	461a      	mov	r2, r3
 800b78c:	4b0e      	ldr	r3, [pc, #56]	; (800b7c8 <VL53L0X_GetInterruptThresholds+0x68>)
 800b78e:	4013      	ands	r3, r2
 800b790:	687a      	ldr	r2, [r7, #4]
 800b792:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800b794:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d10f      	bne.n	800b7bc <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 800b79c:	f107 0314 	add.w	r3, r7, #20
 800b7a0:	461a      	mov	r2, r3
 800b7a2:	210c      	movs	r1, #12
 800b7a4:	68f8      	ldr	r0, [r7, #12]
 800b7a6:	f003 fb75 	bl	800ee94 <VL53L0X_RdWord>
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800b7ae:	8abb      	ldrh	r3, [r7, #20]
 800b7b0:	045b      	lsls	r3, r3, #17
 800b7b2:	461a      	mov	r2, r3
 800b7b4:	4b04      	ldr	r3, [pc, #16]	; (800b7c8 <VL53L0X_GetInterruptThresholds+0x68>)
 800b7b6:	4013      	ands	r3, r2
		*pThresholdHigh =
 800b7b8:	683a      	ldr	r2, [r7, #0]
 800b7ba:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b7bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	3718      	adds	r7, #24
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	bd80      	pop	{r7, pc}
 800b7c8:	1ffe0000 	.word	0x1ffe0000

0800b7cc <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b084      	sub	sp, #16
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
 800b7d4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 800b7da:	2300      	movs	r3, #0
 800b7dc:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 800b7de:	2201      	movs	r2, #1
 800b7e0:	210b      	movs	r1, #11
 800b7e2:	6878      	ldr	r0, [r7, #4]
 800b7e4:	f003 faaa 	bl	800ed3c <VL53L0X_WrByte>
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	210b      	movs	r1, #11
 800b7f0:	6878      	ldr	r0, [r7, #4]
 800b7f2:	f003 faa3 	bl	800ed3c <VL53L0X_WrByte>
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	461a      	mov	r2, r3
 800b7fa:	7bfb      	ldrb	r3, [r7, #15]
 800b7fc:	4313      	orrs	r3, r2
 800b7fe:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 800b800:	f107 030d 	add.w	r3, r7, #13
 800b804:	461a      	mov	r2, r3
 800b806:	2113      	movs	r1, #19
 800b808:	6878      	ldr	r0, [r7, #4]
 800b80a:	f003 fb19 	bl	800ee40 <VL53L0X_RdByte>
 800b80e:	4603      	mov	r3, r0
 800b810:	461a      	mov	r2, r3
 800b812:	7bfb      	ldrb	r3, [r7, #15]
 800b814:	4313      	orrs	r3, r2
 800b816:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 800b818:	7bbb      	ldrb	r3, [r7, #14]
 800b81a:	3301      	adds	r3, #1
 800b81c:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 800b81e:	7b7b      	ldrb	r3, [r7, #13]
 800b820:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 800b824:	2b00      	cmp	r3, #0
 800b826:	d006      	beq.n	800b836 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 800b828:	7bbb      	ldrb	r3, [r7, #14]
 800b82a:	2b02      	cmp	r3, #2
 800b82c:	d803      	bhi.n	800b836 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 800b82e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d0d3      	beq.n	800b7de <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 800b836:	7bbb      	ldrb	r3, [r7, #14]
 800b838:	2b02      	cmp	r3, #2
 800b83a:	d901      	bls.n	800b840 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 800b83c:	23f4      	movs	r3, #244	; 0xf4
 800b83e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800b840:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b844:	4618      	mov	r0, r3
 800b846:	3710      	adds	r7, #16
 800b848:	46bd      	mov	sp, r7
 800b84a:	bd80      	pop	{r7, pc}

0800b84c <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b084      	sub	sp, #16
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
 800b854:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b856:	2300      	movs	r3, #0
 800b858:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800b85a:	f107 030e 	add.w	r3, r7, #14
 800b85e:	461a      	mov	r2, r3
 800b860:	2113      	movs	r1, #19
 800b862:	6878      	ldr	r0, [r7, #4]
 800b864:	f003 faec 	bl	800ee40 <VL53L0X_RdByte>
 800b868:	4603      	mov	r3, r0
 800b86a:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 800b86c:	7bbb      	ldrb	r3, [r7, #14]
 800b86e:	f003 0207 	and.w	r2, r3, #7
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800b876:	7bbb      	ldrb	r3, [r7, #14]
 800b878:	f003 0318 	and.w	r3, r3, #24
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d001      	beq.n	800b884 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 800b880:	23fa      	movs	r3, #250	; 0xfa
 800b882:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800b884:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b888:	4618      	mov	r0, r3
 800b88a:	3710      	adds	r7, #16
 800b88c:	46bd      	mov	sp, r7
 800b88e:	bd80      	pop	{r7, pc}

0800b890 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b086      	sub	sp, #24
 800b894:	af00      	add	r7, sp, #0
 800b896:	60f8      	str	r0, [r7, #12]
 800b898:	60b9      	str	r1, [r7, #8]
 800b89a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b89c:	2300      	movs	r3, #0
 800b89e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 800b8a0:	687a      	ldr	r2, [r7, #4]
 800b8a2:	68b9      	ldr	r1, [r7, #8]
 800b8a4:	68f8      	ldr	r0, [r7, #12]
 800b8a6:	f000 fa33 	bl	800bd10 <VL53L0X_perform_ref_spad_management>
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 800b8ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	3718      	adds	r7, #24
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	bd80      	pop	{r7, pc}

0800b8ba <VL53L0X_PerformContinuousRangingMeasurement>:


VL53L0X_Error VL53L0X_PerformContinuousRangingMeasurement(VL53L0X_Dev_t *device, VL53L0X_RangingMeasurementData_t *ranging_data) {
 800b8ba:	b580      	push	{r7, lr}
 800b8bc:	b084      	sub	sp, #16
 800b8be:	af00      	add	r7, sp, #0
 800b8c0:	6078      	str	r0, [r7, #4]
 800b8c2:	6039      	str	r1, [r7, #0]
    VL53L0X_Error status;

    // Set the device to high accuracy mode
    status = VL53L0X_SetDeviceMode(device, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 800b8c4:	2101      	movs	r1, #1
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	f7fe fed2 	bl	800a670 <VL53L0X_SetDeviceMode>
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 800b8d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d002      	beq.n	800b8de <VL53L0X_PerformContinuousRangingMeasurement+0x24>
        return status;
 800b8d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b8dc:	e019      	b.n	800b912 <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    // Start continuous ranging measurement
    status = VL53L0X_StartMeasurement(device);
 800b8de:	6878      	ldr	r0, [r7, #4]
 800b8e0:	f7ff fbc4 	bl	800b06c <VL53L0X_StartMeasurement>
 800b8e4:	4603      	mov	r3, r0
 800b8e6:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 800b8e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d002      	beq.n	800b8f6 <VL53L0X_PerformContinuousRangingMeasurement+0x3c>
        return status;
 800b8f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b8f4:	e00d      	b.n	800b912 <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    // Get ranging measurement data
    status = VL53L0X_GetRangingMeasurementData(device, ranging_data);
 800b8f6:	6839      	ldr	r1, [r7, #0]
 800b8f8:	6878      	ldr	r0, [r7, #4]
 800b8fa:	f7ff fcb9 	bl	800b270 <VL53L0X_GetRangingMeasurementData>
 800b8fe:	4603      	mov	r3, r0
 800b900:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 800b902:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d002      	beq.n	800b910 <VL53L0X_PerformContinuousRangingMeasurement+0x56>
        return status;
 800b90a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b90e:	e000      	b.n	800b912 <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    return VL53L0X_ERROR_NONE;
 800b910:	2300      	movs	r3, #0
}
 800b912:	4618      	mov	r0, r3
 800b914:	3710      	adds	r7, #16
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}

0800b91a <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 800b91a:	b580      	push	{r7, lr}
 800b91c:	b084      	sub	sp, #16
 800b91e:	af00      	add	r7, sp, #0
 800b920:	6078      	str	r0, [r7, #4]
 800b922:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b924:	2300      	movs	r3, #0
 800b926:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 800b928:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800b92c:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 800b92e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b932:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 800b934:	f107 0308 	add.w	r3, r7, #8
 800b938:	461a      	mov	r2, r3
 800b93a:	2128      	movs	r1, #40	; 0x28
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	f003 faa9 	bl	800ee94 <VL53L0X_RdWord>
 800b942:	4603      	mov	r3, r0
 800b944:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 800b946:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d11e      	bne.n	800b98c <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800b94e:	893b      	ldrh	r3, [r7, #8]
 800b950:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b954:	b29b      	uxth	r3, r3
 800b956:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 800b958:	893b      	ldrh	r3, [r7, #8]
 800b95a:	461a      	mov	r2, r3
 800b95c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b960:	429a      	cmp	r2, r3
 800b962:	dd0b      	ble.n	800b97c <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 800b964:	893a      	ldrh	r2, [r7, #8]
 800b966:	897b      	ldrh	r3, [r7, #10]
 800b968:	1ad3      	subs	r3, r2, r3
 800b96a:	b29b      	uxth	r3, r3
 800b96c:	b21b      	sxth	r3, r3
 800b96e:	461a      	mov	r2, r3
					* 250;
 800b970:	23fa      	movs	r3, #250	; 0xfa
 800b972:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	601a      	str	r2, [r3, #0]
 800b97a:	e007      	b.n	800b98c <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 800b97c:	893b      	ldrh	r3, [r7, #8]
 800b97e:	b21b      	sxth	r3, r3
 800b980:	461a      	mov	r2, r3
 800b982:	23fa      	movs	r3, #250	; 0xfa
 800b984:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	601a      	str	r2, [r3, #0]

	}

	return Status;
 800b98c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b990:	4618      	mov	r0, r3
 800b992:	3710      	adds	r7, #16
 800b994:	46bd      	mov	sp, r7
 800b996:	bd80      	pop	{r7, pc}

0800b998 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 800b998:	b480      	push	{r7}
 800b99a:	b08b      	sub	sp, #44	; 0x2c
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	60f8      	str	r0, [r7, #12]
 800b9a0:	60b9      	str	r1, [r7, #8]
 800b9a2:	607a      	str	r2, [r7, #4]
 800b9a4:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800b9a6:	2308      	movs	r3, #8
 800b9a8:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	f04f 32ff 	mov.w	r2, #4294967295
 800b9b4:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800b9b6:	687a      	ldr	r2, [r7, #4]
 800b9b8:	69bb      	ldr	r3, [r7, #24]
 800b9ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9be:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	69ba      	ldr	r2, [r7, #24]
 800b9c4:	fbb3 f2f2 	udiv	r2, r3, r2
 800b9c8:	69b9      	ldr	r1, [r7, #24]
 800b9ca:	fb01 f202 	mul.w	r2, r1, r2
 800b9ce:	1a9b      	subs	r3, r3, r2
 800b9d0:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800b9d2:	697b      	ldr	r3, [r7, #20]
 800b9d4:	627b      	str	r3, [r7, #36]	; 0x24
 800b9d6:	e030      	b.n	800ba3a <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 800b9d8:	2300      	movs	r3, #0
 800b9da:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 800b9dc:	68fa      	ldr	r2, [r7, #12]
 800b9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9e0:	4413      	add	r3, r2
 800b9e2:	781b      	ldrb	r3, [r3, #0]
 800b9e4:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 800b9e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9e8:	697b      	ldr	r3, [r7, #20]
 800b9ea:	429a      	cmp	r2, r3
 800b9ec:	d11e      	bne.n	800ba2c <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 800b9ee:	7ffa      	ldrb	r2, [r7, #31]
 800b9f0:	693b      	ldr	r3, [r7, #16]
 800b9f2:	fa42 f303 	asr.w	r3, r2, r3
 800b9f6:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 800b9f8:	693b      	ldr	r3, [r7, #16]
 800b9fa:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 800b9fc:	e016      	b.n	800ba2c <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 800b9fe:	7ffb      	ldrb	r3, [r7, #31]
 800ba00:	f003 0301 	and.w	r3, r3, #1
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d00b      	beq.n	800ba20 <get_next_good_spad+0x88>
				success = 1;
 800ba08:	2301      	movs	r3, #1
 800ba0a:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 800ba0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba0e:	69ba      	ldr	r2, [r7, #24]
 800ba10:	fb03 f202 	mul.w	r2, r3, r2
 800ba14:	6a3b      	ldr	r3, [r7, #32]
 800ba16:	4413      	add	r3, r2
 800ba18:	461a      	mov	r2, r3
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	601a      	str	r2, [r3, #0]
				break;
 800ba1e:	e009      	b.n	800ba34 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 800ba20:	7ffb      	ldrb	r3, [r7, #31]
 800ba22:	085b      	lsrs	r3, r3, #1
 800ba24:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 800ba26:	6a3b      	ldr	r3, [r7, #32]
 800ba28:	3301      	adds	r3, #1
 800ba2a:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 800ba2c:	6a3a      	ldr	r2, [r7, #32]
 800ba2e:	69bb      	ldr	r3, [r7, #24]
 800ba30:	429a      	cmp	r2, r3
 800ba32:	d3e4      	bcc.n	800b9fe <get_next_good_spad+0x66>
				coarseIndex++) {
 800ba34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba36:	3301      	adds	r3, #1
 800ba38:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800ba3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba3c:	68bb      	ldr	r3, [r7, #8]
 800ba3e:	429a      	cmp	r2, r3
 800ba40:	d202      	bcs.n	800ba48 <get_next_good_spad+0xb0>
 800ba42:	7fbb      	ldrb	r3, [r7, #30]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d0c7      	beq.n	800b9d8 <get_next_good_spad+0x40>
		}
	}
}
 800ba48:	bf00      	nop
 800ba4a:	372c      	adds	r7, #44	; 0x2c
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba52:	4770      	bx	lr

0800ba54 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 800ba54:	b480      	push	{r7}
 800ba56:	b085      	sub	sp, #20
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 800ba5c:	2301      	movs	r3, #1
 800ba5e:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	099b      	lsrs	r3, r3, #6
 800ba64:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800ba66:	4a07      	ldr	r2, [pc, #28]	; (800ba84 <is_aperture+0x30>)
 800ba68:	68bb      	ldr	r3, [r7, #8]
 800ba6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d101      	bne.n	800ba76 <is_aperture+0x22>
		isAperture = 0;
 800ba72:	2300      	movs	r3, #0
 800ba74:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 800ba76:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba78:	4618      	mov	r0, r3
 800ba7a:	3714      	adds	r7, #20
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba82:	4770      	bx	lr
 800ba84:	200002b8 	.word	0x200002b8

0800ba88 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 800ba88:	b480      	push	{r7}
 800ba8a:	b089      	sub	sp, #36	; 0x24
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	60f8      	str	r0, [r7, #12]
 800ba90:	60b9      	str	r1, [r7, #8]
 800ba92:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800ba94:	2300      	movs	r3, #0
 800ba96:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 800ba98:	2308      	movs	r3, #8
 800ba9a:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 800ba9c:	687a      	ldr	r2, [r7, #4]
 800ba9e:	69bb      	ldr	r3, [r7, #24]
 800baa0:	fbb2 f3f3 	udiv	r3, r2, r3
 800baa4:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	69ba      	ldr	r2, [r7, #24]
 800baaa:	fbb3 f2f2 	udiv	r2, r3, r2
 800baae:	69b9      	ldr	r1, [r7, #24]
 800bab0:	fb01 f202 	mul.w	r2, r1, r2
 800bab4:	1a9b      	subs	r3, r3, r2
 800bab6:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 800bab8:	697a      	ldr	r2, [r7, #20]
 800baba:	68bb      	ldr	r3, [r7, #8]
 800babc:	429a      	cmp	r2, r3
 800babe:	d302      	bcc.n	800bac6 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 800bac0:	23ce      	movs	r3, #206	; 0xce
 800bac2:	77fb      	strb	r3, [r7, #31]
 800bac4:	e010      	b.n	800bae8 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800bac6:	68fa      	ldr	r2, [r7, #12]
 800bac8:	697b      	ldr	r3, [r7, #20]
 800baca:	4413      	add	r3, r2
 800bacc:	781b      	ldrb	r3, [r3, #0]
 800bace:	b25a      	sxtb	r2, r3
 800bad0:	2101      	movs	r1, #1
 800bad2:	693b      	ldr	r3, [r7, #16]
 800bad4:	fa01 f303 	lsl.w	r3, r1, r3
 800bad8:	b25b      	sxtb	r3, r3
 800bada:	4313      	orrs	r3, r2
 800badc:	b259      	sxtb	r1, r3
 800bade:	68fa      	ldr	r2, [r7, #12]
 800bae0:	697b      	ldr	r3, [r7, #20]
 800bae2:	4413      	add	r3, r2
 800bae4:	b2ca      	uxtb	r2, r1
 800bae6:	701a      	strb	r2, [r3, #0]

	return status;
 800bae8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800baec:	4618      	mov	r0, r3
 800baee:	3724      	adds	r7, #36	; 0x24
 800baf0:	46bd      	mov	sp, r7
 800baf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf6:	4770      	bx	lr

0800baf8 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b084      	sub	sp, #16
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
 800bb00:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800bb02:	2306      	movs	r3, #6
 800bb04:	683a      	ldr	r2, [r7, #0]
 800bb06:	21b0      	movs	r1, #176	; 0xb0
 800bb08:	6878      	ldr	r0, [r7, #4]
 800bb0a:	f003 f8bb 	bl	800ec84 <VL53L0X_WriteMulti>
 800bb0e:	4603      	mov	r3, r0
 800bb10:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800bb12:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bb16:	4618      	mov	r0, r3
 800bb18:	3710      	adds	r7, #16
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	bd80      	pop	{r7, pc}

0800bb1e <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800bb1e:	b580      	push	{r7, lr}
 800bb20:	b084      	sub	sp, #16
 800bb22:	af00      	add	r7, sp, #0
 800bb24:	6078      	str	r0, [r7, #4]
 800bb26:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 800bb28:	2306      	movs	r3, #6
 800bb2a:	683a      	ldr	r2, [r7, #0]
 800bb2c:	21b0      	movs	r1, #176	; 0xb0
 800bb2e:	6878      	ldr	r0, [r7, #4]
 800bb30:	f003 f8d8 	bl	800ece4 <VL53L0X_ReadMulti>
 800bb34:	4603      	mov	r3, r0
 800bb36:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 800bb38:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	3710      	adds	r7, #16
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bd80      	pop	{r7, pc}

0800bb44 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b08c      	sub	sp, #48	; 0x30
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	60f8      	str	r0, [r7, #12]
 800bb4c:	607a      	str	r2, [r7, #4]
 800bb4e:	603b      	str	r3, [r7, #0]
 800bb50:	460b      	mov	r3, r1
 800bb52:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800bb54:	2300      	movs	r3, #0
 800bb56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 800bb5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb5c:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 800bb5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb60:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800bb62:	2300      	movs	r3, #0
 800bb64:	62bb      	str	r3, [r7, #40]	; 0x28
 800bb66:	e02b      	b.n	800bbc0 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 800bb68:	f107 031c 	add.w	r3, r7, #28
 800bb6c:	6a3a      	ldr	r2, [r7, #32]
 800bb6e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bb70:	6878      	ldr	r0, [r7, #4]
 800bb72:	f7ff ff11 	bl	800b998 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 800bb76:	69fb      	ldr	r3, [r7, #28]
 800bb78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb7c:	d103      	bne.n	800bb86 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800bb7e:	23ce      	movs	r3, #206	; 0xce
 800bb80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800bb84:	e020      	b.n	800bbc8 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800bb86:	69fb      	ldr	r3, [r7, #28]
 800bb88:	461a      	mov	r2, r3
 800bb8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb8c:	4413      	add	r3, r2
 800bb8e:	4618      	mov	r0, r3
 800bb90:	f7ff ff60 	bl	800ba54 <is_aperture>
 800bb94:	4603      	mov	r3, r0
 800bb96:	461a      	mov	r2, r3
 800bb98:	7afb      	ldrb	r3, [r7, #11]
 800bb9a:	4293      	cmp	r3, r2
 800bb9c:	d003      	beq.n	800bba6 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800bb9e:	23ce      	movs	r3, #206	; 0xce
 800bba0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800bba4:	e010      	b.n	800bbc8 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800bba6:	69fb      	ldr	r3, [r7, #28]
 800bba8:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 800bbaa:	6a3a      	ldr	r2, [r7, #32]
 800bbac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bbae:	6838      	ldr	r0, [r7, #0]
 800bbb0:	f7ff ff6a 	bl	800ba88 <enable_spad_bit>
		currentSpad++;
 800bbb4:	6a3b      	ldr	r3, [r7, #32]
 800bbb6:	3301      	adds	r3, #1
 800bbb8:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800bbba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbbc:	3301      	adds	r3, #1
 800bbbe:	62bb      	str	r3, [r7, #40]	; 0x28
 800bbc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bbc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bbc4:	429a      	cmp	r2, r3
 800bbc6:	d3cf      	bcc.n	800bb68 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 800bbc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bbca:	6a3a      	ldr	r2, [r7, #32]
 800bbcc:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800bbce:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d106      	bne.n	800bbe4 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800bbd6:	6839      	ldr	r1, [r7, #0]
 800bbd8:	68f8      	ldr	r0, [r7, #12]
 800bbda:	f7ff ff8d 	bl	800baf8 <set_ref_spad_map>
 800bbde:	4603      	mov	r3, r0
 800bbe0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 800bbe4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d121      	bne.n	800bc30 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 800bbec:	f107 0314 	add.w	r3, r7, #20
 800bbf0:	4619      	mov	r1, r3
 800bbf2:	68f8      	ldr	r0, [r7, #12]
 800bbf4:	f7ff ff93 	bl	800bb1e <get_ref_spad_map>
 800bbf8:	4603      	mov	r3, r0
 800bbfa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 800bbfe:	2300      	movs	r3, #0
 800bc00:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800bc02:	e011      	b.n	800bc28 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 800bc04:	683a      	ldr	r2, [r7, #0]
 800bc06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc08:	4413      	add	r3, r2
 800bc0a:	781a      	ldrb	r2, [r3, #0]
 800bc0c:	f107 0114 	add.w	r1, r7, #20
 800bc10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc12:	440b      	add	r3, r1
 800bc14:	781b      	ldrb	r3, [r3, #0]
 800bc16:	429a      	cmp	r2, r3
 800bc18:	d003      	beq.n	800bc22 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 800bc1a:	23ce      	movs	r3, #206	; 0xce
 800bc1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 800bc20:	e006      	b.n	800bc30 <enable_ref_spads+0xec>
			}
			i++;
 800bc22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc24:	3301      	adds	r3, #1
 800bc26:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 800bc28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc2c:	429a      	cmp	r2, r3
 800bc2e:	d3e9      	bcc.n	800bc04 <enable_ref_spads+0xc0>
		}
	}
	return status;
 800bc30:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800bc34:	4618      	mov	r0, r3
 800bc36:	3730      	adds	r7, #48	; 0x30
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}

0800bc3c <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b08a      	sub	sp, #40	; 0x28
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
 800bc44:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800bc46:	2300      	movs	r3, #0
 800bc48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800bc58:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 800bc5c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d107      	bne.n	800bc74 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 800bc64:	22c0      	movs	r2, #192	; 0xc0
 800bc66:	2101      	movs	r1, #1
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	f003 f867 	bl	800ed3c <VL53L0X_WrByte>
 800bc6e:	4603      	mov	r3, r0
 800bc70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 800bc74:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d108      	bne.n	800bc8e <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 800bc7c:	f107 0308 	add.w	r3, r7, #8
 800bc80:	4619      	mov	r1, r3
 800bc82:	6878      	ldr	r0, [r7, #4]
 800bc84:	f7ff fc18 	bl	800b4b8 <VL53L0X_PerformSingleRangingMeasurement>
 800bc88:	4603      	mov	r3, r0
 800bc8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800bc8e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d107      	bne.n	800bca6 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800bc96:	2201      	movs	r2, #1
 800bc98:	21ff      	movs	r1, #255	; 0xff
 800bc9a:	6878      	ldr	r0, [r7, #4]
 800bc9c:	f003 f84e 	bl	800ed3c <VL53L0X_WrByte>
 800bca0:	4603      	mov	r3, r0
 800bca2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 800bca6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d107      	bne.n	800bcbe <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 800bcae:	683a      	ldr	r2, [r7, #0]
 800bcb0:	21b6      	movs	r1, #182	; 0xb6
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	f003 f8ee 	bl	800ee94 <VL53L0X_RdWord>
 800bcb8:	4603      	mov	r3, r0
 800bcba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800bcbe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d107      	bne.n	800bcd6 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	21ff      	movs	r1, #255	; 0xff
 800bcca:	6878      	ldr	r0, [r7, #4]
 800bccc:	f003 f836 	bl	800ed3c <VL53L0X_WrByte>
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800bcd6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d112      	bne.n	800bd04 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800bcde:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bce2:	461a      	mov	r2, r3
 800bce4:	2101      	movs	r1, #1
 800bce6:	6878      	ldr	r0, [r7, #4]
 800bce8:	f003 f828 	bl	800ed3c <VL53L0X_WrByte>
 800bcec:	4603      	mov	r3, r0
 800bcee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800bcf2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d104      	bne.n	800bd04 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800bd00:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 800bd04:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800bd08:	4618      	mov	r0, r3
 800bd0a:	3728      	adds	r7, #40	; 0x28
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bd80      	pop	{r7, pc}

0800bd10 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 800bd10:	b590      	push	{r4, r7, lr}
 800bd12:	b09d      	sub	sp, #116	; 0x74
 800bd14:	af06      	add	r7, sp, #24
 800bd16:	60f8      	str	r0, [r7, #12]
 800bd18:	60b9      	str	r1, [r7, #8]
 800bd1a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 800bd22:	23b4      	movs	r3, #180	; 0xb4
 800bd24:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 800bd28:	2303      	movs	r3, #3
 800bd2a:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 800bd2c:	232c      	movs	r3, #44	; 0x2c
 800bd2e:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 800bd30:	2300      	movs	r3, #0
 800bd32:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 800bd34:	2300      	movs	r3, #0
 800bd36:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 800bd38:	2300      	movs	r3, #0
 800bd3a:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 800bd3c:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800bd40:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 800bd42:	2300      	movs	r3, #0
 800bd44:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 800bd46:	2300      	movs	r3, #0
 800bd48:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 800bd4a:	2306      	movs	r3, #6
 800bd4c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 800bd4e:	2300      	movs	r3, #0
 800bd50:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 800bd52:	2300      	movs	r3, #0
 800bd54:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 800bd56:	2300      	movs	r3, #0
 800bd58:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 800bd60:	2300      	movs	r3, #0
 800bd62:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 800bd64:	2300      	movs	r3, #0
 800bd66:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 800bd68:	2300      	movs	r3, #0
 800bd6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 800bd74:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 800bd76:	2300      	movs	r3, #0
 800bd78:	64bb      	str	r3, [r7, #72]	; 0x48
 800bd7a:	e009      	b.n	800bd90 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800bd7c:	68fa      	ldr	r2, [r7, #12]
 800bd7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd80:	4413      	add	r3, r2
 800bd82:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800bd86:	2200      	movs	r2, #0
 800bd88:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800bd8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd8c:	3301      	adds	r3, #1
 800bd8e:	64bb      	str	r3, [r7, #72]	; 0x48
 800bd90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bd92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd94:	429a      	cmp	r2, r3
 800bd96:	d3f1      	bcc.n	800bd7c <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800bd98:	2201      	movs	r2, #1
 800bd9a:	21ff      	movs	r1, #255	; 0xff
 800bd9c:	68f8      	ldr	r0, [r7, #12]
 800bd9e:	f002 ffcd 	bl	800ed3c <VL53L0X_WrByte>
 800bda2:	4603      	mov	r3, r0
 800bda4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800bda8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d107      	bne.n	800bdc0 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	214f      	movs	r1, #79	; 0x4f
 800bdb4:	68f8      	ldr	r0, [r7, #12]
 800bdb6:	f002 ffc1 	bl	800ed3c <VL53L0X_WrByte>
 800bdba:	4603      	mov	r3, r0
 800bdbc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800bdc0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d107      	bne.n	800bdd8 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 800bdc8:	222c      	movs	r2, #44	; 0x2c
 800bdca:	214e      	movs	r1, #78	; 0x4e
 800bdcc:	68f8      	ldr	r0, [r7, #12]
 800bdce:	f002 ffb5 	bl	800ed3c <VL53L0X_WrByte>
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800bdd8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d107      	bne.n	800bdf0 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800bde0:	2200      	movs	r2, #0
 800bde2:	21ff      	movs	r1, #255	; 0xff
 800bde4:	68f8      	ldr	r0, [r7, #12]
 800bde6:	f002 ffa9 	bl	800ed3c <VL53L0X_WrByte>
 800bdea:	4603      	mov	r3, r0
 800bdec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800bdf0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d109      	bne.n	800be0c <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 800bdf8:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800bdfc:	461a      	mov	r2, r3
 800bdfe:	21b6      	movs	r1, #182	; 0xb6
 800be00:	68f8      	ldr	r0, [r7, #12]
 800be02:	f002 ff9b 	bl	800ed3c <VL53L0X_WrByte>
 800be06:	4603      	mov	r3, r0
 800be08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 800be0c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800be10:	2b00      	cmp	r3, #0
 800be12:	d107      	bne.n	800be24 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 800be14:	2200      	movs	r2, #0
 800be16:	2180      	movs	r1, #128	; 0x80
 800be18:	68f8      	ldr	r0, [r7, #12]
 800be1a:	f002 ff8f 	bl	800ed3c <VL53L0X_WrByte>
 800be1e:	4603      	mov	r3, r0
 800be20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 800be24:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d10a      	bne.n	800be42 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 800be2c:	f107 0210 	add.w	r2, r7, #16
 800be30:	f107 0111 	add.w	r1, r7, #17
 800be34:	2300      	movs	r3, #0
 800be36:	68f8      	ldr	r0, [r7, #12]
 800be38:	f000 fbbb 	bl	800c5b2 <VL53L0X_perform_ref_calibration>
 800be3c:	4603      	mov	r3, r0
 800be3e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 800be42:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800be46:	2b00      	cmp	r3, #0
 800be48:	d121      	bne.n	800be8e <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 800be4a:	2300      	movs	r3, #0
 800be4c:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 800be4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be50:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 800be52:	2300      	movs	r3, #0
 800be54:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 800be56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be58:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 800be66:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800be6a:	f107 0218 	add.w	r2, r7, #24
 800be6e:	9204      	str	r2, [sp, #16]
 800be70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800be72:	9203      	str	r2, [sp, #12]
 800be74:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800be76:	9202      	str	r2, [sp, #8]
 800be78:	9301      	str	r3, [sp, #4]
 800be7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be7c:	9300      	str	r3, [sp, #0]
 800be7e:	4623      	mov	r3, r4
 800be80:	4602      	mov	r2, r0
 800be82:	68f8      	ldr	r0, [r7, #12]
 800be84:	f7ff fe5e 	bl	800bb44 <enable_ref_spads>
 800be88:	4603      	mov	r3, r0
 800be8a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800be8e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800be92:	2b00      	cmp	r3, #0
 800be94:	d174      	bne.n	800bf80 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 800be96:	69bb      	ldr	r3, [r7, #24]
 800be98:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 800be9a:	f107 0312 	add.w	r3, r7, #18
 800be9e:	4619      	mov	r1, r3
 800bea0:	68f8      	ldr	r0, [r7, #12]
 800bea2:	f7ff fecb 	bl	800bc3c <perform_ref_signal_measurement>
 800bea6:	4603      	mov	r3, r0
 800bea8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 800beac:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d161      	bne.n	800bf78 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 800beb4:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 800beb6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800beb8:	429a      	cmp	r2, r3
 800beba:	d25d      	bcs.n	800bf78 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 800bebc:	2300      	movs	r3, #0
 800bebe:	64bb      	str	r3, [r7, #72]	; 0x48
 800bec0:	e009      	b.n	800bed6 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800bec2:	68fa      	ldr	r2, [r7, #12]
 800bec4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bec6:	4413      	add	r3, r2
 800bec8:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800becc:	2200      	movs	r2, #0
 800bece:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 800bed0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bed2:	3301      	adds	r3, #1
 800bed4:	64bb      	str	r3, [r7, #72]	; 0x48
 800bed6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beda:	429a      	cmp	r2, r3
 800bedc:	d3f1      	bcc.n	800bec2 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 800bede:	e002      	b.n	800bee6 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 800bee0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bee2:	3301      	adds	r3, #1
 800bee4:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 800bee6:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800beea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800beec:	4413      	add	r3, r2
 800beee:	4618      	mov	r0, r3
 800bef0:	f7ff fdb0 	bl	800ba54 <is_aperture>
 800bef4:	4603      	mov	r3, r0
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d103      	bne.n	800bf02 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 800befa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800befc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800befe:	429a      	cmp	r2, r3
 800bf00:	d3ee      	bcc.n	800bee0 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 800bf02:	2301      	movs	r3, #1
 800bf04:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 800bf06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf08:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 800bf16:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800bf1a:	f107 0218 	add.w	r2, r7, #24
 800bf1e:	9204      	str	r2, [sp, #16]
 800bf20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bf22:	9203      	str	r2, [sp, #12]
 800bf24:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bf26:	9202      	str	r2, [sp, #8]
 800bf28:	9301      	str	r3, [sp, #4]
 800bf2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf2c:	9300      	str	r3, [sp, #0]
 800bf2e:	4623      	mov	r3, r4
 800bf30:	4602      	mov	r2, r0
 800bf32:	68f8      	ldr	r0, [r7, #12]
 800bf34:	f7ff fe06 	bl	800bb44 <enable_ref_spads>
 800bf38:	4603      	mov	r3, r0
 800bf3a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800bf3e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d11b      	bne.n	800bf7e <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 800bf46:	69bb      	ldr	r3, [r7, #24]
 800bf48:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 800bf4a:	f107 0312 	add.w	r3, r7, #18
 800bf4e:	4619      	mov	r1, r3
 800bf50:	68f8      	ldr	r0, [r7, #12]
 800bf52:	f7ff fe73 	bl	800bc3c <perform_ref_signal_measurement>
 800bf56:	4603      	mov	r3, r0
 800bf58:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 800bf5c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d10c      	bne.n	800bf7e <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 800bf64:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800bf66:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bf68:	429a      	cmp	r2, r3
 800bf6a:	d208      	bcs.n	800bf7e <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 800bf6c:	2301      	movs	r3, #1
 800bf6e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 800bf72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf74:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 800bf76:	e002      	b.n	800bf7e <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 800bf78:	2300      	movs	r3, #0
 800bf7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bf7c:	e000      	b.n	800bf80 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 800bf7e:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800bf80:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	f040 80af 	bne.w	800c0e8 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 800bf8a:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 800bf8c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bf8e:	429a      	cmp	r2, r3
 800bf90:	f240 80aa 	bls.w	800c0e8 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 800bf94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf96:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 800bf9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf9c:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	f503 7192 	add.w	r1, r3, #292	; 0x124
 800bfa4:	f107 031c 	add.w	r3, r7, #28
 800bfa8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bfaa:	4618      	mov	r0, r3
 800bfac:	f003 f820 	bl	800eff0 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 800bfb0:	8a7b      	ldrh	r3, [r7, #18]
 800bfb2:	461a      	mov	r2, r3
 800bfb4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bfb6:	1ad3      	subs	r3, r2, r3
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	bfb8      	it	lt
 800bfbc:	425b      	neglt	r3, r3
 800bfbe:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 800bfc6:	e086      	b.n	800c0d6 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 800bfce:	f107 0314 	add.w	r3, r7, #20
 800bfd2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bfd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bfd6:	f7ff fcdf 	bl	800b998 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 800bfda:	697b      	ldr	r3, [r7, #20]
 800bfdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfe0:	d103      	bne.n	800bfea <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800bfe2:	23ce      	movs	r3, #206	; 0xce
 800bfe4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 800bfe8:	e07e      	b.n	800c0e8 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 800bfea:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800bfee:	697a      	ldr	r2, [r7, #20]
 800bff0:	4413      	add	r3, r2
 800bff2:	4618      	mov	r0, r3
 800bff4:	f7ff fd2e 	bl	800ba54 <is_aperture>
 800bff8:	4603      	mov	r3, r0
 800bffa:	461a      	mov	r2, r3
 800bffc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bffe:	4293      	cmp	r3, r2
 800c000:	d003      	beq.n	800c00a <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 800c002:	2301      	movs	r3, #1
 800c004:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 800c008:	e06e      	b.n	800c0e8 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 800c00a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c00c:	3301      	adds	r3, #1
 800c00e:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 800c010:	697b      	ldr	r3, [r7, #20]
 800c012:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 800c01a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c01c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c01e:	4618      	mov	r0, r3
 800c020:	f7ff fd32 	bl	800ba88 <enable_spad_bit>
 800c024:	4603      	mov	r3, r0
 800c026:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800c02a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d10c      	bne.n	800c04c <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 800c032:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c034:	3301      	adds	r3, #1
 800c036:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 800c03e:	4619      	mov	r1, r3
 800c040:	68f8      	ldr	r0, [r7, #12]
 800c042:	f7ff fd59 	bl	800baf8 <set_ref_spad_map>
 800c046:	4603      	mov	r3, r0
 800c048:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 800c04c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800c050:	2b00      	cmp	r3, #0
 800c052:	d146      	bne.n	800c0e2 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 800c054:	f107 0312 	add.w	r3, r7, #18
 800c058:	4619      	mov	r1, r3
 800c05a:	68f8      	ldr	r0, [r7, #12]
 800c05c:	f7ff fdee 	bl	800bc3c <perform_ref_signal_measurement>
 800c060:	4603      	mov	r3, r0
 800c062:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 800c066:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d13b      	bne.n	800c0e6 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800c06e:	8a7b      	ldrh	r3, [r7, #18]
 800c070:	461a      	mov	r2, r3
 800c072:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c074:	1ad3      	subs	r3, r2, r3
 800c076:	2b00      	cmp	r3, #0
 800c078:	bfb8      	it	lt
 800c07a:	425b      	neglt	r3, r3
 800c07c:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 800c07e:	8a7b      	ldrh	r3, [r7, #18]
 800c080:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c082:	429a      	cmp	r2, r3
 800c084:	d21c      	bcs.n	800c0c0 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 800c086:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c088:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c08a:	429a      	cmp	r2, r3
 800c08c:	d914      	bls.n	800c0b8 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 800c08e:	f107 031c 	add.w	r3, r7, #28
 800c092:	4619      	mov	r1, r3
 800c094:	68f8      	ldr	r0, [r7, #12]
 800c096:	f7ff fd2f 	bl	800baf8 <set_ref_spad_map>
 800c09a:	4603      	mov	r3, r0
 800c09c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 800c0a6:	f107 011c 	add.w	r1, r7, #28
 800c0aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	f002 ff9f 	bl	800eff0 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 800c0b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0b4:	3b01      	subs	r3, #1
 800c0b6:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 800c0b8:	2301      	movs	r3, #1
 800c0ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0be:	e00a      	b.n	800c0d6 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 800c0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0c2:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 800c0ca:	f107 031c 	add.w	r3, r7, #28
 800c0ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	f002 ff8d 	bl	800eff0 <memcpy>
		while (!complete) {
 800c0d6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	f43f af74 	beq.w	800bfc8 <VL53L0X_perform_ref_spad_management+0x2b8>
 800c0e0:	e002      	b.n	800c0e8 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800c0e2:	bf00      	nop
 800c0e4:	e000      	b.n	800c0e8 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800c0e6:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800c0e8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d115      	bne.n	800c11c <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 800c0f0:	68bb      	ldr	r3, [r7, #8]
 800c0f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c0f4:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800c0fc:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	2201      	movs	r2, #1
 800c102:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c106:	68bb      	ldr	r3, [r7, #8]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	b2da      	uxtb	r2, r3
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	781a      	ldrb	r2, [r3, #0]
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 800c11c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800c120:	4618      	mov	r0, r3
 800c122:	375c      	adds	r7, #92	; 0x5c
 800c124:	46bd      	mov	sp, r7
 800c126:	bd90      	pop	{r4, r7, pc}

0800c128 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 800c128:	b590      	push	{r4, r7, lr}
 800c12a:	b093      	sub	sp, #76	; 0x4c
 800c12c:	af06      	add	r7, sp, #24
 800c12e:	60f8      	str	r0, [r7, #12]
 800c130:	60b9      	str	r1, [r7, #8]
 800c132:	4613      	mov	r3, r2
 800c134:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c136:	2300      	movs	r3, #0
 800c138:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 800c13c:	2300      	movs	r3, #0
 800c13e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 800c140:	23b4      	movs	r3, #180	; 0xb4
 800c142:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 800c146:	2306      	movs	r3, #6
 800c148:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800c14a:	232c      	movs	r3, #44	; 0x2c
 800c14c:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c14e:	2201      	movs	r2, #1
 800c150:	21ff      	movs	r1, #255	; 0xff
 800c152:	68f8      	ldr	r0, [r7, #12]
 800c154:	f002 fdf2 	bl	800ed3c <VL53L0X_WrByte>
 800c158:	4603      	mov	r3, r0
 800c15a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800c15e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c162:	2b00      	cmp	r3, #0
 800c164:	d107      	bne.n	800c176 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 800c166:	2200      	movs	r2, #0
 800c168:	214f      	movs	r1, #79	; 0x4f
 800c16a:	68f8      	ldr	r0, [r7, #12]
 800c16c:	f002 fde6 	bl	800ed3c <VL53L0X_WrByte>
 800c170:	4603      	mov	r3, r0
 800c172:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800c176:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d107      	bne.n	800c18e <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 800c17e:	222c      	movs	r2, #44	; 0x2c
 800c180:	214e      	movs	r1, #78	; 0x4e
 800c182:	68f8      	ldr	r0, [r7, #12]
 800c184:	f002 fdda 	bl	800ed3c <VL53L0X_WrByte>
 800c188:	4603      	mov	r3, r0
 800c18a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800c18e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c192:	2b00      	cmp	r3, #0
 800c194:	d107      	bne.n	800c1a6 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c196:	2200      	movs	r2, #0
 800c198:	21ff      	movs	r1, #255	; 0xff
 800c19a:	68f8      	ldr	r0, [r7, #12]
 800c19c:	f002 fdce 	bl	800ed3c <VL53L0X_WrByte>
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800c1a6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d109      	bne.n	800c1c2 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 800c1ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c1b2:	461a      	mov	r2, r3
 800c1b4:	21b6      	movs	r1, #182	; 0xb6
 800c1b6:	68f8      	ldr	r0, [r7, #12]
 800c1b8:	f002 fdc0 	bl	800ed3c <VL53L0X_WrByte>
 800c1bc:	4603      	mov	r3, r0
 800c1be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	627b      	str	r3, [r7, #36]	; 0x24
 800c1c6:	e009      	b.n	800c1dc <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800c1c8:	68fa      	ldr	r2, [r7, #12]
 800c1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1cc:	4413      	add	r3, r2
 800c1ce:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800c1d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1d8:	3301      	adds	r3, #1
 800c1da:	627b      	str	r3, [r7, #36]	; 0x24
 800c1dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1de:	69fb      	ldr	r3, [r7, #28]
 800c1e0:	429a      	cmp	r2, r3
 800c1e2:	d3f1      	bcc.n	800c1c8 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 800c1e4:	79fb      	ldrb	r3, [r7, #7]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d011      	beq.n	800c20e <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800c1ea:	e002      	b.n	800c1f2 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 800c1ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1ee:	3301      	adds	r3, #1
 800c1f0:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800c1f2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800c1f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1f8:	4413      	add	r3, r2
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	f7ff fc2a 	bl	800ba54 <is_aperture>
 800c200:	4603      	mov	r3, r0
 800c202:	2b00      	cmp	r3, #0
 800c204:	d103      	bne.n	800c20e <VL53L0X_set_reference_spads+0xe6>
 800c206:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c208:	69bb      	ldr	r3, [r7, #24]
 800c20a:	429a      	cmp	r2, r3
 800c20c:	d3ee      	bcc.n	800c1ec <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 800c21a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c21e:	79f9      	ldrb	r1, [r7, #7]
 800c220:	f107 0214 	add.w	r2, r7, #20
 800c224:	9204      	str	r2, [sp, #16]
 800c226:	68ba      	ldr	r2, [r7, #8]
 800c228:	9203      	str	r2, [sp, #12]
 800c22a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c22c:	9202      	str	r2, [sp, #8]
 800c22e:	9301      	str	r3, [sp, #4]
 800c230:	69fb      	ldr	r3, [r7, #28]
 800c232:	9300      	str	r3, [sp, #0]
 800c234:	4623      	mov	r3, r4
 800c236:	4602      	mov	r2, r0
 800c238:	68f8      	ldr	r0, [r7, #12]
 800c23a:	f7ff fc83 	bl	800bb44 <enable_ref_spads>
 800c23e:	4603      	mov	r3, r0
 800c240:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 800c244:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d10c      	bne.n	800c266 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	2201      	movs	r2, #1
 800c250:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c254:	68bb      	ldr	r3, [r7, #8]
 800c256:	b2da      	uxtb	r2, r3
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	79fa      	ldrb	r2, [r7, #7]
 800c262:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800c266:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800c26a:	4618      	mov	r0, r3
 800c26c:	3734      	adds	r7, #52	; 0x34
 800c26e:	46bd      	mov	sp, r7
 800c270:	bd90      	pop	{r4, r7, pc}

0800c272 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 800c272:	b580      	push	{r7, lr}
 800c274:	b084      	sub	sp, #16
 800c276:	af00      	add	r7, sp, #0
 800c278:	6078      	str	r0, [r7, #4]
 800c27a:	460b      	mov	r3, r1
 800c27c:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c27e:	2300      	movs	r3, #0
 800c280:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800c282:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d10a      	bne.n	800c2a0 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800c28a:	78fb      	ldrb	r3, [r7, #3]
 800c28c:	f043 0301 	orr.w	r3, r3, #1
 800c290:	b2db      	uxtb	r3, r3
 800c292:	461a      	mov	r2, r3
 800c294:	2100      	movs	r1, #0
 800c296:	6878      	ldr	r0, [r7, #4]
 800c298:	f002 fd50 	bl	800ed3c <VL53L0X_WrByte>
 800c29c:	4603      	mov	r3, r0
 800c29e:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 800c2a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d104      	bne.n	800c2b2 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800c2a8:	6878      	ldr	r0, [r7, #4]
 800c2aa:	f000 f9bf 	bl	800c62c <VL53L0X_measurement_poll_for_completion>
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800c2b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d105      	bne.n	800c2c6 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800c2ba:	2100      	movs	r1, #0
 800c2bc:	6878      	ldr	r0, [r7, #4]
 800c2be:	f7ff fa85 	bl	800b7cc <VL53L0X_ClearInterruptMask>
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800c2c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d106      	bne.n	800c2dc <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	2100      	movs	r1, #0
 800c2d2:	6878      	ldr	r0, [r7, #4]
 800c2d4:	f002 fd32 	bl	800ed3c <VL53L0X_WrByte>
 800c2d8:	4603      	mov	r3, r0
 800c2da:	73fb      	strb	r3, [r7, #15]

	return Status;
 800c2dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	3710      	adds	r7, #16
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	bd80      	pop	{r7, pc}

0800c2e8 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b084      	sub	sp, #16
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
 800c2f0:	4608      	mov	r0, r1
 800c2f2:	4611      	mov	r1, r2
 800c2f4:	461a      	mov	r2, r3
 800c2f6:	4603      	mov	r3, r0
 800c2f8:	70fb      	strb	r3, [r7, #3]
 800c2fa:	460b      	mov	r3, r1
 800c2fc:	70bb      	strb	r3, [r7, #2]
 800c2fe:	4613      	mov	r3, r2
 800c300:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c302:	2300      	movs	r3, #0
 800c304:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 800c306:	2300      	movs	r3, #0
 800c308:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c30a:	2201      	movs	r2, #1
 800c30c:	21ff      	movs	r1, #255	; 0xff
 800c30e:	6878      	ldr	r0, [r7, #4]
 800c310:	f002 fd14 	bl	800ed3c <VL53L0X_WrByte>
 800c314:	4603      	mov	r3, r0
 800c316:	461a      	mov	r2, r3
 800c318:	7bfb      	ldrb	r3, [r7, #15]
 800c31a:	4313      	orrs	r3, r2
 800c31c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800c31e:	2200      	movs	r2, #0
 800c320:	2100      	movs	r1, #0
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f002 fd0a 	bl	800ed3c <VL53L0X_WrByte>
 800c328:	4603      	mov	r3, r0
 800c32a:	461a      	mov	r2, r3
 800c32c:	7bfb      	ldrb	r3, [r7, #15]
 800c32e:	4313      	orrs	r3, r2
 800c330:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c332:	2200      	movs	r2, #0
 800c334:	21ff      	movs	r1, #255	; 0xff
 800c336:	6878      	ldr	r0, [r7, #4]
 800c338:	f002 fd00 	bl	800ed3c <VL53L0X_WrByte>
 800c33c:	4603      	mov	r3, r0
 800c33e:	461a      	mov	r2, r3
 800c340:	7bfb      	ldrb	r3, [r7, #15]
 800c342:	4313      	orrs	r3, r2
 800c344:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 800c346:	78fb      	ldrb	r3, [r7, #3]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d01e      	beq.n	800c38a <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 800c34c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d009      	beq.n	800c368 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 800c354:	69ba      	ldr	r2, [r7, #24]
 800c356:	21cb      	movs	r1, #203	; 0xcb
 800c358:	6878      	ldr	r0, [r7, #4]
 800c35a:	f002 fd71 	bl	800ee40 <VL53L0X_RdByte>
 800c35e:	4603      	mov	r3, r0
 800c360:	461a      	mov	r2, r3
 800c362:	7bfb      	ldrb	r3, [r7, #15]
 800c364:	4313      	orrs	r3, r2
 800c366:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800c368:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d02a      	beq.n	800c3c6 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800c370:	f107 030e 	add.w	r3, r7, #14
 800c374:	461a      	mov	r2, r3
 800c376:	21ee      	movs	r1, #238	; 0xee
 800c378:	6878      	ldr	r0, [r7, #4]
 800c37a:	f002 fd61 	bl	800ee40 <VL53L0X_RdByte>
 800c37e:	4603      	mov	r3, r0
 800c380:	461a      	mov	r2, r3
 800c382:	7bfb      	ldrb	r3, [r7, #15]
 800c384:	4313      	orrs	r3, r2
 800c386:	73fb      	strb	r3, [r7, #15]
 800c388:	e01d      	b.n	800c3c6 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800c38a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d00a      	beq.n	800c3a8 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800c392:	78bb      	ldrb	r3, [r7, #2]
 800c394:	461a      	mov	r2, r3
 800c396:	21cb      	movs	r1, #203	; 0xcb
 800c398:	6878      	ldr	r0, [r7, #4]
 800c39a:	f002 fccf 	bl	800ed3c <VL53L0X_WrByte>
 800c39e:	4603      	mov	r3, r0
 800c3a0:	461a      	mov	r2, r3
 800c3a2:	7bfb      	ldrb	r3, [r7, #15]
 800c3a4:	4313      	orrs	r3, r2
 800c3a6:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800c3a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d00a      	beq.n	800c3c6 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800c3b0:	787b      	ldrb	r3, [r7, #1]
 800c3b2:	2280      	movs	r2, #128	; 0x80
 800c3b4:	21ee      	movs	r1, #238	; 0xee
 800c3b6:	6878      	ldr	r0, [r7, #4]
 800c3b8:	f002 fd0e 	bl	800edd8 <VL53L0X_UpdateByte>
 800c3bc:	4603      	mov	r3, r0
 800c3be:	461a      	mov	r2, r3
 800c3c0:	7bfb      	ldrb	r3, [r7, #15]
 800c3c2:	4313      	orrs	r3, r2
 800c3c4:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c3c6:	2201      	movs	r2, #1
 800c3c8:	21ff      	movs	r1, #255	; 0xff
 800c3ca:	6878      	ldr	r0, [r7, #4]
 800c3cc:	f002 fcb6 	bl	800ed3c <VL53L0X_WrByte>
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	461a      	mov	r2, r3
 800c3d4:	7bfb      	ldrb	r3, [r7, #15]
 800c3d6:	4313      	orrs	r3, r2
 800c3d8:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800c3da:	2201      	movs	r2, #1
 800c3dc:	2100      	movs	r1, #0
 800c3de:	6878      	ldr	r0, [r7, #4]
 800c3e0:	f002 fcac 	bl	800ed3c <VL53L0X_WrByte>
 800c3e4:	4603      	mov	r3, r0
 800c3e6:	461a      	mov	r2, r3
 800c3e8:	7bfb      	ldrb	r3, [r7, #15]
 800c3ea:	4313      	orrs	r3, r2
 800c3ec:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	21ff      	movs	r1, #255	; 0xff
 800c3f2:	6878      	ldr	r0, [r7, #4]
 800c3f4:	f002 fca2 	bl	800ed3c <VL53L0X_WrByte>
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	461a      	mov	r2, r3
 800c3fc:	7bfb      	ldrb	r3, [r7, #15]
 800c3fe:	4313      	orrs	r3, r2
 800c400:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800c402:	7bbb      	ldrb	r3, [r7, #14]
 800c404:	f023 0310 	bic.w	r3, r3, #16
 800c408:	b2da      	uxtb	r2, r3
 800c40a:	69fb      	ldr	r3, [r7, #28]
 800c40c:	701a      	strb	r2, [r3, #0]

	return Status;
 800c40e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c412:	4618      	mov	r0, r3
 800c414:	3710      	adds	r7, #16
 800c416:	46bd      	mov	sp, r7
 800c418:	bd80      	pop	{r7, pc}

0800c41a <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800c41a:	b580      	push	{r7, lr}
 800c41c:	b08a      	sub	sp, #40	; 0x28
 800c41e:	af04      	add	r7, sp, #16
 800c420:	60f8      	str	r0, [r7, #12]
 800c422:	60b9      	str	r1, [r7, #8]
 800c424:	4611      	mov	r1, r2
 800c426:	461a      	mov	r2, r3
 800c428:	460b      	mov	r3, r1
 800c42a:	71fb      	strb	r3, [r7, #7]
 800c42c:	4613      	mov	r3, r2
 800c42e:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c430:	2300      	movs	r3, #0
 800c432:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800c434:	2300      	movs	r3, #0
 800c436:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800c438:	2300      	movs	r3, #0
 800c43a:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800c43c:	2300      	movs	r3, #0
 800c43e:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 800c440:	2300      	movs	r3, #0
 800c442:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800c444:	79bb      	ldrb	r3, [r7, #6]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d003      	beq.n	800c452 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800c450:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800c452:	2201      	movs	r2, #1
 800c454:	2101      	movs	r1, #1
 800c456:	68f8      	ldr	r0, [r7, #12]
 800c458:	f002 fc70 	bl	800ed3c <VL53L0X_WrByte>
 800c45c:	4603      	mov	r3, r0
 800c45e:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800c460:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d105      	bne.n	800c474 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 800c468:	2140      	movs	r1, #64	; 0x40
 800c46a:	68f8      	ldr	r0, [r7, #12]
 800c46c:	f7ff ff01 	bl	800c272 <VL53L0X_perform_single_ref_calibration>
 800c470:	4603      	mov	r3, r0
 800c472:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800c474:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d115      	bne.n	800c4a8 <VL53L0X_perform_vhv_calibration+0x8e>
 800c47c:	79fb      	ldrb	r3, [r7, #7]
 800c47e:	2b01      	cmp	r3, #1
 800c480:	d112      	bne.n	800c4a8 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800c482:	7d39      	ldrb	r1, [r7, #20]
 800c484:	7d7a      	ldrb	r2, [r7, #21]
 800c486:	2300      	movs	r3, #0
 800c488:	9303      	str	r3, [sp, #12]
 800c48a:	2301      	movs	r3, #1
 800c48c:	9302      	str	r3, [sp, #8]
 800c48e:	f107 0313 	add.w	r3, r7, #19
 800c492:	9301      	str	r3, [sp, #4]
 800c494:	68bb      	ldr	r3, [r7, #8]
 800c496:	9300      	str	r3, [sp, #0]
 800c498:	460b      	mov	r3, r1
 800c49a:	2101      	movs	r1, #1
 800c49c:	68f8      	ldr	r0, [r7, #12]
 800c49e:	f7ff ff23 	bl	800c2e8 <VL53L0X_ref_calibration_io>
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	75fb      	strb	r3, [r7, #23]
 800c4a6:	e002      	b.n	800c4ae <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 800c4a8:	68bb      	ldr	r3, [r7, #8]
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800c4ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d112      	bne.n	800c4dc <VL53L0X_perform_vhv_calibration+0xc2>
 800c4b6:	79bb      	ldrb	r3, [r7, #6]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d00f      	beq.n	800c4dc <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800c4bc:	7dbb      	ldrb	r3, [r7, #22]
 800c4be:	461a      	mov	r2, r3
 800c4c0:	2101      	movs	r1, #1
 800c4c2:	68f8      	ldr	r0, [r7, #12]
 800c4c4:	f002 fc3a 	bl	800ed3c <VL53L0X_WrByte>
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800c4cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d103      	bne.n	800c4dc <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	7dba      	ldrb	r2, [r7, #22]
 800c4d8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800c4dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	3718      	adds	r7, #24
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	bd80      	pop	{r7, pc}

0800c4e8 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b08a      	sub	sp, #40	; 0x28
 800c4ec:	af04      	add	r7, sp, #16
 800c4ee:	60f8      	str	r0, [r7, #12]
 800c4f0:	60b9      	str	r1, [r7, #8]
 800c4f2:	4611      	mov	r1, r2
 800c4f4:	461a      	mov	r2, r3
 800c4f6:	460b      	mov	r3, r1
 800c4f8:	71fb      	strb	r3, [r7, #7]
 800c4fa:	4613      	mov	r3, r2
 800c4fc:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c4fe:	2300      	movs	r3, #0
 800c500:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800c502:	2300      	movs	r3, #0
 800c504:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800c506:	2300      	movs	r3, #0
 800c508:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800c50a:	2300      	movs	r3, #0
 800c50c:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800c50e:	79bb      	ldrb	r3, [r7, #6]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d003      	beq.n	800c51c <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800c51a:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800c51c:	2202      	movs	r2, #2
 800c51e:	2101      	movs	r1, #1
 800c520:	68f8      	ldr	r0, [r7, #12]
 800c522:	f002 fc0b 	bl	800ed3c <VL53L0X_WrByte>
 800c526:	4603      	mov	r3, r0
 800c528:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800c52a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d105      	bne.n	800c53e <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800c532:	2100      	movs	r1, #0
 800c534:	68f8      	ldr	r0, [r7, #12]
 800c536:	f7ff fe9c 	bl	800c272 <VL53L0X_perform_single_ref_calibration>
 800c53a:	4603      	mov	r3, r0
 800c53c:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800c53e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d115      	bne.n	800c572 <VL53L0X_perform_phase_calibration+0x8a>
 800c546:	79fb      	ldrb	r3, [r7, #7]
 800c548:	2b01      	cmp	r3, #1
 800c54a:	d112      	bne.n	800c572 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800c54c:	7d39      	ldrb	r1, [r7, #20]
 800c54e:	7d7a      	ldrb	r2, [r7, #21]
 800c550:	2301      	movs	r3, #1
 800c552:	9303      	str	r3, [sp, #12]
 800c554:	2300      	movs	r3, #0
 800c556:	9302      	str	r3, [sp, #8]
 800c558:	68bb      	ldr	r3, [r7, #8]
 800c55a:	9301      	str	r3, [sp, #4]
 800c55c:	f107 0313 	add.w	r3, r7, #19
 800c560:	9300      	str	r3, [sp, #0]
 800c562:	460b      	mov	r3, r1
 800c564:	2101      	movs	r1, #1
 800c566:	68f8      	ldr	r0, [r7, #12]
 800c568:	f7ff febe 	bl	800c2e8 <VL53L0X_ref_calibration_io>
 800c56c:	4603      	mov	r3, r0
 800c56e:	75fb      	strb	r3, [r7, #23]
 800c570:	e002      	b.n	800c578 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800c572:	68bb      	ldr	r3, [r7, #8]
 800c574:	2200      	movs	r2, #0
 800c576:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800c578:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d112      	bne.n	800c5a6 <VL53L0X_perform_phase_calibration+0xbe>
 800c580:	79bb      	ldrb	r3, [r7, #6]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d00f      	beq.n	800c5a6 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800c586:	7dbb      	ldrb	r3, [r7, #22]
 800c588:	461a      	mov	r2, r3
 800c58a:	2101      	movs	r1, #1
 800c58c:	68f8      	ldr	r0, [r7, #12]
 800c58e:	f002 fbd5 	bl	800ed3c <VL53L0X_WrByte>
 800c592:	4603      	mov	r3, r0
 800c594:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800c596:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d103      	bne.n	800c5a6 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	7dba      	ldrb	r2, [r7, #22]
 800c5a2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800c5a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	3718      	adds	r7, #24
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	bd80      	pop	{r7, pc}

0800c5b2 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800c5b2:	b580      	push	{r7, lr}
 800c5b4:	b086      	sub	sp, #24
 800c5b6:	af00      	add	r7, sp, #0
 800c5b8:	60f8      	str	r0, [r7, #12]
 800c5ba:	60b9      	str	r1, [r7, #8]
 800c5bc:	607a      	str	r2, [r7, #4]
 800c5be:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800c5ce:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 800c5d0:	78fa      	ldrb	r2, [r7, #3]
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	68b9      	ldr	r1, [r7, #8]
 800c5d6:	68f8      	ldr	r0, [r7, #12]
 800c5d8:	f7ff ff1f 	bl	800c41a <VL53L0X_perform_vhv_calibration>
 800c5dc:	4603      	mov	r3, r0
 800c5de:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800c5e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d107      	bne.n	800c5f8 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 800c5e8:	78fa      	ldrb	r2, [r7, #3]
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	6879      	ldr	r1, [r7, #4]
 800c5ee:	68f8      	ldr	r0, [r7, #12]
 800c5f0:	f7ff ff7a 	bl	800c4e8 <VL53L0X_perform_phase_calibration>
 800c5f4:	4603      	mov	r3, r0
 800c5f6:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 800c5f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d10f      	bne.n	800c620 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800c600:	7dbb      	ldrb	r3, [r7, #22]
 800c602:	461a      	mov	r2, r3
 800c604:	2101      	movs	r1, #1
 800c606:	68f8      	ldr	r0, [r7, #12]
 800c608:	f002 fb98 	bl	800ed3c <VL53L0X_WrByte>
 800c60c:	4603      	mov	r3, r0
 800c60e:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800c610:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d103      	bne.n	800c620 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	7dba      	ldrb	r2, [r7, #22]
 800c61c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800c620:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c624:	4618      	mov	r0, r3
 800c626:	3718      	adds	r7, #24
 800c628:	46bd      	mov	sp, r7
 800c62a:	bd80      	pop	{r7, pc}

0800c62c <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b086      	sub	sp, #24
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c634:	2300      	movs	r3, #0
 800c636:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 800c638:	2300      	movs	r3, #0
 800c63a:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 800c63c:	2300      	movs	r3, #0
 800c63e:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800c640:	f107 030f 	add.w	r3, r7, #15
 800c644:	4619      	mov	r1, r3
 800c646:	6878      	ldr	r0, [r7, #4]
 800c648:	f7fe fdd2 	bl	800b1f0 <VL53L0X_GetMeasurementDataReady>
 800c64c:	4603      	mov	r3, r0
 800c64e:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 800c650:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d110      	bne.n	800c67a <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 800c658:	7bfb      	ldrb	r3, [r7, #15]
 800c65a:	2b01      	cmp	r3, #1
 800c65c:	d00f      	beq.n	800c67e <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 800c65e:	693b      	ldr	r3, [r7, #16]
 800c660:	3301      	adds	r3, #1
 800c662:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800c664:	693b      	ldr	r3, [r7, #16]
 800c666:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800c66a:	d302      	bcc.n	800c672 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 800c66c:	23f9      	movs	r3, #249	; 0xf9
 800c66e:	75fb      	strb	r3, [r7, #23]
			break;
 800c670:	e006      	b.n	800c680 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 800c672:	6878      	ldr	r0, [r7, #4]
 800c674:	f002 fc82 	bl	800ef7c <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800c678:	e7e2      	b.n	800c640 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800c67a:	bf00      	nop
 800c67c:	e000      	b.n	800c680 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 800c67e:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 800c680:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c684:	4618      	mov	r0, r3
 800c686:	3718      	adds	r7, #24
 800c688:	46bd      	mov	sp, r7
 800c68a:	bd80      	pop	{r7, pc}

0800c68c <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800c68c:	b480      	push	{r7}
 800c68e:	b085      	sub	sp, #20
 800c690:	af00      	add	r7, sp, #0
 800c692:	4603      	mov	r3, r0
 800c694:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800c696:	2300      	movs	r3, #0
 800c698:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800c69a:	79fb      	ldrb	r3, [r7, #7]
 800c69c:	3301      	adds	r3, #1
 800c69e:	b2db      	uxtb	r3, r3
 800c6a0:	005b      	lsls	r3, r3, #1
 800c6a2:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800c6a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	3714      	adds	r7, #20
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b0:	4770      	bx	lr

0800c6b2 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 800c6b2:	b480      	push	{r7}
 800c6b4:	b085      	sub	sp, #20
 800c6b6:	af00      	add	r7, sp, #0
 800c6b8:	4603      	mov	r3, r0
 800c6ba:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 800c6bc:	2300      	movs	r3, #0
 800c6be:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 800c6c0:	79fb      	ldrb	r3, [r7, #7]
 800c6c2:	085b      	lsrs	r3, r3, #1
 800c6c4:	b2db      	uxtb	r3, r3
 800c6c6:	3b01      	subs	r3, #1
 800c6c8:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 800c6ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	3714      	adds	r7, #20
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d6:	4770      	bx	lr

0800c6d8 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800c6d8:	b480      	push	{r7}
 800c6da:	b085      	sub	sp, #20
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800c6e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c6e8:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800c6ea:	e002      	b.n	800c6f2 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800c6ec:	68bb      	ldr	r3, [r7, #8]
 800c6ee:	089b      	lsrs	r3, r3, #2
 800c6f0:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800c6f2:	68ba      	ldr	r2, [r7, #8]
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	429a      	cmp	r2, r3
 800c6f8:	d8f8      	bhi.n	800c6ec <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800c6fa:	e017      	b.n	800c72c <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800c6fc:	68fa      	ldr	r2, [r7, #12]
 800c6fe:	68bb      	ldr	r3, [r7, #8]
 800c700:	4413      	add	r3, r2
 800c702:	687a      	ldr	r2, [r7, #4]
 800c704:	429a      	cmp	r2, r3
 800c706:	d30b      	bcc.n	800c720 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 800c708:	68fa      	ldr	r2, [r7, #12]
 800c70a:	68bb      	ldr	r3, [r7, #8]
 800c70c:	4413      	add	r3, r2
 800c70e:	687a      	ldr	r2, [r7, #4]
 800c710:	1ad3      	subs	r3, r2, r3
 800c712:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	085b      	lsrs	r3, r3, #1
 800c718:	68ba      	ldr	r2, [r7, #8]
 800c71a:	4413      	add	r3, r2
 800c71c:	60fb      	str	r3, [r7, #12]
 800c71e:	e002      	b.n	800c726 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	085b      	lsrs	r3, r3, #1
 800c724:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800c726:	68bb      	ldr	r3, [r7, #8]
 800c728:	089b      	lsrs	r3, r3, #2
 800c72a:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800c72c:	68bb      	ldr	r3, [r7, #8]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d1e4      	bne.n	800c6fc <VL53L0X_isqrt+0x24>
	}

	return res;
 800c732:	68fb      	ldr	r3, [r7, #12]
}
 800c734:	4618      	mov	r0, r3
 800c736:	3714      	adds	r7, #20
 800c738:	46bd      	mov	sp, r7
 800c73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73e:	4770      	bx	lr

0800c740 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 800c740:	b580      	push	{r7, lr}
 800c742:	b086      	sub	sp, #24
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c748:	2300      	movs	r3, #0
 800c74a:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 800c74c:	2200      	movs	r2, #0
 800c74e:	2183      	movs	r1, #131	; 0x83
 800c750:	6878      	ldr	r0, [r7, #4]
 800c752:	f002 faf3 	bl	800ed3c <VL53L0X_WrByte>
 800c756:	4603      	mov	r3, r0
 800c758:	461a      	mov	r2, r3
 800c75a:	7dfb      	ldrb	r3, [r7, #23]
 800c75c:	4313      	orrs	r3, r2
 800c75e:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 800c760:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d11e      	bne.n	800c7a6 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 800c768:	2300      	movs	r3, #0
 800c76a:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 800c76c:	f107 030f 	add.w	r3, r7, #15
 800c770:	461a      	mov	r2, r3
 800c772:	2183      	movs	r1, #131	; 0x83
 800c774:	6878      	ldr	r0, [r7, #4]
 800c776:	f002 fb63 	bl	800ee40 <VL53L0X_RdByte>
 800c77a:	4603      	mov	r3, r0
 800c77c:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800c77e:	7bfb      	ldrb	r3, [r7, #15]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d10a      	bne.n	800c79a <VL53L0X_device_read_strobe+0x5a>
 800c784:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d106      	bne.n	800c79a <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 800c78c:	693b      	ldr	r3, [r7, #16]
 800c78e:	3301      	adds	r3, #1
 800c790:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800c792:	693b      	ldr	r3, [r7, #16]
 800c794:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800c798:	d3e8      	bcc.n	800c76c <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800c79a:	693b      	ldr	r3, [r7, #16]
 800c79c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800c7a0:	d301      	bcc.n	800c7a6 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800c7a2:	23f9      	movs	r3, #249	; 0xf9
 800c7a4:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800c7a6:	2201      	movs	r2, #1
 800c7a8:	2183      	movs	r1, #131	; 0x83
 800c7aa:	6878      	ldr	r0, [r7, #4]
 800c7ac:	f002 fac6 	bl	800ed3c <VL53L0X_WrByte>
 800c7b0:	4603      	mov	r3, r0
 800c7b2:	461a      	mov	r2, r3
 800c7b4:	7dfb      	ldrb	r3, [r7, #23]
 800c7b6:	4313      	orrs	r3, r2
 800c7b8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800c7ba:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800c7be:	4618      	mov	r0, r3
 800c7c0:	3718      	adds	r7, #24
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	bd80      	pop	{r7, pc}

0800c7c6 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800c7c6:	b580      	push	{r7, lr}
 800c7c8:	b098      	sub	sp, #96	; 0x60
 800c7ca:	af00      	add	r7, sp, #0
 800c7cc:	6078      	str	r0, [r7, #4]
 800c7ce:	460b      	mov	r3, r1
 800c7d0:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 800c7d8:	2300      	movs	r3, #0
 800c7da:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 800c7de:	2300      	movs	r3, #0
 800c7e0:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800c7f6:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800c7fa:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800c800:	2300      	movs	r3, #0
 800c802:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 800c804:	2300      	movs	r3, #0
 800c806:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800c80e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 800c812:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c816:	2b07      	cmp	r3, #7
 800c818:	f000 8408 	beq.w	800d02c <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800c81c:	2201      	movs	r2, #1
 800c81e:	2180      	movs	r1, #128	; 0x80
 800c820:	6878      	ldr	r0, [r7, #4]
 800c822:	f002 fa8b 	bl	800ed3c <VL53L0X_WrByte>
 800c826:	4603      	mov	r3, r0
 800c828:	461a      	mov	r2, r3
 800c82a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c82e:	4313      	orrs	r3, r2
 800c830:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c834:	2201      	movs	r2, #1
 800c836:	21ff      	movs	r1, #255	; 0xff
 800c838:	6878      	ldr	r0, [r7, #4]
 800c83a:	f002 fa7f 	bl	800ed3c <VL53L0X_WrByte>
 800c83e:	4603      	mov	r3, r0
 800c840:	461a      	mov	r2, r3
 800c842:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c846:	4313      	orrs	r3, r2
 800c848:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800c84c:	2200      	movs	r2, #0
 800c84e:	2100      	movs	r1, #0
 800c850:	6878      	ldr	r0, [r7, #4]
 800c852:	f002 fa73 	bl	800ed3c <VL53L0X_WrByte>
 800c856:	4603      	mov	r3, r0
 800c858:	461a      	mov	r2, r3
 800c85a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c85e:	4313      	orrs	r3, r2
 800c860:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800c864:	2206      	movs	r2, #6
 800c866:	21ff      	movs	r1, #255	; 0xff
 800c868:	6878      	ldr	r0, [r7, #4]
 800c86a:	f002 fa67 	bl	800ed3c <VL53L0X_WrByte>
 800c86e:	4603      	mov	r3, r0
 800c870:	461a      	mov	r2, r3
 800c872:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c876:	4313      	orrs	r3, r2
 800c878:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800c87c:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800c880:	461a      	mov	r2, r3
 800c882:	2183      	movs	r1, #131	; 0x83
 800c884:	6878      	ldr	r0, [r7, #4]
 800c886:	f002 fadb 	bl	800ee40 <VL53L0X_RdByte>
 800c88a:	4603      	mov	r3, r0
 800c88c:	461a      	mov	r2, r3
 800c88e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c892:	4313      	orrs	r3, r2
 800c894:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800c898:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c89c:	f043 0304 	orr.w	r3, r3, #4
 800c8a0:	b2db      	uxtb	r3, r3
 800c8a2:	461a      	mov	r2, r3
 800c8a4:	2183      	movs	r1, #131	; 0x83
 800c8a6:	6878      	ldr	r0, [r7, #4]
 800c8a8:	f002 fa48 	bl	800ed3c <VL53L0X_WrByte>
 800c8ac:	4603      	mov	r3, r0
 800c8ae:	461a      	mov	r2, r3
 800c8b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c8b4:	4313      	orrs	r3, r2
 800c8b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800c8ba:	2207      	movs	r2, #7
 800c8bc:	21ff      	movs	r1, #255	; 0xff
 800c8be:	6878      	ldr	r0, [r7, #4]
 800c8c0:	f002 fa3c 	bl	800ed3c <VL53L0X_WrByte>
 800c8c4:	4603      	mov	r3, r0
 800c8c6:	461a      	mov	r2, r3
 800c8c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c8cc:	4313      	orrs	r3, r2
 800c8ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800c8d2:	2201      	movs	r2, #1
 800c8d4:	2181      	movs	r1, #129	; 0x81
 800c8d6:	6878      	ldr	r0, [r7, #4]
 800c8d8:	f002 fa30 	bl	800ed3c <VL53L0X_WrByte>
 800c8dc:	4603      	mov	r3, r0
 800c8de:	461a      	mov	r2, r3
 800c8e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c8e4:	4313      	orrs	r3, r2
 800c8e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800c8ea:	6878      	ldr	r0, [r7, #4]
 800c8ec:	f002 fb46 	bl	800ef7c <VL53L0X_PollingDelay>
 800c8f0:	4603      	mov	r3, r0
 800c8f2:	461a      	mov	r2, r3
 800c8f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c8f8:	4313      	orrs	r3, r2
 800c8fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800c8fe:	2201      	movs	r2, #1
 800c900:	2180      	movs	r1, #128	; 0x80
 800c902:	6878      	ldr	r0, [r7, #4]
 800c904:	f002 fa1a 	bl	800ed3c <VL53L0X_WrByte>
 800c908:	4603      	mov	r3, r0
 800c90a:	461a      	mov	r2, r3
 800c90c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c910:	4313      	orrs	r3, r2
 800c912:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 800c916:	78fb      	ldrb	r3, [r7, #3]
 800c918:	f003 0301 	and.w	r3, r3, #1
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	f000 8098 	beq.w	800ca52 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800c922:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c926:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	f040 8091 	bne.w	800ca52 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800c930:	226b      	movs	r2, #107	; 0x6b
 800c932:	2194      	movs	r1, #148	; 0x94
 800c934:	6878      	ldr	r0, [r7, #4]
 800c936:	f002 fa01 	bl	800ed3c <VL53L0X_WrByte>
 800c93a:	4603      	mov	r3, r0
 800c93c:	461a      	mov	r2, r3
 800c93e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c942:	4313      	orrs	r3, r2
 800c944:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c948:	6878      	ldr	r0, [r7, #4]
 800c94a:	f7ff fef9 	bl	800c740 <VL53L0X_device_read_strobe>
 800c94e:	4603      	mov	r3, r0
 800c950:	461a      	mov	r2, r3
 800c952:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c956:	4313      	orrs	r3, r2
 800c958:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c95c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c960:	461a      	mov	r2, r3
 800c962:	2190      	movs	r1, #144	; 0x90
 800c964:	6878      	ldr	r0, [r7, #4]
 800c966:	f002 facd 	bl	800ef04 <VL53L0X_RdDWord>
 800c96a:	4603      	mov	r3, r0
 800c96c:	461a      	mov	r2, r3
 800c96e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c972:	4313      	orrs	r3, r2
 800c974:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 800c978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c97a:	0a1b      	lsrs	r3, r3, #8
 800c97c:	b2db      	uxtb	r3, r3
 800c97e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c982:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800c986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c988:	0bdb      	lsrs	r3, r3, #15
 800c98a:	b2db      	uxtb	r3, r3
 800c98c:	f003 0301 	and.w	r3, r3, #1
 800c990:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800c994:	2224      	movs	r2, #36	; 0x24
 800c996:	2194      	movs	r1, #148	; 0x94
 800c998:	6878      	ldr	r0, [r7, #4]
 800c99a:	f002 f9cf 	bl	800ed3c <VL53L0X_WrByte>
 800c99e:	4603      	mov	r3, r0
 800c9a0:	461a      	mov	r2, r3
 800c9a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c9a6:	4313      	orrs	r3, r2
 800c9a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c9ac:	6878      	ldr	r0, [r7, #4]
 800c9ae:	f7ff fec7 	bl	800c740 <VL53L0X_device_read_strobe>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	461a      	mov	r2, r3
 800c9b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c9ba:	4313      	orrs	r3, r2
 800c9bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c9c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c9c4:	461a      	mov	r2, r3
 800c9c6:	2190      	movs	r1, #144	; 0x90
 800c9c8:	6878      	ldr	r0, [r7, #4]
 800c9ca:	f002 fa9b 	bl	800ef04 <VL53L0X_RdDWord>
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	461a      	mov	r2, r3
 800c9d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c9d6:	4313      	orrs	r3, r2
 800c9d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800c9dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9de:	0e1b      	lsrs	r3, r3, #24
 800c9e0:	b2db      	uxtb	r3, r3
 800c9e2:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800c9e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9e6:	0c1b      	lsrs	r3, r3, #16
 800c9e8:	b2db      	uxtb	r3, r3
 800c9ea:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800c9ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ee:	0a1b      	lsrs	r3, r3, #8
 800c9f0:	b2db      	uxtb	r3, r3
 800c9f2:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800c9f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9f6:	b2db      	uxtb	r3, r3
 800c9f8:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800c9fa:	2225      	movs	r2, #37	; 0x25
 800c9fc:	2194      	movs	r1, #148	; 0x94
 800c9fe:	6878      	ldr	r0, [r7, #4]
 800ca00:	f002 f99c 	bl	800ed3c <VL53L0X_WrByte>
 800ca04:	4603      	mov	r3, r0
 800ca06:	461a      	mov	r2, r3
 800ca08:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ca0c:	4313      	orrs	r3, r2
 800ca0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ca12:	6878      	ldr	r0, [r7, #4]
 800ca14:	f7ff fe94 	bl	800c740 <VL53L0X_device_read_strobe>
 800ca18:	4603      	mov	r3, r0
 800ca1a:	461a      	mov	r2, r3
 800ca1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ca20:	4313      	orrs	r3, r2
 800ca22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800ca26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ca2a:	461a      	mov	r2, r3
 800ca2c:	2190      	movs	r1, #144	; 0x90
 800ca2e:	6878      	ldr	r0, [r7, #4]
 800ca30:	f002 fa68 	bl	800ef04 <VL53L0X_RdDWord>
 800ca34:	4603      	mov	r3, r0
 800ca36:	461a      	mov	r2, r3
 800ca38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ca3c:	4313      	orrs	r3, r2
 800ca3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800ca42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca44:	0e1b      	lsrs	r3, r3, #24
 800ca46:	b2db      	uxtb	r3, r3
 800ca48:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 800ca4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca4c:	0c1b      	lsrs	r3, r3, #16
 800ca4e:	b2db      	uxtb	r3, r3
 800ca50:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800ca52:	78fb      	ldrb	r3, [r7, #3]
 800ca54:	f003 0302 	and.w	r3, r3, #2
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	f000 8189 	beq.w	800cd70 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800ca5e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ca62:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	f040 8182 	bne.w	800cd70 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800ca6c:	2202      	movs	r2, #2
 800ca6e:	2194      	movs	r1, #148	; 0x94
 800ca70:	6878      	ldr	r0, [r7, #4]
 800ca72:	f002 f963 	bl	800ed3c <VL53L0X_WrByte>
 800ca76:	4603      	mov	r3, r0
 800ca78:	461a      	mov	r2, r3
 800ca7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ca7e:	4313      	orrs	r3, r2
 800ca80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ca84:	6878      	ldr	r0, [r7, #4]
 800ca86:	f7ff fe5b 	bl	800c740 <VL53L0X_device_read_strobe>
 800ca8a:	4603      	mov	r3, r0
 800ca8c:	461a      	mov	r2, r3
 800ca8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ca92:	4313      	orrs	r3, r2
 800ca94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800ca98:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800ca9c:	461a      	mov	r2, r3
 800ca9e:	2190      	movs	r1, #144	; 0x90
 800caa0:	6878      	ldr	r0, [r7, #4]
 800caa2:	f002 f9cd 	bl	800ee40 <VL53L0X_RdByte>
 800caa6:	4603      	mov	r3, r0
 800caa8:	461a      	mov	r2, r3
 800caaa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800caae:	4313      	orrs	r3, r2
 800cab0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800cab4:	227b      	movs	r2, #123	; 0x7b
 800cab6:	2194      	movs	r1, #148	; 0x94
 800cab8:	6878      	ldr	r0, [r7, #4]
 800caba:	f002 f93f 	bl	800ed3c <VL53L0X_WrByte>
 800cabe:	4603      	mov	r3, r0
 800cac0:	461a      	mov	r2, r3
 800cac2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cac6:	4313      	orrs	r3, r2
 800cac8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800cacc:	6878      	ldr	r0, [r7, #4]
 800cace:	f7ff fe37 	bl	800c740 <VL53L0X_device_read_strobe>
 800cad2:	4603      	mov	r3, r0
 800cad4:	461a      	mov	r2, r3
 800cad6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cada:	4313      	orrs	r3, r2
 800cadc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800cae0:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800cae4:	461a      	mov	r2, r3
 800cae6:	2190      	movs	r1, #144	; 0x90
 800cae8:	6878      	ldr	r0, [r7, #4]
 800caea:	f002 f9a9 	bl	800ee40 <VL53L0X_RdByte>
 800caee:	4603      	mov	r3, r0
 800caf0:	461a      	mov	r2, r3
 800caf2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800caf6:	4313      	orrs	r3, r2
 800caf8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800cafc:	2277      	movs	r2, #119	; 0x77
 800cafe:	2194      	movs	r1, #148	; 0x94
 800cb00:	6878      	ldr	r0, [r7, #4]
 800cb02:	f002 f91b 	bl	800ed3c <VL53L0X_WrByte>
 800cb06:	4603      	mov	r3, r0
 800cb08:	461a      	mov	r2, r3
 800cb0a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cb0e:	4313      	orrs	r3, r2
 800cb10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800cb14:	6878      	ldr	r0, [r7, #4]
 800cb16:	f7ff fe13 	bl	800c740 <VL53L0X_device_read_strobe>
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	461a      	mov	r2, r3
 800cb1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cb22:	4313      	orrs	r3, r2
 800cb24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800cb28:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cb2c:	461a      	mov	r2, r3
 800cb2e:	2190      	movs	r1, #144	; 0x90
 800cb30:	6878      	ldr	r0, [r7, #4]
 800cb32:	f002 f9e7 	bl	800ef04 <VL53L0X_RdDWord>
 800cb36:	4603      	mov	r3, r0
 800cb38:	461a      	mov	r2, r3
 800cb3a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cb3e:	4313      	orrs	r3, r2
 800cb40:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800cb44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb46:	0e5b      	lsrs	r3, r3, #25
 800cb48:	b2db      	uxtb	r3, r3
 800cb4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb4e:	b2db      	uxtb	r3, r3
 800cb50:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800cb52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb54:	0c9b      	lsrs	r3, r3, #18
 800cb56:	b2db      	uxtb	r3, r3
 800cb58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb5c:	b2db      	uxtb	r3, r3
 800cb5e:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800cb60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb62:	0adb      	lsrs	r3, r3, #11
 800cb64:	b2db      	uxtb	r3, r3
 800cb66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb6a:	b2db      	uxtb	r3, r3
 800cb6c:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800cb6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb70:	091b      	lsrs	r3, r3, #4
 800cb72:	b2db      	uxtb	r3, r3
 800cb74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb78:	b2db      	uxtb	r3, r3
 800cb7a:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800cb7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb7e:	b2db      	uxtb	r3, r3
 800cb80:	00db      	lsls	r3, r3, #3
 800cb82:	b2db      	uxtb	r3, r3
 800cb84:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800cb88:	b2db      	uxtb	r3, r3
 800cb8a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800cb8e:	2278      	movs	r2, #120	; 0x78
 800cb90:	2194      	movs	r1, #148	; 0x94
 800cb92:	6878      	ldr	r0, [r7, #4]
 800cb94:	f002 f8d2 	bl	800ed3c <VL53L0X_WrByte>
 800cb98:	4603      	mov	r3, r0
 800cb9a:	461a      	mov	r2, r3
 800cb9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cba0:	4313      	orrs	r3, r2
 800cba2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800cba6:	6878      	ldr	r0, [r7, #4]
 800cba8:	f7ff fdca 	bl	800c740 <VL53L0X_device_read_strobe>
 800cbac:	4603      	mov	r3, r0
 800cbae:	461a      	mov	r2, r3
 800cbb0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cbb4:	4313      	orrs	r3, r2
 800cbb6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800cbba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cbbe:	461a      	mov	r2, r3
 800cbc0:	2190      	movs	r1, #144	; 0x90
 800cbc2:	6878      	ldr	r0, [r7, #4]
 800cbc4:	f002 f99e 	bl	800ef04 <VL53L0X_RdDWord>
 800cbc8:	4603      	mov	r3, r0
 800cbca:	461a      	mov	r2, r3
 800cbcc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cbd0:	4313      	orrs	r3, r2
 800cbd2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800cbd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbd8:	0f5b      	lsrs	r3, r3, #29
 800cbda:	b2db      	uxtb	r3, r3
 800cbdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbe0:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800cbe2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cbe6:	4413      	add	r3, r2
 800cbe8:	b2db      	uxtb	r3, r3
 800cbea:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800cbec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbee:	0d9b      	lsrs	r3, r3, #22
 800cbf0:	b2db      	uxtb	r3, r3
 800cbf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbf6:	b2db      	uxtb	r3, r3
 800cbf8:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800cbfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbfc:	0bdb      	lsrs	r3, r3, #15
 800cbfe:	b2db      	uxtb	r3, r3
 800cc00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc04:	b2db      	uxtb	r3, r3
 800cc06:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800cc08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc0a:	0a1b      	lsrs	r3, r3, #8
 800cc0c:	b2db      	uxtb	r3, r3
 800cc0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc12:	b2db      	uxtb	r3, r3
 800cc14:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800cc16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc18:	085b      	lsrs	r3, r3, #1
 800cc1a:	b2db      	uxtb	r3, r3
 800cc1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc20:	b2db      	uxtb	r3, r3
 800cc22:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800cc24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc26:	b2db      	uxtb	r3, r3
 800cc28:	019b      	lsls	r3, r3, #6
 800cc2a:	b2db      	uxtb	r3, r3
 800cc2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc30:	b2db      	uxtb	r3, r3
 800cc32:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800cc36:	2279      	movs	r2, #121	; 0x79
 800cc38:	2194      	movs	r1, #148	; 0x94
 800cc3a:	6878      	ldr	r0, [r7, #4]
 800cc3c:	f002 f87e 	bl	800ed3c <VL53L0X_WrByte>
 800cc40:	4603      	mov	r3, r0
 800cc42:	461a      	mov	r2, r3
 800cc44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cc48:	4313      	orrs	r3, r2
 800cc4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800cc4e:	6878      	ldr	r0, [r7, #4]
 800cc50:	f7ff fd76 	bl	800c740 <VL53L0X_device_read_strobe>
 800cc54:	4603      	mov	r3, r0
 800cc56:	461a      	mov	r2, r3
 800cc58:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cc5c:	4313      	orrs	r3, r2
 800cc5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800cc62:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cc66:	461a      	mov	r2, r3
 800cc68:	2190      	movs	r1, #144	; 0x90
 800cc6a:	6878      	ldr	r0, [r7, #4]
 800cc6c:	f002 f94a 	bl	800ef04 <VL53L0X_RdDWord>
 800cc70:	4603      	mov	r3, r0
 800cc72:	461a      	mov	r2, r3
 800cc74:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cc78:	4313      	orrs	r3, r2
 800cc7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800cc7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc80:	0e9b      	lsrs	r3, r3, #26
 800cc82:	b2db      	uxtb	r3, r3
 800cc84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc88:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800cc8a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cc8e:	4413      	add	r3, r2
 800cc90:	b2db      	uxtb	r3, r3
 800cc92:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800cc94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc96:	0cdb      	lsrs	r3, r3, #19
 800cc98:	b2db      	uxtb	r3, r3
 800cc9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc9e:	b2db      	uxtb	r3, r3
 800cca0:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800cca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cca4:	0b1b      	lsrs	r3, r3, #12
 800cca6:	b2db      	uxtb	r3, r3
 800cca8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ccac:	b2db      	uxtb	r3, r3
 800ccae:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800ccb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccb2:	095b      	lsrs	r3, r3, #5
 800ccb4:	b2db      	uxtb	r3, r3
 800ccb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ccba:	b2db      	uxtb	r3, r3
 800ccbc:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800ccbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccc0:	b2db      	uxtb	r3, r3
 800ccc2:	009b      	lsls	r3, r3, #2
 800ccc4:	b2db      	uxtb	r3, r3
 800ccc6:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800ccca:	b2db      	uxtb	r3, r3
 800cccc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800ccd0:	227a      	movs	r2, #122	; 0x7a
 800ccd2:	2194      	movs	r1, #148	; 0x94
 800ccd4:	6878      	ldr	r0, [r7, #4]
 800ccd6:	f002 f831 	bl	800ed3c <VL53L0X_WrByte>
 800ccda:	4603      	mov	r3, r0
 800ccdc:	461a      	mov	r2, r3
 800ccde:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cce2:	4313      	orrs	r3, r2
 800cce4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800cce8:	6878      	ldr	r0, [r7, #4]
 800ccea:	f7ff fd29 	bl	800c740 <VL53L0X_device_read_strobe>
 800ccee:	4603      	mov	r3, r0
 800ccf0:	461a      	mov	r2, r3
 800ccf2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ccf6:	4313      	orrs	r3, r2
 800ccf8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800ccfc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cd00:	461a      	mov	r2, r3
 800cd02:	2190      	movs	r1, #144	; 0x90
 800cd04:	6878      	ldr	r0, [r7, #4]
 800cd06:	f002 f8fd 	bl	800ef04 <VL53L0X_RdDWord>
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	461a      	mov	r2, r3
 800cd0e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cd12:	4313      	orrs	r3, r2
 800cd14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800cd18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd1a:	0f9b      	lsrs	r3, r3, #30
 800cd1c:	b2db      	uxtb	r3, r3
 800cd1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd22:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800cd24:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cd28:	4413      	add	r3, r2
 800cd2a:	b2db      	uxtb	r3, r3
 800cd2c:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800cd2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd30:	0ddb      	lsrs	r3, r3, #23
 800cd32:	b2db      	uxtb	r3, r3
 800cd34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd38:	b2db      	uxtb	r3, r3
 800cd3a:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800cd3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd3e:	0c1b      	lsrs	r3, r3, #16
 800cd40:	b2db      	uxtb	r3, r3
 800cd42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd46:	b2db      	uxtb	r3, r3
 800cd48:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800cd4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd4c:	0a5b      	lsrs	r3, r3, #9
 800cd4e:	b2db      	uxtb	r3, r3
 800cd50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd54:	b2db      	uxtb	r3, r3
 800cd56:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800cd5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd5c:	089b      	lsrs	r3, r3, #2
 800cd5e:	b2db      	uxtb	r3, r3
 800cd60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd64:	b2db      	uxtb	r3, r3
 800cd66:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 800cd70:	78fb      	ldrb	r3, [r7, #3]
 800cd72:	f003 0304 	and.w	r3, r3, #4
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	f000 80f1 	beq.w	800cf5e <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800cd7c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cd80:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	f040 80ea 	bne.w	800cf5e <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800cd8a:	227b      	movs	r2, #123	; 0x7b
 800cd8c:	2194      	movs	r1, #148	; 0x94
 800cd8e:	6878      	ldr	r0, [r7, #4]
 800cd90:	f001 ffd4 	bl	800ed3c <VL53L0X_WrByte>
 800cd94:	4603      	mov	r3, r0
 800cd96:	461a      	mov	r2, r3
 800cd98:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cd9c:	4313      	orrs	r3, r2
 800cd9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800cda2:	6878      	ldr	r0, [r7, #4]
 800cda4:	f7ff fccc 	bl	800c740 <VL53L0X_device_read_strobe>
 800cda8:	4603      	mov	r3, r0
 800cdaa:	461a      	mov	r2, r3
 800cdac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cdb0:	4313      	orrs	r3, r2
 800cdb2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800cdb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cdba:	461a      	mov	r2, r3
 800cdbc:	2190      	movs	r1, #144	; 0x90
 800cdbe:	6878      	ldr	r0, [r7, #4]
 800cdc0:	f002 f8a0 	bl	800ef04 <VL53L0X_RdDWord>
 800cdc4:	4603      	mov	r3, r0
 800cdc6:	461a      	mov	r2, r3
 800cdc8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cdcc:	4313      	orrs	r3, r2
 800cdce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800cdd2:	227c      	movs	r2, #124	; 0x7c
 800cdd4:	2194      	movs	r1, #148	; 0x94
 800cdd6:	6878      	ldr	r0, [r7, #4]
 800cdd8:	f001 ffb0 	bl	800ed3c <VL53L0X_WrByte>
 800cddc:	4603      	mov	r3, r0
 800cdde:	461a      	mov	r2, r3
 800cde0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cde4:	4313      	orrs	r3, r2
 800cde6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800cdea:	6878      	ldr	r0, [r7, #4]
 800cdec:	f7ff fca8 	bl	800c740 <VL53L0X_device_read_strobe>
 800cdf0:	4603      	mov	r3, r0
 800cdf2:	461a      	mov	r2, r3
 800cdf4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cdf8:	4313      	orrs	r3, r2
 800cdfa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800cdfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ce02:	461a      	mov	r2, r3
 800ce04:	2190      	movs	r1, #144	; 0x90
 800ce06:	6878      	ldr	r0, [r7, #4]
 800ce08:	f002 f87c 	bl	800ef04 <VL53L0X_RdDWord>
 800ce0c:	4603      	mov	r3, r0
 800ce0e:	461a      	mov	r2, r3
 800ce10:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ce14:	4313      	orrs	r3, r2
 800ce16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800ce1a:	2273      	movs	r2, #115	; 0x73
 800ce1c:	2194      	movs	r1, #148	; 0x94
 800ce1e:	6878      	ldr	r0, [r7, #4]
 800ce20:	f001 ff8c 	bl	800ed3c <VL53L0X_WrByte>
 800ce24:	4603      	mov	r3, r0
 800ce26:	461a      	mov	r2, r3
 800ce28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ce2c:	4313      	orrs	r3, r2
 800ce2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ce32:	6878      	ldr	r0, [r7, #4]
 800ce34:	f7ff fc84 	bl	800c740 <VL53L0X_device_read_strobe>
 800ce38:	4603      	mov	r3, r0
 800ce3a:	461a      	mov	r2, r3
 800ce3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ce40:	4313      	orrs	r3, r2
 800ce42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800ce46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ce4a:	461a      	mov	r2, r3
 800ce4c:	2190      	movs	r1, #144	; 0x90
 800ce4e:	6878      	ldr	r0, [r7, #4]
 800ce50:	f002 f858 	bl	800ef04 <VL53L0X_RdDWord>
 800ce54:	4603      	mov	r3, r0
 800ce56:	461a      	mov	r2, r3
 800ce58:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ce5c:	4313      	orrs	r3, r2
 800ce5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800ce62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce64:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800ce66:	b29b      	uxth	r3, r3
 800ce68:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800ce6a:	2274      	movs	r2, #116	; 0x74
 800ce6c:	2194      	movs	r1, #148	; 0x94
 800ce6e:	6878      	ldr	r0, [r7, #4]
 800ce70:	f001 ff64 	bl	800ed3c <VL53L0X_WrByte>
 800ce74:	4603      	mov	r3, r0
 800ce76:	461a      	mov	r2, r3
 800ce78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ce7c:	4313      	orrs	r3, r2
 800ce7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ce82:	6878      	ldr	r0, [r7, #4]
 800ce84:	f7ff fc5c 	bl	800c740 <VL53L0X_device_read_strobe>
 800ce88:	4603      	mov	r3, r0
 800ce8a:	461a      	mov	r2, r3
 800ce8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ce90:	4313      	orrs	r3, r2
 800ce92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800ce96:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ce9a:	461a      	mov	r2, r3
 800ce9c:	2190      	movs	r1, #144	; 0x90
 800ce9e:	6878      	ldr	r0, [r7, #4]
 800cea0:	f002 f830 	bl	800ef04 <VL53L0X_RdDWord>
 800cea4:	4603      	mov	r3, r0
 800cea6:	461a      	mov	r2, r3
 800cea8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ceac:	4313      	orrs	r3, r2
 800ceae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800ceb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceb4:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800ceb6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ceb8:	4313      	orrs	r3, r2
 800ceba:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800cebc:	2275      	movs	r2, #117	; 0x75
 800cebe:	2194      	movs	r1, #148	; 0x94
 800cec0:	6878      	ldr	r0, [r7, #4]
 800cec2:	f001 ff3b 	bl	800ed3c <VL53L0X_WrByte>
 800cec6:	4603      	mov	r3, r0
 800cec8:	461a      	mov	r2, r3
 800ceca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cece:	4313      	orrs	r3, r2
 800ced0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ced4:	6878      	ldr	r0, [r7, #4]
 800ced6:	f7ff fc33 	bl	800c740 <VL53L0X_device_read_strobe>
 800ceda:	4603      	mov	r3, r0
 800cedc:	461a      	mov	r2, r3
 800cede:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cee2:	4313      	orrs	r3, r2
 800cee4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800cee8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ceec:	461a      	mov	r2, r3
 800ceee:	2190      	movs	r1, #144	; 0x90
 800cef0:	6878      	ldr	r0, [r7, #4]
 800cef2:	f002 f807 	bl	800ef04 <VL53L0X_RdDWord>
 800cef6:	4603      	mov	r3, r0
 800cef8:	461a      	mov	r2, r3
 800cefa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cefe:	4313      	orrs	r3, r2
 800cf00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 800cf04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf06:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 800cf08:	b29b      	uxth	r3, r3
 800cf0a:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800cf0c:	2276      	movs	r2, #118	; 0x76
 800cf0e:	2194      	movs	r1, #148	; 0x94
 800cf10:	6878      	ldr	r0, [r7, #4]
 800cf12:	f001 ff13 	bl	800ed3c <VL53L0X_WrByte>
 800cf16:	4603      	mov	r3, r0
 800cf18:	461a      	mov	r2, r3
 800cf1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cf1e:	4313      	orrs	r3, r2
 800cf20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800cf24:	6878      	ldr	r0, [r7, #4]
 800cf26:	f7ff fc0b 	bl	800c740 <VL53L0X_device_read_strobe>
 800cf2a:	4603      	mov	r3, r0
 800cf2c:	461a      	mov	r2, r3
 800cf2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cf32:	4313      	orrs	r3, r2
 800cf34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800cf38:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cf3c:	461a      	mov	r2, r3
 800cf3e:	2190      	movs	r1, #144	; 0x90
 800cf40:	6878      	ldr	r0, [r7, #4]
 800cf42:	f001 ffdf 	bl	800ef04 <VL53L0X_RdDWord>
 800cf46:	4603      	mov	r3, r0
 800cf48:	461a      	mov	r2, r3
 800cf4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cf4e:	4313      	orrs	r3, r2
 800cf50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800cf54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf56:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800cf58:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cf5a:	4313      	orrs	r3, r2
 800cf5c:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800cf5e:	2200      	movs	r2, #0
 800cf60:	2181      	movs	r1, #129	; 0x81
 800cf62:	6878      	ldr	r0, [r7, #4]
 800cf64:	f001 feea 	bl	800ed3c <VL53L0X_WrByte>
 800cf68:	4603      	mov	r3, r0
 800cf6a:	461a      	mov	r2, r3
 800cf6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cf70:	4313      	orrs	r3, r2
 800cf72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800cf76:	2206      	movs	r2, #6
 800cf78:	21ff      	movs	r1, #255	; 0xff
 800cf7a:	6878      	ldr	r0, [r7, #4]
 800cf7c:	f001 fede 	bl	800ed3c <VL53L0X_WrByte>
 800cf80:	4603      	mov	r3, r0
 800cf82:	461a      	mov	r2, r3
 800cf84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cf88:	4313      	orrs	r3, r2
 800cf8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800cf8e:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800cf92:	461a      	mov	r2, r3
 800cf94:	2183      	movs	r1, #131	; 0x83
 800cf96:	6878      	ldr	r0, [r7, #4]
 800cf98:	f001 ff52 	bl	800ee40 <VL53L0X_RdByte>
 800cf9c:	4603      	mov	r3, r0
 800cf9e:	461a      	mov	r2, r3
 800cfa0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cfa4:	4313      	orrs	r3, r2
 800cfa6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800cfaa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cfae:	f023 0304 	bic.w	r3, r3, #4
 800cfb2:	b2db      	uxtb	r3, r3
 800cfb4:	461a      	mov	r2, r3
 800cfb6:	2183      	movs	r1, #131	; 0x83
 800cfb8:	6878      	ldr	r0, [r7, #4]
 800cfba:	f001 febf 	bl	800ed3c <VL53L0X_WrByte>
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	461a      	mov	r2, r3
 800cfc2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cfc6:	4313      	orrs	r3, r2
 800cfc8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800cfcc:	2201      	movs	r2, #1
 800cfce:	21ff      	movs	r1, #255	; 0xff
 800cfd0:	6878      	ldr	r0, [r7, #4]
 800cfd2:	f001 feb3 	bl	800ed3c <VL53L0X_WrByte>
 800cfd6:	4603      	mov	r3, r0
 800cfd8:	461a      	mov	r2, r3
 800cfda:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cfde:	4313      	orrs	r3, r2
 800cfe0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800cfe4:	2201      	movs	r2, #1
 800cfe6:	2100      	movs	r1, #0
 800cfe8:	6878      	ldr	r0, [r7, #4]
 800cfea:	f001 fea7 	bl	800ed3c <VL53L0X_WrByte>
 800cfee:	4603      	mov	r3, r0
 800cff0:	461a      	mov	r2, r3
 800cff2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cff6:	4313      	orrs	r3, r2
 800cff8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800cffc:	2200      	movs	r2, #0
 800cffe:	21ff      	movs	r1, #255	; 0xff
 800d000:	6878      	ldr	r0, [r7, #4]
 800d002:	f001 fe9b 	bl	800ed3c <VL53L0X_WrByte>
 800d006:	4603      	mov	r3, r0
 800d008:	461a      	mov	r2, r3
 800d00a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d00e:	4313      	orrs	r3, r2
 800d010:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800d014:	2200      	movs	r2, #0
 800d016:	2180      	movs	r1, #128	; 0x80
 800d018:	6878      	ldr	r0, [r7, #4]
 800d01a:	f001 fe8f 	bl	800ed3c <VL53L0X_WrByte>
 800d01e:	4603      	mov	r3, r0
 800d020:	461a      	mov	r2, r3
 800d022:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d026:	4313      	orrs	r3, r2
 800d028:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800d02c:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800d030:	2b00      	cmp	r3, #0
 800d032:	f040 808f 	bne.w	800d154 <VL53L0X_get_info_from_device+0x98e>
 800d036:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d03a:	2b07      	cmp	r3, #7
 800d03c:	f000 808a 	beq.w	800d154 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800d040:	78fb      	ldrb	r3, [r7, #3]
 800d042:	f003 0301 	and.w	r3, r3, #1
 800d046:	2b00      	cmp	r3, #0
 800d048:	d024      	beq.n	800d094 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800d04a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d04e:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800d052:	2b00      	cmp	r3, #0
 800d054:	d11e      	bne.n	800d094 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800d05c:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800d066:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800d06a:	2300      	movs	r3, #0
 800d06c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d06e:	e00e      	b.n	800d08e <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800d070:	f107 0208 	add.w	r2, r7, #8
 800d074:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d076:	4413      	add	r3, r2
 800d078:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800d07a:	687a      	ldr	r2, [r7, #4]
 800d07c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d07e:	4413      	add	r3, r2
 800d080:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800d084:	460a      	mov	r2, r1
 800d086:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800d088:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d08a:	3301      	adds	r3, #1
 800d08c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d08e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d090:	2b05      	cmp	r3, #5
 800d092:	dded      	ble.n	800d070 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 800d094:	78fb      	ldrb	r3, [r7, #3]
 800d096:	f003 0302 	and.w	r3, r3, #2
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d018      	beq.n	800d0d0 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800d09e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d0a2:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d112      	bne.n	800d0d0 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d0aa:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d0b4:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	33f3      	adds	r3, #243	; 0xf3
 800d0c2:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800d0c4:	f107 0310 	add.w	r3, r7, #16
 800d0c8:	4619      	mov	r1, r3
 800d0ca:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d0cc:	f002 feb7 	bl	800fe3e <strcpy>

		}

		if (((option & 4) == 4) &&
 800d0d0:	78fb      	ldrb	r3, [r7, #3]
 800d0d2:	f003 0304 	and.w	r3, r3, #4
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d030      	beq.n	800d13c <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800d0da:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d0de:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d12a      	bne.n	800d13c <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d0e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d0ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800d0f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d0f8:	025b      	lsls	r3, r3, #9
 800d0fa:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d100:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 800d104:	2300      	movs	r3, #0
 800d106:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800d10a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d011      	beq.n	800d134 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 800d110:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d112:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d114:	1ad3      	subs	r3, r2, r3
 800d116:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800d118:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d11a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d11e:	fb02 f303 	mul.w	r3, r2, r3
 800d122:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 800d124:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 800d128:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800d12c:	425b      	negs	r3, r3
 800d12e:	b29b      	uxth	r3, r3
 800d130:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 800d134:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800d13c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800d140:	78fb      	ldrb	r3, [r7, #3]
 800d142:	4313      	orrs	r3, r2
 800d144:	b2db      	uxtb	r3, r3
 800d146:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800d14a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800d154:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800d158:	4618      	mov	r0, r3
 800d15a:	3760      	adds	r7, #96	; 0x60
 800d15c:	46bd      	mov	sp, r7
 800d15e:	bd80      	pop	{r7, pc}

0800d160 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 800d160:	b480      	push	{r7}
 800d162:	b087      	sub	sp, #28
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
 800d168:	460b      	mov	r3, r1
 800d16a:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 800d16c:	f240 6277 	movw	r2, #1655	; 0x677
 800d170:	f04f 0300 	mov.w	r3, #0
 800d174:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 800d178:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800d17c:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800d17e:	78fb      	ldrb	r3, [r7, #3]
 800d180:	68fa      	ldr	r2, [r7, #12]
 800d182:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800d186:	693a      	ldr	r2, [r7, #16]
 800d188:	fb02 f303 	mul.w	r3, r2, r3
 800d18c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800d18e:	68bb      	ldr	r3, [r7, #8]
}
 800d190:	4618      	mov	r0, r3
 800d192:	371c      	adds	r7, #28
 800d194:	46bd      	mov	sp, r7
 800d196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19a:	4770      	bx	lr

0800d19c <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800d19c:	b480      	push	{r7}
 800d19e:	b087      	sub	sp, #28
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d017      	beq.n	800d1e6 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	3b01      	subs	r3, #1
 800d1ba:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800d1bc:	e005      	b.n	800d1ca <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800d1be:	693b      	ldr	r3, [r7, #16]
 800d1c0:	085b      	lsrs	r3, r3, #1
 800d1c2:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800d1c4:	89fb      	ldrh	r3, [r7, #14]
 800d1c6:	3301      	adds	r3, #1
 800d1c8:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800d1ca:	693b      	ldr	r3, [r7, #16]
 800d1cc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d1f4      	bne.n	800d1be <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800d1d4:	89fb      	ldrh	r3, [r7, #14]
 800d1d6:	021b      	lsls	r3, r3, #8
 800d1d8:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800d1da:	693b      	ldr	r3, [r7, #16]
 800d1dc:	b29b      	uxth	r3, r3
 800d1de:	b2db      	uxtb	r3, r3
 800d1e0:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800d1e2:	4413      	add	r3, r2
 800d1e4:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800d1e6:	8afb      	ldrh	r3, [r7, #22]

}
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	371c      	adds	r7, #28
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f2:	4770      	bx	lr

0800d1f4 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800d1f4:	b480      	push	{r7}
 800d1f6:	b085      	sub	sp, #20
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800d1fe:	2300      	movs	r3, #0
 800d200:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800d202:	88fb      	ldrh	r3, [r7, #6]
 800d204:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800d206:	88fa      	ldrh	r2, [r7, #6]
 800d208:	0a12      	lsrs	r2, r2, #8
 800d20a:	b292      	uxth	r2, r2
 800d20c:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800d20e:	3301      	adds	r3, #1
 800d210:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800d212:	68fb      	ldr	r3, [r7, #12]
}
 800d214:	4618      	mov	r0, r3
 800d216:	3714      	adds	r7, #20
 800d218:	46bd      	mov	sp, r7
 800d21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21e:	4770      	bx	lr

0800d220 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b088      	sub	sp, #32
 800d224:	af00      	add	r7, sp, #0
 800d226:	60f8      	str	r0, [r7, #12]
 800d228:	60b9      	str	r1, [r7, #8]
 800d22a:	4613      	mov	r3, r2
 800d22c:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800d22e:	2300      	movs	r3, #0
 800d230:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800d232:	79fb      	ldrb	r3, [r7, #7]
 800d234:	4619      	mov	r1, r3
 800d236:	68f8      	ldr	r0, [r7, #12]
 800d238:	f7ff ff92 	bl	800d160 <VL53L0X_calc_macro_period_ps>
 800d23c:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800d23e:	69bb      	ldr	r3, [r7, #24]
 800d240:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d244:	4a0a      	ldr	r2, [pc, #40]	; (800d270 <VL53L0X_calc_timeout_mclks+0x50>)
 800d246:	fba2 2303 	umull	r2, r3, r2, r3
 800d24a:	099b      	lsrs	r3, r3, #6
 800d24c:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800d24e:	68bb      	ldr	r3, [r7, #8]
 800d250:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d254:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 800d258:	697b      	ldr	r3, [r7, #20]
 800d25a:	085b      	lsrs	r3, r3, #1
 800d25c:	441a      	add	r2, r3
	timeout_period_mclks =
 800d25e:	697b      	ldr	r3, [r7, #20]
 800d260:	fbb2 f3f3 	udiv	r3, r2, r3
 800d264:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 800d266:	69fb      	ldr	r3, [r7, #28]
}
 800d268:	4618      	mov	r0, r3
 800d26a:	3720      	adds	r7, #32
 800d26c:	46bd      	mov	sp, r7
 800d26e:	bd80      	pop	{r7, pc}
 800d270:	10624dd3 	.word	0x10624dd3

0800d274 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800d274:	b580      	push	{r7, lr}
 800d276:	b086      	sub	sp, #24
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
 800d27c:	460b      	mov	r3, r1
 800d27e:	807b      	strh	r3, [r7, #2]
 800d280:	4613      	mov	r3, r2
 800d282:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800d284:	2300      	movs	r3, #0
 800d286:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800d288:	787b      	ldrb	r3, [r7, #1]
 800d28a:	4619      	mov	r1, r3
 800d28c:	6878      	ldr	r0, [r7, #4]
 800d28e:	f7ff ff67 	bl	800d160 <VL53L0X_calc_macro_period_ps>
 800d292:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800d294:	693b      	ldr	r3, [r7, #16]
 800d296:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d29a:	4a0a      	ldr	r2, [pc, #40]	; (800d2c4 <VL53L0X_calc_timeout_us+0x50>)
 800d29c:	fba2 2303 	umull	r2, r3, r2, r3
 800d2a0:	099b      	lsrs	r3, r3, #6
 800d2a2:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800d2a4:	887b      	ldrh	r3, [r7, #2]
 800d2a6:	68fa      	ldr	r2, [r7, #12]
 800d2a8:	fb02 f303 	mul.w	r3, r2, r3
 800d2ac:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 800d2b0:	4a04      	ldr	r2, [pc, #16]	; (800d2c4 <VL53L0X_calc_timeout_us+0x50>)
 800d2b2:	fba2 2303 	umull	r2, r3, r2, r3
 800d2b6:	099b      	lsrs	r3, r3, #6
 800d2b8:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800d2ba:	697b      	ldr	r3, [r7, #20]
}
 800d2bc:	4618      	mov	r0, r3
 800d2be:	3718      	adds	r7, #24
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	bd80      	pop	{r7, pc}
 800d2c4:	10624dd3 	.word	0x10624dd3

0800d2c8 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	b08c      	sub	sp, #48	; 0x30
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	60f8      	str	r0, [r7, #12]
 800d2d0:	460b      	mov	r3, r1
 800d2d2:	607a      	str	r2, [r7, #4]
 800d2d4:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800d2dc:	2300      	movs	r3, #0
 800d2de:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800d2ee:	7afb      	ldrb	r3, [r7, #11]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d005      	beq.n	800d300 <get_sequence_step_timeout+0x38>
 800d2f4:	7afb      	ldrb	r3, [r7, #11]
 800d2f6:	2b01      	cmp	r3, #1
 800d2f8:	d002      	beq.n	800d300 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800d2fa:	7afb      	ldrb	r3, [r7, #11]
 800d2fc:	2b02      	cmp	r3, #2
 800d2fe:	d128      	bne.n	800d352 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d300:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800d304:	461a      	mov	r2, r3
 800d306:	2100      	movs	r1, #0
 800d308:	68f8      	ldr	r0, [r7, #12]
 800d30a:	f7fd fa4d 	bl	800a7a8 <VL53L0X_GetVcselPulsePeriod>
 800d30e:	4603      	mov	r3, r0
 800d310:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800d314:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d109      	bne.n	800d330 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800d31c:	f107 0320 	add.w	r3, r7, #32
 800d320:	461a      	mov	r2, r3
 800d322:	2146      	movs	r1, #70	; 0x46
 800d324:	68f8      	ldr	r0, [r7, #12]
 800d326:	f001 fd8b 	bl	800ee40 <VL53L0X_RdByte>
 800d32a:	4603      	mov	r3, r0
 800d32c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800d330:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d334:	b29b      	uxth	r3, r3
 800d336:	4618      	mov	r0, r3
 800d338:	f7ff ff5c 	bl	800d1f4 <VL53L0X_decode_timeout>
 800d33c:	4603      	mov	r3, r0
 800d33e:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800d340:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800d344:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d346:	4619      	mov	r1, r3
 800d348:	68f8      	ldr	r0, [r7, #12]
 800d34a:	f7ff ff93 	bl	800d274 <VL53L0X_calc_timeout_us>
 800d34e:	62b8      	str	r0, [r7, #40]	; 0x28
 800d350:	e092      	b.n	800d478 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800d352:	7afb      	ldrb	r3, [r7, #11]
 800d354:	2b03      	cmp	r3, #3
 800d356:	d135      	bne.n	800d3c4 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d358:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800d35c:	461a      	mov	r2, r3
 800d35e:	2100      	movs	r1, #0
 800d360:	68f8      	ldr	r0, [r7, #12]
 800d362:	f7fd fa21 	bl	800a7a8 <VL53L0X_GetVcselPulsePeriod>
 800d366:	4603      	mov	r3, r0
 800d368:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800d36c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d370:	2b00      	cmp	r3, #0
 800d372:	f040 8081 	bne.w	800d478 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d376:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800d37a:	461a      	mov	r2, r3
 800d37c:	2100      	movs	r1, #0
 800d37e:	68f8      	ldr	r0, [r7, #12]
 800d380:	f7fd fa12 	bl	800a7a8 <VL53L0X_GetVcselPulsePeriod>
 800d384:	4603      	mov	r3, r0
 800d386:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800d38a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d109      	bne.n	800d3a6 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800d392:	f107 031e 	add.w	r3, r7, #30
 800d396:	461a      	mov	r2, r3
 800d398:	2151      	movs	r1, #81	; 0x51
 800d39a:	68f8      	ldr	r0, [r7, #12]
 800d39c:	f001 fd7a 	bl	800ee94 <VL53L0X_RdWord>
 800d3a0:	4603      	mov	r3, r0
 800d3a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800d3a6:	8bfb      	ldrh	r3, [r7, #30]
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	f7ff ff23 	bl	800d1f4 <VL53L0X_decode_timeout>
 800d3ae:	4603      	mov	r3, r0
 800d3b0:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800d3b2:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800d3b6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d3b8:	4619      	mov	r1, r3
 800d3ba:	68f8      	ldr	r0, [r7, #12]
 800d3bc:	f7ff ff5a 	bl	800d274 <VL53L0X_calc_timeout_us>
 800d3c0:	62b8      	str	r0, [r7, #40]	; 0x28
 800d3c2:	e059      	b.n	800d478 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800d3c4:	7afb      	ldrb	r3, [r7, #11]
 800d3c6:	2b04      	cmp	r3, #4
 800d3c8:	d156      	bne.n	800d478 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800d3ca:	f107 0314 	add.w	r3, r7, #20
 800d3ce:	4619      	mov	r1, r3
 800d3d0:	68f8      	ldr	r0, [r7, #12]
 800d3d2:	f7fd faf5 	bl	800a9c0 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800d3da:	7dfb      	ldrb	r3, [r7, #23]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d01d      	beq.n	800d41c <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d3e0:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800d3e4:	461a      	mov	r2, r3
 800d3e6:	2100      	movs	r1, #0
 800d3e8:	68f8      	ldr	r0, [r7, #12]
 800d3ea:	f7fd f9dd 	bl	800a7a8 <VL53L0X_GetVcselPulsePeriod>
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800d3f4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d10f      	bne.n	800d41c <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 800d3fc:	f107 031e 	add.w	r3, r7, #30
 800d400:	461a      	mov	r2, r3
 800d402:	2151      	movs	r1, #81	; 0x51
 800d404:	68f8      	ldr	r0, [r7, #12]
 800d406:	f001 fd45 	bl	800ee94 <VL53L0X_RdWord>
 800d40a:	4603      	mov	r3, r0
 800d40c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800d410:	8bfb      	ldrh	r3, [r7, #30]
 800d412:	4618      	mov	r0, r3
 800d414:	f7ff feee 	bl	800d1f4 <VL53L0X_decode_timeout>
 800d418:	4603      	mov	r3, r0
 800d41a:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800d41c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d420:	2b00      	cmp	r3, #0
 800d422:	d109      	bne.n	800d438 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d424:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800d428:	461a      	mov	r2, r3
 800d42a:	2101      	movs	r1, #1
 800d42c:	68f8      	ldr	r0, [r7, #12]
 800d42e:	f7fd f9bb 	bl	800a7a8 <VL53L0X_GetVcselPulsePeriod>
 800d432:	4603      	mov	r3, r0
 800d434:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800d438:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d10f      	bne.n	800d460 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 800d440:	f107 031c 	add.w	r3, r7, #28
 800d444:	461a      	mov	r2, r3
 800d446:	2171      	movs	r1, #113	; 0x71
 800d448:	68f8      	ldr	r0, [r7, #12]
 800d44a:	f001 fd23 	bl	800ee94 <VL53L0X_RdWord>
 800d44e:	4603      	mov	r3, r0
 800d450:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800d454:	8bbb      	ldrh	r3, [r7, #28]
 800d456:	4618      	mov	r0, r3
 800d458:	f7ff fecc 	bl	800d1f4 <VL53L0X_decode_timeout>
 800d45c:	4603      	mov	r3, r0
 800d45e:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800d460:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d462:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d464:	1ad3      	subs	r3, r2, r3
 800d466:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800d468:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800d46c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d46e:	4619      	mov	r1, r3
 800d470:	68f8      	ldr	r0, [r7, #12]
 800d472:	f7ff feff 	bl	800d274 <VL53L0X_calc_timeout_us>
 800d476:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d47c:	601a      	str	r2, [r3, #0]

	return Status;
 800d47e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800d482:	4618      	mov	r0, r3
 800d484:	3730      	adds	r7, #48	; 0x30
 800d486:	46bd      	mov	sp, r7
 800d488:	bd80      	pop	{r7, pc}

0800d48a <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800d48a:	b580      	push	{r7, lr}
 800d48c:	b08a      	sub	sp, #40	; 0x28
 800d48e:	af00      	add	r7, sp, #0
 800d490:	60f8      	str	r0, [r7, #12]
 800d492:	460b      	mov	r3, r1
 800d494:	607a      	str	r2, [r7, #4]
 800d496:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d498:	2300      	movs	r3, #0
 800d49a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800d49e:	7afb      	ldrb	r3, [r7, #11]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d005      	beq.n	800d4b0 <set_sequence_step_timeout+0x26>
 800d4a4:	7afb      	ldrb	r3, [r7, #11]
 800d4a6:	2b01      	cmp	r3, #1
 800d4a8:	d002      	beq.n	800d4b0 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800d4aa:	7afb      	ldrb	r3, [r7, #11]
 800d4ac:	2b02      	cmp	r3, #2
 800d4ae:	d138      	bne.n	800d522 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d4b0:	f107 031b 	add.w	r3, r7, #27
 800d4b4:	461a      	mov	r2, r3
 800d4b6:	2100      	movs	r1, #0
 800d4b8:	68f8      	ldr	r0, [r7, #12]
 800d4ba:	f7fd f975 	bl	800a7a8 <VL53L0X_GetVcselPulsePeriod>
 800d4be:	4603      	mov	r3, r0
 800d4c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800d4c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d11a      	bne.n	800d502 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800d4cc:	7efb      	ldrb	r3, [r7, #27]
 800d4ce:	461a      	mov	r2, r3
 800d4d0:	6879      	ldr	r1, [r7, #4]
 800d4d2:	68f8      	ldr	r0, [r7, #12]
 800d4d4:	f7ff fea4 	bl	800d220 <VL53L0X_calc_timeout_mclks>
 800d4d8:	4603      	mov	r3, r0
 800d4da:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800d4dc:	8bbb      	ldrh	r3, [r7, #28]
 800d4de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d4e2:	d903      	bls.n	800d4ec <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800d4e4:	23ff      	movs	r3, #255	; 0xff
 800d4e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d4ea:	e004      	b.n	800d4f6 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800d4ec:	8bbb      	ldrh	r3, [r7, #28]
 800d4ee:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800d4f0:	3b01      	subs	r3, #1
 800d4f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d4f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d4fa:	b29a      	uxth	r2, r3
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800d502:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d506:	2b00      	cmp	r3, #0
 800d508:	f040 80ab 	bne.w	800d662 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 800d50c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d510:	461a      	mov	r2, r3
 800d512:	2146      	movs	r1, #70	; 0x46
 800d514:	68f8      	ldr	r0, [r7, #12]
 800d516:	f001 fc11 	bl	800ed3c <VL53L0X_WrByte>
 800d51a:	4603      	mov	r3, r0
 800d51c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800d520:	e09f      	b.n	800d662 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800d522:	7afb      	ldrb	r3, [r7, #11]
 800d524:	2b03      	cmp	r3, #3
 800d526:	d135      	bne.n	800d594 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800d528:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d11b      	bne.n	800d568 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d530:	f107 031b 	add.w	r3, r7, #27
 800d534:	461a      	mov	r2, r3
 800d536:	2100      	movs	r1, #0
 800d538:	68f8      	ldr	r0, [r7, #12]
 800d53a:	f7fd f935 	bl	800a7a8 <VL53L0X_GetVcselPulsePeriod>
 800d53e:	4603      	mov	r3, r0
 800d540:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800d544:	7efb      	ldrb	r3, [r7, #27]
 800d546:	461a      	mov	r2, r3
 800d548:	6879      	ldr	r1, [r7, #4]
 800d54a:	68f8      	ldr	r0, [r7, #12]
 800d54c:	f7ff fe68 	bl	800d220 <VL53L0X_calc_timeout_mclks>
 800d550:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800d552:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800d554:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d556:	4618      	mov	r0, r3
 800d558:	f7ff fe20 	bl	800d19c <VL53L0X_encode_timeout>
 800d55c:	4603      	mov	r3, r0
 800d55e:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d560:	8b3a      	ldrh	r2, [r7, #24]
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800d568:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d108      	bne.n	800d582 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800d570:	8b3b      	ldrh	r3, [r7, #24]
 800d572:	461a      	mov	r2, r3
 800d574:	2151      	movs	r1, #81	; 0x51
 800d576:	68f8      	ldr	r0, [r7, #12]
 800d578:	f001 fc04 	bl	800ed84 <VL53L0X_WrWord>
 800d57c:	4603      	mov	r3, r0
 800d57e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800d582:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d586:	2b00      	cmp	r3, #0
 800d588:	d16b      	bne.n	800d662 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	687a      	ldr	r2, [r7, #4]
 800d58e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800d592:	e066      	b.n	800d662 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800d594:	7afb      	ldrb	r3, [r7, #11]
 800d596:	2b04      	cmp	r3, #4
 800d598:	d160      	bne.n	800d65c <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800d59a:	f107 0310 	add.w	r3, r7, #16
 800d59e:	4619      	mov	r1, r3
 800d5a0:	68f8      	ldr	r0, [r7, #12]
 800d5a2:	f7fd fa0d 	bl	800a9c0 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800d5aa:	7cfb      	ldrb	r3, [r7, #19]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d01d      	beq.n	800d5ec <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d5b0:	f107 031b 	add.w	r3, r7, #27
 800d5b4:	461a      	mov	r2, r3
 800d5b6:	2100      	movs	r1, #0
 800d5b8:	68f8      	ldr	r0, [r7, #12]
 800d5ba:	f7fd f8f5 	bl	800a7a8 <VL53L0X_GetVcselPulsePeriod>
 800d5be:	4603      	mov	r3, r0
 800d5c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800d5c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d10f      	bne.n	800d5ec <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800d5cc:	f107 0318 	add.w	r3, r7, #24
 800d5d0:	461a      	mov	r2, r3
 800d5d2:	2151      	movs	r1, #81	; 0x51
 800d5d4:	68f8      	ldr	r0, [r7, #12]
 800d5d6:	f001 fc5d 	bl	800ee94 <VL53L0X_RdWord>
 800d5da:	4603      	mov	r3, r0
 800d5dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800d5e0:	8b3b      	ldrh	r3, [r7, #24]
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	f7ff fe06 	bl	800d1f4 <VL53L0X_decode_timeout>
 800d5e8:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800d5ea:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800d5ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d109      	bne.n	800d608 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d5f4:	f107 031b 	add.w	r3, r7, #27
 800d5f8:	461a      	mov	r2, r3
 800d5fa:	2101      	movs	r1, #1
 800d5fc:	68f8      	ldr	r0, [r7, #12]
 800d5fe:	f7fd f8d3 	bl	800a7a8 <VL53L0X_GetVcselPulsePeriod>
 800d602:	4603      	mov	r3, r0
 800d604:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800d608:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d128      	bne.n	800d662 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800d610:	7efb      	ldrb	r3, [r7, #27]
 800d612:	461a      	mov	r2, r3
 800d614:	6879      	ldr	r1, [r7, #4]
 800d616:	68f8      	ldr	r0, [r7, #12]
 800d618:	f7ff fe02 	bl	800d220 <VL53L0X_calc_timeout_mclks>
 800d61c:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800d61e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d620:	6a3a      	ldr	r2, [r7, #32]
 800d622:	4413      	add	r3, r2
 800d624:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800d626:	6a38      	ldr	r0, [r7, #32]
 800d628:	f7ff fdb8 	bl	800d19c <VL53L0X_encode_timeout>
 800d62c:	4603      	mov	r3, r0
 800d62e:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 800d630:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d634:	2b00      	cmp	r3, #0
 800d636:	d108      	bne.n	800d64a <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800d638:	8bfb      	ldrh	r3, [r7, #30]
 800d63a:	461a      	mov	r2, r3
 800d63c:	2171      	movs	r1, #113	; 0x71
 800d63e:	68f8      	ldr	r0, [r7, #12]
 800d640:	f001 fba0 	bl	800ed84 <VL53L0X_WrWord>
 800d644:	4603      	mov	r3, r0
 800d646:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800d64a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d107      	bne.n	800d662 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	687a      	ldr	r2, [r7, #4]
 800d656:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800d65a:	e002      	b.n	800d662 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d65c:	23fc      	movs	r3, #252	; 0xfc
 800d65e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800d662:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d666:	4618      	mov	r0, r3
 800d668:	3728      	adds	r7, #40	; 0x28
 800d66a:	46bd      	mov	sp, r7
 800d66c:	bd80      	pop	{r7, pc}

0800d66e <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800d66e:	b580      	push	{r7, lr}
 800d670:	b08a      	sub	sp, #40	; 0x28
 800d672:	af00      	add	r7, sp, #0
 800d674:	6078      	str	r0, [r7, #4]
 800d676:	460b      	mov	r3, r1
 800d678:	70fb      	strb	r3, [r7, #3]
 800d67a:	4613      	mov	r3, r2
 800d67c:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d67e:	2300      	movs	r3, #0
 800d680:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 800d684:	230c      	movs	r3, #12
 800d686:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800d68a:	2312      	movs	r3, #18
 800d68c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 800d690:	2308      	movs	r3, #8
 800d692:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800d696:	230e      	movs	r3, #14
 800d698:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 800d69c:	2300      	movs	r3, #0
 800d69e:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 800d6a0:	78bb      	ldrb	r3, [r7, #2]
 800d6a2:	f003 0301 	and.w	r3, r3, #1
 800d6a6:	b2db      	uxtb	r3, r3
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d003      	beq.n	800d6b4 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d6ac:	23fc      	movs	r3, #252	; 0xfc
 800d6ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d6b2:	e020      	b.n	800d6f6 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 800d6b4:	78fb      	ldrb	r3, [r7, #3]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d10d      	bne.n	800d6d6 <VL53L0X_set_vcsel_pulse_period+0x68>
 800d6ba:	78ba      	ldrb	r2, [r7, #2]
 800d6bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d6c0:	429a      	cmp	r2, r3
 800d6c2:	d304      	bcc.n	800d6ce <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 800d6c4:	78ba      	ldrb	r2, [r7, #2]
 800d6c6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d6ca:	429a      	cmp	r2, r3
 800d6cc:	d903      	bls.n	800d6d6 <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d6ce:	23fc      	movs	r3, #252	; 0xfc
 800d6d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d6d4:	e00f      	b.n	800d6f6 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800d6d6:	78fb      	ldrb	r3, [r7, #3]
 800d6d8:	2b01      	cmp	r3, #1
 800d6da:	d10c      	bne.n	800d6f6 <VL53L0X_set_vcsel_pulse_period+0x88>
 800d6dc:	78ba      	ldrb	r2, [r7, #2]
 800d6de:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d6e2:	429a      	cmp	r2, r3
 800d6e4:	d304      	bcc.n	800d6f0 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800d6e6:	78ba      	ldrb	r2, [r7, #2]
 800d6e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d6ec:	429a      	cmp	r2, r3
 800d6ee:	d902      	bls.n	800d6f6 <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d6f0:	23fc      	movs	r3, #252	; 0xfc
 800d6f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800d6f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d002      	beq.n	800d704 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 800d6fe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d702:	e239      	b.n	800db78 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 800d704:	78fb      	ldrb	r3, [r7, #3]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d150      	bne.n	800d7ac <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 800d70a:	78bb      	ldrb	r3, [r7, #2]
 800d70c:	2b0c      	cmp	r3, #12
 800d70e:	d110      	bne.n	800d732 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 800d710:	2218      	movs	r2, #24
 800d712:	2157      	movs	r1, #87	; 0x57
 800d714:	6878      	ldr	r0, [r7, #4]
 800d716:	f001 fb11 	bl	800ed3c <VL53L0X_WrByte>
 800d71a:	4603      	mov	r3, r0
 800d71c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 800d720:	2208      	movs	r2, #8
 800d722:	2156      	movs	r1, #86	; 0x56
 800d724:	6878      	ldr	r0, [r7, #4]
 800d726:	f001 fb09 	bl	800ed3c <VL53L0X_WrByte>
 800d72a:	4603      	mov	r3, r0
 800d72c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d730:	e17f      	b.n	800da32 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 800d732:	78bb      	ldrb	r3, [r7, #2]
 800d734:	2b0e      	cmp	r3, #14
 800d736:	d110      	bne.n	800d75a <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 800d738:	2230      	movs	r2, #48	; 0x30
 800d73a:	2157      	movs	r1, #87	; 0x57
 800d73c:	6878      	ldr	r0, [r7, #4]
 800d73e:	f001 fafd 	bl	800ed3c <VL53L0X_WrByte>
 800d742:	4603      	mov	r3, r0
 800d744:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 800d748:	2208      	movs	r2, #8
 800d74a:	2156      	movs	r1, #86	; 0x56
 800d74c:	6878      	ldr	r0, [r7, #4]
 800d74e:	f001 faf5 	bl	800ed3c <VL53L0X_WrByte>
 800d752:	4603      	mov	r3, r0
 800d754:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d758:	e16b      	b.n	800da32 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 800d75a:	78bb      	ldrb	r3, [r7, #2]
 800d75c:	2b10      	cmp	r3, #16
 800d75e:	d110      	bne.n	800d782 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 800d760:	2240      	movs	r2, #64	; 0x40
 800d762:	2157      	movs	r1, #87	; 0x57
 800d764:	6878      	ldr	r0, [r7, #4]
 800d766:	f001 fae9 	bl	800ed3c <VL53L0X_WrByte>
 800d76a:	4603      	mov	r3, r0
 800d76c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 800d770:	2208      	movs	r2, #8
 800d772:	2156      	movs	r1, #86	; 0x56
 800d774:	6878      	ldr	r0, [r7, #4]
 800d776:	f001 fae1 	bl	800ed3c <VL53L0X_WrByte>
 800d77a:	4603      	mov	r3, r0
 800d77c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d780:	e157      	b.n	800da32 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800d782:	78bb      	ldrb	r3, [r7, #2]
 800d784:	2b12      	cmp	r3, #18
 800d786:	f040 8154 	bne.w	800da32 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800d78a:	2250      	movs	r2, #80	; 0x50
 800d78c:	2157      	movs	r1, #87	; 0x57
 800d78e:	6878      	ldr	r0, [r7, #4]
 800d790:	f001 fad4 	bl	800ed3c <VL53L0X_WrByte>
 800d794:	4603      	mov	r3, r0
 800d796:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800d79a:	2208      	movs	r2, #8
 800d79c:	2156      	movs	r1, #86	; 0x56
 800d79e:	6878      	ldr	r0, [r7, #4]
 800d7a0:	f001 facc 	bl	800ed3c <VL53L0X_WrByte>
 800d7a4:	4603      	mov	r3, r0
 800d7a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d7aa:	e142      	b.n	800da32 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 800d7ac:	78fb      	ldrb	r3, [r7, #3]
 800d7ae:	2b01      	cmp	r3, #1
 800d7b0:	f040 813f 	bne.w	800da32 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 800d7b4:	78bb      	ldrb	r3, [r7, #2]
 800d7b6:	2b08      	cmp	r3, #8
 800d7b8:	d14c      	bne.n	800d854 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 800d7ba:	2210      	movs	r2, #16
 800d7bc:	2148      	movs	r1, #72	; 0x48
 800d7be:	6878      	ldr	r0, [r7, #4]
 800d7c0:	f001 fabc 	bl	800ed3c <VL53L0X_WrByte>
 800d7c4:	4603      	mov	r3, r0
 800d7c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800d7ca:	2208      	movs	r2, #8
 800d7cc:	2147      	movs	r1, #71	; 0x47
 800d7ce:	6878      	ldr	r0, [r7, #4]
 800d7d0:	f001 fab4 	bl	800ed3c <VL53L0X_WrByte>
 800d7d4:	4603      	mov	r3, r0
 800d7d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800d7da:	2202      	movs	r2, #2
 800d7dc:	2132      	movs	r1, #50	; 0x32
 800d7de:	6878      	ldr	r0, [r7, #4]
 800d7e0:	f001 faac 	bl	800ed3c <VL53L0X_WrByte>
 800d7e4:	4603      	mov	r3, r0
 800d7e6:	461a      	mov	r2, r3
 800d7e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d7ec:	4313      	orrs	r3, r2
 800d7ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800d7f2:	220c      	movs	r2, #12
 800d7f4:	2130      	movs	r1, #48	; 0x30
 800d7f6:	6878      	ldr	r0, [r7, #4]
 800d7f8:	f001 faa0 	bl	800ed3c <VL53L0X_WrByte>
 800d7fc:	4603      	mov	r3, r0
 800d7fe:	461a      	mov	r2, r3
 800d800:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d804:	4313      	orrs	r3, r2
 800d806:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800d80a:	2201      	movs	r2, #1
 800d80c:	21ff      	movs	r1, #255	; 0xff
 800d80e:	6878      	ldr	r0, [r7, #4]
 800d810:	f001 fa94 	bl	800ed3c <VL53L0X_WrByte>
 800d814:	4603      	mov	r3, r0
 800d816:	461a      	mov	r2, r3
 800d818:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d81c:	4313      	orrs	r3, r2
 800d81e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800d822:	2230      	movs	r2, #48	; 0x30
 800d824:	2130      	movs	r1, #48	; 0x30
 800d826:	6878      	ldr	r0, [r7, #4]
 800d828:	f001 fa88 	bl	800ed3c <VL53L0X_WrByte>
 800d82c:	4603      	mov	r3, r0
 800d82e:	461a      	mov	r2, r3
 800d830:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d834:	4313      	orrs	r3, r2
 800d836:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800d83a:	2200      	movs	r2, #0
 800d83c:	21ff      	movs	r1, #255	; 0xff
 800d83e:	6878      	ldr	r0, [r7, #4]
 800d840:	f001 fa7c 	bl	800ed3c <VL53L0X_WrByte>
 800d844:	4603      	mov	r3, r0
 800d846:	461a      	mov	r2, r3
 800d848:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d84c:	4313      	orrs	r3, r2
 800d84e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d852:	e0ee      	b.n	800da32 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 800d854:	78bb      	ldrb	r3, [r7, #2]
 800d856:	2b0a      	cmp	r3, #10
 800d858:	d14c      	bne.n	800d8f4 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 800d85a:	2228      	movs	r2, #40	; 0x28
 800d85c:	2148      	movs	r1, #72	; 0x48
 800d85e:	6878      	ldr	r0, [r7, #4]
 800d860:	f001 fa6c 	bl	800ed3c <VL53L0X_WrByte>
 800d864:	4603      	mov	r3, r0
 800d866:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 800d86a:	2208      	movs	r2, #8
 800d86c:	2147      	movs	r1, #71	; 0x47
 800d86e:	6878      	ldr	r0, [r7, #4]
 800d870:	f001 fa64 	bl	800ed3c <VL53L0X_WrByte>
 800d874:	4603      	mov	r3, r0
 800d876:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800d87a:	2203      	movs	r2, #3
 800d87c:	2132      	movs	r1, #50	; 0x32
 800d87e:	6878      	ldr	r0, [r7, #4]
 800d880:	f001 fa5c 	bl	800ed3c <VL53L0X_WrByte>
 800d884:	4603      	mov	r3, r0
 800d886:	461a      	mov	r2, r3
 800d888:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d88c:	4313      	orrs	r3, r2
 800d88e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800d892:	2209      	movs	r2, #9
 800d894:	2130      	movs	r1, #48	; 0x30
 800d896:	6878      	ldr	r0, [r7, #4]
 800d898:	f001 fa50 	bl	800ed3c <VL53L0X_WrByte>
 800d89c:	4603      	mov	r3, r0
 800d89e:	461a      	mov	r2, r3
 800d8a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d8a4:	4313      	orrs	r3, r2
 800d8a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800d8aa:	2201      	movs	r2, #1
 800d8ac:	21ff      	movs	r1, #255	; 0xff
 800d8ae:	6878      	ldr	r0, [r7, #4]
 800d8b0:	f001 fa44 	bl	800ed3c <VL53L0X_WrByte>
 800d8b4:	4603      	mov	r3, r0
 800d8b6:	461a      	mov	r2, r3
 800d8b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d8bc:	4313      	orrs	r3, r2
 800d8be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800d8c2:	2220      	movs	r2, #32
 800d8c4:	2130      	movs	r1, #48	; 0x30
 800d8c6:	6878      	ldr	r0, [r7, #4]
 800d8c8:	f001 fa38 	bl	800ed3c <VL53L0X_WrByte>
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	461a      	mov	r2, r3
 800d8d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d8d4:	4313      	orrs	r3, r2
 800d8d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800d8da:	2200      	movs	r2, #0
 800d8dc:	21ff      	movs	r1, #255	; 0xff
 800d8de:	6878      	ldr	r0, [r7, #4]
 800d8e0:	f001 fa2c 	bl	800ed3c <VL53L0X_WrByte>
 800d8e4:	4603      	mov	r3, r0
 800d8e6:	461a      	mov	r2, r3
 800d8e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d8ec:	4313      	orrs	r3, r2
 800d8ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d8f2:	e09e      	b.n	800da32 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800d8f4:	78bb      	ldrb	r3, [r7, #2]
 800d8f6:	2b0c      	cmp	r3, #12
 800d8f8:	d14c      	bne.n	800d994 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 800d8fa:	2238      	movs	r2, #56	; 0x38
 800d8fc:	2148      	movs	r1, #72	; 0x48
 800d8fe:	6878      	ldr	r0, [r7, #4]
 800d900:	f001 fa1c 	bl	800ed3c <VL53L0X_WrByte>
 800d904:	4603      	mov	r3, r0
 800d906:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 800d90a:	2208      	movs	r2, #8
 800d90c:	2147      	movs	r1, #71	; 0x47
 800d90e:	6878      	ldr	r0, [r7, #4]
 800d910:	f001 fa14 	bl	800ed3c <VL53L0X_WrByte>
 800d914:	4603      	mov	r3, r0
 800d916:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800d91a:	2203      	movs	r2, #3
 800d91c:	2132      	movs	r1, #50	; 0x32
 800d91e:	6878      	ldr	r0, [r7, #4]
 800d920:	f001 fa0c 	bl	800ed3c <VL53L0X_WrByte>
 800d924:	4603      	mov	r3, r0
 800d926:	461a      	mov	r2, r3
 800d928:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d92c:	4313      	orrs	r3, r2
 800d92e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800d932:	2208      	movs	r2, #8
 800d934:	2130      	movs	r1, #48	; 0x30
 800d936:	6878      	ldr	r0, [r7, #4]
 800d938:	f001 fa00 	bl	800ed3c <VL53L0X_WrByte>
 800d93c:	4603      	mov	r3, r0
 800d93e:	461a      	mov	r2, r3
 800d940:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d944:	4313      	orrs	r3, r2
 800d946:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800d94a:	2201      	movs	r2, #1
 800d94c:	21ff      	movs	r1, #255	; 0xff
 800d94e:	6878      	ldr	r0, [r7, #4]
 800d950:	f001 f9f4 	bl	800ed3c <VL53L0X_WrByte>
 800d954:	4603      	mov	r3, r0
 800d956:	461a      	mov	r2, r3
 800d958:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d95c:	4313      	orrs	r3, r2
 800d95e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800d962:	2220      	movs	r2, #32
 800d964:	2130      	movs	r1, #48	; 0x30
 800d966:	6878      	ldr	r0, [r7, #4]
 800d968:	f001 f9e8 	bl	800ed3c <VL53L0X_WrByte>
 800d96c:	4603      	mov	r3, r0
 800d96e:	461a      	mov	r2, r3
 800d970:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d974:	4313      	orrs	r3, r2
 800d976:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800d97a:	2200      	movs	r2, #0
 800d97c:	21ff      	movs	r1, #255	; 0xff
 800d97e:	6878      	ldr	r0, [r7, #4]
 800d980:	f001 f9dc 	bl	800ed3c <VL53L0X_WrByte>
 800d984:	4603      	mov	r3, r0
 800d986:	461a      	mov	r2, r3
 800d988:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d98c:	4313      	orrs	r3, r2
 800d98e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d992:	e04e      	b.n	800da32 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 800d994:	78bb      	ldrb	r3, [r7, #2]
 800d996:	2b0e      	cmp	r3, #14
 800d998:	d14b      	bne.n	800da32 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800d99a:	2248      	movs	r2, #72	; 0x48
 800d99c:	2148      	movs	r1, #72	; 0x48
 800d99e:	6878      	ldr	r0, [r7, #4]
 800d9a0:	f001 f9cc 	bl	800ed3c <VL53L0X_WrByte>
 800d9a4:	4603      	mov	r3, r0
 800d9a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800d9aa:	2208      	movs	r2, #8
 800d9ac:	2147      	movs	r1, #71	; 0x47
 800d9ae:	6878      	ldr	r0, [r7, #4]
 800d9b0:	f001 f9c4 	bl	800ed3c <VL53L0X_WrByte>
 800d9b4:	4603      	mov	r3, r0
 800d9b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800d9ba:	2203      	movs	r2, #3
 800d9bc:	2132      	movs	r1, #50	; 0x32
 800d9be:	6878      	ldr	r0, [r7, #4]
 800d9c0:	f001 f9bc 	bl	800ed3c <VL53L0X_WrByte>
 800d9c4:	4603      	mov	r3, r0
 800d9c6:	461a      	mov	r2, r3
 800d9c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d9cc:	4313      	orrs	r3, r2
 800d9ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800d9d2:	2207      	movs	r2, #7
 800d9d4:	2130      	movs	r1, #48	; 0x30
 800d9d6:	6878      	ldr	r0, [r7, #4]
 800d9d8:	f001 f9b0 	bl	800ed3c <VL53L0X_WrByte>
 800d9dc:	4603      	mov	r3, r0
 800d9de:	461a      	mov	r2, r3
 800d9e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d9e4:	4313      	orrs	r3, r2
 800d9e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800d9ea:	2201      	movs	r2, #1
 800d9ec:	21ff      	movs	r1, #255	; 0xff
 800d9ee:	6878      	ldr	r0, [r7, #4]
 800d9f0:	f001 f9a4 	bl	800ed3c <VL53L0X_WrByte>
 800d9f4:	4603      	mov	r3, r0
 800d9f6:	461a      	mov	r2, r3
 800d9f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d9fc:	4313      	orrs	r3, r2
 800d9fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800da02:	2220      	movs	r2, #32
 800da04:	2130      	movs	r1, #48	; 0x30
 800da06:	6878      	ldr	r0, [r7, #4]
 800da08:	f001 f998 	bl	800ed3c <VL53L0X_WrByte>
 800da0c:	4603      	mov	r3, r0
 800da0e:	461a      	mov	r2, r3
 800da10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da14:	4313      	orrs	r3, r2
 800da16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800da1a:	2200      	movs	r2, #0
 800da1c:	21ff      	movs	r1, #255	; 0xff
 800da1e:	6878      	ldr	r0, [r7, #4]
 800da20:	f001 f98c 	bl	800ed3c <VL53L0X_WrByte>
 800da24:	4603      	mov	r3, r0
 800da26:	461a      	mov	r2, r3
 800da28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da2c:	4313      	orrs	r3, r2
 800da2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 800da32:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800da36:	2b00      	cmp	r3, #0
 800da38:	d17f      	bne.n	800db3a <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 800da3a:	78bb      	ldrb	r3, [r7, #2]
 800da3c:	4618      	mov	r0, r3
 800da3e:	f7fe fe38 	bl	800c6b2 <VL53L0X_encode_vcsel_period>
 800da42:	4603      	mov	r3, r0
 800da44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 800da48:	78fb      	ldrb	r3, [r7, #3]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d002      	beq.n	800da54 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 800da4e:	2b01      	cmp	r3, #1
 800da50:	d045      	beq.n	800dade <VL53L0X_set_vcsel_pulse_period+0x470>
 800da52:	e06e      	b.n	800db32 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800da54:	f107 0314 	add.w	r3, r7, #20
 800da58:	461a      	mov	r2, r3
 800da5a:	2103      	movs	r1, #3
 800da5c:	6878      	ldr	r0, [r7, #4]
 800da5e:	f7ff fc33 	bl	800d2c8 <get_sequence_step_timeout>
 800da62:	4603      	mov	r3, r0
 800da64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800da68:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d109      	bne.n	800da84 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 800da70:	f107 0310 	add.w	r3, r7, #16
 800da74:	461a      	mov	r2, r3
 800da76:	2102      	movs	r1, #2
 800da78:	6878      	ldr	r0, [r7, #4]
 800da7a:	f7ff fc25 	bl	800d2c8 <get_sequence_step_timeout>
 800da7e:	4603      	mov	r3, r0
 800da80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800da84:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d109      	bne.n	800daa0 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 800da8c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800da90:	461a      	mov	r2, r3
 800da92:	2150      	movs	r1, #80	; 0x50
 800da94:	6878      	ldr	r0, [r7, #4]
 800da96:	f001 f951 	bl	800ed3c <VL53L0X_WrByte>
 800da9a:	4603      	mov	r3, r0
 800da9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800daa0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d108      	bne.n	800daba <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 800daa8:	697b      	ldr	r3, [r7, #20]
 800daaa:	461a      	mov	r2, r3
 800daac:	2103      	movs	r1, #3
 800daae:	6878      	ldr	r0, [r7, #4]
 800dab0:	f7ff fceb 	bl	800d48a <set_sequence_step_timeout>
 800dab4:	4603      	mov	r3, r0
 800dab6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800daba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d108      	bne.n	800dad4 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800dac2:	693b      	ldr	r3, [r7, #16]
 800dac4:	461a      	mov	r2, r3
 800dac6:	2102      	movs	r1, #2
 800dac8:	6878      	ldr	r0, [r7, #4]
 800daca:	f7ff fcde 	bl	800d48a <set_sequence_step_timeout>
 800dace:	4603      	mov	r3, r0
 800dad0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	78ba      	ldrb	r2, [r7, #2]
 800dad8:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800dadc:	e02e      	b.n	800db3c <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800dade:	f107 0318 	add.w	r3, r7, #24
 800dae2:	461a      	mov	r2, r3
 800dae4:	2104      	movs	r1, #4
 800dae6:	6878      	ldr	r0, [r7, #4]
 800dae8:	f7ff fbee 	bl	800d2c8 <get_sequence_step_timeout>
 800daec:	4603      	mov	r3, r0
 800daee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800daf2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d109      	bne.n	800db0e <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 800dafa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800dafe:	461a      	mov	r2, r3
 800db00:	2170      	movs	r1, #112	; 0x70
 800db02:	6878      	ldr	r0, [r7, #4]
 800db04:	f001 f91a 	bl	800ed3c <VL53L0X_WrByte>
 800db08:	4603      	mov	r3, r0
 800db0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800db0e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800db12:	2b00      	cmp	r3, #0
 800db14:	d108      	bne.n	800db28 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 800db16:	69bb      	ldr	r3, [r7, #24]
 800db18:	461a      	mov	r2, r3
 800db1a:	2104      	movs	r1, #4
 800db1c:	6878      	ldr	r0, [r7, #4]
 800db1e:	f7ff fcb4 	bl	800d48a <set_sequence_step_timeout>
 800db22:	4603      	mov	r3, r0
 800db24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	78ba      	ldrb	r2, [r7, #2]
 800db2c:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800db30:	e004      	b.n	800db3c <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800db32:	23fc      	movs	r3, #252	; 0xfc
 800db34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800db38:	e000      	b.n	800db3c <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 800db3a:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 800db3c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800db40:	2b00      	cmp	r3, #0
 800db42:	d109      	bne.n	800db58 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	695b      	ldr	r3, [r3, #20]
 800db48:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800db4a:	69f9      	ldr	r1, [r7, #28]
 800db4c:	6878      	ldr	r0, [r7, #4]
 800db4e:	f7fc fded 	bl	800a72c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800db52:	4603      	mov	r3, r0
 800db54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 800db58:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d109      	bne.n	800db74 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 800db60:	f107 010f 	add.w	r1, r7, #15
 800db64:	2301      	movs	r3, #1
 800db66:	2200      	movs	r2, #0
 800db68:	6878      	ldr	r0, [r7, #4]
 800db6a:	f7fe fcbd 	bl	800c4e8 <VL53L0X_perform_phase_calibration>
 800db6e:	4603      	mov	r3, r0
 800db70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 800db74:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800db78:	4618      	mov	r0, r3
 800db7a:	3728      	adds	r7, #40	; 0x28
 800db7c:	46bd      	mov	sp, r7
 800db7e:	bd80      	pop	{r7, pc}

0800db80 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800db80:	b580      	push	{r7, lr}
 800db82:	b086      	sub	sp, #24
 800db84:	af00      	add	r7, sp, #0
 800db86:	60f8      	str	r0, [r7, #12]
 800db88:	460b      	mov	r3, r1
 800db8a:	607a      	str	r2, [r7, #4]
 800db8c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800db8e:	2300      	movs	r3, #0
 800db90:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800db92:	7afb      	ldrb	r3, [r7, #11]
 800db94:	2b00      	cmp	r3, #0
 800db96:	d002      	beq.n	800db9e <VL53L0X_get_vcsel_pulse_period+0x1e>
 800db98:	2b01      	cmp	r3, #1
 800db9a:	d00a      	beq.n	800dbb2 <VL53L0X_get_vcsel_pulse_period+0x32>
 800db9c:	e013      	b.n	800dbc6 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800db9e:	f107 0316 	add.w	r3, r7, #22
 800dba2:	461a      	mov	r2, r3
 800dba4:	2150      	movs	r1, #80	; 0x50
 800dba6:	68f8      	ldr	r0, [r7, #12]
 800dba8:	f001 f94a 	bl	800ee40 <VL53L0X_RdByte>
 800dbac:	4603      	mov	r3, r0
 800dbae:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800dbb0:	e00b      	b.n	800dbca <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800dbb2:	f107 0316 	add.w	r3, r7, #22
 800dbb6:	461a      	mov	r2, r3
 800dbb8:	2170      	movs	r1, #112	; 0x70
 800dbba:	68f8      	ldr	r0, [r7, #12]
 800dbbc:	f001 f940 	bl	800ee40 <VL53L0X_RdByte>
 800dbc0:	4603      	mov	r3, r0
 800dbc2:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800dbc4:	e001      	b.n	800dbca <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800dbc6:	23fc      	movs	r3, #252	; 0xfc
 800dbc8:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800dbca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d107      	bne.n	800dbe2 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800dbd2:	7dbb      	ldrb	r3, [r7, #22]
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	f7fe fd59 	bl	800c68c <VL53L0X_decode_vcsel_period>
 800dbda:	4603      	mov	r3, r0
 800dbdc:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	701a      	strb	r2, [r3, #0]

	return Status;
 800dbe2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	3718      	adds	r7, #24
 800dbea:	46bd      	mov	sp, r7
 800dbec:	bd80      	pop	{r7, pc}

0800dbee <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800dbee:	b580      	push	{r7, lr}
 800dbf0:	b092      	sub	sp, #72	; 0x48
 800dbf2:	af00      	add	r7, sp, #0
 800dbf4:	6078      	str	r0, [r7, #4]
 800dbf6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800dbf8:	2300      	movs	r3, #0
 800dbfa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800dbfe:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800dc02:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800dc04:	f240 7376 	movw	r3, #1910	; 0x776
 800dc08:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800dc0a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800dc0e:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800dc10:	f44f 7325 	mov.w	r3, #660	; 0x294
 800dc14:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800dc16:	f240 234e 	movw	r3, #590	; 0x24e
 800dc1a:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800dc1c:	f240 23b2 	movw	r3, #690	; 0x2b2
 800dc20:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800dc22:	f44f 7325 	mov.w	r3, #660	; 0x294
 800dc26:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800dc28:	f240 2326 	movw	r3, #550	; 0x226
 800dc2c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800dc2e:	2300      	movs	r3, #0
 800dc30:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800dc32:	f644 6320 	movw	r3, #20000	; 0x4e20
 800dc36:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800dc38:	2300      	movs	r3, #0
 800dc3a:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800dc3c:	683a      	ldr	r2, [r7, #0]
 800dc3e:	6a3b      	ldr	r3, [r7, #32]
 800dc40:	429a      	cmp	r2, r3
 800dc42:	d205      	bcs.n	800dc50 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800dc44:	23fc      	movs	r3, #252	; 0xfc
 800dc46:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800dc4a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800dc4e:	e0aa      	b.n	800dda6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800dc50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dc52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc54:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800dc56:	683a      	ldr	r2, [r7, #0]
 800dc58:	1ad3      	subs	r3, r2, r3
 800dc5a:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800dc5c:	f107 0314 	add.w	r3, r7, #20
 800dc60:	4619      	mov	r1, r3
 800dc62:	6878      	ldr	r0, [r7, #4]
 800dc64:	f7fc feac 	bl	800a9c0 <VL53L0X_GetSequenceStepEnables>
 800dc68:	4603      	mov	r3, r0
 800dc6a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800dc6e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d15b      	bne.n	800dd2e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800dc76:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d105      	bne.n	800dc88 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800dc7c:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d102      	bne.n	800dc88 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800dc82:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d052      	beq.n	800dd2e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800dc88:	f107 0310 	add.w	r3, r7, #16
 800dc8c:	461a      	mov	r2, r3
 800dc8e:	2102      	movs	r1, #2
 800dc90:	6878      	ldr	r0, [r7, #4]
 800dc92:	f7ff fb19 	bl	800d2c8 <get_sequence_step_timeout>
 800dc96:	4603      	mov	r3, r0
 800dc98:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800dc9c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d002      	beq.n	800dcaa <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800dca4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800dca8:	e07d      	b.n	800dda6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800dcaa:	7d3b      	ldrb	r3, [r7, #20]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d00f      	beq.n	800dcd0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800dcb0:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800dcb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dcb4:	4413      	add	r3, r2
 800dcb6:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800dcb8:	69fa      	ldr	r2, [r7, #28]
 800dcba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dcbc:	429a      	cmp	r2, r3
 800dcbe:	d204      	bcs.n	800dcca <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800dcc0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dcc2:	69fb      	ldr	r3, [r7, #28]
 800dcc4:	1ad3      	subs	r3, r2, r3
 800dcc6:	643b      	str	r3, [r7, #64]	; 0x40
 800dcc8:	e002      	b.n	800dcd0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800dcca:	23fc      	movs	r3, #252	; 0xfc
 800dccc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800dcd0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d002      	beq.n	800dcde <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800dcd8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800dcdc:	e063      	b.n	800dda6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800dcde:	7dbb      	ldrb	r3, [r7, #22]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d011      	beq.n	800dd08 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800dce4:	693a      	ldr	r2, [r7, #16]
 800dce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dce8:	4413      	add	r3, r2
 800dcea:	005b      	lsls	r3, r3, #1
 800dcec:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800dcee:	69fa      	ldr	r2, [r7, #28]
 800dcf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dcf2:	429a      	cmp	r2, r3
 800dcf4:	d204      	bcs.n	800dd00 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800dcf6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dcf8:	69fb      	ldr	r3, [r7, #28]
 800dcfa:	1ad3      	subs	r3, r2, r3
 800dcfc:	643b      	str	r3, [r7, #64]	; 0x40
 800dcfe:	e016      	b.n	800dd2e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800dd00:	23fc      	movs	r3, #252	; 0xfc
 800dd02:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800dd06:	e012      	b.n	800dd2e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800dd08:	7d7b      	ldrb	r3, [r7, #21]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d00f      	beq.n	800dd2e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800dd0e:	693b      	ldr	r3, [r7, #16]
 800dd10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dd12:	4413      	add	r3, r2
 800dd14:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800dd16:	69fa      	ldr	r2, [r7, #28]
 800dd18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd1a:	429a      	cmp	r2, r3
 800dd1c:	d204      	bcs.n	800dd28 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800dd1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dd20:	69fb      	ldr	r3, [r7, #28]
 800dd22:	1ad3      	subs	r3, r2, r3
 800dd24:	643b      	str	r3, [r7, #64]	; 0x40
 800dd26:	e002      	b.n	800dd2e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800dd28:	23fc      	movs	r3, #252	; 0xfc
 800dd2a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800dd2e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d002      	beq.n	800dd3c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800dd36:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800dd3a:	e034      	b.n	800dda6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800dd3c:	7dfb      	ldrb	r3, [r7, #23]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d019      	beq.n	800dd76 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800dd42:	f107 030c 	add.w	r3, r7, #12
 800dd46:	461a      	mov	r2, r3
 800dd48:	2103      	movs	r1, #3
 800dd4a:	6878      	ldr	r0, [r7, #4]
 800dd4c:	f7ff fabc 	bl	800d2c8 <get_sequence_step_timeout>
 800dd50:	4603      	mov	r3, r0
 800dd52:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dd5a:	4413      	add	r3, r2
 800dd5c:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800dd5e:	69fa      	ldr	r2, [r7, #28]
 800dd60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd62:	429a      	cmp	r2, r3
 800dd64:	d204      	bcs.n	800dd70 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800dd66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dd68:	69fb      	ldr	r3, [r7, #28]
 800dd6a:	1ad3      	subs	r3, r2, r3
 800dd6c:	643b      	str	r3, [r7, #64]	; 0x40
 800dd6e:	e002      	b.n	800dd76 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800dd70:	23fc      	movs	r3, #252	; 0xfc
 800dd72:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800dd76:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d111      	bne.n	800dda2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800dd7e:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d00e      	beq.n	800dda2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800dd84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dd86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd88:	1ad3      	subs	r3, r2, r3
 800dd8a:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800dd8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dd8e:	2104      	movs	r1, #4
 800dd90:	6878      	ldr	r0, [r7, #4]
 800dd92:	f7ff fb7a 	bl	800d48a <set_sequence_step_timeout>
 800dd96:	4603      	mov	r3, r0
 800dd98:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	683a      	ldr	r2, [r7, #0]
 800dda0:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800dda2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800dda6:	4618      	mov	r0, r3
 800dda8:	3748      	adds	r7, #72	; 0x48
 800ddaa:	46bd      	mov	sp, r7
 800ddac:	bd80      	pop	{r7, pc}

0800ddae <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800ddae:	b580      	push	{r7, lr}
 800ddb0:	b090      	sub	sp, #64	; 0x40
 800ddb2:	af00      	add	r7, sp, #0
 800ddb4:	6078      	str	r0, [r7, #4]
 800ddb6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ddb8:	2300      	movs	r3, #0
 800ddba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800ddbe:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800ddc2:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800ddc4:	f240 7376 	movw	r3, #1910	; 0x776
 800ddc8:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800ddca:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800ddce:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800ddd0:	f44f 7325 	mov.w	r3, #660	; 0x294
 800ddd4:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800ddd6:	f240 234e 	movw	r3, #590	; 0x24e
 800ddda:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800dddc:	f240 23b2 	movw	r3, #690	; 0x2b2
 800dde0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800dde2:	f44f 7325 	mov.w	r3, #660	; 0x294
 800dde6:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800dde8:	f240 2326 	movw	r3, #550	; 0x226
 800ddec:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800ddee:	2300      	movs	r3, #0
 800ddf0:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800ddf2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ddf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddf6:	441a      	add	r2, r3
 800ddf8:	683b      	ldr	r3, [r7, #0]
 800ddfa:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800ddfc:	f107 0318 	add.w	r3, r7, #24
 800de00:	4619      	mov	r1, r3
 800de02:	6878      	ldr	r0, [r7, #4]
 800de04:	f7fc fddc 	bl	800a9c0 <VL53L0X_GetSequenceStepEnables>
 800de08:	4603      	mov	r3, r0
 800de0a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800de0e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800de12:	2b00      	cmp	r3, #0
 800de14:	d002      	beq.n	800de1c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800de16:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800de1a:	e075      	b.n	800df08 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800de1c:	7e3b      	ldrb	r3, [r7, #24]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d105      	bne.n	800de2e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800de22:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800de24:	2b00      	cmp	r3, #0
 800de26:	d102      	bne.n	800de2e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800de28:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d030      	beq.n	800de90 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800de2e:	f107 0310 	add.w	r3, r7, #16
 800de32:	461a      	mov	r2, r3
 800de34:	2102      	movs	r1, #2
 800de36:	6878      	ldr	r0, [r7, #4]
 800de38:	f7ff fa46 	bl	800d2c8 <get_sequence_step_timeout>
 800de3c:	4603      	mov	r3, r0
 800de3e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800de42:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800de46:	2b00      	cmp	r3, #0
 800de48:	d122      	bne.n	800de90 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800de4a:	7e3b      	ldrb	r3, [r7, #24]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d007      	beq.n	800de60 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800de50:	683b      	ldr	r3, [r7, #0]
 800de52:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800de54:	6939      	ldr	r1, [r7, #16]
 800de56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de58:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800de5a:	441a      	add	r2, r3
 800de5c:	683b      	ldr	r3, [r7, #0]
 800de5e:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800de60:	7ebb      	ldrb	r3, [r7, #26]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d009      	beq.n	800de7a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800de66:	683b      	ldr	r3, [r7, #0]
 800de68:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800de6a:	6939      	ldr	r1, [r7, #16]
 800de6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de6e:	440b      	add	r3, r1
 800de70:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800de72:	441a      	add	r2, r3
 800de74:	683b      	ldr	r3, [r7, #0]
 800de76:	601a      	str	r2, [r3, #0]
 800de78:	e00a      	b.n	800de90 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800de7a:	7e7b      	ldrb	r3, [r7, #25]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d007      	beq.n	800de90 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800de80:	683b      	ldr	r3, [r7, #0]
 800de82:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800de84:	6939      	ldr	r1, [r7, #16]
 800de86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de88:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800de8a:	441a      	add	r2, r3
 800de8c:	683b      	ldr	r3, [r7, #0]
 800de8e:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800de90:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800de94:	2b00      	cmp	r3, #0
 800de96:	d114      	bne.n	800dec2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800de98:	7efb      	ldrb	r3, [r7, #27]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d011      	beq.n	800dec2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800de9e:	f107 030c 	add.w	r3, r7, #12
 800dea2:	461a      	mov	r2, r3
 800dea4:	2103      	movs	r1, #3
 800dea6:	6878      	ldr	r0, [r7, #4]
 800dea8:	f7ff fa0e 	bl	800d2c8 <get_sequence_step_timeout>
 800deac:	4603      	mov	r3, r0
 800deae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800deb2:	683b      	ldr	r3, [r7, #0]
 800deb4:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800deb6:	68f9      	ldr	r1, [r7, #12]
 800deb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deba:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800debc:	441a      	add	r2, r3
 800debe:	683b      	ldr	r3, [r7, #0]
 800dec0:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800dec2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d114      	bne.n	800def4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800deca:	7f3b      	ldrb	r3, [r7, #28]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d011      	beq.n	800def4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800ded0:	f107 0314 	add.w	r3, r7, #20
 800ded4:	461a      	mov	r2, r3
 800ded6:	2104      	movs	r1, #4
 800ded8:	6878      	ldr	r0, [r7, #4]
 800deda:	f7ff f9f5 	bl	800d2c8 <get_sequence_step_timeout>
 800dede:	4603      	mov	r3, r0
 800dee0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800dee4:	683b      	ldr	r3, [r7, #0]
 800dee6:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800dee8:	6979      	ldr	r1, [r7, #20]
 800deea:	6a3b      	ldr	r3, [r7, #32]
 800deec:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800deee:	441a      	add	r2, r3
 800def0:	683b      	ldr	r3, [r7, #0]
 800def2:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800def4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800def8:	2b00      	cmp	r3, #0
 800defa:	d103      	bne.n	800df04 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800defc:	683b      	ldr	r3, [r7, #0]
 800defe:	681a      	ldr	r2, [r3, #0]
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800df04:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800df08:	4618      	mov	r0, r3
 800df0a:	3740      	adds	r7, #64	; 0x40
 800df0c:	46bd      	mov	sp, r7
 800df0e:	bd80      	pop	{r7, pc}

0800df10 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800df10:	b580      	push	{r7, lr}
 800df12:	b088      	sub	sp, #32
 800df14:	af00      	add	r7, sp, #0
 800df16:	6078      	str	r0, [r7, #4]
 800df18:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800df1a:	2300      	movs	r3, #0
 800df1c:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800df1e:	2300      	movs	r3, #0
 800df20:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800df22:	e0c6      	b.n	800e0b2 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800df24:	697b      	ldr	r3, [r7, #20]
 800df26:	683a      	ldr	r2, [r7, #0]
 800df28:	4413      	add	r3, r2
 800df2a:	781b      	ldrb	r3, [r3, #0]
 800df2c:	74fb      	strb	r3, [r7, #19]
		Index++;
 800df2e:	697b      	ldr	r3, [r7, #20]
 800df30:	3301      	adds	r3, #1
 800df32:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800df34:	7cfb      	ldrb	r3, [r7, #19]
 800df36:	2bff      	cmp	r3, #255	; 0xff
 800df38:	f040 808d 	bne.w	800e056 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800df3c:	697b      	ldr	r3, [r7, #20]
 800df3e:	683a      	ldr	r2, [r7, #0]
 800df40:	4413      	add	r3, r2
 800df42:	781b      	ldrb	r3, [r3, #0]
 800df44:	747b      	strb	r3, [r7, #17]
			Index++;
 800df46:	697b      	ldr	r3, [r7, #20]
 800df48:	3301      	adds	r3, #1
 800df4a:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800df4c:	7c7b      	ldrb	r3, [r7, #17]
 800df4e:	2b03      	cmp	r3, #3
 800df50:	d87e      	bhi.n	800e050 <VL53L0X_load_tuning_settings+0x140>
 800df52:	a201      	add	r2, pc, #4	; (adr r2, 800df58 <VL53L0X_load_tuning_settings+0x48>)
 800df54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df58:	0800df69 	.word	0x0800df69
 800df5c:	0800dfa3 	.word	0x0800dfa3
 800df60:	0800dfdd 	.word	0x0800dfdd
 800df64:	0800e017 	.word	0x0800e017
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800df68:	697b      	ldr	r3, [r7, #20]
 800df6a:	683a      	ldr	r2, [r7, #0]
 800df6c:	4413      	add	r3, r2
 800df6e:	781b      	ldrb	r3, [r3, #0]
 800df70:	743b      	strb	r3, [r7, #16]
				Index++;
 800df72:	697b      	ldr	r3, [r7, #20]
 800df74:	3301      	adds	r3, #1
 800df76:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800df78:	697b      	ldr	r3, [r7, #20]
 800df7a:	683a      	ldr	r2, [r7, #0]
 800df7c:	4413      	add	r3, r2
 800df7e:	781b      	ldrb	r3, [r3, #0]
 800df80:	73fb      	strb	r3, [r7, #15]
				Index++;
 800df82:	697b      	ldr	r3, [r7, #20]
 800df84:	3301      	adds	r3, #1
 800df86:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800df88:	7c3b      	ldrb	r3, [r7, #16]
 800df8a:	b29b      	uxth	r3, r3
 800df8c:	021b      	lsls	r3, r3, #8
 800df8e:	b29a      	uxth	r2, r3
 800df90:	7bfb      	ldrb	r3, [r7, #15]
 800df92:	b29b      	uxth	r3, r3
 800df94:	4413      	add	r3, r2
 800df96:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	89ba      	ldrh	r2, [r7, #12]
 800df9c:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800dfa0:	e087      	b.n	800e0b2 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800dfa2:	697b      	ldr	r3, [r7, #20]
 800dfa4:	683a      	ldr	r2, [r7, #0]
 800dfa6:	4413      	add	r3, r2
 800dfa8:	781b      	ldrb	r3, [r3, #0]
 800dfaa:	743b      	strb	r3, [r7, #16]
				Index++;
 800dfac:	697b      	ldr	r3, [r7, #20]
 800dfae:	3301      	adds	r3, #1
 800dfb0:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800dfb2:	697b      	ldr	r3, [r7, #20]
 800dfb4:	683a      	ldr	r2, [r7, #0]
 800dfb6:	4413      	add	r3, r2
 800dfb8:	781b      	ldrb	r3, [r3, #0]
 800dfba:	73fb      	strb	r3, [r7, #15]
				Index++;
 800dfbc:	697b      	ldr	r3, [r7, #20]
 800dfbe:	3301      	adds	r3, #1
 800dfc0:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800dfc2:	7c3b      	ldrb	r3, [r7, #16]
 800dfc4:	b29b      	uxth	r3, r3
 800dfc6:	021b      	lsls	r3, r3, #8
 800dfc8:	b29a      	uxth	r2, r3
 800dfca:	7bfb      	ldrb	r3, [r7, #15]
 800dfcc:	b29b      	uxth	r3, r3
 800dfce:	4413      	add	r3, r2
 800dfd0:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	89ba      	ldrh	r2, [r7, #12]
 800dfd6:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800dfda:	e06a      	b.n	800e0b2 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800dfdc:	697b      	ldr	r3, [r7, #20]
 800dfde:	683a      	ldr	r2, [r7, #0]
 800dfe0:	4413      	add	r3, r2
 800dfe2:	781b      	ldrb	r3, [r3, #0]
 800dfe4:	743b      	strb	r3, [r7, #16]
				Index++;
 800dfe6:	697b      	ldr	r3, [r7, #20]
 800dfe8:	3301      	adds	r3, #1
 800dfea:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800dfec:	697b      	ldr	r3, [r7, #20]
 800dfee:	683a      	ldr	r2, [r7, #0]
 800dff0:	4413      	add	r3, r2
 800dff2:	781b      	ldrb	r3, [r3, #0]
 800dff4:	73fb      	strb	r3, [r7, #15]
				Index++;
 800dff6:	697b      	ldr	r3, [r7, #20]
 800dff8:	3301      	adds	r3, #1
 800dffa:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800dffc:	7c3b      	ldrb	r3, [r7, #16]
 800dffe:	b29b      	uxth	r3, r3
 800e000:	021b      	lsls	r3, r3, #8
 800e002:	b29a      	uxth	r2, r3
 800e004:	7bfb      	ldrb	r3, [r7, #15]
 800e006:	b29b      	uxth	r3, r3
 800e008:	4413      	add	r3, r2
 800e00a:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	89ba      	ldrh	r2, [r7, #12]
 800e010:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800e014:	e04d      	b.n	800e0b2 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800e016:	697b      	ldr	r3, [r7, #20]
 800e018:	683a      	ldr	r2, [r7, #0]
 800e01a:	4413      	add	r3, r2
 800e01c:	781b      	ldrb	r3, [r3, #0]
 800e01e:	743b      	strb	r3, [r7, #16]
				Index++;
 800e020:	697b      	ldr	r3, [r7, #20]
 800e022:	3301      	adds	r3, #1
 800e024:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800e026:	697b      	ldr	r3, [r7, #20]
 800e028:	683a      	ldr	r2, [r7, #0]
 800e02a:	4413      	add	r3, r2
 800e02c:	781b      	ldrb	r3, [r3, #0]
 800e02e:	73fb      	strb	r3, [r7, #15]
				Index++;
 800e030:	697b      	ldr	r3, [r7, #20]
 800e032:	3301      	adds	r3, #1
 800e034:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800e036:	7c3b      	ldrb	r3, [r7, #16]
 800e038:	b29b      	uxth	r3, r3
 800e03a:	021b      	lsls	r3, r3, #8
 800e03c:	b29a      	uxth	r2, r3
 800e03e:	7bfb      	ldrb	r3, [r7, #15]
 800e040:	b29b      	uxth	r3, r3
 800e042:	4413      	add	r3, r2
 800e044:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	89ba      	ldrh	r2, [r7, #12]
 800e04a:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800e04e:	e030      	b.n	800e0b2 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e050:	23fc      	movs	r3, #252	; 0xfc
 800e052:	77fb      	strb	r3, [r7, #31]
 800e054:	e02d      	b.n	800e0b2 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800e056:	7cfb      	ldrb	r3, [r7, #19]
 800e058:	2b04      	cmp	r3, #4
 800e05a:	d828      	bhi.n	800e0ae <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800e05c:	697b      	ldr	r3, [r7, #20]
 800e05e:	683a      	ldr	r2, [r7, #0]
 800e060:	4413      	add	r3, r2
 800e062:	781b      	ldrb	r3, [r3, #0]
 800e064:	74bb      	strb	r3, [r7, #18]
			Index++;
 800e066:	697b      	ldr	r3, [r7, #20]
 800e068:	3301      	adds	r3, #1
 800e06a:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800e06c:	2300      	movs	r3, #0
 800e06e:	61bb      	str	r3, [r7, #24]
 800e070:	e00f      	b.n	800e092 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800e072:	697b      	ldr	r3, [r7, #20]
 800e074:	683a      	ldr	r2, [r7, #0]
 800e076:	4413      	add	r3, r2
 800e078:	7819      	ldrb	r1, [r3, #0]
 800e07a:	f107 0208 	add.w	r2, r7, #8
 800e07e:	69bb      	ldr	r3, [r7, #24]
 800e080:	4413      	add	r3, r2
 800e082:	460a      	mov	r2, r1
 800e084:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800e086:	697b      	ldr	r3, [r7, #20]
 800e088:	3301      	adds	r3, #1
 800e08a:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800e08c:	69bb      	ldr	r3, [r7, #24]
 800e08e:	3301      	adds	r3, #1
 800e090:	61bb      	str	r3, [r7, #24]
 800e092:	7cfb      	ldrb	r3, [r7, #19]
 800e094:	69ba      	ldr	r2, [r7, #24]
 800e096:	429a      	cmp	r2, r3
 800e098:	dbeb      	blt.n	800e072 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800e09a:	7cfb      	ldrb	r3, [r7, #19]
 800e09c:	f107 0208 	add.w	r2, r7, #8
 800e0a0:	7cb9      	ldrb	r1, [r7, #18]
 800e0a2:	6878      	ldr	r0, [r7, #4]
 800e0a4:	f000 fdee 	bl	800ec84 <VL53L0X_WriteMulti>
 800e0a8:	4603      	mov	r3, r0
 800e0aa:	77fb      	strb	r3, [r7, #31]
 800e0ac:	e001      	b.n	800e0b2 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e0ae:	23fc      	movs	r3, #252	; 0xfc
 800e0b0:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800e0b2:	697b      	ldr	r3, [r7, #20]
 800e0b4:	683a      	ldr	r2, [r7, #0]
 800e0b6:	4413      	add	r3, r2
 800e0b8:	781b      	ldrb	r3, [r3, #0]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d004      	beq.n	800e0c8 <VL53L0X_load_tuning_settings+0x1b8>
 800e0be:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	f43f af2e 	beq.w	800df24 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800e0c8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	3720      	adds	r7, #32
 800e0d0:	46bd      	mov	sp, r7
 800e0d2:	bd80      	pop	{r7, pc}

0800e0d4 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800e0d4:	b580      	push	{r7, lr}
 800e0d6:	b088      	sub	sp, #32
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	60f8      	str	r0, [r7, #12]
 800e0dc:	60b9      	str	r1, [r7, #8]
 800e0de:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	2200      	movs	r2, #0
 800e0e8:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800e0ea:	f107 0313 	add.w	r3, r7, #19
 800e0ee:	4619      	mov	r1, r3
 800e0f0:	68f8      	ldr	r0, [r7, #12]
 800e0f2:	f7fc fcf1 	bl	800aad8 <VL53L0X_GetXTalkCompensationEnable>
 800e0f6:	4603      	mov	r3, r0
 800e0f8:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800e0fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d111      	bne.n	800e126 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800e102:	7cfb      	ldrb	r3, [r7, #19]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d00e      	beq.n	800e126 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	6a1b      	ldr	r3, [r3, #32]
 800e10c:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800e10e:	68bb      	ldr	r3, [r7, #8]
 800e110:	8a9b      	ldrh	r3, [r3, #20]
 800e112:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800e114:	69bb      	ldr	r3, [r7, #24]
 800e116:	fb02 f303 	mul.w	r3, r2, r3
 800e11a:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800e11c:	697b      	ldr	r3, [r7, #20]
 800e11e:	3380      	adds	r3, #128	; 0x80
 800e120:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800e126:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e12a:	4618      	mov	r0, r3
 800e12c:	3720      	adds	r7, #32
 800e12e:	46bd      	mov	sp, r7
 800e130:	bd80      	pop	{r7, pc}

0800e132 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800e132:	b580      	push	{r7, lr}
 800e134:	b086      	sub	sp, #24
 800e136:	af00      	add	r7, sp, #0
 800e138:	60f8      	str	r0, [r7, #12]
 800e13a:	60b9      	str	r1, [r7, #8]
 800e13c:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e13e:	2300      	movs	r3, #0
 800e140:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800e142:	68bb      	ldr	r3, [r7, #8]
 800e144:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800e14a:	f107 0310 	add.w	r3, r7, #16
 800e14e:	461a      	mov	r2, r3
 800e150:	68b9      	ldr	r1, [r7, #8]
 800e152:	68f8      	ldr	r0, [r7, #12]
 800e154:	f7ff ffbe 	bl	800e0d4 <VL53L0X_get_total_xtalk_rate>
 800e158:	4603      	mov	r3, r0
 800e15a:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800e15c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e160:	2b00      	cmp	r3, #0
 800e162:	d105      	bne.n	800e170 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	681a      	ldr	r2, [r3, #0]
 800e168:	693b      	ldr	r3, [r7, #16]
 800e16a:	441a      	add	r2, r3
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	601a      	str	r2, [r3, #0]

	return Status;
 800e170:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e174:	4618      	mov	r0, r3
 800e176:	3718      	adds	r7, #24
 800e178:	46bd      	mov	sp, r7
 800e17a:	bd80      	pop	{r7, pc}

0800e17c <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800e17c:	b580      	push	{r7, lr}
 800e17e:	b09a      	sub	sp, #104	; 0x68
 800e180:	af00      	add	r7, sp, #0
 800e182:	60f8      	str	r0, [r7, #12]
 800e184:	60b9      	str	r1, [r7, #8]
 800e186:	607a      	str	r2, [r7, #4]
 800e188:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800e18a:	2312      	movs	r3, #18
 800e18c:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800e18e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e192:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800e194:	2342      	movs	r3, #66	; 0x42
 800e196:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800e198:	2306      	movs	r3, #6
 800e19a:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800e19c:	2307      	movs	r3, #7
 800e19e:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 800e1ac:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800e1b4:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800e1b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e1ba:	fb02 f303 	mul.w	r3, r2, r3
 800e1be:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800e1c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1c2:	3380      	adds	r3, #128	; 0x80
 800e1c4:	0a1b      	lsrs	r3, r3, #8
 800e1c6:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800e1c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e1cc:	fb02 f303 	mul.w	r3, r2, r3
 800e1d0:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d01a      	beq.n	800e212 <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800e1dc:	68bb      	ldr	r3, [r7, #8]
 800e1de:	029b      	lsls	r3, r3, #10
 800e1e0:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800e1e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e1e8:	4413      	add	r3, r2
 800e1ea:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800e1ec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800e1f4:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800e1f6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e1f8:	4613      	mov	r3, r2
 800e1fa:	005b      	lsls	r3, r3, #1
 800e1fc:	4413      	add	r3, r2
 800e1fe:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800e200:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e202:	fb03 f303 	mul.w	r3, r3, r3
 800e206:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800e208:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e20a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e20e:	0c1b      	lsrs	r3, r3, #16
 800e210:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800e212:	683b      	ldr	r3, [r7, #0]
 800e214:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e216:	fb02 f303 	mul.w	r3, r2, r3
 800e21a:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800e21c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e21e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e222:	0c1b      	lsrs	r3, r3, #16
 800e224:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800e226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e228:	fb03 f303 	mul.w	r3, r3, r3
 800e22c:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800e22e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e230:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e234:	0c1b      	lsrs	r3, r3, #16
 800e236:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800e238:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e23a:	085a      	lsrs	r2, r3, #1
 800e23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e23e:	441a      	add	r2, r3
 800e240:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e242:	fbb2 f3f3 	udiv	r3, r2, r3
 800e246:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800e248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e24a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e24c:	fb02 f303 	mul.w	r3, r2, r3
 800e250:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800e252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e258:	d302      	bcc.n	800e260 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800e25a:	4b54      	ldr	r3, [pc, #336]	; (800e3ac <VL53L0X_calc_dmax+0x230>)
 800e25c:	663b      	str	r3, [r7, #96]	; 0x60
 800e25e:	e015      	b.n	800e28c <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800e260:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e262:	085a      	lsrs	r2, r3, #1
 800e264:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e266:	441a      	add	r2, r3
 800e268:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e26a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e26e:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800e270:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e272:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e274:	fb02 f303 	mul.w	r3, r2, r3
 800e278:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800e27a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e27c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e280:	0c1b      	lsrs	r3, r3, #16
 800e282:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800e284:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e286:	fb03 f303 	mul.w	r3, r3, r3
 800e28a:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800e28c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e28e:	039b      	lsls	r3, r3, #14
 800e290:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800e294:	4a46      	ldr	r2, [pc, #280]	; (800e3b0 <VL53L0X_calc_dmax+0x234>)
 800e296:	fba2 2303 	umull	r2, r3, r2, r3
 800e29a:	099b      	lsrs	r3, r3, #6
 800e29c:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800e29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2a0:	fb03 f303 	mul.w	r3, r3, r3
 800e2a4:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800e2a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e2a8:	fb03 f303 	mul.w	r3, r3, r3
 800e2ac:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800e2ae:	6a3b      	ldr	r3, [r7, #32]
 800e2b0:	3308      	adds	r3, #8
 800e2b2:	091b      	lsrs	r3, r3, #4
 800e2b4:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800e2b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e2b8:	6a3b      	ldr	r3, [r7, #32]
 800e2ba:	1ad3      	subs	r3, r2, r3
 800e2bc:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800e2be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e2c0:	4613      	mov	r3, r2
 800e2c2:	005b      	lsls	r3, r3, #1
 800e2c4:	4413      	add	r3, r2
 800e2c6:	011b      	lsls	r3, r3, #4
 800e2c8:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800e2ca:	69fb      	ldr	r3, [r7, #28]
 800e2cc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800e2d0:	0b9b      	lsrs	r3, r3, #14
 800e2d2:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800e2d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e2d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e2d8:	4413      	add	r3, r2
 800e2da:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800e2dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e2de:	085b      	lsrs	r3, r3, #1
 800e2e0:	69ba      	ldr	r2, [r7, #24]
 800e2e2:	4413      	add	r3, r2
 800e2e4:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800e2e6:	69ba      	ldr	r2, [r7, #24]
 800e2e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e2ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800e2ee:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800e2f0:	69bb      	ldr	r3, [r7, #24]
 800e2f2:	039b      	lsls	r3, r3, #14
 800e2f4:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800e2f6:	69fb      	ldr	r3, [r7, #28]
 800e2f8:	085b      	lsrs	r3, r3, #1
 800e2fa:	69ba      	ldr	r2, [r7, #24]
 800e2fc:	4413      	add	r3, r2
 800e2fe:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800e300:	69ba      	ldr	r2, [r7, #24]
 800e302:	69fb      	ldr	r3, [r7, #28]
 800e304:	fbb2 f3f3 	udiv	r3, r2, r3
 800e308:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800e30a:	69bb      	ldr	r3, [r7, #24]
 800e30c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e30e:	fb02 f303 	mul.w	r3, r2, r3
 800e312:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800e314:	69bb      	ldr	r3, [r7, #24]
 800e316:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800e31a:	4a25      	ldr	r2, [pc, #148]	; (800e3b0 <VL53L0X_calc_dmax+0x234>)
 800e31c:	fba2 2303 	umull	r2, r3, r2, r3
 800e320:	099b      	lsrs	r3, r3, #6
 800e322:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800e324:	69bb      	ldr	r3, [r7, #24]
 800e326:	011b      	lsls	r3, r3, #4
 800e328:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800e32a:	69bb      	ldr	r3, [r7, #24]
 800e32c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800e330:	4a1f      	ldr	r2, [pc, #124]	; (800e3b0 <VL53L0X_calc_dmax+0x234>)
 800e332:	fba2 2303 	umull	r2, r3, r2, r3
 800e336:	099b      	lsrs	r3, r3, #6
 800e338:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800e33a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e33c:	3380      	adds	r3, #128	; 0x80
 800e33e:	0a1b      	lsrs	r3, r3, #8
 800e340:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800e342:	697b      	ldr	r3, [r7, #20]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d008      	beq.n	800e35a <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800e348:	697b      	ldr	r3, [r7, #20]
 800e34a:	085a      	lsrs	r2, r3, #1
 800e34c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e34e:	441a      	add	r2, r3
 800e350:	697b      	ldr	r3, [r7, #20]
 800e352:	fbb2 f3f3 	udiv	r3, r2, r3
 800e356:	65bb      	str	r3, [r7, #88]	; 0x58
 800e358:	e001      	b.n	800e35e <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800e35a:	2300      	movs	r3, #0
 800e35c:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800e35e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800e360:	f7fe f9ba 	bl	800c6d8 <VL53L0X_isqrt>
 800e364:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800e366:	69bb      	ldr	r3, [r7, #24]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d008      	beq.n	800e37e <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800e36c:	69bb      	ldr	r3, [r7, #24]
 800e36e:	085a      	lsrs	r2, r3, #1
 800e370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e372:	441a      	add	r2, r3
 800e374:	69bb      	ldr	r3, [r7, #24]
 800e376:	fbb2 f3f3 	udiv	r3, r2, r3
 800e37a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e37c:	e001      	b.n	800e382 <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800e37e:	2300      	movs	r3, #0
 800e380:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800e382:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800e384:	f7fe f9a8 	bl	800c6d8 <VL53L0X_isqrt>
 800e388:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800e38a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e38c:	693a      	ldr	r2, [r7, #16]
 800e38e:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800e390:	693a      	ldr	r2, [r7, #16]
 800e392:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e394:	429a      	cmp	r2, r3
 800e396:	d902      	bls.n	800e39e <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800e398:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e39a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e39c:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800e39e:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	3768      	adds	r7, #104	; 0x68
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	bd80      	pop	{r7, pc}
 800e3aa:	bf00      	nop
 800e3ac:	fff00000 	.word	0xfff00000
 800e3b0:	10624dd3 	.word	0x10624dd3

0800e3b4 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	b0b4      	sub	sp, #208	; 0xd0
 800e3b8:	af04      	add	r7, sp, #16
 800e3ba:	60f8      	str	r0, [r7, #12]
 800e3bc:	60b9      	str	r1, [r7, #8]
 800e3be:	607a      	str	r2, [r7, #4]
 800e3c0:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800e3c2:	f44f 7348 	mov.w	r3, #800	; 0x320
 800e3c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800e3ca:	f44f 7316 	mov.w	r3, #600	; 0x258
 800e3ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800e3d2:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800e3d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800e3da:	f241 235c 	movw	r3, #4700	; 0x125c
 800e3de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800e3e2:	4b9e      	ldr	r3, [pc, #632]	; (800e65c <VL53L0X_calc_sigma_estimate+0x2a8>)
 800e3e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800e3e8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800e3ec:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800e3ee:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800e3f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e3f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800e3fa:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800e3fc:	4b98      	ldr	r3, [pc, #608]	; (800e660 <VL53L0X_calc_sigma_estimate+0x2ac>)
 800e3fe:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800e400:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e404:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800e406:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800e40a:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800e40c:	f240 6377 	movw	r3, #1655	; 0x677
 800e410:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e412:	2300      	movs	r3, #0
 800e414:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	6a1b      	ldr	r3, [r3, #32]
 800e41c:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800e41e:	68bb      	ldr	r3, [r7, #8]
 800e420:	691b      	ldr	r3, [r3, #16]
 800e422:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e426:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800e42a:	0c1b      	lsrs	r3, r3, #16
 800e42c:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800e42e:	68bb      	ldr	r3, [r7, #8]
 800e430:	68db      	ldr	r3, [r3, #12]
 800e432:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800e434:	f107 0310 	add.w	r3, r7, #16
 800e438:	461a      	mov	r2, r3
 800e43a:	68b9      	ldr	r1, [r7, #8]
 800e43c:	68f8      	ldr	r0, [r7, #12]
 800e43e:	f7ff fe78 	bl	800e132 <VL53L0X_get_total_signal_rate>
 800e442:	4603      	mov	r3, r0
 800e444:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800e448:	f107 0314 	add.w	r3, r7, #20
 800e44c:	461a      	mov	r2, r3
 800e44e:	68b9      	ldr	r1, [r7, #8]
 800e450:	68f8      	ldr	r0, [r7, #12]
 800e452:	f7ff fe3f 	bl	800e0d4 <VL53L0X_get_total_xtalk_rate>
 800e456:	4603      	mov	r3, r0
 800e458:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800e45c:	693b      	ldr	r3, [r7, #16]
 800e45e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e462:	fb02 f303 	mul.w	r3, r2, r3
 800e466:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800e468:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e46a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e46e:	0c1b      	lsrs	r3, r3, #16
 800e470:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800e472:	697b      	ldr	r3, [r7, #20]
 800e474:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e478:	fb02 f303 	mul.w	r3, r2, r3
 800e47c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800e480:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800e484:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e486:	429a      	cmp	r2, r3
 800e488:	d902      	bls.n	800e490 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800e48a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e48c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800e490:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800e494:	2b00      	cmp	r3, #0
 800e496:	d168      	bne.n	800e56a <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800e49e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800e4a8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800e4ac:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800e4b0:	461a      	mov	r2, r3
 800e4b2:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800e4b6:	68f8      	ldr	r0, [r7, #12]
 800e4b8:	f7fe feb2 	bl	800d220 <VL53L0X_calc_timeout_mclks>
 800e4bc:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e4c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800e4ce:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800e4d2:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800e4d6:	461a      	mov	r2, r3
 800e4d8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800e4dc:	68f8      	ldr	r0, [r7, #12]
 800e4de:	f7fe fe9f 	bl	800d220 <VL53L0X_calc_timeout_mclks>
 800e4e2:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800e4e4:	2303      	movs	r3, #3
 800e4e6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800e4ea:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800e4ee:	2b08      	cmp	r3, #8
 800e4f0:	d102      	bne.n	800e4f8 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800e4f2:	2302      	movs	r3, #2
 800e4f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800e4f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e4fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e4fc:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800e4fe:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800e502:	fb02 f303 	mul.w	r3, r2, r3
 800e506:	02db      	lsls	r3, r3, #11
 800e508:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800e50c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e510:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800e514:	4a53      	ldr	r2, [pc, #332]	; (800e664 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800e516:	fba2 2303 	umull	r2, r3, r2, r3
 800e51a:	099b      	lsrs	r3, r3, #6
 800e51c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800e520:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e524:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e526:	fb02 f303 	mul.w	r3, r2, r3
 800e52a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800e52e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e532:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800e536:	4a4b      	ldr	r2, [pc, #300]	; (800e664 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800e538:	fba2 2303 	umull	r2, r3, r2, r3
 800e53c:	099b      	lsrs	r3, r3, #6
 800e53e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800e542:	693b      	ldr	r3, [r7, #16]
 800e544:	3380      	adds	r3, #128	; 0x80
 800e546:	0a1b      	lsrs	r3, r3, #8
 800e548:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800e54a:	693a      	ldr	r2, [r7, #16]
 800e54c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e550:	fb02 f303 	mul.w	r3, r2, r3
 800e554:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800e558:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e55c:	3380      	adds	r3, #128	; 0x80
 800e55e:	0a1b      	lsrs	r3, r3, #8
 800e560:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800e564:	693b      	ldr	r3, [r7, #16]
 800e566:	021b      	lsls	r3, r3, #8
 800e568:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800e56a:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d002      	beq.n	800e578 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800e572:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800e576:	e15e      	b.n	800e836 <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 800e578:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d10c      	bne.n	800e598 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e584:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e58c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800e590:	683b      	ldr	r3, [r7, #0]
 800e592:	2200      	movs	r2, #0
 800e594:	601a      	str	r2, [r3, #0]
 800e596:	e14c      	b.n	800e832 <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800e598:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d102      	bne.n	800e5a6 <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800e5a0:	2301      	movs	r3, #1
 800e5a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800e5a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e5aa:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800e5ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e5ae:	041a      	lsls	r2, r3, #16
 800e5b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e5b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800e5b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800e5ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e5be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e5c0:	429a      	cmp	r2, r3
 800e5c2:	d902      	bls.n	800e5ca <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800e5c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e5c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800e5ca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e5ce:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800e5d2:	fb02 f303 	mul.w	r3, r2, r3
 800e5d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800e5da:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800e5de:	4613      	mov	r3, r2
 800e5e0:	005b      	lsls	r3, r3, #1
 800e5e2:	4413      	add	r3, r2
 800e5e4:	009b      	lsls	r3, r3, #2
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	f7fe f876 	bl	800c6d8 <VL53L0X_isqrt>
 800e5ec:	4603      	mov	r3, r0
 800e5ee:	005b      	lsls	r3, r3, #1
 800e5f0:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800e5f2:	68bb      	ldr	r3, [r7, #8]
 800e5f4:	891b      	ldrh	r3, [r3, #8]
 800e5f6:	461a      	mov	r2, r3
 800e5f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e5fa:	fb02 f303 	mul.w	r3, r2, r3
 800e5fe:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800e600:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e602:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800e604:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e608:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800e60a:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800e60c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800e610:	4a14      	ldr	r2, [pc, #80]	; (800e664 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800e612:	fba2 2303 	umull	r2, r3, r2, r3
 800e616:	099b      	lsrs	r3, r3, #6
 800e618:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800e61a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e61c:	041b      	lsls	r3, r3, #16
 800e61e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800e622:	4a10      	ldr	r2, [pc, #64]	; (800e664 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800e624:	fba2 2303 	umull	r2, r3, r2, r3
 800e628:	099b      	lsrs	r3, r3, #6
 800e62a:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800e62c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e62e:	021b      	lsls	r3, r3, #8
 800e630:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800e632:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e636:	fbb2 f3f3 	udiv	r3, r2, r3
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	bfb8      	it	lt
 800e63e:	425b      	neglt	r3, r3
 800e640:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800e642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e644:	021b      	lsls	r3, r3, #8
 800e646:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800e648:	68bb      	ldr	r3, [r7, #8]
 800e64a:	7e1b      	ldrb	r3, [r3, #24]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d00b      	beq.n	800e668 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800e650:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800e654:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e658:	e033      	b.n	800e6c2 <VL53L0X_calc_sigma_estimate+0x30e>
 800e65a:	bf00      	nop
 800e65c:	028f87ae 	.word	0x028f87ae
 800e660:	0006999a 	.word	0x0006999a
 800e664:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800e668:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e66a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e66e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e672:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800e676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e678:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800e67c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e680:	fb02 f303 	mul.w	r3, r2, r3
 800e684:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800e688:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800e68c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e68e:	4413      	add	r3, r2
 800e690:	0c1b      	lsrs	r3, r3, #16
 800e692:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800e696:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e69a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800e69e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800e6a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e6a6:	085b      	lsrs	r3, r3, #1
 800e6a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800e6ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e6b0:	fb03 f303 	mul.w	r3, r3, r3
 800e6b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800e6b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e6bc:	0b9b      	lsrs	r3, r3, #14
 800e6be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800e6c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e6c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e6c8:	fb02 f303 	mul.w	r3, r2, r3
 800e6cc:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800e6ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6d0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e6d4:	0c1b      	lsrs	r3, r3, #16
 800e6d6:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800e6d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6da:	fb03 f303 	mul.w	r3, r3, r3
 800e6de:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800e6e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e6e4:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800e6e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6e8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e6ec:	0c1b      	lsrs	r3, r3, #16
 800e6ee:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800e6f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6f2:	fb03 f303 	mul.w	r3, r3, r3
 800e6f6:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800e6f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e6fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6fc:	4413      	add	r3, r2
 800e6fe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800e700:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e702:	f7fd ffe9 	bl	800c6d8 <VL53L0X_isqrt>
 800e706:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800e708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e70a:	041b      	lsls	r3, r3, #16
 800e70c:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800e70e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e710:	3332      	adds	r3, #50	; 0x32
 800e712:	4a4b      	ldr	r2, [pc, #300]	; (800e840 <VL53L0X_calc_sigma_estimate+0x48c>)
 800e714:	fba2 2303 	umull	r2, r3, r2, r3
 800e718:	095a      	lsrs	r2, r3, #5
 800e71a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e71c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e720:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800e724:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e728:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800e72c:	fb02 f303 	mul.w	r3, r2, r3
 800e730:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800e734:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e738:	f241 3388 	movw	r3, #5000	; 0x1388
 800e73c:	4413      	add	r3, r2
 800e73e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800e742:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e746:	4a3f      	ldr	r2, [pc, #252]	; (800e844 <VL53L0X_calc_sigma_estimate+0x490>)
 800e748:	fba2 2303 	umull	r2, r3, r2, r3
 800e74c:	0b5b      	lsrs	r3, r3, #13
 800e74e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800e752:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e756:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e758:	429a      	cmp	r2, r3
 800e75a:	d902      	bls.n	800e762 <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800e75c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e75e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800e762:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800e766:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e76a:	4413      	add	r3, r2
 800e76c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800e770:	4a35      	ldr	r2, [pc, #212]	; (800e848 <VL53L0X_calc_sigma_estimate+0x494>)
 800e772:	fba2 2303 	umull	r2, r3, r2, r3
 800e776:	099b      	lsrs	r3, r3, #6
 800e778:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800e77a:	6a3b      	ldr	r3, [r7, #32]
 800e77c:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800e77e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e782:	441a      	add	r2, r3
 800e784:	6a3b      	ldr	r3, [r7, #32]
 800e786:	fbb2 f3f3 	udiv	r3, r2, r3
 800e78a:	4618      	mov	r0, r3
 800e78c:	f7fd ffa4 	bl	800c6d8 <VL53L0X_isqrt>
 800e790:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800e792:	69fb      	ldr	r3, [r7, #28]
 800e794:	021b      	lsls	r3, r3, #8
 800e796:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800e798:	69fb      	ldr	r3, [r7, #28]
 800e79a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800e79e:	4a2a      	ldr	r2, [pc, #168]	; (800e848 <VL53L0X_calc_sigma_estimate+0x494>)
 800e7a0:	fba2 2303 	umull	r2, r3, r2, r3
 800e7a4:	099b      	lsrs	r3, r3, #6
 800e7a6:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800e7a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e7ac:	fb03 f303 	mul.w	r3, r3, r3
 800e7b0:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800e7b2:	69fb      	ldr	r3, [r7, #28]
 800e7b4:	fb03 f303 	mul.w	r3, r3, r3
 800e7b8:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800e7ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e7bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7be:	4413      	add	r3, r2
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	f7fd ff89 	bl	800c6d8 <VL53L0X_isqrt>
 800e7c6:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800e7c8:	69bb      	ldr	r3, [r7, #24]
 800e7ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e7ce:	fb02 f303 	mul.w	r3, r2, r3
 800e7d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800e7d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d009      	beq.n	800e7f0 <VL53L0X_calc_sigma_estimate+0x43c>
 800e7dc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d005      	beq.n	800e7f0 <VL53L0X_calc_sigma_estimate+0x43c>
 800e7e4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800e7e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e7ec:	429a      	cmp	r2, r3
 800e7ee:	d903      	bls.n	800e7f8 <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800e7f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e7f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800e7fe:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	681a      	ldr	r2, [r3, #0]
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800e80a:	6939      	ldr	r1, [r7, #16]
 800e80c:	683b      	ldr	r3, [r7, #0]
 800e80e:	9303      	str	r3, [sp, #12]
 800e810:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e814:	9302      	str	r3, [sp, #8]
 800e816:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e81a:	9301      	str	r3, [sp, #4]
 800e81c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e81e:	9300      	str	r3, [sp, #0]
 800e820:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e824:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e826:	68f8      	ldr	r0, [r7, #12]
 800e828:	f7ff fca8 	bl	800e17c <VL53L0X_calc_dmax>
 800e82c:	4603      	mov	r3, r0
 800e82e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800e832:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800e836:	4618      	mov	r0, r3
 800e838:	37c0      	adds	r7, #192	; 0xc0
 800e83a:	46bd      	mov	sp, r7
 800e83c:	bd80      	pop	{r7, pc}
 800e83e:	bf00      	nop
 800e840:	51eb851f 	.word	0x51eb851f
 800e844:	d1b71759 	.word	0xd1b71759
 800e848:	10624dd3 	.word	0x10624dd3

0800e84c <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b090      	sub	sp, #64	; 0x40
 800e850:	af00      	add	r7, sp, #0
 800e852:	60f8      	str	r0, [r7, #12]
 800e854:	607a      	str	r2, [r7, #4]
 800e856:	461a      	mov	r2, r3
 800e858:	460b      	mov	r3, r1
 800e85a:	72fb      	strb	r3, [r7, #11]
 800e85c:	4613      	mov	r3, r2
 800e85e:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e860:	2300      	movs	r3, #0
 800e862:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800e866:	2300      	movs	r3, #0
 800e868:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800e86c:	2300      	movs	r3, #0
 800e86e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800e872:	2300      	movs	r3, #0
 800e874:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800e878:	2300      	movs	r3, #0
 800e87a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800e87e:	2300      	movs	r3, #0
 800e880:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800e884:	2300      	movs	r3, #0
 800e886:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800e88a:	2300      	movs	r3, #0
 800e88c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800e890:	2300      	movs	r3, #0
 800e892:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800e896:	2300      	movs	r3, #0
 800e898:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800e89a:	2300      	movs	r3, #0
 800e89c:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800e89e:	7afb      	ldrb	r3, [r7, #11]
 800e8a0:	10db      	asrs	r3, r3, #3
 800e8a2:	b2db      	uxtb	r3, r3
 800e8a4:	f003 030f 	and.w	r3, r3, #15
 800e8a8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800e8ac:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d017      	beq.n	800e8e4 <VL53L0X_get_pal_range_status+0x98>
 800e8b4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e8b8:	2b05      	cmp	r3, #5
 800e8ba:	d013      	beq.n	800e8e4 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800e8bc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e8c0:	2b07      	cmp	r3, #7
 800e8c2:	d00f      	beq.n	800e8e4 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800e8c4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e8c8:	2b0c      	cmp	r3, #12
 800e8ca:	d00b      	beq.n	800e8e4 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800e8cc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e8d0:	2b0d      	cmp	r3, #13
 800e8d2:	d007      	beq.n	800e8e4 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800e8d4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e8d8:	2b0e      	cmp	r3, #14
 800e8da:	d003      	beq.n	800e8e4 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800e8dc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e8e0:	2b0f      	cmp	r3, #15
 800e8e2:	d103      	bne.n	800e8ec <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800e8e4:	2301      	movs	r3, #1
 800e8e6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800e8ea:	e002      	b.n	800e8f2 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800e8f2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d109      	bne.n	800e90e <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800e8fa:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800e8fe:	461a      	mov	r2, r3
 800e900:	2100      	movs	r1, #0
 800e902:	68f8      	ldr	r0, [r7, #12]
 800e904:	f7fc f9bc 	bl	800ac80 <VL53L0X_GetLimitCheckEnable>
 800e908:	4603      	mov	r3, r0
 800e90a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800e90e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e912:	2b00      	cmp	r3, #0
 800e914:	d02e      	beq.n	800e974 <VL53L0X_get_pal_range_status+0x128>
 800e916:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d12a      	bne.n	800e974 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800e91e:	f107 0310 	add.w	r3, r7, #16
 800e922:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800e926:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e928:	68f8      	ldr	r0, [r7, #12]
 800e92a:	f7ff fd43 	bl	800e3b4 <VL53L0X_calc_sigma_estimate>
 800e92e:	4603      	mov	r3, r0
 800e930:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800e934:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d103      	bne.n	800e944 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800e93c:	693b      	ldr	r3, [r7, #16]
 800e93e:	b29a      	uxth	r2, r3
 800e940:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e942:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800e944:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d113      	bne.n	800e974 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800e94c:	f107 0320 	add.w	r3, r7, #32
 800e950:	461a      	mov	r2, r3
 800e952:	2100      	movs	r1, #0
 800e954:	68f8      	ldr	r0, [r7, #12]
 800e956:	f7fc fa19 	bl	800ad8c <VL53L0X_GetLimitCheckValue>
 800e95a:	4603      	mov	r3, r0
 800e95c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800e960:	6a3b      	ldr	r3, [r7, #32]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d006      	beq.n	800e974 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800e966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e968:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800e96a:	429a      	cmp	r2, r3
 800e96c:	d902      	bls.n	800e974 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800e96e:	2301      	movs	r3, #1
 800e970:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800e974:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d109      	bne.n	800e990 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800e97c:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800e980:	461a      	mov	r2, r3
 800e982:	2102      	movs	r1, #2
 800e984:	68f8      	ldr	r0, [r7, #12]
 800e986:	f7fc f97b 	bl	800ac80 <VL53L0X_GetLimitCheckEnable>
 800e98a:	4603      	mov	r3, r0
 800e98c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800e990:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800e994:	2b00      	cmp	r3, #0
 800e996:	d044      	beq.n	800ea22 <VL53L0X_get_pal_range_status+0x1d6>
 800e998:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d140      	bne.n	800ea22 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800e9a0:	f107 031c 	add.w	r3, r7, #28
 800e9a4:	461a      	mov	r2, r3
 800e9a6:	2102      	movs	r1, #2
 800e9a8:	68f8      	ldr	r0, [r7, #12]
 800e9aa:	f7fc f9ef 	bl	800ad8c <VL53L0X_GetLimitCheckValue>
 800e9ae:	4603      	mov	r3, r0
 800e9b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800e9b4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d107      	bne.n	800e9cc <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800e9bc:	2201      	movs	r2, #1
 800e9be:	21ff      	movs	r1, #255	; 0xff
 800e9c0:	68f8      	ldr	r0, [r7, #12]
 800e9c2:	f000 f9bb 	bl	800ed3c <VL53L0X_WrByte>
 800e9c6:	4603      	mov	r3, r0
 800e9c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800e9cc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d109      	bne.n	800e9e8 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800e9d4:	f107 0316 	add.w	r3, r7, #22
 800e9d8:	461a      	mov	r2, r3
 800e9da:	21b6      	movs	r1, #182	; 0xb6
 800e9dc:	68f8      	ldr	r0, [r7, #12]
 800e9de:	f000 fa59 	bl	800ee94 <VL53L0X_RdWord>
 800e9e2:	4603      	mov	r3, r0
 800e9e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800e9e8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d107      	bne.n	800ea00 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800e9f0:	2200      	movs	r2, #0
 800e9f2:	21ff      	movs	r1, #255	; 0xff
 800e9f4:	68f8      	ldr	r0, [r7, #12]
 800e9f6:	f000 f9a1 	bl	800ed3c <VL53L0X_WrByte>
 800e9fa:	4603      	mov	r3, r0
 800e9fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800ea00:	8afb      	ldrh	r3, [r7, #22]
 800ea02:	025b      	lsls	r3, r3, #9
 800ea04:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea0a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800ea0e:	69fb      	ldr	r3, [r7, #28]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d006      	beq.n	800ea22 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800ea14:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800ea16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea18:	429a      	cmp	r2, r3
 800ea1a:	d902      	bls.n	800ea22 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800ea1c:	2301      	movs	r3, #1
 800ea1e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800ea22:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d109      	bne.n	800ea3e <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800ea2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ea2e:	461a      	mov	r2, r3
 800ea30:	2103      	movs	r1, #3
 800ea32:	68f8      	ldr	r0, [r7, #12]
 800ea34:	f7fc f924 	bl	800ac80 <VL53L0X_GetLimitCheckEnable>
 800ea38:	4603      	mov	r3, r0
 800ea3a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800ea3e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d023      	beq.n	800ea8e <VL53L0X_get_pal_range_status+0x242>
 800ea46:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d11f      	bne.n	800ea8e <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800ea4e:	893b      	ldrh	r3, [r7, #8]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d102      	bne.n	800ea5a <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800ea54:	2300      	movs	r3, #0
 800ea56:	637b      	str	r3, [r7, #52]	; 0x34
 800ea58:	e005      	b.n	800ea66 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	021a      	lsls	r2, r3, #8
 800ea5e:	893b      	ldrh	r3, [r7, #8]
 800ea60:	fbb2 f3f3 	udiv	r3, r2, r3
 800ea64:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800ea66:	f107 0318 	add.w	r3, r7, #24
 800ea6a:	461a      	mov	r2, r3
 800ea6c:	2103      	movs	r1, #3
 800ea6e:	68f8      	ldr	r0, [r7, #12]
 800ea70:	f7fc f98c 	bl	800ad8c <VL53L0X_GetLimitCheckValue>
 800ea74:	4603      	mov	r3, r0
 800ea76:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800ea7a:	69bb      	ldr	r3, [r7, #24]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d006      	beq.n	800ea8e <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800ea80:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800ea82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ea84:	429a      	cmp	r2, r3
 800ea86:	d202      	bcs.n	800ea8e <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800ea88:	2301      	movs	r3, #1
 800ea8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ea8e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d14a      	bne.n	800eb2c <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800ea96:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800ea9a:	2b01      	cmp	r3, #1
 800ea9c:	d103      	bne.n	800eaa6 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800ea9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eaa0:	22ff      	movs	r2, #255	; 0xff
 800eaa2:	701a      	strb	r2, [r3, #0]
 800eaa4:	e042      	b.n	800eb2c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800eaa6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800eaaa:	2b01      	cmp	r3, #1
 800eaac:	d007      	beq.n	800eabe <VL53L0X_get_pal_range_status+0x272>
 800eaae:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800eab2:	2b02      	cmp	r3, #2
 800eab4:	d003      	beq.n	800eabe <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800eab6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800eaba:	2b03      	cmp	r3, #3
 800eabc:	d103      	bne.n	800eac6 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800eabe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eac0:	2205      	movs	r2, #5
 800eac2:	701a      	strb	r2, [r3, #0]
 800eac4:	e032      	b.n	800eb2c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800eac6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800eaca:	2b06      	cmp	r3, #6
 800eacc:	d003      	beq.n	800ead6 <VL53L0X_get_pal_range_status+0x28a>
 800eace:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ead2:	2b09      	cmp	r3, #9
 800ead4:	d103      	bne.n	800eade <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800ead6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ead8:	2204      	movs	r2, #4
 800eada:	701a      	strb	r2, [r3, #0]
 800eadc:	e026      	b.n	800eb2c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800eade:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800eae2:	2b08      	cmp	r3, #8
 800eae4:	d007      	beq.n	800eaf6 <VL53L0X_get_pal_range_status+0x2aa>
 800eae6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800eaea:	2b0a      	cmp	r3, #10
 800eaec:	d003      	beq.n	800eaf6 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800eaee:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800eaf2:	2b01      	cmp	r3, #1
 800eaf4:	d103      	bne.n	800eafe <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800eaf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eaf8:	2203      	movs	r2, #3
 800eafa:	701a      	strb	r2, [r3, #0]
 800eafc:	e016      	b.n	800eb2c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800eafe:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800eb02:	2b04      	cmp	r3, #4
 800eb04:	d003      	beq.n	800eb0e <VL53L0X_get_pal_range_status+0x2c2>
 800eb06:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800eb0a:	2b01      	cmp	r3, #1
 800eb0c:	d103      	bne.n	800eb16 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800eb0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb10:	2202      	movs	r2, #2
 800eb12:	701a      	strb	r2, [r3, #0]
 800eb14:	e00a      	b.n	800eb2c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800eb16:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800eb1a:	2b01      	cmp	r3, #1
 800eb1c:	d103      	bne.n	800eb26 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800eb1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb20:	2201      	movs	r2, #1
 800eb22:	701a      	strb	r2, [r3, #0]
 800eb24:	e002      	b.n	800eb2c <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800eb26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb28:	2200      	movs	r2, #0
 800eb2a:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800eb2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb2e:	781b      	ldrb	r3, [r3, #0]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d102      	bne.n	800eb3a <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800eb34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb36:	2200      	movs	r2, #0
 800eb38:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800eb3a:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800eb3e:	461a      	mov	r2, r3
 800eb40:	2101      	movs	r1, #1
 800eb42:	68f8      	ldr	r0, [r7, #12]
 800eb44:	f7fc f89c 	bl	800ac80 <VL53L0X_GetLimitCheckEnable>
 800eb48:	4603      	mov	r3, r0
 800eb4a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800eb4e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d14f      	bne.n	800ebf6 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800eb56:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d003      	beq.n	800eb66 <VL53L0X_get_pal_range_status+0x31a>
 800eb5e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800eb62:	2b01      	cmp	r3, #1
 800eb64:	d103      	bne.n	800eb6e <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800eb66:	2301      	movs	r3, #1
 800eb68:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb6c:	e002      	b.n	800eb74 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800eb6e:	2300      	movs	r3, #0
 800eb70:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800eb7a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800eb7e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800eb82:	2b04      	cmp	r3, #4
 800eb84:	d003      	beq.n	800eb8e <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800eb86:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d103      	bne.n	800eb96 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800eb8e:	2301      	movs	r3, #1
 800eb90:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb94:	e002      	b.n	800eb9c <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800eb96:	2300      	movs	r3, #0
 800eb98:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800eba2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800eba6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d003      	beq.n	800ebb6 <VL53L0X_get_pal_range_status+0x36a>
 800ebae:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ebb2:	2b01      	cmp	r3, #1
 800ebb4:	d103      	bne.n	800ebbe <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800ebb6:	2301      	movs	r3, #1
 800ebb8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ebbc:	e002      	b.n	800ebc4 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800ebca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800ebce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d003      	beq.n	800ebde <VL53L0X_get_pal_range_status+0x392>
 800ebd6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ebda:	2b01      	cmp	r3, #1
 800ebdc:	d103      	bne.n	800ebe6 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800ebde:	2301      	movs	r3, #1
 800ebe0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ebe4:	e002      	b.n	800ebec <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800ebf2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ebf6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	3740      	adds	r7, #64	; 0x40
 800ebfe:	46bd      	mov	sp, r7
 800ec00:	bd80      	pop	{r7, pc}

0800ec02 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800ec02:	b580      	push	{r7, lr}
 800ec04:	b088      	sub	sp, #32
 800ec06:	af02      	add	r7, sp, #8
 800ec08:	60f8      	str	r0, [r7, #12]
 800ec0a:	60b9      	str	r1, [r7, #8]
 800ec0c:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	330a      	adds	r3, #10
 800ec12:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800ec20:	b299      	uxth	r1, r3
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	b29a      	uxth	r2, r3
 800ec26:	697b      	ldr	r3, [r7, #20]
 800ec28:	9300      	str	r3, [sp, #0]
 800ec2a:	4613      	mov	r3, r2
 800ec2c:	68ba      	ldr	r2, [r7, #8]
 800ec2e:	f7f4 fff5 	bl	8003c1c <HAL_I2C_Master_Transmit>
 800ec32:	4603      	mov	r3, r0
 800ec34:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800ec36:	693b      	ldr	r3, [r7, #16]
}
 800ec38:	4618      	mov	r0, r3
 800ec3a:	3718      	adds	r7, #24
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	bd80      	pop	{r7, pc}

0800ec40 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b088      	sub	sp, #32
 800ec44:	af02      	add	r7, sp, #8
 800ec46:	60f8      	str	r0, [r7, #12]
 800ec48:	60b9      	str	r1, [r7, #8]
 800ec4a:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	330a      	adds	r3, #10
 800ec50:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800ec5e:	f043 0301 	orr.w	r3, r3, #1
 800ec62:	b2db      	uxtb	r3, r3
 800ec64:	b299      	uxth	r1, r3
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	b29a      	uxth	r2, r3
 800ec6a:	697b      	ldr	r3, [r7, #20]
 800ec6c:	9300      	str	r3, [sp, #0]
 800ec6e:	4613      	mov	r3, r2
 800ec70:	68ba      	ldr	r2, [r7, #8]
 800ec72:	f7f5 f8c7 	bl	8003e04 <HAL_I2C_Master_Receive>
 800ec76:	4603      	mov	r3, r0
 800ec78:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800ec7a:	693b      	ldr	r3, [r7, #16]
}
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	3718      	adds	r7, #24
 800ec80:	46bd      	mov	sp, r7
 800ec82:	bd80      	pop	{r7, pc}

0800ec84 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800ec84:	b580      	push	{r7, lr}
 800ec86:	b086      	sub	sp, #24
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	60f8      	str	r0, [r7, #12]
 800ec8c:	607a      	str	r2, [r7, #4]
 800ec8e:	603b      	str	r3, [r7, #0]
 800ec90:	460b      	mov	r3, r1
 800ec92:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ec94:	2300      	movs	r3, #0
 800ec96:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800ec98:	683b      	ldr	r3, [r7, #0]
 800ec9a:	2b3f      	cmp	r3, #63	; 0x3f
 800ec9c:	d902      	bls.n	800eca4 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800ec9e:	f06f 0303 	mvn.w	r3, #3
 800eca2:	e016      	b.n	800ecd2 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800eca4:	4a0d      	ldr	r2, [pc, #52]	; (800ecdc <VL53L0X_WriteMulti+0x58>)
 800eca6:	7afb      	ldrb	r3, [r7, #11]
 800eca8:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800ecaa:	683a      	ldr	r2, [r7, #0]
 800ecac:	6879      	ldr	r1, [r7, #4]
 800ecae:	480c      	ldr	r0, [pc, #48]	; (800ece0 <VL53L0X_WriteMulti+0x5c>)
 800ecb0:	f000 f99e 	bl	800eff0 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800ecb4:	683b      	ldr	r3, [r7, #0]
 800ecb6:	3301      	adds	r3, #1
 800ecb8:	461a      	mov	r2, r3
 800ecba:	4908      	ldr	r1, [pc, #32]	; (800ecdc <VL53L0X_WriteMulti+0x58>)
 800ecbc:	68f8      	ldr	r0, [r7, #12]
 800ecbe:	f7ff ffa0 	bl	800ec02 <_I2CWrite>
 800ecc2:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ecc4:	693b      	ldr	r3, [r7, #16]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d001      	beq.n	800ecce <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ecca:	23ec      	movs	r3, #236	; 0xec
 800eccc:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800ecce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	3718      	adds	r7, #24
 800ecd6:	46bd      	mov	sp, r7
 800ecd8:	bd80      	pop	{r7, pc}
 800ecda:	bf00      	nop
 800ecdc:	20000728 	.word	0x20000728
 800ece0:	20000729 	.word	0x20000729

0800ece4 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b086      	sub	sp, #24
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	60f8      	str	r0, [r7, #12]
 800ecec:	607a      	str	r2, [r7, #4]
 800ecee:	603b      	str	r3, [r7, #0]
 800ecf0:	460b      	mov	r3, r1
 800ecf2:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ecf4:	2300      	movs	r3, #0
 800ecf6:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800ecf8:	f107 030b 	add.w	r3, r7, #11
 800ecfc:	2201      	movs	r2, #1
 800ecfe:	4619      	mov	r1, r3
 800ed00:	68f8      	ldr	r0, [r7, #12]
 800ed02:	f7ff ff7e 	bl	800ec02 <_I2CWrite>
 800ed06:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ed08:	693b      	ldr	r3, [r7, #16]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d002      	beq.n	800ed14 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ed0e:	23ec      	movs	r3, #236	; 0xec
 800ed10:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ed12:	e00c      	b.n	800ed2e <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800ed14:	683a      	ldr	r2, [r7, #0]
 800ed16:	6879      	ldr	r1, [r7, #4]
 800ed18:	68f8      	ldr	r0, [r7, #12]
 800ed1a:	f7ff ff91 	bl	800ec40 <_I2CRead>
 800ed1e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ed20:	693b      	ldr	r3, [r7, #16]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d002      	beq.n	800ed2c <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ed26:	23ec      	movs	r3, #236	; 0xec
 800ed28:	75fb      	strb	r3, [r7, #23]
 800ed2a:	e000      	b.n	800ed2e <VL53L0X_ReadMulti+0x4a>
    }
done:
 800ed2c:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800ed2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ed32:	4618      	mov	r0, r3
 800ed34:	3718      	adds	r7, #24
 800ed36:	46bd      	mov	sp, r7
 800ed38:	bd80      	pop	{r7, pc}
	...

0800ed3c <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800ed3c:	b580      	push	{r7, lr}
 800ed3e:	b084      	sub	sp, #16
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	6078      	str	r0, [r7, #4]
 800ed44:	460b      	mov	r3, r1
 800ed46:	70fb      	strb	r3, [r7, #3]
 800ed48:	4613      	mov	r3, r2
 800ed4a:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ed4c:	2300      	movs	r3, #0
 800ed4e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800ed50:	4a0b      	ldr	r2, [pc, #44]	; (800ed80 <VL53L0X_WrByte+0x44>)
 800ed52:	78fb      	ldrb	r3, [r7, #3]
 800ed54:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800ed56:	4a0a      	ldr	r2, [pc, #40]	; (800ed80 <VL53L0X_WrByte+0x44>)
 800ed58:	78bb      	ldrb	r3, [r7, #2]
 800ed5a:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800ed5c:	2202      	movs	r2, #2
 800ed5e:	4908      	ldr	r1, [pc, #32]	; (800ed80 <VL53L0X_WrByte+0x44>)
 800ed60:	6878      	ldr	r0, [r7, #4]
 800ed62:	f7ff ff4e 	bl	800ec02 <_I2CWrite>
 800ed66:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800ed68:	68bb      	ldr	r3, [r7, #8]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d001      	beq.n	800ed72 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ed6e:	23ec      	movs	r3, #236	; 0xec
 800ed70:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800ed72:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ed76:	4618      	mov	r0, r3
 800ed78:	3710      	adds	r7, #16
 800ed7a:	46bd      	mov	sp, r7
 800ed7c:	bd80      	pop	{r7, pc}
 800ed7e:	bf00      	nop
 800ed80:	20000728 	.word	0x20000728

0800ed84 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800ed84:	b580      	push	{r7, lr}
 800ed86:	b084      	sub	sp, #16
 800ed88:	af00      	add	r7, sp, #0
 800ed8a:	6078      	str	r0, [r7, #4]
 800ed8c:	460b      	mov	r3, r1
 800ed8e:	70fb      	strb	r3, [r7, #3]
 800ed90:	4613      	mov	r3, r2
 800ed92:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ed94:	2300      	movs	r3, #0
 800ed96:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800ed98:	4a0e      	ldr	r2, [pc, #56]	; (800edd4 <VL53L0X_WrWord+0x50>)
 800ed9a:	78fb      	ldrb	r3, [r7, #3]
 800ed9c:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800ed9e:	883b      	ldrh	r3, [r7, #0]
 800eda0:	0a1b      	lsrs	r3, r3, #8
 800eda2:	b29b      	uxth	r3, r3
 800eda4:	b2da      	uxtb	r2, r3
 800eda6:	4b0b      	ldr	r3, [pc, #44]	; (800edd4 <VL53L0X_WrWord+0x50>)
 800eda8:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800edaa:	883b      	ldrh	r3, [r7, #0]
 800edac:	b2da      	uxtb	r2, r3
 800edae:	4b09      	ldr	r3, [pc, #36]	; (800edd4 <VL53L0X_WrWord+0x50>)
 800edb0:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800edb2:	2203      	movs	r2, #3
 800edb4:	4907      	ldr	r1, [pc, #28]	; (800edd4 <VL53L0X_WrWord+0x50>)
 800edb6:	6878      	ldr	r0, [r7, #4]
 800edb8:	f7ff ff23 	bl	800ec02 <_I2CWrite>
 800edbc:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800edbe:	68bb      	ldr	r3, [r7, #8]
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d001      	beq.n	800edc8 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800edc4:	23ec      	movs	r3, #236	; 0xec
 800edc6:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800edc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800edcc:	4618      	mov	r0, r3
 800edce:	3710      	adds	r7, #16
 800edd0:	46bd      	mov	sp, r7
 800edd2:	bd80      	pop	{r7, pc}
 800edd4:	20000728 	.word	0x20000728

0800edd8 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800edd8:	b580      	push	{r7, lr}
 800edda:	b084      	sub	sp, #16
 800eddc:	af00      	add	r7, sp, #0
 800edde:	6078      	str	r0, [r7, #4]
 800ede0:	4608      	mov	r0, r1
 800ede2:	4611      	mov	r1, r2
 800ede4:	461a      	mov	r2, r3
 800ede6:	4603      	mov	r3, r0
 800ede8:	70fb      	strb	r3, [r7, #3]
 800edea:	460b      	mov	r3, r1
 800edec:	70bb      	strb	r3, [r7, #2]
 800edee:	4613      	mov	r3, r2
 800edf0:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800edf2:	2300      	movs	r3, #0
 800edf4:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800edf6:	f107 020e 	add.w	r2, r7, #14
 800edfa:	78fb      	ldrb	r3, [r7, #3]
 800edfc:	4619      	mov	r1, r3
 800edfe:	6878      	ldr	r0, [r7, #4]
 800ee00:	f000 f81e 	bl	800ee40 <VL53L0X_RdByte>
 800ee04:	4603      	mov	r3, r0
 800ee06:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800ee08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d110      	bne.n	800ee32 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800ee10:	7bba      	ldrb	r2, [r7, #14]
 800ee12:	78bb      	ldrb	r3, [r7, #2]
 800ee14:	4013      	ands	r3, r2
 800ee16:	b2da      	uxtb	r2, r3
 800ee18:	787b      	ldrb	r3, [r7, #1]
 800ee1a:	4313      	orrs	r3, r2
 800ee1c:	b2db      	uxtb	r3, r3
 800ee1e:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800ee20:	7bba      	ldrb	r2, [r7, #14]
 800ee22:	78fb      	ldrb	r3, [r7, #3]
 800ee24:	4619      	mov	r1, r3
 800ee26:	6878      	ldr	r0, [r7, #4]
 800ee28:	f7ff ff88 	bl	800ed3c <VL53L0X_WrByte>
 800ee2c:	4603      	mov	r3, r0
 800ee2e:	73fb      	strb	r3, [r7, #15]
 800ee30:	e000      	b.n	800ee34 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800ee32:	bf00      	nop
done:
    return Status;
 800ee34:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ee38:	4618      	mov	r0, r3
 800ee3a:	3710      	adds	r7, #16
 800ee3c:	46bd      	mov	sp, r7
 800ee3e:	bd80      	pop	{r7, pc}

0800ee40 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800ee40:	b580      	push	{r7, lr}
 800ee42:	b086      	sub	sp, #24
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	60f8      	str	r0, [r7, #12]
 800ee48:	460b      	mov	r3, r1
 800ee4a:	607a      	str	r2, [r7, #4]
 800ee4c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ee4e:	2300      	movs	r3, #0
 800ee50:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800ee52:	f107 030b 	add.w	r3, r7, #11
 800ee56:	2201      	movs	r2, #1
 800ee58:	4619      	mov	r1, r3
 800ee5a:	68f8      	ldr	r0, [r7, #12]
 800ee5c:	f7ff fed1 	bl	800ec02 <_I2CWrite>
 800ee60:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800ee62:	693b      	ldr	r3, [r7, #16]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d002      	beq.n	800ee6e <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ee68:	23ec      	movs	r3, #236	; 0xec
 800ee6a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ee6c:	e00c      	b.n	800ee88 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800ee6e:	2201      	movs	r2, #1
 800ee70:	6879      	ldr	r1, [r7, #4]
 800ee72:	68f8      	ldr	r0, [r7, #12]
 800ee74:	f7ff fee4 	bl	800ec40 <_I2CRead>
 800ee78:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ee7a:	693b      	ldr	r3, [r7, #16]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d002      	beq.n	800ee86 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ee80:	23ec      	movs	r3, #236	; 0xec
 800ee82:	75fb      	strb	r3, [r7, #23]
 800ee84:	e000      	b.n	800ee88 <VL53L0X_RdByte+0x48>
    }
done:
 800ee86:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800ee88:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	3718      	adds	r7, #24
 800ee90:	46bd      	mov	sp, r7
 800ee92:	bd80      	pop	{r7, pc}

0800ee94 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800ee94:	b580      	push	{r7, lr}
 800ee96:	b086      	sub	sp, #24
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	60f8      	str	r0, [r7, #12]
 800ee9c:	460b      	mov	r3, r1
 800ee9e:	607a      	str	r2, [r7, #4]
 800eea0:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800eea2:	2300      	movs	r3, #0
 800eea4:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800eea6:	f107 030b 	add.w	r3, r7, #11
 800eeaa:	2201      	movs	r2, #1
 800eeac:	4619      	mov	r1, r3
 800eeae:	68f8      	ldr	r0, [r7, #12]
 800eeb0:	f7ff fea7 	bl	800ec02 <_I2CWrite>
 800eeb4:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800eeb6:	693b      	ldr	r3, [r7, #16]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d002      	beq.n	800eec2 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800eebc:	23ec      	movs	r3, #236	; 0xec
 800eebe:	75fb      	strb	r3, [r7, #23]
        goto done;
 800eec0:	e017      	b.n	800eef2 <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800eec2:	2202      	movs	r2, #2
 800eec4:	490e      	ldr	r1, [pc, #56]	; (800ef00 <VL53L0X_RdWord+0x6c>)
 800eec6:	68f8      	ldr	r0, [r7, #12]
 800eec8:	f7ff feba 	bl	800ec40 <_I2CRead>
 800eecc:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800eece:	693b      	ldr	r3, [r7, #16]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d002      	beq.n	800eeda <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800eed4:	23ec      	movs	r3, #236	; 0xec
 800eed6:	75fb      	strb	r3, [r7, #23]
        goto done;
 800eed8:	e00b      	b.n	800eef2 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800eeda:	4b09      	ldr	r3, [pc, #36]	; (800ef00 <VL53L0X_RdWord+0x6c>)
 800eedc:	781b      	ldrb	r3, [r3, #0]
 800eede:	b29b      	uxth	r3, r3
 800eee0:	021b      	lsls	r3, r3, #8
 800eee2:	b29a      	uxth	r2, r3
 800eee4:	4b06      	ldr	r3, [pc, #24]	; (800ef00 <VL53L0X_RdWord+0x6c>)
 800eee6:	785b      	ldrb	r3, [r3, #1]
 800eee8:	b29b      	uxth	r3, r3
 800eeea:	4413      	add	r3, r2
 800eeec:	b29a      	uxth	r2, r3
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800eef2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eef6:	4618      	mov	r0, r3
 800eef8:	3718      	adds	r7, #24
 800eefa:	46bd      	mov	sp, r7
 800eefc:	bd80      	pop	{r7, pc}
 800eefe:	bf00      	nop
 800ef00:	20000728 	.word	0x20000728

0800ef04 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800ef04:	b580      	push	{r7, lr}
 800ef06:	b086      	sub	sp, #24
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	60f8      	str	r0, [r7, #12]
 800ef0c:	460b      	mov	r3, r1
 800ef0e:	607a      	str	r2, [r7, #4]
 800ef10:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ef12:	2300      	movs	r3, #0
 800ef14:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800ef16:	f107 030b 	add.w	r3, r7, #11
 800ef1a:	2201      	movs	r2, #1
 800ef1c:	4619      	mov	r1, r3
 800ef1e:	68f8      	ldr	r0, [r7, #12]
 800ef20:	f7ff fe6f 	bl	800ec02 <_I2CWrite>
 800ef24:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ef26:	693b      	ldr	r3, [r7, #16]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d002      	beq.n	800ef32 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ef2c:	23ec      	movs	r3, #236	; 0xec
 800ef2e:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ef30:	e01b      	b.n	800ef6a <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800ef32:	2204      	movs	r2, #4
 800ef34:	4910      	ldr	r1, [pc, #64]	; (800ef78 <VL53L0X_RdDWord+0x74>)
 800ef36:	68f8      	ldr	r0, [r7, #12]
 800ef38:	f7ff fe82 	bl	800ec40 <_I2CRead>
 800ef3c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ef3e:	693b      	ldr	r3, [r7, #16]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d002      	beq.n	800ef4a <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ef44:	23ec      	movs	r3, #236	; 0xec
 800ef46:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ef48:	e00f      	b.n	800ef6a <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800ef4a:	4b0b      	ldr	r3, [pc, #44]	; (800ef78 <VL53L0X_RdDWord+0x74>)
 800ef4c:	781b      	ldrb	r3, [r3, #0]
 800ef4e:	061a      	lsls	r2, r3, #24
 800ef50:	4b09      	ldr	r3, [pc, #36]	; (800ef78 <VL53L0X_RdDWord+0x74>)
 800ef52:	785b      	ldrb	r3, [r3, #1]
 800ef54:	041b      	lsls	r3, r3, #16
 800ef56:	441a      	add	r2, r3
 800ef58:	4b07      	ldr	r3, [pc, #28]	; (800ef78 <VL53L0X_RdDWord+0x74>)
 800ef5a:	789b      	ldrb	r3, [r3, #2]
 800ef5c:	021b      	lsls	r3, r3, #8
 800ef5e:	4413      	add	r3, r2
 800ef60:	4a05      	ldr	r2, [pc, #20]	; (800ef78 <VL53L0X_RdDWord+0x74>)
 800ef62:	78d2      	ldrb	r2, [r2, #3]
 800ef64:	441a      	add	r2, r3
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800ef6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ef6e:	4618      	mov	r0, r3
 800ef70:	3718      	adds	r7, #24
 800ef72:	46bd      	mov	sp, r7
 800ef74:	bd80      	pop	{r7, pc}
 800ef76:	bf00      	nop
 800ef78:	20000728 	.word	0x20000728

0800ef7c <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800ef7c:	b580      	push	{r7, lr}
 800ef7e:	b084      	sub	sp, #16
 800ef80:	af00      	add	r7, sp, #0
 800ef82:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800ef84:	2300      	movs	r3, #0
 800ef86:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800ef88:	2002      	movs	r0, #2
 800ef8a:	f7f3 ff5b 	bl	8002e44 <HAL_Delay>
    return status;
 800ef8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ef92:	4618      	mov	r0, r3
 800ef94:	3710      	adds	r7, #16
 800ef96:	46bd      	mov	sp, r7
 800ef98:	bd80      	pop	{r7, pc}
	...

0800ef9c <__errno>:
 800ef9c:	4b01      	ldr	r3, [pc, #4]	; (800efa4 <__errno+0x8>)
 800ef9e:	6818      	ldr	r0, [r3, #0]
 800efa0:	4770      	bx	lr
 800efa2:	bf00      	nop
 800efa4:	200002c8 	.word	0x200002c8

0800efa8 <__libc_init_array>:
 800efa8:	b570      	push	{r4, r5, r6, lr}
 800efaa:	4d0d      	ldr	r5, [pc, #52]	; (800efe0 <__libc_init_array+0x38>)
 800efac:	4c0d      	ldr	r4, [pc, #52]	; (800efe4 <__libc_init_array+0x3c>)
 800efae:	1b64      	subs	r4, r4, r5
 800efb0:	10a4      	asrs	r4, r4, #2
 800efb2:	2600      	movs	r6, #0
 800efb4:	42a6      	cmp	r6, r4
 800efb6:	d109      	bne.n	800efcc <__libc_init_array+0x24>
 800efb8:	4d0b      	ldr	r5, [pc, #44]	; (800efe8 <__libc_init_array+0x40>)
 800efba:	4c0c      	ldr	r4, [pc, #48]	; (800efec <__libc_init_array+0x44>)
 800efbc:	f005 f8ce 	bl	801415c <_init>
 800efc0:	1b64      	subs	r4, r4, r5
 800efc2:	10a4      	asrs	r4, r4, #2
 800efc4:	2600      	movs	r6, #0
 800efc6:	42a6      	cmp	r6, r4
 800efc8:	d105      	bne.n	800efd6 <__libc_init_array+0x2e>
 800efca:	bd70      	pop	{r4, r5, r6, pc}
 800efcc:	f855 3b04 	ldr.w	r3, [r5], #4
 800efd0:	4798      	blx	r3
 800efd2:	3601      	adds	r6, #1
 800efd4:	e7ee      	b.n	800efb4 <__libc_init_array+0xc>
 800efd6:	f855 3b04 	ldr.w	r3, [r5], #4
 800efda:	4798      	blx	r3
 800efdc:	3601      	adds	r6, #1
 800efde:	e7f2      	b.n	800efc6 <__libc_init_array+0x1e>
 800efe0:	08014b64 	.word	0x08014b64
 800efe4:	08014b64 	.word	0x08014b64
 800efe8:	08014b64 	.word	0x08014b64
 800efec:	08014b68 	.word	0x08014b68

0800eff0 <memcpy>:
 800eff0:	440a      	add	r2, r1
 800eff2:	4291      	cmp	r1, r2
 800eff4:	f100 33ff 	add.w	r3, r0, #4294967295
 800eff8:	d100      	bne.n	800effc <memcpy+0xc>
 800effa:	4770      	bx	lr
 800effc:	b510      	push	{r4, lr}
 800effe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f002:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f006:	4291      	cmp	r1, r2
 800f008:	d1f9      	bne.n	800effe <memcpy+0xe>
 800f00a:	bd10      	pop	{r4, pc}

0800f00c <memset>:
 800f00c:	4402      	add	r2, r0
 800f00e:	4603      	mov	r3, r0
 800f010:	4293      	cmp	r3, r2
 800f012:	d100      	bne.n	800f016 <memset+0xa>
 800f014:	4770      	bx	lr
 800f016:	f803 1b01 	strb.w	r1, [r3], #1
 800f01a:	e7f9      	b.n	800f010 <memset+0x4>

0800f01c <__cvt>:
 800f01c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f020:	ec55 4b10 	vmov	r4, r5, d0
 800f024:	2d00      	cmp	r5, #0
 800f026:	460e      	mov	r6, r1
 800f028:	4619      	mov	r1, r3
 800f02a:	462b      	mov	r3, r5
 800f02c:	bfbb      	ittet	lt
 800f02e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f032:	461d      	movlt	r5, r3
 800f034:	2300      	movge	r3, #0
 800f036:	232d      	movlt	r3, #45	; 0x2d
 800f038:	700b      	strb	r3, [r1, #0]
 800f03a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f03c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f040:	4691      	mov	r9, r2
 800f042:	f023 0820 	bic.w	r8, r3, #32
 800f046:	bfbc      	itt	lt
 800f048:	4622      	movlt	r2, r4
 800f04a:	4614      	movlt	r4, r2
 800f04c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f050:	d005      	beq.n	800f05e <__cvt+0x42>
 800f052:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f056:	d100      	bne.n	800f05a <__cvt+0x3e>
 800f058:	3601      	adds	r6, #1
 800f05a:	2102      	movs	r1, #2
 800f05c:	e000      	b.n	800f060 <__cvt+0x44>
 800f05e:	2103      	movs	r1, #3
 800f060:	ab03      	add	r3, sp, #12
 800f062:	9301      	str	r3, [sp, #4]
 800f064:	ab02      	add	r3, sp, #8
 800f066:	9300      	str	r3, [sp, #0]
 800f068:	ec45 4b10 	vmov	d0, r4, r5
 800f06c:	4653      	mov	r3, sl
 800f06e:	4632      	mov	r2, r6
 800f070:	f001 fe5e 	bl	8010d30 <_dtoa_r>
 800f074:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f078:	4607      	mov	r7, r0
 800f07a:	d102      	bne.n	800f082 <__cvt+0x66>
 800f07c:	f019 0f01 	tst.w	r9, #1
 800f080:	d022      	beq.n	800f0c8 <__cvt+0xac>
 800f082:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f086:	eb07 0906 	add.w	r9, r7, r6
 800f08a:	d110      	bne.n	800f0ae <__cvt+0x92>
 800f08c:	783b      	ldrb	r3, [r7, #0]
 800f08e:	2b30      	cmp	r3, #48	; 0x30
 800f090:	d10a      	bne.n	800f0a8 <__cvt+0x8c>
 800f092:	2200      	movs	r2, #0
 800f094:	2300      	movs	r3, #0
 800f096:	4620      	mov	r0, r4
 800f098:	4629      	mov	r1, r5
 800f09a:	f7f1 fd35 	bl	8000b08 <__aeabi_dcmpeq>
 800f09e:	b918      	cbnz	r0, 800f0a8 <__cvt+0x8c>
 800f0a0:	f1c6 0601 	rsb	r6, r6, #1
 800f0a4:	f8ca 6000 	str.w	r6, [sl]
 800f0a8:	f8da 3000 	ldr.w	r3, [sl]
 800f0ac:	4499      	add	r9, r3
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	2300      	movs	r3, #0
 800f0b2:	4620      	mov	r0, r4
 800f0b4:	4629      	mov	r1, r5
 800f0b6:	f7f1 fd27 	bl	8000b08 <__aeabi_dcmpeq>
 800f0ba:	b108      	cbz	r0, 800f0c0 <__cvt+0xa4>
 800f0bc:	f8cd 900c 	str.w	r9, [sp, #12]
 800f0c0:	2230      	movs	r2, #48	; 0x30
 800f0c2:	9b03      	ldr	r3, [sp, #12]
 800f0c4:	454b      	cmp	r3, r9
 800f0c6:	d307      	bcc.n	800f0d8 <__cvt+0xbc>
 800f0c8:	9b03      	ldr	r3, [sp, #12]
 800f0ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f0cc:	1bdb      	subs	r3, r3, r7
 800f0ce:	4638      	mov	r0, r7
 800f0d0:	6013      	str	r3, [r2, #0]
 800f0d2:	b004      	add	sp, #16
 800f0d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0d8:	1c59      	adds	r1, r3, #1
 800f0da:	9103      	str	r1, [sp, #12]
 800f0dc:	701a      	strb	r2, [r3, #0]
 800f0de:	e7f0      	b.n	800f0c2 <__cvt+0xa6>

0800f0e0 <__exponent>:
 800f0e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f0e2:	4603      	mov	r3, r0
 800f0e4:	2900      	cmp	r1, #0
 800f0e6:	bfb8      	it	lt
 800f0e8:	4249      	neglt	r1, r1
 800f0ea:	f803 2b02 	strb.w	r2, [r3], #2
 800f0ee:	bfb4      	ite	lt
 800f0f0:	222d      	movlt	r2, #45	; 0x2d
 800f0f2:	222b      	movge	r2, #43	; 0x2b
 800f0f4:	2909      	cmp	r1, #9
 800f0f6:	7042      	strb	r2, [r0, #1]
 800f0f8:	dd2a      	ble.n	800f150 <__exponent+0x70>
 800f0fa:	f10d 0407 	add.w	r4, sp, #7
 800f0fe:	46a4      	mov	ip, r4
 800f100:	270a      	movs	r7, #10
 800f102:	46a6      	mov	lr, r4
 800f104:	460a      	mov	r2, r1
 800f106:	fb91 f6f7 	sdiv	r6, r1, r7
 800f10a:	fb07 1516 	mls	r5, r7, r6, r1
 800f10e:	3530      	adds	r5, #48	; 0x30
 800f110:	2a63      	cmp	r2, #99	; 0x63
 800f112:	f104 34ff 	add.w	r4, r4, #4294967295
 800f116:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800f11a:	4631      	mov	r1, r6
 800f11c:	dcf1      	bgt.n	800f102 <__exponent+0x22>
 800f11e:	3130      	adds	r1, #48	; 0x30
 800f120:	f1ae 0502 	sub.w	r5, lr, #2
 800f124:	f804 1c01 	strb.w	r1, [r4, #-1]
 800f128:	1c44      	adds	r4, r0, #1
 800f12a:	4629      	mov	r1, r5
 800f12c:	4561      	cmp	r1, ip
 800f12e:	d30a      	bcc.n	800f146 <__exponent+0x66>
 800f130:	f10d 0209 	add.w	r2, sp, #9
 800f134:	eba2 020e 	sub.w	r2, r2, lr
 800f138:	4565      	cmp	r5, ip
 800f13a:	bf88      	it	hi
 800f13c:	2200      	movhi	r2, #0
 800f13e:	4413      	add	r3, r2
 800f140:	1a18      	subs	r0, r3, r0
 800f142:	b003      	add	sp, #12
 800f144:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f146:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f14a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f14e:	e7ed      	b.n	800f12c <__exponent+0x4c>
 800f150:	2330      	movs	r3, #48	; 0x30
 800f152:	3130      	adds	r1, #48	; 0x30
 800f154:	7083      	strb	r3, [r0, #2]
 800f156:	70c1      	strb	r1, [r0, #3]
 800f158:	1d03      	adds	r3, r0, #4
 800f15a:	e7f1      	b.n	800f140 <__exponent+0x60>

0800f15c <_printf_float>:
 800f15c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f160:	ed2d 8b02 	vpush	{d8}
 800f164:	b08d      	sub	sp, #52	; 0x34
 800f166:	460c      	mov	r4, r1
 800f168:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f16c:	4616      	mov	r6, r2
 800f16e:	461f      	mov	r7, r3
 800f170:	4605      	mov	r5, r0
 800f172:	f002 ff3b 	bl	8011fec <_localeconv_r>
 800f176:	f8d0 a000 	ldr.w	sl, [r0]
 800f17a:	4650      	mov	r0, sl
 800f17c:	f7f1 f848 	bl	8000210 <strlen>
 800f180:	2300      	movs	r3, #0
 800f182:	930a      	str	r3, [sp, #40]	; 0x28
 800f184:	6823      	ldr	r3, [r4, #0]
 800f186:	9305      	str	r3, [sp, #20]
 800f188:	f8d8 3000 	ldr.w	r3, [r8]
 800f18c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f190:	3307      	adds	r3, #7
 800f192:	f023 0307 	bic.w	r3, r3, #7
 800f196:	f103 0208 	add.w	r2, r3, #8
 800f19a:	f8c8 2000 	str.w	r2, [r8]
 800f19e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1a2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f1a6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f1aa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f1ae:	9307      	str	r3, [sp, #28]
 800f1b0:	f8cd 8018 	str.w	r8, [sp, #24]
 800f1b4:	ee08 0a10 	vmov	s16, r0
 800f1b8:	4b9f      	ldr	r3, [pc, #636]	; (800f438 <_printf_float+0x2dc>)
 800f1ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f1be:	f04f 32ff 	mov.w	r2, #4294967295
 800f1c2:	f7f1 fcd3 	bl	8000b6c <__aeabi_dcmpun>
 800f1c6:	bb88      	cbnz	r0, 800f22c <_printf_float+0xd0>
 800f1c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f1cc:	4b9a      	ldr	r3, [pc, #616]	; (800f438 <_printf_float+0x2dc>)
 800f1ce:	f04f 32ff 	mov.w	r2, #4294967295
 800f1d2:	f7f1 fcad 	bl	8000b30 <__aeabi_dcmple>
 800f1d6:	bb48      	cbnz	r0, 800f22c <_printf_float+0xd0>
 800f1d8:	2200      	movs	r2, #0
 800f1da:	2300      	movs	r3, #0
 800f1dc:	4640      	mov	r0, r8
 800f1de:	4649      	mov	r1, r9
 800f1e0:	f7f1 fc9c 	bl	8000b1c <__aeabi_dcmplt>
 800f1e4:	b110      	cbz	r0, 800f1ec <_printf_float+0x90>
 800f1e6:	232d      	movs	r3, #45	; 0x2d
 800f1e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f1ec:	4b93      	ldr	r3, [pc, #588]	; (800f43c <_printf_float+0x2e0>)
 800f1ee:	4894      	ldr	r0, [pc, #592]	; (800f440 <_printf_float+0x2e4>)
 800f1f0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f1f4:	bf94      	ite	ls
 800f1f6:	4698      	movls	r8, r3
 800f1f8:	4680      	movhi	r8, r0
 800f1fa:	2303      	movs	r3, #3
 800f1fc:	6123      	str	r3, [r4, #16]
 800f1fe:	9b05      	ldr	r3, [sp, #20]
 800f200:	f023 0204 	bic.w	r2, r3, #4
 800f204:	6022      	str	r2, [r4, #0]
 800f206:	f04f 0900 	mov.w	r9, #0
 800f20a:	9700      	str	r7, [sp, #0]
 800f20c:	4633      	mov	r3, r6
 800f20e:	aa0b      	add	r2, sp, #44	; 0x2c
 800f210:	4621      	mov	r1, r4
 800f212:	4628      	mov	r0, r5
 800f214:	f000 f9d8 	bl	800f5c8 <_printf_common>
 800f218:	3001      	adds	r0, #1
 800f21a:	f040 8090 	bne.w	800f33e <_printf_float+0x1e2>
 800f21e:	f04f 30ff 	mov.w	r0, #4294967295
 800f222:	b00d      	add	sp, #52	; 0x34
 800f224:	ecbd 8b02 	vpop	{d8}
 800f228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f22c:	4642      	mov	r2, r8
 800f22e:	464b      	mov	r3, r9
 800f230:	4640      	mov	r0, r8
 800f232:	4649      	mov	r1, r9
 800f234:	f7f1 fc9a 	bl	8000b6c <__aeabi_dcmpun>
 800f238:	b140      	cbz	r0, 800f24c <_printf_float+0xf0>
 800f23a:	464b      	mov	r3, r9
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	bfbc      	itt	lt
 800f240:	232d      	movlt	r3, #45	; 0x2d
 800f242:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f246:	487f      	ldr	r0, [pc, #508]	; (800f444 <_printf_float+0x2e8>)
 800f248:	4b7f      	ldr	r3, [pc, #508]	; (800f448 <_printf_float+0x2ec>)
 800f24a:	e7d1      	b.n	800f1f0 <_printf_float+0x94>
 800f24c:	6863      	ldr	r3, [r4, #4]
 800f24e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f252:	9206      	str	r2, [sp, #24]
 800f254:	1c5a      	adds	r2, r3, #1
 800f256:	d13f      	bne.n	800f2d8 <_printf_float+0x17c>
 800f258:	2306      	movs	r3, #6
 800f25a:	6063      	str	r3, [r4, #4]
 800f25c:	9b05      	ldr	r3, [sp, #20]
 800f25e:	6861      	ldr	r1, [r4, #4]
 800f260:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f264:	2300      	movs	r3, #0
 800f266:	9303      	str	r3, [sp, #12]
 800f268:	ab0a      	add	r3, sp, #40	; 0x28
 800f26a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f26e:	ab09      	add	r3, sp, #36	; 0x24
 800f270:	ec49 8b10 	vmov	d0, r8, r9
 800f274:	9300      	str	r3, [sp, #0]
 800f276:	6022      	str	r2, [r4, #0]
 800f278:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f27c:	4628      	mov	r0, r5
 800f27e:	f7ff fecd 	bl	800f01c <__cvt>
 800f282:	9b06      	ldr	r3, [sp, #24]
 800f284:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f286:	2b47      	cmp	r3, #71	; 0x47
 800f288:	4680      	mov	r8, r0
 800f28a:	d108      	bne.n	800f29e <_printf_float+0x142>
 800f28c:	1cc8      	adds	r0, r1, #3
 800f28e:	db02      	blt.n	800f296 <_printf_float+0x13a>
 800f290:	6863      	ldr	r3, [r4, #4]
 800f292:	4299      	cmp	r1, r3
 800f294:	dd41      	ble.n	800f31a <_printf_float+0x1be>
 800f296:	f1ab 0b02 	sub.w	fp, fp, #2
 800f29a:	fa5f fb8b 	uxtb.w	fp, fp
 800f29e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f2a2:	d820      	bhi.n	800f2e6 <_printf_float+0x18a>
 800f2a4:	3901      	subs	r1, #1
 800f2a6:	465a      	mov	r2, fp
 800f2a8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f2ac:	9109      	str	r1, [sp, #36]	; 0x24
 800f2ae:	f7ff ff17 	bl	800f0e0 <__exponent>
 800f2b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f2b4:	1813      	adds	r3, r2, r0
 800f2b6:	2a01      	cmp	r2, #1
 800f2b8:	4681      	mov	r9, r0
 800f2ba:	6123      	str	r3, [r4, #16]
 800f2bc:	dc02      	bgt.n	800f2c4 <_printf_float+0x168>
 800f2be:	6822      	ldr	r2, [r4, #0]
 800f2c0:	07d2      	lsls	r2, r2, #31
 800f2c2:	d501      	bpl.n	800f2c8 <_printf_float+0x16c>
 800f2c4:	3301      	adds	r3, #1
 800f2c6:	6123      	str	r3, [r4, #16]
 800f2c8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d09c      	beq.n	800f20a <_printf_float+0xae>
 800f2d0:	232d      	movs	r3, #45	; 0x2d
 800f2d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f2d6:	e798      	b.n	800f20a <_printf_float+0xae>
 800f2d8:	9a06      	ldr	r2, [sp, #24]
 800f2da:	2a47      	cmp	r2, #71	; 0x47
 800f2dc:	d1be      	bne.n	800f25c <_printf_float+0x100>
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d1bc      	bne.n	800f25c <_printf_float+0x100>
 800f2e2:	2301      	movs	r3, #1
 800f2e4:	e7b9      	b.n	800f25a <_printf_float+0xfe>
 800f2e6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f2ea:	d118      	bne.n	800f31e <_printf_float+0x1c2>
 800f2ec:	2900      	cmp	r1, #0
 800f2ee:	6863      	ldr	r3, [r4, #4]
 800f2f0:	dd0b      	ble.n	800f30a <_printf_float+0x1ae>
 800f2f2:	6121      	str	r1, [r4, #16]
 800f2f4:	b913      	cbnz	r3, 800f2fc <_printf_float+0x1a0>
 800f2f6:	6822      	ldr	r2, [r4, #0]
 800f2f8:	07d0      	lsls	r0, r2, #31
 800f2fa:	d502      	bpl.n	800f302 <_printf_float+0x1a6>
 800f2fc:	3301      	adds	r3, #1
 800f2fe:	440b      	add	r3, r1
 800f300:	6123      	str	r3, [r4, #16]
 800f302:	65a1      	str	r1, [r4, #88]	; 0x58
 800f304:	f04f 0900 	mov.w	r9, #0
 800f308:	e7de      	b.n	800f2c8 <_printf_float+0x16c>
 800f30a:	b913      	cbnz	r3, 800f312 <_printf_float+0x1b6>
 800f30c:	6822      	ldr	r2, [r4, #0]
 800f30e:	07d2      	lsls	r2, r2, #31
 800f310:	d501      	bpl.n	800f316 <_printf_float+0x1ba>
 800f312:	3302      	adds	r3, #2
 800f314:	e7f4      	b.n	800f300 <_printf_float+0x1a4>
 800f316:	2301      	movs	r3, #1
 800f318:	e7f2      	b.n	800f300 <_printf_float+0x1a4>
 800f31a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f31e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f320:	4299      	cmp	r1, r3
 800f322:	db05      	blt.n	800f330 <_printf_float+0x1d4>
 800f324:	6823      	ldr	r3, [r4, #0]
 800f326:	6121      	str	r1, [r4, #16]
 800f328:	07d8      	lsls	r0, r3, #31
 800f32a:	d5ea      	bpl.n	800f302 <_printf_float+0x1a6>
 800f32c:	1c4b      	adds	r3, r1, #1
 800f32e:	e7e7      	b.n	800f300 <_printf_float+0x1a4>
 800f330:	2900      	cmp	r1, #0
 800f332:	bfd4      	ite	le
 800f334:	f1c1 0202 	rsble	r2, r1, #2
 800f338:	2201      	movgt	r2, #1
 800f33a:	4413      	add	r3, r2
 800f33c:	e7e0      	b.n	800f300 <_printf_float+0x1a4>
 800f33e:	6823      	ldr	r3, [r4, #0]
 800f340:	055a      	lsls	r2, r3, #21
 800f342:	d407      	bmi.n	800f354 <_printf_float+0x1f8>
 800f344:	6923      	ldr	r3, [r4, #16]
 800f346:	4642      	mov	r2, r8
 800f348:	4631      	mov	r1, r6
 800f34a:	4628      	mov	r0, r5
 800f34c:	47b8      	blx	r7
 800f34e:	3001      	adds	r0, #1
 800f350:	d12c      	bne.n	800f3ac <_printf_float+0x250>
 800f352:	e764      	b.n	800f21e <_printf_float+0xc2>
 800f354:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f358:	f240 80e0 	bls.w	800f51c <_printf_float+0x3c0>
 800f35c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f360:	2200      	movs	r2, #0
 800f362:	2300      	movs	r3, #0
 800f364:	f7f1 fbd0 	bl	8000b08 <__aeabi_dcmpeq>
 800f368:	2800      	cmp	r0, #0
 800f36a:	d034      	beq.n	800f3d6 <_printf_float+0x27a>
 800f36c:	4a37      	ldr	r2, [pc, #220]	; (800f44c <_printf_float+0x2f0>)
 800f36e:	2301      	movs	r3, #1
 800f370:	4631      	mov	r1, r6
 800f372:	4628      	mov	r0, r5
 800f374:	47b8      	blx	r7
 800f376:	3001      	adds	r0, #1
 800f378:	f43f af51 	beq.w	800f21e <_printf_float+0xc2>
 800f37c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f380:	429a      	cmp	r2, r3
 800f382:	db02      	blt.n	800f38a <_printf_float+0x22e>
 800f384:	6823      	ldr	r3, [r4, #0]
 800f386:	07d8      	lsls	r0, r3, #31
 800f388:	d510      	bpl.n	800f3ac <_printf_float+0x250>
 800f38a:	ee18 3a10 	vmov	r3, s16
 800f38e:	4652      	mov	r2, sl
 800f390:	4631      	mov	r1, r6
 800f392:	4628      	mov	r0, r5
 800f394:	47b8      	blx	r7
 800f396:	3001      	adds	r0, #1
 800f398:	f43f af41 	beq.w	800f21e <_printf_float+0xc2>
 800f39c:	f04f 0800 	mov.w	r8, #0
 800f3a0:	f104 091a 	add.w	r9, r4, #26
 800f3a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f3a6:	3b01      	subs	r3, #1
 800f3a8:	4543      	cmp	r3, r8
 800f3aa:	dc09      	bgt.n	800f3c0 <_printf_float+0x264>
 800f3ac:	6823      	ldr	r3, [r4, #0]
 800f3ae:	079b      	lsls	r3, r3, #30
 800f3b0:	f100 8105 	bmi.w	800f5be <_printf_float+0x462>
 800f3b4:	68e0      	ldr	r0, [r4, #12]
 800f3b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f3b8:	4298      	cmp	r0, r3
 800f3ba:	bfb8      	it	lt
 800f3bc:	4618      	movlt	r0, r3
 800f3be:	e730      	b.n	800f222 <_printf_float+0xc6>
 800f3c0:	2301      	movs	r3, #1
 800f3c2:	464a      	mov	r2, r9
 800f3c4:	4631      	mov	r1, r6
 800f3c6:	4628      	mov	r0, r5
 800f3c8:	47b8      	blx	r7
 800f3ca:	3001      	adds	r0, #1
 800f3cc:	f43f af27 	beq.w	800f21e <_printf_float+0xc2>
 800f3d0:	f108 0801 	add.w	r8, r8, #1
 800f3d4:	e7e6      	b.n	800f3a4 <_printf_float+0x248>
 800f3d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	dc39      	bgt.n	800f450 <_printf_float+0x2f4>
 800f3dc:	4a1b      	ldr	r2, [pc, #108]	; (800f44c <_printf_float+0x2f0>)
 800f3de:	2301      	movs	r3, #1
 800f3e0:	4631      	mov	r1, r6
 800f3e2:	4628      	mov	r0, r5
 800f3e4:	47b8      	blx	r7
 800f3e6:	3001      	adds	r0, #1
 800f3e8:	f43f af19 	beq.w	800f21e <_printf_float+0xc2>
 800f3ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f3f0:	4313      	orrs	r3, r2
 800f3f2:	d102      	bne.n	800f3fa <_printf_float+0x29e>
 800f3f4:	6823      	ldr	r3, [r4, #0]
 800f3f6:	07d9      	lsls	r1, r3, #31
 800f3f8:	d5d8      	bpl.n	800f3ac <_printf_float+0x250>
 800f3fa:	ee18 3a10 	vmov	r3, s16
 800f3fe:	4652      	mov	r2, sl
 800f400:	4631      	mov	r1, r6
 800f402:	4628      	mov	r0, r5
 800f404:	47b8      	blx	r7
 800f406:	3001      	adds	r0, #1
 800f408:	f43f af09 	beq.w	800f21e <_printf_float+0xc2>
 800f40c:	f04f 0900 	mov.w	r9, #0
 800f410:	f104 0a1a 	add.w	sl, r4, #26
 800f414:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f416:	425b      	negs	r3, r3
 800f418:	454b      	cmp	r3, r9
 800f41a:	dc01      	bgt.n	800f420 <_printf_float+0x2c4>
 800f41c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f41e:	e792      	b.n	800f346 <_printf_float+0x1ea>
 800f420:	2301      	movs	r3, #1
 800f422:	4652      	mov	r2, sl
 800f424:	4631      	mov	r1, r6
 800f426:	4628      	mov	r0, r5
 800f428:	47b8      	blx	r7
 800f42a:	3001      	adds	r0, #1
 800f42c:	f43f aef7 	beq.w	800f21e <_printf_float+0xc2>
 800f430:	f109 0901 	add.w	r9, r9, #1
 800f434:	e7ee      	b.n	800f414 <_printf_float+0x2b8>
 800f436:	bf00      	nop
 800f438:	7fefffff 	.word	0x7fefffff
 800f43c:	080146a8 	.word	0x080146a8
 800f440:	080146ac 	.word	0x080146ac
 800f444:	080146b4 	.word	0x080146b4
 800f448:	080146b0 	.word	0x080146b0
 800f44c:	08014aa9 	.word	0x08014aa9
 800f450:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f452:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f454:	429a      	cmp	r2, r3
 800f456:	bfa8      	it	ge
 800f458:	461a      	movge	r2, r3
 800f45a:	2a00      	cmp	r2, #0
 800f45c:	4691      	mov	r9, r2
 800f45e:	dc37      	bgt.n	800f4d0 <_printf_float+0x374>
 800f460:	f04f 0b00 	mov.w	fp, #0
 800f464:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f468:	f104 021a 	add.w	r2, r4, #26
 800f46c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f46e:	9305      	str	r3, [sp, #20]
 800f470:	eba3 0309 	sub.w	r3, r3, r9
 800f474:	455b      	cmp	r3, fp
 800f476:	dc33      	bgt.n	800f4e0 <_printf_float+0x384>
 800f478:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f47c:	429a      	cmp	r2, r3
 800f47e:	db3b      	blt.n	800f4f8 <_printf_float+0x39c>
 800f480:	6823      	ldr	r3, [r4, #0]
 800f482:	07da      	lsls	r2, r3, #31
 800f484:	d438      	bmi.n	800f4f8 <_printf_float+0x39c>
 800f486:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f488:	9a05      	ldr	r2, [sp, #20]
 800f48a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f48c:	1a9a      	subs	r2, r3, r2
 800f48e:	eba3 0901 	sub.w	r9, r3, r1
 800f492:	4591      	cmp	r9, r2
 800f494:	bfa8      	it	ge
 800f496:	4691      	movge	r9, r2
 800f498:	f1b9 0f00 	cmp.w	r9, #0
 800f49c:	dc35      	bgt.n	800f50a <_printf_float+0x3ae>
 800f49e:	f04f 0800 	mov.w	r8, #0
 800f4a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f4a6:	f104 0a1a 	add.w	sl, r4, #26
 800f4aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f4ae:	1a9b      	subs	r3, r3, r2
 800f4b0:	eba3 0309 	sub.w	r3, r3, r9
 800f4b4:	4543      	cmp	r3, r8
 800f4b6:	f77f af79 	ble.w	800f3ac <_printf_float+0x250>
 800f4ba:	2301      	movs	r3, #1
 800f4bc:	4652      	mov	r2, sl
 800f4be:	4631      	mov	r1, r6
 800f4c0:	4628      	mov	r0, r5
 800f4c2:	47b8      	blx	r7
 800f4c4:	3001      	adds	r0, #1
 800f4c6:	f43f aeaa 	beq.w	800f21e <_printf_float+0xc2>
 800f4ca:	f108 0801 	add.w	r8, r8, #1
 800f4ce:	e7ec      	b.n	800f4aa <_printf_float+0x34e>
 800f4d0:	4613      	mov	r3, r2
 800f4d2:	4631      	mov	r1, r6
 800f4d4:	4642      	mov	r2, r8
 800f4d6:	4628      	mov	r0, r5
 800f4d8:	47b8      	blx	r7
 800f4da:	3001      	adds	r0, #1
 800f4dc:	d1c0      	bne.n	800f460 <_printf_float+0x304>
 800f4de:	e69e      	b.n	800f21e <_printf_float+0xc2>
 800f4e0:	2301      	movs	r3, #1
 800f4e2:	4631      	mov	r1, r6
 800f4e4:	4628      	mov	r0, r5
 800f4e6:	9205      	str	r2, [sp, #20]
 800f4e8:	47b8      	blx	r7
 800f4ea:	3001      	adds	r0, #1
 800f4ec:	f43f ae97 	beq.w	800f21e <_printf_float+0xc2>
 800f4f0:	9a05      	ldr	r2, [sp, #20]
 800f4f2:	f10b 0b01 	add.w	fp, fp, #1
 800f4f6:	e7b9      	b.n	800f46c <_printf_float+0x310>
 800f4f8:	ee18 3a10 	vmov	r3, s16
 800f4fc:	4652      	mov	r2, sl
 800f4fe:	4631      	mov	r1, r6
 800f500:	4628      	mov	r0, r5
 800f502:	47b8      	blx	r7
 800f504:	3001      	adds	r0, #1
 800f506:	d1be      	bne.n	800f486 <_printf_float+0x32a>
 800f508:	e689      	b.n	800f21e <_printf_float+0xc2>
 800f50a:	9a05      	ldr	r2, [sp, #20]
 800f50c:	464b      	mov	r3, r9
 800f50e:	4442      	add	r2, r8
 800f510:	4631      	mov	r1, r6
 800f512:	4628      	mov	r0, r5
 800f514:	47b8      	blx	r7
 800f516:	3001      	adds	r0, #1
 800f518:	d1c1      	bne.n	800f49e <_printf_float+0x342>
 800f51a:	e680      	b.n	800f21e <_printf_float+0xc2>
 800f51c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f51e:	2a01      	cmp	r2, #1
 800f520:	dc01      	bgt.n	800f526 <_printf_float+0x3ca>
 800f522:	07db      	lsls	r3, r3, #31
 800f524:	d538      	bpl.n	800f598 <_printf_float+0x43c>
 800f526:	2301      	movs	r3, #1
 800f528:	4642      	mov	r2, r8
 800f52a:	4631      	mov	r1, r6
 800f52c:	4628      	mov	r0, r5
 800f52e:	47b8      	blx	r7
 800f530:	3001      	adds	r0, #1
 800f532:	f43f ae74 	beq.w	800f21e <_printf_float+0xc2>
 800f536:	ee18 3a10 	vmov	r3, s16
 800f53a:	4652      	mov	r2, sl
 800f53c:	4631      	mov	r1, r6
 800f53e:	4628      	mov	r0, r5
 800f540:	47b8      	blx	r7
 800f542:	3001      	adds	r0, #1
 800f544:	f43f ae6b 	beq.w	800f21e <_printf_float+0xc2>
 800f548:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f54c:	2200      	movs	r2, #0
 800f54e:	2300      	movs	r3, #0
 800f550:	f7f1 fada 	bl	8000b08 <__aeabi_dcmpeq>
 800f554:	b9d8      	cbnz	r0, 800f58e <_printf_float+0x432>
 800f556:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f558:	f108 0201 	add.w	r2, r8, #1
 800f55c:	3b01      	subs	r3, #1
 800f55e:	4631      	mov	r1, r6
 800f560:	4628      	mov	r0, r5
 800f562:	47b8      	blx	r7
 800f564:	3001      	adds	r0, #1
 800f566:	d10e      	bne.n	800f586 <_printf_float+0x42a>
 800f568:	e659      	b.n	800f21e <_printf_float+0xc2>
 800f56a:	2301      	movs	r3, #1
 800f56c:	4652      	mov	r2, sl
 800f56e:	4631      	mov	r1, r6
 800f570:	4628      	mov	r0, r5
 800f572:	47b8      	blx	r7
 800f574:	3001      	adds	r0, #1
 800f576:	f43f ae52 	beq.w	800f21e <_printf_float+0xc2>
 800f57a:	f108 0801 	add.w	r8, r8, #1
 800f57e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f580:	3b01      	subs	r3, #1
 800f582:	4543      	cmp	r3, r8
 800f584:	dcf1      	bgt.n	800f56a <_printf_float+0x40e>
 800f586:	464b      	mov	r3, r9
 800f588:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f58c:	e6dc      	b.n	800f348 <_printf_float+0x1ec>
 800f58e:	f04f 0800 	mov.w	r8, #0
 800f592:	f104 0a1a 	add.w	sl, r4, #26
 800f596:	e7f2      	b.n	800f57e <_printf_float+0x422>
 800f598:	2301      	movs	r3, #1
 800f59a:	4642      	mov	r2, r8
 800f59c:	e7df      	b.n	800f55e <_printf_float+0x402>
 800f59e:	2301      	movs	r3, #1
 800f5a0:	464a      	mov	r2, r9
 800f5a2:	4631      	mov	r1, r6
 800f5a4:	4628      	mov	r0, r5
 800f5a6:	47b8      	blx	r7
 800f5a8:	3001      	adds	r0, #1
 800f5aa:	f43f ae38 	beq.w	800f21e <_printf_float+0xc2>
 800f5ae:	f108 0801 	add.w	r8, r8, #1
 800f5b2:	68e3      	ldr	r3, [r4, #12]
 800f5b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f5b6:	1a5b      	subs	r3, r3, r1
 800f5b8:	4543      	cmp	r3, r8
 800f5ba:	dcf0      	bgt.n	800f59e <_printf_float+0x442>
 800f5bc:	e6fa      	b.n	800f3b4 <_printf_float+0x258>
 800f5be:	f04f 0800 	mov.w	r8, #0
 800f5c2:	f104 0919 	add.w	r9, r4, #25
 800f5c6:	e7f4      	b.n	800f5b2 <_printf_float+0x456>

0800f5c8 <_printf_common>:
 800f5c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5cc:	4616      	mov	r6, r2
 800f5ce:	4699      	mov	r9, r3
 800f5d0:	688a      	ldr	r2, [r1, #8]
 800f5d2:	690b      	ldr	r3, [r1, #16]
 800f5d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f5d8:	4293      	cmp	r3, r2
 800f5da:	bfb8      	it	lt
 800f5dc:	4613      	movlt	r3, r2
 800f5de:	6033      	str	r3, [r6, #0]
 800f5e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f5e4:	4607      	mov	r7, r0
 800f5e6:	460c      	mov	r4, r1
 800f5e8:	b10a      	cbz	r2, 800f5ee <_printf_common+0x26>
 800f5ea:	3301      	adds	r3, #1
 800f5ec:	6033      	str	r3, [r6, #0]
 800f5ee:	6823      	ldr	r3, [r4, #0]
 800f5f0:	0699      	lsls	r1, r3, #26
 800f5f2:	bf42      	ittt	mi
 800f5f4:	6833      	ldrmi	r3, [r6, #0]
 800f5f6:	3302      	addmi	r3, #2
 800f5f8:	6033      	strmi	r3, [r6, #0]
 800f5fa:	6825      	ldr	r5, [r4, #0]
 800f5fc:	f015 0506 	ands.w	r5, r5, #6
 800f600:	d106      	bne.n	800f610 <_printf_common+0x48>
 800f602:	f104 0a19 	add.w	sl, r4, #25
 800f606:	68e3      	ldr	r3, [r4, #12]
 800f608:	6832      	ldr	r2, [r6, #0]
 800f60a:	1a9b      	subs	r3, r3, r2
 800f60c:	42ab      	cmp	r3, r5
 800f60e:	dc26      	bgt.n	800f65e <_printf_common+0x96>
 800f610:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f614:	1e13      	subs	r3, r2, #0
 800f616:	6822      	ldr	r2, [r4, #0]
 800f618:	bf18      	it	ne
 800f61a:	2301      	movne	r3, #1
 800f61c:	0692      	lsls	r2, r2, #26
 800f61e:	d42b      	bmi.n	800f678 <_printf_common+0xb0>
 800f620:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f624:	4649      	mov	r1, r9
 800f626:	4638      	mov	r0, r7
 800f628:	47c0      	blx	r8
 800f62a:	3001      	adds	r0, #1
 800f62c:	d01e      	beq.n	800f66c <_printf_common+0xa4>
 800f62e:	6823      	ldr	r3, [r4, #0]
 800f630:	68e5      	ldr	r5, [r4, #12]
 800f632:	6832      	ldr	r2, [r6, #0]
 800f634:	f003 0306 	and.w	r3, r3, #6
 800f638:	2b04      	cmp	r3, #4
 800f63a:	bf08      	it	eq
 800f63c:	1aad      	subeq	r5, r5, r2
 800f63e:	68a3      	ldr	r3, [r4, #8]
 800f640:	6922      	ldr	r2, [r4, #16]
 800f642:	bf0c      	ite	eq
 800f644:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f648:	2500      	movne	r5, #0
 800f64a:	4293      	cmp	r3, r2
 800f64c:	bfc4      	itt	gt
 800f64e:	1a9b      	subgt	r3, r3, r2
 800f650:	18ed      	addgt	r5, r5, r3
 800f652:	2600      	movs	r6, #0
 800f654:	341a      	adds	r4, #26
 800f656:	42b5      	cmp	r5, r6
 800f658:	d11a      	bne.n	800f690 <_printf_common+0xc8>
 800f65a:	2000      	movs	r0, #0
 800f65c:	e008      	b.n	800f670 <_printf_common+0xa8>
 800f65e:	2301      	movs	r3, #1
 800f660:	4652      	mov	r2, sl
 800f662:	4649      	mov	r1, r9
 800f664:	4638      	mov	r0, r7
 800f666:	47c0      	blx	r8
 800f668:	3001      	adds	r0, #1
 800f66a:	d103      	bne.n	800f674 <_printf_common+0xac>
 800f66c:	f04f 30ff 	mov.w	r0, #4294967295
 800f670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f674:	3501      	adds	r5, #1
 800f676:	e7c6      	b.n	800f606 <_printf_common+0x3e>
 800f678:	18e1      	adds	r1, r4, r3
 800f67a:	1c5a      	adds	r2, r3, #1
 800f67c:	2030      	movs	r0, #48	; 0x30
 800f67e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f682:	4422      	add	r2, r4
 800f684:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f688:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f68c:	3302      	adds	r3, #2
 800f68e:	e7c7      	b.n	800f620 <_printf_common+0x58>
 800f690:	2301      	movs	r3, #1
 800f692:	4622      	mov	r2, r4
 800f694:	4649      	mov	r1, r9
 800f696:	4638      	mov	r0, r7
 800f698:	47c0      	blx	r8
 800f69a:	3001      	adds	r0, #1
 800f69c:	d0e6      	beq.n	800f66c <_printf_common+0xa4>
 800f69e:	3601      	adds	r6, #1
 800f6a0:	e7d9      	b.n	800f656 <_printf_common+0x8e>
	...

0800f6a4 <_printf_i>:
 800f6a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f6a8:	7e0f      	ldrb	r7, [r1, #24]
 800f6aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f6ac:	2f78      	cmp	r7, #120	; 0x78
 800f6ae:	4691      	mov	r9, r2
 800f6b0:	4680      	mov	r8, r0
 800f6b2:	460c      	mov	r4, r1
 800f6b4:	469a      	mov	sl, r3
 800f6b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f6ba:	d807      	bhi.n	800f6cc <_printf_i+0x28>
 800f6bc:	2f62      	cmp	r7, #98	; 0x62
 800f6be:	d80a      	bhi.n	800f6d6 <_printf_i+0x32>
 800f6c0:	2f00      	cmp	r7, #0
 800f6c2:	f000 80d8 	beq.w	800f876 <_printf_i+0x1d2>
 800f6c6:	2f58      	cmp	r7, #88	; 0x58
 800f6c8:	f000 80a3 	beq.w	800f812 <_printf_i+0x16e>
 800f6cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f6d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f6d4:	e03a      	b.n	800f74c <_printf_i+0xa8>
 800f6d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f6da:	2b15      	cmp	r3, #21
 800f6dc:	d8f6      	bhi.n	800f6cc <_printf_i+0x28>
 800f6de:	a101      	add	r1, pc, #4	; (adr r1, 800f6e4 <_printf_i+0x40>)
 800f6e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f6e4:	0800f73d 	.word	0x0800f73d
 800f6e8:	0800f751 	.word	0x0800f751
 800f6ec:	0800f6cd 	.word	0x0800f6cd
 800f6f0:	0800f6cd 	.word	0x0800f6cd
 800f6f4:	0800f6cd 	.word	0x0800f6cd
 800f6f8:	0800f6cd 	.word	0x0800f6cd
 800f6fc:	0800f751 	.word	0x0800f751
 800f700:	0800f6cd 	.word	0x0800f6cd
 800f704:	0800f6cd 	.word	0x0800f6cd
 800f708:	0800f6cd 	.word	0x0800f6cd
 800f70c:	0800f6cd 	.word	0x0800f6cd
 800f710:	0800f85d 	.word	0x0800f85d
 800f714:	0800f781 	.word	0x0800f781
 800f718:	0800f83f 	.word	0x0800f83f
 800f71c:	0800f6cd 	.word	0x0800f6cd
 800f720:	0800f6cd 	.word	0x0800f6cd
 800f724:	0800f87f 	.word	0x0800f87f
 800f728:	0800f6cd 	.word	0x0800f6cd
 800f72c:	0800f781 	.word	0x0800f781
 800f730:	0800f6cd 	.word	0x0800f6cd
 800f734:	0800f6cd 	.word	0x0800f6cd
 800f738:	0800f847 	.word	0x0800f847
 800f73c:	682b      	ldr	r3, [r5, #0]
 800f73e:	1d1a      	adds	r2, r3, #4
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	602a      	str	r2, [r5, #0]
 800f744:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f748:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f74c:	2301      	movs	r3, #1
 800f74e:	e0a3      	b.n	800f898 <_printf_i+0x1f4>
 800f750:	6820      	ldr	r0, [r4, #0]
 800f752:	6829      	ldr	r1, [r5, #0]
 800f754:	0606      	lsls	r6, r0, #24
 800f756:	f101 0304 	add.w	r3, r1, #4
 800f75a:	d50a      	bpl.n	800f772 <_printf_i+0xce>
 800f75c:	680e      	ldr	r6, [r1, #0]
 800f75e:	602b      	str	r3, [r5, #0]
 800f760:	2e00      	cmp	r6, #0
 800f762:	da03      	bge.n	800f76c <_printf_i+0xc8>
 800f764:	232d      	movs	r3, #45	; 0x2d
 800f766:	4276      	negs	r6, r6
 800f768:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f76c:	485e      	ldr	r0, [pc, #376]	; (800f8e8 <_printf_i+0x244>)
 800f76e:	230a      	movs	r3, #10
 800f770:	e019      	b.n	800f7a6 <_printf_i+0x102>
 800f772:	680e      	ldr	r6, [r1, #0]
 800f774:	602b      	str	r3, [r5, #0]
 800f776:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f77a:	bf18      	it	ne
 800f77c:	b236      	sxthne	r6, r6
 800f77e:	e7ef      	b.n	800f760 <_printf_i+0xbc>
 800f780:	682b      	ldr	r3, [r5, #0]
 800f782:	6820      	ldr	r0, [r4, #0]
 800f784:	1d19      	adds	r1, r3, #4
 800f786:	6029      	str	r1, [r5, #0]
 800f788:	0601      	lsls	r1, r0, #24
 800f78a:	d501      	bpl.n	800f790 <_printf_i+0xec>
 800f78c:	681e      	ldr	r6, [r3, #0]
 800f78e:	e002      	b.n	800f796 <_printf_i+0xf2>
 800f790:	0646      	lsls	r6, r0, #25
 800f792:	d5fb      	bpl.n	800f78c <_printf_i+0xe8>
 800f794:	881e      	ldrh	r6, [r3, #0]
 800f796:	4854      	ldr	r0, [pc, #336]	; (800f8e8 <_printf_i+0x244>)
 800f798:	2f6f      	cmp	r7, #111	; 0x6f
 800f79a:	bf0c      	ite	eq
 800f79c:	2308      	moveq	r3, #8
 800f79e:	230a      	movne	r3, #10
 800f7a0:	2100      	movs	r1, #0
 800f7a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f7a6:	6865      	ldr	r5, [r4, #4]
 800f7a8:	60a5      	str	r5, [r4, #8]
 800f7aa:	2d00      	cmp	r5, #0
 800f7ac:	bfa2      	ittt	ge
 800f7ae:	6821      	ldrge	r1, [r4, #0]
 800f7b0:	f021 0104 	bicge.w	r1, r1, #4
 800f7b4:	6021      	strge	r1, [r4, #0]
 800f7b6:	b90e      	cbnz	r6, 800f7bc <_printf_i+0x118>
 800f7b8:	2d00      	cmp	r5, #0
 800f7ba:	d04d      	beq.n	800f858 <_printf_i+0x1b4>
 800f7bc:	4615      	mov	r5, r2
 800f7be:	fbb6 f1f3 	udiv	r1, r6, r3
 800f7c2:	fb03 6711 	mls	r7, r3, r1, r6
 800f7c6:	5dc7      	ldrb	r7, [r0, r7]
 800f7c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f7cc:	4637      	mov	r7, r6
 800f7ce:	42bb      	cmp	r3, r7
 800f7d0:	460e      	mov	r6, r1
 800f7d2:	d9f4      	bls.n	800f7be <_printf_i+0x11a>
 800f7d4:	2b08      	cmp	r3, #8
 800f7d6:	d10b      	bne.n	800f7f0 <_printf_i+0x14c>
 800f7d8:	6823      	ldr	r3, [r4, #0]
 800f7da:	07de      	lsls	r6, r3, #31
 800f7dc:	d508      	bpl.n	800f7f0 <_printf_i+0x14c>
 800f7de:	6923      	ldr	r3, [r4, #16]
 800f7e0:	6861      	ldr	r1, [r4, #4]
 800f7e2:	4299      	cmp	r1, r3
 800f7e4:	bfde      	ittt	le
 800f7e6:	2330      	movle	r3, #48	; 0x30
 800f7e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f7ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f7f0:	1b52      	subs	r2, r2, r5
 800f7f2:	6122      	str	r2, [r4, #16]
 800f7f4:	f8cd a000 	str.w	sl, [sp]
 800f7f8:	464b      	mov	r3, r9
 800f7fa:	aa03      	add	r2, sp, #12
 800f7fc:	4621      	mov	r1, r4
 800f7fe:	4640      	mov	r0, r8
 800f800:	f7ff fee2 	bl	800f5c8 <_printf_common>
 800f804:	3001      	adds	r0, #1
 800f806:	d14c      	bne.n	800f8a2 <_printf_i+0x1fe>
 800f808:	f04f 30ff 	mov.w	r0, #4294967295
 800f80c:	b004      	add	sp, #16
 800f80e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f812:	4835      	ldr	r0, [pc, #212]	; (800f8e8 <_printf_i+0x244>)
 800f814:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f818:	6829      	ldr	r1, [r5, #0]
 800f81a:	6823      	ldr	r3, [r4, #0]
 800f81c:	f851 6b04 	ldr.w	r6, [r1], #4
 800f820:	6029      	str	r1, [r5, #0]
 800f822:	061d      	lsls	r5, r3, #24
 800f824:	d514      	bpl.n	800f850 <_printf_i+0x1ac>
 800f826:	07df      	lsls	r7, r3, #31
 800f828:	bf44      	itt	mi
 800f82a:	f043 0320 	orrmi.w	r3, r3, #32
 800f82e:	6023      	strmi	r3, [r4, #0]
 800f830:	b91e      	cbnz	r6, 800f83a <_printf_i+0x196>
 800f832:	6823      	ldr	r3, [r4, #0]
 800f834:	f023 0320 	bic.w	r3, r3, #32
 800f838:	6023      	str	r3, [r4, #0]
 800f83a:	2310      	movs	r3, #16
 800f83c:	e7b0      	b.n	800f7a0 <_printf_i+0xfc>
 800f83e:	6823      	ldr	r3, [r4, #0]
 800f840:	f043 0320 	orr.w	r3, r3, #32
 800f844:	6023      	str	r3, [r4, #0]
 800f846:	2378      	movs	r3, #120	; 0x78
 800f848:	4828      	ldr	r0, [pc, #160]	; (800f8ec <_printf_i+0x248>)
 800f84a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f84e:	e7e3      	b.n	800f818 <_printf_i+0x174>
 800f850:	0659      	lsls	r1, r3, #25
 800f852:	bf48      	it	mi
 800f854:	b2b6      	uxthmi	r6, r6
 800f856:	e7e6      	b.n	800f826 <_printf_i+0x182>
 800f858:	4615      	mov	r5, r2
 800f85a:	e7bb      	b.n	800f7d4 <_printf_i+0x130>
 800f85c:	682b      	ldr	r3, [r5, #0]
 800f85e:	6826      	ldr	r6, [r4, #0]
 800f860:	6961      	ldr	r1, [r4, #20]
 800f862:	1d18      	adds	r0, r3, #4
 800f864:	6028      	str	r0, [r5, #0]
 800f866:	0635      	lsls	r5, r6, #24
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	d501      	bpl.n	800f870 <_printf_i+0x1cc>
 800f86c:	6019      	str	r1, [r3, #0]
 800f86e:	e002      	b.n	800f876 <_printf_i+0x1d2>
 800f870:	0670      	lsls	r0, r6, #25
 800f872:	d5fb      	bpl.n	800f86c <_printf_i+0x1c8>
 800f874:	8019      	strh	r1, [r3, #0]
 800f876:	2300      	movs	r3, #0
 800f878:	6123      	str	r3, [r4, #16]
 800f87a:	4615      	mov	r5, r2
 800f87c:	e7ba      	b.n	800f7f4 <_printf_i+0x150>
 800f87e:	682b      	ldr	r3, [r5, #0]
 800f880:	1d1a      	adds	r2, r3, #4
 800f882:	602a      	str	r2, [r5, #0]
 800f884:	681d      	ldr	r5, [r3, #0]
 800f886:	6862      	ldr	r2, [r4, #4]
 800f888:	2100      	movs	r1, #0
 800f88a:	4628      	mov	r0, r5
 800f88c:	f7f0 fcc8 	bl	8000220 <memchr>
 800f890:	b108      	cbz	r0, 800f896 <_printf_i+0x1f2>
 800f892:	1b40      	subs	r0, r0, r5
 800f894:	6060      	str	r0, [r4, #4]
 800f896:	6863      	ldr	r3, [r4, #4]
 800f898:	6123      	str	r3, [r4, #16]
 800f89a:	2300      	movs	r3, #0
 800f89c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f8a0:	e7a8      	b.n	800f7f4 <_printf_i+0x150>
 800f8a2:	6923      	ldr	r3, [r4, #16]
 800f8a4:	462a      	mov	r2, r5
 800f8a6:	4649      	mov	r1, r9
 800f8a8:	4640      	mov	r0, r8
 800f8aa:	47d0      	blx	sl
 800f8ac:	3001      	adds	r0, #1
 800f8ae:	d0ab      	beq.n	800f808 <_printf_i+0x164>
 800f8b0:	6823      	ldr	r3, [r4, #0]
 800f8b2:	079b      	lsls	r3, r3, #30
 800f8b4:	d413      	bmi.n	800f8de <_printf_i+0x23a>
 800f8b6:	68e0      	ldr	r0, [r4, #12]
 800f8b8:	9b03      	ldr	r3, [sp, #12]
 800f8ba:	4298      	cmp	r0, r3
 800f8bc:	bfb8      	it	lt
 800f8be:	4618      	movlt	r0, r3
 800f8c0:	e7a4      	b.n	800f80c <_printf_i+0x168>
 800f8c2:	2301      	movs	r3, #1
 800f8c4:	4632      	mov	r2, r6
 800f8c6:	4649      	mov	r1, r9
 800f8c8:	4640      	mov	r0, r8
 800f8ca:	47d0      	blx	sl
 800f8cc:	3001      	adds	r0, #1
 800f8ce:	d09b      	beq.n	800f808 <_printf_i+0x164>
 800f8d0:	3501      	adds	r5, #1
 800f8d2:	68e3      	ldr	r3, [r4, #12]
 800f8d4:	9903      	ldr	r1, [sp, #12]
 800f8d6:	1a5b      	subs	r3, r3, r1
 800f8d8:	42ab      	cmp	r3, r5
 800f8da:	dcf2      	bgt.n	800f8c2 <_printf_i+0x21e>
 800f8dc:	e7eb      	b.n	800f8b6 <_printf_i+0x212>
 800f8de:	2500      	movs	r5, #0
 800f8e0:	f104 0619 	add.w	r6, r4, #25
 800f8e4:	e7f5      	b.n	800f8d2 <_printf_i+0x22e>
 800f8e6:	bf00      	nop
 800f8e8:	080146b8 	.word	0x080146b8
 800f8ec:	080146c9 	.word	0x080146c9

0800f8f0 <_scanf_float>:
 800f8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8f4:	b087      	sub	sp, #28
 800f8f6:	4617      	mov	r7, r2
 800f8f8:	9303      	str	r3, [sp, #12]
 800f8fa:	688b      	ldr	r3, [r1, #8]
 800f8fc:	1e5a      	subs	r2, r3, #1
 800f8fe:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800f902:	bf83      	ittte	hi
 800f904:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800f908:	195b      	addhi	r3, r3, r5
 800f90a:	9302      	strhi	r3, [sp, #8]
 800f90c:	2300      	movls	r3, #0
 800f90e:	bf86      	itte	hi
 800f910:	f240 135d 	movwhi	r3, #349	; 0x15d
 800f914:	608b      	strhi	r3, [r1, #8]
 800f916:	9302      	strls	r3, [sp, #8]
 800f918:	680b      	ldr	r3, [r1, #0]
 800f91a:	468b      	mov	fp, r1
 800f91c:	2500      	movs	r5, #0
 800f91e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800f922:	f84b 3b1c 	str.w	r3, [fp], #28
 800f926:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f92a:	4680      	mov	r8, r0
 800f92c:	460c      	mov	r4, r1
 800f92e:	465e      	mov	r6, fp
 800f930:	46aa      	mov	sl, r5
 800f932:	46a9      	mov	r9, r5
 800f934:	9501      	str	r5, [sp, #4]
 800f936:	68a2      	ldr	r2, [r4, #8]
 800f938:	b152      	cbz	r2, 800f950 <_scanf_float+0x60>
 800f93a:	683b      	ldr	r3, [r7, #0]
 800f93c:	781b      	ldrb	r3, [r3, #0]
 800f93e:	2b4e      	cmp	r3, #78	; 0x4e
 800f940:	d864      	bhi.n	800fa0c <_scanf_float+0x11c>
 800f942:	2b40      	cmp	r3, #64	; 0x40
 800f944:	d83c      	bhi.n	800f9c0 <_scanf_float+0xd0>
 800f946:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800f94a:	b2c8      	uxtb	r0, r1
 800f94c:	280e      	cmp	r0, #14
 800f94e:	d93a      	bls.n	800f9c6 <_scanf_float+0xd6>
 800f950:	f1b9 0f00 	cmp.w	r9, #0
 800f954:	d003      	beq.n	800f95e <_scanf_float+0x6e>
 800f956:	6823      	ldr	r3, [r4, #0]
 800f958:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f95c:	6023      	str	r3, [r4, #0]
 800f95e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f962:	f1ba 0f01 	cmp.w	sl, #1
 800f966:	f200 8113 	bhi.w	800fb90 <_scanf_float+0x2a0>
 800f96a:	455e      	cmp	r6, fp
 800f96c:	f200 8105 	bhi.w	800fb7a <_scanf_float+0x28a>
 800f970:	2501      	movs	r5, #1
 800f972:	4628      	mov	r0, r5
 800f974:	b007      	add	sp, #28
 800f976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f97a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800f97e:	2a0d      	cmp	r2, #13
 800f980:	d8e6      	bhi.n	800f950 <_scanf_float+0x60>
 800f982:	a101      	add	r1, pc, #4	; (adr r1, 800f988 <_scanf_float+0x98>)
 800f984:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f988:	0800fac7 	.word	0x0800fac7
 800f98c:	0800f951 	.word	0x0800f951
 800f990:	0800f951 	.word	0x0800f951
 800f994:	0800f951 	.word	0x0800f951
 800f998:	0800fb27 	.word	0x0800fb27
 800f99c:	0800faff 	.word	0x0800faff
 800f9a0:	0800f951 	.word	0x0800f951
 800f9a4:	0800f951 	.word	0x0800f951
 800f9a8:	0800fad5 	.word	0x0800fad5
 800f9ac:	0800f951 	.word	0x0800f951
 800f9b0:	0800f951 	.word	0x0800f951
 800f9b4:	0800f951 	.word	0x0800f951
 800f9b8:	0800f951 	.word	0x0800f951
 800f9bc:	0800fa8d 	.word	0x0800fa8d
 800f9c0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800f9c4:	e7db      	b.n	800f97e <_scanf_float+0x8e>
 800f9c6:	290e      	cmp	r1, #14
 800f9c8:	d8c2      	bhi.n	800f950 <_scanf_float+0x60>
 800f9ca:	a001      	add	r0, pc, #4	; (adr r0, 800f9d0 <_scanf_float+0xe0>)
 800f9cc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f9d0:	0800fa7f 	.word	0x0800fa7f
 800f9d4:	0800f951 	.word	0x0800f951
 800f9d8:	0800fa7f 	.word	0x0800fa7f
 800f9dc:	0800fb13 	.word	0x0800fb13
 800f9e0:	0800f951 	.word	0x0800f951
 800f9e4:	0800fa2d 	.word	0x0800fa2d
 800f9e8:	0800fa69 	.word	0x0800fa69
 800f9ec:	0800fa69 	.word	0x0800fa69
 800f9f0:	0800fa69 	.word	0x0800fa69
 800f9f4:	0800fa69 	.word	0x0800fa69
 800f9f8:	0800fa69 	.word	0x0800fa69
 800f9fc:	0800fa69 	.word	0x0800fa69
 800fa00:	0800fa69 	.word	0x0800fa69
 800fa04:	0800fa69 	.word	0x0800fa69
 800fa08:	0800fa69 	.word	0x0800fa69
 800fa0c:	2b6e      	cmp	r3, #110	; 0x6e
 800fa0e:	d809      	bhi.n	800fa24 <_scanf_float+0x134>
 800fa10:	2b60      	cmp	r3, #96	; 0x60
 800fa12:	d8b2      	bhi.n	800f97a <_scanf_float+0x8a>
 800fa14:	2b54      	cmp	r3, #84	; 0x54
 800fa16:	d077      	beq.n	800fb08 <_scanf_float+0x218>
 800fa18:	2b59      	cmp	r3, #89	; 0x59
 800fa1a:	d199      	bne.n	800f950 <_scanf_float+0x60>
 800fa1c:	2d07      	cmp	r5, #7
 800fa1e:	d197      	bne.n	800f950 <_scanf_float+0x60>
 800fa20:	2508      	movs	r5, #8
 800fa22:	e029      	b.n	800fa78 <_scanf_float+0x188>
 800fa24:	2b74      	cmp	r3, #116	; 0x74
 800fa26:	d06f      	beq.n	800fb08 <_scanf_float+0x218>
 800fa28:	2b79      	cmp	r3, #121	; 0x79
 800fa2a:	e7f6      	b.n	800fa1a <_scanf_float+0x12a>
 800fa2c:	6821      	ldr	r1, [r4, #0]
 800fa2e:	05c8      	lsls	r0, r1, #23
 800fa30:	d51a      	bpl.n	800fa68 <_scanf_float+0x178>
 800fa32:	9b02      	ldr	r3, [sp, #8]
 800fa34:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800fa38:	6021      	str	r1, [r4, #0]
 800fa3a:	f109 0901 	add.w	r9, r9, #1
 800fa3e:	b11b      	cbz	r3, 800fa48 <_scanf_float+0x158>
 800fa40:	3b01      	subs	r3, #1
 800fa42:	3201      	adds	r2, #1
 800fa44:	9302      	str	r3, [sp, #8]
 800fa46:	60a2      	str	r2, [r4, #8]
 800fa48:	68a3      	ldr	r3, [r4, #8]
 800fa4a:	3b01      	subs	r3, #1
 800fa4c:	60a3      	str	r3, [r4, #8]
 800fa4e:	6923      	ldr	r3, [r4, #16]
 800fa50:	3301      	adds	r3, #1
 800fa52:	6123      	str	r3, [r4, #16]
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	3b01      	subs	r3, #1
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	607b      	str	r3, [r7, #4]
 800fa5c:	f340 8084 	ble.w	800fb68 <_scanf_float+0x278>
 800fa60:	683b      	ldr	r3, [r7, #0]
 800fa62:	3301      	adds	r3, #1
 800fa64:	603b      	str	r3, [r7, #0]
 800fa66:	e766      	b.n	800f936 <_scanf_float+0x46>
 800fa68:	eb1a 0f05 	cmn.w	sl, r5
 800fa6c:	f47f af70 	bne.w	800f950 <_scanf_float+0x60>
 800fa70:	6822      	ldr	r2, [r4, #0]
 800fa72:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800fa76:	6022      	str	r2, [r4, #0]
 800fa78:	f806 3b01 	strb.w	r3, [r6], #1
 800fa7c:	e7e4      	b.n	800fa48 <_scanf_float+0x158>
 800fa7e:	6822      	ldr	r2, [r4, #0]
 800fa80:	0610      	lsls	r0, r2, #24
 800fa82:	f57f af65 	bpl.w	800f950 <_scanf_float+0x60>
 800fa86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800fa8a:	e7f4      	b.n	800fa76 <_scanf_float+0x186>
 800fa8c:	f1ba 0f00 	cmp.w	sl, #0
 800fa90:	d10e      	bne.n	800fab0 <_scanf_float+0x1c0>
 800fa92:	f1b9 0f00 	cmp.w	r9, #0
 800fa96:	d10e      	bne.n	800fab6 <_scanf_float+0x1c6>
 800fa98:	6822      	ldr	r2, [r4, #0]
 800fa9a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800fa9e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800faa2:	d108      	bne.n	800fab6 <_scanf_float+0x1c6>
 800faa4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800faa8:	6022      	str	r2, [r4, #0]
 800faaa:	f04f 0a01 	mov.w	sl, #1
 800faae:	e7e3      	b.n	800fa78 <_scanf_float+0x188>
 800fab0:	f1ba 0f02 	cmp.w	sl, #2
 800fab4:	d055      	beq.n	800fb62 <_scanf_float+0x272>
 800fab6:	2d01      	cmp	r5, #1
 800fab8:	d002      	beq.n	800fac0 <_scanf_float+0x1d0>
 800faba:	2d04      	cmp	r5, #4
 800fabc:	f47f af48 	bne.w	800f950 <_scanf_float+0x60>
 800fac0:	3501      	adds	r5, #1
 800fac2:	b2ed      	uxtb	r5, r5
 800fac4:	e7d8      	b.n	800fa78 <_scanf_float+0x188>
 800fac6:	f1ba 0f01 	cmp.w	sl, #1
 800faca:	f47f af41 	bne.w	800f950 <_scanf_float+0x60>
 800face:	f04f 0a02 	mov.w	sl, #2
 800fad2:	e7d1      	b.n	800fa78 <_scanf_float+0x188>
 800fad4:	b97d      	cbnz	r5, 800faf6 <_scanf_float+0x206>
 800fad6:	f1b9 0f00 	cmp.w	r9, #0
 800fada:	f47f af3c 	bne.w	800f956 <_scanf_float+0x66>
 800fade:	6822      	ldr	r2, [r4, #0]
 800fae0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800fae4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800fae8:	f47f af39 	bne.w	800f95e <_scanf_float+0x6e>
 800faec:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800faf0:	6022      	str	r2, [r4, #0]
 800faf2:	2501      	movs	r5, #1
 800faf4:	e7c0      	b.n	800fa78 <_scanf_float+0x188>
 800faf6:	2d03      	cmp	r5, #3
 800faf8:	d0e2      	beq.n	800fac0 <_scanf_float+0x1d0>
 800fafa:	2d05      	cmp	r5, #5
 800fafc:	e7de      	b.n	800fabc <_scanf_float+0x1cc>
 800fafe:	2d02      	cmp	r5, #2
 800fb00:	f47f af26 	bne.w	800f950 <_scanf_float+0x60>
 800fb04:	2503      	movs	r5, #3
 800fb06:	e7b7      	b.n	800fa78 <_scanf_float+0x188>
 800fb08:	2d06      	cmp	r5, #6
 800fb0a:	f47f af21 	bne.w	800f950 <_scanf_float+0x60>
 800fb0e:	2507      	movs	r5, #7
 800fb10:	e7b2      	b.n	800fa78 <_scanf_float+0x188>
 800fb12:	6822      	ldr	r2, [r4, #0]
 800fb14:	0591      	lsls	r1, r2, #22
 800fb16:	f57f af1b 	bpl.w	800f950 <_scanf_float+0x60>
 800fb1a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800fb1e:	6022      	str	r2, [r4, #0]
 800fb20:	f8cd 9004 	str.w	r9, [sp, #4]
 800fb24:	e7a8      	b.n	800fa78 <_scanf_float+0x188>
 800fb26:	6822      	ldr	r2, [r4, #0]
 800fb28:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800fb2c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800fb30:	d006      	beq.n	800fb40 <_scanf_float+0x250>
 800fb32:	0550      	lsls	r0, r2, #21
 800fb34:	f57f af0c 	bpl.w	800f950 <_scanf_float+0x60>
 800fb38:	f1b9 0f00 	cmp.w	r9, #0
 800fb3c:	f43f af0f 	beq.w	800f95e <_scanf_float+0x6e>
 800fb40:	0591      	lsls	r1, r2, #22
 800fb42:	bf58      	it	pl
 800fb44:	9901      	ldrpl	r1, [sp, #4]
 800fb46:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800fb4a:	bf58      	it	pl
 800fb4c:	eba9 0101 	subpl.w	r1, r9, r1
 800fb50:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800fb54:	bf58      	it	pl
 800fb56:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800fb5a:	6022      	str	r2, [r4, #0]
 800fb5c:	f04f 0900 	mov.w	r9, #0
 800fb60:	e78a      	b.n	800fa78 <_scanf_float+0x188>
 800fb62:	f04f 0a03 	mov.w	sl, #3
 800fb66:	e787      	b.n	800fa78 <_scanf_float+0x188>
 800fb68:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800fb6c:	4639      	mov	r1, r7
 800fb6e:	4640      	mov	r0, r8
 800fb70:	4798      	blx	r3
 800fb72:	2800      	cmp	r0, #0
 800fb74:	f43f aedf 	beq.w	800f936 <_scanf_float+0x46>
 800fb78:	e6ea      	b.n	800f950 <_scanf_float+0x60>
 800fb7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fb7e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fb82:	463a      	mov	r2, r7
 800fb84:	4640      	mov	r0, r8
 800fb86:	4798      	blx	r3
 800fb88:	6923      	ldr	r3, [r4, #16]
 800fb8a:	3b01      	subs	r3, #1
 800fb8c:	6123      	str	r3, [r4, #16]
 800fb8e:	e6ec      	b.n	800f96a <_scanf_float+0x7a>
 800fb90:	1e6b      	subs	r3, r5, #1
 800fb92:	2b06      	cmp	r3, #6
 800fb94:	d825      	bhi.n	800fbe2 <_scanf_float+0x2f2>
 800fb96:	2d02      	cmp	r5, #2
 800fb98:	d836      	bhi.n	800fc08 <_scanf_float+0x318>
 800fb9a:	455e      	cmp	r6, fp
 800fb9c:	f67f aee8 	bls.w	800f970 <_scanf_float+0x80>
 800fba0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fba4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fba8:	463a      	mov	r2, r7
 800fbaa:	4640      	mov	r0, r8
 800fbac:	4798      	blx	r3
 800fbae:	6923      	ldr	r3, [r4, #16]
 800fbb0:	3b01      	subs	r3, #1
 800fbb2:	6123      	str	r3, [r4, #16]
 800fbb4:	e7f1      	b.n	800fb9a <_scanf_float+0x2aa>
 800fbb6:	9802      	ldr	r0, [sp, #8]
 800fbb8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fbbc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800fbc0:	9002      	str	r0, [sp, #8]
 800fbc2:	463a      	mov	r2, r7
 800fbc4:	4640      	mov	r0, r8
 800fbc6:	4798      	blx	r3
 800fbc8:	6923      	ldr	r3, [r4, #16]
 800fbca:	3b01      	subs	r3, #1
 800fbcc:	6123      	str	r3, [r4, #16]
 800fbce:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fbd2:	fa5f fa8a 	uxtb.w	sl, sl
 800fbd6:	f1ba 0f02 	cmp.w	sl, #2
 800fbda:	d1ec      	bne.n	800fbb6 <_scanf_float+0x2c6>
 800fbdc:	3d03      	subs	r5, #3
 800fbde:	b2ed      	uxtb	r5, r5
 800fbe0:	1b76      	subs	r6, r6, r5
 800fbe2:	6823      	ldr	r3, [r4, #0]
 800fbe4:	05da      	lsls	r2, r3, #23
 800fbe6:	d52f      	bpl.n	800fc48 <_scanf_float+0x358>
 800fbe8:	055b      	lsls	r3, r3, #21
 800fbea:	d510      	bpl.n	800fc0e <_scanf_float+0x31e>
 800fbec:	455e      	cmp	r6, fp
 800fbee:	f67f aebf 	bls.w	800f970 <_scanf_float+0x80>
 800fbf2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fbf6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fbfa:	463a      	mov	r2, r7
 800fbfc:	4640      	mov	r0, r8
 800fbfe:	4798      	blx	r3
 800fc00:	6923      	ldr	r3, [r4, #16]
 800fc02:	3b01      	subs	r3, #1
 800fc04:	6123      	str	r3, [r4, #16]
 800fc06:	e7f1      	b.n	800fbec <_scanf_float+0x2fc>
 800fc08:	46aa      	mov	sl, r5
 800fc0a:	9602      	str	r6, [sp, #8]
 800fc0c:	e7df      	b.n	800fbce <_scanf_float+0x2de>
 800fc0e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800fc12:	6923      	ldr	r3, [r4, #16]
 800fc14:	2965      	cmp	r1, #101	; 0x65
 800fc16:	f103 33ff 	add.w	r3, r3, #4294967295
 800fc1a:	f106 35ff 	add.w	r5, r6, #4294967295
 800fc1e:	6123      	str	r3, [r4, #16]
 800fc20:	d00c      	beq.n	800fc3c <_scanf_float+0x34c>
 800fc22:	2945      	cmp	r1, #69	; 0x45
 800fc24:	d00a      	beq.n	800fc3c <_scanf_float+0x34c>
 800fc26:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fc2a:	463a      	mov	r2, r7
 800fc2c:	4640      	mov	r0, r8
 800fc2e:	4798      	blx	r3
 800fc30:	6923      	ldr	r3, [r4, #16]
 800fc32:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800fc36:	3b01      	subs	r3, #1
 800fc38:	1eb5      	subs	r5, r6, #2
 800fc3a:	6123      	str	r3, [r4, #16]
 800fc3c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fc40:	463a      	mov	r2, r7
 800fc42:	4640      	mov	r0, r8
 800fc44:	4798      	blx	r3
 800fc46:	462e      	mov	r6, r5
 800fc48:	6825      	ldr	r5, [r4, #0]
 800fc4a:	f015 0510 	ands.w	r5, r5, #16
 800fc4e:	d159      	bne.n	800fd04 <_scanf_float+0x414>
 800fc50:	7035      	strb	r5, [r6, #0]
 800fc52:	6823      	ldr	r3, [r4, #0]
 800fc54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800fc58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fc5c:	d11b      	bne.n	800fc96 <_scanf_float+0x3a6>
 800fc5e:	9b01      	ldr	r3, [sp, #4]
 800fc60:	454b      	cmp	r3, r9
 800fc62:	eba3 0209 	sub.w	r2, r3, r9
 800fc66:	d123      	bne.n	800fcb0 <_scanf_float+0x3c0>
 800fc68:	2200      	movs	r2, #0
 800fc6a:	4659      	mov	r1, fp
 800fc6c:	4640      	mov	r0, r8
 800fc6e:	f000 ff25 	bl	8010abc <_strtod_r>
 800fc72:	6822      	ldr	r2, [r4, #0]
 800fc74:	9b03      	ldr	r3, [sp, #12]
 800fc76:	f012 0f02 	tst.w	r2, #2
 800fc7a:	ec57 6b10 	vmov	r6, r7, d0
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	d021      	beq.n	800fcc6 <_scanf_float+0x3d6>
 800fc82:	9903      	ldr	r1, [sp, #12]
 800fc84:	1d1a      	adds	r2, r3, #4
 800fc86:	600a      	str	r2, [r1, #0]
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	e9c3 6700 	strd	r6, r7, [r3]
 800fc8e:	68e3      	ldr	r3, [r4, #12]
 800fc90:	3301      	adds	r3, #1
 800fc92:	60e3      	str	r3, [r4, #12]
 800fc94:	e66d      	b.n	800f972 <_scanf_float+0x82>
 800fc96:	9b04      	ldr	r3, [sp, #16]
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d0e5      	beq.n	800fc68 <_scanf_float+0x378>
 800fc9c:	9905      	ldr	r1, [sp, #20]
 800fc9e:	230a      	movs	r3, #10
 800fca0:	462a      	mov	r2, r5
 800fca2:	3101      	adds	r1, #1
 800fca4:	4640      	mov	r0, r8
 800fca6:	f000 ff91 	bl	8010bcc <_strtol_r>
 800fcaa:	9b04      	ldr	r3, [sp, #16]
 800fcac:	9e05      	ldr	r6, [sp, #20]
 800fcae:	1ac2      	subs	r2, r0, r3
 800fcb0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800fcb4:	429e      	cmp	r6, r3
 800fcb6:	bf28      	it	cs
 800fcb8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800fcbc:	4912      	ldr	r1, [pc, #72]	; (800fd08 <_scanf_float+0x418>)
 800fcbe:	4630      	mov	r0, r6
 800fcc0:	f000 f82c 	bl	800fd1c <siprintf>
 800fcc4:	e7d0      	b.n	800fc68 <_scanf_float+0x378>
 800fcc6:	9903      	ldr	r1, [sp, #12]
 800fcc8:	f012 0f04 	tst.w	r2, #4
 800fccc:	f103 0204 	add.w	r2, r3, #4
 800fcd0:	600a      	str	r2, [r1, #0]
 800fcd2:	d1d9      	bne.n	800fc88 <_scanf_float+0x398>
 800fcd4:	f8d3 8000 	ldr.w	r8, [r3]
 800fcd8:	ee10 2a10 	vmov	r2, s0
 800fcdc:	ee10 0a10 	vmov	r0, s0
 800fce0:	463b      	mov	r3, r7
 800fce2:	4639      	mov	r1, r7
 800fce4:	f7f0 ff42 	bl	8000b6c <__aeabi_dcmpun>
 800fce8:	b128      	cbz	r0, 800fcf6 <_scanf_float+0x406>
 800fcea:	4808      	ldr	r0, [pc, #32]	; (800fd0c <_scanf_float+0x41c>)
 800fcec:	f000 f810 	bl	800fd10 <nanf>
 800fcf0:	ed88 0a00 	vstr	s0, [r8]
 800fcf4:	e7cb      	b.n	800fc8e <_scanf_float+0x39e>
 800fcf6:	4630      	mov	r0, r6
 800fcf8:	4639      	mov	r1, r7
 800fcfa:	f7f0 ff95 	bl	8000c28 <__aeabi_d2f>
 800fcfe:	f8c8 0000 	str.w	r0, [r8]
 800fd02:	e7c4      	b.n	800fc8e <_scanf_float+0x39e>
 800fd04:	2500      	movs	r5, #0
 800fd06:	e634      	b.n	800f972 <_scanf_float+0x82>
 800fd08:	080146da 	.word	0x080146da
 800fd0c:	08014afb 	.word	0x08014afb

0800fd10 <nanf>:
 800fd10:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800fd18 <nanf+0x8>
 800fd14:	4770      	bx	lr
 800fd16:	bf00      	nop
 800fd18:	7fc00000 	.word	0x7fc00000

0800fd1c <siprintf>:
 800fd1c:	b40e      	push	{r1, r2, r3}
 800fd1e:	b500      	push	{lr}
 800fd20:	b09c      	sub	sp, #112	; 0x70
 800fd22:	ab1d      	add	r3, sp, #116	; 0x74
 800fd24:	9002      	str	r0, [sp, #8]
 800fd26:	9006      	str	r0, [sp, #24]
 800fd28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fd2c:	4809      	ldr	r0, [pc, #36]	; (800fd54 <siprintf+0x38>)
 800fd2e:	9107      	str	r1, [sp, #28]
 800fd30:	9104      	str	r1, [sp, #16]
 800fd32:	4909      	ldr	r1, [pc, #36]	; (800fd58 <siprintf+0x3c>)
 800fd34:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd38:	9105      	str	r1, [sp, #20]
 800fd3a:	6800      	ldr	r0, [r0, #0]
 800fd3c:	9301      	str	r3, [sp, #4]
 800fd3e:	a902      	add	r1, sp, #8
 800fd40:	f002 ff98 	bl	8012c74 <_svfiprintf_r>
 800fd44:	9b02      	ldr	r3, [sp, #8]
 800fd46:	2200      	movs	r2, #0
 800fd48:	701a      	strb	r2, [r3, #0]
 800fd4a:	b01c      	add	sp, #112	; 0x70
 800fd4c:	f85d eb04 	ldr.w	lr, [sp], #4
 800fd50:	b003      	add	sp, #12
 800fd52:	4770      	bx	lr
 800fd54:	200002c8 	.word	0x200002c8
 800fd58:	ffff0208 	.word	0xffff0208

0800fd5c <siscanf>:
 800fd5c:	b40e      	push	{r1, r2, r3}
 800fd5e:	b510      	push	{r4, lr}
 800fd60:	b09f      	sub	sp, #124	; 0x7c
 800fd62:	ac21      	add	r4, sp, #132	; 0x84
 800fd64:	f44f 7101 	mov.w	r1, #516	; 0x204
 800fd68:	f854 2b04 	ldr.w	r2, [r4], #4
 800fd6c:	9201      	str	r2, [sp, #4]
 800fd6e:	f8ad 101c 	strh.w	r1, [sp, #28]
 800fd72:	9004      	str	r0, [sp, #16]
 800fd74:	9008      	str	r0, [sp, #32]
 800fd76:	f7f0 fa4b 	bl	8000210 <strlen>
 800fd7a:	4b0c      	ldr	r3, [pc, #48]	; (800fdac <siscanf+0x50>)
 800fd7c:	9005      	str	r0, [sp, #20]
 800fd7e:	9009      	str	r0, [sp, #36]	; 0x24
 800fd80:	930d      	str	r3, [sp, #52]	; 0x34
 800fd82:	480b      	ldr	r0, [pc, #44]	; (800fdb0 <siscanf+0x54>)
 800fd84:	9a01      	ldr	r2, [sp, #4]
 800fd86:	6800      	ldr	r0, [r0, #0]
 800fd88:	9403      	str	r4, [sp, #12]
 800fd8a:	2300      	movs	r3, #0
 800fd8c:	9311      	str	r3, [sp, #68]	; 0x44
 800fd8e:	9316      	str	r3, [sp, #88]	; 0x58
 800fd90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fd94:	f8ad 301e 	strh.w	r3, [sp, #30]
 800fd98:	a904      	add	r1, sp, #16
 800fd9a:	4623      	mov	r3, r4
 800fd9c:	f003 f8c4 	bl	8012f28 <__ssvfiscanf_r>
 800fda0:	b01f      	add	sp, #124	; 0x7c
 800fda2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fda6:	b003      	add	sp, #12
 800fda8:	4770      	bx	lr
 800fdaa:	bf00      	nop
 800fdac:	0800fdd7 	.word	0x0800fdd7
 800fdb0:	200002c8 	.word	0x200002c8

0800fdb4 <__sread>:
 800fdb4:	b510      	push	{r4, lr}
 800fdb6:	460c      	mov	r4, r1
 800fdb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fdbc:	f003 fb7e 	bl	80134bc <_read_r>
 800fdc0:	2800      	cmp	r0, #0
 800fdc2:	bfab      	itete	ge
 800fdc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fdc6:	89a3      	ldrhlt	r3, [r4, #12]
 800fdc8:	181b      	addge	r3, r3, r0
 800fdca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fdce:	bfac      	ite	ge
 800fdd0:	6563      	strge	r3, [r4, #84]	; 0x54
 800fdd2:	81a3      	strhlt	r3, [r4, #12]
 800fdd4:	bd10      	pop	{r4, pc}

0800fdd6 <__seofread>:
 800fdd6:	2000      	movs	r0, #0
 800fdd8:	4770      	bx	lr

0800fdda <__swrite>:
 800fdda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdde:	461f      	mov	r7, r3
 800fde0:	898b      	ldrh	r3, [r1, #12]
 800fde2:	05db      	lsls	r3, r3, #23
 800fde4:	4605      	mov	r5, r0
 800fde6:	460c      	mov	r4, r1
 800fde8:	4616      	mov	r6, r2
 800fdea:	d505      	bpl.n	800fdf8 <__swrite+0x1e>
 800fdec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fdf0:	2302      	movs	r3, #2
 800fdf2:	2200      	movs	r2, #0
 800fdf4:	f002 f8fe 	bl	8011ff4 <_lseek_r>
 800fdf8:	89a3      	ldrh	r3, [r4, #12]
 800fdfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fdfe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fe02:	81a3      	strh	r3, [r4, #12]
 800fe04:	4632      	mov	r2, r6
 800fe06:	463b      	mov	r3, r7
 800fe08:	4628      	mov	r0, r5
 800fe0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fe0e:	f000 bedf 	b.w	8010bd0 <_write_r>

0800fe12 <__sseek>:
 800fe12:	b510      	push	{r4, lr}
 800fe14:	460c      	mov	r4, r1
 800fe16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe1a:	f002 f8eb 	bl	8011ff4 <_lseek_r>
 800fe1e:	1c43      	adds	r3, r0, #1
 800fe20:	89a3      	ldrh	r3, [r4, #12]
 800fe22:	bf15      	itete	ne
 800fe24:	6560      	strne	r0, [r4, #84]	; 0x54
 800fe26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fe2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fe2e:	81a3      	strheq	r3, [r4, #12]
 800fe30:	bf18      	it	ne
 800fe32:	81a3      	strhne	r3, [r4, #12]
 800fe34:	bd10      	pop	{r4, pc}

0800fe36 <__sclose>:
 800fe36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe3a:	f000 bedb 	b.w	8010bf4 <_close_r>

0800fe3e <strcpy>:
 800fe3e:	4603      	mov	r3, r0
 800fe40:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fe44:	f803 2b01 	strb.w	r2, [r3], #1
 800fe48:	2a00      	cmp	r2, #0
 800fe4a:	d1f9      	bne.n	800fe40 <strcpy+0x2>
 800fe4c:	4770      	bx	lr

0800fe4e <strncmp>:
 800fe4e:	b510      	push	{r4, lr}
 800fe50:	b17a      	cbz	r2, 800fe72 <strncmp+0x24>
 800fe52:	4603      	mov	r3, r0
 800fe54:	3901      	subs	r1, #1
 800fe56:	1884      	adds	r4, r0, r2
 800fe58:	f813 0b01 	ldrb.w	r0, [r3], #1
 800fe5c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800fe60:	4290      	cmp	r0, r2
 800fe62:	d101      	bne.n	800fe68 <strncmp+0x1a>
 800fe64:	42a3      	cmp	r3, r4
 800fe66:	d101      	bne.n	800fe6c <strncmp+0x1e>
 800fe68:	1a80      	subs	r0, r0, r2
 800fe6a:	bd10      	pop	{r4, pc}
 800fe6c:	2800      	cmp	r0, #0
 800fe6e:	d1f3      	bne.n	800fe58 <strncmp+0xa>
 800fe70:	e7fa      	b.n	800fe68 <strncmp+0x1a>
 800fe72:	4610      	mov	r0, r2
 800fe74:	e7f9      	b.n	800fe6a <strncmp+0x1c>

0800fe76 <sulp>:
 800fe76:	b570      	push	{r4, r5, r6, lr}
 800fe78:	4604      	mov	r4, r0
 800fe7a:	460d      	mov	r5, r1
 800fe7c:	ec45 4b10 	vmov	d0, r4, r5
 800fe80:	4616      	mov	r6, r2
 800fe82:	f002 fc55 	bl	8012730 <__ulp>
 800fe86:	ec51 0b10 	vmov	r0, r1, d0
 800fe8a:	b17e      	cbz	r6, 800feac <sulp+0x36>
 800fe8c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800fe90:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	dd09      	ble.n	800feac <sulp+0x36>
 800fe98:	051b      	lsls	r3, r3, #20
 800fe9a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800fe9e:	2400      	movs	r4, #0
 800fea0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800fea4:	4622      	mov	r2, r4
 800fea6:	462b      	mov	r3, r5
 800fea8:	f7f0 fbc6 	bl	8000638 <__aeabi_dmul>
 800feac:	bd70      	pop	{r4, r5, r6, pc}
	...

0800feb0 <_strtod_l>:
 800feb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800feb4:	ed2d 8b02 	vpush	{d8}
 800feb8:	b09d      	sub	sp, #116	; 0x74
 800feba:	461f      	mov	r7, r3
 800febc:	2300      	movs	r3, #0
 800febe:	9318      	str	r3, [sp, #96]	; 0x60
 800fec0:	4ba2      	ldr	r3, [pc, #648]	; (801014c <_strtod_l+0x29c>)
 800fec2:	9213      	str	r2, [sp, #76]	; 0x4c
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	9305      	str	r3, [sp, #20]
 800fec8:	4604      	mov	r4, r0
 800feca:	4618      	mov	r0, r3
 800fecc:	4688      	mov	r8, r1
 800fece:	f7f0 f99f 	bl	8000210 <strlen>
 800fed2:	f04f 0a00 	mov.w	sl, #0
 800fed6:	4605      	mov	r5, r0
 800fed8:	f04f 0b00 	mov.w	fp, #0
 800fedc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800fee0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fee2:	781a      	ldrb	r2, [r3, #0]
 800fee4:	2a2b      	cmp	r2, #43	; 0x2b
 800fee6:	d04e      	beq.n	800ff86 <_strtod_l+0xd6>
 800fee8:	d83b      	bhi.n	800ff62 <_strtod_l+0xb2>
 800feea:	2a0d      	cmp	r2, #13
 800feec:	d834      	bhi.n	800ff58 <_strtod_l+0xa8>
 800feee:	2a08      	cmp	r2, #8
 800fef0:	d834      	bhi.n	800ff5c <_strtod_l+0xac>
 800fef2:	2a00      	cmp	r2, #0
 800fef4:	d03e      	beq.n	800ff74 <_strtod_l+0xc4>
 800fef6:	2300      	movs	r3, #0
 800fef8:	930a      	str	r3, [sp, #40]	; 0x28
 800fefa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800fefc:	7833      	ldrb	r3, [r6, #0]
 800fefe:	2b30      	cmp	r3, #48	; 0x30
 800ff00:	f040 80b0 	bne.w	8010064 <_strtod_l+0x1b4>
 800ff04:	7873      	ldrb	r3, [r6, #1]
 800ff06:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ff0a:	2b58      	cmp	r3, #88	; 0x58
 800ff0c:	d168      	bne.n	800ffe0 <_strtod_l+0x130>
 800ff0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff10:	9301      	str	r3, [sp, #4]
 800ff12:	ab18      	add	r3, sp, #96	; 0x60
 800ff14:	9702      	str	r7, [sp, #8]
 800ff16:	9300      	str	r3, [sp, #0]
 800ff18:	4a8d      	ldr	r2, [pc, #564]	; (8010150 <_strtod_l+0x2a0>)
 800ff1a:	ab19      	add	r3, sp, #100	; 0x64
 800ff1c:	a917      	add	r1, sp, #92	; 0x5c
 800ff1e:	4620      	mov	r0, r4
 800ff20:	f001 fd5c 	bl	80119dc <__gethex>
 800ff24:	f010 0707 	ands.w	r7, r0, #7
 800ff28:	4605      	mov	r5, r0
 800ff2a:	d005      	beq.n	800ff38 <_strtod_l+0x88>
 800ff2c:	2f06      	cmp	r7, #6
 800ff2e:	d12c      	bne.n	800ff8a <_strtod_l+0xda>
 800ff30:	3601      	adds	r6, #1
 800ff32:	2300      	movs	r3, #0
 800ff34:	9617      	str	r6, [sp, #92]	; 0x5c
 800ff36:	930a      	str	r3, [sp, #40]	; 0x28
 800ff38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	f040 8590 	bne.w	8010a60 <_strtod_l+0xbb0>
 800ff40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff42:	b1eb      	cbz	r3, 800ff80 <_strtod_l+0xd0>
 800ff44:	4652      	mov	r2, sl
 800ff46:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ff4a:	ec43 2b10 	vmov	d0, r2, r3
 800ff4e:	b01d      	add	sp, #116	; 0x74
 800ff50:	ecbd 8b02 	vpop	{d8}
 800ff54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff58:	2a20      	cmp	r2, #32
 800ff5a:	d1cc      	bne.n	800fef6 <_strtod_l+0x46>
 800ff5c:	3301      	adds	r3, #1
 800ff5e:	9317      	str	r3, [sp, #92]	; 0x5c
 800ff60:	e7be      	b.n	800fee0 <_strtod_l+0x30>
 800ff62:	2a2d      	cmp	r2, #45	; 0x2d
 800ff64:	d1c7      	bne.n	800fef6 <_strtod_l+0x46>
 800ff66:	2201      	movs	r2, #1
 800ff68:	920a      	str	r2, [sp, #40]	; 0x28
 800ff6a:	1c5a      	adds	r2, r3, #1
 800ff6c:	9217      	str	r2, [sp, #92]	; 0x5c
 800ff6e:	785b      	ldrb	r3, [r3, #1]
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d1c2      	bne.n	800fefa <_strtod_l+0x4a>
 800ff74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ff76:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	f040 856e 	bne.w	8010a5c <_strtod_l+0xbac>
 800ff80:	4652      	mov	r2, sl
 800ff82:	465b      	mov	r3, fp
 800ff84:	e7e1      	b.n	800ff4a <_strtod_l+0x9a>
 800ff86:	2200      	movs	r2, #0
 800ff88:	e7ee      	b.n	800ff68 <_strtod_l+0xb8>
 800ff8a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ff8c:	b13a      	cbz	r2, 800ff9e <_strtod_l+0xee>
 800ff8e:	2135      	movs	r1, #53	; 0x35
 800ff90:	a81a      	add	r0, sp, #104	; 0x68
 800ff92:	f002 fcd8 	bl	8012946 <__copybits>
 800ff96:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ff98:	4620      	mov	r0, r4
 800ff9a:	f002 f897 	bl	80120cc <_Bfree>
 800ff9e:	3f01      	subs	r7, #1
 800ffa0:	2f04      	cmp	r7, #4
 800ffa2:	d806      	bhi.n	800ffb2 <_strtod_l+0x102>
 800ffa4:	e8df f007 	tbb	[pc, r7]
 800ffa8:	1714030a 	.word	0x1714030a
 800ffac:	0a          	.byte	0x0a
 800ffad:	00          	.byte	0x00
 800ffae:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800ffb2:	0728      	lsls	r0, r5, #28
 800ffb4:	d5c0      	bpl.n	800ff38 <_strtod_l+0x88>
 800ffb6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800ffba:	e7bd      	b.n	800ff38 <_strtod_l+0x88>
 800ffbc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800ffc0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ffc2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ffc6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ffca:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ffce:	e7f0      	b.n	800ffb2 <_strtod_l+0x102>
 800ffd0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8010154 <_strtod_l+0x2a4>
 800ffd4:	e7ed      	b.n	800ffb2 <_strtod_l+0x102>
 800ffd6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800ffda:	f04f 3aff 	mov.w	sl, #4294967295
 800ffde:	e7e8      	b.n	800ffb2 <_strtod_l+0x102>
 800ffe0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ffe2:	1c5a      	adds	r2, r3, #1
 800ffe4:	9217      	str	r2, [sp, #92]	; 0x5c
 800ffe6:	785b      	ldrb	r3, [r3, #1]
 800ffe8:	2b30      	cmp	r3, #48	; 0x30
 800ffea:	d0f9      	beq.n	800ffe0 <_strtod_l+0x130>
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d0a3      	beq.n	800ff38 <_strtod_l+0x88>
 800fff0:	2301      	movs	r3, #1
 800fff2:	f04f 0900 	mov.w	r9, #0
 800fff6:	9304      	str	r3, [sp, #16]
 800fff8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fffa:	9308      	str	r3, [sp, #32]
 800fffc:	f8cd 901c 	str.w	r9, [sp, #28]
 8010000:	464f      	mov	r7, r9
 8010002:	220a      	movs	r2, #10
 8010004:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8010006:	7806      	ldrb	r6, [r0, #0]
 8010008:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801000c:	b2d9      	uxtb	r1, r3
 801000e:	2909      	cmp	r1, #9
 8010010:	d92a      	bls.n	8010068 <_strtod_l+0x1b8>
 8010012:	9905      	ldr	r1, [sp, #20]
 8010014:	462a      	mov	r2, r5
 8010016:	f7ff ff1a 	bl	800fe4e <strncmp>
 801001a:	b398      	cbz	r0, 8010084 <_strtod_l+0x1d4>
 801001c:	2000      	movs	r0, #0
 801001e:	4632      	mov	r2, r6
 8010020:	463d      	mov	r5, r7
 8010022:	9005      	str	r0, [sp, #20]
 8010024:	4603      	mov	r3, r0
 8010026:	2a65      	cmp	r2, #101	; 0x65
 8010028:	d001      	beq.n	801002e <_strtod_l+0x17e>
 801002a:	2a45      	cmp	r2, #69	; 0x45
 801002c:	d118      	bne.n	8010060 <_strtod_l+0x1b0>
 801002e:	b91d      	cbnz	r5, 8010038 <_strtod_l+0x188>
 8010030:	9a04      	ldr	r2, [sp, #16]
 8010032:	4302      	orrs	r2, r0
 8010034:	d09e      	beq.n	800ff74 <_strtod_l+0xc4>
 8010036:	2500      	movs	r5, #0
 8010038:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 801003c:	f108 0201 	add.w	r2, r8, #1
 8010040:	9217      	str	r2, [sp, #92]	; 0x5c
 8010042:	f898 2001 	ldrb.w	r2, [r8, #1]
 8010046:	2a2b      	cmp	r2, #43	; 0x2b
 8010048:	d075      	beq.n	8010136 <_strtod_l+0x286>
 801004a:	2a2d      	cmp	r2, #45	; 0x2d
 801004c:	d07b      	beq.n	8010146 <_strtod_l+0x296>
 801004e:	f04f 0c00 	mov.w	ip, #0
 8010052:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8010056:	2909      	cmp	r1, #9
 8010058:	f240 8082 	bls.w	8010160 <_strtod_l+0x2b0>
 801005c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8010060:	2600      	movs	r6, #0
 8010062:	e09d      	b.n	80101a0 <_strtod_l+0x2f0>
 8010064:	2300      	movs	r3, #0
 8010066:	e7c4      	b.n	800fff2 <_strtod_l+0x142>
 8010068:	2f08      	cmp	r7, #8
 801006a:	bfd8      	it	le
 801006c:	9907      	ldrle	r1, [sp, #28]
 801006e:	f100 0001 	add.w	r0, r0, #1
 8010072:	bfda      	itte	le
 8010074:	fb02 3301 	mlale	r3, r2, r1, r3
 8010078:	9307      	strle	r3, [sp, #28]
 801007a:	fb02 3909 	mlagt	r9, r2, r9, r3
 801007e:	3701      	adds	r7, #1
 8010080:	9017      	str	r0, [sp, #92]	; 0x5c
 8010082:	e7bf      	b.n	8010004 <_strtod_l+0x154>
 8010084:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010086:	195a      	adds	r2, r3, r5
 8010088:	9217      	str	r2, [sp, #92]	; 0x5c
 801008a:	5d5a      	ldrb	r2, [r3, r5]
 801008c:	2f00      	cmp	r7, #0
 801008e:	d037      	beq.n	8010100 <_strtod_l+0x250>
 8010090:	9005      	str	r0, [sp, #20]
 8010092:	463d      	mov	r5, r7
 8010094:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8010098:	2b09      	cmp	r3, #9
 801009a:	d912      	bls.n	80100c2 <_strtod_l+0x212>
 801009c:	2301      	movs	r3, #1
 801009e:	e7c2      	b.n	8010026 <_strtod_l+0x176>
 80100a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80100a2:	1c5a      	adds	r2, r3, #1
 80100a4:	9217      	str	r2, [sp, #92]	; 0x5c
 80100a6:	785a      	ldrb	r2, [r3, #1]
 80100a8:	3001      	adds	r0, #1
 80100aa:	2a30      	cmp	r2, #48	; 0x30
 80100ac:	d0f8      	beq.n	80100a0 <_strtod_l+0x1f0>
 80100ae:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80100b2:	2b08      	cmp	r3, #8
 80100b4:	f200 84d9 	bhi.w	8010a6a <_strtod_l+0xbba>
 80100b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80100ba:	9005      	str	r0, [sp, #20]
 80100bc:	2000      	movs	r0, #0
 80100be:	9308      	str	r3, [sp, #32]
 80100c0:	4605      	mov	r5, r0
 80100c2:	3a30      	subs	r2, #48	; 0x30
 80100c4:	f100 0301 	add.w	r3, r0, #1
 80100c8:	d014      	beq.n	80100f4 <_strtod_l+0x244>
 80100ca:	9905      	ldr	r1, [sp, #20]
 80100cc:	4419      	add	r1, r3
 80100ce:	9105      	str	r1, [sp, #20]
 80100d0:	462b      	mov	r3, r5
 80100d2:	eb00 0e05 	add.w	lr, r0, r5
 80100d6:	210a      	movs	r1, #10
 80100d8:	4573      	cmp	r3, lr
 80100da:	d113      	bne.n	8010104 <_strtod_l+0x254>
 80100dc:	182b      	adds	r3, r5, r0
 80100de:	2b08      	cmp	r3, #8
 80100e0:	f105 0501 	add.w	r5, r5, #1
 80100e4:	4405      	add	r5, r0
 80100e6:	dc1c      	bgt.n	8010122 <_strtod_l+0x272>
 80100e8:	9907      	ldr	r1, [sp, #28]
 80100ea:	230a      	movs	r3, #10
 80100ec:	fb03 2301 	mla	r3, r3, r1, r2
 80100f0:	9307      	str	r3, [sp, #28]
 80100f2:	2300      	movs	r3, #0
 80100f4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80100f6:	1c51      	adds	r1, r2, #1
 80100f8:	9117      	str	r1, [sp, #92]	; 0x5c
 80100fa:	7852      	ldrb	r2, [r2, #1]
 80100fc:	4618      	mov	r0, r3
 80100fe:	e7c9      	b.n	8010094 <_strtod_l+0x1e4>
 8010100:	4638      	mov	r0, r7
 8010102:	e7d2      	b.n	80100aa <_strtod_l+0x1fa>
 8010104:	2b08      	cmp	r3, #8
 8010106:	dc04      	bgt.n	8010112 <_strtod_l+0x262>
 8010108:	9e07      	ldr	r6, [sp, #28]
 801010a:	434e      	muls	r6, r1
 801010c:	9607      	str	r6, [sp, #28]
 801010e:	3301      	adds	r3, #1
 8010110:	e7e2      	b.n	80100d8 <_strtod_l+0x228>
 8010112:	f103 0c01 	add.w	ip, r3, #1
 8010116:	f1bc 0f10 	cmp.w	ip, #16
 801011a:	bfd8      	it	le
 801011c:	fb01 f909 	mulle.w	r9, r1, r9
 8010120:	e7f5      	b.n	801010e <_strtod_l+0x25e>
 8010122:	2d10      	cmp	r5, #16
 8010124:	bfdc      	itt	le
 8010126:	230a      	movle	r3, #10
 8010128:	fb03 2909 	mlale	r9, r3, r9, r2
 801012c:	e7e1      	b.n	80100f2 <_strtod_l+0x242>
 801012e:	2300      	movs	r3, #0
 8010130:	9305      	str	r3, [sp, #20]
 8010132:	2301      	movs	r3, #1
 8010134:	e77c      	b.n	8010030 <_strtod_l+0x180>
 8010136:	f04f 0c00 	mov.w	ip, #0
 801013a:	f108 0202 	add.w	r2, r8, #2
 801013e:	9217      	str	r2, [sp, #92]	; 0x5c
 8010140:	f898 2002 	ldrb.w	r2, [r8, #2]
 8010144:	e785      	b.n	8010052 <_strtod_l+0x1a2>
 8010146:	f04f 0c01 	mov.w	ip, #1
 801014a:	e7f6      	b.n	801013a <_strtod_l+0x28a>
 801014c:	08014928 	.word	0x08014928
 8010150:	080146e0 	.word	0x080146e0
 8010154:	7ff00000 	.word	0x7ff00000
 8010158:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801015a:	1c51      	adds	r1, r2, #1
 801015c:	9117      	str	r1, [sp, #92]	; 0x5c
 801015e:	7852      	ldrb	r2, [r2, #1]
 8010160:	2a30      	cmp	r2, #48	; 0x30
 8010162:	d0f9      	beq.n	8010158 <_strtod_l+0x2a8>
 8010164:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8010168:	2908      	cmp	r1, #8
 801016a:	f63f af79 	bhi.w	8010060 <_strtod_l+0x1b0>
 801016e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8010172:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010174:	9206      	str	r2, [sp, #24]
 8010176:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010178:	1c51      	adds	r1, r2, #1
 801017a:	9117      	str	r1, [sp, #92]	; 0x5c
 801017c:	7852      	ldrb	r2, [r2, #1]
 801017e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8010182:	2e09      	cmp	r6, #9
 8010184:	d937      	bls.n	80101f6 <_strtod_l+0x346>
 8010186:	9e06      	ldr	r6, [sp, #24]
 8010188:	1b89      	subs	r1, r1, r6
 801018a:	2908      	cmp	r1, #8
 801018c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8010190:	dc02      	bgt.n	8010198 <_strtod_l+0x2e8>
 8010192:	4576      	cmp	r6, lr
 8010194:	bfa8      	it	ge
 8010196:	4676      	movge	r6, lr
 8010198:	f1bc 0f00 	cmp.w	ip, #0
 801019c:	d000      	beq.n	80101a0 <_strtod_l+0x2f0>
 801019e:	4276      	negs	r6, r6
 80101a0:	2d00      	cmp	r5, #0
 80101a2:	d14d      	bne.n	8010240 <_strtod_l+0x390>
 80101a4:	9904      	ldr	r1, [sp, #16]
 80101a6:	4301      	orrs	r1, r0
 80101a8:	f47f aec6 	bne.w	800ff38 <_strtod_l+0x88>
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	f47f aee1 	bne.w	800ff74 <_strtod_l+0xc4>
 80101b2:	2a69      	cmp	r2, #105	; 0x69
 80101b4:	d027      	beq.n	8010206 <_strtod_l+0x356>
 80101b6:	dc24      	bgt.n	8010202 <_strtod_l+0x352>
 80101b8:	2a49      	cmp	r2, #73	; 0x49
 80101ba:	d024      	beq.n	8010206 <_strtod_l+0x356>
 80101bc:	2a4e      	cmp	r2, #78	; 0x4e
 80101be:	f47f aed9 	bne.w	800ff74 <_strtod_l+0xc4>
 80101c2:	499f      	ldr	r1, [pc, #636]	; (8010440 <_strtod_l+0x590>)
 80101c4:	a817      	add	r0, sp, #92	; 0x5c
 80101c6:	f001 fe61 	bl	8011e8c <__match>
 80101ca:	2800      	cmp	r0, #0
 80101cc:	f43f aed2 	beq.w	800ff74 <_strtod_l+0xc4>
 80101d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80101d2:	781b      	ldrb	r3, [r3, #0]
 80101d4:	2b28      	cmp	r3, #40	; 0x28
 80101d6:	d12d      	bne.n	8010234 <_strtod_l+0x384>
 80101d8:	499a      	ldr	r1, [pc, #616]	; (8010444 <_strtod_l+0x594>)
 80101da:	aa1a      	add	r2, sp, #104	; 0x68
 80101dc:	a817      	add	r0, sp, #92	; 0x5c
 80101de:	f001 fe69 	bl	8011eb4 <__hexnan>
 80101e2:	2805      	cmp	r0, #5
 80101e4:	d126      	bne.n	8010234 <_strtod_l+0x384>
 80101e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80101e8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80101ec:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80101f0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80101f4:	e6a0      	b.n	800ff38 <_strtod_l+0x88>
 80101f6:	210a      	movs	r1, #10
 80101f8:	fb01 2e0e 	mla	lr, r1, lr, r2
 80101fc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8010200:	e7b9      	b.n	8010176 <_strtod_l+0x2c6>
 8010202:	2a6e      	cmp	r2, #110	; 0x6e
 8010204:	e7db      	b.n	80101be <_strtod_l+0x30e>
 8010206:	4990      	ldr	r1, [pc, #576]	; (8010448 <_strtod_l+0x598>)
 8010208:	a817      	add	r0, sp, #92	; 0x5c
 801020a:	f001 fe3f 	bl	8011e8c <__match>
 801020e:	2800      	cmp	r0, #0
 8010210:	f43f aeb0 	beq.w	800ff74 <_strtod_l+0xc4>
 8010214:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010216:	498d      	ldr	r1, [pc, #564]	; (801044c <_strtod_l+0x59c>)
 8010218:	3b01      	subs	r3, #1
 801021a:	a817      	add	r0, sp, #92	; 0x5c
 801021c:	9317      	str	r3, [sp, #92]	; 0x5c
 801021e:	f001 fe35 	bl	8011e8c <__match>
 8010222:	b910      	cbnz	r0, 801022a <_strtod_l+0x37a>
 8010224:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010226:	3301      	adds	r3, #1
 8010228:	9317      	str	r3, [sp, #92]	; 0x5c
 801022a:	f8df b230 	ldr.w	fp, [pc, #560]	; 801045c <_strtod_l+0x5ac>
 801022e:	f04f 0a00 	mov.w	sl, #0
 8010232:	e681      	b.n	800ff38 <_strtod_l+0x88>
 8010234:	4886      	ldr	r0, [pc, #536]	; (8010450 <_strtod_l+0x5a0>)
 8010236:	f003 f953 	bl	80134e0 <nan>
 801023a:	ec5b ab10 	vmov	sl, fp, d0
 801023e:	e67b      	b.n	800ff38 <_strtod_l+0x88>
 8010240:	9b05      	ldr	r3, [sp, #20]
 8010242:	9807      	ldr	r0, [sp, #28]
 8010244:	1af3      	subs	r3, r6, r3
 8010246:	2f00      	cmp	r7, #0
 8010248:	bf08      	it	eq
 801024a:	462f      	moveq	r7, r5
 801024c:	2d10      	cmp	r5, #16
 801024e:	9306      	str	r3, [sp, #24]
 8010250:	46a8      	mov	r8, r5
 8010252:	bfa8      	it	ge
 8010254:	f04f 0810 	movge.w	r8, #16
 8010258:	f7f0 f974 	bl	8000544 <__aeabi_ui2d>
 801025c:	2d09      	cmp	r5, #9
 801025e:	4682      	mov	sl, r0
 8010260:	468b      	mov	fp, r1
 8010262:	dd13      	ble.n	801028c <_strtod_l+0x3dc>
 8010264:	4b7b      	ldr	r3, [pc, #492]	; (8010454 <_strtod_l+0x5a4>)
 8010266:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801026a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801026e:	f7f0 f9e3 	bl	8000638 <__aeabi_dmul>
 8010272:	4682      	mov	sl, r0
 8010274:	4648      	mov	r0, r9
 8010276:	468b      	mov	fp, r1
 8010278:	f7f0 f964 	bl	8000544 <__aeabi_ui2d>
 801027c:	4602      	mov	r2, r0
 801027e:	460b      	mov	r3, r1
 8010280:	4650      	mov	r0, sl
 8010282:	4659      	mov	r1, fp
 8010284:	f7f0 f822 	bl	80002cc <__adddf3>
 8010288:	4682      	mov	sl, r0
 801028a:	468b      	mov	fp, r1
 801028c:	2d0f      	cmp	r5, #15
 801028e:	dc38      	bgt.n	8010302 <_strtod_l+0x452>
 8010290:	9b06      	ldr	r3, [sp, #24]
 8010292:	2b00      	cmp	r3, #0
 8010294:	f43f ae50 	beq.w	800ff38 <_strtod_l+0x88>
 8010298:	dd24      	ble.n	80102e4 <_strtod_l+0x434>
 801029a:	2b16      	cmp	r3, #22
 801029c:	dc0b      	bgt.n	80102b6 <_strtod_l+0x406>
 801029e:	496d      	ldr	r1, [pc, #436]	; (8010454 <_strtod_l+0x5a4>)
 80102a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80102a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80102a8:	4652      	mov	r2, sl
 80102aa:	465b      	mov	r3, fp
 80102ac:	f7f0 f9c4 	bl	8000638 <__aeabi_dmul>
 80102b0:	4682      	mov	sl, r0
 80102b2:	468b      	mov	fp, r1
 80102b4:	e640      	b.n	800ff38 <_strtod_l+0x88>
 80102b6:	9a06      	ldr	r2, [sp, #24]
 80102b8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80102bc:	4293      	cmp	r3, r2
 80102be:	db20      	blt.n	8010302 <_strtod_l+0x452>
 80102c0:	4c64      	ldr	r4, [pc, #400]	; (8010454 <_strtod_l+0x5a4>)
 80102c2:	f1c5 050f 	rsb	r5, r5, #15
 80102c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80102ca:	4652      	mov	r2, sl
 80102cc:	465b      	mov	r3, fp
 80102ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80102d2:	f7f0 f9b1 	bl	8000638 <__aeabi_dmul>
 80102d6:	9b06      	ldr	r3, [sp, #24]
 80102d8:	1b5d      	subs	r5, r3, r5
 80102da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80102de:	e9d4 2300 	ldrd	r2, r3, [r4]
 80102e2:	e7e3      	b.n	80102ac <_strtod_l+0x3fc>
 80102e4:	9b06      	ldr	r3, [sp, #24]
 80102e6:	3316      	adds	r3, #22
 80102e8:	db0b      	blt.n	8010302 <_strtod_l+0x452>
 80102ea:	9b05      	ldr	r3, [sp, #20]
 80102ec:	1b9e      	subs	r6, r3, r6
 80102ee:	4b59      	ldr	r3, [pc, #356]	; (8010454 <_strtod_l+0x5a4>)
 80102f0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80102f4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80102f8:	4650      	mov	r0, sl
 80102fa:	4659      	mov	r1, fp
 80102fc:	f7f0 fac6 	bl	800088c <__aeabi_ddiv>
 8010300:	e7d6      	b.n	80102b0 <_strtod_l+0x400>
 8010302:	9b06      	ldr	r3, [sp, #24]
 8010304:	eba5 0808 	sub.w	r8, r5, r8
 8010308:	4498      	add	r8, r3
 801030a:	f1b8 0f00 	cmp.w	r8, #0
 801030e:	dd74      	ble.n	80103fa <_strtod_l+0x54a>
 8010310:	f018 030f 	ands.w	r3, r8, #15
 8010314:	d00a      	beq.n	801032c <_strtod_l+0x47c>
 8010316:	494f      	ldr	r1, [pc, #316]	; (8010454 <_strtod_l+0x5a4>)
 8010318:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801031c:	4652      	mov	r2, sl
 801031e:	465b      	mov	r3, fp
 8010320:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010324:	f7f0 f988 	bl	8000638 <__aeabi_dmul>
 8010328:	4682      	mov	sl, r0
 801032a:	468b      	mov	fp, r1
 801032c:	f038 080f 	bics.w	r8, r8, #15
 8010330:	d04f      	beq.n	80103d2 <_strtod_l+0x522>
 8010332:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8010336:	dd22      	ble.n	801037e <_strtod_l+0x4ce>
 8010338:	2500      	movs	r5, #0
 801033a:	462e      	mov	r6, r5
 801033c:	9507      	str	r5, [sp, #28]
 801033e:	9505      	str	r5, [sp, #20]
 8010340:	2322      	movs	r3, #34	; 0x22
 8010342:	f8df b118 	ldr.w	fp, [pc, #280]	; 801045c <_strtod_l+0x5ac>
 8010346:	6023      	str	r3, [r4, #0]
 8010348:	f04f 0a00 	mov.w	sl, #0
 801034c:	9b07      	ldr	r3, [sp, #28]
 801034e:	2b00      	cmp	r3, #0
 8010350:	f43f adf2 	beq.w	800ff38 <_strtod_l+0x88>
 8010354:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010356:	4620      	mov	r0, r4
 8010358:	f001 feb8 	bl	80120cc <_Bfree>
 801035c:	9905      	ldr	r1, [sp, #20]
 801035e:	4620      	mov	r0, r4
 8010360:	f001 feb4 	bl	80120cc <_Bfree>
 8010364:	4631      	mov	r1, r6
 8010366:	4620      	mov	r0, r4
 8010368:	f001 feb0 	bl	80120cc <_Bfree>
 801036c:	9907      	ldr	r1, [sp, #28]
 801036e:	4620      	mov	r0, r4
 8010370:	f001 feac 	bl	80120cc <_Bfree>
 8010374:	4629      	mov	r1, r5
 8010376:	4620      	mov	r0, r4
 8010378:	f001 fea8 	bl	80120cc <_Bfree>
 801037c:	e5dc      	b.n	800ff38 <_strtod_l+0x88>
 801037e:	4b36      	ldr	r3, [pc, #216]	; (8010458 <_strtod_l+0x5a8>)
 8010380:	9304      	str	r3, [sp, #16]
 8010382:	2300      	movs	r3, #0
 8010384:	ea4f 1828 	mov.w	r8, r8, asr #4
 8010388:	4650      	mov	r0, sl
 801038a:	4659      	mov	r1, fp
 801038c:	4699      	mov	r9, r3
 801038e:	f1b8 0f01 	cmp.w	r8, #1
 8010392:	dc21      	bgt.n	80103d8 <_strtod_l+0x528>
 8010394:	b10b      	cbz	r3, 801039a <_strtod_l+0x4ea>
 8010396:	4682      	mov	sl, r0
 8010398:	468b      	mov	fp, r1
 801039a:	4b2f      	ldr	r3, [pc, #188]	; (8010458 <_strtod_l+0x5a8>)
 801039c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80103a0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80103a4:	4652      	mov	r2, sl
 80103a6:	465b      	mov	r3, fp
 80103a8:	e9d9 0100 	ldrd	r0, r1, [r9]
 80103ac:	f7f0 f944 	bl	8000638 <__aeabi_dmul>
 80103b0:	4b2a      	ldr	r3, [pc, #168]	; (801045c <_strtod_l+0x5ac>)
 80103b2:	460a      	mov	r2, r1
 80103b4:	400b      	ands	r3, r1
 80103b6:	492a      	ldr	r1, [pc, #168]	; (8010460 <_strtod_l+0x5b0>)
 80103b8:	428b      	cmp	r3, r1
 80103ba:	4682      	mov	sl, r0
 80103bc:	d8bc      	bhi.n	8010338 <_strtod_l+0x488>
 80103be:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80103c2:	428b      	cmp	r3, r1
 80103c4:	bf86      	itte	hi
 80103c6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8010464 <_strtod_l+0x5b4>
 80103ca:	f04f 3aff 	movhi.w	sl, #4294967295
 80103ce:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80103d2:	2300      	movs	r3, #0
 80103d4:	9304      	str	r3, [sp, #16]
 80103d6:	e084      	b.n	80104e2 <_strtod_l+0x632>
 80103d8:	f018 0f01 	tst.w	r8, #1
 80103dc:	d005      	beq.n	80103ea <_strtod_l+0x53a>
 80103de:	9b04      	ldr	r3, [sp, #16]
 80103e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103e4:	f7f0 f928 	bl	8000638 <__aeabi_dmul>
 80103e8:	2301      	movs	r3, #1
 80103ea:	9a04      	ldr	r2, [sp, #16]
 80103ec:	3208      	adds	r2, #8
 80103ee:	f109 0901 	add.w	r9, r9, #1
 80103f2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80103f6:	9204      	str	r2, [sp, #16]
 80103f8:	e7c9      	b.n	801038e <_strtod_l+0x4de>
 80103fa:	d0ea      	beq.n	80103d2 <_strtod_l+0x522>
 80103fc:	f1c8 0800 	rsb	r8, r8, #0
 8010400:	f018 020f 	ands.w	r2, r8, #15
 8010404:	d00a      	beq.n	801041c <_strtod_l+0x56c>
 8010406:	4b13      	ldr	r3, [pc, #76]	; (8010454 <_strtod_l+0x5a4>)
 8010408:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801040c:	4650      	mov	r0, sl
 801040e:	4659      	mov	r1, fp
 8010410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010414:	f7f0 fa3a 	bl	800088c <__aeabi_ddiv>
 8010418:	4682      	mov	sl, r0
 801041a:	468b      	mov	fp, r1
 801041c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8010420:	d0d7      	beq.n	80103d2 <_strtod_l+0x522>
 8010422:	f1b8 0f1f 	cmp.w	r8, #31
 8010426:	dd1f      	ble.n	8010468 <_strtod_l+0x5b8>
 8010428:	2500      	movs	r5, #0
 801042a:	462e      	mov	r6, r5
 801042c:	9507      	str	r5, [sp, #28]
 801042e:	9505      	str	r5, [sp, #20]
 8010430:	2322      	movs	r3, #34	; 0x22
 8010432:	f04f 0a00 	mov.w	sl, #0
 8010436:	f04f 0b00 	mov.w	fp, #0
 801043a:	6023      	str	r3, [r4, #0]
 801043c:	e786      	b.n	801034c <_strtod_l+0x49c>
 801043e:	bf00      	nop
 8010440:	080146b5 	.word	0x080146b5
 8010444:	080146f4 	.word	0x080146f4
 8010448:	080146ad 	.word	0x080146ad
 801044c:	08014834 	.word	0x08014834
 8010450:	08014afb 	.word	0x08014afb
 8010454:	080149c0 	.word	0x080149c0
 8010458:	08014998 	.word	0x08014998
 801045c:	7ff00000 	.word	0x7ff00000
 8010460:	7ca00000 	.word	0x7ca00000
 8010464:	7fefffff 	.word	0x7fefffff
 8010468:	f018 0310 	ands.w	r3, r8, #16
 801046c:	bf18      	it	ne
 801046e:	236a      	movne	r3, #106	; 0x6a
 8010470:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8010820 <_strtod_l+0x970>
 8010474:	9304      	str	r3, [sp, #16]
 8010476:	4650      	mov	r0, sl
 8010478:	4659      	mov	r1, fp
 801047a:	2300      	movs	r3, #0
 801047c:	f018 0f01 	tst.w	r8, #1
 8010480:	d004      	beq.n	801048c <_strtod_l+0x5dc>
 8010482:	e9d9 2300 	ldrd	r2, r3, [r9]
 8010486:	f7f0 f8d7 	bl	8000638 <__aeabi_dmul>
 801048a:	2301      	movs	r3, #1
 801048c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8010490:	f109 0908 	add.w	r9, r9, #8
 8010494:	d1f2      	bne.n	801047c <_strtod_l+0x5cc>
 8010496:	b10b      	cbz	r3, 801049c <_strtod_l+0x5ec>
 8010498:	4682      	mov	sl, r0
 801049a:	468b      	mov	fp, r1
 801049c:	9b04      	ldr	r3, [sp, #16]
 801049e:	b1c3      	cbz	r3, 80104d2 <_strtod_l+0x622>
 80104a0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80104a4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	4659      	mov	r1, fp
 80104ac:	dd11      	ble.n	80104d2 <_strtod_l+0x622>
 80104ae:	2b1f      	cmp	r3, #31
 80104b0:	f340 8124 	ble.w	80106fc <_strtod_l+0x84c>
 80104b4:	2b34      	cmp	r3, #52	; 0x34
 80104b6:	bfde      	ittt	le
 80104b8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80104bc:	f04f 33ff 	movle.w	r3, #4294967295
 80104c0:	fa03 f202 	lslle.w	r2, r3, r2
 80104c4:	f04f 0a00 	mov.w	sl, #0
 80104c8:	bfcc      	ite	gt
 80104ca:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80104ce:	ea02 0b01 	andle.w	fp, r2, r1
 80104d2:	2200      	movs	r2, #0
 80104d4:	2300      	movs	r3, #0
 80104d6:	4650      	mov	r0, sl
 80104d8:	4659      	mov	r1, fp
 80104da:	f7f0 fb15 	bl	8000b08 <__aeabi_dcmpeq>
 80104de:	2800      	cmp	r0, #0
 80104e0:	d1a2      	bne.n	8010428 <_strtod_l+0x578>
 80104e2:	9b07      	ldr	r3, [sp, #28]
 80104e4:	9300      	str	r3, [sp, #0]
 80104e6:	9908      	ldr	r1, [sp, #32]
 80104e8:	462b      	mov	r3, r5
 80104ea:	463a      	mov	r2, r7
 80104ec:	4620      	mov	r0, r4
 80104ee:	f001 fe55 	bl	801219c <__s2b>
 80104f2:	9007      	str	r0, [sp, #28]
 80104f4:	2800      	cmp	r0, #0
 80104f6:	f43f af1f 	beq.w	8010338 <_strtod_l+0x488>
 80104fa:	9b05      	ldr	r3, [sp, #20]
 80104fc:	1b9e      	subs	r6, r3, r6
 80104fe:	9b06      	ldr	r3, [sp, #24]
 8010500:	2b00      	cmp	r3, #0
 8010502:	bfb4      	ite	lt
 8010504:	4633      	movlt	r3, r6
 8010506:	2300      	movge	r3, #0
 8010508:	930c      	str	r3, [sp, #48]	; 0x30
 801050a:	9b06      	ldr	r3, [sp, #24]
 801050c:	2500      	movs	r5, #0
 801050e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010512:	9312      	str	r3, [sp, #72]	; 0x48
 8010514:	462e      	mov	r6, r5
 8010516:	9b07      	ldr	r3, [sp, #28]
 8010518:	4620      	mov	r0, r4
 801051a:	6859      	ldr	r1, [r3, #4]
 801051c:	f001 fd96 	bl	801204c <_Balloc>
 8010520:	9005      	str	r0, [sp, #20]
 8010522:	2800      	cmp	r0, #0
 8010524:	f43f af0c 	beq.w	8010340 <_strtod_l+0x490>
 8010528:	9b07      	ldr	r3, [sp, #28]
 801052a:	691a      	ldr	r2, [r3, #16]
 801052c:	3202      	adds	r2, #2
 801052e:	f103 010c 	add.w	r1, r3, #12
 8010532:	0092      	lsls	r2, r2, #2
 8010534:	300c      	adds	r0, #12
 8010536:	f7fe fd5b 	bl	800eff0 <memcpy>
 801053a:	ec4b ab10 	vmov	d0, sl, fp
 801053e:	aa1a      	add	r2, sp, #104	; 0x68
 8010540:	a919      	add	r1, sp, #100	; 0x64
 8010542:	4620      	mov	r0, r4
 8010544:	f002 f970 	bl	8012828 <__d2b>
 8010548:	ec4b ab18 	vmov	d8, sl, fp
 801054c:	9018      	str	r0, [sp, #96]	; 0x60
 801054e:	2800      	cmp	r0, #0
 8010550:	f43f aef6 	beq.w	8010340 <_strtod_l+0x490>
 8010554:	2101      	movs	r1, #1
 8010556:	4620      	mov	r0, r4
 8010558:	f001 feba 	bl	80122d0 <__i2b>
 801055c:	4606      	mov	r6, r0
 801055e:	2800      	cmp	r0, #0
 8010560:	f43f aeee 	beq.w	8010340 <_strtod_l+0x490>
 8010564:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010566:	9904      	ldr	r1, [sp, #16]
 8010568:	2b00      	cmp	r3, #0
 801056a:	bfab      	itete	ge
 801056c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801056e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8010570:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8010572:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8010576:	bfac      	ite	ge
 8010578:	eb03 0902 	addge.w	r9, r3, r2
 801057c:	1ad7      	sublt	r7, r2, r3
 801057e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8010580:	eba3 0801 	sub.w	r8, r3, r1
 8010584:	4490      	add	r8, r2
 8010586:	4ba1      	ldr	r3, [pc, #644]	; (801080c <_strtod_l+0x95c>)
 8010588:	f108 38ff 	add.w	r8, r8, #4294967295
 801058c:	4598      	cmp	r8, r3
 801058e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8010592:	f280 80c7 	bge.w	8010724 <_strtod_l+0x874>
 8010596:	eba3 0308 	sub.w	r3, r3, r8
 801059a:	2b1f      	cmp	r3, #31
 801059c:	eba2 0203 	sub.w	r2, r2, r3
 80105a0:	f04f 0101 	mov.w	r1, #1
 80105a4:	f300 80b1 	bgt.w	801070a <_strtod_l+0x85a>
 80105a8:	fa01 f303 	lsl.w	r3, r1, r3
 80105ac:	930d      	str	r3, [sp, #52]	; 0x34
 80105ae:	2300      	movs	r3, #0
 80105b0:	9308      	str	r3, [sp, #32]
 80105b2:	eb09 0802 	add.w	r8, r9, r2
 80105b6:	9b04      	ldr	r3, [sp, #16]
 80105b8:	45c1      	cmp	r9, r8
 80105ba:	4417      	add	r7, r2
 80105bc:	441f      	add	r7, r3
 80105be:	464b      	mov	r3, r9
 80105c0:	bfa8      	it	ge
 80105c2:	4643      	movge	r3, r8
 80105c4:	42bb      	cmp	r3, r7
 80105c6:	bfa8      	it	ge
 80105c8:	463b      	movge	r3, r7
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	bfc2      	ittt	gt
 80105ce:	eba8 0803 	subgt.w	r8, r8, r3
 80105d2:	1aff      	subgt	r7, r7, r3
 80105d4:	eba9 0903 	subgt.w	r9, r9, r3
 80105d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80105da:	2b00      	cmp	r3, #0
 80105dc:	dd17      	ble.n	801060e <_strtod_l+0x75e>
 80105de:	4631      	mov	r1, r6
 80105e0:	461a      	mov	r2, r3
 80105e2:	4620      	mov	r0, r4
 80105e4:	f001 ff34 	bl	8012450 <__pow5mult>
 80105e8:	4606      	mov	r6, r0
 80105ea:	2800      	cmp	r0, #0
 80105ec:	f43f aea8 	beq.w	8010340 <_strtod_l+0x490>
 80105f0:	4601      	mov	r1, r0
 80105f2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80105f4:	4620      	mov	r0, r4
 80105f6:	f001 fe81 	bl	80122fc <__multiply>
 80105fa:	900b      	str	r0, [sp, #44]	; 0x2c
 80105fc:	2800      	cmp	r0, #0
 80105fe:	f43f ae9f 	beq.w	8010340 <_strtod_l+0x490>
 8010602:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010604:	4620      	mov	r0, r4
 8010606:	f001 fd61 	bl	80120cc <_Bfree>
 801060a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801060c:	9318      	str	r3, [sp, #96]	; 0x60
 801060e:	f1b8 0f00 	cmp.w	r8, #0
 8010612:	f300 808c 	bgt.w	801072e <_strtod_l+0x87e>
 8010616:	9b06      	ldr	r3, [sp, #24]
 8010618:	2b00      	cmp	r3, #0
 801061a:	dd08      	ble.n	801062e <_strtod_l+0x77e>
 801061c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801061e:	9905      	ldr	r1, [sp, #20]
 8010620:	4620      	mov	r0, r4
 8010622:	f001 ff15 	bl	8012450 <__pow5mult>
 8010626:	9005      	str	r0, [sp, #20]
 8010628:	2800      	cmp	r0, #0
 801062a:	f43f ae89 	beq.w	8010340 <_strtod_l+0x490>
 801062e:	2f00      	cmp	r7, #0
 8010630:	dd08      	ble.n	8010644 <_strtod_l+0x794>
 8010632:	9905      	ldr	r1, [sp, #20]
 8010634:	463a      	mov	r2, r7
 8010636:	4620      	mov	r0, r4
 8010638:	f001 ff64 	bl	8012504 <__lshift>
 801063c:	9005      	str	r0, [sp, #20]
 801063e:	2800      	cmp	r0, #0
 8010640:	f43f ae7e 	beq.w	8010340 <_strtod_l+0x490>
 8010644:	f1b9 0f00 	cmp.w	r9, #0
 8010648:	dd08      	ble.n	801065c <_strtod_l+0x7ac>
 801064a:	4631      	mov	r1, r6
 801064c:	464a      	mov	r2, r9
 801064e:	4620      	mov	r0, r4
 8010650:	f001 ff58 	bl	8012504 <__lshift>
 8010654:	4606      	mov	r6, r0
 8010656:	2800      	cmp	r0, #0
 8010658:	f43f ae72 	beq.w	8010340 <_strtod_l+0x490>
 801065c:	9a05      	ldr	r2, [sp, #20]
 801065e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010660:	4620      	mov	r0, r4
 8010662:	f001 ffdb 	bl	801261c <__mdiff>
 8010666:	4605      	mov	r5, r0
 8010668:	2800      	cmp	r0, #0
 801066a:	f43f ae69 	beq.w	8010340 <_strtod_l+0x490>
 801066e:	68c3      	ldr	r3, [r0, #12]
 8010670:	930b      	str	r3, [sp, #44]	; 0x2c
 8010672:	2300      	movs	r3, #0
 8010674:	60c3      	str	r3, [r0, #12]
 8010676:	4631      	mov	r1, r6
 8010678:	f001 ffb4 	bl	80125e4 <__mcmp>
 801067c:	2800      	cmp	r0, #0
 801067e:	da60      	bge.n	8010742 <_strtod_l+0x892>
 8010680:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010682:	ea53 030a 	orrs.w	r3, r3, sl
 8010686:	f040 8082 	bne.w	801078e <_strtod_l+0x8de>
 801068a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801068e:	2b00      	cmp	r3, #0
 8010690:	d17d      	bne.n	801078e <_strtod_l+0x8de>
 8010692:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010696:	0d1b      	lsrs	r3, r3, #20
 8010698:	051b      	lsls	r3, r3, #20
 801069a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801069e:	d976      	bls.n	801078e <_strtod_l+0x8de>
 80106a0:	696b      	ldr	r3, [r5, #20]
 80106a2:	b913      	cbnz	r3, 80106aa <_strtod_l+0x7fa>
 80106a4:	692b      	ldr	r3, [r5, #16]
 80106a6:	2b01      	cmp	r3, #1
 80106a8:	dd71      	ble.n	801078e <_strtod_l+0x8de>
 80106aa:	4629      	mov	r1, r5
 80106ac:	2201      	movs	r2, #1
 80106ae:	4620      	mov	r0, r4
 80106b0:	f001 ff28 	bl	8012504 <__lshift>
 80106b4:	4631      	mov	r1, r6
 80106b6:	4605      	mov	r5, r0
 80106b8:	f001 ff94 	bl	80125e4 <__mcmp>
 80106bc:	2800      	cmp	r0, #0
 80106be:	dd66      	ble.n	801078e <_strtod_l+0x8de>
 80106c0:	9904      	ldr	r1, [sp, #16]
 80106c2:	4a53      	ldr	r2, [pc, #332]	; (8010810 <_strtod_l+0x960>)
 80106c4:	465b      	mov	r3, fp
 80106c6:	2900      	cmp	r1, #0
 80106c8:	f000 8081 	beq.w	80107ce <_strtod_l+0x91e>
 80106cc:	ea02 010b 	and.w	r1, r2, fp
 80106d0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80106d4:	dc7b      	bgt.n	80107ce <_strtod_l+0x91e>
 80106d6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80106da:	f77f aea9 	ble.w	8010430 <_strtod_l+0x580>
 80106de:	4b4d      	ldr	r3, [pc, #308]	; (8010814 <_strtod_l+0x964>)
 80106e0:	4650      	mov	r0, sl
 80106e2:	4659      	mov	r1, fp
 80106e4:	2200      	movs	r2, #0
 80106e6:	f7ef ffa7 	bl	8000638 <__aeabi_dmul>
 80106ea:	460b      	mov	r3, r1
 80106ec:	4303      	orrs	r3, r0
 80106ee:	bf08      	it	eq
 80106f0:	2322      	moveq	r3, #34	; 0x22
 80106f2:	4682      	mov	sl, r0
 80106f4:	468b      	mov	fp, r1
 80106f6:	bf08      	it	eq
 80106f8:	6023      	streq	r3, [r4, #0]
 80106fa:	e62b      	b.n	8010354 <_strtod_l+0x4a4>
 80106fc:	f04f 32ff 	mov.w	r2, #4294967295
 8010700:	fa02 f303 	lsl.w	r3, r2, r3
 8010704:	ea03 0a0a 	and.w	sl, r3, sl
 8010708:	e6e3      	b.n	80104d2 <_strtod_l+0x622>
 801070a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801070e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8010712:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8010716:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801071a:	fa01 f308 	lsl.w	r3, r1, r8
 801071e:	9308      	str	r3, [sp, #32]
 8010720:	910d      	str	r1, [sp, #52]	; 0x34
 8010722:	e746      	b.n	80105b2 <_strtod_l+0x702>
 8010724:	2300      	movs	r3, #0
 8010726:	9308      	str	r3, [sp, #32]
 8010728:	2301      	movs	r3, #1
 801072a:	930d      	str	r3, [sp, #52]	; 0x34
 801072c:	e741      	b.n	80105b2 <_strtod_l+0x702>
 801072e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010730:	4642      	mov	r2, r8
 8010732:	4620      	mov	r0, r4
 8010734:	f001 fee6 	bl	8012504 <__lshift>
 8010738:	9018      	str	r0, [sp, #96]	; 0x60
 801073a:	2800      	cmp	r0, #0
 801073c:	f47f af6b 	bne.w	8010616 <_strtod_l+0x766>
 8010740:	e5fe      	b.n	8010340 <_strtod_l+0x490>
 8010742:	465f      	mov	r7, fp
 8010744:	d16e      	bne.n	8010824 <_strtod_l+0x974>
 8010746:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010748:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801074c:	b342      	cbz	r2, 80107a0 <_strtod_l+0x8f0>
 801074e:	4a32      	ldr	r2, [pc, #200]	; (8010818 <_strtod_l+0x968>)
 8010750:	4293      	cmp	r3, r2
 8010752:	d128      	bne.n	80107a6 <_strtod_l+0x8f6>
 8010754:	9b04      	ldr	r3, [sp, #16]
 8010756:	4651      	mov	r1, sl
 8010758:	b1eb      	cbz	r3, 8010796 <_strtod_l+0x8e6>
 801075a:	4b2d      	ldr	r3, [pc, #180]	; (8010810 <_strtod_l+0x960>)
 801075c:	403b      	ands	r3, r7
 801075e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010762:	f04f 32ff 	mov.w	r2, #4294967295
 8010766:	d819      	bhi.n	801079c <_strtod_l+0x8ec>
 8010768:	0d1b      	lsrs	r3, r3, #20
 801076a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801076e:	fa02 f303 	lsl.w	r3, r2, r3
 8010772:	4299      	cmp	r1, r3
 8010774:	d117      	bne.n	80107a6 <_strtod_l+0x8f6>
 8010776:	4b29      	ldr	r3, [pc, #164]	; (801081c <_strtod_l+0x96c>)
 8010778:	429f      	cmp	r7, r3
 801077a:	d102      	bne.n	8010782 <_strtod_l+0x8d2>
 801077c:	3101      	adds	r1, #1
 801077e:	f43f addf 	beq.w	8010340 <_strtod_l+0x490>
 8010782:	4b23      	ldr	r3, [pc, #140]	; (8010810 <_strtod_l+0x960>)
 8010784:	403b      	ands	r3, r7
 8010786:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801078a:	f04f 0a00 	mov.w	sl, #0
 801078e:	9b04      	ldr	r3, [sp, #16]
 8010790:	2b00      	cmp	r3, #0
 8010792:	d1a4      	bne.n	80106de <_strtod_l+0x82e>
 8010794:	e5de      	b.n	8010354 <_strtod_l+0x4a4>
 8010796:	f04f 33ff 	mov.w	r3, #4294967295
 801079a:	e7ea      	b.n	8010772 <_strtod_l+0x8c2>
 801079c:	4613      	mov	r3, r2
 801079e:	e7e8      	b.n	8010772 <_strtod_l+0x8c2>
 80107a0:	ea53 030a 	orrs.w	r3, r3, sl
 80107a4:	d08c      	beq.n	80106c0 <_strtod_l+0x810>
 80107a6:	9b08      	ldr	r3, [sp, #32]
 80107a8:	b1db      	cbz	r3, 80107e2 <_strtod_l+0x932>
 80107aa:	423b      	tst	r3, r7
 80107ac:	d0ef      	beq.n	801078e <_strtod_l+0x8de>
 80107ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80107b0:	9a04      	ldr	r2, [sp, #16]
 80107b2:	4650      	mov	r0, sl
 80107b4:	4659      	mov	r1, fp
 80107b6:	b1c3      	cbz	r3, 80107ea <_strtod_l+0x93a>
 80107b8:	f7ff fb5d 	bl	800fe76 <sulp>
 80107bc:	4602      	mov	r2, r0
 80107be:	460b      	mov	r3, r1
 80107c0:	ec51 0b18 	vmov	r0, r1, d8
 80107c4:	f7ef fd82 	bl	80002cc <__adddf3>
 80107c8:	4682      	mov	sl, r0
 80107ca:	468b      	mov	fp, r1
 80107cc:	e7df      	b.n	801078e <_strtod_l+0x8de>
 80107ce:	4013      	ands	r3, r2
 80107d0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80107d4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80107d8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80107dc:	f04f 3aff 	mov.w	sl, #4294967295
 80107e0:	e7d5      	b.n	801078e <_strtod_l+0x8de>
 80107e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80107e4:	ea13 0f0a 	tst.w	r3, sl
 80107e8:	e7e0      	b.n	80107ac <_strtod_l+0x8fc>
 80107ea:	f7ff fb44 	bl	800fe76 <sulp>
 80107ee:	4602      	mov	r2, r0
 80107f0:	460b      	mov	r3, r1
 80107f2:	ec51 0b18 	vmov	r0, r1, d8
 80107f6:	f7ef fd67 	bl	80002c8 <__aeabi_dsub>
 80107fa:	2200      	movs	r2, #0
 80107fc:	2300      	movs	r3, #0
 80107fe:	4682      	mov	sl, r0
 8010800:	468b      	mov	fp, r1
 8010802:	f7f0 f981 	bl	8000b08 <__aeabi_dcmpeq>
 8010806:	2800      	cmp	r0, #0
 8010808:	d0c1      	beq.n	801078e <_strtod_l+0x8de>
 801080a:	e611      	b.n	8010430 <_strtod_l+0x580>
 801080c:	fffffc02 	.word	0xfffffc02
 8010810:	7ff00000 	.word	0x7ff00000
 8010814:	39500000 	.word	0x39500000
 8010818:	000fffff 	.word	0x000fffff
 801081c:	7fefffff 	.word	0x7fefffff
 8010820:	08014708 	.word	0x08014708
 8010824:	4631      	mov	r1, r6
 8010826:	4628      	mov	r0, r5
 8010828:	f002 f85a 	bl	80128e0 <__ratio>
 801082c:	ec59 8b10 	vmov	r8, r9, d0
 8010830:	ee10 0a10 	vmov	r0, s0
 8010834:	2200      	movs	r2, #0
 8010836:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801083a:	4649      	mov	r1, r9
 801083c:	f7f0 f978 	bl	8000b30 <__aeabi_dcmple>
 8010840:	2800      	cmp	r0, #0
 8010842:	d07a      	beq.n	801093a <_strtod_l+0xa8a>
 8010844:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010846:	2b00      	cmp	r3, #0
 8010848:	d04a      	beq.n	80108e0 <_strtod_l+0xa30>
 801084a:	4b95      	ldr	r3, [pc, #596]	; (8010aa0 <_strtod_l+0xbf0>)
 801084c:	2200      	movs	r2, #0
 801084e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010852:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8010aa0 <_strtod_l+0xbf0>
 8010856:	f04f 0800 	mov.w	r8, #0
 801085a:	4b92      	ldr	r3, [pc, #584]	; (8010aa4 <_strtod_l+0xbf4>)
 801085c:	403b      	ands	r3, r7
 801085e:	930d      	str	r3, [sp, #52]	; 0x34
 8010860:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010862:	4b91      	ldr	r3, [pc, #580]	; (8010aa8 <_strtod_l+0xbf8>)
 8010864:	429a      	cmp	r2, r3
 8010866:	f040 80b0 	bne.w	80109ca <_strtod_l+0xb1a>
 801086a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801086e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8010872:	ec4b ab10 	vmov	d0, sl, fp
 8010876:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801087a:	f001 ff59 	bl	8012730 <__ulp>
 801087e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010882:	ec53 2b10 	vmov	r2, r3, d0
 8010886:	f7ef fed7 	bl	8000638 <__aeabi_dmul>
 801088a:	4652      	mov	r2, sl
 801088c:	465b      	mov	r3, fp
 801088e:	f7ef fd1d 	bl	80002cc <__adddf3>
 8010892:	460b      	mov	r3, r1
 8010894:	4983      	ldr	r1, [pc, #524]	; (8010aa4 <_strtod_l+0xbf4>)
 8010896:	4a85      	ldr	r2, [pc, #532]	; (8010aac <_strtod_l+0xbfc>)
 8010898:	4019      	ands	r1, r3
 801089a:	4291      	cmp	r1, r2
 801089c:	4682      	mov	sl, r0
 801089e:	d960      	bls.n	8010962 <_strtod_l+0xab2>
 80108a0:	ee18 3a90 	vmov	r3, s17
 80108a4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80108a8:	4293      	cmp	r3, r2
 80108aa:	d104      	bne.n	80108b6 <_strtod_l+0xa06>
 80108ac:	ee18 3a10 	vmov	r3, s16
 80108b0:	3301      	adds	r3, #1
 80108b2:	f43f ad45 	beq.w	8010340 <_strtod_l+0x490>
 80108b6:	f8df b200 	ldr.w	fp, [pc, #512]	; 8010ab8 <_strtod_l+0xc08>
 80108ba:	f04f 3aff 	mov.w	sl, #4294967295
 80108be:	9918      	ldr	r1, [sp, #96]	; 0x60
 80108c0:	4620      	mov	r0, r4
 80108c2:	f001 fc03 	bl	80120cc <_Bfree>
 80108c6:	9905      	ldr	r1, [sp, #20]
 80108c8:	4620      	mov	r0, r4
 80108ca:	f001 fbff 	bl	80120cc <_Bfree>
 80108ce:	4631      	mov	r1, r6
 80108d0:	4620      	mov	r0, r4
 80108d2:	f001 fbfb 	bl	80120cc <_Bfree>
 80108d6:	4629      	mov	r1, r5
 80108d8:	4620      	mov	r0, r4
 80108da:	f001 fbf7 	bl	80120cc <_Bfree>
 80108de:	e61a      	b.n	8010516 <_strtod_l+0x666>
 80108e0:	f1ba 0f00 	cmp.w	sl, #0
 80108e4:	d11b      	bne.n	801091e <_strtod_l+0xa6e>
 80108e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80108ea:	b9f3      	cbnz	r3, 801092a <_strtod_l+0xa7a>
 80108ec:	4b6c      	ldr	r3, [pc, #432]	; (8010aa0 <_strtod_l+0xbf0>)
 80108ee:	2200      	movs	r2, #0
 80108f0:	4640      	mov	r0, r8
 80108f2:	4649      	mov	r1, r9
 80108f4:	f7f0 f912 	bl	8000b1c <__aeabi_dcmplt>
 80108f8:	b9d0      	cbnz	r0, 8010930 <_strtod_l+0xa80>
 80108fa:	4640      	mov	r0, r8
 80108fc:	4649      	mov	r1, r9
 80108fe:	4b6c      	ldr	r3, [pc, #432]	; (8010ab0 <_strtod_l+0xc00>)
 8010900:	2200      	movs	r2, #0
 8010902:	f7ef fe99 	bl	8000638 <__aeabi_dmul>
 8010906:	4680      	mov	r8, r0
 8010908:	4689      	mov	r9, r1
 801090a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801090e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8010912:	9315      	str	r3, [sp, #84]	; 0x54
 8010914:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8010918:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801091c:	e79d      	b.n	801085a <_strtod_l+0x9aa>
 801091e:	f1ba 0f01 	cmp.w	sl, #1
 8010922:	d102      	bne.n	801092a <_strtod_l+0xa7a>
 8010924:	2f00      	cmp	r7, #0
 8010926:	f43f ad83 	beq.w	8010430 <_strtod_l+0x580>
 801092a:	4b62      	ldr	r3, [pc, #392]	; (8010ab4 <_strtod_l+0xc04>)
 801092c:	2200      	movs	r2, #0
 801092e:	e78e      	b.n	801084e <_strtod_l+0x99e>
 8010930:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8010ab0 <_strtod_l+0xc00>
 8010934:	f04f 0800 	mov.w	r8, #0
 8010938:	e7e7      	b.n	801090a <_strtod_l+0xa5a>
 801093a:	4b5d      	ldr	r3, [pc, #372]	; (8010ab0 <_strtod_l+0xc00>)
 801093c:	4640      	mov	r0, r8
 801093e:	4649      	mov	r1, r9
 8010940:	2200      	movs	r2, #0
 8010942:	f7ef fe79 	bl	8000638 <__aeabi_dmul>
 8010946:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010948:	4680      	mov	r8, r0
 801094a:	4689      	mov	r9, r1
 801094c:	b933      	cbnz	r3, 801095c <_strtod_l+0xaac>
 801094e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010952:	900e      	str	r0, [sp, #56]	; 0x38
 8010954:	930f      	str	r3, [sp, #60]	; 0x3c
 8010956:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801095a:	e7dd      	b.n	8010918 <_strtod_l+0xa68>
 801095c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8010960:	e7f9      	b.n	8010956 <_strtod_l+0xaa6>
 8010962:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8010966:	9b04      	ldr	r3, [sp, #16]
 8010968:	2b00      	cmp	r3, #0
 801096a:	d1a8      	bne.n	80108be <_strtod_l+0xa0e>
 801096c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010970:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010972:	0d1b      	lsrs	r3, r3, #20
 8010974:	051b      	lsls	r3, r3, #20
 8010976:	429a      	cmp	r2, r3
 8010978:	d1a1      	bne.n	80108be <_strtod_l+0xa0e>
 801097a:	4640      	mov	r0, r8
 801097c:	4649      	mov	r1, r9
 801097e:	f7f0 f9bb 	bl	8000cf8 <__aeabi_d2lz>
 8010982:	f7ef fe2b 	bl	80005dc <__aeabi_l2d>
 8010986:	4602      	mov	r2, r0
 8010988:	460b      	mov	r3, r1
 801098a:	4640      	mov	r0, r8
 801098c:	4649      	mov	r1, r9
 801098e:	f7ef fc9b 	bl	80002c8 <__aeabi_dsub>
 8010992:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010994:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010998:	ea43 030a 	orr.w	r3, r3, sl
 801099c:	4313      	orrs	r3, r2
 801099e:	4680      	mov	r8, r0
 80109a0:	4689      	mov	r9, r1
 80109a2:	d055      	beq.n	8010a50 <_strtod_l+0xba0>
 80109a4:	a336      	add	r3, pc, #216	; (adr r3, 8010a80 <_strtod_l+0xbd0>)
 80109a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109aa:	f7f0 f8b7 	bl	8000b1c <__aeabi_dcmplt>
 80109ae:	2800      	cmp	r0, #0
 80109b0:	f47f acd0 	bne.w	8010354 <_strtod_l+0x4a4>
 80109b4:	a334      	add	r3, pc, #208	; (adr r3, 8010a88 <_strtod_l+0xbd8>)
 80109b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109ba:	4640      	mov	r0, r8
 80109bc:	4649      	mov	r1, r9
 80109be:	f7f0 f8cb 	bl	8000b58 <__aeabi_dcmpgt>
 80109c2:	2800      	cmp	r0, #0
 80109c4:	f43f af7b 	beq.w	80108be <_strtod_l+0xa0e>
 80109c8:	e4c4      	b.n	8010354 <_strtod_l+0x4a4>
 80109ca:	9b04      	ldr	r3, [sp, #16]
 80109cc:	b333      	cbz	r3, 8010a1c <_strtod_l+0xb6c>
 80109ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80109d0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80109d4:	d822      	bhi.n	8010a1c <_strtod_l+0xb6c>
 80109d6:	a32e      	add	r3, pc, #184	; (adr r3, 8010a90 <_strtod_l+0xbe0>)
 80109d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109dc:	4640      	mov	r0, r8
 80109de:	4649      	mov	r1, r9
 80109e0:	f7f0 f8a6 	bl	8000b30 <__aeabi_dcmple>
 80109e4:	b1a0      	cbz	r0, 8010a10 <_strtod_l+0xb60>
 80109e6:	4649      	mov	r1, r9
 80109e8:	4640      	mov	r0, r8
 80109ea:	f7f0 f8fd 	bl	8000be8 <__aeabi_d2uiz>
 80109ee:	2801      	cmp	r0, #1
 80109f0:	bf38      	it	cc
 80109f2:	2001      	movcc	r0, #1
 80109f4:	f7ef fda6 	bl	8000544 <__aeabi_ui2d>
 80109f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80109fa:	4680      	mov	r8, r0
 80109fc:	4689      	mov	r9, r1
 80109fe:	bb23      	cbnz	r3, 8010a4a <_strtod_l+0xb9a>
 8010a00:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010a04:	9010      	str	r0, [sp, #64]	; 0x40
 8010a06:	9311      	str	r3, [sp, #68]	; 0x44
 8010a08:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010a0c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010a10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a12:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010a14:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8010a18:	1a9b      	subs	r3, r3, r2
 8010a1a:	9309      	str	r3, [sp, #36]	; 0x24
 8010a1c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010a20:	eeb0 0a48 	vmov.f32	s0, s16
 8010a24:	eef0 0a68 	vmov.f32	s1, s17
 8010a28:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010a2c:	f001 fe80 	bl	8012730 <__ulp>
 8010a30:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010a34:	ec53 2b10 	vmov	r2, r3, d0
 8010a38:	f7ef fdfe 	bl	8000638 <__aeabi_dmul>
 8010a3c:	ec53 2b18 	vmov	r2, r3, d8
 8010a40:	f7ef fc44 	bl	80002cc <__adddf3>
 8010a44:	4682      	mov	sl, r0
 8010a46:	468b      	mov	fp, r1
 8010a48:	e78d      	b.n	8010966 <_strtod_l+0xab6>
 8010a4a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8010a4e:	e7db      	b.n	8010a08 <_strtod_l+0xb58>
 8010a50:	a311      	add	r3, pc, #68	; (adr r3, 8010a98 <_strtod_l+0xbe8>)
 8010a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a56:	f7f0 f861 	bl	8000b1c <__aeabi_dcmplt>
 8010a5a:	e7b2      	b.n	80109c2 <_strtod_l+0xb12>
 8010a5c:	2300      	movs	r3, #0
 8010a5e:	930a      	str	r3, [sp, #40]	; 0x28
 8010a60:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010a62:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010a64:	6013      	str	r3, [r2, #0]
 8010a66:	f7ff ba6b 	b.w	800ff40 <_strtod_l+0x90>
 8010a6a:	2a65      	cmp	r2, #101	; 0x65
 8010a6c:	f43f ab5f 	beq.w	801012e <_strtod_l+0x27e>
 8010a70:	2a45      	cmp	r2, #69	; 0x45
 8010a72:	f43f ab5c 	beq.w	801012e <_strtod_l+0x27e>
 8010a76:	2301      	movs	r3, #1
 8010a78:	f7ff bb94 	b.w	80101a4 <_strtod_l+0x2f4>
 8010a7c:	f3af 8000 	nop.w
 8010a80:	94a03595 	.word	0x94a03595
 8010a84:	3fdfffff 	.word	0x3fdfffff
 8010a88:	35afe535 	.word	0x35afe535
 8010a8c:	3fe00000 	.word	0x3fe00000
 8010a90:	ffc00000 	.word	0xffc00000
 8010a94:	41dfffff 	.word	0x41dfffff
 8010a98:	94a03595 	.word	0x94a03595
 8010a9c:	3fcfffff 	.word	0x3fcfffff
 8010aa0:	3ff00000 	.word	0x3ff00000
 8010aa4:	7ff00000 	.word	0x7ff00000
 8010aa8:	7fe00000 	.word	0x7fe00000
 8010aac:	7c9fffff 	.word	0x7c9fffff
 8010ab0:	3fe00000 	.word	0x3fe00000
 8010ab4:	bff00000 	.word	0xbff00000
 8010ab8:	7fefffff 	.word	0x7fefffff

08010abc <_strtod_r>:
 8010abc:	4b01      	ldr	r3, [pc, #4]	; (8010ac4 <_strtod_r+0x8>)
 8010abe:	f7ff b9f7 	b.w	800feb0 <_strtod_l>
 8010ac2:	bf00      	nop
 8010ac4:	20000330 	.word	0x20000330

08010ac8 <_strtol_l.constprop.0>:
 8010ac8:	2b01      	cmp	r3, #1
 8010aca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ace:	d001      	beq.n	8010ad4 <_strtol_l.constprop.0+0xc>
 8010ad0:	2b24      	cmp	r3, #36	; 0x24
 8010ad2:	d906      	bls.n	8010ae2 <_strtol_l.constprop.0+0x1a>
 8010ad4:	f7fe fa62 	bl	800ef9c <__errno>
 8010ad8:	2316      	movs	r3, #22
 8010ada:	6003      	str	r3, [r0, #0]
 8010adc:	2000      	movs	r0, #0
 8010ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ae2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8010bc8 <_strtol_l.constprop.0+0x100>
 8010ae6:	460d      	mov	r5, r1
 8010ae8:	462e      	mov	r6, r5
 8010aea:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010aee:	f814 700c 	ldrb.w	r7, [r4, ip]
 8010af2:	f017 0708 	ands.w	r7, r7, #8
 8010af6:	d1f7      	bne.n	8010ae8 <_strtol_l.constprop.0+0x20>
 8010af8:	2c2d      	cmp	r4, #45	; 0x2d
 8010afa:	d132      	bne.n	8010b62 <_strtol_l.constprop.0+0x9a>
 8010afc:	782c      	ldrb	r4, [r5, #0]
 8010afe:	2701      	movs	r7, #1
 8010b00:	1cb5      	adds	r5, r6, #2
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d05b      	beq.n	8010bbe <_strtol_l.constprop.0+0xf6>
 8010b06:	2b10      	cmp	r3, #16
 8010b08:	d109      	bne.n	8010b1e <_strtol_l.constprop.0+0x56>
 8010b0a:	2c30      	cmp	r4, #48	; 0x30
 8010b0c:	d107      	bne.n	8010b1e <_strtol_l.constprop.0+0x56>
 8010b0e:	782c      	ldrb	r4, [r5, #0]
 8010b10:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8010b14:	2c58      	cmp	r4, #88	; 0x58
 8010b16:	d14d      	bne.n	8010bb4 <_strtol_l.constprop.0+0xec>
 8010b18:	786c      	ldrb	r4, [r5, #1]
 8010b1a:	2310      	movs	r3, #16
 8010b1c:	3502      	adds	r5, #2
 8010b1e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8010b22:	f108 38ff 	add.w	r8, r8, #4294967295
 8010b26:	f04f 0c00 	mov.w	ip, #0
 8010b2a:	fbb8 f9f3 	udiv	r9, r8, r3
 8010b2e:	4666      	mov	r6, ip
 8010b30:	fb03 8a19 	mls	sl, r3, r9, r8
 8010b34:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8010b38:	f1be 0f09 	cmp.w	lr, #9
 8010b3c:	d816      	bhi.n	8010b6c <_strtol_l.constprop.0+0xa4>
 8010b3e:	4674      	mov	r4, lr
 8010b40:	42a3      	cmp	r3, r4
 8010b42:	dd24      	ble.n	8010b8e <_strtol_l.constprop.0+0xc6>
 8010b44:	f1bc 0f00 	cmp.w	ip, #0
 8010b48:	db1e      	blt.n	8010b88 <_strtol_l.constprop.0+0xc0>
 8010b4a:	45b1      	cmp	r9, r6
 8010b4c:	d31c      	bcc.n	8010b88 <_strtol_l.constprop.0+0xc0>
 8010b4e:	d101      	bne.n	8010b54 <_strtol_l.constprop.0+0x8c>
 8010b50:	45a2      	cmp	sl, r4
 8010b52:	db19      	blt.n	8010b88 <_strtol_l.constprop.0+0xc0>
 8010b54:	fb06 4603 	mla	r6, r6, r3, r4
 8010b58:	f04f 0c01 	mov.w	ip, #1
 8010b5c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010b60:	e7e8      	b.n	8010b34 <_strtol_l.constprop.0+0x6c>
 8010b62:	2c2b      	cmp	r4, #43	; 0x2b
 8010b64:	bf04      	itt	eq
 8010b66:	782c      	ldrbeq	r4, [r5, #0]
 8010b68:	1cb5      	addeq	r5, r6, #2
 8010b6a:	e7ca      	b.n	8010b02 <_strtol_l.constprop.0+0x3a>
 8010b6c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8010b70:	f1be 0f19 	cmp.w	lr, #25
 8010b74:	d801      	bhi.n	8010b7a <_strtol_l.constprop.0+0xb2>
 8010b76:	3c37      	subs	r4, #55	; 0x37
 8010b78:	e7e2      	b.n	8010b40 <_strtol_l.constprop.0+0x78>
 8010b7a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8010b7e:	f1be 0f19 	cmp.w	lr, #25
 8010b82:	d804      	bhi.n	8010b8e <_strtol_l.constprop.0+0xc6>
 8010b84:	3c57      	subs	r4, #87	; 0x57
 8010b86:	e7db      	b.n	8010b40 <_strtol_l.constprop.0+0x78>
 8010b88:	f04f 3cff 	mov.w	ip, #4294967295
 8010b8c:	e7e6      	b.n	8010b5c <_strtol_l.constprop.0+0x94>
 8010b8e:	f1bc 0f00 	cmp.w	ip, #0
 8010b92:	da05      	bge.n	8010ba0 <_strtol_l.constprop.0+0xd8>
 8010b94:	2322      	movs	r3, #34	; 0x22
 8010b96:	6003      	str	r3, [r0, #0]
 8010b98:	4646      	mov	r6, r8
 8010b9a:	b942      	cbnz	r2, 8010bae <_strtol_l.constprop.0+0xe6>
 8010b9c:	4630      	mov	r0, r6
 8010b9e:	e79e      	b.n	8010ade <_strtol_l.constprop.0+0x16>
 8010ba0:	b107      	cbz	r7, 8010ba4 <_strtol_l.constprop.0+0xdc>
 8010ba2:	4276      	negs	r6, r6
 8010ba4:	2a00      	cmp	r2, #0
 8010ba6:	d0f9      	beq.n	8010b9c <_strtol_l.constprop.0+0xd4>
 8010ba8:	f1bc 0f00 	cmp.w	ip, #0
 8010bac:	d000      	beq.n	8010bb0 <_strtol_l.constprop.0+0xe8>
 8010bae:	1e69      	subs	r1, r5, #1
 8010bb0:	6011      	str	r1, [r2, #0]
 8010bb2:	e7f3      	b.n	8010b9c <_strtol_l.constprop.0+0xd4>
 8010bb4:	2430      	movs	r4, #48	; 0x30
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d1b1      	bne.n	8010b1e <_strtol_l.constprop.0+0x56>
 8010bba:	2308      	movs	r3, #8
 8010bbc:	e7af      	b.n	8010b1e <_strtol_l.constprop.0+0x56>
 8010bbe:	2c30      	cmp	r4, #48	; 0x30
 8010bc0:	d0a5      	beq.n	8010b0e <_strtol_l.constprop.0+0x46>
 8010bc2:	230a      	movs	r3, #10
 8010bc4:	e7ab      	b.n	8010b1e <_strtol_l.constprop.0+0x56>
 8010bc6:	bf00      	nop
 8010bc8:	08014731 	.word	0x08014731

08010bcc <_strtol_r>:
 8010bcc:	f7ff bf7c 	b.w	8010ac8 <_strtol_l.constprop.0>

08010bd0 <_write_r>:
 8010bd0:	b538      	push	{r3, r4, r5, lr}
 8010bd2:	4d07      	ldr	r5, [pc, #28]	; (8010bf0 <_write_r+0x20>)
 8010bd4:	4604      	mov	r4, r0
 8010bd6:	4608      	mov	r0, r1
 8010bd8:	4611      	mov	r1, r2
 8010bda:	2200      	movs	r2, #0
 8010bdc:	602a      	str	r2, [r5, #0]
 8010bde:	461a      	mov	r2, r3
 8010be0:	f7f1 fe4b 	bl	800287a <_write>
 8010be4:	1c43      	adds	r3, r0, #1
 8010be6:	d102      	bne.n	8010bee <_write_r+0x1e>
 8010be8:	682b      	ldr	r3, [r5, #0]
 8010bea:	b103      	cbz	r3, 8010bee <_write_r+0x1e>
 8010bec:	6023      	str	r3, [r4, #0]
 8010bee:	bd38      	pop	{r3, r4, r5, pc}
 8010bf0:	20000770 	.word	0x20000770

08010bf4 <_close_r>:
 8010bf4:	b538      	push	{r3, r4, r5, lr}
 8010bf6:	4d06      	ldr	r5, [pc, #24]	; (8010c10 <_close_r+0x1c>)
 8010bf8:	2300      	movs	r3, #0
 8010bfa:	4604      	mov	r4, r0
 8010bfc:	4608      	mov	r0, r1
 8010bfe:	602b      	str	r3, [r5, #0]
 8010c00:	f7f1 fe57 	bl	80028b2 <_close>
 8010c04:	1c43      	adds	r3, r0, #1
 8010c06:	d102      	bne.n	8010c0e <_close_r+0x1a>
 8010c08:	682b      	ldr	r3, [r5, #0]
 8010c0a:	b103      	cbz	r3, 8010c0e <_close_r+0x1a>
 8010c0c:	6023      	str	r3, [r4, #0]
 8010c0e:	bd38      	pop	{r3, r4, r5, pc}
 8010c10:	20000770 	.word	0x20000770

08010c14 <quorem>:
 8010c14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c18:	6903      	ldr	r3, [r0, #16]
 8010c1a:	690c      	ldr	r4, [r1, #16]
 8010c1c:	42a3      	cmp	r3, r4
 8010c1e:	4607      	mov	r7, r0
 8010c20:	f2c0 8081 	blt.w	8010d26 <quorem+0x112>
 8010c24:	3c01      	subs	r4, #1
 8010c26:	f101 0814 	add.w	r8, r1, #20
 8010c2a:	f100 0514 	add.w	r5, r0, #20
 8010c2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010c32:	9301      	str	r3, [sp, #4]
 8010c34:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010c38:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010c3c:	3301      	adds	r3, #1
 8010c3e:	429a      	cmp	r2, r3
 8010c40:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010c44:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010c48:	fbb2 f6f3 	udiv	r6, r2, r3
 8010c4c:	d331      	bcc.n	8010cb2 <quorem+0x9e>
 8010c4e:	f04f 0e00 	mov.w	lr, #0
 8010c52:	4640      	mov	r0, r8
 8010c54:	46ac      	mov	ip, r5
 8010c56:	46f2      	mov	sl, lr
 8010c58:	f850 2b04 	ldr.w	r2, [r0], #4
 8010c5c:	b293      	uxth	r3, r2
 8010c5e:	fb06 e303 	mla	r3, r6, r3, lr
 8010c62:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010c66:	b29b      	uxth	r3, r3
 8010c68:	ebaa 0303 	sub.w	r3, sl, r3
 8010c6c:	f8dc a000 	ldr.w	sl, [ip]
 8010c70:	0c12      	lsrs	r2, r2, #16
 8010c72:	fa13 f38a 	uxtah	r3, r3, sl
 8010c76:	fb06 e202 	mla	r2, r6, r2, lr
 8010c7a:	9300      	str	r3, [sp, #0]
 8010c7c:	9b00      	ldr	r3, [sp, #0]
 8010c7e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010c82:	b292      	uxth	r2, r2
 8010c84:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010c88:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010c8c:	f8bd 3000 	ldrh.w	r3, [sp]
 8010c90:	4581      	cmp	r9, r0
 8010c92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010c96:	f84c 3b04 	str.w	r3, [ip], #4
 8010c9a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010c9e:	d2db      	bcs.n	8010c58 <quorem+0x44>
 8010ca0:	f855 300b 	ldr.w	r3, [r5, fp]
 8010ca4:	b92b      	cbnz	r3, 8010cb2 <quorem+0x9e>
 8010ca6:	9b01      	ldr	r3, [sp, #4]
 8010ca8:	3b04      	subs	r3, #4
 8010caa:	429d      	cmp	r5, r3
 8010cac:	461a      	mov	r2, r3
 8010cae:	d32e      	bcc.n	8010d0e <quorem+0xfa>
 8010cb0:	613c      	str	r4, [r7, #16]
 8010cb2:	4638      	mov	r0, r7
 8010cb4:	f001 fc96 	bl	80125e4 <__mcmp>
 8010cb8:	2800      	cmp	r0, #0
 8010cba:	db24      	blt.n	8010d06 <quorem+0xf2>
 8010cbc:	3601      	adds	r6, #1
 8010cbe:	4628      	mov	r0, r5
 8010cc0:	f04f 0c00 	mov.w	ip, #0
 8010cc4:	f858 2b04 	ldr.w	r2, [r8], #4
 8010cc8:	f8d0 e000 	ldr.w	lr, [r0]
 8010ccc:	b293      	uxth	r3, r2
 8010cce:	ebac 0303 	sub.w	r3, ip, r3
 8010cd2:	0c12      	lsrs	r2, r2, #16
 8010cd4:	fa13 f38e 	uxtah	r3, r3, lr
 8010cd8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010cdc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010ce0:	b29b      	uxth	r3, r3
 8010ce2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010ce6:	45c1      	cmp	r9, r8
 8010ce8:	f840 3b04 	str.w	r3, [r0], #4
 8010cec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010cf0:	d2e8      	bcs.n	8010cc4 <quorem+0xb0>
 8010cf2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010cf6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010cfa:	b922      	cbnz	r2, 8010d06 <quorem+0xf2>
 8010cfc:	3b04      	subs	r3, #4
 8010cfe:	429d      	cmp	r5, r3
 8010d00:	461a      	mov	r2, r3
 8010d02:	d30a      	bcc.n	8010d1a <quorem+0x106>
 8010d04:	613c      	str	r4, [r7, #16]
 8010d06:	4630      	mov	r0, r6
 8010d08:	b003      	add	sp, #12
 8010d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d0e:	6812      	ldr	r2, [r2, #0]
 8010d10:	3b04      	subs	r3, #4
 8010d12:	2a00      	cmp	r2, #0
 8010d14:	d1cc      	bne.n	8010cb0 <quorem+0x9c>
 8010d16:	3c01      	subs	r4, #1
 8010d18:	e7c7      	b.n	8010caa <quorem+0x96>
 8010d1a:	6812      	ldr	r2, [r2, #0]
 8010d1c:	3b04      	subs	r3, #4
 8010d1e:	2a00      	cmp	r2, #0
 8010d20:	d1f0      	bne.n	8010d04 <quorem+0xf0>
 8010d22:	3c01      	subs	r4, #1
 8010d24:	e7eb      	b.n	8010cfe <quorem+0xea>
 8010d26:	2000      	movs	r0, #0
 8010d28:	e7ee      	b.n	8010d08 <quorem+0xf4>
 8010d2a:	0000      	movs	r0, r0
 8010d2c:	0000      	movs	r0, r0
	...

08010d30 <_dtoa_r>:
 8010d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d34:	ed2d 8b04 	vpush	{d8-d9}
 8010d38:	ec57 6b10 	vmov	r6, r7, d0
 8010d3c:	b093      	sub	sp, #76	; 0x4c
 8010d3e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010d40:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010d44:	9106      	str	r1, [sp, #24]
 8010d46:	ee10 aa10 	vmov	sl, s0
 8010d4a:	4604      	mov	r4, r0
 8010d4c:	9209      	str	r2, [sp, #36]	; 0x24
 8010d4e:	930c      	str	r3, [sp, #48]	; 0x30
 8010d50:	46bb      	mov	fp, r7
 8010d52:	b975      	cbnz	r5, 8010d72 <_dtoa_r+0x42>
 8010d54:	2010      	movs	r0, #16
 8010d56:	f001 f95f 	bl	8012018 <malloc>
 8010d5a:	4602      	mov	r2, r0
 8010d5c:	6260      	str	r0, [r4, #36]	; 0x24
 8010d5e:	b920      	cbnz	r0, 8010d6a <_dtoa_r+0x3a>
 8010d60:	4ba7      	ldr	r3, [pc, #668]	; (8011000 <_dtoa_r+0x2d0>)
 8010d62:	21ea      	movs	r1, #234	; 0xea
 8010d64:	48a7      	ldr	r0, [pc, #668]	; (8011004 <_dtoa_r+0x2d4>)
 8010d66:	f002 fcc7 	bl	80136f8 <__assert_func>
 8010d6a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010d6e:	6005      	str	r5, [r0, #0]
 8010d70:	60c5      	str	r5, [r0, #12]
 8010d72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010d74:	6819      	ldr	r1, [r3, #0]
 8010d76:	b151      	cbz	r1, 8010d8e <_dtoa_r+0x5e>
 8010d78:	685a      	ldr	r2, [r3, #4]
 8010d7a:	604a      	str	r2, [r1, #4]
 8010d7c:	2301      	movs	r3, #1
 8010d7e:	4093      	lsls	r3, r2
 8010d80:	608b      	str	r3, [r1, #8]
 8010d82:	4620      	mov	r0, r4
 8010d84:	f001 f9a2 	bl	80120cc <_Bfree>
 8010d88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010d8a:	2200      	movs	r2, #0
 8010d8c:	601a      	str	r2, [r3, #0]
 8010d8e:	1e3b      	subs	r3, r7, #0
 8010d90:	bfaa      	itet	ge
 8010d92:	2300      	movge	r3, #0
 8010d94:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8010d98:	f8c8 3000 	strge.w	r3, [r8]
 8010d9c:	4b9a      	ldr	r3, [pc, #616]	; (8011008 <_dtoa_r+0x2d8>)
 8010d9e:	bfbc      	itt	lt
 8010da0:	2201      	movlt	r2, #1
 8010da2:	f8c8 2000 	strlt.w	r2, [r8]
 8010da6:	ea33 030b 	bics.w	r3, r3, fp
 8010daa:	d11b      	bne.n	8010de4 <_dtoa_r+0xb4>
 8010dac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010dae:	f242 730f 	movw	r3, #9999	; 0x270f
 8010db2:	6013      	str	r3, [r2, #0]
 8010db4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010db8:	4333      	orrs	r3, r6
 8010dba:	f000 8592 	beq.w	80118e2 <_dtoa_r+0xbb2>
 8010dbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010dc0:	b963      	cbnz	r3, 8010ddc <_dtoa_r+0xac>
 8010dc2:	4b92      	ldr	r3, [pc, #584]	; (801100c <_dtoa_r+0x2dc>)
 8010dc4:	e022      	b.n	8010e0c <_dtoa_r+0xdc>
 8010dc6:	4b92      	ldr	r3, [pc, #584]	; (8011010 <_dtoa_r+0x2e0>)
 8010dc8:	9301      	str	r3, [sp, #4]
 8010dca:	3308      	adds	r3, #8
 8010dcc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010dce:	6013      	str	r3, [r2, #0]
 8010dd0:	9801      	ldr	r0, [sp, #4]
 8010dd2:	b013      	add	sp, #76	; 0x4c
 8010dd4:	ecbd 8b04 	vpop	{d8-d9}
 8010dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ddc:	4b8b      	ldr	r3, [pc, #556]	; (801100c <_dtoa_r+0x2dc>)
 8010dde:	9301      	str	r3, [sp, #4]
 8010de0:	3303      	adds	r3, #3
 8010de2:	e7f3      	b.n	8010dcc <_dtoa_r+0x9c>
 8010de4:	2200      	movs	r2, #0
 8010de6:	2300      	movs	r3, #0
 8010de8:	4650      	mov	r0, sl
 8010dea:	4659      	mov	r1, fp
 8010dec:	f7ef fe8c 	bl	8000b08 <__aeabi_dcmpeq>
 8010df0:	ec4b ab19 	vmov	d9, sl, fp
 8010df4:	4680      	mov	r8, r0
 8010df6:	b158      	cbz	r0, 8010e10 <_dtoa_r+0xe0>
 8010df8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010dfa:	2301      	movs	r3, #1
 8010dfc:	6013      	str	r3, [r2, #0]
 8010dfe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	f000 856b 	beq.w	80118dc <_dtoa_r+0xbac>
 8010e06:	4883      	ldr	r0, [pc, #524]	; (8011014 <_dtoa_r+0x2e4>)
 8010e08:	6018      	str	r0, [r3, #0]
 8010e0a:	1e43      	subs	r3, r0, #1
 8010e0c:	9301      	str	r3, [sp, #4]
 8010e0e:	e7df      	b.n	8010dd0 <_dtoa_r+0xa0>
 8010e10:	ec4b ab10 	vmov	d0, sl, fp
 8010e14:	aa10      	add	r2, sp, #64	; 0x40
 8010e16:	a911      	add	r1, sp, #68	; 0x44
 8010e18:	4620      	mov	r0, r4
 8010e1a:	f001 fd05 	bl	8012828 <__d2b>
 8010e1e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8010e22:	ee08 0a10 	vmov	s16, r0
 8010e26:	2d00      	cmp	r5, #0
 8010e28:	f000 8084 	beq.w	8010f34 <_dtoa_r+0x204>
 8010e2c:	ee19 3a90 	vmov	r3, s19
 8010e30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010e34:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8010e38:	4656      	mov	r6, sl
 8010e3a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8010e3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010e42:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8010e46:	4b74      	ldr	r3, [pc, #464]	; (8011018 <_dtoa_r+0x2e8>)
 8010e48:	2200      	movs	r2, #0
 8010e4a:	4630      	mov	r0, r6
 8010e4c:	4639      	mov	r1, r7
 8010e4e:	f7ef fa3b 	bl	80002c8 <__aeabi_dsub>
 8010e52:	a365      	add	r3, pc, #404	; (adr r3, 8010fe8 <_dtoa_r+0x2b8>)
 8010e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e58:	f7ef fbee 	bl	8000638 <__aeabi_dmul>
 8010e5c:	a364      	add	r3, pc, #400	; (adr r3, 8010ff0 <_dtoa_r+0x2c0>)
 8010e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e62:	f7ef fa33 	bl	80002cc <__adddf3>
 8010e66:	4606      	mov	r6, r0
 8010e68:	4628      	mov	r0, r5
 8010e6a:	460f      	mov	r7, r1
 8010e6c:	f7ef fb7a 	bl	8000564 <__aeabi_i2d>
 8010e70:	a361      	add	r3, pc, #388	; (adr r3, 8010ff8 <_dtoa_r+0x2c8>)
 8010e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e76:	f7ef fbdf 	bl	8000638 <__aeabi_dmul>
 8010e7a:	4602      	mov	r2, r0
 8010e7c:	460b      	mov	r3, r1
 8010e7e:	4630      	mov	r0, r6
 8010e80:	4639      	mov	r1, r7
 8010e82:	f7ef fa23 	bl	80002cc <__adddf3>
 8010e86:	4606      	mov	r6, r0
 8010e88:	460f      	mov	r7, r1
 8010e8a:	f7ef fe85 	bl	8000b98 <__aeabi_d2iz>
 8010e8e:	2200      	movs	r2, #0
 8010e90:	9000      	str	r0, [sp, #0]
 8010e92:	2300      	movs	r3, #0
 8010e94:	4630      	mov	r0, r6
 8010e96:	4639      	mov	r1, r7
 8010e98:	f7ef fe40 	bl	8000b1c <__aeabi_dcmplt>
 8010e9c:	b150      	cbz	r0, 8010eb4 <_dtoa_r+0x184>
 8010e9e:	9800      	ldr	r0, [sp, #0]
 8010ea0:	f7ef fb60 	bl	8000564 <__aeabi_i2d>
 8010ea4:	4632      	mov	r2, r6
 8010ea6:	463b      	mov	r3, r7
 8010ea8:	f7ef fe2e 	bl	8000b08 <__aeabi_dcmpeq>
 8010eac:	b910      	cbnz	r0, 8010eb4 <_dtoa_r+0x184>
 8010eae:	9b00      	ldr	r3, [sp, #0]
 8010eb0:	3b01      	subs	r3, #1
 8010eb2:	9300      	str	r3, [sp, #0]
 8010eb4:	9b00      	ldr	r3, [sp, #0]
 8010eb6:	2b16      	cmp	r3, #22
 8010eb8:	d85a      	bhi.n	8010f70 <_dtoa_r+0x240>
 8010eba:	9a00      	ldr	r2, [sp, #0]
 8010ebc:	4b57      	ldr	r3, [pc, #348]	; (801101c <_dtoa_r+0x2ec>)
 8010ebe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ec6:	ec51 0b19 	vmov	r0, r1, d9
 8010eca:	f7ef fe27 	bl	8000b1c <__aeabi_dcmplt>
 8010ece:	2800      	cmp	r0, #0
 8010ed0:	d050      	beq.n	8010f74 <_dtoa_r+0x244>
 8010ed2:	9b00      	ldr	r3, [sp, #0]
 8010ed4:	3b01      	subs	r3, #1
 8010ed6:	9300      	str	r3, [sp, #0]
 8010ed8:	2300      	movs	r3, #0
 8010eda:	930b      	str	r3, [sp, #44]	; 0x2c
 8010edc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010ede:	1b5d      	subs	r5, r3, r5
 8010ee0:	1e6b      	subs	r3, r5, #1
 8010ee2:	9305      	str	r3, [sp, #20]
 8010ee4:	bf45      	ittet	mi
 8010ee6:	f1c5 0301 	rsbmi	r3, r5, #1
 8010eea:	9304      	strmi	r3, [sp, #16]
 8010eec:	2300      	movpl	r3, #0
 8010eee:	2300      	movmi	r3, #0
 8010ef0:	bf4c      	ite	mi
 8010ef2:	9305      	strmi	r3, [sp, #20]
 8010ef4:	9304      	strpl	r3, [sp, #16]
 8010ef6:	9b00      	ldr	r3, [sp, #0]
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	db3d      	blt.n	8010f78 <_dtoa_r+0x248>
 8010efc:	9b05      	ldr	r3, [sp, #20]
 8010efe:	9a00      	ldr	r2, [sp, #0]
 8010f00:	920a      	str	r2, [sp, #40]	; 0x28
 8010f02:	4413      	add	r3, r2
 8010f04:	9305      	str	r3, [sp, #20]
 8010f06:	2300      	movs	r3, #0
 8010f08:	9307      	str	r3, [sp, #28]
 8010f0a:	9b06      	ldr	r3, [sp, #24]
 8010f0c:	2b09      	cmp	r3, #9
 8010f0e:	f200 8089 	bhi.w	8011024 <_dtoa_r+0x2f4>
 8010f12:	2b05      	cmp	r3, #5
 8010f14:	bfc4      	itt	gt
 8010f16:	3b04      	subgt	r3, #4
 8010f18:	9306      	strgt	r3, [sp, #24]
 8010f1a:	9b06      	ldr	r3, [sp, #24]
 8010f1c:	f1a3 0302 	sub.w	r3, r3, #2
 8010f20:	bfcc      	ite	gt
 8010f22:	2500      	movgt	r5, #0
 8010f24:	2501      	movle	r5, #1
 8010f26:	2b03      	cmp	r3, #3
 8010f28:	f200 8087 	bhi.w	801103a <_dtoa_r+0x30a>
 8010f2c:	e8df f003 	tbb	[pc, r3]
 8010f30:	59383a2d 	.word	0x59383a2d
 8010f34:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010f38:	441d      	add	r5, r3
 8010f3a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010f3e:	2b20      	cmp	r3, #32
 8010f40:	bfc1      	itttt	gt
 8010f42:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010f46:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8010f4a:	fa0b f303 	lslgt.w	r3, fp, r3
 8010f4e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010f52:	bfda      	itte	le
 8010f54:	f1c3 0320 	rsble	r3, r3, #32
 8010f58:	fa06 f003 	lslle.w	r0, r6, r3
 8010f5c:	4318      	orrgt	r0, r3
 8010f5e:	f7ef faf1 	bl	8000544 <__aeabi_ui2d>
 8010f62:	2301      	movs	r3, #1
 8010f64:	4606      	mov	r6, r0
 8010f66:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8010f6a:	3d01      	subs	r5, #1
 8010f6c:	930e      	str	r3, [sp, #56]	; 0x38
 8010f6e:	e76a      	b.n	8010e46 <_dtoa_r+0x116>
 8010f70:	2301      	movs	r3, #1
 8010f72:	e7b2      	b.n	8010eda <_dtoa_r+0x1aa>
 8010f74:	900b      	str	r0, [sp, #44]	; 0x2c
 8010f76:	e7b1      	b.n	8010edc <_dtoa_r+0x1ac>
 8010f78:	9b04      	ldr	r3, [sp, #16]
 8010f7a:	9a00      	ldr	r2, [sp, #0]
 8010f7c:	1a9b      	subs	r3, r3, r2
 8010f7e:	9304      	str	r3, [sp, #16]
 8010f80:	4253      	negs	r3, r2
 8010f82:	9307      	str	r3, [sp, #28]
 8010f84:	2300      	movs	r3, #0
 8010f86:	930a      	str	r3, [sp, #40]	; 0x28
 8010f88:	e7bf      	b.n	8010f0a <_dtoa_r+0x1da>
 8010f8a:	2300      	movs	r3, #0
 8010f8c:	9308      	str	r3, [sp, #32]
 8010f8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	dc55      	bgt.n	8011040 <_dtoa_r+0x310>
 8010f94:	2301      	movs	r3, #1
 8010f96:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010f9a:	461a      	mov	r2, r3
 8010f9c:	9209      	str	r2, [sp, #36]	; 0x24
 8010f9e:	e00c      	b.n	8010fba <_dtoa_r+0x28a>
 8010fa0:	2301      	movs	r3, #1
 8010fa2:	e7f3      	b.n	8010f8c <_dtoa_r+0x25c>
 8010fa4:	2300      	movs	r3, #0
 8010fa6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010fa8:	9308      	str	r3, [sp, #32]
 8010faa:	9b00      	ldr	r3, [sp, #0]
 8010fac:	4413      	add	r3, r2
 8010fae:	9302      	str	r3, [sp, #8]
 8010fb0:	3301      	adds	r3, #1
 8010fb2:	2b01      	cmp	r3, #1
 8010fb4:	9303      	str	r3, [sp, #12]
 8010fb6:	bfb8      	it	lt
 8010fb8:	2301      	movlt	r3, #1
 8010fba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010fbc:	2200      	movs	r2, #0
 8010fbe:	6042      	str	r2, [r0, #4]
 8010fc0:	2204      	movs	r2, #4
 8010fc2:	f102 0614 	add.w	r6, r2, #20
 8010fc6:	429e      	cmp	r6, r3
 8010fc8:	6841      	ldr	r1, [r0, #4]
 8010fca:	d93d      	bls.n	8011048 <_dtoa_r+0x318>
 8010fcc:	4620      	mov	r0, r4
 8010fce:	f001 f83d 	bl	801204c <_Balloc>
 8010fd2:	9001      	str	r0, [sp, #4]
 8010fd4:	2800      	cmp	r0, #0
 8010fd6:	d13b      	bne.n	8011050 <_dtoa_r+0x320>
 8010fd8:	4b11      	ldr	r3, [pc, #68]	; (8011020 <_dtoa_r+0x2f0>)
 8010fda:	4602      	mov	r2, r0
 8010fdc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010fe0:	e6c0      	b.n	8010d64 <_dtoa_r+0x34>
 8010fe2:	2301      	movs	r3, #1
 8010fe4:	e7df      	b.n	8010fa6 <_dtoa_r+0x276>
 8010fe6:	bf00      	nop
 8010fe8:	636f4361 	.word	0x636f4361
 8010fec:	3fd287a7 	.word	0x3fd287a7
 8010ff0:	8b60c8b3 	.word	0x8b60c8b3
 8010ff4:	3fc68a28 	.word	0x3fc68a28
 8010ff8:	509f79fb 	.word	0x509f79fb
 8010ffc:	3fd34413 	.word	0x3fd34413
 8011000:	0801483e 	.word	0x0801483e
 8011004:	08014855 	.word	0x08014855
 8011008:	7ff00000 	.word	0x7ff00000
 801100c:	0801483a 	.word	0x0801483a
 8011010:	08014831 	.word	0x08014831
 8011014:	08014aaa 	.word	0x08014aaa
 8011018:	3ff80000 	.word	0x3ff80000
 801101c:	080149c0 	.word	0x080149c0
 8011020:	080148b0 	.word	0x080148b0
 8011024:	2501      	movs	r5, #1
 8011026:	2300      	movs	r3, #0
 8011028:	9306      	str	r3, [sp, #24]
 801102a:	9508      	str	r5, [sp, #32]
 801102c:	f04f 33ff 	mov.w	r3, #4294967295
 8011030:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011034:	2200      	movs	r2, #0
 8011036:	2312      	movs	r3, #18
 8011038:	e7b0      	b.n	8010f9c <_dtoa_r+0x26c>
 801103a:	2301      	movs	r3, #1
 801103c:	9308      	str	r3, [sp, #32]
 801103e:	e7f5      	b.n	801102c <_dtoa_r+0x2fc>
 8011040:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011042:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011046:	e7b8      	b.n	8010fba <_dtoa_r+0x28a>
 8011048:	3101      	adds	r1, #1
 801104a:	6041      	str	r1, [r0, #4]
 801104c:	0052      	lsls	r2, r2, #1
 801104e:	e7b8      	b.n	8010fc2 <_dtoa_r+0x292>
 8011050:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011052:	9a01      	ldr	r2, [sp, #4]
 8011054:	601a      	str	r2, [r3, #0]
 8011056:	9b03      	ldr	r3, [sp, #12]
 8011058:	2b0e      	cmp	r3, #14
 801105a:	f200 809d 	bhi.w	8011198 <_dtoa_r+0x468>
 801105e:	2d00      	cmp	r5, #0
 8011060:	f000 809a 	beq.w	8011198 <_dtoa_r+0x468>
 8011064:	9b00      	ldr	r3, [sp, #0]
 8011066:	2b00      	cmp	r3, #0
 8011068:	dd32      	ble.n	80110d0 <_dtoa_r+0x3a0>
 801106a:	4ab7      	ldr	r2, [pc, #732]	; (8011348 <_dtoa_r+0x618>)
 801106c:	f003 030f 	and.w	r3, r3, #15
 8011070:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011074:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011078:	9b00      	ldr	r3, [sp, #0]
 801107a:	05d8      	lsls	r0, r3, #23
 801107c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8011080:	d516      	bpl.n	80110b0 <_dtoa_r+0x380>
 8011082:	4bb2      	ldr	r3, [pc, #712]	; (801134c <_dtoa_r+0x61c>)
 8011084:	ec51 0b19 	vmov	r0, r1, d9
 8011088:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801108c:	f7ef fbfe 	bl	800088c <__aeabi_ddiv>
 8011090:	f007 070f 	and.w	r7, r7, #15
 8011094:	4682      	mov	sl, r0
 8011096:	468b      	mov	fp, r1
 8011098:	2503      	movs	r5, #3
 801109a:	4eac      	ldr	r6, [pc, #688]	; (801134c <_dtoa_r+0x61c>)
 801109c:	b957      	cbnz	r7, 80110b4 <_dtoa_r+0x384>
 801109e:	4642      	mov	r2, r8
 80110a0:	464b      	mov	r3, r9
 80110a2:	4650      	mov	r0, sl
 80110a4:	4659      	mov	r1, fp
 80110a6:	f7ef fbf1 	bl	800088c <__aeabi_ddiv>
 80110aa:	4682      	mov	sl, r0
 80110ac:	468b      	mov	fp, r1
 80110ae:	e028      	b.n	8011102 <_dtoa_r+0x3d2>
 80110b0:	2502      	movs	r5, #2
 80110b2:	e7f2      	b.n	801109a <_dtoa_r+0x36a>
 80110b4:	07f9      	lsls	r1, r7, #31
 80110b6:	d508      	bpl.n	80110ca <_dtoa_r+0x39a>
 80110b8:	4640      	mov	r0, r8
 80110ba:	4649      	mov	r1, r9
 80110bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80110c0:	f7ef faba 	bl	8000638 <__aeabi_dmul>
 80110c4:	3501      	adds	r5, #1
 80110c6:	4680      	mov	r8, r0
 80110c8:	4689      	mov	r9, r1
 80110ca:	107f      	asrs	r7, r7, #1
 80110cc:	3608      	adds	r6, #8
 80110ce:	e7e5      	b.n	801109c <_dtoa_r+0x36c>
 80110d0:	f000 809b 	beq.w	801120a <_dtoa_r+0x4da>
 80110d4:	9b00      	ldr	r3, [sp, #0]
 80110d6:	4f9d      	ldr	r7, [pc, #628]	; (801134c <_dtoa_r+0x61c>)
 80110d8:	425e      	negs	r6, r3
 80110da:	4b9b      	ldr	r3, [pc, #620]	; (8011348 <_dtoa_r+0x618>)
 80110dc:	f006 020f 	and.w	r2, r6, #15
 80110e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80110e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110e8:	ec51 0b19 	vmov	r0, r1, d9
 80110ec:	f7ef faa4 	bl	8000638 <__aeabi_dmul>
 80110f0:	1136      	asrs	r6, r6, #4
 80110f2:	4682      	mov	sl, r0
 80110f4:	468b      	mov	fp, r1
 80110f6:	2300      	movs	r3, #0
 80110f8:	2502      	movs	r5, #2
 80110fa:	2e00      	cmp	r6, #0
 80110fc:	d17a      	bne.n	80111f4 <_dtoa_r+0x4c4>
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d1d3      	bne.n	80110aa <_dtoa_r+0x37a>
 8011102:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011104:	2b00      	cmp	r3, #0
 8011106:	f000 8082 	beq.w	801120e <_dtoa_r+0x4de>
 801110a:	4b91      	ldr	r3, [pc, #580]	; (8011350 <_dtoa_r+0x620>)
 801110c:	2200      	movs	r2, #0
 801110e:	4650      	mov	r0, sl
 8011110:	4659      	mov	r1, fp
 8011112:	f7ef fd03 	bl	8000b1c <__aeabi_dcmplt>
 8011116:	2800      	cmp	r0, #0
 8011118:	d079      	beq.n	801120e <_dtoa_r+0x4de>
 801111a:	9b03      	ldr	r3, [sp, #12]
 801111c:	2b00      	cmp	r3, #0
 801111e:	d076      	beq.n	801120e <_dtoa_r+0x4de>
 8011120:	9b02      	ldr	r3, [sp, #8]
 8011122:	2b00      	cmp	r3, #0
 8011124:	dd36      	ble.n	8011194 <_dtoa_r+0x464>
 8011126:	9b00      	ldr	r3, [sp, #0]
 8011128:	4650      	mov	r0, sl
 801112a:	4659      	mov	r1, fp
 801112c:	1e5f      	subs	r7, r3, #1
 801112e:	2200      	movs	r2, #0
 8011130:	4b88      	ldr	r3, [pc, #544]	; (8011354 <_dtoa_r+0x624>)
 8011132:	f7ef fa81 	bl	8000638 <__aeabi_dmul>
 8011136:	9e02      	ldr	r6, [sp, #8]
 8011138:	4682      	mov	sl, r0
 801113a:	468b      	mov	fp, r1
 801113c:	3501      	adds	r5, #1
 801113e:	4628      	mov	r0, r5
 8011140:	f7ef fa10 	bl	8000564 <__aeabi_i2d>
 8011144:	4652      	mov	r2, sl
 8011146:	465b      	mov	r3, fp
 8011148:	f7ef fa76 	bl	8000638 <__aeabi_dmul>
 801114c:	4b82      	ldr	r3, [pc, #520]	; (8011358 <_dtoa_r+0x628>)
 801114e:	2200      	movs	r2, #0
 8011150:	f7ef f8bc 	bl	80002cc <__adddf3>
 8011154:	46d0      	mov	r8, sl
 8011156:	46d9      	mov	r9, fp
 8011158:	4682      	mov	sl, r0
 801115a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801115e:	2e00      	cmp	r6, #0
 8011160:	d158      	bne.n	8011214 <_dtoa_r+0x4e4>
 8011162:	4b7e      	ldr	r3, [pc, #504]	; (801135c <_dtoa_r+0x62c>)
 8011164:	2200      	movs	r2, #0
 8011166:	4640      	mov	r0, r8
 8011168:	4649      	mov	r1, r9
 801116a:	f7ef f8ad 	bl	80002c8 <__aeabi_dsub>
 801116e:	4652      	mov	r2, sl
 8011170:	465b      	mov	r3, fp
 8011172:	4680      	mov	r8, r0
 8011174:	4689      	mov	r9, r1
 8011176:	f7ef fcef 	bl	8000b58 <__aeabi_dcmpgt>
 801117a:	2800      	cmp	r0, #0
 801117c:	f040 8295 	bne.w	80116aa <_dtoa_r+0x97a>
 8011180:	4652      	mov	r2, sl
 8011182:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8011186:	4640      	mov	r0, r8
 8011188:	4649      	mov	r1, r9
 801118a:	f7ef fcc7 	bl	8000b1c <__aeabi_dcmplt>
 801118e:	2800      	cmp	r0, #0
 8011190:	f040 8289 	bne.w	80116a6 <_dtoa_r+0x976>
 8011194:	ec5b ab19 	vmov	sl, fp, d9
 8011198:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801119a:	2b00      	cmp	r3, #0
 801119c:	f2c0 8148 	blt.w	8011430 <_dtoa_r+0x700>
 80111a0:	9a00      	ldr	r2, [sp, #0]
 80111a2:	2a0e      	cmp	r2, #14
 80111a4:	f300 8144 	bgt.w	8011430 <_dtoa_r+0x700>
 80111a8:	4b67      	ldr	r3, [pc, #412]	; (8011348 <_dtoa_r+0x618>)
 80111aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80111ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 80111b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	f280 80d5 	bge.w	8011364 <_dtoa_r+0x634>
 80111ba:	9b03      	ldr	r3, [sp, #12]
 80111bc:	2b00      	cmp	r3, #0
 80111be:	f300 80d1 	bgt.w	8011364 <_dtoa_r+0x634>
 80111c2:	f040 826f 	bne.w	80116a4 <_dtoa_r+0x974>
 80111c6:	4b65      	ldr	r3, [pc, #404]	; (801135c <_dtoa_r+0x62c>)
 80111c8:	2200      	movs	r2, #0
 80111ca:	4640      	mov	r0, r8
 80111cc:	4649      	mov	r1, r9
 80111ce:	f7ef fa33 	bl	8000638 <__aeabi_dmul>
 80111d2:	4652      	mov	r2, sl
 80111d4:	465b      	mov	r3, fp
 80111d6:	f7ef fcb5 	bl	8000b44 <__aeabi_dcmpge>
 80111da:	9e03      	ldr	r6, [sp, #12]
 80111dc:	4637      	mov	r7, r6
 80111de:	2800      	cmp	r0, #0
 80111e0:	f040 8245 	bne.w	801166e <_dtoa_r+0x93e>
 80111e4:	9d01      	ldr	r5, [sp, #4]
 80111e6:	2331      	movs	r3, #49	; 0x31
 80111e8:	f805 3b01 	strb.w	r3, [r5], #1
 80111ec:	9b00      	ldr	r3, [sp, #0]
 80111ee:	3301      	adds	r3, #1
 80111f0:	9300      	str	r3, [sp, #0]
 80111f2:	e240      	b.n	8011676 <_dtoa_r+0x946>
 80111f4:	07f2      	lsls	r2, r6, #31
 80111f6:	d505      	bpl.n	8011204 <_dtoa_r+0x4d4>
 80111f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80111fc:	f7ef fa1c 	bl	8000638 <__aeabi_dmul>
 8011200:	3501      	adds	r5, #1
 8011202:	2301      	movs	r3, #1
 8011204:	1076      	asrs	r6, r6, #1
 8011206:	3708      	adds	r7, #8
 8011208:	e777      	b.n	80110fa <_dtoa_r+0x3ca>
 801120a:	2502      	movs	r5, #2
 801120c:	e779      	b.n	8011102 <_dtoa_r+0x3d2>
 801120e:	9f00      	ldr	r7, [sp, #0]
 8011210:	9e03      	ldr	r6, [sp, #12]
 8011212:	e794      	b.n	801113e <_dtoa_r+0x40e>
 8011214:	9901      	ldr	r1, [sp, #4]
 8011216:	4b4c      	ldr	r3, [pc, #304]	; (8011348 <_dtoa_r+0x618>)
 8011218:	4431      	add	r1, r6
 801121a:	910d      	str	r1, [sp, #52]	; 0x34
 801121c:	9908      	ldr	r1, [sp, #32]
 801121e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8011222:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011226:	2900      	cmp	r1, #0
 8011228:	d043      	beq.n	80112b2 <_dtoa_r+0x582>
 801122a:	494d      	ldr	r1, [pc, #308]	; (8011360 <_dtoa_r+0x630>)
 801122c:	2000      	movs	r0, #0
 801122e:	f7ef fb2d 	bl	800088c <__aeabi_ddiv>
 8011232:	4652      	mov	r2, sl
 8011234:	465b      	mov	r3, fp
 8011236:	f7ef f847 	bl	80002c8 <__aeabi_dsub>
 801123a:	9d01      	ldr	r5, [sp, #4]
 801123c:	4682      	mov	sl, r0
 801123e:	468b      	mov	fp, r1
 8011240:	4649      	mov	r1, r9
 8011242:	4640      	mov	r0, r8
 8011244:	f7ef fca8 	bl	8000b98 <__aeabi_d2iz>
 8011248:	4606      	mov	r6, r0
 801124a:	f7ef f98b 	bl	8000564 <__aeabi_i2d>
 801124e:	4602      	mov	r2, r0
 8011250:	460b      	mov	r3, r1
 8011252:	4640      	mov	r0, r8
 8011254:	4649      	mov	r1, r9
 8011256:	f7ef f837 	bl	80002c8 <__aeabi_dsub>
 801125a:	3630      	adds	r6, #48	; 0x30
 801125c:	f805 6b01 	strb.w	r6, [r5], #1
 8011260:	4652      	mov	r2, sl
 8011262:	465b      	mov	r3, fp
 8011264:	4680      	mov	r8, r0
 8011266:	4689      	mov	r9, r1
 8011268:	f7ef fc58 	bl	8000b1c <__aeabi_dcmplt>
 801126c:	2800      	cmp	r0, #0
 801126e:	d163      	bne.n	8011338 <_dtoa_r+0x608>
 8011270:	4642      	mov	r2, r8
 8011272:	464b      	mov	r3, r9
 8011274:	4936      	ldr	r1, [pc, #216]	; (8011350 <_dtoa_r+0x620>)
 8011276:	2000      	movs	r0, #0
 8011278:	f7ef f826 	bl	80002c8 <__aeabi_dsub>
 801127c:	4652      	mov	r2, sl
 801127e:	465b      	mov	r3, fp
 8011280:	f7ef fc4c 	bl	8000b1c <__aeabi_dcmplt>
 8011284:	2800      	cmp	r0, #0
 8011286:	f040 80b5 	bne.w	80113f4 <_dtoa_r+0x6c4>
 801128a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801128c:	429d      	cmp	r5, r3
 801128e:	d081      	beq.n	8011194 <_dtoa_r+0x464>
 8011290:	4b30      	ldr	r3, [pc, #192]	; (8011354 <_dtoa_r+0x624>)
 8011292:	2200      	movs	r2, #0
 8011294:	4650      	mov	r0, sl
 8011296:	4659      	mov	r1, fp
 8011298:	f7ef f9ce 	bl	8000638 <__aeabi_dmul>
 801129c:	4b2d      	ldr	r3, [pc, #180]	; (8011354 <_dtoa_r+0x624>)
 801129e:	4682      	mov	sl, r0
 80112a0:	468b      	mov	fp, r1
 80112a2:	4640      	mov	r0, r8
 80112a4:	4649      	mov	r1, r9
 80112a6:	2200      	movs	r2, #0
 80112a8:	f7ef f9c6 	bl	8000638 <__aeabi_dmul>
 80112ac:	4680      	mov	r8, r0
 80112ae:	4689      	mov	r9, r1
 80112b0:	e7c6      	b.n	8011240 <_dtoa_r+0x510>
 80112b2:	4650      	mov	r0, sl
 80112b4:	4659      	mov	r1, fp
 80112b6:	f7ef f9bf 	bl	8000638 <__aeabi_dmul>
 80112ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80112bc:	9d01      	ldr	r5, [sp, #4]
 80112be:	930f      	str	r3, [sp, #60]	; 0x3c
 80112c0:	4682      	mov	sl, r0
 80112c2:	468b      	mov	fp, r1
 80112c4:	4649      	mov	r1, r9
 80112c6:	4640      	mov	r0, r8
 80112c8:	f7ef fc66 	bl	8000b98 <__aeabi_d2iz>
 80112cc:	4606      	mov	r6, r0
 80112ce:	f7ef f949 	bl	8000564 <__aeabi_i2d>
 80112d2:	3630      	adds	r6, #48	; 0x30
 80112d4:	4602      	mov	r2, r0
 80112d6:	460b      	mov	r3, r1
 80112d8:	4640      	mov	r0, r8
 80112da:	4649      	mov	r1, r9
 80112dc:	f7ee fff4 	bl	80002c8 <__aeabi_dsub>
 80112e0:	f805 6b01 	strb.w	r6, [r5], #1
 80112e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80112e6:	429d      	cmp	r5, r3
 80112e8:	4680      	mov	r8, r0
 80112ea:	4689      	mov	r9, r1
 80112ec:	f04f 0200 	mov.w	r2, #0
 80112f0:	d124      	bne.n	801133c <_dtoa_r+0x60c>
 80112f2:	4b1b      	ldr	r3, [pc, #108]	; (8011360 <_dtoa_r+0x630>)
 80112f4:	4650      	mov	r0, sl
 80112f6:	4659      	mov	r1, fp
 80112f8:	f7ee ffe8 	bl	80002cc <__adddf3>
 80112fc:	4602      	mov	r2, r0
 80112fe:	460b      	mov	r3, r1
 8011300:	4640      	mov	r0, r8
 8011302:	4649      	mov	r1, r9
 8011304:	f7ef fc28 	bl	8000b58 <__aeabi_dcmpgt>
 8011308:	2800      	cmp	r0, #0
 801130a:	d173      	bne.n	80113f4 <_dtoa_r+0x6c4>
 801130c:	4652      	mov	r2, sl
 801130e:	465b      	mov	r3, fp
 8011310:	4913      	ldr	r1, [pc, #76]	; (8011360 <_dtoa_r+0x630>)
 8011312:	2000      	movs	r0, #0
 8011314:	f7ee ffd8 	bl	80002c8 <__aeabi_dsub>
 8011318:	4602      	mov	r2, r0
 801131a:	460b      	mov	r3, r1
 801131c:	4640      	mov	r0, r8
 801131e:	4649      	mov	r1, r9
 8011320:	f7ef fbfc 	bl	8000b1c <__aeabi_dcmplt>
 8011324:	2800      	cmp	r0, #0
 8011326:	f43f af35 	beq.w	8011194 <_dtoa_r+0x464>
 801132a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801132c:	1e6b      	subs	r3, r5, #1
 801132e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011330:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011334:	2b30      	cmp	r3, #48	; 0x30
 8011336:	d0f8      	beq.n	801132a <_dtoa_r+0x5fa>
 8011338:	9700      	str	r7, [sp, #0]
 801133a:	e049      	b.n	80113d0 <_dtoa_r+0x6a0>
 801133c:	4b05      	ldr	r3, [pc, #20]	; (8011354 <_dtoa_r+0x624>)
 801133e:	f7ef f97b 	bl	8000638 <__aeabi_dmul>
 8011342:	4680      	mov	r8, r0
 8011344:	4689      	mov	r9, r1
 8011346:	e7bd      	b.n	80112c4 <_dtoa_r+0x594>
 8011348:	080149c0 	.word	0x080149c0
 801134c:	08014998 	.word	0x08014998
 8011350:	3ff00000 	.word	0x3ff00000
 8011354:	40240000 	.word	0x40240000
 8011358:	401c0000 	.word	0x401c0000
 801135c:	40140000 	.word	0x40140000
 8011360:	3fe00000 	.word	0x3fe00000
 8011364:	9d01      	ldr	r5, [sp, #4]
 8011366:	4656      	mov	r6, sl
 8011368:	465f      	mov	r7, fp
 801136a:	4642      	mov	r2, r8
 801136c:	464b      	mov	r3, r9
 801136e:	4630      	mov	r0, r6
 8011370:	4639      	mov	r1, r7
 8011372:	f7ef fa8b 	bl	800088c <__aeabi_ddiv>
 8011376:	f7ef fc0f 	bl	8000b98 <__aeabi_d2iz>
 801137a:	4682      	mov	sl, r0
 801137c:	f7ef f8f2 	bl	8000564 <__aeabi_i2d>
 8011380:	4642      	mov	r2, r8
 8011382:	464b      	mov	r3, r9
 8011384:	f7ef f958 	bl	8000638 <__aeabi_dmul>
 8011388:	4602      	mov	r2, r0
 801138a:	460b      	mov	r3, r1
 801138c:	4630      	mov	r0, r6
 801138e:	4639      	mov	r1, r7
 8011390:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8011394:	f7ee ff98 	bl	80002c8 <__aeabi_dsub>
 8011398:	f805 6b01 	strb.w	r6, [r5], #1
 801139c:	9e01      	ldr	r6, [sp, #4]
 801139e:	9f03      	ldr	r7, [sp, #12]
 80113a0:	1bae      	subs	r6, r5, r6
 80113a2:	42b7      	cmp	r7, r6
 80113a4:	4602      	mov	r2, r0
 80113a6:	460b      	mov	r3, r1
 80113a8:	d135      	bne.n	8011416 <_dtoa_r+0x6e6>
 80113aa:	f7ee ff8f 	bl	80002cc <__adddf3>
 80113ae:	4642      	mov	r2, r8
 80113b0:	464b      	mov	r3, r9
 80113b2:	4606      	mov	r6, r0
 80113b4:	460f      	mov	r7, r1
 80113b6:	f7ef fbcf 	bl	8000b58 <__aeabi_dcmpgt>
 80113ba:	b9d0      	cbnz	r0, 80113f2 <_dtoa_r+0x6c2>
 80113bc:	4642      	mov	r2, r8
 80113be:	464b      	mov	r3, r9
 80113c0:	4630      	mov	r0, r6
 80113c2:	4639      	mov	r1, r7
 80113c4:	f7ef fba0 	bl	8000b08 <__aeabi_dcmpeq>
 80113c8:	b110      	cbz	r0, 80113d0 <_dtoa_r+0x6a0>
 80113ca:	f01a 0f01 	tst.w	sl, #1
 80113ce:	d110      	bne.n	80113f2 <_dtoa_r+0x6c2>
 80113d0:	4620      	mov	r0, r4
 80113d2:	ee18 1a10 	vmov	r1, s16
 80113d6:	f000 fe79 	bl	80120cc <_Bfree>
 80113da:	2300      	movs	r3, #0
 80113dc:	9800      	ldr	r0, [sp, #0]
 80113de:	702b      	strb	r3, [r5, #0]
 80113e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80113e2:	3001      	adds	r0, #1
 80113e4:	6018      	str	r0, [r3, #0]
 80113e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	f43f acf1 	beq.w	8010dd0 <_dtoa_r+0xa0>
 80113ee:	601d      	str	r5, [r3, #0]
 80113f0:	e4ee      	b.n	8010dd0 <_dtoa_r+0xa0>
 80113f2:	9f00      	ldr	r7, [sp, #0]
 80113f4:	462b      	mov	r3, r5
 80113f6:	461d      	mov	r5, r3
 80113f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80113fc:	2a39      	cmp	r2, #57	; 0x39
 80113fe:	d106      	bne.n	801140e <_dtoa_r+0x6de>
 8011400:	9a01      	ldr	r2, [sp, #4]
 8011402:	429a      	cmp	r2, r3
 8011404:	d1f7      	bne.n	80113f6 <_dtoa_r+0x6c6>
 8011406:	9901      	ldr	r1, [sp, #4]
 8011408:	2230      	movs	r2, #48	; 0x30
 801140a:	3701      	adds	r7, #1
 801140c:	700a      	strb	r2, [r1, #0]
 801140e:	781a      	ldrb	r2, [r3, #0]
 8011410:	3201      	adds	r2, #1
 8011412:	701a      	strb	r2, [r3, #0]
 8011414:	e790      	b.n	8011338 <_dtoa_r+0x608>
 8011416:	4ba6      	ldr	r3, [pc, #664]	; (80116b0 <_dtoa_r+0x980>)
 8011418:	2200      	movs	r2, #0
 801141a:	f7ef f90d 	bl	8000638 <__aeabi_dmul>
 801141e:	2200      	movs	r2, #0
 8011420:	2300      	movs	r3, #0
 8011422:	4606      	mov	r6, r0
 8011424:	460f      	mov	r7, r1
 8011426:	f7ef fb6f 	bl	8000b08 <__aeabi_dcmpeq>
 801142a:	2800      	cmp	r0, #0
 801142c:	d09d      	beq.n	801136a <_dtoa_r+0x63a>
 801142e:	e7cf      	b.n	80113d0 <_dtoa_r+0x6a0>
 8011430:	9a08      	ldr	r2, [sp, #32]
 8011432:	2a00      	cmp	r2, #0
 8011434:	f000 80d7 	beq.w	80115e6 <_dtoa_r+0x8b6>
 8011438:	9a06      	ldr	r2, [sp, #24]
 801143a:	2a01      	cmp	r2, #1
 801143c:	f300 80ba 	bgt.w	80115b4 <_dtoa_r+0x884>
 8011440:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011442:	2a00      	cmp	r2, #0
 8011444:	f000 80b2 	beq.w	80115ac <_dtoa_r+0x87c>
 8011448:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801144c:	9e07      	ldr	r6, [sp, #28]
 801144e:	9d04      	ldr	r5, [sp, #16]
 8011450:	9a04      	ldr	r2, [sp, #16]
 8011452:	441a      	add	r2, r3
 8011454:	9204      	str	r2, [sp, #16]
 8011456:	9a05      	ldr	r2, [sp, #20]
 8011458:	2101      	movs	r1, #1
 801145a:	441a      	add	r2, r3
 801145c:	4620      	mov	r0, r4
 801145e:	9205      	str	r2, [sp, #20]
 8011460:	f000 ff36 	bl	80122d0 <__i2b>
 8011464:	4607      	mov	r7, r0
 8011466:	2d00      	cmp	r5, #0
 8011468:	dd0c      	ble.n	8011484 <_dtoa_r+0x754>
 801146a:	9b05      	ldr	r3, [sp, #20]
 801146c:	2b00      	cmp	r3, #0
 801146e:	dd09      	ble.n	8011484 <_dtoa_r+0x754>
 8011470:	42ab      	cmp	r3, r5
 8011472:	9a04      	ldr	r2, [sp, #16]
 8011474:	bfa8      	it	ge
 8011476:	462b      	movge	r3, r5
 8011478:	1ad2      	subs	r2, r2, r3
 801147a:	9204      	str	r2, [sp, #16]
 801147c:	9a05      	ldr	r2, [sp, #20]
 801147e:	1aed      	subs	r5, r5, r3
 8011480:	1ad3      	subs	r3, r2, r3
 8011482:	9305      	str	r3, [sp, #20]
 8011484:	9b07      	ldr	r3, [sp, #28]
 8011486:	b31b      	cbz	r3, 80114d0 <_dtoa_r+0x7a0>
 8011488:	9b08      	ldr	r3, [sp, #32]
 801148a:	2b00      	cmp	r3, #0
 801148c:	f000 80af 	beq.w	80115ee <_dtoa_r+0x8be>
 8011490:	2e00      	cmp	r6, #0
 8011492:	dd13      	ble.n	80114bc <_dtoa_r+0x78c>
 8011494:	4639      	mov	r1, r7
 8011496:	4632      	mov	r2, r6
 8011498:	4620      	mov	r0, r4
 801149a:	f000 ffd9 	bl	8012450 <__pow5mult>
 801149e:	ee18 2a10 	vmov	r2, s16
 80114a2:	4601      	mov	r1, r0
 80114a4:	4607      	mov	r7, r0
 80114a6:	4620      	mov	r0, r4
 80114a8:	f000 ff28 	bl	80122fc <__multiply>
 80114ac:	ee18 1a10 	vmov	r1, s16
 80114b0:	4680      	mov	r8, r0
 80114b2:	4620      	mov	r0, r4
 80114b4:	f000 fe0a 	bl	80120cc <_Bfree>
 80114b8:	ee08 8a10 	vmov	s16, r8
 80114bc:	9b07      	ldr	r3, [sp, #28]
 80114be:	1b9a      	subs	r2, r3, r6
 80114c0:	d006      	beq.n	80114d0 <_dtoa_r+0x7a0>
 80114c2:	ee18 1a10 	vmov	r1, s16
 80114c6:	4620      	mov	r0, r4
 80114c8:	f000 ffc2 	bl	8012450 <__pow5mult>
 80114cc:	ee08 0a10 	vmov	s16, r0
 80114d0:	2101      	movs	r1, #1
 80114d2:	4620      	mov	r0, r4
 80114d4:	f000 fefc 	bl	80122d0 <__i2b>
 80114d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80114da:	2b00      	cmp	r3, #0
 80114dc:	4606      	mov	r6, r0
 80114de:	f340 8088 	ble.w	80115f2 <_dtoa_r+0x8c2>
 80114e2:	461a      	mov	r2, r3
 80114e4:	4601      	mov	r1, r0
 80114e6:	4620      	mov	r0, r4
 80114e8:	f000 ffb2 	bl	8012450 <__pow5mult>
 80114ec:	9b06      	ldr	r3, [sp, #24]
 80114ee:	2b01      	cmp	r3, #1
 80114f0:	4606      	mov	r6, r0
 80114f2:	f340 8081 	ble.w	80115f8 <_dtoa_r+0x8c8>
 80114f6:	f04f 0800 	mov.w	r8, #0
 80114fa:	6933      	ldr	r3, [r6, #16]
 80114fc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011500:	6918      	ldr	r0, [r3, #16]
 8011502:	f000 fe95 	bl	8012230 <__hi0bits>
 8011506:	f1c0 0020 	rsb	r0, r0, #32
 801150a:	9b05      	ldr	r3, [sp, #20]
 801150c:	4418      	add	r0, r3
 801150e:	f010 001f 	ands.w	r0, r0, #31
 8011512:	f000 8092 	beq.w	801163a <_dtoa_r+0x90a>
 8011516:	f1c0 0320 	rsb	r3, r0, #32
 801151a:	2b04      	cmp	r3, #4
 801151c:	f340 808a 	ble.w	8011634 <_dtoa_r+0x904>
 8011520:	f1c0 001c 	rsb	r0, r0, #28
 8011524:	9b04      	ldr	r3, [sp, #16]
 8011526:	4403      	add	r3, r0
 8011528:	9304      	str	r3, [sp, #16]
 801152a:	9b05      	ldr	r3, [sp, #20]
 801152c:	4403      	add	r3, r0
 801152e:	4405      	add	r5, r0
 8011530:	9305      	str	r3, [sp, #20]
 8011532:	9b04      	ldr	r3, [sp, #16]
 8011534:	2b00      	cmp	r3, #0
 8011536:	dd07      	ble.n	8011548 <_dtoa_r+0x818>
 8011538:	ee18 1a10 	vmov	r1, s16
 801153c:	461a      	mov	r2, r3
 801153e:	4620      	mov	r0, r4
 8011540:	f000 ffe0 	bl	8012504 <__lshift>
 8011544:	ee08 0a10 	vmov	s16, r0
 8011548:	9b05      	ldr	r3, [sp, #20]
 801154a:	2b00      	cmp	r3, #0
 801154c:	dd05      	ble.n	801155a <_dtoa_r+0x82a>
 801154e:	4631      	mov	r1, r6
 8011550:	461a      	mov	r2, r3
 8011552:	4620      	mov	r0, r4
 8011554:	f000 ffd6 	bl	8012504 <__lshift>
 8011558:	4606      	mov	r6, r0
 801155a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801155c:	2b00      	cmp	r3, #0
 801155e:	d06e      	beq.n	801163e <_dtoa_r+0x90e>
 8011560:	ee18 0a10 	vmov	r0, s16
 8011564:	4631      	mov	r1, r6
 8011566:	f001 f83d 	bl	80125e4 <__mcmp>
 801156a:	2800      	cmp	r0, #0
 801156c:	da67      	bge.n	801163e <_dtoa_r+0x90e>
 801156e:	9b00      	ldr	r3, [sp, #0]
 8011570:	3b01      	subs	r3, #1
 8011572:	ee18 1a10 	vmov	r1, s16
 8011576:	9300      	str	r3, [sp, #0]
 8011578:	220a      	movs	r2, #10
 801157a:	2300      	movs	r3, #0
 801157c:	4620      	mov	r0, r4
 801157e:	f000 fdc7 	bl	8012110 <__multadd>
 8011582:	9b08      	ldr	r3, [sp, #32]
 8011584:	ee08 0a10 	vmov	s16, r0
 8011588:	2b00      	cmp	r3, #0
 801158a:	f000 81b1 	beq.w	80118f0 <_dtoa_r+0xbc0>
 801158e:	2300      	movs	r3, #0
 8011590:	4639      	mov	r1, r7
 8011592:	220a      	movs	r2, #10
 8011594:	4620      	mov	r0, r4
 8011596:	f000 fdbb 	bl	8012110 <__multadd>
 801159a:	9b02      	ldr	r3, [sp, #8]
 801159c:	2b00      	cmp	r3, #0
 801159e:	4607      	mov	r7, r0
 80115a0:	f300 808e 	bgt.w	80116c0 <_dtoa_r+0x990>
 80115a4:	9b06      	ldr	r3, [sp, #24]
 80115a6:	2b02      	cmp	r3, #2
 80115a8:	dc51      	bgt.n	801164e <_dtoa_r+0x91e>
 80115aa:	e089      	b.n	80116c0 <_dtoa_r+0x990>
 80115ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80115ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80115b2:	e74b      	b.n	801144c <_dtoa_r+0x71c>
 80115b4:	9b03      	ldr	r3, [sp, #12]
 80115b6:	1e5e      	subs	r6, r3, #1
 80115b8:	9b07      	ldr	r3, [sp, #28]
 80115ba:	42b3      	cmp	r3, r6
 80115bc:	bfbf      	itttt	lt
 80115be:	9b07      	ldrlt	r3, [sp, #28]
 80115c0:	9607      	strlt	r6, [sp, #28]
 80115c2:	1af2      	sublt	r2, r6, r3
 80115c4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80115c6:	bfb6      	itet	lt
 80115c8:	189b      	addlt	r3, r3, r2
 80115ca:	1b9e      	subge	r6, r3, r6
 80115cc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80115ce:	9b03      	ldr	r3, [sp, #12]
 80115d0:	bfb8      	it	lt
 80115d2:	2600      	movlt	r6, #0
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	bfb7      	itett	lt
 80115d8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80115dc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80115e0:	1a9d      	sublt	r5, r3, r2
 80115e2:	2300      	movlt	r3, #0
 80115e4:	e734      	b.n	8011450 <_dtoa_r+0x720>
 80115e6:	9e07      	ldr	r6, [sp, #28]
 80115e8:	9d04      	ldr	r5, [sp, #16]
 80115ea:	9f08      	ldr	r7, [sp, #32]
 80115ec:	e73b      	b.n	8011466 <_dtoa_r+0x736>
 80115ee:	9a07      	ldr	r2, [sp, #28]
 80115f0:	e767      	b.n	80114c2 <_dtoa_r+0x792>
 80115f2:	9b06      	ldr	r3, [sp, #24]
 80115f4:	2b01      	cmp	r3, #1
 80115f6:	dc18      	bgt.n	801162a <_dtoa_r+0x8fa>
 80115f8:	f1ba 0f00 	cmp.w	sl, #0
 80115fc:	d115      	bne.n	801162a <_dtoa_r+0x8fa>
 80115fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011602:	b993      	cbnz	r3, 801162a <_dtoa_r+0x8fa>
 8011604:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011608:	0d1b      	lsrs	r3, r3, #20
 801160a:	051b      	lsls	r3, r3, #20
 801160c:	b183      	cbz	r3, 8011630 <_dtoa_r+0x900>
 801160e:	9b04      	ldr	r3, [sp, #16]
 8011610:	3301      	adds	r3, #1
 8011612:	9304      	str	r3, [sp, #16]
 8011614:	9b05      	ldr	r3, [sp, #20]
 8011616:	3301      	adds	r3, #1
 8011618:	9305      	str	r3, [sp, #20]
 801161a:	f04f 0801 	mov.w	r8, #1
 801161e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011620:	2b00      	cmp	r3, #0
 8011622:	f47f af6a 	bne.w	80114fa <_dtoa_r+0x7ca>
 8011626:	2001      	movs	r0, #1
 8011628:	e76f      	b.n	801150a <_dtoa_r+0x7da>
 801162a:	f04f 0800 	mov.w	r8, #0
 801162e:	e7f6      	b.n	801161e <_dtoa_r+0x8ee>
 8011630:	4698      	mov	r8, r3
 8011632:	e7f4      	b.n	801161e <_dtoa_r+0x8ee>
 8011634:	f43f af7d 	beq.w	8011532 <_dtoa_r+0x802>
 8011638:	4618      	mov	r0, r3
 801163a:	301c      	adds	r0, #28
 801163c:	e772      	b.n	8011524 <_dtoa_r+0x7f4>
 801163e:	9b03      	ldr	r3, [sp, #12]
 8011640:	2b00      	cmp	r3, #0
 8011642:	dc37      	bgt.n	80116b4 <_dtoa_r+0x984>
 8011644:	9b06      	ldr	r3, [sp, #24]
 8011646:	2b02      	cmp	r3, #2
 8011648:	dd34      	ble.n	80116b4 <_dtoa_r+0x984>
 801164a:	9b03      	ldr	r3, [sp, #12]
 801164c:	9302      	str	r3, [sp, #8]
 801164e:	9b02      	ldr	r3, [sp, #8]
 8011650:	b96b      	cbnz	r3, 801166e <_dtoa_r+0x93e>
 8011652:	4631      	mov	r1, r6
 8011654:	2205      	movs	r2, #5
 8011656:	4620      	mov	r0, r4
 8011658:	f000 fd5a 	bl	8012110 <__multadd>
 801165c:	4601      	mov	r1, r0
 801165e:	4606      	mov	r6, r0
 8011660:	ee18 0a10 	vmov	r0, s16
 8011664:	f000 ffbe 	bl	80125e4 <__mcmp>
 8011668:	2800      	cmp	r0, #0
 801166a:	f73f adbb 	bgt.w	80111e4 <_dtoa_r+0x4b4>
 801166e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011670:	9d01      	ldr	r5, [sp, #4]
 8011672:	43db      	mvns	r3, r3
 8011674:	9300      	str	r3, [sp, #0]
 8011676:	f04f 0800 	mov.w	r8, #0
 801167a:	4631      	mov	r1, r6
 801167c:	4620      	mov	r0, r4
 801167e:	f000 fd25 	bl	80120cc <_Bfree>
 8011682:	2f00      	cmp	r7, #0
 8011684:	f43f aea4 	beq.w	80113d0 <_dtoa_r+0x6a0>
 8011688:	f1b8 0f00 	cmp.w	r8, #0
 801168c:	d005      	beq.n	801169a <_dtoa_r+0x96a>
 801168e:	45b8      	cmp	r8, r7
 8011690:	d003      	beq.n	801169a <_dtoa_r+0x96a>
 8011692:	4641      	mov	r1, r8
 8011694:	4620      	mov	r0, r4
 8011696:	f000 fd19 	bl	80120cc <_Bfree>
 801169a:	4639      	mov	r1, r7
 801169c:	4620      	mov	r0, r4
 801169e:	f000 fd15 	bl	80120cc <_Bfree>
 80116a2:	e695      	b.n	80113d0 <_dtoa_r+0x6a0>
 80116a4:	2600      	movs	r6, #0
 80116a6:	4637      	mov	r7, r6
 80116a8:	e7e1      	b.n	801166e <_dtoa_r+0x93e>
 80116aa:	9700      	str	r7, [sp, #0]
 80116ac:	4637      	mov	r7, r6
 80116ae:	e599      	b.n	80111e4 <_dtoa_r+0x4b4>
 80116b0:	40240000 	.word	0x40240000
 80116b4:	9b08      	ldr	r3, [sp, #32]
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	f000 80ca 	beq.w	8011850 <_dtoa_r+0xb20>
 80116bc:	9b03      	ldr	r3, [sp, #12]
 80116be:	9302      	str	r3, [sp, #8]
 80116c0:	2d00      	cmp	r5, #0
 80116c2:	dd05      	ble.n	80116d0 <_dtoa_r+0x9a0>
 80116c4:	4639      	mov	r1, r7
 80116c6:	462a      	mov	r2, r5
 80116c8:	4620      	mov	r0, r4
 80116ca:	f000 ff1b 	bl	8012504 <__lshift>
 80116ce:	4607      	mov	r7, r0
 80116d0:	f1b8 0f00 	cmp.w	r8, #0
 80116d4:	d05b      	beq.n	801178e <_dtoa_r+0xa5e>
 80116d6:	6879      	ldr	r1, [r7, #4]
 80116d8:	4620      	mov	r0, r4
 80116da:	f000 fcb7 	bl	801204c <_Balloc>
 80116de:	4605      	mov	r5, r0
 80116e0:	b928      	cbnz	r0, 80116ee <_dtoa_r+0x9be>
 80116e2:	4b87      	ldr	r3, [pc, #540]	; (8011900 <_dtoa_r+0xbd0>)
 80116e4:	4602      	mov	r2, r0
 80116e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80116ea:	f7ff bb3b 	b.w	8010d64 <_dtoa_r+0x34>
 80116ee:	693a      	ldr	r2, [r7, #16]
 80116f0:	3202      	adds	r2, #2
 80116f2:	0092      	lsls	r2, r2, #2
 80116f4:	f107 010c 	add.w	r1, r7, #12
 80116f8:	300c      	adds	r0, #12
 80116fa:	f7fd fc79 	bl	800eff0 <memcpy>
 80116fe:	2201      	movs	r2, #1
 8011700:	4629      	mov	r1, r5
 8011702:	4620      	mov	r0, r4
 8011704:	f000 fefe 	bl	8012504 <__lshift>
 8011708:	9b01      	ldr	r3, [sp, #4]
 801170a:	f103 0901 	add.w	r9, r3, #1
 801170e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8011712:	4413      	add	r3, r2
 8011714:	9305      	str	r3, [sp, #20]
 8011716:	f00a 0301 	and.w	r3, sl, #1
 801171a:	46b8      	mov	r8, r7
 801171c:	9304      	str	r3, [sp, #16]
 801171e:	4607      	mov	r7, r0
 8011720:	4631      	mov	r1, r6
 8011722:	ee18 0a10 	vmov	r0, s16
 8011726:	f7ff fa75 	bl	8010c14 <quorem>
 801172a:	4641      	mov	r1, r8
 801172c:	9002      	str	r0, [sp, #8]
 801172e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011732:	ee18 0a10 	vmov	r0, s16
 8011736:	f000 ff55 	bl	80125e4 <__mcmp>
 801173a:	463a      	mov	r2, r7
 801173c:	9003      	str	r0, [sp, #12]
 801173e:	4631      	mov	r1, r6
 8011740:	4620      	mov	r0, r4
 8011742:	f000 ff6b 	bl	801261c <__mdiff>
 8011746:	68c2      	ldr	r2, [r0, #12]
 8011748:	f109 3bff 	add.w	fp, r9, #4294967295
 801174c:	4605      	mov	r5, r0
 801174e:	bb02      	cbnz	r2, 8011792 <_dtoa_r+0xa62>
 8011750:	4601      	mov	r1, r0
 8011752:	ee18 0a10 	vmov	r0, s16
 8011756:	f000 ff45 	bl	80125e4 <__mcmp>
 801175a:	4602      	mov	r2, r0
 801175c:	4629      	mov	r1, r5
 801175e:	4620      	mov	r0, r4
 8011760:	9207      	str	r2, [sp, #28]
 8011762:	f000 fcb3 	bl	80120cc <_Bfree>
 8011766:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801176a:	ea43 0102 	orr.w	r1, r3, r2
 801176e:	9b04      	ldr	r3, [sp, #16]
 8011770:	430b      	orrs	r3, r1
 8011772:	464d      	mov	r5, r9
 8011774:	d10f      	bne.n	8011796 <_dtoa_r+0xa66>
 8011776:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801177a:	d02a      	beq.n	80117d2 <_dtoa_r+0xaa2>
 801177c:	9b03      	ldr	r3, [sp, #12]
 801177e:	2b00      	cmp	r3, #0
 8011780:	dd02      	ble.n	8011788 <_dtoa_r+0xa58>
 8011782:	9b02      	ldr	r3, [sp, #8]
 8011784:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8011788:	f88b a000 	strb.w	sl, [fp]
 801178c:	e775      	b.n	801167a <_dtoa_r+0x94a>
 801178e:	4638      	mov	r0, r7
 8011790:	e7ba      	b.n	8011708 <_dtoa_r+0x9d8>
 8011792:	2201      	movs	r2, #1
 8011794:	e7e2      	b.n	801175c <_dtoa_r+0xa2c>
 8011796:	9b03      	ldr	r3, [sp, #12]
 8011798:	2b00      	cmp	r3, #0
 801179a:	db04      	blt.n	80117a6 <_dtoa_r+0xa76>
 801179c:	9906      	ldr	r1, [sp, #24]
 801179e:	430b      	orrs	r3, r1
 80117a0:	9904      	ldr	r1, [sp, #16]
 80117a2:	430b      	orrs	r3, r1
 80117a4:	d122      	bne.n	80117ec <_dtoa_r+0xabc>
 80117a6:	2a00      	cmp	r2, #0
 80117a8:	ddee      	ble.n	8011788 <_dtoa_r+0xa58>
 80117aa:	ee18 1a10 	vmov	r1, s16
 80117ae:	2201      	movs	r2, #1
 80117b0:	4620      	mov	r0, r4
 80117b2:	f000 fea7 	bl	8012504 <__lshift>
 80117b6:	4631      	mov	r1, r6
 80117b8:	ee08 0a10 	vmov	s16, r0
 80117bc:	f000 ff12 	bl	80125e4 <__mcmp>
 80117c0:	2800      	cmp	r0, #0
 80117c2:	dc03      	bgt.n	80117cc <_dtoa_r+0xa9c>
 80117c4:	d1e0      	bne.n	8011788 <_dtoa_r+0xa58>
 80117c6:	f01a 0f01 	tst.w	sl, #1
 80117ca:	d0dd      	beq.n	8011788 <_dtoa_r+0xa58>
 80117cc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80117d0:	d1d7      	bne.n	8011782 <_dtoa_r+0xa52>
 80117d2:	2339      	movs	r3, #57	; 0x39
 80117d4:	f88b 3000 	strb.w	r3, [fp]
 80117d8:	462b      	mov	r3, r5
 80117da:	461d      	mov	r5, r3
 80117dc:	3b01      	subs	r3, #1
 80117de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80117e2:	2a39      	cmp	r2, #57	; 0x39
 80117e4:	d071      	beq.n	80118ca <_dtoa_r+0xb9a>
 80117e6:	3201      	adds	r2, #1
 80117e8:	701a      	strb	r2, [r3, #0]
 80117ea:	e746      	b.n	801167a <_dtoa_r+0x94a>
 80117ec:	2a00      	cmp	r2, #0
 80117ee:	dd07      	ble.n	8011800 <_dtoa_r+0xad0>
 80117f0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80117f4:	d0ed      	beq.n	80117d2 <_dtoa_r+0xaa2>
 80117f6:	f10a 0301 	add.w	r3, sl, #1
 80117fa:	f88b 3000 	strb.w	r3, [fp]
 80117fe:	e73c      	b.n	801167a <_dtoa_r+0x94a>
 8011800:	9b05      	ldr	r3, [sp, #20]
 8011802:	f809 ac01 	strb.w	sl, [r9, #-1]
 8011806:	4599      	cmp	r9, r3
 8011808:	d047      	beq.n	801189a <_dtoa_r+0xb6a>
 801180a:	ee18 1a10 	vmov	r1, s16
 801180e:	2300      	movs	r3, #0
 8011810:	220a      	movs	r2, #10
 8011812:	4620      	mov	r0, r4
 8011814:	f000 fc7c 	bl	8012110 <__multadd>
 8011818:	45b8      	cmp	r8, r7
 801181a:	ee08 0a10 	vmov	s16, r0
 801181e:	f04f 0300 	mov.w	r3, #0
 8011822:	f04f 020a 	mov.w	r2, #10
 8011826:	4641      	mov	r1, r8
 8011828:	4620      	mov	r0, r4
 801182a:	d106      	bne.n	801183a <_dtoa_r+0xb0a>
 801182c:	f000 fc70 	bl	8012110 <__multadd>
 8011830:	4680      	mov	r8, r0
 8011832:	4607      	mov	r7, r0
 8011834:	f109 0901 	add.w	r9, r9, #1
 8011838:	e772      	b.n	8011720 <_dtoa_r+0x9f0>
 801183a:	f000 fc69 	bl	8012110 <__multadd>
 801183e:	4639      	mov	r1, r7
 8011840:	4680      	mov	r8, r0
 8011842:	2300      	movs	r3, #0
 8011844:	220a      	movs	r2, #10
 8011846:	4620      	mov	r0, r4
 8011848:	f000 fc62 	bl	8012110 <__multadd>
 801184c:	4607      	mov	r7, r0
 801184e:	e7f1      	b.n	8011834 <_dtoa_r+0xb04>
 8011850:	9b03      	ldr	r3, [sp, #12]
 8011852:	9302      	str	r3, [sp, #8]
 8011854:	9d01      	ldr	r5, [sp, #4]
 8011856:	ee18 0a10 	vmov	r0, s16
 801185a:	4631      	mov	r1, r6
 801185c:	f7ff f9da 	bl	8010c14 <quorem>
 8011860:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011864:	9b01      	ldr	r3, [sp, #4]
 8011866:	f805 ab01 	strb.w	sl, [r5], #1
 801186a:	1aea      	subs	r2, r5, r3
 801186c:	9b02      	ldr	r3, [sp, #8]
 801186e:	4293      	cmp	r3, r2
 8011870:	dd09      	ble.n	8011886 <_dtoa_r+0xb56>
 8011872:	ee18 1a10 	vmov	r1, s16
 8011876:	2300      	movs	r3, #0
 8011878:	220a      	movs	r2, #10
 801187a:	4620      	mov	r0, r4
 801187c:	f000 fc48 	bl	8012110 <__multadd>
 8011880:	ee08 0a10 	vmov	s16, r0
 8011884:	e7e7      	b.n	8011856 <_dtoa_r+0xb26>
 8011886:	9b02      	ldr	r3, [sp, #8]
 8011888:	2b00      	cmp	r3, #0
 801188a:	bfc8      	it	gt
 801188c:	461d      	movgt	r5, r3
 801188e:	9b01      	ldr	r3, [sp, #4]
 8011890:	bfd8      	it	le
 8011892:	2501      	movle	r5, #1
 8011894:	441d      	add	r5, r3
 8011896:	f04f 0800 	mov.w	r8, #0
 801189a:	ee18 1a10 	vmov	r1, s16
 801189e:	2201      	movs	r2, #1
 80118a0:	4620      	mov	r0, r4
 80118a2:	f000 fe2f 	bl	8012504 <__lshift>
 80118a6:	4631      	mov	r1, r6
 80118a8:	ee08 0a10 	vmov	s16, r0
 80118ac:	f000 fe9a 	bl	80125e4 <__mcmp>
 80118b0:	2800      	cmp	r0, #0
 80118b2:	dc91      	bgt.n	80117d8 <_dtoa_r+0xaa8>
 80118b4:	d102      	bne.n	80118bc <_dtoa_r+0xb8c>
 80118b6:	f01a 0f01 	tst.w	sl, #1
 80118ba:	d18d      	bne.n	80117d8 <_dtoa_r+0xaa8>
 80118bc:	462b      	mov	r3, r5
 80118be:	461d      	mov	r5, r3
 80118c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80118c4:	2a30      	cmp	r2, #48	; 0x30
 80118c6:	d0fa      	beq.n	80118be <_dtoa_r+0xb8e>
 80118c8:	e6d7      	b.n	801167a <_dtoa_r+0x94a>
 80118ca:	9a01      	ldr	r2, [sp, #4]
 80118cc:	429a      	cmp	r2, r3
 80118ce:	d184      	bne.n	80117da <_dtoa_r+0xaaa>
 80118d0:	9b00      	ldr	r3, [sp, #0]
 80118d2:	3301      	adds	r3, #1
 80118d4:	9300      	str	r3, [sp, #0]
 80118d6:	2331      	movs	r3, #49	; 0x31
 80118d8:	7013      	strb	r3, [r2, #0]
 80118da:	e6ce      	b.n	801167a <_dtoa_r+0x94a>
 80118dc:	4b09      	ldr	r3, [pc, #36]	; (8011904 <_dtoa_r+0xbd4>)
 80118de:	f7ff ba95 	b.w	8010e0c <_dtoa_r+0xdc>
 80118e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	f47f aa6e 	bne.w	8010dc6 <_dtoa_r+0x96>
 80118ea:	4b07      	ldr	r3, [pc, #28]	; (8011908 <_dtoa_r+0xbd8>)
 80118ec:	f7ff ba8e 	b.w	8010e0c <_dtoa_r+0xdc>
 80118f0:	9b02      	ldr	r3, [sp, #8]
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	dcae      	bgt.n	8011854 <_dtoa_r+0xb24>
 80118f6:	9b06      	ldr	r3, [sp, #24]
 80118f8:	2b02      	cmp	r3, #2
 80118fa:	f73f aea8 	bgt.w	801164e <_dtoa_r+0x91e>
 80118fe:	e7a9      	b.n	8011854 <_dtoa_r+0xb24>
 8011900:	080148b0 	.word	0x080148b0
 8011904:	08014aa9 	.word	0x08014aa9
 8011908:	08014831 	.word	0x08014831

0801190c <rshift>:
 801190c:	6903      	ldr	r3, [r0, #16]
 801190e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011912:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011916:	ea4f 1261 	mov.w	r2, r1, asr #5
 801191a:	f100 0414 	add.w	r4, r0, #20
 801191e:	dd45      	ble.n	80119ac <rshift+0xa0>
 8011920:	f011 011f 	ands.w	r1, r1, #31
 8011924:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011928:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801192c:	d10c      	bne.n	8011948 <rshift+0x3c>
 801192e:	f100 0710 	add.w	r7, r0, #16
 8011932:	4629      	mov	r1, r5
 8011934:	42b1      	cmp	r1, r6
 8011936:	d334      	bcc.n	80119a2 <rshift+0x96>
 8011938:	1a9b      	subs	r3, r3, r2
 801193a:	009b      	lsls	r3, r3, #2
 801193c:	1eea      	subs	r2, r5, #3
 801193e:	4296      	cmp	r6, r2
 8011940:	bf38      	it	cc
 8011942:	2300      	movcc	r3, #0
 8011944:	4423      	add	r3, r4
 8011946:	e015      	b.n	8011974 <rshift+0x68>
 8011948:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801194c:	f1c1 0820 	rsb	r8, r1, #32
 8011950:	40cf      	lsrs	r7, r1
 8011952:	f105 0e04 	add.w	lr, r5, #4
 8011956:	46a1      	mov	r9, r4
 8011958:	4576      	cmp	r6, lr
 801195a:	46f4      	mov	ip, lr
 801195c:	d815      	bhi.n	801198a <rshift+0x7e>
 801195e:	1a9a      	subs	r2, r3, r2
 8011960:	0092      	lsls	r2, r2, #2
 8011962:	3a04      	subs	r2, #4
 8011964:	3501      	adds	r5, #1
 8011966:	42ae      	cmp	r6, r5
 8011968:	bf38      	it	cc
 801196a:	2200      	movcc	r2, #0
 801196c:	18a3      	adds	r3, r4, r2
 801196e:	50a7      	str	r7, [r4, r2]
 8011970:	b107      	cbz	r7, 8011974 <rshift+0x68>
 8011972:	3304      	adds	r3, #4
 8011974:	1b1a      	subs	r2, r3, r4
 8011976:	42a3      	cmp	r3, r4
 8011978:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801197c:	bf08      	it	eq
 801197e:	2300      	moveq	r3, #0
 8011980:	6102      	str	r2, [r0, #16]
 8011982:	bf08      	it	eq
 8011984:	6143      	streq	r3, [r0, #20]
 8011986:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801198a:	f8dc c000 	ldr.w	ip, [ip]
 801198e:	fa0c fc08 	lsl.w	ip, ip, r8
 8011992:	ea4c 0707 	orr.w	r7, ip, r7
 8011996:	f849 7b04 	str.w	r7, [r9], #4
 801199a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801199e:	40cf      	lsrs	r7, r1
 80119a0:	e7da      	b.n	8011958 <rshift+0x4c>
 80119a2:	f851 cb04 	ldr.w	ip, [r1], #4
 80119a6:	f847 cf04 	str.w	ip, [r7, #4]!
 80119aa:	e7c3      	b.n	8011934 <rshift+0x28>
 80119ac:	4623      	mov	r3, r4
 80119ae:	e7e1      	b.n	8011974 <rshift+0x68>

080119b0 <__hexdig_fun>:
 80119b0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80119b4:	2b09      	cmp	r3, #9
 80119b6:	d802      	bhi.n	80119be <__hexdig_fun+0xe>
 80119b8:	3820      	subs	r0, #32
 80119ba:	b2c0      	uxtb	r0, r0
 80119bc:	4770      	bx	lr
 80119be:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80119c2:	2b05      	cmp	r3, #5
 80119c4:	d801      	bhi.n	80119ca <__hexdig_fun+0x1a>
 80119c6:	3847      	subs	r0, #71	; 0x47
 80119c8:	e7f7      	b.n	80119ba <__hexdig_fun+0xa>
 80119ca:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80119ce:	2b05      	cmp	r3, #5
 80119d0:	d801      	bhi.n	80119d6 <__hexdig_fun+0x26>
 80119d2:	3827      	subs	r0, #39	; 0x27
 80119d4:	e7f1      	b.n	80119ba <__hexdig_fun+0xa>
 80119d6:	2000      	movs	r0, #0
 80119d8:	4770      	bx	lr
	...

080119dc <__gethex>:
 80119dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119e0:	ed2d 8b02 	vpush	{d8}
 80119e4:	b089      	sub	sp, #36	; 0x24
 80119e6:	ee08 0a10 	vmov	s16, r0
 80119ea:	9304      	str	r3, [sp, #16]
 80119ec:	4bb4      	ldr	r3, [pc, #720]	; (8011cc0 <__gethex+0x2e4>)
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	9301      	str	r3, [sp, #4]
 80119f2:	4618      	mov	r0, r3
 80119f4:	468b      	mov	fp, r1
 80119f6:	4690      	mov	r8, r2
 80119f8:	f7ee fc0a 	bl	8000210 <strlen>
 80119fc:	9b01      	ldr	r3, [sp, #4]
 80119fe:	f8db 2000 	ldr.w	r2, [fp]
 8011a02:	4403      	add	r3, r0
 8011a04:	4682      	mov	sl, r0
 8011a06:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8011a0a:	9305      	str	r3, [sp, #20]
 8011a0c:	1c93      	adds	r3, r2, #2
 8011a0e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8011a12:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8011a16:	32fe      	adds	r2, #254	; 0xfe
 8011a18:	18d1      	adds	r1, r2, r3
 8011a1a:	461f      	mov	r7, r3
 8011a1c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8011a20:	9100      	str	r1, [sp, #0]
 8011a22:	2830      	cmp	r0, #48	; 0x30
 8011a24:	d0f8      	beq.n	8011a18 <__gethex+0x3c>
 8011a26:	f7ff ffc3 	bl	80119b0 <__hexdig_fun>
 8011a2a:	4604      	mov	r4, r0
 8011a2c:	2800      	cmp	r0, #0
 8011a2e:	d13a      	bne.n	8011aa6 <__gethex+0xca>
 8011a30:	9901      	ldr	r1, [sp, #4]
 8011a32:	4652      	mov	r2, sl
 8011a34:	4638      	mov	r0, r7
 8011a36:	f7fe fa0a 	bl	800fe4e <strncmp>
 8011a3a:	4605      	mov	r5, r0
 8011a3c:	2800      	cmp	r0, #0
 8011a3e:	d168      	bne.n	8011b12 <__gethex+0x136>
 8011a40:	f817 000a 	ldrb.w	r0, [r7, sl]
 8011a44:	eb07 060a 	add.w	r6, r7, sl
 8011a48:	f7ff ffb2 	bl	80119b0 <__hexdig_fun>
 8011a4c:	2800      	cmp	r0, #0
 8011a4e:	d062      	beq.n	8011b16 <__gethex+0x13a>
 8011a50:	4633      	mov	r3, r6
 8011a52:	7818      	ldrb	r0, [r3, #0]
 8011a54:	2830      	cmp	r0, #48	; 0x30
 8011a56:	461f      	mov	r7, r3
 8011a58:	f103 0301 	add.w	r3, r3, #1
 8011a5c:	d0f9      	beq.n	8011a52 <__gethex+0x76>
 8011a5e:	f7ff ffa7 	bl	80119b0 <__hexdig_fun>
 8011a62:	2301      	movs	r3, #1
 8011a64:	fab0 f480 	clz	r4, r0
 8011a68:	0964      	lsrs	r4, r4, #5
 8011a6a:	4635      	mov	r5, r6
 8011a6c:	9300      	str	r3, [sp, #0]
 8011a6e:	463a      	mov	r2, r7
 8011a70:	4616      	mov	r6, r2
 8011a72:	3201      	adds	r2, #1
 8011a74:	7830      	ldrb	r0, [r6, #0]
 8011a76:	f7ff ff9b 	bl	80119b0 <__hexdig_fun>
 8011a7a:	2800      	cmp	r0, #0
 8011a7c:	d1f8      	bne.n	8011a70 <__gethex+0x94>
 8011a7e:	9901      	ldr	r1, [sp, #4]
 8011a80:	4652      	mov	r2, sl
 8011a82:	4630      	mov	r0, r6
 8011a84:	f7fe f9e3 	bl	800fe4e <strncmp>
 8011a88:	b980      	cbnz	r0, 8011aac <__gethex+0xd0>
 8011a8a:	b94d      	cbnz	r5, 8011aa0 <__gethex+0xc4>
 8011a8c:	eb06 050a 	add.w	r5, r6, sl
 8011a90:	462a      	mov	r2, r5
 8011a92:	4616      	mov	r6, r2
 8011a94:	3201      	adds	r2, #1
 8011a96:	7830      	ldrb	r0, [r6, #0]
 8011a98:	f7ff ff8a 	bl	80119b0 <__hexdig_fun>
 8011a9c:	2800      	cmp	r0, #0
 8011a9e:	d1f8      	bne.n	8011a92 <__gethex+0xb6>
 8011aa0:	1bad      	subs	r5, r5, r6
 8011aa2:	00ad      	lsls	r5, r5, #2
 8011aa4:	e004      	b.n	8011ab0 <__gethex+0xd4>
 8011aa6:	2400      	movs	r4, #0
 8011aa8:	4625      	mov	r5, r4
 8011aaa:	e7e0      	b.n	8011a6e <__gethex+0x92>
 8011aac:	2d00      	cmp	r5, #0
 8011aae:	d1f7      	bne.n	8011aa0 <__gethex+0xc4>
 8011ab0:	7833      	ldrb	r3, [r6, #0]
 8011ab2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011ab6:	2b50      	cmp	r3, #80	; 0x50
 8011ab8:	d13b      	bne.n	8011b32 <__gethex+0x156>
 8011aba:	7873      	ldrb	r3, [r6, #1]
 8011abc:	2b2b      	cmp	r3, #43	; 0x2b
 8011abe:	d02c      	beq.n	8011b1a <__gethex+0x13e>
 8011ac0:	2b2d      	cmp	r3, #45	; 0x2d
 8011ac2:	d02e      	beq.n	8011b22 <__gethex+0x146>
 8011ac4:	1c71      	adds	r1, r6, #1
 8011ac6:	f04f 0900 	mov.w	r9, #0
 8011aca:	7808      	ldrb	r0, [r1, #0]
 8011acc:	f7ff ff70 	bl	80119b0 <__hexdig_fun>
 8011ad0:	1e43      	subs	r3, r0, #1
 8011ad2:	b2db      	uxtb	r3, r3
 8011ad4:	2b18      	cmp	r3, #24
 8011ad6:	d82c      	bhi.n	8011b32 <__gethex+0x156>
 8011ad8:	f1a0 0210 	sub.w	r2, r0, #16
 8011adc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011ae0:	f7ff ff66 	bl	80119b0 <__hexdig_fun>
 8011ae4:	1e43      	subs	r3, r0, #1
 8011ae6:	b2db      	uxtb	r3, r3
 8011ae8:	2b18      	cmp	r3, #24
 8011aea:	d91d      	bls.n	8011b28 <__gethex+0x14c>
 8011aec:	f1b9 0f00 	cmp.w	r9, #0
 8011af0:	d000      	beq.n	8011af4 <__gethex+0x118>
 8011af2:	4252      	negs	r2, r2
 8011af4:	4415      	add	r5, r2
 8011af6:	f8cb 1000 	str.w	r1, [fp]
 8011afa:	b1e4      	cbz	r4, 8011b36 <__gethex+0x15a>
 8011afc:	9b00      	ldr	r3, [sp, #0]
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	bf14      	ite	ne
 8011b02:	2700      	movne	r7, #0
 8011b04:	2706      	moveq	r7, #6
 8011b06:	4638      	mov	r0, r7
 8011b08:	b009      	add	sp, #36	; 0x24
 8011b0a:	ecbd 8b02 	vpop	{d8}
 8011b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b12:	463e      	mov	r6, r7
 8011b14:	4625      	mov	r5, r4
 8011b16:	2401      	movs	r4, #1
 8011b18:	e7ca      	b.n	8011ab0 <__gethex+0xd4>
 8011b1a:	f04f 0900 	mov.w	r9, #0
 8011b1e:	1cb1      	adds	r1, r6, #2
 8011b20:	e7d3      	b.n	8011aca <__gethex+0xee>
 8011b22:	f04f 0901 	mov.w	r9, #1
 8011b26:	e7fa      	b.n	8011b1e <__gethex+0x142>
 8011b28:	230a      	movs	r3, #10
 8011b2a:	fb03 0202 	mla	r2, r3, r2, r0
 8011b2e:	3a10      	subs	r2, #16
 8011b30:	e7d4      	b.n	8011adc <__gethex+0x100>
 8011b32:	4631      	mov	r1, r6
 8011b34:	e7df      	b.n	8011af6 <__gethex+0x11a>
 8011b36:	1bf3      	subs	r3, r6, r7
 8011b38:	3b01      	subs	r3, #1
 8011b3a:	4621      	mov	r1, r4
 8011b3c:	2b07      	cmp	r3, #7
 8011b3e:	dc0b      	bgt.n	8011b58 <__gethex+0x17c>
 8011b40:	ee18 0a10 	vmov	r0, s16
 8011b44:	f000 fa82 	bl	801204c <_Balloc>
 8011b48:	4604      	mov	r4, r0
 8011b4a:	b940      	cbnz	r0, 8011b5e <__gethex+0x182>
 8011b4c:	4b5d      	ldr	r3, [pc, #372]	; (8011cc4 <__gethex+0x2e8>)
 8011b4e:	4602      	mov	r2, r0
 8011b50:	21de      	movs	r1, #222	; 0xde
 8011b52:	485d      	ldr	r0, [pc, #372]	; (8011cc8 <__gethex+0x2ec>)
 8011b54:	f001 fdd0 	bl	80136f8 <__assert_func>
 8011b58:	3101      	adds	r1, #1
 8011b5a:	105b      	asrs	r3, r3, #1
 8011b5c:	e7ee      	b.n	8011b3c <__gethex+0x160>
 8011b5e:	f100 0914 	add.w	r9, r0, #20
 8011b62:	f04f 0b00 	mov.w	fp, #0
 8011b66:	f1ca 0301 	rsb	r3, sl, #1
 8011b6a:	f8cd 9008 	str.w	r9, [sp, #8]
 8011b6e:	f8cd b000 	str.w	fp, [sp]
 8011b72:	9306      	str	r3, [sp, #24]
 8011b74:	42b7      	cmp	r7, r6
 8011b76:	d340      	bcc.n	8011bfa <__gethex+0x21e>
 8011b78:	9802      	ldr	r0, [sp, #8]
 8011b7a:	9b00      	ldr	r3, [sp, #0]
 8011b7c:	f840 3b04 	str.w	r3, [r0], #4
 8011b80:	eba0 0009 	sub.w	r0, r0, r9
 8011b84:	1080      	asrs	r0, r0, #2
 8011b86:	0146      	lsls	r6, r0, #5
 8011b88:	6120      	str	r0, [r4, #16]
 8011b8a:	4618      	mov	r0, r3
 8011b8c:	f000 fb50 	bl	8012230 <__hi0bits>
 8011b90:	1a30      	subs	r0, r6, r0
 8011b92:	f8d8 6000 	ldr.w	r6, [r8]
 8011b96:	42b0      	cmp	r0, r6
 8011b98:	dd63      	ble.n	8011c62 <__gethex+0x286>
 8011b9a:	1b87      	subs	r7, r0, r6
 8011b9c:	4639      	mov	r1, r7
 8011b9e:	4620      	mov	r0, r4
 8011ba0:	f000 fef4 	bl	801298c <__any_on>
 8011ba4:	4682      	mov	sl, r0
 8011ba6:	b1a8      	cbz	r0, 8011bd4 <__gethex+0x1f8>
 8011ba8:	1e7b      	subs	r3, r7, #1
 8011baa:	1159      	asrs	r1, r3, #5
 8011bac:	f003 021f 	and.w	r2, r3, #31
 8011bb0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8011bb4:	f04f 0a01 	mov.w	sl, #1
 8011bb8:	fa0a f202 	lsl.w	r2, sl, r2
 8011bbc:	420a      	tst	r2, r1
 8011bbe:	d009      	beq.n	8011bd4 <__gethex+0x1f8>
 8011bc0:	4553      	cmp	r3, sl
 8011bc2:	dd05      	ble.n	8011bd0 <__gethex+0x1f4>
 8011bc4:	1eb9      	subs	r1, r7, #2
 8011bc6:	4620      	mov	r0, r4
 8011bc8:	f000 fee0 	bl	801298c <__any_on>
 8011bcc:	2800      	cmp	r0, #0
 8011bce:	d145      	bne.n	8011c5c <__gethex+0x280>
 8011bd0:	f04f 0a02 	mov.w	sl, #2
 8011bd4:	4639      	mov	r1, r7
 8011bd6:	4620      	mov	r0, r4
 8011bd8:	f7ff fe98 	bl	801190c <rshift>
 8011bdc:	443d      	add	r5, r7
 8011bde:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011be2:	42ab      	cmp	r3, r5
 8011be4:	da4c      	bge.n	8011c80 <__gethex+0x2a4>
 8011be6:	ee18 0a10 	vmov	r0, s16
 8011bea:	4621      	mov	r1, r4
 8011bec:	f000 fa6e 	bl	80120cc <_Bfree>
 8011bf0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011bf2:	2300      	movs	r3, #0
 8011bf4:	6013      	str	r3, [r2, #0]
 8011bf6:	27a3      	movs	r7, #163	; 0xa3
 8011bf8:	e785      	b.n	8011b06 <__gethex+0x12a>
 8011bfa:	1e73      	subs	r3, r6, #1
 8011bfc:	9a05      	ldr	r2, [sp, #20]
 8011bfe:	9303      	str	r3, [sp, #12]
 8011c00:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011c04:	4293      	cmp	r3, r2
 8011c06:	d019      	beq.n	8011c3c <__gethex+0x260>
 8011c08:	f1bb 0f20 	cmp.w	fp, #32
 8011c0c:	d107      	bne.n	8011c1e <__gethex+0x242>
 8011c0e:	9b02      	ldr	r3, [sp, #8]
 8011c10:	9a00      	ldr	r2, [sp, #0]
 8011c12:	f843 2b04 	str.w	r2, [r3], #4
 8011c16:	9302      	str	r3, [sp, #8]
 8011c18:	2300      	movs	r3, #0
 8011c1a:	9300      	str	r3, [sp, #0]
 8011c1c:	469b      	mov	fp, r3
 8011c1e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8011c22:	f7ff fec5 	bl	80119b0 <__hexdig_fun>
 8011c26:	9b00      	ldr	r3, [sp, #0]
 8011c28:	f000 000f 	and.w	r0, r0, #15
 8011c2c:	fa00 f00b 	lsl.w	r0, r0, fp
 8011c30:	4303      	orrs	r3, r0
 8011c32:	9300      	str	r3, [sp, #0]
 8011c34:	f10b 0b04 	add.w	fp, fp, #4
 8011c38:	9b03      	ldr	r3, [sp, #12]
 8011c3a:	e00d      	b.n	8011c58 <__gethex+0x27c>
 8011c3c:	9b03      	ldr	r3, [sp, #12]
 8011c3e:	9a06      	ldr	r2, [sp, #24]
 8011c40:	4413      	add	r3, r2
 8011c42:	42bb      	cmp	r3, r7
 8011c44:	d3e0      	bcc.n	8011c08 <__gethex+0x22c>
 8011c46:	4618      	mov	r0, r3
 8011c48:	9901      	ldr	r1, [sp, #4]
 8011c4a:	9307      	str	r3, [sp, #28]
 8011c4c:	4652      	mov	r2, sl
 8011c4e:	f7fe f8fe 	bl	800fe4e <strncmp>
 8011c52:	9b07      	ldr	r3, [sp, #28]
 8011c54:	2800      	cmp	r0, #0
 8011c56:	d1d7      	bne.n	8011c08 <__gethex+0x22c>
 8011c58:	461e      	mov	r6, r3
 8011c5a:	e78b      	b.n	8011b74 <__gethex+0x198>
 8011c5c:	f04f 0a03 	mov.w	sl, #3
 8011c60:	e7b8      	b.n	8011bd4 <__gethex+0x1f8>
 8011c62:	da0a      	bge.n	8011c7a <__gethex+0x29e>
 8011c64:	1a37      	subs	r7, r6, r0
 8011c66:	4621      	mov	r1, r4
 8011c68:	ee18 0a10 	vmov	r0, s16
 8011c6c:	463a      	mov	r2, r7
 8011c6e:	f000 fc49 	bl	8012504 <__lshift>
 8011c72:	1bed      	subs	r5, r5, r7
 8011c74:	4604      	mov	r4, r0
 8011c76:	f100 0914 	add.w	r9, r0, #20
 8011c7a:	f04f 0a00 	mov.w	sl, #0
 8011c7e:	e7ae      	b.n	8011bde <__gethex+0x202>
 8011c80:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8011c84:	42a8      	cmp	r0, r5
 8011c86:	dd72      	ble.n	8011d6e <__gethex+0x392>
 8011c88:	1b45      	subs	r5, r0, r5
 8011c8a:	42ae      	cmp	r6, r5
 8011c8c:	dc36      	bgt.n	8011cfc <__gethex+0x320>
 8011c8e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011c92:	2b02      	cmp	r3, #2
 8011c94:	d02a      	beq.n	8011cec <__gethex+0x310>
 8011c96:	2b03      	cmp	r3, #3
 8011c98:	d02c      	beq.n	8011cf4 <__gethex+0x318>
 8011c9a:	2b01      	cmp	r3, #1
 8011c9c:	d11c      	bne.n	8011cd8 <__gethex+0x2fc>
 8011c9e:	42ae      	cmp	r6, r5
 8011ca0:	d11a      	bne.n	8011cd8 <__gethex+0x2fc>
 8011ca2:	2e01      	cmp	r6, #1
 8011ca4:	d112      	bne.n	8011ccc <__gethex+0x2f0>
 8011ca6:	9a04      	ldr	r2, [sp, #16]
 8011ca8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011cac:	6013      	str	r3, [r2, #0]
 8011cae:	2301      	movs	r3, #1
 8011cb0:	6123      	str	r3, [r4, #16]
 8011cb2:	f8c9 3000 	str.w	r3, [r9]
 8011cb6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011cb8:	2762      	movs	r7, #98	; 0x62
 8011cba:	601c      	str	r4, [r3, #0]
 8011cbc:	e723      	b.n	8011b06 <__gethex+0x12a>
 8011cbe:	bf00      	nop
 8011cc0:	08014928 	.word	0x08014928
 8011cc4:	080148b0 	.word	0x080148b0
 8011cc8:	080148c1 	.word	0x080148c1
 8011ccc:	1e71      	subs	r1, r6, #1
 8011cce:	4620      	mov	r0, r4
 8011cd0:	f000 fe5c 	bl	801298c <__any_on>
 8011cd4:	2800      	cmp	r0, #0
 8011cd6:	d1e6      	bne.n	8011ca6 <__gethex+0x2ca>
 8011cd8:	ee18 0a10 	vmov	r0, s16
 8011cdc:	4621      	mov	r1, r4
 8011cde:	f000 f9f5 	bl	80120cc <_Bfree>
 8011ce2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011ce4:	2300      	movs	r3, #0
 8011ce6:	6013      	str	r3, [r2, #0]
 8011ce8:	2750      	movs	r7, #80	; 0x50
 8011cea:	e70c      	b.n	8011b06 <__gethex+0x12a>
 8011cec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d1f2      	bne.n	8011cd8 <__gethex+0x2fc>
 8011cf2:	e7d8      	b.n	8011ca6 <__gethex+0x2ca>
 8011cf4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	d1d5      	bne.n	8011ca6 <__gethex+0x2ca>
 8011cfa:	e7ed      	b.n	8011cd8 <__gethex+0x2fc>
 8011cfc:	1e6f      	subs	r7, r5, #1
 8011cfe:	f1ba 0f00 	cmp.w	sl, #0
 8011d02:	d131      	bne.n	8011d68 <__gethex+0x38c>
 8011d04:	b127      	cbz	r7, 8011d10 <__gethex+0x334>
 8011d06:	4639      	mov	r1, r7
 8011d08:	4620      	mov	r0, r4
 8011d0a:	f000 fe3f 	bl	801298c <__any_on>
 8011d0e:	4682      	mov	sl, r0
 8011d10:	117b      	asrs	r3, r7, #5
 8011d12:	2101      	movs	r1, #1
 8011d14:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8011d18:	f007 071f 	and.w	r7, r7, #31
 8011d1c:	fa01 f707 	lsl.w	r7, r1, r7
 8011d20:	421f      	tst	r7, r3
 8011d22:	4629      	mov	r1, r5
 8011d24:	4620      	mov	r0, r4
 8011d26:	bf18      	it	ne
 8011d28:	f04a 0a02 	orrne.w	sl, sl, #2
 8011d2c:	1b76      	subs	r6, r6, r5
 8011d2e:	f7ff fded 	bl	801190c <rshift>
 8011d32:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011d36:	2702      	movs	r7, #2
 8011d38:	f1ba 0f00 	cmp.w	sl, #0
 8011d3c:	d048      	beq.n	8011dd0 <__gethex+0x3f4>
 8011d3e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011d42:	2b02      	cmp	r3, #2
 8011d44:	d015      	beq.n	8011d72 <__gethex+0x396>
 8011d46:	2b03      	cmp	r3, #3
 8011d48:	d017      	beq.n	8011d7a <__gethex+0x39e>
 8011d4a:	2b01      	cmp	r3, #1
 8011d4c:	d109      	bne.n	8011d62 <__gethex+0x386>
 8011d4e:	f01a 0f02 	tst.w	sl, #2
 8011d52:	d006      	beq.n	8011d62 <__gethex+0x386>
 8011d54:	f8d9 0000 	ldr.w	r0, [r9]
 8011d58:	ea4a 0a00 	orr.w	sl, sl, r0
 8011d5c:	f01a 0f01 	tst.w	sl, #1
 8011d60:	d10e      	bne.n	8011d80 <__gethex+0x3a4>
 8011d62:	f047 0710 	orr.w	r7, r7, #16
 8011d66:	e033      	b.n	8011dd0 <__gethex+0x3f4>
 8011d68:	f04f 0a01 	mov.w	sl, #1
 8011d6c:	e7d0      	b.n	8011d10 <__gethex+0x334>
 8011d6e:	2701      	movs	r7, #1
 8011d70:	e7e2      	b.n	8011d38 <__gethex+0x35c>
 8011d72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011d74:	f1c3 0301 	rsb	r3, r3, #1
 8011d78:	9315      	str	r3, [sp, #84]	; 0x54
 8011d7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d0f0      	beq.n	8011d62 <__gethex+0x386>
 8011d80:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011d84:	f104 0314 	add.w	r3, r4, #20
 8011d88:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011d8c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011d90:	f04f 0c00 	mov.w	ip, #0
 8011d94:	4618      	mov	r0, r3
 8011d96:	f853 2b04 	ldr.w	r2, [r3], #4
 8011d9a:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011d9e:	d01c      	beq.n	8011dda <__gethex+0x3fe>
 8011da0:	3201      	adds	r2, #1
 8011da2:	6002      	str	r2, [r0, #0]
 8011da4:	2f02      	cmp	r7, #2
 8011da6:	f104 0314 	add.w	r3, r4, #20
 8011daa:	d13f      	bne.n	8011e2c <__gethex+0x450>
 8011dac:	f8d8 2000 	ldr.w	r2, [r8]
 8011db0:	3a01      	subs	r2, #1
 8011db2:	42b2      	cmp	r2, r6
 8011db4:	d10a      	bne.n	8011dcc <__gethex+0x3f0>
 8011db6:	1171      	asrs	r1, r6, #5
 8011db8:	2201      	movs	r2, #1
 8011dba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011dbe:	f006 061f 	and.w	r6, r6, #31
 8011dc2:	fa02 f606 	lsl.w	r6, r2, r6
 8011dc6:	421e      	tst	r6, r3
 8011dc8:	bf18      	it	ne
 8011dca:	4617      	movne	r7, r2
 8011dcc:	f047 0720 	orr.w	r7, r7, #32
 8011dd0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011dd2:	601c      	str	r4, [r3, #0]
 8011dd4:	9b04      	ldr	r3, [sp, #16]
 8011dd6:	601d      	str	r5, [r3, #0]
 8011dd8:	e695      	b.n	8011b06 <__gethex+0x12a>
 8011dda:	4299      	cmp	r1, r3
 8011ddc:	f843 cc04 	str.w	ip, [r3, #-4]
 8011de0:	d8d8      	bhi.n	8011d94 <__gethex+0x3b8>
 8011de2:	68a3      	ldr	r3, [r4, #8]
 8011de4:	459b      	cmp	fp, r3
 8011de6:	db19      	blt.n	8011e1c <__gethex+0x440>
 8011de8:	6861      	ldr	r1, [r4, #4]
 8011dea:	ee18 0a10 	vmov	r0, s16
 8011dee:	3101      	adds	r1, #1
 8011df0:	f000 f92c 	bl	801204c <_Balloc>
 8011df4:	4681      	mov	r9, r0
 8011df6:	b918      	cbnz	r0, 8011e00 <__gethex+0x424>
 8011df8:	4b1a      	ldr	r3, [pc, #104]	; (8011e64 <__gethex+0x488>)
 8011dfa:	4602      	mov	r2, r0
 8011dfc:	2184      	movs	r1, #132	; 0x84
 8011dfe:	e6a8      	b.n	8011b52 <__gethex+0x176>
 8011e00:	6922      	ldr	r2, [r4, #16]
 8011e02:	3202      	adds	r2, #2
 8011e04:	f104 010c 	add.w	r1, r4, #12
 8011e08:	0092      	lsls	r2, r2, #2
 8011e0a:	300c      	adds	r0, #12
 8011e0c:	f7fd f8f0 	bl	800eff0 <memcpy>
 8011e10:	4621      	mov	r1, r4
 8011e12:	ee18 0a10 	vmov	r0, s16
 8011e16:	f000 f959 	bl	80120cc <_Bfree>
 8011e1a:	464c      	mov	r4, r9
 8011e1c:	6923      	ldr	r3, [r4, #16]
 8011e1e:	1c5a      	adds	r2, r3, #1
 8011e20:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011e24:	6122      	str	r2, [r4, #16]
 8011e26:	2201      	movs	r2, #1
 8011e28:	615a      	str	r2, [r3, #20]
 8011e2a:	e7bb      	b.n	8011da4 <__gethex+0x3c8>
 8011e2c:	6922      	ldr	r2, [r4, #16]
 8011e2e:	455a      	cmp	r2, fp
 8011e30:	dd0b      	ble.n	8011e4a <__gethex+0x46e>
 8011e32:	2101      	movs	r1, #1
 8011e34:	4620      	mov	r0, r4
 8011e36:	f7ff fd69 	bl	801190c <rshift>
 8011e3a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011e3e:	3501      	adds	r5, #1
 8011e40:	42ab      	cmp	r3, r5
 8011e42:	f6ff aed0 	blt.w	8011be6 <__gethex+0x20a>
 8011e46:	2701      	movs	r7, #1
 8011e48:	e7c0      	b.n	8011dcc <__gethex+0x3f0>
 8011e4a:	f016 061f 	ands.w	r6, r6, #31
 8011e4e:	d0fa      	beq.n	8011e46 <__gethex+0x46a>
 8011e50:	4453      	add	r3, sl
 8011e52:	f1c6 0620 	rsb	r6, r6, #32
 8011e56:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8011e5a:	f000 f9e9 	bl	8012230 <__hi0bits>
 8011e5e:	42b0      	cmp	r0, r6
 8011e60:	dbe7      	blt.n	8011e32 <__gethex+0x456>
 8011e62:	e7f0      	b.n	8011e46 <__gethex+0x46a>
 8011e64:	080148b0 	.word	0x080148b0

08011e68 <L_shift>:
 8011e68:	f1c2 0208 	rsb	r2, r2, #8
 8011e6c:	0092      	lsls	r2, r2, #2
 8011e6e:	b570      	push	{r4, r5, r6, lr}
 8011e70:	f1c2 0620 	rsb	r6, r2, #32
 8011e74:	6843      	ldr	r3, [r0, #4]
 8011e76:	6804      	ldr	r4, [r0, #0]
 8011e78:	fa03 f506 	lsl.w	r5, r3, r6
 8011e7c:	432c      	orrs	r4, r5
 8011e7e:	40d3      	lsrs	r3, r2
 8011e80:	6004      	str	r4, [r0, #0]
 8011e82:	f840 3f04 	str.w	r3, [r0, #4]!
 8011e86:	4288      	cmp	r0, r1
 8011e88:	d3f4      	bcc.n	8011e74 <L_shift+0xc>
 8011e8a:	bd70      	pop	{r4, r5, r6, pc}

08011e8c <__match>:
 8011e8c:	b530      	push	{r4, r5, lr}
 8011e8e:	6803      	ldr	r3, [r0, #0]
 8011e90:	3301      	adds	r3, #1
 8011e92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011e96:	b914      	cbnz	r4, 8011e9e <__match+0x12>
 8011e98:	6003      	str	r3, [r0, #0]
 8011e9a:	2001      	movs	r0, #1
 8011e9c:	bd30      	pop	{r4, r5, pc}
 8011e9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011ea2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8011ea6:	2d19      	cmp	r5, #25
 8011ea8:	bf98      	it	ls
 8011eaa:	3220      	addls	r2, #32
 8011eac:	42a2      	cmp	r2, r4
 8011eae:	d0f0      	beq.n	8011e92 <__match+0x6>
 8011eb0:	2000      	movs	r0, #0
 8011eb2:	e7f3      	b.n	8011e9c <__match+0x10>

08011eb4 <__hexnan>:
 8011eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011eb8:	680b      	ldr	r3, [r1, #0]
 8011eba:	115e      	asrs	r6, r3, #5
 8011ebc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011ec0:	f013 031f 	ands.w	r3, r3, #31
 8011ec4:	b087      	sub	sp, #28
 8011ec6:	bf18      	it	ne
 8011ec8:	3604      	addne	r6, #4
 8011eca:	2500      	movs	r5, #0
 8011ecc:	1f37      	subs	r7, r6, #4
 8011ece:	4690      	mov	r8, r2
 8011ed0:	6802      	ldr	r2, [r0, #0]
 8011ed2:	9301      	str	r3, [sp, #4]
 8011ed4:	4682      	mov	sl, r0
 8011ed6:	f846 5c04 	str.w	r5, [r6, #-4]
 8011eda:	46b9      	mov	r9, r7
 8011edc:	463c      	mov	r4, r7
 8011ede:	9502      	str	r5, [sp, #8]
 8011ee0:	46ab      	mov	fp, r5
 8011ee2:	7851      	ldrb	r1, [r2, #1]
 8011ee4:	1c53      	adds	r3, r2, #1
 8011ee6:	9303      	str	r3, [sp, #12]
 8011ee8:	b341      	cbz	r1, 8011f3c <__hexnan+0x88>
 8011eea:	4608      	mov	r0, r1
 8011eec:	9205      	str	r2, [sp, #20]
 8011eee:	9104      	str	r1, [sp, #16]
 8011ef0:	f7ff fd5e 	bl	80119b0 <__hexdig_fun>
 8011ef4:	2800      	cmp	r0, #0
 8011ef6:	d14f      	bne.n	8011f98 <__hexnan+0xe4>
 8011ef8:	9904      	ldr	r1, [sp, #16]
 8011efa:	9a05      	ldr	r2, [sp, #20]
 8011efc:	2920      	cmp	r1, #32
 8011efe:	d818      	bhi.n	8011f32 <__hexnan+0x7e>
 8011f00:	9b02      	ldr	r3, [sp, #8]
 8011f02:	459b      	cmp	fp, r3
 8011f04:	dd13      	ble.n	8011f2e <__hexnan+0x7a>
 8011f06:	454c      	cmp	r4, r9
 8011f08:	d206      	bcs.n	8011f18 <__hexnan+0x64>
 8011f0a:	2d07      	cmp	r5, #7
 8011f0c:	dc04      	bgt.n	8011f18 <__hexnan+0x64>
 8011f0e:	462a      	mov	r2, r5
 8011f10:	4649      	mov	r1, r9
 8011f12:	4620      	mov	r0, r4
 8011f14:	f7ff ffa8 	bl	8011e68 <L_shift>
 8011f18:	4544      	cmp	r4, r8
 8011f1a:	d950      	bls.n	8011fbe <__hexnan+0x10a>
 8011f1c:	2300      	movs	r3, #0
 8011f1e:	f1a4 0904 	sub.w	r9, r4, #4
 8011f22:	f844 3c04 	str.w	r3, [r4, #-4]
 8011f26:	f8cd b008 	str.w	fp, [sp, #8]
 8011f2a:	464c      	mov	r4, r9
 8011f2c:	461d      	mov	r5, r3
 8011f2e:	9a03      	ldr	r2, [sp, #12]
 8011f30:	e7d7      	b.n	8011ee2 <__hexnan+0x2e>
 8011f32:	2929      	cmp	r1, #41	; 0x29
 8011f34:	d156      	bne.n	8011fe4 <__hexnan+0x130>
 8011f36:	3202      	adds	r2, #2
 8011f38:	f8ca 2000 	str.w	r2, [sl]
 8011f3c:	f1bb 0f00 	cmp.w	fp, #0
 8011f40:	d050      	beq.n	8011fe4 <__hexnan+0x130>
 8011f42:	454c      	cmp	r4, r9
 8011f44:	d206      	bcs.n	8011f54 <__hexnan+0xa0>
 8011f46:	2d07      	cmp	r5, #7
 8011f48:	dc04      	bgt.n	8011f54 <__hexnan+0xa0>
 8011f4a:	462a      	mov	r2, r5
 8011f4c:	4649      	mov	r1, r9
 8011f4e:	4620      	mov	r0, r4
 8011f50:	f7ff ff8a 	bl	8011e68 <L_shift>
 8011f54:	4544      	cmp	r4, r8
 8011f56:	d934      	bls.n	8011fc2 <__hexnan+0x10e>
 8011f58:	f1a8 0204 	sub.w	r2, r8, #4
 8011f5c:	4623      	mov	r3, r4
 8011f5e:	f853 1b04 	ldr.w	r1, [r3], #4
 8011f62:	f842 1f04 	str.w	r1, [r2, #4]!
 8011f66:	429f      	cmp	r7, r3
 8011f68:	d2f9      	bcs.n	8011f5e <__hexnan+0xaa>
 8011f6a:	1b3b      	subs	r3, r7, r4
 8011f6c:	f023 0303 	bic.w	r3, r3, #3
 8011f70:	3304      	adds	r3, #4
 8011f72:	3401      	adds	r4, #1
 8011f74:	3e03      	subs	r6, #3
 8011f76:	42b4      	cmp	r4, r6
 8011f78:	bf88      	it	hi
 8011f7a:	2304      	movhi	r3, #4
 8011f7c:	4443      	add	r3, r8
 8011f7e:	2200      	movs	r2, #0
 8011f80:	f843 2b04 	str.w	r2, [r3], #4
 8011f84:	429f      	cmp	r7, r3
 8011f86:	d2fb      	bcs.n	8011f80 <__hexnan+0xcc>
 8011f88:	683b      	ldr	r3, [r7, #0]
 8011f8a:	b91b      	cbnz	r3, 8011f94 <__hexnan+0xe0>
 8011f8c:	4547      	cmp	r7, r8
 8011f8e:	d127      	bne.n	8011fe0 <__hexnan+0x12c>
 8011f90:	2301      	movs	r3, #1
 8011f92:	603b      	str	r3, [r7, #0]
 8011f94:	2005      	movs	r0, #5
 8011f96:	e026      	b.n	8011fe6 <__hexnan+0x132>
 8011f98:	3501      	adds	r5, #1
 8011f9a:	2d08      	cmp	r5, #8
 8011f9c:	f10b 0b01 	add.w	fp, fp, #1
 8011fa0:	dd06      	ble.n	8011fb0 <__hexnan+0xfc>
 8011fa2:	4544      	cmp	r4, r8
 8011fa4:	d9c3      	bls.n	8011f2e <__hexnan+0x7a>
 8011fa6:	2300      	movs	r3, #0
 8011fa8:	f844 3c04 	str.w	r3, [r4, #-4]
 8011fac:	2501      	movs	r5, #1
 8011fae:	3c04      	subs	r4, #4
 8011fb0:	6822      	ldr	r2, [r4, #0]
 8011fb2:	f000 000f 	and.w	r0, r0, #15
 8011fb6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8011fba:	6022      	str	r2, [r4, #0]
 8011fbc:	e7b7      	b.n	8011f2e <__hexnan+0x7a>
 8011fbe:	2508      	movs	r5, #8
 8011fc0:	e7b5      	b.n	8011f2e <__hexnan+0x7a>
 8011fc2:	9b01      	ldr	r3, [sp, #4]
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d0df      	beq.n	8011f88 <__hexnan+0xd4>
 8011fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8011fcc:	f1c3 0320 	rsb	r3, r3, #32
 8011fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8011fd4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011fd8:	401a      	ands	r2, r3
 8011fda:	f846 2c04 	str.w	r2, [r6, #-4]
 8011fde:	e7d3      	b.n	8011f88 <__hexnan+0xd4>
 8011fe0:	3f04      	subs	r7, #4
 8011fe2:	e7d1      	b.n	8011f88 <__hexnan+0xd4>
 8011fe4:	2004      	movs	r0, #4
 8011fe6:	b007      	add	sp, #28
 8011fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011fec <_localeconv_r>:
 8011fec:	4800      	ldr	r0, [pc, #0]	; (8011ff0 <_localeconv_r+0x4>)
 8011fee:	4770      	bx	lr
 8011ff0:	20000420 	.word	0x20000420

08011ff4 <_lseek_r>:
 8011ff4:	b538      	push	{r3, r4, r5, lr}
 8011ff6:	4d07      	ldr	r5, [pc, #28]	; (8012014 <_lseek_r+0x20>)
 8011ff8:	4604      	mov	r4, r0
 8011ffa:	4608      	mov	r0, r1
 8011ffc:	4611      	mov	r1, r2
 8011ffe:	2200      	movs	r2, #0
 8012000:	602a      	str	r2, [r5, #0]
 8012002:	461a      	mov	r2, r3
 8012004:	f7f0 fc7c 	bl	8002900 <_lseek>
 8012008:	1c43      	adds	r3, r0, #1
 801200a:	d102      	bne.n	8012012 <_lseek_r+0x1e>
 801200c:	682b      	ldr	r3, [r5, #0]
 801200e:	b103      	cbz	r3, 8012012 <_lseek_r+0x1e>
 8012010:	6023      	str	r3, [r4, #0]
 8012012:	bd38      	pop	{r3, r4, r5, pc}
 8012014:	20000770 	.word	0x20000770

08012018 <malloc>:
 8012018:	4b02      	ldr	r3, [pc, #8]	; (8012024 <malloc+0xc>)
 801201a:	4601      	mov	r1, r0
 801201c:	6818      	ldr	r0, [r3, #0]
 801201e:	f000 bd59 	b.w	8012ad4 <_malloc_r>
 8012022:	bf00      	nop
 8012024:	200002c8 	.word	0x200002c8

08012028 <__ascii_mbtowc>:
 8012028:	b082      	sub	sp, #8
 801202a:	b901      	cbnz	r1, 801202e <__ascii_mbtowc+0x6>
 801202c:	a901      	add	r1, sp, #4
 801202e:	b142      	cbz	r2, 8012042 <__ascii_mbtowc+0x1a>
 8012030:	b14b      	cbz	r3, 8012046 <__ascii_mbtowc+0x1e>
 8012032:	7813      	ldrb	r3, [r2, #0]
 8012034:	600b      	str	r3, [r1, #0]
 8012036:	7812      	ldrb	r2, [r2, #0]
 8012038:	1e10      	subs	r0, r2, #0
 801203a:	bf18      	it	ne
 801203c:	2001      	movne	r0, #1
 801203e:	b002      	add	sp, #8
 8012040:	4770      	bx	lr
 8012042:	4610      	mov	r0, r2
 8012044:	e7fb      	b.n	801203e <__ascii_mbtowc+0x16>
 8012046:	f06f 0001 	mvn.w	r0, #1
 801204a:	e7f8      	b.n	801203e <__ascii_mbtowc+0x16>

0801204c <_Balloc>:
 801204c:	b570      	push	{r4, r5, r6, lr}
 801204e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012050:	4604      	mov	r4, r0
 8012052:	460d      	mov	r5, r1
 8012054:	b976      	cbnz	r6, 8012074 <_Balloc+0x28>
 8012056:	2010      	movs	r0, #16
 8012058:	f7ff ffde 	bl	8012018 <malloc>
 801205c:	4602      	mov	r2, r0
 801205e:	6260      	str	r0, [r4, #36]	; 0x24
 8012060:	b920      	cbnz	r0, 801206c <_Balloc+0x20>
 8012062:	4b18      	ldr	r3, [pc, #96]	; (80120c4 <_Balloc+0x78>)
 8012064:	4818      	ldr	r0, [pc, #96]	; (80120c8 <_Balloc+0x7c>)
 8012066:	2166      	movs	r1, #102	; 0x66
 8012068:	f001 fb46 	bl	80136f8 <__assert_func>
 801206c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012070:	6006      	str	r6, [r0, #0]
 8012072:	60c6      	str	r6, [r0, #12]
 8012074:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012076:	68f3      	ldr	r3, [r6, #12]
 8012078:	b183      	cbz	r3, 801209c <_Balloc+0x50>
 801207a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801207c:	68db      	ldr	r3, [r3, #12]
 801207e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012082:	b9b8      	cbnz	r0, 80120b4 <_Balloc+0x68>
 8012084:	2101      	movs	r1, #1
 8012086:	fa01 f605 	lsl.w	r6, r1, r5
 801208a:	1d72      	adds	r2, r6, #5
 801208c:	0092      	lsls	r2, r2, #2
 801208e:	4620      	mov	r0, r4
 8012090:	f000 fc9d 	bl	80129ce <_calloc_r>
 8012094:	b160      	cbz	r0, 80120b0 <_Balloc+0x64>
 8012096:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801209a:	e00e      	b.n	80120ba <_Balloc+0x6e>
 801209c:	2221      	movs	r2, #33	; 0x21
 801209e:	2104      	movs	r1, #4
 80120a0:	4620      	mov	r0, r4
 80120a2:	f000 fc94 	bl	80129ce <_calloc_r>
 80120a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80120a8:	60f0      	str	r0, [r6, #12]
 80120aa:	68db      	ldr	r3, [r3, #12]
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d1e4      	bne.n	801207a <_Balloc+0x2e>
 80120b0:	2000      	movs	r0, #0
 80120b2:	bd70      	pop	{r4, r5, r6, pc}
 80120b4:	6802      	ldr	r2, [r0, #0]
 80120b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80120ba:	2300      	movs	r3, #0
 80120bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80120c0:	e7f7      	b.n	80120b2 <_Balloc+0x66>
 80120c2:	bf00      	nop
 80120c4:	0801483e 	.word	0x0801483e
 80120c8:	0801493c 	.word	0x0801493c

080120cc <_Bfree>:
 80120cc:	b570      	push	{r4, r5, r6, lr}
 80120ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80120d0:	4605      	mov	r5, r0
 80120d2:	460c      	mov	r4, r1
 80120d4:	b976      	cbnz	r6, 80120f4 <_Bfree+0x28>
 80120d6:	2010      	movs	r0, #16
 80120d8:	f7ff ff9e 	bl	8012018 <malloc>
 80120dc:	4602      	mov	r2, r0
 80120de:	6268      	str	r0, [r5, #36]	; 0x24
 80120e0:	b920      	cbnz	r0, 80120ec <_Bfree+0x20>
 80120e2:	4b09      	ldr	r3, [pc, #36]	; (8012108 <_Bfree+0x3c>)
 80120e4:	4809      	ldr	r0, [pc, #36]	; (801210c <_Bfree+0x40>)
 80120e6:	218a      	movs	r1, #138	; 0x8a
 80120e8:	f001 fb06 	bl	80136f8 <__assert_func>
 80120ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80120f0:	6006      	str	r6, [r0, #0]
 80120f2:	60c6      	str	r6, [r0, #12]
 80120f4:	b13c      	cbz	r4, 8012106 <_Bfree+0x3a>
 80120f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80120f8:	6862      	ldr	r2, [r4, #4]
 80120fa:	68db      	ldr	r3, [r3, #12]
 80120fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012100:	6021      	str	r1, [r4, #0]
 8012102:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012106:	bd70      	pop	{r4, r5, r6, pc}
 8012108:	0801483e 	.word	0x0801483e
 801210c:	0801493c 	.word	0x0801493c

08012110 <__multadd>:
 8012110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012114:	690d      	ldr	r5, [r1, #16]
 8012116:	4607      	mov	r7, r0
 8012118:	460c      	mov	r4, r1
 801211a:	461e      	mov	r6, r3
 801211c:	f101 0c14 	add.w	ip, r1, #20
 8012120:	2000      	movs	r0, #0
 8012122:	f8dc 3000 	ldr.w	r3, [ip]
 8012126:	b299      	uxth	r1, r3
 8012128:	fb02 6101 	mla	r1, r2, r1, r6
 801212c:	0c1e      	lsrs	r6, r3, #16
 801212e:	0c0b      	lsrs	r3, r1, #16
 8012130:	fb02 3306 	mla	r3, r2, r6, r3
 8012134:	b289      	uxth	r1, r1
 8012136:	3001      	adds	r0, #1
 8012138:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801213c:	4285      	cmp	r5, r0
 801213e:	f84c 1b04 	str.w	r1, [ip], #4
 8012142:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012146:	dcec      	bgt.n	8012122 <__multadd+0x12>
 8012148:	b30e      	cbz	r6, 801218e <__multadd+0x7e>
 801214a:	68a3      	ldr	r3, [r4, #8]
 801214c:	42ab      	cmp	r3, r5
 801214e:	dc19      	bgt.n	8012184 <__multadd+0x74>
 8012150:	6861      	ldr	r1, [r4, #4]
 8012152:	4638      	mov	r0, r7
 8012154:	3101      	adds	r1, #1
 8012156:	f7ff ff79 	bl	801204c <_Balloc>
 801215a:	4680      	mov	r8, r0
 801215c:	b928      	cbnz	r0, 801216a <__multadd+0x5a>
 801215e:	4602      	mov	r2, r0
 8012160:	4b0c      	ldr	r3, [pc, #48]	; (8012194 <__multadd+0x84>)
 8012162:	480d      	ldr	r0, [pc, #52]	; (8012198 <__multadd+0x88>)
 8012164:	21b5      	movs	r1, #181	; 0xb5
 8012166:	f001 fac7 	bl	80136f8 <__assert_func>
 801216a:	6922      	ldr	r2, [r4, #16]
 801216c:	3202      	adds	r2, #2
 801216e:	f104 010c 	add.w	r1, r4, #12
 8012172:	0092      	lsls	r2, r2, #2
 8012174:	300c      	adds	r0, #12
 8012176:	f7fc ff3b 	bl	800eff0 <memcpy>
 801217a:	4621      	mov	r1, r4
 801217c:	4638      	mov	r0, r7
 801217e:	f7ff ffa5 	bl	80120cc <_Bfree>
 8012182:	4644      	mov	r4, r8
 8012184:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012188:	3501      	adds	r5, #1
 801218a:	615e      	str	r6, [r3, #20]
 801218c:	6125      	str	r5, [r4, #16]
 801218e:	4620      	mov	r0, r4
 8012190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012194:	080148b0 	.word	0x080148b0
 8012198:	0801493c 	.word	0x0801493c

0801219c <__s2b>:
 801219c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80121a0:	460c      	mov	r4, r1
 80121a2:	4615      	mov	r5, r2
 80121a4:	461f      	mov	r7, r3
 80121a6:	2209      	movs	r2, #9
 80121a8:	3308      	adds	r3, #8
 80121aa:	4606      	mov	r6, r0
 80121ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80121b0:	2100      	movs	r1, #0
 80121b2:	2201      	movs	r2, #1
 80121b4:	429a      	cmp	r2, r3
 80121b6:	db09      	blt.n	80121cc <__s2b+0x30>
 80121b8:	4630      	mov	r0, r6
 80121ba:	f7ff ff47 	bl	801204c <_Balloc>
 80121be:	b940      	cbnz	r0, 80121d2 <__s2b+0x36>
 80121c0:	4602      	mov	r2, r0
 80121c2:	4b19      	ldr	r3, [pc, #100]	; (8012228 <__s2b+0x8c>)
 80121c4:	4819      	ldr	r0, [pc, #100]	; (801222c <__s2b+0x90>)
 80121c6:	21ce      	movs	r1, #206	; 0xce
 80121c8:	f001 fa96 	bl	80136f8 <__assert_func>
 80121cc:	0052      	lsls	r2, r2, #1
 80121ce:	3101      	adds	r1, #1
 80121d0:	e7f0      	b.n	80121b4 <__s2b+0x18>
 80121d2:	9b08      	ldr	r3, [sp, #32]
 80121d4:	6143      	str	r3, [r0, #20]
 80121d6:	2d09      	cmp	r5, #9
 80121d8:	f04f 0301 	mov.w	r3, #1
 80121dc:	6103      	str	r3, [r0, #16]
 80121de:	dd16      	ble.n	801220e <__s2b+0x72>
 80121e0:	f104 0909 	add.w	r9, r4, #9
 80121e4:	46c8      	mov	r8, r9
 80121e6:	442c      	add	r4, r5
 80121e8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80121ec:	4601      	mov	r1, r0
 80121ee:	3b30      	subs	r3, #48	; 0x30
 80121f0:	220a      	movs	r2, #10
 80121f2:	4630      	mov	r0, r6
 80121f4:	f7ff ff8c 	bl	8012110 <__multadd>
 80121f8:	45a0      	cmp	r8, r4
 80121fa:	d1f5      	bne.n	80121e8 <__s2b+0x4c>
 80121fc:	f1a5 0408 	sub.w	r4, r5, #8
 8012200:	444c      	add	r4, r9
 8012202:	1b2d      	subs	r5, r5, r4
 8012204:	1963      	adds	r3, r4, r5
 8012206:	42bb      	cmp	r3, r7
 8012208:	db04      	blt.n	8012214 <__s2b+0x78>
 801220a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801220e:	340a      	adds	r4, #10
 8012210:	2509      	movs	r5, #9
 8012212:	e7f6      	b.n	8012202 <__s2b+0x66>
 8012214:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012218:	4601      	mov	r1, r0
 801221a:	3b30      	subs	r3, #48	; 0x30
 801221c:	220a      	movs	r2, #10
 801221e:	4630      	mov	r0, r6
 8012220:	f7ff ff76 	bl	8012110 <__multadd>
 8012224:	e7ee      	b.n	8012204 <__s2b+0x68>
 8012226:	bf00      	nop
 8012228:	080148b0 	.word	0x080148b0
 801222c:	0801493c 	.word	0x0801493c

08012230 <__hi0bits>:
 8012230:	0c03      	lsrs	r3, r0, #16
 8012232:	041b      	lsls	r3, r3, #16
 8012234:	b9d3      	cbnz	r3, 801226c <__hi0bits+0x3c>
 8012236:	0400      	lsls	r0, r0, #16
 8012238:	2310      	movs	r3, #16
 801223a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801223e:	bf04      	itt	eq
 8012240:	0200      	lsleq	r0, r0, #8
 8012242:	3308      	addeq	r3, #8
 8012244:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012248:	bf04      	itt	eq
 801224a:	0100      	lsleq	r0, r0, #4
 801224c:	3304      	addeq	r3, #4
 801224e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012252:	bf04      	itt	eq
 8012254:	0080      	lsleq	r0, r0, #2
 8012256:	3302      	addeq	r3, #2
 8012258:	2800      	cmp	r0, #0
 801225a:	db05      	blt.n	8012268 <__hi0bits+0x38>
 801225c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012260:	f103 0301 	add.w	r3, r3, #1
 8012264:	bf08      	it	eq
 8012266:	2320      	moveq	r3, #32
 8012268:	4618      	mov	r0, r3
 801226a:	4770      	bx	lr
 801226c:	2300      	movs	r3, #0
 801226e:	e7e4      	b.n	801223a <__hi0bits+0xa>

08012270 <__lo0bits>:
 8012270:	6803      	ldr	r3, [r0, #0]
 8012272:	f013 0207 	ands.w	r2, r3, #7
 8012276:	4601      	mov	r1, r0
 8012278:	d00b      	beq.n	8012292 <__lo0bits+0x22>
 801227a:	07da      	lsls	r2, r3, #31
 801227c:	d423      	bmi.n	80122c6 <__lo0bits+0x56>
 801227e:	0798      	lsls	r0, r3, #30
 8012280:	bf49      	itett	mi
 8012282:	085b      	lsrmi	r3, r3, #1
 8012284:	089b      	lsrpl	r3, r3, #2
 8012286:	2001      	movmi	r0, #1
 8012288:	600b      	strmi	r3, [r1, #0]
 801228a:	bf5c      	itt	pl
 801228c:	600b      	strpl	r3, [r1, #0]
 801228e:	2002      	movpl	r0, #2
 8012290:	4770      	bx	lr
 8012292:	b298      	uxth	r0, r3
 8012294:	b9a8      	cbnz	r0, 80122c2 <__lo0bits+0x52>
 8012296:	0c1b      	lsrs	r3, r3, #16
 8012298:	2010      	movs	r0, #16
 801229a:	b2da      	uxtb	r2, r3
 801229c:	b90a      	cbnz	r2, 80122a2 <__lo0bits+0x32>
 801229e:	3008      	adds	r0, #8
 80122a0:	0a1b      	lsrs	r3, r3, #8
 80122a2:	071a      	lsls	r2, r3, #28
 80122a4:	bf04      	itt	eq
 80122a6:	091b      	lsreq	r3, r3, #4
 80122a8:	3004      	addeq	r0, #4
 80122aa:	079a      	lsls	r2, r3, #30
 80122ac:	bf04      	itt	eq
 80122ae:	089b      	lsreq	r3, r3, #2
 80122b0:	3002      	addeq	r0, #2
 80122b2:	07da      	lsls	r2, r3, #31
 80122b4:	d403      	bmi.n	80122be <__lo0bits+0x4e>
 80122b6:	085b      	lsrs	r3, r3, #1
 80122b8:	f100 0001 	add.w	r0, r0, #1
 80122bc:	d005      	beq.n	80122ca <__lo0bits+0x5a>
 80122be:	600b      	str	r3, [r1, #0]
 80122c0:	4770      	bx	lr
 80122c2:	4610      	mov	r0, r2
 80122c4:	e7e9      	b.n	801229a <__lo0bits+0x2a>
 80122c6:	2000      	movs	r0, #0
 80122c8:	4770      	bx	lr
 80122ca:	2020      	movs	r0, #32
 80122cc:	4770      	bx	lr
	...

080122d0 <__i2b>:
 80122d0:	b510      	push	{r4, lr}
 80122d2:	460c      	mov	r4, r1
 80122d4:	2101      	movs	r1, #1
 80122d6:	f7ff feb9 	bl	801204c <_Balloc>
 80122da:	4602      	mov	r2, r0
 80122dc:	b928      	cbnz	r0, 80122ea <__i2b+0x1a>
 80122de:	4b05      	ldr	r3, [pc, #20]	; (80122f4 <__i2b+0x24>)
 80122e0:	4805      	ldr	r0, [pc, #20]	; (80122f8 <__i2b+0x28>)
 80122e2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80122e6:	f001 fa07 	bl	80136f8 <__assert_func>
 80122ea:	2301      	movs	r3, #1
 80122ec:	6144      	str	r4, [r0, #20]
 80122ee:	6103      	str	r3, [r0, #16]
 80122f0:	bd10      	pop	{r4, pc}
 80122f2:	bf00      	nop
 80122f4:	080148b0 	.word	0x080148b0
 80122f8:	0801493c 	.word	0x0801493c

080122fc <__multiply>:
 80122fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012300:	4691      	mov	r9, r2
 8012302:	690a      	ldr	r2, [r1, #16]
 8012304:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012308:	429a      	cmp	r2, r3
 801230a:	bfb8      	it	lt
 801230c:	460b      	movlt	r3, r1
 801230e:	460c      	mov	r4, r1
 8012310:	bfbc      	itt	lt
 8012312:	464c      	movlt	r4, r9
 8012314:	4699      	movlt	r9, r3
 8012316:	6927      	ldr	r7, [r4, #16]
 8012318:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801231c:	68a3      	ldr	r3, [r4, #8]
 801231e:	6861      	ldr	r1, [r4, #4]
 8012320:	eb07 060a 	add.w	r6, r7, sl
 8012324:	42b3      	cmp	r3, r6
 8012326:	b085      	sub	sp, #20
 8012328:	bfb8      	it	lt
 801232a:	3101      	addlt	r1, #1
 801232c:	f7ff fe8e 	bl	801204c <_Balloc>
 8012330:	b930      	cbnz	r0, 8012340 <__multiply+0x44>
 8012332:	4602      	mov	r2, r0
 8012334:	4b44      	ldr	r3, [pc, #272]	; (8012448 <__multiply+0x14c>)
 8012336:	4845      	ldr	r0, [pc, #276]	; (801244c <__multiply+0x150>)
 8012338:	f240 115d 	movw	r1, #349	; 0x15d
 801233c:	f001 f9dc 	bl	80136f8 <__assert_func>
 8012340:	f100 0514 	add.w	r5, r0, #20
 8012344:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012348:	462b      	mov	r3, r5
 801234a:	2200      	movs	r2, #0
 801234c:	4543      	cmp	r3, r8
 801234e:	d321      	bcc.n	8012394 <__multiply+0x98>
 8012350:	f104 0314 	add.w	r3, r4, #20
 8012354:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012358:	f109 0314 	add.w	r3, r9, #20
 801235c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012360:	9202      	str	r2, [sp, #8]
 8012362:	1b3a      	subs	r2, r7, r4
 8012364:	3a15      	subs	r2, #21
 8012366:	f022 0203 	bic.w	r2, r2, #3
 801236a:	3204      	adds	r2, #4
 801236c:	f104 0115 	add.w	r1, r4, #21
 8012370:	428f      	cmp	r7, r1
 8012372:	bf38      	it	cc
 8012374:	2204      	movcc	r2, #4
 8012376:	9201      	str	r2, [sp, #4]
 8012378:	9a02      	ldr	r2, [sp, #8]
 801237a:	9303      	str	r3, [sp, #12]
 801237c:	429a      	cmp	r2, r3
 801237e:	d80c      	bhi.n	801239a <__multiply+0x9e>
 8012380:	2e00      	cmp	r6, #0
 8012382:	dd03      	ble.n	801238c <__multiply+0x90>
 8012384:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012388:	2b00      	cmp	r3, #0
 801238a:	d05a      	beq.n	8012442 <__multiply+0x146>
 801238c:	6106      	str	r6, [r0, #16]
 801238e:	b005      	add	sp, #20
 8012390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012394:	f843 2b04 	str.w	r2, [r3], #4
 8012398:	e7d8      	b.n	801234c <__multiply+0x50>
 801239a:	f8b3 a000 	ldrh.w	sl, [r3]
 801239e:	f1ba 0f00 	cmp.w	sl, #0
 80123a2:	d024      	beq.n	80123ee <__multiply+0xf2>
 80123a4:	f104 0e14 	add.w	lr, r4, #20
 80123a8:	46a9      	mov	r9, r5
 80123aa:	f04f 0c00 	mov.w	ip, #0
 80123ae:	f85e 2b04 	ldr.w	r2, [lr], #4
 80123b2:	f8d9 1000 	ldr.w	r1, [r9]
 80123b6:	fa1f fb82 	uxth.w	fp, r2
 80123ba:	b289      	uxth	r1, r1
 80123bc:	fb0a 110b 	mla	r1, sl, fp, r1
 80123c0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80123c4:	f8d9 2000 	ldr.w	r2, [r9]
 80123c8:	4461      	add	r1, ip
 80123ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80123ce:	fb0a c20b 	mla	r2, sl, fp, ip
 80123d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80123d6:	b289      	uxth	r1, r1
 80123d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80123dc:	4577      	cmp	r7, lr
 80123de:	f849 1b04 	str.w	r1, [r9], #4
 80123e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80123e6:	d8e2      	bhi.n	80123ae <__multiply+0xb2>
 80123e8:	9a01      	ldr	r2, [sp, #4]
 80123ea:	f845 c002 	str.w	ip, [r5, r2]
 80123ee:	9a03      	ldr	r2, [sp, #12]
 80123f0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80123f4:	3304      	adds	r3, #4
 80123f6:	f1b9 0f00 	cmp.w	r9, #0
 80123fa:	d020      	beq.n	801243e <__multiply+0x142>
 80123fc:	6829      	ldr	r1, [r5, #0]
 80123fe:	f104 0c14 	add.w	ip, r4, #20
 8012402:	46ae      	mov	lr, r5
 8012404:	f04f 0a00 	mov.w	sl, #0
 8012408:	f8bc b000 	ldrh.w	fp, [ip]
 801240c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012410:	fb09 220b 	mla	r2, r9, fp, r2
 8012414:	4492      	add	sl, r2
 8012416:	b289      	uxth	r1, r1
 8012418:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801241c:	f84e 1b04 	str.w	r1, [lr], #4
 8012420:	f85c 2b04 	ldr.w	r2, [ip], #4
 8012424:	f8be 1000 	ldrh.w	r1, [lr]
 8012428:	0c12      	lsrs	r2, r2, #16
 801242a:	fb09 1102 	mla	r1, r9, r2, r1
 801242e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8012432:	4567      	cmp	r7, ip
 8012434:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012438:	d8e6      	bhi.n	8012408 <__multiply+0x10c>
 801243a:	9a01      	ldr	r2, [sp, #4]
 801243c:	50a9      	str	r1, [r5, r2]
 801243e:	3504      	adds	r5, #4
 8012440:	e79a      	b.n	8012378 <__multiply+0x7c>
 8012442:	3e01      	subs	r6, #1
 8012444:	e79c      	b.n	8012380 <__multiply+0x84>
 8012446:	bf00      	nop
 8012448:	080148b0 	.word	0x080148b0
 801244c:	0801493c 	.word	0x0801493c

08012450 <__pow5mult>:
 8012450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012454:	4615      	mov	r5, r2
 8012456:	f012 0203 	ands.w	r2, r2, #3
 801245a:	4606      	mov	r6, r0
 801245c:	460f      	mov	r7, r1
 801245e:	d007      	beq.n	8012470 <__pow5mult+0x20>
 8012460:	4c25      	ldr	r4, [pc, #148]	; (80124f8 <__pow5mult+0xa8>)
 8012462:	3a01      	subs	r2, #1
 8012464:	2300      	movs	r3, #0
 8012466:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801246a:	f7ff fe51 	bl	8012110 <__multadd>
 801246e:	4607      	mov	r7, r0
 8012470:	10ad      	asrs	r5, r5, #2
 8012472:	d03d      	beq.n	80124f0 <__pow5mult+0xa0>
 8012474:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012476:	b97c      	cbnz	r4, 8012498 <__pow5mult+0x48>
 8012478:	2010      	movs	r0, #16
 801247a:	f7ff fdcd 	bl	8012018 <malloc>
 801247e:	4602      	mov	r2, r0
 8012480:	6270      	str	r0, [r6, #36]	; 0x24
 8012482:	b928      	cbnz	r0, 8012490 <__pow5mult+0x40>
 8012484:	4b1d      	ldr	r3, [pc, #116]	; (80124fc <__pow5mult+0xac>)
 8012486:	481e      	ldr	r0, [pc, #120]	; (8012500 <__pow5mult+0xb0>)
 8012488:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801248c:	f001 f934 	bl	80136f8 <__assert_func>
 8012490:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012494:	6004      	str	r4, [r0, #0]
 8012496:	60c4      	str	r4, [r0, #12]
 8012498:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801249c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80124a0:	b94c      	cbnz	r4, 80124b6 <__pow5mult+0x66>
 80124a2:	f240 2171 	movw	r1, #625	; 0x271
 80124a6:	4630      	mov	r0, r6
 80124a8:	f7ff ff12 	bl	80122d0 <__i2b>
 80124ac:	2300      	movs	r3, #0
 80124ae:	f8c8 0008 	str.w	r0, [r8, #8]
 80124b2:	4604      	mov	r4, r0
 80124b4:	6003      	str	r3, [r0, #0]
 80124b6:	f04f 0900 	mov.w	r9, #0
 80124ba:	07eb      	lsls	r3, r5, #31
 80124bc:	d50a      	bpl.n	80124d4 <__pow5mult+0x84>
 80124be:	4639      	mov	r1, r7
 80124c0:	4622      	mov	r2, r4
 80124c2:	4630      	mov	r0, r6
 80124c4:	f7ff ff1a 	bl	80122fc <__multiply>
 80124c8:	4639      	mov	r1, r7
 80124ca:	4680      	mov	r8, r0
 80124cc:	4630      	mov	r0, r6
 80124ce:	f7ff fdfd 	bl	80120cc <_Bfree>
 80124d2:	4647      	mov	r7, r8
 80124d4:	106d      	asrs	r5, r5, #1
 80124d6:	d00b      	beq.n	80124f0 <__pow5mult+0xa0>
 80124d8:	6820      	ldr	r0, [r4, #0]
 80124da:	b938      	cbnz	r0, 80124ec <__pow5mult+0x9c>
 80124dc:	4622      	mov	r2, r4
 80124de:	4621      	mov	r1, r4
 80124e0:	4630      	mov	r0, r6
 80124e2:	f7ff ff0b 	bl	80122fc <__multiply>
 80124e6:	6020      	str	r0, [r4, #0]
 80124e8:	f8c0 9000 	str.w	r9, [r0]
 80124ec:	4604      	mov	r4, r0
 80124ee:	e7e4      	b.n	80124ba <__pow5mult+0x6a>
 80124f0:	4638      	mov	r0, r7
 80124f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80124f6:	bf00      	nop
 80124f8:	08014a88 	.word	0x08014a88
 80124fc:	0801483e 	.word	0x0801483e
 8012500:	0801493c 	.word	0x0801493c

08012504 <__lshift>:
 8012504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012508:	460c      	mov	r4, r1
 801250a:	6849      	ldr	r1, [r1, #4]
 801250c:	6923      	ldr	r3, [r4, #16]
 801250e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012512:	68a3      	ldr	r3, [r4, #8]
 8012514:	4607      	mov	r7, r0
 8012516:	4691      	mov	r9, r2
 8012518:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801251c:	f108 0601 	add.w	r6, r8, #1
 8012520:	42b3      	cmp	r3, r6
 8012522:	db0b      	blt.n	801253c <__lshift+0x38>
 8012524:	4638      	mov	r0, r7
 8012526:	f7ff fd91 	bl	801204c <_Balloc>
 801252a:	4605      	mov	r5, r0
 801252c:	b948      	cbnz	r0, 8012542 <__lshift+0x3e>
 801252e:	4602      	mov	r2, r0
 8012530:	4b2a      	ldr	r3, [pc, #168]	; (80125dc <__lshift+0xd8>)
 8012532:	482b      	ldr	r0, [pc, #172]	; (80125e0 <__lshift+0xdc>)
 8012534:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012538:	f001 f8de 	bl	80136f8 <__assert_func>
 801253c:	3101      	adds	r1, #1
 801253e:	005b      	lsls	r3, r3, #1
 8012540:	e7ee      	b.n	8012520 <__lshift+0x1c>
 8012542:	2300      	movs	r3, #0
 8012544:	f100 0114 	add.w	r1, r0, #20
 8012548:	f100 0210 	add.w	r2, r0, #16
 801254c:	4618      	mov	r0, r3
 801254e:	4553      	cmp	r3, sl
 8012550:	db37      	blt.n	80125c2 <__lshift+0xbe>
 8012552:	6920      	ldr	r0, [r4, #16]
 8012554:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012558:	f104 0314 	add.w	r3, r4, #20
 801255c:	f019 091f 	ands.w	r9, r9, #31
 8012560:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012564:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8012568:	d02f      	beq.n	80125ca <__lshift+0xc6>
 801256a:	f1c9 0e20 	rsb	lr, r9, #32
 801256e:	468a      	mov	sl, r1
 8012570:	f04f 0c00 	mov.w	ip, #0
 8012574:	681a      	ldr	r2, [r3, #0]
 8012576:	fa02 f209 	lsl.w	r2, r2, r9
 801257a:	ea42 020c 	orr.w	r2, r2, ip
 801257e:	f84a 2b04 	str.w	r2, [sl], #4
 8012582:	f853 2b04 	ldr.w	r2, [r3], #4
 8012586:	4298      	cmp	r0, r3
 8012588:	fa22 fc0e 	lsr.w	ip, r2, lr
 801258c:	d8f2      	bhi.n	8012574 <__lshift+0x70>
 801258e:	1b03      	subs	r3, r0, r4
 8012590:	3b15      	subs	r3, #21
 8012592:	f023 0303 	bic.w	r3, r3, #3
 8012596:	3304      	adds	r3, #4
 8012598:	f104 0215 	add.w	r2, r4, #21
 801259c:	4290      	cmp	r0, r2
 801259e:	bf38      	it	cc
 80125a0:	2304      	movcc	r3, #4
 80125a2:	f841 c003 	str.w	ip, [r1, r3]
 80125a6:	f1bc 0f00 	cmp.w	ip, #0
 80125aa:	d001      	beq.n	80125b0 <__lshift+0xac>
 80125ac:	f108 0602 	add.w	r6, r8, #2
 80125b0:	3e01      	subs	r6, #1
 80125b2:	4638      	mov	r0, r7
 80125b4:	612e      	str	r6, [r5, #16]
 80125b6:	4621      	mov	r1, r4
 80125b8:	f7ff fd88 	bl	80120cc <_Bfree>
 80125bc:	4628      	mov	r0, r5
 80125be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80125c2:	f842 0f04 	str.w	r0, [r2, #4]!
 80125c6:	3301      	adds	r3, #1
 80125c8:	e7c1      	b.n	801254e <__lshift+0x4a>
 80125ca:	3904      	subs	r1, #4
 80125cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80125d0:	f841 2f04 	str.w	r2, [r1, #4]!
 80125d4:	4298      	cmp	r0, r3
 80125d6:	d8f9      	bhi.n	80125cc <__lshift+0xc8>
 80125d8:	e7ea      	b.n	80125b0 <__lshift+0xac>
 80125da:	bf00      	nop
 80125dc:	080148b0 	.word	0x080148b0
 80125e0:	0801493c 	.word	0x0801493c

080125e4 <__mcmp>:
 80125e4:	b530      	push	{r4, r5, lr}
 80125e6:	6902      	ldr	r2, [r0, #16]
 80125e8:	690c      	ldr	r4, [r1, #16]
 80125ea:	1b12      	subs	r2, r2, r4
 80125ec:	d10e      	bne.n	801260c <__mcmp+0x28>
 80125ee:	f100 0314 	add.w	r3, r0, #20
 80125f2:	3114      	adds	r1, #20
 80125f4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80125f8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80125fc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012600:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012604:	42a5      	cmp	r5, r4
 8012606:	d003      	beq.n	8012610 <__mcmp+0x2c>
 8012608:	d305      	bcc.n	8012616 <__mcmp+0x32>
 801260a:	2201      	movs	r2, #1
 801260c:	4610      	mov	r0, r2
 801260e:	bd30      	pop	{r4, r5, pc}
 8012610:	4283      	cmp	r3, r0
 8012612:	d3f3      	bcc.n	80125fc <__mcmp+0x18>
 8012614:	e7fa      	b.n	801260c <__mcmp+0x28>
 8012616:	f04f 32ff 	mov.w	r2, #4294967295
 801261a:	e7f7      	b.n	801260c <__mcmp+0x28>

0801261c <__mdiff>:
 801261c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012620:	460c      	mov	r4, r1
 8012622:	4606      	mov	r6, r0
 8012624:	4611      	mov	r1, r2
 8012626:	4620      	mov	r0, r4
 8012628:	4690      	mov	r8, r2
 801262a:	f7ff ffdb 	bl	80125e4 <__mcmp>
 801262e:	1e05      	subs	r5, r0, #0
 8012630:	d110      	bne.n	8012654 <__mdiff+0x38>
 8012632:	4629      	mov	r1, r5
 8012634:	4630      	mov	r0, r6
 8012636:	f7ff fd09 	bl	801204c <_Balloc>
 801263a:	b930      	cbnz	r0, 801264a <__mdiff+0x2e>
 801263c:	4b3a      	ldr	r3, [pc, #232]	; (8012728 <__mdiff+0x10c>)
 801263e:	4602      	mov	r2, r0
 8012640:	f240 2132 	movw	r1, #562	; 0x232
 8012644:	4839      	ldr	r0, [pc, #228]	; (801272c <__mdiff+0x110>)
 8012646:	f001 f857 	bl	80136f8 <__assert_func>
 801264a:	2301      	movs	r3, #1
 801264c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012650:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012654:	bfa4      	itt	ge
 8012656:	4643      	movge	r3, r8
 8012658:	46a0      	movge	r8, r4
 801265a:	4630      	mov	r0, r6
 801265c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012660:	bfa6      	itte	ge
 8012662:	461c      	movge	r4, r3
 8012664:	2500      	movge	r5, #0
 8012666:	2501      	movlt	r5, #1
 8012668:	f7ff fcf0 	bl	801204c <_Balloc>
 801266c:	b920      	cbnz	r0, 8012678 <__mdiff+0x5c>
 801266e:	4b2e      	ldr	r3, [pc, #184]	; (8012728 <__mdiff+0x10c>)
 8012670:	4602      	mov	r2, r0
 8012672:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012676:	e7e5      	b.n	8012644 <__mdiff+0x28>
 8012678:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801267c:	6926      	ldr	r6, [r4, #16]
 801267e:	60c5      	str	r5, [r0, #12]
 8012680:	f104 0914 	add.w	r9, r4, #20
 8012684:	f108 0514 	add.w	r5, r8, #20
 8012688:	f100 0e14 	add.w	lr, r0, #20
 801268c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8012690:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8012694:	f108 0210 	add.w	r2, r8, #16
 8012698:	46f2      	mov	sl, lr
 801269a:	2100      	movs	r1, #0
 801269c:	f859 3b04 	ldr.w	r3, [r9], #4
 80126a0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80126a4:	fa1f f883 	uxth.w	r8, r3
 80126a8:	fa11 f18b 	uxtah	r1, r1, fp
 80126ac:	0c1b      	lsrs	r3, r3, #16
 80126ae:	eba1 0808 	sub.w	r8, r1, r8
 80126b2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80126b6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80126ba:	fa1f f888 	uxth.w	r8, r8
 80126be:	1419      	asrs	r1, r3, #16
 80126c0:	454e      	cmp	r6, r9
 80126c2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80126c6:	f84a 3b04 	str.w	r3, [sl], #4
 80126ca:	d8e7      	bhi.n	801269c <__mdiff+0x80>
 80126cc:	1b33      	subs	r3, r6, r4
 80126ce:	3b15      	subs	r3, #21
 80126d0:	f023 0303 	bic.w	r3, r3, #3
 80126d4:	3304      	adds	r3, #4
 80126d6:	3415      	adds	r4, #21
 80126d8:	42a6      	cmp	r6, r4
 80126da:	bf38      	it	cc
 80126dc:	2304      	movcc	r3, #4
 80126de:	441d      	add	r5, r3
 80126e0:	4473      	add	r3, lr
 80126e2:	469e      	mov	lr, r3
 80126e4:	462e      	mov	r6, r5
 80126e6:	4566      	cmp	r6, ip
 80126e8:	d30e      	bcc.n	8012708 <__mdiff+0xec>
 80126ea:	f10c 0203 	add.w	r2, ip, #3
 80126ee:	1b52      	subs	r2, r2, r5
 80126f0:	f022 0203 	bic.w	r2, r2, #3
 80126f4:	3d03      	subs	r5, #3
 80126f6:	45ac      	cmp	ip, r5
 80126f8:	bf38      	it	cc
 80126fa:	2200      	movcc	r2, #0
 80126fc:	441a      	add	r2, r3
 80126fe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8012702:	b17b      	cbz	r3, 8012724 <__mdiff+0x108>
 8012704:	6107      	str	r7, [r0, #16]
 8012706:	e7a3      	b.n	8012650 <__mdiff+0x34>
 8012708:	f856 8b04 	ldr.w	r8, [r6], #4
 801270c:	fa11 f288 	uxtah	r2, r1, r8
 8012710:	1414      	asrs	r4, r2, #16
 8012712:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8012716:	b292      	uxth	r2, r2
 8012718:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801271c:	f84e 2b04 	str.w	r2, [lr], #4
 8012720:	1421      	asrs	r1, r4, #16
 8012722:	e7e0      	b.n	80126e6 <__mdiff+0xca>
 8012724:	3f01      	subs	r7, #1
 8012726:	e7ea      	b.n	80126fe <__mdiff+0xe2>
 8012728:	080148b0 	.word	0x080148b0
 801272c:	0801493c 	.word	0x0801493c

08012730 <__ulp>:
 8012730:	b082      	sub	sp, #8
 8012732:	ed8d 0b00 	vstr	d0, [sp]
 8012736:	9b01      	ldr	r3, [sp, #4]
 8012738:	4912      	ldr	r1, [pc, #72]	; (8012784 <__ulp+0x54>)
 801273a:	4019      	ands	r1, r3
 801273c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8012740:	2900      	cmp	r1, #0
 8012742:	dd05      	ble.n	8012750 <__ulp+0x20>
 8012744:	2200      	movs	r2, #0
 8012746:	460b      	mov	r3, r1
 8012748:	ec43 2b10 	vmov	d0, r2, r3
 801274c:	b002      	add	sp, #8
 801274e:	4770      	bx	lr
 8012750:	4249      	negs	r1, r1
 8012752:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8012756:	ea4f 5021 	mov.w	r0, r1, asr #20
 801275a:	f04f 0200 	mov.w	r2, #0
 801275e:	f04f 0300 	mov.w	r3, #0
 8012762:	da04      	bge.n	801276e <__ulp+0x3e>
 8012764:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8012768:	fa41 f300 	asr.w	r3, r1, r0
 801276c:	e7ec      	b.n	8012748 <__ulp+0x18>
 801276e:	f1a0 0114 	sub.w	r1, r0, #20
 8012772:	291e      	cmp	r1, #30
 8012774:	bfda      	itte	le
 8012776:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801277a:	fa20 f101 	lsrle.w	r1, r0, r1
 801277e:	2101      	movgt	r1, #1
 8012780:	460a      	mov	r2, r1
 8012782:	e7e1      	b.n	8012748 <__ulp+0x18>
 8012784:	7ff00000 	.word	0x7ff00000

08012788 <__b2d>:
 8012788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801278a:	6905      	ldr	r5, [r0, #16]
 801278c:	f100 0714 	add.w	r7, r0, #20
 8012790:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8012794:	1f2e      	subs	r6, r5, #4
 8012796:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801279a:	4620      	mov	r0, r4
 801279c:	f7ff fd48 	bl	8012230 <__hi0bits>
 80127a0:	f1c0 0320 	rsb	r3, r0, #32
 80127a4:	280a      	cmp	r0, #10
 80127a6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8012824 <__b2d+0x9c>
 80127aa:	600b      	str	r3, [r1, #0]
 80127ac:	dc14      	bgt.n	80127d8 <__b2d+0x50>
 80127ae:	f1c0 0e0b 	rsb	lr, r0, #11
 80127b2:	fa24 f10e 	lsr.w	r1, r4, lr
 80127b6:	42b7      	cmp	r7, r6
 80127b8:	ea41 030c 	orr.w	r3, r1, ip
 80127bc:	bf34      	ite	cc
 80127be:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80127c2:	2100      	movcs	r1, #0
 80127c4:	3015      	adds	r0, #21
 80127c6:	fa04 f000 	lsl.w	r0, r4, r0
 80127ca:	fa21 f10e 	lsr.w	r1, r1, lr
 80127ce:	ea40 0201 	orr.w	r2, r0, r1
 80127d2:	ec43 2b10 	vmov	d0, r2, r3
 80127d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80127d8:	42b7      	cmp	r7, r6
 80127da:	bf3a      	itte	cc
 80127dc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80127e0:	f1a5 0608 	subcc.w	r6, r5, #8
 80127e4:	2100      	movcs	r1, #0
 80127e6:	380b      	subs	r0, #11
 80127e8:	d017      	beq.n	801281a <__b2d+0x92>
 80127ea:	f1c0 0c20 	rsb	ip, r0, #32
 80127ee:	fa04 f500 	lsl.w	r5, r4, r0
 80127f2:	42be      	cmp	r6, r7
 80127f4:	fa21 f40c 	lsr.w	r4, r1, ip
 80127f8:	ea45 0504 	orr.w	r5, r5, r4
 80127fc:	bf8c      	ite	hi
 80127fe:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8012802:	2400      	movls	r4, #0
 8012804:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8012808:	fa01 f000 	lsl.w	r0, r1, r0
 801280c:	fa24 f40c 	lsr.w	r4, r4, ip
 8012810:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012814:	ea40 0204 	orr.w	r2, r0, r4
 8012818:	e7db      	b.n	80127d2 <__b2d+0x4a>
 801281a:	ea44 030c 	orr.w	r3, r4, ip
 801281e:	460a      	mov	r2, r1
 8012820:	e7d7      	b.n	80127d2 <__b2d+0x4a>
 8012822:	bf00      	nop
 8012824:	3ff00000 	.word	0x3ff00000

08012828 <__d2b>:
 8012828:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801282c:	4689      	mov	r9, r1
 801282e:	2101      	movs	r1, #1
 8012830:	ec57 6b10 	vmov	r6, r7, d0
 8012834:	4690      	mov	r8, r2
 8012836:	f7ff fc09 	bl	801204c <_Balloc>
 801283a:	4604      	mov	r4, r0
 801283c:	b930      	cbnz	r0, 801284c <__d2b+0x24>
 801283e:	4602      	mov	r2, r0
 8012840:	4b25      	ldr	r3, [pc, #148]	; (80128d8 <__d2b+0xb0>)
 8012842:	4826      	ldr	r0, [pc, #152]	; (80128dc <__d2b+0xb4>)
 8012844:	f240 310a 	movw	r1, #778	; 0x30a
 8012848:	f000 ff56 	bl	80136f8 <__assert_func>
 801284c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012850:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012854:	bb35      	cbnz	r5, 80128a4 <__d2b+0x7c>
 8012856:	2e00      	cmp	r6, #0
 8012858:	9301      	str	r3, [sp, #4]
 801285a:	d028      	beq.n	80128ae <__d2b+0x86>
 801285c:	4668      	mov	r0, sp
 801285e:	9600      	str	r6, [sp, #0]
 8012860:	f7ff fd06 	bl	8012270 <__lo0bits>
 8012864:	9900      	ldr	r1, [sp, #0]
 8012866:	b300      	cbz	r0, 80128aa <__d2b+0x82>
 8012868:	9a01      	ldr	r2, [sp, #4]
 801286a:	f1c0 0320 	rsb	r3, r0, #32
 801286e:	fa02 f303 	lsl.w	r3, r2, r3
 8012872:	430b      	orrs	r3, r1
 8012874:	40c2      	lsrs	r2, r0
 8012876:	6163      	str	r3, [r4, #20]
 8012878:	9201      	str	r2, [sp, #4]
 801287a:	9b01      	ldr	r3, [sp, #4]
 801287c:	61a3      	str	r3, [r4, #24]
 801287e:	2b00      	cmp	r3, #0
 8012880:	bf14      	ite	ne
 8012882:	2202      	movne	r2, #2
 8012884:	2201      	moveq	r2, #1
 8012886:	6122      	str	r2, [r4, #16]
 8012888:	b1d5      	cbz	r5, 80128c0 <__d2b+0x98>
 801288a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801288e:	4405      	add	r5, r0
 8012890:	f8c9 5000 	str.w	r5, [r9]
 8012894:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012898:	f8c8 0000 	str.w	r0, [r8]
 801289c:	4620      	mov	r0, r4
 801289e:	b003      	add	sp, #12
 80128a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80128a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80128a8:	e7d5      	b.n	8012856 <__d2b+0x2e>
 80128aa:	6161      	str	r1, [r4, #20]
 80128ac:	e7e5      	b.n	801287a <__d2b+0x52>
 80128ae:	a801      	add	r0, sp, #4
 80128b0:	f7ff fcde 	bl	8012270 <__lo0bits>
 80128b4:	9b01      	ldr	r3, [sp, #4]
 80128b6:	6163      	str	r3, [r4, #20]
 80128b8:	2201      	movs	r2, #1
 80128ba:	6122      	str	r2, [r4, #16]
 80128bc:	3020      	adds	r0, #32
 80128be:	e7e3      	b.n	8012888 <__d2b+0x60>
 80128c0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80128c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80128c8:	f8c9 0000 	str.w	r0, [r9]
 80128cc:	6918      	ldr	r0, [r3, #16]
 80128ce:	f7ff fcaf 	bl	8012230 <__hi0bits>
 80128d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80128d6:	e7df      	b.n	8012898 <__d2b+0x70>
 80128d8:	080148b0 	.word	0x080148b0
 80128dc:	0801493c 	.word	0x0801493c

080128e0 <__ratio>:
 80128e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128e4:	4688      	mov	r8, r1
 80128e6:	4669      	mov	r1, sp
 80128e8:	4681      	mov	r9, r0
 80128ea:	f7ff ff4d 	bl	8012788 <__b2d>
 80128ee:	a901      	add	r1, sp, #4
 80128f0:	4640      	mov	r0, r8
 80128f2:	ec55 4b10 	vmov	r4, r5, d0
 80128f6:	f7ff ff47 	bl	8012788 <__b2d>
 80128fa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80128fe:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8012902:	eba3 0c02 	sub.w	ip, r3, r2
 8012906:	e9dd 3200 	ldrd	r3, r2, [sp]
 801290a:	1a9b      	subs	r3, r3, r2
 801290c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8012910:	ec51 0b10 	vmov	r0, r1, d0
 8012914:	2b00      	cmp	r3, #0
 8012916:	bfd6      	itet	le
 8012918:	460a      	movle	r2, r1
 801291a:	462a      	movgt	r2, r5
 801291c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012920:	468b      	mov	fp, r1
 8012922:	462f      	mov	r7, r5
 8012924:	bfd4      	ite	le
 8012926:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801292a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801292e:	4620      	mov	r0, r4
 8012930:	ee10 2a10 	vmov	r2, s0
 8012934:	465b      	mov	r3, fp
 8012936:	4639      	mov	r1, r7
 8012938:	f7ed ffa8 	bl	800088c <__aeabi_ddiv>
 801293c:	ec41 0b10 	vmov	d0, r0, r1
 8012940:	b003      	add	sp, #12
 8012942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012946 <__copybits>:
 8012946:	3901      	subs	r1, #1
 8012948:	b570      	push	{r4, r5, r6, lr}
 801294a:	1149      	asrs	r1, r1, #5
 801294c:	6914      	ldr	r4, [r2, #16]
 801294e:	3101      	adds	r1, #1
 8012950:	f102 0314 	add.w	r3, r2, #20
 8012954:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012958:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801295c:	1f05      	subs	r5, r0, #4
 801295e:	42a3      	cmp	r3, r4
 8012960:	d30c      	bcc.n	801297c <__copybits+0x36>
 8012962:	1aa3      	subs	r3, r4, r2
 8012964:	3b11      	subs	r3, #17
 8012966:	f023 0303 	bic.w	r3, r3, #3
 801296a:	3211      	adds	r2, #17
 801296c:	42a2      	cmp	r2, r4
 801296e:	bf88      	it	hi
 8012970:	2300      	movhi	r3, #0
 8012972:	4418      	add	r0, r3
 8012974:	2300      	movs	r3, #0
 8012976:	4288      	cmp	r0, r1
 8012978:	d305      	bcc.n	8012986 <__copybits+0x40>
 801297a:	bd70      	pop	{r4, r5, r6, pc}
 801297c:	f853 6b04 	ldr.w	r6, [r3], #4
 8012980:	f845 6f04 	str.w	r6, [r5, #4]!
 8012984:	e7eb      	b.n	801295e <__copybits+0x18>
 8012986:	f840 3b04 	str.w	r3, [r0], #4
 801298a:	e7f4      	b.n	8012976 <__copybits+0x30>

0801298c <__any_on>:
 801298c:	f100 0214 	add.w	r2, r0, #20
 8012990:	6900      	ldr	r0, [r0, #16]
 8012992:	114b      	asrs	r3, r1, #5
 8012994:	4298      	cmp	r0, r3
 8012996:	b510      	push	{r4, lr}
 8012998:	db11      	blt.n	80129be <__any_on+0x32>
 801299a:	dd0a      	ble.n	80129b2 <__any_on+0x26>
 801299c:	f011 011f 	ands.w	r1, r1, #31
 80129a0:	d007      	beq.n	80129b2 <__any_on+0x26>
 80129a2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80129a6:	fa24 f001 	lsr.w	r0, r4, r1
 80129aa:	fa00 f101 	lsl.w	r1, r0, r1
 80129ae:	428c      	cmp	r4, r1
 80129b0:	d10b      	bne.n	80129ca <__any_on+0x3e>
 80129b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80129b6:	4293      	cmp	r3, r2
 80129b8:	d803      	bhi.n	80129c2 <__any_on+0x36>
 80129ba:	2000      	movs	r0, #0
 80129bc:	bd10      	pop	{r4, pc}
 80129be:	4603      	mov	r3, r0
 80129c0:	e7f7      	b.n	80129b2 <__any_on+0x26>
 80129c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80129c6:	2900      	cmp	r1, #0
 80129c8:	d0f5      	beq.n	80129b6 <__any_on+0x2a>
 80129ca:	2001      	movs	r0, #1
 80129cc:	e7f6      	b.n	80129bc <__any_on+0x30>

080129ce <_calloc_r>:
 80129ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80129d0:	fba1 2402 	umull	r2, r4, r1, r2
 80129d4:	b94c      	cbnz	r4, 80129ea <_calloc_r+0x1c>
 80129d6:	4611      	mov	r1, r2
 80129d8:	9201      	str	r2, [sp, #4]
 80129da:	f000 f87b 	bl	8012ad4 <_malloc_r>
 80129de:	9a01      	ldr	r2, [sp, #4]
 80129e0:	4605      	mov	r5, r0
 80129e2:	b930      	cbnz	r0, 80129f2 <_calloc_r+0x24>
 80129e4:	4628      	mov	r0, r5
 80129e6:	b003      	add	sp, #12
 80129e8:	bd30      	pop	{r4, r5, pc}
 80129ea:	220c      	movs	r2, #12
 80129ec:	6002      	str	r2, [r0, #0]
 80129ee:	2500      	movs	r5, #0
 80129f0:	e7f8      	b.n	80129e4 <_calloc_r+0x16>
 80129f2:	4621      	mov	r1, r4
 80129f4:	f7fc fb0a 	bl	800f00c <memset>
 80129f8:	e7f4      	b.n	80129e4 <_calloc_r+0x16>
	...

080129fc <_free_r>:
 80129fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80129fe:	2900      	cmp	r1, #0
 8012a00:	d044      	beq.n	8012a8c <_free_r+0x90>
 8012a02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012a06:	9001      	str	r0, [sp, #4]
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	f1a1 0404 	sub.w	r4, r1, #4
 8012a0e:	bfb8      	it	lt
 8012a10:	18e4      	addlt	r4, r4, r3
 8012a12:	f001 f875 	bl	8013b00 <__malloc_lock>
 8012a16:	4a1e      	ldr	r2, [pc, #120]	; (8012a90 <_free_r+0x94>)
 8012a18:	9801      	ldr	r0, [sp, #4]
 8012a1a:	6813      	ldr	r3, [r2, #0]
 8012a1c:	b933      	cbnz	r3, 8012a2c <_free_r+0x30>
 8012a1e:	6063      	str	r3, [r4, #4]
 8012a20:	6014      	str	r4, [r2, #0]
 8012a22:	b003      	add	sp, #12
 8012a24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012a28:	f001 b870 	b.w	8013b0c <__malloc_unlock>
 8012a2c:	42a3      	cmp	r3, r4
 8012a2e:	d908      	bls.n	8012a42 <_free_r+0x46>
 8012a30:	6825      	ldr	r5, [r4, #0]
 8012a32:	1961      	adds	r1, r4, r5
 8012a34:	428b      	cmp	r3, r1
 8012a36:	bf01      	itttt	eq
 8012a38:	6819      	ldreq	r1, [r3, #0]
 8012a3a:	685b      	ldreq	r3, [r3, #4]
 8012a3c:	1949      	addeq	r1, r1, r5
 8012a3e:	6021      	streq	r1, [r4, #0]
 8012a40:	e7ed      	b.n	8012a1e <_free_r+0x22>
 8012a42:	461a      	mov	r2, r3
 8012a44:	685b      	ldr	r3, [r3, #4]
 8012a46:	b10b      	cbz	r3, 8012a4c <_free_r+0x50>
 8012a48:	42a3      	cmp	r3, r4
 8012a4a:	d9fa      	bls.n	8012a42 <_free_r+0x46>
 8012a4c:	6811      	ldr	r1, [r2, #0]
 8012a4e:	1855      	adds	r5, r2, r1
 8012a50:	42a5      	cmp	r5, r4
 8012a52:	d10b      	bne.n	8012a6c <_free_r+0x70>
 8012a54:	6824      	ldr	r4, [r4, #0]
 8012a56:	4421      	add	r1, r4
 8012a58:	1854      	adds	r4, r2, r1
 8012a5a:	42a3      	cmp	r3, r4
 8012a5c:	6011      	str	r1, [r2, #0]
 8012a5e:	d1e0      	bne.n	8012a22 <_free_r+0x26>
 8012a60:	681c      	ldr	r4, [r3, #0]
 8012a62:	685b      	ldr	r3, [r3, #4]
 8012a64:	6053      	str	r3, [r2, #4]
 8012a66:	4421      	add	r1, r4
 8012a68:	6011      	str	r1, [r2, #0]
 8012a6a:	e7da      	b.n	8012a22 <_free_r+0x26>
 8012a6c:	d902      	bls.n	8012a74 <_free_r+0x78>
 8012a6e:	230c      	movs	r3, #12
 8012a70:	6003      	str	r3, [r0, #0]
 8012a72:	e7d6      	b.n	8012a22 <_free_r+0x26>
 8012a74:	6825      	ldr	r5, [r4, #0]
 8012a76:	1961      	adds	r1, r4, r5
 8012a78:	428b      	cmp	r3, r1
 8012a7a:	bf04      	itt	eq
 8012a7c:	6819      	ldreq	r1, [r3, #0]
 8012a7e:	685b      	ldreq	r3, [r3, #4]
 8012a80:	6063      	str	r3, [r4, #4]
 8012a82:	bf04      	itt	eq
 8012a84:	1949      	addeq	r1, r1, r5
 8012a86:	6021      	streq	r1, [r4, #0]
 8012a88:	6054      	str	r4, [r2, #4]
 8012a8a:	e7ca      	b.n	8012a22 <_free_r+0x26>
 8012a8c:	b003      	add	sp, #12
 8012a8e:	bd30      	pop	{r4, r5, pc}
 8012a90:	20000768 	.word	0x20000768

08012a94 <sbrk_aligned>:
 8012a94:	b570      	push	{r4, r5, r6, lr}
 8012a96:	4e0e      	ldr	r6, [pc, #56]	; (8012ad0 <sbrk_aligned+0x3c>)
 8012a98:	460c      	mov	r4, r1
 8012a9a:	6831      	ldr	r1, [r6, #0]
 8012a9c:	4605      	mov	r5, r0
 8012a9e:	b911      	cbnz	r1, 8012aa6 <sbrk_aligned+0x12>
 8012aa0:	f000 fd26 	bl	80134f0 <_sbrk_r>
 8012aa4:	6030      	str	r0, [r6, #0]
 8012aa6:	4621      	mov	r1, r4
 8012aa8:	4628      	mov	r0, r5
 8012aaa:	f000 fd21 	bl	80134f0 <_sbrk_r>
 8012aae:	1c43      	adds	r3, r0, #1
 8012ab0:	d00a      	beq.n	8012ac8 <sbrk_aligned+0x34>
 8012ab2:	1cc4      	adds	r4, r0, #3
 8012ab4:	f024 0403 	bic.w	r4, r4, #3
 8012ab8:	42a0      	cmp	r0, r4
 8012aba:	d007      	beq.n	8012acc <sbrk_aligned+0x38>
 8012abc:	1a21      	subs	r1, r4, r0
 8012abe:	4628      	mov	r0, r5
 8012ac0:	f000 fd16 	bl	80134f0 <_sbrk_r>
 8012ac4:	3001      	adds	r0, #1
 8012ac6:	d101      	bne.n	8012acc <sbrk_aligned+0x38>
 8012ac8:	f04f 34ff 	mov.w	r4, #4294967295
 8012acc:	4620      	mov	r0, r4
 8012ace:	bd70      	pop	{r4, r5, r6, pc}
 8012ad0:	2000076c 	.word	0x2000076c

08012ad4 <_malloc_r>:
 8012ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ad8:	1ccd      	adds	r5, r1, #3
 8012ada:	f025 0503 	bic.w	r5, r5, #3
 8012ade:	3508      	adds	r5, #8
 8012ae0:	2d0c      	cmp	r5, #12
 8012ae2:	bf38      	it	cc
 8012ae4:	250c      	movcc	r5, #12
 8012ae6:	2d00      	cmp	r5, #0
 8012ae8:	4607      	mov	r7, r0
 8012aea:	db01      	blt.n	8012af0 <_malloc_r+0x1c>
 8012aec:	42a9      	cmp	r1, r5
 8012aee:	d905      	bls.n	8012afc <_malloc_r+0x28>
 8012af0:	230c      	movs	r3, #12
 8012af2:	603b      	str	r3, [r7, #0]
 8012af4:	2600      	movs	r6, #0
 8012af6:	4630      	mov	r0, r6
 8012af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012afc:	4e2e      	ldr	r6, [pc, #184]	; (8012bb8 <_malloc_r+0xe4>)
 8012afe:	f000 ffff 	bl	8013b00 <__malloc_lock>
 8012b02:	6833      	ldr	r3, [r6, #0]
 8012b04:	461c      	mov	r4, r3
 8012b06:	bb34      	cbnz	r4, 8012b56 <_malloc_r+0x82>
 8012b08:	4629      	mov	r1, r5
 8012b0a:	4638      	mov	r0, r7
 8012b0c:	f7ff ffc2 	bl	8012a94 <sbrk_aligned>
 8012b10:	1c43      	adds	r3, r0, #1
 8012b12:	4604      	mov	r4, r0
 8012b14:	d14d      	bne.n	8012bb2 <_malloc_r+0xde>
 8012b16:	6834      	ldr	r4, [r6, #0]
 8012b18:	4626      	mov	r6, r4
 8012b1a:	2e00      	cmp	r6, #0
 8012b1c:	d140      	bne.n	8012ba0 <_malloc_r+0xcc>
 8012b1e:	6823      	ldr	r3, [r4, #0]
 8012b20:	4631      	mov	r1, r6
 8012b22:	4638      	mov	r0, r7
 8012b24:	eb04 0803 	add.w	r8, r4, r3
 8012b28:	f000 fce2 	bl	80134f0 <_sbrk_r>
 8012b2c:	4580      	cmp	r8, r0
 8012b2e:	d13a      	bne.n	8012ba6 <_malloc_r+0xd2>
 8012b30:	6821      	ldr	r1, [r4, #0]
 8012b32:	3503      	adds	r5, #3
 8012b34:	1a6d      	subs	r5, r5, r1
 8012b36:	f025 0503 	bic.w	r5, r5, #3
 8012b3a:	3508      	adds	r5, #8
 8012b3c:	2d0c      	cmp	r5, #12
 8012b3e:	bf38      	it	cc
 8012b40:	250c      	movcc	r5, #12
 8012b42:	4629      	mov	r1, r5
 8012b44:	4638      	mov	r0, r7
 8012b46:	f7ff ffa5 	bl	8012a94 <sbrk_aligned>
 8012b4a:	3001      	adds	r0, #1
 8012b4c:	d02b      	beq.n	8012ba6 <_malloc_r+0xd2>
 8012b4e:	6823      	ldr	r3, [r4, #0]
 8012b50:	442b      	add	r3, r5
 8012b52:	6023      	str	r3, [r4, #0]
 8012b54:	e00e      	b.n	8012b74 <_malloc_r+0xa0>
 8012b56:	6822      	ldr	r2, [r4, #0]
 8012b58:	1b52      	subs	r2, r2, r5
 8012b5a:	d41e      	bmi.n	8012b9a <_malloc_r+0xc6>
 8012b5c:	2a0b      	cmp	r2, #11
 8012b5e:	d916      	bls.n	8012b8e <_malloc_r+0xba>
 8012b60:	1961      	adds	r1, r4, r5
 8012b62:	42a3      	cmp	r3, r4
 8012b64:	6025      	str	r5, [r4, #0]
 8012b66:	bf18      	it	ne
 8012b68:	6059      	strne	r1, [r3, #4]
 8012b6a:	6863      	ldr	r3, [r4, #4]
 8012b6c:	bf08      	it	eq
 8012b6e:	6031      	streq	r1, [r6, #0]
 8012b70:	5162      	str	r2, [r4, r5]
 8012b72:	604b      	str	r3, [r1, #4]
 8012b74:	4638      	mov	r0, r7
 8012b76:	f104 060b 	add.w	r6, r4, #11
 8012b7a:	f000 ffc7 	bl	8013b0c <__malloc_unlock>
 8012b7e:	f026 0607 	bic.w	r6, r6, #7
 8012b82:	1d23      	adds	r3, r4, #4
 8012b84:	1af2      	subs	r2, r6, r3
 8012b86:	d0b6      	beq.n	8012af6 <_malloc_r+0x22>
 8012b88:	1b9b      	subs	r3, r3, r6
 8012b8a:	50a3      	str	r3, [r4, r2]
 8012b8c:	e7b3      	b.n	8012af6 <_malloc_r+0x22>
 8012b8e:	6862      	ldr	r2, [r4, #4]
 8012b90:	42a3      	cmp	r3, r4
 8012b92:	bf0c      	ite	eq
 8012b94:	6032      	streq	r2, [r6, #0]
 8012b96:	605a      	strne	r2, [r3, #4]
 8012b98:	e7ec      	b.n	8012b74 <_malloc_r+0xa0>
 8012b9a:	4623      	mov	r3, r4
 8012b9c:	6864      	ldr	r4, [r4, #4]
 8012b9e:	e7b2      	b.n	8012b06 <_malloc_r+0x32>
 8012ba0:	4634      	mov	r4, r6
 8012ba2:	6876      	ldr	r6, [r6, #4]
 8012ba4:	e7b9      	b.n	8012b1a <_malloc_r+0x46>
 8012ba6:	230c      	movs	r3, #12
 8012ba8:	603b      	str	r3, [r7, #0]
 8012baa:	4638      	mov	r0, r7
 8012bac:	f000 ffae 	bl	8013b0c <__malloc_unlock>
 8012bb0:	e7a1      	b.n	8012af6 <_malloc_r+0x22>
 8012bb2:	6025      	str	r5, [r4, #0]
 8012bb4:	e7de      	b.n	8012b74 <_malloc_r+0xa0>
 8012bb6:	bf00      	nop
 8012bb8:	20000768 	.word	0x20000768

08012bbc <__ssputs_r>:
 8012bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012bc0:	688e      	ldr	r6, [r1, #8]
 8012bc2:	429e      	cmp	r6, r3
 8012bc4:	4682      	mov	sl, r0
 8012bc6:	460c      	mov	r4, r1
 8012bc8:	4690      	mov	r8, r2
 8012bca:	461f      	mov	r7, r3
 8012bcc:	d838      	bhi.n	8012c40 <__ssputs_r+0x84>
 8012bce:	898a      	ldrh	r2, [r1, #12]
 8012bd0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012bd4:	d032      	beq.n	8012c3c <__ssputs_r+0x80>
 8012bd6:	6825      	ldr	r5, [r4, #0]
 8012bd8:	6909      	ldr	r1, [r1, #16]
 8012bda:	eba5 0901 	sub.w	r9, r5, r1
 8012bde:	6965      	ldr	r5, [r4, #20]
 8012be0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012be4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012be8:	3301      	adds	r3, #1
 8012bea:	444b      	add	r3, r9
 8012bec:	106d      	asrs	r5, r5, #1
 8012bee:	429d      	cmp	r5, r3
 8012bf0:	bf38      	it	cc
 8012bf2:	461d      	movcc	r5, r3
 8012bf4:	0553      	lsls	r3, r2, #21
 8012bf6:	d531      	bpl.n	8012c5c <__ssputs_r+0xa0>
 8012bf8:	4629      	mov	r1, r5
 8012bfa:	f7ff ff6b 	bl	8012ad4 <_malloc_r>
 8012bfe:	4606      	mov	r6, r0
 8012c00:	b950      	cbnz	r0, 8012c18 <__ssputs_r+0x5c>
 8012c02:	230c      	movs	r3, #12
 8012c04:	f8ca 3000 	str.w	r3, [sl]
 8012c08:	89a3      	ldrh	r3, [r4, #12]
 8012c0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012c0e:	81a3      	strh	r3, [r4, #12]
 8012c10:	f04f 30ff 	mov.w	r0, #4294967295
 8012c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c18:	6921      	ldr	r1, [r4, #16]
 8012c1a:	464a      	mov	r2, r9
 8012c1c:	f7fc f9e8 	bl	800eff0 <memcpy>
 8012c20:	89a3      	ldrh	r3, [r4, #12]
 8012c22:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012c26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012c2a:	81a3      	strh	r3, [r4, #12]
 8012c2c:	6126      	str	r6, [r4, #16]
 8012c2e:	6165      	str	r5, [r4, #20]
 8012c30:	444e      	add	r6, r9
 8012c32:	eba5 0509 	sub.w	r5, r5, r9
 8012c36:	6026      	str	r6, [r4, #0]
 8012c38:	60a5      	str	r5, [r4, #8]
 8012c3a:	463e      	mov	r6, r7
 8012c3c:	42be      	cmp	r6, r7
 8012c3e:	d900      	bls.n	8012c42 <__ssputs_r+0x86>
 8012c40:	463e      	mov	r6, r7
 8012c42:	6820      	ldr	r0, [r4, #0]
 8012c44:	4632      	mov	r2, r6
 8012c46:	4641      	mov	r1, r8
 8012c48:	f000 ff40 	bl	8013acc <memmove>
 8012c4c:	68a3      	ldr	r3, [r4, #8]
 8012c4e:	1b9b      	subs	r3, r3, r6
 8012c50:	60a3      	str	r3, [r4, #8]
 8012c52:	6823      	ldr	r3, [r4, #0]
 8012c54:	4433      	add	r3, r6
 8012c56:	6023      	str	r3, [r4, #0]
 8012c58:	2000      	movs	r0, #0
 8012c5a:	e7db      	b.n	8012c14 <__ssputs_r+0x58>
 8012c5c:	462a      	mov	r2, r5
 8012c5e:	f000 ff5b 	bl	8013b18 <_realloc_r>
 8012c62:	4606      	mov	r6, r0
 8012c64:	2800      	cmp	r0, #0
 8012c66:	d1e1      	bne.n	8012c2c <__ssputs_r+0x70>
 8012c68:	6921      	ldr	r1, [r4, #16]
 8012c6a:	4650      	mov	r0, sl
 8012c6c:	f7ff fec6 	bl	80129fc <_free_r>
 8012c70:	e7c7      	b.n	8012c02 <__ssputs_r+0x46>
	...

08012c74 <_svfiprintf_r>:
 8012c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c78:	4698      	mov	r8, r3
 8012c7a:	898b      	ldrh	r3, [r1, #12]
 8012c7c:	061b      	lsls	r3, r3, #24
 8012c7e:	b09d      	sub	sp, #116	; 0x74
 8012c80:	4607      	mov	r7, r0
 8012c82:	460d      	mov	r5, r1
 8012c84:	4614      	mov	r4, r2
 8012c86:	d50e      	bpl.n	8012ca6 <_svfiprintf_r+0x32>
 8012c88:	690b      	ldr	r3, [r1, #16]
 8012c8a:	b963      	cbnz	r3, 8012ca6 <_svfiprintf_r+0x32>
 8012c8c:	2140      	movs	r1, #64	; 0x40
 8012c8e:	f7ff ff21 	bl	8012ad4 <_malloc_r>
 8012c92:	6028      	str	r0, [r5, #0]
 8012c94:	6128      	str	r0, [r5, #16]
 8012c96:	b920      	cbnz	r0, 8012ca2 <_svfiprintf_r+0x2e>
 8012c98:	230c      	movs	r3, #12
 8012c9a:	603b      	str	r3, [r7, #0]
 8012c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8012ca0:	e0d1      	b.n	8012e46 <_svfiprintf_r+0x1d2>
 8012ca2:	2340      	movs	r3, #64	; 0x40
 8012ca4:	616b      	str	r3, [r5, #20]
 8012ca6:	2300      	movs	r3, #0
 8012ca8:	9309      	str	r3, [sp, #36]	; 0x24
 8012caa:	2320      	movs	r3, #32
 8012cac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012cb0:	f8cd 800c 	str.w	r8, [sp, #12]
 8012cb4:	2330      	movs	r3, #48	; 0x30
 8012cb6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012e60 <_svfiprintf_r+0x1ec>
 8012cba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012cbe:	f04f 0901 	mov.w	r9, #1
 8012cc2:	4623      	mov	r3, r4
 8012cc4:	469a      	mov	sl, r3
 8012cc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012cca:	b10a      	cbz	r2, 8012cd0 <_svfiprintf_r+0x5c>
 8012ccc:	2a25      	cmp	r2, #37	; 0x25
 8012cce:	d1f9      	bne.n	8012cc4 <_svfiprintf_r+0x50>
 8012cd0:	ebba 0b04 	subs.w	fp, sl, r4
 8012cd4:	d00b      	beq.n	8012cee <_svfiprintf_r+0x7a>
 8012cd6:	465b      	mov	r3, fp
 8012cd8:	4622      	mov	r2, r4
 8012cda:	4629      	mov	r1, r5
 8012cdc:	4638      	mov	r0, r7
 8012cde:	f7ff ff6d 	bl	8012bbc <__ssputs_r>
 8012ce2:	3001      	adds	r0, #1
 8012ce4:	f000 80aa 	beq.w	8012e3c <_svfiprintf_r+0x1c8>
 8012ce8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012cea:	445a      	add	r2, fp
 8012cec:	9209      	str	r2, [sp, #36]	; 0x24
 8012cee:	f89a 3000 	ldrb.w	r3, [sl]
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	f000 80a2 	beq.w	8012e3c <_svfiprintf_r+0x1c8>
 8012cf8:	2300      	movs	r3, #0
 8012cfa:	f04f 32ff 	mov.w	r2, #4294967295
 8012cfe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012d02:	f10a 0a01 	add.w	sl, sl, #1
 8012d06:	9304      	str	r3, [sp, #16]
 8012d08:	9307      	str	r3, [sp, #28]
 8012d0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012d0e:	931a      	str	r3, [sp, #104]	; 0x68
 8012d10:	4654      	mov	r4, sl
 8012d12:	2205      	movs	r2, #5
 8012d14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d18:	4851      	ldr	r0, [pc, #324]	; (8012e60 <_svfiprintf_r+0x1ec>)
 8012d1a:	f7ed fa81 	bl	8000220 <memchr>
 8012d1e:	9a04      	ldr	r2, [sp, #16]
 8012d20:	b9d8      	cbnz	r0, 8012d5a <_svfiprintf_r+0xe6>
 8012d22:	06d0      	lsls	r0, r2, #27
 8012d24:	bf44      	itt	mi
 8012d26:	2320      	movmi	r3, #32
 8012d28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012d2c:	0711      	lsls	r1, r2, #28
 8012d2e:	bf44      	itt	mi
 8012d30:	232b      	movmi	r3, #43	; 0x2b
 8012d32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012d36:	f89a 3000 	ldrb.w	r3, [sl]
 8012d3a:	2b2a      	cmp	r3, #42	; 0x2a
 8012d3c:	d015      	beq.n	8012d6a <_svfiprintf_r+0xf6>
 8012d3e:	9a07      	ldr	r2, [sp, #28]
 8012d40:	4654      	mov	r4, sl
 8012d42:	2000      	movs	r0, #0
 8012d44:	f04f 0c0a 	mov.w	ip, #10
 8012d48:	4621      	mov	r1, r4
 8012d4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012d4e:	3b30      	subs	r3, #48	; 0x30
 8012d50:	2b09      	cmp	r3, #9
 8012d52:	d94e      	bls.n	8012df2 <_svfiprintf_r+0x17e>
 8012d54:	b1b0      	cbz	r0, 8012d84 <_svfiprintf_r+0x110>
 8012d56:	9207      	str	r2, [sp, #28]
 8012d58:	e014      	b.n	8012d84 <_svfiprintf_r+0x110>
 8012d5a:	eba0 0308 	sub.w	r3, r0, r8
 8012d5e:	fa09 f303 	lsl.w	r3, r9, r3
 8012d62:	4313      	orrs	r3, r2
 8012d64:	9304      	str	r3, [sp, #16]
 8012d66:	46a2      	mov	sl, r4
 8012d68:	e7d2      	b.n	8012d10 <_svfiprintf_r+0x9c>
 8012d6a:	9b03      	ldr	r3, [sp, #12]
 8012d6c:	1d19      	adds	r1, r3, #4
 8012d6e:	681b      	ldr	r3, [r3, #0]
 8012d70:	9103      	str	r1, [sp, #12]
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	bfbb      	ittet	lt
 8012d76:	425b      	neglt	r3, r3
 8012d78:	f042 0202 	orrlt.w	r2, r2, #2
 8012d7c:	9307      	strge	r3, [sp, #28]
 8012d7e:	9307      	strlt	r3, [sp, #28]
 8012d80:	bfb8      	it	lt
 8012d82:	9204      	strlt	r2, [sp, #16]
 8012d84:	7823      	ldrb	r3, [r4, #0]
 8012d86:	2b2e      	cmp	r3, #46	; 0x2e
 8012d88:	d10c      	bne.n	8012da4 <_svfiprintf_r+0x130>
 8012d8a:	7863      	ldrb	r3, [r4, #1]
 8012d8c:	2b2a      	cmp	r3, #42	; 0x2a
 8012d8e:	d135      	bne.n	8012dfc <_svfiprintf_r+0x188>
 8012d90:	9b03      	ldr	r3, [sp, #12]
 8012d92:	1d1a      	adds	r2, r3, #4
 8012d94:	681b      	ldr	r3, [r3, #0]
 8012d96:	9203      	str	r2, [sp, #12]
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	bfb8      	it	lt
 8012d9c:	f04f 33ff 	movlt.w	r3, #4294967295
 8012da0:	3402      	adds	r4, #2
 8012da2:	9305      	str	r3, [sp, #20]
 8012da4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012e70 <_svfiprintf_r+0x1fc>
 8012da8:	7821      	ldrb	r1, [r4, #0]
 8012daa:	2203      	movs	r2, #3
 8012dac:	4650      	mov	r0, sl
 8012dae:	f7ed fa37 	bl	8000220 <memchr>
 8012db2:	b140      	cbz	r0, 8012dc6 <_svfiprintf_r+0x152>
 8012db4:	2340      	movs	r3, #64	; 0x40
 8012db6:	eba0 000a 	sub.w	r0, r0, sl
 8012dba:	fa03 f000 	lsl.w	r0, r3, r0
 8012dbe:	9b04      	ldr	r3, [sp, #16]
 8012dc0:	4303      	orrs	r3, r0
 8012dc2:	3401      	adds	r4, #1
 8012dc4:	9304      	str	r3, [sp, #16]
 8012dc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012dca:	4826      	ldr	r0, [pc, #152]	; (8012e64 <_svfiprintf_r+0x1f0>)
 8012dcc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012dd0:	2206      	movs	r2, #6
 8012dd2:	f7ed fa25 	bl	8000220 <memchr>
 8012dd6:	2800      	cmp	r0, #0
 8012dd8:	d038      	beq.n	8012e4c <_svfiprintf_r+0x1d8>
 8012dda:	4b23      	ldr	r3, [pc, #140]	; (8012e68 <_svfiprintf_r+0x1f4>)
 8012ddc:	bb1b      	cbnz	r3, 8012e26 <_svfiprintf_r+0x1b2>
 8012dde:	9b03      	ldr	r3, [sp, #12]
 8012de0:	3307      	adds	r3, #7
 8012de2:	f023 0307 	bic.w	r3, r3, #7
 8012de6:	3308      	adds	r3, #8
 8012de8:	9303      	str	r3, [sp, #12]
 8012dea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012dec:	4433      	add	r3, r6
 8012dee:	9309      	str	r3, [sp, #36]	; 0x24
 8012df0:	e767      	b.n	8012cc2 <_svfiprintf_r+0x4e>
 8012df2:	fb0c 3202 	mla	r2, ip, r2, r3
 8012df6:	460c      	mov	r4, r1
 8012df8:	2001      	movs	r0, #1
 8012dfa:	e7a5      	b.n	8012d48 <_svfiprintf_r+0xd4>
 8012dfc:	2300      	movs	r3, #0
 8012dfe:	3401      	adds	r4, #1
 8012e00:	9305      	str	r3, [sp, #20]
 8012e02:	4619      	mov	r1, r3
 8012e04:	f04f 0c0a 	mov.w	ip, #10
 8012e08:	4620      	mov	r0, r4
 8012e0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012e0e:	3a30      	subs	r2, #48	; 0x30
 8012e10:	2a09      	cmp	r2, #9
 8012e12:	d903      	bls.n	8012e1c <_svfiprintf_r+0x1a8>
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d0c5      	beq.n	8012da4 <_svfiprintf_r+0x130>
 8012e18:	9105      	str	r1, [sp, #20]
 8012e1a:	e7c3      	b.n	8012da4 <_svfiprintf_r+0x130>
 8012e1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8012e20:	4604      	mov	r4, r0
 8012e22:	2301      	movs	r3, #1
 8012e24:	e7f0      	b.n	8012e08 <_svfiprintf_r+0x194>
 8012e26:	ab03      	add	r3, sp, #12
 8012e28:	9300      	str	r3, [sp, #0]
 8012e2a:	462a      	mov	r2, r5
 8012e2c:	4b0f      	ldr	r3, [pc, #60]	; (8012e6c <_svfiprintf_r+0x1f8>)
 8012e2e:	a904      	add	r1, sp, #16
 8012e30:	4638      	mov	r0, r7
 8012e32:	f7fc f993 	bl	800f15c <_printf_float>
 8012e36:	1c42      	adds	r2, r0, #1
 8012e38:	4606      	mov	r6, r0
 8012e3a:	d1d6      	bne.n	8012dea <_svfiprintf_r+0x176>
 8012e3c:	89ab      	ldrh	r3, [r5, #12]
 8012e3e:	065b      	lsls	r3, r3, #25
 8012e40:	f53f af2c 	bmi.w	8012c9c <_svfiprintf_r+0x28>
 8012e44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012e46:	b01d      	add	sp, #116	; 0x74
 8012e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e4c:	ab03      	add	r3, sp, #12
 8012e4e:	9300      	str	r3, [sp, #0]
 8012e50:	462a      	mov	r2, r5
 8012e52:	4b06      	ldr	r3, [pc, #24]	; (8012e6c <_svfiprintf_r+0x1f8>)
 8012e54:	a904      	add	r1, sp, #16
 8012e56:	4638      	mov	r0, r7
 8012e58:	f7fc fc24 	bl	800f6a4 <_printf_i>
 8012e5c:	e7eb      	b.n	8012e36 <_svfiprintf_r+0x1c2>
 8012e5e:	bf00      	nop
 8012e60:	08014a94 	.word	0x08014a94
 8012e64:	08014a9e 	.word	0x08014a9e
 8012e68:	0800f15d 	.word	0x0800f15d
 8012e6c:	08012bbd 	.word	0x08012bbd
 8012e70:	08014a9a 	.word	0x08014a9a

08012e74 <_sungetc_r>:
 8012e74:	b538      	push	{r3, r4, r5, lr}
 8012e76:	1c4b      	adds	r3, r1, #1
 8012e78:	4614      	mov	r4, r2
 8012e7a:	d103      	bne.n	8012e84 <_sungetc_r+0x10>
 8012e7c:	f04f 35ff 	mov.w	r5, #4294967295
 8012e80:	4628      	mov	r0, r5
 8012e82:	bd38      	pop	{r3, r4, r5, pc}
 8012e84:	8993      	ldrh	r3, [r2, #12]
 8012e86:	f023 0320 	bic.w	r3, r3, #32
 8012e8a:	8193      	strh	r3, [r2, #12]
 8012e8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012e8e:	6852      	ldr	r2, [r2, #4]
 8012e90:	b2cd      	uxtb	r5, r1
 8012e92:	b18b      	cbz	r3, 8012eb8 <_sungetc_r+0x44>
 8012e94:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012e96:	4293      	cmp	r3, r2
 8012e98:	dd08      	ble.n	8012eac <_sungetc_r+0x38>
 8012e9a:	6823      	ldr	r3, [r4, #0]
 8012e9c:	1e5a      	subs	r2, r3, #1
 8012e9e:	6022      	str	r2, [r4, #0]
 8012ea0:	f803 5c01 	strb.w	r5, [r3, #-1]
 8012ea4:	6863      	ldr	r3, [r4, #4]
 8012ea6:	3301      	adds	r3, #1
 8012ea8:	6063      	str	r3, [r4, #4]
 8012eaa:	e7e9      	b.n	8012e80 <_sungetc_r+0xc>
 8012eac:	4621      	mov	r1, r4
 8012eae:	f000 fbdb 	bl	8013668 <__submore>
 8012eb2:	2800      	cmp	r0, #0
 8012eb4:	d0f1      	beq.n	8012e9a <_sungetc_r+0x26>
 8012eb6:	e7e1      	b.n	8012e7c <_sungetc_r+0x8>
 8012eb8:	6921      	ldr	r1, [r4, #16]
 8012eba:	6823      	ldr	r3, [r4, #0]
 8012ebc:	b151      	cbz	r1, 8012ed4 <_sungetc_r+0x60>
 8012ebe:	4299      	cmp	r1, r3
 8012ec0:	d208      	bcs.n	8012ed4 <_sungetc_r+0x60>
 8012ec2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8012ec6:	42a9      	cmp	r1, r5
 8012ec8:	d104      	bne.n	8012ed4 <_sungetc_r+0x60>
 8012eca:	3b01      	subs	r3, #1
 8012ecc:	3201      	adds	r2, #1
 8012ece:	6023      	str	r3, [r4, #0]
 8012ed0:	6062      	str	r2, [r4, #4]
 8012ed2:	e7d5      	b.n	8012e80 <_sungetc_r+0xc>
 8012ed4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8012ed8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012edc:	6363      	str	r3, [r4, #52]	; 0x34
 8012ede:	2303      	movs	r3, #3
 8012ee0:	63a3      	str	r3, [r4, #56]	; 0x38
 8012ee2:	4623      	mov	r3, r4
 8012ee4:	f803 5f46 	strb.w	r5, [r3, #70]!
 8012ee8:	6023      	str	r3, [r4, #0]
 8012eea:	2301      	movs	r3, #1
 8012eec:	e7dc      	b.n	8012ea8 <_sungetc_r+0x34>

08012eee <__ssrefill_r>:
 8012eee:	b510      	push	{r4, lr}
 8012ef0:	460c      	mov	r4, r1
 8012ef2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8012ef4:	b169      	cbz	r1, 8012f12 <__ssrefill_r+0x24>
 8012ef6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012efa:	4299      	cmp	r1, r3
 8012efc:	d001      	beq.n	8012f02 <__ssrefill_r+0x14>
 8012efe:	f7ff fd7d 	bl	80129fc <_free_r>
 8012f02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012f04:	6063      	str	r3, [r4, #4]
 8012f06:	2000      	movs	r0, #0
 8012f08:	6360      	str	r0, [r4, #52]	; 0x34
 8012f0a:	b113      	cbz	r3, 8012f12 <__ssrefill_r+0x24>
 8012f0c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8012f0e:	6023      	str	r3, [r4, #0]
 8012f10:	bd10      	pop	{r4, pc}
 8012f12:	6923      	ldr	r3, [r4, #16]
 8012f14:	6023      	str	r3, [r4, #0]
 8012f16:	2300      	movs	r3, #0
 8012f18:	6063      	str	r3, [r4, #4]
 8012f1a:	89a3      	ldrh	r3, [r4, #12]
 8012f1c:	f043 0320 	orr.w	r3, r3, #32
 8012f20:	81a3      	strh	r3, [r4, #12]
 8012f22:	f04f 30ff 	mov.w	r0, #4294967295
 8012f26:	e7f3      	b.n	8012f10 <__ssrefill_r+0x22>

08012f28 <__ssvfiscanf_r>:
 8012f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f2c:	460c      	mov	r4, r1
 8012f2e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8012f32:	2100      	movs	r1, #0
 8012f34:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8012f38:	49a6      	ldr	r1, [pc, #664]	; (80131d4 <__ssvfiscanf_r+0x2ac>)
 8012f3a:	91a0      	str	r1, [sp, #640]	; 0x280
 8012f3c:	f10d 0804 	add.w	r8, sp, #4
 8012f40:	49a5      	ldr	r1, [pc, #660]	; (80131d8 <__ssvfiscanf_r+0x2b0>)
 8012f42:	4fa6      	ldr	r7, [pc, #664]	; (80131dc <__ssvfiscanf_r+0x2b4>)
 8012f44:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80131e0 <__ssvfiscanf_r+0x2b8>
 8012f48:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8012f4c:	4606      	mov	r6, r0
 8012f4e:	91a1      	str	r1, [sp, #644]	; 0x284
 8012f50:	9300      	str	r3, [sp, #0]
 8012f52:	7813      	ldrb	r3, [r2, #0]
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	f000 815a 	beq.w	801320e <__ssvfiscanf_r+0x2e6>
 8012f5a:	5dd9      	ldrb	r1, [r3, r7]
 8012f5c:	f011 0108 	ands.w	r1, r1, #8
 8012f60:	f102 0501 	add.w	r5, r2, #1
 8012f64:	d019      	beq.n	8012f9a <__ssvfiscanf_r+0x72>
 8012f66:	6863      	ldr	r3, [r4, #4]
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	dd0f      	ble.n	8012f8c <__ssvfiscanf_r+0x64>
 8012f6c:	6823      	ldr	r3, [r4, #0]
 8012f6e:	781a      	ldrb	r2, [r3, #0]
 8012f70:	5cba      	ldrb	r2, [r7, r2]
 8012f72:	0712      	lsls	r2, r2, #28
 8012f74:	d401      	bmi.n	8012f7a <__ssvfiscanf_r+0x52>
 8012f76:	462a      	mov	r2, r5
 8012f78:	e7eb      	b.n	8012f52 <__ssvfiscanf_r+0x2a>
 8012f7a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8012f7c:	3201      	adds	r2, #1
 8012f7e:	9245      	str	r2, [sp, #276]	; 0x114
 8012f80:	6862      	ldr	r2, [r4, #4]
 8012f82:	3301      	adds	r3, #1
 8012f84:	3a01      	subs	r2, #1
 8012f86:	6062      	str	r2, [r4, #4]
 8012f88:	6023      	str	r3, [r4, #0]
 8012f8a:	e7ec      	b.n	8012f66 <__ssvfiscanf_r+0x3e>
 8012f8c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012f8e:	4621      	mov	r1, r4
 8012f90:	4630      	mov	r0, r6
 8012f92:	4798      	blx	r3
 8012f94:	2800      	cmp	r0, #0
 8012f96:	d0e9      	beq.n	8012f6c <__ssvfiscanf_r+0x44>
 8012f98:	e7ed      	b.n	8012f76 <__ssvfiscanf_r+0x4e>
 8012f9a:	2b25      	cmp	r3, #37	; 0x25
 8012f9c:	d012      	beq.n	8012fc4 <__ssvfiscanf_r+0x9c>
 8012f9e:	469a      	mov	sl, r3
 8012fa0:	6863      	ldr	r3, [r4, #4]
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	f340 8091 	ble.w	80130ca <__ssvfiscanf_r+0x1a2>
 8012fa8:	6822      	ldr	r2, [r4, #0]
 8012faa:	7813      	ldrb	r3, [r2, #0]
 8012fac:	4553      	cmp	r3, sl
 8012fae:	f040 812e 	bne.w	801320e <__ssvfiscanf_r+0x2e6>
 8012fb2:	6863      	ldr	r3, [r4, #4]
 8012fb4:	3b01      	subs	r3, #1
 8012fb6:	6063      	str	r3, [r4, #4]
 8012fb8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8012fba:	3201      	adds	r2, #1
 8012fbc:	3301      	adds	r3, #1
 8012fbe:	6022      	str	r2, [r4, #0]
 8012fc0:	9345      	str	r3, [sp, #276]	; 0x114
 8012fc2:	e7d8      	b.n	8012f76 <__ssvfiscanf_r+0x4e>
 8012fc4:	9141      	str	r1, [sp, #260]	; 0x104
 8012fc6:	9143      	str	r1, [sp, #268]	; 0x10c
 8012fc8:	7853      	ldrb	r3, [r2, #1]
 8012fca:	2b2a      	cmp	r3, #42	; 0x2a
 8012fcc:	bf02      	ittt	eq
 8012fce:	2310      	moveq	r3, #16
 8012fd0:	1c95      	addeq	r5, r2, #2
 8012fd2:	9341      	streq	r3, [sp, #260]	; 0x104
 8012fd4:	220a      	movs	r2, #10
 8012fd6:	46aa      	mov	sl, r5
 8012fd8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8012fdc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8012fe0:	2b09      	cmp	r3, #9
 8012fe2:	d91d      	bls.n	8013020 <__ssvfiscanf_r+0xf8>
 8012fe4:	487e      	ldr	r0, [pc, #504]	; (80131e0 <__ssvfiscanf_r+0x2b8>)
 8012fe6:	2203      	movs	r2, #3
 8012fe8:	f7ed f91a 	bl	8000220 <memchr>
 8012fec:	b140      	cbz	r0, 8013000 <__ssvfiscanf_r+0xd8>
 8012fee:	2301      	movs	r3, #1
 8012ff0:	eba0 0009 	sub.w	r0, r0, r9
 8012ff4:	fa03 f000 	lsl.w	r0, r3, r0
 8012ff8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012ffa:	4318      	orrs	r0, r3
 8012ffc:	9041      	str	r0, [sp, #260]	; 0x104
 8012ffe:	4655      	mov	r5, sl
 8013000:	f815 3b01 	ldrb.w	r3, [r5], #1
 8013004:	2b78      	cmp	r3, #120	; 0x78
 8013006:	d806      	bhi.n	8013016 <__ssvfiscanf_r+0xee>
 8013008:	2b57      	cmp	r3, #87	; 0x57
 801300a:	d810      	bhi.n	801302e <__ssvfiscanf_r+0x106>
 801300c:	2b25      	cmp	r3, #37	; 0x25
 801300e:	d0c6      	beq.n	8012f9e <__ssvfiscanf_r+0x76>
 8013010:	d856      	bhi.n	80130c0 <__ssvfiscanf_r+0x198>
 8013012:	2b00      	cmp	r3, #0
 8013014:	d064      	beq.n	80130e0 <__ssvfiscanf_r+0x1b8>
 8013016:	2303      	movs	r3, #3
 8013018:	9347      	str	r3, [sp, #284]	; 0x11c
 801301a:	230a      	movs	r3, #10
 801301c:	9342      	str	r3, [sp, #264]	; 0x108
 801301e:	e071      	b.n	8013104 <__ssvfiscanf_r+0x1dc>
 8013020:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8013022:	fb02 1103 	mla	r1, r2, r3, r1
 8013026:	3930      	subs	r1, #48	; 0x30
 8013028:	9143      	str	r1, [sp, #268]	; 0x10c
 801302a:	4655      	mov	r5, sl
 801302c:	e7d3      	b.n	8012fd6 <__ssvfiscanf_r+0xae>
 801302e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8013032:	2a20      	cmp	r2, #32
 8013034:	d8ef      	bhi.n	8013016 <__ssvfiscanf_r+0xee>
 8013036:	a101      	add	r1, pc, #4	; (adr r1, 801303c <__ssvfiscanf_r+0x114>)
 8013038:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801303c:	080130ef 	.word	0x080130ef
 8013040:	08013017 	.word	0x08013017
 8013044:	08013017 	.word	0x08013017
 8013048:	0801314d 	.word	0x0801314d
 801304c:	08013017 	.word	0x08013017
 8013050:	08013017 	.word	0x08013017
 8013054:	08013017 	.word	0x08013017
 8013058:	08013017 	.word	0x08013017
 801305c:	08013017 	.word	0x08013017
 8013060:	08013017 	.word	0x08013017
 8013064:	08013017 	.word	0x08013017
 8013068:	08013163 	.word	0x08013163
 801306c:	08013139 	.word	0x08013139
 8013070:	080130c7 	.word	0x080130c7
 8013074:	080130c7 	.word	0x080130c7
 8013078:	080130c7 	.word	0x080130c7
 801307c:	08013017 	.word	0x08013017
 8013080:	0801313d 	.word	0x0801313d
 8013084:	08013017 	.word	0x08013017
 8013088:	08013017 	.word	0x08013017
 801308c:	08013017 	.word	0x08013017
 8013090:	08013017 	.word	0x08013017
 8013094:	08013173 	.word	0x08013173
 8013098:	08013145 	.word	0x08013145
 801309c:	080130e7 	.word	0x080130e7
 80130a0:	08013017 	.word	0x08013017
 80130a4:	08013017 	.word	0x08013017
 80130a8:	0801316f 	.word	0x0801316f
 80130ac:	08013017 	.word	0x08013017
 80130b0:	08013139 	.word	0x08013139
 80130b4:	08013017 	.word	0x08013017
 80130b8:	08013017 	.word	0x08013017
 80130bc:	080130ef 	.word	0x080130ef
 80130c0:	3b45      	subs	r3, #69	; 0x45
 80130c2:	2b02      	cmp	r3, #2
 80130c4:	d8a7      	bhi.n	8013016 <__ssvfiscanf_r+0xee>
 80130c6:	2305      	movs	r3, #5
 80130c8:	e01b      	b.n	8013102 <__ssvfiscanf_r+0x1da>
 80130ca:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80130cc:	4621      	mov	r1, r4
 80130ce:	4630      	mov	r0, r6
 80130d0:	4798      	blx	r3
 80130d2:	2800      	cmp	r0, #0
 80130d4:	f43f af68 	beq.w	8012fa8 <__ssvfiscanf_r+0x80>
 80130d8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80130da:	2800      	cmp	r0, #0
 80130dc:	f040 808d 	bne.w	80131fa <__ssvfiscanf_r+0x2d2>
 80130e0:	f04f 30ff 	mov.w	r0, #4294967295
 80130e4:	e08f      	b.n	8013206 <__ssvfiscanf_r+0x2de>
 80130e6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80130e8:	f042 0220 	orr.w	r2, r2, #32
 80130ec:	9241      	str	r2, [sp, #260]	; 0x104
 80130ee:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80130f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80130f4:	9241      	str	r2, [sp, #260]	; 0x104
 80130f6:	2210      	movs	r2, #16
 80130f8:	2b6f      	cmp	r3, #111	; 0x6f
 80130fa:	9242      	str	r2, [sp, #264]	; 0x108
 80130fc:	bf34      	ite	cc
 80130fe:	2303      	movcc	r3, #3
 8013100:	2304      	movcs	r3, #4
 8013102:	9347      	str	r3, [sp, #284]	; 0x11c
 8013104:	6863      	ldr	r3, [r4, #4]
 8013106:	2b00      	cmp	r3, #0
 8013108:	dd42      	ble.n	8013190 <__ssvfiscanf_r+0x268>
 801310a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801310c:	0659      	lsls	r1, r3, #25
 801310e:	d404      	bmi.n	801311a <__ssvfiscanf_r+0x1f2>
 8013110:	6823      	ldr	r3, [r4, #0]
 8013112:	781a      	ldrb	r2, [r3, #0]
 8013114:	5cba      	ldrb	r2, [r7, r2]
 8013116:	0712      	lsls	r2, r2, #28
 8013118:	d441      	bmi.n	801319e <__ssvfiscanf_r+0x276>
 801311a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801311c:	2b02      	cmp	r3, #2
 801311e:	dc50      	bgt.n	80131c2 <__ssvfiscanf_r+0x29a>
 8013120:	466b      	mov	r3, sp
 8013122:	4622      	mov	r2, r4
 8013124:	a941      	add	r1, sp, #260	; 0x104
 8013126:	4630      	mov	r0, r6
 8013128:	f000 f876 	bl	8013218 <_scanf_chars>
 801312c:	2801      	cmp	r0, #1
 801312e:	d06e      	beq.n	801320e <__ssvfiscanf_r+0x2e6>
 8013130:	2802      	cmp	r0, #2
 8013132:	f47f af20 	bne.w	8012f76 <__ssvfiscanf_r+0x4e>
 8013136:	e7cf      	b.n	80130d8 <__ssvfiscanf_r+0x1b0>
 8013138:	220a      	movs	r2, #10
 801313a:	e7dd      	b.n	80130f8 <__ssvfiscanf_r+0x1d0>
 801313c:	2300      	movs	r3, #0
 801313e:	9342      	str	r3, [sp, #264]	; 0x108
 8013140:	2303      	movs	r3, #3
 8013142:	e7de      	b.n	8013102 <__ssvfiscanf_r+0x1da>
 8013144:	2308      	movs	r3, #8
 8013146:	9342      	str	r3, [sp, #264]	; 0x108
 8013148:	2304      	movs	r3, #4
 801314a:	e7da      	b.n	8013102 <__ssvfiscanf_r+0x1da>
 801314c:	4629      	mov	r1, r5
 801314e:	4640      	mov	r0, r8
 8013150:	f000 f9de 	bl	8013510 <__sccl>
 8013154:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013156:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801315a:	9341      	str	r3, [sp, #260]	; 0x104
 801315c:	4605      	mov	r5, r0
 801315e:	2301      	movs	r3, #1
 8013160:	e7cf      	b.n	8013102 <__ssvfiscanf_r+0x1da>
 8013162:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013164:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013168:	9341      	str	r3, [sp, #260]	; 0x104
 801316a:	2300      	movs	r3, #0
 801316c:	e7c9      	b.n	8013102 <__ssvfiscanf_r+0x1da>
 801316e:	2302      	movs	r3, #2
 8013170:	e7c7      	b.n	8013102 <__ssvfiscanf_r+0x1da>
 8013172:	9841      	ldr	r0, [sp, #260]	; 0x104
 8013174:	06c3      	lsls	r3, r0, #27
 8013176:	f53f aefe 	bmi.w	8012f76 <__ssvfiscanf_r+0x4e>
 801317a:	9b00      	ldr	r3, [sp, #0]
 801317c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801317e:	1d19      	adds	r1, r3, #4
 8013180:	9100      	str	r1, [sp, #0]
 8013182:	681b      	ldr	r3, [r3, #0]
 8013184:	f010 0f01 	tst.w	r0, #1
 8013188:	bf14      	ite	ne
 801318a:	801a      	strhne	r2, [r3, #0]
 801318c:	601a      	streq	r2, [r3, #0]
 801318e:	e6f2      	b.n	8012f76 <__ssvfiscanf_r+0x4e>
 8013190:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013192:	4621      	mov	r1, r4
 8013194:	4630      	mov	r0, r6
 8013196:	4798      	blx	r3
 8013198:	2800      	cmp	r0, #0
 801319a:	d0b6      	beq.n	801310a <__ssvfiscanf_r+0x1e2>
 801319c:	e79c      	b.n	80130d8 <__ssvfiscanf_r+0x1b0>
 801319e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80131a0:	3201      	adds	r2, #1
 80131a2:	9245      	str	r2, [sp, #276]	; 0x114
 80131a4:	6862      	ldr	r2, [r4, #4]
 80131a6:	3a01      	subs	r2, #1
 80131a8:	2a00      	cmp	r2, #0
 80131aa:	6062      	str	r2, [r4, #4]
 80131ac:	dd02      	ble.n	80131b4 <__ssvfiscanf_r+0x28c>
 80131ae:	3301      	adds	r3, #1
 80131b0:	6023      	str	r3, [r4, #0]
 80131b2:	e7ad      	b.n	8013110 <__ssvfiscanf_r+0x1e8>
 80131b4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80131b6:	4621      	mov	r1, r4
 80131b8:	4630      	mov	r0, r6
 80131ba:	4798      	blx	r3
 80131bc:	2800      	cmp	r0, #0
 80131be:	d0a7      	beq.n	8013110 <__ssvfiscanf_r+0x1e8>
 80131c0:	e78a      	b.n	80130d8 <__ssvfiscanf_r+0x1b0>
 80131c2:	2b04      	cmp	r3, #4
 80131c4:	dc0e      	bgt.n	80131e4 <__ssvfiscanf_r+0x2bc>
 80131c6:	466b      	mov	r3, sp
 80131c8:	4622      	mov	r2, r4
 80131ca:	a941      	add	r1, sp, #260	; 0x104
 80131cc:	4630      	mov	r0, r6
 80131ce:	f000 f87d 	bl	80132cc <_scanf_i>
 80131d2:	e7ab      	b.n	801312c <__ssvfiscanf_r+0x204>
 80131d4:	08012e75 	.word	0x08012e75
 80131d8:	08012eef 	.word	0x08012eef
 80131dc:	08014731 	.word	0x08014731
 80131e0:	08014a9a 	.word	0x08014a9a
 80131e4:	4b0b      	ldr	r3, [pc, #44]	; (8013214 <__ssvfiscanf_r+0x2ec>)
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	f43f aec5 	beq.w	8012f76 <__ssvfiscanf_r+0x4e>
 80131ec:	466b      	mov	r3, sp
 80131ee:	4622      	mov	r2, r4
 80131f0:	a941      	add	r1, sp, #260	; 0x104
 80131f2:	4630      	mov	r0, r6
 80131f4:	f7fc fb7c 	bl	800f8f0 <_scanf_float>
 80131f8:	e798      	b.n	801312c <__ssvfiscanf_r+0x204>
 80131fa:	89a3      	ldrh	r3, [r4, #12]
 80131fc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8013200:	bf18      	it	ne
 8013202:	f04f 30ff 	movne.w	r0, #4294967295
 8013206:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 801320a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801320e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8013210:	e7f9      	b.n	8013206 <__ssvfiscanf_r+0x2de>
 8013212:	bf00      	nop
 8013214:	0800f8f1 	.word	0x0800f8f1

08013218 <_scanf_chars>:
 8013218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801321c:	4615      	mov	r5, r2
 801321e:	688a      	ldr	r2, [r1, #8]
 8013220:	4680      	mov	r8, r0
 8013222:	460c      	mov	r4, r1
 8013224:	b932      	cbnz	r2, 8013234 <_scanf_chars+0x1c>
 8013226:	698a      	ldr	r2, [r1, #24]
 8013228:	2a00      	cmp	r2, #0
 801322a:	bf0c      	ite	eq
 801322c:	2201      	moveq	r2, #1
 801322e:	f04f 32ff 	movne.w	r2, #4294967295
 8013232:	608a      	str	r2, [r1, #8]
 8013234:	6822      	ldr	r2, [r4, #0]
 8013236:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80132c8 <_scanf_chars+0xb0>
 801323a:	06d1      	lsls	r1, r2, #27
 801323c:	bf5f      	itttt	pl
 801323e:	681a      	ldrpl	r2, [r3, #0]
 8013240:	1d11      	addpl	r1, r2, #4
 8013242:	6019      	strpl	r1, [r3, #0]
 8013244:	6816      	ldrpl	r6, [r2, #0]
 8013246:	2700      	movs	r7, #0
 8013248:	69a0      	ldr	r0, [r4, #24]
 801324a:	b188      	cbz	r0, 8013270 <_scanf_chars+0x58>
 801324c:	2801      	cmp	r0, #1
 801324e:	d107      	bne.n	8013260 <_scanf_chars+0x48>
 8013250:	682a      	ldr	r2, [r5, #0]
 8013252:	7811      	ldrb	r1, [r2, #0]
 8013254:	6962      	ldr	r2, [r4, #20]
 8013256:	5c52      	ldrb	r2, [r2, r1]
 8013258:	b952      	cbnz	r2, 8013270 <_scanf_chars+0x58>
 801325a:	2f00      	cmp	r7, #0
 801325c:	d031      	beq.n	80132c2 <_scanf_chars+0xaa>
 801325e:	e022      	b.n	80132a6 <_scanf_chars+0x8e>
 8013260:	2802      	cmp	r0, #2
 8013262:	d120      	bne.n	80132a6 <_scanf_chars+0x8e>
 8013264:	682b      	ldr	r3, [r5, #0]
 8013266:	781b      	ldrb	r3, [r3, #0]
 8013268:	f813 3009 	ldrb.w	r3, [r3, r9]
 801326c:	071b      	lsls	r3, r3, #28
 801326e:	d41a      	bmi.n	80132a6 <_scanf_chars+0x8e>
 8013270:	6823      	ldr	r3, [r4, #0]
 8013272:	06da      	lsls	r2, r3, #27
 8013274:	bf5e      	ittt	pl
 8013276:	682b      	ldrpl	r3, [r5, #0]
 8013278:	781b      	ldrbpl	r3, [r3, #0]
 801327a:	f806 3b01 	strbpl.w	r3, [r6], #1
 801327e:	682a      	ldr	r2, [r5, #0]
 8013280:	686b      	ldr	r3, [r5, #4]
 8013282:	3201      	adds	r2, #1
 8013284:	602a      	str	r2, [r5, #0]
 8013286:	68a2      	ldr	r2, [r4, #8]
 8013288:	3b01      	subs	r3, #1
 801328a:	3a01      	subs	r2, #1
 801328c:	606b      	str	r3, [r5, #4]
 801328e:	3701      	adds	r7, #1
 8013290:	60a2      	str	r2, [r4, #8]
 8013292:	b142      	cbz	r2, 80132a6 <_scanf_chars+0x8e>
 8013294:	2b00      	cmp	r3, #0
 8013296:	dcd7      	bgt.n	8013248 <_scanf_chars+0x30>
 8013298:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801329c:	4629      	mov	r1, r5
 801329e:	4640      	mov	r0, r8
 80132a0:	4798      	blx	r3
 80132a2:	2800      	cmp	r0, #0
 80132a4:	d0d0      	beq.n	8013248 <_scanf_chars+0x30>
 80132a6:	6823      	ldr	r3, [r4, #0]
 80132a8:	f013 0310 	ands.w	r3, r3, #16
 80132ac:	d105      	bne.n	80132ba <_scanf_chars+0xa2>
 80132ae:	68e2      	ldr	r2, [r4, #12]
 80132b0:	3201      	adds	r2, #1
 80132b2:	60e2      	str	r2, [r4, #12]
 80132b4:	69a2      	ldr	r2, [r4, #24]
 80132b6:	b102      	cbz	r2, 80132ba <_scanf_chars+0xa2>
 80132b8:	7033      	strb	r3, [r6, #0]
 80132ba:	6923      	ldr	r3, [r4, #16]
 80132bc:	443b      	add	r3, r7
 80132be:	6123      	str	r3, [r4, #16]
 80132c0:	2000      	movs	r0, #0
 80132c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80132c6:	bf00      	nop
 80132c8:	08014731 	.word	0x08014731

080132cc <_scanf_i>:
 80132cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132d0:	4698      	mov	r8, r3
 80132d2:	4b76      	ldr	r3, [pc, #472]	; (80134ac <_scanf_i+0x1e0>)
 80132d4:	460c      	mov	r4, r1
 80132d6:	4682      	mov	sl, r0
 80132d8:	4616      	mov	r6, r2
 80132da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80132de:	b087      	sub	sp, #28
 80132e0:	ab03      	add	r3, sp, #12
 80132e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80132e6:	4b72      	ldr	r3, [pc, #456]	; (80134b0 <_scanf_i+0x1e4>)
 80132e8:	69a1      	ldr	r1, [r4, #24]
 80132ea:	4a72      	ldr	r2, [pc, #456]	; (80134b4 <_scanf_i+0x1e8>)
 80132ec:	2903      	cmp	r1, #3
 80132ee:	bf18      	it	ne
 80132f0:	461a      	movne	r2, r3
 80132f2:	68a3      	ldr	r3, [r4, #8]
 80132f4:	9201      	str	r2, [sp, #4]
 80132f6:	1e5a      	subs	r2, r3, #1
 80132f8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80132fc:	bf88      	it	hi
 80132fe:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8013302:	4627      	mov	r7, r4
 8013304:	bf82      	ittt	hi
 8013306:	eb03 0905 	addhi.w	r9, r3, r5
 801330a:	f240 135d 	movwhi	r3, #349	; 0x15d
 801330e:	60a3      	strhi	r3, [r4, #8]
 8013310:	f857 3b1c 	ldr.w	r3, [r7], #28
 8013314:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8013318:	bf98      	it	ls
 801331a:	f04f 0900 	movls.w	r9, #0
 801331e:	6023      	str	r3, [r4, #0]
 8013320:	463d      	mov	r5, r7
 8013322:	f04f 0b00 	mov.w	fp, #0
 8013326:	6831      	ldr	r1, [r6, #0]
 8013328:	ab03      	add	r3, sp, #12
 801332a:	7809      	ldrb	r1, [r1, #0]
 801332c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8013330:	2202      	movs	r2, #2
 8013332:	f7ec ff75 	bl	8000220 <memchr>
 8013336:	b328      	cbz	r0, 8013384 <_scanf_i+0xb8>
 8013338:	f1bb 0f01 	cmp.w	fp, #1
 801333c:	d159      	bne.n	80133f2 <_scanf_i+0x126>
 801333e:	6862      	ldr	r2, [r4, #4]
 8013340:	b92a      	cbnz	r2, 801334e <_scanf_i+0x82>
 8013342:	6822      	ldr	r2, [r4, #0]
 8013344:	2308      	movs	r3, #8
 8013346:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801334a:	6063      	str	r3, [r4, #4]
 801334c:	6022      	str	r2, [r4, #0]
 801334e:	6822      	ldr	r2, [r4, #0]
 8013350:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8013354:	6022      	str	r2, [r4, #0]
 8013356:	68a2      	ldr	r2, [r4, #8]
 8013358:	1e51      	subs	r1, r2, #1
 801335a:	60a1      	str	r1, [r4, #8]
 801335c:	b192      	cbz	r2, 8013384 <_scanf_i+0xb8>
 801335e:	6832      	ldr	r2, [r6, #0]
 8013360:	1c51      	adds	r1, r2, #1
 8013362:	6031      	str	r1, [r6, #0]
 8013364:	7812      	ldrb	r2, [r2, #0]
 8013366:	f805 2b01 	strb.w	r2, [r5], #1
 801336a:	6872      	ldr	r2, [r6, #4]
 801336c:	3a01      	subs	r2, #1
 801336e:	2a00      	cmp	r2, #0
 8013370:	6072      	str	r2, [r6, #4]
 8013372:	dc07      	bgt.n	8013384 <_scanf_i+0xb8>
 8013374:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8013378:	4631      	mov	r1, r6
 801337a:	4650      	mov	r0, sl
 801337c:	4790      	blx	r2
 801337e:	2800      	cmp	r0, #0
 8013380:	f040 8085 	bne.w	801348e <_scanf_i+0x1c2>
 8013384:	f10b 0b01 	add.w	fp, fp, #1
 8013388:	f1bb 0f03 	cmp.w	fp, #3
 801338c:	d1cb      	bne.n	8013326 <_scanf_i+0x5a>
 801338e:	6863      	ldr	r3, [r4, #4]
 8013390:	b90b      	cbnz	r3, 8013396 <_scanf_i+0xca>
 8013392:	230a      	movs	r3, #10
 8013394:	6063      	str	r3, [r4, #4]
 8013396:	6863      	ldr	r3, [r4, #4]
 8013398:	4947      	ldr	r1, [pc, #284]	; (80134b8 <_scanf_i+0x1ec>)
 801339a:	6960      	ldr	r0, [r4, #20]
 801339c:	1ac9      	subs	r1, r1, r3
 801339e:	f000 f8b7 	bl	8013510 <__sccl>
 80133a2:	f04f 0b00 	mov.w	fp, #0
 80133a6:	68a3      	ldr	r3, [r4, #8]
 80133a8:	6822      	ldr	r2, [r4, #0]
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	d03d      	beq.n	801342a <_scanf_i+0x15e>
 80133ae:	6831      	ldr	r1, [r6, #0]
 80133b0:	6960      	ldr	r0, [r4, #20]
 80133b2:	f891 c000 	ldrb.w	ip, [r1]
 80133b6:	f810 000c 	ldrb.w	r0, [r0, ip]
 80133ba:	2800      	cmp	r0, #0
 80133bc:	d035      	beq.n	801342a <_scanf_i+0x15e>
 80133be:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80133c2:	d124      	bne.n	801340e <_scanf_i+0x142>
 80133c4:	0510      	lsls	r0, r2, #20
 80133c6:	d522      	bpl.n	801340e <_scanf_i+0x142>
 80133c8:	f10b 0b01 	add.w	fp, fp, #1
 80133cc:	f1b9 0f00 	cmp.w	r9, #0
 80133d0:	d003      	beq.n	80133da <_scanf_i+0x10e>
 80133d2:	3301      	adds	r3, #1
 80133d4:	f109 39ff 	add.w	r9, r9, #4294967295
 80133d8:	60a3      	str	r3, [r4, #8]
 80133da:	6873      	ldr	r3, [r6, #4]
 80133dc:	3b01      	subs	r3, #1
 80133de:	2b00      	cmp	r3, #0
 80133e0:	6073      	str	r3, [r6, #4]
 80133e2:	dd1b      	ble.n	801341c <_scanf_i+0x150>
 80133e4:	6833      	ldr	r3, [r6, #0]
 80133e6:	3301      	adds	r3, #1
 80133e8:	6033      	str	r3, [r6, #0]
 80133ea:	68a3      	ldr	r3, [r4, #8]
 80133ec:	3b01      	subs	r3, #1
 80133ee:	60a3      	str	r3, [r4, #8]
 80133f0:	e7d9      	b.n	80133a6 <_scanf_i+0xda>
 80133f2:	f1bb 0f02 	cmp.w	fp, #2
 80133f6:	d1ae      	bne.n	8013356 <_scanf_i+0x8a>
 80133f8:	6822      	ldr	r2, [r4, #0]
 80133fa:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80133fe:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8013402:	d1bf      	bne.n	8013384 <_scanf_i+0xb8>
 8013404:	2310      	movs	r3, #16
 8013406:	6063      	str	r3, [r4, #4]
 8013408:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801340c:	e7a2      	b.n	8013354 <_scanf_i+0x88>
 801340e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8013412:	6022      	str	r2, [r4, #0]
 8013414:	780b      	ldrb	r3, [r1, #0]
 8013416:	f805 3b01 	strb.w	r3, [r5], #1
 801341a:	e7de      	b.n	80133da <_scanf_i+0x10e>
 801341c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013420:	4631      	mov	r1, r6
 8013422:	4650      	mov	r0, sl
 8013424:	4798      	blx	r3
 8013426:	2800      	cmp	r0, #0
 8013428:	d0df      	beq.n	80133ea <_scanf_i+0x11e>
 801342a:	6823      	ldr	r3, [r4, #0]
 801342c:	05db      	lsls	r3, r3, #23
 801342e:	d50d      	bpl.n	801344c <_scanf_i+0x180>
 8013430:	42bd      	cmp	r5, r7
 8013432:	d909      	bls.n	8013448 <_scanf_i+0x17c>
 8013434:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8013438:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801343c:	4632      	mov	r2, r6
 801343e:	4650      	mov	r0, sl
 8013440:	4798      	blx	r3
 8013442:	f105 39ff 	add.w	r9, r5, #4294967295
 8013446:	464d      	mov	r5, r9
 8013448:	42bd      	cmp	r5, r7
 801344a:	d02d      	beq.n	80134a8 <_scanf_i+0x1dc>
 801344c:	6822      	ldr	r2, [r4, #0]
 801344e:	f012 0210 	ands.w	r2, r2, #16
 8013452:	d113      	bne.n	801347c <_scanf_i+0x1b0>
 8013454:	702a      	strb	r2, [r5, #0]
 8013456:	6863      	ldr	r3, [r4, #4]
 8013458:	9e01      	ldr	r6, [sp, #4]
 801345a:	4639      	mov	r1, r7
 801345c:	4650      	mov	r0, sl
 801345e:	47b0      	blx	r6
 8013460:	6821      	ldr	r1, [r4, #0]
 8013462:	f8d8 3000 	ldr.w	r3, [r8]
 8013466:	f011 0f20 	tst.w	r1, #32
 801346a:	d013      	beq.n	8013494 <_scanf_i+0x1c8>
 801346c:	1d1a      	adds	r2, r3, #4
 801346e:	f8c8 2000 	str.w	r2, [r8]
 8013472:	681b      	ldr	r3, [r3, #0]
 8013474:	6018      	str	r0, [r3, #0]
 8013476:	68e3      	ldr	r3, [r4, #12]
 8013478:	3301      	adds	r3, #1
 801347a:	60e3      	str	r3, [r4, #12]
 801347c:	1bed      	subs	r5, r5, r7
 801347e:	44ab      	add	fp, r5
 8013480:	6925      	ldr	r5, [r4, #16]
 8013482:	445d      	add	r5, fp
 8013484:	6125      	str	r5, [r4, #16]
 8013486:	2000      	movs	r0, #0
 8013488:	b007      	add	sp, #28
 801348a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801348e:	f04f 0b00 	mov.w	fp, #0
 8013492:	e7ca      	b.n	801342a <_scanf_i+0x15e>
 8013494:	1d1a      	adds	r2, r3, #4
 8013496:	f8c8 2000 	str.w	r2, [r8]
 801349a:	681b      	ldr	r3, [r3, #0]
 801349c:	f011 0f01 	tst.w	r1, #1
 80134a0:	bf14      	ite	ne
 80134a2:	8018      	strhne	r0, [r3, #0]
 80134a4:	6018      	streq	r0, [r3, #0]
 80134a6:	e7e6      	b.n	8013476 <_scanf_i+0x1aa>
 80134a8:	2001      	movs	r0, #1
 80134aa:	e7ed      	b.n	8013488 <_scanf_i+0x1bc>
 80134ac:	08014680 	.word	0x08014680
 80134b0:	08013665 	.word	0x08013665
 80134b4:	08010bcd 	.word	0x08010bcd
 80134b8:	08014abe 	.word	0x08014abe

080134bc <_read_r>:
 80134bc:	b538      	push	{r3, r4, r5, lr}
 80134be:	4d07      	ldr	r5, [pc, #28]	; (80134dc <_read_r+0x20>)
 80134c0:	4604      	mov	r4, r0
 80134c2:	4608      	mov	r0, r1
 80134c4:	4611      	mov	r1, r2
 80134c6:	2200      	movs	r2, #0
 80134c8:	602a      	str	r2, [r5, #0]
 80134ca:	461a      	mov	r2, r3
 80134cc:	f7ef f9b8 	bl	8002840 <_read>
 80134d0:	1c43      	adds	r3, r0, #1
 80134d2:	d102      	bne.n	80134da <_read_r+0x1e>
 80134d4:	682b      	ldr	r3, [r5, #0]
 80134d6:	b103      	cbz	r3, 80134da <_read_r+0x1e>
 80134d8:	6023      	str	r3, [r4, #0]
 80134da:	bd38      	pop	{r3, r4, r5, pc}
 80134dc:	20000770 	.word	0x20000770

080134e0 <nan>:
 80134e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80134e8 <nan+0x8>
 80134e4:	4770      	bx	lr
 80134e6:	bf00      	nop
 80134e8:	00000000 	.word	0x00000000
 80134ec:	7ff80000 	.word	0x7ff80000

080134f0 <_sbrk_r>:
 80134f0:	b538      	push	{r3, r4, r5, lr}
 80134f2:	4d06      	ldr	r5, [pc, #24]	; (801350c <_sbrk_r+0x1c>)
 80134f4:	2300      	movs	r3, #0
 80134f6:	4604      	mov	r4, r0
 80134f8:	4608      	mov	r0, r1
 80134fa:	602b      	str	r3, [r5, #0]
 80134fc:	f7ef fa0e 	bl	800291c <_sbrk>
 8013500:	1c43      	adds	r3, r0, #1
 8013502:	d102      	bne.n	801350a <_sbrk_r+0x1a>
 8013504:	682b      	ldr	r3, [r5, #0]
 8013506:	b103      	cbz	r3, 801350a <_sbrk_r+0x1a>
 8013508:	6023      	str	r3, [r4, #0]
 801350a:	bd38      	pop	{r3, r4, r5, pc}
 801350c:	20000770 	.word	0x20000770

08013510 <__sccl>:
 8013510:	b570      	push	{r4, r5, r6, lr}
 8013512:	780b      	ldrb	r3, [r1, #0]
 8013514:	4604      	mov	r4, r0
 8013516:	2b5e      	cmp	r3, #94	; 0x5e
 8013518:	bf0b      	itete	eq
 801351a:	784b      	ldrbeq	r3, [r1, #1]
 801351c:	1c48      	addne	r0, r1, #1
 801351e:	1c88      	addeq	r0, r1, #2
 8013520:	2200      	movne	r2, #0
 8013522:	bf08      	it	eq
 8013524:	2201      	moveq	r2, #1
 8013526:	1e61      	subs	r1, r4, #1
 8013528:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801352c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8013530:	42a9      	cmp	r1, r5
 8013532:	d1fb      	bne.n	801352c <__sccl+0x1c>
 8013534:	b90b      	cbnz	r3, 801353a <__sccl+0x2a>
 8013536:	3801      	subs	r0, #1
 8013538:	bd70      	pop	{r4, r5, r6, pc}
 801353a:	f082 0201 	eor.w	r2, r2, #1
 801353e:	54e2      	strb	r2, [r4, r3]
 8013540:	4605      	mov	r5, r0
 8013542:	4628      	mov	r0, r5
 8013544:	f810 1b01 	ldrb.w	r1, [r0], #1
 8013548:	292d      	cmp	r1, #45	; 0x2d
 801354a:	d006      	beq.n	801355a <__sccl+0x4a>
 801354c:	295d      	cmp	r1, #93	; 0x5d
 801354e:	d0f3      	beq.n	8013538 <__sccl+0x28>
 8013550:	b909      	cbnz	r1, 8013556 <__sccl+0x46>
 8013552:	4628      	mov	r0, r5
 8013554:	e7f0      	b.n	8013538 <__sccl+0x28>
 8013556:	460b      	mov	r3, r1
 8013558:	e7f1      	b.n	801353e <__sccl+0x2e>
 801355a:	786e      	ldrb	r6, [r5, #1]
 801355c:	2e5d      	cmp	r6, #93	; 0x5d
 801355e:	d0fa      	beq.n	8013556 <__sccl+0x46>
 8013560:	42b3      	cmp	r3, r6
 8013562:	dcf8      	bgt.n	8013556 <__sccl+0x46>
 8013564:	3502      	adds	r5, #2
 8013566:	4619      	mov	r1, r3
 8013568:	3101      	adds	r1, #1
 801356a:	428e      	cmp	r6, r1
 801356c:	5462      	strb	r2, [r4, r1]
 801356e:	dcfb      	bgt.n	8013568 <__sccl+0x58>
 8013570:	1af1      	subs	r1, r6, r3
 8013572:	3901      	subs	r1, #1
 8013574:	1c58      	adds	r0, r3, #1
 8013576:	42b3      	cmp	r3, r6
 8013578:	bfa8      	it	ge
 801357a:	2100      	movge	r1, #0
 801357c:	1843      	adds	r3, r0, r1
 801357e:	e7e0      	b.n	8013542 <__sccl+0x32>

08013580 <_strtoul_l.constprop.0>:
 8013580:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013584:	4f36      	ldr	r7, [pc, #216]	; (8013660 <_strtoul_l.constprop.0+0xe0>)
 8013586:	4686      	mov	lr, r0
 8013588:	460d      	mov	r5, r1
 801358a:	4628      	mov	r0, r5
 801358c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013590:	5de6      	ldrb	r6, [r4, r7]
 8013592:	f016 0608 	ands.w	r6, r6, #8
 8013596:	d1f8      	bne.n	801358a <_strtoul_l.constprop.0+0xa>
 8013598:	2c2d      	cmp	r4, #45	; 0x2d
 801359a:	d12f      	bne.n	80135fc <_strtoul_l.constprop.0+0x7c>
 801359c:	782c      	ldrb	r4, [r5, #0]
 801359e:	2601      	movs	r6, #1
 80135a0:	1c85      	adds	r5, r0, #2
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	d057      	beq.n	8013656 <_strtoul_l.constprop.0+0xd6>
 80135a6:	2b10      	cmp	r3, #16
 80135a8:	d109      	bne.n	80135be <_strtoul_l.constprop.0+0x3e>
 80135aa:	2c30      	cmp	r4, #48	; 0x30
 80135ac:	d107      	bne.n	80135be <_strtoul_l.constprop.0+0x3e>
 80135ae:	7828      	ldrb	r0, [r5, #0]
 80135b0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80135b4:	2858      	cmp	r0, #88	; 0x58
 80135b6:	d149      	bne.n	801364c <_strtoul_l.constprop.0+0xcc>
 80135b8:	786c      	ldrb	r4, [r5, #1]
 80135ba:	2310      	movs	r3, #16
 80135bc:	3502      	adds	r5, #2
 80135be:	f04f 38ff 	mov.w	r8, #4294967295
 80135c2:	2700      	movs	r7, #0
 80135c4:	fbb8 f8f3 	udiv	r8, r8, r3
 80135c8:	fb03 f908 	mul.w	r9, r3, r8
 80135cc:	ea6f 0909 	mvn.w	r9, r9
 80135d0:	4638      	mov	r0, r7
 80135d2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80135d6:	f1bc 0f09 	cmp.w	ip, #9
 80135da:	d814      	bhi.n	8013606 <_strtoul_l.constprop.0+0x86>
 80135dc:	4664      	mov	r4, ip
 80135de:	42a3      	cmp	r3, r4
 80135e0:	dd22      	ble.n	8013628 <_strtoul_l.constprop.0+0xa8>
 80135e2:	2f00      	cmp	r7, #0
 80135e4:	db1d      	blt.n	8013622 <_strtoul_l.constprop.0+0xa2>
 80135e6:	4580      	cmp	r8, r0
 80135e8:	d31b      	bcc.n	8013622 <_strtoul_l.constprop.0+0xa2>
 80135ea:	d101      	bne.n	80135f0 <_strtoul_l.constprop.0+0x70>
 80135ec:	45a1      	cmp	r9, r4
 80135ee:	db18      	blt.n	8013622 <_strtoul_l.constprop.0+0xa2>
 80135f0:	fb00 4003 	mla	r0, r0, r3, r4
 80135f4:	2701      	movs	r7, #1
 80135f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80135fa:	e7ea      	b.n	80135d2 <_strtoul_l.constprop.0+0x52>
 80135fc:	2c2b      	cmp	r4, #43	; 0x2b
 80135fe:	bf04      	itt	eq
 8013600:	782c      	ldrbeq	r4, [r5, #0]
 8013602:	1c85      	addeq	r5, r0, #2
 8013604:	e7cd      	b.n	80135a2 <_strtoul_l.constprop.0+0x22>
 8013606:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801360a:	f1bc 0f19 	cmp.w	ip, #25
 801360e:	d801      	bhi.n	8013614 <_strtoul_l.constprop.0+0x94>
 8013610:	3c37      	subs	r4, #55	; 0x37
 8013612:	e7e4      	b.n	80135de <_strtoul_l.constprop.0+0x5e>
 8013614:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8013618:	f1bc 0f19 	cmp.w	ip, #25
 801361c:	d804      	bhi.n	8013628 <_strtoul_l.constprop.0+0xa8>
 801361e:	3c57      	subs	r4, #87	; 0x57
 8013620:	e7dd      	b.n	80135de <_strtoul_l.constprop.0+0x5e>
 8013622:	f04f 37ff 	mov.w	r7, #4294967295
 8013626:	e7e6      	b.n	80135f6 <_strtoul_l.constprop.0+0x76>
 8013628:	2f00      	cmp	r7, #0
 801362a:	da07      	bge.n	801363c <_strtoul_l.constprop.0+0xbc>
 801362c:	2322      	movs	r3, #34	; 0x22
 801362e:	f8ce 3000 	str.w	r3, [lr]
 8013632:	f04f 30ff 	mov.w	r0, #4294967295
 8013636:	b932      	cbnz	r2, 8013646 <_strtoul_l.constprop.0+0xc6>
 8013638:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801363c:	b106      	cbz	r6, 8013640 <_strtoul_l.constprop.0+0xc0>
 801363e:	4240      	negs	r0, r0
 8013640:	2a00      	cmp	r2, #0
 8013642:	d0f9      	beq.n	8013638 <_strtoul_l.constprop.0+0xb8>
 8013644:	b107      	cbz	r7, 8013648 <_strtoul_l.constprop.0+0xc8>
 8013646:	1e69      	subs	r1, r5, #1
 8013648:	6011      	str	r1, [r2, #0]
 801364a:	e7f5      	b.n	8013638 <_strtoul_l.constprop.0+0xb8>
 801364c:	2430      	movs	r4, #48	; 0x30
 801364e:	2b00      	cmp	r3, #0
 8013650:	d1b5      	bne.n	80135be <_strtoul_l.constprop.0+0x3e>
 8013652:	2308      	movs	r3, #8
 8013654:	e7b3      	b.n	80135be <_strtoul_l.constprop.0+0x3e>
 8013656:	2c30      	cmp	r4, #48	; 0x30
 8013658:	d0a9      	beq.n	80135ae <_strtoul_l.constprop.0+0x2e>
 801365a:	230a      	movs	r3, #10
 801365c:	e7af      	b.n	80135be <_strtoul_l.constprop.0+0x3e>
 801365e:	bf00      	nop
 8013660:	08014731 	.word	0x08014731

08013664 <_strtoul_r>:
 8013664:	f7ff bf8c 	b.w	8013580 <_strtoul_l.constprop.0>

08013668 <__submore>:
 8013668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801366c:	460c      	mov	r4, r1
 801366e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8013670:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013674:	4299      	cmp	r1, r3
 8013676:	d11d      	bne.n	80136b4 <__submore+0x4c>
 8013678:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801367c:	f7ff fa2a 	bl	8012ad4 <_malloc_r>
 8013680:	b918      	cbnz	r0, 801368a <__submore+0x22>
 8013682:	f04f 30ff 	mov.w	r0, #4294967295
 8013686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801368a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801368e:	63a3      	str	r3, [r4, #56]	; 0x38
 8013690:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8013694:	6360      	str	r0, [r4, #52]	; 0x34
 8013696:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801369a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801369e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80136a2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80136a6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80136aa:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80136ae:	6020      	str	r0, [r4, #0]
 80136b0:	2000      	movs	r0, #0
 80136b2:	e7e8      	b.n	8013686 <__submore+0x1e>
 80136b4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80136b6:	0077      	lsls	r7, r6, #1
 80136b8:	463a      	mov	r2, r7
 80136ba:	f000 fa2d 	bl	8013b18 <_realloc_r>
 80136be:	4605      	mov	r5, r0
 80136c0:	2800      	cmp	r0, #0
 80136c2:	d0de      	beq.n	8013682 <__submore+0x1a>
 80136c4:	eb00 0806 	add.w	r8, r0, r6
 80136c8:	4601      	mov	r1, r0
 80136ca:	4632      	mov	r2, r6
 80136cc:	4640      	mov	r0, r8
 80136ce:	f7fb fc8f 	bl	800eff0 <memcpy>
 80136d2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80136d6:	f8c4 8000 	str.w	r8, [r4]
 80136da:	e7e9      	b.n	80136b0 <__submore+0x48>

080136dc <__ascii_wctomb>:
 80136dc:	b149      	cbz	r1, 80136f2 <__ascii_wctomb+0x16>
 80136de:	2aff      	cmp	r2, #255	; 0xff
 80136e0:	bf85      	ittet	hi
 80136e2:	238a      	movhi	r3, #138	; 0x8a
 80136e4:	6003      	strhi	r3, [r0, #0]
 80136e6:	700a      	strbls	r2, [r1, #0]
 80136e8:	f04f 30ff 	movhi.w	r0, #4294967295
 80136ec:	bf98      	it	ls
 80136ee:	2001      	movls	r0, #1
 80136f0:	4770      	bx	lr
 80136f2:	4608      	mov	r0, r1
 80136f4:	4770      	bx	lr
	...

080136f8 <__assert_func>:
 80136f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80136fa:	4614      	mov	r4, r2
 80136fc:	461a      	mov	r2, r3
 80136fe:	4b09      	ldr	r3, [pc, #36]	; (8013724 <__assert_func+0x2c>)
 8013700:	681b      	ldr	r3, [r3, #0]
 8013702:	4605      	mov	r5, r0
 8013704:	68d8      	ldr	r0, [r3, #12]
 8013706:	b14c      	cbz	r4, 801371c <__assert_func+0x24>
 8013708:	4b07      	ldr	r3, [pc, #28]	; (8013728 <__assert_func+0x30>)
 801370a:	9100      	str	r1, [sp, #0]
 801370c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013710:	4906      	ldr	r1, [pc, #24]	; (801372c <__assert_func+0x34>)
 8013712:	462b      	mov	r3, r5
 8013714:	f000 f9a6 	bl	8013a64 <fiprintf>
 8013718:	f000 fc46 	bl	8013fa8 <abort>
 801371c:	4b04      	ldr	r3, [pc, #16]	; (8013730 <__assert_func+0x38>)
 801371e:	461c      	mov	r4, r3
 8013720:	e7f3      	b.n	801370a <__assert_func+0x12>
 8013722:	bf00      	nop
 8013724:	200002c8 	.word	0x200002c8
 8013728:	08014ac0 	.word	0x08014ac0
 801372c:	08014acd 	.word	0x08014acd
 8013730:	08014afb 	.word	0x08014afb

08013734 <__sflush_r>:
 8013734:	898a      	ldrh	r2, [r1, #12]
 8013736:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801373a:	4605      	mov	r5, r0
 801373c:	0710      	lsls	r0, r2, #28
 801373e:	460c      	mov	r4, r1
 8013740:	d458      	bmi.n	80137f4 <__sflush_r+0xc0>
 8013742:	684b      	ldr	r3, [r1, #4]
 8013744:	2b00      	cmp	r3, #0
 8013746:	dc05      	bgt.n	8013754 <__sflush_r+0x20>
 8013748:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801374a:	2b00      	cmp	r3, #0
 801374c:	dc02      	bgt.n	8013754 <__sflush_r+0x20>
 801374e:	2000      	movs	r0, #0
 8013750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013754:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013756:	2e00      	cmp	r6, #0
 8013758:	d0f9      	beq.n	801374e <__sflush_r+0x1a>
 801375a:	2300      	movs	r3, #0
 801375c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013760:	682f      	ldr	r7, [r5, #0]
 8013762:	602b      	str	r3, [r5, #0]
 8013764:	d032      	beq.n	80137cc <__sflush_r+0x98>
 8013766:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013768:	89a3      	ldrh	r3, [r4, #12]
 801376a:	075a      	lsls	r2, r3, #29
 801376c:	d505      	bpl.n	801377a <__sflush_r+0x46>
 801376e:	6863      	ldr	r3, [r4, #4]
 8013770:	1ac0      	subs	r0, r0, r3
 8013772:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013774:	b10b      	cbz	r3, 801377a <__sflush_r+0x46>
 8013776:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013778:	1ac0      	subs	r0, r0, r3
 801377a:	2300      	movs	r3, #0
 801377c:	4602      	mov	r2, r0
 801377e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013780:	6a21      	ldr	r1, [r4, #32]
 8013782:	4628      	mov	r0, r5
 8013784:	47b0      	blx	r6
 8013786:	1c43      	adds	r3, r0, #1
 8013788:	89a3      	ldrh	r3, [r4, #12]
 801378a:	d106      	bne.n	801379a <__sflush_r+0x66>
 801378c:	6829      	ldr	r1, [r5, #0]
 801378e:	291d      	cmp	r1, #29
 8013790:	d82c      	bhi.n	80137ec <__sflush_r+0xb8>
 8013792:	4a2a      	ldr	r2, [pc, #168]	; (801383c <__sflush_r+0x108>)
 8013794:	40ca      	lsrs	r2, r1
 8013796:	07d6      	lsls	r6, r2, #31
 8013798:	d528      	bpl.n	80137ec <__sflush_r+0xb8>
 801379a:	2200      	movs	r2, #0
 801379c:	6062      	str	r2, [r4, #4]
 801379e:	04d9      	lsls	r1, r3, #19
 80137a0:	6922      	ldr	r2, [r4, #16]
 80137a2:	6022      	str	r2, [r4, #0]
 80137a4:	d504      	bpl.n	80137b0 <__sflush_r+0x7c>
 80137a6:	1c42      	adds	r2, r0, #1
 80137a8:	d101      	bne.n	80137ae <__sflush_r+0x7a>
 80137aa:	682b      	ldr	r3, [r5, #0]
 80137ac:	b903      	cbnz	r3, 80137b0 <__sflush_r+0x7c>
 80137ae:	6560      	str	r0, [r4, #84]	; 0x54
 80137b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80137b2:	602f      	str	r7, [r5, #0]
 80137b4:	2900      	cmp	r1, #0
 80137b6:	d0ca      	beq.n	801374e <__sflush_r+0x1a>
 80137b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80137bc:	4299      	cmp	r1, r3
 80137be:	d002      	beq.n	80137c6 <__sflush_r+0x92>
 80137c0:	4628      	mov	r0, r5
 80137c2:	f7ff f91b 	bl	80129fc <_free_r>
 80137c6:	2000      	movs	r0, #0
 80137c8:	6360      	str	r0, [r4, #52]	; 0x34
 80137ca:	e7c1      	b.n	8013750 <__sflush_r+0x1c>
 80137cc:	6a21      	ldr	r1, [r4, #32]
 80137ce:	2301      	movs	r3, #1
 80137d0:	4628      	mov	r0, r5
 80137d2:	47b0      	blx	r6
 80137d4:	1c41      	adds	r1, r0, #1
 80137d6:	d1c7      	bne.n	8013768 <__sflush_r+0x34>
 80137d8:	682b      	ldr	r3, [r5, #0]
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d0c4      	beq.n	8013768 <__sflush_r+0x34>
 80137de:	2b1d      	cmp	r3, #29
 80137e0:	d001      	beq.n	80137e6 <__sflush_r+0xb2>
 80137e2:	2b16      	cmp	r3, #22
 80137e4:	d101      	bne.n	80137ea <__sflush_r+0xb6>
 80137e6:	602f      	str	r7, [r5, #0]
 80137e8:	e7b1      	b.n	801374e <__sflush_r+0x1a>
 80137ea:	89a3      	ldrh	r3, [r4, #12]
 80137ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80137f0:	81a3      	strh	r3, [r4, #12]
 80137f2:	e7ad      	b.n	8013750 <__sflush_r+0x1c>
 80137f4:	690f      	ldr	r7, [r1, #16]
 80137f6:	2f00      	cmp	r7, #0
 80137f8:	d0a9      	beq.n	801374e <__sflush_r+0x1a>
 80137fa:	0793      	lsls	r3, r2, #30
 80137fc:	680e      	ldr	r6, [r1, #0]
 80137fe:	bf08      	it	eq
 8013800:	694b      	ldreq	r3, [r1, #20]
 8013802:	600f      	str	r7, [r1, #0]
 8013804:	bf18      	it	ne
 8013806:	2300      	movne	r3, #0
 8013808:	eba6 0807 	sub.w	r8, r6, r7
 801380c:	608b      	str	r3, [r1, #8]
 801380e:	f1b8 0f00 	cmp.w	r8, #0
 8013812:	dd9c      	ble.n	801374e <__sflush_r+0x1a>
 8013814:	6a21      	ldr	r1, [r4, #32]
 8013816:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013818:	4643      	mov	r3, r8
 801381a:	463a      	mov	r2, r7
 801381c:	4628      	mov	r0, r5
 801381e:	47b0      	blx	r6
 8013820:	2800      	cmp	r0, #0
 8013822:	dc06      	bgt.n	8013832 <__sflush_r+0xfe>
 8013824:	89a3      	ldrh	r3, [r4, #12]
 8013826:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801382a:	81a3      	strh	r3, [r4, #12]
 801382c:	f04f 30ff 	mov.w	r0, #4294967295
 8013830:	e78e      	b.n	8013750 <__sflush_r+0x1c>
 8013832:	4407      	add	r7, r0
 8013834:	eba8 0800 	sub.w	r8, r8, r0
 8013838:	e7e9      	b.n	801380e <__sflush_r+0xda>
 801383a:	bf00      	nop
 801383c:	20400001 	.word	0x20400001

08013840 <_fflush_r>:
 8013840:	b538      	push	{r3, r4, r5, lr}
 8013842:	690b      	ldr	r3, [r1, #16]
 8013844:	4605      	mov	r5, r0
 8013846:	460c      	mov	r4, r1
 8013848:	b913      	cbnz	r3, 8013850 <_fflush_r+0x10>
 801384a:	2500      	movs	r5, #0
 801384c:	4628      	mov	r0, r5
 801384e:	bd38      	pop	{r3, r4, r5, pc}
 8013850:	b118      	cbz	r0, 801385a <_fflush_r+0x1a>
 8013852:	6983      	ldr	r3, [r0, #24]
 8013854:	b90b      	cbnz	r3, 801385a <_fflush_r+0x1a>
 8013856:	f000 f887 	bl	8013968 <__sinit>
 801385a:	4b14      	ldr	r3, [pc, #80]	; (80138ac <_fflush_r+0x6c>)
 801385c:	429c      	cmp	r4, r3
 801385e:	d11b      	bne.n	8013898 <_fflush_r+0x58>
 8013860:	686c      	ldr	r4, [r5, #4]
 8013862:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013866:	2b00      	cmp	r3, #0
 8013868:	d0ef      	beq.n	801384a <_fflush_r+0xa>
 801386a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801386c:	07d0      	lsls	r0, r2, #31
 801386e:	d404      	bmi.n	801387a <_fflush_r+0x3a>
 8013870:	0599      	lsls	r1, r3, #22
 8013872:	d402      	bmi.n	801387a <_fflush_r+0x3a>
 8013874:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013876:	f000 f927 	bl	8013ac8 <__retarget_lock_acquire_recursive>
 801387a:	4628      	mov	r0, r5
 801387c:	4621      	mov	r1, r4
 801387e:	f7ff ff59 	bl	8013734 <__sflush_r>
 8013882:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013884:	07da      	lsls	r2, r3, #31
 8013886:	4605      	mov	r5, r0
 8013888:	d4e0      	bmi.n	801384c <_fflush_r+0xc>
 801388a:	89a3      	ldrh	r3, [r4, #12]
 801388c:	059b      	lsls	r3, r3, #22
 801388e:	d4dd      	bmi.n	801384c <_fflush_r+0xc>
 8013890:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013892:	f000 f91a 	bl	8013aca <__retarget_lock_release_recursive>
 8013896:	e7d9      	b.n	801384c <_fflush_r+0xc>
 8013898:	4b05      	ldr	r3, [pc, #20]	; (80138b0 <_fflush_r+0x70>)
 801389a:	429c      	cmp	r4, r3
 801389c:	d101      	bne.n	80138a2 <_fflush_r+0x62>
 801389e:	68ac      	ldr	r4, [r5, #8]
 80138a0:	e7df      	b.n	8013862 <_fflush_r+0x22>
 80138a2:	4b04      	ldr	r3, [pc, #16]	; (80138b4 <_fflush_r+0x74>)
 80138a4:	429c      	cmp	r4, r3
 80138a6:	bf08      	it	eq
 80138a8:	68ec      	ldreq	r4, [r5, #12]
 80138aa:	e7da      	b.n	8013862 <_fflush_r+0x22>
 80138ac:	08014b1c 	.word	0x08014b1c
 80138b0:	08014b3c 	.word	0x08014b3c
 80138b4:	08014afc 	.word	0x08014afc

080138b8 <std>:
 80138b8:	2300      	movs	r3, #0
 80138ba:	b510      	push	{r4, lr}
 80138bc:	4604      	mov	r4, r0
 80138be:	e9c0 3300 	strd	r3, r3, [r0]
 80138c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80138c6:	6083      	str	r3, [r0, #8]
 80138c8:	8181      	strh	r1, [r0, #12]
 80138ca:	6643      	str	r3, [r0, #100]	; 0x64
 80138cc:	81c2      	strh	r2, [r0, #14]
 80138ce:	6183      	str	r3, [r0, #24]
 80138d0:	4619      	mov	r1, r3
 80138d2:	2208      	movs	r2, #8
 80138d4:	305c      	adds	r0, #92	; 0x5c
 80138d6:	f7fb fb99 	bl	800f00c <memset>
 80138da:	4b05      	ldr	r3, [pc, #20]	; (80138f0 <std+0x38>)
 80138dc:	6263      	str	r3, [r4, #36]	; 0x24
 80138de:	4b05      	ldr	r3, [pc, #20]	; (80138f4 <std+0x3c>)
 80138e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80138e2:	4b05      	ldr	r3, [pc, #20]	; (80138f8 <std+0x40>)
 80138e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80138e6:	4b05      	ldr	r3, [pc, #20]	; (80138fc <std+0x44>)
 80138e8:	6224      	str	r4, [r4, #32]
 80138ea:	6323      	str	r3, [r4, #48]	; 0x30
 80138ec:	bd10      	pop	{r4, pc}
 80138ee:	bf00      	nop
 80138f0:	0800fdb5 	.word	0x0800fdb5
 80138f4:	0800fddb 	.word	0x0800fddb
 80138f8:	0800fe13 	.word	0x0800fe13
 80138fc:	0800fe37 	.word	0x0800fe37

08013900 <_cleanup_r>:
 8013900:	4901      	ldr	r1, [pc, #4]	; (8013908 <_cleanup_r+0x8>)
 8013902:	f000 b8c1 	b.w	8013a88 <_fwalk_reent>
 8013906:	bf00      	nop
 8013908:	08013841 	.word	0x08013841

0801390c <__sfmoreglue>:
 801390c:	b570      	push	{r4, r5, r6, lr}
 801390e:	2268      	movs	r2, #104	; 0x68
 8013910:	1e4d      	subs	r5, r1, #1
 8013912:	4355      	muls	r5, r2
 8013914:	460e      	mov	r6, r1
 8013916:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801391a:	f7ff f8db 	bl	8012ad4 <_malloc_r>
 801391e:	4604      	mov	r4, r0
 8013920:	b140      	cbz	r0, 8013934 <__sfmoreglue+0x28>
 8013922:	2100      	movs	r1, #0
 8013924:	e9c0 1600 	strd	r1, r6, [r0]
 8013928:	300c      	adds	r0, #12
 801392a:	60a0      	str	r0, [r4, #8]
 801392c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013930:	f7fb fb6c 	bl	800f00c <memset>
 8013934:	4620      	mov	r0, r4
 8013936:	bd70      	pop	{r4, r5, r6, pc}

08013938 <__sfp_lock_acquire>:
 8013938:	4801      	ldr	r0, [pc, #4]	; (8013940 <__sfp_lock_acquire+0x8>)
 801393a:	f000 b8c5 	b.w	8013ac8 <__retarget_lock_acquire_recursive>
 801393e:	bf00      	nop
 8013940:	20000775 	.word	0x20000775

08013944 <__sfp_lock_release>:
 8013944:	4801      	ldr	r0, [pc, #4]	; (801394c <__sfp_lock_release+0x8>)
 8013946:	f000 b8c0 	b.w	8013aca <__retarget_lock_release_recursive>
 801394a:	bf00      	nop
 801394c:	20000775 	.word	0x20000775

08013950 <__sinit_lock_acquire>:
 8013950:	4801      	ldr	r0, [pc, #4]	; (8013958 <__sinit_lock_acquire+0x8>)
 8013952:	f000 b8b9 	b.w	8013ac8 <__retarget_lock_acquire_recursive>
 8013956:	bf00      	nop
 8013958:	20000776 	.word	0x20000776

0801395c <__sinit_lock_release>:
 801395c:	4801      	ldr	r0, [pc, #4]	; (8013964 <__sinit_lock_release+0x8>)
 801395e:	f000 b8b4 	b.w	8013aca <__retarget_lock_release_recursive>
 8013962:	bf00      	nop
 8013964:	20000776 	.word	0x20000776

08013968 <__sinit>:
 8013968:	b510      	push	{r4, lr}
 801396a:	4604      	mov	r4, r0
 801396c:	f7ff fff0 	bl	8013950 <__sinit_lock_acquire>
 8013970:	69a3      	ldr	r3, [r4, #24]
 8013972:	b11b      	cbz	r3, 801397c <__sinit+0x14>
 8013974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013978:	f7ff bff0 	b.w	801395c <__sinit_lock_release>
 801397c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013980:	6523      	str	r3, [r4, #80]	; 0x50
 8013982:	4b13      	ldr	r3, [pc, #76]	; (80139d0 <__sinit+0x68>)
 8013984:	4a13      	ldr	r2, [pc, #76]	; (80139d4 <__sinit+0x6c>)
 8013986:	681b      	ldr	r3, [r3, #0]
 8013988:	62a2      	str	r2, [r4, #40]	; 0x28
 801398a:	42a3      	cmp	r3, r4
 801398c:	bf04      	itt	eq
 801398e:	2301      	moveq	r3, #1
 8013990:	61a3      	streq	r3, [r4, #24]
 8013992:	4620      	mov	r0, r4
 8013994:	f000 f820 	bl	80139d8 <__sfp>
 8013998:	6060      	str	r0, [r4, #4]
 801399a:	4620      	mov	r0, r4
 801399c:	f000 f81c 	bl	80139d8 <__sfp>
 80139a0:	60a0      	str	r0, [r4, #8]
 80139a2:	4620      	mov	r0, r4
 80139a4:	f000 f818 	bl	80139d8 <__sfp>
 80139a8:	2200      	movs	r2, #0
 80139aa:	60e0      	str	r0, [r4, #12]
 80139ac:	2104      	movs	r1, #4
 80139ae:	6860      	ldr	r0, [r4, #4]
 80139b0:	f7ff ff82 	bl	80138b8 <std>
 80139b4:	68a0      	ldr	r0, [r4, #8]
 80139b6:	2201      	movs	r2, #1
 80139b8:	2109      	movs	r1, #9
 80139ba:	f7ff ff7d 	bl	80138b8 <std>
 80139be:	68e0      	ldr	r0, [r4, #12]
 80139c0:	2202      	movs	r2, #2
 80139c2:	2112      	movs	r1, #18
 80139c4:	f7ff ff78 	bl	80138b8 <std>
 80139c8:	2301      	movs	r3, #1
 80139ca:	61a3      	str	r3, [r4, #24]
 80139cc:	e7d2      	b.n	8013974 <__sinit+0xc>
 80139ce:	bf00      	nop
 80139d0:	080146a4 	.word	0x080146a4
 80139d4:	08013901 	.word	0x08013901

080139d8 <__sfp>:
 80139d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139da:	4607      	mov	r7, r0
 80139dc:	f7ff ffac 	bl	8013938 <__sfp_lock_acquire>
 80139e0:	4b1e      	ldr	r3, [pc, #120]	; (8013a5c <__sfp+0x84>)
 80139e2:	681e      	ldr	r6, [r3, #0]
 80139e4:	69b3      	ldr	r3, [r6, #24]
 80139e6:	b913      	cbnz	r3, 80139ee <__sfp+0x16>
 80139e8:	4630      	mov	r0, r6
 80139ea:	f7ff ffbd 	bl	8013968 <__sinit>
 80139ee:	3648      	adds	r6, #72	; 0x48
 80139f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80139f4:	3b01      	subs	r3, #1
 80139f6:	d503      	bpl.n	8013a00 <__sfp+0x28>
 80139f8:	6833      	ldr	r3, [r6, #0]
 80139fa:	b30b      	cbz	r3, 8013a40 <__sfp+0x68>
 80139fc:	6836      	ldr	r6, [r6, #0]
 80139fe:	e7f7      	b.n	80139f0 <__sfp+0x18>
 8013a00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013a04:	b9d5      	cbnz	r5, 8013a3c <__sfp+0x64>
 8013a06:	4b16      	ldr	r3, [pc, #88]	; (8013a60 <__sfp+0x88>)
 8013a08:	60e3      	str	r3, [r4, #12]
 8013a0a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013a0e:	6665      	str	r5, [r4, #100]	; 0x64
 8013a10:	f000 f859 	bl	8013ac6 <__retarget_lock_init_recursive>
 8013a14:	f7ff ff96 	bl	8013944 <__sfp_lock_release>
 8013a18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013a1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013a20:	6025      	str	r5, [r4, #0]
 8013a22:	61a5      	str	r5, [r4, #24]
 8013a24:	2208      	movs	r2, #8
 8013a26:	4629      	mov	r1, r5
 8013a28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013a2c:	f7fb faee 	bl	800f00c <memset>
 8013a30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013a34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013a38:	4620      	mov	r0, r4
 8013a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a3c:	3468      	adds	r4, #104	; 0x68
 8013a3e:	e7d9      	b.n	80139f4 <__sfp+0x1c>
 8013a40:	2104      	movs	r1, #4
 8013a42:	4638      	mov	r0, r7
 8013a44:	f7ff ff62 	bl	801390c <__sfmoreglue>
 8013a48:	4604      	mov	r4, r0
 8013a4a:	6030      	str	r0, [r6, #0]
 8013a4c:	2800      	cmp	r0, #0
 8013a4e:	d1d5      	bne.n	80139fc <__sfp+0x24>
 8013a50:	f7ff ff78 	bl	8013944 <__sfp_lock_release>
 8013a54:	230c      	movs	r3, #12
 8013a56:	603b      	str	r3, [r7, #0]
 8013a58:	e7ee      	b.n	8013a38 <__sfp+0x60>
 8013a5a:	bf00      	nop
 8013a5c:	080146a4 	.word	0x080146a4
 8013a60:	ffff0001 	.word	0xffff0001

08013a64 <fiprintf>:
 8013a64:	b40e      	push	{r1, r2, r3}
 8013a66:	b503      	push	{r0, r1, lr}
 8013a68:	4601      	mov	r1, r0
 8013a6a:	ab03      	add	r3, sp, #12
 8013a6c:	4805      	ldr	r0, [pc, #20]	; (8013a84 <fiprintf+0x20>)
 8013a6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013a72:	6800      	ldr	r0, [r0, #0]
 8013a74:	9301      	str	r3, [sp, #4]
 8013a76:	f000 f8a7 	bl	8013bc8 <_vfiprintf_r>
 8013a7a:	b002      	add	sp, #8
 8013a7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013a80:	b003      	add	sp, #12
 8013a82:	4770      	bx	lr
 8013a84:	200002c8 	.word	0x200002c8

08013a88 <_fwalk_reent>:
 8013a88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013a8c:	4606      	mov	r6, r0
 8013a8e:	4688      	mov	r8, r1
 8013a90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013a94:	2700      	movs	r7, #0
 8013a96:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013a9a:	f1b9 0901 	subs.w	r9, r9, #1
 8013a9e:	d505      	bpl.n	8013aac <_fwalk_reent+0x24>
 8013aa0:	6824      	ldr	r4, [r4, #0]
 8013aa2:	2c00      	cmp	r4, #0
 8013aa4:	d1f7      	bne.n	8013a96 <_fwalk_reent+0xe>
 8013aa6:	4638      	mov	r0, r7
 8013aa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013aac:	89ab      	ldrh	r3, [r5, #12]
 8013aae:	2b01      	cmp	r3, #1
 8013ab0:	d907      	bls.n	8013ac2 <_fwalk_reent+0x3a>
 8013ab2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013ab6:	3301      	adds	r3, #1
 8013ab8:	d003      	beq.n	8013ac2 <_fwalk_reent+0x3a>
 8013aba:	4629      	mov	r1, r5
 8013abc:	4630      	mov	r0, r6
 8013abe:	47c0      	blx	r8
 8013ac0:	4307      	orrs	r7, r0
 8013ac2:	3568      	adds	r5, #104	; 0x68
 8013ac4:	e7e9      	b.n	8013a9a <_fwalk_reent+0x12>

08013ac6 <__retarget_lock_init_recursive>:
 8013ac6:	4770      	bx	lr

08013ac8 <__retarget_lock_acquire_recursive>:
 8013ac8:	4770      	bx	lr

08013aca <__retarget_lock_release_recursive>:
 8013aca:	4770      	bx	lr

08013acc <memmove>:
 8013acc:	4288      	cmp	r0, r1
 8013ace:	b510      	push	{r4, lr}
 8013ad0:	eb01 0402 	add.w	r4, r1, r2
 8013ad4:	d902      	bls.n	8013adc <memmove+0x10>
 8013ad6:	4284      	cmp	r4, r0
 8013ad8:	4623      	mov	r3, r4
 8013ada:	d807      	bhi.n	8013aec <memmove+0x20>
 8013adc:	1e43      	subs	r3, r0, #1
 8013ade:	42a1      	cmp	r1, r4
 8013ae0:	d008      	beq.n	8013af4 <memmove+0x28>
 8013ae2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013ae6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013aea:	e7f8      	b.n	8013ade <memmove+0x12>
 8013aec:	4402      	add	r2, r0
 8013aee:	4601      	mov	r1, r0
 8013af0:	428a      	cmp	r2, r1
 8013af2:	d100      	bne.n	8013af6 <memmove+0x2a>
 8013af4:	bd10      	pop	{r4, pc}
 8013af6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013afa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013afe:	e7f7      	b.n	8013af0 <memmove+0x24>

08013b00 <__malloc_lock>:
 8013b00:	4801      	ldr	r0, [pc, #4]	; (8013b08 <__malloc_lock+0x8>)
 8013b02:	f7ff bfe1 	b.w	8013ac8 <__retarget_lock_acquire_recursive>
 8013b06:	bf00      	nop
 8013b08:	20000774 	.word	0x20000774

08013b0c <__malloc_unlock>:
 8013b0c:	4801      	ldr	r0, [pc, #4]	; (8013b14 <__malloc_unlock+0x8>)
 8013b0e:	f7ff bfdc 	b.w	8013aca <__retarget_lock_release_recursive>
 8013b12:	bf00      	nop
 8013b14:	20000774 	.word	0x20000774

08013b18 <_realloc_r>:
 8013b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b1c:	4680      	mov	r8, r0
 8013b1e:	4614      	mov	r4, r2
 8013b20:	460e      	mov	r6, r1
 8013b22:	b921      	cbnz	r1, 8013b2e <_realloc_r+0x16>
 8013b24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013b28:	4611      	mov	r1, r2
 8013b2a:	f7fe bfd3 	b.w	8012ad4 <_malloc_r>
 8013b2e:	b92a      	cbnz	r2, 8013b3c <_realloc_r+0x24>
 8013b30:	f7fe ff64 	bl	80129fc <_free_r>
 8013b34:	4625      	mov	r5, r4
 8013b36:	4628      	mov	r0, r5
 8013b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b3c:	f000 faa0 	bl	8014080 <_malloc_usable_size_r>
 8013b40:	4284      	cmp	r4, r0
 8013b42:	4607      	mov	r7, r0
 8013b44:	d802      	bhi.n	8013b4c <_realloc_r+0x34>
 8013b46:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013b4a:	d812      	bhi.n	8013b72 <_realloc_r+0x5a>
 8013b4c:	4621      	mov	r1, r4
 8013b4e:	4640      	mov	r0, r8
 8013b50:	f7fe ffc0 	bl	8012ad4 <_malloc_r>
 8013b54:	4605      	mov	r5, r0
 8013b56:	2800      	cmp	r0, #0
 8013b58:	d0ed      	beq.n	8013b36 <_realloc_r+0x1e>
 8013b5a:	42bc      	cmp	r4, r7
 8013b5c:	4622      	mov	r2, r4
 8013b5e:	4631      	mov	r1, r6
 8013b60:	bf28      	it	cs
 8013b62:	463a      	movcs	r2, r7
 8013b64:	f7fb fa44 	bl	800eff0 <memcpy>
 8013b68:	4631      	mov	r1, r6
 8013b6a:	4640      	mov	r0, r8
 8013b6c:	f7fe ff46 	bl	80129fc <_free_r>
 8013b70:	e7e1      	b.n	8013b36 <_realloc_r+0x1e>
 8013b72:	4635      	mov	r5, r6
 8013b74:	e7df      	b.n	8013b36 <_realloc_r+0x1e>

08013b76 <__sfputc_r>:
 8013b76:	6893      	ldr	r3, [r2, #8]
 8013b78:	3b01      	subs	r3, #1
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	b410      	push	{r4}
 8013b7e:	6093      	str	r3, [r2, #8]
 8013b80:	da08      	bge.n	8013b94 <__sfputc_r+0x1e>
 8013b82:	6994      	ldr	r4, [r2, #24]
 8013b84:	42a3      	cmp	r3, r4
 8013b86:	db01      	blt.n	8013b8c <__sfputc_r+0x16>
 8013b88:	290a      	cmp	r1, #10
 8013b8a:	d103      	bne.n	8013b94 <__sfputc_r+0x1e>
 8013b8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013b90:	f000 b94a 	b.w	8013e28 <__swbuf_r>
 8013b94:	6813      	ldr	r3, [r2, #0]
 8013b96:	1c58      	adds	r0, r3, #1
 8013b98:	6010      	str	r0, [r2, #0]
 8013b9a:	7019      	strb	r1, [r3, #0]
 8013b9c:	4608      	mov	r0, r1
 8013b9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013ba2:	4770      	bx	lr

08013ba4 <__sfputs_r>:
 8013ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ba6:	4606      	mov	r6, r0
 8013ba8:	460f      	mov	r7, r1
 8013baa:	4614      	mov	r4, r2
 8013bac:	18d5      	adds	r5, r2, r3
 8013bae:	42ac      	cmp	r4, r5
 8013bb0:	d101      	bne.n	8013bb6 <__sfputs_r+0x12>
 8013bb2:	2000      	movs	r0, #0
 8013bb4:	e007      	b.n	8013bc6 <__sfputs_r+0x22>
 8013bb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013bba:	463a      	mov	r2, r7
 8013bbc:	4630      	mov	r0, r6
 8013bbe:	f7ff ffda 	bl	8013b76 <__sfputc_r>
 8013bc2:	1c43      	adds	r3, r0, #1
 8013bc4:	d1f3      	bne.n	8013bae <__sfputs_r+0xa>
 8013bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013bc8 <_vfiprintf_r>:
 8013bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bcc:	460d      	mov	r5, r1
 8013bce:	b09d      	sub	sp, #116	; 0x74
 8013bd0:	4614      	mov	r4, r2
 8013bd2:	4698      	mov	r8, r3
 8013bd4:	4606      	mov	r6, r0
 8013bd6:	b118      	cbz	r0, 8013be0 <_vfiprintf_r+0x18>
 8013bd8:	6983      	ldr	r3, [r0, #24]
 8013bda:	b90b      	cbnz	r3, 8013be0 <_vfiprintf_r+0x18>
 8013bdc:	f7ff fec4 	bl	8013968 <__sinit>
 8013be0:	4b89      	ldr	r3, [pc, #548]	; (8013e08 <_vfiprintf_r+0x240>)
 8013be2:	429d      	cmp	r5, r3
 8013be4:	d11b      	bne.n	8013c1e <_vfiprintf_r+0x56>
 8013be6:	6875      	ldr	r5, [r6, #4]
 8013be8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013bea:	07d9      	lsls	r1, r3, #31
 8013bec:	d405      	bmi.n	8013bfa <_vfiprintf_r+0x32>
 8013bee:	89ab      	ldrh	r3, [r5, #12]
 8013bf0:	059a      	lsls	r2, r3, #22
 8013bf2:	d402      	bmi.n	8013bfa <_vfiprintf_r+0x32>
 8013bf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013bf6:	f7ff ff67 	bl	8013ac8 <__retarget_lock_acquire_recursive>
 8013bfa:	89ab      	ldrh	r3, [r5, #12]
 8013bfc:	071b      	lsls	r3, r3, #28
 8013bfe:	d501      	bpl.n	8013c04 <_vfiprintf_r+0x3c>
 8013c00:	692b      	ldr	r3, [r5, #16]
 8013c02:	b9eb      	cbnz	r3, 8013c40 <_vfiprintf_r+0x78>
 8013c04:	4629      	mov	r1, r5
 8013c06:	4630      	mov	r0, r6
 8013c08:	f000 f960 	bl	8013ecc <__swsetup_r>
 8013c0c:	b1c0      	cbz	r0, 8013c40 <_vfiprintf_r+0x78>
 8013c0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013c10:	07dc      	lsls	r4, r3, #31
 8013c12:	d50e      	bpl.n	8013c32 <_vfiprintf_r+0x6a>
 8013c14:	f04f 30ff 	mov.w	r0, #4294967295
 8013c18:	b01d      	add	sp, #116	; 0x74
 8013c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c1e:	4b7b      	ldr	r3, [pc, #492]	; (8013e0c <_vfiprintf_r+0x244>)
 8013c20:	429d      	cmp	r5, r3
 8013c22:	d101      	bne.n	8013c28 <_vfiprintf_r+0x60>
 8013c24:	68b5      	ldr	r5, [r6, #8]
 8013c26:	e7df      	b.n	8013be8 <_vfiprintf_r+0x20>
 8013c28:	4b79      	ldr	r3, [pc, #484]	; (8013e10 <_vfiprintf_r+0x248>)
 8013c2a:	429d      	cmp	r5, r3
 8013c2c:	bf08      	it	eq
 8013c2e:	68f5      	ldreq	r5, [r6, #12]
 8013c30:	e7da      	b.n	8013be8 <_vfiprintf_r+0x20>
 8013c32:	89ab      	ldrh	r3, [r5, #12]
 8013c34:	0598      	lsls	r0, r3, #22
 8013c36:	d4ed      	bmi.n	8013c14 <_vfiprintf_r+0x4c>
 8013c38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013c3a:	f7ff ff46 	bl	8013aca <__retarget_lock_release_recursive>
 8013c3e:	e7e9      	b.n	8013c14 <_vfiprintf_r+0x4c>
 8013c40:	2300      	movs	r3, #0
 8013c42:	9309      	str	r3, [sp, #36]	; 0x24
 8013c44:	2320      	movs	r3, #32
 8013c46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013c4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8013c4e:	2330      	movs	r3, #48	; 0x30
 8013c50:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013e14 <_vfiprintf_r+0x24c>
 8013c54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013c58:	f04f 0901 	mov.w	r9, #1
 8013c5c:	4623      	mov	r3, r4
 8013c5e:	469a      	mov	sl, r3
 8013c60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013c64:	b10a      	cbz	r2, 8013c6a <_vfiprintf_r+0xa2>
 8013c66:	2a25      	cmp	r2, #37	; 0x25
 8013c68:	d1f9      	bne.n	8013c5e <_vfiprintf_r+0x96>
 8013c6a:	ebba 0b04 	subs.w	fp, sl, r4
 8013c6e:	d00b      	beq.n	8013c88 <_vfiprintf_r+0xc0>
 8013c70:	465b      	mov	r3, fp
 8013c72:	4622      	mov	r2, r4
 8013c74:	4629      	mov	r1, r5
 8013c76:	4630      	mov	r0, r6
 8013c78:	f7ff ff94 	bl	8013ba4 <__sfputs_r>
 8013c7c:	3001      	adds	r0, #1
 8013c7e:	f000 80aa 	beq.w	8013dd6 <_vfiprintf_r+0x20e>
 8013c82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013c84:	445a      	add	r2, fp
 8013c86:	9209      	str	r2, [sp, #36]	; 0x24
 8013c88:	f89a 3000 	ldrb.w	r3, [sl]
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	f000 80a2 	beq.w	8013dd6 <_vfiprintf_r+0x20e>
 8013c92:	2300      	movs	r3, #0
 8013c94:	f04f 32ff 	mov.w	r2, #4294967295
 8013c98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013c9c:	f10a 0a01 	add.w	sl, sl, #1
 8013ca0:	9304      	str	r3, [sp, #16]
 8013ca2:	9307      	str	r3, [sp, #28]
 8013ca4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013ca8:	931a      	str	r3, [sp, #104]	; 0x68
 8013caa:	4654      	mov	r4, sl
 8013cac:	2205      	movs	r2, #5
 8013cae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013cb2:	4858      	ldr	r0, [pc, #352]	; (8013e14 <_vfiprintf_r+0x24c>)
 8013cb4:	f7ec fab4 	bl	8000220 <memchr>
 8013cb8:	9a04      	ldr	r2, [sp, #16]
 8013cba:	b9d8      	cbnz	r0, 8013cf4 <_vfiprintf_r+0x12c>
 8013cbc:	06d1      	lsls	r1, r2, #27
 8013cbe:	bf44      	itt	mi
 8013cc0:	2320      	movmi	r3, #32
 8013cc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013cc6:	0713      	lsls	r3, r2, #28
 8013cc8:	bf44      	itt	mi
 8013cca:	232b      	movmi	r3, #43	; 0x2b
 8013ccc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013cd0:	f89a 3000 	ldrb.w	r3, [sl]
 8013cd4:	2b2a      	cmp	r3, #42	; 0x2a
 8013cd6:	d015      	beq.n	8013d04 <_vfiprintf_r+0x13c>
 8013cd8:	9a07      	ldr	r2, [sp, #28]
 8013cda:	4654      	mov	r4, sl
 8013cdc:	2000      	movs	r0, #0
 8013cde:	f04f 0c0a 	mov.w	ip, #10
 8013ce2:	4621      	mov	r1, r4
 8013ce4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013ce8:	3b30      	subs	r3, #48	; 0x30
 8013cea:	2b09      	cmp	r3, #9
 8013cec:	d94e      	bls.n	8013d8c <_vfiprintf_r+0x1c4>
 8013cee:	b1b0      	cbz	r0, 8013d1e <_vfiprintf_r+0x156>
 8013cf0:	9207      	str	r2, [sp, #28]
 8013cf2:	e014      	b.n	8013d1e <_vfiprintf_r+0x156>
 8013cf4:	eba0 0308 	sub.w	r3, r0, r8
 8013cf8:	fa09 f303 	lsl.w	r3, r9, r3
 8013cfc:	4313      	orrs	r3, r2
 8013cfe:	9304      	str	r3, [sp, #16]
 8013d00:	46a2      	mov	sl, r4
 8013d02:	e7d2      	b.n	8013caa <_vfiprintf_r+0xe2>
 8013d04:	9b03      	ldr	r3, [sp, #12]
 8013d06:	1d19      	adds	r1, r3, #4
 8013d08:	681b      	ldr	r3, [r3, #0]
 8013d0a:	9103      	str	r1, [sp, #12]
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	bfbb      	ittet	lt
 8013d10:	425b      	neglt	r3, r3
 8013d12:	f042 0202 	orrlt.w	r2, r2, #2
 8013d16:	9307      	strge	r3, [sp, #28]
 8013d18:	9307      	strlt	r3, [sp, #28]
 8013d1a:	bfb8      	it	lt
 8013d1c:	9204      	strlt	r2, [sp, #16]
 8013d1e:	7823      	ldrb	r3, [r4, #0]
 8013d20:	2b2e      	cmp	r3, #46	; 0x2e
 8013d22:	d10c      	bne.n	8013d3e <_vfiprintf_r+0x176>
 8013d24:	7863      	ldrb	r3, [r4, #1]
 8013d26:	2b2a      	cmp	r3, #42	; 0x2a
 8013d28:	d135      	bne.n	8013d96 <_vfiprintf_r+0x1ce>
 8013d2a:	9b03      	ldr	r3, [sp, #12]
 8013d2c:	1d1a      	adds	r2, r3, #4
 8013d2e:	681b      	ldr	r3, [r3, #0]
 8013d30:	9203      	str	r2, [sp, #12]
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	bfb8      	it	lt
 8013d36:	f04f 33ff 	movlt.w	r3, #4294967295
 8013d3a:	3402      	adds	r4, #2
 8013d3c:	9305      	str	r3, [sp, #20]
 8013d3e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013e24 <_vfiprintf_r+0x25c>
 8013d42:	7821      	ldrb	r1, [r4, #0]
 8013d44:	2203      	movs	r2, #3
 8013d46:	4650      	mov	r0, sl
 8013d48:	f7ec fa6a 	bl	8000220 <memchr>
 8013d4c:	b140      	cbz	r0, 8013d60 <_vfiprintf_r+0x198>
 8013d4e:	2340      	movs	r3, #64	; 0x40
 8013d50:	eba0 000a 	sub.w	r0, r0, sl
 8013d54:	fa03 f000 	lsl.w	r0, r3, r0
 8013d58:	9b04      	ldr	r3, [sp, #16]
 8013d5a:	4303      	orrs	r3, r0
 8013d5c:	3401      	adds	r4, #1
 8013d5e:	9304      	str	r3, [sp, #16]
 8013d60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013d64:	482c      	ldr	r0, [pc, #176]	; (8013e18 <_vfiprintf_r+0x250>)
 8013d66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013d6a:	2206      	movs	r2, #6
 8013d6c:	f7ec fa58 	bl	8000220 <memchr>
 8013d70:	2800      	cmp	r0, #0
 8013d72:	d03f      	beq.n	8013df4 <_vfiprintf_r+0x22c>
 8013d74:	4b29      	ldr	r3, [pc, #164]	; (8013e1c <_vfiprintf_r+0x254>)
 8013d76:	bb1b      	cbnz	r3, 8013dc0 <_vfiprintf_r+0x1f8>
 8013d78:	9b03      	ldr	r3, [sp, #12]
 8013d7a:	3307      	adds	r3, #7
 8013d7c:	f023 0307 	bic.w	r3, r3, #7
 8013d80:	3308      	adds	r3, #8
 8013d82:	9303      	str	r3, [sp, #12]
 8013d84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d86:	443b      	add	r3, r7
 8013d88:	9309      	str	r3, [sp, #36]	; 0x24
 8013d8a:	e767      	b.n	8013c5c <_vfiprintf_r+0x94>
 8013d8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8013d90:	460c      	mov	r4, r1
 8013d92:	2001      	movs	r0, #1
 8013d94:	e7a5      	b.n	8013ce2 <_vfiprintf_r+0x11a>
 8013d96:	2300      	movs	r3, #0
 8013d98:	3401      	adds	r4, #1
 8013d9a:	9305      	str	r3, [sp, #20]
 8013d9c:	4619      	mov	r1, r3
 8013d9e:	f04f 0c0a 	mov.w	ip, #10
 8013da2:	4620      	mov	r0, r4
 8013da4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013da8:	3a30      	subs	r2, #48	; 0x30
 8013daa:	2a09      	cmp	r2, #9
 8013dac:	d903      	bls.n	8013db6 <_vfiprintf_r+0x1ee>
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	d0c5      	beq.n	8013d3e <_vfiprintf_r+0x176>
 8013db2:	9105      	str	r1, [sp, #20]
 8013db4:	e7c3      	b.n	8013d3e <_vfiprintf_r+0x176>
 8013db6:	fb0c 2101 	mla	r1, ip, r1, r2
 8013dba:	4604      	mov	r4, r0
 8013dbc:	2301      	movs	r3, #1
 8013dbe:	e7f0      	b.n	8013da2 <_vfiprintf_r+0x1da>
 8013dc0:	ab03      	add	r3, sp, #12
 8013dc2:	9300      	str	r3, [sp, #0]
 8013dc4:	462a      	mov	r2, r5
 8013dc6:	4b16      	ldr	r3, [pc, #88]	; (8013e20 <_vfiprintf_r+0x258>)
 8013dc8:	a904      	add	r1, sp, #16
 8013dca:	4630      	mov	r0, r6
 8013dcc:	f7fb f9c6 	bl	800f15c <_printf_float>
 8013dd0:	4607      	mov	r7, r0
 8013dd2:	1c78      	adds	r0, r7, #1
 8013dd4:	d1d6      	bne.n	8013d84 <_vfiprintf_r+0x1bc>
 8013dd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013dd8:	07d9      	lsls	r1, r3, #31
 8013dda:	d405      	bmi.n	8013de8 <_vfiprintf_r+0x220>
 8013ddc:	89ab      	ldrh	r3, [r5, #12]
 8013dde:	059a      	lsls	r2, r3, #22
 8013de0:	d402      	bmi.n	8013de8 <_vfiprintf_r+0x220>
 8013de2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013de4:	f7ff fe71 	bl	8013aca <__retarget_lock_release_recursive>
 8013de8:	89ab      	ldrh	r3, [r5, #12]
 8013dea:	065b      	lsls	r3, r3, #25
 8013dec:	f53f af12 	bmi.w	8013c14 <_vfiprintf_r+0x4c>
 8013df0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013df2:	e711      	b.n	8013c18 <_vfiprintf_r+0x50>
 8013df4:	ab03      	add	r3, sp, #12
 8013df6:	9300      	str	r3, [sp, #0]
 8013df8:	462a      	mov	r2, r5
 8013dfa:	4b09      	ldr	r3, [pc, #36]	; (8013e20 <_vfiprintf_r+0x258>)
 8013dfc:	a904      	add	r1, sp, #16
 8013dfe:	4630      	mov	r0, r6
 8013e00:	f7fb fc50 	bl	800f6a4 <_printf_i>
 8013e04:	e7e4      	b.n	8013dd0 <_vfiprintf_r+0x208>
 8013e06:	bf00      	nop
 8013e08:	08014b1c 	.word	0x08014b1c
 8013e0c:	08014b3c 	.word	0x08014b3c
 8013e10:	08014afc 	.word	0x08014afc
 8013e14:	08014a94 	.word	0x08014a94
 8013e18:	08014a9e 	.word	0x08014a9e
 8013e1c:	0800f15d 	.word	0x0800f15d
 8013e20:	08013ba5 	.word	0x08013ba5
 8013e24:	08014a9a 	.word	0x08014a9a

08013e28 <__swbuf_r>:
 8013e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e2a:	460e      	mov	r6, r1
 8013e2c:	4614      	mov	r4, r2
 8013e2e:	4605      	mov	r5, r0
 8013e30:	b118      	cbz	r0, 8013e3a <__swbuf_r+0x12>
 8013e32:	6983      	ldr	r3, [r0, #24]
 8013e34:	b90b      	cbnz	r3, 8013e3a <__swbuf_r+0x12>
 8013e36:	f7ff fd97 	bl	8013968 <__sinit>
 8013e3a:	4b21      	ldr	r3, [pc, #132]	; (8013ec0 <__swbuf_r+0x98>)
 8013e3c:	429c      	cmp	r4, r3
 8013e3e:	d12b      	bne.n	8013e98 <__swbuf_r+0x70>
 8013e40:	686c      	ldr	r4, [r5, #4]
 8013e42:	69a3      	ldr	r3, [r4, #24]
 8013e44:	60a3      	str	r3, [r4, #8]
 8013e46:	89a3      	ldrh	r3, [r4, #12]
 8013e48:	071a      	lsls	r2, r3, #28
 8013e4a:	d52f      	bpl.n	8013eac <__swbuf_r+0x84>
 8013e4c:	6923      	ldr	r3, [r4, #16]
 8013e4e:	b36b      	cbz	r3, 8013eac <__swbuf_r+0x84>
 8013e50:	6923      	ldr	r3, [r4, #16]
 8013e52:	6820      	ldr	r0, [r4, #0]
 8013e54:	1ac0      	subs	r0, r0, r3
 8013e56:	6963      	ldr	r3, [r4, #20]
 8013e58:	b2f6      	uxtb	r6, r6
 8013e5a:	4283      	cmp	r3, r0
 8013e5c:	4637      	mov	r7, r6
 8013e5e:	dc04      	bgt.n	8013e6a <__swbuf_r+0x42>
 8013e60:	4621      	mov	r1, r4
 8013e62:	4628      	mov	r0, r5
 8013e64:	f7ff fcec 	bl	8013840 <_fflush_r>
 8013e68:	bb30      	cbnz	r0, 8013eb8 <__swbuf_r+0x90>
 8013e6a:	68a3      	ldr	r3, [r4, #8]
 8013e6c:	3b01      	subs	r3, #1
 8013e6e:	60a3      	str	r3, [r4, #8]
 8013e70:	6823      	ldr	r3, [r4, #0]
 8013e72:	1c5a      	adds	r2, r3, #1
 8013e74:	6022      	str	r2, [r4, #0]
 8013e76:	701e      	strb	r6, [r3, #0]
 8013e78:	6963      	ldr	r3, [r4, #20]
 8013e7a:	3001      	adds	r0, #1
 8013e7c:	4283      	cmp	r3, r0
 8013e7e:	d004      	beq.n	8013e8a <__swbuf_r+0x62>
 8013e80:	89a3      	ldrh	r3, [r4, #12]
 8013e82:	07db      	lsls	r3, r3, #31
 8013e84:	d506      	bpl.n	8013e94 <__swbuf_r+0x6c>
 8013e86:	2e0a      	cmp	r6, #10
 8013e88:	d104      	bne.n	8013e94 <__swbuf_r+0x6c>
 8013e8a:	4621      	mov	r1, r4
 8013e8c:	4628      	mov	r0, r5
 8013e8e:	f7ff fcd7 	bl	8013840 <_fflush_r>
 8013e92:	b988      	cbnz	r0, 8013eb8 <__swbuf_r+0x90>
 8013e94:	4638      	mov	r0, r7
 8013e96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e98:	4b0a      	ldr	r3, [pc, #40]	; (8013ec4 <__swbuf_r+0x9c>)
 8013e9a:	429c      	cmp	r4, r3
 8013e9c:	d101      	bne.n	8013ea2 <__swbuf_r+0x7a>
 8013e9e:	68ac      	ldr	r4, [r5, #8]
 8013ea0:	e7cf      	b.n	8013e42 <__swbuf_r+0x1a>
 8013ea2:	4b09      	ldr	r3, [pc, #36]	; (8013ec8 <__swbuf_r+0xa0>)
 8013ea4:	429c      	cmp	r4, r3
 8013ea6:	bf08      	it	eq
 8013ea8:	68ec      	ldreq	r4, [r5, #12]
 8013eaa:	e7ca      	b.n	8013e42 <__swbuf_r+0x1a>
 8013eac:	4621      	mov	r1, r4
 8013eae:	4628      	mov	r0, r5
 8013eb0:	f000 f80c 	bl	8013ecc <__swsetup_r>
 8013eb4:	2800      	cmp	r0, #0
 8013eb6:	d0cb      	beq.n	8013e50 <__swbuf_r+0x28>
 8013eb8:	f04f 37ff 	mov.w	r7, #4294967295
 8013ebc:	e7ea      	b.n	8013e94 <__swbuf_r+0x6c>
 8013ebe:	bf00      	nop
 8013ec0:	08014b1c 	.word	0x08014b1c
 8013ec4:	08014b3c 	.word	0x08014b3c
 8013ec8:	08014afc 	.word	0x08014afc

08013ecc <__swsetup_r>:
 8013ecc:	4b32      	ldr	r3, [pc, #200]	; (8013f98 <__swsetup_r+0xcc>)
 8013ece:	b570      	push	{r4, r5, r6, lr}
 8013ed0:	681d      	ldr	r5, [r3, #0]
 8013ed2:	4606      	mov	r6, r0
 8013ed4:	460c      	mov	r4, r1
 8013ed6:	b125      	cbz	r5, 8013ee2 <__swsetup_r+0x16>
 8013ed8:	69ab      	ldr	r3, [r5, #24]
 8013eda:	b913      	cbnz	r3, 8013ee2 <__swsetup_r+0x16>
 8013edc:	4628      	mov	r0, r5
 8013ede:	f7ff fd43 	bl	8013968 <__sinit>
 8013ee2:	4b2e      	ldr	r3, [pc, #184]	; (8013f9c <__swsetup_r+0xd0>)
 8013ee4:	429c      	cmp	r4, r3
 8013ee6:	d10f      	bne.n	8013f08 <__swsetup_r+0x3c>
 8013ee8:	686c      	ldr	r4, [r5, #4]
 8013eea:	89a3      	ldrh	r3, [r4, #12]
 8013eec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013ef0:	0719      	lsls	r1, r3, #28
 8013ef2:	d42c      	bmi.n	8013f4e <__swsetup_r+0x82>
 8013ef4:	06dd      	lsls	r5, r3, #27
 8013ef6:	d411      	bmi.n	8013f1c <__swsetup_r+0x50>
 8013ef8:	2309      	movs	r3, #9
 8013efa:	6033      	str	r3, [r6, #0]
 8013efc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013f00:	81a3      	strh	r3, [r4, #12]
 8013f02:	f04f 30ff 	mov.w	r0, #4294967295
 8013f06:	e03e      	b.n	8013f86 <__swsetup_r+0xba>
 8013f08:	4b25      	ldr	r3, [pc, #148]	; (8013fa0 <__swsetup_r+0xd4>)
 8013f0a:	429c      	cmp	r4, r3
 8013f0c:	d101      	bne.n	8013f12 <__swsetup_r+0x46>
 8013f0e:	68ac      	ldr	r4, [r5, #8]
 8013f10:	e7eb      	b.n	8013eea <__swsetup_r+0x1e>
 8013f12:	4b24      	ldr	r3, [pc, #144]	; (8013fa4 <__swsetup_r+0xd8>)
 8013f14:	429c      	cmp	r4, r3
 8013f16:	bf08      	it	eq
 8013f18:	68ec      	ldreq	r4, [r5, #12]
 8013f1a:	e7e6      	b.n	8013eea <__swsetup_r+0x1e>
 8013f1c:	0758      	lsls	r0, r3, #29
 8013f1e:	d512      	bpl.n	8013f46 <__swsetup_r+0x7a>
 8013f20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013f22:	b141      	cbz	r1, 8013f36 <__swsetup_r+0x6a>
 8013f24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013f28:	4299      	cmp	r1, r3
 8013f2a:	d002      	beq.n	8013f32 <__swsetup_r+0x66>
 8013f2c:	4630      	mov	r0, r6
 8013f2e:	f7fe fd65 	bl	80129fc <_free_r>
 8013f32:	2300      	movs	r3, #0
 8013f34:	6363      	str	r3, [r4, #52]	; 0x34
 8013f36:	89a3      	ldrh	r3, [r4, #12]
 8013f38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013f3c:	81a3      	strh	r3, [r4, #12]
 8013f3e:	2300      	movs	r3, #0
 8013f40:	6063      	str	r3, [r4, #4]
 8013f42:	6923      	ldr	r3, [r4, #16]
 8013f44:	6023      	str	r3, [r4, #0]
 8013f46:	89a3      	ldrh	r3, [r4, #12]
 8013f48:	f043 0308 	orr.w	r3, r3, #8
 8013f4c:	81a3      	strh	r3, [r4, #12]
 8013f4e:	6923      	ldr	r3, [r4, #16]
 8013f50:	b94b      	cbnz	r3, 8013f66 <__swsetup_r+0x9a>
 8013f52:	89a3      	ldrh	r3, [r4, #12]
 8013f54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013f58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013f5c:	d003      	beq.n	8013f66 <__swsetup_r+0x9a>
 8013f5e:	4621      	mov	r1, r4
 8013f60:	4630      	mov	r0, r6
 8013f62:	f000 f84d 	bl	8014000 <__smakebuf_r>
 8013f66:	89a0      	ldrh	r0, [r4, #12]
 8013f68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013f6c:	f010 0301 	ands.w	r3, r0, #1
 8013f70:	d00a      	beq.n	8013f88 <__swsetup_r+0xbc>
 8013f72:	2300      	movs	r3, #0
 8013f74:	60a3      	str	r3, [r4, #8]
 8013f76:	6963      	ldr	r3, [r4, #20]
 8013f78:	425b      	negs	r3, r3
 8013f7a:	61a3      	str	r3, [r4, #24]
 8013f7c:	6923      	ldr	r3, [r4, #16]
 8013f7e:	b943      	cbnz	r3, 8013f92 <__swsetup_r+0xc6>
 8013f80:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013f84:	d1ba      	bne.n	8013efc <__swsetup_r+0x30>
 8013f86:	bd70      	pop	{r4, r5, r6, pc}
 8013f88:	0781      	lsls	r1, r0, #30
 8013f8a:	bf58      	it	pl
 8013f8c:	6963      	ldrpl	r3, [r4, #20]
 8013f8e:	60a3      	str	r3, [r4, #8]
 8013f90:	e7f4      	b.n	8013f7c <__swsetup_r+0xb0>
 8013f92:	2000      	movs	r0, #0
 8013f94:	e7f7      	b.n	8013f86 <__swsetup_r+0xba>
 8013f96:	bf00      	nop
 8013f98:	200002c8 	.word	0x200002c8
 8013f9c:	08014b1c 	.word	0x08014b1c
 8013fa0:	08014b3c 	.word	0x08014b3c
 8013fa4:	08014afc 	.word	0x08014afc

08013fa8 <abort>:
 8013fa8:	b508      	push	{r3, lr}
 8013faa:	2006      	movs	r0, #6
 8013fac:	f000 f898 	bl	80140e0 <raise>
 8013fb0:	2001      	movs	r0, #1
 8013fb2:	f7ee fc3b 	bl	800282c <_exit>

08013fb6 <__swhatbuf_r>:
 8013fb6:	b570      	push	{r4, r5, r6, lr}
 8013fb8:	460e      	mov	r6, r1
 8013fba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013fbe:	2900      	cmp	r1, #0
 8013fc0:	b096      	sub	sp, #88	; 0x58
 8013fc2:	4614      	mov	r4, r2
 8013fc4:	461d      	mov	r5, r3
 8013fc6:	da08      	bge.n	8013fda <__swhatbuf_r+0x24>
 8013fc8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8013fcc:	2200      	movs	r2, #0
 8013fce:	602a      	str	r2, [r5, #0]
 8013fd0:	061a      	lsls	r2, r3, #24
 8013fd2:	d410      	bmi.n	8013ff6 <__swhatbuf_r+0x40>
 8013fd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013fd8:	e00e      	b.n	8013ff8 <__swhatbuf_r+0x42>
 8013fda:	466a      	mov	r2, sp
 8013fdc:	f000 f89c 	bl	8014118 <_fstat_r>
 8013fe0:	2800      	cmp	r0, #0
 8013fe2:	dbf1      	blt.n	8013fc8 <__swhatbuf_r+0x12>
 8013fe4:	9a01      	ldr	r2, [sp, #4]
 8013fe6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013fea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013fee:	425a      	negs	r2, r3
 8013ff0:	415a      	adcs	r2, r3
 8013ff2:	602a      	str	r2, [r5, #0]
 8013ff4:	e7ee      	b.n	8013fd4 <__swhatbuf_r+0x1e>
 8013ff6:	2340      	movs	r3, #64	; 0x40
 8013ff8:	2000      	movs	r0, #0
 8013ffa:	6023      	str	r3, [r4, #0]
 8013ffc:	b016      	add	sp, #88	; 0x58
 8013ffe:	bd70      	pop	{r4, r5, r6, pc}

08014000 <__smakebuf_r>:
 8014000:	898b      	ldrh	r3, [r1, #12]
 8014002:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014004:	079d      	lsls	r5, r3, #30
 8014006:	4606      	mov	r6, r0
 8014008:	460c      	mov	r4, r1
 801400a:	d507      	bpl.n	801401c <__smakebuf_r+0x1c>
 801400c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014010:	6023      	str	r3, [r4, #0]
 8014012:	6123      	str	r3, [r4, #16]
 8014014:	2301      	movs	r3, #1
 8014016:	6163      	str	r3, [r4, #20]
 8014018:	b002      	add	sp, #8
 801401a:	bd70      	pop	{r4, r5, r6, pc}
 801401c:	ab01      	add	r3, sp, #4
 801401e:	466a      	mov	r2, sp
 8014020:	f7ff ffc9 	bl	8013fb6 <__swhatbuf_r>
 8014024:	9900      	ldr	r1, [sp, #0]
 8014026:	4605      	mov	r5, r0
 8014028:	4630      	mov	r0, r6
 801402a:	f7fe fd53 	bl	8012ad4 <_malloc_r>
 801402e:	b948      	cbnz	r0, 8014044 <__smakebuf_r+0x44>
 8014030:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014034:	059a      	lsls	r2, r3, #22
 8014036:	d4ef      	bmi.n	8014018 <__smakebuf_r+0x18>
 8014038:	f023 0303 	bic.w	r3, r3, #3
 801403c:	f043 0302 	orr.w	r3, r3, #2
 8014040:	81a3      	strh	r3, [r4, #12]
 8014042:	e7e3      	b.n	801400c <__smakebuf_r+0xc>
 8014044:	4b0d      	ldr	r3, [pc, #52]	; (801407c <__smakebuf_r+0x7c>)
 8014046:	62b3      	str	r3, [r6, #40]	; 0x28
 8014048:	89a3      	ldrh	r3, [r4, #12]
 801404a:	6020      	str	r0, [r4, #0]
 801404c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014050:	81a3      	strh	r3, [r4, #12]
 8014052:	9b00      	ldr	r3, [sp, #0]
 8014054:	6163      	str	r3, [r4, #20]
 8014056:	9b01      	ldr	r3, [sp, #4]
 8014058:	6120      	str	r0, [r4, #16]
 801405a:	b15b      	cbz	r3, 8014074 <__smakebuf_r+0x74>
 801405c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014060:	4630      	mov	r0, r6
 8014062:	f000 f86b 	bl	801413c <_isatty_r>
 8014066:	b128      	cbz	r0, 8014074 <__smakebuf_r+0x74>
 8014068:	89a3      	ldrh	r3, [r4, #12]
 801406a:	f023 0303 	bic.w	r3, r3, #3
 801406e:	f043 0301 	orr.w	r3, r3, #1
 8014072:	81a3      	strh	r3, [r4, #12]
 8014074:	89a0      	ldrh	r0, [r4, #12]
 8014076:	4305      	orrs	r5, r0
 8014078:	81a5      	strh	r5, [r4, #12]
 801407a:	e7cd      	b.n	8014018 <__smakebuf_r+0x18>
 801407c:	08013901 	.word	0x08013901

08014080 <_malloc_usable_size_r>:
 8014080:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014084:	1f18      	subs	r0, r3, #4
 8014086:	2b00      	cmp	r3, #0
 8014088:	bfbc      	itt	lt
 801408a:	580b      	ldrlt	r3, [r1, r0]
 801408c:	18c0      	addlt	r0, r0, r3
 801408e:	4770      	bx	lr

08014090 <_raise_r>:
 8014090:	291f      	cmp	r1, #31
 8014092:	b538      	push	{r3, r4, r5, lr}
 8014094:	4604      	mov	r4, r0
 8014096:	460d      	mov	r5, r1
 8014098:	d904      	bls.n	80140a4 <_raise_r+0x14>
 801409a:	2316      	movs	r3, #22
 801409c:	6003      	str	r3, [r0, #0]
 801409e:	f04f 30ff 	mov.w	r0, #4294967295
 80140a2:	bd38      	pop	{r3, r4, r5, pc}
 80140a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80140a6:	b112      	cbz	r2, 80140ae <_raise_r+0x1e>
 80140a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80140ac:	b94b      	cbnz	r3, 80140c2 <_raise_r+0x32>
 80140ae:	4620      	mov	r0, r4
 80140b0:	f000 f830 	bl	8014114 <_getpid_r>
 80140b4:	462a      	mov	r2, r5
 80140b6:	4601      	mov	r1, r0
 80140b8:	4620      	mov	r0, r4
 80140ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80140be:	f000 b817 	b.w	80140f0 <_kill_r>
 80140c2:	2b01      	cmp	r3, #1
 80140c4:	d00a      	beq.n	80140dc <_raise_r+0x4c>
 80140c6:	1c59      	adds	r1, r3, #1
 80140c8:	d103      	bne.n	80140d2 <_raise_r+0x42>
 80140ca:	2316      	movs	r3, #22
 80140cc:	6003      	str	r3, [r0, #0]
 80140ce:	2001      	movs	r0, #1
 80140d0:	e7e7      	b.n	80140a2 <_raise_r+0x12>
 80140d2:	2400      	movs	r4, #0
 80140d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80140d8:	4628      	mov	r0, r5
 80140da:	4798      	blx	r3
 80140dc:	2000      	movs	r0, #0
 80140de:	e7e0      	b.n	80140a2 <_raise_r+0x12>

080140e0 <raise>:
 80140e0:	4b02      	ldr	r3, [pc, #8]	; (80140ec <raise+0xc>)
 80140e2:	4601      	mov	r1, r0
 80140e4:	6818      	ldr	r0, [r3, #0]
 80140e6:	f7ff bfd3 	b.w	8014090 <_raise_r>
 80140ea:	bf00      	nop
 80140ec:	200002c8 	.word	0x200002c8

080140f0 <_kill_r>:
 80140f0:	b538      	push	{r3, r4, r5, lr}
 80140f2:	4d07      	ldr	r5, [pc, #28]	; (8014110 <_kill_r+0x20>)
 80140f4:	2300      	movs	r3, #0
 80140f6:	4604      	mov	r4, r0
 80140f8:	4608      	mov	r0, r1
 80140fa:	4611      	mov	r1, r2
 80140fc:	602b      	str	r3, [r5, #0]
 80140fe:	f7ee fb85 	bl	800280c <_kill>
 8014102:	1c43      	adds	r3, r0, #1
 8014104:	d102      	bne.n	801410c <_kill_r+0x1c>
 8014106:	682b      	ldr	r3, [r5, #0]
 8014108:	b103      	cbz	r3, 801410c <_kill_r+0x1c>
 801410a:	6023      	str	r3, [r4, #0]
 801410c:	bd38      	pop	{r3, r4, r5, pc}
 801410e:	bf00      	nop
 8014110:	20000770 	.word	0x20000770

08014114 <_getpid_r>:
 8014114:	f7ee bb72 	b.w	80027fc <_getpid>

08014118 <_fstat_r>:
 8014118:	b538      	push	{r3, r4, r5, lr}
 801411a:	4d07      	ldr	r5, [pc, #28]	; (8014138 <_fstat_r+0x20>)
 801411c:	2300      	movs	r3, #0
 801411e:	4604      	mov	r4, r0
 8014120:	4608      	mov	r0, r1
 8014122:	4611      	mov	r1, r2
 8014124:	602b      	str	r3, [r5, #0]
 8014126:	f7ee fbd0 	bl	80028ca <_fstat>
 801412a:	1c43      	adds	r3, r0, #1
 801412c:	d102      	bne.n	8014134 <_fstat_r+0x1c>
 801412e:	682b      	ldr	r3, [r5, #0]
 8014130:	b103      	cbz	r3, 8014134 <_fstat_r+0x1c>
 8014132:	6023      	str	r3, [r4, #0]
 8014134:	bd38      	pop	{r3, r4, r5, pc}
 8014136:	bf00      	nop
 8014138:	20000770 	.word	0x20000770

0801413c <_isatty_r>:
 801413c:	b538      	push	{r3, r4, r5, lr}
 801413e:	4d06      	ldr	r5, [pc, #24]	; (8014158 <_isatty_r+0x1c>)
 8014140:	2300      	movs	r3, #0
 8014142:	4604      	mov	r4, r0
 8014144:	4608      	mov	r0, r1
 8014146:	602b      	str	r3, [r5, #0]
 8014148:	f7ee fbcf 	bl	80028ea <_isatty>
 801414c:	1c43      	adds	r3, r0, #1
 801414e:	d102      	bne.n	8014156 <_isatty_r+0x1a>
 8014150:	682b      	ldr	r3, [r5, #0]
 8014152:	b103      	cbz	r3, 8014156 <_isatty_r+0x1a>
 8014154:	6023      	str	r3, [r4, #0]
 8014156:	bd38      	pop	{r3, r4, r5, pc}
 8014158:	20000770 	.word	0x20000770

0801415c <_init>:
 801415c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801415e:	bf00      	nop
 8014160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014162:	bc08      	pop	{r3}
 8014164:	469e      	mov	lr, r3
 8014166:	4770      	bx	lr

08014168 <_fini>:
 8014168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801416a:	bf00      	nop
 801416c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801416e:	bc08      	pop	{r3}
 8014170:	469e      	mov	lr, r3
 8014172:	4770      	bx	lr
