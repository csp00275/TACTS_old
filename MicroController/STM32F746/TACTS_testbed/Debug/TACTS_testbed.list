
TACTS_testbed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000139a4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d4  08013b78  08013b78  00023b78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801434c  0801434c  0003049c  2**0
                  CONTENTS
  4 .ARM          00000008  0801434c  0801434c  0002434c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014354  08014354  0003049c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014354  08014354  00024354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014358  08014358  00024358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000049c  20000000  0801435c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002dc  2000049c  080147f8  0003049c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000778  080147f8  00030778  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003049c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020e7a  00000000  00000000  000304cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ac5  00000000  00000000  00051346  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001750  00000000  00000000  00054e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015b8  00000000  00000000  00056560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029826  00000000  00000000  00057b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021e5a  00000000  00000000  0008133e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9707  00000000  00000000  000a3198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019c89f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000079f0  00000000  00000000  0019c8f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000049c 	.word	0x2000049c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08013b5c 	.word	0x08013b5c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200004a0 	.word	0x200004a0
 800020c:	08013b5c 	.word	0x08013b5c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b9aa 	b.w	8001054 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	468e      	mov	lr, r1
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d14d      	bne.n	8000e2e <__udivmoddi4+0xaa>
 8000d92:	428a      	cmp	r2, r1
 8000d94:	4694      	mov	ip, r2
 8000d96:	d969      	bls.n	8000e6c <__udivmoddi4+0xe8>
 8000d98:	fab2 f282 	clz	r2, r2
 8000d9c:	b152      	cbz	r2, 8000db4 <__udivmoddi4+0x30>
 8000d9e:	fa01 f302 	lsl.w	r3, r1, r2
 8000da2:	f1c2 0120 	rsb	r1, r2, #32
 8000da6:	fa20 f101 	lsr.w	r1, r0, r1
 8000daa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dae:	ea41 0e03 	orr.w	lr, r1, r3
 8000db2:	4094      	lsls	r4, r2
 8000db4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db8:	0c21      	lsrs	r1, r4, #16
 8000dba:	fbbe f6f8 	udiv	r6, lr, r8
 8000dbe:	fa1f f78c 	uxth.w	r7, ip
 8000dc2:	fb08 e316 	mls	r3, r8, r6, lr
 8000dc6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dca:	fb06 f107 	mul.w	r1, r6, r7
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x64>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dda:	f080 811f 	bcs.w	800101c <__udivmoddi4+0x298>
 8000dde:	4299      	cmp	r1, r3
 8000de0:	f240 811c 	bls.w	800101c <__udivmoddi4+0x298>
 8000de4:	3e02      	subs	r6, #2
 8000de6:	4463      	add	r3, ip
 8000de8:	1a5b      	subs	r3, r3, r1
 8000dea:	b2a4      	uxth	r4, r4
 8000dec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000df0:	fb08 3310 	mls	r3, r8, r0, r3
 8000df4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000df8:	fb00 f707 	mul.w	r7, r0, r7
 8000dfc:	42a7      	cmp	r7, r4
 8000dfe:	d90a      	bls.n	8000e16 <__udivmoddi4+0x92>
 8000e00:	eb1c 0404 	adds.w	r4, ip, r4
 8000e04:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e08:	f080 810a 	bcs.w	8001020 <__udivmoddi4+0x29c>
 8000e0c:	42a7      	cmp	r7, r4
 8000e0e:	f240 8107 	bls.w	8001020 <__udivmoddi4+0x29c>
 8000e12:	4464      	add	r4, ip
 8000e14:	3802      	subs	r0, #2
 8000e16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e1a:	1be4      	subs	r4, r4, r7
 8000e1c:	2600      	movs	r6, #0
 8000e1e:	b11d      	cbz	r5, 8000e28 <__udivmoddi4+0xa4>
 8000e20:	40d4      	lsrs	r4, r2
 8000e22:	2300      	movs	r3, #0
 8000e24:	e9c5 4300 	strd	r4, r3, [r5]
 8000e28:	4631      	mov	r1, r6
 8000e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d909      	bls.n	8000e46 <__udivmoddi4+0xc2>
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	f000 80ef 	beq.w	8001016 <__udivmoddi4+0x292>
 8000e38:	2600      	movs	r6, #0
 8000e3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e3e:	4630      	mov	r0, r6
 8000e40:	4631      	mov	r1, r6
 8000e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e46:	fab3 f683 	clz	r6, r3
 8000e4a:	2e00      	cmp	r6, #0
 8000e4c:	d14a      	bne.n	8000ee4 <__udivmoddi4+0x160>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d302      	bcc.n	8000e58 <__udivmoddi4+0xd4>
 8000e52:	4282      	cmp	r2, r0
 8000e54:	f200 80f9 	bhi.w	800104a <__udivmoddi4+0x2c6>
 8000e58:	1a84      	subs	r4, r0, r2
 8000e5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e5e:	2001      	movs	r0, #1
 8000e60:	469e      	mov	lr, r3
 8000e62:	2d00      	cmp	r5, #0
 8000e64:	d0e0      	beq.n	8000e28 <__udivmoddi4+0xa4>
 8000e66:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e6a:	e7dd      	b.n	8000e28 <__udivmoddi4+0xa4>
 8000e6c:	b902      	cbnz	r2, 8000e70 <__udivmoddi4+0xec>
 8000e6e:	deff      	udf	#255	; 0xff
 8000e70:	fab2 f282 	clz	r2, r2
 8000e74:	2a00      	cmp	r2, #0
 8000e76:	f040 8092 	bne.w	8000f9e <__udivmoddi4+0x21a>
 8000e7a:	eba1 010c 	sub.w	r1, r1, ip
 8000e7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e82:	fa1f fe8c 	uxth.w	lr, ip
 8000e86:	2601      	movs	r6, #1
 8000e88:	0c20      	lsrs	r0, r4, #16
 8000e8a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e8e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e92:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e96:	fb0e f003 	mul.w	r0, lr, r3
 8000e9a:	4288      	cmp	r0, r1
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0x12c>
 8000e9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ea6:	d202      	bcs.n	8000eae <__udivmoddi4+0x12a>
 8000ea8:	4288      	cmp	r0, r1
 8000eaa:	f200 80cb 	bhi.w	8001044 <__udivmoddi4+0x2c0>
 8000eae:	4643      	mov	r3, r8
 8000eb0:	1a09      	subs	r1, r1, r0
 8000eb2:	b2a4      	uxth	r4, r4
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1110 	mls	r1, r7, r0, r1
 8000ebc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ec0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ec4:	45a6      	cmp	lr, r4
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x156>
 8000ec8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ecc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ed0:	d202      	bcs.n	8000ed8 <__udivmoddi4+0x154>
 8000ed2:	45a6      	cmp	lr, r4
 8000ed4:	f200 80bb 	bhi.w	800104e <__udivmoddi4+0x2ca>
 8000ed8:	4608      	mov	r0, r1
 8000eda:	eba4 040e 	sub.w	r4, r4, lr
 8000ede:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ee2:	e79c      	b.n	8000e1e <__udivmoddi4+0x9a>
 8000ee4:	f1c6 0720 	rsb	r7, r6, #32
 8000ee8:	40b3      	lsls	r3, r6
 8000eea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ef2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ef6:	fa01 f306 	lsl.w	r3, r1, r6
 8000efa:	431c      	orrs	r4, r3
 8000efc:	40f9      	lsrs	r1, r7
 8000efe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f02:	fa00 f306 	lsl.w	r3, r0, r6
 8000f06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f0a:	0c20      	lsrs	r0, r4, #16
 8000f0c:	fa1f fe8c 	uxth.w	lr, ip
 8000f10:	fb09 1118 	mls	r1, r9, r8, r1
 8000f14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f18:	fb08 f00e 	mul.w	r0, r8, lr
 8000f1c:	4288      	cmp	r0, r1
 8000f1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f22:	d90b      	bls.n	8000f3c <__udivmoddi4+0x1b8>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f2c:	f080 8088 	bcs.w	8001040 <__udivmoddi4+0x2bc>
 8000f30:	4288      	cmp	r0, r1
 8000f32:	f240 8085 	bls.w	8001040 <__udivmoddi4+0x2bc>
 8000f36:	f1a8 0802 	sub.w	r8, r8, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	1a09      	subs	r1, r1, r0
 8000f3e:	b2a4      	uxth	r4, r4
 8000f40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f44:	fb09 1110 	mls	r1, r9, r0, r1
 8000f48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f50:	458e      	cmp	lr, r1
 8000f52:	d908      	bls.n	8000f66 <__udivmoddi4+0x1e2>
 8000f54:	eb1c 0101 	adds.w	r1, ip, r1
 8000f58:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f5c:	d26c      	bcs.n	8001038 <__udivmoddi4+0x2b4>
 8000f5e:	458e      	cmp	lr, r1
 8000f60:	d96a      	bls.n	8001038 <__udivmoddi4+0x2b4>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4461      	add	r1, ip
 8000f66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f6e:	eba1 010e 	sub.w	r1, r1, lr
 8000f72:	42a1      	cmp	r1, r4
 8000f74:	46c8      	mov	r8, r9
 8000f76:	46a6      	mov	lr, r4
 8000f78:	d356      	bcc.n	8001028 <__udivmoddi4+0x2a4>
 8000f7a:	d053      	beq.n	8001024 <__udivmoddi4+0x2a0>
 8000f7c:	b15d      	cbz	r5, 8000f96 <__udivmoddi4+0x212>
 8000f7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f82:	eb61 010e 	sbc.w	r1, r1, lr
 8000f86:	fa01 f707 	lsl.w	r7, r1, r7
 8000f8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f8e:	40f1      	lsrs	r1, r6
 8000f90:	431f      	orrs	r7, r3
 8000f92:	e9c5 7100 	strd	r7, r1, [r5]
 8000f96:	2600      	movs	r6, #0
 8000f98:	4631      	mov	r1, r6
 8000f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f9e:	f1c2 0320 	rsb	r3, r2, #32
 8000fa2:	40d8      	lsrs	r0, r3
 8000fa4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fa8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fac:	4091      	lsls	r1, r2
 8000fae:	4301      	orrs	r1, r0
 8000fb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fb4:	fa1f fe8c 	uxth.w	lr, ip
 8000fb8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fbc:	fb07 3610 	mls	r6, r7, r0, r3
 8000fc0:	0c0b      	lsrs	r3, r1, #16
 8000fc2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fc6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fca:	429e      	cmp	r6, r3
 8000fcc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fd0:	d908      	bls.n	8000fe4 <__udivmoddi4+0x260>
 8000fd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fda:	d22f      	bcs.n	800103c <__udivmoddi4+0x2b8>
 8000fdc:	429e      	cmp	r6, r3
 8000fde:	d92d      	bls.n	800103c <__udivmoddi4+0x2b8>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	4463      	add	r3, ip
 8000fe4:	1b9b      	subs	r3, r3, r6
 8000fe6:	b289      	uxth	r1, r1
 8000fe8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fec:	fb07 3316 	mls	r3, r7, r6, r3
 8000ff0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ff4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ff8:	428b      	cmp	r3, r1
 8000ffa:	d908      	bls.n	800100e <__udivmoddi4+0x28a>
 8000ffc:	eb1c 0101 	adds.w	r1, ip, r1
 8001000:	f106 38ff 	add.w	r8, r6, #4294967295
 8001004:	d216      	bcs.n	8001034 <__udivmoddi4+0x2b0>
 8001006:	428b      	cmp	r3, r1
 8001008:	d914      	bls.n	8001034 <__udivmoddi4+0x2b0>
 800100a:	3e02      	subs	r6, #2
 800100c:	4461      	add	r1, ip
 800100e:	1ac9      	subs	r1, r1, r3
 8001010:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001014:	e738      	b.n	8000e88 <__udivmoddi4+0x104>
 8001016:	462e      	mov	r6, r5
 8001018:	4628      	mov	r0, r5
 800101a:	e705      	b.n	8000e28 <__udivmoddi4+0xa4>
 800101c:	4606      	mov	r6, r0
 800101e:	e6e3      	b.n	8000de8 <__udivmoddi4+0x64>
 8001020:	4618      	mov	r0, r3
 8001022:	e6f8      	b.n	8000e16 <__udivmoddi4+0x92>
 8001024:	454b      	cmp	r3, r9
 8001026:	d2a9      	bcs.n	8000f7c <__udivmoddi4+0x1f8>
 8001028:	ebb9 0802 	subs.w	r8, r9, r2
 800102c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001030:	3801      	subs	r0, #1
 8001032:	e7a3      	b.n	8000f7c <__udivmoddi4+0x1f8>
 8001034:	4646      	mov	r6, r8
 8001036:	e7ea      	b.n	800100e <__udivmoddi4+0x28a>
 8001038:	4620      	mov	r0, r4
 800103a:	e794      	b.n	8000f66 <__udivmoddi4+0x1e2>
 800103c:	4640      	mov	r0, r8
 800103e:	e7d1      	b.n	8000fe4 <__udivmoddi4+0x260>
 8001040:	46d0      	mov	r8, sl
 8001042:	e77b      	b.n	8000f3c <__udivmoddi4+0x1b8>
 8001044:	3b02      	subs	r3, #2
 8001046:	4461      	add	r1, ip
 8001048:	e732      	b.n	8000eb0 <__udivmoddi4+0x12c>
 800104a:	4630      	mov	r0, r6
 800104c:	e709      	b.n	8000e62 <__udivmoddi4+0xde>
 800104e:	4464      	add	r4, ip
 8001050:	3802      	subs	r0, #2
 8001052:	e742      	b.n	8000eda <__udivmoddi4+0x156>

08001054 <__aeabi_idiv0>:
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop

08001058 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b08a      	sub	sp, #40	; 0x28
 800105c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105e:	f107 0314 	add.w	r3, r7, #20
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	605a      	str	r2, [r3, #4]
 8001068:	609a      	str	r2, [r3, #8]
 800106a:	60da      	str	r2, [r3, #12]
 800106c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800106e:	4b59      	ldr	r3, [pc, #356]	; (80011d4 <MX_GPIO_Init+0x17c>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	4a58      	ldr	r2, [pc, #352]	; (80011d4 <MX_GPIO_Init+0x17c>)
 8001074:	f043 0302 	orr.w	r3, r3, #2
 8001078:	6313      	str	r3, [r2, #48]	; 0x30
 800107a:	4b56      	ldr	r3, [pc, #344]	; (80011d4 <MX_GPIO_Init+0x17c>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	f003 0302 	and.w	r3, r3, #2
 8001082:	613b      	str	r3, [r7, #16]
 8001084:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001086:	4b53      	ldr	r3, [pc, #332]	; (80011d4 <MX_GPIO_Init+0x17c>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	4a52      	ldr	r2, [pc, #328]	; (80011d4 <MX_GPIO_Init+0x17c>)
 800108c:	f043 0301 	orr.w	r3, r3, #1
 8001090:	6313      	str	r3, [r2, #48]	; 0x30
 8001092:	4b50      	ldr	r3, [pc, #320]	; (80011d4 <MX_GPIO_Init+0x17c>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800109e:	4b4d      	ldr	r3, [pc, #308]	; (80011d4 <MX_GPIO_Init+0x17c>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	4a4c      	ldr	r2, [pc, #304]	; (80011d4 <MX_GPIO_Init+0x17c>)
 80010a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010a8:	6313      	str	r3, [r2, #48]	; 0x30
 80010aa:	4b4a      	ldr	r3, [pc, #296]	; (80011d4 <MX_GPIO_Init+0x17c>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010b2:	60bb      	str	r3, [r7, #8]
 80010b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010b6:	4b47      	ldr	r3, [pc, #284]	; (80011d4 <MX_GPIO_Init+0x17c>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	4a46      	ldr	r2, [pc, #280]	; (80011d4 <MX_GPIO_Init+0x17c>)
 80010bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010c0:	6313      	str	r3, [r2, #48]	; 0x30
 80010c2:	4b44      	ldr	r3, [pc, #272]	; (80011d4 <MX_GPIO_Init+0x17c>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010ce:	4b41      	ldr	r3, [pc, #260]	; (80011d4 <MX_GPIO_Init+0x17c>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	4a40      	ldr	r2, [pc, #256]	; (80011d4 <MX_GPIO_Init+0x17c>)
 80010d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010d8:	6313      	str	r3, [r2, #48]	; 0x30
 80010da:	4b3e      	ldr	r3, [pc, #248]	; (80011d4 <MX_GPIO_Init+0x17c>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010e2:	603b      	str	r3, [r7, #0]
 80010e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2110      	movs	r1, #16
 80010ea:	483b      	ldr	r0, [pc, #236]	; (80011d8 <MX_GPIO_Init+0x180>)
 80010ec:	f002 f92e 	bl	800334c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0, GPIO_PIN_RESET);
 80010f0:	2200      	movs	r2, #0
 80010f2:	210f      	movs	r1, #15
 80010f4:	4839      	ldr	r0, [pc, #228]	; (80011dc <MX_GPIO_Init+0x184>)
 80010f6:	f002 f929 	bl	800334c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7|GPIO_PIN_6, GPIO_PIN_RESET);
 80010fa:	2200      	movs	r2, #0
 80010fc:	21c0      	movs	r1, #192	; 0xc0
 80010fe:	4838      	ldr	r0, [pc, #224]	; (80011e0 <MX_GPIO_Init+0x188>)
 8001100:	f002 f924 	bl	800334c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001104:	2310      	movs	r3, #16
 8001106:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001108:	2301      	movs	r3, #1
 800110a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001110:	2300      	movs	r3, #0
 8001112:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	4619      	mov	r1, r3
 800111a:	482f      	ldr	r0, [pc, #188]	; (80011d8 <MX_GPIO_Init+0x180>)
 800111c:	f001 fd86 	bl	8002c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PI3 PI2 PI1 PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0;
 8001120:	230f      	movs	r3, #15
 8001122:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001124:	2301      	movs	r3, #1
 8001126:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112c:	2300      	movs	r3, #0
 800112e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	4619      	mov	r1, r3
 8001136:	4829      	ldr	r0, [pc, #164]	; (80011dc <MX_GPIO_Init+0x184>)
 8001138:	f001 fd78 	bl	8002c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800113c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001140:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001142:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001146:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	4619      	mov	r1, r3
 8001152:	4824      	ldr	r0, [pc, #144]	; (80011e4 <MX_GPIO_Init+0x18c>)
 8001154:	f001 fd6a 	bl	8002c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001158:	23c0      	movs	r3, #192	; 0xc0
 800115a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115c:	2301      	movs	r3, #1
 800115e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001164:	2300      	movs	r3, #0
 8001166:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	4619      	mov	r1, r3
 800116e:	481c      	ldr	r0, [pc, #112]	; (80011e0 <MX_GPIO_Init+0x188>)
 8001170:	f001 fd5c 	bl	8002c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001174:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001178:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800117a:	2300      	movs	r3, #0
 800117c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001182:	f107 0314 	add.w	r3, r7, #20
 8001186:	4619      	mov	r1, r3
 8001188:	4813      	ldr	r0, [pc, #76]	; (80011d8 <MX_GPIO_Init+0x180>)
 800118a:	f001 fd4f 	bl	8002c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800118e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001192:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001194:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001198:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119e:	f107 0314 	add.w	r3, r7, #20
 80011a2:	4619      	mov	r1, r3
 80011a4:	480c      	ldr	r0, [pc, #48]	; (80011d8 <MX_GPIO_Init+0x180>)
 80011a6:	f001 fd41 	bl	8002c2c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2100      	movs	r1, #0
 80011ae:	2017      	movs	r0, #23
 80011b0:	f001 fc5a 	bl	8002a68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80011b4:	2017      	movs	r0, #23
 80011b6:	f001 fc83 	bl	8002ac0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2100      	movs	r1, #0
 80011be:	2028      	movs	r0, #40	; 0x28
 80011c0:	f001 fc52 	bl	8002a68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011c4:	2028      	movs	r0, #40	; 0x28
 80011c6:	f001 fc7b 	bl	8002ac0 <HAL_NVIC_EnableIRQ>

}
 80011ca:	bf00      	nop
 80011cc:	3728      	adds	r7, #40	; 0x28
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40023800 	.word	0x40023800
 80011d8:	40020400 	.word	0x40020400
 80011dc:	40022000 	.word	0x40022000
 80011e0:	40021800 	.word	0x40021800
 80011e4:	40020000 	.word	0x40020000

080011e8 <HX711_Init>:




void HX711_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  // Set the SCK pin to low
  HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_RESET);
 80011ec:	2200      	movs	r2, #0
 80011ee:	2102      	movs	r1, #2
 80011f0:	4802      	ldr	r0, [pc, #8]	; (80011fc <HX711_Init+0x14>)
 80011f2:	f002 f8ab 	bl	800334c <HAL_GPIO_WritePin>
}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40022000 	.word	0x40022000

08001200 <Read_HX711>:

int32_t Read_HX711(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
  int32_t data = 0;
 8001206:	2300      	movs	r3, #0
 8001208:	607b      	str	r3, [r7, #4]

  // Wait until the DT pin goes low
  while (HAL_GPIO_ReadPin(HX711_DT_GPIO_Port, HX711_DT_Pin) == GPIO_PIN_SET);
 800120a:	bf00      	nop
 800120c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001210:	4820      	ldr	r0, [pc, #128]	; (8001294 <Read_HX711+0x94>)
 8001212:	f002 f87b 	bl	800330c <HAL_GPIO_ReadPin>
 8001216:	4603      	mov	r3, r0
 8001218:	2b01      	cmp	r3, #1
 800121a:	d0f7      	beq.n	800120c <Read_HX711+0xc>

  // Read the 24-bit data
  for (int i = 0; i < 24; i++)
 800121c:	2300      	movs	r3, #0
 800121e:	603b      	str	r3, [r7, #0]
 8001220:	e020      	b.n	8001264 <Read_HX711+0x64>
  {
    // Generate a clock pulse on SCK pin
    HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_SET);
 8001222:	2201      	movs	r2, #1
 8001224:	2102      	movs	r1, #2
 8001226:	481c      	ldr	r0, [pc, #112]	; (8001298 <Read_HX711+0x98>)
 8001228:	f002 f890 	bl	800334c <HAL_GPIO_WritePin>
    DelayMicroseconds(1);
 800122c:	2001      	movs	r0, #1
 800122e:	f000 f86f 	bl	8001310 <DelayMicroseconds>
    data = (data << 1);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	607b      	str	r3, [r7, #4]
    if (HAL_GPIO_ReadPin(HX711_DT_GPIO_Port, HX711_DT_Pin) == GPIO_PIN_SET)
 8001238:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800123c:	4815      	ldr	r0, [pc, #84]	; (8001294 <Read_HX711+0x94>)
 800123e:	f002 f865 	bl	800330c <HAL_GPIO_ReadPin>
 8001242:	4603      	mov	r3, r0
 8001244:	2b01      	cmp	r3, #1
 8001246:	d102      	bne.n	800124e <Read_HX711+0x4e>
    {
      data++;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	3301      	adds	r3, #1
 800124c:	607b      	str	r3, [r7, #4]
    }
    HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_RESET);
 800124e:	2200      	movs	r2, #0
 8001250:	2102      	movs	r1, #2
 8001252:	4811      	ldr	r0, [pc, #68]	; (8001298 <Read_HX711+0x98>)
 8001254:	f002 f87a 	bl	800334c <HAL_GPIO_WritePin>
    DelayMicroseconds(1);
 8001258:	2001      	movs	r0, #1
 800125a:	f000 f859 	bl	8001310 <DelayMicroseconds>
  for (int i = 0; i < 24; i++)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	3301      	adds	r3, #1
 8001262:	603b      	str	r3, [r7, #0]
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	2b17      	cmp	r3, #23
 8001268:	dddb      	ble.n	8001222 <Read_HX711+0x22>
  }

  // Generate an additional 25th pulse to set the HX711 back to idle mode
  HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_SET);
 800126a:	2201      	movs	r2, #1
 800126c:	2102      	movs	r1, #2
 800126e:	480a      	ldr	r0, [pc, #40]	; (8001298 <Read_HX711+0x98>)
 8001270:	f002 f86c 	bl	800334c <HAL_GPIO_WritePin>
  DelayMicroseconds(1);
 8001274:	2001      	movs	r0, #1
 8001276:	f000 f84b 	bl	8001310 <DelayMicroseconds>
  HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_RESET);
 800127a:	2200      	movs	r2, #0
 800127c:	2102      	movs	r1, #2
 800127e:	4806      	ldr	r0, [pc, #24]	; (8001298 <Read_HX711+0x98>)
 8001280:	f002 f864 	bl	800334c <HAL_GPIO_WritePin>
  DelayMicroseconds(1);
 8001284:	2001      	movs	r0, #1
 8001286:	f000 f843 	bl	8001310 <DelayMicroseconds>


  // Return the 24-bit data
  return data;
 800128a:	687b      	ldr	r3, [r7, #4]
}
 800128c:	4618      	mov	r0, r3
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40020400 	.word	0x40020400
 8001298:	40022000 	.word	0x40022000

0800129c <UART_SendWeight_g>:

void UART_SendWeight_g(float rawData,float loadcell_slope,float loadcell_bias)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b090      	sub	sp, #64	; 0x40
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	ed87 0a03 	vstr	s0, [r7, #12]
 80012a6:	edc7 0a02 	vstr	s1, [r7, #8]
 80012aa:	ed87 1a01 	vstr	s2, [r7, #4]
  float weight = loadcell_slope * rawData  + loadcell_bias;
 80012ae:	ed97 7a02 	vldr	s14, [r7, #8]
 80012b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80012b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012ba:	ed97 7a01 	vldr	s14, [r7, #4]
 80012be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012c2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
  char buffer[32];
  int len = sprintf(buffer, "Weight(g):");
 80012c6:	f107 0314 	add.w	r3, r7, #20
 80012ca:	490e      	ldr	r1, [pc, #56]	; (8001304 <UART_SendWeight_g+0x68>)
 80012cc:	4618      	mov	r0, r3
 80012ce:	f00e fa23 	bl	800f718 <siprintf>
 80012d2:	63b8      	str	r0, [r7, #56]	; 0x38
  int data = sprintf(buffer, "%.2f", weight);
 80012d4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80012d6:	f7ff f967 	bl	80005a8 <__aeabi_f2d>
 80012da:	4602      	mov	r2, r0
 80012dc:	460b      	mov	r3, r1
 80012de:	f107 0014 	add.w	r0, r7, #20
 80012e2:	4909      	ldr	r1, [pc, #36]	; (8001308 <UART_SendWeight_g+0x6c>)
 80012e4:	f00e fa18 	bl	800f718 <siprintf>
 80012e8:	6378      	str	r0, [r7, #52]	; 0x34

  // Send the buffer content via UART
#if 0
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, len, 1000);
#endif
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, data, 1000);
 80012ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012ec:	b29a      	uxth	r2, r3
 80012ee:	f107 0114 	add.w	r1, r7, #20
 80012f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012f6:	4805      	ldr	r0, [pc, #20]	; (800130c <UART_SendWeight_g+0x70>)
 80012f8:	f006 ff4a 	bl	8008190 <HAL_UART_Transmit>
}
 80012fc:	bf00      	nop
 80012fe:	3740      	adds	r7, #64	; 0x40
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	08013b78 	.word	0x08013b78
 8001308:	08013b84 	.word	0x08013b84
 800130c:	2000069c 	.word	0x2000069c

08001310 <DelayMicroseconds>:

  // Send the buffer content via UART
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, len, 1000);
}
void DelayMicroseconds(uint32_t microseconds)
{
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  uint32_t ticks = microseconds;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	60fb      	str	r3, [r7, #12]
  while (ticks--)
 800131c:	e000      	b.n	8001320 <DelayMicroseconds+0x10>
  {
    __NOP();
 800131e:	bf00      	nop
  while (ticks--)
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	1e5a      	subs	r2, r3, #1
 8001324:	60fa      	str	r2, [r7, #12]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d1f9      	bne.n	800131e <DelayMicroseconds+0xe>
  }
}
 800132a:	bf00      	nop
 800132c:	bf00      	nop
 800132e:	3714      	adds	r7, #20
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800133c:	4b1b      	ldr	r3, [pc, #108]	; (80013ac <MX_I2C1_Init+0x74>)
 800133e:	4a1c      	ldr	r2, [pc, #112]	; (80013b0 <MX_I2C1_Init+0x78>)
 8001340:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 8001342:	4b1a      	ldr	r3, [pc, #104]	; (80013ac <MX_I2C1_Init+0x74>)
 8001344:	4a1b      	ldr	r2, [pc, #108]	; (80013b4 <MX_I2C1_Init+0x7c>)
 8001346:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001348:	4b18      	ldr	r3, [pc, #96]	; (80013ac <MX_I2C1_Init+0x74>)
 800134a:	2200      	movs	r2, #0
 800134c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800134e:	4b17      	ldr	r3, [pc, #92]	; (80013ac <MX_I2C1_Init+0x74>)
 8001350:	2201      	movs	r2, #1
 8001352:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001354:	4b15      	ldr	r3, [pc, #84]	; (80013ac <MX_I2C1_Init+0x74>)
 8001356:	2200      	movs	r2, #0
 8001358:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800135a:	4b14      	ldr	r3, [pc, #80]	; (80013ac <MX_I2C1_Init+0x74>)
 800135c:	2200      	movs	r2, #0
 800135e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001360:	4b12      	ldr	r3, [pc, #72]	; (80013ac <MX_I2C1_Init+0x74>)
 8001362:	2200      	movs	r2, #0
 8001364:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001366:	4b11      	ldr	r3, [pc, #68]	; (80013ac <MX_I2C1_Init+0x74>)
 8001368:	2200      	movs	r2, #0
 800136a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800136c:	4b0f      	ldr	r3, [pc, #60]	; (80013ac <MX_I2C1_Init+0x74>)
 800136e:	2200      	movs	r2, #0
 8001370:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001372:	480e      	ldr	r0, [pc, #56]	; (80013ac <MX_I2C1_Init+0x74>)
 8001374:	f002 f82e 	bl	80033d4 <HAL_I2C_Init>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800137e:	f000 fd73 	bl	8001e68 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001382:	2100      	movs	r1, #0
 8001384:	4809      	ldr	r0, [pc, #36]	; (80013ac <MX_I2C1_Init+0x74>)
 8001386:	f002 fde7 	bl	8003f58 <HAL_I2CEx_ConfigAnalogFilter>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001390:	f000 fd6a 	bl	8001e68 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001394:	2100      	movs	r1, #0
 8001396:	4805      	ldr	r0, [pc, #20]	; (80013ac <MX_I2C1_Init+0x74>)
 8001398:	f002 fe54 	bl	8004044 <HAL_I2CEx_ConfigDigitalFilter>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80013a2:	f000 fd61 	bl	8001e68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	200004b8 	.word	0x200004b8
 80013b0:	40005400 	.word	0x40005400
 80013b4:	6000030d 	.word	0x6000030d

080013b8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b0aa      	sub	sp, #168	; 0xa8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013d0:	f107 0310 	add.w	r3, r7, #16
 80013d4:	2284      	movs	r2, #132	; 0x84
 80013d6:	2100      	movs	r1, #0
 80013d8:	4618      	mov	r0, r3
 80013da:	f00d fb15 	bl	800ea08 <memset>
  if(i2cHandle->Instance==I2C1)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a22      	ldr	r2, [pc, #136]	; (800146c <HAL_I2C_MspInit+0xb4>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d13c      	bne.n	8001462 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013ec:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80013ee:	2300      	movs	r3, #0
 80013f0:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013f2:	f107 0310 	add.w	r3, r7, #16
 80013f6:	4618      	mov	r0, r3
 80013f8:	f003 fce4 	bl	8004dc4 <HAL_RCCEx_PeriphCLKConfig>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001402:	f000 fd31 	bl	8001e68 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001406:	4b1a      	ldr	r3, [pc, #104]	; (8001470 <HAL_I2C_MspInit+0xb8>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	4a19      	ldr	r2, [pc, #100]	; (8001470 <HAL_I2C_MspInit+0xb8>)
 800140c:	f043 0302 	orr.w	r3, r3, #2
 8001410:	6313      	str	r3, [r2, #48]	; 0x30
 8001412:	4b17      	ldr	r3, [pc, #92]	; (8001470 <HAL_I2C_MspInit+0xb8>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800141e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001422:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001426:	2312      	movs	r3, #18
 8001428:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001432:	2303      	movs	r3, #3
 8001434:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001438:	2304      	movs	r3, #4
 800143a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800143e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001442:	4619      	mov	r1, r3
 8001444:	480b      	ldr	r0, [pc, #44]	; (8001474 <HAL_I2C_MspInit+0xbc>)
 8001446:	f001 fbf1 	bl	8002c2c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800144a:	4b09      	ldr	r3, [pc, #36]	; (8001470 <HAL_I2C_MspInit+0xb8>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	4a08      	ldr	r2, [pc, #32]	; (8001470 <HAL_I2C_MspInit+0xb8>)
 8001450:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001454:	6413      	str	r3, [r2, #64]	; 0x40
 8001456:	4b06      	ldr	r3, [pc, #24]	; (8001470 <HAL_I2C_MspInit+0xb8>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001462:	bf00      	nop
 8001464:	37a8      	adds	r7, #168	; 0xa8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40005400 	.word	0x40005400
 8001470:	40023800 	.word	0x40023800
 8001474:	40020400 	.word	0x40020400

08001478 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001478:	b590      	push	{r4, r7, lr}
 800147a:	f6ad 4d1c 	subw	sp, sp, #3100	; 0xc1c
 800147e:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001480:	f001 f981 	bl	8002786 <HAL_Init>

  /* USER CODE BEGIN Init */

  uint8_t buffer[100]; // 데이터를 저장할 버퍼
  uint8_t received_data;
  uint32_t string_index = 0;
 8001484:	2300      	movs	r3, #0
 8001486:	f8c7 3bf8 	str.w	r3, [r7, #3064]	; 0xbf8
  HAL_StatusTypeDef status;

	// VL53L0X initialization stuff
	//
	uint32_t refSpadCount = 0;
 800148a:	2300      	movs	r3, #0
 800148c:	f8c7 3b6c 	str.w	r3, [r7, #2924]	; 0xb6c
	uint8_t isApertureSpads = 0;
 8001490:	2300      	movs	r3, #0
 8001492:	f887 3b6b 	strb.w	r3, [r7, #2923]	; 0xb6b
	uint8_t VhvSettings = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	f887 3b6a 	strb.w	r3, [r7, #2922]	; 0xb6a
	uint8_t PhaseCal = 0;
 800149c:	2300      	movs	r3, #0
 800149e:	f887 3b69 	strb.w	r3, [r7, #2921]	; 0xb69
	VL53L0X_Dev_t vl53l0x_s[NUM_SENSOR];
//	VL53L0X_Dev_t vl53l0x_s;

	VL53L0X_DEV Dev;
	//KalmanFilter kalman_filters[NUM_SENSOR];
	uint16_t distance[NUM_SENSOR] = {0,};
 80014a2:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 80014a6:	f6a3 33a8 	subw	r3, r3, #2984	; 0xba8
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	609a      	str	r2, [r3, #8]
 80014b2:	819a      	strh	r2, [r3, #12]
//	float filtered_distance[NUM_SENSOR] = {0,};

	uint8_t tca_ch[8] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80}; // control register of TCA9548A
 80014b4:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 80014b8:	f5a3 633b 	sub.w	r3, r3, #2992	; 0xbb0
 80014bc:	4a43      	ldr	r2, [pc, #268]	; (80015cc <main+0x154>)
 80014be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014c2:	e883 0003 	stmia.w	r3, {r0, r1}
	//uint8_t tca_ch[8] = {0b00000001, 0b00000010, 0b00000100, 0b00001000, 0b00010000, 0b00100000, 0b01000000, 0b10000000};
	uint8_t tca_ch_reset = 0x00;
 80014c6:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 80014ca:	f6a3 33b1 	subw	r3, r3, #2993	; 0xbb1
 80014ce:	2200      	movs	r2, #0
 80014d0:	701a      	strb	r2, [r3, #0]
	//uint8_t tca_ch_reset = 0b00000000;
    uint8_t tca_addr[] = {0x70};
 80014d2:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 80014d6:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 80014da:	2270      	movs	r2, #112	; 0x70
 80014dc:	701a      	strb	r2, [r3, #0]

//    uint8_t tca_addr[] = {0x70,0x71,0x72};


    HAL_UART_Receive_IT(&huart1,&rxData,1);
 80014de:	2201      	movs	r2, #1
 80014e0:	493b      	ldr	r1, [pc, #236]	; (80015d0 <main+0x158>)
 80014e2:	483c      	ldr	r0, [pc, #240]	; (80015d4 <main+0x15c>)
 80014e4:	f006 fed7 	bl	8008296 <HAL_UART_Receive_IT>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014e8:	f000 fbc0 	bl	8001c6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014ec:	f7ff fdb4 	bl	8001058 <MX_GPIO_Init>
  MX_I2C1_Init();
 80014f0:	f7ff ff22 	bl	8001338 <MX_I2C1_Init>
  MX_TIM7_Init();
 80014f4:	f000 ffce 	bl	8002494 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 80014f8:	f001 f86a 	bl	80025d0 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80014fc:	f000 ff54 	bl	80023a8 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001500:	f000 fc22 	bl	8001d48 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */


  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8001504:	2100      	movs	r1, #0
 8001506:	4834      	ldr	r0, [pc, #208]	; (80015d8 <main+0x160>)
 8001508:	f004 fe8a 	bl	8006220 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart1, &rxData, 1);
 800150c:	2201      	movs	r2, #1
 800150e:	4930      	ldr	r1, [pc, #192]	; (80015d0 <main+0x158>)
 8001510:	4830      	ldr	r0, [pc, #192]	; (80015d4 <main+0x15c>)
 8001512:	f006 fec0 	bl	8008296 <HAL_UART_Receive_IT>

  // Initialize the HX711
  HX711_Init();
 8001516:	f7ff fe67 	bl	80011e8 <HX711_Init>

  /* UART interrupt initialization */
  MessageLen = sprintf((char*)Message, "JH VL53L0X test\n\r");
 800151a:	4930      	ldr	r1, [pc, #192]	; (80015dc <main+0x164>)
 800151c:	4830      	ldr	r0, [pc, #192]	; (80015e0 <main+0x168>)
 800151e:	f00e f8fb 	bl	800f718 <siprintf>
 8001522:	4603      	mov	r3, r0
 8001524:	b2da      	uxtb	r2, r3
 8001526:	4b2f      	ldr	r3, [pc, #188]	; (80015e4 <main+0x16c>)
 8001528:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart1, Message, MessageLen, 100);
 800152a:	4b2e      	ldr	r3, [pc, #184]	; (80015e4 <main+0x16c>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	b29a      	uxth	r2, r3
 8001530:	2364      	movs	r3, #100	; 0x64
 8001532:	492b      	ldr	r1, [pc, #172]	; (80015e0 <main+0x168>)
 8001534:	4827      	ldr	r0, [pc, #156]	; (80015d4 <main+0x15c>)
 8001536:	f006 fe2b 	bl	8008190 <HAL_UART_Transmit>

#if 1

		for (int i = 0; i < sizeof(tca_addr); i++) {
 800153a:	2300      	movs	r3, #0
 800153c:	f8c7 3c0c 	str.w	r3, [r7, #3084]	; 0xc0c
 8001540:	e018      	b.n	8001574 <main+0xfc>
		    HAL_I2C_Master_Transmit(&hi2c1, tca_addr[i] << 1, &tca_ch_reset, 1, 1000);
 8001542:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8001546:	f6a3 32b4 	subw	r2, r3, #2996	; 0xbb4
 800154a:	f8d7 3c0c 	ldr.w	r3, [r7, #3084]	; 0xc0c
 800154e:	4413      	add	r3, r2
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	b29b      	uxth	r3, r3
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	b299      	uxth	r1, r3
 8001558:	f107 025f 	add.w	r2, r7, #95	; 0x5f
 800155c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001560:	9300      	str	r3, [sp, #0]
 8001562:	2301      	movs	r3, #1
 8001564:	4820      	ldr	r0, [pc, #128]	; (80015e8 <main+0x170>)
 8001566:	f002 f857 	bl	8003618 <HAL_I2C_Master_Transmit>
		for (int i = 0; i < sizeof(tca_addr); i++) {
 800156a:	f8d7 3c0c 	ldr.w	r3, [r7, #3084]	; 0xc0c
 800156e:	3301      	adds	r3, #1
 8001570:	f8c7 3c0c 	str.w	r3, [r7, #3084]	; 0xc0c
 8001574:	f8d7 3c0c 	ldr.w	r3, [r7, #3084]	; 0xc0c
 8001578:	2b00      	cmp	r3, #0
 800157a:	d0e2      	beq.n	8001542 <main+0xca>
		}

		for (int i = 0; i < NUM_SENSOR; i++) {
 800157c:	2300      	movs	r3, #0
 800157e:	f8c7 3c08 	str.w	r3, [r7, #3080]	; 0xc08
 8001582:	e0cf      	b.n	8001724 <main+0x2ac>

			uint8_t q = i / 8;
 8001584:	f8d7 3c08 	ldr.w	r3, [r7, #3080]	; 0xc08
 8001588:	2b00      	cmp	r3, #0
 800158a:	da00      	bge.n	800158e <main+0x116>
 800158c:	3307      	adds	r3, #7
 800158e:	10db      	asrs	r3, r3, #3
 8001590:	f887 3bdb 	strb.w	r3, [r7, #3035]	; 0xbdb
			uint8_t r = i % 8;
 8001594:	f8d7 3c08 	ldr.w	r3, [r7, #3080]	; 0xc08
 8001598:	425a      	negs	r2, r3
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	f002 0207 	and.w	r2, r2, #7
 80015a2:	bf58      	it	pl
 80015a4:	4253      	negpl	r3, r2
 80015a6:	f887 3bda 	strb.w	r3, [r7, #3034]	; 0xbda

		    for (int j = 0; j < sizeof(tca_addr); j++) {
 80015aa:	2300      	movs	r3, #0
 80015ac:	f8c7 3c04 	str.w	r3, [r7, #3076]	; 0xc04
 80015b0:	e039      	b.n	8001626 <main+0x1ae>
		        uint8_t *channel = (j == q) ? &tca_ch[r] : &tca_ch_reset;
 80015b2:	f897 3bdb 	ldrb.w	r3, [r7, #3035]	; 0xbdb
 80015b6:	f8d7 2c04 	ldr.w	r2, [r7, #3076]	; 0xc04
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d116      	bne.n	80015ec <main+0x174>
 80015be:	f897 3bda 	ldrb.w	r3, [r7, #3034]	; 0xbda
 80015c2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80015c6:	4413      	add	r3, r2
 80015c8:	e012      	b.n	80015f0 <main+0x178>
 80015ca:	bf00      	nop
 80015cc:	08013c1c 	.word	0x08013c1c
 80015d0:	2000058e 	.word	0x2000058e
 80015d4:	2000069c 	.word	0x2000069c
 80015d8:	20000604 	.word	0x20000604
 80015dc:	08013ba0 	.word	0x08013ba0
 80015e0:	2000059c 	.word	0x2000059c
 80015e4:	200005dc 	.word	0x200005dc
 80015e8:	200004b8 	.word	0x200004b8
 80015ec:	f107 035f 	add.w	r3, r7, #95	; 0x5f
 80015f0:	f8c7 3bd4 	str.w	r3, [r7, #3028]	; 0xbd4
		        HAL_I2C_Master_Transmit(&hi2c1, tca_addr[j] << 1, channel, 1, 1000);
 80015f4:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 80015f8:	f6a3 32b4 	subw	r2, r3, #2996	; 0xbb4
 80015fc:	f8d7 3c04 	ldr.w	r3, [r7, #3076]	; 0xc04
 8001600:	4413      	add	r3, r2
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	b29b      	uxth	r3, r3
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	b299      	uxth	r1, r3
 800160a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800160e:	9300      	str	r3, [sp, #0]
 8001610:	2301      	movs	r3, #1
 8001612:	f8d7 2bd4 	ldr.w	r2, [r7, #3028]	; 0xbd4
 8001616:	48ac      	ldr	r0, [pc, #688]	; (80018c8 <main+0x450>)
 8001618:	f001 fffe 	bl	8003618 <HAL_I2C_Master_Transmit>
		    for (int j = 0; j < sizeof(tca_addr); j++) {
 800161c:	f8d7 3c04 	ldr.w	r3, [r7, #3076]	; 0xc04
 8001620:	3301      	adds	r3, #1
 8001622:	f8c7 3c04 	str.w	r3, [r7, #3076]	; 0xc04
 8001626:	f8d7 3c04 	ldr.w	r3, [r7, #3076]	; 0xc04
 800162a:	2b00      	cmp	r3, #0
 800162c:	d0c1      	beq.n	80015b2 <main+0x13a>
		    }

			Dev = &vl53l0x_s[i];
 800162e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001632:	f8d7 3c08 	ldr.w	r3, [r7, #3080]	; 0xc08
 8001636:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800163a:	fb01 f303 	mul.w	r3, r1, r3
 800163e:	4413      	add	r3, r2
 8001640:	f8c7 3be0 	str.w	r3, [r7, #3040]	; 0xbe0
			Dev->I2cHandle = &hi2c1;
 8001644:	f8d7 3be0 	ldr.w	r3, [r7, #3040]	; 0xbe0
 8001648:	4a9f      	ldr	r2, [pc, #636]	; (80018c8 <main+0x450>)
 800164a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
			Dev->I2cDevAddr = VL53L0X_ADDR;
 800164e:	f8d7 3be0 	ldr.w	r3, [r7, #3040]	; 0xbe0
 8001652:	2252      	movs	r2, #82	; 0x52
 8001654:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

			VL53L0X_WaitDeviceBooted( Dev );
 8001658:	f8d7 0be0 	ldr.w	r0, [r7, #3040]	; 0xbe0
 800165c:	f008 fc68 	bl	8009f30 <VL53L0X_WaitDeviceBooted>
			VL53L0X_DataInit( Dev );
 8001660:	f8d7 0be0 	ldr.w	r0, [r7, #3040]	; 0xbe0
 8001664:	f008 f97e 	bl	8009964 <VL53L0X_DataInit>
			VL53L0X_StaticInit( Dev );
 8001668:	f8d7 0be0 	ldr.w	r0, [r7, #3040]	; 0xbe0
 800166c:	f008 fade 	bl	8009c2c <VL53L0X_StaticInit>
			VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 8001670:	2101      	movs	r1, #1
 8001672:	f8d7 0be0 	ldr.w	r0, [r7, #3040]	; 0xbe0
 8001676:	f008 fcf9 	bl	800a06c <VL53L0X_SetDeviceMode>
			VL53L0X_PerformRefCalibration( Dev, &VhvSettings, &PhaseCal);
 800167a:	f607 3269 	addw	r2, r7, #2921	; 0xb69
 800167e:	f607 336a 	addw	r3, r7, #2922	; 0xb6a
 8001682:	4619      	mov	r1, r3
 8001684:	f8d7 0be0 	ldr.w	r0, [r7, #3040]	; 0xbe0
 8001688:	f009 f972 	bl	800a970 <VL53L0X_PerformRefCalibration>
			VL53L0X_PerformRefSpadManagement( Dev, &refSpadCount, &isApertureSpads);
 800168c:	f607 326b 	addw	r2, r7, #2923	; 0xb6b
 8001690:	f607 336c 	addw	r3, r7, #2924	; 0xb6c
 8001694:	4619      	mov	r1, r3
 8001696:	f8d7 0be0 	ldr.w	r0, [r7, #3040]	; 0xbe0
 800169a:	f009 fdf7 	bl	800b28c <VL53L0X_PerformRefSpadManagement>
			VL53L0X_SetLimitCheckEnable( Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 800169e:	2201      	movs	r2, #1
 80016a0:	2100      	movs	r1, #0
 80016a2:	f8d7 0be0 	ldr.w	r0, [r7, #3040]	; 0xbe0
 80016a6:	f008 ff5d 	bl	800a564 <VL53L0X_SetLimitCheckEnable>
			VL53L0X_SetLimitCheckEnable( Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 80016aa:	2201      	movs	r2, #1
 80016ac:	2101      	movs	r1, #1
 80016ae:	f8d7 0be0 	ldr.w	r0, [r7, #3040]	; 0xbe0
 80016b2:	f008 ff57 	bl	800a564 <VL53L0X_SetLimitCheckEnable>
			VL53L0X_SetLimitCheckValue( Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 80016b6:	f641 1299 	movw	r2, #6553	; 0x1999
 80016ba:	2101      	movs	r1, #1
 80016bc:	f8d7 0be0 	ldr.w	r0, [r7, #3040]	; 0xbe0
 80016c0:	f009 f800 	bl	800a6c4 <VL53L0X_SetLimitCheckValue>
			VL53L0X_SetLimitCheckValue( Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 80016c4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80016c8:	2100      	movs	r1, #0
 80016ca:	f8d7 0be0 	ldr.w	r0, [r7, #3040]	; 0xbe0
 80016ce:	f008 fff9 	bl	800a6c4 <VL53L0X_SetLimitCheckValue>
			VL53L0X_SetMeasurementTimingBudgetMicroSeconds( Dev, 33000);
 80016d2:	f248 01e8 	movw	r1, #33000	; 0x80e8
 80016d6:	f8d7 0be0 	ldr.w	r0, [r7, #3040]	; 0xbe0
 80016da:	f008 fd25 	bl	800a128 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
			VL53L0X_SetVcselPulsePeriod( Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 80016de:	2212      	movs	r2, #18
 80016e0:	2100      	movs	r1, #0
 80016e2:	f8d7 0be0 	ldr.w	r0, [r7, #3040]	; 0xbe0
 80016e6:	f008 fd45 	bl	800a174 <VL53L0X_SetVcselPulsePeriod>
			VL53L0X_SetVcselPulsePeriod( Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 80016ea:	220e      	movs	r2, #14
 80016ec:	2101      	movs	r1, #1
 80016ee:	f8d7 0be0 	ldr.w	r0, [r7, #3040]	; 0xbe0
 80016f2:	f008 fd3f 	bl	800a174 <VL53L0X_SetVcselPulsePeriod>
			float R = 1.0f;   // Measurement noise covariance
			KalmanFilter_Init(&kalman_filters[i], Q, R);
			// KalmanFilter initializer END //			 */


			MessageLen = sprintf((char*)Message, "%d complete \n\r",i);
 80016f6:	f8d7 2c08 	ldr.w	r2, [r7, #3080]	; 0xc08
 80016fa:	4974      	ldr	r1, [pc, #464]	; (80018cc <main+0x454>)
 80016fc:	4874      	ldr	r0, [pc, #464]	; (80018d0 <main+0x458>)
 80016fe:	f00e f80b 	bl	800f718 <siprintf>
 8001702:	4603      	mov	r3, r0
 8001704:	b2da      	uxtb	r2, r3
 8001706:	4b73      	ldr	r3, [pc, #460]	; (80018d4 <main+0x45c>)
 8001708:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, Message, MessageLen, 100);
 800170a:	4b72      	ldr	r3, [pc, #456]	; (80018d4 <main+0x45c>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	b29a      	uxth	r2, r3
 8001710:	2364      	movs	r3, #100	; 0x64
 8001712:	496f      	ldr	r1, [pc, #444]	; (80018d0 <main+0x458>)
 8001714:	4870      	ldr	r0, [pc, #448]	; (80018d8 <main+0x460>)
 8001716:	f006 fd3b 	bl	8008190 <HAL_UART_Transmit>
		for (int i = 0; i < NUM_SENSOR; i++) {
 800171a:	f8d7 3c08 	ldr.w	r3, [r7, #3080]	; 0xc08
 800171e:	3301      	adds	r3, #1
 8001720:	f8c7 3c08 	str.w	r3, [r7, #3080]	; 0xc08
 8001724:	f8d7 3c08 	ldr.w	r3, [r7, #3080]	; 0xc08
 8001728:	2b06      	cmp	r3, #6
 800172a:	f77f af2b 	ble.w	8001584 <main+0x10c>

  while (1)
  {


	  if(receivedFlag)
 800172e:	4b6b      	ldr	r3, [pc, #428]	; (80018dc <main+0x464>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d0fb      	beq.n	800172e <main+0x2b6>
	  {
		  if(strncmp((char*)rxBuffer, "rev",3) == 0)
 8001736:	2203      	movs	r2, #3
 8001738:	4969      	ldr	r1, [pc, #420]	; (80018e0 <main+0x468>)
 800173a:	486a      	ldr	r0, [pc, #424]	; (80018e4 <main+0x46c>)
 800173c:	f00e f885 	bl	800f84a <strncmp>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	f040 8100 	bne.w	8001948 <main+0x4d0>
		     {
		         float servo_dist=0;
 8001748:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 800174c:	f6a3 33c8 	subw	r3, r3, #3016	; 0xbc8
 8001750:	f04f 0200 	mov.w	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
		         int step_rev_angle=0;
 8001756:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 800175a:	f6a3 33cc 	subw	r3, r3, #3020	; 0xbcc
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
		         int step_lin_dist=0;
 8001762:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8001766:	f5a3 633d 	sub.w	r3, r3, #3024	; 0xbd0
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]

		         // Check if three integers are successfully parsed
		         if(sscanf((char*)rxBuffer + 4, "%f,%d,%d",&servo_dist, &step_rev_angle, &step_lin_dist) == 3)
 800176e:	485e      	ldr	r0, [pc, #376]	; (80018e8 <main+0x470>)
 8001770:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001774:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001778:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800177c:	9300      	str	r3, [sp, #0]
 800177e:	460b      	mov	r3, r1
 8001780:	495a      	ldr	r1, [pc, #360]	; (80018ec <main+0x474>)
 8001782:	f00d ffe9 	bl	800f758 <siscanf>
 8001786:	4603      	mov	r3, r0
 8001788:	2b03      	cmp	r3, #3
 800178a:	f040 80bb 	bne.w	8001904 <main+0x48c>
		         {
		             stepRev(step_rev_angle);
 800178e:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8001792:	f6a3 33cc 	subw	r3, r3, #3020	; 0xbcc
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4618      	mov	r0, r3
 800179a:	f000 fb75 	bl	8001e88 <stepRev>
		             stepLin(step_lin_dist);
 800179e:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 80017a2:	f5a3 633d 	sub.w	r3, r3, #3024	; 0xbd0
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f000 fbd7 	bl	8001f5c <stepLin>
		             servo_angle(&htim2, TIM_CHANNEL_1, servo_dist);
 80017ae:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 80017b2:	f6a3 33c8 	subw	r3, r3, #3016	; 0xbc8
 80017b6:	edd3 7a00 	vldr	s15, [r3]
 80017ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017be:	ee17 2a90 	vmov	r2, s15
 80017c2:	2100      	movs	r1, #0
 80017c4:	484a      	ldr	r0, [pc, #296]	; (80018f0 <main+0x478>)
 80017c6:	f000 fc63 	bl	8002090 <servo_angle>
		             servo_dist *=0.8;
 80017ca:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 80017ce:	f6a3 33c8 	subw	r3, r3, #3016	; 0xbc8
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7fe fee7 	bl	80005a8 <__aeabi_f2d>
 80017da:	a339      	add	r3, pc, #228	; (adr r3, 80018c0 <main+0x448>)
 80017dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e0:	f7fe ff3a 	bl	8000658 <__aeabi_dmul>
 80017e4:	4602      	mov	r2, r0
 80017e6:	460b      	mov	r3, r1
 80017e8:	4610      	mov	r0, r2
 80017ea:	4619      	mov	r1, r3
 80017ec:	f7ff fa2c 	bl	8000c48 <__aeabi_d2f>
 80017f0:	4602      	mov	r2, r0
 80017f2:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 80017f6:	f6a3 33c8 	subw	r3, r3, #3016	; 0xbc8
 80017fa:	601a      	str	r2, [r3, #0]


		 			MessageLen = sprintf((char*)Message, "%d deg rev \n\r",step_rev_angle);
 80017fc:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8001800:	f6a3 33cc 	subw	r3, r3, #3020	; 0xbcc
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	461a      	mov	r2, r3
 8001808:	493a      	ldr	r1, [pc, #232]	; (80018f4 <main+0x47c>)
 800180a:	4831      	ldr	r0, [pc, #196]	; (80018d0 <main+0x458>)
 800180c:	f00d ff84 	bl	800f718 <siprintf>
 8001810:	4603      	mov	r3, r0
 8001812:	b2da      	uxtb	r2, r3
 8001814:	4b2f      	ldr	r3, [pc, #188]	; (80018d4 <main+0x45c>)
 8001816:	701a      	strb	r2, [r3, #0]
		 			HAL_UART_Transmit(&huart1, Message, MessageLen, 100);
 8001818:	4b2e      	ldr	r3, [pc, #184]	; (80018d4 <main+0x45c>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	b29a      	uxth	r2, r3
 800181e:	2364      	movs	r3, #100	; 0x64
 8001820:	492b      	ldr	r1, [pc, #172]	; (80018d0 <main+0x458>)
 8001822:	482d      	ldr	r0, [pc, #180]	; (80018d8 <main+0x460>)
 8001824:	f006 fcb4 	bl	8008190 <HAL_UART_Transmit>
		 			MessageLen = sprintf((char*)Message, "%d mm lin \n\r",step_lin_dist);
 8001828:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 800182c:	f5a3 633d 	sub.w	r3, r3, #3024	; 0xbd0
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	461a      	mov	r2, r3
 8001834:	4930      	ldr	r1, [pc, #192]	; (80018f8 <main+0x480>)
 8001836:	4826      	ldr	r0, [pc, #152]	; (80018d0 <main+0x458>)
 8001838:	f00d ff6e 	bl	800f718 <siprintf>
 800183c:	4603      	mov	r3, r0
 800183e:	b2da      	uxtb	r2, r3
 8001840:	4b24      	ldr	r3, [pc, #144]	; (80018d4 <main+0x45c>)
 8001842:	701a      	strb	r2, [r3, #0]
		 			HAL_UART_Transmit(&huart1, Message, MessageLen, 100);
 8001844:	4b23      	ldr	r3, [pc, #140]	; (80018d4 <main+0x45c>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	b29a      	uxth	r2, r3
 800184a:	2364      	movs	r3, #100	; 0x64
 800184c:	4920      	ldr	r1, [pc, #128]	; (80018d0 <main+0x458>)
 800184e:	4822      	ldr	r0, [pc, #136]	; (80018d8 <main+0x460>)
 8001850:	f006 fc9e 	bl	8008190 <HAL_UART_Transmit>
		 			MessageLen = sprintf((char*)Message, "%.2f servo \n\r",servo_dist);
 8001854:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8001858:	f6a3 33c8 	subw	r3, r3, #3016	; 0xbc8
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4618      	mov	r0, r3
 8001860:	f7fe fea2 	bl	80005a8 <__aeabi_f2d>
 8001864:	4602      	mov	r2, r0
 8001866:	460b      	mov	r3, r1
 8001868:	4924      	ldr	r1, [pc, #144]	; (80018fc <main+0x484>)
 800186a:	4819      	ldr	r0, [pc, #100]	; (80018d0 <main+0x458>)
 800186c:	f00d ff54 	bl	800f718 <siprintf>
 8001870:	4603      	mov	r3, r0
 8001872:	b2da      	uxtb	r2, r3
 8001874:	4b17      	ldr	r3, [pc, #92]	; (80018d4 <main+0x45c>)
 8001876:	701a      	strb	r2, [r3, #0]
		 			HAL_UART_Transmit(&huart1, Message, MessageLen, 100);
 8001878:	4b16      	ldr	r3, [pc, #88]	; (80018d4 <main+0x45c>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	b29a      	uxth	r2, r3
 800187e:	2364      	movs	r3, #100	; 0x64
 8001880:	4913      	ldr	r1, [pc, #76]	; (80018d0 <main+0x458>)
 8001882:	4815      	ldr	r0, [pc, #84]	; (80018d8 <main+0x460>)
 8001884:	f006 fc84 	bl	8008190 <HAL_UART_Transmit>
		             uint8_t goodMSG[] = "vaild data\r\n";
 8001888:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 800188c:	f5a3 633e 	sub.w	r3, r3, #3040	; 0xbe0
 8001890:	4a1b      	ldr	r2, [pc, #108]	; (8001900 <main+0x488>)
 8001892:	461c      	mov	r4, r3
 8001894:	4613      	mov	r3, r2
 8001896:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001898:	c407      	stmia	r4!, {r0, r1, r2}
 800189a:	7023      	strb	r3, [r4, #0]
		             HAL_UART_Transmit(&huart1, goodMSG, strlen((char*)goodMSG),1000);
 800189c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7fe fcbf 	bl	8000224 <strlen>
 80018a6:	4603      	mov	r3, r0
 80018a8:	b29a      	uxth	r2, r3
 80018aa:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80018ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018b2:	4809      	ldr	r0, [pc, #36]	; (80018d8 <main+0x460>)
 80018b4:	f006 fc6c 	bl	8008190 <HAL_UART_Transmit>
 80018b8:	e03f      	b.n	800193a <main+0x4c2>
 80018ba:	bf00      	nop
 80018bc:	f3af 8000 	nop.w
 80018c0:	9999999a 	.word	0x9999999a
 80018c4:	3fe99999 	.word	0x3fe99999
 80018c8:	200004b8 	.word	0x200004b8
 80018cc:	08013bb4 	.word	0x08013bb4
 80018d0:	2000059c 	.word	0x2000059c
 80018d4:	200005dc 	.word	0x200005dc
 80018d8:	2000069c 	.word	0x2000069c
 80018dc:	2000058f 	.word	0x2000058f
 80018e0:	08013bc4 	.word	0x08013bc4
 80018e4:	2000050c 	.word	0x2000050c
 80018e8:	20000510 	.word	0x20000510
 80018ec:	08013bc8 	.word	0x08013bc8
 80018f0:	20000604 	.word	0x20000604
 80018f4:	08013bd4 	.word	0x08013bd4
 80018f8:	08013be4 	.word	0x08013be4
 80018fc:	08013bf4 	.word	0x08013bf4
 8001900:	08013c24 	.word	0x08013c24
		         }
		         else
		         {
		             uint8_t badMSG[] = "invalid data\r\n";
 8001904:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8001908:	f5a3 633f 	sub.w	r3, r3, #3056	; 0xbf0
 800190c:	4ac0      	ldr	r2, [pc, #768]	; (8001c10 <main+0x798>)
 800190e:	461c      	mov	r4, r3
 8001910:	4613      	mov	r3, r2
 8001912:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001914:	c407      	stmia	r4!, {r0, r1, r2}
 8001916:	8023      	strh	r3, [r4, #0]
 8001918:	3402      	adds	r4, #2
 800191a:	0c1b      	lsrs	r3, r3, #16
 800191c:	7023      	strb	r3, [r4, #0]
		             HAL_UART_Transmit(&huart1, badMSG, strlen((char*)badMSG),1000);
 800191e:	f107 0320 	add.w	r3, r7, #32
 8001922:	4618      	mov	r0, r3
 8001924:	f7fe fc7e 	bl	8000224 <strlen>
 8001928:	4603      	mov	r3, r0
 800192a:	b29a      	uxth	r2, r3
 800192c:	f107 0120 	add.w	r1, r7, #32
 8001930:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001934:	48b7      	ldr	r0, [pc, #732]	; (8001c14 <main+0x79c>)
 8001936:	f006 fc2b 	bl	8008190 <HAL_UART_Transmit>
		         }

		         // Delay for 1 second
		         HAL_Delay(1000);
 800193a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800193e:	f000 ff7f 	bl	8002840 <HAL_Delay>

		         receivedFlag = 0;
 8001942:	4bb5      	ldr	r3, [pc, #724]	; (8001c18 <main+0x7a0>)
 8001944:	2200      	movs	r2, #0
 8001946:	701a      	strb	r2, [r3, #0]
		     }


		  if(strncmp((char*)rxBuffer, "auto",7) == 0)
 8001948:	49b4      	ldr	r1, [pc, #720]	; (8001c1c <main+0x7a4>)
 800194a:	48b5      	ldr	r0, [pc, #724]	; (8001c20 <main+0x7a8>)
 800194c:	f7fe fc60 	bl	8000210 <strcmp>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	f040 8142 	bne.w	8001bdc <main+0x764>
		     {
	             uint8_t autoMSG[] = "autoMode\r\n";
 8001958:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 800195c:	f6a3 33fc 	subw	r3, r3, #3068	; 0xbfc
 8001960:	4ab0      	ldr	r2, [pc, #704]	; (8001c24 <main+0x7ac>)
 8001962:	ca07      	ldmia	r2, {r0, r1, r2}
 8001964:	c303      	stmia	r3!, {r0, r1}
 8001966:	801a      	strh	r2, [r3, #0]
 8001968:	3302      	adds	r3, #2
 800196a:	0c12      	lsrs	r2, r2, #16
 800196c:	701a      	strb	r2, [r3, #0]
	             HAL_UART_Transmit(&huart1, autoMSG, strlen((char*)autoMSG),1000);
 800196e:	f107 0314 	add.w	r3, r7, #20
 8001972:	4618      	mov	r0, r3
 8001974:	f7fe fc56 	bl	8000224 <strlen>
 8001978:	4603      	mov	r3, r0
 800197a:	b29a      	uxth	r2, r3
 800197c:	f107 0114 	add.w	r1, r7, #20
 8001980:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001984:	48a3      	ldr	r0, [pc, #652]	; (8001c14 <main+0x79c>)
 8001986:	f006 fc03 	bl	8008190 <HAL_UART_Transmit>

		             stepRev(50); // revolution
 800198a:	2032      	movs	r0, #50	; 0x32
 800198c:	f000 fa7c 	bl	8001e88 <stepRev>
		             stepRev(0); // fix the position
 8001990:	2000      	movs	r0, #0
 8001992:	f000 fa79 	bl	8001e88 <stepRev>

		             stepLin(10); // moving horizontal
 8001996:	200a      	movs	r0, #10
 8001998:	f000 fae0 	bl	8001f5c <stepLin>
		             stepLin(-10); //
 800199c:	f06f 0009 	mvn.w	r0, #9
 80019a0:	f000 fadc 	bl	8001f5c <stepLin>

		             servo_angle(&htim2, TIM_CHANNEL_1, 5); // poking
 80019a4:	2205      	movs	r2, #5
 80019a6:	2100      	movs	r1, #0
 80019a8:	489f      	ldr	r0, [pc, #636]	; (8001c28 <main+0x7b0>)
 80019aa:	f000 fb71 	bl	8002090 <servo_angle>


		             start_time = HAL_GetTick(); // 시작 시간 측정
 80019ae:	f000 ff3b 	bl	8002828 <HAL_GetTick>
 80019b2:	4603      	mov	r3, r0
 80019b4:	4a9d      	ldr	r2, [pc, #628]	; (8001c2c <main+0x7b4>)
 80019b6:	6013      	str	r3, [r2, #0]
		             do{

		              /// Read the VL53l0x data ///
		      		   for (int i = 0; i < NUM_SENSOR; i++) {
 80019b8:	2300      	movs	r3, #0
 80019ba:	f8c7 3c00 	str.w	r3, [r7, #3072]	; 0xc00
 80019be:	e08a      	b.n	8001ad6 <main+0x65e>
		      				uint8_t q = i / 8;
 80019c0:	f8d7 3c00 	ldr.w	r3, [r7, #3072]	; 0xc00
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	da00      	bge.n	80019ca <main+0x552>
 80019c8:	3307      	adds	r3, #7
 80019ca:	10db      	asrs	r3, r3, #3
 80019cc:	f887 3be7 	strb.w	r3, [r7, #3047]	; 0xbe7
		      				uint8_t r = i % 8;
 80019d0:	f8d7 3c00 	ldr.w	r3, [r7, #3072]	; 0xc00
 80019d4:	425a      	negs	r2, r3
 80019d6:	f003 0307 	and.w	r3, r3, #7
 80019da:	f002 0207 	and.w	r2, r2, #7
 80019de:	bf58      	it	pl
 80019e0:	4253      	negpl	r3, r2
 80019e2:	f887 3be6 	strb.w	r3, [r7, #3046]	; 0xbe6
		      			    for (int j = 0; j < sizeof(tca_addr); j++) {
 80019e6:	2300      	movs	r3, #0
 80019e8:	f8c7 3bfc 	str.w	r3, [r7, #3068]	; 0xbfc
 80019ec:	e028      	b.n	8001a40 <main+0x5c8>
		      			        uint8_t *channel = (j == q) ? &tca_ch[r] : &tca_ch_reset;
 80019ee:	f897 3be7 	ldrb.w	r3, [r7, #3047]	; 0xbe7
 80019f2:	f8d7 2bfc 	ldr.w	r2, [r7, #3068]	; 0xbfc
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d105      	bne.n	8001a06 <main+0x58e>
 80019fa:	f897 3be6 	ldrb.w	r3, [r7, #3046]	; 0xbe6
 80019fe:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001a02:	4413      	add	r3, r2
 8001a04:	e001      	b.n	8001a0a <main+0x592>
 8001a06:	f107 035f 	add.w	r3, r7, #95	; 0x5f
 8001a0a:	f8c7 3bdc 	str.w	r3, [r7, #3036]	; 0xbdc
		      			        HAL_I2C_Master_Transmit(&hi2c1, tca_addr[j] << 1, channel, 1, 1000);
 8001a0e:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8001a12:	f6a3 32b4 	subw	r2, r3, #2996	; 0xbb4
 8001a16:	f8d7 3bfc 	ldr.w	r3, [r7, #3068]	; 0xbfc
 8001a1a:	4413      	add	r3, r2
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	b299      	uxth	r1, r3
 8001a24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a28:	9300      	str	r3, [sp, #0]
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	f8d7 2bdc 	ldr.w	r2, [r7, #3036]	; 0xbdc
 8001a30:	487f      	ldr	r0, [pc, #508]	; (8001c30 <main+0x7b8>)
 8001a32:	f001 fdf1 	bl	8003618 <HAL_I2C_Master_Transmit>
		      			    for (int j = 0; j < sizeof(tca_addr); j++) {
 8001a36:	f8d7 3bfc 	ldr.w	r3, [r7, #3068]	; 0xbfc
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	f8c7 3bfc 	str.w	r3, [r7, #3068]	; 0xbfc
 8001a40:	f8d7 3bfc 	ldr.w	r3, [r7, #3068]	; 0xbfc
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d0d2      	beq.n	80019ee <main+0x576>
		      			    }
		      		       Dev = &vl53l0x_s[i];
 8001a48:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001a4c:	f8d7 3c00 	ldr.w	r3, [r7, #3072]	; 0xc00
 8001a50:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001a54:	fb01 f303 	mul.w	r3, r1, r3
 8001a58:	4413      	add	r3, r2
 8001a5a:	f8c7 3be0 	str.w	r3, [r7, #3040]	; 0xbe0
		      		       VL53L0X_PerformContinuousRangingMeasurement(Dev, &RangingData); // 1500us
 8001a5e:	4975      	ldr	r1, [pc, #468]	; (8001c34 <main+0x7bc>)
 8001a60:	f8d7 0be0 	ldr.w	r0, [r7, #3040]	; 0xbe0
 8001a64:	f009 fc27 	bl	800b2b6 <VL53L0X_PerformContinuousRangingMeasurement>
		      		       if (RangingData.RangeStatus == 0) {
 8001a68:	4b72      	ldr	r3, [pc, #456]	; (8001c34 <main+0x7bc>)
 8001a6a:	7e1b      	ldrb	r3, [r3, #24]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d10a      	bne.n	8001a86 <main+0x60e>
		      		    	   distance[i] = RangingData.RangeMilliMeter;
 8001a70:	4b70      	ldr	r3, [pc, #448]	; (8001c34 <main+0x7bc>)
 8001a72:	8919      	ldrh	r1, [r3, #8]
 8001a74:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8001a78:	f6a3 33a8 	subw	r3, r3, #2984	; 0xba8
 8001a7c:	f8d7 2c00 	ldr.w	r2, [r7, #3072]	; 0xc00
 8001a80:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8001a84:	e008      	b.n	8001a98 <main+0x620>
		      		       }else{
		      		    	   distance[i] = 0;
 8001a86:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8001a8a:	f6a3 33a8 	subw	r3, r3, #2984	; 0xba8
 8001a8e:	f8d7 2c00 	ldr.w	r2, [r7, #3072]	; 0xc00
 8001a92:	2100      	movs	r1, #0
 8001a94:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		      		       }
		      	           MessageLen = sprintf((char*)Message, "%d ",distance[i]);
 8001a98:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8001a9c:	f6a3 33a8 	subw	r3, r3, #2984	; 0xba8
 8001aa0:	f8d7 2c00 	ldr.w	r2, [r7, #3072]	; 0xc00
 8001aa4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	4963      	ldr	r1, [pc, #396]	; (8001c38 <main+0x7c0>)
 8001aac:	4863      	ldr	r0, [pc, #396]	; (8001c3c <main+0x7c4>)
 8001aae:	f00d fe33 	bl	800f718 <siprintf>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	b2da      	uxtb	r2, r3
 8001ab6:	4b62      	ldr	r3, [pc, #392]	; (8001c40 <main+0x7c8>)
 8001ab8:	701a      	strb	r2, [r3, #0]
		      	           HAL_UART_Transmit(&huart1, Message, MessageLen, 1000);
 8001aba:	4b61      	ldr	r3, [pc, #388]	; (8001c40 <main+0x7c8>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	b29a      	uxth	r2, r3
 8001ac0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ac4:	495d      	ldr	r1, [pc, #372]	; (8001c3c <main+0x7c4>)
 8001ac6:	4853      	ldr	r0, [pc, #332]	; (8001c14 <main+0x79c>)
 8001ac8:	f006 fb62 	bl	8008190 <HAL_UART_Transmit>
		      		   for (int i = 0; i < NUM_SENSOR; i++) {
 8001acc:	f8d7 3c00 	ldr.w	r3, [r7, #3072]	; 0xc00
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	f8c7 3c00 	str.w	r3, [r7, #3072]	; 0xc00
 8001ad6:	f8d7 3c00 	ldr.w	r3, [r7, #3072]	; 0xc00
 8001ada:	2b06      	cmp	r3, #6
 8001adc:	f77f af70 	ble.w	80019c0 <main+0x548>
		      		   }
		      		   /// End of Reading Vl53l0x data ///

		      	    // Read the raw data from HX711
		      	    rawData = Read_HX711();
 8001ae0:	f7ff fb8e 	bl	8001200 <Read_HX711>
 8001ae4:	f8c7 0bf4 	str.w	r0, [r7, #3060]	; 0xbf4

		      	    // Convert the raw data to weight (replace the calibration factor with your own)
		      	    float loadcell_slope = -1/1600.00f;
 8001ae8:	4b56      	ldr	r3, [pc, #344]	; (8001c44 <main+0x7cc>)
 8001aea:	f507 623f 	add.w	r2, r7, #3056	; 0xbf0
 8001aee:	6013      	str	r3, [r2, #0]
		      	    float loadcell_bias = 10002;
 8001af0:	4b55      	ldr	r3, [pc, #340]	; (8001c48 <main+0x7d0>)
 8001af2:	f607 32ec 	addw	r2, r7, #3052	; 0xbec
 8001af6:	6013      	str	r3, [r2, #0]


		      	    // Send the weight data over UART
		      	    UART_SendWeight_g(rawData,loadcell_slope,loadcell_bias);
 8001af8:	f8d7 3bf4 	ldr.w	r3, [r7, #3060]	; 0xbf4
 8001afc:	ee07 3a90 	vmov	s15, r3
 8001b00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b04:	f607 33ec 	addw	r3, r7, #3052	; 0xbec
 8001b08:	ed93 1a00 	vldr	s2, [r3]
 8001b0c:	f507 633f 	add.w	r3, r7, #3056	; 0xbf0
 8001b10:	edd3 0a00 	vldr	s1, [r3]
 8001b14:	eeb0 0a67 	vmov.f32	s0, s15
 8001b18:	f7ff fbc0 	bl	800129c <UART_SendWeight_g>



		      	  char msg[20];
		      	  float encoderAngle = encoderCount*360.0/4096.0;
 8001b1c:	4b4b      	ldr	r3, [pc, #300]	; (8001c4c <main+0x7d4>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7fe fd2f 	bl	8000584 <__aeabi_i2d>
 8001b26:	f04f 0200 	mov.w	r2, #0
 8001b2a:	4b49      	ldr	r3, [pc, #292]	; (8001c50 <main+0x7d8>)
 8001b2c:	f7fe fd94 	bl	8000658 <__aeabi_dmul>
 8001b30:	4602      	mov	r2, r0
 8001b32:	460b      	mov	r3, r1
 8001b34:	4610      	mov	r0, r2
 8001b36:	4619      	mov	r1, r3
 8001b38:	f04f 0200 	mov.w	r2, #0
 8001b3c:	4b45      	ldr	r3, [pc, #276]	; (8001c54 <main+0x7dc>)
 8001b3e:	f7fe feb5 	bl	80008ac <__aeabi_ddiv>
 8001b42:	4602      	mov	r2, r0
 8001b44:	460b      	mov	r3, r1
 8001b46:	4610      	mov	r0, r2
 8001b48:	4619      	mov	r1, r3
 8001b4a:	f7ff f87d 	bl	8000c48 <__aeabi_d2f>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	f607 32e8 	addw	r2, r7, #3048	; 0xbe8
 8001b54:	6013      	str	r3, [r2, #0]
		      	  sprintf(msg, " %.2f ", encoderAngle);
 8001b56:	f607 33e8 	addw	r3, r7, #3048	; 0xbe8
 8001b5a:	6818      	ldr	r0, [r3, #0]
 8001b5c:	f7fe fd24 	bl	80005a8 <__aeabi_f2d>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	4638      	mov	r0, r7
 8001b66:	493c      	ldr	r1, [pc, #240]	; (8001c58 <main+0x7e0>)
 8001b68:	f00d fdd6 	bl	800f718 <siprintf>
		      	  HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), 1000);
 8001b6c:	463b      	mov	r3, r7
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7fe fb58 	bl	8000224 <strlen>
 8001b74:	4603      	mov	r3, r0
 8001b76:	b29a      	uxth	r2, r3
 8001b78:	4639      	mov	r1, r7
 8001b7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b7e:	4825      	ldr	r0, [pc, #148]	; (8001c14 <main+0x79c>)
 8001b80:	f006 fb06 	bl	8008190 <HAL_UART_Transmit>

		      	  MessageLen = sprintf((char*)Message, "\n");
 8001b84:	4935      	ldr	r1, [pc, #212]	; (8001c5c <main+0x7e4>)
 8001b86:	482d      	ldr	r0, [pc, #180]	; (8001c3c <main+0x7c4>)
 8001b88:	f00d fdc6 	bl	800f718 <siprintf>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	4b2b      	ldr	r3, [pc, #172]	; (8001c40 <main+0x7c8>)
 8001b92:	701a      	strb	r2, [r3, #0]
		      	  HAL_UART_Transmit(&huart1, Message, MessageLen, 1000);
 8001b94:	4b2a      	ldr	r3, [pc, #168]	; (8001c40 <main+0x7c8>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	b29a      	uxth	r2, r3
 8001b9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b9e:	4927      	ldr	r1, [pc, #156]	; (8001c3c <main+0x7c4>)
 8001ba0:	481c      	ldr	r0, [pc, #112]	; (8001c14 <main+0x79c>)
 8001ba2:	f006 faf5 	bl	8008190 <HAL_UART_Transmit>


				 end_time = HAL_GetTick(); // 끝 시간 측정
 8001ba6:	f000 fe3f 	bl	8002828 <HAL_GetTick>
 8001baa:	4603      	mov	r3, r0
 8001bac:	4a2c      	ldr	r2, [pc, #176]	; (8001c60 <main+0x7e8>)
 8001bae:	6013      	str	r3, [r2, #0]
				 time_diff = end_time - start_time; // 시간 차이 계산
 8001bb0:	4b2b      	ldr	r3, [pc, #172]	; (8001c60 <main+0x7e8>)
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	4b1d      	ldr	r3, [pc, #116]	; (8001c2c <main+0x7b4>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	4a2a      	ldr	r2, [pc, #168]	; (8001c64 <main+0x7ec>)
 8001bbc:	6013      	str	r3, [r2, #0]


		             }while(time_diff<3000);
 8001bbe:	4b29      	ldr	r3, [pc, #164]	; (8001c64 <main+0x7ec>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	f67f aef6 	bls.w	80019b8 <main+0x540>

		             servo_angle(&htim2, TIM_CHANNEL_1, 0); // turn to origin
 8001bcc:	2200      	movs	r2, #0
 8001bce:	2100      	movs	r1, #0
 8001bd0:	4815      	ldr	r0, [pc, #84]	; (8001c28 <main+0x7b0>)
 8001bd2:	f000 fa5d 	bl	8002090 <servo_angle>




		         receivedFlag = 0;
 8001bd6:	4b10      	ldr	r3, [pc, #64]	; (8001c18 <main+0x7a0>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	701a      	strb	r2, [r3, #0]
		     }

          uint8_t endMSG[] = "Message end\r\n";
 8001bdc:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8001be0:	f6a3 33c4 	subw	r3, r3, #3012	; 0xbc4
 8001be4:	4a20      	ldr	r2, [pc, #128]	; (8001c68 <main+0x7f0>)
 8001be6:	461c      	mov	r4, r3
 8001be8:	4613      	mov	r3, r2
 8001bea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bec:	c407      	stmia	r4!, {r0, r1, r2}
 8001bee:	8023      	strh	r3, [r4, #0]
          HAL_UART_Transmit(&huart1, endMSG, strlen((char*)endMSG),1000);
 8001bf0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7fe fb15 	bl	8000224 <strlen>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	b29a      	uxth	r2, r3
 8001bfe:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8001c02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c06:	4803      	ldr	r0, [pc, #12]	; (8001c14 <main+0x79c>)
 8001c08:	f006 fac2 	bl	8008190 <HAL_UART_Transmit>
	  if(receivedFlag)
 8001c0c:	e58f      	b.n	800172e <main+0x2b6>
 8001c0e:	bf00      	nop
 8001c10:	08013c34 	.word	0x08013c34
 8001c14:	2000069c 	.word	0x2000069c
 8001c18:	2000058f 	.word	0x2000058f
 8001c1c:	08013c04 	.word	0x08013c04
 8001c20:	2000050c 	.word	0x2000050c
 8001c24:	08013c44 	.word	0x08013c44
 8001c28:	20000604 	.word	0x20000604
 8001c2c:	20000594 	.word	0x20000594
 8001c30:	200004b8 	.word	0x200004b8
 8001c34:	200005e0 	.word	0x200005e0
 8001c38:	08013c0c 	.word	0x08013c0c
 8001c3c:	2000059c 	.word	0x2000059c
 8001c40:	200005dc 	.word	0x200005dc
 8001c44:	ba23d70a 	.word	0xba23d70a
 8001c48:	461c4800 	.word	0x461c4800
 8001c4c:	200005fc 	.word	0x200005fc
 8001c50:	40768000 	.word	0x40768000
 8001c54:	40b00000 	.word	0x40b00000
 8001c58:	08013c10 	.word	0x08013c10
 8001c5c:	08013c18 	.word	0x08013c18
 8001c60:	20000598 	.word	0x20000598
 8001c64:	20000590 	.word	0x20000590
 8001c68:	08013c50 	.word	0x08013c50

08001c6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b094      	sub	sp, #80	; 0x50
 8001c70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c72:	f107 0320 	add.w	r3, r7, #32
 8001c76:	2230      	movs	r2, #48	; 0x30
 8001c78:	2100      	movs	r1, #0
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f00c fec4 	bl	800ea08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c80:	f107 030c 	add.w	r3, r7, #12
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
 8001c8c:	60da      	str	r2, [r3, #12]
 8001c8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c90:	4b2b      	ldr	r3, [pc, #172]	; (8001d40 <SystemClock_Config+0xd4>)
 8001c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c94:	4a2a      	ldr	r2, [pc, #168]	; (8001d40 <SystemClock_Config+0xd4>)
 8001c96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c9a:	6413      	str	r3, [r2, #64]	; 0x40
 8001c9c:	4b28      	ldr	r3, [pc, #160]	; (8001d40 <SystemClock_Config+0xd4>)
 8001c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ca4:	60bb      	str	r3, [r7, #8]
 8001ca6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ca8:	4b26      	ldr	r3, [pc, #152]	; (8001d44 <SystemClock_Config+0xd8>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a25      	ldr	r2, [pc, #148]	; (8001d44 <SystemClock_Config+0xd8>)
 8001cae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001cb2:	6013      	str	r3, [r2, #0]
 8001cb4:	4b23      	ldr	r3, [pc, #140]	; (8001d44 <SystemClock_Config+0xd8>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001cbc:	607b      	str	r3, [r7, #4]
 8001cbe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cc8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001cd4:	2319      	movs	r3, #25
 8001cd6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001cd8:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001cdc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cde:	2302      	movs	r3, #2
 8001ce0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ce6:	f107 0320 	add.w	r3, r7, #32
 8001cea:	4618      	mov	r0, r3
 8001cec:	f002 fa6e 	bl	80041cc <HAL_RCC_OscConfig>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001cf6:	f000 f8b7 	bl	8001e68 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001cfa:	f002 fa17 	bl	800412c <HAL_PWREx_EnableOverDrive>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001d04:	f000 f8b0 	bl	8001e68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d08:	230f      	movs	r3, #15
 8001d0a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d10:	2300      	movs	r3, #0
 8001d12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d14:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d18:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d1e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001d20:	f107 030c 	add.w	r3, r7, #12
 8001d24:	2107      	movs	r1, #7
 8001d26:	4618      	mov	r0, r3
 8001d28:	f002 fdaa 	bl	8004880 <HAL_RCC_ClockConfig>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001d32:	f000 f899 	bl	8001e68 <Error_Handler>
  }
}
 8001d36:	bf00      	nop
 8001d38:	3750      	adds	r7, #80	; 0x50
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40023800 	.word	0x40023800
 8001d44:	40007000 	.word	0x40007000

08001d48 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	2100      	movs	r1, #0
 8001d50:	2025      	movs	r0, #37	; 0x25
 8001d52:	f000 fe89 	bl	8002a68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d56:	2025      	movs	r0, #37	; 0x25
 8001d58:	f000 feb2 	bl	8002ac0 <HAL_NVIC_EnableIRQ>
  /* TIM7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	2101      	movs	r1, #1
 8001d60:	2037      	movs	r0, #55	; 0x37
 8001d62:	f000 fe81 	bl	8002a68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001d66:	2037      	movs	r0, #55	; 0x37
 8001d68:	f000 feaa 	bl	8002ac0 <HAL_NVIC_EnableIRQ>
}
 8001d6c:	bf00      	nop
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a15      	ldr	r2, [pc, #84]	; (8001dd4 <HAL_UART_RxCpltCallback+0x64>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d124      	bne.n	8001dcc <HAL_UART_RxCpltCallback+0x5c>
  {
    if (rxData != '\n' && rxBufferIndex < RX_BUFFER_SIZE - 1)
 8001d82:	4b15      	ldr	r3, [pc, #84]	; (8001dd8 <HAL_UART_RxCpltCallback+0x68>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	2b0a      	cmp	r3, #10
 8001d88:	d00f      	beq.n	8001daa <HAL_UART_RxCpltCallback+0x3a>
 8001d8a:	4b14      	ldr	r3, [pc, #80]	; (8001ddc <HAL_UART_RxCpltCallback+0x6c>)
 8001d8c:	881b      	ldrh	r3, [r3, #0]
 8001d8e:	2b7e      	cmp	r3, #126	; 0x7e
 8001d90:	d80b      	bhi.n	8001daa <HAL_UART_RxCpltCallback+0x3a>
    {
      rxBuffer[rxBufferIndex++] = rxData;
 8001d92:	4b12      	ldr	r3, [pc, #72]	; (8001ddc <HAL_UART_RxCpltCallback+0x6c>)
 8001d94:	881b      	ldrh	r3, [r3, #0]
 8001d96:	1c5a      	adds	r2, r3, #1
 8001d98:	b291      	uxth	r1, r2
 8001d9a:	4a10      	ldr	r2, [pc, #64]	; (8001ddc <HAL_UART_RxCpltCallback+0x6c>)
 8001d9c:	8011      	strh	r1, [r2, #0]
 8001d9e:	461a      	mov	r2, r3
 8001da0:	4b0d      	ldr	r3, [pc, #52]	; (8001dd8 <HAL_UART_RxCpltCallback+0x68>)
 8001da2:	7819      	ldrb	r1, [r3, #0]
 8001da4:	4b0e      	ldr	r3, [pc, #56]	; (8001de0 <HAL_UART_RxCpltCallback+0x70>)
 8001da6:	5499      	strb	r1, [r3, r2]
 8001da8:	e00b      	b.n	8001dc2 <HAL_UART_RxCpltCallback+0x52>
    }
    else
    {
      rxBuffer[rxBufferIndex] = '\0';
 8001daa:	4b0c      	ldr	r3, [pc, #48]	; (8001ddc <HAL_UART_RxCpltCallback+0x6c>)
 8001dac:	881b      	ldrh	r3, [r3, #0]
 8001dae:	461a      	mov	r2, r3
 8001db0:	4b0b      	ldr	r3, [pc, #44]	; (8001de0 <HAL_UART_RxCpltCallback+0x70>)
 8001db2:	2100      	movs	r1, #0
 8001db4:	5499      	strb	r1, [r3, r2]
      rxBufferIndex = 0;
 8001db6:	4b09      	ldr	r3, [pc, #36]	; (8001ddc <HAL_UART_RxCpltCallback+0x6c>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	801a      	strh	r2, [r3, #0]
      receivedFlag = 1; // 문자?��?�� ?��?��?��?��?��?�� ?��리는 ?��?��그�?? ?��?��?��?��?��.
 8001dbc:	4b09      	ldr	r3, [pc, #36]	; (8001de4 <HAL_UART_RxCpltCallback+0x74>)
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	701a      	strb	r2, [r3, #0]
    }
    HAL_UART_Receive_IT(&huart1, &rxData, 1);
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	4904      	ldr	r1, [pc, #16]	; (8001dd8 <HAL_UART_RxCpltCallback+0x68>)
 8001dc6:	4808      	ldr	r0, [pc, #32]	; (8001de8 <HAL_UART_RxCpltCallback+0x78>)
 8001dc8:	f006 fa65 	bl	8008296 <HAL_UART_Receive_IT>
  }
}
 8001dcc:	bf00      	nop
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40011000 	.word	0x40011000
 8001dd8:	2000058e 	.word	0x2000058e
 8001ddc:	2000058c 	.word	0x2000058c
 8001de0:	2000050c 	.word	0x2000050c
 8001de4:	2000058f 	.word	0x2000058f
 8001de8:	2000069c 	.word	0x2000069c

08001dec <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_8) // A?��?�� ???�� ?��?��?��?��
 8001df6:	88fb      	ldrh	r3, [r7, #6]
 8001df8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dfc:	d113      	bne.n	8001e26 <HAL_GPIO_EXTI_Callback+0x3a>
  {
    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)) // B?�� 값을 ?��?��
 8001dfe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e02:	4816      	ldr	r0, [pc, #88]	; (8001e5c <HAL_GPIO_EXTI_Callback+0x70>)
 8001e04:	f001 fa82 	bl	800330c <HAL_GPIO_ReadPin>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d005      	beq.n	8001e1a <HAL_GPIO_EXTI_Callback+0x2e>
    {
      encoderCount++;
 8001e0e:	4b14      	ldr	r3, [pc, #80]	; (8001e60 <HAL_GPIO_EXTI_Callback+0x74>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	3301      	adds	r3, #1
 8001e14:	4a12      	ldr	r2, [pc, #72]	; (8001e60 <HAL_GPIO_EXTI_Callback+0x74>)
 8001e16:	6013      	str	r3, [r2, #0]
    else
    {
      encoderCount++;
    }
  }
}
 8001e18:	e01c      	b.n	8001e54 <HAL_GPIO_EXTI_Callback+0x68>
      encoderCount--;
 8001e1a:	4b11      	ldr	r3, [pc, #68]	; (8001e60 <HAL_GPIO_EXTI_Callback+0x74>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	4a0f      	ldr	r2, [pc, #60]	; (8001e60 <HAL_GPIO_EXTI_Callback+0x74>)
 8001e22:	6013      	str	r3, [r2, #0]
}
 8001e24:	e016      	b.n	8001e54 <HAL_GPIO_EXTI_Callback+0x68>
  else if (GPIO_Pin == GPIO_PIN_15) // B?��?�� ???�� ?��?��?��?��
 8001e26:	88fb      	ldrh	r3, [r7, #6]
 8001e28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e2c:	d112      	bne.n	8001e54 <HAL_GPIO_EXTI_Callback+0x68>
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) // A?�� 값을 ?��?��
 8001e2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e32:	480c      	ldr	r0, [pc, #48]	; (8001e64 <HAL_GPIO_EXTI_Callback+0x78>)
 8001e34:	f001 fa6a 	bl	800330c <HAL_GPIO_ReadPin>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d005      	beq.n	8001e4a <HAL_GPIO_EXTI_Callback+0x5e>
      encoderCount--;
 8001e3e:	4b08      	ldr	r3, [pc, #32]	; (8001e60 <HAL_GPIO_EXTI_Callback+0x74>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	3b01      	subs	r3, #1
 8001e44:	4a06      	ldr	r2, [pc, #24]	; (8001e60 <HAL_GPIO_EXTI_Callback+0x74>)
 8001e46:	6013      	str	r3, [r2, #0]
}
 8001e48:	e004      	b.n	8001e54 <HAL_GPIO_EXTI_Callback+0x68>
      encoderCount++;
 8001e4a:	4b05      	ldr	r3, [pc, #20]	; (8001e60 <HAL_GPIO_EXTI_Callback+0x74>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	4a03      	ldr	r2, [pc, #12]	; (8001e60 <HAL_GPIO_EXTI_Callback+0x74>)
 8001e52:	6013      	str	r3, [r2, #0]
}
 8001e54:	bf00      	nop
 8001e56:	3708      	adds	r7, #8
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40020400 	.word	0x40020400
 8001e60:	200005fc 	.word	0x200005fc
 8001e64:	40020000 	.word	0x40020000

08001e68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e6c:	b672      	cpsid	i
}
 8001e6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e70:	e7fe      	b.n	8001e70 <Error_Handler+0x8>

08001e72 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001e72:	b480      	push	{r7}
 8001e74:	b083      	sub	sp, #12
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
 8001e7a:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <stepRev>:
#include "gpio.h"
#include "tim.h"

#define PULSE 200

void stepRev(int ANG) {
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
	// ENA D2 PG7 GPIOG GPIO_PIN_6
	// CLK D3 PB4 GPIOB GPIO_PIN_4
	// DIR D4 PG7 GPIOG GPIO_PIN_7


  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);  // ENA
 8001e90:	2200      	movs	r2, #0
 8001e92:	2140      	movs	r1, #64	; 0x40
 8001e94:	482e      	ldr	r0, [pc, #184]	; (8001f50 <stepRev+0xc8>)
 8001e96:	f001 fa59 	bl	800334c <HAL_GPIO_WritePin>

  if (ANG != 0) {
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d04d      	beq.n	8001f3c <stepRev+0xb4>
    int direction = (ANG > 0) ? 1 : -1;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	dd01      	ble.n	8001eaa <stepRev+0x22>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e001      	b.n	8001eae <stepRev+0x26>
 8001eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8001eae:	613b      	str	r3, [r7, #16]
    ANG *= direction;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	fb02 f303 	mul.w	r3, r2, r3
 8001eb8:	607b      	str	r3, [r7, #4]
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, direction == 1 ? GPIO_PIN_SET : GPIO_PIN_RESET); // DIR
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	bf0c      	ite	eq
 8001ec0:	2301      	moveq	r3, #1
 8001ec2:	2300      	movne	r3, #0
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	2180      	movs	r1, #128	; 0x80
 8001eca:	4821      	ldr	r0, [pc, #132]	; (8001f50 <stepRev+0xc8>)
 8001ecc:	f001 fa3e 	bl	800334c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET); // ENA
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	2140      	movs	r1, #64	; 0x40
 8001ed4:	481e      	ldr	r0, [pc, #120]	; (8001f50 <stepRev+0xc8>)
 8001ed6:	f001 fa39 	bl	800334c <HAL_GPIO_WritePin>
    uint32_t steps = PULSE * ANG / 360.0;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	22c8      	movs	r2, #200	; 0xc8
 8001ede:	fb02 f303 	mul.w	r3, r2, r3
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7fe fb4e 	bl	8000584 <__aeabi_i2d>
 8001ee8:	f04f 0200 	mov.w	r2, #0
 8001eec:	4b19      	ldr	r3, [pc, #100]	; (8001f54 <stepRev+0xcc>)
 8001eee:	f7fe fcdd 	bl	80008ac <__aeabi_ddiv>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	4610      	mov	r0, r2
 8001ef8:	4619      	mov	r1, r3
 8001efa:	f7fe fe85 	bl	8000c08 <__aeabi_d2uiz>
 8001efe:	4603      	mov	r3, r0
 8001f00:	60fb      	str	r3, [r7, #12]
    uint32_t pulse_delay_ms_ = 5; // 6rpm
 8001f02:	2305      	movs	r3, #5
 8001f04:	60bb      	str	r3, [r7, #8]

    for (int i = 0; i < steps; i++) {
 8001f06:	2300      	movs	r3, #0
 8001f08:	617b      	str	r3, [r7, #20]
 8001f0a:	e012      	b.n	8001f32 <stepRev+0xaa>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET); //CLK
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	2110      	movs	r1, #16
 8001f10:	4811      	ldr	r0, [pc, #68]	; (8001f58 <stepRev+0xd0>)
 8001f12:	f001 fa1b 	bl	800334c <HAL_GPIO_WritePin>
      HAL_Delay(pulse_delay_ms_);
 8001f16:	68b8      	ldr	r0, [r7, #8]
 8001f18:	f000 fc92 	bl	8002840 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); //CLK
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	2110      	movs	r1, #16
 8001f20:	480d      	ldr	r0, [pc, #52]	; (8001f58 <stepRev+0xd0>)
 8001f22:	f001 fa13 	bl	800334c <HAL_GPIO_WritePin>
      HAL_Delay(pulse_delay_ms_);
 8001f26:	68b8      	ldr	r0, [r7, #8]
 8001f28:	f000 fc8a 	bl	8002840 <HAL_Delay>
    for (int i = 0; i < steps; i++) {
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	617b      	str	r3, [r7, #20]
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d8e8      	bhi.n	8001f0c <stepRev+0x84>
  }
  else {
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET); // ENA
  }

}
 8001f3a:	e004      	b.n	8001f46 <stepRev+0xbe>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET); // ENA
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	2140      	movs	r1, #64	; 0x40
 8001f40:	4803      	ldr	r0, [pc, #12]	; (8001f50 <stepRev+0xc8>)
 8001f42:	f001 fa03 	bl	800334c <HAL_GPIO_WritePin>
}
 8001f46:	bf00      	nop
 8001f48:	3718      	adds	r7, #24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	40021800 	.word	0x40021800
 8001f54:	40768000 	.word	0x40768000
 8001f58:	40020400 	.word	0x40020400

08001f5c <stepLin>:

void stepLin(int DIST) {
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b088      	sub	sp, #32
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]

	// ENA D5 PI0 GPIOI GPIO_PIN_0
	// CLK D8 PI2 GPIOI GPIO_PIN_2
	// DIR D7 PI3 GPIOI GPIO_PIN_3

	float ANG = DIST * 360.0 / 8; // 1 rev -> 8 mm
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f7fe fb0d 	bl	8000584 <__aeabi_i2d>
 8001f6a:	f04f 0200 	mov.w	r2, #0
 8001f6e:	4b44      	ldr	r3, [pc, #272]	; (8002080 <stepLin+0x124>)
 8001f70:	f7fe fb72 	bl	8000658 <__aeabi_dmul>
 8001f74:	4602      	mov	r2, r0
 8001f76:	460b      	mov	r3, r1
 8001f78:	4610      	mov	r0, r2
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	f04f 0200 	mov.w	r2, #0
 8001f80:	4b40      	ldr	r3, [pc, #256]	; (8002084 <stepLin+0x128>)
 8001f82:	f7fe fc93 	bl	80008ac <__aeabi_ddiv>
 8001f86:	4602      	mov	r2, r0
 8001f88:	460b      	mov	r3, r1
 8001f8a:	4610      	mov	r0, r2
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	f7fe fe5b 	bl	8000c48 <__aeabi_d2f>
 8001f92:	4603      	mov	r3, r0
 8001f94:	61bb      	str	r3, [r7, #24]


  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);  // ENA
 8001f96:	2201      	movs	r2, #1
 8001f98:	2101      	movs	r1, #1
 8001f9a:	483b      	ldr	r0, [pc, #236]	; (8002088 <stepLin+0x12c>)
 8001f9c:	f001 f9d6 	bl	800334c <HAL_GPIO_WritePin>

  if (ANG != 0) {
 8001fa0:	edd7 7a06 	vldr	s15, [r7, #24]
 8001fa4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fac:	d05a      	beq.n	8002064 <stepLin+0x108>
    int direction = (ANG > 0) ? 1 : -1;
 8001fae:	edd7 7a06 	vldr	s15, [r7, #24]
 8001fb2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fba:	dd01      	ble.n	8001fc0 <stepLin+0x64>
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e001      	b.n	8001fc4 <stepLin+0x68>
 8001fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8001fc4:	617b      	str	r3, [r7, #20]
    ANG *= direction;
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	ee07 3a90 	vmov	s15, r3
 8001fcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fd0:	ed97 7a06 	vldr	s14, [r7, #24]
 8001fd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fd8:	edc7 7a06 	vstr	s15, [r7, #24]
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_3, direction == 1 ? GPIO_PIN_SET : GPIO_PIN_RESET); // DIR
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	bf0c      	ite	eq
 8001fe2:	2301      	moveq	r3, #1
 8001fe4:	2300      	movne	r3, #0
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	461a      	mov	r2, r3
 8001fea:	2108      	movs	r1, #8
 8001fec:	4826      	ldr	r0, [pc, #152]	; (8002088 <stepLin+0x12c>)
 8001fee:	f001 f9ad 	bl	800334c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);  // ENA
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	2101      	movs	r1, #1
 8001ff6:	4824      	ldr	r0, [pc, #144]	; (8002088 <stepLin+0x12c>)
 8001ff8:	f001 f9a8 	bl	800334c <HAL_GPIO_WritePin>
    uint32_t steps = PULSE * ANG / 360.0;
 8001ffc:	edd7 7a06 	vldr	s15, [r7, #24]
 8002000:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800208c <stepLin+0x130>
 8002004:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002008:	ee17 0a90 	vmov	r0, s15
 800200c:	f7fe facc 	bl	80005a8 <__aeabi_f2d>
 8002010:	f04f 0200 	mov.w	r2, #0
 8002014:	4b1a      	ldr	r3, [pc, #104]	; (8002080 <stepLin+0x124>)
 8002016:	f7fe fc49 	bl	80008ac <__aeabi_ddiv>
 800201a:	4602      	mov	r2, r0
 800201c:	460b      	mov	r3, r1
 800201e:	4610      	mov	r0, r2
 8002020:	4619      	mov	r1, r3
 8002022:	f7fe fdf1 	bl	8000c08 <__aeabi_d2uiz>
 8002026:	4603      	mov	r3, r0
 8002028:	613b      	str	r3, [r7, #16]
    uint32_t pulse_delay_ms_ = 1; // 6rpm
 800202a:	2301      	movs	r3, #1
 800202c:	60fb      	str	r3, [r7, #12]

    for (int i = 0; i < steps; i++) {
 800202e:	2300      	movs	r3, #0
 8002030:	61fb      	str	r3, [r7, #28]
 8002032:	e012      	b.n	800205a <stepLin+0xfe>
      HAL_GPIO_WritePin(GPIOI, GPIO_PIN_2, GPIO_PIN_SET); // CLK
 8002034:	2201      	movs	r2, #1
 8002036:	2104      	movs	r1, #4
 8002038:	4813      	ldr	r0, [pc, #76]	; (8002088 <stepLin+0x12c>)
 800203a:	f001 f987 	bl	800334c <HAL_GPIO_WritePin>
      HAL_Delay(pulse_delay_ms_);
 800203e:	68f8      	ldr	r0, [r7, #12]
 8002040:	f000 fbfe 	bl	8002840 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOI, GPIO_PIN_2, GPIO_PIN_RESET); // CLK
 8002044:	2200      	movs	r2, #0
 8002046:	2104      	movs	r1, #4
 8002048:	480f      	ldr	r0, [pc, #60]	; (8002088 <stepLin+0x12c>)
 800204a:	f001 f97f 	bl	800334c <HAL_GPIO_WritePin>
      HAL_Delay(pulse_delay_ms_);
 800204e:	68f8      	ldr	r0, [r7, #12]
 8002050:	f000 fbf6 	bl	8002840 <HAL_Delay>
    for (int i = 0; i < steps; i++) {
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	3301      	adds	r3, #1
 8002058:	61fb      	str	r3, [r7, #28]
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	429a      	cmp	r2, r3
 8002060:	d8e8      	bhi.n	8002034 <stepLin+0xd8>
 8002062:	e004      	b.n	800206e <stepLin+0x112>
    }
  }
  else {
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);  // ENA
 8002064:	2200      	movs	r2, #0
 8002066:	2101      	movs	r1, #1
 8002068:	4807      	ldr	r0, [pc, #28]	; (8002088 <stepLin+0x12c>)
 800206a:	f001 f96f 	bl	800334c <HAL_GPIO_WritePin>
  }

  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);  // ENA
 800206e:	2201      	movs	r2, #1
 8002070:	2101      	movs	r1, #1
 8002072:	4805      	ldr	r0, [pc, #20]	; (8002088 <stepLin+0x12c>)
 8002074:	f001 f96a 	bl	800334c <HAL_GPIO_WritePin>

}
 8002078:	bf00      	nop
 800207a:	3720      	adds	r7, #32
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	40768000 	.word	0x40768000
 8002084:	40200000 	.word	0x40200000
 8002088:	40022000 	.word	0x40022000
 800208c:	43480000 	.word	0x43480000

08002090 <servo_angle>:

void servo_angle(TIM_HandleTypeDef *htim, uint32_t channel, int step) {
 8002090:	b480      	push	{r7}
 8002092:	b087      	sub	sp, #28
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]

	// 1 step is 0.8 mm
    if (step > 17)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2b11      	cmp	r3, #17
 80020a0:	dd01      	ble.n	80020a6 <servo_angle+0x16>
    	step = 17; // 최대 각도 제한
 80020a2:	2311      	movs	r3, #17
 80020a4:	607b      	str	r3, [r7, #4]

    int pulse_width = 21-step; // 듀티 사이클 계산 (0도에서 180도까지)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f1c3 0315 	rsb	r3, r3, #21
 80020ac:	617b      	str	r3, [r7, #20]
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d104      	bne.n	80020be <servo_angle+0x2e>
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	697a      	ldr	r2, [r7, #20]
 80020ba:	635a      	str	r2, [r3, #52]	; 0x34
}
 80020bc:	e023      	b.n	8002106 <servo_angle+0x76>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	2b04      	cmp	r3, #4
 80020c2:	d104      	bne.n	80020ce <servo_angle+0x3e>
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	6393      	str	r3, [r2, #56]	; 0x38
}
 80020cc:	e01b      	b.n	8002106 <servo_angle+0x76>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	2b08      	cmp	r3, #8
 80020d2:	d104      	bne.n	80020de <servo_angle+0x4e>
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80020dc:	e013      	b.n	8002106 <servo_angle+0x76>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	2b0c      	cmp	r3, #12
 80020e2:	d104      	bne.n	80020ee <servo_angle+0x5e>
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	6413      	str	r3, [r2, #64]	; 0x40
}
 80020ec:	e00b      	b.n	8002106 <servo_angle+0x76>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	2b10      	cmp	r3, #16
 80020f2:	d104      	bne.n	80020fe <servo_angle+0x6e>
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	6593      	str	r3, [r2, #88]	; 0x58
}
 80020fc:	e003      	b.n	8002106 <servo_angle+0x76>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8002106:	bf00      	nop
 8002108:	371c      	adds	r7, #28
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
	...

08002114 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800211a:	4b0f      	ldr	r3, [pc, #60]	; (8002158 <HAL_MspInit+0x44>)
 800211c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211e:	4a0e      	ldr	r2, [pc, #56]	; (8002158 <HAL_MspInit+0x44>)
 8002120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002124:	6413      	str	r3, [r2, #64]	; 0x40
 8002126:	4b0c      	ldr	r3, [pc, #48]	; (8002158 <HAL_MspInit+0x44>)
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212e:	607b      	str	r3, [r7, #4]
 8002130:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002132:	4b09      	ldr	r3, [pc, #36]	; (8002158 <HAL_MspInit+0x44>)
 8002134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002136:	4a08      	ldr	r2, [pc, #32]	; (8002158 <HAL_MspInit+0x44>)
 8002138:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800213c:	6453      	str	r3, [r2, #68]	; 0x44
 800213e:	4b06      	ldr	r3, [pc, #24]	; (8002158 <HAL_MspInit+0x44>)
 8002140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002142:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002146:	603b      	str	r3, [r7, #0]
 8002148:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800214a:	bf00      	nop
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	40023800 	.word	0x40023800

0800215c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002160:	e7fe      	b.n	8002160 <NMI_Handler+0x4>

08002162 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002162:	b480      	push	{r7}
 8002164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002166:	e7fe      	b.n	8002166 <HardFault_Handler+0x4>

08002168 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800216c:	e7fe      	b.n	800216c <MemManage_Handler+0x4>

0800216e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800216e:	b480      	push	{r7}
 8002170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002172:	e7fe      	b.n	8002172 <BusFault_Handler+0x4>

08002174 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002178:	e7fe      	b.n	8002178 <UsageFault_Handler+0x4>

0800217a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800217a:	b480      	push	{r7}
 800217c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800217e:	bf00      	nop
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800218c:	bf00      	nop
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002196:	b480      	push	{r7}
 8002198:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800219a:	bf00      	nop
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021a8:	f000 fb2a 	bl	8002800 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021ac:	bf00      	nop
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80021b4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80021b8:	f001 f8f4 	bl	80033a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80021bc:	bf00      	nop
 80021be:	bd80      	pop	{r7, pc}

080021c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80021c4:	4802      	ldr	r0, [pc, #8]	; (80021d0 <USART1_IRQHandler+0x10>)
 80021c6:	f006 f8ab 	bl	8008320 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80021ca:	bf00      	nop
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	2000069c 	.word	0x2000069c

080021d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80021d8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80021dc:	f001 f8e2 	bl	80033a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80021e0:	bf00      	nop
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80021e8:	4802      	ldr	r0, [pc, #8]	; (80021f4 <TIM7_IRQHandler+0x10>)
 80021ea:	f004 f9e3 	bl	80065b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80021ee:	bf00      	nop
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	20000650 	.word	0x20000650

080021f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  return 1;
 80021fc:	2301      	movs	r3, #1
}
 80021fe:	4618      	mov	r0, r3
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <_kill>:

int _kill(int pid, int sig)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002212:	f00c fbc1 	bl	800e998 <__errno>
 8002216:	4603      	mov	r3, r0
 8002218:	2216      	movs	r2, #22
 800221a:	601a      	str	r2, [r3, #0]
  return -1;
 800221c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002220:	4618      	mov	r0, r3
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <_exit>:

void _exit (int status)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002230:	f04f 31ff 	mov.w	r1, #4294967295
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f7ff ffe7 	bl	8002208 <_kill>
  while (1) {}    /* Make sure we hang here */
 800223a:	e7fe      	b.n	800223a <_exit+0x12>

0800223c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b086      	sub	sp, #24
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002248:	2300      	movs	r3, #0
 800224a:	617b      	str	r3, [r7, #20]
 800224c:	e00a      	b.n	8002264 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800224e:	f3af 8000 	nop.w
 8002252:	4601      	mov	r1, r0
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	1c5a      	adds	r2, r3, #1
 8002258:	60ba      	str	r2, [r7, #8]
 800225a:	b2ca      	uxtb	r2, r1
 800225c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	3301      	adds	r3, #1
 8002262:	617b      	str	r3, [r7, #20]
 8002264:	697a      	ldr	r2, [r7, #20]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	429a      	cmp	r2, r3
 800226a:	dbf0      	blt.n	800224e <_read+0x12>
  }

  return len;
 800226c:	687b      	ldr	r3, [r7, #4]
}
 800226e:	4618      	mov	r0, r3
 8002270:	3718      	adds	r7, #24
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b086      	sub	sp, #24
 800227a:	af00      	add	r7, sp, #0
 800227c:	60f8      	str	r0, [r7, #12]
 800227e:	60b9      	str	r1, [r7, #8]
 8002280:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002282:	2300      	movs	r3, #0
 8002284:	617b      	str	r3, [r7, #20]
 8002286:	e009      	b.n	800229c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	1c5a      	adds	r2, r3, #1
 800228c:	60ba      	str	r2, [r7, #8]
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	4618      	mov	r0, r3
 8002292:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	3301      	adds	r3, #1
 800229a:	617b      	str	r3, [r7, #20]
 800229c:	697a      	ldr	r2, [r7, #20]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	dbf1      	blt.n	8002288 <_write+0x12>
  }
  return len;
 80022a4:	687b      	ldr	r3, [r7, #4]
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3718      	adds	r7, #24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <_close>:

int _close(int file)
{
 80022ae:	b480      	push	{r7}
 80022b0:	b083      	sub	sp, #12
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr

080022c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022c6:	b480      	push	{r7}
 80022c8:	b083      	sub	sp, #12
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
 80022ce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022d6:	605a      	str	r2, [r3, #4]
  return 0;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <_isatty>:

int _isatty(int file)
{
 80022e6:	b480      	push	{r7}
 80022e8:	b083      	sub	sp, #12
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022ee:	2301      	movs	r3, #1
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3714      	adds	r7, #20
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
	...

08002318 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002320:	4a14      	ldr	r2, [pc, #80]	; (8002374 <_sbrk+0x5c>)
 8002322:	4b15      	ldr	r3, [pc, #84]	; (8002378 <_sbrk+0x60>)
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800232c:	4b13      	ldr	r3, [pc, #76]	; (800237c <_sbrk+0x64>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d102      	bne.n	800233a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002334:	4b11      	ldr	r3, [pc, #68]	; (800237c <_sbrk+0x64>)
 8002336:	4a12      	ldr	r2, [pc, #72]	; (8002380 <_sbrk+0x68>)
 8002338:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800233a:	4b10      	ldr	r3, [pc, #64]	; (800237c <_sbrk+0x64>)
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4413      	add	r3, r2
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	429a      	cmp	r2, r3
 8002346:	d207      	bcs.n	8002358 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002348:	f00c fb26 	bl	800e998 <__errno>
 800234c:	4603      	mov	r3, r0
 800234e:	220c      	movs	r2, #12
 8002350:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002352:	f04f 33ff 	mov.w	r3, #4294967295
 8002356:	e009      	b.n	800236c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002358:	4b08      	ldr	r3, [pc, #32]	; (800237c <_sbrk+0x64>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800235e:	4b07      	ldr	r3, [pc, #28]	; (800237c <_sbrk+0x64>)
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4413      	add	r3, r2
 8002366:	4a05      	ldr	r2, [pc, #20]	; (800237c <_sbrk+0x64>)
 8002368:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800236a:	68fb      	ldr	r3, [r7, #12]
}
 800236c:	4618      	mov	r0, r3
 800236e:	3718      	adds	r7, #24
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	20050000 	.word	0x20050000
 8002378:	00000400 	.word	0x00000400
 800237c:	20000600 	.word	0x20000600
 8002380:	20000778 	.word	0x20000778

08002384 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002388:	4b06      	ldr	r3, [pc, #24]	; (80023a4 <SystemInit+0x20>)
 800238a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238e:	4a05      	ldr	r2, [pc, #20]	; (80023a4 <SystemInit+0x20>)
 8002390:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002394:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002398:	bf00      	nop
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	e000ed00 	.word	0xe000ed00

080023a8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b08e      	sub	sp, #56	; 0x38
 80023ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023b2:	2200      	movs	r2, #0
 80023b4:	601a      	str	r2, [r3, #0]
 80023b6:	605a      	str	r2, [r3, #4]
 80023b8:	609a      	str	r2, [r3, #8]
 80023ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023bc:	f107 031c 	add.w	r3, r7, #28
 80023c0:	2200      	movs	r2, #0
 80023c2:	601a      	str	r2, [r3, #0]
 80023c4:	605a      	str	r2, [r3, #4]
 80023c6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023c8:	463b      	mov	r3, r7
 80023ca:	2200      	movs	r2, #0
 80023cc:	601a      	str	r2, [r3, #0]
 80023ce:	605a      	str	r2, [r3, #4]
 80023d0:	609a      	str	r2, [r3, #8]
 80023d2:	60da      	str	r2, [r3, #12]
 80023d4:	611a      	str	r2, [r3, #16]
 80023d6:	615a      	str	r2, [r3, #20]
 80023d8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80023da:	4b2d      	ldr	r3, [pc, #180]	; (8002490 <MX_TIM2_Init+0xe8>)
 80023dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10800-1;
 80023e2:	4b2b      	ldr	r3, [pc, #172]	; (8002490 <MX_TIM2_Init+0xe8>)
 80023e4:	f642 222f 	movw	r2, #10799	; 0x2a2f
 80023e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023ea:	4b29      	ldr	r3, [pc, #164]	; (8002490 <MX_TIM2_Init+0xe8>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50-1;
 80023f0:	4b27      	ldr	r3, [pc, #156]	; (8002490 <MX_TIM2_Init+0xe8>)
 80023f2:	2231      	movs	r2, #49	; 0x31
 80023f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023f6:	4b26      	ldr	r3, [pc, #152]	; (8002490 <MX_TIM2_Init+0xe8>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023fc:	4b24      	ldr	r3, [pc, #144]	; (8002490 <MX_TIM2_Init+0xe8>)
 80023fe:	2200      	movs	r2, #0
 8002400:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002402:	4823      	ldr	r0, [pc, #140]	; (8002490 <MX_TIM2_Init+0xe8>)
 8002404:	f003 fcc2 	bl	8005d8c <HAL_TIM_Base_Init>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800240e:	f7ff fd2b 	bl	8001e68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002412:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002416:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002418:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800241c:	4619      	mov	r1, r3
 800241e:	481c      	ldr	r0, [pc, #112]	; (8002490 <MX_TIM2_Init+0xe8>)
 8002420:	f004 fc50 	bl	8006cc4 <HAL_TIM_ConfigClockSource>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800242a:	f7ff fd1d 	bl	8001e68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800242e:	4818      	ldr	r0, [pc, #96]	; (8002490 <MX_TIM2_Init+0xe8>)
 8002430:	f003 fdcc 	bl	8005fcc <HAL_TIM_PWM_Init>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800243a:	f7ff fd15 	bl	8001e68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800243e:	2300      	movs	r3, #0
 8002440:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002442:	2300      	movs	r3, #0
 8002444:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002446:	f107 031c 	add.w	r3, r7, #28
 800244a:	4619      	mov	r1, r3
 800244c:	4810      	ldr	r0, [pc, #64]	; (8002490 <MX_TIM2_Init+0xe8>)
 800244e:	f005 fc69 	bl	8007d24 <HAL_TIMEx_MasterConfigSynchronization>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002458:	f7ff fd06 	bl	8001e68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800245c:	2360      	movs	r3, #96	; 0x60
 800245e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002460:	2300      	movs	r3, #0
 8002462:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002464:	2300      	movs	r3, #0
 8002466:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002468:	2300      	movs	r3, #0
 800246a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800246c:	463b      	mov	r3, r7
 800246e:	2200      	movs	r2, #0
 8002470:	4619      	mov	r1, r3
 8002472:	4807      	ldr	r0, [pc, #28]	; (8002490 <MX_TIM2_Init+0xe8>)
 8002474:	f004 f9be 	bl	80067f4 <HAL_TIM_PWM_ConfigChannel>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800247e:	f7ff fcf3 	bl	8001e68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002482:	4803      	ldr	r0, [pc, #12]	; (8002490 <MX_TIM2_Init+0xe8>)
 8002484:	f000 f86e 	bl	8002564 <HAL_TIM_MspPostInit>

}
 8002488:	bf00      	nop
 800248a:	3738      	adds	r7, #56	; 0x38
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	20000604 	.word	0x20000604

08002494 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800249a:	1d3b      	adds	r3, r7, #4
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	605a      	str	r2, [r3, #4]
 80024a2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80024a4:	4b14      	ldr	r3, [pc, #80]	; (80024f8 <MX_TIM7_Init+0x64>)
 80024a6:	4a15      	ldr	r2, [pc, #84]	; (80024fc <MX_TIM7_Init+0x68>)
 80024a8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10800-1;
 80024aa:	4b13      	ldr	r3, [pc, #76]	; (80024f8 <MX_TIM7_Init+0x64>)
 80024ac:	f642 222f 	movw	r2, #10799	; 0x2a2f
 80024b0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024b2:	4b11      	ldr	r3, [pc, #68]	; (80024f8 <MX_TIM7_Init+0x64>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 50-1;
 80024b8:	4b0f      	ldr	r3, [pc, #60]	; (80024f8 <MX_TIM7_Init+0x64>)
 80024ba:	2231      	movs	r2, #49	; 0x31
 80024bc:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024be:	4b0e      	ldr	r3, [pc, #56]	; (80024f8 <MX_TIM7_Init+0x64>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80024c4:	480c      	ldr	r0, [pc, #48]	; (80024f8 <MX_TIM7_Init+0x64>)
 80024c6:	f003 fc61 	bl	8005d8c <HAL_TIM_Base_Init>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80024d0:	f7ff fcca 	bl	8001e68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024d4:	2300      	movs	r3, #0
 80024d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024d8:	2300      	movs	r3, #0
 80024da:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80024dc:	1d3b      	adds	r3, r7, #4
 80024de:	4619      	mov	r1, r3
 80024e0:	4805      	ldr	r0, [pc, #20]	; (80024f8 <MX_TIM7_Init+0x64>)
 80024e2:	f005 fc1f 	bl	8007d24 <HAL_TIMEx_MasterConfigSynchronization>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80024ec:	f7ff fcbc 	bl	8001e68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80024f0:	bf00      	nop
 80024f2:	3710      	adds	r7, #16
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	20000650 	.word	0x20000650
 80024fc:	40001400 	.word	0x40001400

08002500 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002510:	d10c      	bne.n	800252c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002512:	4b12      	ldr	r3, [pc, #72]	; (800255c <HAL_TIM_Base_MspInit+0x5c>)
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	4a11      	ldr	r2, [pc, #68]	; (800255c <HAL_TIM_Base_MspInit+0x5c>)
 8002518:	f043 0301 	orr.w	r3, r3, #1
 800251c:	6413      	str	r3, [r2, #64]	; 0x40
 800251e:	4b0f      	ldr	r3, [pc, #60]	; (800255c <HAL_TIM_Base_MspInit+0x5c>)
 8002520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	60fb      	str	r3, [r7, #12]
 8002528:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800252a:	e010      	b.n	800254e <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM7)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a0b      	ldr	r2, [pc, #44]	; (8002560 <HAL_TIM_Base_MspInit+0x60>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d10b      	bne.n	800254e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002536:	4b09      	ldr	r3, [pc, #36]	; (800255c <HAL_TIM_Base_MspInit+0x5c>)
 8002538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253a:	4a08      	ldr	r2, [pc, #32]	; (800255c <HAL_TIM_Base_MspInit+0x5c>)
 800253c:	f043 0320 	orr.w	r3, r3, #32
 8002540:	6413      	str	r3, [r2, #64]	; 0x40
 8002542:	4b06      	ldr	r3, [pc, #24]	; (800255c <HAL_TIM_Base_MspInit+0x5c>)
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	f003 0320 	and.w	r3, r3, #32
 800254a:	60bb      	str	r3, [r7, #8]
 800254c:	68bb      	ldr	r3, [r7, #8]
}
 800254e:	bf00      	nop
 8002550:	3714      	adds	r7, #20
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	40023800 	.word	0x40023800
 8002560:	40001400 	.word	0x40001400

08002564 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b088      	sub	sp, #32
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800256c:	f107 030c 	add.w	r3, r7, #12
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	605a      	str	r2, [r3, #4]
 8002576:	609a      	str	r2, [r3, #8]
 8002578:	60da      	str	r2, [r3, #12]
 800257a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002584:	d11c      	bne.n	80025c0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002586:	4b10      	ldr	r3, [pc, #64]	; (80025c8 <HAL_TIM_MspPostInit+0x64>)
 8002588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258a:	4a0f      	ldr	r2, [pc, #60]	; (80025c8 <HAL_TIM_MspPostInit+0x64>)
 800258c:	f043 0301 	orr.w	r3, r3, #1
 8002590:	6313      	str	r3, [r2, #48]	; 0x30
 8002592:	4b0d      	ldr	r3, [pc, #52]	; (80025c8 <HAL_TIM_MspPostInit+0x64>)
 8002594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	60bb      	str	r3, [r7, #8]
 800259c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800259e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025a2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a4:	2302      	movs	r3, #2
 80025a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a8:	2300      	movs	r3, #0
 80025aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ac:	2300      	movs	r3, #0
 80025ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80025b0:	2301      	movs	r3, #1
 80025b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025b4:	f107 030c 	add.w	r3, r7, #12
 80025b8:	4619      	mov	r1, r3
 80025ba:	4804      	ldr	r0, [pc, #16]	; (80025cc <HAL_TIM_MspPostInit+0x68>)
 80025bc:	f000 fb36 	bl	8002c2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80025c0:	bf00      	nop
 80025c2:	3720      	adds	r7, #32
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40023800 	.word	0x40023800
 80025cc:	40020000 	.word	0x40020000

080025d0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80025d4:	4b14      	ldr	r3, [pc, #80]	; (8002628 <MX_USART1_UART_Init+0x58>)
 80025d6:	4a15      	ldr	r2, [pc, #84]	; (800262c <MX_USART1_UART_Init+0x5c>)
 80025d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80025da:	4b13      	ldr	r3, [pc, #76]	; (8002628 <MX_USART1_UART_Init+0x58>)
 80025dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80025e2:	4b11      	ldr	r3, [pc, #68]	; (8002628 <MX_USART1_UART_Init+0x58>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80025e8:	4b0f      	ldr	r3, [pc, #60]	; (8002628 <MX_USART1_UART_Init+0x58>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80025ee:	4b0e      	ldr	r3, [pc, #56]	; (8002628 <MX_USART1_UART_Init+0x58>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80025f4:	4b0c      	ldr	r3, [pc, #48]	; (8002628 <MX_USART1_UART_Init+0x58>)
 80025f6:	220c      	movs	r2, #12
 80025f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025fa:	4b0b      	ldr	r3, [pc, #44]	; (8002628 <MX_USART1_UART_Init+0x58>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002600:	4b09      	ldr	r3, [pc, #36]	; (8002628 <MX_USART1_UART_Init+0x58>)
 8002602:	2200      	movs	r2, #0
 8002604:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002606:	4b08      	ldr	r3, [pc, #32]	; (8002628 <MX_USART1_UART_Init+0x58>)
 8002608:	2200      	movs	r2, #0
 800260a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800260c:	4b06      	ldr	r3, [pc, #24]	; (8002628 <MX_USART1_UART_Init+0x58>)
 800260e:	2200      	movs	r2, #0
 8002610:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002612:	4805      	ldr	r0, [pc, #20]	; (8002628 <MX_USART1_UART_Init+0x58>)
 8002614:	f005 fcfc 	bl	8008010 <HAL_UART_Init>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800261e:	f7ff fc23 	bl	8001e68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002622:	bf00      	nop
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	2000069c 	.word	0x2000069c
 800262c:	40011000 	.word	0x40011000

08002630 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b0ac      	sub	sp, #176	; 0xb0
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002638:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	605a      	str	r2, [r3, #4]
 8002642:	609a      	str	r2, [r3, #8]
 8002644:	60da      	str	r2, [r3, #12]
 8002646:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002648:	f107 0318 	add.w	r3, r7, #24
 800264c:	2284      	movs	r2, #132	; 0x84
 800264e:	2100      	movs	r1, #0
 8002650:	4618      	mov	r0, r3
 8002652:	f00c f9d9 	bl	800ea08 <memset>
  if(uartHandle->Instance==USART1)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a32      	ldr	r2, [pc, #200]	; (8002724 <HAL_UART_MspInit+0xf4>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d15c      	bne.n	800271a <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002660:	2340      	movs	r3, #64	; 0x40
 8002662:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002664:	2300      	movs	r3, #0
 8002666:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002668:	f107 0318 	add.w	r3, r7, #24
 800266c:	4618      	mov	r0, r3
 800266e:	f002 fba9 	bl	8004dc4 <HAL_RCCEx_PeriphCLKConfig>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002678:	f7ff fbf6 	bl	8001e68 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800267c:	4b2a      	ldr	r3, [pc, #168]	; (8002728 <HAL_UART_MspInit+0xf8>)
 800267e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002680:	4a29      	ldr	r2, [pc, #164]	; (8002728 <HAL_UART_MspInit+0xf8>)
 8002682:	f043 0310 	orr.w	r3, r3, #16
 8002686:	6453      	str	r3, [r2, #68]	; 0x44
 8002688:	4b27      	ldr	r3, [pc, #156]	; (8002728 <HAL_UART_MspInit+0xf8>)
 800268a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268c:	f003 0310 	and.w	r3, r3, #16
 8002690:	617b      	str	r3, [r7, #20]
 8002692:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002694:	4b24      	ldr	r3, [pc, #144]	; (8002728 <HAL_UART_MspInit+0xf8>)
 8002696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002698:	4a23      	ldr	r2, [pc, #140]	; (8002728 <HAL_UART_MspInit+0xf8>)
 800269a:	f043 0302 	orr.w	r3, r3, #2
 800269e:	6313      	str	r3, [r2, #48]	; 0x30
 80026a0:	4b21      	ldr	r3, [pc, #132]	; (8002728 <HAL_UART_MspInit+0xf8>)
 80026a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	613b      	str	r3, [r7, #16]
 80026aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ac:	4b1e      	ldr	r3, [pc, #120]	; (8002728 <HAL_UART_MspInit+0xf8>)
 80026ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b0:	4a1d      	ldr	r2, [pc, #116]	; (8002728 <HAL_UART_MspInit+0xf8>)
 80026b2:	f043 0301 	orr.w	r3, r3, #1
 80026b6:	6313      	str	r3, [r2, #48]	; 0x30
 80026b8:	4b1b      	ldr	r3, [pc, #108]	; (8002728 <HAL_UART_MspInit+0xf8>)
 80026ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	60fb      	str	r3, [r7, #12]
 80026c2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80026c4:	2380      	movs	r3, #128	; 0x80
 80026c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ca:	2302      	movs	r3, #2
 80026cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d0:	2300      	movs	r3, #0
 80026d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026d6:	2303      	movs	r3, #3
 80026d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80026dc:	2307      	movs	r3, #7
 80026de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026e2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80026e6:	4619      	mov	r1, r3
 80026e8:	4810      	ldr	r0, [pc, #64]	; (800272c <HAL_UART_MspInit+0xfc>)
 80026ea:	f000 fa9f 	bl	8002c2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80026ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f6:	2302      	movs	r3, #2
 80026f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fc:	2300      	movs	r3, #0
 80026fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002702:	2303      	movs	r3, #3
 8002704:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002708:	2307      	movs	r3, #7
 800270a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800270e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002712:	4619      	mov	r1, r3
 8002714:	4806      	ldr	r0, [pc, #24]	; (8002730 <HAL_UART_MspInit+0x100>)
 8002716:	f000 fa89 	bl	8002c2c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800271a:	bf00      	nop
 800271c:	37b0      	adds	r7, #176	; 0xb0
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	40011000 	.word	0x40011000
 8002728:	40023800 	.word	0x40023800
 800272c:	40020400 	.word	0x40020400
 8002730:	40020000 	.word	0x40020000

08002734 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002734:	f8df d034 	ldr.w	sp, [pc, #52]	; 800276c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002738:	480d      	ldr	r0, [pc, #52]	; (8002770 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800273a:	490e      	ldr	r1, [pc, #56]	; (8002774 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800273c:	4a0e      	ldr	r2, [pc, #56]	; (8002778 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800273e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002740:	e002      	b.n	8002748 <LoopCopyDataInit>

08002742 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002742:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002744:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002746:	3304      	adds	r3, #4

08002748 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002748:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800274a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800274c:	d3f9      	bcc.n	8002742 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800274e:	4a0b      	ldr	r2, [pc, #44]	; (800277c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002750:	4c0b      	ldr	r4, [pc, #44]	; (8002780 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002752:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002754:	e001      	b.n	800275a <LoopFillZerobss>

08002756 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002756:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002758:	3204      	adds	r2, #4

0800275a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800275a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800275c:	d3fb      	bcc.n	8002756 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800275e:	f7ff fe11 	bl	8002384 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002762:	f00c f91f 	bl	800e9a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002766:	f7fe fe87 	bl	8001478 <main>
  bx  lr    
 800276a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800276c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002770:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002774:	2000049c 	.word	0x2000049c
  ldr r2, =_sidata
 8002778:	0801435c 	.word	0x0801435c
  ldr r2, =_sbss
 800277c:	2000049c 	.word	0x2000049c
  ldr r4, =_ebss
 8002780:	20000778 	.word	0x20000778

08002784 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002784:	e7fe      	b.n	8002784 <ADC_IRQHandler>

08002786 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800278a:	2003      	movs	r0, #3
 800278c:	f000 f94c 	bl	8002a28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002790:	200f      	movs	r0, #15
 8002792:	f000 f805 	bl	80027a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002796:	f7ff fcbd 	bl	8002114 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	bd80      	pop	{r7, pc}

080027a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027a8:	4b12      	ldr	r3, [pc, #72]	; (80027f4 <HAL_InitTick+0x54>)
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	4b12      	ldr	r3, [pc, #72]	; (80027f8 <HAL_InitTick+0x58>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	4619      	mov	r1, r3
 80027b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80027ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80027be:	4618      	mov	r0, r3
 80027c0:	f000 f996 	bl	8002af0 <HAL_SYSTICK_Config>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e00e      	b.n	80027ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2b0f      	cmp	r3, #15
 80027d2:	d80a      	bhi.n	80027ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027d4:	2200      	movs	r2, #0
 80027d6:	6879      	ldr	r1, [r7, #4]
 80027d8:	f04f 30ff 	mov.w	r0, #4294967295
 80027dc:	f000 f944 	bl	8002a68 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027e0:	4a06      	ldr	r2, [pc, #24]	; (80027fc <HAL_InitTick+0x5c>)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027e6:	2300      	movs	r3, #0
 80027e8:	e000      	b.n	80027ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3708      	adds	r7, #8
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	20000000 	.word	0x20000000
 80027f8:	20000008 	.word	0x20000008
 80027fc:	20000004 	.word	0x20000004

08002800 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002804:	4b06      	ldr	r3, [pc, #24]	; (8002820 <HAL_IncTick+0x20>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	461a      	mov	r2, r3
 800280a:	4b06      	ldr	r3, [pc, #24]	; (8002824 <HAL_IncTick+0x24>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4413      	add	r3, r2
 8002810:	4a04      	ldr	r2, [pc, #16]	; (8002824 <HAL_IncTick+0x24>)
 8002812:	6013      	str	r3, [r2, #0]
}
 8002814:	bf00      	nop
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	20000008 	.word	0x20000008
 8002824:	20000724 	.word	0x20000724

08002828 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  return uwTick;
 800282c:	4b03      	ldr	r3, [pc, #12]	; (800283c <HAL_GetTick+0x14>)
 800282e:	681b      	ldr	r3, [r3, #0]
}
 8002830:	4618      	mov	r0, r3
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	20000724 	.word	0x20000724

08002840 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002848:	f7ff ffee 	bl	8002828 <HAL_GetTick>
 800284c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002858:	d005      	beq.n	8002866 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800285a:	4b0a      	ldr	r3, [pc, #40]	; (8002884 <HAL_Delay+0x44>)
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	461a      	mov	r2, r3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	4413      	add	r3, r2
 8002864:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002866:	bf00      	nop
 8002868:	f7ff ffde 	bl	8002828 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	429a      	cmp	r2, r3
 8002876:	d8f7      	bhi.n	8002868 <HAL_Delay+0x28>
  {
  }
}
 8002878:	bf00      	nop
 800287a:	bf00      	nop
 800287c:	3710      	adds	r7, #16
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	20000008 	.word	0x20000008

08002888 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f003 0307 	and.w	r3, r3, #7
 8002896:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002898:	4b0b      	ldr	r3, [pc, #44]	; (80028c8 <__NVIC_SetPriorityGrouping+0x40>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800289e:	68ba      	ldr	r2, [r7, #8]
 80028a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028a4:	4013      	ands	r3, r2
 80028a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80028b0:	4b06      	ldr	r3, [pc, #24]	; (80028cc <__NVIC_SetPriorityGrouping+0x44>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028b6:	4a04      	ldr	r2, [pc, #16]	; (80028c8 <__NVIC_SetPriorityGrouping+0x40>)
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	60d3      	str	r3, [r2, #12]
}
 80028bc:	bf00      	nop
 80028be:	3714      	adds	r7, #20
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr
 80028c8:	e000ed00 	.word	0xe000ed00
 80028cc:	05fa0000 	.word	0x05fa0000

080028d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028d4:	4b04      	ldr	r3, [pc, #16]	; (80028e8 <__NVIC_GetPriorityGrouping+0x18>)
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	0a1b      	lsrs	r3, r3, #8
 80028da:	f003 0307 	and.w	r3, r3, #7
}
 80028de:	4618      	mov	r0, r3
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr
 80028e8:	e000ed00 	.word	0xe000ed00

080028ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	4603      	mov	r3, r0
 80028f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	db0b      	blt.n	8002916 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028fe:	79fb      	ldrb	r3, [r7, #7]
 8002900:	f003 021f 	and.w	r2, r3, #31
 8002904:	4907      	ldr	r1, [pc, #28]	; (8002924 <__NVIC_EnableIRQ+0x38>)
 8002906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290a:	095b      	lsrs	r3, r3, #5
 800290c:	2001      	movs	r0, #1
 800290e:	fa00 f202 	lsl.w	r2, r0, r2
 8002912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002916:	bf00      	nop
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	e000e100 	.word	0xe000e100

08002928 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	4603      	mov	r3, r0
 8002930:	6039      	str	r1, [r7, #0]
 8002932:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002938:	2b00      	cmp	r3, #0
 800293a:	db0a      	blt.n	8002952 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	b2da      	uxtb	r2, r3
 8002940:	490c      	ldr	r1, [pc, #48]	; (8002974 <__NVIC_SetPriority+0x4c>)
 8002942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002946:	0112      	lsls	r2, r2, #4
 8002948:	b2d2      	uxtb	r2, r2
 800294a:	440b      	add	r3, r1
 800294c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002950:	e00a      	b.n	8002968 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	b2da      	uxtb	r2, r3
 8002956:	4908      	ldr	r1, [pc, #32]	; (8002978 <__NVIC_SetPriority+0x50>)
 8002958:	79fb      	ldrb	r3, [r7, #7]
 800295a:	f003 030f 	and.w	r3, r3, #15
 800295e:	3b04      	subs	r3, #4
 8002960:	0112      	lsls	r2, r2, #4
 8002962:	b2d2      	uxtb	r2, r2
 8002964:	440b      	add	r3, r1
 8002966:	761a      	strb	r2, [r3, #24]
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr
 8002974:	e000e100 	.word	0xe000e100
 8002978:	e000ed00 	.word	0xe000ed00

0800297c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800297c:	b480      	push	{r7}
 800297e:	b089      	sub	sp, #36	; 0x24
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f003 0307 	and.w	r3, r3, #7
 800298e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	f1c3 0307 	rsb	r3, r3, #7
 8002996:	2b04      	cmp	r3, #4
 8002998:	bf28      	it	cs
 800299a:	2304      	movcs	r3, #4
 800299c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	3304      	adds	r3, #4
 80029a2:	2b06      	cmp	r3, #6
 80029a4:	d902      	bls.n	80029ac <NVIC_EncodePriority+0x30>
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	3b03      	subs	r3, #3
 80029aa:	e000      	b.n	80029ae <NVIC_EncodePriority+0x32>
 80029ac:	2300      	movs	r3, #0
 80029ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029b0:	f04f 32ff 	mov.w	r2, #4294967295
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ba:	43da      	mvns	r2, r3
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	401a      	ands	r2, r3
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029c4:	f04f 31ff 	mov.w	r1, #4294967295
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	fa01 f303 	lsl.w	r3, r1, r3
 80029ce:	43d9      	mvns	r1, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029d4:	4313      	orrs	r3, r2
         );
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3724      	adds	r7, #36	; 0x24
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
	...

080029e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3b01      	subs	r3, #1
 80029f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029f4:	d301      	bcc.n	80029fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029f6:	2301      	movs	r3, #1
 80029f8:	e00f      	b.n	8002a1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029fa:	4a0a      	ldr	r2, [pc, #40]	; (8002a24 <SysTick_Config+0x40>)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	3b01      	subs	r3, #1
 8002a00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a02:	210f      	movs	r1, #15
 8002a04:	f04f 30ff 	mov.w	r0, #4294967295
 8002a08:	f7ff ff8e 	bl	8002928 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a0c:	4b05      	ldr	r3, [pc, #20]	; (8002a24 <SysTick_Config+0x40>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a12:	4b04      	ldr	r3, [pc, #16]	; (8002a24 <SysTick_Config+0x40>)
 8002a14:	2207      	movs	r2, #7
 8002a16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	e000e010 	.word	0xe000e010

08002a28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2b07      	cmp	r3, #7
 8002a34:	d00f      	beq.n	8002a56 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2b06      	cmp	r3, #6
 8002a3a:	d00c      	beq.n	8002a56 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b05      	cmp	r3, #5
 8002a40:	d009      	beq.n	8002a56 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2b04      	cmp	r3, #4
 8002a46:	d006      	beq.n	8002a56 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2b03      	cmp	r3, #3
 8002a4c:	d003      	beq.n	8002a56 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002a4e:	2191      	movs	r1, #145	; 0x91
 8002a50:	4804      	ldr	r0, [pc, #16]	; (8002a64 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8002a52:	f7ff fa0e 	bl	8001e72 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f7ff ff16 	bl	8002888 <__NVIC_SetPriorityGrouping>
}
 8002a5c:	bf00      	nop
 8002a5e:	3708      	adds	r7, #8
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	08013c60 	.word	0x08013c60

08002a68 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	4603      	mov	r3, r0
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
 8002a74:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a76:	2300      	movs	r3, #0
 8002a78:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2b0f      	cmp	r3, #15
 8002a7e:	d903      	bls.n	8002a88 <HAL_NVIC_SetPriority+0x20>
 8002a80:	21a9      	movs	r1, #169	; 0xa9
 8002a82:	480e      	ldr	r0, [pc, #56]	; (8002abc <HAL_NVIC_SetPriority+0x54>)
 8002a84:	f7ff f9f5 	bl	8001e72 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	2b0f      	cmp	r3, #15
 8002a8c:	d903      	bls.n	8002a96 <HAL_NVIC_SetPriority+0x2e>
 8002a8e:	21aa      	movs	r1, #170	; 0xaa
 8002a90:	480a      	ldr	r0, [pc, #40]	; (8002abc <HAL_NVIC_SetPriority+0x54>)
 8002a92:	f7ff f9ee 	bl	8001e72 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a96:	f7ff ff1b 	bl	80028d0 <__NVIC_GetPriorityGrouping>
 8002a9a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	68b9      	ldr	r1, [r7, #8]
 8002aa0:	6978      	ldr	r0, [r7, #20]
 8002aa2:	f7ff ff6b 	bl	800297c <NVIC_EncodePriority>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aac:	4611      	mov	r1, r2
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7ff ff3a 	bl	8002928 <__NVIC_SetPriority>
}
 8002ab4:	bf00      	nop
 8002ab6:	3718      	adds	r7, #24
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	08013c60 	.word	0x08013c60

08002ac0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	da03      	bge.n	8002ada <HAL_NVIC_EnableIRQ+0x1a>
 8002ad2:	21bd      	movs	r1, #189	; 0xbd
 8002ad4:	4805      	ldr	r0, [pc, #20]	; (8002aec <HAL_NVIC_EnableIRQ+0x2c>)
 8002ad6:	f7ff f9cc 	bl	8001e72 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7ff ff04 	bl	80028ec <__NVIC_EnableIRQ>
}
 8002ae4:	bf00      	nop
 8002ae6:	3708      	adds	r7, #8
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	08013c60 	.word	0x08013c60

08002af0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f7ff ff73 	bl	80029e4 <SysTick_Config>
 8002afe:	4603      	mov	r3, r0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3708      	adds	r7, #8
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b14:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002b16:	f7ff fe87 	bl	8002828 <HAL_GetTick>
 8002b1a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d008      	beq.n	8002b3a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2280      	movs	r2, #128	; 0x80
 8002b2c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e052      	b.n	8002be0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f022 0216 	bic.w	r2, r2, #22
 8002b48:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	695a      	ldr	r2, [r3, #20]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b58:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d103      	bne.n	8002b6a <HAL_DMA_Abort+0x62>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d007      	beq.n	8002b7a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f022 0208 	bic.w	r2, r2, #8
 8002b78:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f022 0201 	bic.w	r2, r2, #1
 8002b88:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b8a:	e013      	b.n	8002bb4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b8c:	f7ff fe4c 	bl	8002828 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b05      	cmp	r3, #5
 8002b98:	d90c      	bls.n	8002bb4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2220      	movs	r2, #32
 8002b9e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2203      	movs	r2, #3
 8002ba4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e015      	b.n	8002be0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1e4      	bne.n	8002b8c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc6:	223f      	movs	r2, #63	; 0x3f
 8002bc8:	409a      	lsls	r2, r3
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3710      	adds	r7, #16
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d004      	beq.n	8002c06 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2280      	movs	r2, #128	; 0x80
 8002c00:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e00c      	b.n	8002c20 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2205      	movs	r2, #5
 8002c0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f022 0201 	bic.w	r2, r2, #1
 8002c1c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b088      	sub	sp, #32
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002c36:	2300      	movs	r3, #0
 8002c38:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002c42:	2300      	movs	r3, #0
 8002c44:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a3a      	ldr	r2, [pc, #232]	; (8002d34 <HAL_GPIO_Init+0x108>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d02b      	beq.n	8002ca6 <HAL_GPIO_Init+0x7a>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a39      	ldr	r2, [pc, #228]	; (8002d38 <HAL_GPIO_Init+0x10c>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d027      	beq.n	8002ca6 <HAL_GPIO_Init+0x7a>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a38      	ldr	r2, [pc, #224]	; (8002d3c <HAL_GPIO_Init+0x110>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d023      	beq.n	8002ca6 <HAL_GPIO_Init+0x7a>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a37      	ldr	r2, [pc, #220]	; (8002d40 <HAL_GPIO_Init+0x114>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d01f      	beq.n	8002ca6 <HAL_GPIO_Init+0x7a>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a36      	ldr	r2, [pc, #216]	; (8002d44 <HAL_GPIO_Init+0x118>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d01b      	beq.n	8002ca6 <HAL_GPIO_Init+0x7a>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a35      	ldr	r2, [pc, #212]	; (8002d48 <HAL_GPIO_Init+0x11c>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d017      	beq.n	8002ca6 <HAL_GPIO_Init+0x7a>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a34      	ldr	r2, [pc, #208]	; (8002d4c <HAL_GPIO_Init+0x120>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d013      	beq.n	8002ca6 <HAL_GPIO_Init+0x7a>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a33      	ldr	r2, [pc, #204]	; (8002d50 <HAL_GPIO_Init+0x124>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d00f      	beq.n	8002ca6 <HAL_GPIO_Init+0x7a>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a32      	ldr	r2, [pc, #200]	; (8002d54 <HAL_GPIO_Init+0x128>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d00b      	beq.n	8002ca6 <HAL_GPIO_Init+0x7a>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a31      	ldr	r2, [pc, #196]	; (8002d58 <HAL_GPIO_Init+0x12c>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d007      	beq.n	8002ca6 <HAL_GPIO_Init+0x7a>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a30      	ldr	r2, [pc, #192]	; (8002d5c <HAL_GPIO_Init+0x130>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d003      	beq.n	8002ca6 <HAL_GPIO_Init+0x7a>
 8002c9e:	21aa      	movs	r1, #170	; 0xaa
 8002ca0:	482f      	ldr	r0, [pc, #188]	; (8002d60 <HAL_GPIO_Init+0x134>)
 8002ca2:	f7ff f8e6 	bl	8001e72 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d103      	bne.n	8002cb8 <HAL_GPIO_Init+0x8c>
 8002cb0:	21ab      	movs	r1, #171	; 0xab
 8002cb2:	482b      	ldr	r0, [pc, #172]	; (8002d60 <HAL_GPIO_Init+0x134>)
 8002cb4:	f7ff f8dd 	bl	8001e72 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d035      	beq.n	8002d2c <HAL_GPIO_Init+0x100>
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d031      	beq.n	8002d2c <HAL_GPIO_Init+0x100>
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	2b11      	cmp	r3, #17
 8002cce:	d02d      	beq.n	8002d2c <HAL_GPIO_Init+0x100>
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d029      	beq.n	8002d2c <HAL_GPIO_Init+0x100>
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	2b12      	cmp	r3, #18
 8002cde:	d025      	beq.n	8002d2c <HAL_GPIO_Init+0x100>
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8002ce8:	d020      	beq.n	8002d2c <HAL_GPIO_Init+0x100>
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002cf2:	d01b      	beq.n	8002d2c <HAL_GPIO_Init+0x100>
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8002cfc:	d016      	beq.n	8002d2c <HAL_GPIO_Init+0x100>
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8002d06:	d011      	beq.n	8002d2c <HAL_GPIO_Init+0x100>
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8002d10:	d00c      	beq.n	8002d2c <HAL_GPIO_Init+0x100>
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8002d1a:	d007      	beq.n	8002d2c <HAL_GPIO_Init+0x100>
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	2b03      	cmp	r3, #3
 8002d22:	d003      	beq.n	8002d2c <HAL_GPIO_Init+0x100>
 8002d24:	21ac      	movs	r1, #172	; 0xac
 8002d26:	480e      	ldr	r0, [pc, #56]	; (8002d60 <HAL_GPIO_Init+0x134>)
 8002d28:	f7ff f8a3 	bl	8001e72 <assert_failed>

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	61fb      	str	r3, [r7, #28]
 8002d30:	e2c7      	b.n	80032c2 <HAL_GPIO_Init+0x696>
 8002d32:	bf00      	nop
 8002d34:	40020000 	.word	0x40020000
 8002d38:	40020400 	.word	0x40020400
 8002d3c:	40020800 	.word	0x40020800
 8002d40:	40020c00 	.word	0x40020c00
 8002d44:	40021000 	.word	0x40021000
 8002d48:	40021400 	.word	0x40021400
 8002d4c:	40021800 	.word	0x40021800
 8002d50:	40021c00 	.word	0x40021c00
 8002d54:	40022000 	.word	0x40022000
 8002d58:	40022400 	.word	0x40022400
 8002d5c:	40022800 	.word	0x40022800
 8002d60:	08013c9c 	.word	0x08013c9c
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002d64:	2201      	movs	r2, #1
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	4013      	ands	r3, r2
 8002d76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	f040 829d 	bne.w	80032bc <HAL_GPIO_Init+0x690>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f003 0303 	and.w	r3, r3, #3
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d005      	beq.n	8002d9a <HAL_GPIO_Init+0x16e>
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f003 0303 	and.w	r3, r3, #3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d144      	bne.n	8002e24 <HAL_GPIO_Init+0x1f8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00f      	beq.n	8002dc2 <HAL_GPIO_Init+0x196>
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d00b      	beq.n	8002dc2 <HAL_GPIO_Init+0x196>
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d007      	beq.n	8002dc2 <HAL_GPIO_Init+0x196>
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	2b03      	cmp	r3, #3
 8002db8:	d003      	beq.n	8002dc2 <HAL_GPIO_Init+0x196>
 8002dba:	21bd      	movs	r1, #189	; 0xbd
 8002dbc:	4831      	ldr	r0, [pc, #196]	; (8002e84 <HAL_GPIO_Init+0x258>)
 8002dbe:	f7ff f858 	bl	8001e72 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	2203      	movs	r2, #3
 8002dce:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd2:	43db      	mvns	r3, r3
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	68da      	ldr	r2, [r3, #12]
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	fa02 f303 	lsl.w	r3, r2, r3
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002df8:	2201      	movs	r2, #1
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	43db      	mvns	r3, r3
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	4013      	ands	r3, r2
 8002e06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	091b      	lsrs	r3, r3, #4
 8002e0e:	f003 0201 	and.w	r2, r3, #1
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f003 0303 	and.w	r3, r3, #3
 8002e2c:	2b03      	cmp	r3, #3
 8002e2e:	d02b      	beq.n	8002e88 <HAL_GPIO_Init+0x25c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00b      	beq.n	8002e50 <HAL_GPIO_Init+0x224>
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d007      	beq.n	8002e50 <HAL_GPIO_Init+0x224>
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d003      	beq.n	8002e50 <HAL_GPIO_Init+0x224>
 8002e48:	21ce      	movs	r1, #206	; 0xce
 8002e4a:	480e      	ldr	r0, [pc, #56]	; (8002e84 <HAL_GPIO_Init+0x258>)
 8002e4c:	f7ff f811 	bl	8001e72 <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	2203      	movs	r2, #3
 8002e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e60:	43db      	mvns	r3, r3
 8002e62:	69ba      	ldr	r2, [r7, #24]
 8002e64:	4013      	ands	r3, r2
 8002e66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	689a      	ldr	r2, [r3, #8]
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	60da      	str	r2, [r3, #12]
 8002e80:	e002      	b.n	8002e88 <HAL_GPIO_Init+0x25c>
 8002e82:	bf00      	nop
 8002e84:	08013c9c 	.word	0x08013c9c
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f003 0303 	and.w	r3, r3, #3
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	f040 8134 	bne.w	80030fe <HAL_GPIO_Init+0x4d2>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	f000 810b 	beq.w	80030b6 <HAL_GPIO_Init+0x48a>
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	f000 8106 	beq.w	80030b6 <HAL_GPIO_Init+0x48a>
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	f000 8101 	beq.w	80030b6 <HAL_GPIO_Init+0x48a>
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f000 80fc 	beq.w	80030b6 <HAL_GPIO_Init+0x48a>
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f000 80f7 	beq.w	80030b6 <HAL_GPIO_Init+0x48a>
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	f000 80f2 	beq.w	80030b6 <HAL_GPIO_Init+0x48a>
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	f000 80ed 	beq.w	80030b6 <HAL_GPIO_Init+0x48a>
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	f000 80e8 	beq.w	80030b6 <HAL_GPIO_Init+0x48a>
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	f000 80e3 	beq.w	80030b6 <HAL_GPIO_Init+0x48a>
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	691b      	ldr	r3, [r3, #16]
 8002ef4:	2b03      	cmp	r3, #3
 8002ef6:	f000 80de 	beq.w	80030b6 <HAL_GPIO_Init+0x48a>
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	2b03      	cmp	r3, #3
 8002f00:	f000 80d9 	beq.w	80030b6 <HAL_GPIO_Init+0x48a>
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	2b03      	cmp	r3, #3
 8002f0a:	f000 80d4 	beq.w	80030b6 <HAL_GPIO_Init+0x48a>
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	2b03      	cmp	r3, #3
 8002f14:	f000 80cf 	beq.w	80030b6 <HAL_GPIO_Init+0x48a>
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	691b      	ldr	r3, [r3, #16]
 8002f1c:	2b03      	cmp	r3, #3
 8002f1e:	f000 80ca 	beq.w	80030b6 <HAL_GPIO_Init+0x48a>
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	2b03      	cmp	r3, #3
 8002f28:	f000 80c5 	beq.w	80030b6 <HAL_GPIO_Init+0x48a>
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	691b      	ldr	r3, [r3, #16]
 8002f30:	2b04      	cmp	r3, #4
 8002f32:	f000 80c0 	beq.w	80030b6 <HAL_GPIO_Init+0x48a>
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	2b04      	cmp	r3, #4
 8002f3c:	f000 80bb 	beq.w	80030b6 <HAL_GPIO_Init+0x48a>
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	691b      	ldr	r3, [r3, #16]
 8002f44:	2b04      	cmp	r3, #4
 8002f46:	f000 80b6 	beq.w	80030b6 <HAL_GPIO_Init+0x48a>
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	2b04      	cmp	r3, #4
 8002f50:	f000 80b1 	beq.w	80030b6 <HAL_GPIO_Init+0x48a>
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	2b04      	cmp	r3, #4
 8002f5a:	f000 80ac 	beq.w	80030b6 <HAL_GPIO_Init+0x48a>
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	2b05      	cmp	r3, #5
 8002f64:	f000 80a7 	beq.w	80030b6 <HAL_GPIO_Init+0x48a>
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	2b05      	cmp	r3, #5
 8002f6e:	f000 80a2 	beq.w	80030b6 <HAL_GPIO_Init+0x48a>
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	2b05      	cmp	r3, #5
 8002f78:	f000 809d 	beq.w	80030b6 <HAL_GPIO_Init+0x48a>
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	2b05      	cmp	r3, #5
 8002f82:	f000 8098 	beq.w	80030b6 <HAL_GPIO_Init+0x48a>
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	2b05      	cmp	r3, #5
 8002f8c:	f000 8093 	beq.w	80030b6 <HAL_GPIO_Init+0x48a>
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	2b05      	cmp	r3, #5
 8002f96:	f000 808e 	beq.w	80030b6 <HAL_GPIO_Init+0x48a>
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	2b06      	cmp	r3, #6
 8002fa0:	f000 8089 	beq.w	80030b6 <HAL_GPIO_Init+0x48a>
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	2b06      	cmp	r3, #6
 8002faa:	f000 8084 	beq.w	80030b6 <HAL_GPIO_Init+0x48a>
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	2b07      	cmp	r3, #7
 8002fb4:	d07f      	beq.n	80030b6 <HAL_GPIO_Init+0x48a>
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	2b07      	cmp	r3, #7
 8002fbc:	d07b      	beq.n	80030b6 <HAL_GPIO_Init+0x48a>
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	2b07      	cmp	r3, #7
 8002fc4:	d077      	beq.n	80030b6 <HAL_GPIO_Init+0x48a>
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	2b07      	cmp	r3, #7
 8002fcc:	d073      	beq.n	80030b6 <HAL_GPIO_Init+0x48a>
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	2b07      	cmp	r3, #7
 8002fd4:	d06f      	beq.n	80030b6 <HAL_GPIO_Init+0x48a>
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	2b07      	cmp	r3, #7
 8002fdc:	d06b      	beq.n	80030b6 <HAL_GPIO_Init+0x48a>
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	2b07      	cmp	r3, #7
 8002fe4:	d067      	beq.n	80030b6 <HAL_GPIO_Init+0x48a>
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	2b08      	cmp	r3, #8
 8002fec:	d063      	beq.n	80030b6 <HAL_GPIO_Init+0x48a>
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	2b08      	cmp	r3, #8
 8002ff4:	d05f      	beq.n	80030b6 <HAL_GPIO_Init+0x48a>
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	2b08      	cmp	r3, #8
 8002ffc:	d05b      	beq.n	80030b6 <HAL_GPIO_Init+0x48a>
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	2b08      	cmp	r3, #8
 8003004:	d057      	beq.n	80030b6 <HAL_GPIO_Init+0x48a>
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	2b08      	cmp	r3, #8
 800300c:	d053      	beq.n	80030b6 <HAL_GPIO_Init+0x48a>
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	2b08      	cmp	r3, #8
 8003014:	d04f      	beq.n	80030b6 <HAL_GPIO_Init+0x48a>
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	2b08      	cmp	r3, #8
 800301c:	d04b      	beq.n	80030b6 <HAL_GPIO_Init+0x48a>
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	2b09      	cmp	r3, #9
 8003024:	d047      	beq.n	80030b6 <HAL_GPIO_Init+0x48a>
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	2b09      	cmp	r3, #9
 800302c:	d043      	beq.n	80030b6 <HAL_GPIO_Init+0x48a>
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	2b09      	cmp	r3, #9
 8003034:	d03f      	beq.n	80030b6 <HAL_GPIO_Init+0x48a>
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	2b09      	cmp	r3, #9
 800303c:	d03b      	beq.n	80030b6 <HAL_GPIO_Init+0x48a>
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	2b09      	cmp	r3, #9
 8003044:	d037      	beq.n	80030b6 <HAL_GPIO_Init+0x48a>
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	2b09      	cmp	r3, #9
 800304c:	d033      	beq.n	80030b6 <HAL_GPIO_Init+0x48a>
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	2b09      	cmp	r3, #9
 8003054:	d02f      	beq.n	80030b6 <HAL_GPIO_Init+0x48a>
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	2b0a      	cmp	r3, #10
 800305c:	d02b      	beq.n	80030b6 <HAL_GPIO_Init+0x48a>
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	2b0a      	cmp	r3, #10
 8003064:	d027      	beq.n	80030b6 <HAL_GPIO_Init+0x48a>
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	2b0a      	cmp	r3, #10
 800306c:	d023      	beq.n	80030b6 <HAL_GPIO_Init+0x48a>
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	2b0a      	cmp	r3, #10
 8003074:	d01f      	beq.n	80030b6 <HAL_GPIO_Init+0x48a>
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	2b0b      	cmp	r3, #11
 800307c:	d01b      	beq.n	80030b6 <HAL_GPIO_Init+0x48a>
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	2b0c      	cmp	r3, #12
 8003084:	d017      	beq.n	80030b6 <HAL_GPIO_Init+0x48a>
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	2b0c      	cmp	r3, #12
 800308c:	d013      	beq.n	80030b6 <HAL_GPIO_Init+0x48a>
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	2b0c      	cmp	r3, #12
 8003094:	d00f      	beq.n	80030b6 <HAL_GPIO_Init+0x48a>
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	2b0f      	cmp	r3, #15
 800309c:	d00b      	beq.n	80030b6 <HAL_GPIO_Init+0x48a>
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	2b0d      	cmp	r3, #13
 80030a4:	d007      	beq.n	80030b6 <HAL_GPIO_Init+0x48a>
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	2b0e      	cmp	r3, #14
 80030ac:	d003      	beq.n	80030b6 <HAL_GPIO_Init+0x48a>
 80030ae:	21db      	movs	r1, #219	; 0xdb
 80030b0:	4888      	ldr	r0, [pc, #544]	; (80032d4 <HAL_GPIO_Init+0x6a8>)
 80030b2:	f7fe fede 	bl	8001e72 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	08da      	lsrs	r2, r3, #3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	3208      	adds	r2, #8
 80030be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	f003 0307 	and.w	r3, r3, #7
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	220f      	movs	r2, #15
 80030ce:	fa02 f303 	lsl.w	r3, r2, r3
 80030d2:	43db      	mvns	r3, r3
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	4013      	ands	r3, r2
 80030d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	691a      	ldr	r2, [r3, #16]
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	f003 0307 	and.w	r3, r3, #7
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ea:	69ba      	ldr	r2, [r7, #24]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	08da      	lsrs	r2, r3, #3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	3208      	adds	r2, #8
 80030f8:	69b9      	ldr	r1, [r7, #24]
 80030fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	2203      	movs	r2, #3
 800310a:	fa02 f303 	lsl.w	r3, r2, r3
 800310e:	43db      	mvns	r3, r3
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	4013      	ands	r3, r2
 8003114:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f003 0203 	and.w	r2, r3, #3
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	fa02 f303 	lsl.w	r3, r2, r3
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	4313      	orrs	r3, r2
 800312a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800313a:	2b00      	cmp	r3, #0
 800313c:	f000 80be 	beq.w	80032bc <HAL_GPIO_Init+0x690>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003140:	4b65      	ldr	r3, [pc, #404]	; (80032d8 <HAL_GPIO_Init+0x6ac>)
 8003142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003144:	4a64      	ldr	r2, [pc, #400]	; (80032d8 <HAL_GPIO_Init+0x6ac>)
 8003146:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800314a:	6453      	str	r3, [r2, #68]	; 0x44
 800314c:	4b62      	ldr	r3, [pc, #392]	; (80032d8 <HAL_GPIO_Init+0x6ac>)
 800314e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003150:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003154:	60fb      	str	r3, [r7, #12]
 8003156:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003158:	4a60      	ldr	r2, [pc, #384]	; (80032dc <HAL_GPIO_Init+0x6b0>)
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	089b      	lsrs	r3, r3, #2
 800315e:	3302      	adds	r3, #2
 8003160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003164:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	f003 0303 	and.w	r3, r3, #3
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	220f      	movs	r2, #15
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	43db      	mvns	r3, r3
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	4013      	ands	r3, r2
 800317a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4a58      	ldr	r2, [pc, #352]	; (80032e0 <HAL_GPIO_Init+0x6b4>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d037      	beq.n	80031f4 <HAL_GPIO_Init+0x5c8>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a57      	ldr	r2, [pc, #348]	; (80032e4 <HAL_GPIO_Init+0x6b8>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d031      	beq.n	80031f0 <HAL_GPIO_Init+0x5c4>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a56      	ldr	r2, [pc, #344]	; (80032e8 <HAL_GPIO_Init+0x6bc>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d02b      	beq.n	80031ec <HAL_GPIO_Init+0x5c0>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a55      	ldr	r2, [pc, #340]	; (80032ec <HAL_GPIO_Init+0x6c0>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d025      	beq.n	80031e8 <HAL_GPIO_Init+0x5bc>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4a54      	ldr	r2, [pc, #336]	; (80032f0 <HAL_GPIO_Init+0x6c4>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d01f      	beq.n	80031e4 <HAL_GPIO_Init+0x5b8>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a53      	ldr	r2, [pc, #332]	; (80032f4 <HAL_GPIO_Init+0x6c8>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d019      	beq.n	80031e0 <HAL_GPIO_Init+0x5b4>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a52      	ldr	r2, [pc, #328]	; (80032f8 <HAL_GPIO_Init+0x6cc>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d013      	beq.n	80031dc <HAL_GPIO_Init+0x5b0>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4a51      	ldr	r2, [pc, #324]	; (80032fc <HAL_GPIO_Init+0x6d0>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d00d      	beq.n	80031d8 <HAL_GPIO_Init+0x5ac>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a50      	ldr	r2, [pc, #320]	; (8003300 <HAL_GPIO_Init+0x6d4>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d007      	beq.n	80031d4 <HAL_GPIO_Init+0x5a8>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a4f      	ldr	r2, [pc, #316]	; (8003304 <HAL_GPIO_Init+0x6d8>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d101      	bne.n	80031d0 <HAL_GPIO_Init+0x5a4>
 80031cc:	2309      	movs	r3, #9
 80031ce:	e012      	b.n	80031f6 <HAL_GPIO_Init+0x5ca>
 80031d0:	230a      	movs	r3, #10
 80031d2:	e010      	b.n	80031f6 <HAL_GPIO_Init+0x5ca>
 80031d4:	2308      	movs	r3, #8
 80031d6:	e00e      	b.n	80031f6 <HAL_GPIO_Init+0x5ca>
 80031d8:	2307      	movs	r3, #7
 80031da:	e00c      	b.n	80031f6 <HAL_GPIO_Init+0x5ca>
 80031dc:	2306      	movs	r3, #6
 80031de:	e00a      	b.n	80031f6 <HAL_GPIO_Init+0x5ca>
 80031e0:	2305      	movs	r3, #5
 80031e2:	e008      	b.n	80031f6 <HAL_GPIO_Init+0x5ca>
 80031e4:	2304      	movs	r3, #4
 80031e6:	e006      	b.n	80031f6 <HAL_GPIO_Init+0x5ca>
 80031e8:	2303      	movs	r3, #3
 80031ea:	e004      	b.n	80031f6 <HAL_GPIO_Init+0x5ca>
 80031ec:	2302      	movs	r3, #2
 80031ee:	e002      	b.n	80031f6 <HAL_GPIO_Init+0x5ca>
 80031f0:	2301      	movs	r3, #1
 80031f2:	e000      	b.n	80031f6 <HAL_GPIO_Init+0x5ca>
 80031f4:	2300      	movs	r3, #0
 80031f6:	69fa      	ldr	r2, [r7, #28]
 80031f8:	f002 0203 	and.w	r2, r2, #3
 80031fc:	0092      	lsls	r2, r2, #2
 80031fe:	4093      	lsls	r3, r2
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	4313      	orrs	r3, r2
 8003204:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003206:	4935      	ldr	r1, [pc, #212]	; (80032dc <HAL_GPIO_Init+0x6b0>)
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	089b      	lsrs	r3, r3, #2
 800320c:	3302      	adds	r3, #2
 800320e:	69ba      	ldr	r2, [r7, #24]
 8003210:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003214:	4b3c      	ldr	r3, [pc, #240]	; (8003308 <HAL_GPIO_Init+0x6dc>)
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	43db      	mvns	r3, r3
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	4013      	ands	r3, r2
 8003222:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d003      	beq.n	8003238 <HAL_GPIO_Init+0x60c>
        {
          temp |= iocurrent;
 8003230:	69ba      	ldr	r2, [r7, #24]
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	4313      	orrs	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003238:	4a33      	ldr	r2, [pc, #204]	; (8003308 <HAL_GPIO_Init+0x6dc>)
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800323e:	4b32      	ldr	r3, [pc, #200]	; (8003308 <HAL_GPIO_Init+0x6dc>)
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	43db      	mvns	r3, r3
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	4013      	ands	r3, r2
 800324c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d003      	beq.n	8003262 <HAL_GPIO_Init+0x636>
        {
          temp |= iocurrent;
 800325a:	69ba      	ldr	r2, [r7, #24]
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	4313      	orrs	r3, r2
 8003260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003262:	4a29      	ldr	r2, [pc, #164]	; (8003308 <HAL_GPIO_Init+0x6dc>)
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003268:	4b27      	ldr	r3, [pc, #156]	; (8003308 <HAL_GPIO_Init+0x6dc>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	43db      	mvns	r3, r3
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	4013      	ands	r3, r2
 8003276:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d003      	beq.n	800328c <HAL_GPIO_Init+0x660>
        {
          temp |= iocurrent;
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	4313      	orrs	r3, r2
 800328a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800328c:	4a1e      	ldr	r2, [pc, #120]	; (8003308 <HAL_GPIO_Init+0x6dc>)
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003292:	4b1d      	ldr	r3, [pc, #116]	; (8003308 <HAL_GPIO_Init+0x6dc>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	43db      	mvns	r3, r3
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	4013      	ands	r3, r2
 80032a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d003      	beq.n	80032b6 <HAL_GPIO_Init+0x68a>
        {
          temp |= iocurrent;
 80032ae:	69ba      	ldr	r2, [r7, #24]
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032b6:	4a14      	ldr	r2, [pc, #80]	; (8003308 <HAL_GPIO_Init+0x6dc>)
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	3301      	adds	r3, #1
 80032c0:	61fb      	str	r3, [r7, #28]
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	2b0f      	cmp	r3, #15
 80032c6:	f67f ad4d 	bls.w	8002d64 <HAL_GPIO_Init+0x138>
      }
    }
  }
}
 80032ca:	bf00      	nop
 80032cc:	bf00      	nop
 80032ce:	3720      	adds	r7, #32
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	08013c9c 	.word	0x08013c9c
 80032d8:	40023800 	.word	0x40023800
 80032dc:	40013800 	.word	0x40013800
 80032e0:	40020000 	.word	0x40020000
 80032e4:	40020400 	.word	0x40020400
 80032e8:	40020800 	.word	0x40020800
 80032ec:	40020c00 	.word	0x40020c00
 80032f0:	40021000 	.word	0x40021000
 80032f4:	40021400 	.word	0x40021400
 80032f8:	40021800 	.word	0x40021800
 80032fc:	40021c00 	.word	0x40021c00
 8003300:	40022000 	.word	0x40022000
 8003304:	40022400 	.word	0x40022400
 8003308:	40013c00 	.word	0x40013c00

0800330c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	460b      	mov	r3, r1
 8003316:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003318:	887b      	ldrh	r3, [r7, #2]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d104      	bne.n	8003328 <HAL_GPIO_ReadPin+0x1c>
 800331e:	f240 1177 	movw	r1, #375	; 0x177
 8003322:	4809      	ldr	r0, [pc, #36]	; (8003348 <HAL_GPIO_ReadPin+0x3c>)
 8003324:	f7fe fda5 	bl	8001e72 <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	691a      	ldr	r2, [r3, #16]
 800332c:	887b      	ldrh	r3, [r7, #2]
 800332e:	4013      	ands	r3, r2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d002      	beq.n	800333a <HAL_GPIO_ReadPin+0x2e>
  {
    bitstatus = GPIO_PIN_SET;
 8003334:	2301      	movs	r3, #1
 8003336:	73fb      	strb	r3, [r7, #15]
 8003338:	e001      	b.n	800333e <HAL_GPIO_ReadPin+0x32>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800333a:	2300      	movs	r3, #0
 800333c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800333e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003340:	4618      	mov	r0, r3
 8003342:	3710      	adds	r7, #16
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	08013c9c 	.word	0x08013c9c

0800334c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	460b      	mov	r3, r1
 8003356:	807b      	strh	r3, [r7, #2]
 8003358:	4613      	mov	r3, r2
 800335a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800335c:	887b      	ldrh	r3, [r7, #2]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d104      	bne.n	800336c <HAL_GPIO_WritePin+0x20>
 8003362:	f240 1197 	movw	r1, #407	; 0x197
 8003366:	480e      	ldr	r0, [pc, #56]	; (80033a0 <HAL_GPIO_WritePin+0x54>)
 8003368:	f7fe fd83 	bl	8001e72 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800336c:	787b      	ldrb	r3, [r7, #1]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d007      	beq.n	8003382 <HAL_GPIO_WritePin+0x36>
 8003372:	787b      	ldrb	r3, [r7, #1]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d004      	beq.n	8003382 <HAL_GPIO_WritePin+0x36>
 8003378:	f44f 71cc 	mov.w	r1, #408	; 0x198
 800337c:	4808      	ldr	r0, [pc, #32]	; (80033a0 <HAL_GPIO_WritePin+0x54>)
 800337e:	f7fe fd78 	bl	8001e72 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8003382:	787b      	ldrb	r3, [r7, #1]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d003      	beq.n	8003390 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003388:	887a      	ldrh	r2, [r7, #2]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800338e:	e003      	b.n	8003398 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003390:	887b      	ldrh	r3, [r7, #2]
 8003392:	041a      	lsls	r2, r3, #16
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	619a      	str	r2, [r3, #24]
}
 8003398:	bf00      	nop
 800339a:	3708      	adds	r7, #8
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	08013c9c 	.word	0x08013c9c

080033a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	4603      	mov	r3, r0
 80033ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80033ae:	4b08      	ldr	r3, [pc, #32]	; (80033d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033b0:	695a      	ldr	r2, [r3, #20]
 80033b2:	88fb      	ldrh	r3, [r7, #6]
 80033b4:	4013      	ands	r3, r2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d006      	beq.n	80033c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80033ba:	4a05      	ldr	r2, [pc, #20]	; (80033d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033bc:	88fb      	ldrh	r3, [r7, #6]
 80033be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80033c0:	88fb      	ldrh	r3, [r7, #6]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7fe fd12 	bl	8001dec <HAL_GPIO_EXTI_Callback>
  }
}
 80033c8:	bf00      	nop
 80033ca:	3708      	adds	r7, #8
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	40013c00 	.word	0x40013c00

080033d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e107      	b.n	80035f6 <HAL_I2C_Init+0x222>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a85      	ldr	r2, [pc, #532]	; (8003600 <HAL_I2C_Init+0x22c>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d013      	beq.n	8003418 <HAL_I2C_Init+0x44>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a83      	ldr	r2, [pc, #524]	; (8003604 <HAL_I2C_Init+0x230>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d00e      	beq.n	8003418 <HAL_I2C_Init+0x44>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a82      	ldr	r2, [pc, #520]	; (8003608 <HAL_I2C_Init+0x234>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d009      	beq.n	8003418 <HAL_I2C_Init+0x44>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a80      	ldr	r2, [pc, #512]	; (800360c <HAL_I2C_Init+0x238>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d004      	beq.n	8003418 <HAL_I2C_Init+0x44>
 800340e:	f240 2119 	movw	r1, #537	; 0x219
 8003412:	487f      	ldr	r0, [pc, #508]	; (8003610 <HAL_I2C_Init+0x23c>)
 8003414:	f7fe fd2d 	bl	8001e72 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003420:	d304      	bcc.n	800342c <HAL_I2C_Init+0x58>
 8003422:	f240 211a 	movw	r1, #538	; 0x21a
 8003426:	487a      	ldr	r0, [pc, #488]	; (8003610 <HAL_I2C_Init+0x23c>)
 8003428:	f7fe fd23 	bl	8001e72 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d008      	beq.n	8003446 <HAL_I2C_Init+0x72>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	2b02      	cmp	r3, #2
 800343a:	d004      	beq.n	8003446 <HAL_I2C_Init+0x72>
 800343c:	f240 211b 	movw	r1, #539	; 0x21b
 8003440:	4873      	ldr	r0, [pc, #460]	; (8003610 <HAL_I2C_Init+0x23c>)
 8003442:	f7fe fd16 	bl	8001e72 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d009      	beq.n	8003462 <HAL_I2C_Init+0x8e>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003456:	d004      	beq.n	8003462 <HAL_I2C_Init+0x8e>
 8003458:	f44f 7107 	mov.w	r1, #540	; 0x21c
 800345c:	486c      	ldr	r0, [pc, #432]	; (8003610 <HAL_I2C_Init+0x23c>)
 800345e:	f7fe fd08 	bl	8001e72 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	2bff      	cmp	r3, #255	; 0xff
 8003468:	d904      	bls.n	8003474 <HAL_I2C_Init+0xa0>
 800346a:	f240 211d 	movw	r1, #541	; 0x21d
 800346e:	4868      	ldr	r0, [pc, #416]	; (8003610 <HAL_I2C_Init+0x23c>)
 8003470:	f7fe fcff 	bl	8001e72 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d020      	beq.n	80034be <HAL_I2C_Init+0xea>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d01c      	beq.n	80034be <HAL_I2C_Init+0xea>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	2b02      	cmp	r3, #2
 800348a:	d018      	beq.n	80034be <HAL_I2C_Init+0xea>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	2b03      	cmp	r3, #3
 8003492:	d014      	beq.n	80034be <HAL_I2C_Init+0xea>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	699b      	ldr	r3, [r3, #24]
 8003498:	2b04      	cmp	r3, #4
 800349a:	d010      	beq.n	80034be <HAL_I2C_Init+0xea>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	2b05      	cmp	r3, #5
 80034a2:	d00c      	beq.n	80034be <HAL_I2C_Init+0xea>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	2b06      	cmp	r3, #6
 80034aa:	d008      	beq.n	80034be <HAL_I2C_Init+0xea>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	2b07      	cmp	r3, #7
 80034b2:	d004      	beq.n	80034be <HAL_I2C_Init+0xea>
 80034b4:	f240 211e 	movw	r1, #542	; 0x21e
 80034b8:	4855      	ldr	r0, [pc, #340]	; (8003610 <HAL_I2C_Init+0x23c>)
 80034ba:	f7fe fcda 	bl	8001e72 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	69db      	ldr	r3, [r3, #28]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d009      	beq.n	80034da <HAL_I2C_Init+0x106>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	69db      	ldr	r3, [r3, #28]
 80034ca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80034ce:	d004      	beq.n	80034da <HAL_I2C_Init+0x106>
 80034d0:	f240 211f 	movw	r1, #543	; 0x21f
 80034d4:	484e      	ldr	r0, [pc, #312]	; (8003610 <HAL_I2C_Init+0x23c>)
 80034d6:	f7fe fccc 	bl	8001e72 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a1b      	ldr	r3, [r3, #32]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d009      	beq.n	80034f6 <HAL_I2C_Init+0x122>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a1b      	ldr	r3, [r3, #32]
 80034e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80034ea:	d004      	beq.n	80034f6 <HAL_I2C_Init+0x122>
 80034ec:	f44f 7108 	mov.w	r1, #544	; 0x220
 80034f0:	4847      	ldr	r0, [pc, #284]	; (8003610 <HAL_I2C_Init+0x23c>)
 80034f2:	f7fe fcbe 	bl	8001e72 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d106      	bne.n	8003510 <HAL_I2C_Init+0x13c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f7fd ff54 	bl	80013b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2224      	movs	r2, #36	; 0x24
 8003514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f022 0201 	bic.w	r2, r2, #1
 8003526:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685a      	ldr	r2, [r3, #4]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003534:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003544:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d107      	bne.n	800355e <HAL_I2C_Init+0x18a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	689a      	ldr	r2, [r3, #8]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800355a:	609a      	str	r2, [r3, #8]
 800355c:	e006      	b.n	800356c <HAL_I2C_Init+0x198>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	689a      	ldr	r2, [r3, #8]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800356a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	2b02      	cmp	r3, #2
 8003572:	d104      	bne.n	800357e <HAL_I2C_Init+0x1aa>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800357c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	6859      	ldr	r1, [r3, #4]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	4b22      	ldr	r3, [pc, #136]	; (8003614 <HAL_I2C_Init+0x240>)
 800358a:	430b      	orrs	r3, r1
 800358c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68da      	ldr	r2, [r3, #12]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800359c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	691a      	ldr	r2, [r3, #16]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	430a      	orrs	r2, r1
 80035b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	69d9      	ldr	r1, [r3, #28]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a1a      	ldr	r2, [r3, #32]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	430a      	orrs	r2, r1
 80035c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f042 0201 	orr.w	r2, r2, #1
 80035d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2220      	movs	r2, #32
 80035e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	40005400 	.word	0x40005400
 8003604:	40005800 	.word	0x40005800
 8003608:	40005c00 	.word	0x40005c00
 800360c:	40006000 	.word	0x40006000
 8003610:	08013cd8 	.word	0x08013cd8
 8003614:	02008000 	.word	0x02008000

08003618 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b088      	sub	sp, #32
 800361c:	af02      	add	r7, sp, #8
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	607a      	str	r2, [r7, #4]
 8003622:	461a      	mov	r2, r3
 8003624:	460b      	mov	r3, r1
 8003626:	817b      	strh	r3, [r7, #10]
 8003628:	4613      	mov	r3, r2
 800362a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003632:	b2db      	uxtb	r3, r3
 8003634:	2b20      	cmp	r3, #32
 8003636:	f040 80da 	bne.w	80037ee <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003640:	2b01      	cmp	r3, #1
 8003642:	d101      	bne.n	8003648 <HAL_I2C_Master_Transmit+0x30>
 8003644:	2302      	movs	r3, #2
 8003646:	e0d3      	b.n	80037f0 <HAL_I2C_Master_Transmit+0x1d8>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003650:	f7ff f8ea 	bl	8002828 <HAL_GetTick>
 8003654:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	9300      	str	r3, [sp, #0]
 800365a:	2319      	movs	r3, #25
 800365c:	2201      	movs	r2, #1
 800365e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f000 f9e6 	bl	8003a34 <I2C_WaitOnFlagUntilTimeout>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e0be      	b.n	80037f0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2221      	movs	r2, #33	; 0x21
 8003676:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2210      	movs	r2, #16
 800367e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	893a      	ldrh	r2, [r7, #8]
 8003692:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800369e:	b29b      	uxth	r3, r3
 80036a0:	2bff      	cmp	r3, #255	; 0xff
 80036a2:	d90e      	bls.n	80036c2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	22ff      	movs	r2, #255	; 0xff
 80036a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ae:	b2da      	uxtb	r2, r3
 80036b0:	8979      	ldrh	r1, [r7, #10]
 80036b2:	4b51      	ldr	r3, [pc, #324]	; (80037f8 <HAL_I2C_Master_Transmit+0x1e0>)
 80036b4:	9300      	str	r3, [sp, #0]
 80036b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f000 fbd0 	bl	8003e60 <I2C_TransferConfig>
 80036c0:	e06c      	b.n	800379c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c6:	b29a      	uxth	r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d0:	b2da      	uxtb	r2, r3
 80036d2:	8979      	ldrh	r1, [r7, #10]
 80036d4:	4b48      	ldr	r3, [pc, #288]	; (80037f8 <HAL_I2C_Master_Transmit+0x1e0>)
 80036d6:	9300      	str	r3, [sp, #0]
 80036d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036dc:	68f8      	ldr	r0, [r7, #12]
 80036de:	f000 fbbf 	bl	8003e60 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80036e2:	e05b      	b.n	800379c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036e4:	697a      	ldr	r2, [r7, #20]
 80036e6:	6a39      	ldr	r1, [r7, #32]
 80036e8:	68f8      	ldr	r0, [r7, #12]
 80036ea:	f000 f9e3 	bl	8003ab4 <I2C_WaitOnTXISFlagUntilTimeout>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d001      	beq.n	80036f8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e07b      	b.n	80037f0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fc:	781a      	ldrb	r2, [r3, #0]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003708:	1c5a      	adds	r2, r3, #1
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003712:	b29b      	uxth	r3, r3
 8003714:	3b01      	subs	r3, #1
 8003716:	b29a      	uxth	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003720:	3b01      	subs	r3, #1
 8003722:	b29a      	uxth	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800372c:	b29b      	uxth	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d034      	beq.n	800379c <HAL_I2C_Master_Transmit+0x184>
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003736:	2b00      	cmp	r3, #0
 8003738:	d130      	bne.n	800379c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	9300      	str	r3, [sp, #0]
 800373e:	6a3b      	ldr	r3, [r7, #32]
 8003740:	2200      	movs	r2, #0
 8003742:	2180      	movs	r1, #128	; 0x80
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	f000 f975 	bl	8003a34 <I2C_WaitOnFlagUntilTimeout>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d001      	beq.n	8003754 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e04d      	b.n	80037f0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003758:	b29b      	uxth	r3, r3
 800375a:	2bff      	cmp	r3, #255	; 0xff
 800375c:	d90e      	bls.n	800377c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	22ff      	movs	r2, #255	; 0xff
 8003762:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003768:	b2da      	uxtb	r2, r3
 800376a:	8979      	ldrh	r1, [r7, #10]
 800376c:	2300      	movs	r3, #0
 800376e:	9300      	str	r3, [sp, #0]
 8003770:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003774:	68f8      	ldr	r0, [r7, #12]
 8003776:	f000 fb73 	bl	8003e60 <I2C_TransferConfig>
 800377a:	e00f      	b.n	800379c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003780:	b29a      	uxth	r2, r3
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800378a:	b2da      	uxtb	r2, r3
 800378c:	8979      	ldrh	r1, [r7, #10]
 800378e:	2300      	movs	r3, #0
 8003790:	9300      	str	r3, [sp, #0]
 8003792:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003796:	68f8      	ldr	r0, [r7, #12]
 8003798:	f000 fb62 	bl	8003e60 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d19e      	bne.n	80036e4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037a6:	697a      	ldr	r2, [r7, #20]
 80037a8:	6a39      	ldr	r1, [r7, #32]
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	f000 f9c2 	bl	8003b34 <I2C_WaitOnSTOPFlagUntilTimeout>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e01a      	b.n	80037f0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2220      	movs	r2, #32
 80037c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	6859      	ldr	r1, [r3, #4]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	4b0b      	ldr	r3, [pc, #44]	; (80037fc <HAL_I2C_Master_Transmit+0x1e4>)
 80037ce:	400b      	ands	r3, r1
 80037d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2220      	movs	r2, #32
 80037d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037ea:	2300      	movs	r3, #0
 80037ec:	e000      	b.n	80037f0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80037ee:	2302      	movs	r3, #2
  }
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3718      	adds	r7, #24
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	80002000 	.word	0x80002000
 80037fc:	fe00e800 	.word	0xfe00e800

08003800 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b088      	sub	sp, #32
 8003804:	af02      	add	r7, sp, #8
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	607a      	str	r2, [r7, #4]
 800380a:	461a      	mov	r2, r3
 800380c:	460b      	mov	r3, r1
 800380e:	817b      	strh	r3, [r7, #10]
 8003810:	4613      	mov	r3, r2
 8003812:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800381a:	b2db      	uxtb	r3, r3
 800381c:	2b20      	cmp	r3, #32
 800381e:	f040 80db 	bne.w	80039d8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003828:	2b01      	cmp	r3, #1
 800382a:	d101      	bne.n	8003830 <HAL_I2C_Master_Receive+0x30>
 800382c:	2302      	movs	r3, #2
 800382e:	e0d4      	b.n	80039da <HAL_I2C_Master_Receive+0x1da>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003838:	f7fe fff6 	bl	8002828 <HAL_GetTick>
 800383c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	9300      	str	r3, [sp, #0]
 8003842:	2319      	movs	r3, #25
 8003844:	2201      	movs	r2, #1
 8003846:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800384a:	68f8      	ldr	r0, [r7, #12]
 800384c:	f000 f8f2 	bl	8003a34 <I2C_WaitOnFlagUntilTimeout>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d001      	beq.n	800385a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e0bf      	b.n	80039da <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2222      	movs	r2, #34	; 0x22
 800385e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2210      	movs	r2, #16
 8003866:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	893a      	ldrh	r2, [r7, #8]
 800387a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003886:	b29b      	uxth	r3, r3
 8003888:	2bff      	cmp	r3, #255	; 0xff
 800388a:	d90e      	bls.n	80038aa <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	22ff      	movs	r2, #255	; 0xff
 8003890:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003896:	b2da      	uxtb	r2, r3
 8003898:	8979      	ldrh	r1, [r7, #10]
 800389a:	4b52      	ldr	r3, [pc, #328]	; (80039e4 <HAL_I2C_Master_Receive+0x1e4>)
 800389c:	9300      	str	r3, [sp, #0]
 800389e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038a2:	68f8      	ldr	r0, [r7, #12]
 80038a4:	f000 fadc 	bl	8003e60 <I2C_TransferConfig>
 80038a8:	e06d      	b.n	8003986 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ae:	b29a      	uxth	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b8:	b2da      	uxtb	r2, r3
 80038ba:	8979      	ldrh	r1, [r7, #10]
 80038bc:	4b49      	ldr	r3, [pc, #292]	; (80039e4 <HAL_I2C_Master_Receive+0x1e4>)
 80038be:	9300      	str	r3, [sp, #0]
 80038c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038c4:	68f8      	ldr	r0, [r7, #12]
 80038c6:	f000 facb 	bl	8003e60 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80038ca:	e05c      	b.n	8003986 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038cc:	697a      	ldr	r2, [r7, #20]
 80038ce:	6a39      	ldr	r1, [r7, #32]
 80038d0:	68f8      	ldr	r0, [r7, #12]
 80038d2:	f000 f96b 	bl	8003bac <I2C_WaitOnRXNEFlagUntilTimeout>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d001      	beq.n	80038e0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e07c      	b.n	80039da <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ea:	b2d2      	uxtb	r2, r2
 80038ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f2:	1c5a      	adds	r2, r3, #1
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038fc:	3b01      	subs	r3, #1
 80038fe:	b29a      	uxth	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003908:	b29b      	uxth	r3, r3
 800390a:	3b01      	subs	r3, #1
 800390c:	b29a      	uxth	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003916:	b29b      	uxth	r3, r3
 8003918:	2b00      	cmp	r3, #0
 800391a:	d034      	beq.n	8003986 <HAL_I2C_Master_Receive+0x186>
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003920:	2b00      	cmp	r3, #0
 8003922:	d130      	bne.n	8003986 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	9300      	str	r3, [sp, #0]
 8003928:	6a3b      	ldr	r3, [r7, #32]
 800392a:	2200      	movs	r2, #0
 800392c:	2180      	movs	r1, #128	; 0x80
 800392e:	68f8      	ldr	r0, [r7, #12]
 8003930:	f000 f880 	bl	8003a34 <I2C_WaitOnFlagUntilTimeout>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e04d      	b.n	80039da <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003942:	b29b      	uxth	r3, r3
 8003944:	2bff      	cmp	r3, #255	; 0xff
 8003946:	d90e      	bls.n	8003966 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	22ff      	movs	r2, #255	; 0xff
 800394c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003952:	b2da      	uxtb	r2, r3
 8003954:	8979      	ldrh	r1, [r7, #10]
 8003956:	2300      	movs	r3, #0
 8003958:	9300      	str	r3, [sp, #0]
 800395a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	f000 fa7e 	bl	8003e60 <I2C_TransferConfig>
 8003964:	e00f      	b.n	8003986 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800396a:	b29a      	uxth	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003974:	b2da      	uxtb	r2, r3
 8003976:	8979      	ldrh	r1, [r7, #10]
 8003978:	2300      	movs	r3, #0
 800397a:	9300      	str	r3, [sp, #0]
 800397c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003980:	68f8      	ldr	r0, [r7, #12]
 8003982:	f000 fa6d 	bl	8003e60 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800398a:	b29b      	uxth	r3, r3
 800398c:	2b00      	cmp	r3, #0
 800398e:	d19d      	bne.n	80038cc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003990:	697a      	ldr	r2, [r7, #20]
 8003992:	6a39      	ldr	r1, [r7, #32]
 8003994:	68f8      	ldr	r0, [r7, #12]
 8003996:	f000 f8cd 	bl	8003b34 <I2C_WaitOnSTOPFlagUntilTimeout>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d001      	beq.n	80039a4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e01a      	b.n	80039da <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2220      	movs	r2, #32
 80039aa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	6859      	ldr	r1, [r3, #4]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	4b0c      	ldr	r3, [pc, #48]	; (80039e8 <HAL_I2C_Master_Receive+0x1e8>)
 80039b8:	400b      	ands	r3, r1
 80039ba:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2220      	movs	r2, #32
 80039c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80039d4:	2300      	movs	r3, #0
 80039d6:	e000      	b.n	80039da <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80039d8:	2302      	movs	r3, #2
  }
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3718      	adds	r7, #24
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	80002400 	.word	0x80002400
 80039e8:	fe00e800 	.word	0xfe00e800

080039ec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d103      	bne.n	8003a0a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2200      	movs	r2, #0
 8003a08:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d007      	beq.n	8003a28 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	699a      	ldr	r2, [r3, #24]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f042 0201 	orr.w	r2, r2, #1
 8003a26:	619a      	str	r2, [r3, #24]
  }
}
 8003a28:	bf00      	nop
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	603b      	str	r3, [r7, #0]
 8003a40:	4613      	mov	r3, r2
 8003a42:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a44:	e022      	b.n	8003a8c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a4c:	d01e      	beq.n	8003a8c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a4e:	f7fe feeb 	bl	8002828 <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	683a      	ldr	r2, [r7, #0]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d302      	bcc.n	8003a64 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d113      	bne.n	8003a8c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a68:	f043 0220 	orr.w	r2, r3, #32
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2220      	movs	r2, #32
 8003a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e00f      	b.n	8003aac <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	699a      	ldr	r2, [r3, #24]
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	4013      	ands	r3, r2
 8003a96:	68ba      	ldr	r2, [r7, #8]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	bf0c      	ite	eq
 8003a9c:	2301      	moveq	r3, #1
 8003a9e:	2300      	movne	r3, #0
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	79fb      	ldrb	r3, [r7, #7]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d0cd      	beq.n	8003a46 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3710      	adds	r7, #16
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ac0:	e02c      	b.n	8003b1c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	68b9      	ldr	r1, [r7, #8]
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	f000 f8ea 	bl	8003ca0 <I2C_IsErrorOccurred>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d001      	beq.n	8003ad6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e02a      	b.n	8003b2c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003adc:	d01e      	beq.n	8003b1c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ade:	f7fe fea3 	bl	8002828 <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	68ba      	ldr	r2, [r7, #8]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d302      	bcc.n	8003af4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d113      	bne.n	8003b1c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af8:	f043 0220 	orr.w	r2, r3, #32
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2220      	movs	r2, #32
 8003b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e007      	b.n	8003b2c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d1cb      	bne.n	8003ac2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3710      	adds	r7, #16
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b40:	e028      	b.n	8003b94 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	68b9      	ldr	r1, [r7, #8]
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	f000 f8aa 	bl	8003ca0 <I2C_IsErrorOccurred>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d001      	beq.n	8003b56 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e026      	b.n	8003ba4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b56:	f7fe fe67 	bl	8002828 <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	68ba      	ldr	r2, [r7, #8]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d302      	bcc.n	8003b6c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d113      	bne.n	8003b94 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b70:	f043 0220 	orr.w	r2, r3, #32
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2220      	movs	r2, #32
 8003b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e007      	b.n	8003ba4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	f003 0320 	and.w	r3, r3, #32
 8003b9e:	2b20      	cmp	r3, #32
 8003ba0:	d1cf      	bne.n	8003b42 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3710      	adds	r7, #16
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003bb8:	e064      	b.n	8003c84 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	68b9      	ldr	r1, [r7, #8]
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	f000 f86e 	bl	8003ca0 <I2C_IsErrorOccurred>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d001      	beq.n	8003bce <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e062      	b.n	8003c94 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	f003 0320 	and.w	r3, r3, #32
 8003bd8:	2b20      	cmp	r3, #32
 8003bda:	d138      	bne.n	8003c4e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	f003 0304 	and.w	r3, r3, #4
 8003be6:	2b04      	cmp	r3, #4
 8003be8:	d105      	bne.n	8003bf6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d001      	beq.n	8003bf6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	e04e      	b.n	8003c94 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	f003 0310 	and.w	r3, r3, #16
 8003c00:	2b10      	cmp	r3, #16
 8003c02:	d107      	bne.n	8003c14 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2210      	movs	r2, #16
 8003c0a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2204      	movs	r2, #4
 8003c10:	645a      	str	r2, [r3, #68]	; 0x44
 8003c12:	e002      	b.n	8003c1a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2220      	movs	r2, #32
 8003c20:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	6859      	ldr	r1, [r3, #4]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	4b1b      	ldr	r3, [pc, #108]	; (8003c9c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8003c2e:	400b      	ands	r3, r1
 8003c30:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2220      	movs	r2, #32
 8003c36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e022      	b.n	8003c94 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c4e:	f7fe fdeb 	bl	8002828 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	68ba      	ldr	r2, [r7, #8]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d302      	bcc.n	8003c64 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d10f      	bne.n	8003c84 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c68:	f043 0220 	orr.w	r2, r3, #32
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2220      	movs	r2, #32
 8003c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e007      	b.n	8003c94 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	699b      	ldr	r3, [r3, #24]
 8003c8a:	f003 0304 	and.w	r3, r3, #4
 8003c8e:	2b04      	cmp	r3, #4
 8003c90:	d193      	bne.n	8003bba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3710      	adds	r7, #16
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	fe00e800 	.word	0xfe00e800

08003ca0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b08a      	sub	sp, #40	; 0x28
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	60b9      	str	r1, [r7, #8]
 8003caa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cac:	2300      	movs	r3, #0
 8003cae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	f003 0310 	and.w	r3, r3, #16
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d068      	beq.n	8003d9e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2210      	movs	r2, #16
 8003cd2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003cd4:	e049      	b.n	8003d6a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cdc:	d045      	beq.n	8003d6a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003cde:	f7fe fda3 	bl	8002828 <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	68ba      	ldr	r2, [r7, #8]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d302      	bcc.n	8003cf4 <I2C_IsErrorOccurred+0x54>
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d13a      	bne.n	8003d6a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cfe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d06:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d16:	d121      	bne.n	8003d5c <I2C_IsErrorOccurred+0xbc>
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d1e:	d01d      	beq.n	8003d5c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003d20:	7cfb      	ldrb	r3, [r7, #19]
 8003d22:	2b20      	cmp	r3, #32
 8003d24:	d01a      	beq.n	8003d5c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	685a      	ldr	r2, [r3, #4]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d34:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003d36:	f7fe fd77 	bl	8002828 <HAL_GetTick>
 8003d3a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d3c:	e00e      	b.n	8003d5c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003d3e:	f7fe fd73 	bl	8002828 <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	2b19      	cmp	r3, #25
 8003d4a:	d907      	bls.n	8003d5c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003d4c:	6a3b      	ldr	r3, [r7, #32]
 8003d4e:	f043 0320 	orr.w	r3, r3, #32
 8003d52:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003d5a:	e006      	b.n	8003d6a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	f003 0320 	and.w	r3, r3, #32
 8003d66:	2b20      	cmp	r3, #32
 8003d68:	d1e9      	bne.n	8003d3e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	f003 0320 	and.w	r3, r3, #32
 8003d74:	2b20      	cmp	r3, #32
 8003d76:	d003      	beq.n	8003d80 <I2C_IsErrorOccurred+0xe0>
 8003d78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d0aa      	beq.n	8003cd6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003d80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d103      	bne.n	8003d90 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2220      	movs	r2, #32
 8003d8e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003d90:	6a3b      	ldr	r3, [r7, #32]
 8003d92:	f043 0304 	orr.w	r3, r3, #4
 8003d96:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	699b      	ldr	r3, [r3, #24]
 8003da4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d00b      	beq.n	8003dc8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003db0:	6a3b      	ldr	r3, [r7, #32]
 8003db2:	f043 0301 	orr.w	r3, r3, #1
 8003db6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003dc0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00b      	beq.n	8003dea <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003dd2:	6a3b      	ldr	r3, [r7, #32]
 8003dd4:	f043 0308 	orr.w	r3, r3, #8
 8003dd8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003de2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d00b      	beq.n	8003e0c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003df4:	6a3b      	ldr	r3, [r7, #32]
 8003df6:	f043 0302 	orr.w	r3, r3, #2
 8003dfa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e04:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003e0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d01c      	beq.n	8003e4e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003e14:	68f8      	ldr	r0, [r7, #12]
 8003e16:	f7ff fde9 	bl	80039ec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	6859      	ldr	r1, [r3, #4]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	4b0d      	ldr	r3, [pc, #52]	; (8003e5c <I2C_IsErrorOccurred+0x1bc>)
 8003e26:	400b      	ands	r3, r1
 8003e28:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e2e:	6a3b      	ldr	r3, [r7, #32]
 8003e30:	431a      	orrs	r2, r3
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2220      	movs	r2, #32
 8003e3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003e4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3728      	adds	r7, #40	; 0x28
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	fe00e800 	.word	0xfe00e800

08003e60 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b086      	sub	sp, #24
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	607b      	str	r3, [r7, #4]
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	817b      	strh	r3, [r7, #10]
 8003e6e:	4613      	mov	r3, r2
 8003e70:	727b      	strb	r3, [r7, #9]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a2f      	ldr	r2, [pc, #188]	; (8003f34 <I2C_TransferConfig+0xd4>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d013      	beq.n	8003ea4 <I2C_TransferConfig+0x44>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a2d      	ldr	r2, [pc, #180]	; (8003f38 <I2C_TransferConfig+0xd8>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d00e      	beq.n	8003ea4 <I2C_TransferConfig+0x44>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a2c      	ldr	r2, [pc, #176]	; (8003f3c <I2C_TransferConfig+0xdc>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d009      	beq.n	8003ea4 <I2C_TransferConfig+0x44>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a2a      	ldr	r2, [pc, #168]	; (8003f40 <I2C_TransferConfig+0xe0>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d004      	beq.n	8003ea4 <I2C_TransferConfig+0x44>
 8003e9a:	f641 3147 	movw	r1, #6983	; 0x1b47
 8003e9e:	4829      	ldr	r0, [pc, #164]	; (8003f44 <I2C_TransferConfig+0xe4>)
 8003ea0:	f7fd ffe7 	bl	8001e72 <assert_failed>
  assert_param(IS_TRANSFER_MODE(Mode));
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003eaa:	d00b      	beq.n	8003ec4 <I2C_TransferConfig+0x64>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003eb2:	d007      	beq.n	8003ec4 <I2C_TransferConfig+0x64>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d004      	beq.n	8003ec4 <I2C_TransferConfig+0x64>
 8003eba:	f641 3148 	movw	r1, #6984	; 0x1b48
 8003ebe:	4821      	ldr	r0, [pc, #132]	; (8003f44 <I2C_TransferConfig+0xe4>)
 8003ec0:	f7fd ffd7 	bl	8001e72 <assert_failed>
  assert_param(IS_TRANSFER_REQUEST(Request));
 8003ec4:	6a3b      	ldr	r3, [r7, #32]
 8003ec6:	4a20      	ldr	r2, [pc, #128]	; (8003f48 <I2C_TransferConfig+0xe8>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d00f      	beq.n	8003eec <I2C_TransferConfig+0x8c>
 8003ecc:	6a3b      	ldr	r3, [r7, #32]
 8003ece:	4a1f      	ldr	r2, [pc, #124]	; (8003f4c <I2C_TransferConfig+0xec>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d00b      	beq.n	8003eec <I2C_TransferConfig+0x8c>
 8003ed4:	6a3b      	ldr	r3, [r7, #32]
 8003ed6:	4a1e      	ldr	r2, [pc, #120]	; (8003f50 <I2C_TransferConfig+0xf0>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d007      	beq.n	8003eec <I2C_TransferConfig+0x8c>
 8003edc:	6a3b      	ldr	r3, [r7, #32]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d004      	beq.n	8003eec <I2C_TransferConfig+0x8c>
 8003ee2:	f641 3149 	movw	r1, #6985	; 0x1b49
 8003ee6:	4817      	ldr	r0, [pc, #92]	; (8003f44 <I2C_TransferConfig+0xe4>)
 8003ee8:	f7fd ffc3 	bl	8001e72 <assert_failed>

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003eec:	897b      	ldrh	r3, [r7, #10]
 8003eee:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003ef2:	7a7b      	ldrb	r3, [r7, #9]
 8003ef4:	041b      	lsls	r3, r3, #16
 8003ef6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003efa:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f00:	6a3b      	ldr	r3, [r7, #32]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f08:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	685a      	ldr	r2, [r3, #4]
 8003f10:	6a3b      	ldr	r3, [r7, #32]
 8003f12:	0d5b      	lsrs	r3, r3, #21
 8003f14:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003f18:	4b0e      	ldr	r3, [pc, #56]	; (8003f54 <I2C_TransferConfig+0xf4>)
 8003f1a:	430b      	orrs	r3, r1
 8003f1c:	43db      	mvns	r3, r3
 8003f1e:	ea02 0103 	and.w	r1, r2, r3
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	697a      	ldr	r2, [r7, #20]
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003f2c:	bf00      	nop
 8003f2e:	3718      	adds	r7, #24
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	40005400 	.word	0x40005400
 8003f38:	40005800 	.word	0x40005800
 8003f3c:	40005c00 	.word	0x40005c00
 8003f40:	40006000 	.word	0x40006000
 8003f44:	08013cd8 	.word	0x08013cd8
 8003f48:	80004000 	.word	0x80004000
 8003f4c:	80002400 	.word	0x80002400
 8003f50:	80002000 	.word	0x80002000
 8003f54:	03ff63ff 	.word	0x03ff63ff

08003f58 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a32      	ldr	r2, [pc, #200]	; (8004030 <HAL_I2CEx_ConfigAnalogFilter+0xd8>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d012      	beq.n	8003f92 <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a30      	ldr	r2, [pc, #192]	; (8004034 <HAL_I2CEx_ConfigAnalogFilter+0xdc>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d00d      	beq.n	8003f92 <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a2f      	ldr	r2, [pc, #188]	; (8004038 <HAL_I2CEx_ConfigAnalogFilter+0xe0>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d008      	beq.n	8003f92 <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a2d      	ldr	r2, [pc, #180]	; (800403c <HAL_I2CEx_ConfigAnalogFilter+0xe4>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d003      	beq.n	8003f92 <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8003f8a:	215e      	movs	r1, #94	; 0x5e
 8003f8c:	482c      	ldr	r0, [pc, #176]	; (8004040 <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 8003f8e:	f7fd ff70 	bl	8001e72 <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d007      	beq.n	8003fa8 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f9e:	d003      	beq.n	8003fa8 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8003fa0:	215f      	movs	r1, #95	; 0x5f
 8003fa2:	4827      	ldr	r0, [pc, #156]	; (8004040 <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 8003fa4:	f7fd ff65 	bl	8001e72 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	2b20      	cmp	r3, #32
 8003fb2:	d138      	bne.n	8004026 <HAL_I2CEx_ConfigAnalogFilter+0xce>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d101      	bne.n	8003fc2 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
 8003fbe:	2302      	movs	r3, #2
 8003fc0:	e032      	b.n	8004028 <HAL_I2CEx_ConfigAnalogFilter+0xd0>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2224      	movs	r2, #36	; 0x24
 8003fce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f022 0201 	bic.w	r2, r2, #1
 8003fe0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003ff0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	6819      	ldr	r1, [r3, #0]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	683a      	ldr	r2, [r7, #0]
 8003ffe:	430a      	orrs	r2, r1
 8004000:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f042 0201 	orr.w	r2, r2, #1
 8004010:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2220      	movs	r2, #32
 8004016:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004022:	2300      	movs	r3, #0
 8004024:	e000      	b.n	8004028 <HAL_I2CEx_ConfigAnalogFilter+0xd0>
  }
  else
  {
    return HAL_BUSY;
 8004026:	2302      	movs	r3, #2
  }
}
 8004028:	4618      	mov	r0, r3
 800402a:	3708      	adds	r7, #8
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	40005400 	.word	0x40005400
 8004034:	40005800 	.word	0x40005800
 8004038:	40005c00 	.word	0x40005c00
 800403c:	40006000 	.word	0x40006000
 8004040:	08013d10 	.word	0x08013d10

08004044 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a31      	ldr	r2, [pc, #196]	; (8004118 <HAL_I2CEx_ConfigDigitalFilter+0xd4>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d012      	beq.n	800407e <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a2f      	ldr	r2, [pc, #188]	; (800411c <HAL_I2CEx_ConfigDigitalFilter+0xd8>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d00d      	beq.n	800407e <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a2e      	ldr	r2, [pc, #184]	; (8004120 <HAL_I2CEx_ConfigDigitalFilter+0xdc>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d008      	beq.n	800407e <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a2c      	ldr	r2, [pc, #176]	; (8004124 <HAL_I2CEx_ConfigDigitalFilter+0xe0>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d003      	beq.n	800407e <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8004076:	218c      	movs	r1, #140	; 0x8c
 8004078:	482b      	ldr	r0, [pc, #172]	; (8004128 <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 800407a:	f7fd fefa 	bl	8001e72 <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	2b0f      	cmp	r3, #15
 8004082:	d903      	bls.n	800408c <HAL_I2CEx_ConfigDigitalFilter+0x48>
 8004084:	218d      	movs	r1, #141	; 0x8d
 8004086:	4828      	ldr	r0, [pc, #160]	; (8004128 <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 8004088:	f7fd fef3 	bl	8001e72 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004092:	b2db      	uxtb	r3, r3
 8004094:	2b20      	cmp	r3, #32
 8004096:	d139      	bne.n	800410c <HAL_I2CEx_ConfigDigitalFilter+0xc8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d101      	bne.n	80040a6 <HAL_I2CEx_ConfigDigitalFilter+0x62>
 80040a2:	2302      	movs	r3, #2
 80040a4:	e033      	b.n	800410e <HAL_I2CEx_ConfigDigitalFilter+0xca>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2201      	movs	r2, #1
 80040aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2224      	movs	r2, #36	; 0x24
 80040b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f022 0201 	bic.w	r2, r2, #1
 80040c4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80040d4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	021b      	lsls	r3, r3, #8
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	4313      	orrs	r3, r2
 80040de:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68fa      	ldr	r2, [r7, #12]
 80040e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f042 0201 	orr.w	r2, r2, #1
 80040f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2220      	movs	r2, #32
 80040fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004108:	2300      	movs	r3, #0
 800410a:	e000      	b.n	800410e <HAL_I2CEx_ConfigDigitalFilter+0xca>
  }
  else
  {
    return HAL_BUSY;
 800410c:	2302      	movs	r3, #2
  }
}
 800410e:	4618      	mov	r0, r3
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	40005400 	.word	0x40005400
 800411c:	40005800 	.word	0x40005800
 8004120:	40005c00 	.word	0x40005c00
 8004124:	40006000 	.word	0x40006000
 8004128:	08013d10 	.word	0x08013d10

0800412c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004132:	2300      	movs	r3, #0
 8004134:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004136:	4b23      	ldr	r3, [pc, #140]	; (80041c4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413a:	4a22      	ldr	r2, [pc, #136]	; (80041c4 <HAL_PWREx_EnableOverDrive+0x98>)
 800413c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004140:	6413      	str	r3, [r2, #64]	; 0x40
 8004142:	4b20      	ldr	r3, [pc, #128]	; (80041c4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800414a:	603b      	str	r3, [r7, #0]
 800414c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800414e:	4b1e      	ldr	r3, [pc, #120]	; (80041c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a1d      	ldr	r2, [pc, #116]	; (80041c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004158:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800415a:	f7fe fb65 	bl	8002828 <HAL_GetTick>
 800415e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004160:	e009      	b.n	8004176 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004162:	f7fe fb61 	bl	8002828 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004170:	d901      	bls.n	8004176 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e022      	b.n	80041bc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004176:	4b14      	ldr	r3, [pc, #80]	; (80041c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800417e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004182:	d1ee      	bne.n	8004162 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004184:	4b10      	ldr	r3, [pc, #64]	; (80041c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a0f      	ldr	r2, [pc, #60]	; (80041c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800418a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800418e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004190:	f7fe fb4a 	bl	8002828 <HAL_GetTick>
 8004194:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004196:	e009      	b.n	80041ac <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004198:	f7fe fb46 	bl	8002828 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041a6:	d901      	bls.n	80041ac <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e007      	b.n	80041bc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80041ac:	4b06      	ldr	r3, [pc, #24]	; (80041c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041b8:	d1ee      	bne.n	8004198 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3708      	adds	r7, #8
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	40023800 	.word	0x40023800
 80041c8:	40007000 	.word	0x40007000

080041cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b086      	sub	sp, #24
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80041d4:	2300      	movs	r3, #0
 80041d6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d101      	bne.n	80041e2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e345      	b.n	800486e <HAL_RCC_OscConfig+0x6a2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2b0f      	cmp	r3, #15
 80041e8:	d904      	bls.n	80041f4 <HAL_RCC_OscConfig+0x28>
 80041ea:	f240 1163 	movw	r1, #355	; 0x163
 80041ee:	4892      	ldr	r0, [pc, #584]	; (8004438 <HAL_RCC_OscConfig+0x26c>)
 80041f0:	f7fd fe3f 	bl	8001e72 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0301 	and.w	r3, r3, #1
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	f000 809a 	beq.w	8004336 <HAL_RCC_OscConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00e      	beq.n	8004228 <HAL_RCC_OscConfig+0x5c>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004212:	d009      	beq.n	8004228 <HAL_RCC_OscConfig+0x5c>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800421c:	d004      	beq.n	8004228 <HAL_RCC_OscConfig+0x5c>
 800421e:	f240 1169 	movw	r1, #361	; 0x169
 8004222:	4885      	ldr	r0, [pc, #532]	; (8004438 <HAL_RCC_OscConfig+0x26c>)
 8004224:	f7fd fe25 	bl	8001e72 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004228:	4b84      	ldr	r3, [pc, #528]	; (800443c <HAL_RCC_OscConfig+0x270>)
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f003 030c 	and.w	r3, r3, #12
 8004230:	2b04      	cmp	r3, #4
 8004232:	d00c      	beq.n	800424e <HAL_RCC_OscConfig+0x82>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004234:	4b81      	ldr	r3, [pc, #516]	; (800443c <HAL_RCC_OscConfig+0x270>)
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f003 030c 	and.w	r3, r3, #12
 800423c:	2b08      	cmp	r3, #8
 800423e:	d112      	bne.n	8004266 <HAL_RCC_OscConfig+0x9a>
 8004240:	4b7e      	ldr	r3, [pc, #504]	; (800443c <HAL_RCC_OscConfig+0x270>)
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004248:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800424c:	d10b      	bne.n	8004266 <HAL_RCC_OscConfig+0x9a>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800424e:	4b7b      	ldr	r3, [pc, #492]	; (800443c <HAL_RCC_OscConfig+0x270>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d06c      	beq.n	8004334 <HAL_RCC_OscConfig+0x168>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d168      	bne.n	8004334 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e303      	b.n	800486e <HAL_RCC_OscConfig+0x6a2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800426e:	d106      	bne.n	800427e <HAL_RCC_OscConfig+0xb2>
 8004270:	4b72      	ldr	r3, [pc, #456]	; (800443c <HAL_RCC_OscConfig+0x270>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a71      	ldr	r2, [pc, #452]	; (800443c <HAL_RCC_OscConfig+0x270>)
 8004276:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800427a:	6013      	str	r3, [r2, #0]
 800427c:	e02e      	b.n	80042dc <HAL_RCC_OscConfig+0x110>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d10c      	bne.n	80042a0 <HAL_RCC_OscConfig+0xd4>
 8004286:	4b6d      	ldr	r3, [pc, #436]	; (800443c <HAL_RCC_OscConfig+0x270>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a6c      	ldr	r2, [pc, #432]	; (800443c <HAL_RCC_OscConfig+0x270>)
 800428c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004290:	6013      	str	r3, [r2, #0]
 8004292:	4b6a      	ldr	r3, [pc, #424]	; (800443c <HAL_RCC_OscConfig+0x270>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a69      	ldr	r2, [pc, #420]	; (800443c <HAL_RCC_OscConfig+0x270>)
 8004298:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800429c:	6013      	str	r3, [r2, #0]
 800429e:	e01d      	b.n	80042dc <HAL_RCC_OscConfig+0x110>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042a8:	d10c      	bne.n	80042c4 <HAL_RCC_OscConfig+0xf8>
 80042aa:	4b64      	ldr	r3, [pc, #400]	; (800443c <HAL_RCC_OscConfig+0x270>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a63      	ldr	r2, [pc, #396]	; (800443c <HAL_RCC_OscConfig+0x270>)
 80042b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042b4:	6013      	str	r3, [r2, #0]
 80042b6:	4b61      	ldr	r3, [pc, #388]	; (800443c <HAL_RCC_OscConfig+0x270>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a60      	ldr	r2, [pc, #384]	; (800443c <HAL_RCC_OscConfig+0x270>)
 80042bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042c0:	6013      	str	r3, [r2, #0]
 80042c2:	e00b      	b.n	80042dc <HAL_RCC_OscConfig+0x110>
 80042c4:	4b5d      	ldr	r3, [pc, #372]	; (800443c <HAL_RCC_OscConfig+0x270>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a5c      	ldr	r2, [pc, #368]	; (800443c <HAL_RCC_OscConfig+0x270>)
 80042ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042ce:	6013      	str	r3, [r2, #0]
 80042d0:	4b5a      	ldr	r3, [pc, #360]	; (800443c <HAL_RCC_OscConfig+0x270>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a59      	ldr	r2, [pc, #356]	; (800443c <HAL_RCC_OscConfig+0x270>)
 80042d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d013      	beq.n	800430c <HAL_RCC_OscConfig+0x140>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e4:	f7fe faa0 	bl	8002828 <HAL_GetTick>
 80042e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ea:	e008      	b.n	80042fe <HAL_RCC_OscConfig+0x132>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042ec:	f7fe fa9c 	bl	8002828 <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	2b64      	cmp	r3, #100	; 0x64
 80042f8:	d901      	bls.n	80042fe <HAL_RCC_OscConfig+0x132>
          {
            return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e2b7      	b.n	800486e <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042fe:	4b4f      	ldr	r3, [pc, #316]	; (800443c <HAL_RCC_OscConfig+0x270>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d0f0      	beq.n	80042ec <HAL_RCC_OscConfig+0x120>
 800430a:	e014      	b.n	8004336 <HAL_RCC_OscConfig+0x16a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800430c:	f7fe fa8c 	bl	8002828 <HAL_GetTick>
 8004310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004312:	e008      	b.n	8004326 <HAL_RCC_OscConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004314:	f7fe fa88 	bl	8002828 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	2b64      	cmp	r3, #100	; 0x64
 8004320:	d901      	bls.n	8004326 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e2a3      	b.n	800486e <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004326:	4b45      	ldr	r3, [pc, #276]	; (800443c <HAL_RCC_OscConfig+0x270>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d1f0      	bne.n	8004314 <HAL_RCC_OscConfig+0x148>
 8004332:	e000      	b.n	8004336 <HAL_RCC_OscConfig+0x16a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004334:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b00      	cmp	r3, #0
 8004340:	f000 8084 	beq.w	800444c <HAL_RCC_OscConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d008      	beq.n	800435e <HAL_RCC_OscConfig+0x192>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d004      	beq.n	800435e <HAL_RCC_OscConfig+0x192>
 8004354:	f240 119b 	movw	r1, #411	; 0x19b
 8004358:	4837      	ldr	r0, [pc, #220]	; (8004438 <HAL_RCC_OscConfig+0x26c>)
 800435a:	f7fd fd8a 	bl	8001e72 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	2b1f      	cmp	r3, #31
 8004364:	d904      	bls.n	8004370 <HAL_RCC_OscConfig+0x1a4>
 8004366:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 800436a:	4833      	ldr	r0, [pc, #204]	; (8004438 <HAL_RCC_OscConfig+0x26c>)
 800436c:	f7fd fd81 	bl	8001e72 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004370:	4b32      	ldr	r3, [pc, #200]	; (800443c <HAL_RCC_OscConfig+0x270>)
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f003 030c 	and.w	r3, r3, #12
 8004378:	2b00      	cmp	r3, #0
 800437a:	d00b      	beq.n	8004394 <HAL_RCC_OscConfig+0x1c8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800437c:	4b2f      	ldr	r3, [pc, #188]	; (800443c <HAL_RCC_OscConfig+0x270>)
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f003 030c 	and.w	r3, r3, #12
 8004384:	2b08      	cmp	r3, #8
 8004386:	d11c      	bne.n	80043c2 <HAL_RCC_OscConfig+0x1f6>
 8004388:	4b2c      	ldr	r3, [pc, #176]	; (800443c <HAL_RCC_OscConfig+0x270>)
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d116      	bne.n	80043c2 <HAL_RCC_OscConfig+0x1f6>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004394:	4b29      	ldr	r3, [pc, #164]	; (800443c <HAL_RCC_OscConfig+0x270>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0302 	and.w	r3, r3, #2
 800439c:	2b00      	cmp	r3, #0
 800439e:	d005      	beq.n	80043ac <HAL_RCC_OscConfig+0x1e0>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d001      	beq.n	80043ac <HAL_RCC_OscConfig+0x1e0>
      {
        return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e260      	b.n	800486e <HAL_RCC_OscConfig+0x6a2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ac:	4b23      	ldr	r3, [pc, #140]	; (800443c <HAL_RCC_OscConfig+0x270>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	00db      	lsls	r3, r3, #3
 80043ba:	4920      	ldr	r1, [pc, #128]	; (800443c <HAL_RCC_OscConfig+0x270>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043c0:	e044      	b.n	800444c <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d023      	beq.n	8004412 <HAL_RCC_OscConfig+0x246>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043ca:	4b1c      	ldr	r3, [pc, #112]	; (800443c <HAL_RCC_OscConfig+0x270>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a1b      	ldr	r2, [pc, #108]	; (800443c <HAL_RCC_OscConfig+0x270>)
 80043d0:	f043 0301 	orr.w	r3, r3, #1
 80043d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d6:	f7fe fa27 	bl	8002828 <HAL_GetTick>
 80043da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043dc:	e008      	b.n	80043f0 <HAL_RCC_OscConfig+0x224>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043de:	f7fe fa23 	bl	8002828 <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	d901      	bls.n	80043f0 <HAL_RCC_OscConfig+0x224>
          {
            return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e23e      	b.n	800486e <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043f0:	4b12      	ldr	r3, [pc, #72]	; (800443c <HAL_RCC_OscConfig+0x270>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0302 	and.w	r3, r3, #2
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d0f0      	beq.n	80043de <HAL_RCC_OscConfig+0x212>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043fc:	4b0f      	ldr	r3, [pc, #60]	; (800443c <HAL_RCC_OscConfig+0x270>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	691b      	ldr	r3, [r3, #16]
 8004408:	00db      	lsls	r3, r3, #3
 800440a:	490c      	ldr	r1, [pc, #48]	; (800443c <HAL_RCC_OscConfig+0x270>)
 800440c:	4313      	orrs	r3, r2
 800440e:	600b      	str	r3, [r1, #0]
 8004410:	e01c      	b.n	800444c <HAL_RCC_OscConfig+0x280>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004412:	4b0a      	ldr	r3, [pc, #40]	; (800443c <HAL_RCC_OscConfig+0x270>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a09      	ldr	r2, [pc, #36]	; (800443c <HAL_RCC_OscConfig+0x270>)
 8004418:	f023 0301 	bic.w	r3, r3, #1
 800441c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800441e:	f7fe fa03 	bl	8002828 <HAL_GetTick>
 8004422:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004424:	e00c      	b.n	8004440 <HAL_RCC_OscConfig+0x274>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004426:	f7fe f9ff 	bl	8002828 <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	2b02      	cmp	r3, #2
 8004432:	d905      	bls.n	8004440 <HAL_RCC_OscConfig+0x274>
          {
            return HAL_TIMEOUT;
 8004434:	2303      	movs	r3, #3
 8004436:	e21a      	b.n	800486e <HAL_RCC_OscConfig+0x6a2>
 8004438:	08013d4c 	.word	0x08013d4c
 800443c:	40023800 	.word	0x40023800
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004440:	4b7e      	ldr	r3, [pc, #504]	; (800463c <HAL_RCC_OscConfig+0x470>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0302 	and.w	r3, r3, #2
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1ec      	bne.n	8004426 <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0308 	and.w	r3, r3, #8
 8004454:	2b00      	cmp	r3, #0
 8004456:	d043      	beq.n	80044e0 <HAL_RCC_OscConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	695b      	ldr	r3, [r3, #20]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d008      	beq.n	8004472 <HAL_RCC_OscConfig+0x2a6>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	695b      	ldr	r3, [r3, #20]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d004      	beq.n	8004472 <HAL_RCC_OscConfig+0x2a6>
 8004468:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 800446c:	4874      	ldr	r0, [pc, #464]	; (8004640 <HAL_RCC_OscConfig+0x474>)
 800446e:	f7fd fd00 	bl	8001e72 <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d019      	beq.n	80044ae <HAL_RCC_OscConfig+0x2e2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800447a:	4b70      	ldr	r3, [pc, #448]	; (800463c <HAL_RCC_OscConfig+0x470>)
 800447c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800447e:	4a6f      	ldr	r2, [pc, #444]	; (800463c <HAL_RCC_OscConfig+0x470>)
 8004480:	f043 0301 	orr.w	r3, r3, #1
 8004484:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004486:	f7fe f9cf 	bl	8002828 <HAL_GetTick>
 800448a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800448c:	e008      	b.n	80044a0 <HAL_RCC_OscConfig+0x2d4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800448e:	f7fe f9cb 	bl	8002828 <HAL_GetTick>
 8004492:	4602      	mov	r2, r0
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	2b02      	cmp	r3, #2
 800449a:	d901      	bls.n	80044a0 <HAL_RCC_OscConfig+0x2d4>
        {
          return HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	e1e6      	b.n	800486e <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044a0:	4b66      	ldr	r3, [pc, #408]	; (800463c <HAL_RCC_OscConfig+0x470>)
 80044a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044a4:	f003 0302 	and.w	r3, r3, #2
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d0f0      	beq.n	800448e <HAL_RCC_OscConfig+0x2c2>
 80044ac:	e018      	b.n	80044e0 <HAL_RCC_OscConfig+0x314>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044ae:	4b63      	ldr	r3, [pc, #396]	; (800463c <HAL_RCC_OscConfig+0x470>)
 80044b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044b2:	4a62      	ldr	r2, [pc, #392]	; (800463c <HAL_RCC_OscConfig+0x470>)
 80044b4:	f023 0301 	bic.w	r3, r3, #1
 80044b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ba:	f7fe f9b5 	bl	8002828 <HAL_GetTick>
 80044be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044c0:	e008      	b.n	80044d4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044c2:	f7fe f9b1 	bl	8002828 <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d901      	bls.n	80044d4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e1cc      	b.n	800486e <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044d4:	4b59      	ldr	r3, [pc, #356]	; (800463c <HAL_RCC_OscConfig+0x470>)
 80044d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044d8:	f003 0302 	and.w	r3, r3, #2
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1f0      	bne.n	80044c2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0304 	and.w	r3, r3, #4
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	f000 80bc 	beq.w	8004666 <HAL_RCC_OscConfig+0x49a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00c      	beq.n	8004510 <HAL_RCC_OscConfig+0x344>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d008      	beq.n	8004510 <HAL_RCC_OscConfig+0x344>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	2b05      	cmp	r3, #5
 8004504:	d004      	beq.n	8004510 <HAL_RCC_OscConfig+0x344>
 8004506:	f240 2106 	movw	r1, #518	; 0x206
 800450a:	484d      	ldr	r0, [pc, #308]	; (8004640 <HAL_RCC_OscConfig+0x474>)
 800450c:	f7fd fcb1 	bl	8001e72 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004510:	4b4a      	ldr	r3, [pc, #296]	; (800463c <HAL_RCC_OscConfig+0x470>)
 8004512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d10d      	bne.n	8004538 <HAL_RCC_OscConfig+0x36c>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800451c:	4b47      	ldr	r3, [pc, #284]	; (800463c <HAL_RCC_OscConfig+0x470>)
 800451e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004520:	4a46      	ldr	r2, [pc, #280]	; (800463c <HAL_RCC_OscConfig+0x470>)
 8004522:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004526:	6413      	str	r3, [r2, #64]	; 0x40
 8004528:	4b44      	ldr	r3, [pc, #272]	; (800463c <HAL_RCC_OscConfig+0x470>)
 800452a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004530:	60bb      	str	r3, [r7, #8]
 8004532:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004534:	2301      	movs	r3, #1
 8004536:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004538:	4b42      	ldr	r3, [pc, #264]	; (8004644 <HAL_RCC_OscConfig+0x478>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004540:	2b00      	cmp	r3, #0
 8004542:	d118      	bne.n	8004576 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004544:	4b3f      	ldr	r3, [pc, #252]	; (8004644 <HAL_RCC_OscConfig+0x478>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a3e      	ldr	r2, [pc, #248]	; (8004644 <HAL_RCC_OscConfig+0x478>)
 800454a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800454e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004550:	f7fe f96a 	bl	8002828 <HAL_GetTick>
 8004554:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004556:	e008      	b.n	800456a <HAL_RCC_OscConfig+0x39e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004558:	f7fe f966 	bl	8002828 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	2b64      	cmp	r3, #100	; 0x64
 8004564:	d901      	bls.n	800456a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e181      	b.n	800486e <HAL_RCC_OscConfig+0x6a2>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800456a:	4b36      	ldr	r3, [pc, #216]	; (8004644 <HAL_RCC_OscConfig+0x478>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004572:	2b00      	cmp	r3, #0
 8004574:	d0f0      	beq.n	8004558 <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	2b01      	cmp	r3, #1
 800457c:	d106      	bne.n	800458c <HAL_RCC_OscConfig+0x3c0>
 800457e:	4b2f      	ldr	r3, [pc, #188]	; (800463c <HAL_RCC_OscConfig+0x470>)
 8004580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004582:	4a2e      	ldr	r2, [pc, #184]	; (800463c <HAL_RCC_OscConfig+0x470>)
 8004584:	f043 0301 	orr.w	r3, r3, #1
 8004588:	6713      	str	r3, [r2, #112]	; 0x70
 800458a:	e02d      	b.n	80045e8 <HAL_RCC_OscConfig+0x41c>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d10c      	bne.n	80045ae <HAL_RCC_OscConfig+0x3e2>
 8004594:	4b29      	ldr	r3, [pc, #164]	; (800463c <HAL_RCC_OscConfig+0x470>)
 8004596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004598:	4a28      	ldr	r2, [pc, #160]	; (800463c <HAL_RCC_OscConfig+0x470>)
 800459a:	f023 0301 	bic.w	r3, r3, #1
 800459e:	6713      	str	r3, [r2, #112]	; 0x70
 80045a0:	4b26      	ldr	r3, [pc, #152]	; (800463c <HAL_RCC_OscConfig+0x470>)
 80045a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a4:	4a25      	ldr	r2, [pc, #148]	; (800463c <HAL_RCC_OscConfig+0x470>)
 80045a6:	f023 0304 	bic.w	r3, r3, #4
 80045aa:	6713      	str	r3, [r2, #112]	; 0x70
 80045ac:	e01c      	b.n	80045e8 <HAL_RCC_OscConfig+0x41c>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	2b05      	cmp	r3, #5
 80045b4:	d10c      	bne.n	80045d0 <HAL_RCC_OscConfig+0x404>
 80045b6:	4b21      	ldr	r3, [pc, #132]	; (800463c <HAL_RCC_OscConfig+0x470>)
 80045b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ba:	4a20      	ldr	r2, [pc, #128]	; (800463c <HAL_RCC_OscConfig+0x470>)
 80045bc:	f043 0304 	orr.w	r3, r3, #4
 80045c0:	6713      	str	r3, [r2, #112]	; 0x70
 80045c2:	4b1e      	ldr	r3, [pc, #120]	; (800463c <HAL_RCC_OscConfig+0x470>)
 80045c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c6:	4a1d      	ldr	r2, [pc, #116]	; (800463c <HAL_RCC_OscConfig+0x470>)
 80045c8:	f043 0301 	orr.w	r3, r3, #1
 80045cc:	6713      	str	r3, [r2, #112]	; 0x70
 80045ce:	e00b      	b.n	80045e8 <HAL_RCC_OscConfig+0x41c>
 80045d0:	4b1a      	ldr	r3, [pc, #104]	; (800463c <HAL_RCC_OscConfig+0x470>)
 80045d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d4:	4a19      	ldr	r2, [pc, #100]	; (800463c <HAL_RCC_OscConfig+0x470>)
 80045d6:	f023 0301 	bic.w	r3, r3, #1
 80045da:	6713      	str	r3, [r2, #112]	; 0x70
 80045dc:	4b17      	ldr	r3, [pc, #92]	; (800463c <HAL_RCC_OscConfig+0x470>)
 80045de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e0:	4a16      	ldr	r2, [pc, #88]	; (800463c <HAL_RCC_OscConfig+0x470>)
 80045e2:	f023 0304 	bic.w	r3, r3, #4
 80045e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d015      	beq.n	800461c <HAL_RCC_OscConfig+0x450>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045f0:	f7fe f91a 	bl	8002828 <HAL_GetTick>
 80045f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045f6:	e00a      	b.n	800460e <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045f8:	f7fe f916 	bl	8002828 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	f241 3288 	movw	r2, #5000	; 0x1388
 8004606:	4293      	cmp	r3, r2
 8004608:	d901      	bls.n	800460e <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e12f      	b.n	800486e <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800460e:	4b0b      	ldr	r3, [pc, #44]	; (800463c <HAL_RCC_OscConfig+0x470>)
 8004610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d0ee      	beq.n	80045f8 <HAL_RCC_OscConfig+0x42c>
 800461a:	e01b      	b.n	8004654 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800461c:	f7fe f904 	bl	8002828 <HAL_GetTick>
 8004620:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004622:	e011      	b.n	8004648 <HAL_RCC_OscConfig+0x47c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004624:	f7fe f900 	bl	8002828 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004632:	4293      	cmp	r3, r2
 8004634:	d908      	bls.n	8004648 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e119      	b.n	800486e <HAL_RCC_OscConfig+0x6a2>
 800463a:	bf00      	nop
 800463c:	40023800 	.word	0x40023800
 8004640:	08013d4c 	.word	0x08013d4c
 8004644:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004648:	4b8b      	ldr	r3, [pc, #556]	; (8004878 <HAL_RCC_OscConfig+0x6ac>)
 800464a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800464c:	f003 0302 	and.w	r3, r3, #2
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1e7      	bne.n	8004624 <HAL_RCC_OscConfig+0x458>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004654:	7dfb      	ldrb	r3, [r7, #23]
 8004656:	2b01      	cmp	r3, #1
 8004658:	d105      	bne.n	8004666 <HAL_RCC_OscConfig+0x49a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800465a:	4b87      	ldr	r3, [pc, #540]	; (8004878 <HAL_RCC_OscConfig+0x6ac>)
 800465c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465e:	4a86      	ldr	r2, [pc, #536]	; (8004878 <HAL_RCC_OscConfig+0x6ac>)
 8004660:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004664:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00c      	beq.n	8004688 <HAL_RCC_OscConfig+0x4bc>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	699b      	ldr	r3, [r3, #24]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d008      	beq.n	8004688 <HAL_RCC_OscConfig+0x4bc>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	699b      	ldr	r3, [r3, #24]
 800467a:	2b02      	cmp	r3, #2
 800467c:	d004      	beq.n	8004688 <HAL_RCC_OscConfig+0x4bc>
 800467e:	f240 214a 	movw	r1, #586	; 0x24a
 8004682:	487e      	ldr	r0, [pc, #504]	; (800487c <HAL_RCC_OscConfig+0x6b0>)
 8004684:	f7fd fbf5 	bl	8001e72 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	2b00      	cmp	r3, #0
 800468e:	f000 80ed 	beq.w	800486c <HAL_RCC_OscConfig+0x6a0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004692:	4b79      	ldr	r3, [pc, #484]	; (8004878 <HAL_RCC_OscConfig+0x6ac>)
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f003 030c 	and.w	r3, r3, #12
 800469a:	2b08      	cmp	r3, #8
 800469c:	f000 80b4 	beq.w	8004808 <HAL_RCC_OscConfig+0x63c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	699b      	ldr	r3, [r3, #24]
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	f040 8095 	bne.w	80047d4 <HAL_RCC_OscConfig+0x608>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	69db      	ldr	r3, [r3, #28]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d009      	beq.n	80046c6 <HAL_RCC_OscConfig+0x4fa>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	69db      	ldr	r3, [r3, #28]
 80046b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046ba:	d004      	beq.n	80046c6 <HAL_RCC_OscConfig+0x4fa>
 80046bc:	f240 2153 	movw	r1, #595	; 0x253
 80046c0:	486e      	ldr	r0, [pc, #440]	; (800487c <HAL_RCC_OscConfig+0x6b0>)
 80046c2:	f7fd fbd6 	bl	8001e72 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a1b      	ldr	r3, [r3, #32]
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d903      	bls.n	80046d6 <HAL_RCC_OscConfig+0x50a>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a1b      	ldr	r3, [r3, #32]
 80046d2:	2b3f      	cmp	r3, #63	; 0x3f
 80046d4:	d904      	bls.n	80046e0 <HAL_RCC_OscConfig+0x514>
 80046d6:	f44f 7115 	mov.w	r1, #596	; 0x254
 80046da:	4868      	ldr	r0, [pc, #416]	; (800487c <HAL_RCC_OscConfig+0x6b0>)
 80046dc:	f7fd fbc9 	bl	8001e72 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e4:	2b31      	cmp	r3, #49	; 0x31
 80046e6:	d904      	bls.n	80046f2 <HAL_RCC_OscConfig+0x526>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ec:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80046f0:	d904      	bls.n	80046fc <HAL_RCC_OscConfig+0x530>
 80046f2:	f240 2155 	movw	r1, #597	; 0x255
 80046f6:	4861      	ldr	r0, [pc, #388]	; (800487c <HAL_RCC_OscConfig+0x6b0>)
 80046f8:	f7fd fbbb 	bl	8001e72 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004700:	2b02      	cmp	r3, #2
 8004702:	d010      	beq.n	8004726 <HAL_RCC_OscConfig+0x55a>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004708:	2b04      	cmp	r3, #4
 800470a:	d00c      	beq.n	8004726 <HAL_RCC_OscConfig+0x55a>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004710:	2b06      	cmp	r3, #6
 8004712:	d008      	beq.n	8004726 <HAL_RCC_OscConfig+0x55a>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004718:	2b08      	cmp	r3, #8
 800471a:	d004      	beq.n	8004726 <HAL_RCC_OscConfig+0x55a>
 800471c:	f240 2156 	movw	r1, #598	; 0x256
 8004720:	4856      	ldr	r0, [pc, #344]	; (800487c <HAL_RCC_OscConfig+0x6b0>)
 8004722:	f7fd fba6 	bl	8001e72 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800472a:	2b01      	cmp	r3, #1
 800472c:	d903      	bls.n	8004736 <HAL_RCC_OscConfig+0x56a>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004732:	2b0f      	cmp	r3, #15
 8004734:	d904      	bls.n	8004740 <HAL_RCC_OscConfig+0x574>
 8004736:	f240 2157 	movw	r1, #599	; 0x257
 800473a:	4850      	ldr	r0, [pc, #320]	; (800487c <HAL_RCC_OscConfig+0x6b0>)
 800473c:	f7fd fb99 	bl	8001e72 <assert_failed>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004740:	4b4d      	ldr	r3, [pc, #308]	; (8004878 <HAL_RCC_OscConfig+0x6ac>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a4c      	ldr	r2, [pc, #304]	; (8004878 <HAL_RCC_OscConfig+0x6ac>)
 8004746:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800474a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800474c:	f7fe f86c 	bl	8002828 <HAL_GetTick>
 8004750:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004752:	e008      	b.n	8004766 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004754:	f7fe f868 	bl	8002828 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b02      	cmp	r3, #2
 8004760:	d901      	bls.n	8004766 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e083      	b.n	800486e <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004766:	4b44      	ldr	r3, [pc, #272]	; (8004878 <HAL_RCC_OscConfig+0x6ac>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d1f0      	bne.n	8004754 <HAL_RCC_OscConfig+0x588>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	69da      	ldr	r2, [r3, #28]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a1b      	ldr	r3, [r3, #32]
 800477a:	431a      	orrs	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004780:	019b      	lsls	r3, r3, #6
 8004782:	431a      	orrs	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004788:	085b      	lsrs	r3, r3, #1
 800478a:	3b01      	subs	r3, #1
 800478c:	041b      	lsls	r3, r3, #16
 800478e:	431a      	orrs	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004794:	061b      	lsls	r3, r3, #24
 8004796:	4313      	orrs	r3, r2
 8004798:	4a37      	ldr	r2, [pc, #220]	; (8004878 <HAL_RCC_OscConfig+0x6ac>)
 800479a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800479e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047a0:	4b35      	ldr	r3, [pc, #212]	; (8004878 <HAL_RCC_OscConfig+0x6ac>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a34      	ldr	r2, [pc, #208]	; (8004878 <HAL_RCC_OscConfig+0x6ac>)
 80047a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ac:	f7fe f83c 	bl	8002828 <HAL_GetTick>
 80047b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047b2:	e008      	b.n	80047c6 <HAL_RCC_OscConfig+0x5fa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047b4:	f7fe f838 	bl	8002828 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_OscConfig+0x5fa>
          {
            return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e053      	b.n	800486e <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047c6:	4b2c      	ldr	r3, [pc, #176]	; (8004878 <HAL_RCC_OscConfig+0x6ac>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d0f0      	beq.n	80047b4 <HAL_RCC_OscConfig+0x5e8>
 80047d2:	e04b      	b.n	800486c <HAL_RCC_OscConfig+0x6a0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047d4:	4b28      	ldr	r3, [pc, #160]	; (8004878 <HAL_RCC_OscConfig+0x6ac>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a27      	ldr	r2, [pc, #156]	; (8004878 <HAL_RCC_OscConfig+0x6ac>)
 80047da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e0:	f7fe f822 	bl	8002828 <HAL_GetTick>
 80047e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047e6:	e008      	b.n	80047fa <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047e8:	f7fe f81e 	bl	8002828 <HAL_GetTick>
 80047ec:	4602      	mov	r2, r0
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d901      	bls.n	80047fa <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e039      	b.n	800486e <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047fa:	4b1f      	ldr	r3, [pc, #124]	; (8004878 <HAL_RCC_OscConfig+0x6ac>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1f0      	bne.n	80047e8 <HAL_RCC_OscConfig+0x61c>
 8004806:	e031      	b.n	800486c <HAL_RCC_OscConfig+0x6a0>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004808:	4b1b      	ldr	r3, [pc, #108]	; (8004878 <HAL_RCC_OscConfig+0x6ac>)
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d028      	beq.n	8004868 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004820:	429a      	cmp	r2, r3
 8004822:	d121      	bne.n	8004868 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800482e:	429a      	cmp	r2, r3
 8004830:	d11a      	bne.n	8004868 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004838:	4013      	ands	r3, r2
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800483e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004840:	4293      	cmp	r3, r2
 8004842:	d111      	bne.n	8004868 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800484e:	085b      	lsrs	r3, r3, #1
 8004850:	3b01      	subs	r3, #1
 8004852:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004854:	429a      	cmp	r2, r3
 8004856:	d107      	bne.n	8004868 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004862:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004864:	429a      	cmp	r2, r3
 8004866:	d001      	beq.n	800486c <HAL_RCC_OscConfig+0x6a0>
#endif
      {
        return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e000      	b.n	800486e <HAL_RCC_OscConfig+0x6a2>
      }
    }
  }
  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3718      	adds	r7, #24
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	40023800 	.word	0x40023800
 800487c:	08013d4c 	.word	0x08013d4c

08004880 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800488a:	2300      	movs	r3, #0
 800488c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d101      	bne.n	8004898 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e18c      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x332>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d003      	beq.n	80048a8 <HAL_RCC_ClockConfig+0x28>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2b0f      	cmp	r3, #15
 80048a6:	d904      	bls.n	80048b2 <HAL_RCC_ClockConfig+0x32>
 80048a8:	f240 21dd 	movw	r1, #733	; 0x2dd
 80048ac:	4887      	ldr	r0, [pc, #540]	; (8004acc <HAL_RCC_ClockConfig+0x24c>)
 80048ae:	f7fd fae0 	bl	8001e72 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d031      	beq.n	800491c <HAL_RCC_ClockConfig+0x9c>
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d02e      	beq.n	800491c <HAL_RCC_ClockConfig+0x9c>
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d02b      	beq.n	800491c <HAL_RCC_ClockConfig+0x9c>
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	2b03      	cmp	r3, #3
 80048c8:	d028      	beq.n	800491c <HAL_RCC_ClockConfig+0x9c>
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	2b04      	cmp	r3, #4
 80048ce:	d025      	beq.n	800491c <HAL_RCC_ClockConfig+0x9c>
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	2b05      	cmp	r3, #5
 80048d4:	d022      	beq.n	800491c <HAL_RCC_ClockConfig+0x9c>
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	2b06      	cmp	r3, #6
 80048da:	d01f      	beq.n	800491c <HAL_RCC_ClockConfig+0x9c>
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	2b07      	cmp	r3, #7
 80048e0:	d01c      	beq.n	800491c <HAL_RCC_ClockConfig+0x9c>
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	2b08      	cmp	r3, #8
 80048e6:	d019      	beq.n	800491c <HAL_RCC_ClockConfig+0x9c>
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	2b09      	cmp	r3, #9
 80048ec:	d016      	beq.n	800491c <HAL_RCC_ClockConfig+0x9c>
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	2b0a      	cmp	r3, #10
 80048f2:	d013      	beq.n	800491c <HAL_RCC_ClockConfig+0x9c>
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	2b0b      	cmp	r3, #11
 80048f8:	d010      	beq.n	800491c <HAL_RCC_ClockConfig+0x9c>
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	2b0c      	cmp	r3, #12
 80048fe:	d00d      	beq.n	800491c <HAL_RCC_ClockConfig+0x9c>
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	2b0d      	cmp	r3, #13
 8004904:	d00a      	beq.n	800491c <HAL_RCC_ClockConfig+0x9c>
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	2b0e      	cmp	r3, #14
 800490a:	d007      	beq.n	800491c <HAL_RCC_ClockConfig+0x9c>
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	2b0f      	cmp	r3, #15
 8004910:	d004      	beq.n	800491c <HAL_RCC_ClockConfig+0x9c>
 8004912:	f240 21de 	movw	r1, #734	; 0x2de
 8004916:	486d      	ldr	r0, [pc, #436]	; (8004acc <HAL_RCC_ClockConfig+0x24c>)
 8004918:	f7fd faab 	bl	8001e72 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800491c:	4b6c      	ldr	r3, [pc, #432]	; (8004ad0 <HAL_RCC_ClockConfig+0x250>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 030f 	and.w	r3, r3, #15
 8004924:	683a      	ldr	r2, [r7, #0]
 8004926:	429a      	cmp	r2, r3
 8004928:	d910      	bls.n	800494c <HAL_RCC_ClockConfig+0xcc>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800492a:	4b69      	ldr	r3, [pc, #420]	; (8004ad0 <HAL_RCC_ClockConfig+0x250>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f023 020f 	bic.w	r2, r3, #15
 8004932:	4967      	ldr	r1, [pc, #412]	; (8004ad0 <HAL_RCC_ClockConfig+0x250>)
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	4313      	orrs	r3, r2
 8004938:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800493a:	4b65      	ldr	r3, [pc, #404]	; (8004ad0 <HAL_RCC_ClockConfig+0x250>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 030f 	and.w	r3, r3, #15
 8004942:	683a      	ldr	r2, [r7, #0]
 8004944:	429a      	cmp	r2, r3
 8004946:	d001      	beq.n	800494c <HAL_RCC_ClockConfig+0xcc>
    {
      return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e132      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x332>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0302 	and.w	r3, r3, #2
 8004954:	2b00      	cmp	r3, #0
 8004956:	d049      	beq.n	80049ec <HAL_RCC_ClockConfig+0x16c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0304 	and.w	r3, r3, #4
 8004960:	2b00      	cmp	r3, #0
 8004962:	d005      	beq.n	8004970 <HAL_RCC_ClockConfig+0xf0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004964:	4b5b      	ldr	r3, [pc, #364]	; (8004ad4 <HAL_RCC_ClockConfig+0x254>)
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	4a5a      	ldr	r2, [pc, #360]	; (8004ad4 <HAL_RCC_ClockConfig+0x254>)
 800496a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800496e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0308 	and.w	r3, r3, #8
 8004978:	2b00      	cmp	r3, #0
 800497a:	d005      	beq.n	8004988 <HAL_RCC_ClockConfig+0x108>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800497c:	4b55      	ldr	r3, [pc, #340]	; (8004ad4 <HAL_RCC_ClockConfig+0x254>)
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	4a54      	ldr	r2, [pc, #336]	; (8004ad4 <HAL_RCC_ClockConfig+0x254>)
 8004982:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004986:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d024      	beq.n	80049da <HAL_RCC_ClockConfig+0x15a>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	2b80      	cmp	r3, #128	; 0x80
 8004996:	d020      	beq.n	80049da <HAL_RCC_ClockConfig+0x15a>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	2b90      	cmp	r3, #144	; 0x90
 800499e:	d01c      	beq.n	80049da <HAL_RCC_ClockConfig+0x15a>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	2ba0      	cmp	r3, #160	; 0xa0
 80049a6:	d018      	beq.n	80049da <HAL_RCC_ClockConfig+0x15a>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	2bb0      	cmp	r3, #176	; 0xb0
 80049ae:	d014      	beq.n	80049da <HAL_RCC_ClockConfig+0x15a>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	2bc0      	cmp	r3, #192	; 0xc0
 80049b6:	d010      	beq.n	80049da <HAL_RCC_ClockConfig+0x15a>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	2bd0      	cmp	r3, #208	; 0xd0
 80049be:	d00c      	beq.n	80049da <HAL_RCC_ClockConfig+0x15a>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	2be0      	cmp	r3, #224	; 0xe0
 80049c6:	d008      	beq.n	80049da <HAL_RCC_ClockConfig+0x15a>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	2bf0      	cmp	r3, #240	; 0xf0
 80049ce:	d004      	beq.n	80049da <HAL_RCC_ClockConfig+0x15a>
 80049d0:	f240 3102 	movw	r1, #770	; 0x302
 80049d4:	483d      	ldr	r0, [pc, #244]	; (8004acc <HAL_RCC_ClockConfig+0x24c>)
 80049d6:	f7fd fa4c 	bl	8001e72 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049da:	4b3e      	ldr	r3, [pc, #248]	; (8004ad4 <HAL_RCC_ClockConfig+0x254>)
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	493b      	ldr	r1, [pc, #236]	; (8004ad4 <HAL_RCC_ClockConfig+0x254>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0301 	and.w	r3, r3, #1
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d051      	beq.n	8004a9c <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00c      	beq.n	8004a1a <HAL_RCC_ClockConfig+0x19a>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d008      	beq.n	8004a1a <HAL_RCC_ClockConfig+0x19a>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d004      	beq.n	8004a1a <HAL_RCC_ClockConfig+0x19a>
 8004a10:	f240 3109 	movw	r1, #777	; 0x309
 8004a14:	482d      	ldr	r0, [pc, #180]	; (8004acc <HAL_RCC_ClockConfig+0x24c>)
 8004a16:	f7fd fa2c 	bl	8001e72 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d107      	bne.n	8004a32 <HAL_RCC_ClockConfig+0x1b2>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a22:	4b2c      	ldr	r3, [pc, #176]	; (8004ad4 <HAL_RCC_ClockConfig+0x254>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d115      	bne.n	8004a5a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e0bf      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x332>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d107      	bne.n	8004a4a <HAL_RCC_ClockConfig+0x1ca>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a3a:	4b26      	ldr	r3, [pc, #152]	; (8004ad4 <HAL_RCC_ClockConfig+0x254>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d109      	bne.n	8004a5a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e0b3      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x332>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a4a:	4b22      	ldr	r3, [pc, #136]	; (8004ad4 <HAL_RCC_ClockConfig+0x254>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0302 	and.w	r3, r3, #2
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d101      	bne.n	8004a5a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e0ab      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x332>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a5a:	4b1e      	ldr	r3, [pc, #120]	; (8004ad4 <HAL_RCC_ClockConfig+0x254>)
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	f023 0203 	bic.w	r2, r3, #3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	491b      	ldr	r1, [pc, #108]	; (8004ad4 <HAL_RCC_ClockConfig+0x254>)
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a6c:	f7fd fedc 	bl	8002828 <HAL_GetTick>
 8004a70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a72:	e00a      	b.n	8004a8a <HAL_RCC_ClockConfig+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a74:	f7fd fed8 	bl	8002828 <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d901      	bls.n	8004a8a <HAL_RCC_ClockConfig+0x20a>
      {
        return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e093      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x332>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a8a:	4b12      	ldr	r3, [pc, #72]	; (8004ad4 <HAL_RCC_ClockConfig+0x254>)
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f003 020c 	and.w	r2, r3, #12
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d1eb      	bne.n	8004a74 <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a9c:	4b0c      	ldr	r3, [pc, #48]	; (8004ad0 <HAL_RCC_ClockConfig+0x250>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 030f 	and.w	r3, r3, #15
 8004aa4:	683a      	ldr	r2, [r7, #0]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d216      	bcs.n	8004ad8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aaa:	4b09      	ldr	r3, [pc, #36]	; (8004ad0 <HAL_RCC_ClockConfig+0x250>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f023 020f 	bic.w	r2, r3, #15
 8004ab2:	4907      	ldr	r1, [pc, #28]	; (8004ad0 <HAL_RCC_ClockConfig+0x250>)
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aba:	4b05      	ldr	r3, [pc, #20]	; (8004ad0 <HAL_RCC_ClockConfig+0x250>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 030f 	and.w	r3, r3, #15
 8004ac2:	683a      	ldr	r2, [r7, #0]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d007      	beq.n	8004ad8 <HAL_RCC_ClockConfig+0x258>
    {
      return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e072      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x332>
 8004acc:	08013d4c 	.word	0x08013d4c
 8004ad0:	40023c00 	.word	0x40023c00
 8004ad4:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0304 	and.w	r3, r3, #4
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d025      	beq.n	8004b30 <HAL_RCC_ClockConfig+0x2b0>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d018      	beq.n	8004b1e <HAL_RCC_ClockConfig+0x29e>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004af4:	d013      	beq.n	8004b1e <HAL_RCC_ClockConfig+0x29e>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004afe:	d00e      	beq.n	8004b1e <HAL_RCC_ClockConfig+0x29e>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004b08:	d009      	beq.n	8004b1e <HAL_RCC_ClockConfig+0x29e>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8004b12:	d004      	beq.n	8004b1e <HAL_RCC_ClockConfig+0x29e>
 8004b14:	f240 3146 	movw	r1, #838	; 0x346
 8004b18:	4828      	ldr	r0, [pc, #160]	; (8004bbc <HAL_RCC_ClockConfig+0x33c>)
 8004b1a:	f7fd f9aa 	bl	8001e72 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b1e:	4b28      	ldr	r3, [pc, #160]	; (8004bc0 <HAL_RCC_ClockConfig+0x340>)
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	4925      	ldr	r1, [pc, #148]	; (8004bc0 <HAL_RCC_ClockConfig+0x340>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0308 	and.w	r3, r3, #8
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d026      	beq.n	8004b8a <HAL_RCC_ClockConfig+0x30a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	691b      	ldr	r3, [r3, #16]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d018      	beq.n	8004b76 <HAL_RCC_ClockConfig+0x2f6>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b4c:	d013      	beq.n	8004b76 <HAL_RCC_ClockConfig+0x2f6>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004b56:	d00e      	beq.n	8004b76 <HAL_RCC_ClockConfig+0x2f6>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004b60:	d009      	beq.n	8004b76 <HAL_RCC_ClockConfig+0x2f6>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8004b6a:	d004      	beq.n	8004b76 <HAL_RCC_ClockConfig+0x2f6>
 8004b6c:	f240 314d 	movw	r1, #845	; 0x34d
 8004b70:	4812      	ldr	r0, [pc, #72]	; (8004bbc <HAL_RCC_ClockConfig+0x33c>)
 8004b72:	f7fd f97e 	bl	8001e72 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b76:	4b12      	ldr	r3, [pc, #72]	; (8004bc0 <HAL_RCC_ClockConfig+0x340>)
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	00db      	lsls	r3, r3, #3
 8004b84:	490e      	ldr	r1, [pc, #56]	; (8004bc0 <HAL_RCC_ClockConfig+0x340>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b8a:	f000 f821 	bl	8004bd0 <HAL_RCC_GetSysClockFreq>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	4b0b      	ldr	r3, [pc, #44]	; (8004bc0 <HAL_RCC_ClockConfig+0x340>)
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	091b      	lsrs	r3, r3, #4
 8004b96:	f003 030f 	and.w	r3, r3, #15
 8004b9a:	490a      	ldr	r1, [pc, #40]	; (8004bc4 <HAL_RCC_ClockConfig+0x344>)
 8004b9c:	5ccb      	ldrb	r3, [r1, r3]
 8004b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8004ba2:	4a09      	ldr	r2, [pc, #36]	; (8004bc8 <HAL_RCC_ClockConfig+0x348>)
 8004ba4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004ba6:	4b09      	ldr	r3, [pc, #36]	; (8004bcc <HAL_RCC_ClockConfig+0x34c>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7fd fdf8 	bl	80027a0 <HAL_InitTick>

  return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3710      	adds	r7, #16
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	08013d4c 	.word	0x08013d4c
 8004bc0:	40023800 	.word	0x40023800
 8004bc4:	08013e7c 	.word	0x08013e7c
 8004bc8:	20000000 	.word	0x20000000
 8004bcc:	20000004 	.word	0x20000004

08004bd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bd4:	b090      	sub	sp, #64	; 0x40
 8004bd6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	637b      	str	r3, [r7, #52]	; 0x34
 8004bdc:	2300      	movs	r3, #0
 8004bde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004be0:	2300      	movs	r3, #0
 8004be2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8004be4:	2300      	movs	r3, #0
 8004be6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004be8:	4b59      	ldr	r3, [pc, #356]	; (8004d50 <HAL_RCC_GetSysClockFreq+0x180>)
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f003 030c 	and.w	r3, r3, #12
 8004bf0:	2b08      	cmp	r3, #8
 8004bf2:	d00d      	beq.n	8004c10 <HAL_RCC_GetSysClockFreq+0x40>
 8004bf4:	2b08      	cmp	r3, #8
 8004bf6:	f200 80a1 	bhi.w	8004d3c <HAL_RCC_GetSysClockFreq+0x16c>
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d002      	beq.n	8004c04 <HAL_RCC_GetSysClockFreq+0x34>
 8004bfe:	2b04      	cmp	r3, #4
 8004c00:	d003      	beq.n	8004c0a <HAL_RCC_GetSysClockFreq+0x3a>
 8004c02:	e09b      	b.n	8004d3c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c04:	4b53      	ldr	r3, [pc, #332]	; (8004d54 <HAL_RCC_GetSysClockFreq+0x184>)
 8004c06:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004c08:	e09b      	b.n	8004d42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c0a:	4b53      	ldr	r3, [pc, #332]	; (8004d58 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c0c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004c0e:	e098      	b.n	8004d42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c10:	4b4f      	ldr	r3, [pc, #316]	; (8004d50 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c18:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004c1a:	4b4d      	ldr	r3, [pc, #308]	; (8004d50 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d028      	beq.n	8004c78 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c26:	4b4a      	ldr	r3, [pc, #296]	; (8004d50 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	099b      	lsrs	r3, r3, #6
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	623b      	str	r3, [r7, #32]
 8004c30:	627a      	str	r2, [r7, #36]	; 0x24
 8004c32:	6a3b      	ldr	r3, [r7, #32]
 8004c34:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004c38:	2100      	movs	r1, #0
 8004c3a:	4b47      	ldr	r3, [pc, #284]	; (8004d58 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c3c:	fb03 f201 	mul.w	r2, r3, r1
 8004c40:	2300      	movs	r3, #0
 8004c42:	fb00 f303 	mul.w	r3, r0, r3
 8004c46:	4413      	add	r3, r2
 8004c48:	4a43      	ldr	r2, [pc, #268]	; (8004d58 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c4a:	fba0 1202 	umull	r1, r2, r0, r2
 8004c4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c50:	460a      	mov	r2, r1
 8004c52:	62ba      	str	r2, [r7, #40]	; 0x28
 8004c54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c56:	4413      	add	r3, r2
 8004c58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	61bb      	str	r3, [r7, #24]
 8004c60:	61fa      	str	r2, [r7, #28]
 8004c62:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c66:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004c6a:	f7fc f83d 	bl	8000ce8 <__aeabi_uldivmod>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	460b      	mov	r3, r1
 8004c72:	4613      	mov	r3, r2
 8004c74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c76:	e053      	b.n	8004d20 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c78:	4b35      	ldr	r3, [pc, #212]	; (8004d50 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	099b      	lsrs	r3, r3, #6
 8004c7e:	2200      	movs	r2, #0
 8004c80:	613b      	str	r3, [r7, #16]
 8004c82:	617a      	str	r2, [r7, #20]
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004c8a:	f04f 0b00 	mov.w	fp, #0
 8004c8e:	4652      	mov	r2, sl
 8004c90:	465b      	mov	r3, fp
 8004c92:	f04f 0000 	mov.w	r0, #0
 8004c96:	f04f 0100 	mov.w	r1, #0
 8004c9a:	0159      	lsls	r1, r3, #5
 8004c9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ca0:	0150      	lsls	r0, r2, #5
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	ebb2 080a 	subs.w	r8, r2, sl
 8004caa:	eb63 090b 	sbc.w	r9, r3, fp
 8004cae:	f04f 0200 	mov.w	r2, #0
 8004cb2:	f04f 0300 	mov.w	r3, #0
 8004cb6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004cba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004cbe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004cc2:	ebb2 0408 	subs.w	r4, r2, r8
 8004cc6:	eb63 0509 	sbc.w	r5, r3, r9
 8004cca:	f04f 0200 	mov.w	r2, #0
 8004cce:	f04f 0300 	mov.w	r3, #0
 8004cd2:	00eb      	lsls	r3, r5, #3
 8004cd4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cd8:	00e2      	lsls	r2, r4, #3
 8004cda:	4614      	mov	r4, r2
 8004cdc:	461d      	mov	r5, r3
 8004cde:	eb14 030a 	adds.w	r3, r4, sl
 8004ce2:	603b      	str	r3, [r7, #0]
 8004ce4:	eb45 030b 	adc.w	r3, r5, fp
 8004ce8:	607b      	str	r3, [r7, #4]
 8004cea:	f04f 0200 	mov.w	r2, #0
 8004cee:	f04f 0300 	mov.w	r3, #0
 8004cf2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004cf6:	4629      	mov	r1, r5
 8004cf8:	028b      	lsls	r3, r1, #10
 8004cfa:	4621      	mov	r1, r4
 8004cfc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d00:	4621      	mov	r1, r4
 8004d02:	028a      	lsls	r2, r1, #10
 8004d04:	4610      	mov	r0, r2
 8004d06:	4619      	mov	r1, r3
 8004d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	60bb      	str	r3, [r7, #8]
 8004d0e:	60fa      	str	r2, [r7, #12]
 8004d10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d14:	f7fb ffe8 	bl	8000ce8 <__aeabi_uldivmod>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004d20:	4b0b      	ldr	r3, [pc, #44]	; (8004d50 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	0c1b      	lsrs	r3, r3, #16
 8004d26:	f003 0303 	and.w	r3, r3, #3
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	005b      	lsls	r3, r3, #1
 8004d2e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8004d30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d38:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004d3a:	e002      	b.n	8004d42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d3c:	4b05      	ldr	r3, [pc, #20]	; (8004d54 <HAL_RCC_GetSysClockFreq+0x184>)
 8004d3e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004d40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3740      	adds	r7, #64	; 0x40
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d4e:	bf00      	nop
 8004d50:	40023800 	.word	0x40023800
 8004d54:	00f42400 	.word	0x00f42400
 8004d58:	017d7840 	.word	0x017d7840

08004d5c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d60:	4b03      	ldr	r3, [pc, #12]	; (8004d70 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d62:	681b      	ldr	r3, [r3, #0]
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	20000000 	.word	0x20000000

08004d74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d78:	f7ff fff0 	bl	8004d5c <HAL_RCC_GetHCLKFreq>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	4b05      	ldr	r3, [pc, #20]	; (8004d94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	0a9b      	lsrs	r3, r3, #10
 8004d84:	f003 0307 	and.w	r3, r3, #7
 8004d88:	4903      	ldr	r1, [pc, #12]	; (8004d98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d8a:	5ccb      	ldrb	r3, [r1, r3]
 8004d8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	40023800 	.word	0x40023800
 8004d98:	08013e8c 	.word	0x08013e8c

08004d9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004da0:	f7ff ffdc 	bl	8004d5c <HAL_RCC_GetHCLKFreq>
 8004da4:	4602      	mov	r2, r0
 8004da6:	4b05      	ldr	r3, [pc, #20]	; (8004dbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	0b5b      	lsrs	r3, r3, #13
 8004dac:	f003 0307 	and.w	r3, r3, #7
 8004db0:	4903      	ldr	r1, [pc, #12]	; (8004dc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004db2:	5ccb      	ldrb	r3, [r1, r3]
 8004db4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	40023800 	.word	0x40023800
 8004dc0:	08013e8c 	.word	0x08013e8c

08004dc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b088      	sub	sp, #32
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0301 	and.w	r3, r3, #1
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f040 8089 	bne.w	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0308 	and.w	r3, r3, #8
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	f040 8082 	bne.w	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0310 	and.w	r3, r3, #16
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d17b      	bne.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d175      	bne.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d16f      	bne.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d169      	bne.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d163      	bne.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d15d      	bne.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d157      	bne.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d151      	bne.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d14b      	bne.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d145      	bne.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d13f      	bne.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d139      	bne.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d133      	bne.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d12d      	bne.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d127      	bne.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d121      	bne.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d11b      	bne.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d115      	bne.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d10f      	bne.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d109      	bne.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0320 	and.w	r3, r3, #32
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d103      	bne.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004ef8:	2172      	movs	r1, #114	; 0x72
 8004efa:	4895      	ldr	r0, [pc, #596]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004efc:	f7fc ffb9 	bl	8001e72 <assert_failed>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0301 	and.w	r3, r3, #1
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d01f      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d008      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x162>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f18:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f1c:	d003      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x162>
 8004f1e:	2178      	movs	r1, #120	; 0x78
 8004f20:	488b      	ldr	r0, [pc, #556]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004f22:	f7fc ffa6 	bl	8001e72 <assert_failed>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004f26:	4b8b      	ldr	r3, [pc, #556]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	4a8a      	ldr	r2, [pc, #552]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004f2c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004f30:	6093      	str	r3, [r2, #8]
 8004f32:	4b88      	ldr	r3, [pc, #544]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004f34:	689a      	ldr	r2, [r3, #8]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f3a:	4986      	ldr	r1, [pc, #536]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d101      	bne.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x188>
    {
      plli2sused = 1;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d029      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d00d      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f68:	d008      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f72:	d003      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004f74:	2188      	movs	r1, #136	; 0x88
 8004f76:	4876      	ldr	r0, [pc, #472]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004f78:	f7fc ff7b 	bl	8001e72 <assert_failed>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f7c:	4b75      	ldr	r3, [pc, #468]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004f7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f8a:	4972      	ldr	r1, [pc, #456]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f9a:	d101      	bne.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      plli2sused = 1;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d101      	bne.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    {
      pllsaiused = 1;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d029      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d00d      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fc8:	d008      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004fd2:	d003      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004fd4:	219c      	movs	r1, #156	; 0x9c
 8004fd6:	485e      	ldr	r0, [pc, #376]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004fd8:	f7fc ff4b 	bl	8001e72 <assert_failed>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004fdc:	4b5d      	ldr	r3, [pc, #372]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004fde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fe2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fea:	495a      	ldr	r1, [pc, #360]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ffa:	d101      	bne.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      plli2sused = 1;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005004:	2b00      	cmp	r3, #0
 8005006:	d101      	bne.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      pllsaiused = 1;
 8005008:	2301      	movs	r3, #1
 800500a:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005014:	2b00      	cmp	r3, #0
 8005016:	d001      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
      plli2sused = 1;
 8005018:	2301      	movs	r3, #1
 800501a:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0320 	and.w	r3, r3, #32
 8005024:	2b00      	cmp	r3, #0
 8005026:	f000 8186 	beq.w	8005336 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800502e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005032:	f000 80e4 	beq.w	80051fe <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800503a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800503e:	f000 80de 	beq.w	80051fe <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005046:	4a44      	ldr	r2, [pc, #272]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8005048:	4293      	cmp	r3, r2
 800504a:	f000 80d8 	beq.w	80051fe <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005052:	4a42      	ldr	r2, [pc, #264]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8005054:	4293      	cmp	r3, r2
 8005056:	f000 80d2 	beq.w	80051fe <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800505e:	4a40      	ldr	r2, [pc, #256]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8005060:	4293      	cmp	r3, r2
 8005062:	f000 80cc 	beq.w	80051fe <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800506a:	4a3e      	ldr	r2, [pc, #248]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 800506c:	4293      	cmp	r3, r2
 800506e:	f000 80c6 	beq.w	80051fe <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005076:	4a3c      	ldr	r2, [pc, #240]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 8005078:	4293      	cmp	r3, r2
 800507a:	f000 80c0 	beq.w	80051fe <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005082:	4a3a      	ldr	r2, [pc, #232]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8005084:	4293      	cmp	r3, r2
 8005086:	f000 80ba 	beq.w	80051fe <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800508e:	4a38      	ldr	r2, [pc, #224]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8005090:	4293      	cmp	r3, r2
 8005092:	f000 80b4 	beq.w	80051fe <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800509a:	4a36      	ldr	r2, [pc, #216]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x3b0>)
 800509c:	4293      	cmp	r3, r2
 800509e:	f000 80ae 	beq.w	80051fe <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a6:	4a34      	ldr	r2, [pc, #208]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	f000 80a8 	beq.w	80051fe <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b2:	4a32      	ldr	r2, [pc, #200]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x3b8>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	f000 80a2 	beq.w	80051fe <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050be:	4a30      	ldr	r2, [pc, #192]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	f000 809c 	beq.w	80051fe <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ca:	4a2e      	ldr	r2, [pc, #184]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3c0>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	f000 8096 	beq.w	80051fe <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d6:	4a2c      	ldr	r2, [pc, #176]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	f000 8090 	beq.w	80051fe <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e2:	4a2a      	ldr	r2, [pc, #168]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	f000 808a 	beq.w	80051fe <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ee:	4a28      	ldr	r2, [pc, #160]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	f000 8084 	beq.w	80051fe <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050fa:	4a26      	ldr	r2, [pc, #152]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d07e      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005104:	4a24      	ldr	r2, [pc, #144]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d079      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800510e:	4a23      	ldr	r2, [pc, #140]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d074      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005118:	4a21      	ldr	r2, [pc, #132]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d06f      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005122:	4a20      	ldr	r2, [pc, #128]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d06a      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800512c:	4a1e      	ldr	r2, [pc, #120]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d065      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005136:	4a1d      	ldr	r2, [pc, #116]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d060      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005140:	4a1b      	ldr	r2, [pc, #108]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d05b      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800514a:	4a1a      	ldr	r2, [pc, #104]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 800514c:	4293      	cmp	r3, r2
 800514e:	e033      	b.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8005150:	08013d84 	.word	0x08013d84
 8005154:	40023800 	.word	0x40023800
 8005158:	00020300 	.word	0x00020300
 800515c:	00030300 	.word	0x00030300
 8005160:	00040300 	.word	0x00040300
 8005164:	00050300 	.word	0x00050300
 8005168:	00060300 	.word	0x00060300
 800516c:	00070300 	.word	0x00070300
 8005170:	00080300 	.word	0x00080300
 8005174:	00090300 	.word	0x00090300
 8005178:	000a0300 	.word	0x000a0300
 800517c:	000b0300 	.word	0x000b0300
 8005180:	000c0300 	.word	0x000c0300
 8005184:	000d0300 	.word	0x000d0300
 8005188:	000e0300 	.word	0x000e0300
 800518c:	000f0300 	.word	0x000f0300
 8005190:	00100300 	.word	0x00100300
 8005194:	00110300 	.word	0x00110300
 8005198:	00120300 	.word	0x00120300
 800519c:	00130300 	.word	0x00130300
 80051a0:	00140300 	.word	0x00140300
 80051a4:	00150300 	.word	0x00150300
 80051a8:	00160300 	.word	0x00160300
 80051ac:	00170300 	.word	0x00170300
 80051b0:	00180300 	.word	0x00180300
 80051b4:	00190300 	.word	0x00190300
 80051b8:	d021      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051be:	4a4c      	ldr	r2, [pc, #304]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d01c      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c8:	4a4a      	ldr	r2, [pc, #296]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d017      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d2:	4a49      	ldr	r2, [pc, #292]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d012      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051dc:	4a47      	ldr	r2, [pc, #284]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d00d      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e6:	4a46      	ldr	r2, [pc, #280]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d008      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f0:	4a44      	ldr	r2, [pc, #272]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d003      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80051f6:	21b7      	movs	r1, #183	; 0xb7
 80051f8:	4843      	ldr	r0, [pc, #268]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 80051fa:	f7fc fe3a 	bl	8001e72 <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80051fe:	4b43      	ldr	r3, [pc, #268]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005202:	4a42      	ldr	r2, [pc, #264]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005208:	6413      	str	r3, [r2, #64]	; 0x40
 800520a:	4b40      	ldr	r3, [pc, #256]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800520c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005212:	60bb      	str	r3, [r7, #8]
 8005214:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005216:	4b3e      	ldr	r3, [pc, #248]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a3d      	ldr	r2, [pc, #244]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 800521c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005220:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005222:	f7fd fb01 	bl	8002828 <HAL_GetTick>
 8005226:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005228:	e009      	b.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x47a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800522a:	f7fd fafd 	bl	8002828 <HAL_GetTick>
 800522e:	4602      	mov	r2, r0
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	1ad3      	subs	r3, r2, r3
 8005234:	2b64      	cmp	r3, #100	; 0x64
 8005236:	d902      	bls.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x47a>
      {
        return HAL_TIMEOUT;
 8005238:	2303      	movs	r3, #3
 800523a:	f000 bd9f 	b.w	8005d7c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800523e:	4b34      	ldr	r3, [pc, #208]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005246:	2b00      	cmp	r3, #0
 8005248:	d0ef      	beq.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x466>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800524a:	4b30      	ldr	r3, [pc, #192]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800524c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800524e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005252:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d036      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800525e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005262:	693a      	ldr	r2, [r7, #16]
 8005264:	429a      	cmp	r2, r3
 8005266:	d02f      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005268:	4b28      	ldr	r3, [pc, #160]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800526a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800526c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005270:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005272:	4b26      	ldr	r3, [pc, #152]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005276:	4a25      	ldr	r2, [pc, #148]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800527c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800527e:	4b23      	ldr	r3, [pc, #140]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005282:	4a22      	ldr	r2, [pc, #136]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005284:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005288:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800528a:	4a20      	ldr	r2, [pc, #128]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005290:	4b1e      	ldr	r3, [pc, #120]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005294:	f003 0301 	and.w	r3, r3, #1
 8005298:	2b01      	cmp	r3, #1
 800529a:	d115      	bne.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x504>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800529c:	f7fd fac4 	bl	8002828 <HAL_GetTick>
 80052a0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052a2:	e00b      	b.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x4f8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052a4:	f7fd fac0 	bl	8002828 <HAL_GetTick>
 80052a8:	4602      	mov	r2, r0
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d902      	bls.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	f000 bd60 	b.w	8005d7c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052bc:	4b13      	ldr	r3, [pc, #76]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80052be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052c0:	f003 0302 	and.w	r3, r3, #2
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d0ed      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052d4:	d120      	bne.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x554>
 80052d6:	4b0d      	ldr	r3, [pc, #52]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80052e2:	4b0c      	ldr	r3, [pc, #48]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80052e4:	400b      	ands	r3, r1
 80052e6:	4909      	ldr	r1, [pc, #36]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80052e8:	4313      	orrs	r3, r2
 80052ea:	608b      	str	r3, [r1, #8]
 80052ec:	e01a      	b.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x560>
 80052ee:	bf00      	nop
 80052f0:	001a0300 	.word	0x001a0300
 80052f4:	001b0300 	.word	0x001b0300
 80052f8:	001c0300 	.word	0x001c0300
 80052fc:	001d0300 	.word	0x001d0300
 8005300:	001e0300 	.word	0x001e0300
 8005304:	001f0300 	.word	0x001f0300
 8005308:	08013d84 	.word	0x08013d84
 800530c:	40023800 	.word	0x40023800
 8005310:	40007000 	.word	0x40007000
 8005314:	0ffffcff 	.word	0x0ffffcff
 8005318:	4b9a      	ldr	r3, [pc, #616]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	4a99      	ldr	r2, [pc, #612]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800531e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005322:	6093      	str	r3, [r2, #8]
 8005324:	4b97      	ldr	r3, [pc, #604]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8005326:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800532c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005330:	4994      	ldr	r1, [pc, #592]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8005332:	4313      	orrs	r3, r2
 8005334:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0310 	and.w	r3, r3, #16
 800533e:	2b00      	cmp	r3, #0
 8005340:	d01d      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005346:	2b00      	cmp	r3, #0
 8005348:	d008      	beq.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x598>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005352:	d003      	beq.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x598>
 8005354:	21f1      	movs	r1, #241	; 0xf1
 8005356:	488c      	ldr	r0, [pc, #560]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8005358:	f7fc fd8b 	bl	8001e72 <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800535c:	4b89      	ldr	r3, [pc, #548]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800535e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005362:	4a88      	ldr	r2, [pc, #544]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8005364:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005368:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800536c:	4b85      	ldr	r3, [pc, #532]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800536e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005376:	4983      	ldr	r1, [pc, #524]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8005378:	4313      	orrs	r3, r2
 800537a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d01c      	beq.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x600>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800538e:	2b00      	cmp	r3, #0
 8005390:	d00d      	beq.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005396:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800539a:	d008      	beq.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053a4:	d003      	beq.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 80053a6:	21fb      	movs	r1, #251	; 0xfb
 80053a8:	4877      	ldr	r0, [pc, #476]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 80053aa:	f7fc fd62 	bl	8001e72 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80053ae:	4b75      	ldr	r3, [pc, #468]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80053b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053bc:	4971      	ldr	r1, [pc, #452]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d01d      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x648>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00e      	beq.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x632>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80053e0:	d009      	beq.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x632>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053e6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80053ea:	d004      	beq.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x632>
 80053ec:	f240 1105 	movw	r1, #261	; 0x105
 80053f0:	4865      	ldr	r0, [pc, #404]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 80053f2:	f7fc fd3e 	bl	8001e72 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80053f6:	4b63      	ldr	r3, [pc, #396]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80053f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005404:	495f      	ldr	r1, [pc, #380]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8005406:	4313      	orrs	r3, r2
 8005408:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005414:	2b00      	cmp	r3, #0
 8005416:	d01d      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x690>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00e      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005424:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005428:	d009      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x67a>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800542e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005432:	d004      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8005434:	f240 110f 	movw	r1, #271	; 0x10f
 8005438:	4853      	ldr	r0, [pc, #332]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 800543a:	f7fc fd1a 	bl	8001e72 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800543e:	4b51      	ldr	r3, [pc, #324]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8005440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005444:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800544c:	494d      	ldr	r1, [pc, #308]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800544e:	4313      	orrs	r3, r2
 8005450:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800545c:	2b00      	cmp	r3, #0
 800545e:	d01d      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005464:	2b00      	cmp	r3, #0
 8005466:	d00e      	beq.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800546c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005470:	d009      	beq.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005476:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800547a:	d004      	beq.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 800547c:	f240 1119 	movw	r1, #281	; 0x119
 8005480:	4841      	ldr	r0, [pc, #260]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8005482:	f7fc fcf6 	bl	8001e72 <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005486:	4b3f      	ldr	r3, [pc, #252]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8005488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800548c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005494:	493b      	ldr	r1, [pc, #236]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8005496:	4313      	orrs	r3, r2
 8005498:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d01f      	beq.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x724>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d010      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d00c      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054bc:	2b03      	cmp	r3, #3
 80054be:	d008      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	d004      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 80054c8:	f240 1123 	movw	r1, #291	; 0x123
 80054cc:	482e      	ldr	r0, [pc, #184]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 80054ce:	f7fc fcd0 	bl	8001e72 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80054d2:	4b2c      	ldr	r3, [pc, #176]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80054d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054d8:	f023 0203 	bic.w	r2, r3, #3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054e0:	4928      	ldr	r1, [pc, #160]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80054e2:	4313      	orrs	r3, r2
 80054e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d01f      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x770>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d010      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x75a>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005500:	2b04      	cmp	r3, #4
 8005502:	d00c      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005508:	2b0c      	cmp	r3, #12
 800550a:	d008      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x75a>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005510:	2b08      	cmp	r3, #8
 8005512:	d004      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8005514:	f240 112d 	movw	r1, #301	; 0x12d
 8005518:	481b      	ldr	r0, [pc, #108]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 800551a:	f7fc fcaa 	bl	8001e72 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800551e:	4b19      	ldr	r3, [pc, #100]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8005520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005524:	f023 020c 	bic.w	r2, r3, #12
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800552c:	4915      	ldr	r1, [pc, #84]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800552e:	4313      	orrs	r3, r2
 8005530:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800553c:	2b00      	cmp	r3, #0
 800553e:	d025      	beq.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x7c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005544:	2b00      	cmp	r3, #0
 8005546:	d010      	beq.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800554c:	2b10      	cmp	r3, #16
 800554e:	d00c      	beq.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005554:	2b30      	cmp	r3, #48	; 0x30
 8005556:	d008      	beq.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800555c:	2b20      	cmp	r3, #32
 800555e:	d004      	beq.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8005560:	f240 1137 	movw	r1, #311	; 0x137
 8005564:	4808      	ldr	r0, [pc, #32]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8005566:	f7fc fc84 	bl	8001e72 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800556a:	4b06      	ldr	r3, [pc, #24]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800556c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005570:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005578:	4902      	ldr	r1, [pc, #8]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800557a:	4313      	orrs	r3, r2
 800557c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005580:	e004      	b.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x7c8>
 8005582:	bf00      	nop
 8005584:	40023800 	.word	0x40023800
 8005588:	08013d84 	.word	0x08013d84
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005594:	2b00      	cmp	r3, #0
 8005596:	d01f      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x814>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800559c:	2b00      	cmp	r3, #0
 800559e:	d010      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055a4:	2b40      	cmp	r3, #64	; 0x40
 80055a6:	d00c      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055ac:	2bc0      	cmp	r3, #192	; 0xc0
 80055ae:	d008      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055b4:	2b80      	cmp	r3, #128	; 0x80
 80055b6:	d004      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 80055b8:	f240 1141 	movw	r1, #321	; 0x141
 80055bc:	48a0      	ldr	r0, [pc, #640]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 80055be:	f7fc fc58 	bl	8001e72 <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80055c2:	4ba0      	ldr	r3, [pc, #640]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80055c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055c8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055d0:	499c      	ldr	r1, [pc, #624]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80055d2:	4313      	orrs	r3, r2
 80055d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d022      	beq.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x866>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d013      	beq.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x850>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055f4:	d00e      	beq.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x850>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055fe:	d009      	beq.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005604:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005608:	d004      	beq.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x850>
 800560a:	f240 114b 	movw	r1, #331	; 0x14b
 800560e:	488c      	ldr	r0, [pc, #560]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8005610:	f7fc fc2f 	bl	8001e72 <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005614:	4b8b      	ldr	r3, [pc, #556]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8005616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800561a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005622:	4988      	ldr	r1, [pc, #544]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8005624:	4313      	orrs	r3, r2
 8005626:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005632:	2b00      	cmp	r3, #0
 8005634:	d022      	beq.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800563a:	2b00      	cmp	r3, #0
 800563c:	d013      	beq.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005642:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005646:	d00e      	beq.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800564c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005650:	d009      	beq.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005656:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800565a:	d004      	beq.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 800565c:	f240 1155 	movw	r1, #341	; 0x155
 8005660:	4877      	ldr	r0, [pc, #476]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8005662:	f7fc fc06 	bl	8001e72 <assert_failed>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005666:	4b77      	ldr	r3, [pc, #476]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8005668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800566c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005674:	4973      	ldr	r1, [pc, #460]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8005676:	4313      	orrs	r3, r2
 8005678:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005684:	2b00      	cmp	r3, #0
 8005686:	d022      	beq.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x90a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800568c:	2b00      	cmp	r3, #0
 800568e:	d013      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005694:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005698:	d00e      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800569e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80056a2:	d009      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056ac:	d004      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 80056ae:	f240 115f 	movw	r1, #351	; 0x15f
 80056b2:	4863      	ldr	r0, [pc, #396]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 80056b4:	f7fc fbdd 	bl	8001e72 <assert_failed>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80056b8:	4b62      	ldr	r3, [pc, #392]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80056ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056be:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056c6:	495f      	ldr	r1, [pc, #380]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80056c8:	4313      	orrs	r3, r2
 80056ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d022      	beq.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d013      	beq.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x946>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056ea:	d00e      	beq.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x946>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056f0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80056f4:	d009      	beq.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x946>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056fe:	d004      	beq.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x946>
 8005700:	f240 1169 	movw	r1, #361	; 0x169
 8005704:	484e      	ldr	r0, [pc, #312]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8005706:	f7fc fbb4 	bl	8001e72 <assert_failed>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800570a:	4b4e      	ldr	r3, [pc, #312]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800570c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005710:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005718:	494a      	ldr	r1, [pc, #296]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800571a:	4313      	orrs	r3, r2
 800571c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005728:	2b00      	cmp	r3, #0
 800572a:	d018      	beq.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x99a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005730:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005734:	d008      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800573a:	2b00      	cmp	r3, #0
 800573c:	d004      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800573e:	f240 1173 	movw	r1, #371	; 0x173
 8005742:	483f      	ldr	r0, [pc, #252]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8005744:	f7fc fb95 	bl	8001e72 <assert_failed>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005748:	4b3e      	ldr	r3, [pc, #248]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800574a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800574e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005756:	493b      	ldr	r1, [pc, #236]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8005758:	4313      	orrs	r3, r2
 800575a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005766:	2b00      	cmp	r3, #0
 8005768:	d01f      	beq.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800576e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005772:	d008      	beq.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005778:	2b00      	cmp	r3, #0
 800577a:	d004      	beq.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 800577c:	f240 117d 	movw	r1, #381	; 0x17d
 8005780:	482f      	ldr	r0, [pc, #188]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8005782:	f7fc fb76 	bl	8001e72 <assert_failed>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005786:	4b2f      	ldr	r3, [pc, #188]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8005788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800578c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005794:	492b      	ldr	r1, [pc, #172]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8005796:	4313      	orrs	r3, r2
 8005798:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057a4:	d101      	bne.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    {
      pllsaiused = 1;
 80057a6:	2301      	movs	r3, #1
 80057a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 0308 	and.w	r3, r3, #8
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d001      	beq.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x9f6>
  {
    pllsaiused = 1;
 80057b6:	2301      	movs	r3, #1
 80057b8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d022      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0xa48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d013      	beq.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80057d6:	d00e      	beq.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80057e0:	d009      	beq.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057e6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80057ea:	d004      	beq.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 80057ec:	f240 1195 	movw	r1, #405	; 0x195
 80057f0:	4813      	ldr	r0, [pc, #76]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 80057f2:	f7fc fb3e 	bl	8001e72 <assert_failed>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80057f6:	4b13      	ldr	r3, [pc, #76]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80057f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057fc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005804:	490f      	ldr	r1, [pc, #60]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8005806:	4313      	orrs	r3, r2
 8005808:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d020      	beq.n	800585a <HAL_RCCEx_PeriphCLKConfig+0xa96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800581e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005822:	d009      	beq.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800582a:	2b00      	cmp	r3, #0
 800582c:	d004      	beq.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800582e:	f240 119f 	movw	r1, #415	; 0x19f
 8005832:	4803      	ldr	r0, [pc, #12]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8005834:	f7fc fb1d 	bl	8001e72 <assert_failed>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005838:	4b02      	ldr	r3, [pc, #8]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800583a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800583e:	e003      	b.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0xa84>
 8005840:	08013d84 	.word	0x08013d84
 8005844:	40023800 	.word	0x40023800
 8005848:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005852:	4910      	ldr	r1, [pc, #64]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 8005854:	4313      	orrs	r3, r2
 8005856:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	2b01      	cmp	r3, #1
 800585e:	d006      	beq.n	800586e <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005868:	2b00      	cmp	r3, #0
 800586a:	f000 8155 	beq.w	8005b18 <HAL_RCCEx_PeriphCLKConfig+0xd54>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800586e:	4b09      	ldr	r3, [pc, #36]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a08      	ldr	r2, [pc, #32]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 8005874:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005878:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800587a:	f7fc ffd5 	bl	8002828 <HAL_GetTick>
 800587e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005880:	e00a      	b.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0xad4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005882:	f7fc ffd1 	bl	8002828 <HAL_GetTick>
 8005886:	4602      	mov	r2, r0
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	1ad3      	subs	r3, r2, r3
 800588c:	2b64      	cmp	r3, #100	; 0x64
 800588e:	d903      	bls.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0xad4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005890:	2303      	movs	r3, #3
 8005892:	e273      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 8005894:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005898:	4b9a      	ldr	r3, [pc, #616]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d1ee      	bne.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0xabe>
      }
    }

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	2b31      	cmp	r3, #49	; 0x31
 80058aa:	d904      	bls.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80058b4:	d904      	bls.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
 80058b6:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 80058ba:	4893      	ldr	r0, [pc, #588]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80058bc:	f7fc fad9 	bl	8001e72 <assert_failed>

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 0301 	and.w	r3, r3, #1
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d02e      	beq.n	800592a <HAL_RCCEx_PeriphCLKConfig+0xb66>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d12a      	bne.n	800592a <HAL_RCCEx_PeriphCLKConfig+0xb66>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d903      	bls.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0xb20>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	2b07      	cmp	r3, #7
 80058e2:	d904      	bls.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80058e4:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80058e8:	4887      	ldr	r0, [pc, #540]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80058ea:	f7fc fac2 	bl	8001e72 <assert_failed>

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80058ee:	4b85      	ldr	r3, [pc, #532]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80058f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058f4:	0c1b      	lsrs	r3, r3, #16
 80058f6:	f003 0303 	and.w	r3, r3, #3
 80058fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80058fc:	4b81      	ldr	r3, [pc, #516]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80058fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005902:	0e1b      	lsrs	r3, r3, #24
 8005904:	f003 030f 	and.w	r3, r3, #15
 8005908:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	019a      	lsls	r2, r3, #6
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	041b      	lsls	r3, r3, #16
 8005914:	431a      	orrs	r2, r3
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	061b      	lsls	r3, r3, #24
 800591a:	431a      	orrs	r2, r3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	071b      	lsls	r3, r3, #28
 8005922:	4978      	ldr	r1, [pc, #480]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8005924:	4313      	orrs	r3, r2
 8005926:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005932:	2b00      	cmp	r3, #0
 8005934:	d004      	beq.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800593a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800593e:	d00a      	beq.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0xb92>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005948:	2b00      	cmp	r3, #0
 800594a:	d048      	beq.n	80059de <HAL_RCCEx_PeriphCLKConfig+0xc1a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005950:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005954:	d143      	bne.n	80059de <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {
      /* Check for PLLI2S Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	2b01      	cmp	r3, #1
 800595c:	d903      	bls.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0xba2>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	2b0f      	cmp	r3, #15
 8005964:	d904      	bls.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8005966:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 800596a:	4867      	ldr	r0, [pc, #412]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 800596c:	f7fc fa81 	bl	8001e72 <assert_failed>
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005974:	2b00      	cmp	r3, #0
 8005976:	d003      	beq.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0xbbc>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597c:	2b20      	cmp	r3, #32
 800597e:	d904      	bls.n	800598a <HAL_RCCEx_PeriphCLKConfig+0xbc6>
 8005980:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 8005984:	4860      	ldr	r0, [pc, #384]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8005986:	f7fc fa74 	bl	8001e72 <assert_failed>

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800598a:	4b5e      	ldr	r3, [pc, #376]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800598c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005990:	0c1b      	lsrs	r3, r3, #16
 8005992:	f003 0303 	and.w	r3, r3, #3
 8005996:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005998:	4b5a      	ldr	r3, [pc, #360]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800599a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800599e:	0f1b      	lsrs	r3, r3, #28
 80059a0:	f003 0307 	and.w	r3, r3, #7
 80059a4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	019a      	lsls	r2, r3, #6
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	041b      	lsls	r3, r3, #16
 80059b0:	431a      	orrs	r2, r3
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	061b      	lsls	r3, r3, #24
 80059b8:	431a      	orrs	r2, r3
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	071b      	lsls	r3, r3, #28
 80059be:	4951      	ldr	r1, [pc, #324]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80059c0:	4313      	orrs	r3, r2
 80059c2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80059c6:	4b4f      	ldr	r3, [pc, #316]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80059c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059cc:	f023 021f 	bic.w	r2, r3, #31
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d4:	3b01      	subs	r3, #1
 80059d6:	494b      	ldr	r1, [pc, #300]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80059d8:	4313      	orrs	r3, r2
 80059da:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d032      	beq.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d010      	beq.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d00c      	beq.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	2b02      	cmp	r3, #2
 8005a00:	d008      	beq.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	2b03      	cmp	r3, #3
 8005a08:	d004      	beq.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8005a0a:	f240 2105 	movw	r1, #517	; 0x205
 8005a0e:	483e      	ldr	r0, [pc, #248]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8005a10:	f7fc fa2f 	bl	8001e72 <assert_failed>

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005a14:	4b3b      	ldr	r3, [pc, #236]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8005a16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a1a:	0e1b      	lsrs	r3, r3, #24
 8005a1c:	f003 030f 	and.w	r3, r3, #15
 8005a20:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005a22:	4b38      	ldr	r3, [pc, #224]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8005a24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a28:	0f1b      	lsrs	r3, r3, #28
 8005a2a:	f003 0307 	and.w	r3, r3, #7
 8005a2e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	019a      	lsls	r2, r3, #6
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	041b      	lsls	r3, r3, #16
 8005a3c:	431a      	orrs	r2, r3
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	061b      	lsls	r3, r3, #24
 8005a42:	431a      	orrs	r2, r3
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	071b      	lsls	r3, r3, #28
 8005a48:	492e      	ldr	r1, [pc, #184]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d040      	beq.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	691b      	ldr	r3, [r3, #16]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d010      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	691b      	ldr	r3, [r3, #16]
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d00c      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	691b      	ldr	r3, [r3, #16]
 8005a70:	2b02      	cmp	r3, #2
 8005a72:	d008      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	2b03      	cmp	r3, #3
 8005a7a:	d004      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8005a7c:	f44f 7105 	mov.w	r1, #532	; 0x214
 8005a80:	4821      	ldr	r0, [pc, #132]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8005a82:	f7fc f9f6 	bl	8001e72 <assert_failed>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d903      	bls.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	2b07      	cmp	r3, #7
 8005a94:	d904      	bls.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8005a96:	f240 2115 	movw	r1, #533	; 0x215
 8005a9a:	481b      	ldr	r0, [pc, #108]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8005a9c:	f7fc f9e9 	bl	8001e72 <assert_failed>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d903      	bls.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0xcec>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	2b0f      	cmp	r3, #15
 8005aae:	d904      	bls.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0xcf6>
 8005ab0:	f240 2116 	movw	r1, #534	; 0x216
 8005ab4:	4814      	ldr	r0, [pc, #80]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8005ab6:	f7fc f9dc 	bl	8001e72 <assert_failed>

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	019a      	lsls	r2, r3, #6
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	041b      	lsls	r3, r3, #16
 8005ac6:	431a      	orrs	r2, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	061b      	lsls	r3, r3, #24
 8005ace:	431a      	orrs	r2, r3
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	071b      	lsls	r3, r3, #28
 8005ad6:	490b      	ldr	r1, [pc, #44]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005ade:	4b09      	ldr	r3, [pc, #36]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a08      	ldr	r2, [pc, #32]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8005ae4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005ae8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005aea:	f7fc fe9d 	bl	8002828 <HAL_GetTick>
 8005aee:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005af0:	e00c      	b.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0xd48>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005af2:	f7fc fe99 	bl	8002828 <HAL_GetTick>
 8005af6:	4602      	mov	r2, r0
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	1ad3      	subs	r3, r2, r3
 8005afc:	2b64      	cmp	r3, #100	; 0x64
 8005afe:	d905      	bls.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0xd48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b00:	2303      	movs	r3, #3
 8005b02:	e13b      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 8005b04:	40023800 	.word	0x40023800
 8005b08:	08013d84 	.word	0x08013d84
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b0c:	4b9d      	ldr	r3, [pc, #628]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d0ec      	beq.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	f040 812d 	bne.w	8005d7a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005b20:	4b98      	ldr	r3, [pc, #608]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a97      	ldr	r2, [pc, #604]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005b26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b2c:	f7fc fe7c 	bl	8002828 <HAL_GetTick>
 8005b30:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005b32:	e008      	b.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0xd82>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005b34:	f7fc fe78 	bl	8002828 <HAL_GetTick>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	1ad3      	subs	r3, r2, r3
 8005b3e:	2b64      	cmp	r3, #100	; 0x64
 8005b40:	d901      	bls.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0xd82>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	e11a      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005b46:	4b8f      	ldr	r3, [pc, #572]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b52:	d0ef      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0xd70>
      }
    }

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	695b      	ldr	r3, [r3, #20]
 8005b58:	2b31      	cmp	r3, #49	; 0x31
 8005b5a:	d904      	bls.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0xda2>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	695b      	ldr	r3, [r3, #20]
 8005b60:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8005b64:	d904      	bls.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0xdac>
 8005b66:	f44f 7111 	mov.w	r1, #580	; 0x244
 8005b6a:	4887      	ldr	r0, [pc, #540]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8005b6c:	f7fc f981 	bl	8001e72 <assert_failed>

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d003      	beq.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d009      	beq.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0xdd4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d048      	beq.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0xe5e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d144      	bne.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0xe5e>
    {
      /* check for PLLSAIQ Parameter */
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	699b      	ldr	r3, [r3, #24]
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d903      	bls.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xde4>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	699b      	ldr	r3, [r3, #24]
 8005ba4:	2b0f      	cmp	r3, #15
 8005ba6:	d904      	bls.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0xdee>
 8005ba8:	f240 214b 	movw	r1, #587	; 0x24b
 8005bac:	4876      	ldr	r0, [pc, #472]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8005bae:	f7fc f960 	bl	8001e72 <assert_failed>
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d003      	beq.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0xdfe>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bbe:	2b20      	cmp	r3, #32
 8005bc0:	d904      	bls.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0xe08>
 8005bc2:	f240 214d 	movw	r1, #589	; 0x24d
 8005bc6:	4870      	ldr	r0, [pc, #448]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8005bc8:	f7fc f953 	bl	8001e72 <assert_failed>

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005bcc:	4b6d      	ldr	r3, [pc, #436]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bd2:	0c1b      	lsrs	r3, r3, #16
 8005bd4:	f003 0303 	and.w	r3, r3, #3
 8005bd8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005bda:	4b6a      	ldr	r3, [pc, #424]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005be0:	0f1b      	lsrs	r3, r3, #28
 8005be2:	f003 0307 	and.w	r3, r3, #7
 8005be6:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	695b      	ldr	r3, [r3, #20]
 8005bec:	019a      	lsls	r2, r3, #6
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	041b      	lsls	r3, r3, #16
 8005bf2:	431a      	orrs	r2, r3
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	699b      	ldr	r3, [r3, #24]
 8005bf8:	061b      	lsls	r3, r3, #24
 8005bfa:	431a      	orrs	r2, r3
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	071b      	lsls	r3, r3, #28
 8005c00:	4960      	ldr	r1, [pc, #384]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005c02:	4313      	orrs	r3, r2
 8005c04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005c08:	4b5e      	ldr	r3, [pc, #376]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005c0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c0e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c16:	3b01      	subs	r3, #1
 8005c18:	021b      	lsls	r3, r3, #8
 8005c1a:	495a      	ldr	r1, [pc, #360]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d037      	beq.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0xeda>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c36:	d132      	bne.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0xeda>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a1b      	ldr	r3, [r3, #32]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d010      	beq.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6a1b      	ldr	r3, [r3, #32]
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d00c      	beq.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6a1b      	ldr	r3, [r3, #32]
 8005c4c:	2b02      	cmp	r3, #2
 8005c4e:	d008      	beq.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6a1b      	ldr	r3, [r3, #32]
 8005c54:	2b03      	cmp	r3, #3
 8005c56:	d004      	beq.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8005c58:	f44f 7118 	mov.w	r1, #608	; 0x260
 8005c5c:	484a      	ldr	r0, [pc, #296]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8005c5e:	f7fc f908 	bl	8001e72 <assert_failed>
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005c62:	4b48      	ldr	r3, [pc, #288]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c68:	0e1b      	lsrs	r3, r3, #24
 8005c6a:	f003 030f 	and.w	r3, r3, #15
 8005c6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005c70:	4b44      	ldr	r3, [pc, #272]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c76:	0f1b      	lsrs	r3, r3, #28
 8005c78:	f003 0307 	and.w	r3, r3, #7
 8005c7c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	695b      	ldr	r3, [r3, #20]
 8005c82:	019a      	lsls	r2, r3, #6
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a1b      	ldr	r3, [r3, #32]
 8005c88:	041b      	lsls	r3, r3, #16
 8005c8a:	431a      	orrs	r2, r3
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	061b      	lsls	r3, r3, #24
 8005c90:	431a      	orrs	r2, r3
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	071b      	lsls	r3, r3, #28
 8005c96:	493b      	ldr	r1, [pc, #236]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 0308 	and.w	r3, r3, #8
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d04d      	beq.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0xf82>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	69db      	ldr	r3, [r3, #28]
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d903      	bls.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0xef6>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	69db      	ldr	r3, [r3, #28]
 8005cb6:	2b07      	cmp	r3, #7
 8005cb8:	d904      	bls.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0xf00>
 8005cba:	f240 216f 	movw	r1, #623	; 0x26f
 8005cbe:	4832      	ldr	r0, [pc, #200]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8005cc0:	f7fc f8d7 	bl	8001e72 <assert_failed>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d013      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cd4:	d00e      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005cde:	d009      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005ce8:	d004      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 8005cea:	f44f 711c 	mov.w	r1, #624	; 0x270
 8005cee:	4826      	ldr	r0, [pc, #152]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8005cf0:	f7fc f8bf 	bl	8001e72 <assert_failed>

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005cf4:	4b23      	ldr	r3, [pc, #140]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cfa:	0e1b      	lsrs	r3, r3, #24
 8005cfc:	f003 030f 	and.w	r3, r3, #15
 8005d00:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005d02:	4b20      	ldr	r3, [pc, #128]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d08:	0c1b      	lsrs	r3, r3, #16
 8005d0a:	f003 0303 	and.w	r3, r3, #3
 8005d0e:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	695b      	ldr	r3, [r3, #20]
 8005d14:	019a      	lsls	r2, r3, #6
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	041b      	lsls	r3, r3, #16
 8005d1a:	431a      	orrs	r2, r3
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	061b      	lsls	r3, r3, #24
 8005d20:	431a      	orrs	r2, r3
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	69db      	ldr	r3, [r3, #28]
 8005d26:	071b      	lsls	r3, r3, #28
 8005d28:	4916      	ldr	r1, [pc, #88]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005d30:	4b14      	ldr	r3, [pc, #80]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005d32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d36:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d3e:	4911      	ldr	r1, [pc, #68]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005d40:	4313      	orrs	r3, r2
 8005d42:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005d46:	4b0f      	ldr	r3, [pc, #60]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a0e      	ldr	r2, [pc, #56]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d52:	f7fc fd69 	bl	8002828 <HAL_GetTick>
 8005d56:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005d58:	e008      	b.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005d5a:	f7fc fd65 	bl	8002828 <HAL_GetTick>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	1ad3      	subs	r3, r2, r3
 8005d64:	2b64      	cmp	r3, #100	; 0x64
 8005d66:	d901      	bls.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d68:	2303      	movs	r3, #3
 8005d6a:	e007      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005d6c:	4b05      	ldr	r3, [pc, #20]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d78:	d1ef      	bne.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0xf96>
      }
    }
  }
  return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3720      	adds	r7, #32
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	40023800 	.word	0x40023800
 8005d88:	08013d84 	.word	0x08013d84

08005d8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b082      	sub	sp, #8
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d101      	bne.n	8005d9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e0f5      	b.n	8005f8a <HAL_TIM_Base_Init+0x1fe>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a7c      	ldr	r2, [pc, #496]	; (8005f94 <HAL_TIM_Base_Init+0x208>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d045      	beq.n	8005e34 <HAL_TIM_Base_Init+0xa8>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005db0:	d040      	beq.n	8005e34 <HAL_TIM_Base_Init+0xa8>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a78      	ldr	r2, [pc, #480]	; (8005f98 <HAL_TIM_Base_Init+0x20c>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d03b      	beq.n	8005e34 <HAL_TIM_Base_Init+0xa8>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a76      	ldr	r2, [pc, #472]	; (8005f9c <HAL_TIM_Base_Init+0x210>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d036      	beq.n	8005e34 <HAL_TIM_Base_Init+0xa8>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a75      	ldr	r2, [pc, #468]	; (8005fa0 <HAL_TIM_Base_Init+0x214>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d031      	beq.n	8005e34 <HAL_TIM_Base_Init+0xa8>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a73      	ldr	r2, [pc, #460]	; (8005fa4 <HAL_TIM_Base_Init+0x218>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d02c      	beq.n	8005e34 <HAL_TIM_Base_Init+0xa8>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a72      	ldr	r2, [pc, #456]	; (8005fa8 <HAL_TIM_Base_Init+0x21c>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d027      	beq.n	8005e34 <HAL_TIM_Base_Init+0xa8>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a70      	ldr	r2, [pc, #448]	; (8005fac <HAL_TIM_Base_Init+0x220>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d022      	beq.n	8005e34 <HAL_TIM_Base_Init+0xa8>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a6f      	ldr	r2, [pc, #444]	; (8005fb0 <HAL_TIM_Base_Init+0x224>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d01d      	beq.n	8005e34 <HAL_TIM_Base_Init+0xa8>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a6d      	ldr	r2, [pc, #436]	; (8005fb4 <HAL_TIM_Base_Init+0x228>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d018      	beq.n	8005e34 <HAL_TIM_Base_Init+0xa8>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a6c      	ldr	r2, [pc, #432]	; (8005fb8 <HAL_TIM_Base_Init+0x22c>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d013      	beq.n	8005e34 <HAL_TIM_Base_Init+0xa8>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a6a      	ldr	r2, [pc, #424]	; (8005fbc <HAL_TIM_Base_Init+0x230>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d00e      	beq.n	8005e34 <HAL_TIM_Base_Init+0xa8>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a69      	ldr	r2, [pc, #420]	; (8005fc0 <HAL_TIM_Base_Init+0x234>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d009      	beq.n	8005e34 <HAL_TIM_Base_Init+0xa8>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a67      	ldr	r2, [pc, #412]	; (8005fc4 <HAL_TIM_Base_Init+0x238>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d004      	beq.n	8005e34 <HAL_TIM_Base_Init+0xa8>
 8005e2a:	f44f 718b 	mov.w	r1, #278	; 0x116
 8005e2e:	4866      	ldr	r0, [pc, #408]	; (8005fc8 <HAL_TIM_Base_Init+0x23c>)
 8005e30:	f7fc f81f 	bl	8001e72 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d014      	beq.n	8005e66 <HAL_TIM_Base_Init+0xda>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	2b10      	cmp	r3, #16
 8005e42:	d010      	beq.n	8005e66 <HAL_TIM_Base_Init+0xda>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	2b20      	cmp	r3, #32
 8005e4a:	d00c      	beq.n	8005e66 <HAL_TIM_Base_Init+0xda>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	2b40      	cmp	r3, #64	; 0x40
 8005e52:	d008      	beq.n	8005e66 <HAL_TIM_Base_Init+0xda>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	2b60      	cmp	r3, #96	; 0x60
 8005e5a:	d004      	beq.n	8005e66 <HAL_TIM_Base_Init+0xda>
 8005e5c:	f240 1117 	movw	r1, #279	; 0x117
 8005e60:	4859      	ldr	r0, [pc, #356]	; (8005fc8 <HAL_TIM_Base_Init+0x23c>)
 8005e62:	f7fc f806 	bl	8001e72 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00e      	beq.n	8005e8c <HAL_TIM_Base_Init+0x100>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e76:	d009      	beq.n	8005e8c <HAL_TIM_Base_Init+0x100>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	691b      	ldr	r3, [r3, #16]
 8005e7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e80:	d004      	beq.n	8005e8c <HAL_TIM_Base_Init+0x100>
 8005e82:	f44f 718c 	mov.w	r1, #280	; 0x118
 8005e86:	4850      	ldr	r0, [pc, #320]	; (8005fc8 <HAL_TIM_Base_Init+0x23c>)
 8005e88:	f7fb fff3 	bl	8001e72 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e94:	d004      	beq.n	8005ea0 <HAL_TIM_Base_Init+0x114>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a41      	ldr	r2, [pc, #260]	; (8005fa0 <HAL_TIM_Base_Init+0x214>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d107      	bne.n	8005eb0 <HAL_TIM_Base_Init+0x124>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	bf14      	ite	ne
 8005ea8:	2301      	movne	r3, #1
 8005eaa:	2300      	moveq	r3, #0
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	e00e      	b.n	8005ece <HAL_TIM_Base_Init+0x142>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d006      	beq.n	8005ec6 <HAL_TIM_Base_Init+0x13a>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ec0:	d201      	bcs.n	8005ec6 <HAL_TIM_Base_Init+0x13a>
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e000      	b.n	8005ec8 <HAL_TIM_Base_Init+0x13c>
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	f003 0301 	and.w	r3, r3, #1
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d104      	bne.n	8005edc <HAL_TIM_Base_Init+0x150>
 8005ed2:	f240 1119 	movw	r1, #281	; 0x119
 8005ed6:	483c      	ldr	r0, [pc, #240]	; (8005fc8 <HAL_TIM_Base_Init+0x23c>)
 8005ed8:	f7fb ffcb 	bl	8001e72 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	699b      	ldr	r3, [r3, #24]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d008      	beq.n	8005ef6 <HAL_TIM_Base_Init+0x16a>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	699b      	ldr	r3, [r3, #24]
 8005ee8:	2b80      	cmp	r3, #128	; 0x80
 8005eea:	d004      	beq.n	8005ef6 <HAL_TIM_Base_Init+0x16a>
 8005eec:	f44f 718d 	mov.w	r1, #282	; 0x11a
 8005ef0:	4835      	ldr	r0, [pc, #212]	; (8005fc8 <HAL_TIM_Base_Init+0x23c>)
 8005ef2:	f7fb ffbe 	bl	8001e72 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d106      	bne.n	8005f10 <HAL_TIM_Base_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f7fc faf8 	bl	8002500 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2202      	movs	r2, #2
 8005f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	3304      	adds	r3, #4
 8005f20:	4619      	mov	r1, r3
 8005f22:	4610      	mov	r0, r2
 8005f24:	f001 fa52 	bl	80073cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3708      	adds	r7, #8
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	40010000 	.word	0x40010000
 8005f98:	40000400 	.word	0x40000400
 8005f9c:	40000800 	.word	0x40000800
 8005fa0:	40000c00 	.word	0x40000c00
 8005fa4:	40001000 	.word	0x40001000
 8005fa8:	40001400 	.word	0x40001400
 8005fac:	40010400 	.word	0x40010400
 8005fb0:	40014000 	.word	0x40014000
 8005fb4:	40014400 	.word	0x40014400
 8005fb8:	40014800 	.word	0x40014800
 8005fbc:	40001800 	.word	0x40001800
 8005fc0:	40001c00 	.word	0x40001c00
 8005fc4:	40002000 	.word	0x40002000
 8005fc8:	08013dc0 	.word	0x08013dc0

08005fcc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b082      	sub	sp, #8
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d101      	bne.n	8005fde <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e0f5      	b.n	80061ca <HAL_TIM_PWM_Init+0x1fe>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a7c      	ldr	r2, [pc, #496]	; (80061d4 <HAL_TIM_PWM_Init+0x208>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d045      	beq.n	8006074 <HAL_TIM_PWM_Init+0xa8>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ff0:	d040      	beq.n	8006074 <HAL_TIM_PWM_Init+0xa8>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a78      	ldr	r2, [pc, #480]	; (80061d8 <HAL_TIM_PWM_Init+0x20c>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d03b      	beq.n	8006074 <HAL_TIM_PWM_Init+0xa8>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a76      	ldr	r2, [pc, #472]	; (80061dc <HAL_TIM_PWM_Init+0x210>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d036      	beq.n	8006074 <HAL_TIM_PWM_Init+0xa8>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a75      	ldr	r2, [pc, #468]	; (80061e0 <HAL_TIM_PWM_Init+0x214>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d031      	beq.n	8006074 <HAL_TIM_PWM_Init+0xa8>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a73      	ldr	r2, [pc, #460]	; (80061e4 <HAL_TIM_PWM_Init+0x218>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d02c      	beq.n	8006074 <HAL_TIM_PWM_Init+0xa8>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a72      	ldr	r2, [pc, #456]	; (80061e8 <HAL_TIM_PWM_Init+0x21c>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d027      	beq.n	8006074 <HAL_TIM_PWM_Init+0xa8>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a70      	ldr	r2, [pc, #448]	; (80061ec <HAL_TIM_PWM_Init+0x220>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d022      	beq.n	8006074 <HAL_TIM_PWM_Init+0xa8>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a6f      	ldr	r2, [pc, #444]	; (80061f0 <HAL_TIM_PWM_Init+0x224>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d01d      	beq.n	8006074 <HAL_TIM_PWM_Init+0xa8>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a6d      	ldr	r2, [pc, #436]	; (80061f4 <HAL_TIM_PWM_Init+0x228>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d018      	beq.n	8006074 <HAL_TIM_PWM_Init+0xa8>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a6c      	ldr	r2, [pc, #432]	; (80061f8 <HAL_TIM_PWM_Init+0x22c>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d013      	beq.n	8006074 <HAL_TIM_PWM_Init+0xa8>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a6a      	ldr	r2, [pc, #424]	; (80061fc <HAL_TIM_PWM_Init+0x230>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d00e      	beq.n	8006074 <HAL_TIM_PWM_Init+0xa8>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a69      	ldr	r2, [pc, #420]	; (8006200 <HAL_TIM_PWM_Init+0x234>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d009      	beq.n	8006074 <HAL_TIM_PWM_Init+0xa8>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a67      	ldr	r2, [pc, #412]	; (8006204 <HAL_TIM_PWM_Init+0x238>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d004      	beq.n	8006074 <HAL_TIM_PWM_Init+0xa8>
 800606a:	f240 5133 	movw	r1, #1331	; 0x533
 800606e:	4866      	ldr	r0, [pc, #408]	; (8006208 <HAL_TIM_PWM_Init+0x23c>)
 8006070:	f7fb feff 	bl	8001e72 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d014      	beq.n	80060a6 <HAL_TIM_PWM_Init+0xda>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	2b10      	cmp	r3, #16
 8006082:	d010      	beq.n	80060a6 <HAL_TIM_PWM_Init+0xda>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	2b20      	cmp	r3, #32
 800608a:	d00c      	beq.n	80060a6 <HAL_TIM_PWM_Init+0xda>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	2b40      	cmp	r3, #64	; 0x40
 8006092:	d008      	beq.n	80060a6 <HAL_TIM_PWM_Init+0xda>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	2b60      	cmp	r3, #96	; 0x60
 800609a:	d004      	beq.n	80060a6 <HAL_TIM_PWM_Init+0xda>
 800609c:	f240 5134 	movw	r1, #1332	; 0x534
 80060a0:	4859      	ldr	r0, [pc, #356]	; (8006208 <HAL_TIM_PWM_Init+0x23c>)
 80060a2:	f7fb fee6 	bl	8001e72 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d00e      	beq.n	80060cc <HAL_TIM_PWM_Init+0x100>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060b6:	d009      	beq.n	80060cc <HAL_TIM_PWM_Init+0x100>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	691b      	ldr	r3, [r3, #16]
 80060bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060c0:	d004      	beq.n	80060cc <HAL_TIM_PWM_Init+0x100>
 80060c2:	f240 5135 	movw	r1, #1333	; 0x535
 80060c6:	4850      	ldr	r0, [pc, #320]	; (8006208 <HAL_TIM_PWM_Init+0x23c>)
 80060c8:	f7fb fed3 	bl	8001e72 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060d4:	d004      	beq.n	80060e0 <HAL_TIM_PWM_Init+0x114>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a41      	ldr	r2, [pc, #260]	; (80061e0 <HAL_TIM_PWM_Init+0x214>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d107      	bne.n	80060f0 <HAL_TIM_PWM_Init+0x124>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	bf14      	ite	ne
 80060e8:	2301      	movne	r3, #1
 80060ea:	2300      	moveq	r3, #0
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	e00e      	b.n	800610e <HAL_TIM_PWM_Init+0x142>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d006      	beq.n	8006106 <HAL_TIM_PWM_Init+0x13a>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006100:	d201      	bcs.n	8006106 <HAL_TIM_PWM_Init+0x13a>
 8006102:	2301      	movs	r3, #1
 8006104:	e000      	b.n	8006108 <HAL_TIM_PWM_Init+0x13c>
 8006106:	2300      	movs	r3, #0
 8006108:	f003 0301 	and.w	r3, r3, #1
 800610c:	b2db      	uxtb	r3, r3
 800610e:	2b00      	cmp	r3, #0
 8006110:	d104      	bne.n	800611c <HAL_TIM_PWM_Init+0x150>
 8006112:	f240 5136 	movw	r1, #1334	; 0x536
 8006116:	483c      	ldr	r0, [pc, #240]	; (8006208 <HAL_TIM_PWM_Init+0x23c>)
 8006118:	f7fb feab 	bl	8001e72 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	699b      	ldr	r3, [r3, #24]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d008      	beq.n	8006136 <HAL_TIM_PWM_Init+0x16a>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	699b      	ldr	r3, [r3, #24]
 8006128:	2b80      	cmp	r3, #128	; 0x80
 800612a:	d004      	beq.n	8006136 <HAL_TIM_PWM_Init+0x16a>
 800612c:	f240 5137 	movw	r1, #1335	; 0x537
 8006130:	4835      	ldr	r0, [pc, #212]	; (8006208 <HAL_TIM_PWM_Init+0x23c>)
 8006132:	f7fb fe9e 	bl	8001e72 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800613c:	b2db      	uxtb	r3, r3
 800613e:	2b00      	cmp	r3, #0
 8006140:	d106      	bne.n	8006150 <HAL_TIM_PWM_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 f85e 	bl	800620c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2202      	movs	r2, #2
 8006154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	3304      	adds	r3, #4
 8006160:	4619      	mov	r1, r3
 8006162:	4610      	mov	r0, r2
 8006164:	f001 f932 	bl	80073cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3708      	adds	r7, #8
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	40010000 	.word	0x40010000
 80061d8:	40000400 	.word	0x40000400
 80061dc:	40000800 	.word	0x40000800
 80061e0:	40000c00 	.word	0x40000c00
 80061e4:	40001000 	.word	0x40001000
 80061e8:	40001400 	.word	0x40001400
 80061ec:	40010400 	.word	0x40010400
 80061f0:	40014000 	.word	0x40014000
 80061f4:	40014400 	.word	0x40014400
 80061f8:	40014800 	.word	0x40014800
 80061fc:	40001800 	.word	0x40001800
 8006200:	40001c00 	.word	0x40001c00
 8006204:	40002000 	.word	0x40002000
 8006208:	08013dc0 	.word	0x08013dc0

0800620c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006214:	bf00      	nop
 8006216:	370c      	adds	r7, #12
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a89      	ldr	r2, [pc, #548]	; (8006454 <HAL_TIM_PWM_Start+0x234>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d117      	bne.n	8006264 <HAL_TIM_PWM_Start+0x44>
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	2b00      	cmp	r3, #0
 8006238:	f000 80ae 	beq.w	8006398 <HAL_TIM_PWM_Start+0x178>
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	2b04      	cmp	r3, #4
 8006240:	f000 80aa 	beq.w	8006398 <HAL_TIM_PWM_Start+0x178>
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	2b08      	cmp	r3, #8
 8006248:	f000 80a6 	beq.w	8006398 <HAL_TIM_PWM_Start+0x178>
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	2b0c      	cmp	r3, #12
 8006250:	f000 80a2 	beq.w	8006398 <HAL_TIM_PWM_Start+0x178>
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	2b10      	cmp	r3, #16
 8006258:	f000 809e 	beq.w	8006398 <HAL_TIM_PWM_Start+0x178>
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	2b14      	cmp	r3, #20
 8006260:	f000 809a 	beq.w	8006398 <HAL_TIM_PWM_Start+0x178>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800626c:	d10f      	bne.n	800628e <HAL_TIM_PWM_Start+0x6e>
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	2b00      	cmp	r3, #0
 8006272:	f000 8091 	beq.w	8006398 <HAL_TIM_PWM_Start+0x178>
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	2b04      	cmp	r3, #4
 800627a:	f000 808d 	beq.w	8006398 <HAL_TIM_PWM_Start+0x178>
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	2b08      	cmp	r3, #8
 8006282:	f000 8089 	beq.w	8006398 <HAL_TIM_PWM_Start+0x178>
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	2b0c      	cmp	r3, #12
 800628a:	f000 8085 	beq.w	8006398 <HAL_TIM_PWM_Start+0x178>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a71      	ldr	r2, [pc, #452]	; (8006458 <HAL_TIM_PWM_Start+0x238>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d10b      	bne.n	80062b0 <HAL_TIM_PWM_Start+0x90>
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d07c      	beq.n	8006398 <HAL_TIM_PWM_Start+0x178>
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	2b04      	cmp	r3, #4
 80062a2:	d079      	beq.n	8006398 <HAL_TIM_PWM_Start+0x178>
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	2b08      	cmp	r3, #8
 80062a8:	d076      	beq.n	8006398 <HAL_TIM_PWM_Start+0x178>
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	2b0c      	cmp	r3, #12
 80062ae:	d073      	beq.n	8006398 <HAL_TIM_PWM_Start+0x178>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a69      	ldr	r2, [pc, #420]	; (800645c <HAL_TIM_PWM_Start+0x23c>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d10b      	bne.n	80062d2 <HAL_TIM_PWM_Start+0xb2>
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d06b      	beq.n	8006398 <HAL_TIM_PWM_Start+0x178>
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	2b04      	cmp	r3, #4
 80062c4:	d068      	beq.n	8006398 <HAL_TIM_PWM_Start+0x178>
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	2b08      	cmp	r3, #8
 80062ca:	d065      	beq.n	8006398 <HAL_TIM_PWM_Start+0x178>
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	2b0c      	cmp	r3, #12
 80062d0:	d062      	beq.n	8006398 <HAL_TIM_PWM_Start+0x178>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a62      	ldr	r2, [pc, #392]	; (8006460 <HAL_TIM_PWM_Start+0x240>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d10b      	bne.n	80062f4 <HAL_TIM_PWM_Start+0xd4>
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d05a      	beq.n	8006398 <HAL_TIM_PWM_Start+0x178>
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	2b04      	cmp	r3, #4
 80062e6:	d057      	beq.n	8006398 <HAL_TIM_PWM_Start+0x178>
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	2b08      	cmp	r3, #8
 80062ec:	d054      	beq.n	8006398 <HAL_TIM_PWM_Start+0x178>
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	2b0c      	cmp	r3, #12
 80062f2:	d051      	beq.n	8006398 <HAL_TIM_PWM_Start+0x178>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a5a      	ldr	r2, [pc, #360]	; (8006464 <HAL_TIM_PWM_Start+0x244>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d111      	bne.n	8006322 <HAL_TIM_PWM_Start+0x102>
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d049      	beq.n	8006398 <HAL_TIM_PWM_Start+0x178>
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	2b04      	cmp	r3, #4
 8006308:	d046      	beq.n	8006398 <HAL_TIM_PWM_Start+0x178>
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	2b08      	cmp	r3, #8
 800630e:	d043      	beq.n	8006398 <HAL_TIM_PWM_Start+0x178>
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	2b0c      	cmp	r3, #12
 8006314:	d040      	beq.n	8006398 <HAL_TIM_PWM_Start+0x178>
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	2b10      	cmp	r3, #16
 800631a:	d03d      	beq.n	8006398 <HAL_TIM_PWM_Start+0x178>
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	2b14      	cmp	r3, #20
 8006320:	d03a      	beq.n	8006398 <HAL_TIM_PWM_Start+0x178>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a50      	ldr	r2, [pc, #320]	; (8006468 <HAL_TIM_PWM_Start+0x248>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d105      	bne.n	8006338 <HAL_TIM_PWM_Start+0x118>
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d032      	beq.n	8006398 <HAL_TIM_PWM_Start+0x178>
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	2b04      	cmp	r3, #4
 8006336:	d02f      	beq.n	8006398 <HAL_TIM_PWM_Start+0x178>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a4b      	ldr	r2, [pc, #300]	; (800646c <HAL_TIM_PWM_Start+0x24c>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d102      	bne.n	8006348 <HAL_TIM_PWM_Start+0x128>
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d027      	beq.n	8006398 <HAL_TIM_PWM_Start+0x178>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a48      	ldr	r2, [pc, #288]	; (8006470 <HAL_TIM_PWM_Start+0x250>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d102      	bne.n	8006358 <HAL_TIM_PWM_Start+0x138>
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d01f      	beq.n	8006398 <HAL_TIM_PWM_Start+0x178>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a45      	ldr	r2, [pc, #276]	; (8006474 <HAL_TIM_PWM_Start+0x254>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d105      	bne.n	800636e <HAL_TIM_PWM_Start+0x14e>
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d017      	beq.n	8006398 <HAL_TIM_PWM_Start+0x178>
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	2b04      	cmp	r3, #4
 800636c:	d014      	beq.n	8006398 <HAL_TIM_PWM_Start+0x178>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a41      	ldr	r2, [pc, #260]	; (8006478 <HAL_TIM_PWM_Start+0x258>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d102      	bne.n	800637e <HAL_TIM_PWM_Start+0x15e>
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d00c      	beq.n	8006398 <HAL_TIM_PWM_Start+0x178>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a3e      	ldr	r2, [pc, #248]	; (800647c <HAL_TIM_PWM_Start+0x25c>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d102      	bne.n	800638e <HAL_TIM_PWM_Start+0x16e>
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d004      	beq.n	8006398 <HAL_TIM_PWM_Start+0x178>
 800638e:	f240 51bc 	movw	r1, #1468	; 0x5bc
 8006392:	483b      	ldr	r0, [pc, #236]	; (8006480 <HAL_TIM_PWM_Start+0x260>)
 8006394:	f7fb fd6d 	bl	8001e72 <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d109      	bne.n	80063b2 <HAL_TIM_PWM_Start+0x192>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	bf14      	ite	ne
 80063aa:	2301      	movne	r3, #1
 80063ac:	2300      	moveq	r3, #0
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	e03c      	b.n	800642c <HAL_TIM_PWM_Start+0x20c>
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	2b04      	cmp	r3, #4
 80063b6:	d109      	bne.n	80063cc <HAL_TIM_PWM_Start+0x1ac>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	bf14      	ite	ne
 80063c4:	2301      	movne	r3, #1
 80063c6:	2300      	moveq	r3, #0
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	e02f      	b.n	800642c <HAL_TIM_PWM_Start+0x20c>
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	2b08      	cmp	r3, #8
 80063d0:	d109      	bne.n	80063e6 <HAL_TIM_PWM_Start+0x1c6>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	2b01      	cmp	r3, #1
 80063dc:	bf14      	ite	ne
 80063de:	2301      	movne	r3, #1
 80063e0:	2300      	moveq	r3, #0
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	e022      	b.n	800642c <HAL_TIM_PWM_Start+0x20c>
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	2b0c      	cmp	r3, #12
 80063ea:	d109      	bne.n	8006400 <HAL_TIM_PWM_Start+0x1e0>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	bf14      	ite	ne
 80063f8:	2301      	movne	r3, #1
 80063fa:	2300      	moveq	r3, #0
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	e015      	b.n	800642c <HAL_TIM_PWM_Start+0x20c>
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	2b10      	cmp	r3, #16
 8006404:	d109      	bne.n	800641a <HAL_TIM_PWM_Start+0x1fa>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800640c:	b2db      	uxtb	r3, r3
 800640e:	2b01      	cmp	r3, #1
 8006410:	bf14      	ite	ne
 8006412:	2301      	movne	r3, #1
 8006414:	2300      	moveq	r3, #0
 8006416:	b2db      	uxtb	r3, r3
 8006418:	e008      	b.n	800642c <HAL_TIM_PWM_Start+0x20c>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006420:	b2db      	uxtb	r3, r3
 8006422:	2b01      	cmp	r3, #1
 8006424:	bf14      	ite	ne
 8006426:	2301      	movne	r3, #1
 8006428:	2300      	moveq	r3, #0
 800642a:	b2db      	uxtb	r3, r3
 800642c:	2b00      	cmp	r3, #0
 800642e:	d001      	beq.n	8006434 <HAL_TIM_PWM_Start+0x214>
  {
    return HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	e0aa      	b.n	800658a <HAL_TIM_PWM_Start+0x36a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d104      	bne.n	8006444 <HAL_TIM_PWM_Start+0x224>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2202      	movs	r2, #2
 800643e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006442:	e03b      	b.n	80064bc <HAL_TIM_PWM_Start+0x29c>
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	2b04      	cmp	r3, #4
 8006448:	d11c      	bne.n	8006484 <HAL_TIM_PWM_Start+0x264>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2202      	movs	r2, #2
 800644e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006452:	e033      	b.n	80064bc <HAL_TIM_PWM_Start+0x29c>
 8006454:	40010000 	.word	0x40010000
 8006458:	40000400 	.word	0x40000400
 800645c:	40000800 	.word	0x40000800
 8006460:	40000c00 	.word	0x40000c00
 8006464:	40010400 	.word	0x40010400
 8006468:	40014000 	.word	0x40014000
 800646c:	40014400 	.word	0x40014400
 8006470:	40014800 	.word	0x40014800
 8006474:	40001800 	.word	0x40001800
 8006478:	40001c00 	.word	0x40001c00
 800647c:	40002000 	.word	0x40002000
 8006480:	08013dc0 	.word	0x08013dc0
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	2b08      	cmp	r3, #8
 8006488:	d104      	bne.n	8006494 <HAL_TIM_PWM_Start+0x274>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2202      	movs	r2, #2
 800648e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006492:	e013      	b.n	80064bc <HAL_TIM_PWM_Start+0x29c>
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	2b0c      	cmp	r3, #12
 8006498:	d104      	bne.n	80064a4 <HAL_TIM_PWM_Start+0x284>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2202      	movs	r2, #2
 800649e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80064a2:	e00b      	b.n	80064bc <HAL_TIM_PWM_Start+0x29c>
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	2b10      	cmp	r3, #16
 80064a8:	d104      	bne.n	80064b4 <HAL_TIM_PWM_Start+0x294>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2202      	movs	r2, #2
 80064ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064b2:	e003      	b.n	80064bc <HAL_TIM_PWM_Start+0x29c>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2202      	movs	r2, #2
 80064b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	2201      	movs	r2, #1
 80064c2:	6839      	ldr	r1, [r7, #0]
 80064c4:	4618      	mov	r0, r3
 80064c6:	f001 fba3 	bl	8007c10 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a31      	ldr	r2, [pc, #196]	; (8006594 <HAL_TIM_PWM_Start+0x374>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d004      	beq.n	80064de <HAL_TIM_PWM_Start+0x2be>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a2f      	ldr	r2, [pc, #188]	; (8006598 <HAL_TIM_PWM_Start+0x378>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d101      	bne.n	80064e2 <HAL_TIM_PWM_Start+0x2c2>
 80064de:	2301      	movs	r3, #1
 80064e0:	e000      	b.n	80064e4 <HAL_TIM_PWM_Start+0x2c4>
 80064e2:	2300      	movs	r3, #0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d007      	beq.n	80064f8 <HAL_TIM_PWM_Start+0x2d8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80064f6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a25      	ldr	r2, [pc, #148]	; (8006594 <HAL_TIM_PWM_Start+0x374>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d022      	beq.n	8006548 <HAL_TIM_PWM_Start+0x328>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800650a:	d01d      	beq.n	8006548 <HAL_TIM_PWM_Start+0x328>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a22      	ldr	r2, [pc, #136]	; (800659c <HAL_TIM_PWM_Start+0x37c>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d018      	beq.n	8006548 <HAL_TIM_PWM_Start+0x328>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a21      	ldr	r2, [pc, #132]	; (80065a0 <HAL_TIM_PWM_Start+0x380>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d013      	beq.n	8006548 <HAL_TIM_PWM_Start+0x328>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a1f      	ldr	r2, [pc, #124]	; (80065a4 <HAL_TIM_PWM_Start+0x384>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d00e      	beq.n	8006548 <HAL_TIM_PWM_Start+0x328>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a1a      	ldr	r2, [pc, #104]	; (8006598 <HAL_TIM_PWM_Start+0x378>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d009      	beq.n	8006548 <HAL_TIM_PWM_Start+0x328>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a1b      	ldr	r2, [pc, #108]	; (80065a8 <HAL_TIM_PWM_Start+0x388>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d004      	beq.n	8006548 <HAL_TIM_PWM_Start+0x328>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a1a      	ldr	r2, [pc, #104]	; (80065ac <HAL_TIM_PWM_Start+0x38c>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d115      	bne.n	8006574 <HAL_TIM_PWM_Start+0x354>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	689a      	ldr	r2, [r3, #8]
 800654e:	4b18      	ldr	r3, [pc, #96]	; (80065b0 <HAL_TIM_PWM_Start+0x390>)
 8006550:	4013      	ands	r3, r2
 8006552:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2b06      	cmp	r3, #6
 8006558:	d015      	beq.n	8006586 <HAL_TIM_PWM_Start+0x366>
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006560:	d011      	beq.n	8006586 <HAL_TIM_PWM_Start+0x366>
    {
      __HAL_TIM_ENABLE(htim);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f042 0201 	orr.w	r2, r2, #1
 8006570:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006572:	e008      	b.n	8006586 <HAL_TIM_PWM_Start+0x366>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f042 0201 	orr.w	r2, r2, #1
 8006582:	601a      	str	r2, [r3, #0]
 8006584:	e000      	b.n	8006588 <HAL_TIM_PWM_Start+0x368>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006586:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006588:	2300      	movs	r3, #0
}
 800658a:	4618      	mov	r0, r3
 800658c:	3710      	adds	r7, #16
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop
 8006594:	40010000 	.word	0x40010000
 8006598:	40010400 	.word	0x40010400
 800659c:	40000400 	.word	0x40000400
 80065a0:	40000800 	.word	0x40000800
 80065a4:	40000c00 	.word	0x40000c00
 80065a8:	40014000 	.word	0x40014000
 80065ac:	40001800 	.word	0x40001800
 80065b0:	00010007 	.word	0x00010007

080065b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b082      	sub	sp, #8
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	f003 0302 	and.w	r3, r3, #2
 80065c6:	2b02      	cmp	r3, #2
 80065c8:	d122      	bne.n	8006610 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	f003 0302 	and.w	r3, r3, #2
 80065d4:	2b02      	cmp	r3, #2
 80065d6:	d11b      	bne.n	8006610 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f06f 0202 	mvn.w	r2, #2
 80065e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2201      	movs	r2, #1
 80065e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	699b      	ldr	r3, [r3, #24]
 80065ee:	f003 0303 	and.w	r3, r3, #3
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d003      	beq.n	80065fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 feca 	bl	8007390 <HAL_TIM_IC_CaptureCallback>
 80065fc:	e005      	b.n	800660a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 febc 	bl	800737c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f000 fecd 	bl	80073a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	f003 0304 	and.w	r3, r3, #4
 800661a:	2b04      	cmp	r3, #4
 800661c:	d122      	bne.n	8006664 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	f003 0304 	and.w	r3, r3, #4
 8006628:	2b04      	cmp	r3, #4
 800662a:	d11b      	bne.n	8006664 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f06f 0204 	mvn.w	r2, #4
 8006634:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2202      	movs	r2, #2
 800663a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	699b      	ldr	r3, [r3, #24]
 8006642:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006646:	2b00      	cmp	r3, #0
 8006648:	d003      	beq.n	8006652 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 fea0 	bl	8007390 <HAL_TIM_IC_CaptureCallback>
 8006650:	e005      	b.n	800665e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 fe92 	bl	800737c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 fea3 	bl	80073a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	f003 0308 	and.w	r3, r3, #8
 800666e:	2b08      	cmp	r3, #8
 8006670:	d122      	bne.n	80066b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	f003 0308 	and.w	r3, r3, #8
 800667c:	2b08      	cmp	r3, #8
 800667e:	d11b      	bne.n	80066b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f06f 0208 	mvn.w	r2, #8
 8006688:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2204      	movs	r2, #4
 800668e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	69db      	ldr	r3, [r3, #28]
 8006696:	f003 0303 	and.w	r3, r3, #3
 800669a:	2b00      	cmp	r3, #0
 800669c:	d003      	beq.n	80066a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 fe76 	bl	8007390 <HAL_TIM_IC_CaptureCallback>
 80066a4:	e005      	b.n	80066b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 fe68 	bl	800737c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f000 fe79 	bl	80073a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	691b      	ldr	r3, [r3, #16]
 80066be:	f003 0310 	and.w	r3, r3, #16
 80066c2:	2b10      	cmp	r3, #16
 80066c4:	d122      	bne.n	800670c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	f003 0310 	and.w	r3, r3, #16
 80066d0:	2b10      	cmp	r3, #16
 80066d2:	d11b      	bne.n	800670c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f06f 0210 	mvn.w	r2, #16
 80066dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2208      	movs	r2, #8
 80066e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	69db      	ldr	r3, [r3, #28]
 80066ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d003      	beq.n	80066fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 fe4c 	bl	8007390 <HAL_TIM_IC_CaptureCallback>
 80066f8:	e005      	b.n	8006706 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 fe3e 	bl	800737c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f000 fe4f 	bl	80073a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	691b      	ldr	r3, [r3, #16]
 8006712:	f003 0301 	and.w	r3, r3, #1
 8006716:	2b01      	cmp	r3, #1
 8006718:	d10e      	bne.n	8006738 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	f003 0301 	and.w	r3, r3, #1
 8006724:	2b01      	cmp	r3, #1
 8006726:	d107      	bne.n	8006738 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f06f 0201 	mvn.w	r2, #1
 8006730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 fe18 	bl	8007368 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	691b      	ldr	r3, [r3, #16]
 800673e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006742:	2b80      	cmp	r3, #128	; 0x80
 8006744:	d10e      	bne.n	8006764 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006750:	2b80      	cmp	r3, #128	; 0x80
 8006752:	d107      	bne.n	8006764 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800675c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f001 fc42 	bl	8007fe8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	691b      	ldr	r3, [r3, #16]
 800676a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800676e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006772:	d10e      	bne.n	8006792 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800677e:	2b80      	cmp	r3, #128	; 0x80
 8006780:	d107      	bne.n	8006792 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800678a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f001 fc35 	bl	8007ffc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	691b      	ldr	r3, [r3, #16]
 8006798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800679c:	2b40      	cmp	r3, #64	; 0x40
 800679e:	d10e      	bne.n	80067be <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067aa:	2b40      	cmp	r3, #64	; 0x40
 80067ac:	d107      	bne.n	80067be <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80067b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f000 fdfd 	bl	80073b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	691b      	ldr	r3, [r3, #16]
 80067c4:	f003 0320 	and.w	r3, r3, #32
 80067c8:	2b20      	cmp	r3, #32
 80067ca:	d10e      	bne.n	80067ea <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	68db      	ldr	r3, [r3, #12]
 80067d2:	f003 0320 	and.w	r3, r3, #32
 80067d6:	2b20      	cmp	r3, #32
 80067d8:	d107      	bne.n	80067ea <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f06f 0220 	mvn.w	r2, #32
 80067e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f001 fbf5 	bl	8007fd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80067ea:	bf00      	nop
 80067ec:	3708      	adds	r7, #8
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}
	...

080067f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b086      	sub	sp, #24
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006800:	2300      	movs	r3, #0
 8006802:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d016      	beq.n	8006838 <HAL_TIM_PWM_ConfigChannel+0x44>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2b04      	cmp	r3, #4
 800680e:	d013      	beq.n	8006838 <HAL_TIM_PWM_ConfigChannel+0x44>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2b08      	cmp	r3, #8
 8006814:	d010      	beq.n	8006838 <HAL_TIM_PWM_ConfigChannel+0x44>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2b0c      	cmp	r3, #12
 800681a:	d00d      	beq.n	8006838 <HAL_TIM_PWM_ConfigChannel+0x44>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2b10      	cmp	r3, #16
 8006820:	d00a      	beq.n	8006838 <HAL_TIM_PWM_ConfigChannel+0x44>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2b14      	cmp	r3, #20
 8006826:	d007      	beq.n	8006838 <HAL_TIM_PWM_ConfigChannel+0x44>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2b3c      	cmp	r3, #60	; 0x3c
 800682c:	d004      	beq.n	8006838 <HAL_TIM_PWM_ConfigChannel+0x44>
 800682e:	f241 01af 	movw	r1, #4271	; 0x10af
 8006832:	4895      	ldr	r0, [pc, #596]	; (8006a88 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8006834:	f7fb fb1d 	bl	8001e72 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2b60      	cmp	r3, #96	; 0x60
 800683e:	d01c      	beq.n	800687a <HAL_TIM_PWM_ConfigChannel+0x86>
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	2b70      	cmp	r3, #112	; 0x70
 8006846:	d018      	beq.n	800687a <HAL_TIM_PWM_ConfigChannel+0x86>
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a8f      	ldr	r2, [pc, #572]	; (8006a8c <HAL_TIM_PWM_ConfigChannel+0x298>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d013      	beq.n	800687a <HAL_TIM_PWM_ConfigChannel+0x86>
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a8e      	ldr	r2, [pc, #568]	; (8006a90 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d00e      	beq.n	800687a <HAL_TIM_PWM_ConfigChannel+0x86>
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a8c      	ldr	r2, [pc, #560]	; (8006a94 <HAL_TIM_PWM_ConfigChannel+0x2a0>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d009      	beq.n	800687a <HAL_TIM_PWM_ConfigChannel+0x86>
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a8b      	ldr	r2, [pc, #556]	; (8006a98 <HAL_TIM_PWM_ConfigChannel+0x2a4>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d004      	beq.n	800687a <HAL_TIM_PWM_ConfigChannel+0x86>
 8006870:	f241 01b0 	movw	r1, #4272	; 0x10b0
 8006874:	4884      	ldr	r0, [pc, #528]	; (8006a88 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8006876:	f7fb fafc 	bl	8001e72 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d008      	beq.n	8006894 <HAL_TIM_PWM_ConfigChannel+0xa0>
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	2b02      	cmp	r3, #2
 8006888:	d004      	beq.n	8006894 <HAL_TIM_PWM_ConfigChannel+0xa0>
 800688a:	f241 01b1 	movw	r1, #4273	; 0x10b1
 800688e:	487e      	ldr	r0, [pc, #504]	; (8006a88 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8006890:	f7fb faef 	bl	8001e72 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	691b      	ldr	r3, [r3, #16]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d008      	beq.n	80068ae <HAL_TIM_PWM_ConfigChannel+0xba>
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	691b      	ldr	r3, [r3, #16]
 80068a0:	2b04      	cmp	r3, #4
 80068a2:	d004      	beq.n	80068ae <HAL_TIM_PWM_ConfigChannel+0xba>
 80068a4:	f241 01b2 	movw	r1, #4274	; 0x10b2
 80068a8:	4877      	ldr	r0, [pc, #476]	; (8006a88 <HAL_TIM_PWM_ConfigChannel+0x294>)
 80068aa:	f7fb fae2 	bl	8001e72 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d101      	bne.n	80068bc <HAL_TIM_PWM_ConfigChannel+0xc8>
 80068b8:	2302      	movs	r3, #2
 80068ba:	e1f3      	b.n	8006ca4 <HAL_TIM_PWM_ConfigChannel+0x4b0>
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2b14      	cmp	r3, #20
 80068c8:	f200 81e4 	bhi.w	8006c94 <HAL_TIM_PWM_ConfigChannel+0x4a0>
 80068cc:	a201      	add	r2, pc, #4	; (adr r2, 80068d4 <HAL_TIM_PWM_ConfigChannel+0xe0>)
 80068ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068d2:	bf00      	nop
 80068d4:	08006929 	.word	0x08006929
 80068d8:	08006c95 	.word	0x08006c95
 80068dc:	08006c95 	.word	0x08006c95
 80068e0:	08006c95 	.word	0x08006c95
 80068e4:	080069eb 	.word	0x080069eb
 80068e8:	08006c95 	.word	0x08006c95
 80068ec:	08006c95 	.word	0x08006c95
 80068f0:	08006c95 	.word	0x08006c95
 80068f4:	08006ac9 	.word	0x08006ac9
 80068f8:	08006c95 	.word	0x08006c95
 80068fc:	08006c95 	.word	0x08006c95
 8006900:	08006c95 	.word	0x08006c95
 8006904:	08006b4f 	.word	0x08006b4f
 8006908:	08006c95 	.word	0x08006c95
 800690c:	08006c95 	.word	0x08006c95
 8006910:	08006c95 	.word	0x08006c95
 8006914:	08006bd7 	.word	0x08006bd7
 8006918:	08006c95 	.word	0x08006c95
 800691c:	08006c95 	.word	0x08006c95
 8006920:	08006c95 	.word	0x08006c95
 8006924:	08006c35 	.word	0x08006c35
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a5b      	ldr	r2, [pc, #364]	; (8006a9c <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d03b      	beq.n	80069aa <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800693a:	d036      	beq.n	80069aa <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a57      	ldr	r2, [pc, #348]	; (8006aa0 <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d031      	beq.n	80069aa <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a56      	ldr	r2, [pc, #344]	; (8006aa4 <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d02c      	beq.n	80069aa <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a54      	ldr	r2, [pc, #336]	; (8006aa8 <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d027      	beq.n	80069aa <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a53      	ldr	r2, [pc, #332]	; (8006aac <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d022      	beq.n	80069aa <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a51      	ldr	r2, [pc, #324]	; (8006ab0 <HAL_TIM_PWM_ConfigChannel+0x2bc>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d01d      	beq.n	80069aa <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a50      	ldr	r2, [pc, #320]	; (8006ab4 <HAL_TIM_PWM_ConfigChannel+0x2c0>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d018      	beq.n	80069aa <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a4e      	ldr	r2, [pc, #312]	; (8006ab8 <HAL_TIM_PWM_ConfigChannel+0x2c4>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d013      	beq.n	80069aa <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a4d      	ldr	r2, [pc, #308]	; (8006abc <HAL_TIM_PWM_ConfigChannel+0x2c8>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d00e      	beq.n	80069aa <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a4b      	ldr	r2, [pc, #300]	; (8006ac0 <HAL_TIM_PWM_ConfigChannel+0x2cc>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d009      	beq.n	80069aa <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a4a      	ldr	r2, [pc, #296]	; (8006ac4 <HAL_TIM_PWM_ConfigChannel+0x2d0>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d004      	beq.n	80069aa <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80069a0:	f241 01bc 	movw	r1, #4284	; 0x10bc
 80069a4:	4838      	ldr	r0, [pc, #224]	; (8006a88 <HAL_TIM_PWM_ConfigChannel+0x294>)
 80069a6:	f7fb fa64 	bl	8001e72 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	68b9      	ldr	r1, [r7, #8]
 80069b0:	4618      	mov	r0, r3
 80069b2:	f000 fdab 	bl	800750c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	699a      	ldr	r2, [r3, #24]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f042 0208 	orr.w	r2, r2, #8
 80069c4:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	699a      	ldr	r2, [r3, #24]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f022 0204 	bic.w	r2, r2, #4
 80069d4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	6999      	ldr	r1, [r3, #24]
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	691a      	ldr	r2, [r3, #16]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	430a      	orrs	r2, r1
 80069e6:	619a      	str	r2, [r3, #24]
      break;
 80069e8:	e157      	b.n	8006c9a <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a2b      	ldr	r2, [pc, #172]	; (8006a9c <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d027      	beq.n	8006a44 <HAL_TIM_PWM_ConfigChannel+0x250>
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069fc:	d022      	beq.n	8006a44 <HAL_TIM_PWM_ConfigChannel+0x250>
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a27      	ldr	r2, [pc, #156]	; (8006aa0 <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d01d      	beq.n	8006a44 <HAL_TIM_PWM_ConfigChannel+0x250>
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a25      	ldr	r2, [pc, #148]	; (8006aa4 <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d018      	beq.n	8006a44 <HAL_TIM_PWM_ConfigChannel+0x250>
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a24      	ldr	r2, [pc, #144]	; (8006aa8 <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d013      	beq.n	8006a44 <HAL_TIM_PWM_ConfigChannel+0x250>
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a22      	ldr	r2, [pc, #136]	; (8006aac <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d00e      	beq.n	8006a44 <HAL_TIM_PWM_ConfigChannel+0x250>
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a21      	ldr	r2, [pc, #132]	; (8006ab0 <HAL_TIM_PWM_ConfigChannel+0x2bc>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d009      	beq.n	8006a44 <HAL_TIM_PWM_ConfigChannel+0x250>
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a21      	ldr	r2, [pc, #132]	; (8006abc <HAL_TIM_PWM_ConfigChannel+0x2c8>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d004      	beq.n	8006a44 <HAL_TIM_PWM_ConfigChannel+0x250>
 8006a3a:	f241 01cd 	movw	r1, #4301	; 0x10cd
 8006a3e:	4812      	ldr	r0, [pc, #72]	; (8006a88 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8006a40:	f7fb fa17 	bl	8001e72 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	68b9      	ldr	r1, [r7, #8]
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f000 fdfa 	bl	8007644 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	699a      	ldr	r2, [r3, #24]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	699a      	ldr	r2, [r3, #24]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	6999      	ldr	r1, [r3, #24]
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	691b      	ldr	r3, [r3, #16]
 8006a7a:	021a      	lsls	r2, r3, #8
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	430a      	orrs	r2, r1
 8006a82:	619a      	str	r2, [r3, #24]
      break;
 8006a84:	e109      	b.n	8006c9a <HAL_TIM_PWM_ConfigChannel+0x4a6>
 8006a86:	bf00      	nop
 8006a88:	08013dc0 	.word	0x08013dc0
 8006a8c:	00010040 	.word	0x00010040
 8006a90:	00010050 	.word	0x00010050
 8006a94:	00010060 	.word	0x00010060
 8006a98:	00010070 	.word	0x00010070
 8006a9c:	40010000 	.word	0x40010000
 8006aa0:	40000400 	.word	0x40000400
 8006aa4:	40000800 	.word	0x40000800
 8006aa8:	40000c00 	.word	0x40000c00
 8006aac:	40010400 	.word	0x40010400
 8006ab0:	40014000 	.word	0x40014000
 8006ab4:	40014400 	.word	0x40014400
 8006ab8:	40014800 	.word	0x40014800
 8006abc:	40001800 	.word	0x40001800
 8006ac0:	40001c00 	.word	0x40001c00
 8006ac4:	40002000 	.word	0x40002000
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a77      	ldr	r2, [pc, #476]	; (8006cac <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d01d      	beq.n	8006b0e <HAL_TIM_PWM_ConfigChannel+0x31a>
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ada:	d018      	beq.n	8006b0e <HAL_TIM_PWM_ConfigChannel+0x31a>
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a73      	ldr	r2, [pc, #460]	; (8006cb0 <HAL_TIM_PWM_ConfigChannel+0x4bc>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d013      	beq.n	8006b0e <HAL_TIM_PWM_ConfigChannel+0x31a>
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a72      	ldr	r2, [pc, #456]	; (8006cb4 <HAL_TIM_PWM_ConfigChannel+0x4c0>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d00e      	beq.n	8006b0e <HAL_TIM_PWM_ConfigChannel+0x31a>
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a70      	ldr	r2, [pc, #448]	; (8006cb8 <HAL_TIM_PWM_ConfigChannel+0x4c4>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d009      	beq.n	8006b0e <HAL_TIM_PWM_ConfigChannel+0x31a>
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a6f      	ldr	r2, [pc, #444]	; (8006cbc <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d004      	beq.n	8006b0e <HAL_TIM_PWM_ConfigChannel+0x31a>
 8006b04:	f241 01de 	movw	r1, #4318	; 0x10de
 8006b08:	486d      	ldr	r0, [pc, #436]	; (8006cc0 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 8006b0a:	f7fb f9b2 	bl	8001e72 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	68b9      	ldr	r1, [r7, #8]
 8006b14:	4618      	mov	r0, r3
 8006b16:	f000 fe35 	bl	8007784 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	69da      	ldr	r2, [r3, #28]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f042 0208 	orr.w	r2, r2, #8
 8006b28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	69da      	ldr	r2, [r3, #28]
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f022 0204 	bic.w	r2, r2, #4
 8006b38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	69d9      	ldr	r1, [r3, #28]
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	691a      	ldr	r2, [r3, #16]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	430a      	orrs	r2, r1
 8006b4a:	61da      	str	r2, [r3, #28]
      break;
 8006b4c:	e0a5      	b.n	8006c9a <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a56      	ldr	r2, [pc, #344]	; (8006cac <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d01d      	beq.n	8006b94 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b60:	d018      	beq.n	8006b94 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a52      	ldr	r2, [pc, #328]	; (8006cb0 <HAL_TIM_PWM_ConfigChannel+0x4bc>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d013      	beq.n	8006b94 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a50      	ldr	r2, [pc, #320]	; (8006cb4 <HAL_TIM_PWM_ConfigChannel+0x4c0>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d00e      	beq.n	8006b94 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a4f      	ldr	r2, [pc, #316]	; (8006cb8 <HAL_TIM_PWM_ConfigChannel+0x4c4>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d009      	beq.n	8006b94 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a4d      	ldr	r2, [pc, #308]	; (8006cbc <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d004      	beq.n	8006b94 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8006b8a:	f241 01ef 	movw	r1, #4335	; 0x10ef
 8006b8e:	484c      	ldr	r0, [pc, #304]	; (8006cc0 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 8006b90:	f7fb f96f 	bl	8001e72 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	68b9      	ldr	r1, [r7, #8]
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f000 fe92 	bl	80078c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	69da      	ldr	r2, [r3, #28]
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006bae:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	69da      	ldr	r2, [r3, #28]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bbe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	69d9      	ldr	r1, [r3, #28]
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	691b      	ldr	r3, [r3, #16]
 8006bca:	021a      	lsls	r2, r3, #8
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	430a      	orrs	r2, r1
 8006bd2:	61da      	str	r2, [r3, #28]
      break;
 8006bd4:	e061      	b.n	8006c9a <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a34      	ldr	r2, [pc, #208]	; (8006cac <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d009      	beq.n	8006bf4 <HAL_TIM_PWM_ConfigChannel+0x400>
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a35      	ldr	r2, [pc, #212]	; (8006cbc <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d004      	beq.n	8006bf4 <HAL_TIM_PWM_ConfigChannel+0x400>
 8006bea:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 8006bee:	4834      	ldr	r0, [pc, #208]	; (8006cc0 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 8006bf0:	f7fb f93f 	bl	8001e72 <assert_failed>

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68b9      	ldr	r1, [r7, #8]
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f000 fec8 	bl	8007990 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f042 0208 	orr.w	r2, r2, #8
 8006c0e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f022 0204 	bic.w	r2, r2, #4
 8006c1e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	691a      	ldr	r2, [r3, #16]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	430a      	orrs	r2, r1
 8006c30:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006c32:	e032      	b.n	8006c9a <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a1c      	ldr	r2, [pc, #112]	; (8006cac <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d009      	beq.n	8006c52 <HAL_TIM_PWM_ConfigChannel+0x45e>
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a1e      	ldr	r2, [pc, #120]	; (8006cbc <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d004      	beq.n	8006c52 <HAL_TIM_PWM_ConfigChannel+0x45e>
 8006c48:	f241 1111 	movw	r1, #4369	; 0x1111
 8006c4c:	481c      	ldr	r0, [pc, #112]	; (8006cc0 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 8006c4e:	f7fb f910 	bl	8001e72 <assert_failed>

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	68b9      	ldr	r1, [r7, #8]
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f000 feeb 	bl	8007a34 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c6c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c7c:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	691b      	ldr	r3, [r3, #16]
 8006c88:	021a      	lsls	r2, r3, #8
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	430a      	orrs	r2, r1
 8006c90:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006c92:	e002      	b.n	8006c9a <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    default:
      status = HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	75fb      	strb	r3, [r7, #23]
      break;
 8006c98:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ca2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3718      	adds	r7, #24
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}
 8006cac:	40010000 	.word	0x40010000
 8006cb0:	40000400 	.word	0x40000400
 8006cb4:	40000800 	.word	0x40000800
 8006cb8:	40000c00 	.word	0x40000c00
 8006cbc:	40010400 	.word	0x40010400
 8006cc0:	08013dc0 	.word	0x08013dc0

08006cc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d101      	bne.n	8006ce0 <HAL_TIM_ConfigClockSource+0x1c>
 8006cdc:	2302      	movs	r3, #2
 8006cde:	e332      	b.n	8007346 <HAL_TIM_ConfigClockSource+0x682>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2202      	movs	r2, #2
 8006cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cf8:	d029      	beq.n	8006d4e <HAL_TIM_ConfigClockSource+0x8a>
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	2b70      	cmp	r3, #112	; 0x70
 8006d00:	d025      	beq.n	8006d4e <HAL_TIM_ConfigClockSource+0x8a>
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d0a:	d020      	beq.n	8006d4e <HAL_TIM_ConfigClockSource+0x8a>
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	2b40      	cmp	r3, #64	; 0x40
 8006d12:	d01c      	beq.n	8006d4e <HAL_TIM_ConfigClockSource+0x8a>
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	2b50      	cmp	r3, #80	; 0x50
 8006d1a:	d018      	beq.n	8006d4e <HAL_TIM_ConfigClockSource+0x8a>
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	2b60      	cmp	r3, #96	; 0x60
 8006d22:	d014      	beq.n	8006d4e <HAL_TIM_ConfigClockSource+0x8a>
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d010      	beq.n	8006d4e <HAL_TIM_ConfigClockSource+0x8a>
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	2b10      	cmp	r3, #16
 8006d32:	d00c      	beq.n	8006d4e <HAL_TIM_ConfigClockSource+0x8a>
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	2b20      	cmp	r3, #32
 8006d3a:	d008      	beq.n	8006d4e <HAL_TIM_ConfigClockSource+0x8a>
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	2b30      	cmp	r3, #48	; 0x30
 8006d42:	d004      	beq.n	8006d4e <HAL_TIM_ConfigClockSource+0x8a>
 8006d44:	f241 514c 	movw	r1, #5452	; 0x154c
 8006d48:	4893      	ldr	r0, [pc, #588]	; (8006f98 <HAL_TIM_ConfigClockSource+0x2d4>)
 8006d4a:	f7fb f892 	bl	8001e72 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d56:	68ba      	ldr	r2, [r7, #8]
 8006d58:	4b90      	ldr	r3, [pc, #576]	; (8006f9c <HAL_TIM_ConfigClockSource+0x2d8>)
 8006d5a:	4013      	ands	r3, r2
 8006d5c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d64:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	68ba      	ldr	r2, [r7, #8]
 8006d6c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d76:	f000 812d 	beq.w	8006fd4 <HAL_TIM_ConfigClockSource+0x310>
 8006d7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d7e:	f200 82d5 	bhi.w	800732c <HAL_TIM_ConfigClockSource+0x668>
 8006d82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d86:	d02e      	beq.n	8006de6 <HAL_TIM_ConfigClockSource+0x122>
 8006d88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d8c:	f200 82ce 	bhi.w	800732c <HAL_TIM_ConfigClockSource+0x668>
 8006d90:	2b70      	cmp	r3, #112	; 0x70
 8006d92:	f000 8082 	beq.w	8006e9a <HAL_TIM_ConfigClockSource+0x1d6>
 8006d96:	2b70      	cmp	r3, #112	; 0x70
 8006d98:	f200 82c8 	bhi.w	800732c <HAL_TIM_ConfigClockSource+0x668>
 8006d9c:	2b60      	cmp	r3, #96	; 0x60
 8006d9e:	f000 81e0 	beq.w	8007162 <HAL_TIM_ConfigClockSource+0x49e>
 8006da2:	2b60      	cmp	r3, #96	; 0x60
 8006da4:	f200 82c2 	bhi.w	800732c <HAL_TIM_ConfigClockSource+0x668>
 8006da8:	2b50      	cmp	r3, #80	; 0x50
 8006daa:	f000 8184 	beq.w	80070b6 <HAL_TIM_ConfigClockSource+0x3f2>
 8006dae:	2b50      	cmp	r3, #80	; 0x50
 8006db0:	f200 82bc 	bhi.w	800732c <HAL_TIM_ConfigClockSource+0x668>
 8006db4:	2b40      	cmp	r3, #64	; 0x40
 8006db6:	f000 8237 	beq.w	8007228 <HAL_TIM_ConfigClockSource+0x564>
 8006dba:	2b40      	cmp	r3, #64	; 0x40
 8006dbc:	f200 82b6 	bhi.w	800732c <HAL_TIM_ConfigClockSource+0x668>
 8006dc0:	2b30      	cmp	r3, #48	; 0x30
 8006dc2:	f000 8287 	beq.w	80072d4 <HAL_TIM_ConfigClockSource+0x610>
 8006dc6:	2b30      	cmp	r3, #48	; 0x30
 8006dc8:	f200 82b0 	bhi.w	800732c <HAL_TIM_ConfigClockSource+0x668>
 8006dcc:	2b20      	cmp	r3, #32
 8006dce:	f000 8281 	beq.w	80072d4 <HAL_TIM_ConfigClockSource+0x610>
 8006dd2:	2b20      	cmp	r3, #32
 8006dd4:	f200 82aa 	bhi.w	800732c <HAL_TIM_ConfigClockSource+0x668>
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	f000 827b 	beq.w	80072d4 <HAL_TIM_ConfigClockSource+0x610>
 8006dde:	2b10      	cmp	r3, #16
 8006de0:	f000 8278 	beq.w	80072d4 <HAL_TIM_ConfigClockSource+0x610>
 8006de4:	e2a2      	b.n	800732c <HAL_TIM_ConfigClockSource+0x668>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a6d      	ldr	r2, [pc, #436]	; (8006fa0 <HAL_TIM_ConfigClockSource+0x2dc>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	f000 82a0 	beq.w	8007332 <HAL_TIM_ConfigClockSource+0x66e>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dfa:	f000 829a 	beq.w	8007332 <HAL_TIM_ConfigClockSource+0x66e>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a68      	ldr	r2, [pc, #416]	; (8006fa4 <HAL_TIM_ConfigClockSource+0x2e0>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	f000 8294 	beq.w	8007332 <HAL_TIM_ConfigClockSource+0x66e>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a66      	ldr	r2, [pc, #408]	; (8006fa8 <HAL_TIM_ConfigClockSource+0x2e4>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	f000 828e 	beq.w	8007332 <HAL_TIM_ConfigClockSource+0x66e>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a64      	ldr	r2, [pc, #400]	; (8006fac <HAL_TIM_ConfigClockSource+0x2e8>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	f000 8288 	beq.w	8007332 <HAL_TIM_ConfigClockSource+0x66e>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a62      	ldr	r2, [pc, #392]	; (8006fb0 <HAL_TIM_ConfigClockSource+0x2ec>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	f000 8282 	beq.w	8007332 <HAL_TIM_ConfigClockSource+0x66e>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a60      	ldr	r2, [pc, #384]	; (8006fb4 <HAL_TIM_ConfigClockSource+0x2f0>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	f000 827c 	beq.w	8007332 <HAL_TIM_ConfigClockSource+0x66e>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a5e      	ldr	r2, [pc, #376]	; (8006fb8 <HAL_TIM_ConfigClockSource+0x2f4>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	f000 8276 	beq.w	8007332 <HAL_TIM_ConfigClockSource+0x66e>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a5c      	ldr	r2, [pc, #368]	; (8006fbc <HAL_TIM_ConfigClockSource+0x2f8>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	f000 8270 	beq.w	8007332 <HAL_TIM_ConfigClockSource+0x66e>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a5a      	ldr	r2, [pc, #360]	; (8006fc0 <HAL_TIM_ConfigClockSource+0x2fc>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	f000 826a 	beq.w	8007332 <HAL_TIM_ConfigClockSource+0x66e>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a58      	ldr	r2, [pc, #352]	; (8006fc4 <HAL_TIM_ConfigClockSource+0x300>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	f000 8264 	beq.w	8007332 <HAL_TIM_ConfigClockSource+0x66e>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a56      	ldr	r2, [pc, #344]	; (8006fc8 <HAL_TIM_ConfigClockSource+0x304>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	f000 825e 	beq.w	8007332 <HAL_TIM_ConfigClockSource+0x66e>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a54      	ldr	r2, [pc, #336]	; (8006fcc <HAL_TIM_ConfigClockSource+0x308>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	f000 8258 	beq.w	8007332 <HAL_TIM_ConfigClockSource+0x66e>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a52      	ldr	r2, [pc, #328]	; (8006fd0 <HAL_TIM_ConfigClockSource+0x30c>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	f000 8252 	beq.w	8007332 <HAL_TIM_ConfigClockSource+0x66e>
 8006e8e:	f241 5158 	movw	r1, #5464	; 0x1558
 8006e92:	4841      	ldr	r0, [pc, #260]	; (8006f98 <HAL_TIM_ConfigClockSource+0x2d4>)
 8006e94:	f7fa ffed 	bl	8001e72 <assert_failed>
      break;
 8006e98:	e24b      	b.n	8007332 <HAL_TIM_ConfigClockSource+0x66e>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a40      	ldr	r2, [pc, #256]	; (8006fa0 <HAL_TIM_ConfigClockSource+0x2dc>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d027      	beq.n	8006ef4 <HAL_TIM_ConfigClockSource+0x230>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eac:	d022      	beq.n	8006ef4 <HAL_TIM_ConfigClockSource+0x230>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a3c      	ldr	r2, [pc, #240]	; (8006fa4 <HAL_TIM_ConfigClockSource+0x2e0>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d01d      	beq.n	8006ef4 <HAL_TIM_ConfigClockSource+0x230>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a3a      	ldr	r2, [pc, #232]	; (8006fa8 <HAL_TIM_ConfigClockSource+0x2e4>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d018      	beq.n	8006ef4 <HAL_TIM_ConfigClockSource+0x230>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a39      	ldr	r2, [pc, #228]	; (8006fac <HAL_TIM_ConfigClockSource+0x2e8>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d013      	beq.n	8006ef4 <HAL_TIM_ConfigClockSource+0x230>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a39      	ldr	r2, [pc, #228]	; (8006fb8 <HAL_TIM_ConfigClockSource+0x2f4>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d00e      	beq.n	8006ef4 <HAL_TIM_ConfigClockSource+0x230>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a38      	ldr	r2, [pc, #224]	; (8006fbc <HAL_TIM_ConfigClockSource+0x2f8>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d009      	beq.n	8006ef4 <HAL_TIM_ConfigClockSource+0x230>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a38      	ldr	r2, [pc, #224]	; (8006fc8 <HAL_TIM_ConfigClockSource+0x304>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d004      	beq.n	8006ef4 <HAL_TIM_ConfigClockSource+0x230>
 8006eea:	f241 515f 	movw	r1, #5471	; 0x155f
 8006eee:	482a      	ldr	r0, [pc, #168]	; (8006f98 <HAL_TIM_ConfigClockSource+0x2d4>)
 8006ef0:	f7fa ffbf 	bl	8001e72 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d013      	beq.n	8006f24 <HAL_TIM_ConfigClockSource+0x260>
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f04:	d00e      	beq.n	8006f24 <HAL_TIM_ConfigClockSource+0x260>
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f0e:	d009      	beq.n	8006f24 <HAL_TIM_ConfigClockSource+0x260>
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006f18:	d004      	beq.n	8006f24 <HAL_TIM_ConfigClockSource+0x260>
 8006f1a:	f241 5162 	movw	r1, #5474	; 0x1562
 8006f1e:	481e      	ldr	r0, [pc, #120]	; (8006f98 <HAL_TIM_ConfigClockSource+0x2d4>)
 8006f20:	f7fa ffa7 	bl	8001e72 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f2c:	d014      	beq.n	8006f58 <HAL_TIM_ConfigClockSource+0x294>
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d010      	beq.n	8006f58 <HAL_TIM_ConfigClockSource+0x294>
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d00c      	beq.n	8006f58 <HAL_TIM_ConfigClockSource+0x294>
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	2b02      	cmp	r3, #2
 8006f44:	d008      	beq.n	8006f58 <HAL_TIM_ConfigClockSource+0x294>
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	2b0a      	cmp	r3, #10
 8006f4c:	d004      	beq.n	8006f58 <HAL_TIM_ConfigClockSource+0x294>
 8006f4e:	f241 5163 	movw	r1, #5475	; 0x1563
 8006f52:	4811      	ldr	r0, [pc, #68]	; (8006f98 <HAL_TIM_ConfigClockSource+0x2d4>)
 8006f54:	f7fa ff8d 	bl	8001e72 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	68db      	ldr	r3, [r3, #12]
 8006f5c:	2b0f      	cmp	r3, #15
 8006f5e:	d904      	bls.n	8006f6a <HAL_TIM_ConfigClockSource+0x2a6>
 8006f60:	f241 5164 	movw	r1, #5476	; 0x1564
 8006f64:	480c      	ldr	r0, [pc, #48]	; (8006f98 <HAL_TIM_ConfigClockSource+0x2d4>)
 8006f66:	f7fa ff84 	bl	8001e72 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6818      	ldr	r0, [r3, #0]
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	6899      	ldr	r1, [r3, #8]
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	685a      	ldr	r2, [r3, #4]
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	68db      	ldr	r3, [r3, #12]
 8006f7a:	f000 fe29 	bl	8007bd0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006f8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	68ba      	ldr	r2, [r7, #8]
 8006f94:	609a      	str	r2, [r3, #8]
      break;
 8006f96:	e1cd      	b.n	8007334 <HAL_TIM_ConfigClockSource+0x670>
 8006f98:	08013dc0 	.word	0x08013dc0
 8006f9c:	fffeff88 	.word	0xfffeff88
 8006fa0:	40010000 	.word	0x40010000
 8006fa4:	40000400 	.word	0x40000400
 8006fa8:	40000800 	.word	0x40000800
 8006fac:	40000c00 	.word	0x40000c00
 8006fb0:	40001000 	.word	0x40001000
 8006fb4:	40001400 	.word	0x40001400
 8006fb8:	40010400 	.word	0x40010400
 8006fbc:	40014000 	.word	0x40014000
 8006fc0:	40014400 	.word	0x40014400
 8006fc4:	40014800 	.word	0x40014800
 8006fc8:	40001800 	.word	0x40001800
 8006fcc:	40001c00 	.word	0x40001c00
 8006fd0:	40002000 	.word	0x40002000
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a8d      	ldr	r2, [pc, #564]	; (8007210 <HAL_TIM_ConfigClockSource+0x54c>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d01d      	beq.n	800701a <HAL_TIM_ConfigClockSource+0x356>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fe6:	d018      	beq.n	800701a <HAL_TIM_ConfigClockSource+0x356>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a89      	ldr	r2, [pc, #548]	; (8007214 <HAL_TIM_ConfigClockSource+0x550>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d013      	beq.n	800701a <HAL_TIM_ConfigClockSource+0x356>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a88      	ldr	r2, [pc, #544]	; (8007218 <HAL_TIM_ConfigClockSource+0x554>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d00e      	beq.n	800701a <HAL_TIM_ConfigClockSource+0x356>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a86      	ldr	r2, [pc, #536]	; (800721c <HAL_TIM_ConfigClockSource+0x558>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d009      	beq.n	800701a <HAL_TIM_ConfigClockSource+0x356>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a85      	ldr	r2, [pc, #532]	; (8007220 <HAL_TIM_ConfigClockSource+0x55c>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d004      	beq.n	800701a <HAL_TIM_ConfigClockSource+0x356>
 8007010:	f241 5177 	movw	r1, #5495	; 0x1577
 8007014:	4883      	ldr	r0, [pc, #524]	; (8007224 <HAL_TIM_ConfigClockSource+0x560>)
 8007016:	f7fa ff2c 	bl	8001e72 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d013      	beq.n	800704a <HAL_TIM_ConfigClockSource+0x386>
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800702a:	d00e      	beq.n	800704a <HAL_TIM_ConfigClockSource+0x386>
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007034:	d009      	beq.n	800704a <HAL_TIM_ConfigClockSource+0x386>
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800703e:	d004      	beq.n	800704a <HAL_TIM_ConfigClockSource+0x386>
 8007040:	f241 517a 	movw	r1, #5498	; 0x157a
 8007044:	4877      	ldr	r0, [pc, #476]	; (8007224 <HAL_TIM_ConfigClockSource+0x560>)
 8007046:	f7fa ff14 	bl	8001e72 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007052:	d014      	beq.n	800707e <HAL_TIM_ConfigClockSource+0x3ba>
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d010      	beq.n	800707e <HAL_TIM_ConfigClockSource+0x3ba>
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d00c      	beq.n	800707e <HAL_TIM_ConfigClockSource+0x3ba>
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	2b02      	cmp	r3, #2
 800706a:	d008      	beq.n	800707e <HAL_TIM_ConfigClockSource+0x3ba>
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	2b0a      	cmp	r3, #10
 8007072:	d004      	beq.n	800707e <HAL_TIM_ConfigClockSource+0x3ba>
 8007074:	f241 517b 	movw	r1, #5499	; 0x157b
 8007078:	486a      	ldr	r0, [pc, #424]	; (8007224 <HAL_TIM_ConfigClockSource+0x560>)
 800707a:	f7fa fefa 	bl	8001e72 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	68db      	ldr	r3, [r3, #12]
 8007082:	2b0f      	cmp	r3, #15
 8007084:	d904      	bls.n	8007090 <HAL_TIM_ConfigClockSource+0x3cc>
 8007086:	f241 517c 	movw	r1, #5500	; 0x157c
 800708a:	4866      	ldr	r0, [pc, #408]	; (8007224 <HAL_TIM_ConfigClockSource+0x560>)
 800708c:	f7fa fef1 	bl	8001e72 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6818      	ldr	r0, [r3, #0]
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	6899      	ldr	r1, [r3, #8]
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	685a      	ldr	r2, [r3, #4]
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	68db      	ldr	r3, [r3, #12]
 80070a0:	f000 fd96 	bl	8007bd0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	689a      	ldr	r2, [r3, #8]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80070b2:	609a      	str	r2, [r3, #8]
      break;
 80070b4:	e13e      	b.n	8007334 <HAL_TIM_ConfigClockSource+0x670>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a55      	ldr	r2, [pc, #340]	; (8007210 <HAL_TIM_ConfigClockSource+0x54c>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d01d      	beq.n	80070fc <HAL_TIM_ConfigClockSource+0x438>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070c8:	d018      	beq.n	80070fc <HAL_TIM_ConfigClockSource+0x438>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a51      	ldr	r2, [pc, #324]	; (8007214 <HAL_TIM_ConfigClockSource+0x550>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d013      	beq.n	80070fc <HAL_TIM_ConfigClockSource+0x438>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a4f      	ldr	r2, [pc, #316]	; (8007218 <HAL_TIM_ConfigClockSource+0x554>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d00e      	beq.n	80070fc <HAL_TIM_ConfigClockSource+0x438>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a4e      	ldr	r2, [pc, #312]	; (800721c <HAL_TIM_ConfigClockSource+0x558>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d009      	beq.n	80070fc <HAL_TIM_ConfigClockSource+0x438>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a4c      	ldr	r2, [pc, #304]	; (8007220 <HAL_TIM_ConfigClockSource+0x55c>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d004      	beq.n	80070fc <HAL_TIM_ConfigClockSource+0x438>
 80070f2:	f241 518b 	movw	r1, #5515	; 0x158b
 80070f6:	484b      	ldr	r0, [pc, #300]	; (8007224 <HAL_TIM_ConfigClockSource+0x560>)
 80070f8:	f7fa febb 	bl	8001e72 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007104:	d014      	beq.n	8007130 <HAL_TIM_ConfigClockSource+0x46c>
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d010      	beq.n	8007130 <HAL_TIM_ConfigClockSource+0x46c>
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d00c      	beq.n	8007130 <HAL_TIM_ConfigClockSource+0x46c>
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	2b02      	cmp	r3, #2
 800711c:	d008      	beq.n	8007130 <HAL_TIM_ConfigClockSource+0x46c>
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	2b0a      	cmp	r3, #10
 8007124:	d004      	beq.n	8007130 <HAL_TIM_ConfigClockSource+0x46c>
 8007126:	f241 518e 	movw	r1, #5518	; 0x158e
 800712a:	483e      	ldr	r0, [pc, #248]	; (8007224 <HAL_TIM_ConfigClockSource+0x560>)
 800712c:	f7fa fea1 	bl	8001e72 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	2b0f      	cmp	r3, #15
 8007136:	d904      	bls.n	8007142 <HAL_TIM_ConfigClockSource+0x47e>
 8007138:	f241 518f 	movw	r1, #5519	; 0x158f
 800713c:	4839      	ldr	r0, [pc, #228]	; (8007224 <HAL_TIM_ConfigClockSource+0x560>)
 800713e:	f7fa fe98 	bl	8001e72 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6818      	ldr	r0, [r3, #0]
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	6859      	ldr	r1, [r3, #4]
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	68db      	ldr	r3, [r3, #12]
 800714e:	461a      	mov	r2, r3
 8007150:	f000 fcc4 	bl	8007adc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	2150      	movs	r1, #80	; 0x50
 800715a:	4618      	mov	r0, r3
 800715c:	f000 fd1d 	bl	8007b9a <TIM_ITRx_SetConfig>
      break;
 8007160:	e0e8      	b.n	8007334 <HAL_TIM_ConfigClockSource+0x670>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a2a      	ldr	r2, [pc, #168]	; (8007210 <HAL_TIM_ConfigClockSource+0x54c>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d01d      	beq.n	80071a8 <HAL_TIM_ConfigClockSource+0x4e4>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007174:	d018      	beq.n	80071a8 <HAL_TIM_ConfigClockSource+0x4e4>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a26      	ldr	r2, [pc, #152]	; (8007214 <HAL_TIM_ConfigClockSource+0x550>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d013      	beq.n	80071a8 <HAL_TIM_ConfigClockSource+0x4e4>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a24      	ldr	r2, [pc, #144]	; (8007218 <HAL_TIM_ConfigClockSource+0x554>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d00e      	beq.n	80071a8 <HAL_TIM_ConfigClockSource+0x4e4>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a23      	ldr	r2, [pc, #140]	; (800721c <HAL_TIM_ConfigClockSource+0x558>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d009      	beq.n	80071a8 <HAL_TIM_ConfigClockSource+0x4e4>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a21      	ldr	r2, [pc, #132]	; (8007220 <HAL_TIM_ConfigClockSource+0x55c>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d004      	beq.n	80071a8 <HAL_TIM_ConfigClockSource+0x4e4>
 800719e:	f241 519b 	movw	r1, #5531	; 0x159b
 80071a2:	4820      	ldr	r0, [pc, #128]	; (8007224 <HAL_TIM_ConfigClockSource+0x560>)
 80071a4:	f7fa fe65 	bl	8001e72 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071b0:	d014      	beq.n	80071dc <HAL_TIM_ConfigClockSource+0x518>
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d010      	beq.n	80071dc <HAL_TIM_ConfigClockSource+0x518>
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d00c      	beq.n	80071dc <HAL_TIM_ConfigClockSource+0x518>
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	2b02      	cmp	r3, #2
 80071c8:	d008      	beq.n	80071dc <HAL_TIM_ConfigClockSource+0x518>
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	2b0a      	cmp	r3, #10
 80071d0:	d004      	beq.n	80071dc <HAL_TIM_ConfigClockSource+0x518>
 80071d2:	f241 519e 	movw	r1, #5534	; 0x159e
 80071d6:	4813      	ldr	r0, [pc, #76]	; (8007224 <HAL_TIM_ConfigClockSource+0x560>)
 80071d8:	f7fa fe4b 	bl	8001e72 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	68db      	ldr	r3, [r3, #12]
 80071e0:	2b0f      	cmp	r3, #15
 80071e2:	d904      	bls.n	80071ee <HAL_TIM_ConfigClockSource+0x52a>
 80071e4:	f241 519f 	movw	r1, #5535	; 0x159f
 80071e8:	480e      	ldr	r0, [pc, #56]	; (8007224 <HAL_TIM_ConfigClockSource+0x560>)
 80071ea:	f7fa fe42 	bl	8001e72 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6818      	ldr	r0, [r3, #0]
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	6859      	ldr	r1, [r3, #4]
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	68db      	ldr	r3, [r3, #12]
 80071fa:	461a      	mov	r2, r3
 80071fc:	f000 fc9d 	bl	8007b3a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	2160      	movs	r1, #96	; 0x60
 8007206:	4618      	mov	r0, r3
 8007208:	f000 fcc7 	bl	8007b9a <TIM_ITRx_SetConfig>
      break;
 800720c:	e092      	b.n	8007334 <HAL_TIM_ConfigClockSource+0x670>
 800720e:	bf00      	nop
 8007210:	40010000 	.word	0x40010000
 8007214:	40000400 	.word	0x40000400
 8007218:	40000800 	.word	0x40000800
 800721c:	40000c00 	.word	0x40000c00
 8007220:	40010400 	.word	0x40010400
 8007224:	08013dc0 	.word	0x08013dc0
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a48      	ldr	r2, [pc, #288]	; (8007350 <HAL_TIM_ConfigClockSource+0x68c>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d01d      	beq.n	800726e <HAL_TIM_ConfigClockSource+0x5aa>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800723a:	d018      	beq.n	800726e <HAL_TIM_ConfigClockSource+0x5aa>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a44      	ldr	r2, [pc, #272]	; (8007354 <HAL_TIM_ConfigClockSource+0x690>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d013      	beq.n	800726e <HAL_TIM_ConfigClockSource+0x5aa>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a43      	ldr	r2, [pc, #268]	; (8007358 <HAL_TIM_ConfigClockSource+0x694>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d00e      	beq.n	800726e <HAL_TIM_ConfigClockSource+0x5aa>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a41      	ldr	r2, [pc, #260]	; (800735c <HAL_TIM_ConfigClockSource+0x698>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d009      	beq.n	800726e <HAL_TIM_ConfigClockSource+0x5aa>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a40      	ldr	r2, [pc, #256]	; (8007360 <HAL_TIM_ConfigClockSource+0x69c>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d004      	beq.n	800726e <HAL_TIM_ConfigClockSource+0x5aa>
 8007264:	f241 51ab 	movw	r1, #5547	; 0x15ab
 8007268:	483e      	ldr	r0, [pc, #248]	; (8007364 <HAL_TIM_ConfigClockSource+0x6a0>)
 800726a:	f7fa fe02 	bl	8001e72 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007276:	d014      	beq.n	80072a2 <HAL_TIM_ConfigClockSource+0x5de>
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d010      	beq.n	80072a2 <HAL_TIM_ConfigClockSource+0x5de>
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d00c      	beq.n	80072a2 <HAL_TIM_ConfigClockSource+0x5de>
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	2b02      	cmp	r3, #2
 800728e:	d008      	beq.n	80072a2 <HAL_TIM_ConfigClockSource+0x5de>
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	2b0a      	cmp	r3, #10
 8007296:	d004      	beq.n	80072a2 <HAL_TIM_ConfigClockSource+0x5de>
 8007298:	f241 51ae 	movw	r1, #5550	; 0x15ae
 800729c:	4831      	ldr	r0, [pc, #196]	; (8007364 <HAL_TIM_ConfigClockSource+0x6a0>)
 800729e:	f7fa fde8 	bl	8001e72 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	68db      	ldr	r3, [r3, #12]
 80072a6:	2b0f      	cmp	r3, #15
 80072a8:	d904      	bls.n	80072b4 <HAL_TIM_ConfigClockSource+0x5f0>
 80072aa:	f241 51af 	movw	r1, #5551	; 0x15af
 80072ae:	482d      	ldr	r0, [pc, #180]	; (8007364 <HAL_TIM_ConfigClockSource+0x6a0>)
 80072b0:	f7fa fddf 	bl	8001e72 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6818      	ldr	r0, [r3, #0]
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	6859      	ldr	r1, [r3, #4]
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	68db      	ldr	r3, [r3, #12]
 80072c0:	461a      	mov	r2, r3
 80072c2:	f000 fc0b 	bl	8007adc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	2140      	movs	r1, #64	; 0x40
 80072cc:	4618      	mov	r0, r3
 80072ce:	f000 fc64 	bl	8007b9a <TIM_ITRx_SetConfig>
      break;
 80072d2:	e02f      	b.n	8007334 <HAL_TIM_ConfigClockSource+0x670>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a1d      	ldr	r2, [pc, #116]	; (8007350 <HAL_TIM_ConfigClockSource+0x68c>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d01d      	beq.n	800731a <HAL_TIM_ConfigClockSource+0x656>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072e6:	d018      	beq.n	800731a <HAL_TIM_ConfigClockSource+0x656>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a19      	ldr	r2, [pc, #100]	; (8007354 <HAL_TIM_ConfigClockSource+0x690>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d013      	beq.n	800731a <HAL_TIM_ConfigClockSource+0x656>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a18      	ldr	r2, [pc, #96]	; (8007358 <HAL_TIM_ConfigClockSource+0x694>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d00e      	beq.n	800731a <HAL_TIM_ConfigClockSource+0x656>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a16      	ldr	r2, [pc, #88]	; (800735c <HAL_TIM_ConfigClockSource+0x698>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d009      	beq.n	800731a <HAL_TIM_ConfigClockSource+0x656>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a15      	ldr	r2, [pc, #84]	; (8007360 <HAL_TIM_ConfigClockSource+0x69c>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d004      	beq.n	800731a <HAL_TIM_ConfigClockSource+0x656>
 8007310:	f241 51be 	movw	r1, #5566	; 0x15be
 8007314:	4813      	ldr	r0, [pc, #76]	; (8007364 <HAL_TIM_ConfigClockSource+0x6a0>)
 8007316:	f7fa fdac 	bl	8001e72 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4619      	mov	r1, r3
 8007324:	4610      	mov	r0, r2
 8007326:	f000 fc38 	bl	8007b9a <TIM_ITRx_SetConfig>
      break;
 800732a:	e003      	b.n	8007334 <HAL_TIM_ConfigClockSource+0x670>
    }

    default:
      status = HAL_ERROR;
 800732c:	2301      	movs	r3, #1
 800732e:	73fb      	strb	r3, [r7, #15]
      break;
 8007330:	e000      	b.n	8007334 <HAL_TIM_ConfigClockSource+0x670>
      break;
 8007332:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2201      	movs	r2, #1
 8007338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007344:	7bfb      	ldrb	r3, [r7, #15]
}
 8007346:	4618      	mov	r0, r3
 8007348:	3710      	adds	r7, #16
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}
 800734e:	bf00      	nop
 8007350:	40010000 	.word	0x40010000
 8007354:	40000400 	.word	0x40000400
 8007358:	40000800 	.word	0x40000800
 800735c:	40000c00 	.word	0x40000c00
 8007360:	40010400 	.word	0x40010400
 8007364:	08013dc0 	.word	0x08013dc0

08007368 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007368:	b480      	push	{r7}
 800736a:	b083      	sub	sp, #12
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007370:	bf00      	nop
 8007372:	370c      	adds	r7, #12
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr

0800737c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800737c:	b480      	push	{r7}
 800737e:	b083      	sub	sp, #12
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007384:	bf00      	nop
 8007386:	370c      	adds	r7, #12
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr

08007390 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007390:	b480      	push	{r7}
 8007392:	b083      	sub	sp, #12
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007398:	bf00      	nop
 800739a:	370c      	adds	r7, #12
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr

080073a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80073ac:	bf00      	nop
 80073ae:	370c      	adds	r7, #12
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr

080073b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b083      	sub	sp, #12
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80073c0:	bf00      	nop
 80073c2:	370c      	adds	r7, #12
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b085      	sub	sp, #20
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	4a40      	ldr	r2, [pc, #256]	; (80074e0 <TIM_Base_SetConfig+0x114>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d013      	beq.n	800740c <TIM_Base_SetConfig+0x40>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073ea:	d00f      	beq.n	800740c <TIM_Base_SetConfig+0x40>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	4a3d      	ldr	r2, [pc, #244]	; (80074e4 <TIM_Base_SetConfig+0x118>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d00b      	beq.n	800740c <TIM_Base_SetConfig+0x40>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	4a3c      	ldr	r2, [pc, #240]	; (80074e8 <TIM_Base_SetConfig+0x11c>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d007      	beq.n	800740c <TIM_Base_SetConfig+0x40>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	4a3b      	ldr	r2, [pc, #236]	; (80074ec <TIM_Base_SetConfig+0x120>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d003      	beq.n	800740c <TIM_Base_SetConfig+0x40>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	4a3a      	ldr	r2, [pc, #232]	; (80074f0 <TIM_Base_SetConfig+0x124>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d108      	bne.n	800741e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007412:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	68fa      	ldr	r2, [r7, #12]
 800741a:	4313      	orrs	r3, r2
 800741c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	4a2f      	ldr	r2, [pc, #188]	; (80074e0 <TIM_Base_SetConfig+0x114>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d02b      	beq.n	800747e <TIM_Base_SetConfig+0xb2>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800742c:	d027      	beq.n	800747e <TIM_Base_SetConfig+0xb2>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	4a2c      	ldr	r2, [pc, #176]	; (80074e4 <TIM_Base_SetConfig+0x118>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d023      	beq.n	800747e <TIM_Base_SetConfig+0xb2>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	4a2b      	ldr	r2, [pc, #172]	; (80074e8 <TIM_Base_SetConfig+0x11c>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d01f      	beq.n	800747e <TIM_Base_SetConfig+0xb2>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	4a2a      	ldr	r2, [pc, #168]	; (80074ec <TIM_Base_SetConfig+0x120>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d01b      	beq.n	800747e <TIM_Base_SetConfig+0xb2>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	4a29      	ldr	r2, [pc, #164]	; (80074f0 <TIM_Base_SetConfig+0x124>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d017      	beq.n	800747e <TIM_Base_SetConfig+0xb2>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	4a28      	ldr	r2, [pc, #160]	; (80074f4 <TIM_Base_SetConfig+0x128>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d013      	beq.n	800747e <TIM_Base_SetConfig+0xb2>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	4a27      	ldr	r2, [pc, #156]	; (80074f8 <TIM_Base_SetConfig+0x12c>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d00f      	beq.n	800747e <TIM_Base_SetConfig+0xb2>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	4a26      	ldr	r2, [pc, #152]	; (80074fc <TIM_Base_SetConfig+0x130>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d00b      	beq.n	800747e <TIM_Base_SetConfig+0xb2>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	4a25      	ldr	r2, [pc, #148]	; (8007500 <TIM_Base_SetConfig+0x134>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d007      	beq.n	800747e <TIM_Base_SetConfig+0xb2>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	4a24      	ldr	r2, [pc, #144]	; (8007504 <TIM_Base_SetConfig+0x138>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d003      	beq.n	800747e <TIM_Base_SetConfig+0xb2>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	4a23      	ldr	r2, [pc, #140]	; (8007508 <TIM_Base_SetConfig+0x13c>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d108      	bne.n	8007490 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007484:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	68db      	ldr	r3, [r3, #12]
 800748a:	68fa      	ldr	r2, [r7, #12]
 800748c:	4313      	orrs	r3, r2
 800748e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	695b      	ldr	r3, [r3, #20]
 800749a:	4313      	orrs	r3, r2
 800749c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	68fa      	ldr	r2, [r7, #12]
 80074a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	689a      	ldr	r2, [r3, #8]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	4a0a      	ldr	r2, [pc, #40]	; (80074e0 <TIM_Base_SetConfig+0x114>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d003      	beq.n	80074c4 <TIM_Base_SetConfig+0xf8>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	4a0c      	ldr	r2, [pc, #48]	; (80074f0 <TIM_Base_SetConfig+0x124>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d103      	bne.n	80074cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	691a      	ldr	r2, [r3, #16]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2201      	movs	r2, #1
 80074d0:	615a      	str	r2, [r3, #20]
}
 80074d2:	bf00      	nop
 80074d4:	3714      	adds	r7, #20
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr
 80074de:	bf00      	nop
 80074e0:	40010000 	.word	0x40010000
 80074e4:	40000400 	.word	0x40000400
 80074e8:	40000800 	.word	0x40000800
 80074ec:	40000c00 	.word	0x40000c00
 80074f0:	40010400 	.word	0x40010400
 80074f4:	40014000 	.word	0x40014000
 80074f8:	40014400 	.word	0x40014400
 80074fc:	40014800 	.word	0x40014800
 8007500:	40001800 	.word	0x40001800
 8007504:	40001c00 	.word	0x40001c00
 8007508:	40002000 	.word	0x40002000

0800750c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b086      	sub	sp, #24
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6a1b      	ldr	r3, [r3, #32]
 800751a:	f023 0201 	bic.w	r2, r3, #1
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6a1b      	ldr	r3, [r3, #32]
 8007526:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	699b      	ldr	r3, [r3, #24]
 8007532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007534:	68fa      	ldr	r2, [r7, #12]
 8007536:	4b3f      	ldr	r3, [pc, #252]	; (8007634 <TIM_OC1_SetConfig+0x128>)
 8007538:	4013      	ands	r3, r2
 800753a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f023 0303 	bic.w	r3, r3, #3
 8007542:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	68fa      	ldr	r2, [r7, #12]
 800754a:	4313      	orrs	r3, r2
 800754c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	f023 0302 	bic.w	r3, r3, #2
 8007554:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	697a      	ldr	r2, [r7, #20]
 800755c:	4313      	orrs	r3, r2
 800755e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	4a35      	ldr	r2, [pc, #212]	; (8007638 <TIM_OC1_SetConfig+0x12c>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d003      	beq.n	8007570 <TIM_OC1_SetConfig+0x64>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	4a34      	ldr	r2, [pc, #208]	; (800763c <TIM_OC1_SetConfig+0x130>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d119      	bne.n	80075a4 <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	68db      	ldr	r3, [r3, #12]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d008      	beq.n	800758a <TIM_OC1_SetConfig+0x7e>
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	68db      	ldr	r3, [r3, #12]
 800757c:	2b08      	cmp	r3, #8
 800757e:	d004      	beq.n	800758a <TIM_OC1_SetConfig+0x7e>
 8007580:	f641 3167 	movw	r1, #7015	; 0x1b67
 8007584:	482e      	ldr	r0, [pc, #184]	; (8007640 <TIM_OC1_SetConfig+0x134>)
 8007586:	f7fa fc74 	bl	8001e72 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	f023 0308 	bic.w	r3, r3, #8
 8007590:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	68db      	ldr	r3, [r3, #12]
 8007596:	697a      	ldr	r2, [r7, #20]
 8007598:	4313      	orrs	r3, r2
 800759a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	f023 0304 	bic.w	r3, r3, #4
 80075a2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	4a24      	ldr	r2, [pc, #144]	; (8007638 <TIM_OC1_SetConfig+0x12c>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d003      	beq.n	80075b4 <TIM_OC1_SetConfig+0xa8>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	4a23      	ldr	r2, [pc, #140]	; (800763c <TIM_OC1_SetConfig+0x130>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d12d      	bne.n	8007610 <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	699b      	ldr	r3, [r3, #24]
 80075b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075bc:	d008      	beq.n	80075d0 <TIM_OC1_SetConfig+0xc4>
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	699b      	ldr	r3, [r3, #24]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d004      	beq.n	80075d0 <TIM_OC1_SetConfig+0xc4>
 80075c6:	f641 3174 	movw	r1, #7028	; 0x1b74
 80075ca:	481d      	ldr	r0, [pc, #116]	; (8007640 <TIM_OC1_SetConfig+0x134>)
 80075cc:	f7fa fc51 	bl	8001e72 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	695b      	ldr	r3, [r3, #20]
 80075d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075d8:	d008      	beq.n	80075ec <TIM_OC1_SetConfig+0xe0>
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	695b      	ldr	r3, [r3, #20]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d004      	beq.n	80075ec <TIM_OC1_SetConfig+0xe0>
 80075e2:	f641 3175 	movw	r1, #7029	; 0x1b75
 80075e6:	4816      	ldr	r0, [pc, #88]	; (8007640 <TIM_OC1_SetConfig+0x134>)
 80075e8:	f7fa fc43 	bl	8001e72 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80075fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	695b      	ldr	r3, [r3, #20]
 8007600:	693a      	ldr	r2, [r7, #16]
 8007602:	4313      	orrs	r3, r2
 8007604:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	699b      	ldr	r3, [r3, #24]
 800760a:	693a      	ldr	r2, [r7, #16]
 800760c:	4313      	orrs	r3, r2
 800760e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	693a      	ldr	r2, [r7, #16]
 8007614:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	68fa      	ldr	r2, [r7, #12]
 800761a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	685a      	ldr	r2, [r3, #4]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	697a      	ldr	r2, [r7, #20]
 8007628:	621a      	str	r2, [r3, #32]
}
 800762a:	bf00      	nop
 800762c:	3718      	adds	r7, #24
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
 8007632:	bf00      	nop
 8007634:	fffeff8f 	.word	0xfffeff8f
 8007638:	40010000 	.word	0x40010000
 800763c:	40010400 	.word	0x40010400
 8007640:	08013dc0 	.word	0x08013dc0

08007644 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b086      	sub	sp, #24
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6a1b      	ldr	r3, [r3, #32]
 8007652:	f023 0210 	bic.w	r2, r3, #16
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6a1b      	ldr	r3, [r3, #32]
 800765e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	699b      	ldr	r3, [r3, #24]
 800766a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800766c:	68fa      	ldr	r2, [r7, #12]
 800766e:	4b41      	ldr	r3, [pc, #260]	; (8007774 <TIM_OC2_SetConfig+0x130>)
 8007670:	4013      	ands	r3, r2
 8007672:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800767a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	021b      	lsls	r3, r3, #8
 8007682:	68fa      	ldr	r2, [r7, #12]
 8007684:	4313      	orrs	r3, r2
 8007686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	f023 0320 	bic.w	r3, r3, #32
 800768e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	011b      	lsls	r3, r3, #4
 8007696:	697a      	ldr	r2, [r7, #20]
 8007698:	4313      	orrs	r3, r2
 800769a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	4a36      	ldr	r2, [pc, #216]	; (8007778 <TIM_OC2_SetConfig+0x134>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d003      	beq.n	80076ac <TIM_OC2_SetConfig+0x68>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	4a35      	ldr	r2, [pc, #212]	; (800777c <TIM_OC2_SetConfig+0x138>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d11a      	bne.n	80076e2 <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	68db      	ldr	r3, [r3, #12]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d008      	beq.n	80076c6 <TIM_OC2_SetConfig+0x82>
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	2b08      	cmp	r3, #8
 80076ba:	d004      	beq.n	80076c6 <TIM_OC2_SetConfig+0x82>
 80076bc:	f641 31b2 	movw	r1, #7090	; 0x1bb2
 80076c0:	482f      	ldr	r0, [pc, #188]	; (8007780 <TIM_OC2_SetConfig+0x13c>)
 80076c2:	f7fa fbd6 	bl	8001e72 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	68db      	ldr	r3, [r3, #12]
 80076d2:	011b      	lsls	r3, r3, #4
 80076d4:	697a      	ldr	r2, [r7, #20]
 80076d6:	4313      	orrs	r3, r2
 80076d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076e0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	4a24      	ldr	r2, [pc, #144]	; (8007778 <TIM_OC2_SetConfig+0x134>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d003      	beq.n	80076f2 <TIM_OC2_SetConfig+0xae>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	4a23      	ldr	r2, [pc, #140]	; (800777c <TIM_OC2_SetConfig+0x138>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d12f      	bne.n	8007752 <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	699b      	ldr	r3, [r3, #24]
 80076f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076fa:	d008      	beq.n	800770e <TIM_OC2_SetConfig+0xca>
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	699b      	ldr	r3, [r3, #24]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d004      	beq.n	800770e <TIM_OC2_SetConfig+0xca>
 8007704:	f44f 51de 	mov.w	r1, #7104	; 0x1bc0
 8007708:	481d      	ldr	r0, [pc, #116]	; (8007780 <TIM_OC2_SetConfig+0x13c>)
 800770a:	f7fa fbb2 	bl	8001e72 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	695b      	ldr	r3, [r3, #20]
 8007712:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007716:	d008      	beq.n	800772a <TIM_OC2_SetConfig+0xe6>
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	695b      	ldr	r3, [r3, #20]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d004      	beq.n	800772a <TIM_OC2_SetConfig+0xe6>
 8007720:	f641 31c1 	movw	r1, #7105	; 0x1bc1
 8007724:	4816      	ldr	r0, [pc, #88]	; (8007780 <TIM_OC2_SetConfig+0x13c>)
 8007726:	f7fa fba4 	bl	8001e72 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007730:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007738:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	695b      	ldr	r3, [r3, #20]
 800773e:	009b      	lsls	r3, r3, #2
 8007740:	693a      	ldr	r2, [r7, #16]
 8007742:	4313      	orrs	r3, r2
 8007744:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	699b      	ldr	r3, [r3, #24]
 800774a:	009b      	lsls	r3, r3, #2
 800774c:	693a      	ldr	r2, [r7, #16]
 800774e:	4313      	orrs	r3, r2
 8007750:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	693a      	ldr	r2, [r7, #16]
 8007756:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	68fa      	ldr	r2, [r7, #12]
 800775c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	685a      	ldr	r2, [r3, #4]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	697a      	ldr	r2, [r7, #20]
 800776a:	621a      	str	r2, [r3, #32]
}
 800776c:	bf00      	nop
 800776e:	3718      	adds	r7, #24
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}
 8007774:	feff8fff 	.word	0xfeff8fff
 8007778:	40010000 	.word	0x40010000
 800777c:	40010400 	.word	0x40010400
 8007780:	08013dc0 	.word	0x08013dc0

08007784 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b086      	sub	sp, #24
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6a1b      	ldr	r3, [r3, #32]
 8007792:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6a1b      	ldr	r3, [r3, #32]
 800779e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	69db      	ldr	r3, [r3, #28]
 80077aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80077ac:	68fa      	ldr	r2, [r7, #12]
 80077ae:	4b41      	ldr	r3, [pc, #260]	; (80078b4 <TIM_OC3_SetConfig+0x130>)
 80077b0:	4013      	ands	r3, r2
 80077b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f023 0303 	bic.w	r3, r3, #3
 80077ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	68fa      	ldr	r2, [r7, #12]
 80077c2:	4313      	orrs	r3, r2
 80077c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80077cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	021b      	lsls	r3, r3, #8
 80077d4:	697a      	ldr	r2, [r7, #20]
 80077d6:	4313      	orrs	r3, r2
 80077d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	4a36      	ldr	r2, [pc, #216]	; (80078b8 <TIM_OC3_SetConfig+0x134>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d003      	beq.n	80077ea <TIM_OC3_SetConfig+0x66>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	4a35      	ldr	r2, [pc, #212]	; (80078bc <TIM_OC3_SetConfig+0x138>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d11a      	bne.n	8007820 <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	68db      	ldr	r3, [r3, #12]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d008      	beq.n	8007804 <TIM_OC3_SetConfig+0x80>
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	68db      	ldr	r3, [r3, #12]
 80077f6:	2b08      	cmp	r3, #8
 80077f8:	d004      	beq.n	8007804 <TIM_OC3_SetConfig+0x80>
 80077fa:	f641 31fd 	movw	r1, #7165	; 0x1bfd
 80077fe:	4830      	ldr	r0, [pc, #192]	; (80078c0 <TIM_OC3_SetConfig+0x13c>)
 8007800:	f7fa fb37 	bl	8001e72 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800780a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	021b      	lsls	r3, r3, #8
 8007812:	697a      	ldr	r2, [r7, #20]
 8007814:	4313      	orrs	r3, r2
 8007816:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800781e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	4a25      	ldr	r2, [pc, #148]	; (80078b8 <TIM_OC3_SetConfig+0x134>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d003      	beq.n	8007830 <TIM_OC3_SetConfig+0xac>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	4a24      	ldr	r2, [pc, #144]	; (80078bc <TIM_OC3_SetConfig+0x138>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d12f      	bne.n	8007890 <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	699b      	ldr	r3, [r3, #24]
 8007834:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007838:	d008      	beq.n	800784c <TIM_OC3_SetConfig+0xc8>
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	699b      	ldr	r3, [r3, #24]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d004      	beq.n	800784c <TIM_OC3_SetConfig+0xc8>
 8007842:	f641 410a 	movw	r1, #7178	; 0x1c0a
 8007846:	481e      	ldr	r0, [pc, #120]	; (80078c0 <TIM_OC3_SetConfig+0x13c>)
 8007848:	f7fa fb13 	bl	8001e72 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	695b      	ldr	r3, [r3, #20]
 8007850:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007854:	d008      	beq.n	8007868 <TIM_OC3_SetConfig+0xe4>
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	695b      	ldr	r3, [r3, #20]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d004      	beq.n	8007868 <TIM_OC3_SetConfig+0xe4>
 800785e:	f641 410b 	movw	r1, #7179	; 0x1c0b
 8007862:	4817      	ldr	r0, [pc, #92]	; (80078c0 <TIM_OC3_SetConfig+0x13c>)
 8007864:	f7fa fb05 	bl	8001e72 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800786e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007876:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	695b      	ldr	r3, [r3, #20]
 800787c:	011b      	lsls	r3, r3, #4
 800787e:	693a      	ldr	r2, [r7, #16]
 8007880:	4313      	orrs	r3, r2
 8007882:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	699b      	ldr	r3, [r3, #24]
 8007888:	011b      	lsls	r3, r3, #4
 800788a:	693a      	ldr	r2, [r7, #16]
 800788c:	4313      	orrs	r3, r2
 800788e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	693a      	ldr	r2, [r7, #16]
 8007894:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	68fa      	ldr	r2, [r7, #12]
 800789a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	685a      	ldr	r2, [r3, #4]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	697a      	ldr	r2, [r7, #20]
 80078a8:	621a      	str	r2, [r3, #32]
}
 80078aa:	bf00      	nop
 80078ac:	3718      	adds	r7, #24
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	bf00      	nop
 80078b4:	fffeff8f 	.word	0xfffeff8f
 80078b8:	40010000 	.word	0x40010000
 80078bc:	40010400 	.word	0x40010400
 80078c0:	08013dc0 	.word	0x08013dc0

080078c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b086      	sub	sp, #24
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6a1b      	ldr	r3, [r3, #32]
 80078d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6a1b      	ldr	r3, [r3, #32]
 80078de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	69db      	ldr	r3, [r3, #28]
 80078ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80078ec:	68fa      	ldr	r2, [r7, #12]
 80078ee:	4b24      	ldr	r3, [pc, #144]	; (8007980 <TIM_OC4_SetConfig+0xbc>)
 80078f0:	4013      	ands	r3, r2
 80078f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	021b      	lsls	r3, r3, #8
 8007902:	68fa      	ldr	r2, [r7, #12]
 8007904:	4313      	orrs	r3, r2
 8007906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800790e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	689b      	ldr	r3, [r3, #8]
 8007914:	031b      	lsls	r3, r3, #12
 8007916:	693a      	ldr	r2, [r7, #16]
 8007918:	4313      	orrs	r3, r2
 800791a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	4a19      	ldr	r2, [pc, #100]	; (8007984 <TIM_OC4_SetConfig+0xc0>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d003      	beq.n	800792c <TIM_OC4_SetConfig+0x68>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	4a18      	ldr	r2, [pc, #96]	; (8007988 <TIM_OC4_SetConfig+0xc4>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d117      	bne.n	800795c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	695b      	ldr	r3, [r3, #20]
 8007930:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007934:	d008      	beq.n	8007948 <TIM_OC4_SetConfig+0x84>
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	695b      	ldr	r3, [r3, #20]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d004      	beq.n	8007948 <TIM_OC4_SetConfig+0x84>
 800793e:	f641 4149 	movw	r1, #7241	; 0x1c49
 8007942:	4812      	ldr	r0, [pc, #72]	; (800798c <TIM_OC4_SetConfig+0xc8>)
 8007944:	f7fa fa95 	bl	8001e72 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800794e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	695b      	ldr	r3, [r3, #20]
 8007954:	019b      	lsls	r3, r3, #6
 8007956:	697a      	ldr	r2, [r7, #20]
 8007958:	4313      	orrs	r3, r2
 800795a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	697a      	ldr	r2, [r7, #20]
 8007960:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	68fa      	ldr	r2, [r7, #12]
 8007966:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	685a      	ldr	r2, [r3, #4]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	693a      	ldr	r2, [r7, #16]
 8007974:	621a      	str	r2, [r3, #32]
}
 8007976:	bf00      	nop
 8007978:	3718      	adds	r7, #24
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}
 800797e:	bf00      	nop
 8007980:	feff8fff 	.word	0xfeff8fff
 8007984:	40010000 	.word	0x40010000
 8007988:	40010400 	.word	0x40010400
 800798c:	08013dc0 	.word	0x08013dc0

08007990 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007990:	b480      	push	{r7}
 8007992:	b087      	sub	sp, #28
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6a1b      	ldr	r3, [r3, #32]
 800799e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6a1b      	ldr	r3, [r3, #32]
 80079aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80079b8:	68fa      	ldr	r2, [r7, #12]
 80079ba:	4b1b      	ldr	r3, [pc, #108]	; (8007a28 <TIM_OC5_SetConfig+0x98>)
 80079bc:	4013      	ands	r3, r2
 80079be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	68fa      	ldr	r2, [r7, #12]
 80079c6:	4313      	orrs	r3, r2
 80079c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80079d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	689b      	ldr	r3, [r3, #8]
 80079d6:	041b      	lsls	r3, r3, #16
 80079d8:	693a      	ldr	r2, [r7, #16]
 80079da:	4313      	orrs	r3, r2
 80079dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	4a12      	ldr	r2, [pc, #72]	; (8007a2c <TIM_OC5_SetConfig+0x9c>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d003      	beq.n	80079ee <TIM_OC5_SetConfig+0x5e>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	4a11      	ldr	r2, [pc, #68]	; (8007a30 <TIM_OC5_SetConfig+0xa0>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d109      	bne.n	8007a02 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079f4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	695b      	ldr	r3, [r3, #20]
 80079fa:	021b      	lsls	r3, r3, #8
 80079fc:	697a      	ldr	r2, [r7, #20]
 80079fe:	4313      	orrs	r3, r2
 8007a00:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	697a      	ldr	r2, [r7, #20]
 8007a06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	68fa      	ldr	r2, [r7, #12]
 8007a0c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	685a      	ldr	r2, [r3, #4]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	693a      	ldr	r2, [r7, #16]
 8007a1a:	621a      	str	r2, [r3, #32]
}
 8007a1c:	bf00      	nop
 8007a1e:	371c      	adds	r7, #28
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr
 8007a28:	fffeff8f 	.word	0xfffeff8f
 8007a2c:	40010000 	.word	0x40010000
 8007a30:	40010400 	.word	0x40010400

08007a34 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b087      	sub	sp, #28
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6a1b      	ldr	r3, [r3, #32]
 8007a42:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6a1b      	ldr	r3, [r3, #32]
 8007a4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007a5c:	68fa      	ldr	r2, [r7, #12]
 8007a5e:	4b1c      	ldr	r3, [pc, #112]	; (8007ad0 <TIM_OC6_SetConfig+0x9c>)
 8007a60:	4013      	ands	r3, r2
 8007a62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	021b      	lsls	r3, r3, #8
 8007a6a:	68fa      	ldr	r2, [r7, #12]
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007a76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	689b      	ldr	r3, [r3, #8]
 8007a7c:	051b      	lsls	r3, r3, #20
 8007a7e:	693a      	ldr	r2, [r7, #16]
 8007a80:	4313      	orrs	r3, r2
 8007a82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	4a13      	ldr	r2, [pc, #76]	; (8007ad4 <TIM_OC6_SetConfig+0xa0>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d003      	beq.n	8007a94 <TIM_OC6_SetConfig+0x60>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	4a12      	ldr	r2, [pc, #72]	; (8007ad8 <TIM_OC6_SetConfig+0xa4>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d109      	bne.n	8007aa8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a9a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	695b      	ldr	r3, [r3, #20]
 8007aa0:	029b      	lsls	r3, r3, #10
 8007aa2:	697a      	ldr	r2, [r7, #20]
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	697a      	ldr	r2, [r7, #20]
 8007aac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	68fa      	ldr	r2, [r7, #12]
 8007ab2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	685a      	ldr	r2, [r3, #4]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	693a      	ldr	r2, [r7, #16]
 8007ac0:	621a      	str	r2, [r3, #32]
}
 8007ac2:	bf00      	nop
 8007ac4:	371c      	adds	r7, #28
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007acc:	4770      	bx	lr
 8007ace:	bf00      	nop
 8007ad0:	feff8fff 	.word	0xfeff8fff
 8007ad4:	40010000 	.word	0x40010000
 8007ad8:	40010400 	.word	0x40010400

08007adc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b087      	sub	sp, #28
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	60f8      	str	r0, [r7, #12]
 8007ae4:	60b9      	str	r1, [r7, #8]
 8007ae6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	6a1b      	ldr	r3, [r3, #32]
 8007aec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	6a1b      	ldr	r3, [r3, #32]
 8007af2:	f023 0201 	bic.w	r2, r3, #1
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	699b      	ldr	r3, [r3, #24]
 8007afe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	011b      	lsls	r3, r3, #4
 8007b0c:	693a      	ldr	r2, [r7, #16]
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	f023 030a 	bic.w	r3, r3, #10
 8007b18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b1a:	697a      	ldr	r2, [r7, #20]
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	693a      	ldr	r2, [r7, #16]
 8007b26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	697a      	ldr	r2, [r7, #20]
 8007b2c:	621a      	str	r2, [r3, #32]
}
 8007b2e:	bf00      	nop
 8007b30:	371c      	adds	r7, #28
 8007b32:	46bd      	mov	sp, r7
 8007b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b38:	4770      	bx	lr

08007b3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b3a:	b480      	push	{r7}
 8007b3c:	b087      	sub	sp, #28
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	60f8      	str	r0, [r7, #12]
 8007b42:	60b9      	str	r1, [r7, #8]
 8007b44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	6a1b      	ldr	r3, [r3, #32]
 8007b4a:	f023 0210 	bic.w	r2, r3, #16
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	699b      	ldr	r3, [r3, #24]
 8007b56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	6a1b      	ldr	r3, [r3, #32]
 8007b5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	031b      	lsls	r3, r3, #12
 8007b6a:	697a      	ldr	r2, [r7, #20]
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b76:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	011b      	lsls	r3, r3, #4
 8007b7c:	693a      	ldr	r2, [r7, #16]
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	697a      	ldr	r2, [r7, #20]
 8007b86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	693a      	ldr	r2, [r7, #16]
 8007b8c:	621a      	str	r2, [r3, #32]
}
 8007b8e:	bf00      	nop
 8007b90:	371c      	adds	r7, #28
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr

08007b9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007b9a:	b480      	push	{r7}
 8007b9c:	b085      	sub	sp, #20
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	6078      	str	r0, [r7, #4]
 8007ba2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	689b      	ldr	r3, [r3, #8]
 8007ba8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bb0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007bb2:	683a      	ldr	r2, [r7, #0]
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	f043 0307 	orr.w	r3, r3, #7
 8007bbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	68fa      	ldr	r2, [r7, #12]
 8007bc2:	609a      	str	r2, [r3, #8]
}
 8007bc4:	bf00      	nop
 8007bc6:	3714      	adds	r7, #20
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr

08007bd0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b087      	sub	sp, #28
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	60f8      	str	r0, [r7, #12]
 8007bd8:	60b9      	str	r1, [r7, #8]
 8007bda:	607a      	str	r2, [r7, #4]
 8007bdc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007bea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	021a      	lsls	r2, r3, #8
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	431a      	orrs	r2, r3
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	697a      	ldr	r2, [r7, #20]
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	697a      	ldr	r2, [r7, #20]
 8007c02:	609a      	str	r2, [r3, #8]
}
 8007c04:	bf00      	nop
 8007c06:	371c      	adds	r7, #28
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr

08007c10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b086      	sub	sp, #24
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	60f8      	str	r0, [r7, #12]
 8007c18:	60b9      	str	r1, [r7, #8]
 8007c1a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	4a35      	ldr	r2, [pc, #212]	; (8007cf4 <TIM_CCxChannelCmd+0xe4>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d030      	beq.n	8007c86 <TIM_CCxChannelCmd+0x76>
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c2a:	d02c      	beq.n	8007c86 <TIM_CCxChannelCmd+0x76>
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	4a32      	ldr	r2, [pc, #200]	; (8007cf8 <TIM_CCxChannelCmd+0xe8>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d028      	beq.n	8007c86 <TIM_CCxChannelCmd+0x76>
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	4a31      	ldr	r2, [pc, #196]	; (8007cfc <TIM_CCxChannelCmd+0xec>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d024      	beq.n	8007c86 <TIM_CCxChannelCmd+0x76>
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	4a30      	ldr	r2, [pc, #192]	; (8007d00 <TIM_CCxChannelCmd+0xf0>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d020      	beq.n	8007c86 <TIM_CCxChannelCmd+0x76>
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	4a2f      	ldr	r2, [pc, #188]	; (8007d04 <TIM_CCxChannelCmd+0xf4>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d01c      	beq.n	8007c86 <TIM_CCxChannelCmd+0x76>
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	4a2e      	ldr	r2, [pc, #184]	; (8007d08 <TIM_CCxChannelCmd+0xf8>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d018      	beq.n	8007c86 <TIM_CCxChannelCmd+0x76>
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	4a2d      	ldr	r2, [pc, #180]	; (8007d0c <TIM_CCxChannelCmd+0xfc>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d014      	beq.n	8007c86 <TIM_CCxChannelCmd+0x76>
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	4a2c      	ldr	r2, [pc, #176]	; (8007d10 <TIM_CCxChannelCmd+0x100>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d010      	beq.n	8007c86 <TIM_CCxChannelCmd+0x76>
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	4a2b      	ldr	r2, [pc, #172]	; (8007d14 <TIM_CCxChannelCmd+0x104>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d00c      	beq.n	8007c86 <TIM_CCxChannelCmd+0x76>
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	4a2a      	ldr	r2, [pc, #168]	; (8007d18 <TIM_CCxChannelCmd+0x108>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d008      	beq.n	8007c86 <TIM_CCxChannelCmd+0x76>
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	4a29      	ldr	r2, [pc, #164]	; (8007d1c <TIM_CCxChannelCmd+0x10c>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d004      	beq.n	8007c86 <TIM_CCxChannelCmd+0x76>
 8007c7c:	f641 61a1 	movw	r1, #7841	; 0x1ea1
 8007c80:	4827      	ldr	r0, [pc, #156]	; (8007d20 <TIM_CCxChannelCmd+0x110>)
 8007c82:	f7fa f8f6 	bl	8001e72 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d016      	beq.n	8007cba <TIM_CCxChannelCmd+0xaa>
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	2b04      	cmp	r3, #4
 8007c90:	d013      	beq.n	8007cba <TIM_CCxChannelCmd+0xaa>
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	2b08      	cmp	r3, #8
 8007c96:	d010      	beq.n	8007cba <TIM_CCxChannelCmd+0xaa>
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	2b0c      	cmp	r3, #12
 8007c9c:	d00d      	beq.n	8007cba <TIM_CCxChannelCmd+0xaa>
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	2b10      	cmp	r3, #16
 8007ca2:	d00a      	beq.n	8007cba <TIM_CCxChannelCmd+0xaa>
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	2b14      	cmp	r3, #20
 8007ca8:	d007      	beq.n	8007cba <TIM_CCxChannelCmd+0xaa>
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	2b3c      	cmp	r3, #60	; 0x3c
 8007cae:	d004      	beq.n	8007cba <TIM_CCxChannelCmd+0xaa>
 8007cb0:	f641 61a2 	movw	r1, #7842	; 0x1ea2
 8007cb4:	481a      	ldr	r0, [pc, #104]	; (8007d20 <TIM_CCxChannelCmd+0x110>)
 8007cb6:	f7fa f8dc 	bl	8001e72 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	f003 031f 	and.w	r3, r3, #31
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8007cc6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	6a1a      	ldr	r2, [r3, #32]
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	43db      	mvns	r3, r3
 8007cd0:	401a      	ands	r2, r3
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	6a1a      	ldr	r2, [r3, #32]
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	f003 031f 	and.w	r3, r3, #31
 8007ce0:	6879      	ldr	r1, [r7, #4]
 8007ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8007ce6:	431a      	orrs	r2, r3
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	621a      	str	r2, [r3, #32]
}
 8007cec:	bf00      	nop
 8007cee:	3718      	adds	r7, #24
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}
 8007cf4:	40010000 	.word	0x40010000
 8007cf8:	40000400 	.word	0x40000400
 8007cfc:	40000800 	.word	0x40000800
 8007d00:	40000c00 	.word	0x40000c00
 8007d04:	40010400 	.word	0x40010400
 8007d08:	40014000 	.word	0x40014000
 8007d0c:	40014400 	.word	0x40014400
 8007d10:	40014800 	.word	0x40014800
 8007d14:	40001800 	.word	0x40001800
 8007d18:	40001c00 	.word	0x40001c00
 8007d1c:	40002000 	.word	0x40002000
 8007d20:	08013dc0 	.word	0x08013dc0

08007d24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b084      	sub	sp, #16
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4a32      	ldr	r2, [pc, #200]	; (8007dfc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d027      	beq.n	8007d88 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d40:	d022      	beq.n	8007d88 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a2e      	ldr	r2, [pc, #184]	; (8007e00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d01d      	beq.n	8007d88 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a2c      	ldr	r2, [pc, #176]	; (8007e04 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d018      	beq.n	8007d88 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a2b      	ldr	r2, [pc, #172]	; (8007e08 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d013      	beq.n	8007d88 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a29      	ldr	r2, [pc, #164]	; (8007e0c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d00e      	beq.n	8007d88 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a28      	ldr	r2, [pc, #160]	; (8007e10 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d009      	beq.n	8007d88 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a26      	ldr	r2, [pc, #152]	; (8007e14 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d004      	beq.n	8007d88 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007d7e:	f240 71b6 	movw	r1, #1974	; 0x7b6
 8007d82:	4825      	ldr	r0, [pc, #148]	; (8007e18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007d84:	f7fa f875 	bl	8001e72 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d020      	beq.n	8007dd2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	2b10      	cmp	r3, #16
 8007d96:	d01c      	beq.n	8007dd2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	2b20      	cmp	r3, #32
 8007d9e:	d018      	beq.n	8007dd2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	2b30      	cmp	r3, #48	; 0x30
 8007da6:	d014      	beq.n	8007dd2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	2b40      	cmp	r3, #64	; 0x40
 8007dae:	d010      	beq.n	8007dd2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	2b50      	cmp	r3, #80	; 0x50
 8007db6:	d00c      	beq.n	8007dd2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	2b60      	cmp	r3, #96	; 0x60
 8007dbe:	d008      	beq.n	8007dd2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	2b70      	cmp	r3, #112	; 0x70
 8007dc6:	d004      	beq.n	8007dd2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007dc8:	f240 71b7 	movw	r1, #1975	; 0x7b7
 8007dcc:	4812      	ldr	r0, [pc, #72]	; (8007e18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007dce:	f7fa f850 	bl	8001e72 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	689b      	ldr	r3, [r3, #8]
 8007dd6:	2b80      	cmp	r3, #128	; 0x80
 8007dd8:	d008      	beq.n	8007dec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	689b      	ldr	r3, [r3, #8]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d004      	beq.n	8007dec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007de2:	f44f 61f7 	mov.w	r1, #1976	; 0x7b8
 8007de6:	480c      	ldr	r0, [pc, #48]	; (8007e18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007de8:	f7fa f843 	bl	8001e72 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007df2:	2b01      	cmp	r3, #1
 8007df4:	d112      	bne.n	8007e1c <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8007df6:	2302      	movs	r3, #2
 8007df8:	e0d7      	b.n	8007faa <HAL_TIMEx_MasterConfigSynchronization+0x286>
 8007dfa:	bf00      	nop
 8007dfc:	40010000 	.word	0x40010000
 8007e00:	40000400 	.word	0x40000400
 8007e04:	40000800 	.word	0x40000800
 8007e08:	40000c00 	.word	0x40000c00
 8007e0c:	40001000 	.word	0x40001000
 8007e10:	40001400 	.word	0x40001400
 8007e14:	40010400 	.word	0x40010400
 8007e18:	08013df8 	.word	0x08013df8
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2202      	movs	r2, #2
 8007e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	689b      	ldr	r3, [r3, #8]
 8007e3a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a5c      	ldr	r2, [pc, #368]	; (8007fb4 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d004      	beq.n	8007e50 <HAL_TIMEx_MasterConfigSynchronization+0x12c>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a5b      	ldr	r2, [pc, #364]	; (8007fb8 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d161      	bne.n	8007f14 <HAL_TIMEx_MasterConfigSynchronization+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d054      	beq.n	8007f02 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e60:	d04f      	beq.n	8007f02 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e6a:	d04a      	beq.n	8007f02 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007e74:	d045      	beq.n	8007f02 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e7e:	d040      	beq.n	8007f02 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8007e88:	d03b      	beq.n	8007f02 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007e92:	d036      	beq.n	8007f02 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007e9c:	d031      	beq.n	8007f02 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 8007ea6:	d02c      	beq.n	8007f02 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007eb0:	d027      	beq.n	8007f02 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	f5b3 0f10 	cmp.w	r3, #9437184	; 0x900000
 8007eba:	d022      	beq.n	8007f02 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8007ec4:	d01d      	beq.n	8007f02 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	f5b3 0f30 	cmp.w	r3, #11534336	; 0xb00000
 8007ece:	d018      	beq.n	8007f02 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007ed8:	d013      	beq.n	8007f02 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	f5b3 0f50 	cmp.w	r3, #13631488	; 0xd00000
 8007ee2:	d00e      	beq.n	8007f02 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	f5b3 0f60 	cmp.w	r3, #14680064	; 0xe00000
 8007eec:	d009      	beq.n	8007f02 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	f5b3 0f70 	cmp.w	r3, #15728640	; 0xf00000
 8007ef6:	d004      	beq.n	8007f02 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007ef8:	f240 71ca 	movw	r1, #1994	; 0x7ca
 8007efc:	482f      	ldr	r0, [pc, #188]	; (8007fbc <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 8007efe:	f7f9 ffb8 	bl	8001e72 <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007f08:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	68fa      	ldr	r2, [r7, #12]
 8007f10:	4313      	orrs	r3, r2
 8007f12:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	68fa      	ldr	r2, [r7, #12]
 8007f22:	4313      	orrs	r3, r2
 8007f24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	68fa      	ldr	r2, [r7, #12]
 8007f2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a20      	ldr	r2, [pc, #128]	; (8007fb4 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d022      	beq.n	8007f7e <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f40:	d01d      	beq.n	8007f7e <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a1e      	ldr	r2, [pc, #120]	; (8007fc0 <HAL_TIMEx_MasterConfigSynchronization+0x29c>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d018      	beq.n	8007f7e <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a1c      	ldr	r2, [pc, #112]	; (8007fc4 <HAL_TIMEx_MasterConfigSynchronization+0x2a0>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d013      	beq.n	8007f7e <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a1b      	ldr	r2, [pc, #108]	; (8007fc8 <HAL_TIMEx_MasterConfigSynchronization+0x2a4>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d00e      	beq.n	8007f7e <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a14      	ldr	r2, [pc, #80]	; (8007fb8 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d009      	beq.n	8007f7e <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a17      	ldr	r2, [pc, #92]	; (8007fcc <HAL_TIMEx_MasterConfigSynchronization+0x2a8>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d004      	beq.n	8007f7e <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a15      	ldr	r2, [pc, #84]	; (8007fd0 <HAL_TIMEx_MasterConfigSynchronization+0x2ac>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d10c      	bne.n	8007f98 <HAL_TIMEx_MasterConfigSynchronization+0x274>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	68ba      	ldr	r2, [r7, #8]
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	68ba      	ldr	r2, [r7, #8]
 8007f96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007fa8:	2300      	movs	r3, #0
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3710      	adds	r7, #16
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
 8007fb2:	bf00      	nop
 8007fb4:	40010000 	.word	0x40010000
 8007fb8:	40010400 	.word	0x40010400
 8007fbc:	08013df8 	.word	0x08013df8
 8007fc0:	40000400 	.word	0x40000400
 8007fc4:	40000800 	.word	0x40000800
 8007fc8:	40000c00 	.word	0x40000c00
 8007fcc:	40014000 	.word	0x40014000
 8007fd0:	40001800 	.word	0x40001800

08007fd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b083      	sub	sp, #12
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007fdc:	bf00      	nop
 8007fde:	370c      	adds	r7, #12
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr

08007fe8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b083      	sub	sp, #12
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ff0:	bf00      	nop
 8007ff2:	370c      	adds	r7, #12
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffa:	4770      	bx	lr

08007ffc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b083      	sub	sp, #12
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008004:	bf00      	nop
 8008006:	370c      	adds	r7, #12
 8008008:	46bd      	mov	sp, r7
 800800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800e:	4770      	bx	lr

08008010 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b082      	sub	sp, #8
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d101      	bne.n	8008022 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800801e:	2301      	movs	r3, #1
 8008020:	e09f      	b.n	8008162 <HAL_UART_Init+0x152>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	699b      	ldr	r3, [r3, #24]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d02d      	beq.n	8008086 <HAL_UART_Init+0x76>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4a4f      	ldr	r2, [pc, #316]	; (800816c <HAL_UART_Init+0x15c>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d055      	beq.n	80080e0 <HAL_UART_Init+0xd0>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a4d      	ldr	r2, [pc, #308]	; (8008170 <HAL_UART_Init+0x160>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d050      	beq.n	80080e0 <HAL_UART_Init+0xd0>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a4c      	ldr	r2, [pc, #304]	; (8008174 <HAL_UART_Init+0x164>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d04b      	beq.n	80080e0 <HAL_UART_Init+0xd0>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a4a      	ldr	r2, [pc, #296]	; (8008178 <HAL_UART_Init+0x168>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d046      	beq.n	80080e0 <HAL_UART_Init+0xd0>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4a49      	ldr	r2, [pc, #292]	; (800817c <HAL_UART_Init+0x16c>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d041      	beq.n	80080e0 <HAL_UART_Init+0xd0>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a47      	ldr	r2, [pc, #284]	; (8008180 <HAL_UART_Init+0x170>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d03c      	beq.n	80080e0 <HAL_UART_Init+0xd0>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a46      	ldr	r2, [pc, #280]	; (8008184 <HAL_UART_Init+0x174>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d037      	beq.n	80080e0 <HAL_UART_Init+0xd0>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a44      	ldr	r2, [pc, #272]	; (8008188 <HAL_UART_Init+0x178>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d032      	beq.n	80080e0 <HAL_UART_Init+0xd0>
 800807a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800807e:	4843      	ldr	r0, [pc, #268]	; (800818c <HAL_UART_Init+0x17c>)
 8008080:	f7f9 fef7 	bl	8001e72 <assert_failed>
 8008084:	e02c      	b.n	80080e0 <HAL_UART_Init+0xd0>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a38      	ldr	r2, [pc, #224]	; (800816c <HAL_UART_Init+0x15c>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d027      	beq.n	80080e0 <HAL_UART_Init+0xd0>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4a36      	ldr	r2, [pc, #216]	; (8008170 <HAL_UART_Init+0x160>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d022      	beq.n	80080e0 <HAL_UART_Init+0xd0>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4a35      	ldr	r2, [pc, #212]	; (8008174 <HAL_UART_Init+0x164>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d01d      	beq.n	80080e0 <HAL_UART_Init+0xd0>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a33      	ldr	r2, [pc, #204]	; (8008178 <HAL_UART_Init+0x168>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d018      	beq.n	80080e0 <HAL_UART_Init+0xd0>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4a32      	ldr	r2, [pc, #200]	; (800817c <HAL_UART_Init+0x16c>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d013      	beq.n	80080e0 <HAL_UART_Init+0xd0>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4a30      	ldr	r2, [pc, #192]	; (8008180 <HAL_UART_Init+0x170>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d00e      	beq.n	80080e0 <HAL_UART_Init+0xd0>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a2f      	ldr	r2, [pc, #188]	; (8008184 <HAL_UART_Init+0x174>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d009      	beq.n	80080e0 <HAL_UART_Init+0xd0>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a2d      	ldr	r2, [pc, #180]	; (8008188 <HAL_UART_Init+0x178>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d004      	beq.n	80080e0 <HAL_UART_Init+0xd0>
 80080d6:	f240 1131 	movw	r1, #305	; 0x131
 80080da:	482c      	ldr	r0, [pc, #176]	; (800818c <HAL_UART_Init+0x17c>)
 80080dc:	f7f9 fec9 	bl	8001e72 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d106      	bne.n	80080f6 <HAL_UART_Init+0xe6>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2200      	movs	r2, #0
 80080ec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f7fa fa9d 	bl	8002630 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2224      	movs	r2, #36	; 0x24
 80080fa:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	681a      	ldr	r2, [r3, #0]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f022 0201 	bic.w	r2, r2, #1
 800810a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f000 fbf9 	bl	8008904 <UART_SetConfig>
 8008112:	4603      	mov	r3, r0
 8008114:	2b01      	cmp	r3, #1
 8008116:	d101      	bne.n	800811c <HAL_UART_Init+0x10c>
  {
    return HAL_ERROR;
 8008118:	2301      	movs	r3, #1
 800811a:	e022      	b.n	8008162 <HAL_UART_Init+0x152>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008120:	2b00      	cmp	r3, #0
 8008122:	d002      	beq.n	800812a <HAL_UART_Init+0x11a>
  {
    UART_AdvFeatureConfig(huart);
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f000 fee3 	bl	8008ef0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	685a      	ldr	r2, [r3, #4]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008138:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	689a      	ldr	r2, [r3, #8]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008148:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	681a      	ldr	r2, [r3, #0]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f042 0201 	orr.w	r2, r2, #1
 8008158:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f001 f820 	bl	80091a0 <UART_CheckIdleState>
 8008160:	4603      	mov	r3, r0
}
 8008162:	4618      	mov	r0, r3
 8008164:	3708      	adds	r7, #8
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}
 800816a:	bf00      	nop
 800816c:	40011000 	.word	0x40011000
 8008170:	40004400 	.word	0x40004400
 8008174:	40004800 	.word	0x40004800
 8008178:	40004c00 	.word	0x40004c00
 800817c:	40005000 	.word	0x40005000
 8008180:	40011400 	.word	0x40011400
 8008184:	40007800 	.word	0x40007800
 8008188:	40007c00 	.word	0x40007c00
 800818c:	08013e34 	.word	0x08013e34

08008190 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b08a      	sub	sp, #40	; 0x28
 8008194:	af02      	add	r7, sp, #8
 8008196:	60f8      	str	r0, [r7, #12]
 8008198:	60b9      	str	r1, [r7, #8]
 800819a:	603b      	str	r3, [r7, #0]
 800819c:	4613      	mov	r3, r2
 800819e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80081a4:	2b20      	cmp	r3, #32
 80081a6:	d171      	bne.n	800828c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d002      	beq.n	80081b4 <HAL_UART_Transmit+0x24>
 80081ae:	88fb      	ldrh	r3, [r7, #6]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d101      	bne.n	80081b8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80081b4:	2301      	movs	r3, #1
 80081b6:	e06a      	b.n	800828e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2200      	movs	r2, #0
 80081bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2221      	movs	r2, #33	; 0x21
 80081c4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80081c6:	f7fa fb2f 	bl	8002828 <HAL_GetTick>
 80081ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	88fa      	ldrh	r2, [r7, #6]
 80081d0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	88fa      	ldrh	r2, [r7, #6]
 80081d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	689b      	ldr	r3, [r3, #8]
 80081e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081e4:	d108      	bne.n	80081f8 <HAL_UART_Transmit+0x68>
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	691b      	ldr	r3, [r3, #16]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d104      	bne.n	80081f8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80081ee:	2300      	movs	r3, #0
 80081f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	61bb      	str	r3, [r7, #24]
 80081f6:	e003      	b.n	8008200 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80081fc:	2300      	movs	r3, #0
 80081fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008200:	e02c      	b.n	800825c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	9300      	str	r3, [sp, #0]
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	2200      	movs	r2, #0
 800820a:	2180      	movs	r1, #128	; 0x80
 800820c:	68f8      	ldr	r0, [r7, #12]
 800820e:	f000 fffe 	bl	800920e <UART_WaitOnFlagUntilTimeout>
 8008212:	4603      	mov	r3, r0
 8008214:	2b00      	cmp	r3, #0
 8008216:	d001      	beq.n	800821c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8008218:	2303      	movs	r3, #3
 800821a:	e038      	b.n	800828e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800821c:	69fb      	ldr	r3, [r7, #28]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d10b      	bne.n	800823a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008222:	69bb      	ldr	r3, [r7, #24]
 8008224:	881b      	ldrh	r3, [r3, #0]
 8008226:	461a      	mov	r2, r3
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008230:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008232:	69bb      	ldr	r3, [r7, #24]
 8008234:	3302      	adds	r3, #2
 8008236:	61bb      	str	r3, [r7, #24]
 8008238:	e007      	b.n	800824a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800823a:	69fb      	ldr	r3, [r7, #28]
 800823c:	781a      	ldrb	r2, [r3, #0]
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008244:	69fb      	ldr	r3, [r7, #28]
 8008246:	3301      	adds	r3, #1
 8008248:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008250:	b29b      	uxth	r3, r3
 8008252:	3b01      	subs	r3, #1
 8008254:	b29a      	uxth	r2, r3
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008262:	b29b      	uxth	r3, r3
 8008264:	2b00      	cmp	r3, #0
 8008266:	d1cc      	bne.n	8008202 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	9300      	str	r3, [sp, #0]
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	2200      	movs	r2, #0
 8008270:	2140      	movs	r1, #64	; 0x40
 8008272:	68f8      	ldr	r0, [r7, #12]
 8008274:	f000 ffcb 	bl	800920e <UART_WaitOnFlagUntilTimeout>
 8008278:	4603      	mov	r3, r0
 800827a:	2b00      	cmp	r3, #0
 800827c:	d001      	beq.n	8008282 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800827e:	2303      	movs	r3, #3
 8008280:	e005      	b.n	800828e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2220      	movs	r2, #32
 8008286:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8008288:	2300      	movs	r3, #0
 800828a:	e000      	b.n	800828e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800828c:	2302      	movs	r3, #2
  }
}
 800828e:	4618      	mov	r0, r3
 8008290:	3720      	adds	r7, #32
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}

08008296 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008296:	b580      	push	{r7, lr}
 8008298:	b08a      	sub	sp, #40	; 0x28
 800829a:	af00      	add	r7, sp, #0
 800829c:	60f8      	str	r0, [r7, #12]
 800829e:	60b9      	str	r1, [r7, #8]
 80082a0:	4613      	mov	r3, r2
 80082a2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082aa:	2b20      	cmp	r3, #32
 80082ac:	d132      	bne.n	8008314 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d002      	beq.n	80082ba <HAL_UART_Receive_IT+0x24>
 80082b4:	88fb      	ldrh	r3, [r7, #6]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d101      	bne.n	80082be <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80082ba:	2301      	movs	r3, #1
 80082bc:	e02b      	b.n	8008316 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2200      	movs	r2, #0
 80082c2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d018      	beq.n	8008304 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	e853 3f00 	ldrex	r3, [r3]
 80082de:	613b      	str	r3, [r7, #16]
   return(result);
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80082e6:	627b      	str	r3, [r7, #36]	; 0x24
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	461a      	mov	r2, r3
 80082ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f0:	623b      	str	r3, [r7, #32]
 80082f2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f4:	69f9      	ldr	r1, [r7, #28]
 80082f6:	6a3a      	ldr	r2, [r7, #32]
 80082f8:	e841 2300 	strex	r3, r2, [r1]
 80082fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80082fe:	69bb      	ldr	r3, [r7, #24]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d1e6      	bne.n	80082d2 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008304:	88fb      	ldrh	r3, [r7, #6]
 8008306:	461a      	mov	r2, r3
 8008308:	68b9      	ldr	r1, [r7, #8]
 800830a:	68f8      	ldr	r0, [r7, #12]
 800830c:	f001 f846 	bl	800939c <UART_Start_Receive_IT>
 8008310:	4603      	mov	r3, r0
 8008312:	e000      	b.n	8008316 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8008314:	2302      	movs	r3, #2
  }
}
 8008316:	4618      	mov	r0, r3
 8008318:	3728      	adds	r7, #40	; 0x28
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}
	...

08008320 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b0ba      	sub	sp, #232	; 0xe8
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	69db      	ldr	r3, [r3, #28]
 800832e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	689b      	ldr	r3, [r3, #8]
 8008342:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008346:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800834a:	f640 030f 	movw	r3, #2063	; 0x80f
 800834e:	4013      	ands	r3, r2
 8008350:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008354:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008358:	2b00      	cmp	r3, #0
 800835a:	d115      	bne.n	8008388 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800835c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008360:	f003 0320 	and.w	r3, r3, #32
 8008364:	2b00      	cmp	r3, #0
 8008366:	d00f      	beq.n	8008388 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008368:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800836c:	f003 0320 	and.w	r3, r3, #32
 8008370:	2b00      	cmp	r3, #0
 8008372:	d009      	beq.n	8008388 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008378:	2b00      	cmp	r3, #0
 800837a:	f000 8297 	beq.w	80088ac <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	4798      	blx	r3
      }
      return;
 8008386:	e291      	b.n	80088ac <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008388:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800838c:	2b00      	cmp	r3, #0
 800838e:	f000 8117 	beq.w	80085c0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008392:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008396:	f003 0301 	and.w	r3, r3, #1
 800839a:	2b00      	cmp	r3, #0
 800839c:	d106      	bne.n	80083ac <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800839e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80083a2:	4b85      	ldr	r3, [pc, #532]	; (80085b8 <HAL_UART_IRQHandler+0x298>)
 80083a4:	4013      	ands	r3, r2
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	f000 810a 	beq.w	80085c0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80083ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083b0:	f003 0301 	and.w	r3, r3, #1
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d011      	beq.n	80083dc <HAL_UART_IRQHandler+0xbc>
 80083b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d00b      	beq.n	80083dc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	2201      	movs	r2, #1
 80083ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083d2:	f043 0201 	orr.w	r2, r3, #1
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80083dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083e0:	f003 0302 	and.w	r3, r3, #2
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d011      	beq.n	800840c <HAL_UART_IRQHandler+0xec>
 80083e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083ec:	f003 0301 	and.w	r3, r3, #1
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d00b      	beq.n	800840c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	2202      	movs	r2, #2
 80083fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008402:	f043 0204 	orr.w	r2, r3, #4
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800840c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008410:	f003 0304 	and.w	r3, r3, #4
 8008414:	2b00      	cmp	r3, #0
 8008416:	d011      	beq.n	800843c <HAL_UART_IRQHandler+0x11c>
 8008418:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800841c:	f003 0301 	and.w	r3, r3, #1
 8008420:	2b00      	cmp	r3, #0
 8008422:	d00b      	beq.n	800843c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	2204      	movs	r2, #4
 800842a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008432:	f043 0202 	orr.w	r2, r3, #2
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800843c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008440:	f003 0308 	and.w	r3, r3, #8
 8008444:	2b00      	cmp	r3, #0
 8008446:	d017      	beq.n	8008478 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800844c:	f003 0320 	and.w	r3, r3, #32
 8008450:	2b00      	cmp	r3, #0
 8008452:	d105      	bne.n	8008460 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008454:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008458:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800845c:	2b00      	cmp	r3, #0
 800845e:	d00b      	beq.n	8008478 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	2208      	movs	r2, #8
 8008466:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800846e:	f043 0208 	orr.w	r2, r3, #8
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008478:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800847c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008480:	2b00      	cmp	r3, #0
 8008482:	d012      	beq.n	80084aa <HAL_UART_IRQHandler+0x18a>
 8008484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008488:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800848c:	2b00      	cmp	r3, #0
 800848e:	d00c      	beq.n	80084aa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008498:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084a0:	f043 0220 	orr.w	r2, r3, #32
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	f000 81fd 	beq.w	80088b0 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80084b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084ba:	f003 0320 	and.w	r3, r3, #32
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d00d      	beq.n	80084de <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80084c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084c6:	f003 0320 	and.w	r3, r3, #32
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d007      	beq.n	80084de <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d003      	beq.n	80084de <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	689b      	ldr	r3, [r3, #8]
 80084ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084f2:	2b40      	cmp	r3, #64	; 0x40
 80084f4:	d005      	beq.n	8008502 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80084f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80084fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d04f      	beq.n	80085a2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f001 f810 	bl	8009528 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	689b      	ldr	r3, [r3, #8]
 800850e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008512:	2b40      	cmp	r3, #64	; 0x40
 8008514:	d141      	bne.n	800859a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	3308      	adds	r3, #8
 800851c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008520:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008524:	e853 3f00 	ldrex	r3, [r3]
 8008528:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800852c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008530:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008534:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	3308      	adds	r3, #8
 800853e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008542:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008546:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800854a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800854e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008552:	e841 2300 	strex	r3, r2, [r1]
 8008556:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800855a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800855e:	2b00      	cmp	r3, #0
 8008560:	d1d9      	bne.n	8008516 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008566:	2b00      	cmp	r3, #0
 8008568:	d013      	beq.n	8008592 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800856e:	4a13      	ldr	r2, [pc, #76]	; (80085bc <HAL_UART_IRQHandler+0x29c>)
 8008570:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008576:	4618      	mov	r0, r3
 8008578:	f7fa fb36 	bl	8002be8 <HAL_DMA_Abort_IT>
 800857c:	4603      	mov	r3, r0
 800857e:	2b00      	cmp	r3, #0
 8008580:	d017      	beq.n	80085b2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008588:	687a      	ldr	r2, [r7, #4]
 800858a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800858c:	4610      	mov	r0, r2
 800858e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008590:	e00f      	b.n	80085b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f000 f9a0 	bl	80088d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008598:	e00b      	b.n	80085b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f000 f99c 	bl	80088d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085a0:	e007      	b.n	80085b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 f998 	bl	80088d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2200      	movs	r2, #0
 80085ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80085b0:	e17e      	b.n	80088b0 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085b2:	bf00      	nop
    return;
 80085b4:	e17c      	b.n	80088b0 <HAL_UART_IRQHandler+0x590>
 80085b6:	bf00      	nop
 80085b8:	04000120 	.word	0x04000120
 80085bc:	080095f1 	.word	0x080095f1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085c4:	2b01      	cmp	r3, #1
 80085c6:	f040 814c 	bne.w	8008862 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80085ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085ce:	f003 0310 	and.w	r3, r3, #16
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	f000 8145 	beq.w	8008862 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80085d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085dc:	f003 0310 	and.w	r3, r3, #16
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	f000 813e 	beq.w	8008862 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	2210      	movs	r2, #16
 80085ec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	689b      	ldr	r3, [r3, #8]
 80085f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085f8:	2b40      	cmp	r3, #64	; 0x40
 80085fa:	f040 80b6 	bne.w	800876a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800860a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800860e:	2b00      	cmp	r3, #0
 8008610:	f000 8150 	beq.w	80088b4 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800861a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800861e:	429a      	cmp	r2, r3
 8008620:	f080 8148 	bcs.w	80088b4 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800862a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008632:	69db      	ldr	r3, [r3, #28]
 8008634:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008638:	f000 8086 	beq.w	8008748 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008644:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008648:	e853 3f00 	ldrex	r3, [r3]
 800864c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008650:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008654:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008658:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	461a      	mov	r2, r3
 8008662:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008666:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800866a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800866e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008672:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008676:	e841 2300 	strex	r3, r2, [r1]
 800867a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800867e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008682:	2b00      	cmp	r3, #0
 8008684:	d1da      	bne.n	800863c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	3308      	adds	r3, #8
 800868c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800868e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008690:	e853 3f00 	ldrex	r3, [r3]
 8008694:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008696:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008698:	f023 0301 	bic.w	r3, r3, #1
 800869c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	3308      	adds	r3, #8
 80086a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80086aa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80086ae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086b0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80086b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80086b6:	e841 2300 	strex	r3, r2, [r1]
 80086ba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80086bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d1e1      	bne.n	8008686 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	3308      	adds	r3, #8
 80086c8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80086cc:	e853 3f00 	ldrex	r3, [r3]
 80086d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80086d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80086d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	3308      	adds	r3, #8
 80086e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80086e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80086e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80086ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80086ee:	e841 2300 	strex	r3, r2, [r1]
 80086f2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80086f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d1e3      	bne.n	80086c2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2220      	movs	r2, #32
 80086fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2200      	movs	r2, #0
 8008706:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800870e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008710:	e853 3f00 	ldrex	r3, [r3]
 8008714:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008716:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008718:	f023 0310 	bic.w	r3, r3, #16
 800871c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	461a      	mov	r2, r3
 8008726:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800872a:	65bb      	str	r3, [r7, #88]	; 0x58
 800872c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800872e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008730:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008732:	e841 2300 	strex	r3, r2, [r1]
 8008736:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008738:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800873a:	2b00      	cmp	r3, #0
 800873c:	d1e4      	bne.n	8008708 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008742:	4618      	mov	r0, r3
 8008744:	f7fa f9e0 	bl	8002b08 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2202      	movs	r2, #2
 800874c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800875a:	b29b      	uxth	r3, r3
 800875c:	1ad3      	subs	r3, r2, r3
 800875e:	b29b      	uxth	r3, r3
 8008760:	4619      	mov	r1, r3
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 f8c2 	bl	80088ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008768:	e0a4      	b.n	80088b4 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008776:	b29b      	uxth	r3, r3
 8008778:	1ad3      	subs	r3, r2, r3
 800877a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008784:	b29b      	uxth	r3, r3
 8008786:	2b00      	cmp	r3, #0
 8008788:	f000 8096 	beq.w	80088b8 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800878c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008790:	2b00      	cmp	r3, #0
 8008792:	f000 8091 	beq.w	80088b8 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800879c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800879e:	e853 3f00 	ldrex	r3, [r3]
 80087a2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80087a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80087aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	461a      	mov	r2, r3
 80087b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80087b8:	647b      	str	r3, [r7, #68]	; 0x44
 80087ba:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80087be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80087c0:	e841 2300 	strex	r3, r2, [r1]
 80087c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80087c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d1e4      	bne.n	8008796 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	3308      	adds	r3, #8
 80087d2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d6:	e853 3f00 	ldrex	r3, [r3]
 80087da:	623b      	str	r3, [r7, #32]
   return(result);
 80087dc:	6a3b      	ldr	r3, [r7, #32]
 80087de:	f023 0301 	bic.w	r3, r3, #1
 80087e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	3308      	adds	r3, #8
 80087ec:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80087f0:	633a      	str	r2, [r7, #48]	; 0x30
 80087f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80087f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087f8:	e841 2300 	strex	r3, r2, [r1]
 80087fc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80087fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008800:	2b00      	cmp	r3, #0
 8008802:	d1e3      	bne.n	80087cc <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2220      	movs	r2, #32
 8008808:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2200      	movs	r2, #0
 8008810:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2200      	movs	r2, #0
 8008816:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	e853 3f00 	ldrex	r3, [r3]
 8008824:	60fb      	str	r3, [r7, #12]
   return(result);
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	f023 0310 	bic.w	r3, r3, #16
 800882c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	461a      	mov	r2, r3
 8008836:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800883a:	61fb      	str	r3, [r7, #28]
 800883c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800883e:	69b9      	ldr	r1, [r7, #24]
 8008840:	69fa      	ldr	r2, [r7, #28]
 8008842:	e841 2300 	strex	r3, r2, [r1]
 8008846:	617b      	str	r3, [r7, #20]
   return(result);
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d1e4      	bne.n	8008818 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2202      	movs	r2, #2
 8008852:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008854:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008858:	4619      	mov	r1, r3
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f000 f846 	bl	80088ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008860:	e02a      	b.n	80088b8 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800886a:	2b00      	cmp	r3, #0
 800886c:	d00e      	beq.n	800888c <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800886e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008876:	2b00      	cmp	r3, #0
 8008878:	d008      	beq.n	800888c <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800887e:	2b00      	cmp	r3, #0
 8008880:	d01c      	beq.n	80088bc <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	4798      	blx	r3
    }
    return;
 800888a:	e017      	b.n	80088bc <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800888c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008894:	2b00      	cmp	r3, #0
 8008896:	d012      	beq.n	80088be <HAL_UART_IRQHandler+0x59e>
 8008898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800889c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d00c      	beq.n	80088be <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f000 feb9 	bl	800961c <UART_EndTransmit_IT>
    return;
 80088aa:	e008      	b.n	80088be <HAL_UART_IRQHandler+0x59e>
      return;
 80088ac:	bf00      	nop
 80088ae:	e006      	b.n	80088be <HAL_UART_IRQHandler+0x59e>
    return;
 80088b0:	bf00      	nop
 80088b2:	e004      	b.n	80088be <HAL_UART_IRQHandler+0x59e>
      return;
 80088b4:	bf00      	nop
 80088b6:	e002      	b.n	80088be <HAL_UART_IRQHandler+0x59e>
      return;
 80088b8:	bf00      	nop
 80088ba:	e000      	b.n	80088be <HAL_UART_IRQHandler+0x59e>
    return;
 80088bc:	bf00      	nop
  }

}
 80088be:	37e8      	adds	r7, #232	; 0xe8
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}

080088c4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b083      	sub	sp, #12
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80088cc:	bf00      	nop
 80088ce:	370c      	adds	r7, #12
 80088d0:	46bd      	mov	sp, r7
 80088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d6:	4770      	bx	lr

080088d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80088d8:	b480      	push	{r7}
 80088da:	b083      	sub	sp, #12
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80088e0:	bf00      	nop
 80088e2:	370c      	adds	r7, #12
 80088e4:	46bd      	mov	sp, r7
 80088e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ea:	4770      	bx	lr

080088ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80088ec:	b480      	push	{r7}
 80088ee:	b083      	sub	sp, #12
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	460b      	mov	r3, r1
 80088f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80088f8:	bf00      	nop
 80088fa:	370c      	adds	r7, #12
 80088fc:	46bd      	mov	sp, r7
 80088fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008902:	4770      	bx	lr

08008904 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b088      	sub	sp, #32
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800890c:	2300      	movs	r3, #0
 800890e:	77bb      	strb	r3, [r7, #30]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	4aa0      	ldr	r2, [pc, #640]	; (8008b98 <UART_SetConfig+0x294>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d904      	bls.n	8008924 <UART_SetConfig+0x20>
 800891a:	f640 315d 	movw	r1, #2909	; 0xb5d
 800891e:	489f      	ldr	r0, [pc, #636]	; (8008b9c <UART_SetConfig+0x298>)
 8008920:	f7f9 faa7 	bl	8001e72 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	689b      	ldr	r3, [r3, #8]
 8008928:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800892c:	d00d      	beq.n	800894a <UART_SetConfig+0x46>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	689b      	ldr	r3, [r3, #8]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d009      	beq.n	800894a <UART_SetConfig+0x46>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	689b      	ldr	r3, [r3, #8]
 800893a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800893e:	d004      	beq.n	800894a <UART_SetConfig+0x46>
 8008940:	f640 315e 	movw	r1, #2910	; 0xb5e
 8008944:	4895      	ldr	r0, [pc, #596]	; (8008b9c <UART_SetConfig+0x298>)
 8008946:	f7f9 fa94 	bl	8001e72 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	68db      	ldr	r3, [r3, #12]
 800894e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008952:	d012      	beq.n	800897a <UART_SetConfig+0x76>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	68db      	ldr	r3, [r3, #12]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d00e      	beq.n	800897a <UART_SetConfig+0x76>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	68db      	ldr	r3, [r3, #12]
 8008960:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008964:	d009      	beq.n	800897a <UART_SetConfig+0x76>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	68db      	ldr	r3, [r3, #12]
 800896a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800896e:	d004      	beq.n	800897a <UART_SetConfig+0x76>
 8008970:	f640 315f 	movw	r1, #2911	; 0xb5f
 8008974:	4889      	ldr	r0, [pc, #548]	; (8008b9c <UART_SetConfig+0x298>)
 8008976:	f7f9 fa7c 	bl	8001e72 <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6a1b      	ldr	r3, [r3, #32]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d009      	beq.n	8008996 <UART_SetConfig+0x92>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6a1b      	ldr	r3, [r3, #32]
 8008986:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800898a:	d004      	beq.n	8008996 <UART_SetConfig+0x92>
 800898c:	f44f 6136 	mov.w	r1, #2912	; 0xb60
 8008990:	4882      	ldr	r0, [pc, #520]	; (8008b9c <UART_SetConfig+0x298>)
 8008992:	f7f9 fa6e 	bl	8001e72 <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	691b      	ldr	r3, [r3, #16]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d00e      	beq.n	80089bc <UART_SetConfig+0xb8>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	691b      	ldr	r3, [r3, #16]
 80089a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089a6:	d009      	beq.n	80089bc <UART_SetConfig+0xb8>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	691b      	ldr	r3, [r3, #16]
 80089ac:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80089b0:	d004      	beq.n	80089bc <UART_SetConfig+0xb8>
 80089b2:	f640 3162 	movw	r1, #2914	; 0xb62
 80089b6:	4879      	ldr	r0, [pc, #484]	; (8008b9c <UART_SetConfig+0x298>)
 80089b8:	f7f9 fa5b 	bl	8001e72 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	695b      	ldr	r3, [r3, #20]
 80089c0:	f023 030c 	bic.w	r3, r3, #12
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d103      	bne.n	80089d0 <UART_SetConfig+0xcc>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	695b      	ldr	r3, [r3, #20]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d104      	bne.n	80089da <UART_SetConfig+0xd6>
 80089d0:	f640 3163 	movw	r1, #2915	; 0xb63
 80089d4:	4871      	ldr	r0, [pc, #452]	; (8008b9c <UART_SetConfig+0x298>)
 80089d6:	f7f9 fa4c 	bl	8001e72 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	699b      	ldr	r3, [r3, #24]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d013      	beq.n	8008a0a <UART_SetConfig+0x106>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	699b      	ldr	r3, [r3, #24]
 80089e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089ea:	d00e      	beq.n	8008a0a <UART_SetConfig+0x106>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	699b      	ldr	r3, [r3, #24]
 80089f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089f4:	d009      	beq.n	8008a0a <UART_SetConfig+0x106>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	699b      	ldr	r3, [r3, #24]
 80089fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089fe:	d004      	beq.n	8008a0a <UART_SetConfig+0x106>
 8008a00:	f640 3164 	movw	r1, #2916	; 0xb64
 8008a04:	4865      	ldr	r0, [pc, #404]	; (8008b9c <UART_SetConfig+0x298>)
 8008a06:	f7f9 fa34 	bl	8001e72 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	69db      	ldr	r3, [r3, #28]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d009      	beq.n	8008a26 <UART_SetConfig+0x122>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	69db      	ldr	r3, [r3, #28]
 8008a16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a1a:	d004      	beq.n	8008a26 <UART_SetConfig+0x122>
 8008a1c:	f640 3165 	movw	r1, #2917	; 0xb65
 8008a20:	485e      	ldr	r0, [pc, #376]	; (8008b9c <UART_SetConfig+0x298>)
 8008a22:	f7f9 fa26 	bl	8001e72 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	689a      	ldr	r2, [r3, #8]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	691b      	ldr	r3, [r3, #16]
 8008a2e:	431a      	orrs	r2, r3
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	695b      	ldr	r3, [r3, #20]
 8008a34:	431a      	orrs	r2, r3
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	69db      	ldr	r3, [r3, #28]
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	681a      	ldr	r2, [r3, #0]
 8008a44:	4b56      	ldr	r3, [pc, #344]	; (8008ba0 <UART_SetConfig+0x29c>)
 8008a46:	4013      	ands	r3, r2
 8008a48:	687a      	ldr	r2, [r7, #4]
 8008a4a:	6812      	ldr	r2, [r2, #0]
 8008a4c:	6979      	ldr	r1, [r7, #20]
 8008a4e:	430b      	orrs	r3, r1
 8008a50:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	68da      	ldr	r2, [r3, #12]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	430a      	orrs	r2, r1
 8008a66:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	699b      	ldr	r3, [r3, #24]
 8008a6c:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6a1b      	ldr	r3, [r3, #32]
 8008a72:	697a      	ldr	r2, [r7, #20]
 8008a74:	4313      	orrs	r3, r2
 8008a76:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	689b      	ldr	r3, [r3, #8]
 8008a7e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	697a      	ldr	r2, [r7, #20]
 8008a88:	430a      	orrs	r2, r1
 8008a8a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4a44      	ldr	r2, [pc, #272]	; (8008ba4 <UART_SetConfig+0x2a0>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d121      	bne.n	8008ada <UART_SetConfig+0x1d6>
 8008a96:	4b44      	ldr	r3, [pc, #272]	; (8008ba8 <UART_SetConfig+0x2a4>)
 8008a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a9c:	f003 0303 	and.w	r3, r3, #3
 8008aa0:	2b03      	cmp	r3, #3
 8008aa2:	d817      	bhi.n	8008ad4 <UART_SetConfig+0x1d0>
 8008aa4:	a201      	add	r2, pc, #4	; (adr r2, 8008aac <UART_SetConfig+0x1a8>)
 8008aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aaa:	bf00      	nop
 8008aac:	08008abd 	.word	0x08008abd
 8008ab0:	08008ac9 	.word	0x08008ac9
 8008ab4:	08008ac3 	.word	0x08008ac3
 8008ab8:	08008acf 	.word	0x08008acf
 8008abc:	2301      	movs	r3, #1
 8008abe:	77fb      	strb	r3, [r7, #31]
 8008ac0:	e14c      	b.n	8008d5c <UART_SetConfig+0x458>
 8008ac2:	2302      	movs	r3, #2
 8008ac4:	77fb      	strb	r3, [r7, #31]
 8008ac6:	e149      	b.n	8008d5c <UART_SetConfig+0x458>
 8008ac8:	2304      	movs	r3, #4
 8008aca:	77fb      	strb	r3, [r7, #31]
 8008acc:	e146      	b.n	8008d5c <UART_SetConfig+0x458>
 8008ace:	2308      	movs	r3, #8
 8008ad0:	77fb      	strb	r3, [r7, #31]
 8008ad2:	e143      	b.n	8008d5c <UART_SetConfig+0x458>
 8008ad4:	2310      	movs	r3, #16
 8008ad6:	77fb      	strb	r3, [r7, #31]
 8008ad8:	e140      	b.n	8008d5c <UART_SetConfig+0x458>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4a33      	ldr	r2, [pc, #204]	; (8008bac <UART_SetConfig+0x2a8>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d132      	bne.n	8008b4a <UART_SetConfig+0x246>
 8008ae4:	4b30      	ldr	r3, [pc, #192]	; (8008ba8 <UART_SetConfig+0x2a4>)
 8008ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008aea:	f003 030c 	and.w	r3, r3, #12
 8008aee:	2b0c      	cmp	r3, #12
 8008af0:	d828      	bhi.n	8008b44 <UART_SetConfig+0x240>
 8008af2:	a201      	add	r2, pc, #4	; (adr r2, 8008af8 <UART_SetConfig+0x1f4>)
 8008af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008af8:	08008b2d 	.word	0x08008b2d
 8008afc:	08008b45 	.word	0x08008b45
 8008b00:	08008b45 	.word	0x08008b45
 8008b04:	08008b45 	.word	0x08008b45
 8008b08:	08008b39 	.word	0x08008b39
 8008b0c:	08008b45 	.word	0x08008b45
 8008b10:	08008b45 	.word	0x08008b45
 8008b14:	08008b45 	.word	0x08008b45
 8008b18:	08008b33 	.word	0x08008b33
 8008b1c:	08008b45 	.word	0x08008b45
 8008b20:	08008b45 	.word	0x08008b45
 8008b24:	08008b45 	.word	0x08008b45
 8008b28:	08008b3f 	.word	0x08008b3f
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	77fb      	strb	r3, [r7, #31]
 8008b30:	e114      	b.n	8008d5c <UART_SetConfig+0x458>
 8008b32:	2302      	movs	r3, #2
 8008b34:	77fb      	strb	r3, [r7, #31]
 8008b36:	e111      	b.n	8008d5c <UART_SetConfig+0x458>
 8008b38:	2304      	movs	r3, #4
 8008b3a:	77fb      	strb	r3, [r7, #31]
 8008b3c:	e10e      	b.n	8008d5c <UART_SetConfig+0x458>
 8008b3e:	2308      	movs	r3, #8
 8008b40:	77fb      	strb	r3, [r7, #31]
 8008b42:	e10b      	b.n	8008d5c <UART_SetConfig+0x458>
 8008b44:	2310      	movs	r3, #16
 8008b46:	77fb      	strb	r3, [r7, #31]
 8008b48:	e108      	b.n	8008d5c <UART_SetConfig+0x458>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4a18      	ldr	r2, [pc, #96]	; (8008bb0 <UART_SetConfig+0x2ac>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d12f      	bne.n	8008bb4 <UART_SetConfig+0x2b0>
 8008b54:	4b14      	ldr	r3, [pc, #80]	; (8008ba8 <UART_SetConfig+0x2a4>)
 8008b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b5a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008b5e:	2b30      	cmp	r3, #48	; 0x30
 8008b60:	d013      	beq.n	8008b8a <UART_SetConfig+0x286>
 8008b62:	2b30      	cmp	r3, #48	; 0x30
 8008b64:	d814      	bhi.n	8008b90 <UART_SetConfig+0x28c>
 8008b66:	2b20      	cmp	r3, #32
 8008b68:	d009      	beq.n	8008b7e <UART_SetConfig+0x27a>
 8008b6a:	2b20      	cmp	r3, #32
 8008b6c:	d810      	bhi.n	8008b90 <UART_SetConfig+0x28c>
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d002      	beq.n	8008b78 <UART_SetConfig+0x274>
 8008b72:	2b10      	cmp	r3, #16
 8008b74:	d006      	beq.n	8008b84 <UART_SetConfig+0x280>
 8008b76:	e00b      	b.n	8008b90 <UART_SetConfig+0x28c>
 8008b78:	2300      	movs	r3, #0
 8008b7a:	77fb      	strb	r3, [r7, #31]
 8008b7c:	e0ee      	b.n	8008d5c <UART_SetConfig+0x458>
 8008b7e:	2302      	movs	r3, #2
 8008b80:	77fb      	strb	r3, [r7, #31]
 8008b82:	e0eb      	b.n	8008d5c <UART_SetConfig+0x458>
 8008b84:	2304      	movs	r3, #4
 8008b86:	77fb      	strb	r3, [r7, #31]
 8008b88:	e0e8      	b.n	8008d5c <UART_SetConfig+0x458>
 8008b8a:	2308      	movs	r3, #8
 8008b8c:	77fb      	strb	r3, [r7, #31]
 8008b8e:	e0e5      	b.n	8008d5c <UART_SetConfig+0x458>
 8008b90:	2310      	movs	r3, #16
 8008b92:	77fb      	strb	r3, [r7, #31]
 8008b94:	e0e2      	b.n	8008d5c <UART_SetConfig+0x458>
 8008b96:	bf00      	nop
 8008b98:	019bfcc0 	.word	0x019bfcc0
 8008b9c:	08013e34 	.word	0x08013e34
 8008ba0:	efff69f3 	.word	0xefff69f3
 8008ba4:	40011000 	.word	0x40011000
 8008ba8:	40023800 	.word	0x40023800
 8008bac:	40004400 	.word	0x40004400
 8008bb0:	40004800 	.word	0x40004800
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4aa5      	ldr	r2, [pc, #660]	; (8008e50 <UART_SetConfig+0x54c>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d120      	bne.n	8008c00 <UART_SetConfig+0x2fc>
 8008bbe:	4ba5      	ldr	r3, [pc, #660]	; (8008e54 <UART_SetConfig+0x550>)
 8008bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bc4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008bc8:	2bc0      	cmp	r3, #192	; 0xc0
 8008bca:	d013      	beq.n	8008bf4 <UART_SetConfig+0x2f0>
 8008bcc:	2bc0      	cmp	r3, #192	; 0xc0
 8008bce:	d814      	bhi.n	8008bfa <UART_SetConfig+0x2f6>
 8008bd0:	2b80      	cmp	r3, #128	; 0x80
 8008bd2:	d009      	beq.n	8008be8 <UART_SetConfig+0x2e4>
 8008bd4:	2b80      	cmp	r3, #128	; 0x80
 8008bd6:	d810      	bhi.n	8008bfa <UART_SetConfig+0x2f6>
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d002      	beq.n	8008be2 <UART_SetConfig+0x2de>
 8008bdc:	2b40      	cmp	r3, #64	; 0x40
 8008bde:	d006      	beq.n	8008bee <UART_SetConfig+0x2ea>
 8008be0:	e00b      	b.n	8008bfa <UART_SetConfig+0x2f6>
 8008be2:	2300      	movs	r3, #0
 8008be4:	77fb      	strb	r3, [r7, #31]
 8008be6:	e0b9      	b.n	8008d5c <UART_SetConfig+0x458>
 8008be8:	2302      	movs	r3, #2
 8008bea:	77fb      	strb	r3, [r7, #31]
 8008bec:	e0b6      	b.n	8008d5c <UART_SetConfig+0x458>
 8008bee:	2304      	movs	r3, #4
 8008bf0:	77fb      	strb	r3, [r7, #31]
 8008bf2:	e0b3      	b.n	8008d5c <UART_SetConfig+0x458>
 8008bf4:	2308      	movs	r3, #8
 8008bf6:	77fb      	strb	r3, [r7, #31]
 8008bf8:	e0b0      	b.n	8008d5c <UART_SetConfig+0x458>
 8008bfa:	2310      	movs	r3, #16
 8008bfc:	77fb      	strb	r3, [r7, #31]
 8008bfe:	e0ad      	b.n	8008d5c <UART_SetConfig+0x458>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	4a94      	ldr	r2, [pc, #592]	; (8008e58 <UART_SetConfig+0x554>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d125      	bne.n	8008c56 <UART_SetConfig+0x352>
 8008c0a:	4b92      	ldr	r3, [pc, #584]	; (8008e54 <UART_SetConfig+0x550>)
 8008c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c18:	d017      	beq.n	8008c4a <UART_SetConfig+0x346>
 8008c1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c1e:	d817      	bhi.n	8008c50 <UART_SetConfig+0x34c>
 8008c20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c24:	d00b      	beq.n	8008c3e <UART_SetConfig+0x33a>
 8008c26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c2a:	d811      	bhi.n	8008c50 <UART_SetConfig+0x34c>
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d003      	beq.n	8008c38 <UART_SetConfig+0x334>
 8008c30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c34:	d006      	beq.n	8008c44 <UART_SetConfig+0x340>
 8008c36:	e00b      	b.n	8008c50 <UART_SetConfig+0x34c>
 8008c38:	2300      	movs	r3, #0
 8008c3a:	77fb      	strb	r3, [r7, #31]
 8008c3c:	e08e      	b.n	8008d5c <UART_SetConfig+0x458>
 8008c3e:	2302      	movs	r3, #2
 8008c40:	77fb      	strb	r3, [r7, #31]
 8008c42:	e08b      	b.n	8008d5c <UART_SetConfig+0x458>
 8008c44:	2304      	movs	r3, #4
 8008c46:	77fb      	strb	r3, [r7, #31]
 8008c48:	e088      	b.n	8008d5c <UART_SetConfig+0x458>
 8008c4a:	2308      	movs	r3, #8
 8008c4c:	77fb      	strb	r3, [r7, #31]
 8008c4e:	e085      	b.n	8008d5c <UART_SetConfig+0x458>
 8008c50:	2310      	movs	r3, #16
 8008c52:	77fb      	strb	r3, [r7, #31]
 8008c54:	e082      	b.n	8008d5c <UART_SetConfig+0x458>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4a80      	ldr	r2, [pc, #512]	; (8008e5c <UART_SetConfig+0x558>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d125      	bne.n	8008cac <UART_SetConfig+0x3a8>
 8008c60:	4b7c      	ldr	r3, [pc, #496]	; (8008e54 <UART_SetConfig+0x550>)
 8008c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c66:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008c6a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008c6e:	d017      	beq.n	8008ca0 <UART_SetConfig+0x39c>
 8008c70:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008c74:	d817      	bhi.n	8008ca6 <UART_SetConfig+0x3a2>
 8008c76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c7a:	d00b      	beq.n	8008c94 <UART_SetConfig+0x390>
 8008c7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c80:	d811      	bhi.n	8008ca6 <UART_SetConfig+0x3a2>
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d003      	beq.n	8008c8e <UART_SetConfig+0x38a>
 8008c86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c8a:	d006      	beq.n	8008c9a <UART_SetConfig+0x396>
 8008c8c:	e00b      	b.n	8008ca6 <UART_SetConfig+0x3a2>
 8008c8e:	2301      	movs	r3, #1
 8008c90:	77fb      	strb	r3, [r7, #31]
 8008c92:	e063      	b.n	8008d5c <UART_SetConfig+0x458>
 8008c94:	2302      	movs	r3, #2
 8008c96:	77fb      	strb	r3, [r7, #31]
 8008c98:	e060      	b.n	8008d5c <UART_SetConfig+0x458>
 8008c9a:	2304      	movs	r3, #4
 8008c9c:	77fb      	strb	r3, [r7, #31]
 8008c9e:	e05d      	b.n	8008d5c <UART_SetConfig+0x458>
 8008ca0:	2308      	movs	r3, #8
 8008ca2:	77fb      	strb	r3, [r7, #31]
 8008ca4:	e05a      	b.n	8008d5c <UART_SetConfig+0x458>
 8008ca6:	2310      	movs	r3, #16
 8008ca8:	77fb      	strb	r3, [r7, #31]
 8008caa:	e057      	b.n	8008d5c <UART_SetConfig+0x458>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a6b      	ldr	r2, [pc, #428]	; (8008e60 <UART_SetConfig+0x55c>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d125      	bne.n	8008d02 <UART_SetConfig+0x3fe>
 8008cb6:	4b67      	ldr	r3, [pc, #412]	; (8008e54 <UART_SetConfig+0x550>)
 8008cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cbc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008cc0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008cc4:	d017      	beq.n	8008cf6 <UART_SetConfig+0x3f2>
 8008cc6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008cca:	d817      	bhi.n	8008cfc <UART_SetConfig+0x3f8>
 8008ccc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cd0:	d00b      	beq.n	8008cea <UART_SetConfig+0x3e6>
 8008cd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cd6:	d811      	bhi.n	8008cfc <UART_SetConfig+0x3f8>
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d003      	beq.n	8008ce4 <UART_SetConfig+0x3e0>
 8008cdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ce0:	d006      	beq.n	8008cf0 <UART_SetConfig+0x3ec>
 8008ce2:	e00b      	b.n	8008cfc <UART_SetConfig+0x3f8>
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	77fb      	strb	r3, [r7, #31]
 8008ce8:	e038      	b.n	8008d5c <UART_SetConfig+0x458>
 8008cea:	2302      	movs	r3, #2
 8008cec:	77fb      	strb	r3, [r7, #31]
 8008cee:	e035      	b.n	8008d5c <UART_SetConfig+0x458>
 8008cf0:	2304      	movs	r3, #4
 8008cf2:	77fb      	strb	r3, [r7, #31]
 8008cf4:	e032      	b.n	8008d5c <UART_SetConfig+0x458>
 8008cf6:	2308      	movs	r3, #8
 8008cf8:	77fb      	strb	r3, [r7, #31]
 8008cfa:	e02f      	b.n	8008d5c <UART_SetConfig+0x458>
 8008cfc:	2310      	movs	r3, #16
 8008cfe:	77fb      	strb	r3, [r7, #31]
 8008d00:	e02c      	b.n	8008d5c <UART_SetConfig+0x458>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a57      	ldr	r2, [pc, #348]	; (8008e64 <UART_SetConfig+0x560>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d125      	bne.n	8008d58 <UART_SetConfig+0x454>
 8008d0c:	4b51      	ldr	r3, [pc, #324]	; (8008e54 <UART_SetConfig+0x550>)
 8008d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d12:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008d16:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008d1a:	d017      	beq.n	8008d4c <UART_SetConfig+0x448>
 8008d1c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008d20:	d817      	bhi.n	8008d52 <UART_SetConfig+0x44e>
 8008d22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d26:	d00b      	beq.n	8008d40 <UART_SetConfig+0x43c>
 8008d28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d2c:	d811      	bhi.n	8008d52 <UART_SetConfig+0x44e>
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d003      	beq.n	8008d3a <UART_SetConfig+0x436>
 8008d32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d36:	d006      	beq.n	8008d46 <UART_SetConfig+0x442>
 8008d38:	e00b      	b.n	8008d52 <UART_SetConfig+0x44e>
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	77fb      	strb	r3, [r7, #31]
 8008d3e:	e00d      	b.n	8008d5c <UART_SetConfig+0x458>
 8008d40:	2302      	movs	r3, #2
 8008d42:	77fb      	strb	r3, [r7, #31]
 8008d44:	e00a      	b.n	8008d5c <UART_SetConfig+0x458>
 8008d46:	2304      	movs	r3, #4
 8008d48:	77fb      	strb	r3, [r7, #31]
 8008d4a:	e007      	b.n	8008d5c <UART_SetConfig+0x458>
 8008d4c:	2308      	movs	r3, #8
 8008d4e:	77fb      	strb	r3, [r7, #31]
 8008d50:	e004      	b.n	8008d5c <UART_SetConfig+0x458>
 8008d52:	2310      	movs	r3, #16
 8008d54:	77fb      	strb	r3, [r7, #31]
 8008d56:	e001      	b.n	8008d5c <UART_SetConfig+0x458>
 8008d58:	2310      	movs	r3, #16
 8008d5a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	69db      	ldr	r3, [r3, #28]
 8008d60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d64:	d15c      	bne.n	8008e20 <UART_SetConfig+0x51c>
  {
    switch (clocksource)
 8008d66:	7ffb      	ldrb	r3, [r7, #31]
 8008d68:	2b08      	cmp	r3, #8
 8008d6a:	d828      	bhi.n	8008dbe <UART_SetConfig+0x4ba>
 8008d6c:	a201      	add	r2, pc, #4	; (adr r2, 8008d74 <UART_SetConfig+0x470>)
 8008d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d72:	bf00      	nop
 8008d74:	08008d99 	.word	0x08008d99
 8008d78:	08008da1 	.word	0x08008da1
 8008d7c:	08008da9 	.word	0x08008da9
 8008d80:	08008dbf 	.word	0x08008dbf
 8008d84:	08008daf 	.word	0x08008daf
 8008d88:	08008dbf 	.word	0x08008dbf
 8008d8c:	08008dbf 	.word	0x08008dbf
 8008d90:	08008dbf 	.word	0x08008dbf
 8008d94:	08008db7 	.word	0x08008db7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d98:	f7fb ffec 	bl	8004d74 <HAL_RCC_GetPCLK1Freq>
 8008d9c:	61b8      	str	r0, [r7, #24]
        break;
 8008d9e:	e013      	b.n	8008dc8 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008da0:	f7fb fffc 	bl	8004d9c <HAL_RCC_GetPCLK2Freq>
 8008da4:	61b8      	str	r0, [r7, #24]
        break;
 8008da6:	e00f      	b.n	8008dc8 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008da8:	4b2f      	ldr	r3, [pc, #188]	; (8008e68 <UART_SetConfig+0x564>)
 8008daa:	61bb      	str	r3, [r7, #24]
        break;
 8008dac:	e00c      	b.n	8008dc8 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008dae:	f7fb ff0f 	bl	8004bd0 <HAL_RCC_GetSysClockFreq>
 8008db2:	61b8      	str	r0, [r7, #24]
        break;
 8008db4:	e008      	b.n	8008dc8 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008db6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008dba:	61bb      	str	r3, [r7, #24]
        break;
 8008dbc:	e004      	b.n	8008dc8 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	77bb      	strb	r3, [r7, #30]
        break;
 8008dc6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008dc8:	69bb      	ldr	r3, [r7, #24]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	f000 8082 	beq.w	8008ed4 <UART_SetConfig+0x5d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008dd0:	69bb      	ldr	r3, [r7, #24]
 8008dd2:	005a      	lsls	r2, r3, #1
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	685b      	ldr	r3, [r3, #4]
 8008dd8:	085b      	lsrs	r3, r3, #1
 8008dda:	441a      	add	r2, r3
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008de4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	2b0f      	cmp	r3, #15
 8008dea:	d916      	bls.n	8008e1a <UART_SetConfig+0x516>
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008df2:	d212      	bcs.n	8008e1a <UART_SetConfig+0x516>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	b29b      	uxth	r3, r3
 8008df8:	f023 030f 	bic.w	r3, r3, #15
 8008dfc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	085b      	lsrs	r3, r3, #1
 8008e02:	b29b      	uxth	r3, r3
 8008e04:	f003 0307 	and.w	r3, r3, #7
 8008e08:	b29a      	uxth	r2, r3
 8008e0a:	89fb      	ldrh	r3, [r7, #14]
 8008e0c:	4313      	orrs	r3, r2
 8008e0e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	89fa      	ldrh	r2, [r7, #14]
 8008e16:	60da      	str	r2, [r3, #12]
 8008e18:	e05c      	b.n	8008ed4 <UART_SetConfig+0x5d0>
      }
      else
      {
        ret = HAL_ERROR;
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	77bb      	strb	r3, [r7, #30]
 8008e1e:	e059      	b.n	8008ed4 <UART_SetConfig+0x5d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008e20:	7ffb      	ldrb	r3, [r7, #31]
 8008e22:	2b08      	cmp	r3, #8
 8008e24:	d835      	bhi.n	8008e92 <UART_SetConfig+0x58e>
 8008e26:	a201      	add	r2, pc, #4	; (adr r2, 8008e2c <UART_SetConfig+0x528>)
 8008e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e2c:	08008e6d 	.word	0x08008e6d
 8008e30:	08008e75 	.word	0x08008e75
 8008e34:	08008e7d 	.word	0x08008e7d
 8008e38:	08008e93 	.word	0x08008e93
 8008e3c:	08008e83 	.word	0x08008e83
 8008e40:	08008e93 	.word	0x08008e93
 8008e44:	08008e93 	.word	0x08008e93
 8008e48:	08008e93 	.word	0x08008e93
 8008e4c:	08008e8b 	.word	0x08008e8b
 8008e50:	40004c00 	.word	0x40004c00
 8008e54:	40023800 	.word	0x40023800
 8008e58:	40005000 	.word	0x40005000
 8008e5c:	40011400 	.word	0x40011400
 8008e60:	40007800 	.word	0x40007800
 8008e64:	40007c00 	.word	0x40007c00
 8008e68:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e6c:	f7fb ff82 	bl	8004d74 <HAL_RCC_GetPCLK1Freq>
 8008e70:	61b8      	str	r0, [r7, #24]
        break;
 8008e72:	e013      	b.n	8008e9c <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e74:	f7fb ff92 	bl	8004d9c <HAL_RCC_GetPCLK2Freq>
 8008e78:	61b8      	str	r0, [r7, #24]
        break;
 8008e7a:	e00f      	b.n	8008e9c <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008e7c:	4b1b      	ldr	r3, [pc, #108]	; (8008eec <UART_SetConfig+0x5e8>)
 8008e7e:	61bb      	str	r3, [r7, #24]
        break;
 8008e80:	e00c      	b.n	8008e9c <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e82:	f7fb fea5 	bl	8004bd0 <HAL_RCC_GetSysClockFreq>
 8008e86:	61b8      	str	r0, [r7, #24]
        break;
 8008e88:	e008      	b.n	8008e9c <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e8e:	61bb      	str	r3, [r7, #24]
        break;
 8008e90:	e004      	b.n	8008e9c <UART_SetConfig+0x598>
      default:
        pclk = 0U;
 8008e92:	2300      	movs	r3, #0
 8008e94:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008e96:	2301      	movs	r3, #1
 8008e98:	77bb      	strb	r3, [r7, #30]
        break;
 8008e9a:	bf00      	nop
    }

    if (pclk != 0U)
 8008e9c:	69bb      	ldr	r3, [r7, #24]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d018      	beq.n	8008ed4 <UART_SetConfig+0x5d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	685b      	ldr	r3, [r3, #4]
 8008ea6:	085a      	lsrs	r2, r3, #1
 8008ea8:	69bb      	ldr	r3, [r7, #24]
 8008eaa:	441a      	add	r2, r3
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	685b      	ldr	r3, [r3, #4]
 8008eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008eb4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	2b0f      	cmp	r3, #15
 8008eba:	d909      	bls.n	8008ed0 <UART_SetConfig+0x5cc>
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ec2:	d205      	bcs.n	8008ed0 <UART_SetConfig+0x5cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	b29a      	uxth	r2, r3
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	60da      	str	r2, [r3, #12]
 8008ece:	e001      	b.n	8008ed4 <UART_SetConfig+0x5d0>
      }
      else
      {
        ret = HAL_ERROR;
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2200      	movs	r2, #0
 8008ede:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008ee0:	7fbb      	ldrb	r3, [r7, #30]
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3720      	adds	r7, #32
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}
 8008eea:	bf00      	nop
 8008eec:	00f42400 	.word	0x00f42400

08008ef0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b082      	sub	sp, #8
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008efc:	2bff      	cmp	r3, #255	; 0xff
 8008efe:	d904      	bls.n	8008f0a <UART_AdvFeatureConfig+0x1a>
 8008f00:	f640 31e6 	movw	r1, #3046	; 0xbe6
 8008f04:	488e      	ldr	r0, [pc, #568]	; (8009140 <UART_AdvFeatureConfig+0x250>)
 8008f06:	f7f8 ffb4 	bl	8001e72 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f0e:	f003 0301 	and.w	r3, r3, #1
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d018      	beq.n	8008f48 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d009      	beq.n	8008f32 <UART_AdvFeatureConfig+0x42>
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f26:	d004      	beq.n	8008f32 <UART_AdvFeatureConfig+0x42>
 8008f28:	f640 31eb 	movw	r1, #3051	; 0xbeb
 8008f2c:	4884      	ldr	r0, [pc, #528]	; (8009140 <UART_AdvFeatureConfig+0x250>)
 8008f2e:	f7f8 ffa0 	bl	8001e72 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	685b      	ldr	r3, [r3, #4]
 8008f38:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	430a      	orrs	r2, r1
 8008f46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f4c:	f003 0302 	and.w	r3, r3, #2
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d018      	beq.n	8008f86 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d009      	beq.n	8008f70 <UART_AdvFeatureConfig+0x80>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f64:	d004      	beq.n	8008f70 <UART_AdvFeatureConfig+0x80>
 8008f66:	f640 31f2 	movw	r1, #3058	; 0xbf2
 8008f6a:	4875      	ldr	r0, [pc, #468]	; (8009140 <UART_AdvFeatureConfig+0x250>)
 8008f6c:	f7f8 ff81 	bl	8001e72 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	685b      	ldr	r3, [r3, #4]
 8008f76:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	430a      	orrs	r2, r1
 8008f84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f8a:	f003 0304 	and.w	r3, r3, #4
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d018      	beq.n	8008fc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d009      	beq.n	8008fae <UART_AdvFeatureConfig+0xbe>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f9e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008fa2:	d004      	beq.n	8008fae <UART_AdvFeatureConfig+0xbe>
 8008fa4:	f640 31f9 	movw	r1, #3065	; 0xbf9
 8008fa8:	4865      	ldr	r0, [pc, #404]	; (8009140 <UART_AdvFeatureConfig+0x250>)
 8008faa:	f7f8 ff62 	bl	8001e72 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	685b      	ldr	r3, [r3, #4]
 8008fb4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	430a      	orrs	r2, r1
 8008fc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fc8:	f003 0308 	and.w	r3, r3, #8
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d018      	beq.n	8009002 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d009      	beq.n	8008fec <UART_AdvFeatureConfig+0xfc>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008fe0:	d004      	beq.n	8008fec <UART_AdvFeatureConfig+0xfc>
 8008fe2:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8008fe6:	4856      	ldr	r0, [pc, #344]	; (8009140 <UART_AdvFeatureConfig+0x250>)
 8008fe8:	f7f8 ff43 	bl	8001e72 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	430a      	orrs	r2, r1
 8009000:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009006:	f003 0310 	and.w	r3, r3, #16
 800900a:	2b00      	cmp	r3, #0
 800900c:	d018      	beq.n	8009040 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009012:	2b00      	cmp	r3, #0
 8009014:	d009      	beq.n	800902a <UART_AdvFeatureConfig+0x13a>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800901a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800901e:	d004      	beq.n	800902a <UART_AdvFeatureConfig+0x13a>
 8009020:	f640 4107 	movw	r1, #3079	; 0xc07
 8009024:	4846      	ldr	r0, [pc, #280]	; (8009140 <UART_AdvFeatureConfig+0x250>)
 8009026:	f7f8 ff24 	bl	8001e72 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	689b      	ldr	r3, [r3, #8]
 8009030:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	430a      	orrs	r2, r1
 800903e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009044:	f003 0320 	and.w	r3, r3, #32
 8009048:	2b00      	cmp	r3, #0
 800904a:	d018      	beq.n	800907e <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009050:	2b00      	cmp	r3, #0
 8009052:	d009      	beq.n	8009068 <UART_AdvFeatureConfig+0x178>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009058:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800905c:	d004      	beq.n	8009068 <UART_AdvFeatureConfig+0x178>
 800905e:	f640 410e 	movw	r1, #3086	; 0xc0e
 8009062:	4837      	ldr	r0, [pc, #220]	; (8009140 <UART_AdvFeatureConfig+0x250>)
 8009064:	f7f8 ff05 	bl	8001e72 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	689b      	ldr	r3, [r3, #8]
 800906e:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	430a      	orrs	r2, r1
 800907c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009086:	2b00      	cmp	r3, #0
 8009088:	d064      	beq.n	8009154 <UART_AdvFeatureConfig+0x264>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4a2d      	ldr	r2, [pc, #180]	; (8009144 <UART_AdvFeatureConfig+0x254>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d013      	beq.n	80090bc <UART_AdvFeatureConfig+0x1cc>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	4a2b      	ldr	r2, [pc, #172]	; (8009148 <UART_AdvFeatureConfig+0x258>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d00e      	beq.n	80090bc <UART_AdvFeatureConfig+0x1cc>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	4a2a      	ldr	r2, [pc, #168]	; (800914c <UART_AdvFeatureConfig+0x25c>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d009      	beq.n	80090bc <UART_AdvFeatureConfig+0x1cc>
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	4a28      	ldr	r2, [pc, #160]	; (8009150 <UART_AdvFeatureConfig+0x260>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d004      	beq.n	80090bc <UART_AdvFeatureConfig+0x1cc>
 80090b2:	f640 4115 	movw	r1, #3093	; 0xc15
 80090b6:	4822      	ldr	r0, [pc, #136]	; (8009140 <UART_AdvFeatureConfig+0x250>)
 80090b8:	f7f8 fedb 	bl	8001e72 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d009      	beq.n	80090d8 <UART_AdvFeatureConfig+0x1e8>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80090cc:	d004      	beq.n	80090d8 <UART_AdvFeatureConfig+0x1e8>
 80090ce:	f640 4116 	movw	r1, #3094	; 0xc16
 80090d2:	481b      	ldr	r0, [pc, #108]	; (8009140 <UART_AdvFeatureConfig+0x250>)
 80090d4:	f7f8 fecd 	bl	8001e72 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	430a      	orrs	r2, r1
 80090ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80090f6:	d12d      	bne.n	8009154 <UART_AdvFeatureConfig+0x264>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d013      	beq.n	8009128 <UART_AdvFeatureConfig+0x238>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009104:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009108:	d00e      	beq.n	8009128 <UART_AdvFeatureConfig+0x238>
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800910e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009112:	d009      	beq.n	8009128 <UART_AdvFeatureConfig+0x238>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009118:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800911c:	d004      	beq.n	8009128 <UART_AdvFeatureConfig+0x238>
 800911e:	f640 411b 	movw	r1, #3099	; 0xc1b
 8009122:	4807      	ldr	r0, [pc, #28]	; (8009140 <UART_AdvFeatureConfig+0x250>)
 8009124:	f7f8 fea5 	bl	8001e72 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	685b      	ldr	r3, [r3, #4]
 800912e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	430a      	orrs	r2, r1
 800913c:	605a      	str	r2, [r3, #4]
 800913e:	e009      	b.n	8009154 <UART_AdvFeatureConfig+0x264>
 8009140:	08013e34 	.word	0x08013e34
 8009144:	40011000 	.word	0x40011000
 8009148:	40004400 	.word	0x40004400
 800914c:	40004800 	.word	0x40004800
 8009150:	40011400 	.word	0x40011400
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800915c:	2b00      	cmp	r3, #0
 800915e:	d018      	beq.n	8009192 <UART_AdvFeatureConfig+0x2a2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009164:	2b00      	cmp	r3, #0
 8009166:	d009      	beq.n	800917c <UART_AdvFeatureConfig+0x28c>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800916c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009170:	d004      	beq.n	800917c <UART_AdvFeatureConfig+0x28c>
 8009172:	f640 4123 	movw	r1, #3107	; 0xc23
 8009176:	4809      	ldr	r0, [pc, #36]	; (800919c <UART_AdvFeatureConfig+0x2ac>)
 8009178:	f7f8 fe7b 	bl	8001e72 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	685b      	ldr	r3, [r3, #4]
 8009182:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	430a      	orrs	r2, r1
 8009190:	605a      	str	r2, [r3, #4]
  }
}
 8009192:	bf00      	nop
 8009194:	3708      	adds	r7, #8
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}
 800919a:	bf00      	nop
 800919c:	08013e34 	.word	0x08013e34

080091a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b086      	sub	sp, #24
 80091a4:	af02      	add	r7, sp, #8
 80091a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2200      	movs	r2, #0
 80091ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80091b0:	f7f9 fb3a 	bl	8002828 <HAL_GetTick>
 80091b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f003 0308 	and.w	r3, r3, #8
 80091c0:	2b08      	cmp	r3, #8
 80091c2:	d10e      	bne.n	80091e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80091c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80091c8:	9300      	str	r3, [sp, #0]
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	2200      	movs	r2, #0
 80091ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f000 f81b 	bl	800920e <UART_WaitOnFlagUntilTimeout>
 80091d8:	4603      	mov	r3, r0
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d001      	beq.n	80091e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80091de:	2303      	movs	r3, #3
 80091e0:	e011      	b.n	8009206 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2220      	movs	r2, #32
 80091e6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2220      	movs	r2, #32
 80091ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2200      	movs	r2, #0
 80091f4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2200      	movs	r2, #0
 80091fa:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2200      	movs	r2, #0
 8009200:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8009204:	2300      	movs	r3, #0
}
 8009206:	4618      	mov	r0, r3
 8009208:	3710      	adds	r7, #16
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}

0800920e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800920e:	b580      	push	{r7, lr}
 8009210:	b09c      	sub	sp, #112	; 0x70
 8009212:	af00      	add	r7, sp, #0
 8009214:	60f8      	str	r0, [r7, #12]
 8009216:	60b9      	str	r1, [r7, #8]
 8009218:	603b      	str	r3, [r7, #0]
 800921a:	4613      	mov	r3, r2
 800921c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800921e:	e0a7      	b.n	8009370 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009220:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009226:	f000 80a3 	beq.w	8009370 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800922a:	f7f9 fafd 	bl	8002828 <HAL_GetTick>
 800922e:	4602      	mov	r2, r0
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	1ad3      	subs	r3, r2, r3
 8009234:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009236:	429a      	cmp	r2, r3
 8009238:	d302      	bcc.n	8009240 <UART_WaitOnFlagUntilTimeout+0x32>
 800923a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800923c:	2b00      	cmp	r3, #0
 800923e:	d13f      	bne.n	80092c0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009246:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009248:	e853 3f00 	ldrex	r3, [r3]
 800924c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800924e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009250:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009254:	667b      	str	r3, [r7, #100]	; 0x64
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	461a      	mov	r2, r3
 800925c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800925e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009260:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009262:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009264:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009266:	e841 2300 	strex	r3, r2, [r1]
 800926a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800926c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800926e:	2b00      	cmp	r3, #0
 8009270:	d1e6      	bne.n	8009240 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	3308      	adds	r3, #8
 8009278:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800927a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800927c:	e853 3f00 	ldrex	r3, [r3]
 8009280:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009284:	f023 0301 	bic.w	r3, r3, #1
 8009288:	663b      	str	r3, [r7, #96]	; 0x60
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	3308      	adds	r3, #8
 8009290:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009292:	64ba      	str	r2, [r7, #72]	; 0x48
 8009294:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009296:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009298:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800929a:	e841 2300 	strex	r3, r2, [r1]
 800929e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80092a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d1e5      	bne.n	8009272 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	2220      	movs	r2, #32
 80092aa:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	2220      	movs	r2, #32
 80092b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	2200      	movs	r2, #0
 80092b8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80092bc:	2303      	movs	r3, #3
 80092be:	e068      	b.n	8009392 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f003 0304 	and.w	r3, r3, #4
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d050      	beq.n	8009370 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	69db      	ldr	r3, [r3, #28]
 80092d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80092d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80092dc:	d148      	bne.n	8009370 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80092e6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092f0:	e853 3f00 	ldrex	r3, [r3]
 80092f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80092f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80092fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	461a      	mov	r2, r3
 8009304:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009306:	637b      	str	r3, [r7, #52]	; 0x34
 8009308:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800930a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800930c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800930e:	e841 2300 	strex	r3, r2, [r1]
 8009312:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009316:	2b00      	cmp	r3, #0
 8009318:	d1e6      	bne.n	80092e8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	3308      	adds	r3, #8
 8009320:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	e853 3f00 	ldrex	r3, [r3]
 8009328:	613b      	str	r3, [r7, #16]
   return(result);
 800932a:	693b      	ldr	r3, [r7, #16]
 800932c:	f023 0301 	bic.w	r3, r3, #1
 8009330:	66bb      	str	r3, [r7, #104]	; 0x68
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	3308      	adds	r3, #8
 8009338:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800933a:	623a      	str	r2, [r7, #32]
 800933c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800933e:	69f9      	ldr	r1, [r7, #28]
 8009340:	6a3a      	ldr	r2, [r7, #32]
 8009342:	e841 2300 	strex	r3, r2, [r1]
 8009346:	61bb      	str	r3, [r7, #24]
   return(result);
 8009348:	69bb      	ldr	r3, [r7, #24]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d1e5      	bne.n	800931a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	2220      	movs	r2, #32
 8009352:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	2220      	movs	r2, #32
 8009358:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	2220      	movs	r2, #32
 8009360:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	2200      	movs	r2, #0
 8009368:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800936c:	2303      	movs	r3, #3
 800936e:	e010      	b.n	8009392 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	69da      	ldr	r2, [r3, #28]
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	4013      	ands	r3, r2
 800937a:	68ba      	ldr	r2, [r7, #8]
 800937c:	429a      	cmp	r2, r3
 800937e:	bf0c      	ite	eq
 8009380:	2301      	moveq	r3, #1
 8009382:	2300      	movne	r3, #0
 8009384:	b2db      	uxtb	r3, r3
 8009386:	461a      	mov	r2, r3
 8009388:	79fb      	ldrb	r3, [r7, #7]
 800938a:	429a      	cmp	r2, r3
 800938c:	f43f af48 	beq.w	8009220 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009390:	2300      	movs	r3, #0
}
 8009392:	4618      	mov	r0, r3
 8009394:	3770      	adds	r7, #112	; 0x70
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}
	...

0800939c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800939c:	b480      	push	{r7}
 800939e:	b097      	sub	sp, #92	; 0x5c
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	60f8      	str	r0, [r7, #12]
 80093a4:	60b9      	str	r1, [r7, #8]
 80093a6:	4613      	mov	r3, r2
 80093a8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	68ba      	ldr	r2, [r7, #8]
 80093ae:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	88fa      	ldrh	r2, [r7, #6]
 80093b4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	88fa      	ldrh	r2, [r7, #6]
 80093bc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	2200      	movs	r2, #0
 80093c4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	689b      	ldr	r3, [r3, #8]
 80093ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093ce:	d10e      	bne.n	80093ee <UART_Start_Receive_IT+0x52>
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	691b      	ldr	r3, [r3, #16]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d105      	bne.n	80093e4 <UART_Start_Receive_IT+0x48>
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	f240 12ff 	movw	r2, #511	; 0x1ff
 80093de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80093e2:	e02d      	b.n	8009440 <UART_Start_Receive_IT+0xa4>
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	22ff      	movs	r2, #255	; 0xff
 80093e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80093ec:	e028      	b.n	8009440 <UART_Start_Receive_IT+0xa4>
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	689b      	ldr	r3, [r3, #8]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d10d      	bne.n	8009412 <UART_Start_Receive_IT+0x76>
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	691b      	ldr	r3, [r3, #16]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d104      	bne.n	8009408 <UART_Start_Receive_IT+0x6c>
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	22ff      	movs	r2, #255	; 0xff
 8009402:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009406:	e01b      	b.n	8009440 <UART_Start_Receive_IT+0xa4>
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	227f      	movs	r2, #127	; 0x7f
 800940c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009410:	e016      	b.n	8009440 <UART_Start_Receive_IT+0xa4>
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	689b      	ldr	r3, [r3, #8]
 8009416:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800941a:	d10d      	bne.n	8009438 <UART_Start_Receive_IT+0x9c>
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	691b      	ldr	r3, [r3, #16]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d104      	bne.n	800942e <UART_Start_Receive_IT+0x92>
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	227f      	movs	r2, #127	; 0x7f
 8009428:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800942c:	e008      	b.n	8009440 <UART_Start_Receive_IT+0xa4>
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	223f      	movs	r2, #63	; 0x3f
 8009432:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009436:	e003      	b.n	8009440 <UART_Start_Receive_IT+0xa4>
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	2200      	movs	r2, #0
 800943c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	2200      	movs	r2, #0
 8009444:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	2222      	movs	r2, #34	; 0x22
 800944c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	3308      	adds	r3, #8
 8009456:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800945a:	e853 3f00 	ldrex	r3, [r3]
 800945e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009462:	f043 0301 	orr.w	r3, r3, #1
 8009466:	657b      	str	r3, [r7, #84]	; 0x54
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	3308      	adds	r3, #8
 800946e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009470:	64ba      	str	r2, [r7, #72]	; 0x48
 8009472:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009474:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009476:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009478:	e841 2300 	strex	r3, r2, [r1]
 800947c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800947e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009480:	2b00      	cmp	r3, #0
 8009482:	d1e5      	bne.n	8009450 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	689b      	ldr	r3, [r3, #8]
 8009488:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800948c:	d107      	bne.n	800949e <UART_Start_Receive_IT+0x102>
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	691b      	ldr	r3, [r3, #16]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d103      	bne.n	800949e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	4a21      	ldr	r2, [pc, #132]	; (8009520 <UART_Start_Receive_IT+0x184>)
 800949a:	669a      	str	r2, [r3, #104]	; 0x68
 800949c:	e002      	b.n	80094a4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	4a20      	ldr	r2, [pc, #128]	; (8009524 <UART_Start_Receive_IT+0x188>)
 80094a2:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	691b      	ldr	r3, [r3, #16]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d019      	beq.n	80094e0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094b4:	e853 3f00 	ldrex	r3, [r3]
 80094b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80094ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094bc:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80094c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	461a      	mov	r2, r3
 80094c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094ca:	637b      	str	r3, [r7, #52]	; 0x34
 80094cc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80094d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80094d2:	e841 2300 	strex	r3, r2, [r1]
 80094d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80094d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d1e6      	bne.n	80094ac <UART_Start_Receive_IT+0x110>
 80094de:	e018      	b.n	8009512 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	e853 3f00 	ldrex	r3, [r3]
 80094ec:	613b      	str	r3, [r7, #16]
   return(result);
 80094ee:	693b      	ldr	r3, [r7, #16]
 80094f0:	f043 0320 	orr.w	r3, r3, #32
 80094f4:	653b      	str	r3, [r7, #80]	; 0x50
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	461a      	mov	r2, r3
 80094fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094fe:	623b      	str	r3, [r7, #32]
 8009500:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009502:	69f9      	ldr	r1, [r7, #28]
 8009504:	6a3a      	ldr	r2, [r7, #32]
 8009506:	e841 2300 	strex	r3, r2, [r1]
 800950a:	61bb      	str	r3, [r7, #24]
   return(result);
 800950c:	69bb      	ldr	r3, [r7, #24]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d1e6      	bne.n	80094e0 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8009512:	2300      	movs	r3, #0
}
 8009514:	4618      	mov	r0, r3
 8009516:	375c      	adds	r7, #92	; 0x5c
 8009518:	46bd      	mov	sp, r7
 800951a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951e:	4770      	bx	lr
 8009520:	080097d7 	.word	0x080097d7
 8009524:	08009671 	.word	0x08009671

08009528 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009528:	b480      	push	{r7}
 800952a:	b095      	sub	sp, #84	; 0x54
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009538:	e853 3f00 	ldrex	r3, [r3]
 800953c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800953e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009540:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009544:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	461a      	mov	r2, r3
 800954c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800954e:	643b      	str	r3, [r7, #64]	; 0x40
 8009550:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009552:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009554:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009556:	e841 2300 	strex	r3, r2, [r1]
 800955a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800955c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800955e:	2b00      	cmp	r3, #0
 8009560:	d1e6      	bne.n	8009530 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	3308      	adds	r3, #8
 8009568:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800956a:	6a3b      	ldr	r3, [r7, #32]
 800956c:	e853 3f00 	ldrex	r3, [r3]
 8009570:	61fb      	str	r3, [r7, #28]
   return(result);
 8009572:	69fb      	ldr	r3, [r7, #28]
 8009574:	f023 0301 	bic.w	r3, r3, #1
 8009578:	64bb      	str	r3, [r7, #72]	; 0x48
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	3308      	adds	r3, #8
 8009580:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009582:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009584:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009586:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009588:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800958a:	e841 2300 	strex	r3, r2, [r1]
 800958e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009592:	2b00      	cmp	r3, #0
 8009594:	d1e5      	bne.n	8009562 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800959a:	2b01      	cmp	r3, #1
 800959c:	d118      	bne.n	80095d0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	e853 3f00 	ldrex	r3, [r3]
 80095aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	f023 0310 	bic.w	r3, r3, #16
 80095b2:	647b      	str	r3, [r7, #68]	; 0x44
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	461a      	mov	r2, r3
 80095ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095bc:	61bb      	str	r3, [r7, #24]
 80095be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095c0:	6979      	ldr	r1, [r7, #20]
 80095c2:	69ba      	ldr	r2, [r7, #24]
 80095c4:	e841 2300 	strex	r3, r2, [r1]
 80095c8:	613b      	str	r3, [r7, #16]
   return(result);
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d1e6      	bne.n	800959e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2220      	movs	r2, #32
 80095d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2200      	movs	r2, #0
 80095dc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2200      	movs	r2, #0
 80095e2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80095e4:	bf00      	nop
 80095e6:	3754      	adds	r7, #84	; 0x54
 80095e8:	46bd      	mov	sp, r7
 80095ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ee:	4770      	bx	lr

080095f0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b084      	sub	sp, #16
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	2200      	movs	r2, #0
 8009602:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2200      	movs	r2, #0
 800960a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800960e:	68f8      	ldr	r0, [r7, #12]
 8009610:	f7ff f962 	bl	80088d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009614:	bf00      	nop
 8009616:	3710      	adds	r7, #16
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}

0800961c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b088      	sub	sp, #32
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	e853 3f00 	ldrex	r3, [r3]
 8009630:	60bb      	str	r3, [r7, #8]
   return(result);
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009638:	61fb      	str	r3, [r7, #28]
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	461a      	mov	r2, r3
 8009640:	69fb      	ldr	r3, [r7, #28]
 8009642:	61bb      	str	r3, [r7, #24]
 8009644:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009646:	6979      	ldr	r1, [r7, #20]
 8009648:	69ba      	ldr	r2, [r7, #24]
 800964a:	e841 2300 	strex	r3, r2, [r1]
 800964e:	613b      	str	r3, [r7, #16]
   return(result);
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d1e6      	bne.n	8009624 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2220      	movs	r2, #32
 800965a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2200      	movs	r2, #0
 8009660:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f7ff f92e 	bl	80088c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009668:	bf00      	nop
 800966a:	3720      	adds	r7, #32
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}

08009670 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b096      	sub	sp, #88	; 0x58
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800967e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009688:	2b22      	cmp	r3, #34	; 0x22
 800968a:	f040 8098 	bne.w	80097be <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009694:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009698:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800969c:	b2d9      	uxtb	r1, r3
 800969e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80096a2:	b2da      	uxtb	r2, r3
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096a8:	400a      	ands	r2, r1
 80096aa:	b2d2      	uxtb	r2, r2
 80096ac:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096b2:	1c5a      	adds	r2, r3, #1
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80096be:	b29b      	uxth	r3, r3
 80096c0:	3b01      	subs	r3, #1
 80096c2:	b29a      	uxth	r2, r3
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80096d0:	b29b      	uxth	r3, r3
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d17b      	bne.n	80097ce <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096de:	e853 3f00 	ldrex	r3, [r3]
 80096e2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80096e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80096ea:	653b      	str	r3, [r7, #80]	; 0x50
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	461a      	mov	r2, r3
 80096f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096f4:	647b      	str	r3, [r7, #68]	; 0x44
 80096f6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80096fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80096fc:	e841 2300 	strex	r3, r2, [r1]
 8009700:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009702:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009704:	2b00      	cmp	r3, #0
 8009706:	d1e6      	bne.n	80096d6 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	3308      	adds	r3, #8
 800970e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009712:	e853 3f00 	ldrex	r3, [r3]
 8009716:	623b      	str	r3, [r7, #32]
   return(result);
 8009718:	6a3b      	ldr	r3, [r7, #32]
 800971a:	f023 0301 	bic.w	r3, r3, #1
 800971e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	3308      	adds	r3, #8
 8009726:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009728:	633a      	str	r2, [r7, #48]	; 0x30
 800972a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800972c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800972e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009730:	e841 2300 	strex	r3, r2, [r1]
 8009734:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009738:	2b00      	cmp	r3, #0
 800973a:	d1e5      	bne.n	8009708 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2220      	movs	r2, #32
 8009740:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2200      	movs	r2, #0
 8009748:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2200      	movs	r2, #0
 800974e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009754:	2b01      	cmp	r3, #1
 8009756:	d12e      	bne.n	80097b6 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2200      	movs	r2, #0
 800975c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009764:	693b      	ldr	r3, [r7, #16]
 8009766:	e853 3f00 	ldrex	r3, [r3]
 800976a:	60fb      	str	r3, [r7, #12]
   return(result);
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	f023 0310 	bic.w	r3, r3, #16
 8009772:	64bb      	str	r3, [r7, #72]	; 0x48
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	461a      	mov	r2, r3
 800977a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800977c:	61fb      	str	r3, [r7, #28]
 800977e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009780:	69b9      	ldr	r1, [r7, #24]
 8009782:	69fa      	ldr	r2, [r7, #28]
 8009784:	e841 2300 	strex	r3, r2, [r1]
 8009788:	617b      	str	r3, [r7, #20]
   return(result);
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d1e6      	bne.n	800975e <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	69db      	ldr	r3, [r3, #28]
 8009796:	f003 0310 	and.w	r3, r3, #16
 800979a:	2b10      	cmp	r3, #16
 800979c:	d103      	bne.n	80097a6 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	2210      	movs	r2, #16
 80097a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80097ac:	4619      	mov	r1, r3
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f7ff f89c 	bl	80088ec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80097b4:	e00b      	b.n	80097ce <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f7f8 fada 	bl	8001d70 <HAL_UART_RxCpltCallback>
}
 80097bc:	e007      	b.n	80097ce <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	699a      	ldr	r2, [r3, #24]
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f042 0208 	orr.w	r2, r2, #8
 80097cc:	619a      	str	r2, [r3, #24]
}
 80097ce:	bf00      	nop
 80097d0:	3758      	adds	r7, #88	; 0x58
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}

080097d6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80097d6:	b580      	push	{r7, lr}
 80097d8:	b096      	sub	sp, #88	; 0x58
 80097da:	af00      	add	r7, sp, #0
 80097dc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80097e4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80097ee:	2b22      	cmp	r3, #34	; 0x22
 80097f0:	f040 8098 	bne.w	8009924 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097fa:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009802:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8009804:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8009808:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800980c:	4013      	ands	r3, r2
 800980e:	b29a      	uxth	r2, r3
 8009810:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009812:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009818:	1c9a      	adds	r2, r3, #2
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009824:	b29b      	uxth	r3, r3
 8009826:	3b01      	subs	r3, #1
 8009828:	b29a      	uxth	r2, r3
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009836:	b29b      	uxth	r3, r3
 8009838:	2b00      	cmp	r3, #0
 800983a:	d17b      	bne.n	8009934 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009844:	e853 3f00 	ldrex	r3, [r3]
 8009848:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800984a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800984c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009850:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	461a      	mov	r2, r3
 8009858:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800985a:	643b      	str	r3, [r7, #64]	; 0x40
 800985c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800985e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009860:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009862:	e841 2300 	strex	r3, r2, [r1]
 8009866:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800986a:	2b00      	cmp	r3, #0
 800986c:	d1e6      	bne.n	800983c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	3308      	adds	r3, #8
 8009874:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009876:	6a3b      	ldr	r3, [r7, #32]
 8009878:	e853 3f00 	ldrex	r3, [r3]
 800987c:	61fb      	str	r3, [r7, #28]
   return(result);
 800987e:	69fb      	ldr	r3, [r7, #28]
 8009880:	f023 0301 	bic.w	r3, r3, #1
 8009884:	64bb      	str	r3, [r7, #72]	; 0x48
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	3308      	adds	r3, #8
 800988c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800988e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009890:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009892:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009894:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009896:	e841 2300 	strex	r3, r2, [r1]
 800989a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800989c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d1e5      	bne.n	800986e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2220      	movs	r2, #32
 80098a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2200      	movs	r2, #0
 80098ae:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2200      	movs	r2, #0
 80098b4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098ba:	2b01      	cmp	r3, #1
 80098bc:	d12e      	bne.n	800991c <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2200      	movs	r2, #0
 80098c2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	e853 3f00 	ldrex	r3, [r3]
 80098d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	f023 0310 	bic.w	r3, r3, #16
 80098d8:	647b      	str	r3, [r7, #68]	; 0x44
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	461a      	mov	r2, r3
 80098e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098e2:	61bb      	str	r3, [r7, #24]
 80098e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098e6:	6979      	ldr	r1, [r7, #20]
 80098e8:	69ba      	ldr	r2, [r7, #24]
 80098ea:	e841 2300 	strex	r3, r2, [r1]
 80098ee:	613b      	str	r3, [r7, #16]
   return(result);
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d1e6      	bne.n	80098c4 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	69db      	ldr	r3, [r3, #28]
 80098fc:	f003 0310 	and.w	r3, r3, #16
 8009900:	2b10      	cmp	r3, #16
 8009902:	d103      	bne.n	800990c <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	2210      	movs	r2, #16
 800990a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009912:	4619      	mov	r1, r3
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f7fe ffe9 	bl	80088ec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800991a:	e00b      	b.n	8009934 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f7f8 fa27 	bl	8001d70 <HAL_UART_RxCpltCallback>
}
 8009922:	e007      	b.n	8009934 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	699a      	ldr	r2, [r3, #24]
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f042 0208 	orr.w	r2, r2, #8
 8009932:	619a      	str	r2, [r3, #24]
}
 8009934:	bf00      	nop
 8009936:	3758      	adds	r7, #88	; 0x58
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}

0800993c <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b084      	sub	sp, #16
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
 8009944:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009946:	2300      	movs	r3, #0
 8009948:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 800994a:	6839      	ldr	r1, [r7, #0]
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f001 fce2 	bl	800b316 <VL53L0X_get_offset_calibration_data_micro_meter>
 8009952:	4603      	mov	r3, r0
 8009954:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8009956:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800995a:	4618      	mov	r0, r3
 800995c:	3710      	adds	r7, #16
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}
	...

08009964 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8009964:	b5b0      	push	{r4, r5, r7, lr}
 8009966:	b096      	sub	sp, #88	; 0x58
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800996c:	2300      	movs	r3, #0
 800996e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8009972:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009976:	2b00      	cmp	r3, #0
 8009978:	d107      	bne.n	800998a <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 800997a:	2200      	movs	r2, #0
 800997c:	2188      	movs	r1, #136	; 0x88
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f004 feda 	bl	800e738 <VL53L0X_WrByte>
 8009984:	4603      	mov	r3, r0
 8009986:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2200      	movs	r2, #0
 800998e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009998:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80099a2:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	4a9e      	ldr	r2, [pc, #632]	; (8009c24 <VL53L0X_DataInit+0x2c0>)
 80099aa:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	4a9d      	ldr	r2, [pc, #628]	; (8009c28 <VL53L0X_DataInit+0x2c4>)
 80099b2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2200      	movs	r2, #0
 80099ba:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80099bc:	f107 0310 	add.w	r3, r7, #16
 80099c0:	4619      	mov	r1, r3
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f000 fac2 	bl	8009f4c <VL53L0X_GetDeviceParameters>
 80099c8:	4603      	mov	r3, r0
 80099ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 80099ce:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d112      	bne.n	80099fc <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 80099d6:	2300      	movs	r3, #0
 80099d8:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 80099da:	2300      	movs	r3, #0
 80099dc:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f103 0410 	add.w	r4, r3, #16
 80099e4:	f107 0510 	add.w	r5, r7, #16
 80099e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80099ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80099ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80099ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80099f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80099f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80099f4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80099f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2264      	movs	r2, #100	; 0x64
 8009a00:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f44f 7261 	mov.w	r2, #900	; 0x384
 8009a0a:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8009a14:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8009a1e:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2201      	movs	r2, #1
 8009a26:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8009a2a:	2201      	movs	r2, #1
 8009a2c:	2180      	movs	r1, #128	; 0x80
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f004 fe82 	bl	800e738 <VL53L0X_WrByte>
 8009a34:	4603      	mov	r3, r0
 8009a36:	461a      	mov	r2, r3
 8009a38:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009a3c:	4313      	orrs	r3, r2
 8009a3e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009a42:	2201      	movs	r2, #1
 8009a44:	21ff      	movs	r1, #255	; 0xff
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f004 fe76 	bl	800e738 <VL53L0X_WrByte>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	461a      	mov	r2, r3
 8009a50:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009a54:	4313      	orrs	r3, r2
 8009a56:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	2100      	movs	r1, #0
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f004 fe6a 	bl	800e738 <VL53L0X_WrByte>
 8009a64:	4603      	mov	r3, r0
 8009a66:	461a      	mov	r2, r3
 8009a68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009a6c:	4313      	orrs	r3, r2
 8009a6e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8009a72:	f107 030f 	add.w	r3, r7, #15
 8009a76:	461a      	mov	r2, r3
 8009a78:	2191      	movs	r1, #145	; 0x91
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f004 fede 	bl	800e83c <VL53L0X_RdByte>
 8009a80:	4603      	mov	r3, r0
 8009a82:	461a      	mov	r2, r3
 8009a84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009a88:	4313      	orrs	r3, r2
 8009a8a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8009a8e:	7bfa      	ldrb	r2, [r7, #15]
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8009a96:	2201      	movs	r2, #1
 8009a98:	2100      	movs	r1, #0
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f004 fe4c 	bl	800e738 <VL53L0X_WrByte>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	461a      	mov	r2, r3
 8009aa4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009aa8:	4313      	orrs	r3, r2
 8009aaa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009aae:	2200      	movs	r2, #0
 8009ab0:	21ff      	movs	r1, #255	; 0xff
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f004 fe40 	bl	800e738 <VL53L0X_WrByte>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	461a      	mov	r2, r3
 8009abc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009ac0:	4313      	orrs	r3, r2
 8009ac2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	2180      	movs	r1, #128	; 0x80
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f004 fe34 	bl	800e738 <VL53L0X_WrByte>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	461a      	mov	r2, r3
 8009ad4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009ad8:	4313      	orrs	r3, r2
 8009ada:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8009ade:	2300      	movs	r3, #0
 8009ae0:	653b      	str	r3, [r7, #80]	; 0x50
 8009ae2:	e014      	b.n	8009b0e <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8009ae4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d114      	bne.n	8009b16 <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8009aec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009aee:	b29b      	uxth	r3, r3
 8009af0:	2201      	movs	r2, #1
 8009af2:	4619      	mov	r1, r3
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f000 fd35 	bl	800a564 <VL53L0X_SetLimitCheckEnable>
 8009afa:	4603      	mov	r3, r0
 8009afc:	461a      	mov	r2, r3
 8009afe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009b02:	4313      	orrs	r3, r2
 8009b04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8009b08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b0a:	3301      	adds	r3, #1
 8009b0c:	653b      	str	r3, [r7, #80]	; 0x50
 8009b0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b10:	2b05      	cmp	r3, #5
 8009b12:	dde7      	ble.n	8009ae4 <VL53L0X_DataInit+0x180>
 8009b14:	e000      	b.n	8009b18 <VL53L0X_DataInit+0x1b4>
		else
			break;
 8009b16:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8009b18:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d107      	bne.n	8009b30 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8009b20:	2200      	movs	r2, #0
 8009b22:	2102      	movs	r1, #2
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f000 fd1d 	bl	800a564 <VL53L0X_SetLimitCheckEnable>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8009b30:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d107      	bne.n	8009b48 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8009b38:	2200      	movs	r2, #0
 8009b3a:	2103      	movs	r1, #3
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f000 fd11 	bl	800a564 <VL53L0X_SetLimitCheckEnable>
 8009b42:	4603      	mov	r3, r0
 8009b44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8009b48:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d107      	bne.n	8009b60 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8009b50:	2200      	movs	r2, #0
 8009b52:	2104      	movs	r1, #4
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f000 fd05 	bl	800a564 <VL53L0X_SetLimitCheckEnable>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8009b60:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d107      	bne.n	8009b78 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8009b68:	2200      	movs	r2, #0
 8009b6a:	2105      	movs	r1, #5
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f000 fcf9 	bl	800a564 <VL53L0X_SetLimitCheckEnable>
 8009b72:	4603      	mov	r3, r0
 8009b74:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8009b78:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d108      	bne.n	8009b92 <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8009b80:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8009b84:	2100      	movs	r1, #0
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f000 fd9c 	bl	800a6c4 <VL53L0X_SetLimitCheckValue>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8009b92:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d108      	bne.n	8009bac <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8009b9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009b9e:	2101      	movs	r1, #1
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f000 fd8f 	bl	800a6c4 <VL53L0X_SetLimitCheckValue>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009bac:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d108      	bne.n	8009bc6 <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8009bb4:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8009bb8:	2102      	movs	r1, #2
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f000 fd82 	bl	800a6c4 <VL53L0X_SetLimitCheckValue>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009bc6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d107      	bne.n	8009bde <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8009bce:	2200      	movs	r2, #0
 8009bd0:	2103      	movs	r1, #3
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f000 fd76 	bl	800a6c4 <VL53L0X_SetLimitCheckValue>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009bde:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d10f      	bne.n	8009c06 <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	22ff      	movs	r2, #255	; 0xff
 8009bea:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009bee:	22ff      	movs	r2, #255	; 0xff
 8009bf0:	2101      	movs	r1, #1
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f004 fda0 	bl	800e738 <VL53L0X_WrByte>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2201      	movs	r2, #1
 8009c02:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8009c06:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d103      	bne.n	8009c16 <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2200      	movs	r2, #0
 8009c12:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8009c16:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3758      	adds	r7, #88	; 0x58
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bdb0      	pop	{r4, r5, r7, pc}
 8009c22:	bf00      	nop
 8009c24:	00016b85 	.word	0x00016b85
 8009c28:	000970a4 	.word	0x000970a4

08009c2c <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8009c2c:	b5b0      	push	{r4, r5, r7, lr}
 8009c2e:	b09e      	sub	sp, #120	; 0x78
 8009c30:	af02      	add	r7, sp, #8
 8009c32:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009c34:	2300      	movs	r3, #0
 8009c36:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8009c3a:	f107 031c 	add.w	r3, r7, #28
 8009c3e:	2240      	movs	r2, #64	; 0x40
 8009c40:	2100      	movs	r1, #0
 8009c42:	4618      	mov	r0, r3
 8009c44:	f004 fee0 	bl	800ea08 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8009c50:	2300      	movs	r3, #0
 8009c52:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8009c56:	2300      	movs	r3, #0
 8009c58:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8009c62:	2300      	movs	r3, #0
 8009c64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8009c68:	2101      	movs	r1, #1
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f002 faa9 	bl	800c1c2 <VL53L0X_get_info_from_device>
 8009c70:	4603      	mov	r3, r0
 8009c72:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8009c7c:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8009c84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8009c88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c8c:	2b01      	cmp	r3, #1
 8009c8e:	d80d      	bhi.n	8009cac <VL53L0X_StaticInit+0x80>
 8009c90:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c94:	2b01      	cmp	r3, #1
 8009c96:	d102      	bne.n	8009c9e <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8009c98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009c9a:	2b20      	cmp	r3, #32
 8009c9c:	d806      	bhi.n	8009cac <VL53L0X_StaticInit+0x80>
 8009c9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d10e      	bne.n	8009cc4 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8009ca6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009ca8:	2b0c      	cmp	r3, #12
 8009caa:	d90b      	bls.n	8009cc4 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8009cac:	f107 0218 	add.w	r2, r7, #24
 8009cb0:	f107 0314 	add.w	r3, r7, #20
 8009cb4:	4619      	mov	r1, r3
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f001 fd28 	bl	800b70c <VL53L0X_perform_ref_spad_management>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8009cc2:	e009      	b.n	8009cd8 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8009cc4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009cc8:	461a      	mov	r2, r3
 8009cca:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f001 ff29 	bl	800bb24 <VL53L0X_set_reference_spads>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8009cd8:	4b94      	ldr	r3, [pc, #592]	; (8009f2c <VL53L0X_StaticInit+0x300>)
 8009cda:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8009cdc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d10f      	bne.n	8009d04 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8009cea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8009cee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d104      	bne.n	8009d00 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8009cfc:	66bb      	str	r3, [r7, #104]	; 0x68
 8009cfe:	e001      	b.n	8009d04 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8009d00:	4b8a      	ldr	r3, [pc, #552]	; (8009f2c <VL53L0X_StaticInit+0x300>)
 8009d02:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8009d04:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d106      	bne.n	8009d1a <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8009d0c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f003 fdfc 	bl	800d90c <VL53L0X_load_tuning_settings>
 8009d14:	4603      	mov	r3, r0
 8009d16:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8009d1a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d10a      	bne.n	8009d38 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8009d22:	2300      	movs	r3, #0
 8009d24:	9300      	str	r3, [sp, #0]
 8009d26:	2304      	movs	r3, #4
 8009d28:	2200      	movs	r2, #0
 8009d2a:	2100      	movs	r1, #0
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f001 f8f1 	bl	800af14 <VL53L0X_SetGpioConfig>
 8009d32:	4603      	mov	r3, r0
 8009d34:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009d38:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d121      	bne.n	8009d84 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009d40:	2201      	movs	r2, #1
 8009d42:	21ff      	movs	r1, #255	; 0xff
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f004 fcf7 	bl	800e738 <VL53L0X_WrByte>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8009d50:	f107 031a 	add.w	r3, r7, #26
 8009d54:	461a      	mov	r2, r3
 8009d56:	2184      	movs	r1, #132	; 0x84
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f004 fd99 	bl	800e890 <VL53L0X_RdWord>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	461a      	mov	r2, r3
 8009d62:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8009d66:	4313      	orrs	r3, r2
 8009d68:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	21ff      	movs	r1, #255	; 0xff
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f004 fce1 	bl	800e738 <VL53L0X_WrByte>
 8009d76:	4603      	mov	r3, r0
 8009d78:	461a      	mov	r2, r3
 8009d7a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8009d7e:	4313      	orrs	r3, r2
 8009d80:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009d84:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d105      	bne.n	8009d98 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8009d8c:	8b7b      	ldrh	r3, [r7, #26]
 8009d8e:	011b      	lsls	r3, r3, #4
 8009d90:	461a      	mov	r2, r3
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8009d98:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d108      	bne.n	8009db2 <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8009da0:	f107 031c 	add.w	r3, r7, #28
 8009da4:	4619      	mov	r1, r3
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f000 f8d0 	bl	8009f4c <VL53L0X_GetDeviceParameters>
 8009dac:	4603      	mov	r3, r0
 8009dae:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8009db2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d110      	bne.n	8009ddc <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8009dba:	f107 0319 	add.w	r3, r7, #25
 8009dbe:	4619      	mov	r1, r3
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f000 f992 	bl	800a0ea <VL53L0X_GetFractionEnable>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8009dcc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d103      	bne.n	8009ddc <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8009dd4:	7e7a      	ldrb	r2, [r7, #25]
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8009ddc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d10e      	bne.n	8009e02 <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f103 0410 	add.w	r4, r3, #16
 8009dea:	f107 051c 	add.w	r5, r7, #28
 8009dee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009df0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009df2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009df4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009df6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009df8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009dfa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8009dfe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8009e02:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d111      	bne.n	8009e2e <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8009e0a:	f107 0319 	add.w	r3, r7, #25
 8009e0e:	461a      	mov	r2, r3
 8009e10:	2101      	movs	r1, #1
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f004 fd12 	bl	800e83c <VL53L0X_RdByte>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8009e1e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d103      	bne.n	8009e2e <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8009e26:	7e7a      	ldrb	r2, [r7, #25]
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8009e2e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d107      	bne.n	8009e46 <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8009e36:	2200      	movs	r2, #0
 8009e38:	2100      	movs	r1, #0
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f000 f9ca 	bl	800a1d4 <VL53L0X_SetSequenceStepEnable>
 8009e40:	4603      	mov	r3, r0
 8009e42:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8009e46:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d107      	bne.n	8009e5e <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8009e4e:	2200      	movs	r2, #0
 8009e50:	2102      	movs	r1, #2
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f000 f9be 	bl	800a1d4 <VL53L0X_SetSequenceStepEnable>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8009e5e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d103      	bne.n	8009e6e <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2203      	movs	r2, #3
 8009e6a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8009e6e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d109      	bne.n	8009e8a <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8009e76:	f107 0313 	add.w	r3, r7, #19
 8009e7a:	461a      	mov	r2, r3
 8009e7c:	2100      	movs	r1, #0
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f000 f990 	bl	800a1a4 <VL53L0X_GetVcselPulsePeriod>
 8009e84:	4603      	mov	r3, r0
 8009e86:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009e8a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d103      	bne.n	8009e9a <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009e92:	7cfa      	ldrb	r2, [r7, #19]
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8009e9a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d109      	bne.n	8009eb6 <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 8009ea2:	f107 0313 	add.w	r3, r7, #19
 8009ea6:	461a      	mov	r2, r3
 8009ea8:	2101      	movs	r1, #1
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f000 f97a 	bl	800a1a4 <VL53L0X_GetVcselPulsePeriod>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009eb6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d103      	bne.n	8009ec6 <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009ebe:	7cfa      	ldrb	r2, [r7, #19]
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8009ec6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d109      	bne.n	8009ee2 <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 8009ece:	f107 030c 	add.w	r3, r7, #12
 8009ed2:	461a      	mov	r2, r3
 8009ed4:	2103      	movs	r1, #3
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f002 fef4 	bl	800ccc4 <get_sequence_step_timeout>
 8009edc:	4603      	mov	r3, r0
 8009ede:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009ee2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d103      	bne.n	8009ef2 <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009eea:	68fa      	ldr	r2, [r7, #12]
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8009ef2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d109      	bne.n	8009f0e <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 8009efa:	f107 030c 	add.w	r3, r7, #12
 8009efe:	461a      	mov	r2, r3
 8009f00:	2104      	movs	r1, #4
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f002 fede 	bl	800ccc4 <get_sequence_step_timeout>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009f0e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d103      	bne.n	8009f1e <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009f16:	68fa      	ldr	r2, [r7, #12]
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009f1e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	3770      	adds	r7, #112	; 0x70
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bdb0      	pop	{r4, r5, r7, pc}
 8009f2a:	bf00      	nop
 8009f2c:	2000000c 	.word	0x2000000c

08009f30 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 8009f30:	b480      	push	{r7}
 8009f32:	b085      	sub	sp, #20
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 8009f38:	239d      	movs	r3, #157	; 0x9d
 8009f3a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 8009f3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009f40:	4618      	mov	r0, r3
 8009f42:	3714      	adds	r7, #20
 8009f44:	46bd      	mov	sp, r7
 8009f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4a:	4770      	bx	lr

08009f4c <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b084      	sub	sp, #16
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
 8009f54:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009f56:	2300      	movs	r3, #0
 8009f58:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	4619      	mov	r1, r3
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f000 f8b0 	bl	800a0c4 <VL53L0X_GetDeviceMode>
 8009f64:	4603      	mov	r3, r0
 8009f66:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8009f68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d107      	bne.n	8009f80 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	3308      	adds	r3, #8
 8009f74:	4619      	mov	r1, r3
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	f000 fa78 	bl	800a46c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8009f80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d102      	bne.n	8009f8e <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8009f8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d107      	bne.n	8009fa6 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	3310      	adds	r3, #16
 8009f9a:	4619      	mov	r1, r3
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f000 faae 	bl	800a4fe <VL53L0X_GetXTalkCompensationRateMegaCps>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8009fa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d107      	bne.n	8009fbe <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	3314      	adds	r3, #20
 8009fb2:	4619      	mov	r1, r3
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	f7ff fcc1 	bl	800993c <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8009fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d134      	bne.n	800a030 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	60bb      	str	r3, [r7, #8]
 8009fca:	e02a      	b.n	800a022 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8009fcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d12a      	bne.n	800a02a <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	b299      	uxth	r1, r3
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	3308      	adds	r3, #8
 8009fdc:	009b      	lsls	r3, r3, #2
 8009fde:	683a      	ldr	r2, [r7, #0]
 8009fe0:	4413      	add	r3, r2
 8009fe2:	3304      	adds	r3, #4
 8009fe4:	461a      	mov	r2, r3
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f000 fbce 	bl	800a788 <VL53L0X_GetLimitCheckValue>
 8009fec:	4603      	mov	r3, r0
 8009fee:	461a      	mov	r2, r3
 8009ff0:	7bfb      	ldrb	r3, [r7, #15]
 8009ff2:	4313      	orrs	r3, r2
 8009ff4:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8009ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d117      	bne.n	800a02e <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	b299      	uxth	r1, r3
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	3318      	adds	r3, #24
 800a006:	683a      	ldr	r2, [r7, #0]
 800a008:	4413      	add	r3, r2
 800a00a:	461a      	mov	r2, r3
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f000 fb35 	bl	800a67c <VL53L0X_GetLimitCheckEnable>
 800a012:	4603      	mov	r3, r0
 800a014:	461a      	mov	r2, r3
 800a016:	7bfb      	ldrb	r3, [r7, #15]
 800a018:	4313      	orrs	r3, r2
 800a01a:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	3301      	adds	r3, #1
 800a020:	60bb      	str	r3, [r7, #8]
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	2b05      	cmp	r3, #5
 800a026:	ddd1      	ble.n	8009fcc <VL53L0X_GetDeviceParameters+0x80>
 800a028:	e002      	b.n	800a030 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 800a02a:	bf00      	nop
 800a02c:	e000      	b.n	800a030 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 800a02e:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a030:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d107      	bne.n	800a048 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	333c      	adds	r3, #60	; 0x3c
 800a03c:	4619      	mov	r1, r3
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f000 fc30 	bl	800a8a4 <VL53L0X_GetWrapAroundCheckEnable>
 800a044:	4603      	mov	r3, r0
 800a046:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 800a048:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d107      	bne.n	800a060 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	3304      	adds	r3, #4
 800a054:	4619      	mov	r1, r3
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f000 f879 	bl	800a14e <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 800a05c:	4603      	mov	r3, r0
 800a05e:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a060:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a064:	4618      	mov	r0, r3
 800a066:	3710      	adds	r7, #16
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}

0800a06c <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 800a06c:	b480      	push	{r7}
 800a06e:	b085      	sub	sp, #20
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
 800a074:	460b      	mov	r3, r1
 800a076:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a078:	2300      	movs	r3, #0
 800a07a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 800a07c:	78fb      	ldrb	r3, [r7, #3]
 800a07e:	2b15      	cmp	r3, #21
 800a080:	bf8c      	ite	hi
 800a082:	2201      	movhi	r2, #1
 800a084:	2200      	movls	r2, #0
 800a086:	b2d2      	uxtb	r2, r2
 800a088:	2a00      	cmp	r2, #0
 800a08a:	d10e      	bne.n	800a0aa <VL53L0X_SetDeviceMode+0x3e>
 800a08c:	2201      	movs	r2, #1
 800a08e:	409a      	lsls	r2, r3
 800a090:	4b0b      	ldr	r3, [pc, #44]	; (800a0c0 <VL53L0X_SetDeviceMode+0x54>)
 800a092:	4013      	ands	r3, r2
 800a094:	2b00      	cmp	r3, #0
 800a096:	bf14      	ite	ne
 800a098:	2301      	movne	r3, #1
 800a09a:	2300      	moveq	r3, #0
 800a09c:	b2db      	uxtb	r3, r3
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d003      	beq.n	800a0aa <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	78fa      	ldrb	r2, [r7, #3]
 800a0a6:	741a      	strb	r2, [r3, #16]
		break;
 800a0a8:	e001      	b.n	800a0ae <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800a0aa:	23f8      	movs	r3, #248	; 0xf8
 800a0ac:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a0ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3714      	adds	r7, #20
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0bc:	4770      	bx	lr
 800a0be:	bf00      	nop
 800a0c0:	0030000b 	.word	0x0030000b

0800a0c4 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b085      	sub	sp, #20
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
 800a0cc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	7c1a      	ldrb	r2, [r3, #16]
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800a0da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3714      	adds	r7, #20
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e8:	4770      	bx	lr

0800a0ea <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 800a0ea:	b580      	push	{r7, lr}
 800a0ec:	b084      	sub	sp, #16
 800a0ee:	af00      	add	r7, sp, #0
 800a0f0:	6078      	str	r0, [r7, #4]
 800a0f2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 800a0f8:	683a      	ldr	r2, [r7, #0]
 800a0fa:	2109      	movs	r1, #9
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f004 fb9d 	bl	800e83c <VL53L0X_RdByte>
 800a102:	4603      	mov	r3, r0
 800a104:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800a106:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d106      	bne.n	800a11c <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	781b      	ldrb	r3, [r3, #0]
 800a112:	f003 0301 	and.w	r3, r3, #1
 800a116:	b2da      	uxtb	r2, r3
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800a11c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a120:	4618      	mov	r0, r3
 800a122:	3710      	adds	r7, #16
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}

0800a128 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b084      	sub	sp, #16
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
 800a130:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a132:	2300      	movs	r3, #0
 800a134:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 800a136:	6839      	ldr	r1, [r7, #0]
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f003 fa56 	bl	800d5ea <VL53L0X_set_measurement_timing_budget_micro_seconds>
 800a13e:	4603      	mov	r3, r0
 800a140:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 800a142:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a146:	4618      	mov	r0, r3
 800a148:	3710      	adds	r7, #16
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}

0800a14e <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800a14e:	b580      	push	{r7, lr}
 800a150:	b084      	sub	sp, #16
 800a152:	af00      	add	r7, sp, #0
 800a154:	6078      	str	r0, [r7, #4]
 800a156:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a158:	2300      	movs	r3, #0
 800a15a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 800a15c:	6839      	ldr	r1, [r7, #0]
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f003 fb23 	bl	800d7aa <VL53L0X_get_measurement_timing_budget_micro_seconds>
 800a164:	4603      	mov	r3, r0
 800a166:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 800a168:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	3710      	adds	r7, #16
 800a170:	46bd      	mov	sp, r7
 800a172:	bd80      	pop	{r7, pc}

0800a174 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b084      	sub	sp, #16
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
 800a17c:	460b      	mov	r3, r1
 800a17e:	70fb      	strb	r3, [r7, #3]
 800a180:	4613      	mov	r3, r2
 800a182:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a184:	2300      	movs	r3, #0
 800a186:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 800a188:	78ba      	ldrb	r2, [r7, #2]
 800a18a:	78fb      	ldrb	r3, [r7, #3]
 800a18c:	4619      	mov	r1, r3
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f002 ff6b 	bl	800d06a <VL53L0X_set_vcsel_pulse_period>
 800a194:	4603      	mov	r3, r0
 800a196:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800a198:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	3710      	adds	r7, #16
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}

0800a1a4 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b086      	sub	sp, #24
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	60f8      	str	r0, [r7, #12]
 800a1ac:	460b      	mov	r3, r1
 800a1ae:	607a      	str	r2, [r7, #4]
 800a1b0:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800a1b6:	7afb      	ldrb	r3, [r7, #11]
 800a1b8:	687a      	ldr	r2, [r7, #4]
 800a1ba:	4619      	mov	r1, r3
 800a1bc:	68f8      	ldr	r0, [r7, #12]
 800a1be:	f003 f9dd 	bl	800d57c <VL53L0X_get_vcsel_pulse_period>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800a1c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	3718      	adds	r7, #24
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}
	...

0800a1d4 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b086      	sub	sp, #24
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
 800a1dc:	460b      	mov	r3, r1
 800a1de:	70fb      	strb	r3, [r7, #3]
 800a1e0:	4613      	mov	r3, r2
 800a1e2:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800a1f0:	f107 030f 	add.w	r3, r7, #15
 800a1f4:	461a      	mov	r2, r3
 800a1f6:	2101      	movs	r1, #1
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f004 fb1f 	bl	800e83c <VL53L0X_RdByte>
 800a1fe:	4603      	mov	r3, r0
 800a200:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 800a202:	7bfb      	ldrb	r3, [r7, #15]
 800a204:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 800a206:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d15a      	bne.n	800a2c4 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 800a20e:	78bb      	ldrb	r3, [r7, #2]
 800a210:	2b01      	cmp	r3, #1
 800a212:	d12b      	bne.n	800a26c <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 800a214:	78fb      	ldrb	r3, [r7, #3]
 800a216:	2b04      	cmp	r3, #4
 800a218:	d825      	bhi.n	800a266 <VL53L0X_SetSequenceStepEnable+0x92>
 800a21a:	a201      	add	r2, pc, #4	; (adr r2, 800a220 <VL53L0X_SetSequenceStepEnable+0x4c>)
 800a21c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a220:	0800a235 	.word	0x0800a235
 800a224:	0800a23f 	.word	0x0800a23f
 800a228:	0800a249 	.word	0x0800a249
 800a22c:	0800a253 	.word	0x0800a253
 800a230:	0800a25d 	.word	0x0800a25d
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 800a234:	7dbb      	ldrb	r3, [r7, #22]
 800a236:	f043 0310 	orr.w	r3, r3, #16
 800a23a:	75bb      	strb	r3, [r7, #22]
				break;
 800a23c:	e043      	b.n	800a2c6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 800a23e:	7dbb      	ldrb	r3, [r7, #22]
 800a240:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800a244:	75bb      	strb	r3, [r7, #22]
				break;
 800a246:	e03e      	b.n	800a2c6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 800a248:	7dbb      	ldrb	r3, [r7, #22]
 800a24a:	f043 0304 	orr.w	r3, r3, #4
 800a24e:	75bb      	strb	r3, [r7, #22]
				break;
 800a250:	e039      	b.n	800a2c6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 800a252:	7dbb      	ldrb	r3, [r7, #22]
 800a254:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a258:	75bb      	strb	r3, [r7, #22]
				break;
 800a25a:	e034      	b.n	800a2c6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 800a25c:	7dbb      	ldrb	r3, [r7, #22]
 800a25e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a262:	75bb      	strb	r3, [r7, #22]
				break;
 800a264:	e02f      	b.n	800a2c6 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a266:	23fc      	movs	r3, #252	; 0xfc
 800a268:	75fb      	strb	r3, [r7, #23]
 800a26a:	e02c      	b.n	800a2c6 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 800a26c:	78fb      	ldrb	r3, [r7, #3]
 800a26e:	2b04      	cmp	r3, #4
 800a270:	d825      	bhi.n	800a2be <VL53L0X_SetSequenceStepEnable+0xea>
 800a272:	a201      	add	r2, pc, #4	; (adr r2, 800a278 <VL53L0X_SetSequenceStepEnable+0xa4>)
 800a274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a278:	0800a28d 	.word	0x0800a28d
 800a27c:	0800a297 	.word	0x0800a297
 800a280:	0800a2a1 	.word	0x0800a2a1
 800a284:	0800a2ab 	.word	0x0800a2ab
 800a288:	0800a2b5 	.word	0x0800a2b5
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 800a28c:	7dbb      	ldrb	r3, [r7, #22]
 800a28e:	f023 0310 	bic.w	r3, r3, #16
 800a292:	75bb      	strb	r3, [r7, #22]
				break;
 800a294:	e017      	b.n	800a2c6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 800a296:	7dbb      	ldrb	r3, [r7, #22]
 800a298:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800a29c:	75bb      	strb	r3, [r7, #22]
				break;
 800a29e:	e012      	b.n	800a2c6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 800a2a0:	7dbb      	ldrb	r3, [r7, #22]
 800a2a2:	f023 0304 	bic.w	r3, r3, #4
 800a2a6:	75bb      	strb	r3, [r7, #22]
				break;
 800a2a8:	e00d      	b.n	800a2c6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 800a2aa:	7dbb      	ldrb	r3, [r7, #22]
 800a2ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2b0:	75bb      	strb	r3, [r7, #22]
				break;
 800a2b2:	e008      	b.n	800a2c6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 800a2b4:	7dbb      	ldrb	r3, [r7, #22]
 800a2b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2ba:	75bb      	strb	r3, [r7, #22]
				break;
 800a2bc:	e003      	b.n	800a2c6 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a2be:	23fc      	movs	r3, #252	; 0xfc
 800a2c0:	75fb      	strb	r3, [r7, #23]
 800a2c2:	e000      	b.n	800a2c6 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 800a2c4:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 800a2c6:	7bfb      	ldrb	r3, [r7, #15]
 800a2c8:	7dba      	ldrb	r2, [r7, #22]
 800a2ca:	429a      	cmp	r2, r3
 800a2cc:	d01e      	beq.n	800a30c <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 800a2ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d107      	bne.n	800a2e6 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 800a2d6:	7dbb      	ldrb	r3, [r7, #22]
 800a2d8:	461a      	mov	r2, r3
 800a2da:	2101      	movs	r1, #1
 800a2dc:	6878      	ldr	r0, [r7, #4]
 800a2de:	f004 fa2b 	bl	800e738 <VL53L0X_WrByte>
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 800a2e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d103      	bne.n	800a2f6 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	7dba      	ldrb	r2, [r7, #22]
 800a2f2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 800a2f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d106      	bne.n	800a30c <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	695b      	ldr	r3, [r3, #20]
 800a302:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800a304:	6939      	ldr	r1, [r7, #16]
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f7ff ff0e 	bl	800a128 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800a30c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a310:	4618      	mov	r0, r3
 800a312:	3718      	adds	r7, #24
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}

0800a318 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 800a318:	b480      	push	{r7}
 800a31a:	b087      	sub	sp, #28
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	60f8      	str	r0, [r7, #12]
 800a320:	607b      	str	r3, [r7, #4]
 800a322:	460b      	mov	r3, r1
 800a324:	72fb      	strb	r3, [r7, #11]
 800a326:	4613      	mov	r3, r2
 800a328:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a32a:	2300      	movs	r3, #0
 800a32c:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2200      	movs	r2, #0
 800a332:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 800a334:	7afb      	ldrb	r3, [r7, #11]
 800a336:	2b04      	cmp	r3, #4
 800a338:	d836      	bhi.n	800a3a8 <sequence_step_enabled+0x90>
 800a33a:	a201      	add	r2, pc, #4	; (adr r2, 800a340 <sequence_step_enabled+0x28>)
 800a33c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a340:	0800a355 	.word	0x0800a355
 800a344:	0800a367 	.word	0x0800a367
 800a348:	0800a379 	.word	0x0800a379
 800a34c:	0800a38b 	.word	0x0800a38b
 800a350:	0800a39d 	.word	0x0800a39d
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 800a354:	7abb      	ldrb	r3, [r7, #10]
 800a356:	111b      	asrs	r3, r3, #4
 800a358:	b2db      	uxtb	r3, r3
 800a35a:	f003 0301 	and.w	r3, r3, #1
 800a35e:	b2da      	uxtb	r2, r3
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	701a      	strb	r2, [r3, #0]
		break;
 800a364:	e022      	b.n	800a3ac <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 800a366:	7abb      	ldrb	r3, [r7, #10]
 800a368:	10db      	asrs	r3, r3, #3
 800a36a:	b2db      	uxtb	r3, r3
 800a36c:	f003 0301 	and.w	r3, r3, #1
 800a370:	b2da      	uxtb	r2, r3
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	701a      	strb	r2, [r3, #0]
		break;
 800a376:	e019      	b.n	800a3ac <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 800a378:	7abb      	ldrb	r3, [r7, #10]
 800a37a:	109b      	asrs	r3, r3, #2
 800a37c:	b2db      	uxtb	r3, r3
 800a37e:	f003 0301 	and.w	r3, r3, #1
 800a382:	b2da      	uxtb	r2, r3
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	701a      	strb	r2, [r3, #0]
		break;
 800a388:	e010      	b.n	800a3ac <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800a38a:	7abb      	ldrb	r3, [r7, #10]
 800a38c:	119b      	asrs	r3, r3, #6
 800a38e:	b2db      	uxtb	r3, r3
 800a390:	f003 0301 	and.w	r3, r3, #1
 800a394:	b2da      	uxtb	r2, r3
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	701a      	strb	r2, [r3, #0]
		break;
 800a39a:	e007      	b.n	800a3ac <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 800a39c:	7abb      	ldrb	r3, [r7, #10]
 800a39e:	09db      	lsrs	r3, r3, #7
 800a3a0:	b2da      	uxtb	r2, r3
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	701a      	strb	r2, [r3, #0]
		break;
 800a3a6:	e001      	b.n	800a3ac <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a3a8:	23fc      	movs	r3, #252	; 0xfc
 800a3aa:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a3ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	371c      	adds	r7, #28
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr

0800a3bc <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b084      	sub	sp, #16
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
 800a3c4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800a3ce:	f107 030e 	add.w	r3, r7, #14
 800a3d2:	461a      	mov	r2, r3
 800a3d4:	2101      	movs	r1, #1
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f004 fa30 	bl	800e83c <VL53L0X_RdByte>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 800a3e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d107      	bne.n	800a3f8 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 800a3e8:	7bba      	ldrb	r2, [r7, #14]
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	2100      	movs	r1, #0
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f7ff ff92 	bl	800a318 <sequence_step_enabled>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800a3f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d108      	bne.n	800a412 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 800a400:	7bba      	ldrb	r2, [r7, #14]
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	3302      	adds	r3, #2
 800a406:	2101      	movs	r1, #1
 800a408:	6878      	ldr	r0, [r7, #4]
 800a40a:	f7ff ff85 	bl	800a318 <sequence_step_enabled>
 800a40e:	4603      	mov	r3, r0
 800a410:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800a412:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d108      	bne.n	800a42c <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 800a41a:	7bba      	ldrb	r2, [r7, #14]
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	3301      	adds	r3, #1
 800a420:	2102      	movs	r1, #2
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f7ff ff78 	bl	800a318 <sequence_step_enabled>
 800a428:	4603      	mov	r3, r0
 800a42a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800a42c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d108      	bne.n	800a446 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 800a434:	7bba      	ldrb	r2, [r7, #14]
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	3303      	adds	r3, #3
 800a43a:	2103      	movs	r1, #3
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	f7ff ff6b 	bl	800a318 <sequence_step_enabled>
 800a442:	4603      	mov	r3, r0
 800a444:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800a446:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d108      	bne.n	800a460 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 800a44e:	7bba      	ldrb	r2, [r7, #14]
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	3304      	adds	r3, #4
 800a454:	2104      	movs	r1, #4
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f7ff ff5e 	bl	800a318 <sequence_step_enabled>
 800a45c:	4603      	mov	r3, r0
 800a45e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a460:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a464:	4618      	mov	r0, r3
 800a466:	3710      	adds	r7, #16
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}

0800a46c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b084      	sub	sp, #16
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
 800a474:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a476:	2300      	movs	r3, #0
 800a478:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800a47a:	f107 030c 	add.w	r3, r7, #12
 800a47e:	461a      	mov	r2, r3
 800a480:	21f8      	movs	r1, #248	; 0xf8
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f004 fa04 	bl	800e890 <VL53L0X_RdWord>
 800a488:	4603      	mov	r3, r0
 800a48a:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 800a48c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d108      	bne.n	800a4a6 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 800a494:	f107 0308 	add.w	r3, r7, #8
 800a498:	461a      	mov	r2, r3
 800a49a:	2104      	movs	r1, #4
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f004 fa2f 	bl	800e900 <VL53L0X_RdDWord>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a4a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d10c      	bne.n	800a4c8 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 800a4ae:	89bb      	ldrh	r3, [r7, #12]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d005      	beq.n	800a4c0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	89ba      	ldrh	r2, [r7, #12]
 800a4b8:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	681a      	ldr	r2, [r3, #0]
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a4c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	3710      	adds	r7, #16
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}

0800a4d4 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 800a4d4:	b480      	push	{r7}
 800a4d6:	b085      	sub	sp, #20
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
 800a4dc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	7f1b      	ldrb	r3, [r3, #28]
 800a4e6:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	7bba      	ldrb	r2, [r7, #14]
 800a4ec:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800a4ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3714      	adds	r7, #20
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fc:	4770      	bx	lr

0800a4fe <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 800a4fe:	b580      	push	{r7, lr}
 800a500:	b086      	sub	sp, #24
 800a502:	af00      	add	r7, sp, #0
 800a504:	6078      	str	r0, [r7, #4]
 800a506:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a508:	2300      	movs	r3, #0
 800a50a:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 800a50c:	f107 030e 	add.w	r3, r7, #14
 800a510:	461a      	mov	r2, r3
 800a512:	2120      	movs	r1, #32
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	f004 f9bb 	bl	800e890 <VL53L0X_RdWord>
 800a51a:	4603      	mov	r3, r0
 800a51c:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 800a51e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d118      	bne.n	800a558 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 800a526:	89fb      	ldrh	r3, [r7, #14]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d109      	bne.n	800a540 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6a1b      	ldr	r3, [r3, #32]
 800a530:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	693a      	ldr	r2, [r7, #16]
 800a536:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2200      	movs	r2, #0
 800a53c:	771a      	strb	r2, [r3, #28]
 800a53e:	e00b      	b.n	800a558 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 800a540:	89fb      	ldrh	r3, [r7, #14]
 800a542:	00db      	lsls	r3, r3, #3
 800a544:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	693a      	ldr	r2, [r7, #16]
 800a54a:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	693a      	ldr	r2, [r7, #16]
 800a550:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2201      	movs	r2, #1
 800a556:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a558:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a55c:	4618      	mov	r0, r3
 800a55e:	3718      	adds	r7, #24
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}

0800a564 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b086      	sub	sp, #24
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
 800a56c:	460b      	mov	r3, r1
 800a56e:	807b      	strh	r3, [r7, #2]
 800a570:	4613      	mov	r3, r2
 800a572:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a574:	2300      	movs	r3, #0
 800a576:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 800a578:	2300      	movs	r3, #0
 800a57a:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 800a57c:	2300      	movs	r3, #0
 800a57e:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 800a580:	2300      	movs	r3, #0
 800a582:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800a584:	887b      	ldrh	r3, [r7, #2]
 800a586:	2b05      	cmp	r3, #5
 800a588:	d902      	bls.n	800a590 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a58a:	23fc      	movs	r3, #252	; 0xfc
 800a58c:	75fb      	strb	r3, [r7, #23]
 800a58e:	e05b      	b.n	800a648 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 800a590:	787b      	ldrb	r3, [r7, #1]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d106      	bne.n	800a5a4 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 800a596:	2300      	movs	r3, #0
 800a598:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 800a59a:	2300      	movs	r3, #0
 800a59c:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 800a59e:	2301      	movs	r3, #1
 800a5a0:	73bb      	strb	r3, [r7, #14]
 800a5a2:	e00a      	b.n	800a5ba <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800a5a4:	887b      	ldrh	r3, [r7, #2]
 800a5a6:	687a      	ldr	r2, [r7, #4]
 800a5a8:	330c      	adds	r3, #12
 800a5aa:	009b      	lsls	r3, r3, #2
 800a5ac:	4413      	add	r3, r2
 800a5ae:	685b      	ldr	r3, [r3, #4]
 800a5b0:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 800a5ba:	887b      	ldrh	r3, [r7, #2]
 800a5bc:	2b05      	cmp	r3, #5
 800a5be:	d841      	bhi.n	800a644 <VL53L0X_SetLimitCheckEnable+0xe0>
 800a5c0:	a201      	add	r2, pc, #4	; (adr r2, 800a5c8 <VL53L0X_SetLimitCheckEnable+0x64>)
 800a5c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5c6:	bf00      	nop
 800a5c8:	0800a5e1 	.word	0x0800a5e1
 800a5cc:	0800a5eb 	.word	0x0800a5eb
 800a5d0:	0800a601 	.word	0x0800a601
 800a5d4:	0800a60b 	.word	0x0800a60b
 800a5d8:	0800a615 	.word	0x0800a615
 800a5dc:	0800a62d 	.word	0x0800a62d

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	7bfa      	ldrb	r2, [r7, #15]
 800a5e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 800a5e8:	e02e      	b.n	800a648 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 800a5ea:	693b      	ldr	r3, [r7, #16]
 800a5ec:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800a5ee:	b29b      	uxth	r3, r3
 800a5f0:	461a      	mov	r2, r3
 800a5f2:	2144      	movs	r1, #68	; 0x44
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f004 f8c3 	bl	800e780 <VL53L0X_WrWord>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	75fb      	strb	r3, [r7, #23]

			break;
 800a5fe:	e023      	b.n	800a648 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	7bfa      	ldrb	r2, [r7, #15]
 800a604:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 800a608:	e01e      	b.n	800a648 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	7bfa      	ldrb	r2, [r7, #15]
 800a60e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 800a612:	e019      	b.n	800a648 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 800a614:	7bbb      	ldrb	r3, [r7, #14]
 800a616:	005b      	lsls	r3, r3, #1
 800a618:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800a61a:	7b7b      	ldrb	r3, [r7, #13]
 800a61c:	22fe      	movs	r2, #254	; 0xfe
 800a61e:	2160      	movs	r1, #96	; 0x60
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f004 f8d7 	bl	800e7d4 <VL53L0X_UpdateByte>
 800a626:	4603      	mov	r3, r0
 800a628:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 800a62a:	e00d      	b.n	800a648 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 800a62c:	7bbb      	ldrb	r3, [r7, #14]
 800a62e:	011b      	lsls	r3, r3, #4
 800a630:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800a632:	7b7b      	ldrb	r3, [r7, #13]
 800a634:	22ef      	movs	r2, #239	; 0xef
 800a636:	2160      	movs	r1, #96	; 0x60
 800a638:	6878      	ldr	r0, [r7, #4]
 800a63a:	f004 f8cb 	bl	800e7d4 <VL53L0X_UpdateByte>
 800a63e:	4603      	mov	r3, r0
 800a640:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 800a642:	e001      	b.n	800a648 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a644:	23fc      	movs	r3, #252	; 0xfc
 800a646:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a648:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d10f      	bne.n	800a670 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 800a650:	787b      	ldrb	r3, [r7, #1]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d106      	bne.n	800a664 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800a656:	887b      	ldrh	r3, [r7, #2]
 800a658:	687a      	ldr	r2, [r7, #4]
 800a65a:	4413      	add	r3, r2
 800a65c:	2200      	movs	r2, #0
 800a65e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800a662:	e005      	b.n	800a670 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800a664:	887b      	ldrh	r3, [r7, #2]
 800a666:	687a      	ldr	r2, [r7, #4]
 800a668:	4413      	add	r3, r2
 800a66a:	2201      	movs	r2, #1
 800a66c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a670:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a674:	4618      	mov	r0, r3
 800a676:	3718      	adds	r7, #24
 800a678:	46bd      	mov	sp, r7
 800a67a:	bd80      	pop	{r7, pc}

0800a67c <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800a67c:	b480      	push	{r7}
 800a67e:	b087      	sub	sp, #28
 800a680:	af00      	add	r7, sp, #0
 800a682:	60f8      	str	r0, [r7, #12]
 800a684:	460b      	mov	r3, r1
 800a686:	607a      	str	r2, [r7, #4]
 800a688:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a68a:	2300      	movs	r3, #0
 800a68c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800a68e:	897b      	ldrh	r3, [r7, #10]
 800a690:	2b05      	cmp	r3, #5
 800a692:	d905      	bls.n	800a6a0 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a694:	23fc      	movs	r3, #252	; 0xfc
 800a696:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2200      	movs	r2, #0
 800a69c:	701a      	strb	r2, [r3, #0]
 800a69e:	e008      	b.n	800a6b2 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800a6a0:	897b      	ldrh	r3, [r7, #10]
 800a6a2:	68fa      	ldr	r2, [r7, #12]
 800a6a4:	4413      	add	r3, r2
 800a6a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a6aa:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	7dba      	ldrb	r2, [r7, #22]
 800a6b0:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a6b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	371c      	adds	r7, #28
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c0:	4770      	bx	lr
	...

0800a6c4 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b086      	sub	sp, #24
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	60f8      	str	r0, [r7, #12]
 800a6cc:	460b      	mov	r3, r1
 800a6ce:	607a      	str	r2, [r7, #4]
 800a6d0:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 800a6d6:	897b      	ldrh	r3, [r7, #10]
 800a6d8:	68fa      	ldr	r2, [r7, #12]
 800a6da:	4413      	add	r3, r2
 800a6dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a6e0:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 800a6e2:	7dbb      	ldrb	r3, [r7, #22]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d107      	bne.n	800a6f8 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800a6e8:	897b      	ldrh	r3, [r7, #10]
 800a6ea:	68fa      	ldr	r2, [r7, #12]
 800a6ec:	330c      	adds	r3, #12
 800a6ee:	009b      	lsls	r3, r3, #2
 800a6f0:	4413      	add	r3, r2
 800a6f2:	687a      	ldr	r2, [r7, #4]
 800a6f4:	605a      	str	r2, [r3, #4]
 800a6f6:	e040      	b.n	800a77a <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 800a6f8:	897b      	ldrh	r3, [r7, #10]
 800a6fa:	2b05      	cmp	r3, #5
 800a6fc:	d830      	bhi.n	800a760 <VL53L0X_SetLimitCheckValue+0x9c>
 800a6fe:	a201      	add	r2, pc, #4	; (adr r2, 800a704 <VL53L0X_SetLimitCheckValue+0x40>)
 800a700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a704:	0800a71d 	.word	0x0800a71d
 800a708:	0800a725 	.word	0x0800a725
 800a70c:	0800a73b 	.word	0x0800a73b
 800a710:	0800a743 	.word	0x0800a743
 800a714:	0800a74b 	.word	0x0800a74b
 800a718:	0800a74b 	.word	0x0800a74b

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	687a      	ldr	r2, [r7, #4]
 800a720:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 800a722:	e01f      	b.n	800a764 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800a728:	b29b      	uxth	r3, r3
 800a72a:	461a      	mov	r2, r3
 800a72c:	2144      	movs	r1, #68	; 0x44
 800a72e:	68f8      	ldr	r0, [r7, #12]
 800a730:	f004 f826 	bl	800e780 <VL53L0X_WrWord>
 800a734:	4603      	mov	r3, r0
 800a736:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800a738:	e014      	b.n	800a764 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	687a      	ldr	r2, [r7, #4]
 800a73e:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 800a740:	e010      	b.n	800a764 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	687a      	ldr	r2, [r7, #4]
 800a746:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 800a748:	e00c      	b.n	800a764 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800a74e:	b29b      	uxth	r3, r3
 800a750:	461a      	mov	r2, r3
 800a752:	2164      	movs	r1, #100	; 0x64
 800a754:	68f8      	ldr	r0, [r7, #12]
 800a756:	f004 f813 	bl	800e780 <VL53L0X_WrWord>
 800a75a:	4603      	mov	r3, r0
 800a75c:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800a75e:	e001      	b.n	800a764 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a760:	23fc      	movs	r3, #252	; 0xfc
 800a762:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 800a764:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d106      	bne.n	800a77a <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800a76c:	897b      	ldrh	r3, [r7, #10]
 800a76e:	68fa      	ldr	r2, [r7, #12]
 800a770:	330c      	adds	r3, #12
 800a772:	009b      	lsls	r3, r3, #2
 800a774:	4413      	add	r3, r2
 800a776:	687a      	ldr	r2, [r7, #4]
 800a778:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a77a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a77e:	4618      	mov	r0, r3
 800a780:	3718      	adds	r7, #24
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}
 800a786:	bf00      	nop

0800a788 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b088      	sub	sp, #32
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	60f8      	str	r0, [r7, #12]
 800a790:	460b      	mov	r3, r1
 800a792:	607a      	str	r2, [r7, #4]
 800a794:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a796:	2300      	movs	r3, #0
 800a798:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 800a79a:	2300      	movs	r3, #0
 800a79c:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800a79e:	897b      	ldrh	r3, [r7, #10]
 800a7a0:	2b05      	cmp	r3, #5
 800a7a2:	d847      	bhi.n	800a834 <VL53L0X_GetLimitCheckValue+0xac>
 800a7a4:	a201      	add	r2, pc, #4	; (adr r2, 800a7ac <VL53L0X_GetLimitCheckValue+0x24>)
 800a7a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7aa:	bf00      	nop
 800a7ac:	0800a7c5 	.word	0x0800a7c5
 800a7b0:	0800a7d1 	.word	0x0800a7d1
 800a7b4:	0800a7f7 	.word	0x0800a7f7
 800a7b8:	0800a803 	.word	0x0800a803
 800a7bc:	0800a80f 	.word	0x0800a80f
 800a7c0:	0800a80f 	.word	0x0800a80f

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7c8:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	77bb      	strb	r3, [r7, #30]
		break;
 800a7ce:	e033      	b.n	800a838 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800a7d0:	f107 0316 	add.w	r3, r7, #22
 800a7d4:	461a      	mov	r2, r3
 800a7d6:	2144      	movs	r1, #68	; 0x44
 800a7d8:	68f8      	ldr	r0, [r7, #12]
 800a7da:	f004 f859 	bl	800e890 <VL53L0X_RdWord>
 800a7de:	4603      	mov	r3, r0
 800a7e0:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800a7e2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d102      	bne.n	800a7f0 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800a7ea:	8afb      	ldrh	r3, [r7, #22]
 800a7ec:	025b      	lsls	r3, r3, #9
 800a7ee:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	77bb      	strb	r3, [r7, #30]
		break;
 800a7f4:	e020      	b.n	800a838 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7fa:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	77bb      	strb	r3, [r7, #30]
		break;
 800a800:	e01a      	b.n	800a838 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a806:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 800a808:	2300      	movs	r3, #0
 800a80a:	77bb      	strb	r3, [r7, #30]
		break;
 800a80c:	e014      	b.n	800a838 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800a80e:	f107 0316 	add.w	r3, r7, #22
 800a812:	461a      	mov	r2, r3
 800a814:	2164      	movs	r1, #100	; 0x64
 800a816:	68f8      	ldr	r0, [r7, #12]
 800a818:	f004 f83a 	bl	800e890 <VL53L0X_RdWord>
 800a81c:	4603      	mov	r3, r0
 800a81e:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800a820:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d102      	bne.n	800a82e <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800a828:	8afb      	ldrh	r3, [r7, #22]
 800a82a:	025b      	lsls	r3, r3, #9
 800a82c:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 800a82e:	2300      	movs	r3, #0
 800a830:	77bb      	strb	r3, [r7, #30]
		break;
 800a832:	e001      	b.n	800a838 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a834:	23fc      	movs	r3, #252	; 0xfc
 800a836:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a838:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d12a      	bne.n	800a896 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 800a840:	7fbb      	ldrb	r3, [r7, #30]
 800a842:	2b01      	cmp	r3, #1
 800a844:	d124      	bne.n	800a890 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 800a846:	69bb      	ldr	r3, [r7, #24]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d110      	bne.n	800a86e <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 800a84c:	897b      	ldrh	r3, [r7, #10]
 800a84e:	68fa      	ldr	r2, [r7, #12]
 800a850:	330c      	adds	r3, #12
 800a852:	009b      	lsls	r3, r3, #2
 800a854:	4413      	add	r3, r2
 800a856:	685b      	ldr	r3, [r3, #4]
 800a858:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	69ba      	ldr	r2, [r7, #24]
 800a85e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800a860:	897b      	ldrh	r3, [r7, #10]
 800a862:	68fa      	ldr	r2, [r7, #12]
 800a864:	4413      	add	r3, r2
 800a866:	2200      	movs	r2, #0
 800a868:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800a86c:	e013      	b.n	800a896 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	69ba      	ldr	r2, [r7, #24]
 800a872:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800a874:	897b      	ldrh	r3, [r7, #10]
 800a876:	68fa      	ldr	r2, [r7, #12]
 800a878:	330c      	adds	r3, #12
 800a87a:	009b      	lsls	r3, r3, #2
 800a87c:	4413      	add	r3, r2
 800a87e:	69ba      	ldr	r2, [r7, #24]
 800a880:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800a882:	897b      	ldrh	r3, [r7, #10]
 800a884:	68fa      	ldr	r2, [r7, #12]
 800a886:	4413      	add	r3, r2
 800a888:	2201      	movs	r2, #1
 800a88a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800a88e:	e002      	b.n	800a896 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	69ba      	ldr	r2, [r7, #24]
 800a894:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a896:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3720      	adds	r7, #32
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}
 800a8a2:	bf00      	nop

0800a8a4 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b084      	sub	sp, #16
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
 800a8ac:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 800a8b2:	f107 030e 	add.w	r3, r7, #14
 800a8b6:	461a      	mov	r2, r3
 800a8b8:	2101      	movs	r1, #1
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f003 ffbe 	bl	800e83c <VL53L0X_RdByte>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 800a8c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d10e      	bne.n	800a8ea <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 800a8cc:	7bba      	ldrb	r2, [r7, #14]
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 800a8d4:	7bbb      	ldrb	r3, [r7, #14]
 800a8d6:	b25b      	sxtb	r3, r3
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	da03      	bge.n	800a8e4 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	2201      	movs	r2, #1
 800a8e0:	701a      	strb	r2, [r3, #0]
 800a8e2:	e002      	b.n	800a8ea <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800a8ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d104      	bne.n	800a8fc <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	781a      	ldrb	r2, [r3, #0]
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a8fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a900:	4618      	mov	r0, r3
 800a902:	3710      	adds	r7, #16
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}

0800a908 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b084      	sub	sp, #16
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a910:	2300      	movs	r3, #0
 800a912:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800a914:	f107 030e 	add.w	r3, r7, #14
 800a918:	4619      	mov	r1, r3
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f7ff fbd2 	bl	800a0c4 <VL53L0X_GetDeviceMode>
 800a920:	4603      	mov	r3, r0
 800a922:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800a924:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d107      	bne.n	800a93c <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800a92c:	7bbb      	ldrb	r3, [r7, #14]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d104      	bne.n	800a93c <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f000 f898 	bl	800aa68 <VL53L0X_StartMeasurement>
 800a938:	4603      	mov	r3, r0
 800a93a:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800a93c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d104      	bne.n	800a94e <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800a944:	6878      	ldr	r0, [r7, #4]
 800a946:	f001 fb6f 	bl	800c028 <VL53L0X_measurement_poll_for_completion>
 800a94a:	4603      	mov	r3, r0
 800a94c:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800a94e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d106      	bne.n	800a964 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800a956:	7bbb      	ldrb	r3, [r7, #14]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d103      	bne.n	800a964 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2203      	movs	r2, #3
 800a960:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 800a964:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a968:	4618      	mov	r0, r3
 800a96a:	3710      	adds	r7, #16
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bd80      	pop	{r7, pc}

0800a970 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b086      	sub	sp, #24
 800a974:	af00      	add	r7, sp, #0
 800a976:	60f8      	str	r0, [r7, #12]
 800a978:	60b9      	str	r1, [r7, #8]
 800a97a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a97c:	2300      	movs	r3, #0
 800a97e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 800a980:	2301      	movs	r3, #1
 800a982:	687a      	ldr	r2, [r7, #4]
 800a984:	68b9      	ldr	r1, [r7, #8]
 800a986:	68f8      	ldr	r0, [r7, #12]
 800a988:	f001 fb11 	bl	800bfae <VL53L0X_perform_ref_calibration>
 800a98c:	4603      	mov	r3, r0
 800a98e:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 800a990:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a994:	4618      	mov	r0, r3
 800a996:	3718      	adds	r7, #24
 800a998:	46bd      	mov	sp, r7
 800a99a:	bd80      	pop	{r7, pc}

0800a99c <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b086      	sub	sp, #24
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
 800a9a4:	460b      	mov	r3, r1
 800a9a6:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800a9b2:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 800a9b4:	7dbb      	ldrb	r3, [r7, #22]
 800a9b6:	2b01      	cmp	r3, #1
 800a9b8:	d005      	beq.n	800a9c6 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 800a9ba:	7dbb      	ldrb	r3, [r7, #22]
 800a9bc:	2b02      	cmp	r3, #2
 800a9be:	d002      	beq.n	800a9c6 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 800a9c0:	7dbb      	ldrb	r3, [r7, #22]
 800a9c2:	2b03      	cmp	r3, #3
 800a9c4:	d147      	bne.n	800aa56 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 800a9c6:	f107 030c 	add.w	r3, r7, #12
 800a9ca:	f107 0210 	add.w	r2, r7, #16
 800a9ce:	2101      	movs	r1, #1
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f000 fbc3 	bl	800b15c <VL53L0X_GetInterruptThresholds>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 800a9da:	693b      	ldr	r3, [r7, #16]
 800a9dc:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800a9e0:	d803      	bhi.n	800a9ea <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 800a9e2:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 800a9e4:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800a9e8:	d935      	bls.n	800aa56 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 800a9ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d131      	bne.n	800aa56 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 800a9f2:	78fb      	ldrb	r3, [r7, #3]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d006      	beq.n	800aa06 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 800a9f8:	491a      	ldr	r1, [pc, #104]	; (800aa64 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	f002 ff86 	bl	800d90c <VL53L0X_load_tuning_settings>
 800aa00:	4603      	mov	r3, r0
 800aa02:	75fb      	strb	r3, [r7, #23]
 800aa04:	e027      	b.n	800aa56 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800aa06:	2204      	movs	r2, #4
 800aa08:	21ff      	movs	r1, #255	; 0xff
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	f003 fe94 	bl	800e738 <VL53L0X_WrByte>
 800aa10:	4603      	mov	r3, r0
 800aa12:	461a      	mov	r2, r3
 800aa14:	7dfb      	ldrb	r3, [r7, #23]
 800aa16:	4313      	orrs	r3, r2
 800aa18:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	2170      	movs	r1, #112	; 0x70
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f003 fe8a 	bl	800e738 <VL53L0X_WrByte>
 800aa24:	4603      	mov	r3, r0
 800aa26:	461a      	mov	r2, r3
 800aa28:	7dfb      	ldrb	r3, [r7, #23]
 800aa2a:	4313      	orrs	r3, r2
 800aa2c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800aa2e:	2200      	movs	r2, #0
 800aa30:	21ff      	movs	r1, #255	; 0xff
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	f003 fe80 	bl	800e738 <VL53L0X_WrByte>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	461a      	mov	r2, r3
 800aa3c:	7dfb      	ldrb	r3, [r7, #23]
 800aa3e:	4313      	orrs	r3, r2
 800aa40:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800aa42:	2200      	movs	r2, #0
 800aa44:	2180      	movs	r1, #128	; 0x80
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	f003 fe76 	bl	800e738 <VL53L0X_WrByte>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	461a      	mov	r2, r3
 800aa50:	7dfb      	ldrb	r3, [r7, #23]
 800aa52:	4313      	orrs	r3, r2
 800aa54:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 800aa56:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	3718      	adds	r7, #24
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd80      	pop	{r7, pc}
 800aa62:	bf00      	nop
 800aa64:	20000100 	.word	0x20000100

0800aa68 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b086      	sub	sp, #24
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aa70:	2300      	movs	r3, #0
 800aa72:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 800aa74:	2301      	movs	r3, #1
 800aa76:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800aa78:	f107 030e 	add.w	r3, r7, #14
 800aa7c:	4619      	mov	r1, r3
 800aa7e:	6878      	ldr	r0, [r7, #4]
 800aa80:	f7ff fb20 	bl	800a0c4 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 800aa84:	2201      	movs	r2, #1
 800aa86:	2180      	movs	r1, #128	; 0x80
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	f003 fe55 	bl	800e738 <VL53L0X_WrByte>
 800aa8e:	4603      	mov	r3, r0
 800aa90:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800aa92:	2201      	movs	r2, #1
 800aa94:	21ff      	movs	r1, #255	; 0xff
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	f003 fe4e 	bl	800e738 <VL53L0X_WrByte>
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	2100      	movs	r1, #0
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f003 fe47 	bl	800e738 <VL53L0X_WrByte>
 800aaaa:	4603      	mov	r3, r0
 800aaac:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 800aab4:	461a      	mov	r2, r3
 800aab6:	2191      	movs	r1, #145	; 0x91
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f003 fe3d 	bl	800e738 <VL53L0X_WrByte>
 800aabe:	4603      	mov	r3, r0
 800aac0:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 800aac2:	2201      	movs	r2, #1
 800aac4:	2100      	movs	r1, #0
 800aac6:	6878      	ldr	r0, [r7, #4]
 800aac8:	f003 fe36 	bl	800e738 <VL53L0X_WrByte>
 800aacc:	4603      	mov	r3, r0
 800aace:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800aad0:	2200      	movs	r2, #0
 800aad2:	21ff      	movs	r1, #255	; 0xff
 800aad4:	6878      	ldr	r0, [r7, #4]
 800aad6:	f003 fe2f 	bl	800e738 <VL53L0X_WrByte>
 800aada:	4603      	mov	r3, r0
 800aadc:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 800aade:	2200      	movs	r2, #0
 800aae0:	2180      	movs	r1, #128	; 0x80
 800aae2:	6878      	ldr	r0, [r7, #4]
 800aae4:	f003 fe28 	bl	800e738 <VL53L0X_WrByte>
 800aae8:	4603      	mov	r3, r0
 800aaea:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 800aaec:	7bbb      	ldrb	r3, [r7, #14]
 800aaee:	2b03      	cmp	r3, #3
 800aaf0:	d054      	beq.n	800ab9c <VL53L0X_StartMeasurement+0x134>
 800aaf2:	2b03      	cmp	r3, #3
 800aaf4:	dc6c      	bgt.n	800abd0 <VL53L0X_StartMeasurement+0x168>
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d002      	beq.n	800ab00 <VL53L0X_StartMeasurement+0x98>
 800aafa:	2b01      	cmp	r3, #1
 800aafc:	d034      	beq.n	800ab68 <VL53L0X_StartMeasurement+0x100>
 800aafe:	e067      	b.n	800abd0 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 800ab00:	2201      	movs	r2, #1
 800ab02:	2100      	movs	r1, #0
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f003 fe17 	bl	800e738 <VL53L0X_WrByte>
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 800ab0e:	7bfb      	ldrb	r3, [r7, #15]
 800ab10:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 800ab12:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d15d      	bne.n	800abd6 <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 800ab1e:	693b      	ldr	r3, [r7, #16]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d008      	beq.n	800ab36 <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 800ab24:	f107 030d 	add.w	r3, r7, #13
 800ab28:	461a      	mov	r2, r3
 800ab2a:	2100      	movs	r1, #0
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f003 fe85 	bl	800e83c <VL53L0X_RdByte>
 800ab32:	4603      	mov	r3, r0
 800ab34:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 800ab36:	693b      	ldr	r3, [r7, #16]
 800ab38:	3301      	adds	r3, #1
 800ab3a:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 800ab3c:	7b7a      	ldrb	r2, [r7, #13]
 800ab3e:	7bfb      	ldrb	r3, [r7, #15]
 800ab40:	4013      	ands	r3, r2
 800ab42:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800ab44:	7bfa      	ldrb	r2, [r7, #15]
 800ab46:	429a      	cmp	r2, r3
 800ab48:	d107      	bne.n	800ab5a <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 800ab4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d103      	bne.n	800ab5a <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800ab52:	693b      	ldr	r3, [r7, #16]
 800ab54:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800ab58:	d3e1      	bcc.n	800ab1e <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800ab5a:	693b      	ldr	r3, [r7, #16]
 800ab5c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800ab60:	d339      	bcc.n	800abd6 <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 800ab62:	23f9      	movs	r3, #249	; 0xf9
 800ab64:	75fb      	strb	r3, [r7, #23]

		}

		break;
 800ab66:	e036      	b.n	800abd6 <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800ab68:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d105      	bne.n	800ab7c <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800ab70:	2101      	movs	r1, #1
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f7ff ff12 	bl	800a99c <VL53L0X_CheckAndLoadInterruptSettings>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800ab7c:	2202      	movs	r2, #2
 800ab7e:	2100      	movs	r1, #0
 800ab80:	6878      	ldr	r0, [r7, #4]
 800ab82:	f003 fdd9 	bl	800e738 <VL53L0X_WrByte>
 800ab86:	4603      	mov	r3, r0
 800ab88:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 800ab8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d123      	bne.n	800abda <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	2204      	movs	r2, #4
 800ab96:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800ab9a:	e01e      	b.n	800abda <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800ab9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d105      	bne.n	800abb0 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800aba4:	2101      	movs	r1, #1
 800aba6:	6878      	ldr	r0, [r7, #4]
 800aba8:	f7ff fef8 	bl	800a99c <VL53L0X_CheckAndLoadInterruptSettings>
 800abac:	4603      	mov	r3, r0
 800abae:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800abb0:	2204      	movs	r2, #4
 800abb2:	2100      	movs	r1, #0
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	f003 fdbf 	bl	800e738 <VL53L0X_WrByte>
 800abba:	4603      	mov	r3, r0
 800abbc:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 800abbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d10b      	bne.n	800abde <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	2204      	movs	r2, #4
 800abca:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800abce:	e006      	b.n	800abde <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800abd0:	23f8      	movs	r3, #248	; 0xf8
 800abd2:	75fb      	strb	r3, [r7, #23]
 800abd4:	e004      	b.n	800abe0 <VL53L0X_StartMeasurement+0x178>
		break;
 800abd6:	bf00      	nop
 800abd8:	e002      	b.n	800abe0 <VL53L0X_StartMeasurement+0x178>
		break;
 800abda:	bf00      	nop
 800abdc:	e000      	b.n	800abe0 <VL53L0X_StartMeasurement+0x178>
		break;
 800abde:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800abe0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800abe4:	4618      	mov	r0, r3
 800abe6:	3718      	adds	r7, #24
 800abe8:	46bd      	mov	sp, r7
 800abea:	bd80      	pop	{r7, pc}

0800abec <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b084      	sub	sp, #16
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
 800abf4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800abf6:	2300      	movs	r3, #0
 800abf8:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800ac00:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 800ac02:	7bbb      	ldrb	r3, [r7, #14]
 800ac04:	2b04      	cmp	r3, #4
 800ac06:	d112      	bne.n	800ac2e <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 800ac08:	f107 0308 	add.w	r3, r7, #8
 800ac0c:	4619      	mov	r1, r3
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f000 fb1a 	bl	800b248 <VL53L0X_GetInterruptMaskStatus>
 800ac14:	4603      	mov	r3, r0
 800ac16:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	2b04      	cmp	r3, #4
 800ac1c:	d103      	bne.n	800ac26 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	2201      	movs	r2, #1
 800ac22:	701a      	strb	r2, [r3, #0]
 800ac24:	e01c      	b.n	800ac60 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	2200      	movs	r2, #0
 800ac2a:	701a      	strb	r2, [r3, #0]
 800ac2c:	e018      	b.n	800ac60 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800ac2e:	f107 030d 	add.w	r3, r7, #13
 800ac32:	461a      	mov	r2, r3
 800ac34:	2114      	movs	r1, #20
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	f003 fe00 	bl	800e83c <VL53L0X_RdByte>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 800ac40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d10b      	bne.n	800ac60 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 800ac48:	7b7b      	ldrb	r3, [r7, #13]
 800ac4a:	f003 0301 	and.w	r3, r3, #1
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d003      	beq.n	800ac5a <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	2201      	movs	r2, #1
 800ac56:	701a      	strb	r2, [r3, #0]
 800ac58:	e002      	b.n	800ac60 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ac60:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ac64:	4618      	mov	r0, r3
 800ac66:	3710      	adds	r7, #16
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bd80      	pop	{r7, pc}

0800ac6c <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800ac6c:	b5b0      	push	{r4, r5, r7, lr}
 800ac6e:	b096      	sub	sp, #88	; 0x58
 800ac70:	af02      	add	r7, sp, #8
 800ac72:	6078      	str	r0, [r7, #4]
 800ac74:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ac76:	2300      	movs	r3, #0
 800ac78:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 800ac7c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ac80:	230c      	movs	r3, #12
 800ac82:	2114      	movs	r1, #20
 800ac84:	6878      	ldr	r0, [r7, #4]
 800ac86:	f003 fd2b 	bl	800e6e0 <VL53L0X_ReadMulti>
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 800ac90:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	f040 80d1 	bne.w	800ae3c <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	2200      	movs	r2, #0
 800aca4:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 800aca6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800acaa:	b29b      	uxth	r3, r3
 800acac:	021b      	lsls	r3, r3, #8
 800acae:	b29a      	uxth	r2, r3
 800acb0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800acb4:	b29b      	uxth	r3, r3
 800acb6:	4413      	add	r3, r2
 800acb8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	2200      	movs	r2, #0
 800acc0:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 800acc2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800acc6:	b29b      	uxth	r3, r3
 800acc8:	021b      	lsls	r3, r3, #8
 800acca:	b29a      	uxth	r2, r3
 800accc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800acd0:	b29b      	uxth	r3, r3
 800acd2:	4413      	add	r3, r2
 800acd4:	b29b      	uxth	r3, r3
 800acd6:	025b      	lsls	r3, r3, #9
 800acd8:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800acde:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 800ace0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800ace4:	b29b      	uxth	r3, r3
 800ace6:	021b      	lsls	r3, r3, #8
 800ace8:	b29a      	uxth	r2, r3
 800acea:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800acee:	b29b      	uxth	r3, r3
 800acf0:	4413      	add	r3, r2
 800acf2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 800acf6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800acfa:	025b      	lsls	r3, r3, #9
 800acfc:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 800ad02:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800ad06:	b29b      	uxth	r3, r3
 800ad08:	021b      	lsls	r3, r3, #8
 800ad0a:	b29a      	uxth	r2, r3
 800ad0c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ad10:	b29b      	uxth	r3, r3
 800ad12:	4413      	add	r3, r2
 800ad14:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800ad1e:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 800ad20:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ad24:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 800ad2e:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 800ad36:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 800ad3a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ad3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ad40:	d046      	beq.n	800add0 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800ad42:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ad44:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800ad48:	fb02 f303 	mul.w	r3, r2, r3
 800ad4c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800ad50:	4a57      	ldr	r2, [pc, #348]	; (800aeb0 <VL53L0X_GetRangingMeasurementData+0x244>)
 800ad52:	fb82 1203 	smull	r1, r2, r2, r3
 800ad56:	1192      	asrs	r2, r2, #6
 800ad58:	17db      	asrs	r3, r3, #31
 800ad5a:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 800ad5c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6a1b      	ldr	r3, [r3, #32]
 800ad64:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	7f1b      	ldrb	r3, [r3, #28]
 800ad6a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 800ad6e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d02c      	beq.n	800add0 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 800ad76:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ad78:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800ad7c:	fb02 f303 	mul.w	r3, r2, r3
 800ad80:	121a      	asrs	r2, r3, #8
					<= 0) {
 800ad82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 800ad84:	429a      	cmp	r2, r3
 800ad86:	d10d      	bne.n	800ada4 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 800ad88:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d004      	beq.n	800ad9a <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 800ad90:	f242 23b8 	movw	r3, #8888	; 0x22b8
 800ad94:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800ad98:	e016      	b.n	800adc8 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 800ad9a:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 800ad9e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800ada2:	e011      	b.n	800adc8 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 800ada4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800ada8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800adaa:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 800adae:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800adb0:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 800adb4:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 800adb8:	121b      	asrs	r3, r3, #8
 800adba:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 800adbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800adbe:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 800adc0:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 800adc4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 800adc8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800adcc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 800add0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800add4:	2b00      	cmp	r3, #0
 800add6:	d00d      	beq.n	800adf4 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 800add8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800addc:	089b      	lsrs	r3, r3, #2
 800adde:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 800ade4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800ade8:	b2db      	uxtb	r3, r3
 800adea:	019b      	lsls	r3, r3, #6
 800adec:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	75da      	strb	r2, [r3, #23]
 800adf2:	e006      	b.n	800ae02 <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800adfa:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	2200      	movs	r2, #0
 800ae00:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 800ae02:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800ae06:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800ae0a:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800ae0e:	9301      	str	r3, [sp, #4]
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	9300      	str	r3, [sp, #0]
 800ae14:	4613      	mov	r3, r2
 800ae16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	f003 fa15 	bl	800e248 <VL53L0X_get_pal_range_status>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	461a      	mov	r2, r3
 800ae22:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ae26:	4313      	orrs	r3, r2
 800ae28:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 800ae2c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d103      	bne.n	800ae3c <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 800ae34:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ae3c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d12f      	bne.n	800aea4 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	f107 040c 	add.w	r4, r7, #12
 800ae4a:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800ae4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ae50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ae52:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ae56:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 800ae5e:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 800ae60:	683b      	ldr	r3, [r7, #0]
 800ae62:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 800ae64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 800ae6c:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 800ae72:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 800ae78:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 800ae7e:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 800ae84:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 800ae8a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f103 0450 	add.w	r4, r3, #80	; 0x50
 800ae94:	f107 050c 	add.w	r5, r7, #12
 800ae98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ae9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ae9c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800aea0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800aea4:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	3750      	adds	r7, #80	; 0x50
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bdb0      	pop	{r4, r5, r7, pc}
 800aeb0:	10624dd3 	.word	0x10624dd3

0800aeb4 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b084      	sub	sp, #16
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
 800aebc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aebe:	2300      	movs	r3, #0
 800aec0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800aec2:	2100      	movs	r1, #0
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f7ff f8d1 	bl	800a06c <VL53L0X_SetDeviceMode>
 800aeca:	4603      	mov	r3, r0
 800aecc:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800aece:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d104      	bne.n	800aee0 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f7ff fd16 	bl	800a908 <VL53L0X_PerformSingleMeasurement>
 800aedc:	4603      	mov	r3, r0
 800aede:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800aee0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d105      	bne.n	800aef4 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 800aee8:	6839      	ldr	r1, [r7, #0]
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f7ff febe 	bl	800ac6c <VL53L0X_GetRangingMeasurementData>
 800aef0:	4603      	mov	r3, r0
 800aef2:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 800aef4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d105      	bne.n	800af08 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800aefc:	2100      	movs	r1, #0
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	f000 f962 	bl	800b1c8 <VL53L0X_ClearInterruptMask>
 800af04:	4603      	mov	r3, r0
 800af06:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 800af08:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800af0c:	4618      	mov	r0, r3
 800af0e:	3710      	adds	r7, #16
 800af10:	46bd      	mov	sp, r7
 800af12:	bd80      	pop	{r7, pc}

0800af14 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b084      	sub	sp, #16
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
 800af1c:	4608      	mov	r0, r1
 800af1e:	4611      	mov	r1, r2
 800af20:	461a      	mov	r2, r3
 800af22:	4603      	mov	r3, r0
 800af24:	70fb      	strb	r3, [r7, #3]
 800af26:	460b      	mov	r3, r1
 800af28:	70bb      	strb	r3, [r7, #2]
 800af2a:	4613      	mov	r3, r2
 800af2c:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800af2e:	2300      	movs	r3, #0
 800af30:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800af32:	78fb      	ldrb	r3, [r7, #3]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d002      	beq.n	800af3e <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 800af38:	23f6      	movs	r3, #246	; 0xf6
 800af3a:	73fb      	strb	r3, [r7, #15]
 800af3c:	e107      	b.n	800b14e <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800af3e:	78bb      	ldrb	r3, [r7, #2]
 800af40:	2b14      	cmp	r3, #20
 800af42:	d110      	bne.n	800af66 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800af44:	7e3b      	ldrb	r3, [r7, #24]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d102      	bne.n	800af50 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 800af4a:	2310      	movs	r3, #16
 800af4c:	73bb      	strb	r3, [r7, #14]
 800af4e:	e001      	b.n	800af54 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 800af50:	2301      	movs	r3, #1
 800af52:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 800af54:	7bbb      	ldrb	r3, [r7, #14]
 800af56:	461a      	mov	r2, r3
 800af58:	2184      	movs	r1, #132	; 0x84
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f003 fbec 	bl	800e738 <VL53L0X_WrByte>
 800af60:	4603      	mov	r3, r0
 800af62:	73fb      	strb	r3, [r7, #15]
 800af64:	e0f3      	b.n	800b14e <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 800af66:	78bb      	ldrb	r3, [r7, #2]
 800af68:	2b15      	cmp	r3, #21
 800af6a:	f040 8097 	bne.w	800b09c <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800af6e:	2201      	movs	r2, #1
 800af70:	21ff      	movs	r1, #255	; 0xff
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f003 fbe0 	bl	800e738 <VL53L0X_WrByte>
 800af78:	4603      	mov	r3, r0
 800af7a:	461a      	mov	r2, r3
 800af7c:	7bfb      	ldrb	r3, [r7, #15]
 800af7e:	4313      	orrs	r3, r2
 800af80:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800af82:	2200      	movs	r2, #0
 800af84:	2100      	movs	r1, #0
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f003 fbd6 	bl	800e738 <VL53L0X_WrByte>
 800af8c:	4603      	mov	r3, r0
 800af8e:	461a      	mov	r2, r3
 800af90:	7bfb      	ldrb	r3, [r7, #15]
 800af92:	4313      	orrs	r3, r2
 800af94:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800af96:	2200      	movs	r2, #0
 800af98:	21ff      	movs	r1, #255	; 0xff
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f003 fbcc 	bl	800e738 <VL53L0X_WrByte>
 800afa0:	4603      	mov	r3, r0
 800afa2:	461a      	mov	r2, r3
 800afa4:	7bfb      	ldrb	r3, [r7, #15]
 800afa6:	4313      	orrs	r3, r2
 800afa8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800afaa:	2201      	movs	r2, #1
 800afac:	2180      	movs	r1, #128	; 0x80
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	f003 fbc2 	bl	800e738 <VL53L0X_WrByte>
 800afb4:	4603      	mov	r3, r0
 800afb6:	461a      	mov	r2, r3
 800afb8:	7bfb      	ldrb	r3, [r7, #15]
 800afba:	4313      	orrs	r3, r2
 800afbc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 800afbe:	2202      	movs	r2, #2
 800afc0:	2185      	movs	r1, #133	; 0x85
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	f003 fbb8 	bl	800e738 <VL53L0X_WrByte>
 800afc8:	4603      	mov	r3, r0
 800afca:	461a      	mov	r2, r3
 800afcc:	7bfb      	ldrb	r3, [r7, #15]
 800afce:	4313      	orrs	r3, r2
 800afd0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800afd2:	2204      	movs	r2, #4
 800afd4:	21ff      	movs	r1, #255	; 0xff
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f003 fbae 	bl	800e738 <VL53L0X_WrByte>
 800afdc:	4603      	mov	r3, r0
 800afde:	461a      	mov	r2, r3
 800afe0:	7bfb      	ldrb	r3, [r7, #15]
 800afe2:	4313      	orrs	r3, r2
 800afe4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800afe6:	2200      	movs	r2, #0
 800afe8:	21cd      	movs	r1, #205	; 0xcd
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	f003 fba4 	bl	800e738 <VL53L0X_WrByte>
 800aff0:	4603      	mov	r3, r0
 800aff2:	461a      	mov	r2, r3
 800aff4:	7bfb      	ldrb	r3, [r7, #15]
 800aff6:	4313      	orrs	r3, r2
 800aff8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800affa:	2211      	movs	r2, #17
 800affc:	21cc      	movs	r1, #204	; 0xcc
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f003 fb9a 	bl	800e738 <VL53L0X_WrByte>
 800b004:	4603      	mov	r3, r0
 800b006:	461a      	mov	r2, r3
 800b008:	7bfb      	ldrb	r3, [r7, #15]
 800b00a:	4313      	orrs	r3, r2
 800b00c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800b00e:	2207      	movs	r2, #7
 800b010:	21ff      	movs	r1, #255	; 0xff
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f003 fb90 	bl	800e738 <VL53L0X_WrByte>
 800b018:	4603      	mov	r3, r0
 800b01a:	461a      	mov	r2, r3
 800b01c:	7bfb      	ldrb	r3, [r7, #15]
 800b01e:	4313      	orrs	r3, r2
 800b020:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800b022:	2200      	movs	r2, #0
 800b024:	21be      	movs	r1, #190	; 0xbe
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f003 fb86 	bl	800e738 <VL53L0X_WrByte>
 800b02c:	4603      	mov	r3, r0
 800b02e:	461a      	mov	r2, r3
 800b030:	7bfb      	ldrb	r3, [r7, #15]
 800b032:	4313      	orrs	r3, r2
 800b034:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800b036:	2206      	movs	r2, #6
 800b038:	21ff      	movs	r1, #255	; 0xff
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	f003 fb7c 	bl	800e738 <VL53L0X_WrByte>
 800b040:	4603      	mov	r3, r0
 800b042:	461a      	mov	r2, r3
 800b044:	7bfb      	ldrb	r3, [r7, #15]
 800b046:	4313      	orrs	r3, r2
 800b048:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800b04a:	2209      	movs	r2, #9
 800b04c:	21cc      	movs	r1, #204	; 0xcc
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	f003 fb72 	bl	800e738 <VL53L0X_WrByte>
 800b054:	4603      	mov	r3, r0
 800b056:	461a      	mov	r2, r3
 800b058:	7bfb      	ldrb	r3, [r7, #15]
 800b05a:	4313      	orrs	r3, r2
 800b05c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800b05e:	2200      	movs	r2, #0
 800b060:	21ff      	movs	r1, #255	; 0xff
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	f003 fb68 	bl	800e738 <VL53L0X_WrByte>
 800b068:	4603      	mov	r3, r0
 800b06a:	461a      	mov	r2, r3
 800b06c:	7bfb      	ldrb	r3, [r7, #15]
 800b06e:	4313      	orrs	r3, r2
 800b070:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800b072:	2201      	movs	r2, #1
 800b074:	21ff      	movs	r1, #255	; 0xff
 800b076:	6878      	ldr	r0, [r7, #4]
 800b078:	f003 fb5e 	bl	800e738 <VL53L0X_WrByte>
 800b07c:	4603      	mov	r3, r0
 800b07e:	461a      	mov	r2, r3
 800b080:	7bfb      	ldrb	r3, [r7, #15]
 800b082:	4313      	orrs	r3, r2
 800b084:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800b086:	2200      	movs	r2, #0
 800b088:	2100      	movs	r1, #0
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f003 fb54 	bl	800e738 <VL53L0X_WrByte>
 800b090:	4603      	mov	r3, r0
 800b092:	461a      	mov	r2, r3
 800b094:	7bfb      	ldrb	r3, [r7, #15]
 800b096:	4313      	orrs	r3, r2
 800b098:	73fb      	strb	r3, [r7, #15]
 800b09a:	e058      	b.n	800b14e <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 800b09c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d121      	bne.n	800b0e8 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 800b0a4:	787b      	ldrb	r3, [r7, #1]
 800b0a6:	2b04      	cmp	r3, #4
 800b0a8:	d81b      	bhi.n	800b0e2 <VL53L0X_SetGpioConfig+0x1ce>
 800b0aa:	a201      	add	r2, pc, #4	; (adr r2, 800b0b0 <VL53L0X_SetGpioConfig+0x19c>)
 800b0ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0b0:	0800b0c5 	.word	0x0800b0c5
 800b0b4:	0800b0cb 	.word	0x0800b0cb
 800b0b8:	0800b0d1 	.word	0x0800b0d1
 800b0bc:	0800b0d7 	.word	0x0800b0d7
 800b0c0:	0800b0dd 	.word	0x0800b0dd
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	73bb      	strb	r3, [r7, #14]
				break;
 800b0c8:	e00f      	b.n	800b0ea <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 800b0ca:	2301      	movs	r3, #1
 800b0cc:	73bb      	strb	r3, [r7, #14]
				break;
 800b0ce:	e00c      	b.n	800b0ea <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 800b0d0:	2302      	movs	r3, #2
 800b0d2:	73bb      	strb	r3, [r7, #14]
				break;
 800b0d4:	e009      	b.n	800b0ea <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 800b0d6:	2303      	movs	r3, #3
 800b0d8:	73bb      	strb	r3, [r7, #14]
				break;
 800b0da:	e006      	b.n	800b0ea <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 800b0dc:	2304      	movs	r3, #4
 800b0de:	73bb      	strb	r3, [r7, #14]
				break;
 800b0e0:	e003      	b.n	800b0ea <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 800b0e2:	23f5      	movs	r3, #245	; 0xf5
 800b0e4:	73fb      	strb	r3, [r7, #15]
 800b0e6:	e000      	b.n	800b0ea <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 800b0e8:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 800b0ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d107      	bne.n	800b102 <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 800b0f2:	7bbb      	ldrb	r3, [r7, #14]
 800b0f4:	461a      	mov	r2, r3
 800b0f6:	210a      	movs	r1, #10
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	f003 fb1d 	bl	800e738 <VL53L0X_WrByte>
 800b0fe:	4603      	mov	r3, r0
 800b100:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 800b102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d10f      	bne.n	800b12a <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800b10a:	7e3b      	ldrb	r3, [r7, #24]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d102      	bne.n	800b116 <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 800b110:	2300      	movs	r3, #0
 800b112:	73bb      	strb	r3, [r7, #14]
 800b114:	e001      	b.n	800b11a <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 800b116:	2310      	movs	r3, #16
 800b118:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 800b11a:	7bbb      	ldrb	r3, [r7, #14]
 800b11c:	22ef      	movs	r2, #239	; 0xef
 800b11e:	2184      	movs	r1, #132	; 0x84
 800b120:	6878      	ldr	r0, [r7, #4]
 800b122:	f003 fb57 	bl	800e7d4 <VL53L0X_UpdateByte>
 800b126:	4603      	mov	r3, r0
 800b128:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 800b12a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d103      	bne.n	800b13a <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	787a      	ldrb	r2, [r7, #1]
 800b136:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 800b13a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d105      	bne.n	800b14e <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800b142:	2100      	movs	r1, #0
 800b144:	6878      	ldr	r0, [r7, #4]
 800b146:	f000 f83f 	bl	800b1c8 <VL53L0X_ClearInterruptMask>
 800b14a:	4603      	mov	r3, r0
 800b14c:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b14e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b152:	4618      	mov	r0, r3
 800b154:	3710      	adds	r7, #16
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}
 800b15a:	bf00      	nop

0800b15c <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b086      	sub	sp, #24
 800b160:	af00      	add	r7, sp, #0
 800b162:	60f8      	str	r0, [r7, #12]
 800b164:	607a      	str	r2, [r7, #4]
 800b166:	603b      	str	r3, [r7, #0]
 800b168:	460b      	mov	r3, r1
 800b16a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b16c:	2300      	movs	r3, #0
 800b16e:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 800b170:	f107 0314 	add.w	r3, r7, #20
 800b174:	461a      	mov	r2, r3
 800b176:	210e      	movs	r1, #14
 800b178:	68f8      	ldr	r0, [r7, #12]
 800b17a:	f003 fb89 	bl	800e890 <VL53L0X_RdWord>
 800b17e:	4603      	mov	r3, r0
 800b180:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800b182:	8abb      	ldrh	r3, [r7, #20]
 800b184:	045b      	lsls	r3, r3, #17
 800b186:	461a      	mov	r2, r3
 800b188:	4b0e      	ldr	r3, [pc, #56]	; (800b1c4 <VL53L0X_GetInterruptThresholds+0x68>)
 800b18a:	4013      	ands	r3, r2
 800b18c:	687a      	ldr	r2, [r7, #4]
 800b18e:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800b190:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d10f      	bne.n	800b1b8 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 800b198:	f107 0314 	add.w	r3, r7, #20
 800b19c:	461a      	mov	r2, r3
 800b19e:	210c      	movs	r1, #12
 800b1a0:	68f8      	ldr	r0, [r7, #12]
 800b1a2:	f003 fb75 	bl	800e890 <VL53L0X_RdWord>
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800b1aa:	8abb      	ldrh	r3, [r7, #20]
 800b1ac:	045b      	lsls	r3, r3, #17
 800b1ae:	461a      	mov	r2, r3
 800b1b0:	4b04      	ldr	r3, [pc, #16]	; (800b1c4 <VL53L0X_GetInterruptThresholds+0x68>)
 800b1b2:	4013      	ands	r3, r2
		*pThresholdHigh =
 800b1b4:	683a      	ldr	r2, [r7, #0]
 800b1b6:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b1b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b1bc:	4618      	mov	r0, r3
 800b1be:	3718      	adds	r7, #24
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bd80      	pop	{r7, pc}
 800b1c4:	1ffe0000 	.word	0x1ffe0000

0800b1c8 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b084      	sub	sp, #16
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
 800b1d0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 800b1da:	2201      	movs	r2, #1
 800b1dc:	210b      	movs	r1, #11
 800b1de:	6878      	ldr	r0, [r7, #4]
 800b1e0:	f003 faaa 	bl	800e738 <VL53L0X_WrByte>
 800b1e4:	4603      	mov	r3, r0
 800b1e6:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	210b      	movs	r1, #11
 800b1ec:	6878      	ldr	r0, [r7, #4]
 800b1ee:	f003 faa3 	bl	800e738 <VL53L0X_WrByte>
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	461a      	mov	r2, r3
 800b1f6:	7bfb      	ldrb	r3, [r7, #15]
 800b1f8:	4313      	orrs	r3, r2
 800b1fa:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 800b1fc:	f107 030d 	add.w	r3, r7, #13
 800b200:	461a      	mov	r2, r3
 800b202:	2113      	movs	r1, #19
 800b204:	6878      	ldr	r0, [r7, #4]
 800b206:	f003 fb19 	bl	800e83c <VL53L0X_RdByte>
 800b20a:	4603      	mov	r3, r0
 800b20c:	461a      	mov	r2, r3
 800b20e:	7bfb      	ldrb	r3, [r7, #15]
 800b210:	4313      	orrs	r3, r2
 800b212:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 800b214:	7bbb      	ldrb	r3, [r7, #14]
 800b216:	3301      	adds	r3, #1
 800b218:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 800b21a:	7b7b      	ldrb	r3, [r7, #13]
 800b21c:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 800b220:	2b00      	cmp	r3, #0
 800b222:	d006      	beq.n	800b232 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 800b224:	7bbb      	ldrb	r3, [r7, #14]
 800b226:	2b02      	cmp	r3, #2
 800b228:	d803      	bhi.n	800b232 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 800b22a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d0d3      	beq.n	800b1da <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 800b232:	7bbb      	ldrb	r3, [r7, #14]
 800b234:	2b02      	cmp	r3, #2
 800b236:	d901      	bls.n	800b23c <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 800b238:	23f4      	movs	r3, #244	; 0xf4
 800b23a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800b23c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b240:	4618      	mov	r0, r3
 800b242:	3710      	adds	r7, #16
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}

0800b248 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b084      	sub	sp, #16
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
 800b250:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b252:	2300      	movs	r3, #0
 800b254:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800b256:	f107 030e 	add.w	r3, r7, #14
 800b25a:	461a      	mov	r2, r3
 800b25c:	2113      	movs	r1, #19
 800b25e:	6878      	ldr	r0, [r7, #4]
 800b260:	f003 faec 	bl	800e83c <VL53L0X_RdByte>
 800b264:	4603      	mov	r3, r0
 800b266:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 800b268:	7bbb      	ldrb	r3, [r7, #14]
 800b26a:	f003 0207 	and.w	r2, r3, #7
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800b272:	7bbb      	ldrb	r3, [r7, #14]
 800b274:	f003 0318 	and.w	r3, r3, #24
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d001      	beq.n	800b280 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 800b27c:	23fa      	movs	r3, #250	; 0xfa
 800b27e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800b280:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b284:	4618      	mov	r0, r3
 800b286:	3710      	adds	r7, #16
 800b288:	46bd      	mov	sp, r7
 800b28a:	bd80      	pop	{r7, pc}

0800b28c <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b086      	sub	sp, #24
 800b290:	af00      	add	r7, sp, #0
 800b292:	60f8      	str	r0, [r7, #12]
 800b294:	60b9      	str	r1, [r7, #8]
 800b296:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b298:	2300      	movs	r3, #0
 800b29a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 800b29c:	687a      	ldr	r2, [r7, #4]
 800b29e:	68b9      	ldr	r1, [r7, #8]
 800b2a0:	68f8      	ldr	r0, [r7, #12]
 800b2a2:	f000 fa33 	bl	800b70c <VL53L0X_perform_ref_spad_management>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 800b2aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	3718      	adds	r7, #24
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}

0800b2b6 <VL53L0X_PerformContinuousRangingMeasurement>:


VL53L0X_Error VL53L0X_PerformContinuousRangingMeasurement(VL53L0X_Dev_t *device, VL53L0X_RangingMeasurementData_t *ranging_data) {
 800b2b6:	b580      	push	{r7, lr}
 800b2b8:	b084      	sub	sp, #16
 800b2ba:	af00      	add	r7, sp, #0
 800b2bc:	6078      	str	r0, [r7, #4]
 800b2be:	6039      	str	r1, [r7, #0]
    VL53L0X_Error status;

    // Set the device to high accuracy mode
    status = VL53L0X_SetDeviceMode(device, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 800b2c0:	2101      	movs	r1, #1
 800b2c2:	6878      	ldr	r0, [r7, #4]
 800b2c4:	f7fe fed2 	bl	800a06c <VL53L0X_SetDeviceMode>
 800b2c8:	4603      	mov	r3, r0
 800b2ca:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 800b2cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d002      	beq.n	800b2da <VL53L0X_PerformContinuousRangingMeasurement+0x24>
        return status;
 800b2d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b2d8:	e019      	b.n	800b30e <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    // Start continuous ranging measurement
    status = VL53L0X_StartMeasurement(device);
 800b2da:	6878      	ldr	r0, [r7, #4]
 800b2dc:	f7ff fbc4 	bl	800aa68 <VL53L0X_StartMeasurement>
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 800b2e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d002      	beq.n	800b2f2 <VL53L0X_PerformContinuousRangingMeasurement+0x3c>
        return status;
 800b2ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b2f0:	e00d      	b.n	800b30e <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    // Get ranging measurement data
    status = VL53L0X_GetRangingMeasurementData(device, ranging_data);
 800b2f2:	6839      	ldr	r1, [r7, #0]
 800b2f4:	6878      	ldr	r0, [r7, #4]
 800b2f6:	f7ff fcb9 	bl	800ac6c <VL53L0X_GetRangingMeasurementData>
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 800b2fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d002      	beq.n	800b30c <VL53L0X_PerformContinuousRangingMeasurement+0x56>
        return status;
 800b306:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b30a:	e000      	b.n	800b30e <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    return VL53L0X_ERROR_NONE;
 800b30c:	2300      	movs	r3, #0
}
 800b30e:	4618      	mov	r0, r3
 800b310:	3710      	adds	r7, #16
 800b312:	46bd      	mov	sp, r7
 800b314:	bd80      	pop	{r7, pc}

0800b316 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 800b316:	b580      	push	{r7, lr}
 800b318:	b084      	sub	sp, #16
 800b31a:	af00      	add	r7, sp, #0
 800b31c:	6078      	str	r0, [r7, #4]
 800b31e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b320:	2300      	movs	r3, #0
 800b322:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 800b324:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800b328:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 800b32a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b32e:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 800b330:	f107 0308 	add.w	r3, r7, #8
 800b334:	461a      	mov	r2, r3
 800b336:	2128      	movs	r1, #40	; 0x28
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f003 faa9 	bl	800e890 <VL53L0X_RdWord>
 800b33e:	4603      	mov	r3, r0
 800b340:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 800b342:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d11e      	bne.n	800b388 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800b34a:	893b      	ldrh	r3, [r7, #8]
 800b34c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b350:	b29b      	uxth	r3, r3
 800b352:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 800b354:	893b      	ldrh	r3, [r7, #8]
 800b356:	461a      	mov	r2, r3
 800b358:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b35c:	429a      	cmp	r2, r3
 800b35e:	dd0b      	ble.n	800b378 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 800b360:	893a      	ldrh	r2, [r7, #8]
 800b362:	897b      	ldrh	r3, [r7, #10]
 800b364:	1ad3      	subs	r3, r2, r3
 800b366:	b29b      	uxth	r3, r3
 800b368:	b21b      	sxth	r3, r3
 800b36a:	461a      	mov	r2, r3
					* 250;
 800b36c:	23fa      	movs	r3, #250	; 0xfa
 800b36e:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	601a      	str	r2, [r3, #0]
 800b376:	e007      	b.n	800b388 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 800b378:	893b      	ldrh	r3, [r7, #8]
 800b37a:	b21b      	sxth	r3, r3
 800b37c:	461a      	mov	r2, r3
 800b37e:	23fa      	movs	r3, #250	; 0xfa
 800b380:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	601a      	str	r2, [r3, #0]

	}

	return Status;
 800b388:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b38c:	4618      	mov	r0, r3
 800b38e:	3710      	adds	r7, #16
 800b390:	46bd      	mov	sp, r7
 800b392:	bd80      	pop	{r7, pc}

0800b394 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 800b394:	b480      	push	{r7}
 800b396:	b08b      	sub	sp, #44	; 0x2c
 800b398:	af00      	add	r7, sp, #0
 800b39a:	60f8      	str	r0, [r7, #12]
 800b39c:	60b9      	str	r1, [r7, #8]
 800b39e:	607a      	str	r2, [r7, #4]
 800b3a0:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800b3a2:	2308      	movs	r3, #8
 800b3a4:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	f04f 32ff 	mov.w	r2, #4294967295
 800b3b0:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800b3b2:	687a      	ldr	r2, [r7, #4]
 800b3b4:	69bb      	ldr	r3, [r7, #24]
 800b3b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3ba:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	69ba      	ldr	r2, [r7, #24]
 800b3c0:	fbb3 f2f2 	udiv	r2, r3, r2
 800b3c4:	69b9      	ldr	r1, [r7, #24]
 800b3c6:	fb01 f202 	mul.w	r2, r1, r2
 800b3ca:	1a9b      	subs	r3, r3, r2
 800b3cc:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800b3ce:	697b      	ldr	r3, [r7, #20]
 800b3d0:	627b      	str	r3, [r7, #36]	; 0x24
 800b3d2:	e030      	b.n	800b436 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 800b3d8:	68fa      	ldr	r2, [r7, #12]
 800b3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3dc:	4413      	add	r3, r2
 800b3de:	781b      	ldrb	r3, [r3, #0]
 800b3e0:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 800b3e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3e4:	697b      	ldr	r3, [r7, #20]
 800b3e6:	429a      	cmp	r2, r3
 800b3e8:	d11e      	bne.n	800b428 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 800b3ea:	7ffa      	ldrb	r2, [r7, #31]
 800b3ec:	693b      	ldr	r3, [r7, #16]
 800b3ee:	fa42 f303 	asr.w	r3, r2, r3
 800b3f2:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 800b3f4:	693b      	ldr	r3, [r7, #16]
 800b3f6:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 800b3f8:	e016      	b.n	800b428 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 800b3fa:	7ffb      	ldrb	r3, [r7, #31]
 800b3fc:	f003 0301 	and.w	r3, r3, #1
 800b400:	2b00      	cmp	r3, #0
 800b402:	d00b      	beq.n	800b41c <get_next_good_spad+0x88>
				success = 1;
 800b404:	2301      	movs	r3, #1
 800b406:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 800b408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b40a:	69ba      	ldr	r2, [r7, #24]
 800b40c:	fb03 f202 	mul.w	r2, r3, r2
 800b410:	6a3b      	ldr	r3, [r7, #32]
 800b412:	4413      	add	r3, r2
 800b414:	461a      	mov	r2, r3
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	601a      	str	r2, [r3, #0]
				break;
 800b41a:	e009      	b.n	800b430 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 800b41c:	7ffb      	ldrb	r3, [r7, #31]
 800b41e:	085b      	lsrs	r3, r3, #1
 800b420:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 800b422:	6a3b      	ldr	r3, [r7, #32]
 800b424:	3301      	adds	r3, #1
 800b426:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 800b428:	6a3a      	ldr	r2, [r7, #32]
 800b42a:	69bb      	ldr	r3, [r7, #24]
 800b42c:	429a      	cmp	r2, r3
 800b42e:	d3e4      	bcc.n	800b3fa <get_next_good_spad+0x66>
				coarseIndex++) {
 800b430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b432:	3301      	adds	r3, #1
 800b434:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800b436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	429a      	cmp	r2, r3
 800b43c:	d202      	bcs.n	800b444 <get_next_good_spad+0xb0>
 800b43e:	7fbb      	ldrb	r3, [r7, #30]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d0c7      	beq.n	800b3d4 <get_next_good_spad+0x40>
		}
	}
}
 800b444:	bf00      	nop
 800b446:	372c      	adds	r7, #44	; 0x2c
 800b448:	46bd      	mov	sp, r7
 800b44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44e:	4770      	bx	lr

0800b450 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 800b450:	b480      	push	{r7}
 800b452:	b085      	sub	sp, #20
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 800b458:	2301      	movs	r3, #1
 800b45a:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	099b      	lsrs	r3, r3, #6
 800b460:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800b462:	4a07      	ldr	r2, [pc, #28]	; (800b480 <is_aperture+0x30>)
 800b464:	68bb      	ldr	r3, [r7, #8]
 800b466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d101      	bne.n	800b472 <is_aperture+0x22>
		isAperture = 0;
 800b46e:	2300      	movs	r3, #0
 800b470:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 800b472:	7bfb      	ldrb	r3, [r7, #15]
}
 800b474:	4618      	mov	r0, r3
 800b476:	3714      	adds	r7, #20
 800b478:	46bd      	mov	sp, r7
 800b47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47e:	4770      	bx	lr
 800b480:	200002b8 	.word	0x200002b8

0800b484 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 800b484:	b480      	push	{r7}
 800b486:	b089      	sub	sp, #36	; 0x24
 800b488:	af00      	add	r7, sp, #0
 800b48a:	60f8      	str	r0, [r7, #12]
 800b48c:	60b9      	str	r1, [r7, #8]
 800b48e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800b490:	2300      	movs	r3, #0
 800b492:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 800b494:	2308      	movs	r3, #8
 800b496:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 800b498:	687a      	ldr	r2, [r7, #4]
 800b49a:	69bb      	ldr	r3, [r7, #24]
 800b49c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4a0:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	69ba      	ldr	r2, [r7, #24]
 800b4a6:	fbb3 f2f2 	udiv	r2, r3, r2
 800b4aa:	69b9      	ldr	r1, [r7, #24]
 800b4ac:	fb01 f202 	mul.w	r2, r1, r2
 800b4b0:	1a9b      	subs	r3, r3, r2
 800b4b2:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 800b4b4:	697a      	ldr	r2, [r7, #20]
 800b4b6:	68bb      	ldr	r3, [r7, #8]
 800b4b8:	429a      	cmp	r2, r3
 800b4ba:	d302      	bcc.n	800b4c2 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 800b4bc:	23ce      	movs	r3, #206	; 0xce
 800b4be:	77fb      	strb	r3, [r7, #31]
 800b4c0:	e010      	b.n	800b4e4 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800b4c2:	68fa      	ldr	r2, [r7, #12]
 800b4c4:	697b      	ldr	r3, [r7, #20]
 800b4c6:	4413      	add	r3, r2
 800b4c8:	781b      	ldrb	r3, [r3, #0]
 800b4ca:	b25a      	sxtb	r2, r3
 800b4cc:	2101      	movs	r1, #1
 800b4ce:	693b      	ldr	r3, [r7, #16]
 800b4d0:	fa01 f303 	lsl.w	r3, r1, r3
 800b4d4:	b25b      	sxtb	r3, r3
 800b4d6:	4313      	orrs	r3, r2
 800b4d8:	b259      	sxtb	r1, r3
 800b4da:	68fa      	ldr	r2, [r7, #12]
 800b4dc:	697b      	ldr	r3, [r7, #20]
 800b4de:	4413      	add	r3, r2
 800b4e0:	b2ca      	uxtb	r2, r1
 800b4e2:	701a      	strb	r2, [r3, #0]

	return status;
 800b4e4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	3724      	adds	r7, #36	; 0x24
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f2:	4770      	bx	lr

0800b4f4 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b084      	sub	sp, #16
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
 800b4fc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800b4fe:	2306      	movs	r3, #6
 800b500:	683a      	ldr	r2, [r7, #0]
 800b502:	21b0      	movs	r1, #176	; 0xb0
 800b504:	6878      	ldr	r0, [r7, #4]
 800b506:	f003 f8bb 	bl	800e680 <VL53L0X_WriteMulti>
 800b50a:	4603      	mov	r3, r0
 800b50c:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800b50e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b512:	4618      	mov	r0, r3
 800b514:	3710      	adds	r7, #16
 800b516:	46bd      	mov	sp, r7
 800b518:	bd80      	pop	{r7, pc}

0800b51a <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800b51a:	b580      	push	{r7, lr}
 800b51c:	b084      	sub	sp, #16
 800b51e:	af00      	add	r7, sp, #0
 800b520:	6078      	str	r0, [r7, #4]
 800b522:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 800b524:	2306      	movs	r3, #6
 800b526:	683a      	ldr	r2, [r7, #0]
 800b528:	21b0      	movs	r1, #176	; 0xb0
 800b52a:	6878      	ldr	r0, [r7, #4]
 800b52c:	f003 f8d8 	bl	800e6e0 <VL53L0X_ReadMulti>
 800b530:	4603      	mov	r3, r0
 800b532:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 800b534:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b538:	4618      	mov	r0, r3
 800b53a:	3710      	adds	r7, #16
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bd80      	pop	{r7, pc}

0800b540 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b08c      	sub	sp, #48	; 0x30
 800b544:	af00      	add	r7, sp, #0
 800b546:	60f8      	str	r0, [r7, #12]
 800b548:	607a      	str	r2, [r7, #4]
 800b54a:	603b      	str	r3, [r7, #0]
 800b54c:	460b      	mov	r3, r1
 800b54e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800b550:	2300      	movs	r3, #0
 800b552:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 800b556:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b558:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 800b55a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b55c:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800b55e:	2300      	movs	r3, #0
 800b560:	62bb      	str	r3, [r7, #40]	; 0x28
 800b562:	e02b      	b.n	800b5bc <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 800b564:	f107 031c 	add.w	r3, r7, #28
 800b568:	6a3a      	ldr	r2, [r7, #32]
 800b56a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b56c:	6878      	ldr	r0, [r7, #4]
 800b56e:	f7ff ff11 	bl	800b394 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 800b572:	69fb      	ldr	r3, [r7, #28]
 800b574:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b578:	d103      	bne.n	800b582 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800b57a:	23ce      	movs	r3, #206	; 0xce
 800b57c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800b580:	e020      	b.n	800b5c4 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800b582:	69fb      	ldr	r3, [r7, #28]
 800b584:	461a      	mov	r2, r3
 800b586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b588:	4413      	add	r3, r2
 800b58a:	4618      	mov	r0, r3
 800b58c:	f7ff ff60 	bl	800b450 <is_aperture>
 800b590:	4603      	mov	r3, r0
 800b592:	461a      	mov	r2, r3
 800b594:	7afb      	ldrb	r3, [r7, #11]
 800b596:	4293      	cmp	r3, r2
 800b598:	d003      	beq.n	800b5a2 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800b59a:	23ce      	movs	r3, #206	; 0xce
 800b59c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800b5a0:	e010      	b.n	800b5c4 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800b5a2:	69fb      	ldr	r3, [r7, #28]
 800b5a4:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 800b5a6:	6a3a      	ldr	r2, [r7, #32]
 800b5a8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b5aa:	6838      	ldr	r0, [r7, #0]
 800b5ac:	f7ff ff6a 	bl	800b484 <enable_spad_bit>
		currentSpad++;
 800b5b0:	6a3b      	ldr	r3, [r7, #32]
 800b5b2:	3301      	adds	r3, #1
 800b5b4:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800b5b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5b8:	3301      	adds	r3, #1
 800b5ba:	62bb      	str	r3, [r7, #40]	; 0x28
 800b5bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b5c0:	429a      	cmp	r2, r3
 800b5c2:	d3cf      	bcc.n	800b564 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 800b5c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b5c6:	6a3a      	ldr	r2, [r7, #32]
 800b5c8:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800b5ca:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d106      	bne.n	800b5e0 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800b5d2:	6839      	ldr	r1, [r7, #0]
 800b5d4:	68f8      	ldr	r0, [r7, #12]
 800b5d6:	f7ff ff8d 	bl	800b4f4 <set_ref_spad_map>
 800b5da:	4603      	mov	r3, r0
 800b5dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 800b5e0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d121      	bne.n	800b62c <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 800b5e8:	f107 0314 	add.w	r3, r7, #20
 800b5ec:	4619      	mov	r1, r3
 800b5ee:	68f8      	ldr	r0, [r7, #12]
 800b5f0:	f7ff ff93 	bl	800b51a <get_ref_spad_map>
 800b5f4:	4603      	mov	r3, r0
 800b5f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800b5fe:	e011      	b.n	800b624 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 800b600:	683a      	ldr	r2, [r7, #0]
 800b602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b604:	4413      	add	r3, r2
 800b606:	781a      	ldrb	r2, [r3, #0]
 800b608:	f107 0114 	add.w	r1, r7, #20
 800b60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b60e:	440b      	add	r3, r1
 800b610:	781b      	ldrb	r3, [r3, #0]
 800b612:	429a      	cmp	r2, r3
 800b614:	d003      	beq.n	800b61e <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 800b616:	23ce      	movs	r3, #206	; 0xce
 800b618:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 800b61c:	e006      	b.n	800b62c <enable_ref_spads+0xec>
			}
			i++;
 800b61e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b620:	3301      	adds	r3, #1
 800b622:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 800b624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b628:	429a      	cmp	r2, r3
 800b62a:	d3e9      	bcc.n	800b600 <enable_ref_spads+0xc0>
		}
	}
	return status;
 800b62c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800b630:	4618      	mov	r0, r3
 800b632:	3730      	adds	r7, #48	; 0x30
 800b634:	46bd      	mov	sp, r7
 800b636:	bd80      	pop	{r7, pc}

0800b638 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b08a      	sub	sp, #40	; 0x28
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
 800b640:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800b642:	2300      	movs	r3, #0
 800b644:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 800b648:	2300      	movs	r3, #0
 800b64a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800b654:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 800b658:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d107      	bne.n	800b670 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 800b660:	22c0      	movs	r2, #192	; 0xc0
 800b662:	2101      	movs	r1, #1
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f003 f867 	bl	800e738 <VL53L0X_WrByte>
 800b66a:	4603      	mov	r3, r0
 800b66c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 800b670:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b674:	2b00      	cmp	r3, #0
 800b676:	d108      	bne.n	800b68a <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 800b678:	f107 0308 	add.w	r3, r7, #8
 800b67c:	4619      	mov	r1, r3
 800b67e:	6878      	ldr	r0, [r7, #4]
 800b680:	f7ff fc18 	bl	800aeb4 <VL53L0X_PerformSingleRangingMeasurement>
 800b684:	4603      	mov	r3, r0
 800b686:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800b68a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d107      	bne.n	800b6a2 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b692:	2201      	movs	r2, #1
 800b694:	21ff      	movs	r1, #255	; 0xff
 800b696:	6878      	ldr	r0, [r7, #4]
 800b698:	f003 f84e 	bl	800e738 <VL53L0X_WrByte>
 800b69c:	4603      	mov	r3, r0
 800b69e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 800b6a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d107      	bne.n	800b6ba <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 800b6aa:	683a      	ldr	r2, [r7, #0]
 800b6ac:	21b6      	movs	r1, #182	; 0xb6
 800b6ae:	6878      	ldr	r0, [r7, #4]
 800b6b0:	f003 f8ee 	bl	800e890 <VL53L0X_RdWord>
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800b6ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d107      	bne.n	800b6d2 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	21ff      	movs	r1, #255	; 0xff
 800b6c6:	6878      	ldr	r0, [r7, #4]
 800b6c8:	f003 f836 	bl	800e738 <VL53L0X_WrByte>
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800b6d2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d112      	bne.n	800b700 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800b6da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b6de:	461a      	mov	r2, r3
 800b6e0:	2101      	movs	r1, #1
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	f003 f828 	bl	800e738 <VL53L0X_WrByte>
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800b6ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d104      	bne.n	800b700 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b6fc:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 800b700:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800b704:	4618      	mov	r0, r3
 800b706:	3728      	adds	r7, #40	; 0x28
 800b708:	46bd      	mov	sp, r7
 800b70a:	bd80      	pop	{r7, pc}

0800b70c <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 800b70c:	b590      	push	{r4, r7, lr}
 800b70e:	b09d      	sub	sp, #116	; 0x74
 800b710:	af06      	add	r7, sp, #24
 800b712:	60f8      	str	r0, [r7, #12]
 800b714:	60b9      	str	r1, [r7, #8]
 800b716:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b718:	2300      	movs	r3, #0
 800b71a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 800b71e:	23b4      	movs	r3, #180	; 0xb4
 800b720:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 800b724:	2303      	movs	r3, #3
 800b726:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 800b728:	232c      	movs	r3, #44	; 0x2c
 800b72a:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 800b72c:	2300      	movs	r3, #0
 800b72e:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 800b730:	2300      	movs	r3, #0
 800b732:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 800b734:	2300      	movs	r3, #0
 800b736:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 800b738:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800b73c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 800b73e:	2300      	movs	r3, #0
 800b740:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 800b742:	2300      	movs	r3, #0
 800b744:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 800b746:	2306      	movs	r3, #6
 800b748:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 800b74a:	2300      	movs	r3, #0
 800b74c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 800b74e:	2300      	movs	r3, #0
 800b750:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 800b752:	2300      	movs	r3, #0
 800b754:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 800b758:	2300      	movs	r3, #0
 800b75a:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 800b75c:	2300      	movs	r3, #0
 800b75e:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 800b760:	2300      	movs	r3, #0
 800b762:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 800b764:	2300      	movs	r3, #0
 800b766:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 800b770:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 800b772:	2300      	movs	r3, #0
 800b774:	64bb      	str	r3, [r7, #72]	; 0x48
 800b776:	e009      	b.n	800b78c <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800b778:	68fa      	ldr	r2, [r7, #12]
 800b77a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b77c:	4413      	add	r3, r2
 800b77e:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800b782:	2200      	movs	r2, #0
 800b784:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800b786:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b788:	3301      	adds	r3, #1
 800b78a:	64bb      	str	r3, [r7, #72]	; 0x48
 800b78c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b78e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b790:	429a      	cmp	r2, r3
 800b792:	d3f1      	bcc.n	800b778 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b794:	2201      	movs	r2, #1
 800b796:	21ff      	movs	r1, #255	; 0xff
 800b798:	68f8      	ldr	r0, [r7, #12]
 800b79a:	f002 ffcd 	bl	800e738 <VL53L0X_WrByte>
 800b79e:	4603      	mov	r3, r0
 800b7a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800b7a4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d107      	bne.n	800b7bc <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	214f      	movs	r1, #79	; 0x4f
 800b7b0:	68f8      	ldr	r0, [r7, #12]
 800b7b2:	f002 ffc1 	bl	800e738 <VL53L0X_WrByte>
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800b7bc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d107      	bne.n	800b7d4 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 800b7c4:	222c      	movs	r2, #44	; 0x2c
 800b7c6:	214e      	movs	r1, #78	; 0x4e
 800b7c8:	68f8      	ldr	r0, [r7, #12]
 800b7ca:	f002 ffb5 	bl	800e738 <VL53L0X_WrByte>
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800b7d4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d107      	bne.n	800b7ec <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b7dc:	2200      	movs	r2, #0
 800b7de:	21ff      	movs	r1, #255	; 0xff
 800b7e0:	68f8      	ldr	r0, [r7, #12]
 800b7e2:	f002 ffa9 	bl	800e738 <VL53L0X_WrByte>
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800b7ec:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d109      	bne.n	800b808 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 800b7f4:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800b7f8:	461a      	mov	r2, r3
 800b7fa:	21b6      	movs	r1, #182	; 0xb6
 800b7fc:	68f8      	ldr	r0, [r7, #12]
 800b7fe:	f002 ff9b 	bl	800e738 <VL53L0X_WrByte>
 800b802:	4603      	mov	r3, r0
 800b804:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 800b808:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d107      	bne.n	800b820 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 800b810:	2200      	movs	r2, #0
 800b812:	2180      	movs	r1, #128	; 0x80
 800b814:	68f8      	ldr	r0, [r7, #12]
 800b816:	f002 ff8f 	bl	800e738 <VL53L0X_WrByte>
 800b81a:	4603      	mov	r3, r0
 800b81c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 800b820:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b824:	2b00      	cmp	r3, #0
 800b826:	d10a      	bne.n	800b83e <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 800b828:	f107 0210 	add.w	r2, r7, #16
 800b82c:	f107 0111 	add.w	r1, r7, #17
 800b830:	2300      	movs	r3, #0
 800b832:	68f8      	ldr	r0, [r7, #12]
 800b834:	f000 fbbb 	bl	800bfae <VL53L0X_perform_ref_calibration>
 800b838:	4603      	mov	r3, r0
 800b83a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 800b83e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b842:	2b00      	cmp	r3, #0
 800b844:	d121      	bne.n	800b88a <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 800b846:	2300      	movs	r3, #0
 800b848:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 800b84a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b84c:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 800b84e:	2300      	movs	r3, #0
 800b850:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 800b852:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b854:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 800b862:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800b866:	f107 0218 	add.w	r2, r7, #24
 800b86a:	9204      	str	r2, [sp, #16]
 800b86c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b86e:	9203      	str	r2, [sp, #12]
 800b870:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b872:	9202      	str	r2, [sp, #8]
 800b874:	9301      	str	r3, [sp, #4]
 800b876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b878:	9300      	str	r3, [sp, #0]
 800b87a:	4623      	mov	r3, r4
 800b87c:	4602      	mov	r2, r0
 800b87e:	68f8      	ldr	r0, [r7, #12]
 800b880:	f7ff fe5e 	bl	800b540 <enable_ref_spads>
 800b884:	4603      	mov	r3, r0
 800b886:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b88a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d174      	bne.n	800b97c <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 800b892:	69bb      	ldr	r3, [r7, #24]
 800b894:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 800b896:	f107 0312 	add.w	r3, r7, #18
 800b89a:	4619      	mov	r1, r3
 800b89c:	68f8      	ldr	r0, [r7, #12]
 800b89e:	f7ff fecb 	bl	800b638 <perform_ref_signal_measurement>
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 800b8a8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d161      	bne.n	800b974 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 800b8b0:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 800b8b2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b8b4:	429a      	cmp	r2, r3
 800b8b6:	d25d      	bcs.n	800b974 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	64bb      	str	r3, [r7, #72]	; 0x48
 800b8bc:	e009      	b.n	800b8d2 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800b8be:	68fa      	ldr	r2, [r7, #12]
 800b8c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b8c2:	4413      	add	r3, r2
 800b8c4:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 800b8cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b8ce:	3301      	adds	r3, #1
 800b8d0:	64bb      	str	r3, [r7, #72]	; 0x48
 800b8d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b8d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8d6:	429a      	cmp	r2, r3
 800b8d8:	d3f1      	bcc.n	800b8be <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 800b8da:	e002      	b.n	800b8e2 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 800b8dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8de:	3301      	adds	r3, #1
 800b8e0:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 800b8e2:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800b8e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8e8:	4413      	add	r3, r2
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	f7ff fdb0 	bl	800b450 <is_aperture>
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d103      	bne.n	800b8fe <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 800b8f6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b8f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8fa:	429a      	cmp	r2, r3
 800b8fc:	d3ee      	bcc.n	800b8dc <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 800b8fe:	2301      	movs	r3, #1
 800b900:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 800b902:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b904:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 800b912:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800b916:	f107 0218 	add.w	r2, r7, #24
 800b91a:	9204      	str	r2, [sp, #16]
 800b91c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b91e:	9203      	str	r2, [sp, #12]
 800b920:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b922:	9202      	str	r2, [sp, #8]
 800b924:	9301      	str	r3, [sp, #4]
 800b926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b928:	9300      	str	r3, [sp, #0]
 800b92a:	4623      	mov	r3, r4
 800b92c:	4602      	mov	r2, r0
 800b92e:	68f8      	ldr	r0, [r7, #12]
 800b930:	f7ff fe06 	bl	800b540 <enable_ref_spads>
 800b934:	4603      	mov	r3, r0
 800b936:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800b93a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d11b      	bne.n	800b97a <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 800b942:	69bb      	ldr	r3, [r7, #24]
 800b944:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 800b946:	f107 0312 	add.w	r3, r7, #18
 800b94a:	4619      	mov	r1, r3
 800b94c:	68f8      	ldr	r0, [r7, #12]
 800b94e:	f7ff fe73 	bl	800b638 <perform_ref_signal_measurement>
 800b952:	4603      	mov	r3, r0
 800b954:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 800b958:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d10c      	bne.n	800b97a <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 800b960:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800b962:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b964:	429a      	cmp	r2, r3
 800b966:	d208      	bcs.n	800b97a <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 800b968:	2301      	movs	r3, #1
 800b96a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 800b96e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b970:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 800b972:	e002      	b.n	800b97a <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 800b974:	2300      	movs	r3, #0
 800b976:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b978:	e000      	b.n	800b97c <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 800b97a:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800b97c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b980:	2b00      	cmp	r3, #0
 800b982:	f040 80af 	bne.w	800bae4 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 800b986:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 800b988:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b98a:	429a      	cmp	r2, r3
 800b98c:	f240 80aa 	bls.w	800bae4 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 800b990:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b992:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 800b996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b998:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	f503 7192 	add.w	r1, r3, #292	; 0x124
 800b9a0:	f107 031c 	add.w	r3, r7, #28
 800b9a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	f003 f820 	bl	800e9ec <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 800b9ac:	8a7b      	ldrh	r3, [r7, #18]
 800b9ae:	461a      	mov	r2, r3
 800b9b0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b9b2:	1ad3      	subs	r3, r2, r3
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	bfb8      	it	lt
 800b9b8:	425b      	neglt	r3, r3
 800b9ba:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 800b9bc:	2300      	movs	r3, #0
 800b9be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 800b9c2:	e086      	b.n	800bad2 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 800b9ca:	f107 0314 	add.w	r3, r7, #20
 800b9ce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b9d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b9d2:	f7ff fcdf 	bl	800b394 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 800b9d6:	697b      	ldr	r3, [r7, #20]
 800b9d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9dc:	d103      	bne.n	800b9e6 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800b9de:	23ce      	movs	r3, #206	; 0xce
 800b9e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 800b9e4:	e07e      	b.n	800bae4 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 800b9e6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800b9ea:	697a      	ldr	r2, [r7, #20]
 800b9ec:	4413      	add	r3, r2
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	f7ff fd2e 	bl	800b450 <is_aperture>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	461a      	mov	r2, r3
 800b9f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9fa:	4293      	cmp	r3, r2
 800b9fc:	d003      	beq.n	800ba06 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 800b9fe:	2301      	movs	r3, #1
 800ba00:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 800ba04:	e06e      	b.n	800bae4 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 800ba06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba08:	3301      	adds	r3, #1
 800ba0a:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 800ba0c:	697b      	ldr	r3, [r7, #20]
 800ba0e:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 800ba16:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ba18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	f7ff fd32 	bl	800b484 <enable_spad_bit>
 800ba20:	4603      	mov	r3, r0
 800ba22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800ba26:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d10c      	bne.n	800ba48 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 800ba2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba30:	3301      	adds	r3, #1
 800ba32:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 800ba3a:	4619      	mov	r1, r3
 800ba3c:	68f8      	ldr	r0, [r7, #12]
 800ba3e:	f7ff fd59 	bl	800b4f4 <set_ref_spad_map>
 800ba42:	4603      	mov	r3, r0
 800ba44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 800ba48:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d146      	bne.n	800bade <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 800ba50:	f107 0312 	add.w	r3, r7, #18
 800ba54:	4619      	mov	r1, r3
 800ba56:	68f8      	ldr	r0, [r7, #12]
 800ba58:	f7ff fdee 	bl	800b638 <perform_ref_signal_measurement>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 800ba62:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d13b      	bne.n	800bae2 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800ba6a:	8a7b      	ldrh	r3, [r7, #18]
 800ba6c:	461a      	mov	r2, r3
 800ba6e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ba70:	1ad3      	subs	r3, r2, r3
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	bfb8      	it	lt
 800ba76:	425b      	neglt	r3, r3
 800ba78:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 800ba7a:	8a7b      	ldrh	r3, [r7, #18]
 800ba7c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ba7e:	429a      	cmp	r2, r3
 800ba80:	d21c      	bcs.n	800babc <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 800ba82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba86:	429a      	cmp	r2, r3
 800ba88:	d914      	bls.n	800bab4 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 800ba8a:	f107 031c 	add.w	r3, r7, #28
 800ba8e:	4619      	mov	r1, r3
 800ba90:	68f8      	ldr	r0, [r7, #12]
 800ba92:	f7ff fd2f 	bl	800b4f4 <set_ref_spad_map>
 800ba96:	4603      	mov	r3, r0
 800ba98:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 800baa2:	f107 011c 	add.w	r1, r7, #28
 800baa6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800baa8:	4618      	mov	r0, r3
 800baaa:	f002 ff9f 	bl	800e9ec <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 800baae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bab0:	3b01      	subs	r3, #1
 800bab2:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 800bab4:	2301      	movs	r3, #1
 800bab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800baba:	e00a      	b.n	800bad2 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 800babc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800babe:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 800bac6:	f107 031c 	add.w	r3, r7, #28
 800baca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bacc:	4618      	mov	r0, r3
 800bace:	f002 ff8d 	bl	800e9ec <memcpy>
		while (!complete) {
 800bad2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	f43f af74 	beq.w	800b9c4 <VL53L0X_perform_ref_spad_management+0x2b8>
 800badc:	e002      	b.n	800bae4 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800bade:	bf00      	nop
 800bae0:	e000      	b.n	800bae4 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800bae2:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800bae4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d115      	bne.n	800bb18 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 800baec:	68bb      	ldr	r3, [r7, #8]
 800baee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800baf0:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800baf8:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	2201      	movs	r2, #1
 800bafe:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800bb02:	68bb      	ldr	r3, [r7, #8]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	b2da      	uxtb	r2, r3
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	781a      	ldrb	r2, [r3, #0]
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 800bb18:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	375c      	adds	r7, #92	; 0x5c
 800bb20:	46bd      	mov	sp, r7
 800bb22:	bd90      	pop	{r4, r7, pc}

0800bb24 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 800bb24:	b590      	push	{r4, r7, lr}
 800bb26:	b093      	sub	sp, #76	; 0x4c
 800bb28:	af06      	add	r7, sp, #24
 800bb2a:	60f8      	str	r0, [r7, #12]
 800bb2c:	60b9      	str	r1, [r7, #8]
 800bb2e:	4613      	mov	r3, r2
 800bb30:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bb32:	2300      	movs	r3, #0
 800bb34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 800bb38:	2300      	movs	r3, #0
 800bb3a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 800bb3c:	23b4      	movs	r3, #180	; 0xb4
 800bb3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 800bb42:	2306      	movs	r3, #6
 800bb44:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800bb46:	232c      	movs	r3, #44	; 0x2c
 800bb48:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800bb4a:	2201      	movs	r2, #1
 800bb4c:	21ff      	movs	r1, #255	; 0xff
 800bb4e:	68f8      	ldr	r0, [r7, #12]
 800bb50:	f002 fdf2 	bl	800e738 <VL53L0X_WrByte>
 800bb54:	4603      	mov	r3, r0
 800bb56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800bb5a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d107      	bne.n	800bb72 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 800bb62:	2200      	movs	r2, #0
 800bb64:	214f      	movs	r1, #79	; 0x4f
 800bb66:	68f8      	ldr	r0, [r7, #12]
 800bb68:	f002 fde6 	bl	800e738 <VL53L0X_WrByte>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800bb72:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d107      	bne.n	800bb8a <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 800bb7a:	222c      	movs	r2, #44	; 0x2c
 800bb7c:	214e      	movs	r1, #78	; 0x4e
 800bb7e:	68f8      	ldr	r0, [r7, #12]
 800bb80:	f002 fdda 	bl	800e738 <VL53L0X_WrByte>
 800bb84:	4603      	mov	r3, r0
 800bb86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800bb8a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d107      	bne.n	800bba2 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800bb92:	2200      	movs	r2, #0
 800bb94:	21ff      	movs	r1, #255	; 0xff
 800bb96:	68f8      	ldr	r0, [r7, #12]
 800bb98:	f002 fdce 	bl	800e738 <VL53L0X_WrByte>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800bba2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d109      	bne.n	800bbbe <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 800bbaa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bbae:	461a      	mov	r2, r3
 800bbb0:	21b6      	movs	r1, #182	; 0xb6
 800bbb2:	68f8      	ldr	r0, [r7, #12]
 800bbb4:	f002 fdc0 	bl	800e738 <VL53L0X_WrByte>
 800bbb8:	4603      	mov	r3, r0
 800bbba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	627b      	str	r3, [r7, #36]	; 0x24
 800bbc2:	e009      	b.n	800bbd8 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800bbc4:	68fa      	ldr	r2, [r7, #12]
 800bbc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbc8:	4413      	add	r3, r2
 800bbca:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800bbce:	2200      	movs	r2, #0
 800bbd0:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800bbd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd4:	3301      	adds	r3, #1
 800bbd6:	627b      	str	r3, [r7, #36]	; 0x24
 800bbd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbda:	69fb      	ldr	r3, [r7, #28]
 800bbdc:	429a      	cmp	r2, r3
 800bbde:	d3f1      	bcc.n	800bbc4 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 800bbe0:	79fb      	ldrb	r3, [r7, #7]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d011      	beq.n	800bc0a <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800bbe6:	e002      	b.n	800bbee <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 800bbe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbea:	3301      	adds	r3, #1
 800bbec:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800bbee:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800bbf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbf4:	4413      	add	r3, r2
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	f7ff fc2a 	bl	800b450 <is_aperture>
 800bbfc:	4603      	mov	r3, r0
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d103      	bne.n	800bc0a <VL53L0X_set_reference_spads+0xe6>
 800bc02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc04:	69bb      	ldr	r3, [r7, #24]
 800bc06:	429a      	cmp	r2, r3
 800bc08:	d3ee      	bcc.n	800bbe8 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 800bc16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bc1a:	79f9      	ldrb	r1, [r7, #7]
 800bc1c:	f107 0214 	add.w	r2, r7, #20
 800bc20:	9204      	str	r2, [sp, #16]
 800bc22:	68ba      	ldr	r2, [r7, #8]
 800bc24:	9203      	str	r2, [sp, #12]
 800bc26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc28:	9202      	str	r2, [sp, #8]
 800bc2a:	9301      	str	r3, [sp, #4]
 800bc2c:	69fb      	ldr	r3, [r7, #28]
 800bc2e:	9300      	str	r3, [sp, #0]
 800bc30:	4623      	mov	r3, r4
 800bc32:	4602      	mov	r2, r0
 800bc34:	68f8      	ldr	r0, [r7, #12]
 800bc36:	f7ff fc83 	bl	800b540 <enable_ref_spads>
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 800bc40:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d10c      	bne.n	800bc62 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	2201      	movs	r2, #1
 800bc4c:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800bc50:	68bb      	ldr	r3, [r7, #8]
 800bc52:	b2da      	uxtb	r2, r3
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	79fa      	ldrb	r2, [r7, #7]
 800bc5e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800bc62:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800bc66:	4618      	mov	r0, r3
 800bc68:	3734      	adds	r7, #52	; 0x34
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	bd90      	pop	{r4, r7, pc}

0800bc6e <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 800bc6e:	b580      	push	{r7, lr}
 800bc70:	b084      	sub	sp, #16
 800bc72:	af00      	add	r7, sp, #0
 800bc74:	6078      	str	r0, [r7, #4]
 800bc76:	460b      	mov	r3, r1
 800bc78:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800bc7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d10a      	bne.n	800bc9c <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800bc86:	78fb      	ldrb	r3, [r7, #3]
 800bc88:	f043 0301 	orr.w	r3, r3, #1
 800bc8c:	b2db      	uxtb	r3, r3
 800bc8e:	461a      	mov	r2, r3
 800bc90:	2100      	movs	r1, #0
 800bc92:	6878      	ldr	r0, [r7, #4]
 800bc94:	f002 fd50 	bl	800e738 <VL53L0X_WrByte>
 800bc98:	4603      	mov	r3, r0
 800bc9a:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 800bc9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d104      	bne.n	800bcae <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800bca4:	6878      	ldr	r0, [r7, #4]
 800bca6:	f000 f9bf 	bl	800c028 <VL53L0X_measurement_poll_for_completion>
 800bcaa:	4603      	mov	r3, r0
 800bcac:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800bcae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d105      	bne.n	800bcc2 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800bcb6:	2100      	movs	r1, #0
 800bcb8:	6878      	ldr	r0, [r7, #4]
 800bcba:	f7ff fa85 	bl	800b1c8 <VL53L0X_ClearInterruptMask>
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800bcc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d106      	bne.n	800bcd8 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 800bcca:	2200      	movs	r2, #0
 800bccc:	2100      	movs	r1, #0
 800bcce:	6878      	ldr	r0, [r7, #4]
 800bcd0:	f002 fd32 	bl	800e738 <VL53L0X_WrByte>
 800bcd4:	4603      	mov	r3, r0
 800bcd6:	73fb      	strb	r3, [r7, #15]

	return Status;
 800bcd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bcdc:	4618      	mov	r0, r3
 800bcde:	3710      	adds	r7, #16
 800bce0:	46bd      	mov	sp, r7
 800bce2:	bd80      	pop	{r7, pc}

0800bce4 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b084      	sub	sp, #16
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
 800bcec:	4608      	mov	r0, r1
 800bcee:	4611      	mov	r1, r2
 800bcf0:	461a      	mov	r2, r3
 800bcf2:	4603      	mov	r3, r0
 800bcf4:	70fb      	strb	r3, [r7, #3]
 800bcf6:	460b      	mov	r3, r1
 800bcf8:	70bb      	strb	r3, [r7, #2]
 800bcfa:	4613      	mov	r3, r2
 800bcfc:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bcfe:	2300      	movs	r3, #0
 800bd00:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 800bd02:	2300      	movs	r3, #0
 800bd04:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800bd06:	2201      	movs	r2, #1
 800bd08:	21ff      	movs	r1, #255	; 0xff
 800bd0a:	6878      	ldr	r0, [r7, #4]
 800bd0c:	f002 fd14 	bl	800e738 <VL53L0X_WrByte>
 800bd10:	4603      	mov	r3, r0
 800bd12:	461a      	mov	r2, r3
 800bd14:	7bfb      	ldrb	r3, [r7, #15]
 800bd16:	4313      	orrs	r3, r2
 800bd18:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	2100      	movs	r1, #0
 800bd1e:	6878      	ldr	r0, [r7, #4]
 800bd20:	f002 fd0a 	bl	800e738 <VL53L0X_WrByte>
 800bd24:	4603      	mov	r3, r0
 800bd26:	461a      	mov	r2, r3
 800bd28:	7bfb      	ldrb	r3, [r7, #15]
 800bd2a:	4313      	orrs	r3, r2
 800bd2c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800bd2e:	2200      	movs	r2, #0
 800bd30:	21ff      	movs	r1, #255	; 0xff
 800bd32:	6878      	ldr	r0, [r7, #4]
 800bd34:	f002 fd00 	bl	800e738 <VL53L0X_WrByte>
 800bd38:	4603      	mov	r3, r0
 800bd3a:	461a      	mov	r2, r3
 800bd3c:	7bfb      	ldrb	r3, [r7, #15]
 800bd3e:	4313      	orrs	r3, r2
 800bd40:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 800bd42:	78fb      	ldrb	r3, [r7, #3]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d01e      	beq.n	800bd86 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 800bd48:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d009      	beq.n	800bd64 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 800bd50:	69ba      	ldr	r2, [r7, #24]
 800bd52:	21cb      	movs	r1, #203	; 0xcb
 800bd54:	6878      	ldr	r0, [r7, #4]
 800bd56:	f002 fd71 	bl	800e83c <VL53L0X_RdByte>
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	461a      	mov	r2, r3
 800bd5e:	7bfb      	ldrb	r3, [r7, #15]
 800bd60:	4313      	orrs	r3, r2
 800bd62:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800bd64:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d02a      	beq.n	800bdc2 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800bd6c:	f107 030e 	add.w	r3, r7, #14
 800bd70:	461a      	mov	r2, r3
 800bd72:	21ee      	movs	r1, #238	; 0xee
 800bd74:	6878      	ldr	r0, [r7, #4]
 800bd76:	f002 fd61 	bl	800e83c <VL53L0X_RdByte>
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	461a      	mov	r2, r3
 800bd7e:	7bfb      	ldrb	r3, [r7, #15]
 800bd80:	4313      	orrs	r3, r2
 800bd82:	73fb      	strb	r3, [r7, #15]
 800bd84:	e01d      	b.n	800bdc2 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800bd86:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d00a      	beq.n	800bda4 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800bd8e:	78bb      	ldrb	r3, [r7, #2]
 800bd90:	461a      	mov	r2, r3
 800bd92:	21cb      	movs	r1, #203	; 0xcb
 800bd94:	6878      	ldr	r0, [r7, #4]
 800bd96:	f002 fccf 	bl	800e738 <VL53L0X_WrByte>
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	461a      	mov	r2, r3
 800bd9e:	7bfb      	ldrb	r3, [r7, #15]
 800bda0:	4313      	orrs	r3, r2
 800bda2:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800bda4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d00a      	beq.n	800bdc2 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800bdac:	787b      	ldrb	r3, [r7, #1]
 800bdae:	2280      	movs	r2, #128	; 0x80
 800bdb0:	21ee      	movs	r1, #238	; 0xee
 800bdb2:	6878      	ldr	r0, [r7, #4]
 800bdb4:	f002 fd0e 	bl	800e7d4 <VL53L0X_UpdateByte>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	461a      	mov	r2, r3
 800bdbc:	7bfb      	ldrb	r3, [r7, #15]
 800bdbe:	4313      	orrs	r3, r2
 800bdc0:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800bdc2:	2201      	movs	r2, #1
 800bdc4:	21ff      	movs	r1, #255	; 0xff
 800bdc6:	6878      	ldr	r0, [r7, #4]
 800bdc8:	f002 fcb6 	bl	800e738 <VL53L0X_WrByte>
 800bdcc:	4603      	mov	r3, r0
 800bdce:	461a      	mov	r2, r3
 800bdd0:	7bfb      	ldrb	r3, [r7, #15]
 800bdd2:	4313      	orrs	r3, r2
 800bdd4:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800bdd6:	2201      	movs	r2, #1
 800bdd8:	2100      	movs	r1, #0
 800bdda:	6878      	ldr	r0, [r7, #4]
 800bddc:	f002 fcac 	bl	800e738 <VL53L0X_WrByte>
 800bde0:	4603      	mov	r3, r0
 800bde2:	461a      	mov	r2, r3
 800bde4:	7bfb      	ldrb	r3, [r7, #15]
 800bde6:	4313      	orrs	r3, r2
 800bde8:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800bdea:	2200      	movs	r2, #0
 800bdec:	21ff      	movs	r1, #255	; 0xff
 800bdee:	6878      	ldr	r0, [r7, #4]
 800bdf0:	f002 fca2 	bl	800e738 <VL53L0X_WrByte>
 800bdf4:	4603      	mov	r3, r0
 800bdf6:	461a      	mov	r2, r3
 800bdf8:	7bfb      	ldrb	r3, [r7, #15]
 800bdfa:	4313      	orrs	r3, r2
 800bdfc:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800bdfe:	7bbb      	ldrb	r3, [r7, #14]
 800be00:	f023 0310 	bic.w	r3, r3, #16
 800be04:	b2da      	uxtb	r2, r3
 800be06:	69fb      	ldr	r3, [r7, #28]
 800be08:	701a      	strb	r2, [r3, #0]

	return Status;
 800be0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800be0e:	4618      	mov	r0, r3
 800be10:	3710      	adds	r7, #16
 800be12:	46bd      	mov	sp, r7
 800be14:	bd80      	pop	{r7, pc}

0800be16 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800be16:	b580      	push	{r7, lr}
 800be18:	b08a      	sub	sp, #40	; 0x28
 800be1a:	af04      	add	r7, sp, #16
 800be1c:	60f8      	str	r0, [r7, #12]
 800be1e:	60b9      	str	r1, [r7, #8]
 800be20:	4611      	mov	r1, r2
 800be22:	461a      	mov	r2, r3
 800be24:	460b      	mov	r3, r1
 800be26:	71fb      	strb	r3, [r7, #7]
 800be28:	4613      	mov	r3, r2
 800be2a:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800be2c:	2300      	movs	r3, #0
 800be2e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800be30:	2300      	movs	r3, #0
 800be32:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800be34:	2300      	movs	r3, #0
 800be36:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800be38:	2300      	movs	r3, #0
 800be3a:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 800be3c:	2300      	movs	r3, #0
 800be3e:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800be40:	79bb      	ldrb	r3, [r7, #6]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d003      	beq.n	800be4e <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800be4c:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800be4e:	2201      	movs	r2, #1
 800be50:	2101      	movs	r1, #1
 800be52:	68f8      	ldr	r0, [r7, #12]
 800be54:	f002 fc70 	bl	800e738 <VL53L0X_WrByte>
 800be58:	4603      	mov	r3, r0
 800be5a:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800be5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d105      	bne.n	800be70 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 800be64:	2140      	movs	r1, #64	; 0x40
 800be66:	68f8      	ldr	r0, [r7, #12]
 800be68:	f7ff ff01 	bl	800bc6e <VL53L0X_perform_single_ref_calibration>
 800be6c:	4603      	mov	r3, r0
 800be6e:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800be70:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d115      	bne.n	800bea4 <VL53L0X_perform_vhv_calibration+0x8e>
 800be78:	79fb      	ldrb	r3, [r7, #7]
 800be7a:	2b01      	cmp	r3, #1
 800be7c:	d112      	bne.n	800bea4 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800be7e:	7d39      	ldrb	r1, [r7, #20]
 800be80:	7d7a      	ldrb	r2, [r7, #21]
 800be82:	2300      	movs	r3, #0
 800be84:	9303      	str	r3, [sp, #12]
 800be86:	2301      	movs	r3, #1
 800be88:	9302      	str	r3, [sp, #8]
 800be8a:	f107 0313 	add.w	r3, r7, #19
 800be8e:	9301      	str	r3, [sp, #4]
 800be90:	68bb      	ldr	r3, [r7, #8]
 800be92:	9300      	str	r3, [sp, #0]
 800be94:	460b      	mov	r3, r1
 800be96:	2101      	movs	r1, #1
 800be98:	68f8      	ldr	r0, [r7, #12]
 800be9a:	f7ff ff23 	bl	800bce4 <VL53L0X_ref_calibration_io>
 800be9e:	4603      	mov	r3, r0
 800bea0:	75fb      	strb	r3, [r7, #23]
 800bea2:	e002      	b.n	800beaa <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 800bea4:	68bb      	ldr	r3, [r7, #8]
 800bea6:	2200      	movs	r2, #0
 800bea8:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800beaa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d112      	bne.n	800bed8 <VL53L0X_perform_vhv_calibration+0xc2>
 800beb2:	79bb      	ldrb	r3, [r7, #6]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d00f      	beq.n	800bed8 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800beb8:	7dbb      	ldrb	r3, [r7, #22]
 800beba:	461a      	mov	r2, r3
 800bebc:	2101      	movs	r1, #1
 800bebe:	68f8      	ldr	r0, [r7, #12]
 800bec0:	f002 fc3a 	bl	800e738 <VL53L0X_WrByte>
 800bec4:	4603      	mov	r3, r0
 800bec6:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800bec8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d103      	bne.n	800bed8 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	7dba      	ldrb	r2, [r7, #22]
 800bed4:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800bed8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bedc:	4618      	mov	r0, r3
 800bede:	3718      	adds	r7, #24
 800bee0:	46bd      	mov	sp, r7
 800bee2:	bd80      	pop	{r7, pc}

0800bee4 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b08a      	sub	sp, #40	; 0x28
 800bee8:	af04      	add	r7, sp, #16
 800beea:	60f8      	str	r0, [r7, #12]
 800beec:	60b9      	str	r1, [r7, #8]
 800beee:	4611      	mov	r1, r2
 800bef0:	461a      	mov	r2, r3
 800bef2:	460b      	mov	r3, r1
 800bef4:	71fb      	strb	r3, [r7, #7]
 800bef6:	4613      	mov	r3, r2
 800bef8:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800befa:	2300      	movs	r3, #0
 800befc:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800befe:	2300      	movs	r3, #0
 800bf00:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800bf02:	2300      	movs	r3, #0
 800bf04:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800bf06:	2300      	movs	r3, #0
 800bf08:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800bf0a:	79bb      	ldrb	r3, [r7, #6]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d003      	beq.n	800bf18 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800bf16:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800bf18:	2202      	movs	r2, #2
 800bf1a:	2101      	movs	r1, #1
 800bf1c:	68f8      	ldr	r0, [r7, #12]
 800bf1e:	f002 fc0b 	bl	800e738 <VL53L0X_WrByte>
 800bf22:	4603      	mov	r3, r0
 800bf24:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800bf26:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d105      	bne.n	800bf3a <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800bf2e:	2100      	movs	r1, #0
 800bf30:	68f8      	ldr	r0, [r7, #12]
 800bf32:	f7ff fe9c 	bl	800bc6e <VL53L0X_perform_single_ref_calibration>
 800bf36:	4603      	mov	r3, r0
 800bf38:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800bf3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d115      	bne.n	800bf6e <VL53L0X_perform_phase_calibration+0x8a>
 800bf42:	79fb      	ldrb	r3, [r7, #7]
 800bf44:	2b01      	cmp	r3, #1
 800bf46:	d112      	bne.n	800bf6e <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800bf48:	7d39      	ldrb	r1, [r7, #20]
 800bf4a:	7d7a      	ldrb	r2, [r7, #21]
 800bf4c:	2301      	movs	r3, #1
 800bf4e:	9303      	str	r3, [sp, #12]
 800bf50:	2300      	movs	r3, #0
 800bf52:	9302      	str	r3, [sp, #8]
 800bf54:	68bb      	ldr	r3, [r7, #8]
 800bf56:	9301      	str	r3, [sp, #4]
 800bf58:	f107 0313 	add.w	r3, r7, #19
 800bf5c:	9300      	str	r3, [sp, #0]
 800bf5e:	460b      	mov	r3, r1
 800bf60:	2101      	movs	r1, #1
 800bf62:	68f8      	ldr	r0, [r7, #12]
 800bf64:	f7ff febe 	bl	800bce4 <VL53L0X_ref_calibration_io>
 800bf68:	4603      	mov	r3, r0
 800bf6a:	75fb      	strb	r3, [r7, #23]
 800bf6c:	e002      	b.n	800bf74 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800bf6e:	68bb      	ldr	r3, [r7, #8]
 800bf70:	2200      	movs	r2, #0
 800bf72:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800bf74:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d112      	bne.n	800bfa2 <VL53L0X_perform_phase_calibration+0xbe>
 800bf7c:	79bb      	ldrb	r3, [r7, #6]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d00f      	beq.n	800bfa2 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800bf82:	7dbb      	ldrb	r3, [r7, #22]
 800bf84:	461a      	mov	r2, r3
 800bf86:	2101      	movs	r1, #1
 800bf88:	68f8      	ldr	r0, [r7, #12]
 800bf8a:	f002 fbd5 	bl	800e738 <VL53L0X_WrByte>
 800bf8e:	4603      	mov	r3, r0
 800bf90:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800bf92:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d103      	bne.n	800bfa2 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	7dba      	ldrb	r2, [r7, #22]
 800bf9e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800bfa2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	3718      	adds	r7, #24
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	bd80      	pop	{r7, pc}

0800bfae <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800bfae:	b580      	push	{r7, lr}
 800bfb0:	b086      	sub	sp, #24
 800bfb2:	af00      	add	r7, sp, #0
 800bfb4:	60f8      	str	r0, [r7, #12]
 800bfb6:	60b9      	str	r1, [r7, #8]
 800bfb8:	607a      	str	r2, [r7, #4]
 800bfba:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800bfca:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 800bfcc:	78fa      	ldrb	r2, [r7, #3]
 800bfce:	2300      	movs	r3, #0
 800bfd0:	68b9      	ldr	r1, [r7, #8]
 800bfd2:	68f8      	ldr	r0, [r7, #12]
 800bfd4:	f7ff ff1f 	bl	800be16 <VL53L0X_perform_vhv_calibration>
 800bfd8:	4603      	mov	r3, r0
 800bfda:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800bfdc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d107      	bne.n	800bff4 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 800bfe4:	78fa      	ldrb	r2, [r7, #3]
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	6879      	ldr	r1, [r7, #4]
 800bfea:	68f8      	ldr	r0, [r7, #12]
 800bfec:	f7ff ff7a 	bl	800bee4 <VL53L0X_perform_phase_calibration>
 800bff0:	4603      	mov	r3, r0
 800bff2:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 800bff4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d10f      	bne.n	800c01c <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800bffc:	7dbb      	ldrb	r3, [r7, #22]
 800bffe:	461a      	mov	r2, r3
 800c000:	2101      	movs	r1, #1
 800c002:	68f8      	ldr	r0, [r7, #12]
 800c004:	f002 fb98 	bl	800e738 <VL53L0X_WrByte>
 800c008:	4603      	mov	r3, r0
 800c00a:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800c00c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d103      	bne.n	800c01c <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	7dba      	ldrb	r2, [r7, #22]
 800c018:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800c01c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c020:	4618      	mov	r0, r3
 800c022:	3718      	adds	r7, #24
 800c024:	46bd      	mov	sp, r7
 800c026:	bd80      	pop	{r7, pc}

0800c028 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b086      	sub	sp, #24
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c030:	2300      	movs	r3, #0
 800c032:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 800c034:	2300      	movs	r3, #0
 800c036:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 800c038:	2300      	movs	r3, #0
 800c03a:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800c03c:	f107 030f 	add.w	r3, r7, #15
 800c040:	4619      	mov	r1, r3
 800c042:	6878      	ldr	r0, [r7, #4]
 800c044:	f7fe fdd2 	bl	800abec <VL53L0X_GetMeasurementDataReady>
 800c048:	4603      	mov	r3, r0
 800c04a:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 800c04c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d110      	bne.n	800c076 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 800c054:	7bfb      	ldrb	r3, [r7, #15]
 800c056:	2b01      	cmp	r3, #1
 800c058:	d00f      	beq.n	800c07a <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 800c05a:	693b      	ldr	r3, [r7, #16]
 800c05c:	3301      	adds	r3, #1
 800c05e:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800c060:	693b      	ldr	r3, [r7, #16]
 800c062:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800c066:	d302      	bcc.n	800c06e <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 800c068:	23f9      	movs	r3, #249	; 0xf9
 800c06a:	75fb      	strb	r3, [r7, #23]
			break;
 800c06c:	e006      	b.n	800c07c <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 800c06e:	6878      	ldr	r0, [r7, #4]
 800c070:	f002 fc82 	bl	800e978 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800c074:	e7e2      	b.n	800c03c <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800c076:	bf00      	nop
 800c078:	e000      	b.n	800c07c <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 800c07a:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 800c07c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c080:	4618      	mov	r0, r3
 800c082:	3718      	adds	r7, #24
 800c084:	46bd      	mov	sp, r7
 800c086:	bd80      	pop	{r7, pc}

0800c088 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800c088:	b480      	push	{r7}
 800c08a:	b085      	sub	sp, #20
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	4603      	mov	r3, r0
 800c090:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800c092:	2300      	movs	r3, #0
 800c094:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800c096:	79fb      	ldrb	r3, [r7, #7]
 800c098:	3301      	adds	r3, #1
 800c09a:	b2db      	uxtb	r3, r3
 800c09c:	005b      	lsls	r3, r3, #1
 800c09e:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800c0a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	3714      	adds	r7, #20
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ac:	4770      	bx	lr

0800c0ae <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 800c0ae:	b480      	push	{r7}
 800c0b0:	b085      	sub	sp, #20
 800c0b2:	af00      	add	r7, sp, #0
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 800c0bc:	79fb      	ldrb	r3, [r7, #7]
 800c0be:	085b      	lsrs	r3, r3, #1
 800c0c0:	b2db      	uxtb	r3, r3
 800c0c2:	3b01      	subs	r3, #1
 800c0c4:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 800c0c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	3714      	adds	r7, #20
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d2:	4770      	bx	lr

0800c0d4 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800c0d4:	b480      	push	{r7}
 800c0d6:	b085      	sub	sp, #20
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 800c0dc:	2300      	movs	r3, #0
 800c0de:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800c0e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c0e4:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800c0e6:	e002      	b.n	800c0ee <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800c0e8:	68bb      	ldr	r3, [r7, #8]
 800c0ea:	089b      	lsrs	r3, r3, #2
 800c0ec:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800c0ee:	68ba      	ldr	r2, [r7, #8]
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	429a      	cmp	r2, r3
 800c0f4:	d8f8      	bhi.n	800c0e8 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800c0f6:	e017      	b.n	800c128 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800c0f8:	68fa      	ldr	r2, [r7, #12]
 800c0fa:	68bb      	ldr	r3, [r7, #8]
 800c0fc:	4413      	add	r3, r2
 800c0fe:	687a      	ldr	r2, [r7, #4]
 800c100:	429a      	cmp	r2, r3
 800c102:	d30b      	bcc.n	800c11c <VL53L0X_isqrt+0x48>
			num -= res + bit;
 800c104:	68fa      	ldr	r2, [r7, #12]
 800c106:	68bb      	ldr	r3, [r7, #8]
 800c108:	4413      	add	r3, r2
 800c10a:	687a      	ldr	r2, [r7, #4]
 800c10c:	1ad3      	subs	r3, r2, r3
 800c10e:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	085b      	lsrs	r3, r3, #1
 800c114:	68ba      	ldr	r2, [r7, #8]
 800c116:	4413      	add	r3, r2
 800c118:	60fb      	str	r3, [r7, #12]
 800c11a:	e002      	b.n	800c122 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	085b      	lsrs	r3, r3, #1
 800c120:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800c122:	68bb      	ldr	r3, [r7, #8]
 800c124:	089b      	lsrs	r3, r3, #2
 800c126:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800c128:	68bb      	ldr	r3, [r7, #8]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d1e4      	bne.n	800c0f8 <VL53L0X_isqrt+0x24>
	}

	return res;
 800c12e:	68fb      	ldr	r3, [r7, #12]
}
 800c130:	4618      	mov	r0, r3
 800c132:	3714      	adds	r7, #20
 800c134:	46bd      	mov	sp, r7
 800c136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13a:	4770      	bx	lr

0800c13c <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b086      	sub	sp, #24
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c144:	2300      	movs	r3, #0
 800c146:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 800c148:	2200      	movs	r2, #0
 800c14a:	2183      	movs	r1, #131	; 0x83
 800c14c:	6878      	ldr	r0, [r7, #4]
 800c14e:	f002 faf3 	bl	800e738 <VL53L0X_WrByte>
 800c152:	4603      	mov	r3, r0
 800c154:	461a      	mov	r2, r3
 800c156:	7dfb      	ldrb	r3, [r7, #23]
 800c158:	4313      	orrs	r3, r2
 800c15a:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 800c15c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d11e      	bne.n	800c1a2 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 800c164:	2300      	movs	r3, #0
 800c166:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 800c168:	f107 030f 	add.w	r3, r7, #15
 800c16c:	461a      	mov	r2, r3
 800c16e:	2183      	movs	r1, #131	; 0x83
 800c170:	6878      	ldr	r0, [r7, #4]
 800c172:	f002 fb63 	bl	800e83c <VL53L0X_RdByte>
 800c176:	4603      	mov	r3, r0
 800c178:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800c17a:	7bfb      	ldrb	r3, [r7, #15]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d10a      	bne.n	800c196 <VL53L0X_device_read_strobe+0x5a>
 800c180:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d106      	bne.n	800c196 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 800c188:	693b      	ldr	r3, [r7, #16]
 800c18a:	3301      	adds	r3, #1
 800c18c:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800c18e:	693b      	ldr	r3, [r7, #16]
 800c190:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800c194:	d3e8      	bcc.n	800c168 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800c196:	693b      	ldr	r3, [r7, #16]
 800c198:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800c19c:	d301      	bcc.n	800c1a2 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800c19e:	23f9      	movs	r3, #249	; 0xf9
 800c1a0:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800c1a2:	2201      	movs	r2, #1
 800c1a4:	2183      	movs	r1, #131	; 0x83
 800c1a6:	6878      	ldr	r0, [r7, #4]
 800c1a8:	f002 fac6 	bl	800e738 <VL53L0X_WrByte>
 800c1ac:	4603      	mov	r3, r0
 800c1ae:	461a      	mov	r2, r3
 800c1b0:	7dfb      	ldrb	r3, [r7, #23]
 800c1b2:	4313      	orrs	r3, r2
 800c1b4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800c1b6:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	3718      	adds	r7, #24
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}

0800c1c2 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800c1c2:	b580      	push	{r7, lr}
 800c1c4:	b098      	sub	sp, #96	; 0x60
 800c1c6:	af00      	add	r7, sp, #0
 800c1c8:	6078      	str	r0, [r7, #4]
 800c1ca:	460b      	mov	r3, r1
 800c1cc:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 800c1da:	2300      	movs	r3, #0
 800c1dc:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800c1f2:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800c1f6:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 800c200:	2300      	movs	r3, #0
 800c202:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800c20a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 800c20e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c212:	2b07      	cmp	r3, #7
 800c214:	f000 8408 	beq.w	800ca28 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800c218:	2201      	movs	r2, #1
 800c21a:	2180      	movs	r1, #128	; 0x80
 800c21c:	6878      	ldr	r0, [r7, #4]
 800c21e:	f002 fa8b 	bl	800e738 <VL53L0X_WrByte>
 800c222:	4603      	mov	r3, r0
 800c224:	461a      	mov	r2, r3
 800c226:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c22a:	4313      	orrs	r3, r2
 800c22c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c230:	2201      	movs	r2, #1
 800c232:	21ff      	movs	r1, #255	; 0xff
 800c234:	6878      	ldr	r0, [r7, #4]
 800c236:	f002 fa7f 	bl	800e738 <VL53L0X_WrByte>
 800c23a:	4603      	mov	r3, r0
 800c23c:	461a      	mov	r2, r3
 800c23e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c242:	4313      	orrs	r3, r2
 800c244:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800c248:	2200      	movs	r2, #0
 800c24a:	2100      	movs	r1, #0
 800c24c:	6878      	ldr	r0, [r7, #4]
 800c24e:	f002 fa73 	bl	800e738 <VL53L0X_WrByte>
 800c252:	4603      	mov	r3, r0
 800c254:	461a      	mov	r2, r3
 800c256:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c25a:	4313      	orrs	r3, r2
 800c25c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800c260:	2206      	movs	r2, #6
 800c262:	21ff      	movs	r1, #255	; 0xff
 800c264:	6878      	ldr	r0, [r7, #4]
 800c266:	f002 fa67 	bl	800e738 <VL53L0X_WrByte>
 800c26a:	4603      	mov	r3, r0
 800c26c:	461a      	mov	r2, r3
 800c26e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c272:	4313      	orrs	r3, r2
 800c274:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800c278:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800c27c:	461a      	mov	r2, r3
 800c27e:	2183      	movs	r1, #131	; 0x83
 800c280:	6878      	ldr	r0, [r7, #4]
 800c282:	f002 fadb 	bl	800e83c <VL53L0X_RdByte>
 800c286:	4603      	mov	r3, r0
 800c288:	461a      	mov	r2, r3
 800c28a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c28e:	4313      	orrs	r3, r2
 800c290:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800c294:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c298:	f043 0304 	orr.w	r3, r3, #4
 800c29c:	b2db      	uxtb	r3, r3
 800c29e:	461a      	mov	r2, r3
 800c2a0:	2183      	movs	r1, #131	; 0x83
 800c2a2:	6878      	ldr	r0, [r7, #4]
 800c2a4:	f002 fa48 	bl	800e738 <VL53L0X_WrByte>
 800c2a8:	4603      	mov	r3, r0
 800c2aa:	461a      	mov	r2, r3
 800c2ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c2b0:	4313      	orrs	r3, r2
 800c2b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800c2b6:	2207      	movs	r2, #7
 800c2b8:	21ff      	movs	r1, #255	; 0xff
 800c2ba:	6878      	ldr	r0, [r7, #4]
 800c2bc:	f002 fa3c 	bl	800e738 <VL53L0X_WrByte>
 800c2c0:	4603      	mov	r3, r0
 800c2c2:	461a      	mov	r2, r3
 800c2c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c2c8:	4313      	orrs	r3, r2
 800c2ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800c2ce:	2201      	movs	r2, #1
 800c2d0:	2181      	movs	r1, #129	; 0x81
 800c2d2:	6878      	ldr	r0, [r7, #4]
 800c2d4:	f002 fa30 	bl	800e738 <VL53L0X_WrByte>
 800c2d8:	4603      	mov	r3, r0
 800c2da:	461a      	mov	r2, r3
 800c2dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c2e0:	4313      	orrs	r3, r2
 800c2e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800c2e6:	6878      	ldr	r0, [r7, #4]
 800c2e8:	f002 fb46 	bl	800e978 <VL53L0X_PollingDelay>
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	461a      	mov	r2, r3
 800c2f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c2f4:	4313      	orrs	r3, r2
 800c2f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800c2fa:	2201      	movs	r2, #1
 800c2fc:	2180      	movs	r1, #128	; 0x80
 800c2fe:	6878      	ldr	r0, [r7, #4]
 800c300:	f002 fa1a 	bl	800e738 <VL53L0X_WrByte>
 800c304:	4603      	mov	r3, r0
 800c306:	461a      	mov	r2, r3
 800c308:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c30c:	4313      	orrs	r3, r2
 800c30e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 800c312:	78fb      	ldrb	r3, [r7, #3]
 800c314:	f003 0301 	and.w	r3, r3, #1
 800c318:	2b00      	cmp	r3, #0
 800c31a:	f000 8098 	beq.w	800c44e <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800c31e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c322:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800c326:	2b00      	cmp	r3, #0
 800c328:	f040 8091 	bne.w	800c44e <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800c32c:	226b      	movs	r2, #107	; 0x6b
 800c32e:	2194      	movs	r1, #148	; 0x94
 800c330:	6878      	ldr	r0, [r7, #4]
 800c332:	f002 fa01 	bl	800e738 <VL53L0X_WrByte>
 800c336:	4603      	mov	r3, r0
 800c338:	461a      	mov	r2, r3
 800c33a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c33e:	4313      	orrs	r3, r2
 800c340:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c344:	6878      	ldr	r0, [r7, #4]
 800c346:	f7ff fef9 	bl	800c13c <VL53L0X_device_read_strobe>
 800c34a:	4603      	mov	r3, r0
 800c34c:	461a      	mov	r2, r3
 800c34e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c352:	4313      	orrs	r3, r2
 800c354:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c358:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c35c:	461a      	mov	r2, r3
 800c35e:	2190      	movs	r1, #144	; 0x90
 800c360:	6878      	ldr	r0, [r7, #4]
 800c362:	f002 facd 	bl	800e900 <VL53L0X_RdDWord>
 800c366:	4603      	mov	r3, r0
 800c368:	461a      	mov	r2, r3
 800c36a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c36e:	4313      	orrs	r3, r2
 800c370:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 800c374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c376:	0a1b      	lsrs	r3, r3, #8
 800c378:	b2db      	uxtb	r3, r3
 800c37a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c37e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800c382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c384:	0bdb      	lsrs	r3, r3, #15
 800c386:	b2db      	uxtb	r3, r3
 800c388:	f003 0301 	and.w	r3, r3, #1
 800c38c:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800c390:	2224      	movs	r2, #36	; 0x24
 800c392:	2194      	movs	r1, #148	; 0x94
 800c394:	6878      	ldr	r0, [r7, #4]
 800c396:	f002 f9cf 	bl	800e738 <VL53L0X_WrByte>
 800c39a:	4603      	mov	r3, r0
 800c39c:	461a      	mov	r2, r3
 800c39e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c3a2:	4313      	orrs	r3, r2
 800c3a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c3a8:	6878      	ldr	r0, [r7, #4]
 800c3aa:	f7ff fec7 	bl	800c13c <VL53L0X_device_read_strobe>
 800c3ae:	4603      	mov	r3, r0
 800c3b0:	461a      	mov	r2, r3
 800c3b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c3b6:	4313      	orrs	r3, r2
 800c3b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c3bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c3c0:	461a      	mov	r2, r3
 800c3c2:	2190      	movs	r1, #144	; 0x90
 800c3c4:	6878      	ldr	r0, [r7, #4]
 800c3c6:	f002 fa9b 	bl	800e900 <VL53L0X_RdDWord>
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	461a      	mov	r2, r3
 800c3ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c3d2:	4313      	orrs	r3, r2
 800c3d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800c3d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3da:	0e1b      	lsrs	r3, r3, #24
 800c3dc:	b2db      	uxtb	r3, r3
 800c3de:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800c3e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3e2:	0c1b      	lsrs	r3, r3, #16
 800c3e4:	b2db      	uxtb	r3, r3
 800c3e6:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800c3e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ea:	0a1b      	lsrs	r3, r3, #8
 800c3ec:	b2db      	uxtb	r3, r3
 800c3ee:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800c3f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3f2:	b2db      	uxtb	r3, r3
 800c3f4:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800c3f6:	2225      	movs	r2, #37	; 0x25
 800c3f8:	2194      	movs	r1, #148	; 0x94
 800c3fa:	6878      	ldr	r0, [r7, #4]
 800c3fc:	f002 f99c 	bl	800e738 <VL53L0X_WrByte>
 800c400:	4603      	mov	r3, r0
 800c402:	461a      	mov	r2, r3
 800c404:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c408:	4313      	orrs	r3, r2
 800c40a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c40e:	6878      	ldr	r0, [r7, #4]
 800c410:	f7ff fe94 	bl	800c13c <VL53L0X_device_read_strobe>
 800c414:	4603      	mov	r3, r0
 800c416:	461a      	mov	r2, r3
 800c418:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c41c:	4313      	orrs	r3, r2
 800c41e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c422:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c426:	461a      	mov	r2, r3
 800c428:	2190      	movs	r1, #144	; 0x90
 800c42a:	6878      	ldr	r0, [r7, #4]
 800c42c:	f002 fa68 	bl	800e900 <VL53L0X_RdDWord>
 800c430:	4603      	mov	r3, r0
 800c432:	461a      	mov	r2, r3
 800c434:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c438:	4313      	orrs	r3, r2
 800c43a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800c43e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c440:	0e1b      	lsrs	r3, r3, #24
 800c442:	b2db      	uxtb	r3, r3
 800c444:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 800c446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c448:	0c1b      	lsrs	r3, r3, #16
 800c44a:	b2db      	uxtb	r3, r3
 800c44c:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800c44e:	78fb      	ldrb	r3, [r7, #3]
 800c450:	f003 0302 	and.w	r3, r3, #2
 800c454:	2b00      	cmp	r3, #0
 800c456:	f000 8189 	beq.w	800c76c <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800c45a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c45e:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800c462:	2b00      	cmp	r3, #0
 800c464:	f040 8182 	bne.w	800c76c <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800c468:	2202      	movs	r2, #2
 800c46a:	2194      	movs	r1, #148	; 0x94
 800c46c:	6878      	ldr	r0, [r7, #4]
 800c46e:	f002 f963 	bl	800e738 <VL53L0X_WrByte>
 800c472:	4603      	mov	r3, r0
 800c474:	461a      	mov	r2, r3
 800c476:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c47a:	4313      	orrs	r3, r2
 800c47c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c480:	6878      	ldr	r0, [r7, #4]
 800c482:	f7ff fe5b 	bl	800c13c <VL53L0X_device_read_strobe>
 800c486:	4603      	mov	r3, r0
 800c488:	461a      	mov	r2, r3
 800c48a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c48e:	4313      	orrs	r3, r2
 800c490:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800c494:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800c498:	461a      	mov	r2, r3
 800c49a:	2190      	movs	r1, #144	; 0x90
 800c49c:	6878      	ldr	r0, [r7, #4]
 800c49e:	f002 f9cd 	bl	800e83c <VL53L0X_RdByte>
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	461a      	mov	r2, r3
 800c4a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c4aa:	4313      	orrs	r3, r2
 800c4ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800c4b0:	227b      	movs	r2, #123	; 0x7b
 800c4b2:	2194      	movs	r1, #148	; 0x94
 800c4b4:	6878      	ldr	r0, [r7, #4]
 800c4b6:	f002 f93f 	bl	800e738 <VL53L0X_WrByte>
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	461a      	mov	r2, r3
 800c4be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c4c2:	4313      	orrs	r3, r2
 800c4c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c4c8:	6878      	ldr	r0, [r7, #4]
 800c4ca:	f7ff fe37 	bl	800c13c <VL53L0X_device_read_strobe>
 800c4ce:	4603      	mov	r3, r0
 800c4d0:	461a      	mov	r2, r3
 800c4d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c4d6:	4313      	orrs	r3, r2
 800c4d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800c4dc:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800c4e0:	461a      	mov	r2, r3
 800c4e2:	2190      	movs	r1, #144	; 0x90
 800c4e4:	6878      	ldr	r0, [r7, #4]
 800c4e6:	f002 f9a9 	bl	800e83c <VL53L0X_RdByte>
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	461a      	mov	r2, r3
 800c4ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c4f2:	4313      	orrs	r3, r2
 800c4f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800c4f8:	2277      	movs	r2, #119	; 0x77
 800c4fa:	2194      	movs	r1, #148	; 0x94
 800c4fc:	6878      	ldr	r0, [r7, #4]
 800c4fe:	f002 f91b 	bl	800e738 <VL53L0X_WrByte>
 800c502:	4603      	mov	r3, r0
 800c504:	461a      	mov	r2, r3
 800c506:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c50a:	4313      	orrs	r3, r2
 800c50c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c510:	6878      	ldr	r0, [r7, #4]
 800c512:	f7ff fe13 	bl	800c13c <VL53L0X_device_read_strobe>
 800c516:	4603      	mov	r3, r0
 800c518:	461a      	mov	r2, r3
 800c51a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c51e:	4313      	orrs	r3, r2
 800c520:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c524:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c528:	461a      	mov	r2, r3
 800c52a:	2190      	movs	r1, #144	; 0x90
 800c52c:	6878      	ldr	r0, [r7, #4]
 800c52e:	f002 f9e7 	bl	800e900 <VL53L0X_RdDWord>
 800c532:	4603      	mov	r3, r0
 800c534:	461a      	mov	r2, r3
 800c536:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c53a:	4313      	orrs	r3, r2
 800c53c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800c540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c542:	0e5b      	lsrs	r3, r3, #25
 800c544:	b2db      	uxtb	r3, r3
 800c546:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c54a:	b2db      	uxtb	r3, r3
 800c54c:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800c54e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c550:	0c9b      	lsrs	r3, r3, #18
 800c552:	b2db      	uxtb	r3, r3
 800c554:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c558:	b2db      	uxtb	r3, r3
 800c55a:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800c55c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c55e:	0adb      	lsrs	r3, r3, #11
 800c560:	b2db      	uxtb	r3, r3
 800c562:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c566:	b2db      	uxtb	r3, r3
 800c568:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800c56a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c56c:	091b      	lsrs	r3, r3, #4
 800c56e:	b2db      	uxtb	r3, r3
 800c570:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c574:	b2db      	uxtb	r3, r3
 800c576:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800c578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c57a:	b2db      	uxtb	r3, r3
 800c57c:	00db      	lsls	r3, r3, #3
 800c57e:	b2db      	uxtb	r3, r3
 800c580:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800c584:	b2db      	uxtb	r3, r3
 800c586:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800c58a:	2278      	movs	r2, #120	; 0x78
 800c58c:	2194      	movs	r1, #148	; 0x94
 800c58e:	6878      	ldr	r0, [r7, #4]
 800c590:	f002 f8d2 	bl	800e738 <VL53L0X_WrByte>
 800c594:	4603      	mov	r3, r0
 800c596:	461a      	mov	r2, r3
 800c598:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c59c:	4313      	orrs	r3, r2
 800c59e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c5a2:	6878      	ldr	r0, [r7, #4]
 800c5a4:	f7ff fdca 	bl	800c13c <VL53L0X_device_read_strobe>
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	461a      	mov	r2, r3
 800c5ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c5b0:	4313      	orrs	r3, r2
 800c5b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c5b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c5ba:	461a      	mov	r2, r3
 800c5bc:	2190      	movs	r1, #144	; 0x90
 800c5be:	6878      	ldr	r0, [r7, #4]
 800c5c0:	f002 f99e 	bl	800e900 <VL53L0X_RdDWord>
 800c5c4:	4603      	mov	r3, r0
 800c5c6:	461a      	mov	r2, r3
 800c5c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c5cc:	4313      	orrs	r3, r2
 800c5ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800c5d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5d4:	0f5b      	lsrs	r3, r3, #29
 800c5d6:	b2db      	uxtb	r3, r3
 800c5d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c5dc:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800c5de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c5e2:	4413      	add	r3, r2
 800c5e4:	b2db      	uxtb	r3, r3
 800c5e6:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800c5e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ea:	0d9b      	lsrs	r3, r3, #22
 800c5ec:	b2db      	uxtb	r3, r3
 800c5ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c5f2:	b2db      	uxtb	r3, r3
 800c5f4:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800c5f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5f8:	0bdb      	lsrs	r3, r3, #15
 800c5fa:	b2db      	uxtb	r3, r3
 800c5fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c600:	b2db      	uxtb	r3, r3
 800c602:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800c604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c606:	0a1b      	lsrs	r3, r3, #8
 800c608:	b2db      	uxtb	r3, r3
 800c60a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c60e:	b2db      	uxtb	r3, r3
 800c610:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800c612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c614:	085b      	lsrs	r3, r3, #1
 800c616:	b2db      	uxtb	r3, r3
 800c618:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c61c:	b2db      	uxtb	r3, r3
 800c61e:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800c620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c622:	b2db      	uxtb	r3, r3
 800c624:	019b      	lsls	r3, r3, #6
 800c626:	b2db      	uxtb	r3, r3
 800c628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c62c:	b2db      	uxtb	r3, r3
 800c62e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800c632:	2279      	movs	r2, #121	; 0x79
 800c634:	2194      	movs	r1, #148	; 0x94
 800c636:	6878      	ldr	r0, [r7, #4]
 800c638:	f002 f87e 	bl	800e738 <VL53L0X_WrByte>
 800c63c:	4603      	mov	r3, r0
 800c63e:	461a      	mov	r2, r3
 800c640:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c644:	4313      	orrs	r3, r2
 800c646:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800c64a:	6878      	ldr	r0, [r7, #4]
 800c64c:	f7ff fd76 	bl	800c13c <VL53L0X_device_read_strobe>
 800c650:	4603      	mov	r3, r0
 800c652:	461a      	mov	r2, r3
 800c654:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c658:	4313      	orrs	r3, r2
 800c65a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c65e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c662:	461a      	mov	r2, r3
 800c664:	2190      	movs	r1, #144	; 0x90
 800c666:	6878      	ldr	r0, [r7, #4]
 800c668:	f002 f94a 	bl	800e900 <VL53L0X_RdDWord>
 800c66c:	4603      	mov	r3, r0
 800c66e:	461a      	mov	r2, r3
 800c670:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c674:	4313      	orrs	r3, r2
 800c676:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800c67a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c67c:	0e9b      	lsrs	r3, r3, #26
 800c67e:	b2db      	uxtb	r3, r3
 800c680:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c684:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800c686:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c68a:	4413      	add	r3, r2
 800c68c:	b2db      	uxtb	r3, r3
 800c68e:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800c690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c692:	0cdb      	lsrs	r3, r3, #19
 800c694:	b2db      	uxtb	r3, r3
 800c696:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c69a:	b2db      	uxtb	r3, r3
 800c69c:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800c69e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6a0:	0b1b      	lsrs	r3, r3, #12
 800c6a2:	b2db      	uxtb	r3, r3
 800c6a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6a8:	b2db      	uxtb	r3, r3
 800c6aa:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800c6ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ae:	095b      	lsrs	r3, r3, #5
 800c6b0:	b2db      	uxtb	r3, r3
 800c6b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6b6:	b2db      	uxtb	r3, r3
 800c6b8:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800c6ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6bc:	b2db      	uxtb	r3, r3
 800c6be:	009b      	lsls	r3, r3, #2
 800c6c0:	b2db      	uxtb	r3, r3
 800c6c2:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800c6c6:	b2db      	uxtb	r3, r3
 800c6c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800c6cc:	227a      	movs	r2, #122	; 0x7a
 800c6ce:	2194      	movs	r1, #148	; 0x94
 800c6d0:	6878      	ldr	r0, [r7, #4]
 800c6d2:	f002 f831 	bl	800e738 <VL53L0X_WrByte>
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	461a      	mov	r2, r3
 800c6da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c6de:	4313      	orrs	r3, r2
 800c6e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800c6e4:	6878      	ldr	r0, [r7, #4]
 800c6e6:	f7ff fd29 	bl	800c13c <VL53L0X_device_read_strobe>
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	461a      	mov	r2, r3
 800c6ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c6f2:	4313      	orrs	r3, r2
 800c6f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c6f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c6fc:	461a      	mov	r2, r3
 800c6fe:	2190      	movs	r1, #144	; 0x90
 800c700:	6878      	ldr	r0, [r7, #4]
 800c702:	f002 f8fd 	bl	800e900 <VL53L0X_RdDWord>
 800c706:	4603      	mov	r3, r0
 800c708:	461a      	mov	r2, r3
 800c70a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c70e:	4313      	orrs	r3, r2
 800c710:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800c714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c716:	0f9b      	lsrs	r3, r3, #30
 800c718:	b2db      	uxtb	r3, r3
 800c71a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c71e:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800c720:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c724:	4413      	add	r3, r2
 800c726:	b2db      	uxtb	r3, r3
 800c728:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800c72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c72c:	0ddb      	lsrs	r3, r3, #23
 800c72e:	b2db      	uxtb	r3, r3
 800c730:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c734:	b2db      	uxtb	r3, r3
 800c736:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800c738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c73a:	0c1b      	lsrs	r3, r3, #16
 800c73c:	b2db      	uxtb	r3, r3
 800c73e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c742:	b2db      	uxtb	r3, r3
 800c744:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800c746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c748:	0a5b      	lsrs	r3, r3, #9
 800c74a:	b2db      	uxtb	r3, r3
 800c74c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c750:	b2db      	uxtb	r3, r3
 800c752:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800c756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c758:	089b      	lsrs	r3, r3, #2
 800c75a:	b2db      	uxtb	r3, r3
 800c75c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c760:	b2db      	uxtb	r3, r3
 800c762:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 800c766:	2300      	movs	r3, #0
 800c768:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 800c76c:	78fb      	ldrb	r3, [r7, #3]
 800c76e:	f003 0304 	and.w	r3, r3, #4
 800c772:	2b00      	cmp	r3, #0
 800c774:	f000 80f1 	beq.w	800c95a <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800c778:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c77c:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800c780:	2b00      	cmp	r3, #0
 800c782:	f040 80ea 	bne.w	800c95a <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800c786:	227b      	movs	r2, #123	; 0x7b
 800c788:	2194      	movs	r1, #148	; 0x94
 800c78a:	6878      	ldr	r0, [r7, #4]
 800c78c:	f001 ffd4 	bl	800e738 <VL53L0X_WrByte>
 800c790:	4603      	mov	r3, r0
 800c792:	461a      	mov	r2, r3
 800c794:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c798:	4313      	orrs	r3, r2
 800c79a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c79e:	6878      	ldr	r0, [r7, #4]
 800c7a0:	f7ff fccc 	bl	800c13c <VL53L0X_device_read_strobe>
 800c7a4:	4603      	mov	r3, r0
 800c7a6:	461a      	mov	r2, r3
 800c7a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c7ac:	4313      	orrs	r3, r2
 800c7ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800c7b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c7b6:	461a      	mov	r2, r3
 800c7b8:	2190      	movs	r1, #144	; 0x90
 800c7ba:	6878      	ldr	r0, [r7, #4]
 800c7bc:	f002 f8a0 	bl	800e900 <VL53L0X_RdDWord>
 800c7c0:	4603      	mov	r3, r0
 800c7c2:	461a      	mov	r2, r3
 800c7c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c7c8:	4313      	orrs	r3, r2
 800c7ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800c7ce:	227c      	movs	r2, #124	; 0x7c
 800c7d0:	2194      	movs	r1, #148	; 0x94
 800c7d2:	6878      	ldr	r0, [r7, #4]
 800c7d4:	f001 ffb0 	bl	800e738 <VL53L0X_WrByte>
 800c7d8:	4603      	mov	r3, r0
 800c7da:	461a      	mov	r2, r3
 800c7dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c7e0:	4313      	orrs	r3, r2
 800c7e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c7e6:	6878      	ldr	r0, [r7, #4]
 800c7e8:	f7ff fca8 	bl	800c13c <VL53L0X_device_read_strobe>
 800c7ec:	4603      	mov	r3, r0
 800c7ee:	461a      	mov	r2, r3
 800c7f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c7f4:	4313      	orrs	r3, r2
 800c7f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800c7fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c7fe:	461a      	mov	r2, r3
 800c800:	2190      	movs	r1, #144	; 0x90
 800c802:	6878      	ldr	r0, [r7, #4]
 800c804:	f002 f87c 	bl	800e900 <VL53L0X_RdDWord>
 800c808:	4603      	mov	r3, r0
 800c80a:	461a      	mov	r2, r3
 800c80c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c810:	4313      	orrs	r3, r2
 800c812:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800c816:	2273      	movs	r2, #115	; 0x73
 800c818:	2194      	movs	r1, #148	; 0x94
 800c81a:	6878      	ldr	r0, [r7, #4]
 800c81c:	f001 ff8c 	bl	800e738 <VL53L0X_WrByte>
 800c820:	4603      	mov	r3, r0
 800c822:	461a      	mov	r2, r3
 800c824:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c828:	4313      	orrs	r3, r2
 800c82a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c82e:	6878      	ldr	r0, [r7, #4]
 800c830:	f7ff fc84 	bl	800c13c <VL53L0X_device_read_strobe>
 800c834:	4603      	mov	r3, r0
 800c836:	461a      	mov	r2, r3
 800c838:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c83c:	4313      	orrs	r3, r2
 800c83e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c842:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c846:	461a      	mov	r2, r3
 800c848:	2190      	movs	r1, #144	; 0x90
 800c84a:	6878      	ldr	r0, [r7, #4]
 800c84c:	f002 f858 	bl	800e900 <VL53L0X_RdDWord>
 800c850:	4603      	mov	r3, r0
 800c852:	461a      	mov	r2, r3
 800c854:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c858:	4313      	orrs	r3, r2
 800c85a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800c85e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c860:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800c862:	b29b      	uxth	r3, r3
 800c864:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800c866:	2274      	movs	r2, #116	; 0x74
 800c868:	2194      	movs	r1, #148	; 0x94
 800c86a:	6878      	ldr	r0, [r7, #4]
 800c86c:	f001 ff64 	bl	800e738 <VL53L0X_WrByte>
 800c870:	4603      	mov	r3, r0
 800c872:	461a      	mov	r2, r3
 800c874:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c878:	4313      	orrs	r3, r2
 800c87a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c87e:	6878      	ldr	r0, [r7, #4]
 800c880:	f7ff fc5c 	bl	800c13c <VL53L0X_device_read_strobe>
 800c884:	4603      	mov	r3, r0
 800c886:	461a      	mov	r2, r3
 800c888:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c88c:	4313      	orrs	r3, r2
 800c88e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c892:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c896:	461a      	mov	r2, r3
 800c898:	2190      	movs	r1, #144	; 0x90
 800c89a:	6878      	ldr	r0, [r7, #4]
 800c89c:	f002 f830 	bl	800e900 <VL53L0X_RdDWord>
 800c8a0:	4603      	mov	r3, r0
 800c8a2:	461a      	mov	r2, r3
 800c8a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c8a8:	4313      	orrs	r3, r2
 800c8aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800c8ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8b0:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800c8b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c8b4:	4313      	orrs	r3, r2
 800c8b6:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800c8b8:	2275      	movs	r2, #117	; 0x75
 800c8ba:	2194      	movs	r1, #148	; 0x94
 800c8bc:	6878      	ldr	r0, [r7, #4]
 800c8be:	f001 ff3b 	bl	800e738 <VL53L0X_WrByte>
 800c8c2:	4603      	mov	r3, r0
 800c8c4:	461a      	mov	r2, r3
 800c8c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c8ca:	4313      	orrs	r3, r2
 800c8cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c8d0:	6878      	ldr	r0, [r7, #4]
 800c8d2:	f7ff fc33 	bl	800c13c <VL53L0X_device_read_strobe>
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	461a      	mov	r2, r3
 800c8da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c8de:	4313      	orrs	r3, r2
 800c8e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c8e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c8e8:	461a      	mov	r2, r3
 800c8ea:	2190      	movs	r1, #144	; 0x90
 800c8ec:	6878      	ldr	r0, [r7, #4]
 800c8ee:	f002 f807 	bl	800e900 <VL53L0X_RdDWord>
 800c8f2:	4603      	mov	r3, r0
 800c8f4:	461a      	mov	r2, r3
 800c8f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c8fa:	4313      	orrs	r3, r2
 800c8fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 800c900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c902:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 800c904:	b29b      	uxth	r3, r3
 800c906:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800c908:	2276      	movs	r2, #118	; 0x76
 800c90a:	2194      	movs	r1, #148	; 0x94
 800c90c:	6878      	ldr	r0, [r7, #4]
 800c90e:	f001 ff13 	bl	800e738 <VL53L0X_WrByte>
 800c912:	4603      	mov	r3, r0
 800c914:	461a      	mov	r2, r3
 800c916:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c91a:	4313      	orrs	r3, r2
 800c91c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c920:	6878      	ldr	r0, [r7, #4]
 800c922:	f7ff fc0b 	bl	800c13c <VL53L0X_device_read_strobe>
 800c926:	4603      	mov	r3, r0
 800c928:	461a      	mov	r2, r3
 800c92a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c92e:	4313      	orrs	r3, r2
 800c930:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c934:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c938:	461a      	mov	r2, r3
 800c93a:	2190      	movs	r1, #144	; 0x90
 800c93c:	6878      	ldr	r0, [r7, #4]
 800c93e:	f001 ffdf 	bl	800e900 <VL53L0X_RdDWord>
 800c942:	4603      	mov	r3, r0
 800c944:	461a      	mov	r2, r3
 800c946:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c94a:	4313      	orrs	r3, r2
 800c94c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800c950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c952:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800c954:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c956:	4313      	orrs	r3, r2
 800c958:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800c95a:	2200      	movs	r2, #0
 800c95c:	2181      	movs	r1, #129	; 0x81
 800c95e:	6878      	ldr	r0, [r7, #4]
 800c960:	f001 feea 	bl	800e738 <VL53L0X_WrByte>
 800c964:	4603      	mov	r3, r0
 800c966:	461a      	mov	r2, r3
 800c968:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c96c:	4313      	orrs	r3, r2
 800c96e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800c972:	2206      	movs	r2, #6
 800c974:	21ff      	movs	r1, #255	; 0xff
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	f001 fede 	bl	800e738 <VL53L0X_WrByte>
 800c97c:	4603      	mov	r3, r0
 800c97e:	461a      	mov	r2, r3
 800c980:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c984:	4313      	orrs	r3, r2
 800c986:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800c98a:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800c98e:	461a      	mov	r2, r3
 800c990:	2183      	movs	r1, #131	; 0x83
 800c992:	6878      	ldr	r0, [r7, #4]
 800c994:	f001 ff52 	bl	800e83c <VL53L0X_RdByte>
 800c998:	4603      	mov	r3, r0
 800c99a:	461a      	mov	r2, r3
 800c99c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c9a0:	4313      	orrs	r3, r2
 800c9a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800c9a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c9aa:	f023 0304 	bic.w	r3, r3, #4
 800c9ae:	b2db      	uxtb	r3, r3
 800c9b0:	461a      	mov	r2, r3
 800c9b2:	2183      	movs	r1, #131	; 0x83
 800c9b4:	6878      	ldr	r0, [r7, #4]
 800c9b6:	f001 febf 	bl	800e738 <VL53L0X_WrByte>
 800c9ba:	4603      	mov	r3, r0
 800c9bc:	461a      	mov	r2, r3
 800c9be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c9c2:	4313      	orrs	r3, r2
 800c9c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c9c8:	2201      	movs	r2, #1
 800c9ca:	21ff      	movs	r1, #255	; 0xff
 800c9cc:	6878      	ldr	r0, [r7, #4]
 800c9ce:	f001 feb3 	bl	800e738 <VL53L0X_WrByte>
 800c9d2:	4603      	mov	r3, r0
 800c9d4:	461a      	mov	r2, r3
 800c9d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c9da:	4313      	orrs	r3, r2
 800c9dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800c9e0:	2201      	movs	r2, #1
 800c9e2:	2100      	movs	r1, #0
 800c9e4:	6878      	ldr	r0, [r7, #4]
 800c9e6:	f001 fea7 	bl	800e738 <VL53L0X_WrByte>
 800c9ea:	4603      	mov	r3, r0
 800c9ec:	461a      	mov	r2, r3
 800c9ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c9f2:	4313      	orrs	r3, r2
 800c9f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	21ff      	movs	r1, #255	; 0xff
 800c9fc:	6878      	ldr	r0, [r7, #4]
 800c9fe:	f001 fe9b 	bl	800e738 <VL53L0X_WrByte>
 800ca02:	4603      	mov	r3, r0
 800ca04:	461a      	mov	r2, r3
 800ca06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ca0a:	4313      	orrs	r3, r2
 800ca0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800ca10:	2200      	movs	r2, #0
 800ca12:	2180      	movs	r1, #128	; 0x80
 800ca14:	6878      	ldr	r0, [r7, #4]
 800ca16:	f001 fe8f 	bl	800e738 <VL53L0X_WrByte>
 800ca1a:	4603      	mov	r3, r0
 800ca1c:	461a      	mov	r2, r3
 800ca1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ca22:	4313      	orrs	r3, r2
 800ca24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800ca28:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	f040 808f 	bne.w	800cb50 <VL53L0X_get_info_from_device+0x98e>
 800ca32:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ca36:	2b07      	cmp	r3, #7
 800ca38:	f000 808a 	beq.w	800cb50 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800ca3c:	78fb      	ldrb	r3, [r7, #3]
 800ca3e:	f003 0301 	and.w	r3, r3, #1
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d024      	beq.n	800ca90 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800ca46:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ca4a:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d11e      	bne.n	800ca90 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800ca58:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800ca62:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800ca66:	2300      	movs	r3, #0
 800ca68:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ca6a:	e00e      	b.n	800ca8a <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800ca6c:	f107 0208 	add.w	r2, r7, #8
 800ca70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca72:	4413      	add	r3, r2
 800ca74:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800ca76:	687a      	ldr	r2, [r7, #4]
 800ca78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca7a:	4413      	add	r3, r2
 800ca7c:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800ca80:	460a      	mov	r2, r1
 800ca82:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800ca84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca86:	3301      	adds	r3, #1
 800ca88:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ca8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca8c:	2b05      	cmp	r3, #5
 800ca8e:	dded      	ble.n	800ca6c <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 800ca90:	78fb      	ldrb	r3, [r7, #3]
 800ca92:	f003 0302 	and.w	r3, r3, #2
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d018      	beq.n	800cacc <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800ca9a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ca9e:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d112      	bne.n	800cacc <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800caa6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800cab0:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	33f3      	adds	r3, #243	; 0xf3
 800cabe:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800cac0:	f107 0310 	add.w	r3, r7, #16
 800cac4:	4619      	mov	r1, r3
 800cac6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cac8:	f002 feb7 	bl	800f83a <strcpy>

		}

		if (((option & 4) == 4) &&
 800cacc:	78fb      	ldrb	r3, [r7, #3]
 800cace:	f003 0304 	and.w	r3, r3, #4
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d030      	beq.n	800cb38 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800cad6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cada:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d12a      	bne.n	800cb38 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800cae2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800caea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800caf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800caf4:	025b      	lsls	r3, r3, #9
 800caf6:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cafc:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 800cb00:	2300      	movs	r3, #0
 800cb02:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800cb06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d011      	beq.n	800cb30 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 800cb0c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cb0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb10:	1ad3      	subs	r3, r2, r3
 800cb12:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800cb14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cb1a:	fb02 f303 	mul.w	r3, r2, r3
 800cb1e:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 800cb20:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 800cb24:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800cb28:	425b      	negs	r3, r3
 800cb2a:	b29b      	uxth	r3, r3
 800cb2c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 800cb30:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800cb38:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800cb3c:	78fb      	ldrb	r3, [r7, #3]
 800cb3e:	4313      	orrs	r3, r2
 800cb40:	b2db      	uxtb	r3, r3
 800cb42:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800cb46:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800cb50:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800cb54:	4618      	mov	r0, r3
 800cb56:	3760      	adds	r7, #96	; 0x60
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	bd80      	pop	{r7, pc}

0800cb5c <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 800cb5c:	b480      	push	{r7}
 800cb5e:	b087      	sub	sp, #28
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
 800cb64:	460b      	mov	r3, r1
 800cb66:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 800cb68:	f240 6277 	movw	r2, #1655	; 0x677
 800cb6c:	f04f 0300 	mov.w	r3, #0
 800cb70:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 800cb74:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800cb78:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800cb7a:	78fb      	ldrb	r3, [r7, #3]
 800cb7c:	68fa      	ldr	r2, [r7, #12]
 800cb7e:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800cb82:	693a      	ldr	r2, [r7, #16]
 800cb84:	fb02 f303 	mul.w	r3, r2, r3
 800cb88:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800cb8a:	68bb      	ldr	r3, [r7, #8]
}
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	371c      	adds	r7, #28
 800cb90:	46bd      	mov	sp, r7
 800cb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb96:	4770      	bx	lr

0800cb98 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800cb98:	b480      	push	{r7}
 800cb9a:	b087      	sub	sp, #28
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800cba0:	2300      	movs	r3, #0
 800cba2:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800cba4:	2300      	movs	r3, #0
 800cba6:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800cba8:	2300      	movs	r3, #0
 800cbaa:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d017      	beq.n	800cbe2 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	3b01      	subs	r3, #1
 800cbb6:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800cbb8:	e005      	b.n	800cbc6 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800cbba:	693b      	ldr	r3, [r7, #16]
 800cbbc:	085b      	lsrs	r3, r3, #1
 800cbbe:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800cbc0:	89fb      	ldrh	r3, [r7, #14]
 800cbc2:	3301      	adds	r3, #1
 800cbc4:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800cbc6:	693b      	ldr	r3, [r7, #16]
 800cbc8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d1f4      	bne.n	800cbba <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800cbd0:	89fb      	ldrh	r3, [r7, #14]
 800cbd2:	021b      	lsls	r3, r3, #8
 800cbd4:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800cbd6:	693b      	ldr	r3, [r7, #16]
 800cbd8:	b29b      	uxth	r3, r3
 800cbda:	b2db      	uxtb	r3, r3
 800cbdc:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800cbde:	4413      	add	r3, r2
 800cbe0:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800cbe2:	8afb      	ldrh	r3, [r7, #22]

}
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	371c      	adds	r7, #28
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbee:	4770      	bx	lr

0800cbf0 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800cbf0:	b480      	push	{r7}
 800cbf2:	b085      	sub	sp, #20
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	4603      	mov	r3, r0
 800cbf8:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800cbfe:	88fb      	ldrh	r3, [r7, #6]
 800cc00:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800cc02:	88fa      	ldrh	r2, [r7, #6]
 800cc04:	0a12      	lsrs	r2, r2, #8
 800cc06:	b292      	uxth	r2, r2
 800cc08:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800cc0a:	3301      	adds	r3, #1
 800cc0c:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800cc0e:	68fb      	ldr	r3, [r7, #12]
}
 800cc10:	4618      	mov	r0, r3
 800cc12:	3714      	adds	r7, #20
 800cc14:	46bd      	mov	sp, r7
 800cc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1a:	4770      	bx	lr

0800cc1c <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b088      	sub	sp, #32
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	60f8      	str	r0, [r7, #12]
 800cc24:	60b9      	str	r1, [r7, #8]
 800cc26:	4613      	mov	r3, r2
 800cc28:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800cc2e:	79fb      	ldrb	r3, [r7, #7]
 800cc30:	4619      	mov	r1, r3
 800cc32:	68f8      	ldr	r0, [r7, #12]
 800cc34:	f7ff ff92 	bl	800cb5c <VL53L0X_calc_macro_period_ps>
 800cc38:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800cc3a:	69bb      	ldr	r3, [r7, #24]
 800cc3c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800cc40:	4a0a      	ldr	r2, [pc, #40]	; (800cc6c <VL53L0X_calc_timeout_mclks+0x50>)
 800cc42:	fba2 2303 	umull	r2, r3, r2, r3
 800cc46:	099b      	lsrs	r3, r3, #6
 800cc48:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800cc4a:	68bb      	ldr	r3, [r7, #8]
 800cc4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cc50:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 800cc54:	697b      	ldr	r3, [r7, #20]
 800cc56:	085b      	lsrs	r3, r3, #1
 800cc58:	441a      	add	r2, r3
	timeout_period_mclks =
 800cc5a:	697b      	ldr	r3, [r7, #20]
 800cc5c:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc60:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 800cc62:	69fb      	ldr	r3, [r7, #28]
}
 800cc64:	4618      	mov	r0, r3
 800cc66:	3720      	adds	r7, #32
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	bd80      	pop	{r7, pc}
 800cc6c:	10624dd3 	.word	0x10624dd3

0800cc70 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b086      	sub	sp, #24
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
 800cc78:	460b      	mov	r3, r1
 800cc7a:	807b      	strh	r3, [r7, #2]
 800cc7c:	4613      	mov	r3, r2
 800cc7e:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800cc80:	2300      	movs	r3, #0
 800cc82:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800cc84:	787b      	ldrb	r3, [r7, #1]
 800cc86:	4619      	mov	r1, r3
 800cc88:	6878      	ldr	r0, [r7, #4]
 800cc8a:	f7ff ff67 	bl	800cb5c <VL53L0X_calc_macro_period_ps>
 800cc8e:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800cc90:	693b      	ldr	r3, [r7, #16]
 800cc92:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800cc96:	4a0a      	ldr	r2, [pc, #40]	; (800ccc0 <VL53L0X_calc_timeout_us+0x50>)
 800cc98:	fba2 2303 	umull	r2, r3, r2, r3
 800cc9c:	099b      	lsrs	r3, r3, #6
 800cc9e:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800cca0:	887b      	ldrh	r3, [r7, #2]
 800cca2:	68fa      	ldr	r2, [r7, #12]
 800cca4:	fb02 f303 	mul.w	r3, r2, r3
 800cca8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 800ccac:	4a04      	ldr	r2, [pc, #16]	; (800ccc0 <VL53L0X_calc_timeout_us+0x50>)
 800ccae:	fba2 2303 	umull	r2, r3, r2, r3
 800ccb2:	099b      	lsrs	r3, r3, #6
 800ccb4:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800ccb6:	697b      	ldr	r3, [r7, #20]
}
 800ccb8:	4618      	mov	r0, r3
 800ccba:	3718      	adds	r7, #24
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	bd80      	pop	{r7, pc}
 800ccc0:	10624dd3 	.word	0x10624dd3

0800ccc4 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b08c      	sub	sp, #48	; 0x30
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	60f8      	str	r0, [r7, #12]
 800cccc:	460b      	mov	r3, r1
 800ccce:	607a      	str	r2, [r7, #4]
 800ccd0:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800ccd8:	2300      	movs	r3, #0
 800ccda:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800ccde:	2300      	movs	r3, #0
 800cce0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800cce2:	2300      	movs	r3, #0
 800cce4:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800cce6:	2300      	movs	r3, #0
 800cce8:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800ccea:	7afb      	ldrb	r3, [r7, #11]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d005      	beq.n	800ccfc <get_sequence_step_timeout+0x38>
 800ccf0:	7afb      	ldrb	r3, [r7, #11]
 800ccf2:	2b01      	cmp	r3, #1
 800ccf4:	d002      	beq.n	800ccfc <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800ccf6:	7afb      	ldrb	r3, [r7, #11]
 800ccf8:	2b02      	cmp	r3, #2
 800ccfa:	d128      	bne.n	800cd4e <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800ccfc:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800cd00:	461a      	mov	r2, r3
 800cd02:	2100      	movs	r1, #0
 800cd04:	68f8      	ldr	r0, [r7, #12]
 800cd06:	f7fd fa4d 	bl	800a1a4 <VL53L0X_GetVcselPulsePeriod>
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800cd10:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d109      	bne.n	800cd2c <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800cd18:	f107 0320 	add.w	r3, r7, #32
 800cd1c:	461a      	mov	r2, r3
 800cd1e:	2146      	movs	r1, #70	; 0x46
 800cd20:	68f8      	ldr	r0, [r7, #12]
 800cd22:	f001 fd8b 	bl	800e83c <VL53L0X_RdByte>
 800cd26:	4603      	mov	r3, r0
 800cd28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800cd2c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cd30:	b29b      	uxth	r3, r3
 800cd32:	4618      	mov	r0, r3
 800cd34:	f7ff ff5c 	bl	800cbf0 <VL53L0X_decode_timeout>
 800cd38:	4603      	mov	r3, r0
 800cd3a:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800cd3c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800cd40:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cd42:	4619      	mov	r1, r3
 800cd44:	68f8      	ldr	r0, [r7, #12]
 800cd46:	f7ff ff93 	bl	800cc70 <VL53L0X_calc_timeout_us>
 800cd4a:	62b8      	str	r0, [r7, #40]	; 0x28
 800cd4c:	e092      	b.n	800ce74 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800cd4e:	7afb      	ldrb	r3, [r7, #11]
 800cd50:	2b03      	cmp	r3, #3
 800cd52:	d135      	bne.n	800cdc0 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800cd54:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800cd58:	461a      	mov	r2, r3
 800cd5a:	2100      	movs	r1, #0
 800cd5c:	68f8      	ldr	r0, [r7, #12]
 800cd5e:	f7fd fa21 	bl	800a1a4 <VL53L0X_GetVcselPulsePeriod>
 800cd62:	4603      	mov	r3, r0
 800cd64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800cd68:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	f040 8081 	bne.w	800ce74 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800cd72:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800cd76:	461a      	mov	r2, r3
 800cd78:	2100      	movs	r1, #0
 800cd7a:	68f8      	ldr	r0, [r7, #12]
 800cd7c:	f7fd fa12 	bl	800a1a4 <VL53L0X_GetVcselPulsePeriod>
 800cd80:	4603      	mov	r3, r0
 800cd82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800cd86:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d109      	bne.n	800cda2 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800cd8e:	f107 031e 	add.w	r3, r7, #30
 800cd92:	461a      	mov	r2, r3
 800cd94:	2151      	movs	r1, #81	; 0x51
 800cd96:	68f8      	ldr	r0, [r7, #12]
 800cd98:	f001 fd7a 	bl	800e890 <VL53L0X_RdWord>
 800cd9c:	4603      	mov	r3, r0
 800cd9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800cda2:	8bfb      	ldrh	r3, [r7, #30]
 800cda4:	4618      	mov	r0, r3
 800cda6:	f7ff ff23 	bl	800cbf0 <VL53L0X_decode_timeout>
 800cdaa:	4603      	mov	r3, r0
 800cdac:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800cdae:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800cdb2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cdb4:	4619      	mov	r1, r3
 800cdb6:	68f8      	ldr	r0, [r7, #12]
 800cdb8:	f7ff ff5a 	bl	800cc70 <VL53L0X_calc_timeout_us>
 800cdbc:	62b8      	str	r0, [r7, #40]	; 0x28
 800cdbe:	e059      	b.n	800ce74 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800cdc0:	7afb      	ldrb	r3, [r7, #11]
 800cdc2:	2b04      	cmp	r3, #4
 800cdc4:	d156      	bne.n	800ce74 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800cdc6:	f107 0314 	add.w	r3, r7, #20
 800cdca:	4619      	mov	r1, r3
 800cdcc:	68f8      	ldr	r0, [r7, #12]
 800cdce:	f7fd faf5 	bl	800a3bc <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800cdd6:	7dfb      	ldrb	r3, [r7, #23]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d01d      	beq.n	800ce18 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800cddc:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800cde0:	461a      	mov	r2, r3
 800cde2:	2100      	movs	r1, #0
 800cde4:	68f8      	ldr	r0, [r7, #12]
 800cde6:	f7fd f9dd 	bl	800a1a4 <VL53L0X_GetVcselPulsePeriod>
 800cdea:	4603      	mov	r3, r0
 800cdec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800cdf0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d10f      	bne.n	800ce18 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 800cdf8:	f107 031e 	add.w	r3, r7, #30
 800cdfc:	461a      	mov	r2, r3
 800cdfe:	2151      	movs	r1, #81	; 0x51
 800ce00:	68f8      	ldr	r0, [r7, #12]
 800ce02:	f001 fd45 	bl	800e890 <VL53L0X_RdWord>
 800ce06:	4603      	mov	r3, r0
 800ce08:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800ce0c:	8bfb      	ldrh	r3, [r7, #30]
 800ce0e:	4618      	mov	r0, r3
 800ce10:	f7ff feee 	bl	800cbf0 <VL53L0X_decode_timeout>
 800ce14:	4603      	mov	r3, r0
 800ce16:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800ce18:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d109      	bne.n	800ce34 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800ce20:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800ce24:	461a      	mov	r2, r3
 800ce26:	2101      	movs	r1, #1
 800ce28:	68f8      	ldr	r0, [r7, #12]
 800ce2a:	f7fd f9bb 	bl	800a1a4 <VL53L0X_GetVcselPulsePeriod>
 800ce2e:	4603      	mov	r3, r0
 800ce30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800ce34:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d10f      	bne.n	800ce5c <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 800ce3c:	f107 031c 	add.w	r3, r7, #28
 800ce40:	461a      	mov	r2, r3
 800ce42:	2171      	movs	r1, #113	; 0x71
 800ce44:	68f8      	ldr	r0, [r7, #12]
 800ce46:	f001 fd23 	bl	800e890 <VL53L0X_RdWord>
 800ce4a:	4603      	mov	r3, r0
 800ce4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800ce50:	8bbb      	ldrh	r3, [r7, #28]
 800ce52:	4618      	mov	r0, r3
 800ce54:	f7ff fecc 	bl	800cbf0 <VL53L0X_decode_timeout>
 800ce58:	4603      	mov	r3, r0
 800ce5a:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800ce5c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ce5e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ce60:	1ad3      	subs	r3, r2, r3
 800ce62:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800ce64:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800ce68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce6a:	4619      	mov	r1, r3
 800ce6c:	68f8      	ldr	r0, [r7, #12]
 800ce6e:	f7ff feff 	bl	800cc70 <VL53L0X_calc_timeout_us>
 800ce72:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce78:	601a      	str	r2, [r3, #0]

	return Status;
 800ce7a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800ce7e:	4618      	mov	r0, r3
 800ce80:	3730      	adds	r7, #48	; 0x30
 800ce82:	46bd      	mov	sp, r7
 800ce84:	bd80      	pop	{r7, pc}

0800ce86 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800ce86:	b580      	push	{r7, lr}
 800ce88:	b08a      	sub	sp, #40	; 0x28
 800ce8a:	af00      	add	r7, sp, #0
 800ce8c:	60f8      	str	r0, [r7, #12]
 800ce8e:	460b      	mov	r3, r1
 800ce90:	607a      	str	r2, [r7, #4]
 800ce92:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ce94:	2300      	movs	r3, #0
 800ce96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800ce9a:	7afb      	ldrb	r3, [r7, #11]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d005      	beq.n	800ceac <set_sequence_step_timeout+0x26>
 800cea0:	7afb      	ldrb	r3, [r7, #11]
 800cea2:	2b01      	cmp	r3, #1
 800cea4:	d002      	beq.n	800ceac <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800cea6:	7afb      	ldrb	r3, [r7, #11]
 800cea8:	2b02      	cmp	r3, #2
 800ceaa:	d138      	bne.n	800cf1e <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800ceac:	f107 031b 	add.w	r3, r7, #27
 800ceb0:	461a      	mov	r2, r3
 800ceb2:	2100      	movs	r1, #0
 800ceb4:	68f8      	ldr	r0, [r7, #12]
 800ceb6:	f7fd f975 	bl	800a1a4 <VL53L0X_GetVcselPulsePeriod>
 800ceba:	4603      	mov	r3, r0
 800cebc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800cec0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d11a      	bne.n	800cefe <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800cec8:	7efb      	ldrb	r3, [r7, #27]
 800ceca:	461a      	mov	r2, r3
 800cecc:	6879      	ldr	r1, [r7, #4]
 800cece:	68f8      	ldr	r0, [r7, #12]
 800ced0:	f7ff fea4 	bl	800cc1c <VL53L0X_calc_timeout_mclks>
 800ced4:	4603      	mov	r3, r0
 800ced6:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800ced8:	8bbb      	ldrh	r3, [r7, #28]
 800ceda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cede:	d903      	bls.n	800cee8 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800cee0:	23ff      	movs	r3, #255	; 0xff
 800cee2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cee6:	e004      	b.n	800cef2 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800cee8:	8bbb      	ldrh	r3, [r7, #28]
 800ceea:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800ceec:	3b01      	subs	r3, #1
 800ceee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800cef2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cef6:	b29a      	uxth	r2, r3
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800cefe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	f040 80ab 	bne.w	800d05e <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 800cf08:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cf0c:	461a      	mov	r2, r3
 800cf0e:	2146      	movs	r1, #70	; 0x46
 800cf10:	68f8      	ldr	r0, [r7, #12]
 800cf12:	f001 fc11 	bl	800e738 <VL53L0X_WrByte>
 800cf16:	4603      	mov	r3, r0
 800cf18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800cf1c:	e09f      	b.n	800d05e <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800cf1e:	7afb      	ldrb	r3, [r7, #11]
 800cf20:	2b03      	cmp	r3, #3
 800cf22:	d135      	bne.n	800cf90 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800cf24:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d11b      	bne.n	800cf64 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800cf2c:	f107 031b 	add.w	r3, r7, #27
 800cf30:	461a      	mov	r2, r3
 800cf32:	2100      	movs	r1, #0
 800cf34:	68f8      	ldr	r0, [r7, #12]
 800cf36:	f7fd f935 	bl	800a1a4 <VL53L0X_GetVcselPulsePeriod>
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800cf40:	7efb      	ldrb	r3, [r7, #27]
 800cf42:	461a      	mov	r2, r3
 800cf44:	6879      	ldr	r1, [r7, #4]
 800cf46:	68f8      	ldr	r0, [r7, #12]
 800cf48:	f7ff fe68 	bl	800cc1c <VL53L0X_calc_timeout_mclks>
 800cf4c:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800cf4e:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800cf50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf52:	4618      	mov	r0, r3
 800cf54:	f7ff fe20 	bl	800cb98 <VL53L0X_encode_timeout>
 800cf58:	4603      	mov	r3, r0
 800cf5a:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800cf5c:	8b3a      	ldrh	r2, [r7, #24]
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800cf64:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d108      	bne.n	800cf7e <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800cf6c:	8b3b      	ldrh	r3, [r7, #24]
 800cf6e:	461a      	mov	r2, r3
 800cf70:	2151      	movs	r1, #81	; 0x51
 800cf72:	68f8      	ldr	r0, [r7, #12]
 800cf74:	f001 fc04 	bl	800e780 <VL53L0X_WrWord>
 800cf78:	4603      	mov	r3, r0
 800cf7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800cf7e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d16b      	bne.n	800d05e <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	687a      	ldr	r2, [r7, #4]
 800cf8a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800cf8e:	e066      	b.n	800d05e <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800cf90:	7afb      	ldrb	r3, [r7, #11]
 800cf92:	2b04      	cmp	r3, #4
 800cf94:	d160      	bne.n	800d058 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800cf96:	f107 0310 	add.w	r3, r7, #16
 800cf9a:	4619      	mov	r1, r3
 800cf9c:	68f8      	ldr	r0, [r7, #12]
 800cf9e:	f7fd fa0d 	bl	800a3bc <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800cfa6:	7cfb      	ldrb	r3, [r7, #19]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d01d      	beq.n	800cfe8 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800cfac:	f107 031b 	add.w	r3, r7, #27
 800cfb0:	461a      	mov	r2, r3
 800cfb2:	2100      	movs	r1, #0
 800cfb4:	68f8      	ldr	r0, [r7, #12]
 800cfb6:	f7fd f8f5 	bl	800a1a4 <VL53L0X_GetVcselPulsePeriod>
 800cfba:	4603      	mov	r3, r0
 800cfbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800cfc0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d10f      	bne.n	800cfe8 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800cfc8:	f107 0318 	add.w	r3, r7, #24
 800cfcc:	461a      	mov	r2, r3
 800cfce:	2151      	movs	r1, #81	; 0x51
 800cfd0:	68f8      	ldr	r0, [r7, #12]
 800cfd2:	f001 fc5d 	bl	800e890 <VL53L0X_RdWord>
 800cfd6:	4603      	mov	r3, r0
 800cfd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800cfdc:	8b3b      	ldrh	r3, [r7, #24]
 800cfde:	4618      	mov	r0, r3
 800cfe0:	f7ff fe06 	bl	800cbf0 <VL53L0X_decode_timeout>
 800cfe4:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800cfe6:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800cfe8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d109      	bne.n	800d004 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800cff0:	f107 031b 	add.w	r3, r7, #27
 800cff4:	461a      	mov	r2, r3
 800cff6:	2101      	movs	r1, #1
 800cff8:	68f8      	ldr	r0, [r7, #12]
 800cffa:	f7fd f8d3 	bl	800a1a4 <VL53L0X_GetVcselPulsePeriod>
 800cffe:	4603      	mov	r3, r0
 800d000:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800d004:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d128      	bne.n	800d05e <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800d00c:	7efb      	ldrb	r3, [r7, #27]
 800d00e:	461a      	mov	r2, r3
 800d010:	6879      	ldr	r1, [r7, #4]
 800d012:	68f8      	ldr	r0, [r7, #12]
 800d014:	f7ff fe02 	bl	800cc1c <VL53L0X_calc_timeout_mclks>
 800d018:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800d01a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d01c:	6a3a      	ldr	r2, [r7, #32]
 800d01e:	4413      	add	r3, r2
 800d020:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800d022:	6a38      	ldr	r0, [r7, #32]
 800d024:	f7ff fdb8 	bl	800cb98 <VL53L0X_encode_timeout>
 800d028:	4603      	mov	r3, r0
 800d02a:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 800d02c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d030:	2b00      	cmp	r3, #0
 800d032:	d108      	bne.n	800d046 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800d034:	8bfb      	ldrh	r3, [r7, #30]
 800d036:	461a      	mov	r2, r3
 800d038:	2171      	movs	r1, #113	; 0x71
 800d03a:	68f8      	ldr	r0, [r7, #12]
 800d03c:	f001 fba0 	bl	800e780 <VL53L0X_WrWord>
 800d040:	4603      	mov	r3, r0
 800d042:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800d046:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d107      	bne.n	800d05e <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	687a      	ldr	r2, [r7, #4]
 800d052:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800d056:	e002      	b.n	800d05e <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d058:	23fc      	movs	r3, #252	; 0xfc
 800d05a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800d05e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d062:	4618      	mov	r0, r3
 800d064:	3728      	adds	r7, #40	; 0x28
 800d066:	46bd      	mov	sp, r7
 800d068:	bd80      	pop	{r7, pc}

0800d06a <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800d06a:	b580      	push	{r7, lr}
 800d06c:	b08a      	sub	sp, #40	; 0x28
 800d06e:	af00      	add	r7, sp, #0
 800d070:	6078      	str	r0, [r7, #4]
 800d072:	460b      	mov	r3, r1
 800d074:	70fb      	strb	r3, [r7, #3]
 800d076:	4613      	mov	r3, r2
 800d078:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d07a:	2300      	movs	r3, #0
 800d07c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 800d080:	230c      	movs	r3, #12
 800d082:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800d086:	2312      	movs	r3, #18
 800d088:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 800d08c:	2308      	movs	r3, #8
 800d08e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800d092:	230e      	movs	r3, #14
 800d094:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 800d098:	2300      	movs	r3, #0
 800d09a:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 800d09c:	78bb      	ldrb	r3, [r7, #2]
 800d09e:	f003 0301 	and.w	r3, r3, #1
 800d0a2:	b2db      	uxtb	r3, r3
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d003      	beq.n	800d0b0 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d0a8:	23fc      	movs	r3, #252	; 0xfc
 800d0aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d0ae:	e020      	b.n	800d0f2 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 800d0b0:	78fb      	ldrb	r3, [r7, #3]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d10d      	bne.n	800d0d2 <VL53L0X_set_vcsel_pulse_period+0x68>
 800d0b6:	78ba      	ldrb	r2, [r7, #2]
 800d0b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d0bc:	429a      	cmp	r2, r3
 800d0be:	d304      	bcc.n	800d0ca <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 800d0c0:	78ba      	ldrb	r2, [r7, #2]
 800d0c2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d0c6:	429a      	cmp	r2, r3
 800d0c8:	d903      	bls.n	800d0d2 <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d0ca:	23fc      	movs	r3, #252	; 0xfc
 800d0cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d0d0:	e00f      	b.n	800d0f2 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800d0d2:	78fb      	ldrb	r3, [r7, #3]
 800d0d4:	2b01      	cmp	r3, #1
 800d0d6:	d10c      	bne.n	800d0f2 <VL53L0X_set_vcsel_pulse_period+0x88>
 800d0d8:	78ba      	ldrb	r2, [r7, #2]
 800d0da:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d0de:	429a      	cmp	r2, r3
 800d0e0:	d304      	bcc.n	800d0ec <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800d0e2:	78ba      	ldrb	r2, [r7, #2]
 800d0e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d0e8:	429a      	cmp	r2, r3
 800d0ea:	d902      	bls.n	800d0f2 <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d0ec:	23fc      	movs	r3, #252	; 0xfc
 800d0ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800d0f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d002      	beq.n	800d100 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 800d0fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d0fe:	e239      	b.n	800d574 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 800d100:	78fb      	ldrb	r3, [r7, #3]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d150      	bne.n	800d1a8 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 800d106:	78bb      	ldrb	r3, [r7, #2]
 800d108:	2b0c      	cmp	r3, #12
 800d10a:	d110      	bne.n	800d12e <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 800d10c:	2218      	movs	r2, #24
 800d10e:	2157      	movs	r1, #87	; 0x57
 800d110:	6878      	ldr	r0, [r7, #4]
 800d112:	f001 fb11 	bl	800e738 <VL53L0X_WrByte>
 800d116:	4603      	mov	r3, r0
 800d118:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 800d11c:	2208      	movs	r2, #8
 800d11e:	2156      	movs	r1, #86	; 0x56
 800d120:	6878      	ldr	r0, [r7, #4]
 800d122:	f001 fb09 	bl	800e738 <VL53L0X_WrByte>
 800d126:	4603      	mov	r3, r0
 800d128:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d12c:	e17f      	b.n	800d42e <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 800d12e:	78bb      	ldrb	r3, [r7, #2]
 800d130:	2b0e      	cmp	r3, #14
 800d132:	d110      	bne.n	800d156 <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 800d134:	2230      	movs	r2, #48	; 0x30
 800d136:	2157      	movs	r1, #87	; 0x57
 800d138:	6878      	ldr	r0, [r7, #4]
 800d13a:	f001 fafd 	bl	800e738 <VL53L0X_WrByte>
 800d13e:	4603      	mov	r3, r0
 800d140:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 800d144:	2208      	movs	r2, #8
 800d146:	2156      	movs	r1, #86	; 0x56
 800d148:	6878      	ldr	r0, [r7, #4]
 800d14a:	f001 faf5 	bl	800e738 <VL53L0X_WrByte>
 800d14e:	4603      	mov	r3, r0
 800d150:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d154:	e16b      	b.n	800d42e <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 800d156:	78bb      	ldrb	r3, [r7, #2]
 800d158:	2b10      	cmp	r3, #16
 800d15a:	d110      	bne.n	800d17e <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 800d15c:	2240      	movs	r2, #64	; 0x40
 800d15e:	2157      	movs	r1, #87	; 0x57
 800d160:	6878      	ldr	r0, [r7, #4]
 800d162:	f001 fae9 	bl	800e738 <VL53L0X_WrByte>
 800d166:	4603      	mov	r3, r0
 800d168:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 800d16c:	2208      	movs	r2, #8
 800d16e:	2156      	movs	r1, #86	; 0x56
 800d170:	6878      	ldr	r0, [r7, #4]
 800d172:	f001 fae1 	bl	800e738 <VL53L0X_WrByte>
 800d176:	4603      	mov	r3, r0
 800d178:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d17c:	e157      	b.n	800d42e <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800d17e:	78bb      	ldrb	r3, [r7, #2]
 800d180:	2b12      	cmp	r3, #18
 800d182:	f040 8154 	bne.w	800d42e <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800d186:	2250      	movs	r2, #80	; 0x50
 800d188:	2157      	movs	r1, #87	; 0x57
 800d18a:	6878      	ldr	r0, [r7, #4]
 800d18c:	f001 fad4 	bl	800e738 <VL53L0X_WrByte>
 800d190:	4603      	mov	r3, r0
 800d192:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800d196:	2208      	movs	r2, #8
 800d198:	2156      	movs	r1, #86	; 0x56
 800d19a:	6878      	ldr	r0, [r7, #4]
 800d19c:	f001 facc 	bl	800e738 <VL53L0X_WrByte>
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d1a6:	e142      	b.n	800d42e <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 800d1a8:	78fb      	ldrb	r3, [r7, #3]
 800d1aa:	2b01      	cmp	r3, #1
 800d1ac:	f040 813f 	bne.w	800d42e <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 800d1b0:	78bb      	ldrb	r3, [r7, #2]
 800d1b2:	2b08      	cmp	r3, #8
 800d1b4:	d14c      	bne.n	800d250 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 800d1b6:	2210      	movs	r2, #16
 800d1b8:	2148      	movs	r1, #72	; 0x48
 800d1ba:	6878      	ldr	r0, [r7, #4]
 800d1bc:	f001 fabc 	bl	800e738 <VL53L0X_WrByte>
 800d1c0:	4603      	mov	r3, r0
 800d1c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800d1c6:	2208      	movs	r2, #8
 800d1c8:	2147      	movs	r1, #71	; 0x47
 800d1ca:	6878      	ldr	r0, [r7, #4]
 800d1cc:	f001 fab4 	bl	800e738 <VL53L0X_WrByte>
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800d1d6:	2202      	movs	r2, #2
 800d1d8:	2132      	movs	r1, #50	; 0x32
 800d1da:	6878      	ldr	r0, [r7, #4]
 800d1dc:	f001 faac 	bl	800e738 <VL53L0X_WrByte>
 800d1e0:	4603      	mov	r3, r0
 800d1e2:	461a      	mov	r2, r3
 800d1e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1e8:	4313      	orrs	r3, r2
 800d1ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800d1ee:	220c      	movs	r2, #12
 800d1f0:	2130      	movs	r1, #48	; 0x30
 800d1f2:	6878      	ldr	r0, [r7, #4]
 800d1f4:	f001 faa0 	bl	800e738 <VL53L0X_WrByte>
 800d1f8:	4603      	mov	r3, r0
 800d1fa:	461a      	mov	r2, r3
 800d1fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d200:	4313      	orrs	r3, r2
 800d202:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800d206:	2201      	movs	r2, #1
 800d208:	21ff      	movs	r1, #255	; 0xff
 800d20a:	6878      	ldr	r0, [r7, #4]
 800d20c:	f001 fa94 	bl	800e738 <VL53L0X_WrByte>
 800d210:	4603      	mov	r3, r0
 800d212:	461a      	mov	r2, r3
 800d214:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d218:	4313      	orrs	r3, r2
 800d21a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800d21e:	2230      	movs	r2, #48	; 0x30
 800d220:	2130      	movs	r1, #48	; 0x30
 800d222:	6878      	ldr	r0, [r7, #4]
 800d224:	f001 fa88 	bl	800e738 <VL53L0X_WrByte>
 800d228:	4603      	mov	r3, r0
 800d22a:	461a      	mov	r2, r3
 800d22c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d230:	4313      	orrs	r3, r2
 800d232:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800d236:	2200      	movs	r2, #0
 800d238:	21ff      	movs	r1, #255	; 0xff
 800d23a:	6878      	ldr	r0, [r7, #4]
 800d23c:	f001 fa7c 	bl	800e738 <VL53L0X_WrByte>
 800d240:	4603      	mov	r3, r0
 800d242:	461a      	mov	r2, r3
 800d244:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d248:	4313      	orrs	r3, r2
 800d24a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d24e:	e0ee      	b.n	800d42e <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 800d250:	78bb      	ldrb	r3, [r7, #2]
 800d252:	2b0a      	cmp	r3, #10
 800d254:	d14c      	bne.n	800d2f0 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 800d256:	2228      	movs	r2, #40	; 0x28
 800d258:	2148      	movs	r1, #72	; 0x48
 800d25a:	6878      	ldr	r0, [r7, #4]
 800d25c:	f001 fa6c 	bl	800e738 <VL53L0X_WrByte>
 800d260:	4603      	mov	r3, r0
 800d262:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 800d266:	2208      	movs	r2, #8
 800d268:	2147      	movs	r1, #71	; 0x47
 800d26a:	6878      	ldr	r0, [r7, #4]
 800d26c:	f001 fa64 	bl	800e738 <VL53L0X_WrByte>
 800d270:	4603      	mov	r3, r0
 800d272:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800d276:	2203      	movs	r2, #3
 800d278:	2132      	movs	r1, #50	; 0x32
 800d27a:	6878      	ldr	r0, [r7, #4]
 800d27c:	f001 fa5c 	bl	800e738 <VL53L0X_WrByte>
 800d280:	4603      	mov	r3, r0
 800d282:	461a      	mov	r2, r3
 800d284:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d288:	4313      	orrs	r3, r2
 800d28a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800d28e:	2209      	movs	r2, #9
 800d290:	2130      	movs	r1, #48	; 0x30
 800d292:	6878      	ldr	r0, [r7, #4]
 800d294:	f001 fa50 	bl	800e738 <VL53L0X_WrByte>
 800d298:	4603      	mov	r3, r0
 800d29a:	461a      	mov	r2, r3
 800d29c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d2a0:	4313      	orrs	r3, r2
 800d2a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800d2a6:	2201      	movs	r2, #1
 800d2a8:	21ff      	movs	r1, #255	; 0xff
 800d2aa:	6878      	ldr	r0, [r7, #4]
 800d2ac:	f001 fa44 	bl	800e738 <VL53L0X_WrByte>
 800d2b0:	4603      	mov	r3, r0
 800d2b2:	461a      	mov	r2, r3
 800d2b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d2b8:	4313      	orrs	r3, r2
 800d2ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800d2be:	2220      	movs	r2, #32
 800d2c0:	2130      	movs	r1, #48	; 0x30
 800d2c2:	6878      	ldr	r0, [r7, #4]
 800d2c4:	f001 fa38 	bl	800e738 <VL53L0X_WrByte>
 800d2c8:	4603      	mov	r3, r0
 800d2ca:	461a      	mov	r2, r3
 800d2cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d2d0:	4313      	orrs	r3, r2
 800d2d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	21ff      	movs	r1, #255	; 0xff
 800d2da:	6878      	ldr	r0, [r7, #4]
 800d2dc:	f001 fa2c 	bl	800e738 <VL53L0X_WrByte>
 800d2e0:	4603      	mov	r3, r0
 800d2e2:	461a      	mov	r2, r3
 800d2e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d2e8:	4313      	orrs	r3, r2
 800d2ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d2ee:	e09e      	b.n	800d42e <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800d2f0:	78bb      	ldrb	r3, [r7, #2]
 800d2f2:	2b0c      	cmp	r3, #12
 800d2f4:	d14c      	bne.n	800d390 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 800d2f6:	2238      	movs	r2, #56	; 0x38
 800d2f8:	2148      	movs	r1, #72	; 0x48
 800d2fa:	6878      	ldr	r0, [r7, #4]
 800d2fc:	f001 fa1c 	bl	800e738 <VL53L0X_WrByte>
 800d300:	4603      	mov	r3, r0
 800d302:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 800d306:	2208      	movs	r2, #8
 800d308:	2147      	movs	r1, #71	; 0x47
 800d30a:	6878      	ldr	r0, [r7, #4]
 800d30c:	f001 fa14 	bl	800e738 <VL53L0X_WrByte>
 800d310:	4603      	mov	r3, r0
 800d312:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800d316:	2203      	movs	r2, #3
 800d318:	2132      	movs	r1, #50	; 0x32
 800d31a:	6878      	ldr	r0, [r7, #4]
 800d31c:	f001 fa0c 	bl	800e738 <VL53L0X_WrByte>
 800d320:	4603      	mov	r3, r0
 800d322:	461a      	mov	r2, r3
 800d324:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d328:	4313      	orrs	r3, r2
 800d32a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800d32e:	2208      	movs	r2, #8
 800d330:	2130      	movs	r1, #48	; 0x30
 800d332:	6878      	ldr	r0, [r7, #4]
 800d334:	f001 fa00 	bl	800e738 <VL53L0X_WrByte>
 800d338:	4603      	mov	r3, r0
 800d33a:	461a      	mov	r2, r3
 800d33c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d340:	4313      	orrs	r3, r2
 800d342:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800d346:	2201      	movs	r2, #1
 800d348:	21ff      	movs	r1, #255	; 0xff
 800d34a:	6878      	ldr	r0, [r7, #4]
 800d34c:	f001 f9f4 	bl	800e738 <VL53L0X_WrByte>
 800d350:	4603      	mov	r3, r0
 800d352:	461a      	mov	r2, r3
 800d354:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d358:	4313      	orrs	r3, r2
 800d35a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800d35e:	2220      	movs	r2, #32
 800d360:	2130      	movs	r1, #48	; 0x30
 800d362:	6878      	ldr	r0, [r7, #4]
 800d364:	f001 f9e8 	bl	800e738 <VL53L0X_WrByte>
 800d368:	4603      	mov	r3, r0
 800d36a:	461a      	mov	r2, r3
 800d36c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d370:	4313      	orrs	r3, r2
 800d372:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800d376:	2200      	movs	r2, #0
 800d378:	21ff      	movs	r1, #255	; 0xff
 800d37a:	6878      	ldr	r0, [r7, #4]
 800d37c:	f001 f9dc 	bl	800e738 <VL53L0X_WrByte>
 800d380:	4603      	mov	r3, r0
 800d382:	461a      	mov	r2, r3
 800d384:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d388:	4313      	orrs	r3, r2
 800d38a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d38e:	e04e      	b.n	800d42e <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 800d390:	78bb      	ldrb	r3, [r7, #2]
 800d392:	2b0e      	cmp	r3, #14
 800d394:	d14b      	bne.n	800d42e <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800d396:	2248      	movs	r2, #72	; 0x48
 800d398:	2148      	movs	r1, #72	; 0x48
 800d39a:	6878      	ldr	r0, [r7, #4]
 800d39c:	f001 f9cc 	bl	800e738 <VL53L0X_WrByte>
 800d3a0:	4603      	mov	r3, r0
 800d3a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800d3a6:	2208      	movs	r2, #8
 800d3a8:	2147      	movs	r1, #71	; 0x47
 800d3aa:	6878      	ldr	r0, [r7, #4]
 800d3ac:	f001 f9c4 	bl	800e738 <VL53L0X_WrByte>
 800d3b0:	4603      	mov	r3, r0
 800d3b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800d3b6:	2203      	movs	r2, #3
 800d3b8:	2132      	movs	r1, #50	; 0x32
 800d3ba:	6878      	ldr	r0, [r7, #4]
 800d3bc:	f001 f9bc 	bl	800e738 <VL53L0X_WrByte>
 800d3c0:	4603      	mov	r3, r0
 800d3c2:	461a      	mov	r2, r3
 800d3c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d3c8:	4313      	orrs	r3, r2
 800d3ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800d3ce:	2207      	movs	r2, #7
 800d3d0:	2130      	movs	r1, #48	; 0x30
 800d3d2:	6878      	ldr	r0, [r7, #4]
 800d3d4:	f001 f9b0 	bl	800e738 <VL53L0X_WrByte>
 800d3d8:	4603      	mov	r3, r0
 800d3da:	461a      	mov	r2, r3
 800d3dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d3e0:	4313      	orrs	r3, r2
 800d3e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800d3e6:	2201      	movs	r2, #1
 800d3e8:	21ff      	movs	r1, #255	; 0xff
 800d3ea:	6878      	ldr	r0, [r7, #4]
 800d3ec:	f001 f9a4 	bl	800e738 <VL53L0X_WrByte>
 800d3f0:	4603      	mov	r3, r0
 800d3f2:	461a      	mov	r2, r3
 800d3f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d3f8:	4313      	orrs	r3, r2
 800d3fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800d3fe:	2220      	movs	r2, #32
 800d400:	2130      	movs	r1, #48	; 0x30
 800d402:	6878      	ldr	r0, [r7, #4]
 800d404:	f001 f998 	bl	800e738 <VL53L0X_WrByte>
 800d408:	4603      	mov	r3, r0
 800d40a:	461a      	mov	r2, r3
 800d40c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d410:	4313      	orrs	r3, r2
 800d412:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800d416:	2200      	movs	r2, #0
 800d418:	21ff      	movs	r1, #255	; 0xff
 800d41a:	6878      	ldr	r0, [r7, #4]
 800d41c:	f001 f98c 	bl	800e738 <VL53L0X_WrByte>
 800d420:	4603      	mov	r3, r0
 800d422:	461a      	mov	r2, r3
 800d424:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d428:	4313      	orrs	r3, r2
 800d42a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 800d42e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d432:	2b00      	cmp	r3, #0
 800d434:	d17f      	bne.n	800d536 <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 800d436:	78bb      	ldrb	r3, [r7, #2]
 800d438:	4618      	mov	r0, r3
 800d43a:	f7fe fe38 	bl	800c0ae <VL53L0X_encode_vcsel_period>
 800d43e:	4603      	mov	r3, r0
 800d440:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 800d444:	78fb      	ldrb	r3, [r7, #3]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d002      	beq.n	800d450 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 800d44a:	2b01      	cmp	r3, #1
 800d44c:	d045      	beq.n	800d4da <VL53L0X_set_vcsel_pulse_period+0x470>
 800d44e:	e06e      	b.n	800d52e <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800d450:	f107 0314 	add.w	r3, r7, #20
 800d454:	461a      	mov	r2, r3
 800d456:	2103      	movs	r1, #3
 800d458:	6878      	ldr	r0, [r7, #4]
 800d45a:	f7ff fc33 	bl	800ccc4 <get_sequence_step_timeout>
 800d45e:	4603      	mov	r3, r0
 800d460:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800d464:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d109      	bne.n	800d480 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 800d46c:	f107 0310 	add.w	r3, r7, #16
 800d470:	461a      	mov	r2, r3
 800d472:	2102      	movs	r1, #2
 800d474:	6878      	ldr	r0, [r7, #4]
 800d476:	f7ff fc25 	bl	800ccc4 <get_sequence_step_timeout>
 800d47a:	4603      	mov	r3, r0
 800d47c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800d480:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d484:	2b00      	cmp	r3, #0
 800d486:	d109      	bne.n	800d49c <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 800d488:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800d48c:	461a      	mov	r2, r3
 800d48e:	2150      	movs	r1, #80	; 0x50
 800d490:	6878      	ldr	r0, [r7, #4]
 800d492:	f001 f951 	bl	800e738 <VL53L0X_WrByte>
 800d496:	4603      	mov	r3, r0
 800d498:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800d49c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d108      	bne.n	800d4b6 <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 800d4a4:	697b      	ldr	r3, [r7, #20]
 800d4a6:	461a      	mov	r2, r3
 800d4a8:	2103      	movs	r1, #3
 800d4aa:	6878      	ldr	r0, [r7, #4]
 800d4ac:	f7ff fceb 	bl	800ce86 <set_sequence_step_timeout>
 800d4b0:	4603      	mov	r3, r0
 800d4b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800d4b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d108      	bne.n	800d4d0 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800d4be:	693b      	ldr	r3, [r7, #16]
 800d4c0:	461a      	mov	r2, r3
 800d4c2:	2102      	movs	r1, #2
 800d4c4:	6878      	ldr	r0, [r7, #4]
 800d4c6:	f7ff fcde 	bl	800ce86 <set_sequence_step_timeout>
 800d4ca:	4603      	mov	r3, r0
 800d4cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	78ba      	ldrb	r2, [r7, #2]
 800d4d4:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800d4d8:	e02e      	b.n	800d538 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800d4da:	f107 0318 	add.w	r3, r7, #24
 800d4de:	461a      	mov	r2, r3
 800d4e0:	2104      	movs	r1, #4
 800d4e2:	6878      	ldr	r0, [r7, #4]
 800d4e4:	f7ff fbee 	bl	800ccc4 <get_sequence_step_timeout>
 800d4e8:	4603      	mov	r3, r0
 800d4ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800d4ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d109      	bne.n	800d50a <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 800d4f6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800d4fa:	461a      	mov	r2, r3
 800d4fc:	2170      	movs	r1, #112	; 0x70
 800d4fe:	6878      	ldr	r0, [r7, #4]
 800d500:	f001 f91a 	bl	800e738 <VL53L0X_WrByte>
 800d504:	4603      	mov	r3, r0
 800d506:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800d50a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d108      	bne.n	800d524 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 800d512:	69bb      	ldr	r3, [r7, #24]
 800d514:	461a      	mov	r2, r3
 800d516:	2104      	movs	r1, #4
 800d518:	6878      	ldr	r0, [r7, #4]
 800d51a:	f7ff fcb4 	bl	800ce86 <set_sequence_step_timeout>
 800d51e:	4603      	mov	r3, r0
 800d520:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	78ba      	ldrb	r2, [r7, #2]
 800d528:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800d52c:	e004      	b.n	800d538 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d52e:	23fc      	movs	r3, #252	; 0xfc
 800d530:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d534:	e000      	b.n	800d538 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 800d536:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 800d538:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d109      	bne.n	800d554 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	695b      	ldr	r3, [r3, #20]
 800d544:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800d546:	69f9      	ldr	r1, [r7, #28]
 800d548:	6878      	ldr	r0, [r7, #4]
 800d54a:	f7fc fded 	bl	800a128 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800d54e:	4603      	mov	r3, r0
 800d550:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 800d554:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d109      	bne.n	800d570 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 800d55c:	f107 010f 	add.w	r1, r7, #15
 800d560:	2301      	movs	r3, #1
 800d562:	2200      	movs	r2, #0
 800d564:	6878      	ldr	r0, [r7, #4]
 800d566:	f7fe fcbd 	bl	800bee4 <VL53L0X_perform_phase_calibration>
 800d56a:	4603      	mov	r3, r0
 800d56c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 800d570:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d574:	4618      	mov	r0, r3
 800d576:	3728      	adds	r7, #40	; 0x28
 800d578:	46bd      	mov	sp, r7
 800d57a:	bd80      	pop	{r7, pc}

0800d57c <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b086      	sub	sp, #24
 800d580:	af00      	add	r7, sp, #0
 800d582:	60f8      	str	r0, [r7, #12]
 800d584:	460b      	mov	r3, r1
 800d586:	607a      	str	r2, [r7, #4]
 800d588:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d58a:	2300      	movs	r3, #0
 800d58c:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800d58e:	7afb      	ldrb	r3, [r7, #11]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d002      	beq.n	800d59a <VL53L0X_get_vcsel_pulse_period+0x1e>
 800d594:	2b01      	cmp	r3, #1
 800d596:	d00a      	beq.n	800d5ae <VL53L0X_get_vcsel_pulse_period+0x32>
 800d598:	e013      	b.n	800d5c2 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800d59a:	f107 0316 	add.w	r3, r7, #22
 800d59e:	461a      	mov	r2, r3
 800d5a0:	2150      	movs	r1, #80	; 0x50
 800d5a2:	68f8      	ldr	r0, [r7, #12]
 800d5a4:	f001 f94a 	bl	800e83c <VL53L0X_RdByte>
 800d5a8:	4603      	mov	r3, r0
 800d5aa:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800d5ac:	e00b      	b.n	800d5c6 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800d5ae:	f107 0316 	add.w	r3, r7, #22
 800d5b2:	461a      	mov	r2, r3
 800d5b4:	2170      	movs	r1, #112	; 0x70
 800d5b6:	68f8      	ldr	r0, [r7, #12]
 800d5b8:	f001 f940 	bl	800e83c <VL53L0X_RdByte>
 800d5bc:	4603      	mov	r3, r0
 800d5be:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800d5c0:	e001      	b.n	800d5c6 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d5c2:	23fc      	movs	r3, #252	; 0xfc
 800d5c4:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800d5c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d107      	bne.n	800d5de <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800d5ce:	7dbb      	ldrb	r3, [r7, #22]
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	f7fe fd59 	bl	800c088 <VL53L0X_decode_vcsel_period>
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	701a      	strb	r2, [r3, #0]

	return Status;
 800d5de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	3718      	adds	r7, #24
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	bd80      	pop	{r7, pc}

0800d5ea <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800d5ea:	b580      	push	{r7, lr}
 800d5ec:	b092      	sub	sp, #72	; 0x48
 800d5ee:	af00      	add	r7, sp, #0
 800d5f0:	6078      	str	r0, [r7, #4]
 800d5f2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800d5fa:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800d5fe:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800d600:	f240 7376 	movw	r3, #1910	; 0x776
 800d604:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800d606:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800d60a:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800d60c:	f44f 7325 	mov.w	r3, #660	; 0x294
 800d610:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800d612:	f240 234e 	movw	r3, #590	; 0x24e
 800d616:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800d618:	f240 23b2 	movw	r3, #690	; 0x2b2
 800d61c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800d61e:	f44f 7325 	mov.w	r3, #660	; 0x294
 800d622:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800d624:	f240 2326 	movw	r3, #550	; 0x226
 800d628:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800d62a:	2300      	movs	r3, #0
 800d62c:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800d62e:	f644 6320 	movw	r3, #20000	; 0x4e20
 800d632:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800d634:	2300      	movs	r3, #0
 800d636:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800d638:	683a      	ldr	r2, [r7, #0]
 800d63a:	6a3b      	ldr	r3, [r7, #32]
 800d63c:	429a      	cmp	r2, r3
 800d63e:	d205      	bcs.n	800d64c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d640:	23fc      	movs	r3, #252	; 0xfc
 800d642:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800d646:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800d64a:	e0aa      	b.n	800d7a2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800d64c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d64e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d650:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800d652:	683a      	ldr	r2, [r7, #0]
 800d654:	1ad3      	subs	r3, r2, r3
 800d656:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800d658:	f107 0314 	add.w	r3, r7, #20
 800d65c:	4619      	mov	r1, r3
 800d65e:	6878      	ldr	r0, [r7, #4]
 800d660:	f7fc feac 	bl	800a3bc <VL53L0X_GetSequenceStepEnables>
 800d664:	4603      	mov	r3, r0
 800d666:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800d66a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d15b      	bne.n	800d72a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800d672:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800d674:	2b00      	cmp	r3, #0
 800d676:	d105      	bne.n	800d684 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800d678:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d102      	bne.n	800d684 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800d67e:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800d680:	2b00      	cmp	r3, #0
 800d682:	d052      	beq.n	800d72a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800d684:	f107 0310 	add.w	r3, r7, #16
 800d688:	461a      	mov	r2, r3
 800d68a:	2102      	movs	r1, #2
 800d68c:	6878      	ldr	r0, [r7, #4]
 800d68e:	f7ff fb19 	bl	800ccc4 <get_sequence_step_timeout>
 800d692:	4603      	mov	r3, r0
 800d694:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800d698:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d002      	beq.n	800d6a6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800d6a0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800d6a4:	e07d      	b.n	800d7a2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800d6a6:	7d3b      	ldrb	r3, [r7, #20]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d00f      	beq.n	800d6cc <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800d6ac:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800d6ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d6b0:	4413      	add	r3, r2
 800d6b2:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800d6b4:	69fa      	ldr	r2, [r7, #28]
 800d6b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6b8:	429a      	cmp	r2, r3
 800d6ba:	d204      	bcs.n	800d6c6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800d6bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d6be:	69fb      	ldr	r3, [r7, #28]
 800d6c0:	1ad3      	subs	r3, r2, r3
 800d6c2:	643b      	str	r3, [r7, #64]	; 0x40
 800d6c4:	e002      	b.n	800d6cc <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d6c6:	23fc      	movs	r3, #252	; 0xfc
 800d6c8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800d6cc:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d002      	beq.n	800d6da <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800d6d4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800d6d8:	e063      	b.n	800d7a2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800d6da:	7dbb      	ldrb	r3, [r7, #22]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d011      	beq.n	800d704 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800d6e0:	693a      	ldr	r2, [r7, #16]
 800d6e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6e4:	4413      	add	r3, r2
 800d6e6:	005b      	lsls	r3, r3, #1
 800d6e8:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800d6ea:	69fa      	ldr	r2, [r7, #28]
 800d6ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6ee:	429a      	cmp	r2, r3
 800d6f0:	d204      	bcs.n	800d6fc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800d6f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d6f4:	69fb      	ldr	r3, [r7, #28]
 800d6f6:	1ad3      	subs	r3, r2, r3
 800d6f8:	643b      	str	r3, [r7, #64]	; 0x40
 800d6fa:	e016      	b.n	800d72a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d6fc:	23fc      	movs	r3, #252	; 0xfc
 800d6fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800d702:	e012      	b.n	800d72a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800d704:	7d7b      	ldrb	r3, [r7, #21]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d00f      	beq.n	800d72a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800d70a:	693b      	ldr	r3, [r7, #16]
 800d70c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d70e:	4413      	add	r3, r2
 800d710:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800d712:	69fa      	ldr	r2, [r7, #28]
 800d714:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d716:	429a      	cmp	r2, r3
 800d718:	d204      	bcs.n	800d724 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800d71a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d71c:	69fb      	ldr	r3, [r7, #28]
 800d71e:	1ad3      	subs	r3, r2, r3
 800d720:	643b      	str	r3, [r7, #64]	; 0x40
 800d722:	e002      	b.n	800d72a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d724:	23fc      	movs	r3, #252	; 0xfc
 800d726:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800d72a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d002      	beq.n	800d738 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800d732:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800d736:	e034      	b.n	800d7a2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800d738:	7dfb      	ldrb	r3, [r7, #23]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d019      	beq.n	800d772 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800d73e:	f107 030c 	add.w	r3, r7, #12
 800d742:	461a      	mov	r2, r3
 800d744:	2103      	movs	r1, #3
 800d746:	6878      	ldr	r0, [r7, #4]
 800d748:	f7ff fabc 	bl	800ccc4 <get_sequence_step_timeout>
 800d74c:	4603      	mov	r3, r0
 800d74e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d756:	4413      	add	r3, r2
 800d758:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800d75a:	69fa      	ldr	r2, [r7, #28]
 800d75c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d75e:	429a      	cmp	r2, r3
 800d760:	d204      	bcs.n	800d76c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800d762:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d764:	69fb      	ldr	r3, [r7, #28]
 800d766:	1ad3      	subs	r3, r2, r3
 800d768:	643b      	str	r3, [r7, #64]	; 0x40
 800d76a:	e002      	b.n	800d772 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d76c:	23fc      	movs	r3, #252	; 0xfc
 800d76e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800d772:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800d776:	2b00      	cmp	r3, #0
 800d778:	d111      	bne.n	800d79e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800d77a:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d00e      	beq.n	800d79e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800d780:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d784:	1ad3      	subs	r3, r2, r3
 800d786:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800d788:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d78a:	2104      	movs	r1, #4
 800d78c:	6878      	ldr	r0, [r7, #4]
 800d78e:	f7ff fb7a 	bl	800ce86 <set_sequence_step_timeout>
 800d792:	4603      	mov	r3, r0
 800d794:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	683a      	ldr	r2, [r7, #0]
 800d79c:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800d79e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	3748      	adds	r7, #72	; 0x48
 800d7a6:	46bd      	mov	sp, r7
 800d7a8:	bd80      	pop	{r7, pc}

0800d7aa <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800d7aa:	b580      	push	{r7, lr}
 800d7ac:	b090      	sub	sp, #64	; 0x40
 800d7ae:	af00      	add	r7, sp, #0
 800d7b0:	6078      	str	r0, [r7, #4]
 800d7b2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800d7ba:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800d7be:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800d7c0:	f240 7376 	movw	r3, #1910	; 0x776
 800d7c4:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800d7c6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800d7ca:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800d7cc:	f44f 7325 	mov.w	r3, #660	; 0x294
 800d7d0:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800d7d2:	f240 234e 	movw	r3, #590	; 0x24e
 800d7d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800d7d8:	f240 23b2 	movw	r3, #690	; 0x2b2
 800d7dc:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800d7de:	f44f 7325 	mov.w	r3, #660	; 0x294
 800d7e2:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800d7e4:	f240 2326 	movw	r3, #550	; 0x226
 800d7e8:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800d7ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d7f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7f2:	441a      	add	r2, r3
 800d7f4:	683b      	ldr	r3, [r7, #0]
 800d7f6:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800d7f8:	f107 0318 	add.w	r3, r7, #24
 800d7fc:	4619      	mov	r1, r3
 800d7fe:	6878      	ldr	r0, [r7, #4]
 800d800:	f7fc fddc 	bl	800a3bc <VL53L0X_GetSequenceStepEnables>
 800d804:	4603      	mov	r3, r0
 800d806:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800d80a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d002      	beq.n	800d818 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800d812:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d816:	e075      	b.n	800d904 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800d818:	7e3b      	ldrb	r3, [r7, #24]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d105      	bne.n	800d82a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800d81e:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800d820:	2b00      	cmp	r3, #0
 800d822:	d102      	bne.n	800d82a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800d824:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800d826:	2b00      	cmp	r3, #0
 800d828:	d030      	beq.n	800d88c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800d82a:	f107 0310 	add.w	r3, r7, #16
 800d82e:	461a      	mov	r2, r3
 800d830:	2102      	movs	r1, #2
 800d832:	6878      	ldr	r0, [r7, #4]
 800d834:	f7ff fa46 	bl	800ccc4 <get_sequence_step_timeout>
 800d838:	4603      	mov	r3, r0
 800d83a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800d83e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d842:	2b00      	cmp	r3, #0
 800d844:	d122      	bne.n	800d88c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800d846:	7e3b      	ldrb	r3, [r7, #24]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d007      	beq.n	800d85c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800d84c:	683b      	ldr	r3, [r7, #0]
 800d84e:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800d850:	6939      	ldr	r1, [r7, #16]
 800d852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d854:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800d856:	441a      	add	r2, r3
 800d858:	683b      	ldr	r3, [r7, #0]
 800d85a:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800d85c:	7ebb      	ldrb	r3, [r7, #26]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d009      	beq.n	800d876 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800d862:	683b      	ldr	r3, [r7, #0]
 800d864:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800d866:	6939      	ldr	r1, [r7, #16]
 800d868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d86a:	440b      	add	r3, r1
 800d86c:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800d86e:	441a      	add	r2, r3
 800d870:	683b      	ldr	r3, [r7, #0]
 800d872:	601a      	str	r2, [r3, #0]
 800d874:	e00a      	b.n	800d88c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800d876:	7e7b      	ldrb	r3, [r7, #25]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d007      	beq.n	800d88c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800d87c:	683b      	ldr	r3, [r7, #0]
 800d87e:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800d880:	6939      	ldr	r1, [r7, #16]
 800d882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d884:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800d886:	441a      	add	r2, r3
 800d888:	683b      	ldr	r3, [r7, #0]
 800d88a:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800d88c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d890:	2b00      	cmp	r3, #0
 800d892:	d114      	bne.n	800d8be <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800d894:	7efb      	ldrb	r3, [r7, #27]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d011      	beq.n	800d8be <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800d89a:	f107 030c 	add.w	r3, r7, #12
 800d89e:	461a      	mov	r2, r3
 800d8a0:	2103      	movs	r1, #3
 800d8a2:	6878      	ldr	r0, [r7, #4]
 800d8a4:	f7ff fa0e 	bl	800ccc4 <get_sequence_step_timeout>
 800d8a8:	4603      	mov	r3, r0
 800d8aa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800d8ae:	683b      	ldr	r3, [r7, #0]
 800d8b0:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800d8b2:	68f9      	ldr	r1, [r7, #12]
 800d8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8b6:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800d8b8:	441a      	add	r2, r3
 800d8ba:	683b      	ldr	r3, [r7, #0]
 800d8bc:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800d8be:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d114      	bne.n	800d8f0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800d8c6:	7f3b      	ldrb	r3, [r7, #28]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d011      	beq.n	800d8f0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800d8cc:	f107 0314 	add.w	r3, r7, #20
 800d8d0:	461a      	mov	r2, r3
 800d8d2:	2104      	movs	r1, #4
 800d8d4:	6878      	ldr	r0, [r7, #4]
 800d8d6:	f7ff f9f5 	bl	800ccc4 <get_sequence_step_timeout>
 800d8da:	4603      	mov	r3, r0
 800d8dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800d8e0:	683b      	ldr	r3, [r7, #0]
 800d8e2:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800d8e4:	6979      	ldr	r1, [r7, #20]
 800d8e6:	6a3b      	ldr	r3, [r7, #32]
 800d8e8:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800d8ea:	441a      	add	r2, r3
 800d8ec:	683b      	ldr	r3, [r7, #0]
 800d8ee:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800d8f0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d103      	bne.n	800d900 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800d8f8:	683b      	ldr	r3, [r7, #0]
 800d8fa:	681a      	ldr	r2, [r3, #0]
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800d900:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800d904:	4618      	mov	r0, r3
 800d906:	3740      	adds	r7, #64	; 0x40
 800d908:	46bd      	mov	sp, r7
 800d90a:	bd80      	pop	{r7, pc}

0800d90c <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b088      	sub	sp, #32
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
 800d914:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d916:	2300      	movs	r3, #0
 800d918:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800d91a:	2300      	movs	r3, #0
 800d91c:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800d91e:	e0c6      	b.n	800daae <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800d920:	697b      	ldr	r3, [r7, #20]
 800d922:	683a      	ldr	r2, [r7, #0]
 800d924:	4413      	add	r3, r2
 800d926:	781b      	ldrb	r3, [r3, #0]
 800d928:	74fb      	strb	r3, [r7, #19]
		Index++;
 800d92a:	697b      	ldr	r3, [r7, #20]
 800d92c:	3301      	adds	r3, #1
 800d92e:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800d930:	7cfb      	ldrb	r3, [r7, #19]
 800d932:	2bff      	cmp	r3, #255	; 0xff
 800d934:	f040 808d 	bne.w	800da52 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800d938:	697b      	ldr	r3, [r7, #20]
 800d93a:	683a      	ldr	r2, [r7, #0]
 800d93c:	4413      	add	r3, r2
 800d93e:	781b      	ldrb	r3, [r3, #0]
 800d940:	747b      	strb	r3, [r7, #17]
			Index++;
 800d942:	697b      	ldr	r3, [r7, #20]
 800d944:	3301      	adds	r3, #1
 800d946:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800d948:	7c7b      	ldrb	r3, [r7, #17]
 800d94a:	2b03      	cmp	r3, #3
 800d94c:	d87e      	bhi.n	800da4c <VL53L0X_load_tuning_settings+0x140>
 800d94e:	a201      	add	r2, pc, #4	; (adr r2, 800d954 <VL53L0X_load_tuning_settings+0x48>)
 800d950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d954:	0800d965 	.word	0x0800d965
 800d958:	0800d99f 	.word	0x0800d99f
 800d95c:	0800d9d9 	.word	0x0800d9d9
 800d960:	0800da13 	.word	0x0800da13
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800d964:	697b      	ldr	r3, [r7, #20]
 800d966:	683a      	ldr	r2, [r7, #0]
 800d968:	4413      	add	r3, r2
 800d96a:	781b      	ldrb	r3, [r3, #0]
 800d96c:	743b      	strb	r3, [r7, #16]
				Index++;
 800d96e:	697b      	ldr	r3, [r7, #20]
 800d970:	3301      	adds	r3, #1
 800d972:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800d974:	697b      	ldr	r3, [r7, #20]
 800d976:	683a      	ldr	r2, [r7, #0]
 800d978:	4413      	add	r3, r2
 800d97a:	781b      	ldrb	r3, [r3, #0]
 800d97c:	73fb      	strb	r3, [r7, #15]
				Index++;
 800d97e:	697b      	ldr	r3, [r7, #20]
 800d980:	3301      	adds	r3, #1
 800d982:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800d984:	7c3b      	ldrb	r3, [r7, #16]
 800d986:	b29b      	uxth	r3, r3
 800d988:	021b      	lsls	r3, r3, #8
 800d98a:	b29a      	uxth	r2, r3
 800d98c:	7bfb      	ldrb	r3, [r7, #15]
 800d98e:	b29b      	uxth	r3, r3
 800d990:	4413      	add	r3, r2
 800d992:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	89ba      	ldrh	r2, [r7, #12]
 800d998:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800d99c:	e087      	b.n	800daae <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800d99e:	697b      	ldr	r3, [r7, #20]
 800d9a0:	683a      	ldr	r2, [r7, #0]
 800d9a2:	4413      	add	r3, r2
 800d9a4:	781b      	ldrb	r3, [r3, #0]
 800d9a6:	743b      	strb	r3, [r7, #16]
				Index++;
 800d9a8:	697b      	ldr	r3, [r7, #20]
 800d9aa:	3301      	adds	r3, #1
 800d9ac:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800d9ae:	697b      	ldr	r3, [r7, #20]
 800d9b0:	683a      	ldr	r2, [r7, #0]
 800d9b2:	4413      	add	r3, r2
 800d9b4:	781b      	ldrb	r3, [r3, #0]
 800d9b6:	73fb      	strb	r3, [r7, #15]
				Index++;
 800d9b8:	697b      	ldr	r3, [r7, #20]
 800d9ba:	3301      	adds	r3, #1
 800d9bc:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800d9be:	7c3b      	ldrb	r3, [r7, #16]
 800d9c0:	b29b      	uxth	r3, r3
 800d9c2:	021b      	lsls	r3, r3, #8
 800d9c4:	b29a      	uxth	r2, r3
 800d9c6:	7bfb      	ldrb	r3, [r7, #15]
 800d9c8:	b29b      	uxth	r3, r3
 800d9ca:	4413      	add	r3, r2
 800d9cc:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	89ba      	ldrh	r2, [r7, #12]
 800d9d2:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800d9d6:	e06a      	b.n	800daae <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800d9d8:	697b      	ldr	r3, [r7, #20]
 800d9da:	683a      	ldr	r2, [r7, #0]
 800d9dc:	4413      	add	r3, r2
 800d9de:	781b      	ldrb	r3, [r3, #0]
 800d9e0:	743b      	strb	r3, [r7, #16]
				Index++;
 800d9e2:	697b      	ldr	r3, [r7, #20]
 800d9e4:	3301      	adds	r3, #1
 800d9e6:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800d9e8:	697b      	ldr	r3, [r7, #20]
 800d9ea:	683a      	ldr	r2, [r7, #0]
 800d9ec:	4413      	add	r3, r2
 800d9ee:	781b      	ldrb	r3, [r3, #0]
 800d9f0:	73fb      	strb	r3, [r7, #15]
				Index++;
 800d9f2:	697b      	ldr	r3, [r7, #20]
 800d9f4:	3301      	adds	r3, #1
 800d9f6:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800d9f8:	7c3b      	ldrb	r3, [r7, #16]
 800d9fa:	b29b      	uxth	r3, r3
 800d9fc:	021b      	lsls	r3, r3, #8
 800d9fe:	b29a      	uxth	r2, r3
 800da00:	7bfb      	ldrb	r3, [r7, #15]
 800da02:	b29b      	uxth	r3, r3
 800da04:	4413      	add	r3, r2
 800da06:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	89ba      	ldrh	r2, [r7, #12]
 800da0c:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800da10:	e04d      	b.n	800daae <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800da12:	697b      	ldr	r3, [r7, #20]
 800da14:	683a      	ldr	r2, [r7, #0]
 800da16:	4413      	add	r3, r2
 800da18:	781b      	ldrb	r3, [r3, #0]
 800da1a:	743b      	strb	r3, [r7, #16]
				Index++;
 800da1c:	697b      	ldr	r3, [r7, #20]
 800da1e:	3301      	adds	r3, #1
 800da20:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800da22:	697b      	ldr	r3, [r7, #20]
 800da24:	683a      	ldr	r2, [r7, #0]
 800da26:	4413      	add	r3, r2
 800da28:	781b      	ldrb	r3, [r3, #0]
 800da2a:	73fb      	strb	r3, [r7, #15]
				Index++;
 800da2c:	697b      	ldr	r3, [r7, #20]
 800da2e:	3301      	adds	r3, #1
 800da30:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800da32:	7c3b      	ldrb	r3, [r7, #16]
 800da34:	b29b      	uxth	r3, r3
 800da36:	021b      	lsls	r3, r3, #8
 800da38:	b29a      	uxth	r2, r3
 800da3a:	7bfb      	ldrb	r3, [r7, #15]
 800da3c:	b29b      	uxth	r3, r3
 800da3e:	4413      	add	r3, r2
 800da40:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	89ba      	ldrh	r2, [r7, #12]
 800da46:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800da4a:	e030      	b.n	800daae <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800da4c:	23fc      	movs	r3, #252	; 0xfc
 800da4e:	77fb      	strb	r3, [r7, #31]
 800da50:	e02d      	b.n	800daae <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800da52:	7cfb      	ldrb	r3, [r7, #19]
 800da54:	2b04      	cmp	r3, #4
 800da56:	d828      	bhi.n	800daaa <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800da58:	697b      	ldr	r3, [r7, #20]
 800da5a:	683a      	ldr	r2, [r7, #0]
 800da5c:	4413      	add	r3, r2
 800da5e:	781b      	ldrb	r3, [r3, #0]
 800da60:	74bb      	strb	r3, [r7, #18]
			Index++;
 800da62:	697b      	ldr	r3, [r7, #20]
 800da64:	3301      	adds	r3, #1
 800da66:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800da68:	2300      	movs	r3, #0
 800da6a:	61bb      	str	r3, [r7, #24]
 800da6c:	e00f      	b.n	800da8e <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800da6e:	697b      	ldr	r3, [r7, #20]
 800da70:	683a      	ldr	r2, [r7, #0]
 800da72:	4413      	add	r3, r2
 800da74:	7819      	ldrb	r1, [r3, #0]
 800da76:	f107 0208 	add.w	r2, r7, #8
 800da7a:	69bb      	ldr	r3, [r7, #24]
 800da7c:	4413      	add	r3, r2
 800da7e:	460a      	mov	r2, r1
 800da80:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800da82:	697b      	ldr	r3, [r7, #20]
 800da84:	3301      	adds	r3, #1
 800da86:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800da88:	69bb      	ldr	r3, [r7, #24]
 800da8a:	3301      	adds	r3, #1
 800da8c:	61bb      	str	r3, [r7, #24]
 800da8e:	7cfb      	ldrb	r3, [r7, #19]
 800da90:	69ba      	ldr	r2, [r7, #24]
 800da92:	429a      	cmp	r2, r3
 800da94:	dbeb      	blt.n	800da6e <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800da96:	7cfb      	ldrb	r3, [r7, #19]
 800da98:	f107 0208 	add.w	r2, r7, #8
 800da9c:	7cb9      	ldrb	r1, [r7, #18]
 800da9e:	6878      	ldr	r0, [r7, #4]
 800daa0:	f000 fdee 	bl	800e680 <VL53L0X_WriteMulti>
 800daa4:	4603      	mov	r3, r0
 800daa6:	77fb      	strb	r3, [r7, #31]
 800daa8:	e001      	b.n	800daae <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800daaa:	23fc      	movs	r3, #252	; 0xfc
 800daac:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800daae:	697b      	ldr	r3, [r7, #20]
 800dab0:	683a      	ldr	r2, [r7, #0]
 800dab2:	4413      	add	r3, r2
 800dab4:	781b      	ldrb	r3, [r3, #0]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d004      	beq.n	800dac4 <VL53L0X_load_tuning_settings+0x1b8>
 800daba:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	f43f af2e 	beq.w	800d920 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800dac4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800dac8:	4618      	mov	r0, r3
 800daca:	3720      	adds	r7, #32
 800dacc:	46bd      	mov	sp, r7
 800dace:	bd80      	pop	{r7, pc}

0800dad0 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b088      	sub	sp, #32
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	60f8      	str	r0, [r7, #12]
 800dad8:	60b9      	str	r1, [r7, #8]
 800dada:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800dadc:	2300      	movs	r3, #0
 800dade:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	2200      	movs	r2, #0
 800dae4:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800dae6:	f107 0313 	add.w	r3, r7, #19
 800daea:	4619      	mov	r1, r3
 800daec:	68f8      	ldr	r0, [r7, #12]
 800daee:	f7fc fcf1 	bl	800a4d4 <VL53L0X_GetXTalkCompensationEnable>
 800daf2:	4603      	mov	r3, r0
 800daf4:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800daf6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d111      	bne.n	800db22 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800dafe:	7cfb      	ldrb	r3, [r7, #19]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d00e      	beq.n	800db22 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	6a1b      	ldr	r3, [r3, #32]
 800db08:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800db0a:	68bb      	ldr	r3, [r7, #8]
 800db0c:	8a9b      	ldrh	r3, [r3, #20]
 800db0e:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800db10:	69bb      	ldr	r3, [r7, #24]
 800db12:	fb02 f303 	mul.w	r3, r2, r3
 800db16:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800db18:	697b      	ldr	r3, [r7, #20]
 800db1a:	3380      	adds	r3, #128	; 0x80
 800db1c:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800db22:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800db26:	4618      	mov	r0, r3
 800db28:	3720      	adds	r7, #32
 800db2a:	46bd      	mov	sp, r7
 800db2c:	bd80      	pop	{r7, pc}

0800db2e <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800db2e:	b580      	push	{r7, lr}
 800db30:	b086      	sub	sp, #24
 800db32:	af00      	add	r7, sp, #0
 800db34:	60f8      	str	r0, [r7, #12]
 800db36:	60b9      	str	r1, [r7, #8]
 800db38:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800db3a:	2300      	movs	r3, #0
 800db3c:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800db3e:	68bb      	ldr	r3, [r7, #8]
 800db40:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800db46:	f107 0310 	add.w	r3, r7, #16
 800db4a:	461a      	mov	r2, r3
 800db4c:	68b9      	ldr	r1, [r7, #8]
 800db4e:	68f8      	ldr	r0, [r7, #12]
 800db50:	f7ff ffbe 	bl	800dad0 <VL53L0X_get_total_xtalk_rate>
 800db54:	4603      	mov	r3, r0
 800db56:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800db58:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d105      	bne.n	800db6c <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	681a      	ldr	r2, [r3, #0]
 800db64:	693b      	ldr	r3, [r7, #16]
 800db66:	441a      	add	r2, r3
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	601a      	str	r2, [r3, #0]

	return Status;
 800db6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800db70:	4618      	mov	r0, r3
 800db72:	3718      	adds	r7, #24
 800db74:	46bd      	mov	sp, r7
 800db76:	bd80      	pop	{r7, pc}

0800db78 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800db78:	b580      	push	{r7, lr}
 800db7a:	b09a      	sub	sp, #104	; 0x68
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	60f8      	str	r0, [r7, #12]
 800db80:	60b9      	str	r1, [r7, #8]
 800db82:	607a      	str	r2, [r7, #4]
 800db84:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800db86:	2312      	movs	r3, #18
 800db88:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800db8a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800db8e:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800db90:	2342      	movs	r3, #66	; 0x42
 800db92:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800db94:	2306      	movs	r3, #6
 800db96:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800db98:	2307      	movs	r3, #7
 800db9a:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800db9c:	2300      	movs	r3, #0
 800db9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 800dba8:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800dbb0:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800dbb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dbb6:	fb02 f303 	mul.w	r3, r2, r3
 800dbba:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800dbbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbbe:	3380      	adds	r3, #128	; 0x80
 800dbc0:	0a1b      	lsrs	r3, r3, #8
 800dbc2:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800dbc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbc6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dbc8:	fb02 f303 	mul.w	r3, r2, r3
 800dbcc:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800dbce:	2300      	movs	r3, #0
 800dbd0:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d01a      	beq.n	800dc0e <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800dbd8:	68bb      	ldr	r3, [r7, #8]
 800dbda:	029b      	lsls	r3, r3, #10
 800dbdc:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800dbe2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbe4:	4413      	add	r3, r2
 800dbe6:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800dbe8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	fbb2 f3f3 	udiv	r3, r2, r3
 800dbf0:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800dbf2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800dbf4:	4613      	mov	r3, r2
 800dbf6:	005b      	lsls	r3, r3, #1
 800dbf8:	4413      	add	r3, r2
 800dbfa:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800dbfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dbfe:	fb03 f303 	mul.w	r3, r3, r3
 800dc02:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800dc04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dc06:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800dc0a:	0c1b      	lsrs	r3, r3, #16
 800dc0c:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800dc0e:	683b      	ldr	r3, [r7, #0]
 800dc10:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800dc12:	fb02 f303 	mul.w	r3, r2, r3
 800dc16:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800dc18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc1a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800dc1e:	0c1b      	lsrs	r3, r3, #16
 800dc20:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800dc22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc24:	fb03 f303 	mul.w	r3, r3, r3
 800dc28:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800dc2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dc2c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800dc30:	0c1b      	lsrs	r3, r3, #16
 800dc32:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800dc34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc36:	085a      	lsrs	r2, r3, #1
 800dc38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc3a:	441a      	add	r2, r3
 800dc3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc3e:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc42:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800dc44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dc48:	fb02 f303 	mul.w	r3, r2, r3
 800dc4c:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800dc4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dc54:	d302      	bcc.n	800dc5c <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800dc56:	4b54      	ldr	r3, [pc, #336]	; (800dda8 <VL53L0X_calc_dmax+0x230>)
 800dc58:	663b      	str	r3, [r7, #96]	; 0x60
 800dc5a:	e015      	b.n	800dc88 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800dc5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc5e:	085a      	lsrs	r2, r3, #1
 800dc60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dc62:	441a      	add	r2, r3
 800dc64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc66:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc6a:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800dc6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dc6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dc70:	fb02 f303 	mul.w	r3, r2, r3
 800dc74:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800dc76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dc78:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800dc7c:	0c1b      	lsrs	r3, r3, #16
 800dc7e:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800dc80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dc82:	fb03 f303 	mul.w	r3, r3, r3
 800dc86:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800dc88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dc8a:	039b      	lsls	r3, r3, #14
 800dc8c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800dc90:	4a46      	ldr	r2, [pc, #280]	; (800ddac <VL53L0X_calc_dmax+0x234>)
 800dc92:	fba2 2303 	umull	r2, r3, r2, r3
 800dc96:	099b      	lsrs	r3, r3, #6
 800dc98:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800dc9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc9c:	fb03 f303 	mul.w	r3, r3, r3
 800dca0:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800dca2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dca4:	fb03 f303 	mul.w	r3, r3, r3
 800dca8:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800dcaa:	6a3b      	ldr	r3, [r7, #32]
 800dcac:	3308      	adds	r3, #8
 800dcae:	091b      	lsrs	r3, r3, #4
 800dcb0:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800dcb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dcb4:	6a3b      	ldr	r3, [r7, #32]
 800dcb6:	1ad3      	subs	r3, r2, r3
 800dcb8:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800dcba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dcbc:	4613      	mov	r3, r2
 800dcbe:	005b      	lsls	r3, r3, #1
 800dcc0:	4413      	add	r3, r2
 800dcc2:	011b      	lsls	r3, r3, #4
 800dcc4:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800dcc6:	69fb      	ldr	r3, [r7, #28]
 800dcc8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800dccc:	0b9b      	lsrs	r3, r3, #14
 800dcce:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800dcd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dcd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dcd4:	4413      	add	r3, r2
 800dcd6:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800dcd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dcda:	085b      	lsrs	r3, r3, #1
 800dcdc:	69ba      	ldr	r2, [r7, #24]
 800dcde:	4413      	add	r3, r2
 800dce0:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800dce2:	69ba      	ldr	r2, [r7, #24]
 800dce4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dce6:	fbb2 f3f3 	udiv	r3, r2, r3
 800dcea:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800dcec:	69bb      	ldr	r3, [r7, #24]
 800dcee:	039b      	lsls	r3, r3, #14
 800dcf0:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800dcf2:	69fb      	ldr	r3, [r7, #28]
 800dcf4:	085b      	lsrs	r3, r3, #1
 800dcf6:	69ba      	ldr	r2, [r7, #24]
 800dcf8:	4413      	add	r3, r2
 800dcfa:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800dcfc:	69ba      	ldr	r2, [r7, #24]
 800dcfe:	69fb      	ldr	r3, [r7, #28]
 800dd00:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd04:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800dd06:	69bb      	ldr	r3, [r7, #24]
 800dd08:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800dd0a:	fb02 f303 	mul.w	r3, r2, r3
 800dd0e:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800dd10:	69bb      	ldr	r3, [r7, #24]
 800dd12:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800dd16:	4a25      	ldr	r2, [pc, #148]	; (800ddac <VL53L0X_calc_dmax+0x234>)
 800dd18:	fba2 2303 	umull	r2, r3, r2, r3
 800dd1c:	099b      	lsrs	r3, r3, #6
 800dd1e:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800dd20:	69bb      	ldr	r3, [r7, #24]
 800dd22:	011b      	lsls	r3, r3, #4
 800dd24:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800dd26:	69bb      	ldr	r3, [r7, #24]
 800dd28:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800dd2c:	4a1f      	ldr	r2, [pc, #124]	; (800ddac <VL53L0X_calc_dmax+0x234>)
 800dd2e:	fba2 2303 	umull	r2, r3, r2, r3
 800dd32:	099b      	lsrs	r3, r3, #6
 800dd34:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800dd36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd38:	3380      	adds	r3, #128	; 0x80
 800dd3a:	0a1b      	lsrs	r3, r3, #8
 800dd3c:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800dd3e:	697b      	ldr	r3, [r7, #20]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d008      	beq.n	800dd56 <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800dd44:	697b      	ldr	r3, [r7, #20]
 800dd46:	085a      	lsrs	r2, r3, #1
 800dd48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd4a:	441a      	add	r2, r3
 800dd4c:	697b      	ldr	r3, [r7, #20]
 800dd4e:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd52:	65bb      	str	r3, [r7, #88]	; 0x58
 800dd54:	e001      	b.n	800dd5a <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800dd56:	2300      	movs	r3, #0
 800dd58:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800dd5a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800dd5c:	f7fe f9ba 	bl	800c0d4 <VL53L0X_isqrt>
 800dd60:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800dd62:	69bb      	ldr	r3, [r7, #24]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d008      	beq.n	800dd7a <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800dd68:	69bb      	ldr	r3, [r7, #24]
 800dd6a:	085a      	lsrs	r2, r3, #1
 800dd6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd6e:	441a      	add	r2, r3
 800dd70:	69bb      	ldr	r3, [r7, #24]
 800dd72:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd76:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dd78:	e001      	b.n	800dd7e <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800dd7e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800dd80:	f7fe f9a8 	bl	800c0d4 <VL53L0X_isqrt>
 800dd84:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800dd86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dd88:	693a      	ldr	r2, [r7, #16]
 800dd8a:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800dd8c:	693a      	ldr	r2, [r7, #16]
 800dd8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dd90:	429a      	cmp	r2, r3
 800dd92:	d902      	bls.n	800dd9a <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800dd94:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dd96:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dd98:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800dd9a:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800dd9e:	4618      	mov	r0, r3
 800dda0:	3768      	adds	r7, #104	; 0x68
 800dda2:	46bd      	mov	sp, r7
 800dda4:	bd80      	pop	{r7, pc}
 800dda6:	bf00      	nop
 800dda8:	fff00000 	.word	0xfff00000
 800ddac:	10624dd3 	.word	0x10624dd3

0800ddb0 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b0b4      	sub	sp, #208	; 0xd0
 800ddb4:	af04      	add	r7, sp, #16
 800ddb6:	60f8      	str	r0, [r7, #12]
 800ddb8:	60b9      	str	r1, [r7, #8]
 800ddba:	607a      	str	r2, [r7, #4]
 800ddbc:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800ddbe:	f44f 7348 	mov.w	r3, #800	; 0x320
 800ddc2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800ddc6:	f44f 7316 	mov.w	r3, #600	; 0x258
 800ddca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800ddce:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800ddd2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800ddd6:	f241 235c 	movw	r3, #4700	; 0x125c
 800ddda:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800ddde:	4b9e      	ldr	r3, [pc, #632]	; (800e058 <VL53L0X_calc_sigma_estimate+0x2a8>)
 800dde0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800dde4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800dde8:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800ddea:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800ddee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ddf2:	fbb2 f3f3 	udiv	r3, r2, r3
 800ddf6:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800ddf8:	4b98      	ldr	r3, [pc, #608]	; (800e05c <VL53L0X_calc_sigma_estimate+0x2ac>)
 800ddfa:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800ddfc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800de00:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800de02:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800de06:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800de08:	f240 6377 	movw	r3, #1655	; 0x677
 800de0c:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800de0e:	2300      	movs	r3, #0
 800de10:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	6a1b      	ldr	r3, [r3, #32]
 800de18:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800de1a:	68bb      	ldr	r3, [r7, #8]
 800de1c:	691b      	ldr	r3, [r3, #16]
 800de1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800de22:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800de26:	0c1b      	lsrs	r3, r3, #16
 800de28:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800de2a:	68bb      	ldr	r3, [r7, #8]
 800de2c:	68db      	ldr	r3, [r3, #12]
 800de2e:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800de30:	f107 0310 	add.w	r3, r7, #16
 800de34:	461a      	mov	r2, r3
 800de36:	68b9      	ldr	r1, [r7, #8]
 800de38:	68f8      	ldr	r0, [r7, #12]
 800de3a:	f7ff fe78 	bl	800db2e <VL53L0X_get_total_signal_rate>
 800de3e:	4603      	mov	r3, r0
 800de40:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800de44:	f107 0314 	add.w	r3, r7, #20
 800de48:	461a      	mov	r2, r3
 800de4a:	68b9      	ldr	r1, [r7, #8]
 800de4c:	68f8      	ldr	r0, [r7, #12]
 800de4e:	f7ff fe3f 	bl	800dad0 <VL53L0X_get_total_xtalk_rate>
 800de52:	4603      	mov	r3, r0
 800de54:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800de58:	693b      	ldr	r3, [r7, #16]
 800de5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800de5e:	fb02 f303 	mul.w	r3, r2, r3
 800de62:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800de64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800de66:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800de6a:	0c1b      	lsrs	r3, r3, #16
 800de6c:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800de6e:	697b      	ldr	r3, [r7, #20]
 800de70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800de74:	fb02 f303 	mul.w	r3, r2, r3
 800de78:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800de7c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800de80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800de82:	429a      	cmp	r2, r3
 800de84:	d902      	bls.n	800de8c <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800de86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800de88:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800de8c:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800de90:	2b00      	cmp	r3, #0
 800de92:	d168      	bne.n	800df66 <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800de9a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800dea4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800dea8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800deac:	461a      	mov	r2, r3
 800deae:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800deb2:	68f8      	ldr	r0, [r7, #12]
 800deb4:	f7fe feb2 	bl	800cc1c <VL53L0X_calc_timeout_mclks>
 800deb8:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800dec0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800deca:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800dece:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800ded2:	461a      	mov	r2, r3
 800ded4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800ded8:	68f8      	ldr	r0, [r7, #12]
 800deda:	f7fe fe9f 	bl	800cc1c <VL53L0X_calc_timeout_mclks>
 800dede:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800dee0:	2303      	movs	r3, #3
 800dee2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800dee6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800deea:	2b08      	cmp	r3, #8
 800deec:	d102      	bne.n	800def4 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800deee:	2302      	movs	r3, #2
 800def0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800def4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800def6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800def8:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800defa:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800defe:	fb02 f303 	mul.w	r3, r2, r3
 800df02:	02db      	lsls	r3, r3, #11
 800df04:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800df08:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800df0c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800df10:	4a53      	ldr	r2, [pc, #332]	; (800e060 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800df12:	fba2 2303 	umull	r2, r3, r2, r3
 800df16:	099b      	lsrs	r3, r3, #6
 800df18:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800df1c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800df20:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800df22:	fb02 f303 	mul.w	r3, r2, r3
 800df26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800df2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800df2e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800df32:	4a4b      	ldr	r2, [pc, #300]	; (800e060 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800df34:	fba2 2303 	umull	r2, r3, r2, r3
 800df38:	099b      	lsrs	r3, r3, #6
 800df3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800df3e:	693b      	ldr	r3, [r7, #16]
 800df40:	3380      	adds	r3, #128	; 0x80
 800df42:	0a1b      	lsrs	r3, r3, #8
 800df44:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800df46:	693a      	ldr	r2, [r7, #16]
 800df48:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800df4c:	fb02 f303 	mul.w	r3, r2, r3
 800df50:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800df54:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800df58:	3380      	adds	r3, #128	; 0x80
 800df5a:	0a1b      	lsrs	r3, r3, #8
 800df5c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800df60:	693b      	ldr	r3, [r7, #16]
 800df62:	021b      	lsls	r3, r3, #8
 800df64:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800df66:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d002      	beq.n	800df74 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800df6e:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800df72:	e15e      	b.n	800e232 <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 800df74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800df76:	2b00      	cmp	r3, #0
 800df78:	d10c      	bne.n	800df94 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800df80:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800df88:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800df8c:	683b      	ldr	r3, [r7, #0]
 800df8e:	2200      	movs	r2, #0
 800df90:	601a      	str	r2, [r3, #0]
 800df92:	e14c      	b.n	800e22e <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800df94:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d102      	bne.n	800dfa2 <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800df9c:	2301      	movs	r3, #1
 800df9e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800dfa2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dfa6:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800dfa8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dfaa:	041a      	lsls	r2, r3, #16
 800dfac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dfae:	fbb2 f3f3 	udiv	r3, r2, r3
 800dfb2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800dfb6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800dfba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dfbc:	429a      	cmp	r2, r3
 800dfbe:	d902      	bls.n	800dfc6 <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800dfc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dfc2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800dfc6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800dfca:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800dfce:	fb02 f303 	mul.w	r3, r2, r3
 800dfd2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800dfd6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800dfda:	4613      	mov	r3, r2
 800dfdc:	005b      	lsls	r3, r3, #1
 800dfde:	4413      	add	r3, r2
 800dfe0:	009b      	lsls	r3, r3, #2
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	f7fe f876 	bl	800c0d4 <VL53L0X_isqrt>
 800dfe8:	4603      	mov	r3, r0
 800dfea:	005b      	lsls	r3, r3, #1
 800dfec:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800dfee:	68bb      	ldr	r3, [r7, #8]
 800dff0:	891b      	ldrh	r3, [r3, #8]
 800dff2:	461a      	mov	r2, r3
 800dff4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dff6:	fb02 f303 	mul.w	r3, r2, r3
 800dffa:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800dffc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dffe:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800e000:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e004:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800e006:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800e008:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800e00c:	4a14      	ldr	r2, [pc, #80]	; (800e060 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800e00e:	fba2 2303 	umull	r2, r3, r2, r3
 800e012:	099b      	lsrs	r3, r3, #6
 800e014:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800e016:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e018:	041b      	lsls	r3, r3, #16
 800e01a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800e01e:	4a10      	ldr	r2, [pc, #64]	; (800e060 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800e020:	fba2 2303 	umull	r2, r3, r2, r3
 800e024:	099b      	lsrs	r3, r3, #6
 800e026:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800e028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e02a:	021b      	lsls	r3, r3, #8
 800e02c:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800e02e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e032:	fbb2 f3f3 	udiv	r3, r2, r3
 800e036:	2b00      	cmp	r3, #0
 800e038:	bfb8      	it	lt
 800e03a:	425b      	neglt	r3, r3
 800e03c:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800e03e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e040:	021b      	lsls	r3, r3, #8
 800e042:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800e044:	68bb      	ldr	r3, [r7, #8]
 800e046:	7e1b      	ldrb	r3, [r3, #24]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d00b      	beq.n	800e064 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800e04c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800e050:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e054:	e033      	b.n	800e0be <VL53L0X_calc_sigma_estimate+0x30e>
 800e056:	bf00      	nop
 800e058:	028f87ae 	.word	0x028f87ae
 800e05c:	0006999a 	.word	0x0006999a
 800e060:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800e064:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e066:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e06a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e06e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800e072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e074:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800e078:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e07c:	fb02 f303 	mul.w	r3, r2, r3
 800e080:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800e084:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800e088:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e08a:	4413      	add	r3, r2
 800e08c:	0c1b      	lsrs	r3, r3, #16
 800e08e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800e092:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e096:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800e09a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800e09e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e0a2:	085b      	lsrs	r3, r3, #1
 800e0a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800e0a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e0ac:	fb03 f303 	mul.w	r3, r3, r3
 800e0b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800e0b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e0b8:	0b9b      	lsrs	r3, r3, #14
 800e0ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800e0be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e0c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e0c4:	fb02 f303 	mul.w	r3, r2, r3
 800e0c8:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800e0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0cc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e0d0:	0c1b      	lsrs	r3, r3, #16
 800e0d2:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800e0d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0d6:	fb03 f303 	mul.w	r3, r3, r3
 800e0da:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800e0dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e0e0:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800e0e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0e4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e0e8:	0c1b      	lsrs	r3, r3, #16
 800e0ea:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800e0ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0ee:	fb03 f303 	mul.w	r3, r3, r3
 800e0f2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800e0f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e0f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0f8:	4413      	add	r3, r2
 800e0fa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800e0fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e0fe:	f7fd ffe9 	bl	800c0d4 <VL53L0X_isqrt>
 800e102:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800e104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e106:	041b      	lsls	r3, r3, #16
 800e108:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800e10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e10c:	3332      	adds	r3, #50	; 0x32
 800e10e:	4a4b      	ldr	r2, [pc, #300]	; (800e23c <VL53L0X_calc_sigma_estimate+0x48c>)
 800e110:	fba2 2303 	umull	r2, r3, r2, r3
 800e114:	095a      	lsrs	r2, r3, #5
 800e116:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e118:	fbb2 f3f3 	udiv	r3, r2, r3
 800e11c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800e120:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e124:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800e128:	fb02 f303 	mul.w	r3, r2, r3
 800e12c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800e130:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e134:	f241 3388 	movw	r3, #5000	; 0x1388
 800e138:	4413      	add	r3, r2
 800e13a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800e13e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e142:	4a3f      	ldr	r2, [pc, #252]	; (800e240 <VL53L0X_calc_sigma_estimate+0x490>)
 800e144:	fba2 2303 	umull	r2, r3, r2, r3
 800e148:	0b5b      	lsrs	r3, r3, #13
 800e14a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800e14e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e152:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e154:	429a      	cmp	r2, r3
 800e156:	d902      	bls.n	800e15e <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800e158:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e15a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800e15e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800e162:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e166:	4413      	add	r3, r2
 800e168:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800e16c:	4a35      	ldr	r2, [pc, #212]	; (800e244 <VL53L0X_calc_sigma_estimate+0x494>)
 800e16e:	fba2 2303 	umull	r2, r3, r2, r3
 800e172:	099b      	lsrs	r3, r3, #6
 800e174:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800e176:	6a3b      	ldr	r3, [r7, #32]
 800e178:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800e17a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e17e:	441a      	add	r2, r3
 800e180:	6a3b      	ldr	r3, [r7, #32]
 800e182:	fbb2 f3f3 	udiv	r3, r2, r3
 800e186:	4618      	mov	r0, r3
 800e188:	f7fd ffa4 	bl	800c0d4 <VL53L0X_isqrt>
 800e18c:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800e18e:	69fb      	ldr	r3, [r7, #28]
 800e190:	021b      	lsls	r3, r3, #8
 800e192:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800e194:	69fb      	ldr	r3, [r7, #28]
 800e196:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800e19a:	4a2a      	ldr	r2, [pc, #168]	; (800e244 <VL53L0X_calc_sigma_estimate+0x494>)
 800e19c:	fba2 2303 	umull	r2, r3, r2, r3
 800e1a0:	099b      	lsrs	r3, r3, #6
 800e1a2:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800e1a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e1a8:	fb03 f303 	mul.w	r3, r3, r3
 800e1ac:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800e1ae:	69fb      	ldr	r3, [r7, #28]
 800e1b0:	fb03 f303 	mul.w	r3, r3, r3
 800e1b4:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800e1b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e1b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ba:	4413      	add	r3, r2
 800e1bc:	4618      	mov	r0, r3
 800e1be:	f7fd ff89 	bl	800c0d4 <VL53L0X_isqrt>
 800e1c2:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800e1c4:	69bb      	ldr	r3, [r7, #24]
 800e1c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e1ca:	fb02 f303 	mul.w	r3, r2, r3
 800e1ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800e1d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d009      	beq.n	800e1ec <VL53L0X_calc_sigma_estimate+0x43c>
 800e1d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d005      	beq.n	800e1ec <VL53L0X_calc_sigma_estimate+0x43c>
 800e1e0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800e1e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e1e8:	429a      	cmp	r2, r3
 800e1ea:	d903      	bls.n	800e1f4 <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800e1ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e1f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800e1fa:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	681a      	ldr	r2, [r3, #0]
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800e206:	6939      	ldr	r1, [r7, #16]
 800e208:	683b      	ldr	r3, [r7, #0]
 800e20a:	9303      	str	r3, [sp, #12]
 800e20c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e210:	9302      	str	r3, [sp, #8]
 800e212:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e216:	9301      	str	r3, [sp, #4]
 800e218:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e21a:	9300      	str	r3, [sp, #0]
 800e21c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e220:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e222:	68f8      	ldr	r0, [r7, #12]
 800e224:	f7ff fca8 	bl	800db78 <VL53L0X_calc_dmax>
 800e228:	4603      	mov	r3, r0
 800e22a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800e22e:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800e232:	4618      	mov	r0, r3
 800e234:	37c0      	adds	r7, #192	; 0xc0
 800e236:	46bd      	mov	sp, r7
 800e238:	bd80      	pop	{r7, pc}
 800e23a:	bf00      	nop
 800e23c:	51eb851f 	.word	0x51eb851f
 800e240:	d1b71759 	.word	0xd1b71759
 800e244:	10624dd3 	.word	0x10624dd3

0800e248 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800e248:	b580      	push	{r7, lr}
 800e24a:	b090      	sub	sp, #64	; 0x40
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	60f8      	str	r0, [r7, #12]
 800e250:	607a      	str	r2, [r7, #4]
 800e252:	461a      	mov	r2, r3
 800e254:	460b      	mov	r3, r1
 800e256:	72fb      	strb	r3, [r7, #11]
 800e258:	4613      	mov	r3, r2
 800e25a:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e25c:	2300      	movs	r3, #0
 800e25e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800e262:	2300      	movs	r3, #0
 800e264:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800e268:	2300      	movs	r3, #0
 800e26a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800e26e:	2300      	movs	r3, #0
 800e270:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800e274:	2300      	movs	r3, #0
 800e276:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800e27a:	2300      	movs	r3, #0
 800e27c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800e280:	2300      	movs	r3, #0
 800e282:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800e286:	2300      	movs	r3, #0
 800e288:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800e28c:	2300      	movs	r3, #0
 800e28e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800e292:	2300      	movs	r3, #0
 800e294:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800e296:	2300      	movs	r3, #0
 800e298:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800e29a:	7afb      	ldrb	r3, [r7, #11]
 800e29c:	10db      	asrs	r3, r3, #3
 800e29e:	b2db      	uxtb	r3, r3
 800e2a0:	f003 030f 	and.w	r3, r3, #15
 800e2a4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800e2a8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d017      	beq.n	800e2e0 <VL53L0X_get_pal_range_status+0x98>
 800e2b0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e2b4:	2b05      	cmp	r3, #5
 800e2b6:	d013      	beq.n	800e2e0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800e2b8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e2bc:	2b07      	cmp	r3, #7
 800e2be:	d00f      	beq.n	800e2e0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800e2c0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e2c4:	2b0c      	cmp	r3, #12
 800e2c6:	d00b      	beq.n	800e2e0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800e2c8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e2cc:	2b0d      	cmp	r3, #13
 800e2ce:	d007      	beq.n	800e2e0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800e2d0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e2d4:	2b0e      	cmp	r3, #14
 800e2d6:	d003      	beq.n	800e2e0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800e2d8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e2dc:	2b0f      	cmp	r3, #15
 800e2de:	d103      	bne.n	800e2e8 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800e2e0:	2301      	movs	r3, #1
 800e2e2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800e2e6:	e002      	b.n	800e2ee <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800e2ee:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d109      	bne.n	800e30a <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800e2f6:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800e2fa:	461a      	mov	r2, r3
 800e2fc:	2100      	movs	r1, #0
 800e2fe:	68f8      	ldr	r0, [r7, #12]
 800e300:	f7fc f9bc 	bl	800a67c <VL53L0X_GetLimitCheckEnable>
 800e304:	4603      	mov	r3, r0
 800e306:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800e30a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d02e      	beq.n	800e370 <VL53L0X_get_pal_range_status+0x128>
 800e312:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e316:	2b00      	cmp	r3, #0
 800e318:	d12a      	bne.n	800e370 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800e31a:	f107 0310 	add.w	r3, r7, #16
 800e31e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800e322:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e324:	68f8      	ldr	r0, [r7, #12]
 800e326:	f7ff fd43 	bl	800ddb0 <VL53L0X_calc_sigma_estimate>
 800e32a:	4603      	mov	r3, r0
 800e32c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800e330:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e334:	2b00      	cmp	r3, #0
 800e336:	d103      	bne.n	800e340 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800e338:	693b      	ldr	r3, [r7, #16]
 800e33a:	b29a      	uxth	r2, r3
 800e33c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e33e:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800e340:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e344:	2b00      	cmp	r3, #0
 800e346:	d113      	bne.n	800e370 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800e348:	f107 0320 	add.w	r3, r7, #32
 800e34c:	461a      	mov	r2, r3
 800e34e:	2100      	movs	r1, #0
 800e350:	68f8      	ldr	r0, [r7, #12]
 800e352:	f7fc fa19 	bl	800a788 <VL53L0X_GetLimitCheckValue>
 800e356:	4603      	mov	r3, r0
 800e358:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800e35c:	6a3b      	ldr	r3, [r7, #32]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d006      	beq.n	800e370 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800e362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e364:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800e366:	429a      	cmp	r2, r3
 800e368:	d902      	bls.n	800e370 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800e36a:	2301      	movs	r3, #1
 800e36c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800e370:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e374:	2b00      	cmp	r3, #0
 800e376:	d109      	bne.n	800e38c <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800e378:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800e37c:	461a      	mov	r2, r3
 800e37e:	2102      	movs	r1, #2
 800e380:	68f8      	ldr	r0, [r7, #12]
 800e382:	f7fc f97b 	bl	800a67c <VL53L0X_GetLimitCheckEnable>
 800e386:	4603      	mov	r3, r0
 800e388:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800e38c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800e390:	2b00      	cmp	r3, #0
 800e392:	d044      	beq.n	800e41e <VL53L0X_get_pal_range_status+0x1d6>
 800e394:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d140      	bne.n	800e41e <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800e39c:	f107 031c 	add.w	r3, r7, #28
 800e3a0:	461a      	mov	r2, r3
 800e3a2:	2102      	movs	r1, #2
 800e3a4:	68f8      	ldr	r0, [r7, #12]
 800e3a6:	f7fc f9ef 	bl	800a788 <VL53L0X_GetLimitCheckValue>
 800e3aa:	4603      	mov	r3, r0
 800e3ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800e3b0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d107      	bne.n	800e3c8 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800e3b8:	2201      	movs	r2, #1
 800e3ba:	21ff      	movs	r1, #255	; 0xff
 800e3bc:	68f8      	ldr	r0, [r7, #12]
 800e3be:	f000 f9bb 	bl	800e738 <VL53L0X_WrByte>
 800e3c2:	4603      	mov	r3, r0
 800e3c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800e3c8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d109      	bne.n	800e3e4 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800e3d0:	f107 0316 	add.w	r3, r7, #22
 800e3d4:	461a      	mov	r2, r3
 800e3d6:	21b6      	movs	r1, #182	; 0xb6
 800e3d8:	68f8      	ldr	r0, [r7, #12]
 800e3da:	f000 fa59 	bl	800e890 <VL53L0X_RdWord>
 800e3de:	4603      	mov	r3, r0
 800e3e0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800e3e4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d107      	bne.n	800e3fc <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800e3ec:	2200      	movs	r2, #0
 800e3ee:	21ff      	movs	r1, #255	; 0xff
 800e3f0:	68f8      	ldr	r0, [r7, #12]
 800e3f2:	f000 f9a1 	bl	800e738 <VL53L0X_WrByte>
 800e3f6:	4603      	mov	r3, r0
 800e3f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800e3fc:	8afb      	ldrh	r3, [r7, #22]
 800e3fe:	025b      	lsls	r3, r3, #9
 800e400:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e406:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800e40a:	69fb      	ldr	r3, [r7, #28]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d006      	beq.n	800e41e <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800e410:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800e412:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e414:	429a      	cmp	r2, r3
 800e416:	d902      	bls.n	800e41e <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800e418:	2301      	movs	r3, #1
 800e41a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800e41e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e422:	2b00      	cmp	r3, #0
 800e424:	d109      	bne.n	800e43a <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800e426:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e42a:	461a      	mov	r2, r3
 800e42c:	2103      	movs	r1, #3
 800e42e:	68f8      	ldr	r0, [r7, #12]
 800e430:	f7fc f924 	bl	800a67c <VL53L0X_GetLimitCheckEnable>
 800e434:	4603      	mov	r3, r0
 800e436:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800e43a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d023      	beq.n	800e48a <VL53L0X_get_pal_range_status+0x242>
 800e442:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e446:	2b00      	cmp	r3, #0
 800e448:	d11f      	bne.n	800e48a <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800e44a:	893b      	ldrh	r3, [r7, #8]
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d102      	bne.n	800e456 <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800e450:	2300      	movs	r3, #0
 800e452:	637b      	str	r3, [r7, #52]	; 0x34
 800e454:	e005      	b.n	800e462 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	021a      	lsls	r2, r3, #8
 800e45a:	893b      	ldrh	r3, [r7, #8]
 800e45c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e460:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800e462:	f107 0318 	add.w	r3, r7, #24
 800e466:	461a      	mov	r2, r3
 800e468:	2103      	movs	r1, #3
 800e46a:	68f8      	ldr	r0, [r7, #12]
 800e46c:	f7fc f98c 	bl	800a788 <VL53L0X_GetLimitCheckValue>
 800e470:	4603      	mov	r3, r0
 800e472:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800e476:	69bb      	ldr	r3, [r7, #24]
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d006      	beq.n	800e48a <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800e47c:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800e47e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e480:	429a      	cmp	r2, r3
 800e482:	d202      	bcs.n	800e48a <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800e484:	2301      	movs	r3, #1
 800e486:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800e48a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d14a      	bne.n	800e528 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800e492:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800e496:	2b01      	cmp	r3, #1
 800e498:	d103      	bne.n	800e4a2 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800e49a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e49c:	22ff      	movs	r2, #255	; 0xff
 800e49e:	701a      	strb	r2, [r3, #0]
 800e4a0:	e042      	b.n	800e528 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800e4a2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e4a6:	2b01      	cmp	r3, #1
 800e4a8:	d007      	beq.n	800e4ba <VL53L0X_get_pal_range_status+0x272>
 800e4aa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e4ae:	2b02      	cmp	r3, #2
 800e4b0:	d003      	beq.n	800e4ba <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800e4b2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e4b6:	2b03      	cmp	r3, #3
 800e4b8:	d103      	bne.n	800e4c2 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800e4ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e4bc:	2205      	movs	r2, #5
 800e4be:	701a      	strb	r2, [r3, #0]
 800e4c0:	e032      	b.n	800e528 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800e4c2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e4c6:	2b06      	cmp	r3, #6
 800e4c8:	d003      	beq.n	800e4d2 <VL53L0X_get_pal_range_status+0x28a>
 800e4ca:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e4ce:	2b09      	cmp	r3, #9
 800e4d0:	d103      	bne.n	800e4da <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800e4d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e4d4:	2204      	movs	r2, #4
 800e4d6:	701a      	strb	r2, [r3, #0]
 800e4d8:	e026      	b.n	800e528 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800e4da:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e4de:	2b08      	cmp	r3, #8
 800e4e0:	d007      	beq.n	800e4f2 <VL53L0X_get_pal_range_status+0x2aa>
 800e4e2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e4e6:	2b0a      	cmp	r3, #10
 800e4e8:	d003      	beq.n	800e4f2 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800e4ea:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e4ee:	2b01      	cmp	r3, #1
 800e4f0:	d103      	bne.n	800e4fa <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800e4f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e4f4:	2203      	movs	r2, #3
 800e4f6:	701a      	strb	r2, [r3, #0]
 800e4f8:	e016      	b.n	800e528 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800e4fa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e4fe:	2b04      	cmp	r3, #4
 800e500:	d003      	beq.n	800e50a <VL53L0X_get_pal_range_status+0x2c2>
 800e502:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800e506:	2b01      	cmp	r3, #1
 800e508:	d103      	bne.n	800e512 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800e50a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e50c:	2202      	movs	r2, #2
 800e50e:	701a      	strb	r2, [r3, #0]
 800e510:	e00a      	b.n	800e528 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800e512:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800e516:	2b01      	cmp	r3, #1
 800e518:	d103      	bne.n	800e522 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800e51a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e51c:	2201      	movs	r2, #1
 800e51e:	701a      	strb	r2, [r3, #0]
 800e520:	e002      	b.n	800e528 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800e522:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e524:	2200      	movs	r2, #0
 800e526:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800e528:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e52a:	781b      	ldrb	r3, [r3, #0]
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d102      	bne.n	800e536 <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800e530:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e532:	2200      	movs	r2, #0
 800e534:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800e536:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800e53a:	461a      	mov	r2, r3
 800e53c:	2101      	movs	r1, #1
 800e53e:	68f8      	ldr	r0, [r7, #12]
 800e540:	f7fc f89c 	bl	800a67c <VL53L0X_GetLimitCheckEnable>
 800e544:	4603      	mov	r3, r0
 800e546:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800e54a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d14f      	bne.n	800e5f2 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800e552:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e556:	2b00      	cmp	r3, #0
 800e558:	d003      	beq.n	800e562 <VL53L0X_get_pal_range_status+0x31a>
 800e55a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800e55e:	2b01      	cmp	r3, #1
 800e560:	d103      	bne.n	800e56a <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800e562:	2301      	movs	r3, #1
 800e564:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e568:	e002      	b.n	800e570 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800e56a:	2300      	movs	r3, #0
 800e56c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800e576:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800e57a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e57e:	2b04      	cmp	r3, #4
 800e580:	d003      	beq.n	800e58a <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800e582:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800e586:	2b00      	cmp	r3, #0
 800e588:	d103      	bne.n	800e592 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800e58a:	2301      	movs	r3, #1
 800e58c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e590:	e002      	b.n	800e598 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800e592:	2300      	movs	r3, #0
 800e594:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800e59e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800e5a2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d003      	beq.n	800e5b2 <VL53L0X_get_pal_range_status+0x36a>
 800e5aa:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e5ae:	2b01      	cmp	r3, #1
 800e5b0:	d103      	bne.n	800e5ba <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800e5b2:	2301      	movs	r3, #1
 800e5b4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e5b8:	e002      	b.n	800e5c0 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800e5ba:	2300      	movs	r3, #0
 800e5bc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800e5c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800e5ca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d003      	beq.n	800e5da <VL53L0X_get_pal_range_status+0x392>
 800e5d2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800e5d6:	2b01      	cmp	r3, #1
 800e5d8:	d103      	bne.n	800e5e2 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800e5da:	2301      	movs	r3, #1
 800e5dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e5e0:	e002      	b.n	800e5e8 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800e5ee:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800e5f2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	3740      	adds	r7, #64	; 0x40
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	bd80      	pop	{r7, pc}

0800e5fe <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800e5fe:	b580      	push	{r7, lr}
 800e600:	b088      	sub	sp, #32
 800e602:	af02      	add	r7, sp, #8
 800e604:	60f8      	str	r0, [r7, #12]
 800e606:	60b9      	str	r1, [r7, #8]
 800e608:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	330a      	adds	r3, #10
 800e60e:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800e61c:	b299      	uxth	r1, r3
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	b29a      	uxth	r2, r3
 800e622:	697b      	ldr	r3, [r7, #20]
 800e624:	9300      	str	r3, [sp, #0]
 800e626:	4613      	mov	r3, r2
 800e628:	68ba      	ldr	r2, [r7, #8]
 800e62a:	f7f4 fff5 	bl	8003618 <HAL_I2C_Master_Transmit>
 800e62e:	4603      	mov	r3, r0
 800e630:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800e632:	693b      	ldr	r3, [r7, #16]
}
 800e634:	4618      	mov	r0, r3
 800e636:	3718      	adds	r7, #24
 800e638:	46bd      	mov	sp, r7
 800e63a:	bd80      	pop	{r7, pc}

0800e63c <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800e63c:	b580      	push	{r7, lr}
 800e63e:	b088      	sub	sp, #32
 800e640:	af02      	add	r7, sp, #8
 800e642:	60f8      	str	r0, [r7, #12]
 800e644:	60b9      	str	r1, [r7, #8]
 800e646:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	330a      	adds	r3, #10
 800e64c:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800e65a:	f043 0301 	orr.w	r3, r3, #1
 800e65e:	b2db      	uxtb	r3, r3
 800e660:	b299      	uxth	r1, r3
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	b29a      	uxth	r2, r3
 800e666:	697b      	ldr	r3, [r7, #20]
 800e668:	9300      	str	r3, [sp, #0]
 800e66a:	4613      	mov	r3, r2
 800e66c:	68ba      	ldr	r2, [r7, #8]
 800e66e:	f7f5 f8c7 	bl	8003800 <HAL_I2C_Master_Receive>
 800e672:	4603      	mov	r3, r0
 800e674:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800e676:	693b      	ldr	r3, [r7, #16]
}
 800e678:	4618      	mov	r0, r3
 800e67a:	3718      	adds	r7, #24
 800e67c:	46bd      	mov	sp, r7
 800e67e:	bd80      	pop	{r7, pc}

0800e680 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800e680:	b580      	push	{r7, lr}
 800e682:	b086      	sub	sp, #24
 800e684:	af00      	add	r7, sp, #0
 800e686:	60f8      	str	r0, [r7, #12]
 800e688:	607a      	str	r2, [r7, #4]
 800e68a:	603b      	str	r3, [r7, #0]
 800e68c:	460b      	mov	r3, r1
 800e68e:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e690:	2300      	movs	r3, #0
 800e692:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800e694:	683b      	ldr	r3, [r7, #0]
 800e696:	2b3f      	cmp	r3, #63	; 0x3f
 800e698:	d902      	bls.n	800e6a0 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800e69a:	f06f 0303 	mvn.w	r3, #3
 800e69e:	e016      	b.n	800e6ce <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800e6a0:	4a0d      	ldr	r2, [pc, #52]	; (800e6d8 <VL53L0X_WriteMulti+0x58>)
 800e6a2:	7afb      	ldrb	r3, [r7, #11]
 800e6a4:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800e6a6:	683a      	ldr	r2, [r7, #0]
 800e6a8:	6879      	ldr	r1, [r7, #4]
 800e6aa:	480c      	ldr	r0, [pc, #48]	; (800e6dc <VL53L0X_WriteMulti+0x5c>)
 800e6ac:	f000 f99e 	bl	800e9ec <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800e6b0:	683b      	ldr	r3, [r7, #0]
 800e6b2:	3301      	adds	r3, #1
 800e6b4:	461a      	mov	r2, r3
 800e6b6:	4908      	ldr	r1, [pc, #32]	; (800e6d8 <VL53L0X_WriteMulti+0x58>)
 800e6b8:	68f8      	ldr	r0, [r7, #12]
 800e6ba:	f7ff ffa0 	bl	800e5fe <_I2CWrite>
 800e6be:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800e6c0:	693b      	ldr	r3, [r7, #16]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d001      	beq.n	800e6ca <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e6c6:	23ec      	movs	r3, #236	; 0xec
 800e6c8:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800e6ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	3718      	adds	r7, #24
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	bd80      	pop	{r7, pc}
 800e6d6:	bf00      	nop
 800e6d8:	20000728 	.word	0x20000728
 800e6dc:	20000729 	.word	0x20000729

0800e6e0 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b086      	sub	sp, #24
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	60f8      	str	r0, [r7, #12]
 800e6e8:	607a      	str	r2, [r7, #4]
 800e6ea:	603b      	str	r3, [r7, #0]
 800e6ec:	460b      	mov	r3, r1
 800e6ee:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e6f0:	2300      	movs	r3, #0
 800e6f2:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800e6f4:	f107 030b 	add.w	r3, r7, #11
 800e6f8:	2201      	movs	r2, #1
 800e6fa:	4619      	mov	r1, r3
 800e6fc:	68f8      	ldr	r0, [r7, #12]
 800e6fe:	f7ff ff7e 	bl	800e5fe <_I2CWrite>
 800e702:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800e704:	693b      	ldr	r3, [r7, #16]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d002      	beq.n	800e710 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e70a:	23ec      	movs	r3, #236	; 0xec
 800e70c:	75fb      	strb	r3, [r7, #23]
        goto done;
 800e70e:	e00c      	b.n	800e72a <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800e710:	683a      	ldr	r2, [r7, #0]
 800e712:	6879      	ldr	r1, [r7, #4]
 800e714:	68f8      	ldr	r0, [r7, #12]
 800e716:	f7ff ff91 	bl	800e63c <_I2CRead>
 800e71a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800e71c:	693b      	ldr	r3, [r7, #16]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d002      	beq.n	800e728 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e722:	23ec      	movs	r3, #236	; 0xec
 800e724:	75fb      	strb	r3, [r7, #23]
 800e726:	e000      	b.n	800e72a <VL53L0X_ReadMulti+0x4a>
    }
done:
 800e728:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800e72a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e72e:	4618      	mov	r0, r3
 800e730:	3718      	adds	r7, #24
 800e732:	46bd      	mov	sp, r7
 800e734:	bd80      	pop	{r7, pc}
	...

0800e738 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800e738:	b580      	push	{r7, lr}
 800e73a:	b084      	sub	sp, #16
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	6078      	str	r0, [r7, #4]
 800e740:	460b      	mov	r3, r1
 800e742:	70fb      	strb	r3, [r7, #3]
 800e744:	4613      	mov	r3, r2
 800e746:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e748:	2300      	movs	r3, #0
 800e74a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800e74c:	4a0b      	ldr	r2, [pc, #44]	; (800e77c <VL53L0X_WrByte+0x44>)
 800e74e:	78fb      	ldrb	r3, [r7, #3]
 800e750:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800e752:	4a0a      	ldr	r2, [pc, #40]	; (800e77c <VL53L0X_WrByte+0x44>)
 800e754:	78bb      	ldrb	r3, [r7, #2]
 800e756:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800e758:	2202      	movs	r2, #2
 800e75a:	4908      	ldr	r1, [pc, #32]	; (800e77c <VL53L0X_WrByte+0x44>)
 800e75c:	6878      	ldr	r0, [r7, #4]
 800e75e:	f7ff ff4e 	bl	800e5fe <_I2CWrite>
 800e762:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800e764:	68bb      	ldr	r3, [r7, #8]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d001      	beq.n	800e76e <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e76a:	23ec      	movs	r3, #236	; 0xec
 800e76c:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800e76e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e772:	4618      	mov	r0, r3
 800e774:	3710      	adds	r7, #16
 800e776:	46bd      	mov	sp, r7
 800e778:	bd80      	pop	{r7, pc}
 800e77a:	bf00      	nop
 800e77c:	20000728 	.word	0x20000728

0800e780 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800e780:	b580      	push	{r7, lr}
 800e782:	b084      	sub	sp, #16
 800e784:	af00      	add	r7, sp, #0
 800e786:	6078      	str	r0, [r7, #4]
 800e788:	460b      	mov	r3, r1
 800e78a:	70fb      	strb	r3, [r7, #3]
 800e78c:	4613      	mov	r3, r2
 800e78e:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e790:	2300      	movs	r3, #0
 800e792:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800e794:	4a0e      	ldr	r2, [pc, #56]	; (800e7d0 <VL53L0X_WrWord+0x50>)
 800e796:	78fb      	ldrb	r3, [r7, #3]
 800e798:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800e79a:	883b      	ldrh	r3, [r7, #0]
 800e79c:	0a1b      	lsrs	r3, r3, #8
 800e79e:	b29b      	uxth	r3, r3
 800e7a0:	b2da      	uxtb	r2, r3
 800e7a2:	4b0b      	ldr	r3, [pc, #44]	; (800e7d0 <VL53L0X_WrWord+0x50>)
 800e7a4:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800e7a6:	883b      	ldrh	r3, [r7, #0]
 800e7a8:	b2da      	uxtb	r2, r3
 800e7aa:	4b09      	ldr	r3, [pc, #36]	; (800e7d0 <VL53L0X_WrWord+0x50>)
 800e7ac:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800e7ae:	2203      	movs	r2, #3
 800e7b0:	4907      	ldr	r1, [pc, #28]	; (800e7d0 <VL53L0X_WrWord+0x50>)
 800e7b2:	6878      	ldr	r0, [r7, #4]
 800e7b4:	f7ff ff23 	bl	800e5fe <_I2CWrite>
 800e7b8:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800e7ba:	68bb      	ldr	r3, [r7, #8]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d001      	beq.n	800e7c4 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e7c0:	23ec      	movs	r3, #236	; 0xec
 800e7c2:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800e7c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e7c8:	4618      	mov	r0, r3
 800e7ca:	3710      	adds	r7, #16
 800e7cc:	46bd      	mov	sp, r7
 800e7ce:	bd80      	pop	{r7, pc}
 800e7d0:	20000728 	.word	0x20000728

0800e7d4 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800e7d4:	b580      	push	{r7, lr}
 800e7d6:	b084      	sub	sp, #16
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	6078      	str	r0, [r7, #4]
 800e7dc:	4608      	mov	r0, r1
 800e7de:	4611      	mov	r1, r2
 800e7e0:	461a      	mov	r2, r3
 800e7e2:	4603      	mov	r3, r0
 800e7e4:	70fb      	strb	r3, [r7, #3]
 800e7e6:	460b      	mov	r3, r1
 800e7e8:	70bb      	strb	r3, [r7, #2]
 800e7ea:	4613      	mov	r3, r2
 800e7ec:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800e7f2:	f107 020e 	add.w	r2, r7, #14
 800e7f6:	78fb      	ldrb	r3, [r7, #3]
 800e7f8:	4619      	mov	r1, r3
 800e7fa:	6878      	ldr	r0, [r7, #4]
 800e7fc:	f000 f81e 	bl	800e83c <VL53L0X_RdByte>
 800e800:	4603      	mov	r3, r0
 800e802:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800e804:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d110      	bne.n	800e82e <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800e80c:	7bba      	ldrb	r2, [r7, #14]
 800e80e:	78bb      	ldrb	r3, [r7, #2]
 800e810:	4013      	ands	r3, r2
 800e812:	b2da      	uxtb	r2, r3
 800e814:	787b      	ldrb	r3, [r7, #1]
 800e816:	4313      	orrs	r3, r2
 800e818:	b2db      	uxtb	r3, r3
 800e81a:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800e81c:	7bba      	ldrb	r2, [r7, #14]
 800e81e:	78fb      	ldrb	r3, [r7, #3]
 800e820:	4619      	mov	r1, r3
 800e822:	6878      	ldr	r0, [r7, #4]
 800e824:	f7ff ff88 	bl	800e738 <VL53L0X_WrByte>
 800e828:	4603      	mov	r3, r0
 800e82a:	73fb      	strb	r3, [r7, #15]
 800e82c:	e000      	b.n	800e830 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800e82e:	bf00      	nop
done:
    return Status;
 800e830:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e834:	4618      	mov	r0, r3
 800e836:	3710      	adds	r7, #16
 800e838:	46bd      	mov	sp, r7
 800e83a:	bd80      	pop	{r7, pc}

0800e83c <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800e83c:	b580      	push	{r7, lr}
 800e83e:	b086      	sub	sp, #24
 800e840:	af00      	add	r7, sp, #0
 800e842:	60f8      	str	r0, [r7, #12]
 800e844:	460b      	mov	r3, r1
 800e846:	607a      	str	r2, [r7, #4]
 800e848:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e84a:	2300      	movs	r3, #0
 800e84c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800e84e:	f107 030b 	add.w	r3, r7, #11
 800e852:	2201      	movs	r2, #1
 800e854:	4619      	mov	r1, r3
 800e856:	68f8      	ldr	r0, [r7, #12]
 800e858:	f7ff fed1 	bl	800e5fe <_I2CWrite>
 800e85c:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800e85e:	693b      	ldr	r3, [r7, #16]
 800e860:	2b00      	cmp	r3, #0
 800e862:	d002      	beq.n	800e86a <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e864:	23ec      	movs	r3, #236	; 0xec
 800e866:	75fb      	strb	r3, [r7, #23]
        goto done;
 800e868:	e00c      	b.n	800e884 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800e86a:	2201      	movs	r2, #1
 800e86c:	6879      	ldr	r1, [r7, #4]
 800e86e:	68f8      	ldr	r0, [r7, #12]
 800e870:	f7ff fee4 	bl	800e63c <_I2CRead>
 800e874:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800e876:	693b      	ldr	r3, [r7, #16]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d002      	beq.n	800e882 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e87c:	23ec      	movs	r3, #236	; 0xec
 800e87e:	75fb      	strb	r3, [r7, #23]
 800e880:	e000      	b.n	800e884 <VL53L0X_RdByte+0x48>
    }
done:
 800e882:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800e884:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e888:	4618      	mov	r0, r3
 800e88a:	3718      	adds	r7, #24
 800e88c:	46bd      	mov	sp, r7
 800e88e:	bd80      	pop	{r7, pc}

0800e890 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800e890:	b580      	push	{r7, lr}
 800e892:	b086      	sub	sp, #24
 800e894:	af00      	add	r7, sp, #0
 800e896:	60f8      	str	r0, [r7, #12]
 800e898:	460b      	mov	r3, r1
 800e89a:	607a      	str	r2, [r7, #4]
 800e89c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e89e:	2300      	movs	r3, #0
 800e8a0:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800e8a2:	f107 030b 	add.w	r3, r7, #11
 800e8a6:	2201      	movs	r2, #1
 800e8a8:	4619      	mov	r1, r3
 800e8aa:	68f8      	ldr	r0, [r7, #12]
 800e8ac:	f7ff fea7 	bl	800e5fe <_I2CWrite>
 800e8b0:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800e8b2:	693b      	ldr	r3, [r7, #16]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d002      	beq.n	800e8be <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e8b8:	23ec      	movs	r3, #236	; 0xec
 800e8ba:	75fb      	strb	r3, [r7, #23]
        goto done;
 800e8bc:	e017      	b.n	800e8ee <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800e8be:	2202      	movs	r2, #2
 800e8c0:	490e      	ldr	r1, [pc, #56]	; (800e8fc <VL53L0X_RdWord+0x6c>)
 800e8c2:	68f8      	ldr	r0, [r7, #12]
 800e8c4:	f7ff feba 	bl	800e63c <_I2CRead>
 800e8c8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800e8ca:	693b      	ldr	r3, [r7, #16]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d002      	beq.n	800e8d6 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e8d0:	23ec      	movs	r3, #236	; 0xec
 800e8d2:	75fb      	strb	r3, [r7, #23]
        goto done;
 800e8d4:	e00b      	b.n	800e8ee <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800e8d6:	4b09      	ldr	r3, [pc, #36]	; (800e8fc <VL53L0X_RdWord+0x6c>)
 800e8d8:	781b      	ldrb	r3, [r3, #0]
 800e8da:	b29b      	uxth	r3, r3
 800e8dc:	021b      	lsls	r3, r3, #8
 800e8de:	b29a      	uxth	r2, r3
 800e8e0:	4b06      	ldr	r3, [pc, #24]	; (800e8fc <VL53L0X_RdWord+0x6c>)
 800e8e2:	785b      	ldrb	r3, [r3, #1]
 800e8e4:	b29b      	uxth	r3, r3
 800e8e6:	4413      	add	r3, r2
 800e8e8:	b29a      	uxth	r2, r3
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800e8ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	3718      	adds	r7, #24
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	bd80      	pop	{r7, pc}
 800e8fa:	bf00      	nop
 800e8fc:	20000728 	.word	0x20000728

0800e900 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800e900:	b580      	push	{r7, lr}
 800e902:	b086      	sub	sp, #24
 800e904:	af00      	add	r7, sp, #0
 800e906:	60f8      	str	r0, [r7, #12]
 800e908:	460b      	mov	r3, r1
 800e90a:	607a      	str	r2, [r7, #4]
 800e90c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e90e:	2300      	movs	r3, #0
 800e910:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800e912:	f107 030b 	add.w	r3, r7, #11
 800e916:	2201      	movs	r2, #1
 800e918:	4619      	mov	r1, r3
 800e91a:	68f8      	ldr	r0, [r7, #12]
 800e91c:	f7ff fe6f 	bl	800e5fe <_I2CWrite>
 800e920:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800e922:	693b      	ldr	r3, [r7, #16]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d002      	beq.n	800e92e <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e928:	23ec      	movs	r3, #236	; 0xec
 800e92a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800e92c:	e01b      	b.n	800e966 <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800e92e:	2204      	movs	r2, #4
 800e930:	4910      	ldr	r1, [pc, #64]	; (800e974 <VL53L0X_RdDWord+0x74>)
 800e932:	68f8      	ldr	r0, [r7, #12]
 800e934:	f7ff fe82 	bl	800e63c <_I2CRead>
 800e938:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800e93a:	693b      	ldr	r3, [r7, #16]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d002      	beq.n	800e946 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e940:	23ec      	movs	r3, #236	; 0xec
 800e942:	75fb      	strb	r3, [r7, #23]
        goto done;
 800e944:	e00f      	b.n	800e966 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800e946:	4b0b      	ldr	r3, [pc, #44]	; (800e974 <VL53L0X_RdDWord+0x74>)
 800e948:	781b      	ldrb	r3, [r3, #0]
 800e94a:	061a      	lsls	r2, r3, #24
 800e94c:	4b09      	ldr	r3, [pc, #36]	; (800e974 <VL53L0X_RdDWord+0x74>)
 800e94e:	785b      	ldrb	r3, [r3, #1]
 800e950:	041b      	lsls	r3, r3, #16
 800e952:	441a      	add	r2, r3
 800e954:	4b07      	ldr	r3, [pc, #28]	; (800e974 <VL53L0X_RdDWord+0x74>)
 800e956:	789b      	ldrb	r3, [r3, #2]
 800e958:	021b      	lsls	r3, r3, #8
 800e95a:	4413      	add	r3, r2
 800e95c:	4a05      	ldr	r2, [pc, #20]	; (800e974 <VL53L0X_RdDWord+0x74>)
 800e95e:	78d2      	ldrb	r2, [r2, #3]
 800e960:	441a      	add	r2, r3
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800e966:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e96a:	4618      	mov	r0, r3
 800e96c:	3718      	adds	r7, #24
 800e96e:	46bd      	mov	sp, r7
 800e970:	bd80      	pop	{r7, pc}
 800e972:	bf00      	nop
 800e974:	20000728 	.word	0x20000728

0800e978 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800e978:	b580      	push	{r7, lr}
 800e97a:	b084      	sub	sp, #16
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800e980:	2300      	movs	r3, #0
 800e982:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800e984:	2002      	movs	r0, #2
 800e986:	f7f3 ff5b 	bl	8002840 <HAL_Delay>
    return status;
 800e98a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e98e:	4618      	mov	r0, r3
 800e990:	3710      	adds	r7, #16
 800e992:	46bd      	mov	sp, r7
 800e994:	bd80      	pop	{r7, pc}
	...

0800e998 <__errno>:
 800e998:	4b01      	ldr	r3, [pc, #4]	; (800e9a0 <__errno+0x8>)
 800e99a:	6818      	ldr	r0, [r3, #0]
 800e99c:	4770      	bx	lr
 800e99e:	bf00      	nop
 800e9a0:	200002c8 	.word	0x200002c8

0800e9a4 <__libc_init_array>:
 800e9a4:	b570      	push	{r4, r5, r6, lr}
 800e9a6:	4d0d      	ldr	r5, [pc, #52]	; (800e9dc <__libc_init_array+0x38>)
 800e9a8:	4c0d      	ldr	r4, [pc, #52]	; (800e9e0 <__libc_init_array+0x3c>)
 800e9aa:	1b64      	subs	r4, r4, r5
 800e9ac:	10a4      	asrs	r4, r4, #2
 800e9ae:	2600      	movs	r6, #0
 800e9b0:	42a6      	cmp	r6, r4
 800e9b2:	d109      	bne.n	800e9c8 <__libc_init_array+0x24>
 800e9b4:	4d0b      	ldr	r5, [pc, #44]	; (800e9e4 <__libc_init_array+0x40>)
 800e9b6:	4c0c      	ldr	r4, [pc, #48]	; (800e9e8 <__libc_init_array+0x44>)
 800e9b8:	f005 f8d0 	bl	8013b5c <_init>
 800e9bc:	1b64      	subs	r4, r4, r5
 800e9be:	10a4      	asrs	r4, r4, #2
 800e9c0:	2600      	movs	r6, #0
 800e9c2:	42a6      	cmp	r6, r4
 800e9c4:	d105      	bne.n	800e9d2 <__libc_init_array+0x2e>
 800e9c6:	bd70      	pop	{r4, r5, r6, pc}
 800e9c8:	f855 3b04 	ldr.w	r3, [r5], #4
 800e9cc:	4798      	blx	r3
 800e9ce:	3601      	adds	r6, #1
 800e9d0:	e7ee      	b.n	800e9b0 <__libc_init_array+0xc>
 800e9d2:	f855 3b04 	ldr.w	r3, [r5], #4
 800e9d6:	4798      	blx	r3
 800e9d8:	3601      	adds	r6, #1
 800e9da:	e7f2      	b.n	800e9c2 <__libc_init_array+0x1e>
 800e9dc:	08014354 	.word	0x08014354
 800e9e0:	08014354 	.word	0x08014354
 800e9e4:	08014354 	.word	0x08014354
 800e9e8:	08014358 	.word	0x08014358

0800e9ec <memcpy>:
 800e9ec:	440a      	add	r2, r1
 800e9ee:	4291      	cmp	r1, r2
 800e9f0:	f100 33ff 	add.w	r3, r0, #4294967295
 800e9f4:	d100      	bne.n	800e9f8 <memcpy+0xc>
 800e9f6:	4770      	bx	lr
 800e9f8:	b510      	push	{r4, lr}
 800e9fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e9fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ea02:	4291      	cmp	r1, r2
 800ea04:	d1f9      	bne.n	800e9fa <memcpy+0xe>
 800ea06:	bd10      	pop	{r4, pc}

0800ea08 <memset>:
 800ea08:	4402      	add	r2, r0
 800ea0a:	4603      	mov	r3, r0
 800ea0c:	4293      	cmp	r3, r2
 800ea0e:	d100      	bne.n	800ea12 <memset+0xa>
 800ea10:	4770      	bx	lr
 800ea12:	f803 1b01 	strb.w	r1, [r3], #1
 800ea16:	e7f9      	b.n	800ea0c <memset+0x4>

0800ea18 <__cvt>:
 800ea18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ea1c:	ec55 4b10 	vmov	r4, r5, d0
 800ea20:	2d00      	cmp	r5, #0
 800ea22:	460e      	mov	r6, r1
 800ea24:	4619      	mov	r1, r3
 800ea26:	462b      	mov	r3, r5
 800ea28:	bfbb      	ittet	lt
 800ea2a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ea2e:	461d      	movlt	r5, r3
 800ea30:	2300      	movge	r3, #0
 800ea32:	232d      	movlt	r3, #45	; 0x2d
 800ea34:	700b      	strb	r3, [r1, #0]
 800ea36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ea38:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ea3c:	4691      	mov	r9, r2
 800ea3e:	f023 0820 	bic.w	r8, r3, #32
 800ea42:	bfbc      	itt	lt
 800ea44:	4622      	movlt	r2, r4
 800ea46:	4614      	movlt	r4, r2
 800ea48:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ea4c:	d005      	beq.n	800ea5a <__cvt+0x42>
 800ea4e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ea52:	d100      	bne.n	800ea56 <__cvt+0x3e>
 800ea54:	3601      	adds	r6, #1
 800ea56:	2102      	movs	r1, #2
 800ea58:	e000      	b.n	800ea5c <__cvt+0x44>
 800ea5a:	2103      	movs	r1, #3
 800ea5c:	ab03      	add	r3, sp, #12
 800ea5e:	9301      	str	r3, [sp, #4]
 800ea60:	ab02      	add	r3, sp, #8
 800ea62:	9300      	str	r3, [sp, #0]
 800ea64:	ec45 4b10 	vmov	d0, r4, r5
 800ea68:	4653      	mov	r3, sl
 800ea6a:	4632      	mov	r2, r6
 800ea6c:	f001 fe60 	bl	8010730 <_dtoa_r>
 800ea70:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ea74:	4607      	mov	r7, r0
 800ea76:	d102      	bne.n	800ea7e <__cvt+0x66>
 800ea78:	f019 0f01 	tst.w	r9, #1
 800ea7c:	d022      	beq.n	800eac4 <__cvt+0xac>
 800ea7e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ea82:	eb07 0906 	add.w	r9, r7, r6
 800ea86:	d110      	bne.n	800eaaa <__cvt+0x92>
 800ea88:	783b      	ldrb	r3, [r7, #0]
 800ea8a:	2b30      	cmp	r3, #48	; 0x30
 800ea8c:	d10a      	bne.n	800eaa4 <__cvt+0x8c>
 800ea8e:	2200      	movs	r2, #0
 800ea90:	2300      	movs	r3, #0
 800ea92:	4620      	mov	r0, r4
 800ea94:	4629      	mov	r1, r5
 800ea96:	f7f2 f847 	bl	8000b28 <__aeabi_dcmpeq>
 800ea9a:	b918      	cbnz	r0, 800eaa4 <__cvt+0x8c>
 800ea9c:	f1c6 0601 	rsb	r6, r6, #1
 800eaa0:	f8ca 6000 	str.w	r6, [sl]
 800eaa4:	f8da 3000 	ldr.w	r3, [sl]
 800eaa8:	4499      	add	r9, r3
 800eaaa:	2200      	movs	r2, #0
 800eaac:	2300      	movs	r3, #0
 800eaae:	4620      	mov	r0, r4
 800eab0:	4629      	mov	r1, r5
 800eab2:	f7f2 f839 	bl	8000b28 <__aeabi_dcmpeq>
 800eab6:	b108      	cbz	r0, 800eabc <__cvt+0xa4>
 800eab8:	f8cd 900c 	str.w	r9, [sp, #12]
 800eabc:	2230      	movs	r2, #48	; 0x30
 800eabe:	9b03      	ldr	r3, [sp, #12]
 800eac0:	454b      	cmp	r3, r9
 800eac2:	d307      	bcc.n	800ead4 <__cvt+0xbc>
 800eac4:	9b03      	ldr	r3, [sp, #12]
 800eac6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800eac8:	1bdb      	subs	r3, r3, r7
 800eaca:	4638      	mov	r0, r7
 800eacc:	6013      	str	r3, [r2, #0]
 800eace:	b004      	add	sp, #16
 800ead0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ead4:	1c59      	adds	r1, r3, #1
 800ead6:	9103      	str	r1, [sp, #12]
 800ead8:	701a      	strb	r2, [r3, #0]
 800eada:	e7f0      	b.n	800eabe <__cvt+0xa6>

0800eadc <__exponent>:
 800eadc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eade:	4603      	mov	r3, r0
 800eae0:	2900      	cmp	r1, #0
 800eae2:	bfb8      	it	lt
 800eae4:	4249      	neglt	r1, r1
 800eae6:	f803 2b02 	strb.w	r2, [r3], #2
 800eaea:	bfb4      	ite	lt
 800eaec:	222d      	movlt	r2, #45	; 0x2d
 800eaee:	222b      	movge	r2, #43	; 0x2b
 800eaf0:	2909      	cmp	r1, #9
 800eaf2:	7042      	strb	r2, [r0, #1]
 800eaf4:	dd2a      	ble.n	800eb4c <__exponent+0x70>
 800eaf6:	f10d 0407 	add.w	r4, sp, #7
 800eafa:	46a4      	mov	ip, r4
 800eafc:	270a      	movs	r7, #10
 800eafe:	46a6      	mov	lr, r4
 800eb00:	460a      	mov	r2, r1
 800eb02:	fb91 f6f7 	sdiv	r6, r1, r7
 800eb06:	fb07 1516 	mls	r5, r7, r6, r1
 800eb0a:	3530      	adds	r5, #48	; 0x30
 800eb0c:	2a63      	cmp	r2, #99	; 0x63
 800eb0e:	f104 34ff 	add.w	r4, r4, #4294967295
 800eb12:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800eb16:	4631      	mov	r1, r6
 800eb18:	dcf1      	bgt.n	800eafe <__exponent+0x22>
 800eb1a:	3130      	adds	r1, #48	; 0x30
 800eb1c:	f1ae 0502 	sub.w	r5, lr, #2
 800eb20:	f804 1c01 	strb.w	r1, [r4, #-1]
 800eb24:	1c44      	adds	r4, r0, #1
 800eb26:	4629      	mov	r1, r5
 800eb28:	4561      	cmp	r1, ip
 800eb2a:	d30a      	bcc.n	800eb42 <__exponent+0x66>
 800eb2c:	f10d 0209 	add.w	r2, sp, #9
 800eb30:	eba2 020e 	sub.w	r2, r2, lr
 800eb34:	4565      	cmp	r5, ip
 800eb36:	bf88      	it	hi
 800eb38:	2200      	movhi	r2, #0
 800eb3a:	4413      	add	r3, r2
 800eb3c:	1a18      	subs	r0, r3, r0
 800eb3e:	b003      	add	sp, #12
 800eb40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb42:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eb46:	f804 2f01 	strb.w	r2, [r4, #1]!
 800eb4a:	e7ed      	b.n	800eb28 <__exponent+0x4c>
 800eb4c:	2330      	movs	r3, #48	; 0x30
 800eb4e:	3130      	adds	r1, #48	; 0x30
 800eb50:	7083      	strb	r3, [r0, #2]
 800eb52:	70c1      	strb	r1, [r0, #3]
 800eb54:	1d03      	adds	r3, r0, #4
 800eb56:	e7f1      	b.n	800eb3c <__exponent+0x60>

0800eb58 <_printf_float>:
 800eb58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb5c:	ed2d 8b02 	vpush	{d8}
 800eb60:	b08d      	sub	sp, #52	; 0x34
 800eb62:	460c      	mov	r4, r1
 800eb64:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800eb68:	4616      	mov	r6, r2
 800eb6a:	461f      	mov	r7, r3
 800eb6c:	4605      	mov	r5, r0
 800eb6e:	f002 ff3d 	bl	80119ec <_localeconv_r>
 800eb72:	f8d0 a000 	ldr.w	sl, [r0]
 800eb76:	4650      	mov	r0, sl
 800eb78:	f7f1 fb54 	bl	8000224 <strlen>
 800eb7c:	2300      	movs	r3, #0
 800eb7e:	930a      	str	r3, [sp, #40]	; 0x28
 800eb80:	6823      	ldr	r3, [r4, #0]
 800eb82:	9305      	str	r3, [sp, #20]
 800eb84:	f8d8 3000 	ldr.w	r3, [r8]
 800eb88:	f894 b018 	ldrb.w	fp, [r4, #24]
 800eb8c:	3307      	adds	r3, #7
 800eb8e:	f023 0307 	bic.w	r3, r3, #7
 800eb92:	f103 0208 	add.w	r2, r3, #8
 800eb96:	f8c8 2000 	str.w	r2, [r8]
 800eb9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb9e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800eba2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800eba6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ebaa:	9307      	str	r3, [sp, #28]
 800ebac:	f8cd 8018 	str.w	r8, [sp, #24]
 800ebb0:	ee08 0a10 	vmov	s16, r0
 800ebb4:	4b9f      	ldr	r3, [pc, #636]	; (800ee34 <_printf_float+0x2dc>)
 800ebb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ebba:	f04f 32ff 	mov.w	r2, #4294967295
 800ebbe:	f7f1 ffe5 	bl	8000b8c <__aeabi_dcmpun>
 800ebc2:	bb88      	cbnz	r0, 800ec28 <_printf_float+0xd0>
 800ebc4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ebc8:	4b9a      	ldr	r3, [pc, #616]	; (800ee34 <_printf_float+0x2dc>)
 800ebca:	f04f 32ff 	mov.w	r2, #4294967295
 800ebce:	f7f1 ffbf 	bl	8000b50 <__aeabi_dcmple>
 800ebd2:	bb48      	cbnz	r0, 800ec28 <_printf_float+0xd0>
 800ebd4:	2200      	movs	r2, #0
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	4640      	mov	r0, r8
 800ebda:	4649      	mov	r1, r9
 800ebdc:	f7f1 ffae 	bl	8000b3c <__aeabi_dcmplt>
 800ebe0:	b110      	cbz	r0, 800ebe8 <_printf_float+0x90>
 800ebe2:	232d      	movs	r3, #45	; 0x2d
 800ebe4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ebe8:	4b93      	ldr	r3, [pc, #588]	; (800ee38 <_printf_float+0x2e0>)
 800ebea:	4894      	ldr	r0, [pc, #592]	; (800ee3c <_printf_float+0x2e4>)
 800ebec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ebf0:	bf94      	ite	ls
 800ebf2:	4698      	movls	r8, r3
 800ebf4:	4680      	movhi	r8, r0
 800ebf6:	2303      	movs	r3, #3
 800ebf8:	6123      	str	r3, [r4, #16]
 800ebfa:	9b05      	ldr	r3, [sp, #20]
 800ebfc:	f023 0204 	bic.w	r2, r3, #4
 800ec00:	6022      	str	r2, [r4, #0]
 800ec02:	f04f 0900 	mov.w	r9, #0
 800ec06:	9700      	str	r7, [sp, #0]
 800ec08:	4633      	mov	r3, r6
 800ec0a:	aa0b      	add	r2, sp, #44	; 0x2c
 800ec0c:	4621      	mov	r1, r4
 800ec0e:	4628      	mov	r0, r5
 800ec10:	f000 f9d8 	bl	800efc4 <_printf_common>
 800ec14:	3001      	adds	r0, #1
 800ec16:	f040 8090 	bne.w	800ed3a <_printf_float+0x1e2>
 800ec1a:	f04f 30ff 	mov.w	r0, #4294967295
 800ec1e:	b00d      	add	sp, #52	; 0x34
 800ec20:	ecbd 8b02 	vpop	{d8}
 800ec24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec28:	4642      	mov	r2, r8
 800ec2a:	464b      	mov	r3, r9
 800ec2c:	4640      	mov	r0, r8
 800ec2e:	4649      	mov	r1, r9
 800ec30:	f7f1 ffac 	bl	8000b8c <__aeabi_dcmpun>
 800ec34:	b140      	cbz	r0, 800ec48 <_printf_float+0xf0>
 800ec36:	464b      	mov	r3, r9
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	bfbc      	itt	lt
 800ec3c:	232d      	movlt	r3, #45	; 0x2d
 800ec3e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ec42:	487f      	ldr	r0, [pc, #508]	; (800ee40 <_printf_float+0x2e8>)
 800ec44:	4b7f      	ldr	r3, [pc, #508]	; (800ee44 <_printf_float+0x2ec>)
 800ec46:	e7d1      	b.n	800ebec <_printf_float+0x94>
 800ec48:	6863      	ldr	r3, [r4, #4]
 800ec4a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ec4e:	9206      	str	r2, [sp, #24]
 800ec50:	1c5a      	adds	r2, r3, #1
 800ec52:	d13f      	bne.n	800ecd4 <_printf_float+0x17c>
 800ec54:	2306      	movs	r3, #6
 800ec56:	6063      	str	r3, [r4, #4]
 800ec58:	9b05      	ldr	r3, [sp, #20]
 800ec5a:	6861      	ldr	r1, [r4, #4]
 800ec5c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ec60:	2300      	movs	r3, #0
 800ec62:	9303      	str	r3, [sp, #12]
 800ec64:	ab0a      	add	r3, sp, #40	; 0x28
 800ec66:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ec6a:	ab09      	add	r3, sp, #36	; 0x24
 800ec6c:	ec49 8b10 	vmov	d0, r8, r9
 800ec70:	9300      	str	r3, [sp, #0]
 800ec72:	6022      	str	r2, [r4, #0]
 800ec74:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ec78:	4628      	mov	r0, r5
 800ec7a:	f7ff fecd 	bl	800ea18 <__cvt>
 800ec7e:	9b06      	ldr	r3, [sp, #24]
 800ec80:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ec82:	2b47      	cmp	r3, #71	; 0x47
 800ec84:	4680      	mov	r8, r0
 800ec86:	d108      	bne.n	800ec9a <_printf_float+0x142>
 800ec88:	1cc8      	adds	r0, r1, #3
 800ec8a:	db02      	blt.n	800ec92 <_printf_float+0x13a>
 800ec8c:	6863      	ldr	r3, [r4, #4]
 800ec8e:	4299      	cmp	r1, r3
 800ec90:	dd41      	ble.n	800ed16 <_printf_float+0x1be>
 800ec92:	f1ab 0b02 	sub.w	fp, fp, #2
 800ec96:	fa5f fb8b 	uxtb.w	fp, fp
 800ec9a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ec9e:	d820      	bhi.n	800ece2 <_printf_float+0x18a>
 800eca0:	3901      	subs	r1, #1
 800eca2:	465a      	mov	r2, fp
 800eca4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800eca8:	9109      	str	r1, [sp, #36]	; 0x24
 800ecaa:	f7ff ff17 	bl	800eadc <__exponent>
 800ecae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ecb0:	1813      	adds	r3, r2, r0
 800ecb2:	2a01      	cmp	r2, #1
 800ecb4:	4681      	mov	r9, r0
 800ecb6:	6123      	str	r3, [r4, #16]
 800ecb8:	dc02      	bgt.n	800ecc0 <_printf_float+0x168>
 800ecba:	6822      	ldr	r2, [r4, #0]
 800ecbc:	07d2      	lsls	r2, r2, #31
 800ecbe:	d501      	bpl.n	800ecc4 <_printf_float+0x16c>
 800ecc0:	3301      	adds	r3, #1
 800ecc2:	6123      	str	r3, [r4, #16]
 800ecc4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d09c      	beq.n	800ec06 <_printf_float+0xae>
 800eccc:	232d      	movs	r3, #45	; 0x2d
 800ecce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ecd2:	e798      	b.n	800ec06 <_printf_float+0xae>
 800ecd4:	9a06      	ldr	r2, [sp, #24]
 800ecd6:	2a47      	cmp	r2, #71	; 0x47
 800ecd8:	d1be      	bne.n	800ec58 <_printf_float+0x100>
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d1bc      	bne.n	800ec58 <_printf_float+0x100>
 800ecde:	2301      	movs	r3, #1
 800ece0:	e7b9      	b.n	800ec56 <_printf_float+0xfe>
 800ece2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ece6:	d118      	bne.n	800ed1a <_printf_float+0x1c2>
 800ece8:	2900      	cmp	r1, #0
 800ecea:	6863      	ldr	r3, [r4, #4]
 800ecec:	dd0b      	ble.n	800ed06 <_printf_float+0x1ae>
 800ecee:	6121      	str	r1, [r4, #16]
 800ecf0:	b913      	cbnz	r3, 800ecf8 <_printf_float+0x1a0>
 800ecf2:	6822      	ldr	r2, [r4, #0]
 800ecf4:	07d0      	lsls	r0, r2, #31
 800ecf6:	d502      	bpl.n	800ecfe <_printf_float+0x1a6>
 800ecf8:	3301      	adds	r3, #1
 800ecfa:	440b      	add	r3, r1
 800ecfc:	6123      	str	r3, [r4, #16]
 800ecfe:	65a1      	str	r1, [r4, #88]	; 0x58
 800ed00:	f04f 0900 	mov.w	r9, #0
 800ed04:	e7de      	b.n	800ecc4 <_printf_float+0x16c>
 800ed06:	b913      	cbnz	r3, 800ed0e <_printf_float+0x1b6>
 800ed08:	6822      	ldr	r2, [r4, #0]
 800ed0a:	07d2      	lsls	r2, r2, #31
 800ed0c:	d501      	bpl.n	800ed12 <_printf_float+0x1ba>
 800ed0e:	3302      	adds	r3, #2
 800ed10:	e7f4      	b.n	800ecfc <_printf_float+0x1a4>
 800ed12:	2301      	movs	r3, #1
 800ed14:	e7f2      	b.n	800ecfc <_printf_float+0x1a4>
 800ed16:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ed1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed1c:	4299      	cmp	r1, r3
 800ed1e:	db05      	blt.n	800ed2c <_printf_float+0x1d4>
 800ed20:	6823      	ldr	r3, [r4, #0]
 800ed22:	6121      	str	r1, [r4, #16]
 800ed24:	07d8      	lsls	r0, r3, #31
 800ed26:	d5ea      	bpl.n	800ecfe <_printf_float+0x1a6>
 800ed28:	1c4b      	adds	r3, r1, #1
 800ed2a:	e7e7      	b.n	800ecfc <_printf_float+0x1a4>
 800ed2c:	2900      	cmp	r1, #0
 800ed2e:	bfd4      	ite	le
 800ed30:	f1c1 0202 	rsble	r2, r1, #2
 800ed34:	2201      	movgt	r2, #1
 800ed36:	4413      	add	r3, r2
 800ed38:	e7e0      	b.n	800ecfc <_printf_float+0x1a4>
 800ed3a:	6823      	ldr	r3, [r4, #0]
 800ed3c:	055a      	lsls	r2, r3, #21
 800ed3e:	d407      	bmi.n	800ed50 <_printf_float+0x1f8>
 800ed40:	6923      	ldr	r3, [r4, #16]
 800ed42:	4642      	mov	r2, r8
 800ed44:	4631      	mov	r1, r6
 800ed46:	4628      	mov	r0, r5
 800ed48:	47b8      	blx	r7
 800ed4a:	3001      	adds	r0, #1
 800ed4c:	d12c      	bne.n	800eda8 <_printf_float+0x250>
 800ed4e:	e764      	b.n	800ec1a <_printf_float+0xc2>
 800ed50:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ed54:	f240 80e0 	bls.w	800ef18 <_printf_float+0x3c0>
 800ed58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ed5c:	2200      	movs	r2, #0
 800ed5e:	2300      	movs	r3, #0
 800ed60:	f7f1 fee2 	bl	8000b28 <__aeabi_dcmpeq>
 800ed64:	2800      	cmp	r0, #0
 800ed66:	d034      	beq.n	800edd2 <_printf_float+0x27a>
 800ed68:	4a37      	ldr	r2, [pc, #220]	; (800ee48 <_printf_float+0x2f0>)
 800ed6a:	2301      	movs	r3, #1
 800ed6c:	4631      	mov	r1, r6
 800ed6e:	4628      	mov	r0, r5
 800ed70:	47b8      	blx	r7
 800ed72:	3001      	adds	r0, #1
 800ed74:	f43f af51 	beq.w	800ec1a <_printf_float+0xc2>
 800ed78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ed7c:	429a      	cmp	r2, r3
 800ed7e:	db02      	blt.n	800ed86 <_printf_float+0x22e>
 800ed80:	6823      	ldr	r3, [r4, #0]
 800ed82:	07d8      	lsls	r0, r3, #31
 800ed84:	d510      	bpl.n	800eda8 <_printf_float+0x250>
 800ed86:	ee18 3a10 	vmov	r3, s16
 800ed8a:	4652      	mov	r2, sl
 800ed8c:	4631      	mov	r1, r6
 800ed8e:	4628      	mov	r0, r5
 800ed90:	47b8      	blx	r7
 800ed92:	3001      	adds	r0, #1
 800ed94:	f43f af41 	beq.w	800ec1a <_printf_float+0xc2>
 800ed98:	f04f 0800 	mov.w	r8, #0
 800ed9c:	f104 091a 	add.w	r9, r4, #26
 800eda0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eda2:	3b01      	subs	r3, #1
 800eda4:	4543      	cmp	r3, r8
 800eda6:	dc09      	bgt.n	800edbc <_printf_float+0x264>
 800eda8:	6823      	ldr	r3, [r4, #0]
 800edaa:	079b      	lsls	r3, r3, #30
 800edac:	f100 8105 	bmi.w	800efba <_printf_float+0x462>
 800edb0:	68e0      	ldr	r0, [r4, #12]
 800edb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800edb4:	4298      	cmp	r0, r3
 800edb6:	bfb8      	it	lt
 800edb8:	4618      	movlt	r0, r3
 800edba:	e730      	b.n	800ec1e <_printf_float+0xc6>
 800edbc:	2301      	movs	r3, #1
 800edbe:	464a      	mov	r2, r9
 800edc0:	4631      	mov	r1, r6
 800edc2:	4628      	mov	r0, r5
 800edc4:	47b8      	blx	r7
 800edc6:	3001      	adds	r0, #1
 800edc8:	f43f af27 	beq.w	800ec1a <_printf_float+0xc2>
 800edcc:	f108 0801 	add.w	r8, r8, #1
 800edd0:	e7e6      	b.n	800eda0 <_printf_float+0x248>
 800edd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	dc39      	bgt.n	800ee4c <_printf_float+0x2f4>
 800edd8:	4a1b      	ldr	r2, [pc, #108]	; (800ee48 <_printf_float+0x2f0>)
 800edda:	2301      	movs	r3, #1
 800eddc:	4631      	mov	r1, r6
 800edde:	4628      	mov	r0, r5
 800ede0:	47b8      	blx	r7
 800ede2:	3001      	adds	r0, #1
 800ede4:	f43f af19 	beq.w	800ec1a <_printf_float+0xc2>
 800ede8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800edec:	4313      	orrs	r3, r2
 800edee:	d102      	bne.n	800edf6 <_printf_float+0x29e>
 800edf0:	6823      	ldr	r3, [r4, #0]
 800edf2:	07d9      	lsls	r1, r3, #31
 800edf4:	d5d8      	bpl.n	800eda8 <_printf_float+0x250>
 800edf6:	ee18 3a10 	vmov	r3, s16
 800edfa:	4652      	mov	r2, sl
 800edfc:	4631      	mov	r1, r6
 800edfe:	4628      	mov	r0, r5
 800ee00:	47b8      	blx	r7
 800ee02:	3001      	adds	r0, #1
 800ee04:	f43f af09 	beq.w	800ec1a <_printf_float+0xc2>
 800ee08:	f04f 0900 	mov.w	r9, #0
 800ee0c:	f104 0a1a 	add.w	sl, r4, #26
 800ee10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee12:	425b      	negs	r3, r3
 800ee14:	454b      	cmp	r3, r9
 800ee16:	dc01      	bgt.n	800ee1c <_printf_float+0x2c4>
 800ee18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee1a:	e792      	b.n	800ed42 <_printf_float+0x1ea>
 800ee1c:	2301      	movs	r3, #1
 800ee1e:	4652      	mov	r2, sl
 800ee20:	4631      	mov	r1, r6
 800ee22:	4628      	mov	r0, r5
 800ee24:	47b8      	blx	r7
 800ee26:	3001      	adds	r0, #1
 800ee28:	f43f aef7 	beq.w	800ec1a <_printf_float+0xc2>
 800ee2c:	f109 0901 	add.w	r9, r9, #1
 800ee30:	e7ee      	b.n	800ee10 <_printf_float+0x2b8>
 800ee32:	bf00      	nop
 800ee34:	7fefffff 	.word	0x7fefffff
 800ee38:	08013e98 	.word	0x08013e98
 800ee3c:	08013e9c 	.word	0x08013e9c
 800ee40:	08013ea4 	.word	0x08013ea4
 800ee44:	08013ea0 	.word	0x08013ea0
 800ee48:	08014299 	.word	0x08014299
 800ee4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ee4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ee50:	429a      	cmp	r2, r3
 800ee52:	bfa8      	it	ge
 800ee54:	461a      	movge	r2, r3
 800ee56:	2a00      	cmp	r2, #0
 800ee58:	4691      	mov	r9, r2
 800ee5a:	dc37      	bgt.n	800eecc <_printf_float+0x374>
 800ee5c:	f04f 0b00 	mov.w	fp, #0
 800ee60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ee64:	f104 021a 	add.w	r2, r4, #26
 800ee68:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ee6a:	9305      	str	r3, [sp, #20]
 800ee6c:	eba3 0309 	sub.w	r3, r3, r9
 800ee70:	455b      	cmp	r3, fp
 800ee72:	dc33      	bgt.n	800eedc <_printf_float+0x384>
 800ee74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ee78:	429a      	cmp	r2, r3
 800ee7a:	db3b      	blt.n	800eef4 <_printf_float+0x39c>
 800ee7c:	6823      	ldr	r3, [r4, #0]
 800ee7e:	07da      	lsls	r2, r3, #31
 800ee80:	d438      	bmi.n	800eef4 <_printf_float+0x39c>
 800ee82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee84:	9a05      	ldr	r2, [sp, #20]
 800ee86:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ee88:	1a9a      	subs	r2, r3, r2
 800ee8a:	eba3 0901 	sub.w	r9, r3, r1
 800ee8e:	4591      	cmp	r9, r2
 800ee90:	bfa8      	it	ge
 800ee92:	4691      	movge	r9, r2
 800ee94:	f1b9 0f00 	cmp.w	r9, #0
 800ee98:	dc35      	bgt.n	800ef06 <_printf_float+0x3ae>
 800ee9a:	f04f 0800 	mov.w	r8, #0
 800ee9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800eea2:	f104 0a1a 	add.w	sl, r4, #26
 800eea6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800eeaa:	1a9b      	subs	r3, r3, r2
 800eeac:	eba3 0309 	sub.w	r3, r3, r9
 800eeb0:	4543      	cmp	r3, r8
 800eeb2:	f77f af79 	ble.w	800eda8 <_printf_float+0x250>
 800eeb6:	2301      	movs	r3, #1
 800eeb8:	4652      	mov	r2, sl
 800eeba:	4631      	mov	r1, r6
 800eebc:	4628      	mov	r0, r5
 800eebe:	47b8      	blx	r7
 800eec0:	3001      	adds	r0, #1
 800eec2:	f43f aeaa 	beq.w	800ec1a <_printf_float+0xc2>
 800eec6:	f108 0801 	add.w	r8, r8, #1
 800eeca:	e7ec      	b.n	800eea6 <_printf_float+0x34e>
 800eecc:	4613      	mov	r3, r2
 800eece:	4631      	mov	r1, r6
 800eed0:	4642      	mov	r2, r8
 800eed2:	4628      	mov	r0, r5
 800eed4:	47b8      	blx	r7
 800eed6:	3001      	adds	r0, #1
 800eed8:	d1c0      	bne.n	800ee5c <_printf_float+0x304>
 800eeda:	e69e      	b.n	800ec1a <_printf_float+0xc2>
 800eedc:	2301      	movs	r3, #1
 800eede:	4631      	mov	r1, r6
 800eee0:	4628      	mov	r0, r5
 800eee2:	9205      	str	r2, [sp, #20]
 800eee4:	47b8      	blx	r7
 800eee6:	3001      	adds	r0, #1
 800eee8:	f43f ae97 	beq.w	800ec1a <_printf_float+0xc2>
 800eeec:	9a05      	ldr	r2, [sp, #20]
 800eeee:	f10b 0b01 	add.w	fp, fp, #1
 800eef2:	e7b9      	b.n	800ee68 <_printf_float+0x310>
 800eef4:	ee18 3a10 	vmov	r3, s16
 800eef8:	4652      	mov	r2, sl
 800eefa:	4631      	mov	r1, r6
 800eefc:	4628      	mov	r0, r5
 800eefe:	47b8      	blx	r7
 800ef00:	3001      	adds	r0, #1
 800ef02:	d1be      	bne.n	800ee82 <_printf_float+0x32a>
 800ef04:	e689      	b.n	800ec1a <_printf_float+0xc2>
 800ef06:	9a05      	ldr	r2, [sp, #20]
 800ef08:	464b      	mov	r3, r9
 800ef0a:	4442      	add	r2, r8
 800ef0c:	4631      	mov	r1, r6
 800ef0e:	4628      	mov	r0, r5
 800ef10:	47b8      	blx	r7
 800ef12:	3001      	adds	r0, #1
 800ef14:	d1c1      	bne.n	800ee9a <_printf_float+0x342>
 800ef16:	e680      	b.n	800ec1a <_printf_float+0xc2>
 800ef18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ef1a:	2a01      	cmp	r2, #1
 800ef1c:	dc01      	bgt.n	800ef22 <_printf_float+0x3ca>
 800ef1e:	07db      	lsls	r3, r3, #31
 800ef20:	d538      	bpl.n	800ef94 <_printf_float+0x43c>
 800ef22:	2301      	movs	r3, #1
 800ef24:	4642      	mov	r2, r8
 800ef26:	4631      	mov	r1, r6
 800ef28:	4628      	mov	r0, r5
 800ef2a:	47b8      	blx	r7
 800ef2c:	3001      	adds	r0, #1
 800ef2e:	f43f ae74 	beq.w	800ec1a <_printf_float+0xc2>
 800ef32:	ee18 3a10 	vmov	r3, s16
 800ef36:	4652      	mov	r2, sl
 800ef38:	4631      	mov	r1, r6
 800ef3a:	4628      	mov	r0, r5
 800ef3c:	47b8      	blx	r7
 800ef3e:	3001      	adds	r0, #1
 800ef40:	f43f ae6b 	beq.w	800ec1a <_printf_float+0xc2>
 800ef44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ef48:	2200      	movs	r2, #0
 800ef4a:	2300      	movs	r3, #0
 800ef4c:	f7f1 fdec 	bl	8000b28 <__aeabi_dcmpeq>
 800ef50:	b9d8      	cbnz	r0, 800ef8a <_printf_float+0x432>
 800ef52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef54:	f108 0201 	add.w	r2, r8, #1
 800ef58:	3b01      	subs	r3, #1
 800ef5a:	4631      	mov	r1, r6
 800ef5c:	4628      	mov	r0, r5
 800ef5e:	47b8      	blx	r7
 800ef60:	3001      	adds	r0, #1
 800ef62:	d10e      	bne.n	800ef82 <_printf_float+0x42a>
 800ef64:	e659      	b.n	800ec1a <_printf_float+0xc2>
 800ef66:	2301      	movs	r3, #1
 800ef68:	4652      	mov	r2, sl
 800ef6a:	4631      	mov	r1, r6
 800ef6c:	4628      	mov	r0, r5
 800ef6e:	47b8      	blx	r7
 800ef70:	3001      	adds	r0, #1
 800ef72:	f43f ae52 	beq.w	800ec1a <_printf_float+0xc2>
 800ef76:	f108 0801 	add.w	r8, r8, #1
 800ef7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef7c:	3b01      	subs	r3, #1
 800ef7e:	4543      	cmp	r3, r8
 800ef80:	dcf1      	bgt.n	800ef66 <_printf_float+0x40e>
 800ef82:	464b      	mov	r3, r9
 800ef84:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ef88:	e6dc      	b.n	800ed44 <_printf_float+0x1ec>
 800ef8a:	f04f 0800 	mov.w	r8, #0
 800ef8e:	f104 0a1a 	add.w	sl, r4, #26
 800ef92:	e7f2      	b.n	800ef7a <_printf_float+0x422>
 800ef94:	2301      	movs	r3, #1
 800ef96:	4642      	mov	r2, r8
 800ef98:	e7df      	b.n	800ef5a <_printf_float+0x402>
 800ef9a:	2301      	movs	r3, #1
 800ef9c:	464a      	mov	r2, r9
 800ef9e:	4631      	mov	r1, r6
 800efa0:	4628      	mov	r0, r5
 800efa2:	47b8      	blx	r7
 800efa4:	3001      	adds	r0, #1
 800efa6:	f43f ae38 	beq.w	800ec1a <_printf_float+0xc2>
 800efaa:	f108 0801 	add.w	r8, r8, #1
 800efae:	68e3      	ldr	r3, [r4, #12]
 800efb0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800efb2:	1a5b      	subs	r3, r3, r1
 800efb4:	4543      	cmp	r3, r8
 800efb6:	dcf0      	bgt.n	800ef9a <_printf_float+0x442>
 800efb8:	e6fa      	b.n	800edb0 <_printf_float+0x258>
 800efba:	f04f 0800 	mov.w	r8, #0
 800efbe:	f104 0919 	add.w	r9, r4, #25
 800efc2:	e7f4      	b.n	800efae <_printf_float+0x456>

0800efc4 <_printf_common>:
 800efc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800efc8:	4616      	mov	r6, r2
 800efca:	4699      	mov	r9, r3
 800efcc:	688a      	ldr	r2, [r1, #8]
 800efce:	690b      	ldr	r3, [r1, #16]
 800efd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800efd4:	4293      	cmp	r3, r2
 800efd6:	bfb8      	it	lt
 800efd8:	4613      	movlt	r3, r2
 800efda:	6033      	str	r3, [r6, #0]
 800efdc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800efe0:	4607      	mov	r7, r0
 800efe2:	460c      	mov	r4, r1
 800efe4:	b10a      	cbz	r2, 800efea <_printf_common+0x26>
 800efe6:	3301      	adds	r3, #1
 800efe8:	6033      	str	r3, [r6, #0]
 800efea:	6823      	ldr	r3, [r4, #0]
 800efec:	0699      	lsls	r1, r3, #26
 800efee:	bf42      	ittt	mi
 800eff0:	6833      	ldrmi	r3, [r6, #0]
 800eff2:	3302      	addmi	r3, #2
 800eff4:	6033      	strmi	r3, [r6, #0]
 800eff6:	6825      	ldr	r5, [r4, #0]
 800eff8:	f015 0506 	ands.w	r5, r5, #6
 800effc:	d106      	bne.n	800f00c <_printf_common+0x48>
 800effe:	f104 0a19 	add.w	sl, r4, #25
 800f002:	68e3      	ldr	r3, [r4, #12]
 800f004:	6832      	ldr	r2, [r6, #0]
 800f006:	1a9b      	subs	r3, r3, r2
 800f008:	42ab      	cmp	r3, r5
 800f00a:	dc26      	bgt.n	800f05a <_printf_common+0x96>
 800f00c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f010:	1e13      	subs	r3, r2, #0
 800f012:	6822      	ldr	r2, [r4, #0]
 800f014:	bf18      	it	ne
 800f016:	2301      	movne	r3, #1
 800f018:	0692      	lsls	r2, r2, #26
 800f01a:	d42b      	bmi.n	800f074 <_printf_common+0xb0>
 800f01c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f020:	4649      	mov	r1, r9
 800f022:	4638      	mov	r0, r7
 800f024:	47c0      	blx	r8
 800f026:	3001      	adds	r0, #1
 800f028:	d01e      	beq.n	800f068 <_printf_common+0xa4>
 800f02a:	6823      	ldr	r3, [r4, #0]
 800f02c:	68e5      	ldr	r5, [r4, #12]
 800f02e:	6832      	ldr	r2, [r6, #0]
 800f030:	f003 0306 	and.w	r3, r3, #6
 800f034:	2b04      	cmp	r3, #4
 800f036:	bf08      	it	eq
 800f038:	1aad      	subeq	r5, r5, r2
 800f03a:	68a3      	ldr	r3, [r4, #8]
 800f03c:	6922      	ldr	r2, [r4, #16]
 800f03e:	bf0c      	ite	eq
 800f040:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f044:	2500      	movne	r5, #0
 800f046:	4293      	cmp	r3, r2
 800f048:	bfc4      	itt	gt
 800f04a:	1a9b      	subgt	r3, r3, r2
 800f04c:	18ed      	addgt	r5, r5, r3
 800f04e:	2600      	movs	r6, #0
 800f050:	341a      	adds	r4, #26
 800f052:	42b5      	cmp	r5, r6
 800f054:	d11a      	bne.n	800f08c <_printf_common+0xc8>
 800f056:	2000      	movs	r0, #0
 800f058:	e008      	b.n	800f06c <_printf_common+0xa8>
 800f05a:	2301      	movs	r3, #1
 800f05c:	4652      	mov	r2, sl
 800f05e:	4649      	mov	r1, r9
 800f060:	4638      	mov	r0, r7
 800f062:	47c0      	blx	r8
 800f064:	3001      	adds	r0, #1
 800f066:	d103      	bne.n	800f070 <_printf_common+0xac>
 800f068:	f04f 30ff 	mov.w	r0, #4294967295
 800f06c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f070:	3501      	adds	r5, #1
 800f072:	e7c6      	b.n	800f002 <_printf_common+0x3e>
 800f074:	18e1      	adds	r1, r4, r3
 800f076:	1c5a      	adds	r2, r3, #1
 800f078:	2030      	movs	r0, #48	; 0x30
 800f07a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f07e:	4422      	add	r2, r4
 800f080:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f084:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f088:	3302      	adds	r3, #2
 800f08a:	e7c7      	b.n	800f01c <_printf_common+0x58>
 800f08c:	2301      	movs	r3, #1
 800f08e:	4622      	mov	r2, r4
 800f090:	4649      	mov	r1, r9
 800f092:	4638      	mov	r0, r7
 800f094:	47c0      	blx	r8
 800f096:	3001      	adds	r0, #1
 800f098:	d0e6      	beq.n	800f068 <_printf_common+0xa4>
 800f09a:	3601      	adds	r6, #1
 800f09c:	e7d9      	b.n	800f052 <_printf_common+0x8e>
	...

0800f0a0 <_printf_i>:
 800f0a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f0a4:	7e0f      	ldrb	r7, [r1, #24]
 800f0a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f0a8:	2f78      	cmp	r7, #120	; 0x78
 800f0aa:	4691      	mov	r9, r2
 800f0ac:	4680      	mov	r8, r0
 800f0ae:	460c      	mov	r4, r1
 800f0b0:	469a      	mov	sl, r3
 800f0b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f0b6:	d807      	bhi.n	800f0c8 <_printf_i+0x28>
 800f0b8:	2f62      	cmp	r7, #98	; 0x62
 800f0ba:	d80a      	bhi.n	800f0d2 <_printf_i+0x32>
 800f0bc:	2f00      	cmp	r7, #0
 800f0be:	f000 80d8 	beq.w	800f272 <_printf_i+0x1d2>
 800f0c2:	2f58      	cmp	r7, #88	; 0x58
 800f0c4:	f000 80a3 	beq.w	800f20e <_printf_i+0x16e>
 800f0c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f0cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f0d0:	e03a      	b.n	800f148 <_printf_i+0xa8>
 800f0d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f0d6:	2b15      	cmp	r3, #21
 800f0d8:	d8f6      	bhi.n	800f0c8 <_printf_i+0x28>
 800f0da:	a101      	add	r1, pc, #4	; (adr r1, 800f0e0 <_printf_i+0x40>)
 800f0dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f0e0:	0800f139 	.word	0x0800f139
 800f0e4:	0800f14d 	.word	0x0800f14d
 800f0e8:	0800f0c9 	.word	0x0800f0c9
 800f0ec:	0800f0c9 	.word	0x0800f0c9
 800f0f0:	0800f0c9 	.word	0x0800f0c9
 800f0f4:	0800f0c9 	.word	0x0800f0c9
 800f0f8:	0800f14d 	.word	0x0800f14d
 800f0fc:	0800f0c9 	.word	0x0800f0c9
 800f100:	0800f0c9 	.word	0x0800f0c9
 800f104:	0800f0c9 	.word	0x0800f0c9
 800f108:	0800f0c9 	.word	0x0800f0c9
 800f10c:	0800f259 	.word	0x0800f259
 800f110:	0800f17d 	.word	0x0800f17d
 800f114:	0800f23b 	.word	0x0800f23b
 800f118:	0800f0c9 	.word	0x0800f0c9
 800f11c:	0800f0c9 	.word	0x0800f0c9
 800f120:	0800f27b 	.word	0x0800f27b
 800f124:	0800f0c9 	.word	0x0800f0c9
 800f128:	0800f17d 	.word	0x0800f17d
 800f12c:	0800f0c9 	.word	0x0800f0c9
 800f130:	0800f0c9 	.word	0x0800f0c9
 800f134:	0800f243 	.word	0x0800f243
 800f138:	682b      	ldr	r3, [r5, #0]
 800f13a:	1d1a      	adds	r2, r3, #4
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	602a      	str	r2, [r5, #0]
 800f140:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f144:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f148:	2301      	movs	r3, #1
 800f14a:	e0a3      	b.n	800f294 <_printf_i+0x1f4>
 800f14c:	6820      	ldr	r0, [r4, #0]
 800f14e:	6829      	ldr	r1, [r5, #0]
 800f150:	0606      	lsls	r6, r0, #24
 800f152:	f101 0304 	add.w	r3, r1, #4
 800f156:	d50a      	bpl.n	800f16e <_printf_i+0xce>
 800f158:	680e      	ldr	r6, [r1, #0]
 800f15a:	602b      	str	r3, [r5, #0]
 800f15c:	2e00      	cmp	r6, #0
 800f15e:	da03      	bge.n	800f168 <_printf_i+0xc8>
 800f160:	232d      	movs	r3, #45	; 0x2d
 800f162:	4276      	negs	r6, r6
 800f164:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f168:	485e      	ldr	r0, [pc, #376]	; (800f2e4 <_printf_i+0x244>)
 800f16a:	230a      	movs	r3, #10
 800f16c:	e019      	b.n	800f1a2 <_printf_i+0x102>
 800f16e:	680e      	ldr	r6, [r1, #0]
 800f170:	602b      	str	r3, [r5, #0]
 800f172:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f176:	bf18      	it	ne
 800f178:	b236      	sxthne	r6, r6
 800f17a:	e7ef      	b.n	800f15c <_printf_i+0xbc>
 800f17c:	682b      	ldr	r3, [r5, #0]
 800f17e:	6820      	ldr	r0, [r4, #0]
 800f180:	1d19      	adds	r1, r3, #4
 800f182:	6029      	str	r1, [r5, #0]
 800f184:	0601      	lsls	r1, r0, #24
 800f186:	d501      	bpl.n	800f18c <_printf_i+0xec>
 800f188:	681e      	ldr	r6, [r3, #0]
 800f18a:	e002      	b.n	800f192 <_printf_i+0xf2>
 800f18c:	0646      	lsls	r6, r0, #25
 800f18e:	d5fb      	bpl.n	800f188 <_printf_i+0xe8>
 800f190:	881e      	ldrh	r6, [r3, #0]
 800f192:	4854      	ldr	r0, [pc, #336]	; (800f2e4 <_printf_i+0x244>)
 800f194:	2f6f      	cmp	r7, #111	; 0x6f
 800f196:	bf0c      	ite	eq
 800f198:	2308      	moveq	r3, #8
 800f19a:	230a      	movne	r3, #10
 800f19c:	2100      	movs	r1, #0
 800f19e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f1a2:	6865      	ldr	r5, [r4, #4]
 800f1a4:	60a5      	str	r5, [r4, #8]
 800f1a6:	2d00      	cmp	r5, #0
 800f1a8:	bfa2      	ittt	ge
 800f1aa:	6821      	ldrge	r1, [r4, #0]
 800f1ac:	f021 0104 	bicge.w	r1, r1, #4
 800f1b0:	6021      	strge	r1, [r4, #0]
 800f1b2:	b90e      	cbnz	r6, 800f1b8 <_printf_i+0x118>
 800f1b4:	2d00      	cmp	r5, #0
 800f1b6:	d04d      	beq.n	800f254 <_printf_i+0x1b4>
 800f1b8:	4615      	mov	r5, r2
 800f1ba:	fbb6 f1f3 	udiv	r1, r6, r3
 800f1be:	fb03 6711 	mls	r7, r3, r1, r6
 800f1c2:	5dc7      	ldrb	r7, [r0, r7]
 800f1c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f1c8:	4637      	mov	r7, r6
 800f1ca:	42bb      	cmp	r3, r7
 800f1cc:	460e      	mov	r6, r1
 800f1ce:	d9f4      	bls.n	800f1ba <_printf_i+0x11a>
 800f1d0:	2b08      	cmp	r3, #8
 800f1d2:	d10b      	bne.n	800f1ec <_printf_i+0x14c>
 800f1d4:	6823      	ldr	r3, [r4, #0]
 800f1d6:	07de      	lsls	r6, r3, #31
 800f1d8:	d508      	bpl.n	800f1ec <_printf_i+0x14c>
 800f1da:	6923      	ldr	r3, [r4, #16]
 800f1dc:	6861      	ldr	r1, [r4, #4]
 800f1de:	4299      	cmp	r1, r3
 800f1e0:	bfde      	ittt	le
 800f1e2:	2330      	movle	r3, #48	; 0x30
 800f1e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f1e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f1ec:	1b52      	subs	r2, r2, r5
 800f1ee:	6122      	str	r2, [r4, #16]
 800f1f0:	f8cd a000 	str.w	sl, [sp]
 800f1f4:	464b      	mov	r3, r9
 800f1f6:	aa03      	add	r2, sp, #12
 800f1f8:	4621      	mov	r1, r4
 800f1fa:	4640      	mov	r0, r8
 800f1fc:	f7ff fee2 	bl	800efc4 <_printf_common>
 800f200:	3001      	adds	r0, #1
 800f202:	d14c      	bne.n	800f29e <_printf_i+0x1fe>
 800f204:	f04f 30ff 	mov.w	r0, #4294967295
 800f208:	b004      	add	sp, #16
 800f20a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f20e:	4835      	ldr	r0, [pc, #212]	; (800f2e4 <_printf_i+0x244>)
 800f210:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f214:	6829      	ldr	r1, [r5, #0]
 800f216:	6823      	ldr	r3, [r4, #0]
 800f218:	f851 6b04 	ldr.w	r6, [r1], #4
 800f21c:	6029      	str	r1, [r5, #0]
 800f21e:	061d      	lsls	r5, r3, #24
 800f220:	d514      	bpl.n	800f24c <_printf_i+0x1ac>
 800f222:	07df      	lsls	r7, r3, #31
 800f224:	bf44      	itt	mi
 800f226:	f043 0320 	orrmi.w	r3, r3, #32
 800f22a:	6023      	strmi	r3, [r4, #0]
 800f22c:	b91e      	cbnz	r6, 800f236 <_printf_i+0x196>
 800f22e:	6823      	ldr	r3, [r4, #0]
 800f230:	f023 0320 	bic.w	r3, r3, #32
 800f234:	6023      	str	r3, [r4, #0]
 800f236:	2310      	movs	r3, #16
 800f238:	e7b0      	b.n	800f19c <_printf_i+0xfc>
 800f23a:	6823      	ldr	r3, [r4, #0]
 800f23c:	f043 0320 	orr.w	r3, r3, #32
 800f240:	6023      	str	r3, [r4, #0]
 800f242:	2378      	movs	r3, #120	; 0x78
 800f244:	4828      	ldr	r0, [pc, #160]	; (800f2e8 <_printf_i+0x248>)
 800f246:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f24a:	e7e3      	b.n	800f214 <_printf_i+0x174>
 800f24c:	0659      	lsls	r1, r3, #25
 800f24e:	bf48      	it	mi
 800f250:	b2b6      	uxthmi	r6, r6
 800f252:	e7e6      	b.n	800f222 <_printf_i+0x182>
 800f254:	4615      	mov	r5, r2
 800f256:	e7bb      	b.n	800f1d0 <_printf_i+0x130>
 800f258:	682b      	ldr	r3, [r5, #0]
 800f25a:	6826      	ldr	r6, [r4, #0]
 800f25c:	6961      	ldr	r1, [r4, #20]
 800f25e:	1d18      	adds	r0, r3, #4
 800f260:	6028      	str	r0, [r5, #0]
 800f262:	0635      	lsls	r5, r6, #24
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	d501      	bpl.n	800f26c <_printf_i+0x1cc>
 800f268:	6019      	str	r1, [r3, #0]
 800f26a:	e002      	b.n	800f272 <_printf_i+0x1d2>
 800f26c:	0670      	lsls	r0, r6, #25
 800f26e:	d5fb      	bpl.n	800f268 <_printf_i+0x1c8>
 800f270:	8019      	strh	r1, [r3, #0]
 800f272:	2300      	movs	r3, #0
 800f274:	6123      	str	r3, [r4, #16]
 800f276:	4615      	mov	r5, r2
 800f278:	e7ba      	b.n	800f1f0 <_printf_i+0x150>
 800f27a:	682b      	ldr	r3, [r5, #0]
 800f27c:	1d1a      	adds	r2, r3, #4
 800f27e:	602a      	str	r2, [r5, #0]
 800f280:	681d      	ldr	r5, [r3, #0]
 800f282:	6862      	ldr	r2, [r4, #4]
 800f284:	2100      	movs	r1, #0
 800f286:	4628      	mov	r0, r5
 800f288:	f7f0 ffda 	bl	8000240 <memchr>
 800f28c:	b108      	cbz	r0, 800f292 <_printf_i+0x1f2>
 800f28e:	1b40      	subs	r0, r0, r5
 800f290:	6060      	str	r0, [r4, #4]
 800f292:	6863      	ldr	r3, [r4, #4]
 800f294:	6123      	str	r3, [r4, #16]
 800f296:	2300      	movs	r3, #0
 800f298:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f29c:	e7a8      	b.n	800f1f0 <_printf_i+0x150>
 800f29e:	6923      	ldr	r3, [r4, #16]
 800f2a0:	462a      	mov	r2, r5
 800f2a2:	4649      	mov	r1, r9
 800f2a4:	4640      	mov	r0, r8
 800f2a6:	47d0      	blx	sl
 800f2a8:	3001      	adds	r0, #1
 800f2aa:	d0ab      	beq.n	800f204 <_printf_i+0x164>
 800f2ac:	6823      	ldr	r3, [r4, #0]
 800f2ae:	079b      	lsls	r3, r3, #30
 800f2b0:	d413      	bmi.n	800f2da <_printf_i+0x23a>
 800f2b2:	68e0      	ldr	r0, [r4, #12]
 800f2b4:	9b03      	ldr	r3, [sp, #12]
 800f2b6:	4298      	cmp	r0, r3
 800f2b8:	bfb8      	it	lt
 800f2ba:	4618      	movlt	r0, r3
 800f2bc:	e7a4      	b.n	800f208 <_printf_i+0x168>
 800f2be:	2301      	movs	r3, #1
 800f2c0:	4632      	mov	r2, r6
 800f2c2:	4649      	mov	r1, r9
 800f2c4:	4640      	mov	r0, r8
 800f2c6:	47d0      	blx	sl
 800f2c8:	3001      	adds	r0, #1
 800f2ca:	d09b      	beq.n	800f204 <_printf_i+0x164>
 800f2cc:	3501      	adds	r5, #1
 800f2ce:	68e3      	ldr	r3, [r4, #12]
 800f2d0:	9903      	ldr	r1, [sp, #12]
 800f2d2:	1a5b      	subs	r3, r3, r1
 800f2d4:	42ab      	cmp	r3, r5
 800f2d6:	dcf2      	bgt.n	800f2be <_printf_i+0x21e>
 800f2d8:	e7eb      	b.n	800f2b2 <_printf_i+0x212>
 800f2da:	2500      	movs	r5, #0
 800f2dc:	f104 0619 	add.w	r6, r4, #25
 800f2e0:	e7f5      	b.n	800f2ce <_printf_i+0x22e>
 800f2e2:	bf00      	nop
 800f2e4:	08013ea8 	.word	0x08013ea8
 800f2e8:	08013eb9 	.word	0x08013eb9

0800f2ec <_scanf_float>:
 800f2ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2f0:	b087      	sub	sp, #28
 800f2f2:	4617      	mov	r7, r2
 800f2f4:	9303      	str	r3, [sp, #12]
 800f2f6:	688b      	ldr	r3, [r1, #8]
 800f2f8:	1e5a      	subs	r2, r3, #1
 800f2fa:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800f2fe:	bf83      	ittte	hi
 800f300:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800f304:	195b      	addhi	r3, r3, r5
 800f306:	9302      	strhi	r3, [sp, #8]
 800f308:	2300      	movls	r3, #0
 800f30a:	bf86      	itte	hi
 800f30c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800f310:	608b      	strhi	r3, [r1, #8]
 800f312:	9302      	strls	r3, [sp, #8]
 800f314:	680b      	ldr	r3, [r1, #0]
 800f316:	468b      	mov	fp, r1
 800f318:	2500      	movs	r5, #0
 800f31a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800f31e:	f84b 3b1c 	str.w	r3, [fp], #28
 800f322:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f326:	4680      	mov	r8, r0
 800f328:	460c      	mov	r4, r1
 800f32a:	465e      	mov	r6, fp
 800f32c:	46aa      	mov	sl, r5
 800f32e:	46a9      	mov	r9, r5
 800f330:	9501      	str	r5, [sp, #4]
 800f332:	68a2      	ldr	r2, [r4, #8]
 800f334:	b152      	cbz	r2, 800f34c <_scanf_float+0x60>
 800f336:	683b      	ldr	r3, [r7, #0]
 800f338:	781b      	ldrb	r3, [r3, #0]
 800f33a:	2b4e      	cmp	r3, #78	; 0x4e
 800f33c:	d864      	bhi.n	800f408 <_scanf_float+0x11c>
 800f33e:	2b40      	cmp	r3, #64	; 0x40
 800f340:	d83c      	bhi.n	800f3bc <_scanf_float+0xd0>
 800f342:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800f346:	b2c8      	uxtb	r0, r1
 800f348:	280e      	cmp	r0, #14
 800f34a:	d93a      	bls.n	800f3c2 <_scanf_float+0xd6>
 800f34c:	f1b9 0f00 	cmp.w	r9, #0
 800f350:	d003      	beq.n	800f35a <_scanf_float+0x6e>
 800f352:	6823      	ldr	r3, [r4, #0]
 800f354:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f358:	6023      	str	r3, [r4, #0]
 800f35a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f35e:	f1ba 0f01 	cmp.w	sl, #1
 800f362:	f200 8113 	bhi.w	800f58c <_scanf_float+0x2a0>
 800f366:	455e      	cmp	r6, fp
 800f368:	f200 8105 	bhi.w	800f576 <_scanf_float+0x28a>
 800f36c:	2501      	movs	r5, #1
 800f36e:	4628      	mov	r0, r5
 800f370:	b007      	add	sp, #28
 800f372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f376:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800f37a:	2a0d      	cmp	r2, #13
 800f37c:	d8e6      	bhi.n	800f34c <_scanf_float+0x60>
 800f37e:	a101      	add	r1, pc, #4	; (adr r1, 800f384 <_scanf_float+0x98>)
 800f380:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f384:	0800f4c3 	.word	0x0800f4c3
 800f388:	0800f34d 	.word	0x0800f34d
 800f38c:	0800f34d 	.word	0x0800f34d
 800f390:	0800f34d 	.word	0x0800f34d
 800f394:	0800f523 	.word	0x0800f523
 800f398:	0800f4fb 	.word	0x0800f4fb
 800f39c:	0800f34d 	.word	0x0800f34d
 800f3a0:	0800f34d 	.word	0x0800f34d
 800f3a4:	0800f4d1 	.word	0x0800f4d1
 800f3a8:	0800f34d 	.word	0x0800f34d
 800f3ac:	0800f34d 	.word	0x0800f34d
 800f3b0:	0800f34d 	.word	0x0800f34d
 800f3b4:	0800f34d 	.word	0x0800f34d
 800f3b8:	0800f489 	.word	0x0800f489
 800f3bc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800f3c0:	e7db      	b.n	800f37a <_scanf_float+0x8e>
 800f3c2:	290e      	cmp	r1, #14
 800f3c4:	d8c2      	bhi.n	800f34c <_scanf_float+0x60>
 800f3c6:	a001      	add	r0, pc, #4	; (adr r0, 800f3cc <_scanf_float+0xe0>)
 800f3c8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f3cc:	0800f47b 	.word	0x0800f47b
 800f3d0:	0800f34d 	.word	0x0800f34d
 800f3d4:	0800f47b 	.word	0x0800f47b
 800f3d8:	0800f50f 	.word	0x0800f50f
 800f3dc:	0800f34d 	.word	0x0800f34d
 800f3e0:	0800f429 	.word	0x0800f429
 800f3e4:	0800f465 	.word	0x0800f465
 800f3e8:	0800f465 	.word	0x0800f465
 800f3ec:	0800f465 	.word	0x0800f465
 800f3f0:	0800f465 	.word	0x0800f465
 800f3f4:	0800f465 	.word	0x0800f465
 800f3f8:	0800f465 	.word	0x0800f465
 800f3fc:	0800f465 	.word	0x0800f465
 800f400:	0800f465 	.word	0x0800f465
 800f404:	0800f465 	.word	0x0800f465
 800f408:	2b6e      	cmp	r3, #110	; 0x6e
 800f40a:	d809      	bhi.n	800f420 <_scanf_float+0x134>
 800f40c:	2b60      	cmp	r3, #96	; 0x60
 800f40e:	d8b2      	bhi.n	800f376 <_scanf_float+0x8a>
 800f410:	2b54      	cmp	r3, #84	; 0x54
 800f412:	d077      	beq.n	800f504 <_scanf_float+0x218>
 800f414:	2b59      	cmp	r3, #89	; 0x59
 800f416:	d199      	bne.n	800f34c <_scanf_float+0x60>
 800f418:	2d07      	cmp	r5, #7
 800f41a:	d197      	bne.n	800f34c <_scanf_float+0x60>
 800f41c:	2508      	movs	r5, #8
 800f41e:	e029      	b.n	800f474 <_scanf_float+0x188>
 800f420:	2b74      	cmp	r3, #116	; 0x74
 800f422:	d06f      	beq.n	800f504 <_scanf_float+0x218>
 800f424:	2b79      	cmp	r3, #121	; 0x79
 800f426:	e7f6      	b.n	800f416 <_scanf_float+0x12a>
 800f428:	6821      	ldr	r1, [r4, #0]
 800f42a:	05c8      	lsls	r0, r1, #23
 800f42c:	d51a      	bpl.n	800f464 <_scanf_float+0x178>
 800f42e:	9b02      	ldr	r3, [sp, #8]
 800f430:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800f434:	6021      	str	r1, [r4, #0]
 800f436:	f109 0901 	add.w	r9, r9, #1
 800f43a:	b11b      	cbz	r3, 800f444 <_scanf_float+0x158>
 800f43c:	3b01      	subs	r3, #1
 800f43e:	3201      	adds	r2, #1
 800f440:	9302      	str	r3, [sp, #8]
 800f442:	60a2      	str	r2, [r4, #8]
 800f444:	68a3      	ldr	r3, [r4, #8]
 800f446:	3b01      	subs	r3, #1
 800f448:	60a3      	str	r3, [r4, #8]
 800f44a:	6923      	ldr	r3, [r4, #16]
 800f44c:	3301      	adds	r3, #1
 800f44e:	6123      	str	r3, [r4, #16]
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	3b01      	subs	r3, #1
 800f454:	2b00      	cmp	r3, #0
 800f456:	607b      	str	r3, [r7, #4]
 800f458:	f340 8084 	ble.w	800f564 <_scanf_float+0x278>
 800f45c:	683b      	ldr	r3, [r7, #0]
 800f45e:	3301      	adds	r3, #1
 800f460:	603b      	str	r3, [r7, #0]
 800f462:	e766      	b.n	800f332 <_scanf_float+0x46>
 800f464:	eb1a 0f05 	cmn.w	sl, r5
 800f468:	f47f af70 	bne.w	800f34c <_scanf_float+0x60>
 800f46c:	6822      	ldr	r2, [r4, #0]
 800f46e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800f472:	6022      	str	r2, [r4, #0]
 800f474:	f806 3b01 	strb.w	r3, [r6], #1
 800f478:	e7e4      	b.n	800f444 <_scanf_float+0x158>
 800f47a:	6822      	ldr	r2, [r4, #0]
 800f47c:	0610      	lsls	r0, r2, #24
 800f47e:	f57f af65 	bpl.w	800f34c <_scanf_float+0x60>
 800f482:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f486:	e7f4      	b.n	800f472 <_scanf_float+0x186>
 800f488:	f1ba 0f00 	cmp.w	sl, #0
 800f48c:	d10e      	bne.n	800f4ac <_scanf_float+0x1c0>
 800f48e:	f1b9 0f00 	cmp.w	r9, #0
 800f492:	d10e      	bne.n	800f4b2 <_scanf_float+0x1c6>
 800f494:	6822      	ldr	r2, [r4, #0]
 800f496:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800f49a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800f49e:	d108      	bne.n	800f4b2 <_scanf_float+0x1c6>
 800f4a0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f4a4:	6022      	str	r2, [r4, #0]
 800f4a6:	f04f 0a01 	mov.w	sl, #1
 800f4aa:	e7e3      	b.n	800f474 <_scanf_float+0x188>
 800f4ac:	f1ba 0f02 	cmp.w	sl, #2
 800f4b0:	d055      	beq.n	800f55e <_scanf_float+0x272>
 800f4b2:	2d01      	cmp	r5, #1
 800f4b4:	d002      	beq.n	800f4bc <_scanf_float+0x1d0>
 800f4b6:	2d04      	cmp	r5, #4
 800f4b8:	f47f af48 	bne.w	800f34c <_scanf_float+0x60>
 800f4bc:	3501      	adds	r5, #1
 800f4be:	b2ed      	uxtb	r5, r5
 800f4c0:	e7d8      	b.n	800f474 <_scanf_float+0x188>
 800f4c2:	f1ba 0f01 	cmp.w	sl, #1
 800f4c6:	f47f af41 	bne.w	800f34c <_scanf_float+0x60>
 800f4ca:	f04f 0a02 	mov.w	sl, #2
 800f4ce:	e7d1      	b.n	800f474 <_scanf_float+0x188>
 800f4d0:	b97d      	cbnz	r5, 800f4f2 <_scanf_float+0x206>
 800f4d2:	f1b9 0f00 	cmp.w	r9, #0
 800f4d6:	f47f af3c 	bne.w	800f352 <_scanf_float+0x66>
 800f4da:	6822      	ldr	r2, [r4, #0]
 800f4dc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800f4e0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800f4e4:	f47f af39 	bne.w	800f35a <_scanf_float+0x6e>
 800f4e8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f4ec:	6022      	str	r2, [r4, #0]
 800f4ee:	2501      	movs	r5, #1
 800f4f0:	e7c0      	b.n	800f474 <_scanf_float+0x188>
 800f4f2:	2d03      	cmp	r5, #3
 800f4f4:	d0e2      	beq.n	800f4bc <_scanf_float+0x1d0>
 800f4f6:	2d05      	cmp	r5, #5
 800f4f8:	e7de      	b.n	800f4b8 <_scanf_float+0x1cc>
 800f4fa:	2d02      	cmp	r5, #2
 800f4fc:	f47f af26 	bne.w	800f34c <_scanf_float+0x60>
 800f500:	2503      	movs	r5, #3
 800f502:	e7b7      	b.n	800f474 <_scanf_float+0x188>
 800f504:	2d06      	cmp	r5, #6
 800f506:	f47f af21 	bne.w	800f34c <_scanf_float+0x60>
 800f50a:	2507      	movs	r5, #7
 800f50c:	e7b2      	b.n	800f474 <_scanf_float+0x188>
 800f50e:	6822      	ldr	r2, [r4, #0]
 800f510:	0591      	lsls	r1, r2, #22
 800f512:	f57f af1b 	bpl.w	800f34c <_scanf_float+0x60>
 800f516:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800f51a:	6022      	str	r2, [r4, #0]
 800f51c:	f8cd 9004 	str.w	r9, [sp, #4]
 800f520:	e7a8      	b.n	800f474 <_scanf_float+0x188>
 800f522:	6822      	ldr	r2, [r4, #0]
 800f524:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800f528:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800f52c:	d006      	beq.n	800f53c <_scanf_float+0x250>
 800f52e:	0550      	lsls	r0, r2, #21
 800f530:	f57f af0c 	bpl.w	800f34c <_scanf_float+0x60>
 800f534:	f1b9 0f00 	cmp.w	r9, #0
 800f538:	f43f af0f 	beq.w	800f35a <_scanf_float+0x6e>
 800f53c:	0591      	lsls	r1, r2, #22
 800f53e:	bf58      	it	pl
 800f540:	9901      	ldrpl	r1, [sp, #4]
 800f542:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f546:	bf58      	it	pl
 800f548:	eba9 0101 	subpl.w	r1, r9, r1
 800f54c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800f550:	bf58      	it	pl
 800f552:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f556:	6022      	str	r2, [r4, #0]
 800f558:	f04f 0900 	mov.w	r9, #0
 800f55c:	e78a      	b.n	800f474 <_scanf_float+0x188>
 800f55e:	f04f 0a03 	mov.w	sl, #3
 800f562:	e787      	b.n	800f474 <_scanf_float+0x188>
 800f564:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f568:	4639      	mov	r1, r7
 800f56a:	4640      	mov	r0, r8
 800f56c:	4798      	blx	r3
 800f56e:	2800      	cmp	r0, #0
 800f570:	f43f aedf 	beq.w	800f332 <_scanf_float+0x46>
 800f574:	e6ea      	b.n	800f34c <_scanf_float+0x60>
 800f576:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f57a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f57e:	463a      	mov	r2, r7
 800f580:	4640      	mov	r0, r8
 800f582:	4798      	blx	r3
 800f584:	6923      	ldr	r3, [r4, #16]
 800f586:	3b01      	subs	r3, #1
 800f588:	6123      	str	r3, [r4, #16]
 800f58a:	e6ec      	b.n	800f366 <_scanf_float+0x7a>
 800f58c:	1e6b      	subs	r3, r5, #1
 800f58e:	2b06      	cmp	r3, #6
 800f590:	d825      	bhi.n	800f5de <_scanf_float+0x2f2>
 800f592:	2d02      	cmp	r5, #2
 800f594:	d836      	bhi.n	800f604 <_scanf_float+0x318>
 800f596:	455e      	cmp	r6, fp
 800f598:	f67f aee8 	bls.w	800f36c <_scanf_float+0x80>
 800f59c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f5a0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f5a4:	463a      	mov	r2, r7
 800f5a6:	4640      	mov	r0, r8
 800f5a8:	4798      	blx	r3
 800f5aa:	6923      	ldr	r3, [r4, #16]
 800f5ac:	3b01      	subs	r3, #1
 800f5ae:	6123      	str	r3, [r4, #16]
 800f5b0:	e7f1      	b.n	800f596 <_scanf_float+0x2aa>
 800f5b2:	9802      	ldr	r0, [sp, #8]
 800f5b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f5b8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800f5bc:	9002      	str	r0, [sp, #8]
 800f5be:	463a      	mov	r2, r7
 800f5c0:	4640      	mov	r0, r8
 800f5c2:	4798      	blx	r3
 800f5c4:	6923      	ldr	r3, [r4, #16]
 800f5c6:	3b01      	subs	r3, #1
 800f5c8:	6123      	str	r3, [r4, #16]
 800f5ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f5ce:	fa5f fa8a 	uxtb.w	sl, sl
 800f5d2:	f1ba 0f02 	cmp.w	sl, #2
 800f5d6:	d1ec      	bne.n	800f5b2 <_scanf_float+0x2c6>
 800f5d8:	3d03      	subs	r5, #3
 800f5da:	b2ed      	uxtb	r5, r5
 800f5dc:	1b76      	subs	r6, r6, r5
 800f5de:	6823      	ldr	r3, [r4, #0]
 800f5e0:	05da      	lsls	r2, r3, #23
 800f5e2:	d52f      	bpl.n	800f644 <_scanf_float+0x358>
 800f5e4:	055b      	lsls	r3, r3, #21
 800f5e6:	d510      	bpl.n	800f60a <_scanf_float+0x31e>
 800f5e8:	455e      	cmp	r6, fp
 800f5ea:	f67f aebf 	bls.w	800f36c <_scanf_float+0x80>
 800f5ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f5f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f5f6:	463a      	mov	r2, r7
 800f5f8:	4640      	mov	r0, r8
 800f5fa:	4798      	blx	r3
 800f5fc:	6923      	ldr	r3, [r4, #16]
 800f5fe:	3b01      	subs	r3, #1
 800f600:	6123      	str	r3, [r4, #16]
 800f602:	e7f1      	b.n	800f5e8 <_scanf_float+0x2fc>
 800f604:	46aa      	mov	sl, r5
 800f606:	9602      	str	r6, [sp, #8]
 800f608:	e7df      	b.n	800f5ca <_scanf_float+0x2de>
 800f60a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f60e:	6923      	ldr	r3, [r4, #16]
 800f610:	2965      	cmp	r1, #101	; 0x65
 800f612:	f103 33ff 	add.w	r3, r3, #4294967295
 800f616:	f106 35ff 	add.w	r5, r6, #4294967295
 800f61a:	6123      	str	r3, [r4, #16]
 800f61c:	d00c      	beq.n	800f638 <_scanf_float+0x34c>
 800f61e:	2945      	cmp	r1, #69	; 0x45
 800f620:	d00a      	beq.n	800f638 <_scanf_float+0x34c>
 800f622:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f626:	463a      	mov	r2, r7
 800f628:	4640      	mov	r0, r8
 800f62a:	4798      	blx	r3
 800f62c:	6923      	ldr	r3, [r4, #16]
 800f62e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f632:	3b01      	subs	r3, #1
 800f634:	1eb5      	subs	r5, r6, #2
 800f636:	6123      	str	r3, [r4, #16]
 800f638:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f63c:	463a      	mov	r2, r7
 800f63e:	4640      	mov	r0, r8
 800f640:	4798      	blx	r3
 800f642:	462e      	mov	r6, r5
 800f644:	6825      	ldr	r5, [r4, #0]
 800f646:	f015 0510 	ands.w	r5, r5, #16
 800f64a:	d159      	bne.n	800f700 <_scanf_float+0x414>
 800f64c:	7035      	strb	r5, [r6, #0]
 800f64e:	6823      	ldr	r3, [r4, #0]
 800f650:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800f654:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f658:	d11b      	bne.n	800f692 <_scanf_float+0x3a6>
 800f65a:	9b01      	ldr	r3, [sp, #4]
 800f65c:	454b      	cmp	r3, r9
 800f65e:	eba3 0209 	sub.w	r2, r3, r9
 800f662:	d123      	bne.n	800f6ac <_scanf_float+0x3c0>
 800f664:	2200      	movs	r2, #0
 800f666:	4659      	mov	r1, fp
 800f668:	4640      	mov	r0, r8
 800f66a:	f000 ff27 	bl	80104bc <_strtod_r>
 800f66e:	6822      	ldr	r2, [r4, #0]
 800f670:	9b03      	ldr	r3, [sp, #12]
 800f672:	f012 0f02 	tst.w	r2, #2
 800f676:	ec57 6b10 	vmov	r6, r7, d0
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	d021      	beq.n	800f6c2 <_scanf_float+0x3d6>
 800f67e:	9903      	ldr	r1, [sp, #12]
 800f680:	1d1a      	adds	r2, r3, #4
 800f682:	600a      	str	r2, [r1, #0]
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	e9c3 6700 	strd	r6, r7, [r3]
 800f68a:	68e3      	ldr	r3, [r4, #12]
 800f68c:	3301      	adds	r3, #1
 800f68e:	60e3      	str	r3, [r4, #12]
 800f690:	e66d      	b.n	800f36e <_scanf_float+0x82>
 800f692:	9b04      	ldr	r3, [sp, #16]
 800f694:	2b00      	cmp	r3, #0
 800f696:	d0e5      	beq.n	800f664 <_scanf_float+0x378>
 800f698:	9905      	ldr	r1, [sp, #20]
 800f69a:	230a      	movs	r3, #10
 800f69c:	462a      	mov	r2, r5
 800f69e:	3101      	adds	r1, #1
 800f6a0:	4640      	mov	r0, r8
 800f6a2:	f000 ff93 	bl	80105cc <_strtol_r>
 800f6a6:	9b04      	ldr	r3, [sp, #16]
 800f6a8:	9e05      	ldr	r6, [sp, #20]
 800f6aa:	1ac2      	subs	r2, r0, r3
 800f6ac:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800f6b0:	429e      	cmp	r6, r3
 800f6b2:	bf28      	it	cs
 800f6b4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800f6b8:	4912      	ldr	r1, [pc, #72]	; (800f704 <_scanf_float+0x418>)
 800f6ba:	4630      	mov	r0, r6
 800f6bc:	f000 f82c 	bl	800f718 <siprintf>
 800f6c0:	e7d0      	b.n	800f664 <_scanf_float+0x378>
 800f6c2:	9903      	ldr	r1, [sp, #12]
 800f6c4:	f012 0f04 	tst.w	r2, #4
 800f6c8:	f103 0204 	add.w	r2, r3, #4
 800f6cc:	600a      	str	r2, [r1, #0]
 800f6ce:	d1d9      	bne.n	800f684 <_scanf_float+0x398>
 800f6d0:	f8d3 8000 	ldr.w	r8, [r3]
 800f6d4:	ee10 2a10 	vmov	r2, s0
 800f6d8:	ee10 0a10 	vmov	r0, s0
 800f6dc:	463b      	mov	r3, r7
 800f6de:	4639      	mov	r1, r7
 800f6e0:	f7f1 fa54 	bl	8000b8c <__aeabi_dcmpun>
 800f6e4:	b128      	cbz	r0, 800f6f2 <_scanf_float+0x406>
 800f6e6:	4808      	ldr	r0, [pc, #32]	; (800f708 <_scanf_float+0x41c>)
 800f6e8:	f000 f810 	bl	800f70c <nanf>
 800f6ec:	ed88 0a00 	vstr	s0, [r8]
 800f6f0:	e7cb      	b.n	800f68a <_scanf_float+0x39e>
 800f6f2:	4630      	mov	r0, r6
 800f6f4:	4639      	mov	r1, r7
 800f6f6:	f7f1 faa7 	bl	8000c48 <__aeabi_d2f>
 800f6fa:	f8c8 0000 	str.w	r0, [r8]
 800f6fe:	e7c4      	b.n	800f68a <_scanf_float+0x39e>
 800f700:	2500      	movs	r5, #0
 800f702:	e634      	b.n	800f36e <_scanf_float+0x82>
 800f704:	08013eca 	.word	0x08013eca
 800f708:	080142eb 	.word	0x080142eb

0800f70c <nanf>:
 800f70c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f714 <nanf+0x8>
 800f710:	4770      	bx	lr
 800f712:	bf00      	nop
 800f714:	7fc00000 	.word	0x7fc00000

0800f718 <siprintf>:
 800f718:	b40e      	push	{r1, r2, r3}
 800f71a:	b500      	push	{lr}
 800f71c:	b09c      	sub	sp, #112	; 0x70
 800f71e:	ab1d      	add	r3, sp, #116	; 0x74
 800f720:	9002      	str	r0, [sp, #8]
 800f722:	9006      	str	r0, [sp, #24]
 800f724:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f728:	4809      	ldr	r0, [pc, #36]	; (800f750 <siprintf+0x38>)
 800f72a:	9107      	str	r1, [sp, #28]
 800f72c:	9104      	str	r1, [sp, #16]
 800f72e:	4909      	ldr	r1, [pc, #36]	; (800f754 <siprintf+0x3c>)
 800f730:	f853 2b04 	ldr.w	r2, [r3], #4
 800f734:	9105      	str	r1, [sp, #20]
 800f736:	6800      	ldr	r0, [r0, #0]
 800f738:	9301      	str	r3, [sp, #4]
 800f73a:	a902      	add	r1, sp, #8
 800f73c:	f002 ff9a 	bl	8012674 <_svfiprintf_r>
 800f740:	9b02      	ldr	r3, [sp, #8]
 800f742:	2200      	movs	r2, #0
 800f744:	701a      	strb	r2, [r3, #0]
 800f746:	b01c      	add	sp, #112	; 0x70
 800f748:	f85d eb04 	ldr.w	lr, [sp], #4
 800f74c:	b003      	add	sp, #12
 800f74e:	4770      	bx	lr
 800f750:	200002c8 	.word	0x200002c8
 800f754:	ffff0208 	.word	0xffff0208

0800f758 <siscanf>:
 800f758:	b40e      	push	{r1, r2, r3}
 800f75a:	b510      	push	{r4, lr}
 800f75c:	b09f      	sub	sp, #124	; 0x7c
 800f75e:	ac21      	add	r4, sp, #132	; 0x84
 800f760:	f44f 7101 	mov.w	r1, #516	; 0x204
 800f764:	f854 2b04 	ldr.w	r2, [r4], #4
 800f768:	9201      	str	r2, [sp, #4]
 800f76a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800f76e:	9004      	str	r0, [sp, #16]
 800f770:	9008      	str	r0, [sp, #32]
 800f772:	f7f0 fd57 	bl	8000224 <strlen>
 800f776:	4b0c      	ldr	r3, [pc, #48]	; (800f7a8 <siscanf+0x50>)
 800f778:	9005      	str	r0, [sp, #20]
 800f77a:	9009      	str	r0, [sp, #36]	; 0x24
 800f77c:	930d      	str	r3, [sp, #52]	; 0x34
 800f77e:	480b      	ldr	r0, [pc, #44]	; (800f7ac <siscanf+0x54>)
 800f780:	9a01      	ldr	r2, [sp, #4]
 800f782:	6800      	ldr	r0, [r0, #0]
 800f784:	9403      	str	r4, [sp, #12]
 800f786:	2300      	movs	r3, #0
 800f788:	9311      	str	r3, [sp, #68]	; 0x44
 800f78a:	9316      	str	r3, [sp, #88]	; 0x58
 800f78c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f790:	f8ad 301e 	strh.w	r3, [sp, #30]
 800f794:	a904      	add	r1, sp, #16
 800f796:	4623      	mov	r3, r4
 800f798:	f003 f8c6 	bl	8012928 <__ssvfiscanf_r>
 800f79c:	b01f      	add	sp, #124	; 0x7c
 800f79e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f7a2:	b003      	add	sp, #12
 800f7a4:	4770      	bx	lr
 800f7a6:	bf00      	nop
 800f7a8:	0800f7d3 	.word	0x0800f7d3
 800f7ac:	200002c8 	.word	0x200002c8

0800f7b0 <__sread>:
 800f7b0:	b510      	push	{r4, lr}
 800f7b2:	460c      	mov	r4, r1
 800f7b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f7b8:	f003 fb80 	bl	8012ebc <_read_r>
 800f7bc:	2800      	cmp	r0, #0
 800f7be:	bfab      	itete	ge
 800f7c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f7c2:	89a3      	ldrhlt	r3, [r4, #12]
 800f7c4:	181b      	addge	r3, r3, r0
 800f7c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f7ca:	bfac      	ite	ge
 800f7cc:	6563      	strge	r3, [r4, #84]	; 0x54
 800f7ce:	81a3      	strhlt	r3, [r4, #12]
 800f7d0:	bd10      	pop	{r4, pc}

0800f7d2 <__seofread>:
 800f7d2:	2000      	movs	r0, #0
 800f7d4:	4770      	bx	lr

0800f7d6 <__swrite>:
 800f7d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7da:	461f      	mov	r7, r3
 800f7dc:	898b      	ldrh	r3, [r1, #12]
 800f7de:	05db      	lsls	r3, r3, #23
 800f7e0:	4605      	mov	r5, r0
 800f7e2:	460c      	mov	r4, r1
 800f7e4:	4616      	mov	r6, r2
 800f7e6:	d505      	bpl.n	800f7f4 <__swrite+0x1e>
 800f7e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f7ec:	2302      	movs	r3, #2
 800f7ee:	2200      	movs	r2, #0
 800f7f0:	f002 f900 	bl	80119f4 <_lseek_r>
 800f7f4:	89a3      	ldrh	r3, [r4, #12]
 800f7f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f7fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f7fe:	81a3      	strh	r3, [r4, #12]
 800f800:	4632      	mov	r2, r6
 800f802:	463b      	mov	r3, r7
 800f804:	4628      	mov	r0, r5
 800f806:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f80a:	f000 bee1 	b.w	80105d0 <_write_r>

0800f80e <__sseek>:
 800f80e:	b510      	push	{r4, lr}
 800f810:	460c      	mov	r4, r1
 800f812:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f816:	f002 f8ed 	bl	80119f4 <_lseek_r>
 800f81a:	1c43      	adds	r3, r0, #1
 800f81c:	89a3      	ldrh	r3, [r4, #12]
 800f81e:	bf15      	itete	ne
 800f820:	6560      	strne	r0, [r4, #84]	; 0x54
 800f822:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f826:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f82a:	81a3      	strheq	r3, [r4, #12]
 800f82c:	bf18      	it	ne
 800f82e:	81a3      	strhne	r3, [r4, #12]
 800f830:	bd10      	pop	{r4, pc}

0800f832 <__sclose>:
 800f832:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f836:	f000 bedd 	b.w	80105f4 <_close_r>

0800f83a <strcpy>:
 800f83a:	4603      	mov	r3, r0
 800f83c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f840:	f803 2b01 	strb.w	r2, [r3], #1
 800f844:	2a00      	cmp	r2, #0
 800f846:	d1f9      	bne.n	800f83c <strcpy+0x2>
 800f848:	4770      	bx	lr

0800f84a <strncmp>:
 800f84a:	b510      	push	{r4, lr}
 800f84c:	b17a      	cbz	r2, 800f86e <strncmp+0x24>
 800f84e:	4603      	mov	r3, r0
 800f850:	3901      	subs	r1, #1
 800f852:	1884      	adds	r4, r0, r2
 800f854:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f858:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f85c:	4290      	cmp	r0, r2
 800f85e:	d101      	bne.n	800f864 <strncmp+0x1a>
 800f860:	42a3      	cmp	r3, r4
 800f862:	d101      	bne.n	800f868 <strncmp+0x1e>
 800f864:	1a80      	subs	r0, r0, r2
 800f866:	bd10      	pop	{r4, pc}
 800f868:	2800      	cmp	r0, #0
 800f86a:	d1f3      	bne.n	800f854 <strncmp+0xa>
 800f86c:	e7fa      	b.n	800f864 <strncmp+0x1a>
 800f86e:	4610      	mov	r0, r2
 800f870:	e7f9      	b.n	800f866 <strncmp+0x1c>

0800f872 <sulp>:
 800f872:	b570      	push	{r4, r5, r6, lr}
 800f874:	4604      	mov	r4, r0
 800f876:	460d      	mov	r5, r1
 800f878:	ec45 4b10 	vmov	d0, r4, r5
 800f87c:	4616      	mov	r6, r2
 800f87e:	f002 fc57 	bl	8012130 <__ulp>
 800f882:	ec51 0b10 	vmov	r0, r1, d0
 800f886:	b17e      	cbz	r6, 800f8a8 <sulp+0x36>
 800f888:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f88c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f890:	2b00      	cmp	r3, #0
 800f892:	dd09      	ble.n	800f8a8 <sulp+0x36>
 800f894:	051b      	lsls	r3, r3, #20
 800f896:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800f89a:	2400      	movs	r4, #0
 800f89c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800f8a0:	4622      	mov	r2, r4
 800f8a2:	462b      	mov	r3, r5
 800f8a4:	f7f0 fed8 	bl	8000658 <__aeabi_dmul>
 800f8a8:	bd70      	pop	{r4, r5, r6, pc}
 800f8aa:	0000      	movs	r0, r0
 800f8ac:	0000      	movs	r0, r0
	...

0800f8b0 <_strtod_l>:
 800f8b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8b4:	ed2d 8b02 	vpush	{d8}
 800f8b8:	b09d      	sub	sp, #116	; 0x74
 800f8ba:	461f      	mov	r7, r3
 800f8bc:	2300      	movs	r3, #0
 800f8be:	9318      	str	r3, [sp, #96]	; 0x60
 800f8c0:	4ba2      	ldr	r3, [pc, #648]	; (800fb4c <_strtod_l+0x29c>)
 800f8c2:	9213      	str	r2, [sp, #76]	; 0x4c
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	9305      	str	r3, [sp, #20]
 800f8c8:	4604      	mov	r4, r0
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	4688      	mov	r8, r1
 800f8ce:	f7f0 fca9 	bl	8000224 <strlen>
 800f8d2:	f04f 0a00 	mov.w	sl, #0
 800f8d6:	4605      	mov	r5, r0
 800f8d8:	f04f 0b00 	mov.w	fp, #0
 800f8dc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800f8e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f8e2:	781a      	ldrb	r2, [r3, #0]
 800f8e4:	2a2b      	cmp	r2, #43	; 0x2b
 800f8e6:	d04e      	beq.n	800f986 <_strtod_l+0xd6>
 800f8e8:	d83b      	bhi.n	800f962 <_strtod_l+0xb2>
 800f8ea:	2a0d      	cmp	r2, #13
 800f8ec:	d834      	bhi.n	800f958 <_strtod_l+0xa8>
 800f8ee:	2a08      	cmp	r2, #8
 800f8f0:	d834      	bhi.n	800f95c <_strtod_l+0xac>
 800f8f2:	2a00      	cmp	r2, #0
 800f8f4:	d03e      	beq.n	800f974 <_strtod_l+0xc4>
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	930a      	str	r3, [sp, #40]	; 0x28
 800f8fa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800f8fc:	7833      	ldrb	r3, [r6, #0]
 800f8fe:	2b30      	cmp	r3, #48	; 0x30
 800f900:	f040 80b0 	bne.w	800fa64 <_strtod_l+0x1b4>
 800f904:	7873      	ldrb	r3, [r6, #1]
 800f906:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f90a:	2b58      	cmp	r3, #88	; 0x58
 800f90c:	d168      	bne.n	800f9e0 <_strtod_l+0x130>
 800f90e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f910:	9301      	str	r3, [sp, #4]
 800f912:	ab18      	add	r3, sp, #96	; 0x60
 800f914:	9702      	str	r7, [sp, #8]
 800f916:	9300      	str	r3, [sp, #0]
 800f918:	4a8d      	ldr	r2, [pc, #564]	; (800fb50 <_strtod_l+0x2a0>)
 800f91a:	ab19      	add	r3, sp, #100	; 0x64
 800f91c:	a917      	add	r1, sp, #92	; 0x5c
 800f91e:	4620      	mov	r0, r4
 800f920:	f001 fd5c 	bl	80113dc <__gethex>
 800f924:	f010 0707 	ands.w	r7, r0, #7
 800f928:	4605      	mov	r5, r0
 800f92a:	d005      	beq.n	800f938 <_strtod_l+0x88>
 800f92c:	2f06      	cmp	r7, #6
 800f92e:	d12c      	bne.n	800f98a <_strtod_l+0xda>
 800f930:	3601      	adds	r6, #1
 800f932:	2300      	movs	r3, #0
 800f934:	9617      	str	r6, [sp, #92]	; 0x5c
 800f936:	930a      	str	r3, [sp, #40]	; 0x28
 800f938:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	f040 8590 	bne.w	8010460 <_strtod_l+0xbb0>
 800f940:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f942:	b1eb      	cbz	r3, 800f980 <_strtod_l+0xd0>
 800f944:	4652      	mov	r2, sl
 800f946:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f94a:	ec43 2b10 	vmov	d0, r2, r3
 800f94e:	b01d      	add	sp, #116	; 0x74
 800f950:	ecbd 8b02 	vpop	{d8}
 800f954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f958:	2a20      	cmp	r2, #32
 800f95a:	d1cc      	bne.n	800f8f6 <_strtod_l+0x46>
 800f95c:	3301      	adds	r3, #1
 800f95e:	9317      	str	r3, [sp, #92]	; 0x5c
 800f960:	e7be      	b.n	800f8e0 <_strtod_l+0x30>
 800f962:	2a2d      	cmp	r2, #45	; 0x2d
 800f964:	d1c7      	bne.n	800f8f6 <_strtod_l+0x46>
 800f966:	2201      	movs	r2, #1
 800f968:	920a      	str	r2, [sp, #40]	; 0x28
 800f96a:	1c5a      	adds	r2, r3, #1
 800f96c:	9217      	str	r2, [sp, #92]	; 0x5c
 800f96e:	785b      	ldrb	r3, [r3, #1]
 800f970:	2b00      	cmp	r3, #0
 800f972:	d1c2      	bne.n	800f8fa <_strtod_l+0x4a>
 800f974:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f976:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	f040 856e 	bne.w	801045c <_strtod_l+0xbac>
 800f980:	4652      	mov	r2, sl
 800f982:	465b      	mov	r3, fp
 800f984:	e7e1      	b.n	800f94a <_strtod_l+0x9a>
 800f986:	2200      	movs	r2, #0
 800f988:	e7ee      	b.n	800f968 <_strtod_l+0xb8>
 800f98a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f98c:	b13a      	cbz	r2, 800f99e <_strtod_l+0xee>
 800f98e:	2135      	movs	r1, #53	; 0x35
 800f990:	a81a      	add	r0, sp, #104	; 0x68
 800f992:	f002 fcd8 	bl	8012346 <__copybits>
 800f996:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f998:	4620      	mov	r0, r4
 800f99a:	f002 f897 	bl	8011acc <_Bfree>
 800f99e:	3f01      	subs	r7, #1
 800f9a0:	2f04      	cmp	r7, #4
 800f9a2:	d806      	bhi.n	800f9b2 <_strtod_l+0x102>
 800f9a4:	e8df f007 	tbb	[pc, r7]
 800f9a8:	1714030a 	.word	0x1714030a
 800f9ac:	0a          	.byte	0x0a
 800f9ad:	00          	.byte	0x00
 800f9ae:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800f9b2:	0728      	lsls	r0, r5, #28
 800f9b4:	d5c0      	bpl.n	800f938 <_strtod_l+0x88>
 800f9b6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800f9ba:	e7bd      	b.n	800f938 <_strtod_l+0x88>
 800f9bc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800f9c0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800f9c2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800f9c6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f9ca:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f9ce:	e7f0      	b.n	800f9b2 <_strtod_l+0x102>
 800f9d0:	f8df b180 	ldr.w	fp, [pc, #384]	; 800fb54 <_strtod_l+0x2a4>
 800f9d4:	e7ed      	b.n	800f9b2 <_strtod_l+0x102>
 800f9d6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800f9da:	f04f 3aff 	mov.w	sl, #4294967295
 800f9de:	e7e8      	b.n	800f9b2 <_strtod_l+0x102>
 800f9e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f9e2:	1c5a      	adds	r2, r3, #1
 800f9e4:	9217      	str	r2, [sp, #92]	; 0x5c
 800f9e6:	785b      	ldrb	r3, [r3, #1]
 800f9e8:	2b30      	cmp	r3, #48	; 0x30
 800f9ea:	d0f9      	beq.n	800f9e0 <_strtod_l+0x130>
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d0a3      	beq.n	800f938 <_strtod_l+0x88>
 800f9f0:	2301      	movs	r3, #1
 800f9f2:	f04f 0900 	mov.w	r9, #0
 800f9f6:	9304      	str	r3, [sp, #16]
 800f9f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f9fa:	9308      	str	r3, [sp, #32]
 800f9fc:	f8cd 901c 	str.w	r9, [sp, #28]
 800fa00:	464f      	mov	r7, r9
 800fa02:	220a      	movs	r2, #10
 800fa04:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800fa06:	7806      	ldrb	r6, [r0, #0]
 800fa08:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800fa0c:	b2d9      	uxtb	r1, r3
 800fa0e:	2909      	cmp	r1, #9
 800fa10:	d92a      	bls.n	800fa68 <_strtod_l+0x1b8>
 800fa12:	9905      	ldr	r1, [sp, #20]
 800fa14:	462a      	mov	r2, r5
 800fa16:	f7ff ff18 	bl	800f84a <strncmp>
 800fa1a:	b398      	cbz	r0, 800fa84 <_strtod_l+0x1d4>
 800fa1c:	2000      	movs	r0, #0
 800fa1e:	4632      	mov	r2, r6
 800fa20:	463d      	mov	r5, r7
 800fa22:	9005      	str	r0, [sp, #20]
 800fa24:	4603      	mov	r3, r0
 800fa26:	2a65      	cmp	r2, #101	; 0x65
 800fa28:	d001      	beq.n	800fa2e <_strtod_l+0x17e>
 800fa2a:	2a45      	cmp	r2, #69	; 0x45
 800fa2c:	d118      	bne.n	800fa60 <_strtod_l+0x1b0>
 800fa2e:	b91d      	cbnz	r5, 800fa38 <_strtod_l+0x188>
 800fa30:	9a04      	ldr	r2, [sp, #16]
 800fa32:	4302      	orrs	r2, r0
 800fa34:	d09e      	beq.n	800f974 <_strtod_l+0xc4>
 800fa36:	2500      	movs	r5, #0
 800fa38:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800fa3c:	f108 0201 	add.w	r2, r8, #1
 800fa40:	9217      	str	r2, [sp, #92]	; 0x5c
 800fa42:	f898 2001 	ldrb.w	r2, [r8, #1]
 800fa46:	2a2b      	cmp	r2, #43	; 0x2b
 800fa48:	d075      	beq.n	800fb36 <_strtod_l+0x286>
 800fa4a:	2a2d      	cmp	r2, #45	; 0x2d
 800fa4c:	d07b      	beq.n	800fb46 <_strtod_l+0x296>
 800fa4e:	f04f 0c00 	mov.w	ip, #0
 800fa52:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800fa56:	2909      	cmp	r1, #9
 800fa58:	f240 8082 	bls.w	800fb60 <_strtod_l+0x2b0>
 800fa5c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800fa60:	2600      	movs	r6, #0
 800fa62:	e09d      	b.n	800fba0 <_strtod_l+0x2f0>
 800fa64:	2300      	movs	r3, #0
 800fa66:	e7c4      	b.n	800f9f2 <_strtod_l+0x142>
 800fa68:	2f08      	cmp	r7, #8
 800fa6a:	bfd8      	it	le
 800fa6c:	9907      	ldrle	r1, [sp, #28]
 800fa6e:	f100 0001 	add.w	r0, r0, #1
 800fa72:	bfda      	itte	le
 800fa74:	fb02 3301 	mlale	r3, r2, r1, r3
 800fa78:	9307      	strle	r3, [sp, #28]
 800fa7a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800fa7e:	3701      	adds	r7, #1
 800fa80:	9017      	str	r0, [sp, #92]	; 0x5c
 800fa82:	e7bf      	b.n	800fa04 <_strtod_l+0x154>
 800fa84:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fa86:	195a      	adds	r2, r3, r5
 800fa88:	9217      	str	r2, [sp, #92]	; 0x5c
 800fa8a:	5d5a      	ldrb	r2, [r3, r5]
 800fa8c:	2f00      	cmp	r7, #0
 800fa8e:	d037      	beq.n	800fb00 <_strtod_l+0x250>
 800fa90:	9005      	str	r0, [sp, #20]
 800fa92:	463d      	mov	r5, r7
 800fa94:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800fa98:	2b09      	cmp	r3, #9
 800fa9a:	d912      	bls.n	800fac2 <_strtod_l+0x212>
 800fa9c:	2301      	movs	r3, #1
 800fa9e:	e7c2      	b.n	800fa26 <_strtod_l+0x176>
 800faa0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800faa2:	1c5a      	adds	r2, r3, #1
 800faa4:	9217      	str	r2, [sp, #92]	; 0x5c
 800faa6:	785a      	ldrb	r2, [r3, #1]
 800faa8:	3001      	adds	r0, #1
 800faaa:	2a30      	cmp	r2, #48	; 0x30
 800faac:	d0f8      	beq.n	800faa0 <_strtod_l+0x1f0>
 800faae:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800fab2:	2b08      	cmp	r3, #8
 800fab4:	f200 84d9 	bhi.w	801046a <_strtod_l+0xbba>
 800fab8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800faba:	9005      	str	r0, [sp, #20]
 800fabc:	2000      	movs	r0, #0
 800fabe:	9308      	str	r3, [sp, #32]
 800fac0:	4605      	mov	r5, r0
 800fac2:	3a30      	subs	r2, #48	; 0x30
 800fac4:	f100 0301 	add.w	r3, r0, #1
 800fac8:	d014      	beq.n	800faf4 <_strtod_l+0x244>
 800faca:	9905      	ldr	r1, [sp, #20]
 800facc:	4419      	add	r1, r3
 800face:	9105      	str	r1, [sp, #20]
 800fad0:	462b      	mov	r3, r5
 800fad2:	eb00 0e05 	add.w	lr, r0, r5
 800fad6:	210a      	movs	r1, #10
 800fad8:	4573      	cmp	r3, lr
 800fada:	d113      	bne.n	800fb04 <_strtod_l+0x254>
 800fadc:	182b      	adds	r3, r5, r0
 800fade:	2b08      	cmp	r3, #8
 800fae0:	f105 0501 	add.w	r5, r5, #1
 800fae4:	4405      	add	r5, r0
 800fae6:	dc1c      	bgt.n	800fb22 <_strtod_l+0x272>
 800fae8:	9907      	ldr	r1, [sp, #28]
 800faea:	230a      	movs	r3, #10
 800faec:	fb03 2301 	mla	r3, r3, r1, r2
 800faf0:	9307      	str	r3, [sp, #28]
 800faf2:	2300      	movs	r3, #0
 800faf4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800faf6:	1c51      	adds	r1, r2, #1
 800faf8:	9117      	str	r1, [sp, #92]	; 0x5c
 800fafa:	7852      	ldrb	r2, [r2, #1]
 800fafc:	4618      	mov	r0, r3
 800fafe:	e7c9      	b.n	800fa94 <_strtod_l+0x1e4>
 800fb00:	4638      	mov	r0, r7
 800fb02:	e7d2      	b.n	800faaa <_strtod_l+0x1fa>
 800fb04:	2b08      	cmp	r3, #8
 800fb06:	dc04      	bgt.n	800fb12 <_strtod_l+0x262>
 800fb08:	9e07      	ldr	r6, [sp, #28]
 800fb0a:	434e      	muls	r6, r1
 800fb0c:	9607      	str	r6, [sp, #28]
 800fb0e:	3301      	adds	r3, #1
 800fb10:	e7e2      	b.n	800fad8 <_strtod_l+0x228>
 800fb12:	f103 0c01 	add.w	ip, r3, #1
 800fb16:	f1bc 0f10 	cmp.w	ip, #16
 800fb1a:	bfd8      	it	le
 800fb1c:	fb01 f909 	mulle.w	r9, r1, r9
 800fb20:	e7f5      	b.n	800fb0e <_strtod_l+0x25e>
 800fb22:	2d10      	cmp	r5, #16
 800fb24:	bfdc      	itt	le
 800fb26:	230a      	movle	r3, #10
 800fb28:	fb03 2909 	mlale	r9, r3, r9, r2
 800fb2c:	e7e1      	b.n	800faf2 <_strtod_l+0x242>
 800fb2e:	2300      	movs	r3, #0
 800fb30:	9305      	str	r3, [sp, #20]
 800fb32:	2301      	movs	r3, #1
 800fb34:	e77c      	b.n	800fa30 <_strtod_l+0x180>
 800fb36:	f04f 0c00 	mov.w	ip, #0
 800fb3a:	f108 0202 	add.w	r2, r8, #2
 800fb3e:	9217      	str	r2, [sp, #92]	; 0x5c
 800fb40:	f898 2002 	ldrb.w	r2, [r8, #2]
 800fb44:	e785      	b.n	800fa52 <_strtod_l+0x1a2>
 800fb46:	f04f 0c01 	mov.w	ip, #1
 800fb4a:	e7f6      	b.n	800fb3a <_strtod_l+0x28a>
 800fb4c:	08014118 	.word	0x08014118
 800fb50:	08013ed0 	.word	0x08013ed0
 800fb54:	7ff00000 	.word	0x7ff00000
 800fb58:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800fb5a:	1c51      	adds	r1, r2, #1
 800fb5c:	9117      	str	r1, [sp, #92]	; 0x5c
 800fb5e:	7852      	ldrb	r2, [r2, #1]
 800fb60:	2a30      	cmp	r2, #48	; 0x30
 800fb62:	d0f9      	beq.n	800fb58 <_strtod_l+0x2a8>
 800fb64:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800fb68:	2908      	cmp	r1, #8
 800fb6a:	f63f af79 	bhi.w	800fa60 <_strtod_l+0x1b0>
 800fb6e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800fb72:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800fb74:	9206      	str	r2, [sp, #24]
 800fb76:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800fb78:	1c51      	adds	r1, r2, #1
 800fb7a:	9117      	str	r1, [sp, #92]	; 0x5c
 800fb7c:	7852      	ldrb	r2, [r2, #1]
 800fb7e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800fb82:	2e09      	cmp	r6, #9
 800fb84:	d937      	bls.n	800fbf6 <_strtod_l+0x346>
 800fb86:	9e06      	ldr	r6, [sp, #24]
 800fb88:	1b89      	subs	r1, r1, r6
 800fb8a:	2908      	cmp	r1, #8
 800fb8c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800fb90:	dc02      	bgt.n	800fb98 <_strtod_l+0x2e8>
 800fb92:	4576      	cmp	r6, lr
 800fb94:	bfa8      	it	ge
 800fb96:	4676      	movge	r6, lr
 800fb98:	f1bc 0f00 	cmp.w	ip, #0
 800fb9c:	d000      	beq.n	800fba0 <_strtod_l+0x2f0>
 800fb9e:	4276      	negs	r6, r6
 800fba0:	2d00      	cmp	r5, #0
 800fba2:	d14d      	bne.n	800fc40 <_strtod_l+0x390>
 800fba4:	9904      	ldr	r1, [sp, #16]
 800fba6:	4301      	orrs	r1, r0
 800fba8:	f47f aec6 	bne.w	800f938 <_strtod_l+0x88>
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	f47f aee1 	bne.w	800f974 <_strtod_l+0xc4>
 800fbb2:	2a69      	cmp	r2, #105	; 0x69
 800fbb4:	d027      	beq.n	800fc06 <_strtod_l+0x356>
 800fbb6:	dc24      	bgt.n	800fc02 <_strtod_l+0x352>
 800fbb8:	2a49      	cmp	r2, #73	; 0x49
 800fbba:	d024      	beq.n	800fc06 <_strtod_l+0x356>
 800fbbc:	2a4e      	cmp	r2, #78	; 0x4e
 800fbbe:	f47f aed9 	bne.w	800f974 <_strtod_l+0xc4>
 800fbc2:	499f      	ldr	r1, [pc, #636]	; (800fe40 <_strtod_l+0x590>)
 800fbc4:	a817      	add	r0, sp, #92	; 0x5c
 800fbc6:	f001 fe61 	bl	801188c <__match>
 800fbca:	2800      	cmp	r0, #0
 800fbcc:	f43f aed2 	beq.w	800f974 <_strtod_l+0xc4>
 800fbd0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fbd2:	781b      	ldrb	r3, [r3, #0]
 800fbd4:	2b28      	cmp	r3, #40	; 0x28
 800fbd6:	d12d      	bne.n	800fc34 <_strtod_l+0x384>
 800fbd8:	499a      	ldr	r1, [pc, #616]	; (800fe44 <_strtod_l+0x594>)
 800fbda:	aa1a      	add	r2, sp, #104	; 0x68
 800fbdc:	a817      	add	r0, sp, #92	; 0x5c
 800fbde:	f001 fe69 	bl	80118b4 <__hexnan>
 800fbe2:	2805      	cmp	r0, #5
 800fbe4:	d126      	bne.n	800fc34 <_strtod_l+0x384>
 800fbe6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fbe8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800fbec:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800fbf0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800fbf4:	e6a0      	b.n	800f938 <_strtod_l+0x88>
 800fbf6:	210a      	movs	r1, #10
 800fbf8:	fb01 2e0e 	mla	lr, r1, lr, r2
 800fbfc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800fc00:	e7b9      	b.n	800fb76 <_strtod_l+0x2c6>
 800fc02:	2a6e      	cmp	r2, #110	; 0x6e
 800fc04:	e7db      	b.n	800fbbe <_strtod_l+0x30e>
 800fc06:	4990      	ldr	r1, [pc, #576]	; (800fe48 <_strtod_l+0x598>)
 800fc08:	a817      	add	r0, sp, #92	; 0x5c
 800fc0a:	f001 fe3f 	bl	801188c <__match>
 800fc0e:	2800      	cmp	r0, #0
 800fc10:	f43f aeb0 	beq.w	800f974 <_strtod_l+0xc4>
 800fc14:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fc16:	498d      	ldr	r1, [pc, #564]	; (800fe4c <_strtod_l+0x59c>)
 800fc18:	3b01      	subs	r3, #1
 800fc1a:	a817      	add	r0, sp, #92	; 0x5c
 800fc1c:	9317      	str	r3, [sp, #92]	; 0x5c
 800fc1e:	f001 fe35 	bl	801188c <__match>
 800fc22:	b910      	cbnz	r0, 800fc2a <_strtod_l+0x37a>
 800fc24:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fc26:	3301      	adds	r3, #1
 800fc28:	9317      	str	r3, [sp, #92]	; 0x5c
 800fc2a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800fe5c <_strtod_l+0x5ac>
 800fc2e:	f04f 0a00 	mov.w	sl, #0
 800fc32:	e681      	b.n	800f938 <_strtod_l+0x88>
 800fc34:	4886      	ldr	r0, [pc, #536]	; (800fe50 <_strtod_l+0x5a0>)
 800fc36:	f003 f953 	bl	8012ee0 <nan>
 800fc3a:	ec5b ab10 	vmov	sl, fp, d0
 800fc3e:	e67b      	b.n	800f938 <_strtod_l+0x88>
 800fc40:	9b05      	ldr	r3, [sp, #20]
 800fc42:	9807      	ldr	r0, [sp, #28]
 800fc44:	1af3      	subs	r3, r6, r3
 800fc46:	2f00      	cmp	r7, #0
 800fc48:	bf08      	it	eq
 800fc4a:	462f      	moveq	r7, r5
 800fc4c:	2d10      	cmp	r5, #16
 800fc4e:	9306      	str	r3, [sp, #24]
 800fc50:	46a8      	mov	r8, r5
 800fc52:	bfa8      	it	ge
 800fc54:	f04f 0810 	movge.w	r8, #16
 800fc58:	f7f0 fc84 	bl	8000564 <__aeabi_ui2d>
 800fc5c:	2d09      	cmp	r5, #9
 800fc5e:	4682      	mov	sl, r0
 800fc60:	468b      	mov	fp, r1
 800fc62:	dd13      	ble.n	800fc8c <_strtod_l+0x3dc>
 800fc64:	4b7b      	ldr	r3, [pc, #492]	; (800fe54 <_strtod_l+0x5a4>)
 800fc66:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800fc6a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800fc6e:	f7f0 fcf3 	bl	8000658 <__aeabi_dmul>
 800fc72:	4682      	mov	sl, r0
 800fc74:	4648      	mov	r0, r9
 800fc76:	468b      	mov	fp, r1
 800fc78:	f7f0 fc74 	bl	8000564 <__aeabi_ui2d>
 800fc7c:	4602      	mov	r2, r0
 800fc7e:	460b      	mov	r3, r1
 800fc80:	4650      	mov	r0, sl
 800fc82:	4659      	mov	r1, fp
 800fc84:	f7f0 fb32 	bl	80002ec <__adddf3>
 800fc88:	4682      	mov	sl, r0
 800fc8a:	468b      	mov	fp, r1
 800fc8c:	2d0f      	cmp	r5, #15
 800fc8e:	dc38      	bgt.n	800fd02 <_strtod_l+0x452>
 800fc90:	9b06      	ldr	r3, [sp, #24]
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	f43f ae50 	beq.w	800f938 <_strtod_l+0x88>
 800fc98:	dd24      	ble.n	800fce4 <_strtod_l+0x434>
 800fc9a:	2b16      	cmp	r3, #22
 800fc9c:	dc0b      	bgt.n	800fcb6 <_strtod_l+0x406>
 800fc9e:	496d      	ldr	r1, [pc, #436]	; (800fe54 <_strtod_l+0x5a4>)
 800fca0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fca4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fca8:	4652      	mov	r2, sl
 800fcaa:	465b      	mov	r3, fp
 800fcac:	f7f0 fcd4 	bl	8000658 <__aeabi_dmul>
 800fcb0:	4682      	mov	sl, r0
 800fcb2:	468b      	mov	fp, r1
 800fcb4:	e640      	b.n	800f938 <_strtod_l+0x88>
 800fcb6:	9a06      	ldr	r2, [sp, #24]
 800fcb8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800fcbc:	4293      	cmp	r3, r2
 800fcbe:	db20      	blt.n	800fd02 <_strtod_l+0x452>
 800fcc0:	4c64      	ldr	r4, [pc, #400]	; (800fe54 <_strtod_l+0x5a4>)
 800fcc2:	f1c5 050f 	rsb	r5, r5, #15
 800fcc6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800fcca:	4652      	mov	r2, sl
 800fccc:	465b      	mov	r3, fp
 800fcce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fcd2:	f7f0 fcc1 	bl	8000658 <__aeabi_dmul>
 800fcd6:	9b06      	ldr	r3, [sp, #24]
 800fcd8:	1b5d      	subs	r5, r3, r5
 800fcda:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800fcde:	e9d4 2300 	ldrd	r2, r3, [r4]
 800fce2:	e7e3      	b.n	800fcac <_strtod_l+0x3fc>
 800fce4:	9b06      	ldr	r3, [sp, #24]
 800fce6:	3316      	adds	r3, #22
 800fce8:	db0b      	blt.n	800fd02 <_strtod_l+0x452>
 800fcea:	9b05      	ldr	r3, [sp, #20]
 800fcec:	1b9e      	subs	r6, r3, r6
 800fcee:	4b59      	ldr	r3, [pc, #356]	; (800fe54 <_strtod_l+0x5a4>)
 800fcf0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800fcf4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800fcf8:	4650      	mov	r0, sl
 800fcfa:	4659      	mov	r1, fp
 800fcfc:	f7f0 fdd6 	bl	80008ac <__aeabi_ddiv>
 800fd00:	e7d6      	b.n	800fcb0 <_strtod_l+0x400>
 800fd02:	9b06      	ldr	r3, [sp, #24]
 800fd04:	eba5 0808 	sub.w	r8, r5, r8
 800fd08:	4498      	add	r8, r3
 800fd0a:	f1b8 0f00 	cmp.w	r8, #0
 800fd0e:	dd74      	ble.n	800fdfa <_strtod_l+0x54a>
 800fd10:	f018 030f 	ands.w	r3, r8, #15
 800fd14:	d00a      	beq.n	800fd2c <_strtod_l+0x47c>
 800fd16:	494f      	ldr	r1, [pc, #316]	; (800fe54 <_strtod_l+0x5a4>)
 800fd18:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fd1c:	4652      	mov	r2, sl
 800fd1e:	465b      	mov	r3, fp
 800fd20:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fd24:	f7f0 fc98 	bl	8000658 <__aeabi_dmul>
 800fd28:	4682      	mov	sl, r0
 800fd2a:	468b      	mov	fp, r1
 800fd2c:	f038 080f 	bics.w	r8, r8, #15
 800fd30:	d04f      	beq.n	800fdd2 <_strtod_l+0x522>
 800fd32:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800fd36:	dd22      	ble.n	800fd7e <_strtod_l+0x4ce>
 800fd38:	2500      	movs	r5, #0
 800fd3a:	462e      	mov	r6, r5
 800fd3c:	9507      	str	r5, [sp, #28]
 800fd3e:	9505      	str	r5, [sp, #20]
 800fd40:	2322      	movs	r3, #34	; 0x22
 800fd42:	f8df b118 	ldr.w	fp, [pc, #280]	; 800fe5c <_strtod_l+0x5ac>
 800fd46:	6023      	str	r3, [r4, #0]
 800fd48:	f04f 0a00 	mov.w	sl, #0
 800fd4c:	9b07      	ldr	r3, [sp, #28]
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	f43f adf2 	beq.w	800f938 <_strtod_l+0x88>
 800fd54:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fd56:	4620      	mov	r0, r4
 800fd58:	f001 feb8 	bl	8011acc <_Bfree>
 800fd5c:	9905      	ldr	r1, [sp, #20]
 800fd5e:	4620      	mov	r0, r4
 800fd60:	f001 feb4 	bl	8011acc <_Bfree>
 800fd64:	4631      	mov	r1, r6
 800fd66:	4620      	mov	r0, r4
 800fd68:	f001 feb0 	bl	8011acc <_Bfree>
 800fd6c:	9907      	ldr	r1, [sp, #28]
 800fd6e:	4620      	mov	r0, r4
 800fd70:	f001 feac 	bl	8011acc <_Bfree>
 800fd74:	4629      	mov	r1, r5
 800fd76:	4620      	mov	r0, r4
 800fd78:	f001 fea8 	bl	8011acc <_Bfree>
 800fd7c:	e5dc      	b.n	800f938 <_strtod_l+0x88>
 800fd7e:	4b36      	ldr	r3, [pc, #216]	; (800fe58 <_strtod_l+0x5a8>)
 800fd80:	9304      	str	r3, [sp, #16]
 800fd82:	2300      	movs	r3, #0
 800fd84:	ea4f 1828 	mov.w	r8, r8, asr #4
 800fd88:	4650      	mov	r0, sl
 800fd8a:	4659      	mov	r1, fp
 800fd8c:	4699      	mov	r9, r3
 800fd8e:	f1b8 0f01 	cmp.w	r8, #1
 800fd92:	dc21      	bgt.n	800fdd8 <_strtod_l+0x528>
 800fd94:	b10b      	cbz	r3, 800fd9a <_strtod_l+0x4ea>
 800fd96:	4682      	mov	sl, r0
 800fd98:	468b      	mov	fp, r1
 800fd9a:	4b2f      	ldr	r3, [pc, #188]	; (800fe58 <_strtod_l+0x5a8>)
 800fd9c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800fda0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800fda4:	4652      	mov	r2, sl
 800fda6:	465b      	mov	r3, fp
 800fda8:	e9d9 0100 	ldrd	r0, r1, [r9]
 800fdac:	f7f0 fc54 	bl	8000658 <__aeabi_dmul>
 800fdb0:	4b2a      	ldr	r3, [pc, #168]	; (800fe5c <_strtod_l+0x5ac>)
 800fdb2:	460a      	mov	r2, r1
 800fdb4:	400b      	ands	r3, r1
 800fdb6:	492a      	ldr	r1, [pc, #168]	; (800fe60 <_strtod_l+0x5b0>)
 800fdb8:	428b      	cmp	r3, r1
 800fdba:	4682      	mov	sl, r0
 800fdbc:	d8bc      	bhi.n	800fd38 <_strtod_l+0x488>
 800fdbe:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800fdc2:	428b      	cmp	r3, r1
 800fdc4:	bf86      	itte	hi
 800fdc6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800fe64 <_strtod_l+0x5b4>
 800fdca:	f04f 3aff 	movhi.w	sl, #4294967295
 800fdce:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800fdd2:	2300      	movs	r3, #0
 800fdd4:	9304      	str	r3, [sp, #16]
 800fdd6:	e084      	b.n	800fee2 <_strtod_l+0x632>
 800fdd8:	f018 0f01 	tst.w	r8, #1
 800fddc:	d005      	beq.n	800fdea <_strtod_l+0x53a>
 800fdde:	9b04      	ldr	r3, [sp, #16]
 800fde0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fde4:	f7f0 fc38 	bl	8000658 <__aeabi_dmul>
 800fde8:	2301      	movs	r3, #1
 800fdea:	9a04      	ldr	r2, [sp, #16]
 800fdec:	3208      	adds	r2, #8
 800fdee:	f109 0901 	add.w	r9, r9, #1
 800fdf2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800fdf6:	9204      	str	r2, [sp, #16]
 800fdf8:	e7c9      	b.n	800fd8e <_strtod_l+0x4de>
 800fdfa:	d0ea      	beq.n	800fdd2 <_strtod_l+0x522>
 800fdfc:	f1c8 0800 	rsb	r8, r8, #0
 800fe00:	f018 020f 	ands.w	r2, r8, #15
 800fe04:	d00a      	beq.n	800fe1c <_strtod_l+0x56c>
 800fe06:	4b13      	ldr	r3, [pc, #76]	; (800fe54 <_strtod_l+0x5a4>)
 800fe08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fe0c:	4650      	mov	r0, sl
 800fe0e:	4659      	mov	r1, fp
 800fe10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe14:	f7f0 fd4a 	bl	80008ac <__aeabi_ddiv>
 800fe18:	4682      	mov	sl, r0
 800fe1a:	468b      	mov	fp, r1
 800fe1c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800fe20:	d0d7      	beq.n	800fdd2 <_strtod_l+0x522>
 800fe22:	f1b8 0f1f 	cmp.w	r8, #31
 800fe26:	dd1f      	ble.n	800fe68 <_strtod_l+0x5b8>
 800fe28:	2500      	movs	r5, #0
 800fe2a:	462e      	mov	r6, r5
 800fe2c:	9507      	str	r5, [sp, #28]
 800fe2e:	9505      	str	r5, [sp, #20]
 800fe30:	2322      	movs	r3, #34	; 0x22
 800fe32:	f04f 0a00 	mov.w	sl, #0
 800fe36:	f04f 0b00 	mov.w	fp, #0
 800fe3a:	6023      	str	r3, [r4, #0]
 800fe3c:	e786      	b.n	800fd4c <_strtod_l+0x49c>
 800fe3e:	bf00      	nop
 800fe40:	08013ea5 	.word	0x08013ea5
 800fe44:	08013ee4 	.word	0x08013ee4
 800fe48:	08013e9d 	.word	0x08013e9d
 800fe4c:	08014024 	.word	0x08014024
 800fe50:	080142eb 	.word	0x080142eb
 800fe54:	080141b0 	.word	0x080141b0
 800fe58:	08014188 	.word	0x08014188
 800fe5c:	7ff00000 	.word	0x7ff00000
 800fe60:	7ca00000 	.word	0x7ca00000
 800fe64:	7fefffff 	.word	0x7fefffff
 800fe68:	f018 0310 	ands.w	r3, r8, #16
 800fe6c:	bf18      	it	ne
 800fe6e:	236a      	movne	r3, #106	; 0x6a
 800fe70:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8010220 <_strtod_l+0x970>
 800fe74:	9304      	str	r3, [sp, #16]
 800fe76:	4650      	mov	r0, sl
 800fe78:	4659      	mov	r1, fp
 800fe7a:	2300      	movs	r3, #0
 800fe7c:	f018 0f01 	tst.w	r8, #1
 800fe80:	d004      	beq.n	800fe8c <_strtod_l+0x5dc>
 800fe82:	e9d9 2300 	ldrd	r2, r3, [r9]
 800fe86:	f7f0 fbe7 	bl	8000658 <__aeabi_dmul>
 800fe8a:	2301      	movs	r3, #1
 800fe8c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800fe90:	f109 0908 	add.w	r9, r9, #8
 800fe94:	d1f2      	bne.n	800fe7c <_strtod_l+0x5cc>
 800fe96:	b10b      	cbz	r3, 800fe9c <_strtod_l+0x5ec>
 800fe98:	4682      	mov	sl, r0
 800fe9a:	468b      	mov	fp, r1
 800fe9c:	9b04      	ldr	r3, [sp, #16]
 800fe9e:	b1c3      	cbz	r3, 800fed2 <_strtod_l+0x622>
 800fea0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800fea4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	4659      	mov	r1, fp
 800feac:	dd11      	ble.n	800fed2 <_strtod_l+0x622>
 800feae:	2b1f      	cmp	r3, #31
 800feb0:	f340 8124 	ble.w	80100fc <_strtod_l+0x84c>
 800feb4:	2b34      	cmp	r3, #52	; 0x34
 800feb6:	bfde      	ittt	le
 800feb8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800febc:	f04f 33ff 	movle.w	r3, #4294967295
 800fec0:	fa03 f202 	lslle.w	r2, r3, r2
 800fec4:	f04f 0a00 	mov.w	sl, #0
 800fec8:	bfcc      	ite	gt
 800feca:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800fece:	ea02 0b01 	andle.w	fp, r2, r1
 800fed2:	2200      	movs	r2, #0
 800fed4:	2300      	movs	r3, #0
 800fed6:	4650      	mov	r0, sl
 800fed8:	4659      	mov	r1, fp
 800feda:	f7f0 fe25 	bl	8000b28 <__aeabi_dcmpeq>
 800fede:	2800      	cmp	r0, #0
 800fee0:	d1a2      	bne.n	800fe28 <_strtod_l+0x578>
 800fee2:	9b07      	ldr	r3, [sp, #28]
 800fee4:	9300      	str	r3, [sp, #0]
 800fee6:	9908      	ldr	r1, [sp, #32]
 800fee8:	462b      	mov	r3, r5
 800feea:	463a      	mov	r2, r7
 800feec:	4620      	mov	r0, r4
 800feee:	f001 fe55 	bl	8011b9c <__s2b>
 800fef2:	9007      	str	r0, [sp, #28]
 800fef4:	2800      	cmp	r0, #0
 800fef6:	f43f af1f 	beq.w	800fd38 <_strtod_l+0x488>
 800fefa:	9b05      	ldr	r3, [sp, #20]
 800fefc:	1b9e      	subs	r6, r3, r6
 800fefe:	9b06      	ldr	r3, [sp, #24]
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	bfb4      	ite	lt
 800ff04:	4633      	movlt	r3, r6
 800ff06:	2300      	movge	r3, #0
 800ff08:	930c      	str	r3, [sp, #48]	; 0x30
 800ff0a:	9b06      	ldr	r3, [sp, #24]
 800ff0c:	2500      	movs	r5, #0
 800ff0e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ff12:	9312      	str	r3, [sp, #72]	; 0x48
 800ff14:	462e      	mov	r6, r5
 800ff16:	9b07      	ldr	r3, [sp, #28]
 800ff18:	4620      	mov	r0, r4
 800ff1a:	6859      	ldr	r1, [r3, #4]
 800ff1c:	f001 fd96 	bl	8011a4c <_Balloc>
 800ff20:	9005      	str	r0, [sp, #20]
 800ff22:	2800      	cmp	r0, #0
 800ff24:	f43f af0c 	beq.w	800fd40 <_strtod_l+0x490>
 800ff28:	9b07      	ldr	r3, [sp, #28]
 800ff2a:	691a      	ldr	r2, [r3, #16]
 800ff2c:	3202      	adds	r2, #2
 800ff2e:	f103 010c 	add.w	r1, r3, #12
 800ff32:	0092      	lsls	r2, r2, #2
 800ff34:	300c      	adds	r0, #12
 800ff36:	f7fe fd59 	bl	800e9ec <memcpy>
 800ff3a:	ec4b ab10 	vmov	d0, sl, fp
 800ff3e:	aa1a      	add	r2, sp, #104	; 0x68
 800ff40:	a919      	add	r1, sp, #100	; 0x64
 800ff42:	4620      	mov	r0, r4
 800ff44:	f002 f970 	bl	8012228 <__d2b>
 800ff48:	ec4b ab18 	vmov	d8, sl, fp
 800ff4c:	9018      	str	r0, [sp, #96]	; 0x60
 800ff4e:	2800      	cmp	r0, #0
 800ff50:	f43f aef6 	beq.w	800fd40 <_strtod_l+0x490>
 800ff54:	2101      	movs	r1, #1
 800ff56:	4620      	mov	r0, r4
 800ff58:	f001 feba 	bl	8011cd0 <__i2b>
 800ff5c:	4606      	mov	r6, r0
 800ff5e:	2800      	cmp	r0, #0
 800ff60:	f43f aeee 	beq.w	800fd40 <_strtod_l+0x490>
 800ff64:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ff66:	9904      	ldr	r1, [sp, #16]
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	bfab      	itete	ge
 800ff6c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800ff6e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800ff70:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800ff72:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800ff76:	bfac      	ite	ge
 800ff78:	eb03 0902 	addge.w	r9, r3, r2
 800ff7c:	1ad7      	sublt	r7, r2, r3
 800ff7e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ff80:	eba3 0801 	sub.w	r8, r3, r1
 800ff84:	4490      	add	r8, r2
 800ff86:	4ba1      	ldr	r3, [pc, #644]	; (801020c <_strtod_l+0x95c>)
 800ff88:	f108 38ff 	add.w	r8, r8, #4294967295
 800ff8c:	4598      	cmp	r8, r3
 800ff8e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ff92:	f280 80c7 	bge.w	8010124 <_strtod_l+0x874>
 800ff96:	eba3 0308 	sub.w	r3, r3, r8
 800ff9a:	2b1f      	cmp	r3, #31
 800ff9c:	eba2 0203 	sub.w	r2, r2, r3
 800ffa0:	f04f 0101 	mov.w	r1, #1
 800ffa4:	f300 80b1 	bgt.w	801010a <_strtod_l+0x85a>
 800ffa8:	fa01 f303 	lsl.w	r3, r1, r3
 800ffac:	930d      	str	r3, [sp, #52]	; 0x34
 800ffae:	2300      	movs	r3, #0
 800ffb0:	9308      	str	r3, [sp, #32]
 800ffb2:	eb09 0802 	add.w	r8, r9, r2
 800ffb6:	9b04      	ldr	r3, [sp, #16]
 800ffb8:	45c1      	cmp	r9, r8
 800ffba:	4417      	add	r7, r2
 800ffbc:	441f      	add	r7, r3
 800ffbe:	464b      	mov	r3, r9
 800ffc0:	bfa8      	it	ge
 800ffc2:	4643      	movge	r3, r8
 800ffc4:	42bb      	cmp	r3, r7
 800ffc6:	bfa8      	it	ge
 800ffc8:	463b      	movge	r3, r7
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	bfc2      	ittt	gt
 800ffce:	eba8 0803 	subgt.w	r8, r8, r3
 800ffd2:	1aff      	subgt	r7, r7, r3
 800ffd4:	eba9 0903 	subgt.w	r9, r9, r3
 800ffd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	dd17      	ble.n	801000e <_strtod_l+0x75e>
 800ffde:	4631      	mov	r1, r6
 800ffe0:	461a      	mov	r2, r3
 800ffe2:	4620      	mov	r0, r4
 800ffe4:	f001 ff34 	bl	8011e50 <__pow5mult>
 800ffe8:	4606      	mov	r6, r0
 800ffea:	2800      	cmp	r0, #0
 800ffec:	f43f aea8 	beq.w	800fd40 <_strtod_l+0x490>
 800fff0:	4601      	mov	r1, r0
 800fff2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800fff4:	4620      	mov	r0, r4
 800fff6:	f001 fe81 	bl	8011cfc <__multiply>
 800fffa:	900b      	str	r0, [sp, #44]	; 0x2c
 800fffc:	2800      	cmp	r0, #0
 800fffe:	f43f ae9f 	beq.w	800fd40 <_strtod_l+0x490>
 8010002:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010004:	4620      	mov	r0, r4
 8010006:	f001 fd61 	bl	8011acc <_Bfree>
 801000a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801000c:	9318      	str	r3, [sp, #96]	; 0x60
 801000e:	f1b8 0f00 	cmp.w	r8, #0
 8010012:	f300 808c 	bgt.w	801012e <_strtod_l+0x87e>
 8010016:	9b06      	ldr	r3, [sp, #24]
 8010018:	2b00      	cmp	r3, #0
 801001a:	dd08      	ble.n	801002e <_strtod_l+0x77e>
 801001c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801001e:	9905      	ldr	r1, [sp, #20]
 8010020:	4620      	mov	r0, r4
 8010022:	f001 ff15 	bl	8011e50 <__pow5mult>
 8010026:	9005      	str	r0, [sp, #20]
 8010028:	2800      	cmp	r0, #0
 801002a:	f43f ae89 	beq.w	800fd40 <_strtod_l+0x490>
 801002e:	2f00      	cmp	r7, #0
 8010030:	dd08      	ble.n	8010044 <_strtod_l+0x794>
 8010032:	9905      	ldr	r1, [sp, #20]
 8010034:	463a      	mov	r2, r7
 8010036:	4620      	mov	r0, r4
 8010038:	f001 ff64 	bl	8011f04 <__lshift>
 801003c:	9005      	str	r0, [sp, #20]
 801003e:	2800      	cmp	r0, #0
 8010040:	f43f ae7e 	beq.w	800fd40 <_strtod_l+0x490>
 8010044:	f1b9 0f00 	cmp.w	r9, #0
 8010048:	dd08      	ble.n	801005c <_strtod_l+0x7ac>
 801004a:	4631      	mov	r1, r6
 801004c:	464a      	mov	r2, r9
 801004e:	4620      	mov	r0, r4
 8010050:	f001 ff58 	bl	8011f04 <__lshift>
 8010054:	4606      	mov	r6, r0
 8010056:	2800      	cmp	r0, #0
 8010058:	f43f ae72 	beq.w	800fd40 <_strtod_l+0x490>
 801005c:	9a05      	ldr	r2, [sp, #20]
 801005e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010060:	4620      	mov	r0, r4
 8010062:	f001 ffdb 	bl	801201c <__mdiff>
 8010066:	4605      	mov	r5, r0
 8010068:	2800      	cmp	r0, #0
 801006a:	f43f ae69 	beq.w	800fd40 <_strtod_l+0x490>
 801006e:	68c3      	ldr	r3, [r0, #12]
 8010070:	930b      	str	r3, [sp, #44]	; 0x2c
 8010072:	2300      	movs	r3, #0
 8010074:	60c3      	str	r3, [r0, #12]
 8010076:	4631      	mov	r1, r6
 8010078:	f001 ffb4 	bl	8011fe4 <__mcmp>
 801007c:	2800      	cmp	r0, #0
 801007e:	da60      	bge.n	8010142 <_strtod_l+0x892>
 8010080:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010082:	ea53 030a 	orrs.w	r3, r3, sl
 8010086:	f040 8082 	bne.w	801018e <_strtod_l+0x8de>
 801008a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801008e:	2b00      	cmp	r3, #0
 8010090:	d17d      	bne.n	801018e <_strtod_l+0x8de>
 8010092:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010096:	0d1b      	lsrs	r3, r3, #20
 8010098:	051b      	lsls	r3, r3, #20
 801009a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801009e:	d976      	bls.n	801018e <_strtod_l+0x8de>
 80100a0:	696b      	ldr	r3, [r5, #20]
 80100a2:	b913      	cbnz	r3, 80100aa <_strtod_l+0x7fa>
 80100a4:	692b      	ldr	r3, [r5, #16]
 80100a6:	2b01      	cmp	r3, #1
 80100a8:	dd71      	ble.n	801018e <_strtod_l+0x8de>
 80100aa:	4629      	mov	r1, r5
 80100ac:	2201      	movs	r2, #1
 80100ae:	4620      	mov	r0, r4
 80100b0:	f001 ff28 	bl	8011f04 <__lshift>
 80100b4:	4631      	mov	r1, r6
 80100b6:	4605      	mov	r5, r0
 80100b8:	f001 ff94 	bl	8011fe4 <__mcmp>
 80100bc:	2800      	cmp	r0, #0
 80100be:	dd66      	ble.n	801018e <_strtod_l+0x8de>
 80100c0:	9904      	ldr	r1, [sp, #16]
 80100c2:	4a53      	ldr	r2, [pc, #332]	; (8010210 <_strtod_l+0x960>)
 80100c4:	465b      	mov	r3, fp
 80100c6:	2900      	cmp	r1, #0
 80100c8:	f000 8081 	beq.w	80101ce <_strtod_l+0x91e>
 80100cc:	ea02 010b 	and.w	r1, r2, fp
 80100d0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80100d4:	dc7b      	bgt.n	80101ce <_strtod_l+0x91e>
 80100d6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80100da:	f77f aea9 	ble.w	800fe30 <_strtod_l+0x580>
 80100de:	4b4d      	ldr	r3, [pc, #308]	; (8010214 <_strtod_l+0x964>)
 80100e0:	4650      	mov	r0, sl
 80100e2:	4659      	mov	r1, fp
 80100e4:	2200      	movs	r2, #0
 80100e6:	f7f0 fab7 	bl	8000658 <__aeabi_dmul>
 80100ea:	460b      	mov	r3, r1
 80100ec:	4303      	orrs	r3, r0
 80100ee:	bf08      	it	eq
 80100f0:	2322      	moveq	r3, #34	; 0x22
 80100f2:	4682      	mov	sl, r0
 80100f4:	468b      	mov	fp, r1
 80100f6:	bf08      	it	eq
 80100f8:	6023      	streq	r3, [r4, #0]
 80100fa:	e62b      	b.n	800fd54 <_strtod_l+0x4a4>
 80100fc:	f04f 32ff 	mov.w	r2, #4294967295
 8010100:	fa02 f303 	lsl.w	r3, r2, r3
 8010104:	ea03 0a0a 	and.w	sl, r3, sl
 8010108:	e6e3      	b.n	800fed2 <_strtod_l+0x622>
 801010a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801010e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8010112:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8010116:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801011a:	fa01 f308 	lsl.w	r3, r1, r8
 801011e:	9308      	str	r3, [sp, #32]
 8010120:	910d      	str	r1, [sp, #52]	; 0x34
 8010122:	e746      	b.n	800ffb2 <_strtod_l+0x702>
 8010124:	2300      	movs	r3, #0
 8010126:	9308      	str	r3, [sp, #32]
 8010128:	2301      	movs	r3, #1
 801012a:	930d      	str	r3, [sp, #52]	; 0x34
 801012c:	e741      	b.n	800ffb2 <_strtod_l+0x702>
 801012e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010130:	4642      	mov	r2, r8
 8010132:	4620      	mov	r0, r4
 8010134:	f001 fee6 	bl	8011f04 <__lshift>
 8010138:	9018      	str	r0, [sp, #96]	; 0x60
 801013a:	2800      	cmp	r0, #0
 801013c:	f47f af6b 	bne.w	8010016 <_strtod_l+0x766>
 8010140:	e5fe      	b.n	800fd40 <_strtod_l+0x490>
 8010142:	465f      	mov	r7, fp
 8010144:	d16e      	bne.n	8010224 <_strtod_l+0x974>
 8010146:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010148:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801014c:	b342      	cbz	r2, 80101a0 <_strtod_l+0x8f0>
 801014e:	4a32      	ldr	r2, [pc, #200]	; (8010218 <_strtod_l+0x968>)
 8010150:	4293      	cmp	r3, r2
 8010152:	d128      	bne.n	80101a6 <_strtod_l+0x8f6>
 8010154:	9b04      	ldr	r3, [sp, #16]
 8010156:	4651      	mov	r1, sl
 8010158:	b1eb      	cbz	r3, 8010196 <_strtod_l+0x8e6>
 801015a:	4b2d      	ldr	r3, [pc, #180]	; (8010210 <_strtod_l+0x960>)
 801015c:	403b      	ands	r3, r7
 801015e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010162:	f04f 32ff 	mov.w	r2, #4294967295
 8010166:	d819      	bhi.n	801019c <_strtod_l+0x8ec>
 8010168:	0d1b      	lsrs	r3, r3, #20
 801016a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801016e:	fa02 f303 	lsl.w	r3, r2, r3
 8010172:	4299      	cmp	r1, r3
 8010174:	d117      	bne.n	80101a6 <_strtod_l+0x8f6>
 8010176:	4b29      	ldr	r3, [pc, #164]	; (801021c <_strtod_l+0x96c>)
 8010178:	429f      	cmp	r7, r3
 801017a:	d102      	bne.n	8010182 <_strtod_l+0x8d2>
 801017c:	3101      	adds	r1, #1
 801017e:	f43f addf 	beq.w	800fd40 <_strtod_l+0x490>
 8010182:	4b23      	ldr	r3, [pc, #140]	; (8010210 <_strtod_l+0x960>)
 8010184:	403b      	ands	r3, r7
 8010186:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801018a:	f04f 0a00 	mov.w	sl, #0
 801018e:	9b04      	ldr	r3, [sp, #16]
 8010190:	2b00      	cmp	r3, #0
 8010192:	d1a4      	bne.n	80100de <_strtod_l+0x82e>
 8010194:	e5de      	b.n	800fd54 <_strtod_l+0x4a4>
 8010196:	f04f 33ff 	mov.w	r3, #4294967295
 801019a:	e7ea      	b.n	8010172 <_strtod_l+0x8c2>
 801019c:	4613      	mov	r3, r2
 801019e:	e7e8      	b.n	8010172 <_strtod_l+0x8c2>
 80101a0:	ea53 030a 	orrs.w	r3, r3, sl
 80101a4:	d08c      	beq.n	80100c0 <_strtod_l+0x810>
 80101a6:	9b08      	ldr	r3, [sp, #32]
 80101a8:	b1db      	cbz	r3, 80101e2 <_strtod_l+0x932>
 80101aa:	423b      	tst	r3, r7
 80101ac:	d0ef      	beq.n	801018e <_strtod_l+0x8de>
 80101ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80101b0:	9a04      	ldr	r2, [sp, #16]
 80101b2:	4650      	mov	r0, sl
 80101b4:	4659      	mov	r1, fp
 80101b6:	b1c3      	cbz	r3, 80101ea <_strtod_l+0x93a>
 80101b8:	f7ff fb5b 	bl	800f872 <sulp>
 80101bc:	4602      	mov	r2, r0
 80101be:	460b      	mov	r3, r1
 80101c0:	ec51 0b18 	vmov	r0, r1, d8
 80101c4:	f7f0 f892 	bl	80002ec <__adddf3>
 80101c8:	4682      	mov	sl, r0
 80101ca:	468b      	mov	fp, r1
 80101cc:	e7df      	b.n	801018e <_strtod_l+0x8de>
 80101ce:	4013      	ands	r3, r2
 80101d0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80101d4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80101d8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80101dc:	f04f 3aff 	mov.w	sl, #4294967295
 80101e0:	e7d5      	b.n	801018e <_strtod_l+0x8de>
 80101e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80101e4:	ea13 0f0a 	tst.w	r3, sl
 80101e8:	e7e0      	b.n	80101ac <_strtod_l+0x8fc>
 80101ea:	f7ff fb42 	bl	800f872 <sulp>
 80101ee:	4602      	mov	r2, r0
 80101f0:	460b      	mov	r3, r1
 80101f2:	ec51 0b18 	vmov	r0, r1, d8
 80101f6:	f7f0 f877 	bl	80002e8 <__aeabi_dsub>
 80101fa:	2200      	movs	r2, #0
 80101fc:	2300      	movs	r3, #0
 80101fe:	4682      	mov	sl, r0
 8010200:	468b      	mov	fp, r1
 8010202:	f7f0 fc91 	bl	8000b28 <__aeabi_dcmpeq>
 8010206:	2800      	cmp	r0, #0
 8010208:	d0c1      	beq.n	801018e <_strtod_l+0x8de>
 801020a:	e611      	b.n	800fe30 <_strtod_l+0x580>
 801020c:	fffffc02 	.word	0xfffffc02
 8010210:	7ff00000 	.word	0x7ff00000
 8010214:	39500000 	.word	0x39500000
 8010218:	000fffff 	.word	0x000fffff
 801021c:	7fefffff 	.word	0x7fefffff
 8010220:	08013ef8 	.word	0x08013ef8
 8010224:	4631      	mov	r1, r6
 8010226:	4628      	mov	r0, r5
 8010228:	f002 f85a 	bl	80122e0 <__ratio>
 801022c:	ec59 8b10 	vmov	r8, r9, d0
 8010230:	ee10 0a10 	vmov	r0, s0
 8010234:	2200      	movs	r2, #0
 8010236:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801023a:	4649      	mov	r1, r9
 801023c:	f7f0 fc88 	bl	8000b50 <__aeabi_dcmple>
 8010240:	2800      	cmp	r0, #0
 8010242:	d07a      	beq.n	801033a <_strtod_l+0xa8a>
 8010244:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010246:	2b00      	cmp	r3, #0
 8010248:	d04a      	beq.n	80102e0 <_strtod_l+0xa30>
 801024a:	4b95      	ldr	r3, [pc, #596]	; (80104a0 <_strtod_l+0xbf0>)
 801024c:	2200      	movs	r2, #0
 801024e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010252:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80104a0 <_strtod_l+0xbf0>
 8010256:	f04f 0800 	mov.w	r8, #0
 801025a:	4b92      	ldr	r3, [pc, #584]	; (80104a4 <_strtod_l+0xbf4>)
 801025c:	403b      	ands	r3, r7
 801025e:	930d      	str	r3, [sp, #52]	; 0x34
 8010260:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010262:	4b91      	ldr	r3, [pc, #580]	; (80104a8 <_strtod_l+0xbf8>)
 8010264:	429a      	cmp	r2, r3
 8010266:	f040 80b0 	bne.w	80103ca <_strtod_l+0xb1a>
 801026a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801026e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8010272:	ec4b ab10 	vmov	d0, sl, fp
 8010276:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801027a:	f001 ff59 	bl	8012130 <__ulp>
 801027e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010282:	ec53 2b10 	vmov	r2, r3, d0
 8010286:	f7f0 f9e7 	bl	8000658 <__aeabi_dmul>
 801028a:	4652      	mov	r2, sl
 801028c:	465b      	mov	r3, fp
 801028e:	f7f0 f82d 	bl	80002ec <__adddf3>
 8010292:	460b      	mov	r3, r1
 8010294:	4983      	ldr	r1, [pc, #524]	; (80104a4 <_strtod_l+0xbf4>)
 8010296:	4a85      	ldr	r2, [pc, #532]	; (80104ac <_strtod_l+0xbfc>)
 8010298:	4019      	ands	r1, r3
 801029a:	4291      	cmp	r1, r2
 801029c:	4682      	mov	sl, r0
 801029e:	d960      	bls.n	8010362 <_strtod_l+0xab2>
 80102a0:	ee18 3a90 	vmov	r3, s17
 80102a4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80102a8:	4293      	cmp	r3, r2
 80102aa:	d104      	bne.n	80102b6 <_strtod_l+0xa06>
 80102ac:	ee18 3a10 	vmov	r3, s16
 80102b0:	3301      	adds	r3, #1
 80102b2:	f43f ad45 	beq.w	800fd40 <_strtod_l+0x490>
 80102b6:	f8df b200 	ldr.w	fp, [pc, #512]	; 80104b8 <_strtod_l+0xc08>
 80102ba:	f04f 3aff 	mov.w	sl, #4294967295
 80102be:	9918      	ldr	r1, [sp, #96]	; 0x60
 80102c0:	4620      	mov	r0, r4
 80102c2:	f001 fc03 	bl	8011acc <_Bfree>
 80102c6:	9905      	ldr	r1, [sp, #20]
 80102c8:	4620      	mov	r0, r4
 80102ca:	f001 fbff 	bl	8011acc <_Bfree>
 80102ce:	4631      	mov	r1, r6
 80102d0:	4620      	mov	r0, r4
 80102d2:	f001 fbfb 	bl	8011acc <_Bfree>
 80102d6:	4629      	mov	r1, r5
 80102d8:	4620      	mov	r0, r4
 80102da:	f001 fbf7 	bl	8011acc <_Bfree>
 80102de:	e61a      	b.n	800ff16 <_strtod_l+0x666>
 80102e0:	f1ba 0f00 	cmp.w	sl, #0
 80102e4:	d11b      	bne.n	801031e <_strtod_l+0xa6e>
 80102e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80102ea:	b9f3      	cbnz	r3, 801032a <_strtod_l+0xa7a>
 80102ec:	4b6c      	ldr	r3, [pc, #432]	; (80104a0 <_strtod_l+0xbf0>)
 80102ee:	2200      	movs	r2, #0
 80102f0:	4640      	mov	r0, r8
 80102f2:	4649      	mov	r1, r9
 80102f4:	f7f0 fc22 	bl	8000b3c <__aeabi_dcmplt>
 80102f8:	b9d0      	cbnz	r0, 8010330 <_strtod_l+0xa80>
 80102fa:	4640      	mov	r0, r8
 80102fc:	4649      	mov	r1, r9
 80102fe:	4b6c      	ldr	r3, [pc, #432]	; (80104b0 <_strtod_l+0xc00>)
 8010300:	2200      	movs	r2, #0
 8010302:	f7f0 f9a9 	bl	8000658 <__aeabi_dmul>
 8010306:	4680      	mov	r8, r0
 8010308:	4689      	mov	r9, r1
 801030a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801030e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8010312:	9315      	str	r3, [sp, #84]	; 0x54
 8010314:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8010318:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801031c:	e79d      	b.n	801025a <_strtod_l+0x9aa>
 801031e:	f1ba 0f01 	cmp.w	sl, #1
 8010322:	d102      	bne.n	801032a <_strtod_l+0xa7a>
 8010324:	2f00      	cmp	r7, #0
 8010326:	f43f ad83 	beq.w	800fe30 <_strtod_l+0x580>
 801032a:	4b62      	ldr	r3, [pc, #392]	; (80104b4 <_strtod_l+0xc04>)
 801032c:	2200      	movs	r2, #0
 801032e:	e78e      	b.n	801024e <_strtod_l+0x99e>
 8010330:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80104b0 <_strtod_l+0xc00>
 8010334:	f04f 0800 	mov.w	r8, #0
 8010338:	e7e7      	b.n	801030a <_strtod_l+0xa5a>
 801033a:	4b5d      	ldr	r3, [pc, #372]	; (80104b0 <_strtod_l+0xc00>)
 801033c:	4640      	mov	r0, r8
 801033e:	4649      	mov	r1, r9
 8010340:	2200      	movs	r2, #0
 8010342:	f7f0 f989 	bl	8000658 <__aeabi_dmul>
 8010346:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010348:	4680      	mov	r8, r0
 801034a:	4689      	mov	r9, r1
 801034c:	b933      	cbnz	r3, 801035c <_strtod_l+0xaac>
 801034e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010352:	900e      	str	r0, [sp, #56]	; 0x38
 8010354:	930f      	str	r3, [sp, #60]	; 0x3c
 8010356:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801035a:	e7dd      	b.n	8010318 <_strtod_l+0xa68>
 801035c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8010360:	e7f9      	b.n	8010356 <_strtod_l+0xaa6>
 8010362:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8010366:	9b04      	ldr	r3, [sp, #16]
 8010368:	2b00      	cmp	r3, #0
 801036a:	d1a8      	bne.n	80102be <_strtod_l+0xa0e>
 801036c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010370:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010372:	0d1b      	lsrs	r3, r3, #20
 8010374:	051b      	lsls	r3, r3, #20
 8010376:	429a      	cmp	r2, r3
 8010378:	d1a1      	bne.n	80102be <_strtod_l+0xa0e>
 801037a:	4640      	mov	r0, r8
 801037c:	4649      	mov	r1, r9
 801037e:	f7f0 fccb 	bl	8000d18 <__aeabi_d2lz>
 8010382:	f7f0 f93b 	bl	80005fc <__aeabi_l2d>
 8010386:	4602      	mov	r2, r0
 8010388:	460b      	mov	r3, r1
 801038a:	4640      	mov	r0, r8
 801038c:	4649      	mov	r1, r9
 801038e:	f7ef ffab 	bl	80002e8 <__aeabi_dsub>
 8010392:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010394:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010398:	ea43 030a 	orr.w	r3, r3, sl
 801039c:	4313      	orrs	r3, r2
 801039e:	4680      	mov	r8, r0
 80103a0:	4689      	mov	r9, r1
 80103a2:	d055      	beq.n	8010450 <_strtod_l+0xba0>
 80103a4:	a336      	add	r3, pc, #216	; (adr r3, 8010480 <_strtod_l+0xbd0>)
 80103a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103aa:	f7f0 fbc7 	bl	8000b3c <__aeabi_dcmplt>
 80103ae:	2800      	cmp	r0, #0
 80103b0:	f47f acd0 	bne.w	800fd54 <_strtod_l+0x4a4>
 80103b4:	a334      	add	r3, pc, #208	; (adr r3, 8010488 <_strtod_l+0xbd8>)
 80103b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103ba:	4640      	mov	r0, r8
 80103bc:	4649      	mov	r1, r9
 80103be:	f7f0 fbdb 	bl	8000b78 <__aeabi_dcmpgt>
 80103c2:	2800      	cmp	r0, #0
 80103c4:	f43f af7b 	beq.w	80102be <_strtod_l+0xa0e>
 80103c8:	e4c4      	b.n	800fd54 <_strtod_l+0x4a4>
 80103ca:	9b04      	ldr	r3, [sp, #16]
 80103cc:	b333      	cbz	r3, 801041c <_strtod_l+0xb6c>
 80103ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80103d0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80103d4:	d822      	bhi.n	801041c <_strtod_l+0xb6c>
 80103d6:	a32e      	add	r3, pc, #184	; (adr r3, 8010490 <_strtod_l+0xbe0>)
 80103d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103dc:	4640      	mov	r0, r8
 80103de:	4649      	mov	r1, r9
 80103e0:	f7f0 fbb6 	bl	8000b50 <__aeabi_dcmple>
 80103e4:	b1a0      	cbz	r0, 8010410 <_strtod_l+0xb60>
 80103e6:	4649      	mov	r1, r9
 80103e8:	4640      	mov	r0, r8
 80103ea:	f7f0 fc0d 	bl	8000c08 <__aeabi_d2uiz>
 80103ee:	2801      	cmp	r0, #1
 80103f0:	bf38      	it	cc
 80103f2:	2001      	movcc	r0, #1
 80103f4:	f7f0 f8b6 	bl	8000564 <__aeabi_ui2d>
 80103f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80103fa:	4680      	mov	r8, r0
 80103fc:	4689      	mov	r9, r1
 80103fe:	bb23      	cbnz	r3, 801044a <_strtod_l+0xb9a>
 8010400:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010404:	9010      	str	r0, [sp, #64]	; 0x40
 8010406:	9311      	str	r3, [sp, #68]	; 0x44
 8010408:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801040c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010410:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010412:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010414:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8010418:	1a9b      	subs	r3, r3, r2
 801041a:	9309      	str	r3, [sp, #36]	; 0x24
 801041c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010420:	eeb0 0a48 	vmov.f32	s0, s16
 8010424:	eef0 0a68 	vmov.f32	s1, s17
 8010428:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801042c:	f001 fe80 	bl	8012130 <__ulp>
 8010430:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010434:	ec53 2b10 	vmov	r2, r3, d0
 8010438:	f7f0 f90e 	bl	8000658 <__aeabi_dmul>
 801043c:	ec53 2b18 	vmov	r2, r3, d8
 8010440:	f7ef ff54 	bl	80002ec <__adddf3>
 8010444:	4682      	mov	sl, r0
 8010446:	468b      	mov	fp, r1
 8010448:	e78d      	b.n	8010366 <_strtod_l+0xab6>
 801044a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 801044e:	e7db      	b.n	8010408 <_strtod_l+0xb58>
 8010450:	a311      	add	r3, pc, #68	; (adr r3, 8010498 <_strtod_l+0xbe8>)
 8010452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010456:	f7f0 fb71 	bl	8000b3c <__aeabi_dcmplt>
 801045a:	e7b2      	b.n	80103c2 <_strtod_l+0xb12>
 801045c:	2300      	movs	r3, #0
 801045e:	930a      	str	r3, [sp, #40]	; 0x28
 8010460:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010462:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010464:	6013      	str	r3, [r2, #0]
 8010466:	f7ff ba6b 	b.w	800f940 <_strtod_l+0x90>
 801046a:	2a65      	cmp	r2, #101	; 0x65
 801046c:	f43f ab5f 	beq.w	800fb2e <_strtod_l+0x27e>
 8010470:	2a45      	cmp	r2, #69	; 0x45
 8010472:	f43f ab5c 	beq.w	800fb2e <_strtod_l+0x27e>
 8010476:	2301      	movs	r3, #1
 8010478:	f7ff bb94 	b.w	800fba4 <_strtod_l+0x2f4>
 801047c:	f3af 8000 	nop.w
 8010480:	94a03595 	.word	0x94a03595
 8010484:	3fdfffff 	.word	0x3fdfffff
 8010488:	35afe535 	.word	0x35afe535
 801048c:	3fe00000 	.word	0x3fe00000
 8010490:	ffc00000 	.word	0xffc00000
 8010494:	41dfffff 	.word	0x41dfffff
 8010498:	94a03595 	.word	0x94a03595
 801049c:	3fcfffff 	.word	0x3fcfffff
 80104a0:	3ff00000 	.word	0x3ff00000
 80104a4:	7ff00000 	.word	0x7ff00000
 80104a8:	7fe00000 	.word	0x7fe00000
 80104ac:	7c9fffff 	.word	0x7c9fffff
 80104b0:	3fe00000 	.word	0x3fe00000
 80104b4:	bff00000 	.word	0xbff00000
 80104b8:	7fefffff 	.word	0x7fefffff

080104bc <_strtod_r>:
 80104bc:	4b01      	ldr	r3, [pc, #4]	; (80104c4 <_strtod_r+0x8>)
 80104be:	f7ff b9f7 	b.w	800f8b0 <_strtod_l>
 80104c2:	bf00      	nop
 80104c4:	20000330 	.word	0x20000330

080104c8 <_strtol_l.constprop.0>:
 80104c8:	2b01      	cmp	r3, #1
 80104ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80104ce:	d001      	beq.n	80104d4 <_strtol_l.constprop.0+0xc>
 80104d0:	2b24      	cmp	r3, #36	; 0x24
 80104d2:	d906      	bls.n	80104e2 <_strtol_l.constprop.0+0x1a>
 80104d4:	f7fe fa60 	bl	800e998 <__errno>
 80104d8:	2316      	movs	r3, #22
 80104da:	6003      	str	r3, [r0, #0]
 80104dc:	2000      	movs	r0, #0
 80104de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104e2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80105c8 <_strtol_l.constprop.0+0x100>
 80104e6:	460d      	mov	r5, r1
 80104e8:	462e      	mov	r6, r5
 80104ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 80104ee:	f814 700c 	ldrb.w	r7, [r4, ip]
 80104f2:	f017 0708 	ands.w	r7, r7, #8
 80104f6:	d1f7      	bne.n	80104e8 <_strtol_l.constprop.0+0x20>
 80104f8:	2c2d      	cmp	r4, #45	; 0x2d
 80104fa:	d132      	bne.n	8010562 <_strtol_l.constprop.0+0x9a>
 80104fc:	782c      	ldrb	r4, [r5, #0]
 80104fe:	2701      	movs	r7, #1
 8010500:	1cb5      	adds	r5, r6, #2
 8010502:	2b00      	cmp	r3, #0
 8010504:	d05b      	beq.n	80105be <_strtol_l.constprop.0+0xf6>
 8010506:	2b10      	cmp	r3, #16
 8010508:	d109      	bne.n	801051e <_strtol_l.constprop.0+0x56>
 801050a:	2c30      	cmp	r4, #48	; 0x30
 801050c:	d107      	bne.n	801051e <_strtol_l.constprop.0+0x56>
 801050e:	782c      	ldrb	r4, [r5, #0]
 8010510:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8010514:	2c58      	cmp	r4, #88	; 0x58
 8010516:	d14d      	bne.n	80105b4 <_strtol_l.constprop.0+0xec>
 8010518:	786c      	ldrb	r4, [r5, #1]
 801051a:	2310      	movs	r3, #16
 801051c:	3502      	adds	r5, #2
 801051e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8010522:	f108 38ff 	add.w	r8, r8, #4294967295
 8010526:	f04f 0c00 	mov.w	ip, #0
 801052a:	fbb8 f9f3 	udiv	r9, r8, r3
 801052e:	4666      	mov	r6, ip
 8010530:	fb03 8a19 	mls	sl, r3, r9, r8
 8010534:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8010538:	f1be 0f09 	cmp.w	lr, #9
 801053c:	d816      	bhi.n	801056c <_strtol_l.constprop.0+0xa4>
 801053e:	4674      	mov	r4, lr
 8010540:	42a3      	cmp	r3, r4
 8010542:	dd24      	ble.n	801058e <_strtol_l.constprop.0+0xc6>
 8010544:	f1bc 0f00 	cmp.w	ip, #0
 8010548:	db1e      	blt.n	8010588 <_strtol_l.constprop.0+0xc0>
 801054a:	45b1      	cmp	r9, r6
 801054c:	d31c      	bcc.n	8010588 <_strtol_l.constprop.0+0xc0>
 801054e:	d101      	bne.n	8010554 <_strtol_l.constprop.0+0x8c>
 8010550:	45a2      	cmp	sl, r4
 8010552:	db19      	blt.n	8010588 <_strtol_l.constprop.0+0xc0>
 8010554:	fb06 4603 	mla	r6, r6, r3, r4
 8010558:	f04f 0c01 	mov.w	ip, #1
 801055c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010560:	e7e8      	b.n	8010534 <_strtol_l.constprop.0+0x6c>
 8010562:	2c2b      	cmp	r4, #43	; 0x2b
 8010564:	bf04      	itt	eq
 8010566:	782c      	ldrbeq	r4, [r5, #0]
 8010568:	1cb5      	addeq	r5, r6, #2
 801056a:	e7ca      	b.n	8010502 <_strtol_l.constprop.0+0x3a>
 801056c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8010570:	f1be 0f19 	cmp.w	lr, #25
 8010574:	d801      	bhi.n	801057a <_strtol_l.constprop.0+0xb2>
 8010576:	3c37      	subs	r4, #55	; 0x37
 8010578:	e7e2      	b.n	8010540 <_strtol_l.constprop.0+0x78>
 801057a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801057e:	f1be 0f19 	cmp.w	lr, #25
 8010582:	d804      	bhi.n	801058e <_strtol_l.constprop.0+0xc6>
 8010584:	3c57      	subs	r4, #87	; 0x57
 8010586:	e7db      	b.n	8010540 <_strtol_l.constprop.0+0x78>
 8010588:	f04f 3cff 	mov.w	ip, #4294967295
 801058c:	e7e6      	b.n	801055c <_strtol_l.constprop.0+0x94>
 801058e:	f1bc 0f00 	cmp.w	ip, #0
 8010592:	da05      	bge.n	80105a0 <_strtol_l.constprop.0+0xd8>
 8010594:	2322      	movs	r3, #34	; 0x22
 8010596:	6003      	str	r3, [r0, #0]
 8010598:	4646      	mov	r6, r8
 801059a:	b942      	cbnz	r2, 80105ae <_strtol_l.constprop.0+0xe6>
 801059c:	4630      	mov	r0, r6
 801059e:	e79e      	b.n	80104de <_strtol_l.constprop.0+0x16>
 80105a0:	b107      	cbz	r7, 80105a4 <_strtol_l.constprop.0+0xdc>
 80105a2:	4276      	negs	r6, r6
 80105a4:	2a00      	cmp	r2, #0
 80105a6:	d0f9      	beq.n	801059c <_strtol_l.constprop.0+0xd4>
 80105a8:	f1bc 0f00 	cmp.w	ip, #0
 80105ac:	d000      	beq.n	80105b0 <_strtol_l.constprop.0+0xe8>
 80105ae:	1e69      	subs	r1, r5, #1
 80105b0:	6011      	str	r1, [r2, #0]
 80105b2:	e7f3      	b.n	801059c <_strtol_l.constprop.0+0xd4>
 80105b4:	2430      	movs	r4, #48	; 0x30
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d1b1      	bne.n	801051e <_strtol_l.constprop.0+0x56>
 80105ba:	2308      	movs	r3, #8
 80105bc:	e7af      	b.n	801051e <_strtol_l.constprop.0+0x56>
 80105be:	2c30      	cmp	r4, #48	; 0x30
 80105c0:	d0a5      	beq.n	801050e <_strtol_l.constprop.0+0x46>
 80105c2:	230a      	movs	r3, #10
 80105c4:	e7ab      	b.n	801051e <_strtol_l.constprop.0+0x56>
 80105c6:	bf00      	nop
 80105c8:	08013f21 	.word	0x08013f21

080105cc <_strtol_r>:
 80105cc:	f7ff bf7c 	b.w	80104c8 <_strtol_l.constprop.0>

080105d0 <_write_r>:
 80105d0:	b538      	push	{r3, r4, r5, lr}
 80105d2:	4d07      	ldr	r5, [pc, #28]	; (80105f0 <_write_r+0x20>)
 80105d4:	4604      	mov	r4, r0
 80105d6:	4608      	mov	r0, r1
 80105d8:	4611      	mov	r1, r2
 80105da:	2200      	movs	r2, #0
 80105dc:	602a      	str	r2, [r5, #0]
 80105de:	461a      	mov	r2, r3
 80105e0:	f7f1 fe49 	bl	8002276 <_write>
 80105e4:	1c43      	adds	r3, r0, #1
 80105e6:	d102      	bne.n	80105ee <_write_r+0x1e>
 80105e8:	682b      	ldr	r3, [r5, #0]
 80105ea:	b103      	cbz	r3, 80105ee <_write_r+0x1e>
 80105ec:	6023      	str	r3, [r4, #0]
 80105ee:	bd38      	pop	{r3, r4, r5, pc}
 80105f0:	20000770 	.word	0x20000770

080105f4 <_close_r>:
 80105f4:	b538      	push	{r3, r4, r5, lr}
 80105f6:	4d06      	ldr	r5, [pc, #24]	; (8010610 <_close_r+0x1c>)
 80105f8:	2300      	movs	r3, #0
 80105fa:	4604      	mov	r4, r0
 80105fc:	4608      	mov	r0, r1
 80105fe:	602b      	str	r3, [r5, #0]
 8010600:	f7f1 fe55 	bl	80022ae <_close>
 8010604:	1c43      	adds	r3, r0, #1
 8010606:	d102      	bne.n	801060e <_close_r+0x1a>
 8010608:	682b      	ldr	r3, [r5, #0]
 801060a:	b103      	cbz	r3, 801060e <_close_r+0x1a>
 801060c:	6023      	str	r3, [r4, #0]
 801060e:	bd38      	pop	{r3, r4, r5, pc}
 8010610:	20000770 	.word	0x20000770

08010614 <quorem>:
 8010614:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010618:	6903      	ldr	r3, [r0, #16]
 801061a:	690c      	ldr	r4, [r1, #16]
 801061c:	42a3      	cmp	r3, r4
 801061e:	4607      	mov	r7, r0
 8010620:	f2c0 8081 	blt.w	8010726 <quorem+0x112>
 8010624:	3c01      	subs	r4, #1
 8010626:	f101 0814 	add.w	r8, r1, #20
 801062a:	f100 0514 	add.w	r5, r0, #20
 801062e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010632:	9301      	str	r3, [sp, #4]
 8010634:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010638:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801063c:	3301      	adds	r3, #1
 801063e:	429a      	cmp	r2, r3
 8010640:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010644:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010648:	fbb2 f6f3 	udiv	r6, r2, r3
 801064c:	d331      	bcc.n	80106b2 <quorem+0x9e>
 801064e:	f04f 0e00 	mov.w	lr, #0
 8010652:	4640      	mov	r0, r8
 8010654:	46ac      	mov	ip, r5
 8010656:	46f2      	mov	sl, lr
 8010658:	f850 2b04 	ldr.w	r2, [r0], #4
 801065c:	b293      	uxth	r3, r2
 801065e:	fb06 e303 	mla	r3, r6, r3, lr
 8010662:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010666:	b29b      	uxth	r3, r3
 8010668:	ebaa 0303 	sub.w	r3, sl, r3
 801066c:	f8dc a000 	ldr.w	sl, [ip]
 8010670:	0c12      	lsrs	r2, r2, #16
 8010672:	fa13 f38a 	uxtah	r3, r3, sl
 8010676:	fb06 e202 	mla	r2, r6, r2, lr
 801067a:	9300      	str	r3, [sp, #0]
 801067c:	9b00      	ldr	r3, [sp, #0]
 801067e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010682:	b292      	uxth	r2, r2
 8010684:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010688:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801068c:	f8bd 3000 	ldrh.w	r3, [sp]
 8010690:	4581      	cmp	r9, r0
 8010692:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010696:	f84c 3b04 	str.w	r3, [ip], #4
 801069a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801069e:	d2db      	bcs.n	8010658 <quorem+0x44>
 80106a0:	f855 300b 	ldr.w	r3, [r5, fp]
 80106a4:	b92b      	cbnz	r3, 80106b2 <quorem+0x9e>
 80106a6:	9b01      	ldr	r3, [sp, #4]
 80106a8:	3b04      	subs	r3, #4
 80106aa:	429d      	cmp	r5, r3
 80106ac:	461a      	mov	r2, r3
 80106ae:	d32e      	bcc.n	801070e <quorem+0xfa>
 80106b0:	613c      	str	r4, [r7, #16]
 80106b2:	4638      	mov	r0, r7
 80106b4:	f001 fc96 	bl	8011fe4 <__mcmp>
 80106b8:	2800      	cmp	r0, #0
 80106ba:	db24      	blt.n	8010706 <quorem+0xf2>
 80106bc:	3601      	adds	r6, #1
 80106be:	4628      	mov	r0, r5
 80106c0:	f04f 0c00 	mov.w	ip, #0
 80106c4:	f858 2b04 	ldr.w	r2, [r8], #4
 80106c8:	f8d0 e000 	ldr.w	lr, [r0]
 80106cc:	b293      	uxth	r3, r2
 80106ce:	ebac 0303 	sub.w	r3, ip, r3
 80106d2:	0c12      	lsrs	r2, r2, #16
 80106d4:	fa13 f38e 	uxtah	r3, r3, lr
 80106d8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80106dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80106e0:	b29b      	uxth	r3, r3
 80106e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80106e6:	45c1      	cmp	r9, r8
 80106e8:	f840 3b04 	str.w	r3, [r0], #4
 80106ec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80106f0:	d2e8      	bcs.n	80106c4 <quorem+0xb0>
 80106f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80106f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80106fa:	b922      	cbnz	r2, 8010706 <quorem+0xf2>
 80106fc:	3b04      	subs	r3, #4
 80106fe:	429d      	cmp	r5, r3
 8010700:	461a      	mov	r2, r3
 8010702:	d30a      	bcc.n	801071a <quorem+0x106>
 8010704:	613c      	str	r4, [r7, #16]
 8010706:	4630      	mov	r0, r6
 8010708:	b003      	add	sp, #12
 801070a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801070e:	6812      	ldr	r2, [r2, #0]
 8010710:	3b04      	subs	r3, #4
 8010712:	2a00      	cmp	r2, #0
 8010714:	d1cc      	bne.n	80106b0 <quorem+0x9c>
 8010716:	3c01      	subs	r4, #1
 8010718:	e7c7      	b.n	80106aa <quorem+0x96>
 801071a:	6812      	ldr	r2, [r2, #0]
 801071c:	3b04      	subs	r3, #4
 801071e:	2a00      	cmp	r2, #0
 8010720:	d1f0      	bne.n	8010704 <quorem+0xf0>
 8010722:	3c01      	subs	r4, #1
 8010724:	e7eb      	b.n	80106fe <quorem+0xea>
 8010726:	2000      	movs	r0, #0
 8010728:	e7ee      	b.n	8010708 <quorem+0xf4>
 801072a:	0000      	movs	r0, r0
 801072c:	0000      	movs	r0, r0
	...

08010730 <_dtoa_r>:
 8010730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010734:	ed2d 8b04 	vpush	{d8-d9}
 8010738:	ec57 6b10 	vmov	r6, r7, d0
 801073c:	b093      	sub	sp, #76	; 0x4c
 801073e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010740:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010744:	9106      	str	r1, [sp, #24]
 8010746:	ee10 aa10 	vmov	sl, s0
 801074a:	4604      	mov	r4, r0
 801074c:	9209      	str	r2, [sp, #36]	; 0x24
 801074e:	930c      	str	r3, [sp, #48]	; 0x30
 8010750:	46bb      	mov	fp, r7
 8010752:	b975      	cbnz	r5, 8010772 <_dtoa_r+0x42>
 8010754:	2010      	movs	r0, #16
 8010756:	f001 f95f 	bl	8011a18 <malloc>
 801075a:	4602      	mov	r2, r0
 801075c:	6260      	str	r0, [r4, #36]	; 0x24
 801075e:	b920      	cbnz	r0, 801076a <_dtoa_r+0x3a>
 8010760:	4ba7      	ldr	r3, [pc, #668]	; (8010a00 <_dtoa_r+0x2d0>)
 8010762:	21ea      	movs	r1, #234	; 0xea
 8010764:	48a7      	ldr	r0, [pc, #668]	; (8010a04 <_dtoa_r+0x2d4>)
 8010766:	f002 fcc7 	bl	80130f8 <__assert_func>
 801076a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801076e:	6005      	str	r5, [r0, #0]
 8010770:	60c5      	str	r5, [r0, #12]
 8010772:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010774:	6819      	ldr	r1, [r3, #0]
 8010776:	b151      	cbz	r1, 801078e <_dtoa_r+0x5e>
 8010778:	685a      	ldr	r2, [r3, #4]
 801077a:	604a      	str	r2, [r1, #4]
 801077c:	2301      	movs	r3, #1
 801077e:	4093      	lsls	r3, r2
 8010780:	608b      	str	r3, [r1, #8]
 8010782:	4620      	mov	r0, r4
 8010784:	f001 f9a2 	bl	8011acc <_Bfree>
 8010788:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801078a:	2200      	movs	r2, #0
 801078c:	601a      	str	r2, [r3, #0]
 801078e:	1e3b      	subs	r3, r7, #0
 8010790:	bfaa      	itet	ge
 8010792:	2300      	movge	r3, #0
 8010794:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8010798:	f8c8 3000 	strge.w	r3, [r8]
 801079c:	4b9a      	ldr	r3, [pc, #616]	; (8010a08 <_dtoa_r+0x2d8>)
 801079e:	bfbc      	itt	lt
 80107a0:	2201      	movlt	r2, #1
 80107a2:	f8c8 2000 	strlt.w	r2, [r8]
 80107a6:	ea33 030b 	bics.w	r3, r3, fp
 80107aa:	d11b      	bne.n	80107e4 <_dtoa_r+0xb4>
 80107ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80107ae:	f242 730f 	movw	r3, #9999	; 0x270f
 80107b2:	6013      	str	r3, [r2, #0]
 80107b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80107b8:	4333      	orrs	r3, r6
 80107ba:	f000 8592 	beq.w	80112e2 <_dtoa_r+0xbb2>
 80107be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80107c0:	b963      	cbnz	r3, 80107dc <_dtoa_r+0xac>
 80107c2:	4b92      	ldr	r3, [pc, #584]	; (8010a0c <_dtoa_r+0x2dc>)
 80107c4:	e022      	b.n	801080c <_dtoa_r+0xdc>
 80107c6:	4b92      	ldr	r3, [pc, #584]	; (8010a10 <_dtoa_r+0x2e0>)
 80107c8:	9301      	str	r3, [sp, #4]
 80107ca:	3308      	adds	r3, #8
 80107cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80107ce:	6013      	str	r3, [r2, #0]
 80107d0:	9801      	ldr	r0, [sp, #4]
 80107d2:	b013      	add	sp, #76	; 0x4c
 80107d4:	ecbd 8b04 	vpop	{d8-d9}
 80107d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107dc:	4b8b      	ldr	r3, [pc, #556]	; (8010a0c <_dtoa_r+0x2dc>)
 80107de:	9301      	str	r3, [sp, #4]
 80107e0:	3303      	adds	r3, #3
 80107e2:	e7f3      	b.n	80107cc <_dtoa_r+0x9c>
 80107e4:	2200      	movs	r2, #0
 80107e6:	2300      	movs	r3, #0
 80107e8:	4650      	mov	r0, sl
 80107ea:	4659      	mov	r1, fp
 80107ec:	f7f0 f99c 	bl	8000b28 <__aeabi_dcmpeq>
 80107f0:	ec4b ab19 	vmov	d9, sl, fp
 80107f4:	4680      	mov	r8, r0
 80107f6:	b158      	cbz	r0, 8010810 <_dtoa_r+0xe0>
 80107f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80107fa:	2301      	movs	r3, #1
 80107fc:	6013      	str	r3, [r2, #0]
 80107fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010800:	2b00      	cmp	r3, #0
 8010802:	f000 856b 	beq.w	80112dc <_dtoa_r+0xbac>
 8010806:	4883      	ldr	r0, [pc, #524]	; (8010a14 <_dtoa_r+0x2e4>)
 8010808:	6018      	str	r0, [r3, #0]
 801080a:	1e43      	subs	r3, r0, #1
 801080c:	9301      	str	r3, [sp, #4]
 801080e:	e7df      	b.n	80107d0 <_dtoa_r+0xa0>
 8010810:	ec4b ab10 	vmov	d0, sl, fp
 8010814:	aa10      	add	r2, sp, #64	; 0x40
 8010816:	a911      	add	r1, sp, #68	; 0x44
 8010818:	4620      	mov	r0, r4
 801081a:	f001 fd05 	bl	8012228 <__d2b>
 801081e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8010822:	ee08 0a10 	vmov	s16, r0
 8010826:	2d00      	cmp	r5, #0
 8010828:	f000 8084 	beq.w	8010934 <_dtoa_r+0x204>
 801082c:	ee19 3a90 	vmov	r3, s19
 8010830:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010834:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8010838:	4656      	mov	r6, sl
 801083a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801083e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010842:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8010846:	4b74      	ldr	r3, [pc, #464]	; (8010a18 <_dtoa_r+0x2e8>)
 8010848:	2200      	movs	r2, #0
 801084a:	4630      	mov	r0, r6
 801084c:	4639      	mov	r1, r7
 801084e:	f7ef fd4b 	bl	80002e8 <__aeabi_dsub>
 8010852:	a365      	add	r3, pc, #404	; (adr r3, 80109e8 <_dtoa_r+0x2b8>)
 8010854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010858:	f7ef fefe 	bl	8000658 <__aeabi_dmul>
 801085c:	a364      	add	r3, pc, #400	; (adr r3, 80109f0 <_dtoa_r+0x2c0>)
 801085e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010862:	f7ef fd43 	bl	80002ec <__adddf3>
 8010866:	4606      	mov	r6, r0
 8010868:	4628      	mov	r0, r5
 801086a:	460f      	mov	r7, r1
 801086c:	f7ef fe8a 	bl	8000584 <__aeabi_i2d>
 8010870:	a361      	add	r3, pc, #388	; (adr r3, 80109f8 <_dtoa_r+0x2c8>)
 8010872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010876:	f7ef feef 	bl	8000658 <__aeabi_dmul>
 801087a:	4602      	mov	r2, r0
 801087c:	460b      	mov	r3, r1
 801087e:	4630      	mov	r0, r6
 8010880:	4639      	mov	r1, r7
 8010882:	f7ef fd33 	bl	80002ec <__adddf3>
 8010886:	4606      	mov	r6, r0
 8010888:	460f      	mov	r7, r1
 801088a:	f7f0 f995 	bl	8000bb8 <__aeabi_d2iz>
 801088e:	2200      	movs	r2, #0
 8010890:	9000      	str	r0, [sp, #0]
 8010892:	2300      	movs	r3, #0
 8010894:	4630      	mov	r0, r6
 8010896:	4639      	mov	r1, r7
 8010898:	f7f0 f950 	bl	8000b3c <__aeabi_dcmplt>
 801089c:	b150      	cbz	r0, 80108b4 <_dtoa_r+0x184>
 801089e:	9800      	ldr	r0, [sp, #0]
 80108a0:	f7ef fe70 	bl	8000584 <__aeabi_i2d>
 80108a4:	4632      	mov	r2, r6
 80108a6:	463b      	mov	r3, r7
 80108a8:	f7f0 f93e 	bl	8000b28 <__aeabi_dcmpeq>
 80108ac:	b910      	cbnz	r0, 80108b4 <_dtoa_r+0x184>
 80108ae:	9b00      	ldr	r3, [sp, #0]
 80108b0:	3b01      	subs	r3, #1
 80108b2:	9300      	str	r3, [sp, #0]
 80108b4:	9b00      	ldr	r3, [sp, #0]
 80108b6:	2b16      	cmp	r3, #22
 80108b8:	d85a      	bhi.n	8010970 <_dtoa_r+0x240>
 80108ba:	9a00      	ldr	r2, [sp, #0]
 80108bc:	4b57      	ldr	r3, [pc, #348]	; (8010a1c <_dtoa_r+0x2ec>)
 80108be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80108c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108c6:	ec51 0b19 	vmov	r0, r1, d9
 80108ca:	f7f0 f937 	bl	8000b3c <__aeabi_dcmplt>
 80108ce:	2800      	cmp	r0, #0
 80108d0:	d050      	beq.n	8010974 <_dtoa_r+0x244>
 80108d2:	9b00      	ldr	r3, [sp, #0]
 80108d4:	3b01      	subs	r3, #1
 80108d6:	9300      	str	r3, [sp, #0]
 80108d8:	2300      	movs	r3, #0
 80108da:	930b      	str	r3, [sp, #44]	; 0x2c
 80108dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80108de:	1b5d      	subs	r5, r3, r5
 80108e0:	1e6b      	subs	r3, r5, #1
 80108e2:	9305      	str	r3, [sp, #20]
 80108e4:	bf45      	ittet	mi
 80108e6:	f1c5 0301 	rsbmi	r3, r5, #1
 80108ea:	9304      	strmi	r3, [sp, #16]
 80108ec:	2300      	movpl	r3, #0
 80108ee:	2300      	movmi	r3, #0
 80108f0:	bf4c      	ite	mi
 80108f2:	9305      	strmi	r3, [sp, #20]
 80108f4:	9304      	strpl	r3, [sp, #16]
 80108f6:	9b00      	ldr	r3, [sp, #0]
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	db3d      	blt.n	8010978 <_dtoa_r+0x248>
 80108fc:	9b05      	ldr	r3, [sp, #20]
 80108fe:	9a00      	ldr	r2, [sp, #0]
 8010900:	920a      	str	r2, [sp, #40]	; 0x28
 8010902:	4413      	add	r3, r2
 8010904:	9305      	str	r3, [sp, #20]
 8010906:	2300      	movs	r3, #0
 8010908:	9307      	str	r3, [sp, #28]
 801090a:	9b06      	ldr	r3, [sp, #24]
 801090c:	2b09      	cmp	r3, #9
 801090e:	f200 8089 	bhi.w	8010a24 <_dtoa_r+0x2f4>
 8010912:	2b05      	cmp	r3, #5
 8010914:	bfc4      	itt	gt
 8010916:	3b04      	subgt	r3, #4
 8010918:	9306      	strgt	r3, [sp, #24]
 801091a:	9b06      	ldr	r3, [sp, #24]
 801091c:	f1a3 0302 	sub.w	r3, r3, #2
 8010920:	bfcc      	ite	gt
 8010922:	2500      	movgt	r5, #0
 8010924:	2501      	movle	r5, #1
 8010926:	2b03      	cmp	r3, #3
 8010928:	f200 8087 	bhi.w	8010a3a <_dtoa_r+0x30a>
 801092c:	e8df f003 	tbb	[pc, r3]
 8010930:	59383a2d 	.word	0x59383a2d
 8010934:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010938:	441d      	add	r5, r3
 801093a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801093e:	2b20      	cmp	r3, #32
 8010940:	bfc1      	itttt	gt
 8010942:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010946:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801094a:	fa0b f303 	lslgt.w	r3, fp, r3
 801094e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010952:	bfda      	itte	le
 8010954:	f1c3 0320 	rsble	r3, r3, #32
 8010958:	fa06 f003 	lslle.w	r0, r6, r3
 801095c:	4318      	orrgt	r0, r3
 801095e:	f7ef fe01 	bl	8000564 <__aeabi_ui2d>
 8010962:	2301      	movs	r3, #1
 8010964:	4606      	mov	r6, r0
 8010966:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801096a:	3d01      	subs	r5, #1
 801096c:	930e      	str	r3, [sp, #56]	; 0x38
 801096e:	e76a      	b.n	8010846 <_dtoa_r+0x116>
 8010970:	2301      	movs	r3, #1
 8010972:	e7b2      	b.n	80108da <_dtoa_r+0x1aa>
 8010974:	900b      	str	r0, [sp, #44]	; 0x2c
 8010976:	e7b1      	b.n	80108dc <_dtoa_r+0x1ac>
 8010978:	9b04      	ldr	r3, [sp, #16]
 801097a:	9a00      	ldr	r2, [sp, #0]
 801097c:	1a9b      	subs	r3, r3, r2
 801097e:	9304      	str	r3, [sp, #16]
 8010980:	4253      	negs	r3, r2
 8010982:	9307      	str	r3, [sp, #28]
 8010984:	2300      	movs	r3, #0
 8010986:	930a      	str	r3, [sp, #40]	; 0x28
 8010988:	e7bf      	b.n	801090a <_dtoa_r+0x1da>
 801098a:	2300      	movs	r3, #0
 801098c:	9308      	str	r3, [sp, #32]
 801098e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010990:	2b00      	cmp	r3, #0
 8010992:	dc55      	bgt.n	8010a40 <_dtoa_r+0x310>
 8010994:	2301      	movs	r3, #1
 8010996:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801099a:	461a      	mov	r2, r3
 801099c:	9209      	str	r2, [sp, #36]	; 0x24
 801099e:	e00c      	b.n	80109ba <_dtoa_r+0x28a>
 80109a0:	2301      	movs	r3, #1
 80109a2:	e7f3      	b.n	801098c <_dtoa_r+0x25c>
 80109a4:	2300      	movs	r3, #0
 80109a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80109a8:	9308      	str	r3, [sp, #32]
 80109aa:	9b00      	ldr	r3, [sp, #0]
 80109ac:	4413      	add	r3, r2
 80109ae:	9302      	str	r3, [sp, #8]
 80109b0:	3301      	adds	r3, #1
 80109b2:	2b01      	cmp	r3, #1
 80109b4:	9303      	str	r3, [sp, #12]
 80109b6:	bfb8      	it	lt
 80109b8:	2301      	movlt	r3, #1
 80109ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80109bc:	2200      	movs	r2, #0
 80109be:	6042      	str	r2, [r0, #4]
 80109c0:	2204      	movs	r2, #4
 80109c2:	f102 0614 	add.w	r6, r2, #20
 80109c6:	429e      	cmp	r6, r3
 80109c8:	6841      	ldr	r1, [r0, #4]
 80109ca:	d93d      	bls.n	8010a48 <_dtoa_r+0x318>
 80109cc:	4620      	mov	r0, r4
 80109ce:	f001 f83d 	bl	8011a4c <_Balloc>
 80109d2:	9001      	str	r0, [sp, #4]
 80109d4:	2800      	cmp	r0, #0
 80109d6:	d13b      	bne.n	8010a50 <_dtoa_r+0x320>
 80109d8:	4b11      	ldr	r3, [pc, #68]	; (8010a20 <_dtoa_r+0x2f0>)
 80109da:	4602      	mov	r2, r0
 80109dc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80109e0:	e6c0      	b.n	8010764 <_dtoa_r+0x34>
 80109e2:	2301      	movs	r3, #1
 80109e4:	e7df      	b.n	80109a6 <_dtoa_r+0x276>
 80109e6:	bf00      	nop
 80109e8:	636f4361 	.word	0x636f4361
 80109ec:	3fd287a7 	.word	0x3fd287a7
 80109f0:	8b60c8b3 	.word	0x8b60c8b3
 80109f4:	3fc68a28 	.word	0x3fc68a28
 80109f8:	509f79fb 	.word	0x509f79fb
 80109fc:	3fd34413 	.word	0x3fd34413
 8010a00:	0801402e 	.word	0x0801402e
 8010a04:	08014045 	.word	0x08014045
 8010a08:	7ff00000 	.word	0x7ff00000
 8010a0c:	0801402a 	.word	0x0801402a
 8010a10:	08014021 	.word	0x08014021
 8010a14:	0801429a 	.word	0x0801429a
 8010a18:	3ff80000 	.word	0x3ff80000
 8010a1c:	080141b0 	.word	0x080141b0
 8010a20:	080140a0 	.word	0x080140a0
 8010a24:	2501      	movs	r5, #1
 8010a26:	2300      	movs	r3, #0
 8010a28:	9306      	str	r3, [sp, #24]
 8010a2a:	9508      	str	r5, [sp, #32]
 8010a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8010a30:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010a34:	2200      	movs	r2, #0
 8010a36:	2312      	movs	r3, #18
 8010a38:	e7b0      	b.n	801099c <_dtoa_r+0x26c>
 8010a3a:	2301      	movs	r3, #1
 8010a3c:	9308      	str	r3, [sp, #32]
 8010a3e:	e7f5      	b.n	8010a2c <_dtoa_r+0x2fc>
 8010a40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a42:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010a46:	e7b8      	b.n	80109ba <_dtoa_r+0x28a>
 8010a48:	3101      	adds	r1, #1
 8010a4a:	6041      	str	r1, [r0, #4]
 8010a4c:	0052      	lsls	r2, r2, #1
 8010a4e:	e7b8      	b.n	80109c2 <_dtoa_r+0x292>
 8010a50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010a52:	9a01      	ldr	r2, [sp, #4]
 8010a54:	601a      	str	r2, [r3, #0]
 8010a56:	9b03      	ldr	r3, [sp, #12]
 8010a58:	2b0e      	cmp	r3, #14
 8010a5a:	f200 809d 	bhi.w	8010b98 <_dtoa_r+0x468>
 8010a5e:	2d00      	cmp	r5, #0
 8010a60:	f000 809a 	beq.w	8010b98 <_dtoa_r+0x468>
 8010a64:	9b00      	ldr	r3, [sp, #0]
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	dd32      	ble.n	8010ad0 <_dtoa_r+0x3a0>
 8010a6a:	4ab7      	ldr	r2, [pc, #732]	; (8010d48 <_dtoa_r+0x618>)
 8010a6c:	f003 030f 	and.w	r3, r3, #15
 8010a70:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010a74:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010a78:	9b00      	ldr	r3, [sp, #0]
 8010a7a:	05d8      	lsls	r0, r3, #23
 8010a7c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8010a80:	d516      	bpl.n	8010ab0 <_dtoa_r+0x380>
 8010a82:	4bb2      	ldr	r3, [pc, #712]	; (8010d4c <_dtoa_r+0x61c>)
 8010a84:	ec51 0b19 	vmov	r0, r1, d9
 8010a88:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010a8c:	f7ef ff0e 	bl	80008ac <__aeabi_ddiv>
 8010a90:	f007 070f 	and.w	r7, r7, #15
 8010a94:	4682      	mov	sl, r0
 8010a96:	468b      	mov	fp, r1
 8010a98:	2503      	movs	r5, #3
 8010a9a:	4eac      	ldr	r6, [pc, #688]	; (8010d4c <_dtoa_r+0x61c>)
 8010a9c:	b957      	cbnz	r7, 8010ab4 <_dtoa_r+0x384>
 8010a9e:	4642      	mov	r2, r8
 8010aa0:	464b      	mov	r3, r9
 8010aa2:	4650      	mov	r0, sl
 8010aa4:	4659      	mov	r1, fp
 8010aa6:	f7ef ff01 	bl	80008ac <__aeabi_ddiv>
 8010aaa:	4682      	mov	sl, r0
 8010aac:	468b      	mov	fp, r1
 8010aae:	e028      	b.n	8010b02 <_dtoa_r+0x3d2>
 8010ab0:	2502      	movs	r5, #2
 8010ab2:	e7f2      	b.n	8010a9a <_dtoa_r+0x36a>
 8010ab4:	07f9      	lsls	r1, r7, #31
 8010ab6:	d508      	bpl.n	8010aca <_dtoa_r+0x39a>
 8010ab8:	4640      	mov	r0, r8
 8010aba:	4649      	mov	r1, r9
 8010abc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010ac0:	f7ef fdca 	bl	8000658 <__aeabi_dmul>
 8010ac4:	3501      	adds	r5, #1
 8010ac6:	4680      	mov	r8, r0
 8010ac8:	4689      	mov	r9, r1
 8010aca:	107f      	asrs	r7, r7, #1
 8010acc:	3608      	adds	r6, #8
 8010ace:	e7e5      	b.n	8010a9c <_dtoa_r+0x36c>
 8010ad0:	f000 809b 	beq.w	8010c0a <_dtoa_r+0x4da>
 8010ad4:	9b00      	ldr	r3, [sp, #0]
 8010ad6:	4f9d      	ldr	r7, [pc, #628]	; (8010d4c <_dtoa_r+0x61c>)
 8010ad8:	425e      	negs	r6, r3
 8010ada:	4b9b      	ldr	r3, [pc, #620]	; (8010d48 <_dtoa_r+0x618>)
 8010adc:	f006 020f 	and.w	r2, r6, #15
 8010ae0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ae8:	ec51 0b19 	vmov	r0, r1, d9
 8010aec:	f7ef fdb4 	bl	8000658 <__aeabi_dmul>
 8010af0:	1136      	asrs	r6, r6, #4
 8010af2:	4682      	mov	sl, r0
 8010af4:	468b      	mov	fp, r1
 8010af6:	2300      	movs	r3, #0
 8010af8:	2502      	movs	r5, #2
 8010afa:	2e00      	cmp	r6, #0
 8010afc:	d17a      	bne.n	8010bf4 <_dtoa_r+0x4c4>
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d1d3      	bne.n	8010aaa <_dtoa_r+0x37a>
 8010b02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	f000 8082 	beq.w	8010c0e <_dtoa_r+0x4de>
 8010b0a:	4b91      	ldr	r3, [pc, #580]	; (8010d50 <_dtoa_r+0x620>)
 8010b0c:	2200      	movs	r2, #0
 8010b0e:	4650      	mov	r0, sl
 8010b10:	4659      	mov	r1, fp
 8010b12:	f7f0 f813 	bl	8000b3c <__aeabi_dcmplt>
 8010b16:	2800      	cmp	r0, #0
 8010b18:	d079      	beq.n	8010c0e <_dtoa_r+0x4de>
 8010b1a:	9b03      	ldr	r3, [sp, #12]
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d076      	beq.n	8010c0e <_dtoa_r+0x4de>
 8010b20:	9b02      	ldr	r3, [sp, #8]
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	dd36      	ble.n	8010b94 <_dtoa_r+0x464>
 8010b26:	9b00      	ldr	r3, [sp, #0]
 8010b28:	4650      	mov	r0, sl
 8010b2a:	4659      	mov	r1, fp
 8010b2c:	1e5f      	subs	r7, r3, #1
 8010b2e:	2200      	movs	r2, #0
 8010b30:	4b88      	ldr	r3, [pc, #544]	; (8010d54 <_dtoa_r+0x624>)
 8010b32:	f7ef fd91 	bl	8000658 <__aeabi_dmul>
 8010b36:	9e02      	ldr	r6, [sp, #8]
 8010b38:	4682      	mov	sl, r0
 8010b3a:	468b      	mov	fp, r1
 8010b3c:	3501      	adds	r5, #1
 8010b3e:	4628      	mov	r0, r5
 8010b40:	f7ef fd20 	bl	8000584 <__aeabi_i2d>
 8010b44:	4652      	mov	r2, sl
 8010b46:	465b      	mov	r3, fp
 8010b48:	f7ef fd86 	bl	8000658 <__aeabi_dmul>
 8010b4c:	4b82      	ldr	r3, [pc, #520]	; (8010d58 <_dtoa_r+0x628>)
 8010b4e:	2200      	movs	r2, #0
 8010b50:	f7ef fbcc 	bl	80002ec <__adddf3>
 8010b54:	46d0      	mov	r8, sl
 8010b56:	46d9      	mov	r9, fp
 8010b58:	4682      	mov	sl, r0
 8010b5a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8010b5e:	2e00      	cmp	r6, #0
 8010b60:	d158      	bne.n	8010c14 <_dtoa_r+0x4e4>
 8010b62:	4b7e      	ldr	r3, [pc, #504]	; (8010d5c <_dtoa_r+0x62c>)
 8010b64:	2200      	movs	r2, #0
 8010b66:	4640      	mov	r0, r8
 8010b68:	4649      	mov	r1, r9
 8010b6a:	f7ef fbbd 	bl	80002e8 <__aeabi_dsub>
 8010b6e:	4652      	mov	r2, sl
 8010b70:	465b      	mov	r3, fp
 8010b72:	4680      	mov	r8, r0
 8010b74:	4689      	mov	r9, r1
 8010b76:	f7ef ffff 	bl	8000b78 <__aeabi_dcmpgt>
 8010b7a:	2800      	cmp	r0, #0
 8010b7c:	f040 8295 	bne.w	80110aa <_dtoa_r+0x97a>
 8010b80:	4652      	mov	r2, sl
 8010b82:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010b86:	4640      	mov	r0, r8
 8010b88:	4649      	mov	r1, r9
 8010b8a:	f7ef ffd7 	bl	8000b3c <__aeabi_dcmplt>
 8010b8e:	2800      	cmp	r0, #0
 8010b90:	f040 8289 	bne.w	80110a6 <_dtoa_r+0x976>
 8010b94:	ec5b ab19 	vmov	sl, fp, d9
 8010b98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	f2c0 8148 	blt.w	8010e30 <_dtoa_r+0x700>
 8010ba0:	9a00      	ldr	r2, [sp, #0]
 8010ba2:	2a0e      	cmp	r2, #14
 8010ba4:	f300 8144 	bgt.w	8010e30 <_dtoa_r+0x700>
 8010ba8:	4b67      	ldr	r3, [pc, #412]	; (8010d48 <_dtoa_r+0x618>)
 8010baa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010bae:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010bb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	f280 80d5 	bge.w	8010d64 <_dtoa_r+0x634>
 8010bba:	9b03      	ldr	r3, [sp, #12]
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	f300 80d1 	bgt.w	8010d64 <_dtoa_r+0x634>
 8010bc2:	f040 826f 	bne.w	80110a4 <_dtoa_r+0x974>
 8010bc6:	4b65      	ldr	r3, [pc, #404]	; (8010d5c <_dtoa_r+0x62c>)
 8010bc8:	2200      	movs	r2, #0
 8010bca:	4640      	mov	r0, r8
 8010bcc:	4649      	mov	r1, r9
 8010bce:	f7ef fd43 	bl	8000658 <__aeabi_dmul>
 8010bd2:	4652      	mov	r2, sl
 8010bd4:	465b      	mov	r3, fp
 8010bd6:	f7ef ffc5 	bl	8000b64 <__aeabi_dcmpge>
 8010bda:	9e03      	ldr	r6, [sp, #12]
 8010bdc:	4637      	mov	r7, r6
 8010bde:	2800      	cmp	r0, #0
 8010be0:	f040 8245 	bne.w	801106e <_dtoa_r+0x93e>
 8010be4:	9d01      	ldr	r5, [sp, #4]
 8010be6:	2331      	movs	r3, #49	; 0x31
 8010be8:	f805 3b01 	strb.w	r3, [r5], #1
 8010bec:	9b00      	ldr	r3, [sp, #0]
 8010bee:	3301      	adds	r3, #1
 8010bf0:	9300      	str	r3, [sp, #0]
 8010bf2:	e240      	b.n	8011076 <_dtoa_r+0x946>
 8010bf4:	07f2      	lsls	r2, r6, #31
 8010bf6:	d505      	bpl.n	8010c04 <_dtoa_r+0x4d4>
 8010bf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010bfc:	f7ef fd2c 	bl	8000658 <__aeabi_dmul>
 8010c00:	3501      	adds	r5, #1
 8010c02:	2301      	movs	r3, #1
 8010c04:	1076      	asrs	r6, r6, #1
 8010c06:	3708      	adds	r7, #8
 8010c08:	e777      	b.n	8010afa <_dtoa_r+0x3ca>
 8010c0a:	2502      	movs	r5, #2
 8010c0c:	e779      	b.n	8010b02 <_dtoa_r+0x3d2>
 8010c0e:	9f00      	ldr	r7, [sp, #0]
 8010c10:	9e03      	ldr	r6, [sp, #12]
 8010c12:	e794      	b.n	8010b3e <_dtoa_r+0x40e>
 8010c14:	9901      	ldr	r1, [sp, #4]
 8010c16:	4b4c      	ldr	r3, [pc, #304]	; (8010d48 <_dtoa_r+0x618>)
 8010c18:	4431      	add	r1, r6
 8010c1a:	910d      	str	r1, [sp, #52]	; 0x34
 8010c1c:	9908      	ldr	r1, [sp, #32]
 8010c1e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010c22:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010c26:	2900      	cmp	r1, #0
 8010c28:	d043      	beq.n	8010cb2 <_dtoa_r+0x582>
 8010c2a:	494d      	ldr	r1, [pc, #308]	; (8010d60 <_dtoa_r+0x630>)
 8010c2c:	2000      	movs	r0, #0
 8010c2e:	f7ef fe3d 	bl	80008ac <__aeabi_ddiv>
 8010c32:	4652      	mov	r2, sl
 8010c34:	465b      	mov	r3, fp
 8010c36:	f7ef fb57 	bl	80002e8 <__aeabi_dsub>
 8010c3a:	9d01      	ldr	r5, [sp, #4]
 8010c3c:	4682      	mov	sl, r0
 8010c3e:	468b      	mov	fp, r1
 8010c40:	4649      	mov	r1, r9
 8010c42:	4640      	mov	r0, r8
 8010c44:	f7ef ffb8 	bl	8000bb8 <__aeabi_d2iz>
 8010c48:	4606      	mov	r6, r0
 8010c4a:	f7ef fc9b 	bl	8000584 <__aeabi_i2d>
 8010c4e:	4602      	mov	r2, r0
 8010c50:	460b      	mov	r3, r1
 8010c52:	4640      	mov	r0, r8
 8010c54:	4649      	mov	r1, r9
 8010c56:	f7ef fb47 	bl	80002e8 <__aeabi_dsub>
 8010c5a:	3630      	adds	r6, #48	; 0x30
 8010c5c:	f805 6b01 	strb.w	r6, [r5], #1
 8010c60:	4652      	mov	r2, sl
 8010c62:	465b      	mov	r3, fp
 8010c64:	4680      	mov	r8, r0
 8010c66:	4689      	mov	r9, r1
 8010c68:	f7ef ff68 	bl	8000b3c <__aeabi_dcmplt>
 8010c6c:	2800      	cmp	r0, #0
 8010c6e:	d163      	bne.n	8010d38 <_dtoa_r+0x608>
 8010c70:	4642      	mov	r2, r8
 8010c72:	464b      	mov	r3, r9
 8010c74:	4936      	ldr	r1, [pc, #216]	; (8010d50 <_dtoa_r+0x620>)
 8010c76:	2000      	movs	r0, #0
 8010c78:	f7ef fb36 	bl	80002e8 <__aeabi_dsub>
 8010c7c:	4652      	mov	r2, sl
 8010c7e:	465b      	mov	r3, fp
 8010c80:	f7ef ff5c 	bl	8000b3c <__aeabi_dcmplt>
 8010c84:	2800      	cmp	r0, #0
 8010c86:	f040 80b5 	bne.w	8010df4 <_dtoa_r+0x6c4>
 8010c8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010c8c:	429d      	cmp	r5, r3
 8010c8e:	d081      	beq.n	8010b94 <_dtoa_r+0x464>
 8010c90:	4b30      	ldr	r3, [pc, #192]	; (8010d54 <_dtoa_r+0x624>)
 8010c92:	2200      	movs	r2, #0
 8010c94:	4650      	mov	r0, sl
 8010c96:	4659      	mov	r1, fp
 8010c98:	f7ef fcde 	bl	8000658 <__aeabi_dmul>
 8010c9c:	4b2d      	ldr	r3, [pc, #180]	; (8010d54 <_dtoa_r+0x624>)
 8010c9e:	4682      	mov	sl, r0
 8010ca0:	468b      	mov	fp, r1
 8010ca2:	4640      	mov	r0, r8
 8010ca4:	4649      	mov	r1, r9
 8010ca6:	2200      	movs	r2, #0
 8010ca8:	f7ef fcd6 	bl	8000658 <__aeabi_dmul>
 8010cac:	4680      	mov	r8, r0
 8010cae:	4689      	mov	r9, r1
 8010cb0:	e7c6      	b.n	8010c40 <_dtoa_r+0x510>
 8010cb2:	4650      	mov	r0, sl
 8010cb4:	4659      	mov	r1, fp
 8010cb6:	f7ef fccf 	bl	8000658 <__aeabi_dmul>
 8010cba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010cbc:	9d01      	ldr	r5, [sp, #4]
 8010cbe:	930f      	str	r3, [sp, #60]	; 0x3c
 8010cc0:	4682      	mov	sl, r0
 8010cc2:	468b      	mov	fp, r1
 8010cc4:	4649      	mov	r1, r9
 8010cc6:	4640      	mov	r0, r8
 8010cc8:	f7ef ff76 	bl	8000bb8 <__aeabi_d2iz>
 8010ccc:	4606      	mov	r6, r0
 8010cce:	f7ef fc59 	bl	8000584 <__aeabi_i2d>
 8010cd2:	3630      	adds	r6, #48	; 0x30
 8010cd4:	4602      	mov	r2, r0
 8010cd6:	460b      	mov	r3, r1
 8010cd8:	4640      	mov	r0, r8
 8010cda:	4649      	mov	r1, r9
 8010cdc:	f7ef fb04 	bl	80002e8 <__aeabi_dsub>
 8010ce0:	f805 6b01 	strb.w	r6, [r5], #1
 8010ce4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010ce6:	429d      	cmp	r5, r3
 8010ce8:	4680      	mov	r8, r0
 8010cea:	4689      	mov	r9, r1
 8010cec:	f04f 0200 	mov.w	r2, #0
 8010cf0:	d124      	bne.n	8010d3c <_dtoa_r+0x60c>
 8010cf2:	4b1b      	ldr	r3, [pc, #108]	; (8010d60 <_dtoa_r+0x630>)
 8010cf4:	4650      	mov	r0, sl
 8010cf6:	4659      	mov	r1, fp
 8010cf8:	f7ef faf8 	bl	80002ec <__adddf3>
 8010cfc:	4602      	mov	r2, r0
 8010cfe:	460b      	mov	r3, r1
 8010d00:	4640      	mov	r0, r8
 8010d02:	4649      	mov	r1, r9
 8010d04:	f7ef ff38 	bl	8000b78 <__aeabi_dcmpgt>
 8010d08:	2800      	cmp	r0, #0
 8010d0a:	d173      	bne.n	8010df4 <_dtoa_r+0x6c4>
 8010d0c:	4652      	mov	r2, sl
 8010d0e:	465b      	mov	r3, fp
 8010d10:	4913      	ldr	r1, [pc, #76]	; (8010d60 <_dtoa_r+0x630>)
 8010d12:	2000      	movs	r0, #0
 8010d14:	f7ef fae8 	bl	80002e8 <__aeabi_dsub>
 8010d18:	4602      	mov	r2, r0
 8010d1a:	460b      	mov	r3, r1
 8010d1c:	4640      	mov	r0, r8
 8010d1e:	4649      	mov	r1, r9
 8010d20:	f7ef ff0c 	bl	8000b3c <__aeabi_dcmplt>
 8010d24:	2800      	cmp	r0, #0
 8010d26:	f43f af35 	beq.w	8010b94 <_dtoa_r+0x464>
 8010d2a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010d2c:	1e6b      	subs	r3, r5, #1
 8010d2e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010d30:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010d34:	2b30      	cmp	r3, #48	; 0x30
 8010d36:	d0f8      	beq.n	8010d2a <_dtoa_r+0x5fa>
 8010d38:	9700      	str	r7, [sp, #0]
 8010d3a:	e049      	b.n	8010dd0 <_dtoa_r+0x6a0>
 8010d3c:	4b05      	ldr	r3, [pc, #20]	; (8010d54 <_dtoa_r+0x624>)
 8010d3e:	f7ef fc8b 	bl	8000658 <__aeabi_dmul>
 8010d42:	4680      	mov	r8, r0
 8010d44:	4689      	mov	r9, r1
 8010d46:	e7bd      	b.n	8010cc4 <_dtoa_r+0x594>
 8010d48:	080141b0 	.word	0x080141b0
 8010d4c:	08014188 	.word	0x08014188
 8010d50:	3ff00000 	.word	0x3ff00000
 8010d54:	40240000 	.word	0x40240000
 8010d58:	401c0000 	.word	0x401c0000
 8010d5c:	40140000 	.word	0x40140000
 8010d60:	3fe00000 	.word	0x3fe00000
 8010d64:	9d01      	ldr	r5, [sp, #4]
 8010d66:	4656      	mov	r6, sl
 8010d68:	465f      	mov	r7, fp
 8010d6a:	4642      	mov	r2, r8
 8010d6c:	464b      	mov	r3, r9
 8010d6e:	4630      	mov	r0, r6
 8010d70:	4639      	mov	r1, r7
 8010d72:	f7ef fd9b 	bl	80008ac <__aeabi_ddiv>
 8010d76:	f7ef ff1f 	bl	8000bb8 <__aeabi_d2iz>
 8010d7a:	4682      	mov	sl, r0
 8010d7c:	f7ef fc02 	bl	8000584 <__aeabi_i2d>
 8010d80:	4642      	mov	r2, r8
 8010d82:	464b      	mov	r3, r9
 8010d84:	f7ef fc68 	bl	8000658 <__aeabi_dmul>
 8010d88:	4602      	mov	r2, r0
 8010d8a:	460b      	mov	r3, r1
 8010d8c:	4630      	mov	r0, r6
 8010d8e:	4639      	mov	r1, r7
 8010d90:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8010d94:	f7ef faa8 	bl	80002e8 <__aeabi_dsub>
 8010d98:	f805 6b01 	strb.w	r6, [r5], #1
 8010d9c:	9e01      	ldr	r6, [sp, #4]
 8010d9e:	9f03      	ldr	r7, [sp, #12]
 8010da0:	1bae      	subs	r6, r5, r6
 8010da2:	42b7      	cmp	r7, r6
 8010da4:	4602      	mov	r2, r0
 8010da6:	460b      	mov	r3, r1
 8010da8:	d135      	bne.n	8010e16 <_dtoa_r+0x6e6>
 8010daa:	f7ef fa9f 	bl	80002ec <__adddf3>
 8010dae:	4642      	mov	r2, r8
 8010db0:	464b      	mov	r3, r9
 8010db2:	4606      	mov	r6, r0
 8010db4:	460f      	mov	r7, r1
 8010db6:	f7ef fedf 	bl	8000b78 <__aeabi_dcmpgt>
 8010dba:	b9d0      	cbnz	r0, 8010df2 <_dtoa_r+0x6c2>
 8010dbc:	4642      	mov	r2, r8
 8010dbe:	464b      	mov	r3, r9
 8010dc0:	4630      	mov	r0, r6
 8010dc2:	4639      	mov	r1, r7
 8010dc4:	f7ef feb0 	bl	8000b28 <__aeabi_dcmpeq>
 8010dc8:	b110      	cbz	r0, 8010dd0 <_dtoa_r+0x6a0>
 8010dca:	f01a 0f01 	tst.w	sl, #1
 8010dce:	d110      	bne.n	8010df2 <_dtoa_r+0x6c2>
 8010dd0:	4620      	mov	r0, r4
 8010dd2:	ee18 1a10 	vmov	r1, s16
 8010dd6:	f000 fe79 	bl	8011acc <_Bfree>
 8010dda:	2300      	movs	r3, #0
 8010ddc:	9800      	ldr	r0, [sp, #0]
 8010dde:	702b      	strb	r3, [r5, #0]
 8010de0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010de2:	3001      	adds	r0, #1
 8010de4:	6018      	str	r0, [r3, #0]
 8010de6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	f43f acf1 	beq.w	80107d0 <_dtoa_r+0xa0>
 8010dee:	601d      	str	r5, [r3, #0]
 8010df0:	e4ee      	b.n	80107d0 <_dtoa_r+0xa0>
 8010df2:	9f00      	ldr	r7, [sp, #0]
 8010df4:	462b      	mov	r3, r5
 8010df6:	461d      	mov	r5, r3
 8010df8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010dfc:	2a39      	cmp	r2, #57	; 0x39
 8010dfe:	d106      	bne.n	8010e0e <_dtoa_r+0x6de>
 8010e00:	9a01      	ldr	r2, [sp, #4]
 8010e02:	429a      	cmp	r2, r3
 8010e04:	d1f7      	bne.n	8010df6 <_dtoa_r+0x6c6>
 8010e06:	9901      	ldr	r1, [sp, #4]
 8010e08:	2230      	movs	r2, #48	; 0x30
 8010e0a:	3701      	adds	r7, #1
 8010e0c:	700a      	strb	r2, [r1, #0]
 8010e0e:	781a      	ldrb	r2, [r3, #0]
 8010e10:	3201      	adds	r2, #1
 8010e12:	701a      	strb	r2, [r3, #0]
 8010e14:	e790      	b.n	8010d38 <_dtoa_r+0x608>
 8010e16:	4ba6      	ldr	r3, [pc, #664]	; (80110b0 <_dtoa_r+0x980>)
 8010e18:	2200      	movs	r2, #0
 8010e1a:	f7ef fc1d 	bl	8000658 <__aeabi_dmul>
 8010e1e:	2200      	movs	r2, #0
 8010e20:	2300      	movs	r3, #0
 8010e22:	4606      	mov	r6, r0
 8010e24:	460f      	mov	r7, r1
 8010e26:	f7ef fe7f 	bl	8000b28 <__aeabi_dcmpeq>
 8010e2a:	2800      	cmp	r0, #0
 8010e2c:	d09d      	beq.n	8010d6a <_dtoa_r+0x63a>
 8010e2e:	e7cf      	b.n	8010dd0 <_dtoa_r+0x6a0>
 8010e30:	9a08      	ldr	r2, [sp, #32]
 8010e32:	2a00      	cmp	r2, #0
 8010e34:	f000 80d7 	beq.w	8010fe6 <_dtoa_r+0x8b6>
 8010e38:	9a06      	ldr	r2, [sp, #24]
 8010e3a:	2a01      	cmp	r2, #1
 8010e3c:	f300 80ba 	bgt.w	8010fb4 <_dtoa_r+0x884>
 8010e40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010e42:	2a00      	cmp	r2, #0
 8010e44:	f000 80b2 	beq.w	8010fac <_dtoa_r+0x87c>
 8010e48:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010e4c:	9e07      	ldr	r6, [sp, #28]
 8010e4e:	9d04      	ldr	r5, [sp, #16]
 8010e50:	9a04      	ldr	r2, [sp, #16]
 8010e52:	441a      	add	r2, r3
 8010e54:	9204      	str	r2, [sp, #16]
 8010e56:	9a05      	ldr	r2, [sp, #20]
 8010e58:	2101      	movs	r1, #1
 8010e5a:	441a      	add	r2, r3
 8010e5c:	4620      	mov	r0, r4
 8010e5e:	9205      	str	r2, [sp, #20]
 8010e60:	f000 ff36 	bl	8011cd0 <__i2b>
 8010e64:	4607      	mov	r7, r0
 8010e66:	2d00      	cmp	r5, #0
 8010e68:	dd0c      	ble.n	8010e84 <_dtoa_r+0x754>
 8010e6a:	9b05      	ldr	r3, [sp, #20]
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	dd09      	ble.n	8010e84 <_dtoa_r+0x754>
 8010e70:	42ab      	cmp	r3, r5
 8010e72:	9a04      	ldr	r2, [sp, #16]
 8010e74:	bfa8      	it	ge
 8010e76:	462b      	movge	r3, r5
 8010e78:	1ad2      	subs	r2, r2, r3
 8010e7a:	9204      	str	r2, [sp, #16]
 8010e7c:	9a05      	ldr	r2, [sp, #20]
 8010e7e:	1aed      	subs	r5, r5, r3
 8010e80:	1ad3      	subs	r3, r2, r3
 8010e82:	9305      	str	r3, [sp, #20]
 8010e84:	9b07      	ldr	r3, [sp, #28]
 8010e86:	b31b      	cbz	r3, 8010ed0 <_dtoa_r+0x7a0>
 8010e88:	9b08      	ldr	r3, [sp, #32]
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	f000 80af 	beq.w	8010fee <_dtoa_r+0x8be>
 8010e90:	2e00      	cmp	r6, #0
 8010e92:	dd13      	ble.n	8010ebc <_dtoa_r+0x78c>
 8010e94:	4639      	mov	r1, r7
 8010e96:	4632      	mov	r2, r6
 8010e98:	4620      	mov	r0, r4
 8010e9a:	f000 ffd9 	bl	8011e50 <__pow5mult>
 8010e9e:	ee18 2a10 	vmov	r2, s16
 8010ea2:	4601      	mov	r1, r0
 8010ea4:	4607      	mov	r7, r0
 8010ea6:	4620      	mov	r0, r4
 8010ea8:	f000 ff28 	bl	8011cfc <__multiply>
 8010eac:	ee18 1a10 	vmov	r1, s16
 8010eb0:	4680      	mov	r8, r0
 8010eb2:	4620      	mov	r0, r4
 8010eb4:	f000 fe0a 	bl	8011acc <_Bfree>
 8010eb8:	ee08 8a10 	vmov	s16, r8
 8010ebc:	9b07      	ldr	r3, [sp, #28]
 8010ebe:	1b9a      	subs	r2, r3, r6
 8010ec0:	d006      	beq.n	8010ed0 <_dtoa_r+0x7a0>
 8010ec2:	ee18 1a10 	vmov	r1, s16
 8010ec6:	4620      	mov	r0, r4
 8010ec8:	f000 ffc2 	bl	8011e50 <__pow5mult>
 8010ecc:	ee08 0a10 	vmov	s16, r0
 8010ed0:	2101      	movs	r1, #1
 8010ed2:	4620      	mov	r0, r4
 8010ed4:	f000 fefc 	bl	8011cd0 <__i2b>
 8010ed8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	4606      	mov	r6, r0
 8010ede:	f340 8088 	ble.w	8010ff2 <_dtoa_r+0x8c2>
 8010ee2:	461a      	mov	r2, r3
 8010ee4:	4601      	mov	r1, r0
 8010ee6:	4620      	mov	r0, r4
 8010ee8:	f000 ffb2 	bl	8011e50 <__pow5mult>
 8010eec:	9b06      	ldr	r3, [sp, #24]
 8010eee:	2b01      	cmp	r3, #1
 8010ef0:	4606      	mov	r6, r0
 8010ef2:	f340 8081 	ble.w	8010ff8 <_dtoa_r+0x8c8>
 8010ef6:	f04f 0800 	mov.w	r8, #0
 8010efa:	6933      	ldr	r3, [r6, #16]
 8010efc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010f00:	6918      	ldr	r0, [r3, #16]
 8010f02:	f000 fe95 	bl	8011c30 <__hi0bits>
 8010f06:	f1c0 0020 	rsb	r0, r0, #32
 8010f0a:	9b05      	ldr	r3, [sp, #20]
 8010f0c:	4418      	add	r0, r3
 8010f0e:	f010 001f 	ands.w	r0, r0, #31
 8010f12:	f000 8092 	beq.w	801103a <_dtoa_r+0x90a>
 8010f16:	f1c0 0320 	rsb	r3, r0, #32
 8010f1a:	2b04      	cmp	r3, #4
 8010f1c:	f340 808a 	ble.w	8011034 <_dtoa_r+0x904>
 8010f20:	f1c0 001c 	rsb	r0, r0, #28
 8010f24:	9b04      	ldr	r3, [sp, #16]
 8010f26:	4403      	add	r3, r0
 8010f28:	9304      	str	r3, [sp, #16]
 8010f2a:	9b05      	ldr	r3, [sp, #20]
 8010f2c:	4403      	add	r3, r0
 8010f2e:	4405      	add	r5, r0
 8010f30:	9305      	str	r3, [sp, #20]
 8010f32:	9b04      	ldr	r3, [sp, #16]
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	dd07      	ble.n	8010f48 <_dtoa_r+0x818>
 8010f38:	ee18 1a10 	vmov	r1, s16
 8010f3c:	461a      	mov	r2, r3
 8010f3e:	4620      	mov	r0, r4
 8010f40:	f000 ffe0 	bl	8011f04 <__lshift>
 8010f44:	ee08 0a10 	vmov	s16, r0
 8010f48:	9b05      	ldr	r3, [sp, #20]
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	dd05      	ble.n	8010f5a <_dtoa_r+0x82a>
 8010f4e:	4631      	mov	r1, r6
 8010f50:	461a      	mov	r2, r3
 8010f52:	4620      	mov	r0, r4
 8010f54:	f000 ffd6 	bl	8011f04 <__lshift>
 8010f58:	4606      	mov	r6, r0
 8010f5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d06e      	beq.n	801103e <_dtoa_r+0x90e>
 8010f60:	ee18 0a10 	vmov	r0, s16
 8010f64:	4631      	mov	r1, r6
 8010f66:	f001 f83d 	bl	8011fe4 <__mcmp>
 8010f6a:	2800      	cmp	r0, #0
 8010f6c:	da67      	bge.n	801103e <_dtoa_r+0x90e>
 8010f6e:	9b00      	ldr	r3, [sp, #0]
 8010f70:	3b01      	subs	r3, #1
 8010f72:	ee18 1a10 	vmov	r1, s16
 8010f76:	9300      	str	r3, [sp, #0]
 8010f78:	220a      	movs	r2, #10
 8010f7a:	2300      	movs	r3, #0
 8010f7c:	4620      	mov	r0, r4
 8010f7e:	f000 fdc7 	bl	8011b10 <__multadd>
 8010f82:	9b08      	ldr	r3, [sp, #32]
 8010f84:	ee08 0a10 	vmov	s16, r0
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	f000 81b1 	beq.w	80112f0 <_dtoa_r+0xbc0>
 8010f8e:	2300      	movs	r3, #0
 8010f90:	4639      	mov	r1, r7
 8010f92:	220a      	movs	r2, #10
 8010f94:	4620      	mov	r0, r4
 8010f96:	f000 fdbb 	bl	8011b10 <__multadd>
 8010f9a:	9b02      	ldr	r3, [sp, #8]
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	4607      	mov	r7, r0
 8010fa0:	f300 808e 	bgt.w	80110c0 <_dtoa_r+0x990>
 8010fa4:	9b06      	ldr	r3, [sp, #24]
 8010fa6:	2b02      	cmp	r3, #2
 8010fa8:	dc51      	bgt.n	801104e <_dtoa_r+0x91e>
 8010faa:	e089      	b.n	80110c0 <_dtoa_r+0x990>
 8010fac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010fae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010fb2:	e74b      	b.n	8010e4c <_dtoa_r+0x71c>
 8010fb4:	9b03      	ldr	r3, [sp, #12]
 8010fb6:	1e5e      	subs	r6, r3, #1
 8010fb8:	9b07      	ldr	r3, [sp, #28]
 8010fba:	42b3      	cmp	r3, r6
 8010fbc:	bfbf      	itttt	lt
 8010fbe:	9b07      	ldrlt	r3, [sp, #28]
 8010fc0:	9607      	strlt	r6, [sp, #28]
 8010fc2:	1af2      	sublt	r2, r6, r3
 8010fc4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8010fc6:	bfb6      	itet	lt
 8010fc8:	189b      	addlt	r3, r3, r2
 8010fca:	1b9e      	subge	r6, r3, r6
 8010fcc:	930a      	strlt	r3, [sp, #40]	; 0x28
 8010fce:	9b03      	ldr	r3, [sp, #12]
 8010fd0:	bfb8      	it	lt
 8010fd2:	2600      	movlt	r6, #0
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	bfb7      	itett	lt
 8010fd8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8010fdc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8010fe0:	1a9d      	sublt	r5, r3, r2
 8010fe2:	2300      	movlt	r3, #0
 8010fe4:	e734      	b.n	8010e50 <_dtoa_r+0x720>
 8010fe6:	9e07      	ldr	r6, [sp, #28]
 8010fe8:	9d04      	ldr	r5, [sp, #16]
 8010fea:	9f08      	ldr	r7, [sp, #32]
 8010fec:	e73b      	b.n	8010e66 <_dtoa_r+0x736>
 8010fee:	9a07      	ldr	r2, [sp, #28]
 8010ff0:	e767      	b.n	8010ec2 <_dtoa_r+0x792>
 8010ff2:	9b06      	ldr	r3, [sp, #24]
 8010ff4:	2b01      	cmp	r3, #1
 8010ff6:	dc18      	bgt.n	801102a <_dtoa_r+0x8fa>
 8010ff8:	f1ba 0f00 	cmp.w	sl, #0
 8010ffc:	d115      	bne.n	801102a <_dtoa_r+0x8fa>
 8010ffe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011002:	b993      	cbnz	r3, 801102a <_dtoa_r+0x8fa>
 8011004:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011008:	0d1b      	lsrs	r3, r3, #20
 801100a:	051b      	lsls	r3, r3, #20
 801100c:	b183      	cbz	r3, 8011030 <_dtoa_r+0x900>
 801100e:	9b04      	ldr	r3, [sp, #16]
 8011010:	3301      	adds	r3, #1
 8011012:	9304      	str	r3, [sp, #16]
 8011014:	9b05      	ldr	r3, [sp, #20]
 8011016:	3301      	adds	r3, #1
 8011018:	9305      	str	r3, [sp, #20]
 801101a:	f04f 0801 	mov.w	r8, #1
 801101e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011020:	2b00      	cmp	r3, #0
 8011022:	f47f af6a 	bne.w	8010efa <_dtoa_r+0x7ca>
 8011026:	2001      	movs	r0, #1
 8011028:	e76f      	b.n	8010f0a <_dtoa_r+0x7da>
 801102a:	f04f 0800 	mov.w	r8, #0
 801102e:	e7f6      	b.n	801101e <_dtoa_r+0x8ee>
 8011030:	4698      	mov	r8, r3
 8011032:	e7f4      	b.n	801101e <_dtoa_r+0x8ee>
 8011034:	f43f af7d 	beq.w	8010f32 <_dtoa_r+0x802>
 8011038:	4618      	mov	r0, r3
 801103a:	301c      	adds	r0, #28
 801103c:	e772      	b.n	8010f24 <_dtoa_r+0x7f4>
 801103e:	9b03      	ldr	r3, [sp, #12]
 8011040:	2b00      	cmp	r3, #0
 8011042:	dc37      	bgt.n	80110b4 <_dtoa_r+0x984>
 8011044:	9b06      	ldr	r3, [sp, #24]
 8011046:	2b02      	cmp	r3, #2
 8011048:	dd34      	ble.n	80110b4 <_dtoa_r+0x984>
 801104a:	9b03      	ldr	r3, [sp, #12]
 801104c:	9302      	str	r3, [sp, #8]
 801104e:	9b02      	ldr	r3, [sp, #8]
 8011050:	b96b      	cbnz	r3, 801106e <_dtoa_r+0x93e>
 8011052:	4631      	mov	r1, r6
 8011054:	2205      	movs	r2, #5
 8011056:	4620      	mov	r0, r4
 8011058:	f000 fd5a 	bl	8011b10 <__multadd>
 801105c:	4601      	mov	r1, r0
 801105e:	4606      	mov	r6, r0
 8011060:	ee18 0a10 	vmov	r0, s16
 8011064:	f000 ffbe 	bl	8011fe4 <__mcmp>
 8011068:	2800      	cmp	r0, #0
 801106a:	f73f adbb 	bgt.w	8010be4 <_dtoa_r+0x4b4>
 801106e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011070:	9d01      	ldr	r5, [sp, #4]
 8011072:	43db      	mvns	r3, r3
 8011074:	9300      	str	r3, [sp, #0]
 8011076:	f04f 0800 	mov.w	r8, #0
 801107a:	4631      	mov	r1, r6
 801107c:	4620      	mov	r0, r4
 801107e:	f000 fd25 	bl	8011acc <_Bfree>
 8011082:	2f00      	cmp	r7, #0
 8011084:	f43f aea4 	beq.w	8010dd0 <_dtoa_r+0x6a0>
 8011088:	f1b8 0f00 	cmp.w	r8, #0
 801108c:	d005      	beq.n	801109a <_dtoa_r+0x96a>
 801108e:	45b8      	cmp	r8, r7
 8011090:	d003      	beq.n	801109a <_dtoa_r+0x96a>
 8011092:	4641      	mov	r1, r8
 8011094:	4620      	mov	r0, r4
 8011096:	f000 fd19 	bl	8011acc <_Bfree>
 801109a:	4639      	mov	r1, r7
 801109c:	4620      	mov	r0, r4
 801109e:	f000 fd15 	bl	8011acc <_Bfree>
 80110a2:	e695      	b.n	8010dd0 <_dtoa_r+0x6a0>
 80110a4:	2600      	movs	r6, #0
 80110a6:	4637      	mov	r7, r6
 80110a8:	e7e1      	b.n	801106e <_dtoa_r+0x93e>
 80110aa:	9700      	str	r7, [sp, #0]
 80110ac:	4637      	mov	r7, r6
 80110ae:	e599      	b.n	8010be4 <_dtoa_r+0x4b4>
 80110b0:	40240000 	.word	0x40240000
 80110b4:	9b08      	ldr	r3, [sp, #32]
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	f000 80ca 	beq.w	8011250 <_dtoa_r+0xb20>
 80110bc:	9b03      	ldr	r3, [sp, #12]
 80110be:	9302      	str	r3, [sp, #8]
 80110c0:	2d00      	cmp	r5, #0
 80110c2:	dd05      	ble.n	80110d0 <_dtoa_r+0x9a0>
 80110c4:	4639      	mov	r1, r7
 80110c6:	462a      	mov	r2, r5
 80110c8:	4620      	mov	r0, r4
 80110ca:	f000 ff1b 	bl	8011f04 <__lshift>
 80110ce:	4607      	mov	r7, r0
 80110d0:	f1b8 0f00 	cmp.w	r8, #0
 80110d4:	d05b      	beq.n	801118e <_dtoa_r+0xa5e>
 80110d6:	6879      	ldr	r1, [r7, #4]
 80110d8:	4620      	mov	r0, r4
 80110da:	f000 fcb7 	bl	8011a4c <_Balloc>
 80110de:	4605      	mov	r5, r0
 80110e0:	b928      	cbnz	r0, 80110ee <_dtoa_r+0x9be>
 80110e2:	4b87      	ldr	r3, [pc, #540]	; (8011300 <_dtoa_r+0xbd0>)
 80110e4:	4602      	mov	r2, r0
 80110e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80110ea:	f7ff bb3b 	b.w	8010764 <_dtoa_r+0x34>
 80110ee:	693a      	ldr	r2, [r7, #16]
 80110f0:	3202      	adds	r2, #2
 80110f2:	0092      	lsls	r2, r2, #2
 80110f4:	f107 010c 	add.w	r1, r7, #12
 80110f8:	300c      	adds	r0, #12
 80110fa:	f7fd fc77 	bl	800e9ec <memcpy>
 80110fe:	2201      	movs	r2, #1
 8011100:	4629      	mov	r1, r5
 8011102:	4620      	mov	r0, r4
 8011104:	f000 fefe 	bl	8011f04 <__lshift>
 8011108:	9b01      	ldr	r3, [sp, #4]
 801110a:	f103 0901 	add.w	r9, r3, #1
 801110e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8011112:	4413      	add	r3, r2
 8011114:	9305      	str	r3, [sp, #20]
 8011116:	f00a 0301 	and.w	r3, sl, #1
 801111a:	46b8      	mov	r8, r7
 801111c:	9304      	str	r3, [sp, #16]
 801111e:	4607      	mov	r7, r0
 8011120:	4631      	mov	r1, r6
 8011122:	ee18 0a10 	vmov	r0, s16
 8011126:	f7ff fa75 	bl	8010614 <quorem>
 801112a:	4641      	mov	r1, r8
 801112c:	9002      	str	r0, [sp, #8]
 801112e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011132:	ee18 0a10 	vmov	r0, s16
 8011136:	f000 ff55 	bl	8011fe4 <__mcmp>
 801113a:	463a      	mov	r2, r7
 801113c:	9003      	str	r0, [sp, #12]
 801113e:	4631      	mov	r1, r6
 8011140:	4620      	mov	r0, r4
 8011142:	f000 ff6b 	bl	801201c <__mdiff>
 8011146:	68c2      	ldr	r2, [r0, #12]
 8011148:	f109 3bff 	add.w	fp, r9, #4294967295
 801114c:	4605      	mov	r5, r0
 801114e:	bb02      	cbnz	r2, 8011192 <_dtoa_r+0xa62>
 8011150:	4601      	mov	r1, r0
 8011152:	ee18 0a10 	vmov	r0, s16
 8011156:	f000 ff45 	bl	8011fe4 <__mcmp>
 801115a:	4602      	mov	r2, r0
 801115c:	4629      	mov	r1, r5
 801115e:	4620      	mov	r0, r4
 8011160:	9207      	str	r2, [sp, #28]
 8011162:	f000 fcb3 	bl	8011acc <_Bfree>
 8011166:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801116a:	ea43 0102 	orr.w	r1, r3, r2
 801116e:	9b04      	ldr	r3, [sp, #16]
 8011170:	430b      	orrs	r3, r1
 8011172:	464d      	mov	r5, r9
 8011174:	d10f      	bne.n	8011196 <_dtoa_r+0xa66>
 8011176:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801117a:	d02a      	beq.n	80111d2 <_dtoa_r+0xaa2>
 801117c:	9b03      	ldr	r3, [sp, #12]
 801117e:	2b00      	cmp	r3, #0
 8011180:	dd02      	ble.n	8011188 <_dtoa_r+0xa58>
 8011182:	9b02      	ldr	r3, [sp, #8]
 8011184:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8011188:	f88b a000 	strb.w	sl, [fp]
 801118c:	e775      	b.n	801107a <_dtoa_r+0x94a>
 801118e:	4638      	mov	r0, r7
 8011190:	e7ba      	b.n	8011108 <_dtoa_r+0x9d8>
 8011192:	2201      	movs	r2, #1
 8011194:	e7e2      	b.n	801115c <_dtoa_r+0xa2c>
 8011196:	9b03      	ldr	r3, [sp, #12]
 8011198:	2b00      	cmp	r3, #0
 801119a:	db04      	blt.n	80111a6 <_dtoa_r+0xa76>
 801119c:	9906      	ldr	r1, [sp, #24]
 801119e:	430b      	orrs	r3, r1
 80111a0:	9904      	ldr	r1, [sp, #16]
 80111a2:	430b      	orrs	r3, r1
 80111a4:	d122      	bne.n	80111ec <_dtoa_r+0xabc>
 80111a6:	2a00      	cmp	r2, #0
 80111a8:	ddee      	ble.n	8011188 <_dtoa_r+0xa58>
 80111aa:	ee18 1a10 	vmov	r1, s16
 80111ae:	2201      	movs	r2, #1
 80111b0:	4620      	mov	r0, r4
 80111b2:	f000 fea7 	bl	8011f04 <__lshift>
 80111b6:	4631      	mov	r1, r6
 80111b8:	ee08 0a10 	vmov	s16, r0
 80111bc:	f000 ff12 	bl	8011fe4 <__mcmp>
 80111c0:	2800      	cmp	r0, #0
 80111c2:	dc03      	bgt.n	80111cc <_dtoa_r+0xa9c>
 80111c4:	d1e0      	bne.n	8011188 <_dtoa_r+0xa58>
 80111c6:	f01a 0f01 	tst.w	sl, #1
 80111ca:	d0dd      	beq.n	8011188 <_dtoa_r+0xa58>
 80111cc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80111d0:	d1d7      	bne.n	8011182 <_dtoa_r+0xa52>
 80111d2:	2339      	movs	r3, #57	; 0x39
 80111d4:	f88b 3000 	strb.w	r3, [fp]
 80111d8:	462b      	mov	r3, r5
 80111da:	461d      	mov	r5, r3
 80111dc:	3b01      	subs	r3, #1
 80111de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80111e2:	2a39      	cmp	r2, #57	; 0x39
 80111e4:	d071      	beq.n	80112ca <_dtoa_r+0xb9a>
 80111e6:	3201      	adds	r2, #1
 80111e8:	701a      	strb	r2, [r3, #0]
 80111ea:	e746      	b.n	801107a <_dtoa_r+0x94a>
 80111ec:	2a00      	cmp	r2, #0
 80111ee:	dd07      	ble.n	8011200 <_dtoa_r+0xad0>
 80111f0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80111f4:	d0ed      	beq.n	80111d2 <_dtoa_r+0xaa2>
 80111f6:	f10a 0301 	add.w	r3, sl, #1
 80111fa:	f88b 3000 	strb.w	r3, [fp]
 80111fe:	e73c      	b.n	801107a <_dtoa_r+0x94a>
 8011200:	9b05      	ldr	r3, [sp, #20]
 8011202:	f809 ac01 	strb.w	sl, [r9, #-1]
 8011206:	4599      	cmp	r9, r3
 8011208:	d047      	beq.n	801129a <_dtoa_r+0xb6a>
 801120a:	ee18 1a10 	vmov	r1, s16
 801120e:	2300      	movs	r3, #0
 8011210:	220a      	movs	r2, #10
 8011212:	4620      	mov	r0, r4
 8011214:	f000 fc7c 	bl	8011b10 <__multadd>
 8011218:	45b8      	cmp	r8, r7
 801121a:	ee08 0a10 	vmov	s16, r0
 801121e:	f04f 0300 	mov.w	r3, #0
 8011222:	f04f 020a 	mov.w	r2, #10
 8011226:	4641      	mov	r1, r8
 8011228:	4620      	mov	r0, r4
 801122a:	d106      	bne.n	801123a <_dtoa_r+0xb0a>
 801122c:	f000 fc70 	bl	8011b10 <__multadd>
 8011230:	4680      	mov	r8, r0
 8011232:	4607      	mov	r7, r0
 8011234:	f109 0901 	add.w	r9, r9, #1
 8011238:	e772      	b.n	8011120 <_dtoa_r+0x9f0>
 801123a:	f000 fc69 	bl	8011b10 <__multadd>
 801123e:	4639      	mov	r1, r7
 8011240:	4680      	mov	r8, r0
 8011242:	2300      	movs	r3, #0
 8011244:	220a      	movs	r2, #10
 8011246:	4620      	mov	r0, r4
 8011248:	f000 fc62 	bl	8011b10 <__multadd>
 801124c:	4607      	mov	r7, r0
 801124e:	e7f1      	b.n	8011234 <_dtoa_r+0xb04>
 8011250:	9b03      	ldr	r3, [sp, #12]
 8011252:	9302      	str	r3, [sp, #8]
 8011254:	9d01      	ldr	r5, [sp, #4]
 8011256:	ee18 0a10 	vmov	r0, s16
 801125a:	4631      	mov	r1, r6
 801125c:	f7ff f9da 	bl	8010614 <quorem>
 8011260:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011264:	9b01      	ldr	r3, [sp, #4]
 8011266:	f805 ab01 	strb.w	sl, [r5], #1
 801126a:	1aea      	subs	r2, r5, r3
 801126c:	9b02      	ldr	r3, [sp, #8]
 801126e:	4293      	cmp	r3, r2
 8011270:	dd09      	ble.n	8011286 <_dtoa_r+0xb56>
 8011272:	ee18 1a10 	vmov	r1, s16
 8011276:	2300      	movs	r3, #0
 8011278:	220a      	movs	r2, #10
 801127a:	4620      	mov	r0, r4
 801127c:	f000 fc48 	bl	8011b10 <__multadd>
 8011280:	ee08 0a10 	vmov	s16, r0
 8011284:	e7e7      	b.n	8011256 <_dtoa_r+0xb26>
 8011286:	9b02      	ldr	r3, [sp, #8]
 8011288:	2b00      	cmp	r3, #0
 801128a:	bfc8      	it	gt
 801128c:	461d      	movgt	r5, r3
 801128e:	9b01      	ldr	r3, [sp, #4]
 8011290:	bfd8      	it	le
 8011292:	2501      	movle	r5, #1
 8011294:	441d      	add	r5, r3
 8011296:	f04f 0800 	mov.w	r8, #0
 801129a:	ee18 1a10 	vmov	r1, s16
 801129e:	2201      	movs	r2, #1
 80112a0:	4620      	mov	r0, r4
 80112a2:	f000 fe2f 	bl	8011f04 <__lshift>
 80112a6:	4631      	mov	r1, r6
 80112a8:	ee08 0a10 	vmov	s16, r0
 80112ac:	f000 fe9a 	bl	8011fe4 <__mcmp>
 80112b0:	2800      	cmp	r0, #0
 80112b2:	dc91      	bgt.n	80111d8 <_dtoa_r+0xaa8>
 80112b4:	d102      	bne.n	80112bc <_dtoa_r+0xb8c>
 80112b6:	f01a 0f01 	tst.w	sl, #1
 80112ba:	d18d      	bne.n	80111d8 <_dtoa_r+0xaa8>
 80112bc:	462b      	mov	r3, r5
 80112be:	461d      	mov	r5, r3
 80112c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80112c4:	2a30      	cmp	r2, #48	; 0x30
 80112c6:	d0fa      	beq.n	80112be <_dtoa_r+0xb8e>
 80112c8:	e6d7      	b.n	801107a <_dtoa_r+0x94a>
 80112ca:	9a01      	ldr	r2, [sp, #4]
 80112cc:	429a      	cmp	r2, r3
 80112ce:	d184      	bne.n	80111da <_dtoa_r+0xaaa>
 80112d0:	9b00      	ldr	r3, [sp, #0]
 80112d2:	3301      	adds	r3, #1
 80112d4:	9300      	str	r3, [sp, #0]
 80112d6:	2331      	movs	r3, #49	; 0x31
 80112d8:	7013      	strb	r3, [r2, #0]
 80112da:	e6ce      	b.n	801107a <_dtoa_r+0x94a>
 80112dc:	4b09      	ldr	r3, [pc, #36]	; (8011304 <_dtoa_r+0xbd4>)
 80112de:	f7ff ba95 	b.w	801080c <_dtoa_r+0xdc>
 80112e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	f47f aa6e 	bne.w	80107c6 <_dtoa_r+0x96>
 80112ea:	4b07      	ldr	r3, [pc, #28]	; (8011308 <_dtoa_r+0xbd8>)
 80112ec:	f7ff ba8e 	b.w	801080c <_dtoa_r+0xdc>
 80112f0:	9b02      	ldr	r3, [sp, #8]
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	dcae      	bgt.n	8011254 <_dtoa_r+0xb24>
 80112f6:	9b06      	ldr	r3, [sp, #24]
 80112f8:	2b02      	cmp	r3, #2
 80112fa:	f73f aea8 	bgt.w	801104e <_dtoa_r+0x91e>
 80112fe:	e7a9      	b.n	8011254 <_dtoa_r+0xb24>
 8011300:	080140a0 	.word	0x080140a0
 8011304:	08014299 	.word	0x08014299
 8011308:	08014021 	.word	0x08014021

0801130c <rshift>:
 801130c:	6903      	ldr	r3, [r0, #16]
 801130e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011312:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011316:	ea4f 1261 	mov.w	r2, r1, asr #5
 801131a:	f100 0414 	add.w	r4, r0, #20
 801131e:	dd45      	ble.n	80113ac <rshift+0xa0>
 8011320:	f011 011f 	ands.w	r1, r1, #31
 8011324:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011328:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801132c:	d10c      	bne.n	8011348 <rshift+0x3c>
 801132e:	f100 0710 	add.w	r7, r0, #16
 8011332:	4629      	mov	r1, r5
 8011334:	42b1      	cmp	r1, r6
 8011336:	d334      	bcc.n	80113a2 <rshift+0x96>
 8011338:	1a9b      	subs	r3, r3, r2
 801133a:	009b      	lsls	r3, r3, #2
 801133c:	1eea      	subs	r2, r5, #3
 801133e:	4296      	cmp	r6, r2
 8011340:	bf38      	it	cc
 8011342:	2300      	movcc	r3, #0
 8011344:	4423      	add	r3, r4
 8011346:	e015      	b.n	8011374 <rshift+0x68>
 8011348:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801134c:	f1c1 0820 	rsb	r8, r1, #32
 8011350:	40cf      	lsrs	r7, r1
 8011352:	f105 0e04 	add.w	lr, r5, #4
 8011356:	46a1      	mov	r9, r4
 8011358:	4576      	cmp	r6, lr
 801135a:	46f4      	mov	ip, lr
 801135c:	d815      	bhi.n	801138a <rshift+0x7e>
 801135e:	1a9a      	subs	r2, r3, r2
 8011360:	0092      	lsls	r2, r2, #2
 8011362:	3a04      	subs	r2, #4
 8011364:	3501      	adds	r5, #1
 8011366:	42ae      	cmp	r6, r5
 8011368:	bf38      	it	cc
 801136a:	2200      	movcc	r2, #0
 801136c:	18a3      	adds	r3, r4, r2
 801136e:	50a7      	str	r7, [r4, r2]
 8011370:	b107      	cbz	r7, 8011374 <rshift+0x68>
 8011372:	3304      	adds	r3, #4
 8011374:	1b1a      	subs	r2, r3, r4
 8011376:	42a3      	cmp	r3, r4
 8011378:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801137c:	bf08      	it	eq
 801137e:	2300      	moveq	r3, #0
 8011380:	6102      	str	r2, [r0, #16]
 8011382:	bf08      	it	eq
 8011384:	6143      	streq	r3, [r0, #20]
 8011386:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801138a:	f8dc c000 	ldr.w	ip, [ip]
 801138e:	fa0c fc08 	lsl.w	ip, ip, r8
 8011392:	ea4c 0707 	orr.w	r7, ip, r7
 8011396:	f849 7b04 	str.w	r7, [r9], #4
 801139a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801139e:	40cf      	lsrs	r7, r1
 80113a0:	e7da      	b.n	8011358 <rshift+0x4c>
 80113a2:	f851 cb04 	ldr.w	ip, [r1], #4
 80113a6:	f847 cf04 	str.w	ip, [r7, #4]!
 80113aa:	e7c3      	b.n	8011334 <rshift+0x28>
 80113ac:	4623      	mov	r3, r4
 80113ae:	e7e1      	b.n	8011374 <rshift+0x68>

080113b0 <__hexdig_fun>:
 80113b0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80113b4:	2b09      	cmp	r3, #9
 80113b6:	d802      	bhi.n	80113be <__hexdig_fun+0xe>
 80113b8:	3820      	subs	r0, #32
 80113ba:	b2c0      	uxtb	r0, r0
 80113bc:	4770      	bx	lr
 80113be:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80113c2:	2b05      	cmp	r3, #5
 80113c4:	d801      	bhi.n	80113ca <__hexdig_fun+0x1a>
 80113c6:	3847      	subs	r0, #71	; 0x47
 80113c8:	e7f7      	b.n	80113ba <__hexdig_fun+0xa>
 80113ca:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80113ce:	2b05      	cmp	r3, #5
 80113d0:	d801      	bhi.n	80113d6 <__hexdig_fun+0x26>
 80113d2:	3827      	subs	r0, #39	; 0x27
 80113d4:	e7f1      	b.n	80113ba <__hexdig_fun+0xa>
 80113d6:	2000      	movs	r0, #0
 80113d8:	4770      	bx	lr
	...

080113dc <__gethex>:
 80113dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113e0:	ed2d 8b02 	vpush	{d8}
 80113e4:	b089      	sub	sp, #36	; 0x24
 80113e6:	ee08 0a10 	vmov	s16, r0
 80113ea:	9304      	str	r3, [sp, #16]
 80113ec:	4bb4      	ldr	r3, [pc, #720]	; (80116c0 <__gethex+0x2e4>)
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	9301      	str	r3, [sp, #4]
 80113f2:	4618      	mov	r0, r3
 80113f4:	468b      	mov	fp, r1
 80113f6:	4690      	mov	r8, r2
 80113f8:	f7ee ff14 	bl	8000224 <strlen>
 80113fc:	9b01      	ldr	r3, [sp, #4]
 80113fe:	f8db 2000 	ldr.w	r2, [fp]
 8011402:	4403      	add	r3, r0
 8011404:	4682      	mov	sl, r0
 8011406:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801140a:	9305      	str	r3, [sp, #20]
 801140c:	1c93      	adds	r3, r2, #2
 801140e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8011412:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8011416:	32fe      	adds	r2, #254	; 0xfe
 8011418:	18d1      	adds	r1, r2, r3
 801141a:	461f      	mov	r7, r3
 801141c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8011420:	9100      	str	r1, [sp, #0]
 8011422:	2830      	cmp	r0, #48	; 0x30
 8011424:	d0f8      	beq.n	8011418 <__gethex+0x3c>
 8011426:	f7ff ffc3 	bl	80113b0 <__hexdig_fun>
 801142a:	4604      	mov	r4, r0
 801142c:	2800      	cmp	r0, #0
 801142e:	d13a      	bne.n	80114a6 <__gethex+0xca>
 8011430:	9901      	ldr	r1, [sp, #4]
 8011432:	4652      	mov	r2, sl
 8011434:	4638      	mov	r0, r7
 8011436:	f7fe fa08 	bl	800f84a <strncmp>
 801143a:	4605      	mov	r5, r0
 801143c:	2800      	cmp	r0, #0
 801143e:	d168      	bne.n	8011512 <__gethex+0x136>
 8011440:	f817 000a 	ldrb.w	r0, [r7, sl]
 8011444:	eb07 060a 	add.w	r6, r7, sl
 8011448:	f7ff ffb2 	bl	80113b0 <__hexdig_fun>
 801144c:	2800      	cmp	r0, #0
 801144e:	d062      	beq.n	8011516 <__gethex+0x13a>
 8011450:	4633      	mov	r3, r6
 8011452:	7818      	ldrb	r0, [r3, #0]
 8011454:	2830      	cmp	r0, #48	; 0x30
 8011456:	461f      	mov	r7, r3
 8011458:	f103 0301 	add.w	r3, r3, #1
 801145c:	d0f9      	beq.n	8011452 <__gethex+0x76>
 801145e:	f7ff ffa7 	bl	80113b0 <__hexdig_fun>
 8011462:	2301      	movs	r3, #1
 8011464:	fab0 f480 	clz	r4, r0
 8011468:	0964      	lsrs	r4, r4, #5
 801146a:	4635      	mov	r5, r6
 801146c:	9300      	str	r3, [sp, #0]
 801146e:	463a      	mov	r2, r7
 8011470:	4616      	mov	r6, r2
 8011472:	3201      	adds	r2, #1
 8011474:	7830      	ldrb	r0, [r6, #0]
 8011476:	f7ff ff9b 	bl	80113b0 <__hexdig_fun>
 801147a:	2800      	cmp	r0, #0
 801147c:	d1f8      	bne.n	8011470 <__gethex+0x94>
 801147e:	9901      	ldr	r1, [sp, #4]
 8011480:	4652      	mov	r2, sl
 8011482:	4630      	mov	r0, r6
 8011484:	f7fe f9e1 	bl	800f84a <strncmp>
 8011488:	b980      	cbnz	r0, 80114ac <__gethex+0xd0>
 801148a:	b94d      	cbnz	r5, 80114a0 <__gethex+0xc4>
 801148c:	eb06 050a 	add.w	r5, r6, sl
 8011490:	462a      	mov	r2, r5
 8011492:	4616      	mov	r6, r2
 8011494:	3201      	adds	r2, #1
 8011496:	7830      	ldrb	r0, [r6, #0]
 8011498:	f7ff ff8a 	bl	80113b0 <__hexdig_fun>
 801149c:	2800      	cmp	r0, #0
 801149e:	d1f8      	bne.n	8011492 <__gethex+0xb6>
 80114a0:	1bad      	subs	r5, r5, r6
 80114a2:	00ad      	lsls	r5, r5, #2
 80114a4:	e004      	b.n	80114b0 <__gethex+0xd4>
 80114a6:	2400      	movs	r4, #0
 80114a8:	4625      	mov	r5, r4
 80114aa:	e7e0      	b.n	801146e <__gethex+0x92>
 80114ac:	2d00      	cmp	r5, #0
 80114ae:	d1f7      	bne.n	80114a0 <__gethex+0xc4>
 80114b0:	7833      	ldrb	r3, [r6, #0]
 80114b2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80114b6:	2b50      	cmp	r3, #80	; 0x50
 80114b8:	d13b      	bne.n	8011532 <__gethex+0x156>
 80114ba:	7873      	ldrb	r3, [r6, #1]
 80114bc:	2b2b      	cmp	r3, #43	; 0x2b
 80114be:	d02c      	beq.n	801151a <__gethex+0x13e>
 80114c0:	2b2d      	cmp	r3, #45	; 0x2d
 80114c2:	d02e      	beq.n	8011522 <__gethex+0x146>
 80114c4:	1c71      	adds	r1, r6, #1
 80114c6:	f04f 0900 	mov.w	r9, #0
 80114ca:	7808      	ldrb	r0, [r1, #0]
 80114cc:	f7ff ff70 	bl	80113b0 <__hexdig_fun>
 80114d0:	1e43      	subs	r3, r0, #1
 80114d2:	b2db      	uxtb	r3, r3
 80114d4:	2b18      	cmp	r3, #24
 80114d6:	d82c      	bhi.n	8011532 <__gethex+0x156>
 80114d8:	f1a0 0210 	sub.w	r2, r0, #16
 80114dc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80114e0:	f7ff ff66 	bl	80113b0 <__hexdig_fun>
 80114e4:	1e43      	subs	r3, r0, #1
 80114e6:	b2db      	uxtb	r3, r3
 80114e8:	2b18      	cmp	r3, #24
 80114ea:	d91d      	bls.n	8011528 <__gethex+0x14c>
 80114ec:	f1b9 0f00 	cmp.w	r9, #0
 80114f0:	d000      	beq.n	80114f4 <__gethex+0x118>
 80114f2:	4252      	negs	r2, r2
 80114f4:	4415      	add	r5, r2
 80114f6:	f8cb 1000 	str.w	r1, [fp]
 80114fa:	b1e4      	cbz	r4, 8011536 <__gethex+0x15a>
 80114fc:	9b00      	ldr	r3, [sp, #0]
 80114fe:	2b00      	cmp	r3, #0
 8011500:	bf14      	ite	ne
 8011502:	2700      	movne	r7, #0
 8011504:	2706      	moveq	r7, #6
 8011506:	4638      	mov	r0, r7
 8011508:	b009      	add	sp, #36	; 0x24
 801150a:	ecbd 8b02 	vpop	{d8}
 801150e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011512:	463e      	mov	r6, r7
 8011514:	4625      	mov	r5, r4
 8011516:	2401      	movs	r4, #1
 8011518:	e7ca      	b.n	80114b0 <__gethex+0xd4>
 801151a:	f04f 0900 	mov.w	r9, #0
 801151e:	1cb1      	adds	r1, r6, #2
 8011520:	e7d3      	b.n	80114ca <__gethex+0xee>
 8011522:	f04f 0901 	mov.w	r9, #1
 8011526:	e7fa      	b.n	801151e <__gethex+0x142>
 8011528:	230a      	movs	r3, #10
 801152a:	fb03 0202 	mla	r2, r3, r2, r0
 801152e:	3a10      	subs	r2, #16
 8011530:	e7d4      	b.n	80114dc <__gethex+0x100>
 8011532:	4631      	mov	r1, r6
 8011534:	e7df      	b.n	80114f6 <__gethex+0x11a>
 8011536:	1bf3      	subs	r3, r6, r7
 8011538:	3b01      	subs	r3, #1
 801153a:	4621      	mov	r1, r4
 801153c:	2b07      	cmp	r3, #7
 801153e:	dc0b      	bgt.n	8011558 <__gethex+0x17c>
 8011540:	ee18 0a10 	vmov	r0, s16
 8011544:	f000 fa82 	bl	8011a4c <_Balloc>
 8011548:	4604      	mov	r4, r0
 801154a:	b940      	cbnz	r0, 801155e <__gethex+0x182>
 801154c:	4b5d      	ldr	r3, [pc, #372]	; (80116c4 <__gethex+0x2e8>)
 801154e:	4602      	mov	r2, r0
 8011550:	21de      	movs	r1, #222	; 0xde
 8011552:	485d      	ldr	r0, [pc, #372]	; (80116c8 <__gethex+0x2ec>)
 8011554:	f001 fdd0 	bl	80130f8 <__assert_func>
 8011558:	3101      	adds	r1, #1
 801155a:	105b      	asrs	r3, r3, #1
 801155c:	e7ee      	b.n	801153c <__gethex+0x160>
 801155e:	f100 0914 	add.w	r9, r0, #20
 8011562:	f04f 0b00 	mov.w	fp, #0
 8011566:	f1ca 0301 	rsb	r3, sl, #1
 801156a:	f8cd 9008 	str.w	r9, [sp, #8]
 801156e:	f8cd b000 	str.w	fp, [sp]
 8011572:	9306      	str	r3, [sp, #24]
 8011574:	42b7      	cmp	r7, r6
 8011576:	d340      	bcc.n	80115fa <__gethex+0x21e>
 8011578:	9802      	ldr	r0, [sp, #8]
 801157a:	9b00      	ldr	r3, [sp, #0]
 801157c:	f840 3b04 	str.w	r3, [r0], #4
 8011580:	eba0 0009 	sub.w	r0, r0, r9
 8011584:	1080      	asrs	r0, r0, #2
 8011586:	0146      	lsls	r6, r0, #5
 8011588:	6120      	str	r0, [r4, #16]
 801158a:	4618      	mov	r0, r3
 801158c:	f000 fb50 	bl	8011c30 <__hi0bits>
 8011590:	1a30      	subs	r0, r6, r0
 8011592:	f8d8 6000 	ldr.w	r6, [r8]
 8011596:	42b0      	cmp	r0, r6
 8011598:	dd63      	ble.n	8011662 <__gethex+0x286>
 801159a:	1b87      	subs	r7, r0, r6
 801159c:	4639      	mov	r1, r7
 801159e:	4620      	mov	r0, r4
 80115a0:	f000 fef4 	bl	801238c <__any_on>
 80115a4:	4682      	mov	sl, r0
 80115a6:	b1a8      	cbz	r0, 80115d4 <__gethex+0x1f8>
 80115a8:	1e7b      	subs	r3, r7, #1
 80115aa:	1159      	asrs	r1, r3, #5
 80115ac:	f003 021f 	and.w	r2, r3, #31
 80115b0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80115b4:	f04f 0a01 	mov.w	sl, #1
 80115b8:	fa0a f202 	lsl.w	r2, sl, r2
 80115bc:	420a      	tst	r2, r1
 80115be:	d009      	beq.n	80115d4 <__gethex+0x1f8>
 80115c0:	4553      	cmp	r3, sl
 80115c2:	dd05      	ble.n	80115d0 <__gethex+0x1f4>
 80115c4:	1eb9      	subs	r1, r7, #2
 80115c6:	4620      	mov	r0, r4
 80115c8:	f000 fee0 	bl	801238c <__any_on>
 80115cc:	2800      	cmp	r0, #0
 80115ce:	d145      	bne.n	801165c <__gethex+0x280>
 80115d0:	f04f 0a02 	mov.w	sl, #2
 80115d4:	4639      	mov	r1, r7
 80115d6:	4620      	mov	r0, r4
 80115d8:	f7ff fe98 	bl	801130c <rshift>
 80115dc:	443d      	add	r5, r7
 80115de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80115e2:	42ab      	cmp	r3, r5
 80115e4:	da4c      	bge.n	8011680 <__gethex+0x2a4>
 80115e6:	ee18 0a10 	vmov	r0, s16
 80115ea:	4621      	mov	r1, r4
 80115ec:	f000 fa6e 	bl	8011acc <_Bfree>
 80115f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80115f2:	2300      	movs	r3, #0
 80115f4:	6013      	str	r3, [r2, #0]
 80115f6:	27a3      	movs	r7, #163	; 0xa3
 80115f8:	e785      	b.n	8011506 <__gethex+0x12a>
 80115fa:	1e73      	subs	r3, r6, #1
 80115fc:	9a05      	ldr	r2, [sp, #20]
 80115fe:	9303      	str	r3, [sp, #12]
 8011600:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011604:	4293      	cmp	r3, r2
 8011606:	d019      	beq.n	801163c <__gethex+0x260>
 8011608:	f1bb 0f20 	cmp.w	fp, #32
 801160c:	d107      	bne.n	801161e <__gethex+0x242>
 801160e:	9b02      	ldr	r3, [sp, #8]
 8011610:	9a00      	ldr	r2, [sp, #0]
 8011612:	f843 2b04 	str.w	r2, [r3], #4
 8011616:	9302      	str	r3, [sp, #8]
 8011618:	2300      	movs	r3, #0
 801161a:	9300      	str	r3, [sp, #0]
 801161c:	469b      	mov	fp, r3
 801161e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8011622:	f7ff fec5 	bl	80113b0 <__hexdig_fun>
 8011626:	9b00      	ldr	r3, [sp, #0]
 8011628:	f000 000f 	and.w	r0, r0, #15
 801162c:	fa00 f00b 	lsl.w	r0, r0, fp
 8011630:	4303      	orrs	r3, r0
 8011632:	9300      	str	r3, [sp, #0]
 8011634:	f10b 0b04 	add.w	fp, fp, #4
 8011638:	9b03      	ldr	r3, [sp, #12]
 801163a:	e00d      	b.n	8011658 <__gethex+0x27c>
 801163c:	9b03      	ldr	r3, [sp, #12]
 801163e:	9a06      	ldr	r2, [sp, #24]
 8011640:	4413      	add	r3, r2
 8011642:	42bb      	cmp	r3, r7
 8011644:	d3e0      	bcc.n	8011608 <__gethex+0x22c>
 8011646:	4618      	mov	r0, r3
 8011648:	9901      	ldr	r1, [sp, #4]
 801164a:	9307      	str	r3, [sp, #28]
 801164c:	4652      	mov	r2, sl
 801164e:	f7fe f8fc 	bl	800f84a <strncmp>
 8011652:	9b07      	ldr	r3, [sp, #28]
 8011654:	2800      	cmp	r0, #0
 8011656:	d1d7      	bne.n	8011608 <__gethex+0x22c>
 8011658:	461e      	mov	r6, r3
 801165a:	e78b      	b.n	8011574 <__gethex+0x198>
 801165c:	f04f 0a03 	mov.w	sl, #3
 8011660:	e7b8      	b.n	80115d4 <__gethex+0x1f8>
 8011662:	da0a      	bge.n	801167a <__gethex+0x29e>
 8011664:	1a37      	subs	r7, r6, r0
 8011666:	4621      	mov	r1, r4
 8011668:	ee18 0a10 	vmov	r0, s16
 801166c:	463a      	mov	r2, r7
 801166e:	f000 fc49 	bl	8011f04 <__lshift>
 8011672:	1bed      	subs	r5, r5, r7
 8011674:	4604      	mov	r4, r0
 8011676:	f100 0914 	add.w	r9, r0, #20
 801167a:	f04f 0a00 	mov.w	sl, #0
 801167e:	e7ae      	b.n	80115de <__gethex+0x202>
 8011680:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8011684:	42a8      	cmp	r0, r5
 8011686:	dd72      	ble.n	801176e <__gethex+0x392>
 8011688:	1b45      	subs	r5, r0, r5
 801168a:	42ae      	cmp	r6, r5
 801168c:	dc36      	bgt.n	80116fc <__gethex+0x320>
 801168e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011692:	2b02      	cmp	r3, #2
 8011694:	d02a      	beq.n	80116ec <__gethex+0x310>
 8011696:	2b03      	cmp	r3, #3
 8011698:	d02c      	beq.n	80116f4 <__gethex+0x318>
 801169a:	2b01      	cmp	r3, #1
 801169c:	d11c      	bne.n	80116d8 <__gethex+0x2fc>
 801169e:	42ae      	cmp	r6, r5
 80116a0:	d11a      	bne.n	80116d8 <__gethex+0x2fc>
 80116a2:	2e01      	cmp	r6, #1
 80116a4:	d112      	bne.n	80116cc <__gethex+0x2f0>
 80116a6:	9a04      	ldr	r2, [sp, #16]
 80116a8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80116ac:	6013      	str	r3, [r2, #0]
 80116ae:	2301      	movs	r3, #1
 80116b0:	6123      	str	r3, [r4, #16]
 80116b2:	f8c9 3000 	str.w	r3, [r9]
 80116b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80116b8:	2762      	movs	r7, #98	; 0x62
 80116ba:	601c      	str	r4, [r3, #0]
 80116bc:	e723      	b.n	8011506 <__gethex+0x12a>
 80116be:	bf00      	nop
 80116c0:	08014118 	.word	0x08014118
 80116c4:	080140a0 	.word	0x080140a0
 80116c8:	080140b1 	.word	0x080140b1
 80116cc:	1e71      	subs	r1, r6, #1
 80116ce:	4620      	mov	r0, r4
 80116d0:	f000 fe5c 	bl	801238c <__any_on>
 80116d4:	2800      	cmp	r0, #0
 80116d6:	d1e6      	bne.n	80116a6 <__gethex+0x2ca>
 80116d8:	ee18 0a10 	vmov	r0, s16
 80116dc:	4621      	mov	r1, r4
 80116de:	f000 f9f5 	bl	8011acc <_Bfree>
 80116e2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80116e4:	2300      	movs	r3, #0
 80116e6:	6013      	str	r3, [r2, #0]
 80116e8:	2750      	movs	r7, #80	; 0x50
 80116ea:	e70c      	b.n	8011506 <__gethex+0x12a>
 80116ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d1f2      	bne.n	80116d8 <__gethex+0x2fc>
 80116f2:	e7d8      	b.n	80116a6 <__gethex+0x2ca>
 80116f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d1d5      	bne.n	80116a6 <__gethex+0x2ca>
 80116fa:	e7ed      	b.n	80116d8 <__gethex+0x2fc>
 80116fc:	1e6f      	subs	r7, r5, #1
 80116fe:	f1ba 0f00 	cmp.w	sl, #0
 8011702:	d131      	bne.n	8011768 <__gethex+0x38c>
 8011704:	b127      	cbz	r7, 8011710 <__gethex+0x334>
 8011706:	4639      	mov	r1, r7
 8011708:	4620      	mov	r0, r4
 801170a:	f000 fe3f 	bl	801238c <__any_on>
 801170e:	4682      	mov	sl, r0
 8011710:	117b      	asrs	r3, r7, #5
 8011712:	2101      	movs	r1, #1
 8011714:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8011718:	f007 071f 	and.w	r7, r7, #31
 801171c:	fa01 f707 	lsl.w	r7, r1, r7
 8011720:	421f      	tst	r7, r3
 8011722:	4629      	mov	r1, r5
 8011724:	4620      	mov	r0, r4
 8011726:	bf18      	it	ne
 8011728:	f04a 0a02 	orrne.w	sl, sl, #2
 801172c:	1b76      	subs	r6, r6, r5
 801172e:	f7ff fded 	bl	801130c <rshift>
 8011732:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011736:	2702      	movs	r7, #2
 8011738:	f1ba 0f00 	cmp.w	sl, #0
 801173c:	d048      	beq.n	80117d0 <__gethex+0x3f4>
 801173e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011742:	2b02      	cmp	r3, #2
 8011744:	d015      	beq.n	8011772 <__gethex+0x396>
 8011746:	2b03      	cmp	r3, #3
 8011748:	d017      	beq.n	801177a <__gethex+0x39e>
 801174a:	2b01      	cmp	r3, #1
 801174c:	d109      	bne.n	8011762 <__gethex+0x386>
 801174e:	f01a 0f02 	tst.w	sl, #2
 8011752:	d006      	beq.n	8011762 <__gethex+0x386>
 8011754:	f8d9 0000 	ldr.w	r0, [r9]
 8011758:	ea4a 0a00 	orr.w	sl, sl, r0
 801175c:	f01a 0f01 	tst.w	sl, #1
 8011760:	d10e      	bne.n	8011780 <__gethex+0x3a4>
 8011762:	f047 0710 	orr.w	r7, r7, #16
 8011766:	e033      	b.n	80117d0 <__gethex+0x3f4>
 8011768:	f04f 0a01 	mov.w	sl, #1
 801176c:	e7d0      	b.n	8011710 <__gethex+0x334>
 801176e:	2701      	movs	r7, #1
 8011770:	e7e2      	b.n	8011738 <__gethex+0x35c>
 8011772:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011774:	f1c3 0301 	rsb	r3, r3, #1
 8011778:	9315      	str	r3, [sp, #84]	; 0x54
 801177a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801177c:	2b00      	cmp	r3, #0
 801177e:	d0f0      	beq.n	8011762 <__gethex+0x386>
 8011780:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011784:	f104 0314 	add.w	r3, r4, #20
 8011788:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801178c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011790:	f04f 0c00 	mov.w	ip, #0
 8011794:	4618      	mov	r0, r3
 8011796:	f853 2b04 	ldr.w	r2, [r3], #4
 801179a:	f1b2 3fff 	cmp.w	r2, #4294967295
 801179e:	d01c      	beq.n	80117da <__gethex+0x3fe>
 80117a0:	3201      	adds	r2, #1
 80117a2:	6002      	str	r2, [r0, #0]
 80117a4:	2f02      	cmp	r7, #2
 80117a6:	f104 0314 	add.w	r3, r4, #20
 80117aa:	d13f      	bne.n	801182c <__gethex+0x450>
 80117ac:	f8d8 2000 	ldr.w	r2, [r8]
 80117b0:	3a01      	subs	r2, #1
 80117b2:	42b2      	cmp	r2, r6
 80117b4:	d10a      	bne.n	80117cc <__gethex+0x3f0>
 80117b6:	1171      	asrs	r1, r6, #5
 80117b8:	2201      	movs	r2, #1
 80117ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80117be:	f006 061f 	and.w	r6, r6, #31
 80117c2:	fa02 f606 	lsl.w	r6, r2, r6
 80117c6:	421e      	tst	r6, r3
 80117c8:	bf18      	it	ne
 80117ca:	4617      	movne	r7, r2
 80117cc:	f047 0720 	orr.w	r7, r7, #32
 80117d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80117d2:	601c      	str	r4, [r3, #0]
 80117d4:	9b04      	ldr	r3, [sp, #16]
 80117d6:	601d      	str	r5, [r3, #0]
 80117d8:	e695      	b.n	8011506 <__gethex+0x12a>
 80117da:	4299      	cmp	r1, r3
 80117dc:	f843 cc04 	str.w	ip, [r3, #-4]
 80117e0:	d8d8      	bhi.n	8011794 <__gethex+0x3b8>
 80117e2:	68a3      	ldr	r3, [r4, #8]
 80117e4:	459b      	cmp	fp, r3
 80117e6:	db19      	blt.n	801181c <__gethex+0x440>
 80117e8:	6861      	ldr	r1, [r4, #4]
 80117ea:	ee18 0a10 	vmov	r0, s16
 80117ee:	3101      	adds	r1, #1
 80117f0:	f000 f92c 	bl	8011a4c <_Balloc>
 80117f4:	4681      	mov	r9, r0
 80117f6:	b918      	cbnz	r0, 8011800 <__gethex+0x424>
 80117f8:	4b1a      	ldr	r3, [pc, #104]	; (8011864 <__gethex+0x488>)
 80117fa:	4602      	mov	r2, r0
 80117fc:	2184      	movs	r1, #132	; 0x84
 80117fe:	e6a8      	b.n	8011552 <__gethex+0x176>
 8011800:	6922      	ldr	r2, [r4, #16]
 8011802:	3202      	adds	r2, #2
 8011804:	f104 010c 	add.w	r1, r4, #12
 8011808:	0092      	lsls	r2, r2, #2
 801180a:	300c      	adds	r0, #12
 801180c:	f7fd f8ee 	bl	800e9ec <memcpy>
 8011810:	4621      	mov	r1, r4
 8011812:	ee18 0a10 	vmov	r0, s16
 8011816:	f000 f959 	bl	8011acc <_Bfree>
 801181a:	464c      	mov	r4, r9
 801181c:	6923      	ldr	r3, [r4, #16]
 801181e:	1c5a      	adds	r2, r3, #1
 8011820:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011824:	6122      	str	r2, [r4, #16]
 8011826:	2201      	movs	r2, #1
 8011828:	615a      	str	r2, [r3, #20]
 801182a:	e7bb      	b.n	80117a4 <__gethex+0x3c8>
 801182c:	6922      	ldr	r2, [r4, #16]
 801182e:	455a      	cmp	r2, fp
 8011830:	dd0b      	ble.n	801184a <__gethex+0x46e>
 8011832:	2101      	movs	r1, #1
 8011834:	4620      	mov	r0, r4
 8011836:	f7ff fd69 	bl	801130c <rshift>
 801183a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801183e:	3501      	adds	r5, #1
 8011840:	42ab      	cmp	r3, r5
 8011842:	f6ff aed0 	blt.w	80115e6 <__gethex+0x20a>
 8011846:	2701      	movs	r7, #1
 8011848:	e7c0      	b.n	80117cc <__gethex+0x3f0>
 801184a:	f016 061f 	ands.w	r6, r6, #31
 801184e:	d0fa      	beq.n	8011846 <__gethex+0x46a>
 8011850:	4453      	add	r3, sl
 8011852:	f1c6 0620 	rsb	r6, r6, #32
 8011856:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801185a:	f000 f9e9 	bl	8011c30 <__hi0bits>
 801185e:	42b0      	cmp	r0, r6
 8011860:	dbe7      	blt.n	8011832 <__gethex+0x456>
 8011862:	e7f0      	b.n	8011846 <__gethex+0x46a>
 8011864:	080140a0 	.word	0x080140a0

08011868 <L_shift>:
 8011868:	f1c2 0208 	rsb	r2, r2, #8
 801186c:	0092      	lsls	r2, r2, #2
 801186e:	b570      	push	{r4, r5, r6, lr}
 8011870:	f1c2 0620 	rsb	r6, r2, #32
 8011874:	6843      	ldr	r3, [r0, #4]
 8011876:	6804      	ldr	r4, [r0, #0]
 8011878:	fa03 f506 	lsl.w	r5, r3, r6
 801187c:	432c      	orrs	r4, r5
 801187e:	40d3      	lsrs	r3, r2
 8011880:	6004      	str	r4, [r0, #0]
 8011882:	f840 3f04 	str.w	r3, [r0, #4]!
 8011886:	4288      	cmp	r0, r1
 8011888:	d3f4      	bcc.n	8011874 <L_shift+0xc>
 801188a:	bd70      	pop	{r4, r5, r6, pc}

0801188c <__match>:
 801188c:	b530      	push	{r4, r5, lr}
 801188e:	6803      	ldr	r3, [r0, #0]
 8011890:	3301      	adds	r3, #1
 8011892:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011896:	b914      	cbnz	r4, 801189e <__match+0x12>
 8011898:	6003      	str	r3, [r0, #0]
 801189a:	2001      	movs	r0, #1
 801189c:	bd30      	pop	{r4, r5, pc}
 801189e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80118a2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80118a6:	2d19      	cmp	r5, #25
 80118a8:	bf98      	it	ls
 80118aa:	3220      	addls	r2, #32
 80118ac:	42a2      	cmp	r2, r4
 80118ae:	d0f0      	beq.n	8011892 <__match+0x6>
 80118b0:	2000      	movs	r0, #0
 80118b2:	e7f3      	b.n	801189c <__match+0x10>

080118b4 <__hexnan>:
 80118b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118b8:	680b      	ldr	r3, [r1, #0]
 80118ba:	115e      	asrs	r6, r3, #5
 80118bc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80118c0:	f013 031f 	ands.w	r3, r3, #31
 80118c4:	b087      	sub	sp, #28
 80118c6:	bf18      	it	ne
 80118c8:	3604      	addne	r6, #4
 80118ca:	2500      	movs	r5, #0
 80118cc:	1f37      	subs	r7, r6, #4
 80118ce:	4690      	mov	r8, r2
 80118d0:	6802      	ldr	r2, [r0, #0]
 80118d2:	9301      	str	r3, [sp, #4]
 80118d4:	4682      	mov	sl, r0
 80118d6:	f846 5c04 	str.w	r5, [r6, #-4]
 80118da:	46b9      	mov	r9, r7
 80118dc:	463c      	mov	r4, r7
 80118de:	9502      	str	r5, [sp, #8]
 80118e0:	46ab      	mov	fp, r5
 80118e2:	7851      	ldrb	r1, [r2, #1]
 80118e4:	1c53      	adds	r3, r2, #1
 80118e6:	9303      	str	r3, [sp, #12]
 80118e8:	b341      	cbz	r1, 801193c <__hexnan+0x88>
 80118ea:	4608      	mov	r0, r1
 80118ec:	9205      	str	r2, [sp, #20]
 80118ee:	9104      	str	r1, [sp, #16]
 80118f0:	f7ff fd5e 	bl	80113b0 <__hexdig_fun>
 80118f4:	2800      	cmp	r0, #0
 80118f6:	d14f      	bne.n	8011998 <__hexnan+0xe4>
 80118f8:	9904      	ldr	r1, [sp, #16]
 80118fa:	9a05      	ldr	r2, [sp, #20]
 80118fc:	2920      	cmp	r1, #32
 80118fe:	d818      	bhi.n	8011932 <__hexnan+0x7e>
 8011900:	9b02      	ldr	r3, [sp, #8]
 8011902:	459b      	cmp	fp, r3
 8011904:	dd13      	ble.n	801192e <__hexnan+0x7a>
 8011906:	454c      	cmp	r4, r9
 8011908:	d206      	bcs.n	8011918 <__hexnan+0x64>
 801190a:	2d07      	cmp	r5, #7
 801190c:	dc04      	bgt.n	8011918 <__hexnan+0x64>
 801190e:	462a      	mov	r2, r5
 8011910:	4649      	mov	r1, r9
 8011912:	4620      	mov	r0, r4
 8011914:	f7ff ffa8 	bl	8011868 <L_shift>
 8011918:	4544      	cmp	r4, r8
 801191a:	d950      	bls.n	80119be <__hexnan+0x10a>
 801191c:	2300      	movs	r3, #0
 801191e:	f1a4 0904 	sub.w	r9, r4, #4
 8011922:	f844 3c04 	str.w	r3, [r4, #-4]
 8011926:	f8cd b008 	str.w	fp, [sp, #8]
 801192a:	464c      	mov	r4, r9
 801192c:	461d      	mov	r5, r3
 801192e:	9a03      	ldr	r2, [sp, #12]
 8011930:	e7d7      	b.n	80118e2 <__hexnan+0x2e>
 8011932:	2929      	cmp	r1, #41	; 0x29
 8011934:	d156      	bne.n	80119e4 <__hexnan+0x130>
 8011936:	3202      	adds	r2, #2
 8011938:	f8ca 2000 	str.w	r2, [sl]
 801193c:	f1bb 0f00 	cmp.w	fp, #0
 8011940:	d050      	beq.n	80119e4 <__hexnan+0x130>
 8011942:	454c      	cmp	r4, r9
 8011944:	d206      	bcs.n	8011954 <__hexnan+0xa0>
 8011946:	2d07      	cmp	r5, #7
 8011948:	dc04      	bgt.n	8011954 <__hexnan+0xa0>
 801194a:	462a      	mov	r2, r5
 801194c:	4649      	mov	r1, r9
 801194e:	4620      	mov	r0, r4
 8011950:	f7ff ff8a 	bl	8011868 <L_shift>
 8011954:	4544      	cmp	r4, r8
 8011956:	d934      	bls.n	80119c2 <__hexnan+0x10e>
 8011958:	f1a8 0204 	sub.w	r2, r8, #4
 801195c:	4623      	mov	r3, r4
 801195e:	f853 1b04 	ldr.w	r1, [r3], #4
 8011962:	f842 1f04 	str.w	r1, [r2, #4]!
 8011966:	429f      	cmp	r7, r3
 8011968:	d2f9      	bcs.n	801195e <__hexnan+0xaa>
 801196a:	1b3b      	subs	r3, r7, r4
 801196c:	f023 0303 	bic.w	r3, r3, #3
 8011970:	3304      	adds	r3, #4
 8011972:	3401      	adds	r4, #1
 8011974:	3e03      	subs	r6, #3
 8011976:	42b4      	cmp	r4, r6
 8011978:	bf88      	it	hi
 801197a:	2304      	movhi	r3, #4
 801197c:	4443      	add	r3, r8
 801197e:	2200      	movs	r2, #0
 8011980:	f843 2b04 	str.w	r2, [r3], #4
 8011984:	429f      	cmp	r7, r3
 8011986:	d2fb      	bcs.n	8011980 <__hexnan+0xcc>
 8011988:	683b      	ldr	r3, [r7, #0]
 801198a:	b91b      	cbnz	r3, 8011994 <__hexnan+0xe0>
 801198c:	4547      	cmp	r7, r8
 801198e:	d127      	bne.n	80119e0 <__hexnan+0x12c>
 8011990:	2301      	movs	r3, #1
 8011992:	603b      	str	r3, [r7, #0]
 8011994:	2005      	movs	r0, #5
 8011996:	e026      	b.n	80119e6 <__hexnan+0x132>
 8011998:	3501      	adds	r5, #1
 801199a:	2d08      	cmp	r5, #8
 801199c:	f10b 0b01 	add.w	fp, fp, #1
 80119a0:	dd06      	ble.n	80119b0 <__hexnan+0xfc>
 80119a2:	4544      	cmp	r4, r8
 80119a4:	d9c3      	bls.n	801192e <__hexnan+0x7a>
 80119a6:	2300      	movs	r3, #0
 80119a8:	f844 3c04 	str.w	r3, [r4, #-4]
 80119ac:	2501      	movs	r5, #1
 80119ae:	3c04      	subs	r4, #4
 80119b0:	6822      	ldr	r2, [r4, #0]
 80119b2:	f000 000f 	and.w	r0, r0, #15
 80119b6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80119ba:	6022      	str	r2, [r4, #0]
 80119bc:	e7b7      	b.n	801192e <__hexnan+0x7a>
 80119be:	2508      	movs	r5, #8
 80119c0:	e7b5      	b.n	801192e <__hexnan+0x7a>
 80119c2:	9b01      	ldr	r3, [sp, #4]
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d0df      	beq.n	8011988 <__hexnan+0xd4>
 80119c8:	f04f 32ff 	mov.w	r2, #4294967295
 80119cc:	f1c3 0320 	rsb	r3, r3, #32
 80119d0:	fa22 f303 	lsr.w	r3, r2, r3
 80119d4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80119d8:	401a      	ands	r2, r3
 80119da:	f846 2c04 	str.w	r2, [r6, #-4]
 80119de:	e7d3      	b.n	8011988 <__hexnan+0xd4>
 80119e0:	3f04      	subs	r7, #4
 80119e2:	e7d1      	b.n	8011988 <__hexnan+0xd4>
 80119e4:	2004      	movs	r0, #4
 80119e6:	b007      	add	sp, #28
 80119e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080119ec <_localeconv_r>:
 80119ec:	4800      	ldr	r0, [pc, #0]	; (80119f0 <_localeconv_r+0x4>)
 80119ee:	4770      	bx	lr
 80119f0:	20000420 	.word	0x20000420

080119f4 <_lseek_r>:
 80119f4:	b538      	push	{r3, r4, r5, lr}
 80119f6:	4d07      	ldr	r5, [pc, #28]	; (8011a14 <_lseek_r+0x20>)
 80119f8:	4604      	mov	r4, r0
 80119fa:	4608      	mov	r0, r1
 80119fc:	4611      	mov	r1, r2
 80119fe:	2200      	movs	r2, #0
 8011a00:	602a      	str	r2, [r5, #0]
 8011a02:	461a      	mov	r2, r3
 8011a04:	f7f0 fc7a 	bl	80022fc <_lseek>
 8011a08:	1c43      	adds	r3, r0, #1
 8011a0a:	d102      	bne.n	8011a12 <_lseek_r+0x1e>
 8011a0c:	682b      	ldr	r3, [r5, #0]
 8011a0e:	b103      	cbz	r3, 8011a12 <_lseek_r+0x1e>
 8011a10:	6023      	str	r3, [r4, #0]
 8011a12:	bd38      	pop	{r3, r4, r5, pc}
 8011a14:	20000770 	.word	0x20000770

08011a18 <malloc>:
 8011a18:	4b02      	ldr	r3, [pc, #8]	; (8011a24 <malloc+0xc>)
 8011a1a:	4601      	mov	r1, r0
 8011a1c:	6818      	ldr	r0, [r3, #0]
 8011a1e:	f000 bd59 	b.w	80124d4 <_malloc_r>
 8011a22:	bf00      	nop
 8011a24:	200002c8 	.word	0x200002c8

08011a28 <__ascii_mbtowc>:
 8011a28:	b082      	sub	sp, #8
 8011a2a:	b901      	cbnz	r1, 8011a2e <__ascii_mbtowc+0x6>
 8011a2c:	a901      	add	r1, sp, #4
 8011a2e:	b142      	cbz	r2, 8011a42 <__ascii_mbtowc+0x1a>
 8011a30:	b14b      	cbz	r3, 8011a46 <__ascii_mbtowc+0x1e>
 8011a32:	7813      	ldrb	r3, [r2, #0]
 8011a34:	600b      	str	r3, [r1, #0]
 8011a36:	7812      	ldrb	r2, [r2, #0]
 8011a38:	1e10      	subs	r0, r2, #0
 8011a3a:	bf18      	it	ne
 8011a3c:	2001      	movne	r0, #1
 8011a3e:	b002      	add	sp, #8
 8011a40:	4770      	bx	lr
 8011a42:	4610      	mov	r0, r2
 8011a44:	e7fb      	b.n	8011a3e <__ascii_mbtowc+0x16>
 8011a46:	f06f 0001 	mvn.w	r0, #1
 8011a4a:	e7f8      	b.n	8011a3e <__ascii_mbtowc+0x16>

08011a4c <_Balloc>:
 8011a4c:	b570      	push	{r4, r5, r6, lr}
 8011a4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011a50:	4604      	mov	r4, r0
 8011a52:	460d      	mov	r5, r1
 8011a54:	b976      	cbnz	r6, 8011a74 <_Balloc+0x28>
 8011a56:	2010      	movs	r0, #16
 8011a58:	f7ff ffde 	bl	8011a18 <malloc>
 8011a5c:	4602      	mov	r2, r0
 8011a5e:	6260      	str	r0, [r4, #36]	; 0x24
 8011a60:	b920      	cbnz	r0, 8011a6c <_Balloc+0x20>
 8011a62:	4b18      	ldr	r3, [pc, #96]	; (8011ac4 <_Balloc+0x78>)
 8011a64:	4818      	ldr	r0, [pc, #96]	; (8011ac8 <_Balloc+0x7c>)
 8011a66:	2166      	movs	r1, #102	; 0x66
 8011a68:	f001 fb46 	bl	80130f8 <__assert_func>
 8011a6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011a70:	6006      	str	r6, [r0, #0]
 8011a72:	60c6      	str	r6, [r0, #12]
 8011a74:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011a76:	68f3      	ldr	r3, [r6, #12]
 8011a78:	b183      	cbz	r3, 8011a9c <_Balloc+0x50>
 8011a7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011a7c:	68db      	ldr	r3, [r3, #12]
 8011a7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011a82:	b9b8      	cbnz	r0, 8011ab4 <_Balloc+0x68>
 8011a84:	2101      	movs	r1, #1
 8011a86:	fa01 f605 	lsl.w	r6, r1, r5
 8011a8a:	1d72      	adds	r2, r6, #5
 8011a8c:	0092      	lsls	r2, r2, #2
 8011a8e:	4620      	mov	r0, r4
 8011a90:	f000 fc9d 	bl	80123ce <_calloc_r>
 8011a94:	b160      	cbz	r0, 8011ab0 <_Balloc+0x64>
 8011a96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011a9a:	e00e      	b.n	8011aba <_Balloc+0x6e>
 8011a9c:	2221      	movs	r2, #33	; 0x21
 8011a9e:	2104      	movs	r1, #4
 8011aa0:	4620      	mov	r0, r4
 8011aa2:	f000 fc94 	bl	80123ce <_calloc_r>
 8011aa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011aa8:	60f0      	str	r0, [r6, #12]
 8011aaa:	68db      	ldr	r3, [r3, #12]
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d1e4      	bne.n	8011a7a <_Balloc+0x2e>
 8011ab0:	2000      	movs	r0, #0
 8011ab2:	bd70      	pop	{r4, r5, r6, pc}
 8011ab4:	6802      	ldr	r2, [r0, #0]
 8011ab6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011aba:	2300      	movs	r3, #0
 8011abc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011ac0:	e7f7      	b.n	8011ab2 <_Balloc+0x66>
 8011ac2:	bf00      	nop
 8011ac4:	0801402e 	.word	0x0801402e
 8011ac8:	0801412c 	.word	0x0801412c

08011acc <_Bfree>:
 8011acc:	b570      	push	{r4, r5, r6, lr}
 8011ace:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011ad0:	4605      	mov	r5, r0
 8011ad2:	460c      	mov	r4, r1
 8011ad4:	b976      	cbnz	r6, 8011af4 <_Bfree+0x28>
 8011ad6:	2010      	movs	r0, #16
 8011ad8:	f7ff ff9e 	bl	8011a18 <malloc>
 8011adc:	4602      	mov	r2, r0
 8011ade:	6268      	str	r0, [r5, #36]	; 0x24
 8011ae0:	b920      	cbnz	r0, 8011aec <_Bfree+0x20>
 8011ae2:	4b09      	ldr	r3, [pc, #36]	; (8011b08 <_Bfree+0x3c>)
 8011ae4:	4809      	ldr	r0, [pc, #36]	; (8011b0c <_Bfree+0x40>)
 8011ae6:	218a      	movs	r1, #138	; 0x8a
 8011ae8:	f001 fb06 	bl	80130f8 <__assert_func>
 8011aec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011af0:	6006      	str	r6, [r0, #0]
 8011af2:	60c6      	str	r6, [r0, #12]
 8011af4:	b13c      	cbz	r4, 8011b06 <_Bfree+0x3a>
 8011af6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011af8:	6862      	ldr	r2, [r4, #4]
 8011afa:	68db      	ldr	r3, [r3, #12]
 8011afc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011b00:	6021      	str	r1, [r4, #0]
 8011b02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011b06:	bd70      	pop	{r4, r5, r6, pc}
 8011b08:	0801402e 	.word	0x0801402e
 8011b0c:	0801412c 	.word	0x0801412c

08011b10 <__multadd>:
 8011b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b14:	690d      	ldr	r5, [r1, #16]
 8011b16:	4607      	mov	r7, r0
 8011b18:	460c      	mov	r4, r1
 8011b1a:	461e      	mov	r6, r3
 8011b1c:	f101 0c14 	add.w	ip, r1, #20
 8011b20:	2000      	movs	r0, #0
 8011b22:	f8dc 3000 	ldr.w	r3, [ip]
 8011b26:	b299      	uxth	r1, r3
 8011b28:	fb02 6101 	mla	r1, r2, r1, r6
 8011b2c:	0c1e      	lsrs	r6, r3, #16
 8011b2e:	0c0b      	lsrs	r3, r1, #16
 8011b30:	fb02 3306 	mla	r3, r2, r6, r3
 8011b34:	b289      	uxth	r1, r1
 8011b36:	3001      	adds	r0, #1
 8011b38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011b3c:	4285      	cmp	r5, r0
 8011b3e:	f84c 1b04 	str.w	r1, [ip], #4
 8011b42:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011b46:	dcec      	bgt.n	8011b22 <__multadd+0x12>
 8011b48:	b30e      	cbz	r6, 8011b8e <__multadd+0x7e>
 8011b4a:	68a3      	ldr	r3, [r4, #8]
 8011b4c:	42ab      	cmp	r3, r5
 8011b4e:	dc19      	bgt.n	8011b84 <__multadd+0x74>
 8011b50:	6861      	ldr	r1, [r4, #4]
 8011b52:	4638      	mov	r0, r7
 8011b54:	3101      	adds	r1, #1
 8011b56:	f7ff ff79 	bl	8011a4c <_Balloc>
 8011b5a:	4680      	mov	r8, r0
 8011b5c:	b928      	cbnz	r0, 8011b6a <__multadd+0x5a>
 8011b5e:	4602      	mov	r2, r0
 8011b60:	4b0c      	ldr	r3, [pc, #48]	; (8011b94 <__multadd+0x84>)
 8011b62:	480d      	ldr	r0, [pc, #52]	; (8011b98 <__multadd+0x88>)
 8011b64:	21b5      	movs	r1, #181	; 0xb5
 8011b66:	f001 fac7 	bl	80130f8 <__assert_func>
 8011b6a:	6922      	ldr	r2, [r4, #16]
 8011b6c:	3202      	adds	r2, #2
 8011b6e:	f104 010c 	add.w	r1, r4, #12
 8011b72:	0092      	lsls	r2, r2, #2
 8011b74:	300c      	adds	r0, #12
 8011b76:	f7fc ff39 	bl	800e9ec <memcpy>
 8011b7a:	4621      	mov	r1, r4
 8011b7c:	4638      	mov	r0, r7
 8011b7e:	f7ff ffa5 	bl	8011acc <_Bfree>
 8011b82:	4644      	mov	r4, r8
 8011b84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011b88:	3501      	adds	r5, #1
 8011b8a:	615e      	str	r6, [r3, #20]
 8011b8c:	6125      	str	r5, [r4, #16]
 8011b8e:	4620      	mov	r0, r4
 8011b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b94:	080140a0 	.word	0x080140a0
 8011b98:	0801412c 	.word	0x0801412c

08011b9c <__s2b>:
 8011b9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ba0:	460c      	mov	r4, r1
 8011ba2:	4615      	mov	r5, r2
 8011ba4:	461f      	mov	r7, r3
 8011ba6:	2209      	movs	r2, #9
 8011ba8:	3308      	adds	r3, #8
 8011baa:	4606      	mov	r6, r0
 8011bac:	fb93 f3f2 	sdiv	r3, r3, r2
 8011bb0:	2100      	movs	r1, #0
 8011bb2:	2201      	movs	r2, #1
 8011bb4:	429a      	cmp	r2, r3
 8011bb6:	db09      	blt.n	8011bcc <__s2b+0x30>
 8011bb8:	4630      	mov	r0, r6
 8011bba:	f7ff ff47 	bl	8011a4c <_Balloc>
 8011bbe:	b940      	cbnz	r0, 8011bd2 <__s2b+0x36>
 8011bc0:	4602      	mov	r2, r0
 8011bc2:	4b19      	ldr	r3, [pc, #100]	; (8011c28 <__s2b+0x8c>)
 8011bc4:	4819      	ldr	r0, [pc, #100]	; (8011c2c <__s2b+0x90>)
 8011bc6:	21ce      	movs	r1, #206	; 0xce
 8011bc8:	f001 fa96 	bl	80130f8 <__assert_func>
 8011bcc:	0052      	lsls	r2, r2, #1
 8011bce:	3101      	adds	r1, #1
 8011bd0:	e7f0      	b.n	8011bb4 <__s2b+0x18>
 8011bd2:	9b08      	ldr	r3, [sp, #32]
 8011bd4:	6143      	str	r3, [r0, #20]
 8011bd6:	2d09      	cmp	r5, #9
 8011bd8:	f04f 0301 	mov.w	r3, #1
 8011bdc:	6103      	str	r3, [r0, #16]
 8011bde:	dd16      	ble.n	8011c0e <__s2b+0x72>
 8011be0:	f104 0909 	add.w	r9, r4, #9
 8011be4:	46c8      	mov	r8, r9
 8011be6:	442c      	add	r4, r5
 8011be8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011bec:	4601      	mov	r1, r0
 8011bee:	3b30      	subs	r3, #48	; 0x30
 8011bf0:	220a      	movs	r2, #10
 8011bf2:	4630      	mov	r0, r6
 8011bf4:	f7ff ff8c 	bl	8011b10 <__multadd>
 8011bf8:	45a0      	cmp	r8, r4
 8011bfa:	d1f5      	bne.n	8011be8 <__s2b+0x4c>
 8011bfc:	f1a5 0408 	sub.w	r4, r5, #8
 8011c00:	444c      	add	r4, r9
 8011c02:	1b2d      	subs	r5, r5, r4
 8011c04:	1963      	adds	r3, r4, r5
 8011c06:	42bb      	cmp	r3, r7
 8011c08:	db04      	blt.n	8011c14 <__s2b+0x78>
 8011c0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c0e:	340a      	adds	r4, #10
 8011c10:	2509      	movs	r5, #9
 8011c12:	e7f6      	b.n	8011c02 <__s2b+0x66>
 8011c14:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011c18:	4601      	mov	r1, r0
 8011c1a:	3b30      	subs	r3, #48	; 0x30
 8011c1c:	220a      	movs	r2, #10
 8011c1e:	4630      	mov	r0, r6
 8011c20:	f7ff ff76 	bl	8011b10 <__multadd>
 8011c24:	e7ee      	b.n	8011c04 <__s2b+0x68>
 8011c26:	bf00      	nop
 8011c28:	080140a0 	.word	0x080140a0
 8011c2c:	0801412c 	.word	0x0801412c

08011c30 <__hi0bits>:
 8011c30:	0c03      	lsrs	r3, r0, #16
 8011c32:	041b      	lsls	r3, r3, #16
 8011c34:	b9d3      	cbnz	r3, 8011c6c <__hi0bits+0x3c>
 8011c36:	0400      	lsls	r0, r0, #16
 8011c38:	2310      	movs	r3, #16
 8011c3a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011c3e:	bf04      	itt	eq
 8011c40:	0200      	lsleq	r0, r0, #8
 8011c42:	3308      	addeq	r3, #8
 8011c44:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011c48:	bf04      	itt	eq
 8011c4a:	0100      	lsleq	r0, r0, #4
 8011c4c:	3304      	addeq	r3, #4
 8011c4e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011c52:	bf04      	itt	eq
 8011c54:	0080      	lsleq	r0, r0, #2
 8011c56:	3302      	addeq	r3, #2
 8011c58:	2800      	cmp	r0, #0
 8011c5a:	db05      	blt.n	8011c68 <__hi0bits+0x38>
 8011c5c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011c60:	f103 0301 	add.w	r3, r3, #1
 8011c64:	bf08      	it	eq
 8011c66:	2320      	moveq	r3, #32
 8011c68:	4618      	mov	r0, r3
 8011c6a:	4770      	bx	lr
 8011c6c:	2300      	movs	r3, #0
 8011c6e:	e7e4      	b.n	8011c3a <__hi0bits+0xa>

08011c70 <__lo0bits>:
 8011c70:	6803      	ldr	r3, [r0, #0]
 8011c72:	f013 0207 	ands.w	r2, r3, #7
 8011c76:	4601      	mov	r1, r0
 8011c78:	d00b      	beq.n	8011c92 <__lo0bits+0x22>
 8011c7a:	07da      	lsls	r2, r3, #31
 8011c7c:	d423      	bmi.n	8011cc6 <__lo0bits+0x56>
 8011c7e:	0798      	lsls	r0, r3, #30
 8011c80:	bf49      	itett	mi
 8011c82:	085b      	lsrmi	r3, r3, #1
 8011c84:	089b      	lsrpl	r3, r3, #2
 8011c86:	2001      	movmi	r0, #1
 8011c88:	600b      	strmi	r3, [r1, #0]
 8011c8a:	bf5c      	itt	pl
 8011c8c:	600b      	strpl	r3, [r1, #0]
 8011c8e:	2002      	movpl	r0, #2
 8011c90:	4770      	bx	lr
 8011c92:	b298      	uxth	r0, r3
 8011c94:	b9a8      	cbnz	r0, 8011cc2 <__lo0bits+0x52>
 8011c96:	0c1b      	lsrs	r3, r3, #16
 8011c98:	2010      	movs	r0, #16
 8011c9a:	b2da      	uxtb	r2, r3
 8011c9c:	b90a      	cbnz	r2, 8011ca2 <__lo0bits+0x32>
 8011c9e:	3008      	adds	r0, #8
 8011ca0:	0a1b      	lsrs	r3, r3, #8
 8011ca2:	071a      	lsls	r2, r3, #28
 8011ca4:	bf04      	itt	eq
 8011ca6:	091b      	lsreq	r3, r3, #4
 8011ca8:	3004      	addeq	r0, #4
 8011caa:	079a      	lsls	r2, r3, #30
 8011cac:	bf04      	itt	eq
 8011cae:	089b      	lsreq	r3, r3, #2
 8011cb0:	3002      	addeq	r0, #2
 8011cb2:	07da      	lsls	r2, r3, #31
 8011cb4:	d403      	bmi.n	8011cbe <__lo0bits+0x4e>
 8011cb6:	085b      	lsrs	r3, r3, #1
 8011cb8:	f100 0001 	add.w	r0, r0, #1
 8011cbc:	d005      	beq.n	8011cca <__lo0bits+0x5a>
 8011cbe:	600b      	str	r3, [r1, #0]
 8011cc0:	4770      	bx	lr
 8011cc2:	4610      	mov	r0, r2
 8011cc4:	e7e9      	b.n	8011c9a <__lo0bits+0x2a>
 8011cc6:	2000      	movs	r0, #0
 8011cc8:	4770      	bx	lr
 8011cca:	2020      	movs	r0, #32
 8011ccc:	4770      	bx	lr
	...

08011cd0 <__i2b>:
 8011cd0:	b510      	push	{r4, lr}
 8011cd2:	460c      	mov	r4, r1
 8011cd4:	2101      	movs	r1, #1
 8011cd6:	f7ff feb9 	bl	8011a4c <_Balloc>
 8011cda:	4602      	mov	r2, r0
 8011cdc:	b928      	cbnz	r0, 8011cea <__i2b+0x1a>
 8011cde:	4b05      	ldr	r3, [pc, #20]	; (8011cf4 <__i2b+0x24>)
 8011ce0:	4805      	ldr	r0, [pc, #20]	; (8011cf8 <__i2b+0x28>)
 8011ce2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011ce6:	f001 fa07 	bl	80130f8 <__assert_func>
 8011cea:	2301      	movs	r3, #1
 8011cec:	6144      	str	r4, [r0, #20]
 8011cee:	6103      	str	r3, [r0, #16]
 8011cf0:	bd10      	pop	{r4, pc}
 8011cf2:	bf00      	nop
 8011cf4:	080140a0 	.word	0x080140a0
 8011cf8:	0801412c 	.word	0x0801412c

08011cfc <__multiply>:
 8011cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d00:	4691      	mov	r9, r2
 8011d02:	690a      	ldr	r2, [r1, #16]
 8011d04:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011d08:	429a      	cmp	r2, r3
 8011d0a:	bfb8      	it	lt
 8011d0c:	460b      	movlt	r3, r1
 8011d0e:	460c      	mov	r4, r1
 8011d10:	bfbc      	itt	lt
 8011d12:	464c      	movlt	r4, r9
 8011d14:	4699      	movlt	r9, r3
 8011d16:	6927      	ldr	r7, [r4, #16]
 8011d18:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011d1c:	68a3      	ldr	r3, [r4, #8]
 8011d1e:	6861      	ldr	r1, [r4, #4]
 8011d20:	eb07 060a 	add.w	r6, r7, sl
 8011d24:	42b3      	cmp	r3, r6
 8011d26:	b085      	sub	sp, #20
 8011d28:	bfb8      	it	lt
 8011d2a:	3101      	addlt	r1, #1
 8011d2c:	f7ff fe8e 	bl	8011a4c <_Balloc>
 8011d30:	b930      	cbnz	r0, 8011d40 <__multiply+0x44>
 8011d32:	4602      	mov	r2, r0
 8011d34:	4b44      	ldr	r3, [pc, #272]	; (8011e48 <__multiply+0x14c>)
 8011d36:	4845      	ldr	r0, [pc, #276]	; (8011e4c <__multiply+0x150>)
 8011d38:	f240 115d 	movw	r1, #349	; 0x15d
 8011d3c:	f001 f9dc 	bl	80130f8 <__assert_func>
 8011d40:	f100 0514 	add.w	r5, r0, #20
 8011d44:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011d48:	462b      	mov	r3, r5
 8011d4a:	2200      	movs	r2, #0
 8011d4c:	4543      	cmp	r3, r8
 8011d4e:	d321      	bcc.n	8011d94 <__multiply+0x98>
 8011d50:	f104 0314 	add.w	r3, r4, #20
 8011d54:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011d58:	f109 0314 	add.w	r3, r9, #20
 8011d5c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011d60:	9202      	str	r2, [sp, #8]
 8011d62:	1b3a      	subs	r2, r7, r4
 8011d64:	3a15      	subs	r2, #21
 8011d66:	f022 0203 	bic.w	r2, r2, #3
 8011d6a:	3204      	adds	r2, #4
 8011d6c:	f104 0115 	add.w	r1, r4, #21
 8011d70:	428f      	cmp	r7, r1
 8011d72:	bf38      	it	cc
 8011d74:	2204      	movcc	r2, #4
 8011d76:	9201      	str	r2, [sp, #4]
 8011d78:	9a02      	ldr	r2, [sp, #8]
 8011d7a:	9303      	str	r3, [sp, #12]
 8011d7c:	429a      	cmp	r2, r3
 8011d7e:	d80c      	bhi.n	8011d9a <__multiply+0x9e>
 8011d80:	2e00      	cmp	r6, #0
 8011d82:	dd03      	ble.n	8011d8c <__multiply+0x90>
 8011d84:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d05a      	beq.n	8011e42 <__multiply+0x146>
 8011d8c:	6106      	str	r6, [r0, #16]
 8011d8e:	b005      	add	sp, #20
 8011d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d94:	f843 2b04 	str.w	r2, [r3], #4
 8011d98:	e7d8      	b.n	8011d4c <__multiply+0x50>
 8011d9a:	f8b3 a000 	ldrh.w	sl, [r3]
 8011d9e:	f1ba 0f00 	cmp.w	sl, #0
 8011da2:	d024      	beq.n	8011dee <__multiply+0xf2>
 8011da4:	f104 0e14 	add.w	lr, r4, #20
 8011da8:	46a9      	mov	r9, r5
 8011daa:	f04f 0c00 	mov.w	ip, #0
 8011dae:	f85e 2b04 	ldr.w	r2, [lr], #4
 8011db2:	f8d9 1000 	ldr.w	r1, [r9]
 8011db6:	fa1f fb82 	uxth.w	fp, r2
 8011dba:	b289      	uxth	r1, r1
 8011dbc:	fb0a 110b 	mla	r1, sl, fp, r1
 8011dc0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011dc4:	f8d9 2000 	ldr.w	r2, [r9]
 8011dc8:	4461      	add	r1, ip
 8011dca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011dce:	fb0a c20b 	mla	r2, sl, fp, ip
 8011dd2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011dd6:	b289      	uxth	r1, r1
 8011dd8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011ddc:	4577      	cmp	r7, lr
 8011dde:	f849 1b04 	str.w	r1, [r9], #4
 8011de2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011de6:	d8e2      	bhi.n	8011dae <__multiply+0xb2>
 8011de8:	9a01      	ldr	r2, [sp, #4]
 8011dea:	f845 c002 	str.w	ip, [r5, r2]
 8011dee:	9a03      	ldr	r2, [sp, #12]
 8011df0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011df4:	3304      	adds	r3, #4
 8011df6:	f1b9 0f00 	cmp.w	r9, #0
 8011dfa:	d020      	beq.n	8011e3e <__multiply+0x142>
 8011dfc:	6829      	ldr	r1, [r5, #0]
 8011dfe:	f104 0c14 	add.w	ip, r4, #20
 8011e02:	46ae      	mov	lr, r5
 8011e04:	f04f 0a00 	mov.w	sl, #0
 8011e08:	f8bc b000 	ldrh.w	fp, [ip]
 8011e0c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011e10:	fb09 220b 	mla	r2, r9, fp, r2
 8011e14:	4492      	add	sl, r2
 8011e16:	b289      	uxth	r1, r1
 8011e18:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8011e1c:	f84e 1b04 	str.w	r1, [lr], #4
 8011e20:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011e24:	f8be 1000 	ldrh.w	r1, [lr]
 8011e28:	0c12      	lsrs	r2, r2, #16
 8011e2a:	fb09 1102 	mla	r1, r9, r2, r1
 8011e2e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8011e32:	4567      	cmp	r7, ip
 8011e34:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011e38:	d8e6      	bhi.n	8011e08 <__multiply+0x10c>
 8011e3a:	9a01      	ldr	r2, [sp, #4]
 8011e3c:	50a9      	str	r1, [r5, r2]
 8011e3e:	3504      	adds	r5, #4
 8011e40:	e79a      	b.n	8011d78 <__multiply+0x7c>
 8011e42:	3e01      	subs	r6, #1
 8011e44:	e79c      	b.n	8011d80 <__multiply+0x84>
 8011e46:	bf00      	nop
 8011e48:	080140a0 	.word	0x080140a0
 8011e4c:	0801412c 	.word	0x0801412c

08011e50 <__pow5mult>:
 8011e50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011e54:	4615      	mov	r5, r2
 8011e56:	f012 0203 	ands.w	r2, r2, #3
 8011e5a:	4606      	mov	r6, r0
 8011e5c:	460f      	mov	r7, r1
 8011e5e:	d007      	beq.n	8011e70 <__pow5mult+0x20>
 8011e60:	4c25      	ldr	r4, [pc, #148]	; (8011ef8 <__pow5mult+0xa8>)
 8011e62:	3a01      	subs	r2, #1
 8011e64:	2300      	movs	r3, #0
 8011e66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011e6a:	f7ff fe51 	bl	8011b10 <__multadd>
 8011e6e:	4607      	mov	r7, r0
 8011e70:	10ad      	asrs	r5, r5, #2
 8011e72:	d03d      	beq.n	8011ef0 <__pow5mult+0xa0>
 8011e74:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011e76:	b97c      	cbnz	r4, 8011e98 <__pow5mult+0x48>
 8011e78:	2010      	movs	r0, #16
 8011e7a:	f7ff fdcd 	bl	8011a18 <malloc>
 8011e7e:	4602      	mov	r2, r0
 8011e80:	6270      	str	r0, [r6, #36]	; 0x24
 8011e82:	b928      	cbnz	r0, 8011e90 <__pow5mult+0x40>
 8011e84:	4b1d      	ldr	r3, [pc, #116]	; (8011efc <__pow5mult+0xac>)
 8011e86:	481e      	ldr	r0, [pc, #120]	; (8011f00 <__pow5mult+0xb0>)
 8011e88:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011e8c:	f001 f934 	bl	80130f8 <__assert_func>
 8011e90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011e94:	6004      	str	r4, [r0, #0]
 8011e96:	60c4      	str	r4, [r0, #12]
 8011e98:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011e9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011ea0:	b94c      	cbnz	r4, 8011eb6 <__pow5mult+0x66>
 8011ea2:	f240 2171 	movw	r1, #625	; 0x271
 8011ea6:	4630      	mov	r0, r6
 8011ea8:	f7ff ff12 	bl	8011cd0 <__i2b>
 8011eac:	2300      	movs	r3, #0
 8011eae:	f8c8 0008 	str.w	r0, [r8, #8]
 8011eb2:	4604      	mov	r4, r0
 8011eb4:	6003      	str	r3, [r0, #0]
 8011eb6:	f04f 0900 	mov.w	r9, #0
 8011eba:	07eb      	lsls	r3, r5, #31
 8011ebc:	d50a      	bpl.n	8011ed4 <__pow5mult+0x84>
 8011ebe:	4639      	mov	r1, r7
 8011ec0:	4622      	mov	r2, r4
 8011ec2:	4630      	mov	r0, r6
 8011ec4:	f7ff ff1a 	bl	8011cfc <__multiply>
 8011ec8:	4639      	mov	r1, r7
 8011eca:	4680      	mov	r8, r0
 8011ecc:	4630      	mov	r0, r6
 8011ece:	f7ff fdfd 	bl	8011acc <_Bfree>
 8011ed2:	4647      	mov	r7, r8
 8011ed4:	106d      	asrs	r5, r5, #1
 8011ed6:	d00b      	beq.n	8011ef0 <__pow5mult+0xa0>
 8011ed8:	6820      	ldr	r0, [r4, #0]
 8011eda:	b938      	cbnz	r0, 8011eec <__pow5mult+0x9c>
 8011edc:	4622      	mov	r2, r4
 8011ede:	4621      	mov	r1, r4
 8011ee0:	4630      	mov	r0, r6
 8011ee2:	f7ff ff0b 	bl	8011cfc <__multiply>
 8011ee6:	6020      	str	r0, [r4, #0]
 8011ee8:	f8c0 9000 	str.w	r9, [r0]
 8011eec:	4604      	mov	r4, r0
 8011eee:	e7e4      	b.n	8011eba <__pow5mult+0x6a>
 8011ef0:	4638      	mov	r0, r7
 8011ef2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011ef6:	bf00      	nop
 8011ef8:	08014278 	.word	0x08014278
 8011efc:	0801402e 	.word	0x0801402e
 8011f00:	0801412c 	.word	0x0801412c

08011f04 <__lshift>:
 8011f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f08:	460c      	mov	r4, r1
 8011f0a:	6849      	ldr	r1, [r1, #4]
 8011f0c:	6923      	ldr	r3, [r4, #16]
 8011f0e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011f12:	68a3      	ldr	r3, [r4, #8]
 8011f14:	4607      	mov	r7, r0
 8011f16:	4691      	mov	r9, r2
 8011f18:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011f1c:	f108 0601 	add.w	r6, r8, #1
 8011f20:	42b3      	cmp	r3, r6
 8011f22:	db0b      	blt.n	8011f3c <__lshift+0x38>
 8011f24:	4638      	mov	r0, r7
 8011f26:	f7ff fd91 	bl	8011a4c <_Balloc>
 8011f2a:	4605      	mov	r5, r0
 8011f2c:	b948      	cbnz	r0, 8011f42 <__lshift+0x3e>
 8011f2e:	4602      	mov	r2, r0
 8011f30:	4b2a      	ldr	r3, [pc, #168]	; (8011fdc <__lshift+0xd8>)
 8011f32:	482b      	ldr	r0, [pc, #172]	; (8011fe0 <__lshift+0xdc>)
 8011f34:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011f38:	f001 f8de 	bl	80130f8 <__assert_func>
 8011f3c:	3101      	adds	r1, #1
 8011f3e:	005b      	lsls	r3, r3, #1
 8011f40:	e7ee      	b.n	8011f20 <__lshift+0x1c>
 8011f42:	2300      	movs	r3, #0
 8011f44:	f100 0114 	add.w	r1, r0, #20
 8011f48:	f100 0210 	add.w	r2, r0, #16
 8011f4c:	4618      	mov	r0, r3
 8011f4e:	4553      	cmp	r3, sl
 8011f50:	db37      	blt.n	8011fc2 <__lshift+0xbe>
 8011f52:	6920      	ldr	r0, [r4, #16]
 8011f54:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011f58:	f104 0314 	add.w	r3, r4, #20
 8011f5c:	f019 091f 	ands.w	r9, r9, #31
 8011f60:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011f64:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8011f68:	d02f      	beq.n	8011fca <__lshift+0xc6>
 8011f6a:	f1c9 0e20 	rsb	lr, r9, #32
 8011f6e:	468a      	mov	sl, r1
 8011f70:	f04f 0c00 	mov.w	ip, #0
 8011f74:	681a      	ldr	r2, [r3, #0]
 8011f76:	fa02 f209 	lsl.w	r2, r2, r9
 8011f7a:	ea42 020c 	orr.w	r2, r2, ip
 8011f7e:	f84a 2b04 	str.w	r2, [sl], #4
 8011f82:	f853 2b04 	ldr.w	r2, [r3], #4
 8011f86:	4298      	cmp	r0, r3
 8011f88:	fa22 fc0e 	lsr.w	ip, r2, lr
 8011f8c:	d8f2      	bhi.n	8011f74 <__lshift+0x70>
 8011f8e:	1b03      	subs	r3, r0, r4
 8011f90:	3b15      	subs	r3, #21
 8011f92:	f023 0303 	bic.w	r3, r3, #3
 8011f96:	3304      	adds	r3, #4
 8011f98:	f104 0215 	add.w	r2, r4, #21
 8011f9c:	4290      	cmp	r0, r2
 8011f9e:	bf38      	it	cc
 8011fa0:	2304      	movcc	r3, #4
 8011fa2:	f841 c003 	str.w	ip, [r1, r3]
 8011fa6:	f1bc 0f00 	cmp.w	ip, #0
 8011faa:	d001      	beq.n	8011fb0 <__lshift+0xac>
 8011fac:	f108 0602 	add.w	r6, r8, #2
 8011fb0:	3e01      	subs	r6, #1
 8011fb2:	4638      	mov	r0, r7
 8011fb4:	612e      	str	r6, [r5, #16]
 8011fb6:	4621      	mov	r1, r4
 8011fb8:	f7ff fd88 	bl	8011acc <_Bfree>
 8011fbc:	4628      	mov	r0, r5
 8011fbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011fc2:	f842 0f04 	str.w	r0, [r2, #4]!
 8011fc6:	3301      	adds	r3, #1
 8011fc8:	e7c1      	b.n	8011f4e <__lshift+0x4a>
 8011fca:	3904      	subs	r1, #4
 8011fcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8011fd0:	f841 2f04 	str.w	r2, [r1, #4]!
 8011fd4:	4298      	cmp	r0, r3
 8011fd6:	d8f9      	bhi.n	8011fcc <__lshift+0xc8>
 8011fd8:	e7ea      	b.n	8011fb0 <__lshift+0xac>
 8011fda:	bf00      	nop
 8011fdc:	080140a0 	.word	0x080140a0
 8011fe0:	0801412c 	.word	0x0801412c

08011fe4 <__mcmp>:
 8011fe4:	b530      	push	{r4, r5, lr}
 8011fe6:	6902      	ldr	r2, [r0, #16]
 8011fe8:	690c      	ldr	r4, [r1, #16]
 8011fea:	1b12      	subs	r2, r2, r4
 8011fec:	d10e      	bne.n	801200c <__mcmp+0x28>
 8011fee:	f100 0314 	add.w	r3, r0, #20
 8011ff2:	3114      	adds	r1, #20
 8011ff4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011ff8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011ffc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012000:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012004:	42a5      	cmp	r5, r4
 8012006:	d003      	beq.n	8012010 <__mcmp+0x2c>
 8012008:	d305      	bcc.n	8012016 <__mcmp+0x32>
 801200a:	2201      	movs	r2, #1
 801200c:	4610      	mov	r0, r2
 801200e:	bd30      	pop	{r4, r5, pc}
 8012010:	4283      	cmp	r3, r0
 8012012:	d3f3      	bcc.n	8011ffc <__mcmp+0x18>
 8012014:	e7fa      	b.n	801200c <__mcmp+0x28>
 8012016:	f04f 32ff 	mov.w	r2, #4294967295
 801201a:	e7f7      	b.n	801200c <__mcmp+0x28>

0801201c <__mdiff>:
 801201c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012020:	460c      	mov	r4, r1
 8012022:	4606      	mov	r6, r0
 8012024:	4611      	mov	r1, r2
 8012026:	4620      	mov	r0, r4
 8012028:	4690      	mov	r8, r2
 801202a:	f7ff ffdb 	bl	8011fe4 <__mcmp>
 801202e:	1e05      	subs	r5, r0, #0
 8012030:	d110      	bne.n	8012054 <__mdiff+0x38>
 8012032:	4629      	mov	r1, r5
 8012034:	4630      	mov	r0, r6
 8012036:	f7ff fd09 	bl	8011a4c <_Balloc>
 801203a:	b930      	cbnz	r0, 801204a <__mdiff+0x2e>
 801203c:	4b3a      	ldr	r3, [pc, #232]	; (8012128 <__mdiff+0x10c>)
 801203e:	4602      	mov	r2, r0
 8012040:	f240 2132 	movw	r1, #562	; 0x232
 8012044:	4839      	ldr	r0, [pc, #228]	; (801212c <__mdiff+0x110>)
 8012046:	f001 f857 	bl	80130f8 <__assert_func>
 801204a:	2301      	movs	r3, #1
 801204c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012050:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012054:	bfa4      	itt	ge
 8012056:	4643      	movge	r3, r8
 8012058:	46a0      	movge	r8, r4
 801205a:	4630      	mov	r0, r6
 801205c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012060:	bfa6      	itte	ge
 8012062:	461c      	movge	r4, r3
 8012064:	2500      	movge	r5, #0
 8012066:	2501      	movlt	r5, #1
 8012068:	f7ff fcf0 	bl	8011a4c <_Balloc>
 801206c:	b920      	cbnz	r0, 8012078 <__mdiff+0x5c>
 801206e:	4b2e      	ldr	r3, [pc, #184]	; (8012128 <__mdiff+0x10c>)
 8012070:	4602      	mov	r2, r0
 8012072:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012076:	e7e5      	b.n	8012044 <__mdiff+0x28>
 8012078:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801207c:	6926      	ldr	r6, [r4, #16]
 801207e:	60c5      	str	r5, [r0, #12]
 8012080:	f104 0914 	add.w	r9, r4, #20
 8012084:	f108 0514 	add.w	r5, r8, #20
 8012088:	f100 0e14 	add.w	lr, r0, #20
 801208c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8012090:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8012094:	f108 0210 	add.w	r2, r8, #16
 8012098:	46f2      	mov	sl, lr
 801209a:	2100      	movs	r1, #0
 801209c:	f859 3b04 	ldr.w	r3, [r9], #4
 80120a0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80120a4:	fa1f f883 	uxth.w	r8, r3
 80120a8:	fa11 f18b 	uxtah	r1, r1, fp
 80120ac:	0c1b      	lsrs	r3, r3, #16
 80120ae:	eba1 0808 	sub.w	r8, r1, r8
 80120b2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80120b6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80120ba:	fa1f f888 	uxth.w	r8, r8
 80120be:	1419      	asrs	r1, r3, #16
 80120c0:	454e      	cmp	r6, r9
 80120c2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80120c6:	f84a 3b04 	str.w	r3, [sl], #4
 80120ca:	d8e7      	bhi.n	801209c <__mdiff+0x80>
 80120cc:	1b33      	subs	r3, r6, r4
 80120ce:	3b15      	subs	r3, #21
 80120d0:	f023 0303 	bic.w	r3, r3, #3
 80120d4:	3304      	adds	r3, #4
 80120d6:	3415      	adds	r4, #21
 80120d8:	42a6      	cmp	r6, r4
 80120da:	bf38      	it	cc
 80120dc:	2304      	movcc	r3, #4
 80120de:	441d      	add	r5, r3
 80120e0:	4473      	add	r3, lr
 80120e2:	469e      	mov	lr, r3
 80120e4:	462e      	mov	r6, r5
 80120e6:	4566      	cmp	r6, ip
 80120e8:	d30e      	bcc.n	8012108 <__mdiff+0xec>
 80120ea:	f10c 0203 	add.w	r2, ip, #3
 80120ee:	1b52      	subs	r2, r2, r5
 80120f0:	f022 0203 	bic.w	r2, r2, #3
 80120f4:	3d03      	subs	r5, #3
 80120f6:	45ac      	cmp	ip, r5
 80120f8:	bf38      	it	cc
 80120fa:	2200      	movcc	r2, #0
 80120fc:	441a      	add	r2, r3
 80120fe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8012102:	b17b      	cbz	r3, 8012124 <__mdiff+0x108>
 8012104:	6107      	str	r7, [r0, #16]
 8012106:	e7a3      	b.n	8012050 <__mdiff+0x34>
 8012108:	f856 8b04 	ldr.w	r8, [r6], #4
 801210c:	fa11 f288 	uxtah	r2, r1, r8
 8012110:	1414      	asrs	r4, r2, #16
 8012112:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8012116:	b292      	uxth	r2, r2
 8012118:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801211c:	f84e 2b04 	str.w	r2, [lr], #4
 8012120:	1421      	asrs	r1, r4, #16
 8012122:	e7e0      	b.n	80120e6 <__mdiff+0xca>
 8012124:	3f01      	subs	r7, #1
 8012126:	e7ea      	b.n	80120fe <__mdiff+0xe2>
 8012128:	080140a0 	.word	0x080140a0
 801212c:	0801412c 	.word	0x0801412c

08012130 <__ulp>:
 8012130:	b082      	sub	sp, #8
 8012132:	ed8d 0b00 	vstr	d0, [sp]
 8012136:	9b01      	ldr	r3, [sp, #4]
 8012138:	4912      	ldr	r1, [pc, #72]	; (8012184 <__ulp+0x54>)
 801213a:	4019      	ands	r1, r3
 801213c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8012140:	2900      	cmp	r1, #0
 8012142:	dd05      	ble.n	8012150 <__ulp+0x20>
 8012144:	2200      	movs	r2, #0
 8012146:	460b      	mov	r3, r1
 8012148:	ec43 2b10 	vmov	d0, r2, r3
 801214c:	b002      	add	sp, #8
 801214e:	4770      	bx	lr
 8012150:	4249      	negs	r1, r1
 8012152:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8012156:	ea4f 5021 	mov.w	r0, r1, asr #20
 801215a:	f04f 0200 	mov.w	r2, #0
 801215e:	f04f 0300 	mov.w	r3, #0
 8012162:	da04      	bge.n	801216e <__ulp+0x3e>
 8012164:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8012168:	fa41 f300 	asr.w	r3, r1, r0
 801216c:	e7ec      	b.n	8012148 <__ulp+0x18>
 801216e:	f1a0 0114 	sub.w	r1, r0, #20
 8012172:	291e      	cmp	r1, #30
 8012174:	bfda      	itte	le
 8012176:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801217a:	fa20 f101 	lsrle.w	r1, r0, r1
 801217e:	2101      	movgt	r1, #1
 8012180:	460a      	mov	r2, r1
 8012182:	e7e1      	b.n	8012148 <__ulp+0x18>
 8012184:	7ff00000 	.word	0x7ff00000

08012188 <__b2d>:
 8012188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801218a:	6905      	ldr	r5, [r0, #16]
 801218c:	f100 0714 	add.w	r7, r0, #20
 8012190:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8012194:	1f2e      	subs	r6, r5, #4
 8012196:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801219a:	4620      	mov	r0, r4
 801219c:	f7ff fd48 	bl	8011c30 <__hi0bits>
 80121a0:	f1c0 0320 	rsb	r3, r0, #32
 80121a4:	280a      	cmp	r0, #10
 80121a6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8012224 <__b2d+0x9c>
 80121aa:	600b      	str	r3, [r1, #0]
 80121ac:	dc14      	bgt.n	80121d8 <__b2d+0x50>
 80121ae:	f1c0 0e0b 	rsb	lr, r0, #11
 80121b2:	fa24 f10e 	lsr.w	r1, r4, lr
 80121b6:	42b7      	cmp	r7, r6
 80121b8:	ea41 030c 	orr.w	r3, r1, ip
 80121bc:	bf34      	ite	cc
 80121be:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80121c2:	2100      	movcs	r1, #0
 80121c4:	3015      	adds	r0, #21
 80121c6:	fa04 f000 	lsl.w	r0, r4, r0
 80121ca:	fa21 f10e 	lsr.w	r1, r1, lr
 80121ce:	ea40 0201 	orr.w	r2, r0, r1
 80121d2:	ec43 2b10 	vmov	d0, r2, r3
 80121d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80121d8:	42b7      	cmp	r7, r6
 80121da:	bf3a      	itte	cc
 80121dc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80121e0:	f1a5 0608 	subcc.w	r6, r5, #8
 80121e4:	2100      	movcs	r1, #0
 80121e6:	380b      	subs	r0, #11
 80121e8:	d017      	beq.n	801221a <__b2d+0x92>
 80121ea:	f1c0 0c20 	rsb	ip, r0, #32
 80121ee:	fa04 f500 	lsl.w	r5, r4, r0
 80121f2:	42be      	cmp	r6, r7
 80121f4:	fa21 f40c 	lsr.w	r4, r1, ip
 80121f8:	ea45 0504 	orr.w	r5, r5, r4
 80121fc:	bf8c      	ite	hi
 80121fe:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8012202:	2400      	movls	r4, #0
 8012204:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8012208:	fa01 f000 	lsl.w	r0, r1, r0
 801220c:	fa24 f40c 	lsr.w	r4, r4, ip
 8012210:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012214:	ea40 0204 	orr.w	r2, r0, r4
 8012218:	e7db      	b.n	80121d2 <__b2d+0x4a>
 801221a:	ea44 030c 	orr.w	r3, r4, ip
 801221e:	460a      	mov	r2, r1
 8012220:	e7d7      	b.n	80121d2 <__b2d+0x4a>
 8012222:	bf00      	nop
 8012224:	3ff00000 	.word	0x3ff00000

08012228 <__d2b>:
 8012228:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801222c:	4689      	mov	r9, r1
 801222e:	2101      	movs	r1, #1
 8012230:	ec57 6b10 	vmov	r6, r7, d0
 8012234:	4690      	mov	r8, r2
 8012236:	f7ff fc09 	bl	8011a4c <_Balloc>
 801223a:	4604      	mov	r4, r0
 801223c:	b930      	cbnz	r0, 801224c <__d2b+0x24>
 801223e:	4602      	mov	r2, r0
 8012240:	4b25      	ldr	r3, [pc, #148]	; (80122d8 <__d2b+0xb0>)
 8012242:	4826      	ldr	r0, [pc, #152]	; (80122dc <__d2b+0xb4>)
 8012244:	f240 310a 	movw	r1, #778	; 0x30a
 8012248:	f000 ff56 	bl	80130f8 <__assert_func>
 801224c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012250:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012254:	bb35      	cbnz	r5, 80122a4 <__d2b+0x7c>
 8012256:	2e00      	cmp	r6, #0
 8012258:	9301      	str	r3, [sp, #4]
 801225a:	d028      	beq.n	80122ae <__d2b+0x86>
 801225c:	4668      	mov	r0, sp
 801225e:	9600      	str	r6, [sp, #0]
 8012260:	f7ff fd06 	bl	8011c70 <__lo0bits>
 8012264:	9900      	ldr	r1, [sp, #0]
 8012266:	b300      	cbz	r0, 80122aa <__d2b+0x82>
 8012268:	9a01      	ldr	r2, [sp, #4]
 801226a:	f1c0 0320 	rsb	r3, r0, #32
 801226e:	fa02 f303 	lsl.w	r3, r2, r3
 8012272:	430b      	orrs	r3, r1
 8012274:	40c2      	lsrs	r2, r0
 8012276:	6163      	str	r3, [r4, #20]
 8012278:	9201      	str	r2, [sp, #4]
 801227a:	9b01      	ldr	r3, [sp, #4]
 801227c:	61a3      	str	r3, [r4, #24]
 801227e:	2b00      	cmp	r3, #0
 8012280:	bf14      	ite	ne
 8012282:	2202      	movne	r2, #2
 8012284:	2201      	moveq	r2, #1
 8012286:	6122      	str	r2, [r4, #16]
 8012288:	b1d5      	cbz	r5, 80122c0 <__d2b+0x98>
 801228a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801228e:	4405      	add	r5, r0
 8012290:	f8c9 5000 	str.w	r5, [r9]
 8012294:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012298:	f8c8 0000 	str.w	r0, [r8]
 801229c:	4620      	mov	r0, r4
 801229e:	b003      	add	sp, #12
 80122a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80122a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80122a8:	e7d5      	b.n	8012256 <__d2b+0x2e>
 80122aa:	6161      	str	r1, [r4, #20]
 80122ac:	e7e5      	b.n	801227a <__d2b+0x52>
 80122ae:	a801      	add	r0, sp, #4
 80122b0:	f7ff fcde 	bl	8011c70 <__lo0bits>
 80122b4:	9b01      	ldr	r3, [sp, #4]
 80122b6:	6163      	str	r3, [r4, #20]
 80122b8:	2201      	movs	r2, #1
 80122ba:	6122      	str	r2, [r4, #16]
 80122bc:	3020      	adds	r0, #32
 80122be:	e7e3      	b.n	8012288 <__d2b+0x60>
 80122c0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80122c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80122c8:	f8c9 0000 	str.w	r0, [r9]
 80122cc:	6918      	ldr	r0, [r3, #16]
 80122ce:	f7ff fcaf 	bl	8011c30 <__hi0bits>
 80122d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80122d6:	e7df      	b.n	8012298 <__d2b+0x70>
 80122d8:	080140a0 	.word	0x080140a0
 80122dc:	0801412c 	.word	0x0801412c

080122e0 <__ratio>:
 80122e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122e4:	4688      	mov	r8, r1
 80122e6:	4669      	mov	r1, sp
 80122e8:	4681      	mov	r9, r0
 80122ea:	f7ff ff4d 	bl	8012188 <__b2d>
 80122ee:	a901      	add	r1, sp, #4
 80122f0:	4640      	mov	r0, r8
 80122f2:	ec55 4b10 	vmov	r4, r5, d0
 80122f6:	f7ff ff47 	bl	8012188 <__b2d>
 80122fa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80122fe:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8012302:	eba3 0c02 	sub.w	ip, r3, r2
 8012306:	e9dd 3200 	ldrd	r3, r2, [sp]
 801230a:	1a9b      	subs	r3, r3, r2
 801230c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8012310:	ec51 0b10 	vmov	r0, r1, d0
 8012314:	2b00      	cmp	r3, #0
 8012316:	bfd6      	itet	le
 8012318:	460a      	movle	r2, r1
 801231a:	462a      	movgt	r2, r5
 801231c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012320:	468b      	mov	fp, r1
 8012322:	462f      	mov	r7, r5
 8012324:	bfd4      	ite	le
 8012326:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801232a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801232e:	4620      	mov	r0, r4
 8012330:	ee10 2a10 	vmov	r2, s0
 8012334:	465b      	mov	r3, fp
 8012336:	4639      	mov	r1, r7
 8012338:	f7ee fab8 	bl	80008ac <__aeabi_ddiv>
 801233c:	ec41 0b10 	vmov	d0, r0, r1
 8012340:	b003      	add	sp, #12
 8012342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012346 <__copybits>:
 8012346:	3901      	subs	r1, #1
 8012348:	b570      	push	{r4, r5, r6, lr}
 801234a:	1149      	asrs	r1, r1, #5
 801234c:	6914      	ldr	r4, [r2, #16]
 801234e:	3101      	adds	r1, #1
 8012350:	f102 0314 	add.w	r3, r2, #20
 8012354:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012358:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801235c:	1f05      	subs	r5, r0, #4
 801235e:	42a3      	cmp	r3, r4
 8012360:	d30c      	bcc.n	801237c <__copybits+0x36>
 8012362:	1aa3      	subs	r3, r4, r2
 8012364:	3b11      	subs	r3, #17
 8012366:	f023 0303 	bic.w	r3, r3, #3
 801236a:	3211      	adds	r2, #17
 801236c:	42a2      	cmp	r2, r4
 801236e:	bf88      	it	hi
 8012370:	2300      	movhi	r3, #0
 8012372:	4418      	add	r0, r3
 8012374:	2300      	movs	r3, #0
 8012376:	4288      	cmp	r0, r1
 8012378:	d305      	bcc.n	8012386 <__copybits+0x40>
 801237a:	bd70      	pop	{r4, r5, r6, pc}
 801237c:	f853 6b04 	ldr.w	r6, [r3], #4
 8012380:	f845 6f04 	str.w	r6, [r5, #4]!
 8012384:	e7eb      	b.n	801235e <__copybits+0x18>
 8012386:	f840 3b04 	str.w	r3, [r0], #4
 801238a:	e7f4      	b.n	8012376 <__copybits+0x30>

0801238c <__any_on>:
 801238c:	f100 0214 	add.w	r2, r0, #20
 8012390:	6900      	ldr	r0, [r0, #16]
 8012392:	114b      	asrs	r3, r1, #5
 8012394:	4298      	cmp	r0, r3
 8012396:	b510      	push	{r4, lr}
 8012398:	db11      	blt.n	80123be <__any_on+0x32>
 801239a:	dd0a      	ble.n	80123b2 <__any_on+0x26>
 801239c:	f011 011f 	ands.w	r1, r1, #31
 80123a0:	d007      	beq.n	80123b2 <__any_on+0x26>
 80123a2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80123a6:	fa24 f001 	lsr.w	r0, r4, r1
 80123aa:	fa00 f101 	lsl.w	r1, r0, r1
 80123ae:	428c      	cmp	r4, r1
 80123b0:	d10b      	bne.n	80123ca <__any_on+0x3e>
 80123b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80123b6:	4293      	cmp	r3, r2
 80123b8:	d803      	bhi.n	80123c2 <__any_on+0x36>
 80123ba:	2000      	movs	r0, #0
 80123bc:	bd10      	pop	{r4, pc}
 80123be:	4603      	mov	r3, r0
 80123c0:	e7f7      	b.n	80123b2 <__any_on+0x26>
 80123c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80123c6:	2900      	cmp	r1, #0
 80123c8:	d0f5      	beq.n	80123b6 <__any_on+0x2a>
 80123ca:	2001      	movs	r0, #1
 80123cc:	e7f6      	b.n	80123bc <__any_on+0x30>

080123ce <_calloc_r>:
 80123ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80123d0:	fba1 2402 	umull	r2, r4, r1, r2
 80123d4:	b94c      	cbnz	r4, 80123ea <_calloc_r+0x1c>
 80123d6:	4611      	mov	r1, r2
 80123d8:	9201      	str	r2, [sp, #4]
 80123da:	f000 f87b 	bl	80124d4 <_malloc_r>
 80123de:	9a01      	ldr	r2, [sp, #4]
 80123e0:	4605      	mov	r5, r0
 80123e2:	b930      	cbnz	r0, 80123f2 <_calloc_r+0x24>
 80123e4:	4628      	mov	r0, r5
 80123e6:	b003      	add	sp, #12
 80123e8:	bd30      	pop	{r4, r5, pc}
 80123ea:	220c      	movs	r2, #12
 80123ec:	6002      	str	r2, [r0, #0]
 80123ee:	2500      	movs	r5, #0
 80123f0:	e7f8      	b.n	80123e4 <_calloc_r+0x16>
 80123f2:	4621      	mov	r1, r4
 80123f4:	f7fc fb08 	bl	800ea08 <memset>
 80123f8:	e7f4      	b.n	80123e4 <_calloc_r+0x16>
	...

080123fc <_free_r>:
 80123fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80123fe:	2900      	cmp	r1, #0
 8012400:	d044      	beq.n	801248c <_free_r+0x90>
 8012402:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012406:	9001      	str	r0, [sp, #4]
 8012408:	2b00      	cmp	r3, #0
 801240a:	f1a1 0404 	sub.w	r4, r1, #4
 801240e:	bfb8      	it	lt
 8012410:	18e4      	addlt	r4, r4, r3
 8012412:	f001 f875 	bl	8013500 <__malloc_lock>
 8012416:	4a1e      	ldr	r2, [pc, #120]	; (8012490 <_free_r+0x94>)
 8012418:	9801      	ldr	r0, [sp, #4]
 801241a:	6813      	ldr	r3, [r2, #0]
 801241c:	b933      	cbnz	r3, 801242c <_free_r+0x30>
 801241e:	6063      	str	r3, [r4, #4]
 8012420:	6014      	str	r4, [r2, #0]
 8012422:	b003      	add	sp, #12
 8012424:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012428:	f001 b870 	b.w	801350c <__malloc_unlock>
 801242c:	42a3      	cmp	r3, r4
 801242e:	d908      	bls.n	8012442 <_free_r+0x46>
 8012430:	6825      	ldr	r5, [r4, #0]
 8012432:	1961      	adds	r1, r4, r5
 8012434:	428b      	cmp	r3, r1
 8012436:	bf01      	itttt	eq
 8012438:	6819      	ldreq	r1, [r3, #0]
 801243a:	685b      	ldreq	r3, [r3, #4]
 801243c:	1949      	addeq	r1, r1, r5
 801243e:	6021      	streq	r1, [r4, #0]
 8012440:	e7ed      	b.n	801241e <_free_r+0x22>
 8012442:	461a      	mov	r2, r3
 8012444:	685b      	ldr	r3, [r3, #4]
 8012446:	b10b      	cbz	r3, 801244c <_free_r+0x50>
 8012448:	42a3      	cmp	r3, r4
 801244a:	d9fa      	bls.n	8012442 <_free_r+0x46>
 801244c:	6811      	ldr	r1, [r2, #0]
 801244e:	1855      	adds	r5, r2, r1
 8012450:	42a5      	cmp	r5, r4
 8012452:	d10b      	bne.n	801246c <_free_r+0x70>
 8012454:	6824      	ldr	r4, [r4, #0]
 8012456:	4421      	add	r1, r4
 8012458:	1854      	adds	r4, r2, r1
 801245a:	42a3      	cmp	r3, r4
 801245c:	6011      	str	r1, [r2, #0]
 801245e:	d1e0      	bne.n	8012422 <_free_r+0x26>
 8012460:	681c      	ldr	r4, [r3, #0]
 8012462:	685b      	ldr	r3, [r3, #4]
 8012464:	6053      	str	r3, [r2, #4]
 8012466:	4421      	add	r1, r4
 8012468:	6011      	str	r1, [r2, #0]
 801246a:	e7da      	b.n	8012422 <_free_r+0x26>
 801246c:	d902      	bls.n	8012474 <_free_r+0x78>
 801246e:	230c      	movs	r3, #12
 8012470:	6003      	str	r3, [r0, #0]
 8012472:	e7d6      	b.n	8012422 <_free_r+0x26>
 8012474:	6825      	ldr	r5, [r4, #0]
 8012476:	1961      	adds	r1, r4, r5
 8012478:	428b      	cmp	r3, r1
 801247a:	bf04      	itt	eq
 801247c:	6819      	ldreq	r1, [r3, #0]
 801247e:	685b      	ldreq	r3, [r3, #4]
 8012480:	6063      	str	r3, [r4, #4]
 8012482:	bf04      	itt	eq
 8012484:	1949      	addeq	r1, r1, r5
 8012486:	6021      	streq	r1, [r4, #0]
 8012488:	6054      	str	r4, [r2, #4]
 801248a:	e7ca      	b.n	8012422 <_free_r+0x26>
 801248c:	b003      	add	sp, #12
 801248e:	bd30      	pop	{r4, r5, pc}
 8012490:	20000768 	.word	0x20000768

08012494 <sbrk_aligned>:
 8012494:	b570      	push	{r4, r5, r6, lr}
 8012496:	4e0e      	ldr	r6, [pc, #56]	; (80124d0 <sbrk_aligned+0x3c>)
 8012498:	460c      	mov	r4, r1
 801249a:	6831      	ldr	r1, [r6, #0]
 801249c:	4605      	mov	r5, r0
 801249e:	b911      	cbnz	r1, 80124a6 <sbrk_aligned+0x12>
 80124a0:	f000 fd26 	bl	8012ef0 <_sbrk_r>
 80124a4:	6030      	str	r0, [r6, #0]
 80124a6:	4621      	mov	r1, r4
 80124a8:	4628      	mov	r0, r5
 80124aa:	f000 fd21 	bl	8012ef0 <_sbrk_r>
 80124ae:	1c43      	adds	r3, r0, #1
 80124b0:	d00a      	beq.n	80124c8 <sbrk_aligned+0x34>
 80124b2:	1cc4      	adds	r4, r0, #3
 80124b4:	f024 0403 	bic.w	r4, r4, #3
 80124b8:	42a0      	cmp	r0, r4
 80124ba:	d007      	beq.n	80124cc <sbrk_aligned+0x38>
 80124bc:	1a21      	subs	r1, r4, r0
 80124be:	4628      	mov	r0, r5
 80124c0:	f000 fd16 	bl	8012ef0 <_sbrk_r>
 80124c4:	3001      	adds	r0, #1
 80124c6:	d101      	bne.n	80124cc <sbrk_aligned+0x38>
 80124c8:	f04f 34ff 	mov.w	r4, #4294967295
 80124cc:	4620      	mov	r0, r4
 80124ce:	bd70      	pop	{r4, r5, r6, pc}
 80124d0:	2000076c 	.word	0x2000076c

080124d4 <_malloc_r>:
 80124d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124d8:	1ccd      	adds	r5, r1, #3
 80124da:	f025 0503 	bic.w	r5, r5, #3
 80124de:	3508      	adds	r5, #8
 80124e0:	2d0c      	cmp	r5, #12
 80124e2:	bf38      	it	cc
 80124e4:	250c      	movcc	r5, #12
 80124e6:	2d00      	cmp	r5, #0
 80124e8:	4607      	mov	r7, r0
 80124ea:	db01      	blt.n	80124f0 <_malloc_r+0x1c>
 80124ec:	42a9      	cmp	r1, r5
 80124ee:	d905      	bls.n	80124fc <_malloc_r+0x28>
 80124f0:	230c      	movs	r3, #12
 80124f2:	603b      	str	r3, [r7, #0]
 80124f4:	2600      	movs	r6, #0
 80124f6:	4630      	mov	r0, r6
 80124f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124fc:	4e2e      	ldr	r6, [pc, #184]	; (80125b8 <_malloc_r+0xe4>)
 80124fe:	f000 ffff 	bl	8013500 <__malloc_lock>
 8012502:	6833      	ldr	r3, [r6, #0]
 8012504:	461c      	mov	r4, r3
 8012506:	bb34      	cbnz	r4, 8012556 <_malloc_r+0x82>
 8012508:	4629      	mov	r1, r5
 801250a:	4638      	mov	r0, r7
 801250c:	f7ff ffc2 	bl	8012494 <sbrk_aligned>
 8012510:	1c43      	adds	r3, r0, #1
 8012512:	4604      	mov	r4, r0
 8012514:	d14d      	bne.n	80125b2 <_malloc_r+0xde>
 8012516:	6834      	ldr	r4, [r6, #0]
 8012518:	4626      	mov	r6, r4
 801251a:	2e00      	cmp	r6, #0
 801251c:	d140      	bne.n	80125a0 <_malloc_r+0xcc>
 801251e:	6823      	ldr	r3, [r4, #0]
 8012520:	4631      	mov	r1, r6
 8012522:	4638      	mov	r0, r7
 8012524:	eb04 0803 	add.w	r8, r4, r3
 8012528:	f000 fce2 	bl	8012ef0 <_sbrk_r>
 801252c:	4580      	cmp	r8, r0
 801252e:	d13a      	bne.n	80125a6 <_malloc_r+0xd2>
 8012530:	6821      	ldr	r1, [r4, #0]
 8012532:	3503      	adds	r5, #3
 8012534:	1a6d      	subs	r5, r5, r1
 8012536:	f025 0503 	bic.w	r5, r5, #3
 801253a:	3508      	adds	r5, #8
 801253c:	2d0c      	cmp	r5, #12
 801253e:	bf38      	it	cc
 8012540:	250c      	movcc	r5, #12
 8012542:	4629      	mov	r1, r5
 8012544:	4638      	mov	r0, r7
 8012546:	f7ff ffa5 	bl	8012494 <sbrk_aligned>
 801254a:	3001      	adds	r0, #1
 801254c:	d02b      	beq.n	80125a6 <_malloc_r+0xd2>
 801254e:	6823      	ldr	r3, [r4, #0]
 8012550:	442b      	add	r3, r5
 8012552:	6023      	str	r3, [r4, #0]
 8012554:	e00e      	b.n	8012574 <_malloc_r+0xa0>
 8012556:	6822      	ldr	r2, [r4, #0]
 8012558:	1b52      	subs	r2, r2, r5
 801255a:	d41e      	bmi.n	801259a <_malloc_r+0xc6>
 801255c:	2a0b      	cmp	r2, #11
 801255e:	d916      	bls.n	801258e <_malloc_r+0xba>
 8012560:	1961      	adds	r1, r4, r5
 8012562:	42a3      	cmp	r3, r4
 8012564:	6025      	str	r5, [r4, #0]
 8012566:	bf18      	it	ne
 8012568:	6059      	strne	r1, [r3, #4]
 801256a:	6863      	ldr	r3, [r4, #4]
 801256c:	bf08      	it	eq
 801256e:	6031      	streq	r1, [r6, #0]
 8012570:	5162      	str	r2, [r4, r5]
 8012572:	604b      	str	r3, [r1, #4]
 8012574:	4638      	mov	r0, r7
 8012576:	f104 060b 	add.w	r6, r4, #11
 801257a:	f000 ffc7 	bl	801350c <__malloc_unlock>
 801257e:	f026 0607 	bic.w	r6, r6, #7
 8012582:	1d23      	adds	r3, r4, #4
 8012584:	1af2      	subs	r2, r6, r3
 8012586:	d0b6      	beq.n	80124f6 <_malloc_r+0x22>
 8012588:	1b9b      	subs	r3, r3, r6
 801258a:	50a3      	str	r3, [r4, r2]
 801258c:	e7b3      	b.n	80124f6 <_malloc_r+0x22>
 801258e:	6862      	ldr	r2, [r4, #4]
 8012590:	42a3      	cmp	r3, r4
 8012592:	bf0c      	ite	eq
 8012594:	6032      	streq	r2, [r6, #0]
 8012596:	605a      	strne	r2, [r3, #4]
 8012598:	e7ec      	b.n	8012574 <_malloc_r+0xa0>
 801259a:	4623      	mov	r3, r4
 801259c:	6864      	ldr	r4, [r4, #4]
 801259e:	e7b2      	b.n	8012506 <_malloc_r+0x32>
 80125a0:	4634      	mov	r4, r6
 80125a2:	6876      	ldr	r6, [r6, #4]
 80125a4:	e7b9      	b.n	801251a <_malloc_r+0x46>
 80125a6:	230c      	movs	r3, #12
 80125a8:	603b      	str	r3, [r7, #0]
 80125aa:	4638      	mov	r0, r7
 80125ac:	f000 ffae 	bl	801350c <__malloc_unlock>
 80125b0:	e7a1      	b.n	80124f6 <_malloc_r+0x22>
 80125b2:	6025      	str	r5, [r4, #0]
 80125b4:	e7de      	b.n	8012574 <_malloc_r+0xa0>
 80125b6:	bf00      	nop
 80125b8:	20000768 	.word	0x20000768

080125bc <__ssputs_r>:
 80125bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80125c0:	688e      	ldr	r6, [r1, #8]
 80125c2:	429e      	cmp	r6, r3
 80125c4:	4682      	mov	sl, r0
 80125c6:	460c      	mov	r4, r1
 80125c8:	4690      	mov	r8, r2
 80125ca:	461f      	mov	r7, r3
 80125cc:	d838      	bhi.n	8012640 <__ssputs_r+0x84>
 80125ce:	898a      	ldrh	r2, [r1, #12]
 80125d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80125d4:	d032      	beq.n	801263c <__ssputs_r+0x80>
 80125d6:	6825      	ldr	r5, [r4, #0]
 80125d8:	6909      	ldr	r1, [r1, #16]
 80125da:	eba5 0901 	sub.w	r9, r5, r1
 80125de:	6965      	ldr	r5, [r4, #20]
 80125e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80125e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80125e8:	3301      	adds	r3, #1
 80125ea:	444b      	add	r3, r9
 80125ec:	106d      	asrs	r5, r5, #1
 80125ee:	429d      	cmp	r5, r3
 80125f0:	bf38      	it	cc
 80125f2:	461d      	movcc	r5, r3
 80125f4:	0553      	lsls	r3, r2, #21
 80125f6:	d531      	bpl.n	801265c <__ssputs_r+0xa0>
 80125f8:	4629      	mov	r1, r5
 80125fa:	f7ff ff6b 	bl	80124d4 <_malloc_r>
 80125fe:	4606      	mov	r6, r0
 8012600:	b950      	cbnz	r0, 8012618 <__ssputs_r+0x5c>
 8012602:	230c      	movs	r3, #12
 8012604:	f8ca 3000 	str.w	r3, [sl]
 8012608:	89a3      	ldrh	r3, [r4, #12]
 801260a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801260e:	81a3      	strh	r3, [r4, #12]
 8012610:	f04f 30ff 	mov.w	r0, #4294967295
 8012614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012618:	6921      	ldr	r1, [r4, #16]
 801261a:	464a      	mov	r2, r9
 801261c:	f7fc f9e6 	bl	800e9ec <memcpy>
 8012620:	89a3      	ldrh	r3, [r4, #12]
 8012622:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012626:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801262a:	81a3      	strh	r3, [r4, #12]
 801262c:	6126      	str	r6, [r4, #16]
 801262e:	6165      	str	r5, [r4, #20]
 8012630:	444e      	add	r6, r9
 8012632:	eba5 0509 	sub.w	r5, r5, r9
 8012636:	6026      	str	r6, [r4, #0]
 8012638:	60a5      	str	r5, [r4, #8]
 801263a:	463e      	mov	r6, r7
 801263c:	42be      	cmp	r6, r7
 801263e:	d900      	bls.n	8012642 <__ssputs_r+0x86>
 8012640:	463e      	mov	r6, r7
 8012642:	6820      	ldr	r0, [r4, #0]
 8012644:	4632      	mov	r2, r6
 8012646:	4641      	mov	r1, r8
 8012648:	f000 ff40 	bl	80134cc <memmove>
 801264c:	68a3      	ldr	r3, [r4, #8]
 801264e:	1b9b      	subs	r3, r3, r6
 8012650:	60a3      	str	r3, [r4, #8]
 8012652:	6823      	ldr	r3, [r4, #0]
 8012654:	4433      	add	r3, r6
 8012656:	6023      	str	r3, [r4, #0]
 8012658:	2000      	movs	r0, #0
 801265a:	e7db      	b.n	8012614 <__ssputs_r+0x58>
 801265c:	462a      	mov	r2, r5
 801265e:	f000 ff5b 	bl	8013518 <_realloc_r>
 8012662:	4606      	mov	r6, r0
 8012664:	2800      	cmp	r0, #0
 8012666:	d1e1      	bne.n	801262c <__ssputs_r+0x70>
 8012668:	6921      	ldr	r1, [r4, #16]
 801266a:	4650      	mov	r0, sl
 801266c:	f7ff fec6 	bl	80123fc <_free_r>
 8012670:	e7c7      	b.n	8012602 <__ssputs_r+0x46>
	...

08012674 <_svfiprintf_r>:
 8012674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012678:	4698      	mov	r8, r3
 801267a:	898b      	ldrh	r3, [r1, #12]
 801267c:	061b      	lsls	r3, r3, #24
 801267e:	b09d      	sub	sp, #116	; 0x74
 8012680:	4607      	mov	r7, r0
 8012682:	460d      	mov	r5, r1
 8012684:	4614      	mov	r4, r2
 8012686:	d50e      	bpl.n	80126a6 <_svfiprintf_r+0x32>
 8012688:	690b      	ldr	r3, [r1, #16]
 801268a:	b963      	cbnz	r3, 80126a6 <_svfiprintf_r+0x32>
 801268c:	2140      	movs	r1, #64	; 0x40
 801268e:	f7ff ff21 	bl	80124d4 <_malloc_r>
 8012692:	6028      	str	r0, [r5, #0]
 8012694:	6128      	str	r0, [r5, #16]
 8012696:	b920      	cbnz	r0, 80126a2 <_svfiprintf_r+0x2e>
 8012698:	230c      	movs	r3, #12
 801269a:	603b      	str	r3, [r7, #0]
 801269c:	f04f 30ff 	mov.w	r0, #4294967295
 80126a0:	e0d1      	b.n	8012846 <_svfiprintf_r+0x1d2>
 80126a2:	2340      	movs	r3, #64	; 0x40
 80126a4:	616b      	str	r3, [r5, #20]
 80126a6:	2300      	movs	r3, #0
 80126a8:	9309      	str	r3, [sp, #36]	; 0x24
 80126aa:	2320      	movs	r3, #32
 80126ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80126b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80126b4:	2330      	movs	r3, #48	; 0x30
 80126b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012860 <_svfiprintf_r+0x1ec>
 80126ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80126be:	f04f 0901 	mov.w	r9, #1
 80126c2:	4623      	mov	r3, r4
 80126c4:	469a      	mov	sl, r3
 80126c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80126ca:	b10a      	cbz	r2, 80126d0 <_svfiprintf_r+0x5c>
 80126cc:	2a25      	cmp	r2, #37	; 0x25
 80126ce:	d1f9      	bne.n	80126c4 <_svfiprintf_r+0x50>
 80126d0:	ebba 0b04 	subs.w	fp, sl, r4
 80126d4:	d00b      	beq.n	80126ee <_svfiprintf_r+0x7a>
 80126d6:	465b      	mov	r3, fp
 80126d8:	4622      	mov	r2, r4
 80126da:	4629      	mov	r1, r5
 80126dc:	4638      	mov	r0, r7
 80126de:	f7ff ff6d 	bl	80125bc <__ssputs_r>
 80126e2:	3001      	adds	r0, #1
 80126e4:	f000 80aa 	beq.w	801283c <_svfiprintf_r+0x1c8>
 80126e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80126ea:	445a      	add	r2, fp
 80126ec:	9209      	str	r2, [sp, #36]	; 0x24
 80126ee:	f89a 3000 	ldrb.w	r3, [sl]
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	f000 80a2 	beq.w	801283c <_svfiprintf_r+0x1c8>
 80126f8:	2300      	movs	r3, #0
 80126fa:	f04f 32ff 	mov.w	r2, #4294967295
 80126fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012702:	f10a 0a01 	add.w	sl, sl, #1
 8012706:	9304      	str	r3, [sp, #16]
 8012708:	9307      	str	r3, [sp, #28]
 801270a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801270e:	931a      	str	r3, [sp, #104]	; 0x68
 8012710:	4654      	mov	r4, sl
 8012712:	2205      	movs	r2, #5
 8012714:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012718:	4851      	ldr	r0, [pc, #324]	; (8012860 <_svfiprintf_r+0x1ec>)
 801271a:	f7ed fd91 	bl	8000240 <memchr>
 801271e:	9a04      	ldr	r2, [sp, #16]
 8012720:	b9d8      	cbnz	r0, 801275a <_svfiprintf_r+0xe6>
 8012722:	06d0      	lsls	r0, r2, #27
 8012724:	bf44      	itt	mi
 8012726:	2320      	movmi	r3, #32
 8012728:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801272c:	0711      	lsls	r1, r2, #28
 801272e:	bf44      	itt	mi
 8012730:	232b      	movmi	r3, #43	; 0x2b
 8012732:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012736:	f89a 3000 	ldrb.w	r3, [sl]
 801273a:	2b2a      	cmp	r3, #42	; 0x2a
 801273c:	d015      	beq.n	801276a <_svfiprintf_r+0xf6>
 801273e:	9a07      	ldr	r2, [sp, #28]
 8012740:	4654      	mov	r4, sl
 8012742:	2000      	movs	r0, #0
 8012744:	f04f 0c0a 	mov.w	ip, #10
 8012748:	4621      	mov	r1, r4
 801274a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801274e:	3b30      	subs	r3, #48	; 0x30
 8012750:	2b09      	cmp	r3, #9
 8012752:	d94e      	bls.n	80127f2 <_svfiprintf_r+0x17e>
 8012754:	b1b0      	cbz	r0, 8012784 <_svfiprintf_r+0x110>
 8012756:	9207      	str	r2, [sp, #28]
 8012758:	e014      	b.n	8012784 <_svfiprintf_r+0x110>
 801275a:	eba0 0308 	sub.w	r3, r0, r8
 801275e:	fa09 f303 	lsl.w	r3, r9, r3
 8012762:	4313      	orrs	r3, r2
 8012764:	9304      	str	r3, [sp, #16]
 8012766:	46a2      	mov	sl, r4
 8012768:	e7d2      	b.n	8012710 <_svfiprintf_r+0x9c>
 801276a:	9b03      	ldr	r3, [sp, #12]
 801276c:	1d19      	adds	r1, r3, #4
 801276e:	681b      	ldr	r3, [r3, #0]
 8012770:	9103      	str	r1, [sp, #12]
 8012772:	2b00      	cmp	r3, #0
 8012774:	bfbb      	ittet	lt
 8012776:	425b      	neglt	r3, r3
 8012778:	f042 0202 	orrlt.w	r2, r2, #2
 801277c:	9307      	strge	r3, [sp, #28]
 801277e:	9307      	strlt	r3, [sp, #28]
 8012780:	bfb8      	it	lt
 8012782:	9204      	strlt	r2, [sp, #16]
 8012784:	7823      	ldrb	r3, [r4, #0]
 8012786:	2b2e      	cmp	r3, #46	; 0x2e
 8012788:	d10c      	bne.n	80127a4 <_svfiprintf_r+0x130>
 801278a:	7863      	ldrb	r3, [r4, #1]
 801278c:	2b2a      	cmp	r3, #42	; 0x2a
 801278e:	d135      	bne.n	80127fc <_svfiprintf_r+0x188>
 8012790:	9b03      	ldr	r3, [sp, #12]
 8012792:	1d1a      	adds	r2, r3, #4
 8012794:	681b      	ldr	r3, [r3, #0]
 8012796:	9203      	str	r2, [sp, #12]
 8012798:	2b00      	cmp	r3, #0
 801279a:	bfb8      	it	lt
 801279c:	f04f 33ff 	movlt.w	r3, #4294967295
 80127a0:	3402      	adds	r4, #2
 80127a2:	9305      	str	r3, [sp, #20]
 80127a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012870 <_svfiprintf_r+0x1fc>
 80127a8:	7821      	ldrb	r1, [r4, #0]
 80127aa:	2203      	movs	r2, #3
 80127ac:	4650      	mov	r0, sl
 80127ae:	f7ed fd47 	bl	8000240 <memchr>
 80127b2:	b140      	cbz	r0, 80127c6 <_svfiprintf_r+0x152>
 80127b4:	2340      	movs	r3, #64	; 0x40
 80127b6:	eba0 000a 	sub.w	r0, r0, sl
 80127ba:	fa03 f000 	lsl.w	r0, r3, r0
 80127be:	9b04      	ldr	r3, [sp, #16]
 80127c0:	4303      	orrs	r3, r0
 80127c2:	3401      	adds	r4, #1
 80127c4:	9304      	str	r3, [sp, #16]
 80127c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80127ca:	4826      	ldr	r0, [pc, #152]	; (8012864 <_svfiprintf_r+0x1f0>)
 80127cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80127d0:	2206      	movs	r2, #6
 80127d2:	f7ed fd35 	bl	8000240 <memchr>
 80127d6:	2800      	cmp	r0, #0
 80127d8:	d038      	beq.n	801284c <_svfiprintf_r+0x1d8>
 80127da:	4b23      	ldr	r3, [pc, #140]	; (8012868 <_svfiprintf_r+0x1f4>)
 80127dc:	bb1b      	cbnz	r3, 8012826 <_svfiprintf_r+0x1b2>
 80127de:	9b03      	ldr	r3, [sp, #12]
 80127e0:	3307      	adds	r3, #7
 80127e2:	f023 0307 	bic.w	r3, r3, #7
 80127e6:	3308      	adds	r3, #8
 80127e8:	9303      	str	r3, [sp, #12]
 80127ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80127ec:	4433      	add	r3, r6
 80127ee:	9309      	str	r3, [sp, #36]	; 0x24
 80127f0:	e767      	b.n	80126c2 <_svfiprintf_r+0x4e>
 80127f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80127f6:	460c      	mov	r4, r1
 80127f8:	2001      	movs	r0, #1
 80127fa:	e7a5      	b.n	8012748 <_svfiprintf_r+0xd4>
 80127fc:	2300      	movs	r3, #0
 80127fe:	3401      	adds	r4, #1
 8012800:	9305      	str	r3, [sp, #20]
 8012802:	4619      	mov	r1, r3
 8012804:	f04f 0c0a 	mov.w	ip, #10
 8012808:	4620      	mov	r0, r4
 801280a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801280e:	3a30      	subs	r2, #48	; 0x30
 8012810:	2a09      	cmp	r2, #9
 8012812:	d903      	bls.n	801281c <_svfiprintf_r+0x1a8>
 8012814:	2b00      	cmp	r3, #0
 8012816:	d0c5      	beq.n	80127a4 <_svfiprintf_r+0x130>
 8012818:	9105      	str	r1, [sp, #20]
 801281a:	e7c3      	b.n	80127a4 <_svfiprintf_r+0x130>
 801281c:	fb0c 2101 	mla	r1, ip, r1, r2
 8012820:	4604      	mov	r4, r0
 8012822:	2301      	movs	r3, #1
 8012824:	e7f0      	b.n	8012808 <_svfiprintf_r+0x194>
 8012826:	ab03      	add	r3, sp, #12
 8012828:	9300      	str	r3, [sp, #0]
 801282a:	462a      	mov	r2, r5
 801282c:	4b0f      	ldr	r3, [pc, #60]	; (801286c <_svfiprintf_r+0x1f8>)
 801282e:	a904      	add	r1, sp, #16
 8012830:	4638      	mov	r0, r7
 8012832:	f7fc f991 	bl	800eb58 <_printf_float>
 8012836:	1c42      	adds	r2, r0, #1
 8012838:	4606      	mov	r6, r0
 801283a:	d1d6      	bne.n	80127ea <_svfiprintf_r+0x176>
 801283c:	89ab      	ldrh	r3, [r5, #12]
 801283e:	065b      	lsls	r3, r3, #25
 8012840:	f53f af2c 	bmi.w	801269c <_svfiprintf_r+0x28>
 8012844:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012846:	b01d      	add	sp, #116	; 0x74
 8012848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801284c:	ab03      	add	r3, sp, #12
 801284e:	9300      	str	r3, [sp, #0]
 8012850:	462a      	mov	r2, r5
 8012852:	4b06      	ldr	r3, [pc, #24]	; (801286c <_svfiprintf_r+0x1f8>)
 8012854:	a904      	add	r1, sp, #16
 8012856:	4638      	mov	r0, r7
 8012858:	f7fc fc22 	bl	800f0a0 <_printf_i>
 801285c:	e7eb      	b.n	8012836 <_svfiprintf_r+0x1c2>
 801285e:	bf00      	nop
 8012860:	08014284 	.word	0x08014284
 8012864:	0801428e 	.word	0x0801428e
 8012868:	0800eb59 	.word	0x0800eb59
 801286c:	080125bd 	.word	0x080125bd
 8012870:	0801428a 	.word	0x0801428a

08012874 <_sungetc_r>:
 8012874:	b538      	push	{r3, r4, r5, lr}
 8012876:	1c4b      	adds	r3, r1, #1
 8012878:	4614      	mov	r4, r2
 801287a:	d103      	bne.n	8012884 <_sungetc_r+0x10>
 801287c:	f04f 35ff 	mov.w	r5, #4294967295
 8012880:	4628      	mov	r0, r5
 8012882:	bd38      	pop	{r3, r4, r5, pc}
 8012884:	8993      	ldrh	r3, [r2, #12]
 8012886:	f023 0320 	bic.w	r3, r3, #32
 801288a:	8193      	strh	r3, [r2, #12]
 801288c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801288e:	6852      	ldr	r2, [r2, #4]
 8012890:	b2cd      	uxtb	r5, r1
 8012892:	b18b      	cbz	r3, 80128b8 <_sungetc_r+0x44>
 8012894:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012896:	4293      	cmp	r3, r2
 8012898:	dd08      	ble.n	80128ac <_sungetc_r+0x38>
 801289a:	6823      	ldr	r3, [r4, #0]
 801289c:	1e5a      	subs	r2, r3, #1
 801289e:	6022      	str	r2, [r4, #0]
 80128a0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80128a4:	6863      	ldr	r3, [r4, #4]
 80128a6:	3301      	adds	r3, #1
 80128a8:	6063      	str	r3, [r4, #4]
 80128aa:	e7e9      	b.n	8012880 <_sungetc_r+0xc>
 80128ac:	4621      	mov	r1, r4
 80128ae:	f000 fbdb 	bl	8013068 <__submore>
 80128b2:	2800      	cmp	r0, #0
 80128b4:	d0f1      	beq.n	801289a <_sungetc_r+0x26>
 80128b6:	e7e1      	b.n	801287c <_sungetc_r+0x8>
 80128b8:	6921      	ldr	r1, [r4, #16]
 80128ba:	6823      	ldr	r3, [r4, #0]
 80128bc:	b151      	cbz	r1, 80128d4 <_sungetc_r+0x60>
 80128be:	4299      	cmp	r1, r3
 80128c0:	d208      	bcs.n	80128d4 <_sungetc_r+0x60>
 80128c2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80128c6:	42a9      	cmp	r1, r5
 80128c8:	d104      	bne.n	80128d4 <_sungetc_r+0x60>
 80128ca:	3b01      	subs	r3, #1
 80128cc:	3201      	adds	r2, #1
 80128ce:	6023      	str	r3, [r4, #0]
 80128d0:	6062      	str	r2, [r4, #4]
 80128d2:	e7d5      	b.n	8012880 <_sungetc_r+0xc>
 80128d4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80128d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80128dc:	6363      	str	r3, [r4, #52]	; 0x34
 80128de:	2303      	movs	r3, #3
 80128e0:	63a3      	str	r3, [r4, #56]	; 0x38
 80128e2:	4623      	mov	r3, r4
 80128e4:	f803 5f46 	strb.w	r5, [r3, #70]!
 80128e8:	6023      	str	r3, [r4, #0]
 80128ea:	2301      	movs	r3, #1
 80128ec:	e7dc      	b.n	80128a8 <_sungetc_r+0x34>

080128ee <__ssrefill_r>:
 80128ee:	b510      	push	{r4, lr}
 80128f0:	460c      	mov	r4, r1
 80128f2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80128f4:	b169      	cbz	r1, 8012912 <__ssrefill_r+0x24>
 80128f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80128fa:	4299      	cmp	r1, r3
 80128fc:	d001      	beq.n	8012902 <__ssrefill_r+0x14>
 80128fe:	f7ff fd7d 	bl	80123fc <_free_r>
 8012902:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012904:	6063      	str	r3, [r4, #4]
 8012906:	2000      	movs	r0, #0
 8012908:	6360      	str	r0, [r4, #52]	; 0x34
 801290a:	b113      	cbz	r3, 8012912 <__ssrefill_r+0x24>
 801290c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801290e:	6023      	str	r3, [r4, #0]
 8012910:	bd10      	pop	{r4, pc}
 8012912:	6923      	ldr	r3, [r4, #16]
 8012914:	6023      	str	r3, [r4, #0]
 8012916:	2300      	movs	r3, #0
 8012918:	6063      	str	r3, [r4, #4]
 801291a:	89a3      	ldrh	r3, [r4, #12]
 801291c:	f043 0320 	orr.w	r3, r3, #32
 8012920:	81a3      	strh	r3, [r4, #12]
 8012922:	f04f 30ff 	mov.w	r0, #4294967295
 8012926:	e7f3      	b.n	8012910 <__ssrefill_r+0x22>

08012928 <__ssvfiscanf_r>:
 8012928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801292c:	460c      	mov	r4, r1
 801292e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8012932:	2100      	movs	r1, #0
 8012934:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8012938:	49a6      	ldr	r1, [pc, #664]	; (8012bd4 <__ssvfiscanf_r+0x2ac>)
 801293a:	91a0      	str	r1, [sp, #640]	; 0x280
 801293c:	f10d 0804 	add.w	r8, sp, #4
 8012940:	49a5      	ldr	r1, [pc, #660]	; (8012bd8 <__ssvfiscanf_r+0x2b0>)
 8012942:	4fa6      	ldr	r7, [pc, #664]	; (8012bdc <__ssvfiscanf_r+0x2b4>)
 8012944:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8012be0 <__ssvfiscanf_r+0x2b8>
 8012948:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801294c:	4606      	mov	r6, r0
 801294e:	91a1      	str	r1, [sp, #644]	; 0x284
 8012950:	9300      	str	r3, [sp, #0]
 8012952:	7813      	ldrb	r3, [r2, #0]
 8012954:	2b00      	cmp	r3, #0
 8012956:	f000 815a 	beq.w	8012c0e <__ssvfiscanf_r+0x2e6>
 801295a:	5dd9      	ldrb	r1, [r3, r7]
 801295c:	f011 0108 	ands.w	r1, r1, #8
 8012960:	f102 0501 	add.w	r5, r2, #1
 8012964:	d019      	beq.n	801299a <__ssvfiscanf_r+0x72>
 8012966:	6863      	ldr	r3, [r4, #4]
 8012968:	2b00      	cmp	r3, #0
 801296a:	dd0f      	ble.n	801298c <__ssvfiscanf_r+0x64>
 801296c:	6823      	ldr	r3, [r4, #0]
 801296e:	781a      	ldrb	r2, [r3, #0]
 8012970:	5cba      	ldrb	r2, [r7, r2]
 8012972:	0712      	lsls	r2, r2, #28
 8012974:	d401      	bmi.n	801297a <__ssvfiscanf_r+0x52>
 8012976:	462a      	mov	r2, r5
 8012978:	e7eb      	b.n	8012952 <__ssvfiscanf_r+0x2a>
 801297a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801297c:	3201      	adds	r2, #1
 801297e:	9245      	str	r2, [sp, #276]	; 0x114
 8012980:	6862      	ldr	r2, [r4, #4]
 8012982:	3301      	adds	r3, #1
 8012984:	3a01      	subs	r2, #1
 8012986:	6062      	str	r2, [r4, #4]
 8012988:	6023      	str	r3, [r4, #0]
 801298a:	e7ec      	b.n	8012966 <__ssvfiscanf_r+0x3e>
 801298c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801298e:	4621      	mov	r1, r4
 8012990:	4630      	mov	r0, r6
 8012992:	4798      	blx	r3
 8012994:	2800      	cmp	r0, #0
 8012996:	d0e9      	beq.n	801296c <__ssvfiscanf_r+0x44>
 8012998:	e7ed      	b.n	8012976 <__ssvfiscanf_r+0x4e>
 801299a:	2b25      	cmp	r3, #37	; 0x25
 801299c:	d012      	beq.n	80129c4 <__ssvfiscanf_r+0x9c>
 801299e:	469a      	mov	sl, r3
 80129a0:	6863      	ldr	r3, [r4, #4]
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	f340 8091 	ble.w	8012aca <__ssvfiscanf_r+0x1a2>
 80129a8:	6822      	ldr	r2, [r4, #0]
 80129aa:	7813      	ldrb	r3, [r2, #0]
 80129ac:	4553      	cmp	r3, sl
 80129ae:	f040 812e 	bne.w	8012c0e <__ssvfiscanf_r+0x2e6>
 80129b2:	6863      	ldr	r3, [r4, #4]
 80129b4:	3b01      	subs	r3, #1
 80129b6:	6063      	str	r3, [r4, #4]
 80129b8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80129ba:	3201      	adds	r2, #1
 80129bc:	3301      	adds	r3, #1
 80129be:	6022      	str	r2, [r4, #0]
 80129c0:	9345      	str	r3, [sp, #276]	; 0x114
 80129c2:	e7d8      	b.n	8012976 <__ssvfiscanf_r+0x4e>
 80129c4:	9141      	str	r1, [sp, #260]	; 0x104
 80129c6:	9143      	str	r1, [sp, #268]	; 0x10c
 80129c8:	7853      	ldrb	r3, [r2, #1]
 80129ca:	2b2a      	cmp	r3, #42	; 0x2a
 80129cc:	bf02      	ittt	eq
 80129ce:	2310      	moveq	r3, #16
 80129d0:	1c95      	addeq	r5, r2, #2
 80129d2:	9341      	streq	r3, [sp, #260]	; 0x104
 80129d4:	220a      	movs	r2, #10
 80129d6:	46aa      	mov	sl, r5
 80129d8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80129dc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80129e0:	2b09      	cmp	r3, #9
 80129e2:	d91d      	bls.n	8012a20 <__ssvfiscanf_r+0xf8>
 80129e4:	487e      	ldr	r0, [pc, #504]	; (8012be0 <__ssvfiscanf_r+0x2b8>)
 80129e6:	2203      	movs	r2, #3
 80129e8:	f7ed fc2a 	bl	8000240 <memchr>
 80129ec:	b140      	cbz	r0, 8012a00 <__ssvfiscanf_r+0xd8>
 80129ee:	2301      	movs	r3, #1
 80129f0:	eba0 0009 	sub.w	r0, r0, r9
 80129f4:	fa03 f000 	lsl.w	r0, r3, r0
 80129f8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80129fa:	4318      	orrs	r0, r3
 80129fc:	9041      	str	r0, [sp, #260]	; 0x104
 80129fe:	4655      	mov	r5, sl
 8012a00:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012a04:	2b78      	cmp	r3, #120	; 0x78
 8012a06:	d806      	bhi.n	8012a16 <__ssvfiscanf_r+0xee>
 8012a08:	2b57      	cmp	r3, #87	; 0x57
 8012a0a:	d810      	bhi.n	8012a2e <__ssvfiscanf_r+0x106>
 8012a0c:	2b25      	cmp	r3, #37	; 0x25
 8012a0e:	d0c6      	beq.n	801299e <__ssvfiscanf_r+0x76>
 8012a10:	d856      	bhi.n	8012ac0 <__ssvfiscanf_r+0x198>
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d064      	beq.n	8012ae0 <__ssvfiscanf_r+0x1b8>
 8012a16:	2303      	movs	r3, #3
 8012a18:	9347      	str	r3, [sp, #284]	; 0x11c
 8012a1a:	230a      	movs	r3, #10
 8012a1c:	9342      	str	r3, [sp, #264]	; 0x108
 8012a1e:	e071      	b.n	8012b04 <__ssvfiscanf_r+0x1dc>
 8012a20:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8012a22:	fb02 1103 	mla	r1, r2, r3, r1
 8012a26:	3930      	subs	r1, #48	; 0x30
 8012a28:	9143      	str	r1, [sp, #268]	; 0x10c
 8012a2a:	4655      	mov	r5, sl
 8012a2c:	e7d3      	b.n	80129d6 <__ssvfiscanf_r+0xae>
 8012a2e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8012a32:	2a20      	cmp	r2, #32
 8012a34:	d8ef      	bhi.n	8012a16 <__ssvfiscanf_r+0xee>
 8012a36:	a101      	add	r1, pc, #4	; (adr r1, 8012a3c <__ssvfiscanf_r+0x114>)
 8012a38:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8012a3c:	08012aef 	.word	0x08012aef
 8012a40:	08012a17 	.word	0x08012a17
 8012a44:	08012a17 	.word	0x08012a17
 8012a48:	08012b4d 	.word	0x08012b4d
 8012a4c:	08012a17 	.word	0x08012a17
 8012a50:	08012a17 	.word	0x08012a17
 8012a54:	08012a17 	.word	0x08012a17
 8012a58:	08012a17 	.word	0x08012a17
 8012a5c:	08012a17 	.word	0x08012a17
 8012a60:	08012a17 	.word	0x08012a17
 8012a64:	08012a17 	.word	0x08012a17
 8012a68:	08012b63 	.word	0x08012b63
 8012a6c:	08012b39 	.word	0x08012b39
 8012a70:	08012ac7 	.word	0x08012ac7
 8012a74:	08012ac7 	.word	0x08012ac7
 8012a78:	08012ac7 	.word	0x08012ac7
 8012a7c:	08012a17 	.word	0x08012a17
 8012a80:	08012b3d 	.word	0x08012b3d
 8012a84:	08012a17 	.word	0x08012a17
 8012a88:	08012a17 	.word	0x08012a17
 8012a8c:	08012a17 	.word	0x08012a17
 8012a90:	08012a17 	.word	0x08012a17
 8012a94:	08012b73 	.word	0x08012b73
 8012a98:	08012b45 	.word	0x08012b45
 8012a9c:	08012ae7 	.word	0x08012ae7
 8012aa0:	08012a17 	.word	0x08012a17
 8012aa4:	08012a17 	.word	0x08012a17
 8012aa8:	08012b6f 	.word	0x08012b6f
 8012aac:	08012a17 	.word	0x08012a17
 8012ab0:	08012b39 	.word	0x08012b39
 8012ab4:	08012a17 	.word	0x08012a17
 8012ab8:	08012a17 	.word	0x08012a17
 8012abc:	08012aef 	.word	0x08012aef
 8012ac0:	3b45      	subs	r3, #69	; 0x45
 8012ac2:	2b02      	cmp	r3, #2
 8012ac4:	d8a7      	bhi.n	8012a16 <__ssvfiscanf_r+0xee>
 8012ac6:	2305      	movs	r3, #5
 8012ac8:	e01b      	b.n	8012b02 <__ssvfiscanf_r+0x1da>
 8012aca:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012acc:	4621      	mov	r1, r4
 8012ace:	4630      	mov	r0, r6
 8012ad0:	4798      	blx	r3
 8012ad2:	2800      	cmp	r0, #0
 8012ad4:	f43f af68 	beq.w	80129a8 <__ssvfiscanf_r+0x80>
 8012ad8:	9844      	ldr	r0, [sp, #272]	; 0x110
 8012ada:	2800      	cmp	r0, #0
 8012adc:	f040 808d 	bne.w	8012bfa <__ssvfiscanf_r+0x2d2>
 8012ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8012ae4:	e08f      	b.n	8012c06 <__ssvfiscanf_r+0x2de>
 8012ae6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8012ae8:	f042 0220 	orr.w	r2, r2, #32
 8012aec:	9241      	str	r2, [sp, #260]	; 0x104
 8012aee:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8012af0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012af4:	9241      	str	r2, [sp, #260]	; 0x104
 8012af6:	2210      	movs	r2, #16
 8012af8:	2b6f      	cmp	r3, #111	; 0x6f
 8012afa:	9242      	str	r2, [sp, #264]	; 0x108
 8012afc:	bf34      	ite	cc
 8012afe:	2303      	movcc	r3, #3
 8012b00:	2304      	movcs	r3, #4
 8012b02:	9347      	str	r3, [sp, #284]	; 0x11c
 8012b04:	6863      	ldr	r3, [r4, #4]
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	dd42      	ble.n	8012b90 <__ssvfiscanf_r+0x268>
 8012b0a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012b0c:	0659      	lsls	r1, r3, #25
 8012b0e:	d404      	bmi.n	8012b1a <__ssvfiscanf_r+0x1f2>
 8012b10:	6823      	ldr	r3, [r4, #0]
 8012b12:	781a      	ldrb	r2, [r3, #0]
 8012b14:	5cba      	ldrb	r2, [r7, r2]
 8012b16:	0712      	lsls	r2, r2, #28
 8012b18:	d441      	bmi.n	8012b9e <__ssvfiscanf_r+0x276>
 8012b1a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8012b1c:	2b02      	cmp	r3, #2
 8012b1e:	dc50      	bgt.n	8012bc2 <__ssvfiscanf_r+0x29a>
 8012b20:	466b      	mov	r3, sp
 8012b22:	4622      	mov	r2, r4
 8012b24:	a941      	add	r1, sp, #260	; 0x104
 8012b26:	4630      	mov	r0, r6
 8012b28:	f000 f876 	bl	8012c18 <_scanf_chars>
 8012b2c:	2801      	cmp	r0, #1
 8012b2e:	d06e      	beq.n	8012c0e <__ssvfiscanf_r+0x2e6>
 8012b30:	2802      	cmp	r0, #2
 8012b32:	f47f af20 	bne.w	8012976 <__ssvfiscanf_r+0x4e>
 8012b36:	e7cf      	b.n	8012ad8 <__ssvfiscanf_r+0x1b0>
 8012b38:	220a      	movs	r2, #10
 8012b3a:	e7dd      	b.n	8012af8 <__ssvfiscanf_r+0x1d0>
 8012b3c:	2300      	movs	r3, #0
 8012b3e:	9342      	str	r3, [sp, #264]	; 0x108
 8012b40:	2303      	movs	r3, #3
 8012b42:	e7de      	b.n	8012b02 <__ssvfiscanf_r+0x1da>
 8012b44:	2308      	movs	r3, #8
 8012b46:	9342      	str	r3, [sp, #264]	; 0x108
 8012b48:	2304      	movs	r3, #4
 8012b4a:	e7da      	b.n	8012b02 <__ssvfiscanf_r+0x1da>
 8012b4c:	4629      	mov	r1, r5
 8012b4e:	4640      	mov	r0, r8
 8012b50:	f000 f9de 	bl	8012f10 <__sccl>
 8012b54:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012b56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012b5a:	9341      	str	r3, [sp, #260]	; 0x104
 8012b5c:	4605      	mov	r5, r0
 8012b5e:	2301      	movs	r3, #1
 8012b60:	e7cf      	b.n	8012b02 <__ssvfiscanf_r+0x1da>
 8012b62:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012b64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012b68:	9341      	str	r3, [sp, #260]	; 0x104
 8012b6a:	2300      	movs	r3, #0
 8012b6c:	e7c9      	b.n	8012b02 <__ssvfiscanf_r+0x1da>
 8012b6e:	2302      	movs	r3, #2
 8012b70:	e7c7      	b.n	8012b02 <__ssvfiscanf_r+0x1da>
 8012b72:	9841      	ldr	r0, [sp, #260]	; 0x104
 8012b74:	06c3      	lsls	r3, r0, #27
 8012b76:	f53f aefe 	bmi.w	8012976 <__ssvfiscanf_r+0x4e>
 8012b7a:	9b00      	ldr	r3, [sp, #0]
 8012b7c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8012b7e:	1d19      	adds	r1, r3, #4
 8012b80:	9100      	str	r1, [sp, #0]
 8012b82:	681b      	ldr	r3, [r3, #0]
 8012b84:	f010 0f01 	tst.w	r0, #1
 8012b88:	bf14      	ite	ne
 8012b8a:	801a      	strhne	r2, [r3, #0]
 8012b8c:	601a      	streq	r2, [r3, #0]
 8012b8e:	e6f2      	b.n	8012976 <__ssvfiscanf_r+0x4e>
 8012b90:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012b92:	4621      	mov	r1, r4
 8012b94:	4630      	mov	r0, r6
 8012b96:	4798      	blx	r3
 8012b98:	2800      	cmp	r0, #0
 8012b9a:	d0b6      	beq.n	8012b0a <__ssvfiscanf_r+0x1e2>
 8012b9c:	e79c      	b.n	8012ad8 <__ssvfiscanf_r+0x1b0>
 8012b9e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8012ba0:	3201      	adds	r2, #1
 8012ba2:	9245      	str	r2, [sp, #276]	; 0x114
 8012ba4:	6862      	ldr	r2, [r4, #4]
 8012ba6:	3a01      	subs	r2, #1
 8012ba8:	2a00      	cmp	r2, #0
 8012baa:	6062      	str	r2, [r4, #4]
 8012bac:	dd02      	ble.n	8012bb4 <__ssvfiscanf_r+0x28c>
 8012bae:	3301      	adds	r3, #1
 8012bb0:	6023      	str	r3, [r4, #0]
 8012bb2:	e7ad      	b.n	8012b10 <__ssvfiscanf_r+0x1e8>
 8012bb4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012bb6:	4621      	mov	r1, r4
 8012bb8:	4630      	mov	r0, r6
 8012bba:	4798      	blx	r3
 8012bbc:	2800      	cmp	r0, #0
 8012bbe:	d0a7      	beq.n	8012b10 <__ssvfiscanf_r+0x1e8>
 8012bc0:	e78a      	b.n	8012ad8 <__ssvfiscanf_r+0x1b0>
 8012bc2:	2b04      	cmp	r3, #4
 8012bc4:	dc0e      	bgt.n	8012be4 <__ssvfiscanf_r+0x2bc>
 8012bc6:	466b      	mov	r3, sp
 8012bc8:	4622      	mov	r2, r4
 8012bca:	a941      	add	r1, sp, #260	; 0x104
 8012bcc:	4630      	mov	r0, r6
 8012bce:	f000 f87d 	bl	8012ccc <_scanf_i>
 8012bd2:	e7ab      	b.n	8012b2c <__ssvfiscanf_r+0x204>
 8012bd4:	08012875 	.word	0x08012875
 8012bd8:	080128ef 	.word	0x080128ef
 8012bdc:	08013f21 	.word	0x08013f21
 8012be0:	0801428a 	.word	0x0801428a
 8012be4:	4b0b      	ldr	r3, [pc, #44]	; (8012c14 <__ssvfiscanf_r+0x2ec>)
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	f43f aec5 	beq.w	8012976 <__ssvfiscanf_r+0x4e>
 8012bec:	466b      	mov	r3, sp
 8012bee:	4622      	mov	r2, r4
 8012bf0:	a941      	add	r1, sp, #260	; 0x104
 8012bf2:	4630      	mov	r0, r6
 8012bf4:	f7fc fb7a 	bl	800f2ec <_scanf_float>
 8012bf8:	e798      	b.n	8012b2c <__ssvfiscanf_r+0x204>
 8012bfa:	89a3      	ldrh	r3, [r4, #12]
 8012bfc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8012c00:	bf18      	it	ne
 8012c02:	f04f 30ff 	movne.w	r0, #4294967295
 8012c06:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8012c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c0e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8012c10:	e7f9      	b.n	8012c06 <__ssvfiscanf_r+0x2de>
 8012c12:	bf00      	nop
 8012c14:	0800f2ed 	.word	0x0800f2ed

08012c18 <_scanf_chars>:
 8012c18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012c1c:	4615      	mov	r5, r2
 8012c1e:	688a      	ldr	r2, [r1, #8]
 8012c20:	4680      	mov	r8, r0
 8012c22:	460c      	mov	r4, r1
 8012c24:	b932      	cbnz	r2, 8012c34 <_scanf_chars+0x1c>
 8012c26:	698a      	ldr	r2, [r1, #24]
 8012c28:	2a00      	cmp	r2, #0
 8012c2a:	bf0c      	ite	eq
 8012c2c:	2201      	moveq	r2, #1
 8012c2e:	f04f 32ff 	movne.w	r2, #4294967295
 8012c32:	608a      	str	r2, [r1, #8]
 8012c34:	6822      	ldr	r2, [r4, #0]
 8012c36:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8012cc8 <_scanf_chars+0xb0>
 8012c3a:	06d1      	lsls	r1, r2, #27
 8012c3c:	bf5f      	itttt	pl
 8012c3e:	681a      	ldrpl	r2, [r3, #0]
 8012c40:	1d11      	addpl	r1, r2, #4
 8012c42:	6019      	strpl	r1, [r3, #0]
 8012c44:	6816      	ldrpl	r6, [r2, #0]
 8012c46:	2700      	movs	r7, #0
 8012c48:	69a0      	ldr	r0, [r4, #24]
 8012c4a:	b188      	cbz	r0, 8012c70 <_scanf_chars+0x58>
 8012c4c:	2801      	cmp	r0, #1
 8012c4e:	d107      	bne.n	8012c60 <_scanf_chars+0x48>
 8012c50:	682a      	ldr	r2, [r5, #0]
 8012c52:	7811      	ldrb	r1, [r2, #0]
 8012c54:	6962      	ldr	r2, [r4, #20]
 8012c56:	5c52      	ldrb	r2, [r2, r1]
 8012c58:	b952      	cbnz	r2, 8012c70 <_scanf_chars+0x58>
 8012c5a:	2f00      	cmp	r7, #0
 8012c5c:	d031      	beq.n	8012cc2 <_scanf_chars+0xaa>
 8012c5e:	e022      	b.n	8012ca6 <_scanf_chars+0x8e>
 8012c60:	2802      	cmp	r0, #2
 8012c62:	d120      	bne.n	8012ca6 <_scanf_chars+0x8e>
 8012c64:	682b      	ldr	r3, [r5, #0]
 8012c66:	781b      	ldrb	r3, [r3, #0]
 8012c68:	f813 3009 	ldrb.w	r3, [r3, r9]
 8012c6c:	071b      	lsls	r3, r3, #28
 8012c6e:	d41a      	bmi.n	8012ca6 <_scanf_chars+0x8e>
 8012c70:	6823      	ldr	r3, [r4, #0]
 8012c72:	06da      	lsls	r2, r3, #27
 8012c74:	bf5e      	ittt	pl
 8012c76:	682b      	ldrpl	r3, [r5, #0]
 8012c78:	781b      	ldrbpl	r3, [r3, #0]
 8012c7a:	f806 3b01 	strbpl.w	r3, [r6], #1
 8012c7e:	682a      	ldr	r2, [r5, #0]
 8012c80:	686b      	ldr	r3, [r5, #4]
 8012c82:	3201      	adds	r2, #1
 8012c84:	602a      	str	r2, [r5, #0]
 8012c86:	68a2      	ldr	r2, [r4, #8]
 8012c88:	3b01      	subs	r3, #1
 8012c8a:	3a01      	subs	r2, #1
 8012c8c:	606b      	str	r3, [r5, #4]
 8012c8e:	3701      	adds	r7, #1
 8012c90:	60a2      	str	r2, [r4, #8]
 8012c92:	b142      	cbz	r2, 8012ca6 <_scanf_chars+0x8e>
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	dcd7      	bgt.n	8012c48 <_scanf_chars+0x30>
 8012c98:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012c9c:	4629      	mov	r1, r5
 8012c9e:	4640      	mov	r0, r8
 8012ca0:	4798      	blx	r3
 8012ca2:	2800      	cmp	r0, #0
 8012ca4:	d0d0      	beq.n	8012c48 <_scanf_chars+0x30>
 8012ca6:	6823      	ldr	r3, [r4, #0]
 8012ca8:	f013 0310 	ands.w	r3, r3, #16
 8012cac:	d105      	bne.n	8012cba <_scanf_chars+0xa2>
 8012cae:	68e2      	ldr	r2, [r4, #12]
 8012cb0:	3201      	adds	r2, #1
 8012cb2:	60e2      	str	r2, [r4, #12]
 8012cb4:	69a2      	ldr	r2, [r4, #24]
 8012cb6:	b102      	cbz	r2, 8012cba <_scanf_chars+0xa2>
 8012cb8:	7033      	strb	r3, [r6, #0]
 8012cba:	6923      	ldr	r3, [r4, #16]
 8012cbc:	443b      	add	r3, r7
 8012cbe:	6123      	str	r3, [r4, #16]
 8012cc0:	2000      	movs	r0, #0
 8012cc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012cc6:	bf00      	nop
 8012cc8:	08013f21 	.word	0x08013f21

08012ccc <_scanf_i>:
 8012ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cd0:	4698      	mov	r8, r3
 8012cd2:	4b76      	ldr	r3, [pc, #472]	; (8012eac <_scanf_i+0x1e0>)
 8012cd4:	460c      	mov	r4, r1
 8012cd6:	4682      	mov	sl, r0
 8012cd8:	4616      	mov	r6, r2
 8012cda:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012cde:	b087      	sub	sp, #28
 8012ce0:	ab03      	add	r3, sp, #12
 8012ce2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012ce6:	4b72      	ldr	r3, [pc, #456]	; (8012eb0 <_scanf_i+0x1e4>)
 8012ce8:	69a1      	ldr	r1, [r4, #24]
 8012cea:	4a72      	ldr	r2, [pc, #456]	; (8012eb4 <_scanf_i+0x1e8>)
 8012cec:	2903      	cmp	r1, #3
 8012cee:	bf18      	it	ne
 8012cf0:	461a      	movne	r2, r3
 8012cf2:	68a3      	ldr	r3, [r4, #8]
 8012cf4:	9201      	str	r2, [sp, #4]
 8012cf6:	1e5a      	subs	r2, r3, #1
 8012cf8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8012cfc:	bf88      	it	hi
 8012cfe:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8012d02:	4627      	mov	r7, r4
 8012d04:	bf82      	ittt	hi
 8012d06:	eb03 0905 	addhi.w	r9, r3, r5
 8012d0a:	f240 135d 	movwhi	r3, #349	; 0x15d
 8012d0e:	60a3      	strhi	r3, [r4, #8]
 8012d10:	f857 3b1c 	ldr.w	r3, [r7], #28
 8012d14:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8012d18:	bf98      	it	ls
 8012d1a:	f04f 0900 	movls.w	r9, #0
 8012d1e:	6023      	str	r3, [r4, #0]
 8012d20:	463d      	mov	r5, r7
 8012d22:	f04f 0b00 	mov.w	fp, #0
 8012d26:	6831      	ldr	r1, [r6, #0]
 8012d28:	ab03      	add	r3, sp, #12
 8012d2a:	7809      	ldrb	r1, [r1, #0]
 8012d2c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8012d30:	2202      	movs	r2, #2
 8012d32:	f7ed fa85 	bl	8000240 <memchr>
 8012d36:	b328      	cbz	r0, 8012d84 <_scanf_i+0xb8>
 8012d38:	f1bb 0f01 	cmp.w	fp, #1
 8012d3c:	d159      	bne.n	8012df2 <_scanf_i+0x126>
 8012d3e:	6862      	ldr	r2, [r4, #4]
 8012d40:	b92a      	cbnz	r2, 8012d4e <_scanf_i+0x82>
 8012d42:	6822      	ldr	r2, [r4, #0]
 8012d44:	2308      	movs	r3, #8
 8012d46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012d4a:	6063      	str	r3, [r4, #4]
 8012d4c:	6022      	str	r2, [r4, #0]
 8012d4e:	6822      	ldr	r2, [r4, #0]
 8012d50:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8012d54:	6022      	str	r2, [r4, #0]
 8012d56:	68a2      	ldr	r2, [r4, #8]
 8012d58:	1e51      	subs	r1, r2, #1
 8012d5a:	60a1      	str	r1, [r4, #8]
 8012d5c:	b192      	cbz	r2, 8012d84 <_scanf_i+0xb8>
 8012d5e:	6832      	ldr	r2, [r6, #0]
 8012d60:	1c51      	adds	r1, r2, #1
 8012d62:	6031      	str	r1, [r6, #0]
 8012d64:	7812      	ldrb	r2, [r2, #0]
 8012d66:	f805 2b01 	strb.w	r2, [r5], #1
 8012d6a:	6872      	ldr	r2, [r6, #4]
 8012d6c:	3a01      	subs	r2, #1
 8012d6e:	2a00      	cmp	r2, #0
 8012d70:	6072      	str	r2, [r6, #4]
 8012d72:	dc07      	bgt.n	8012d84 <_scanf_i+0xb8>
 8012d74:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8012d78:	4631      	mov	r1, r6
 8012d7a:	4650      	mov	r0, sl
 8012d7c:	4790      	blx	r2
 8012d7e:	2800      	cmp	r0, #0
 8012d80:	f040 8085 	bne.w	8012e8e <_scanf_i+0x1c2>
 8012d84:	f10b 0b01 	add.w	fp, fp, #1
 8012d88:	f1bb 0f03 	cmp.w	fp, #3
 8012d8c:	d1cb      	bne.n	8012d26 <_scanf_i+0x5a>
 8012d8e:	6863      	ldr	r3, [r4, #4]
 8012d90:	b90b      	cbnz	r3, 8012d96 <_scanf_i+0xca>
 8012d92:	230a      	movs	r3, #10
 8012d94:	6063      	str	r3, [r4, #4]
 8012d96:	6863      	ldr	r3, [r4, #4]
 8012d98:	4947      	ldr	r1, [pc, #284]	; (8012eb8 <_scanf_i+0x1ec>)
 8012d9a:	6960      	ldr	r0, [r4, #20]
 8012d9c:	1ac9      	subs	r1, r1, r3
 8012d9e:	f000 f8b7 	bl	8012f10 <__sccl>
 8012da2:	f04f 0b00 	mov.w	fp, #0
 8012da6:	68a3      	ldr	r3, [r4, #8]
 8012da8:	6822      	ldr	r2, [r4, #0]
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d03d      	beq.n	8012e2a <_scanf_i+0x15e>
 8012dae:	6831      	ldr	r1, [r6, #0]
 8012db0:	6960      	ldr	r0, [r4, #20]
 8012db2:	f891 c000 	ldrb.w	ip, [r1]
 8012db6:	f810 000c 	ldrb.w	r0, [r0, ip]
 8012dba:	2800      	cmp	r0, #0
 8012dbc:	d035      	beq.n	8012e2a <_scanf_i+0x15e>
 8012dbe:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8012dc2:	d124      	bne.n	8012e0e <_scanf_i+0x142>
 8012dc4:	0510      	lsls	r0, r2, #20
 8012dc6:	d522      	bpl.n	8012e0e <_scanf_i+0x142>
 8012dc8:	f10b 0b01 	add.w	fp, fp, #1
 8012dcc:	f1b9 0f00 	cmp.w	r9, #0
 8012dd0:	d003      	beq.n	8012dda <_scanf_i+0x10e>
 8012dd2:	3301      	adds	r3, #1
 8012dd4:	f109 39ff 	add.w	r9, r9, #4294967295
 8012dd8:	60a3      	str	r3, [r4, #8]
 8012dda:	6873      	ldr	r3, [r6, #4]
 8012ddc:	3b01      	subs	r3, #1
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	6073      	str	r3, [r6, #4]
 8012de2:	dd1b      	ble.n	8012e1c <_scanf_i+0x150>
 8012de4:	6833      	ldr	r3, [r6, #0]
 8012de6:	3301      	adds	r3, #1
 8012de8:	6033      	str	r3, [r6, #0]
 8012dea:	68a3      	ldr	r3, [r4, #8]
 8012dec:	3b01      	subs	r3, #1
 8012dee:	60a3      	str	r3, [r4, #8]
 8012df0:	e7d9      	b.n	8012da6 <_scanf_i+0xda>
 8012df2:	f1bb 0f02 	cmp.w	fp, #2
 8012df6:	d1ae      	bne.n	8012d56 <_scanf_i+0x8a>
 8012df8:	6822      	ldr	r2, [r4, #0]
 8012dfa:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8012dfe:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8012e02:	d1bf      	bne.n	8012d84 <_scanf_i+0xb8>
 8012e04:	2310      	movs	r3, #16
 8012e06:	6063      	str	r3, [r4, #4]
 8012e08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012e0c:	e7a2      	b.n	8012d54 <_scanf_i+0x88>
 8012e0e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8012e12:	6022      	str	r2, [r4, #0]
 8012e14:	780b      	ldrb	r3, [r1, #0]
 8012e16:	f805 3b01 	strb.w	r3, [r5], #1
 8012e1a:	e7de      	b.n	8012dda <_scanf_i+0x10e>
 8012e1c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012e20:	4631      	mov	r1, r6
 8012e22:	4650      	mov	r0, sl
 8012e24:	4798      	blx	r3
 8012e26:	2800      	cmp	r0, #0
 8012e28:	d0df      	beq.n	8012dea <_scanf_i+0x11e>
 8012e2a:	6823      	ldr	r3, [r4, #0]
 8012e2c:	05db      	lsls	r3, r3, #23
 8012e2e:	d50d      	bpl.n	8012e4c <_scanf_i+0x180>
 8012e30:	42bd      	cmp	r5, r7
 8012e32:	d909      	bls.n	8012e48 <_scanf_i+0x17c>
 8012e34:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8012e38:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012e3c:	4632      	mov	r2, r6
 8012e3e:	4650      	mov	r0, sl
 8012e40:	4798      	blx	r3
 8012e42:	f105 39ff 	add.w	r9, r5, #4294967295
 8012e46:	464d      	mov	r5, r9
 8012e48:	42bd      	cmp	r5, r7
 8012e4a:	d02d      	beq.n	8012ea8 <_scanf_i+0x1dc>
 8012e4c:	6822      	ldr	r2, [r4, #0]
 8012e4e:	f012 0210 	ands.w	r2, r2, #16
 8012e52:	d113      	bne.n	8012e7c <_scanf_i+0x1b0>
 8012e54:	702a      	strb	r2, [r5, #0]
 8012e56:	6863      	ldr	r3, [r4, #4]
 8012e58:	9e01      	ldr	r6, [sp, #4]
 8012e5a:	4639      	mov	r1, r7
 8012e5c:	4650      	mov	r0, sl
 8012e5e:	47b0      	blx	r6
 8012e60:	6821      	ldr	r1, [r4, #0]
 8012e62:	f8d8 3000 	ldr.w	r3, [r8]
 8012e66:	f011 0f20 	tst.w	r1, #32
 8012e6a:	d013      	beq.n	8012e94 <_scanf_i+0x1c8>
 8012e6c:	1d1a      	adds	r2, r3, #4
 8012e6e:	f8c8 2000 	str.w	r2, [r8]
 8012e72:	681b      	ldr	r3, [r3, #0]
 8012e74:	6018      	str	r0, [r3, #0]
 8012e76:	68e3      	ldr	r3, [r4, #12]
 8012e78:	3301      	adds	r3, #1
 8012e7a:	60e3      	str	r3, [r4, #12]
 8012e7c:	1bed      	subs	r5, r5, r7
 8012e7e:	44ab      	add	fp, r5
 8012e80:	6925      	ldr	r5, [r4, #16]
 8012e82:	445d      	add	r5, fp
 8012e84:	6125      	str	r5, [r4, #16]
 8012e86:	2000      	movs	r0, #0
 8012e88:	b007      	add	sp, #28
 8012e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e8e:	f04f 0b00 	mov.w	fp, #0
 8012e92:	e7ca      	b.n	8012e2a <_scanf_i+0x15e>
 8012e94:	1d1a      	adds	r2, r3, #4
 8012e96:	f8c8 2000 	str.w	r2, [r8]
 8012e9a:	681b      	ldr	r3, [r3, #0]
 8012e9c:	f011 0f01 	tst.w	r1, #1
 8012ea0:	bf14      	ite	ne
 8012ea2:	8018      	strhne	r0, [r3, #0]
 8012ea4:	6018      	streq	r0, [r3, #0]
 8012ea6:	e7e6      	b.n	8012e76 <_scanf_i+0x1aa>
 8012ea8:	2001      	movs	r0, #1
 8012eaa:	e7ed      	b.n	8012e88 <_scanf_i+0x1bc>
 8012eac:	08013e70 	.word	0x08013e70
 8012eb0:	08013065 	.word	0x08013065
 8012eb4:	080105cd 	.word	0x080105cd
 8012eb8:	080142ae 	.word	0x080142ae

08012ebc <_read_r>:
 8012ebc:	b538      	push	{r3, r4, r5, lr}
 8012ebe:	4d07      	ldr	r5, [pc, #28]	; (8012edc <_read_r+0x20>)
 8012ec0:	4604      	mov	r4, r0
 8012ec2:	4608      	mov	r0, r1
 8012ec4:	4611      	mov	r1, r2
 8012ec6:	2200      	movs	r2, #0
 8012ec8:	602a      	str	r2, [r5, #0]
 8012eca:	461a      	mov	r2, r3
 8012ecc:	f7ef f9b6 	bl	800223c <_read>
 8012ed0:	1c43      	adds	r3, r0, #1
 8012ed2:	d102      	bne.n	8012eda <_read_r+0x1e>
 8012ed4:	682b      	ldr	r3, [r5, #0]
 8012ed6:	b103      	cbz	r3, 8012eda <_read_r+0x1e>
 8012ed8:	6023      	str	r3, [r4, #0]
 8012eda:	bd38      	pop	{r3, r4, r5, pc}
 8012edc:	20000770 	.word	0x20000770

08012ee0 <nan>:
 8012ee0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012ee8 <nan+0x8>
 8012ee4:	4770      	bx	lr
 8012ee6:	bf00      	nop
 8012ee8:	00000000 	.word	0x00000000
 8012eec:	7ff80000 	.word	0x7ff80000

08012ef0 <_sbrk_r>:
 8012ef0:	b538      	push	{r3, r4, r5, lr}
 8012ef2:	4d06      	ldr	r5, [pc, #24]	; (8012f0c <_sbrk_r+0x1c>)
 8012ef4:	2300      	movs	r3, #0
 8012ef6:	4604      	mov	r4, r0
 8012ef8:	4608      	mov	r0, r1
 8012efa:	602b      	str	r3, [r5, #0]
 8012efc:	f7ef fa0c 	bl	8002318 <_sbrk>
 8012f00:	1c43      	adds	r3, r0, #1
 8012f02:	d102      	bne.n	8012f0a <_sbrk_r+0x1a>
 8012f04:	682b      	ldr	r3, [r5, #0]
 8012f06:	b103      	cbz	r3, 8012f0a <_sbrk_r+0x1a>
 8012f08:	6023      	str	r3, [r4, #0]
 8012f0a:	bd38      	pop	{r3, r4, r5, pc}
 8012f0c:	20000770 	.word	0x20000770

08012f10 <__sccl>:
 8012f10:	b570      	push	{r4, r5, r6, lr}
 8012f12:	780b      	ldrb	r3, [r1, #0]
 8012f14:	4604      	mov	r4, r0
 8012f16:	2b5e      	cmp	r3, #94	; 0x5e
 8012f18:	bf0b      	itete	eq
 8012f1a:	784b      	ldrbeq	r3, [r1, #1]
 8012f1c:	1c48      	addne	r0, r1, #1
 8012f1e:	1c88      	addeq	r0, r1, #2
 8012f20:	2200      	movne	r2, #0
 8012f22:	bf08      	it	eq
 8012f24:	2201      	moveq	r2, #1
 8012f26:	1e61      	subs	r1, r4, #1
 8012f28:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8012f2c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8012f30:	42a9      	cmp	r1, r5
 8012f32:	d1fb      	bne.n	8012f2c <__sccl+0x1c>
 8012f34:	b90b      	cbnz	r3, 8012f3a <__sccl+0x2a>
 8012f36:	3801      	subs	r0, #1
 8012f38:	bd70      	pop	{r4, r5, r6, pc}
 8012f3a:	f082 0201 	eor.w	r2, r2, #1
 8012f3e:	54e2      	strb	r2, [r4, r3]
 8012f40:	4605      	mov	r5, r0
 8012f42:	4628      	mov	r0, r5
 8012f44:	f810 1b01 	ldrb.w	r1, [r0], #1
 8012f48:	292d      	cmp	r1, #45	; 0x2d
 8012f4a:	d006      	beq.n	8012f5a <__sccl+0x4a>
 8012f4c:	295d      	cmp	r1, #93	; 0x5d
 8012f4e:	d0f3      	beq.n	8012f38 <__sccl+0x28>
 8012f50:	b909      	cbnz	r1, 8012f56 <__sccl+0x46>
 8012f52:	4628      	mov	r0, r5
 8012f54:	e7f0      	b.n	8012f38 <__sccl+0x28>
 8012f56:	460b      	mov	r3, r1
 8012f58:	e7f1      	b.n	8012f3e <__sccl+0x2e>
 8012f5a:	786e      	ldrb	r6, [r5, #1]
 8012f5c:	2e5d      	cmp	r6, #93	; 0x5d
 8012f5e:	d0fa      	beq.n	8012f56 <__sccl+0x46>
 8012f60:	42b3      	cmp	r3, r6
 8012f62:	dcf8      	bgt.n	8012f56 <__sccl+0x46>
 8012f64:	3502      	adds	r5, #2
 8012f66:	4619      	mov	r1, r3
 8012f68:	3101      	adds	r1, #1
 8012f6a:	428e      	cmp	r6, r1
 8012f6c:	5462      	strb	r2, [r4, r1]
 8012f6e:	dcfb      	bgt.n	8012f68 <__sccl+0x58>
 8012f70:	1af1      	subs	r1, r6, r3
 8012f72:	3901      	subs	r1, #1
 8012f74:	1c58      	adds	r0, r3, #1
 8012f76:	42b3      	cmp	r3, r6
 8012f78:	bfa8      	it	ge
 8012f7a:	2100      	movge	r1, #0
 8012f7c:	1843      	adds	r3, r0, r1
 8012f7e:	e7e0      	b.n	8012f42 <__sccl+0x32>

08012f80 <_strtoul_l.constprop.0>:
 8012f80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012f84:	4f36      	ldr	r7, [pc, #216]	; (8013060 <_strtoul_l.constprop.0+0xe0>)
 8012f86:	4686      	mov	lr, r0
 8012f88:	460d      	mov	r5, r1
 8012f8a:	4628      	mov	r0, r5
 8012f8c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012f90:	5de6      	ldrb	r6, [r4, r7]
 8012f92:	f016 0608 	ands.w	r6, r6, #8
 8012f96:	d1f8      	bne.n	8012f8a <_strtoul_l.constprop.0+0xa>
 8012f98:	2c2d      	cmp	r4, #45	; 0x2d
 8012f9a:	d12f      	bne.n	8012ffc <_strtoul_l.constprop.0+0x7c>
 8012f9c:	782c      	ldrb	r4, [r5, #0]
 8012f9e:	2601      	movs	r6, #1
 8012fa0:	1c85      	adds	r5, r0, #2
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d057      	beq.n	8013056 <_strtoul_l.constprop.0+0xd6>
 8012fa6:	2b10      	cmp	r3, #16
 8012fa8:	d109      	bne.n	8012fbe <_strtoul_l.constprop.0+0x3e>
 8012faa:	2c30      	cmp	r4, #48	; 0x30
 8012fac:	d107      	bne.n	8012fbe <_strtoul_l.constprop.0+0x3e>
 8012fae:	7828      	ldrb	r0, [r5, #0]
 8012fb0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8012fb4:	2858      	cmp	r0, #88	; 0x58
 8012fb6:	d149      	bne.n	801304c <_strtoul_l.constprop.0+0xcc>
 8012fb8:	786c      	ldrb	r4, [r5, #1]
 8012fba:	2310      	movs	r3, #16
 8012fbc:	3502      	adds	r5, #2
 8012fbe:	f04f 38ff 	mov.w	r8, #4294967295
 8012fc2:	2700      	movs	r7, #0
 8012fc4:	fbb8 f8f3 	udiv	r8, r8, r3
 8012fc8:	fb03 f908 	mul.w	r9, r3, r8
 8012fcc:	ea6f 0909 	mvn.w	r9, r9
 8012fd0:	4638      	mov	r0, r7
 8012fd2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8012fd6:	f1bc 0f09 	cmp.w	ip, #9
 8012fda:	d814      	bhi.n	8013006 <_strtoul_l.constprop.0+0x86>
 8012fdc:	4664      	mov	r4, ip
 8012fde:	42a3      	cmp	r3, r4
 8012fe0:	dd22      	ble.n	8013028 <_strtoul_l.constprop.0+0xa8>
 8012fe2:	2f00      	cmp	r7, #0
 8012fe4:	db1d      	blt.n	8013022 <_strtoul_l.constprop.0+0xa2>
 8012fe6:	4580      	cmp	r8, r0
 8012fe8:	d31b      	bcc.n	8013022 <_strtoul_l.constprop.0+0xa2>
 8012fea:	d101      	bne.n	8012ff0 <_strtoul_l.constprop.0+0x70>
 8012fec:	45a1      	cmp	r9, r4
 8012fee:	db18      	blt.n	8013022 <_strtoul_l.constprop.0+0xa2>
 8012ff0:	fb00 4003 	mla	r0, r0, r3, r4
 8012ff4:	2701      	movs	r7, #1
 8012ff6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012ffa:	e7ea      	b.n	8012fd2 <_strtoul_l.constprop.0+0x52>
 8012ffc:	2c2b      	cmp	r4, #43	; 0x2b
 8012ffe:	bf04      	itt	eq
 8013000:	782c      	ldrbeq	r4, [r5, #0]
 8013002:	1c85      	addeq	r5, r0, #2
 8013004:	e7cd      	b.n	8012fa2 <_strtoul_l.constprop.0+0x22>
 8013006:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801300a:	f1bc 0f19 	cmp.w	ip, #25
 801300e:	d801      	bhi.n	8013014 <_strtoul_l.constprop.0+0x94>
 8013010:	3c37      	subs	r4, #55	; 0x37
 8013012:	e7e4      	b.n	8012fde <_strtoul_l.constprop.0+0x5e>
 8013014:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8013018:	f1bc 0f19 	cmp.w	ip, #25
 801301c:	d804      	bhi.n	8013028 <_strtoul_l.constprop.0+0xa8>
 801301e:	3c57      	subs	r4, #87	; 0x57
 8013020:	e7dd      	b.n	8012fde <_strtoul_l.constprop.0+0x5e>
 8013022:	f04f 37ff 	mov.w	r7, #4294967295
 8013026:	e7e6      	b.n	8012ff6 <_strtoul_l.constprop.0+0x76>
 8013028:	2f00      	cmp	r7, #0
 801302a:	da07      	bge.n	801303c <_strtoul_l.constprop.0+0xbc>
 801302c:	2322      	movs	r3, #34	; 0x22
 801302e:	f8ce 3000 	str.w	r3, [lr]
 8013032:	f04f 30ff 	mov.w	r0, #4294967295
 8013036:	b932      	cbnz	r2, 8013046 <_strtoul_l.constprop.0+0xc6>
 8013038:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801303c:	b106      	cbz	r6, 8013040 <_strtoul_l.constprop.0+0xc0>
 801303e:	4240      	negs	r0, r0
 8013040:	2a00      	cmp	r2, #0
 8013042:	d0f9      	beq.n	8013038 <_strtoul_l.constprop.0+0xb8>
 8013044:	b107      	cbz	r7, 8013048 <_strtoul_l.constprop.0+0xc8>
 8013046:	1e69      	subs	r1, r5, #1
 8013048:	6011      	str	r1, [r2, #0]
 801304a:	e7f5      	b.n	8013038 <_strtoul_l.constprop.0+0xb8>
 801304c:	2430      	movs	r4, #48	; 0x30
 801304e:	2b00      	cmp	r3, #0
 8013050:	d1b5      	bne.n	8012fbe <_strtoul_l.constprop.0+0x3e>
 8013052:	2308      	movs	r3, #8
 8013054:	e7b3      	b.n	8012fbe <_strtoul_l.constprop.0+0x3e>
 8013056:	2c30      	cmp	r4, #48	; 0x30
 8013058:	d0a9      	beq.n	8012fae <_strtoul_l.constprop.0+0x2e>
 801305a:	230a      	movs	r3, #10
 801305c:	e7af      	b.n	8012fbe <_strtoul_l.constprop.0+0x3e>
 801305e:	bf00      	nop
 8013060:	08013f21 	.word	0x08013f21

08013064 <_strtoul_r>:
 8013064:	f7ff bf8c 	b.w	8012f80 <_strtoul_l.constprop.0>

08013068 <__submore>:
 8013068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801306c:	460c      	mov	r4, r1
 801306e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8013070:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013074:	4299      	cmp	r1, r3
 8013076:	d11d      	bne.n	80130b4 <__submore+0x4c>
 8013078:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801307c:	f7ff fa2a 	bl	80124d4 <_malloc_r>
 8013080:	b918      	cbnz	r0, 801308a <__submore+0x22>
 8013082:	f04f 30ff 	mov.w	r0, #4294967295
 8013086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801308a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801308e:	63a3      	str	r3, [r4, #56]	; 0x38
 8013090:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8013094:	6360      	str	r0, [r4, #52]	; 0x34
 8013096:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801309a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801309e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80130a2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80130a6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80130aa:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80130ae:	6020      	str	r0, [r4, #0]
 80130b0:	2000      	movs	r0, #0
 80130b2:	e7e8      	b.n	8013086 <__submore+0x1e>
 80130b4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80130b6:	0077      	lsls	r7, r6, #1
 80130b8:	463a      	mov	r2, r7
 80130ba:	f000 fa2d 	bl	8013518 <_realloc_r>
 80130be:	4605      	mov	r5, r0
 80130c0:	2800      	cmp	r0, #0
 80130c2:	d0de      	beq.n	8013082 <__submore+0x1a>
 80130c4:	eb00 0806 	add.w	r8, r0, r6
 80130c8:	4601      	mov	r1, r0
 80130ca:	4632      	mov	r2, r6
 80130cc:	4640      	mov	r0, r8
 80130ce:	f7fb fc8d 	bl	800e9ec <memcpy>
 80130d2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80130d6:	f8c4 8000 	str.w	r8, [r4]
 80130da:	e7e9      	b.n	80130b0 <__submore+0x48>

080130dc <__ascii_wctomb>:
 80130dc:	b149      	cbz	r1, 80130f2 <__ascii_wctomb+0x16>
 80130de:	2aff      	cmp	r2, #255	; 0xff
 80130e0:	bf85      	ittet	hi
 80130e2:	238a      	movhi	r3, #138	; 0x8a
 80130e4:	6003      	strhi	r3, [r0, #0]
 80130e6:	700a      	strbls	r2, [r1, #0]
 80130e8:	f04f 30ff 	movhi.w	r0, #4294967295
 80130ec:	bf98      	it	ls
 80130ee:	2001      	movls	r0, #1
 80130f0:	4770      	bx	lr
 80130f2:	4608      	mov	r0, r1
 80130f4:	4770      	bx	lr
	...

080130f8 <__assert_func>:
 80130f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80130fa:	4614      	mov	r4, r2
 80130fc:	461a      	mov	r2, r3
 80130fe:	4b09      	ldr	r3, [pc, #36]	; (8013124 <__assert_func+0x2c>)
 8013100:	681b      	ldr	r3, [r3, #0]
 8013102:	4605      	mov	r5, r0
 8013104:	68d8      	ldr	r0, [r3, #12]
 8013106:	b14c      	cbz	r4, 801311c <__assert_func+0x24>
 8013108:	4b07      	ldr	r3, [pc, #28]	; (8013128 <__assert_func+0x30>)
 801310a:	9100      	str	r1, [sp, #0]
 801310c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013110:	4906      	ldr	r1, [pc, #24]	; (801312c <__assert_func+0x34>)
 8013112:	462b      	mov	r3, r5
 8013114:	f000 f9a6 	bl	8013464 <fiprintf>
 8013118:	f000 fc46 	bl	80139a8 <abort>
 801311c:	4b04      	ldr	r3, [pc, #16]	; (8013130 <__assert_func+0x38>)
 801311e:	461c      	mov	r4, r3
 8013120:	e7f3      	b.n	801310a <__assert_func+0x12>
 8013122:	bf00      	nop
 8013124:	200002c8 	.word	0x200002c8
 8013128:	080142b0 	.word	0x080142b0
 801312c:	080142bd 	.word	0x080142bd
 8013130:	080142eb 	.word	0x080142eb

08013134 <__sflush_r>:
 8013134:	898a      	ldrh	r2, [r1, #12]
 8013136:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801313a:	4605      	mov	r5, r0
 801313c:	0710      	lsls	r0, r2, #28
 801313e:	460c      	mov	r4, r1
 8013140:	d458      	bmi.n	80131f4 <__sflush_r+0xc0>
 8013142:	684b      	ldr	r3, [r1, #4]
 8013144:	2b00      	cmp	r3, #0
 8013146:	dc05      	bgt.n	8013154 <__sflush_r+0x20>
 8013148:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801314a:	2b00      	cmp	r3, #0
 801314c:	dc02      	bgt.n	8013154 <__sflush_r+0x20>
 801314e:	2000      	movs	r0, #0
 8013150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013154:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013156:	2e00      	cmp	r6, #0
 8013158:	d0f9      	beq.n	801314e <__sflush_r+0x1a>
 801315a:	2300      	movs	r3, #0
 801315c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013160:	682f      	ldr	r7, [r5, #0]
 8013162:	602b      	str	r3, [r5, #0]
 8013164:	d032      	beq.n	80131cc <__sflush_r+0x98>
 8013166:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013168:	89a3      	ldrh	r3, [r4, #12]
 801316a:	075a      	lsls	r2, r3, #29
 801316c:	d505      	bpl.n	801317a <__sflush_r+0x46>
 801316e:	6863      	ldr	r3, [r4, #4]
 8013170:	1ac0      	subs	r0, r0, r3
 8013172:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013174:	b10b      	cbz	r3, 801317a <__sflush_r+0x46>
 8013176:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013178:	1ac0      	subs	r0, r0, r3
 801317a:	2300      	movs	r3, #0
 801317c:	4602      	mov	r2, r0
 801317e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013180:	6a21      	ldr	r1, [r4, #32]
 8013182:	4628      	mov	r0, r5
 8013184:	47b0      	blx	r6
 8013186:	1c43      	adds	r3, r0, #1
 8013188:	89a3      	ldrh	r3, [r4, #12]
 801318a:	d106      	bne.n	801319a <__sflush_r+0x66>
 801318c:	6829      	ldr	r1, [r5, #0]
 801318e:	291d      	cmp	r1, #29
 8013190:	d82c      	bhi.n	80131ec <__sflush_r+0xb8>
 8013192:	4a2a      	ldr	r2, [pc, #168]	; (801323c <__sflush_r+0x108>)
 8013194:	40ca      	lsrs	r2, r1
 8013196:	07d6      	lsls	r6, r2, #31
 8013198:	d528      	bpl.n	80131ec <__sflush_r+0xb8>
 801319a:	2200      	movs	r2, #0
 801319c:	6062      	str	r2, [r4, #4]
 801319e:	04d9      	lsls	r1, r3, #19
 80131a0:	6922      	ldr	r2, [r4, #16]
 80131a2:	6022      	str	r2, [r4, #0]
 80131a4:	d504      	bpl.n	80131b0 <__sflush_r+0x7c>
 80131a6:	1c42      	adds	r2, r0, #1
 80131a8:	d101      	bne.n	80131ae <__sflush_r+0x7a>
 80131aa:	682b      	ldr	r3, [r5, #0]
 80131ac:	b903      	cbnz	r3, 80131b0 <__sflush_r+0x7c>
 80131ae:	6560      	str	r0, [r4, #84]	; 0x54
 80131b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80131b2:	602f      	str	r7, [r5, #0]
 80131b4:	2900      	cmp	r1, #0
 80131b6:	d0ca      	beq.n	801314e <__sflush_r+0x1a>
 80131b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80131bc:	4299      	cmp	r1, r3
 80131be:	d002      	beq.n	80131c6 <__sflush_r+0x92>
 80131c0:	4628      	mov	r0, r5
 80131c2:	f7ff f91b 	bl	80123fc <_free_r>
 80131c6:	2000      	movs	r0, #0
 80131c8:	6360      	str	r0, [r4, #52]	; 0x34
 80131ca:	e7c1      	b.n	8013150 <__sflush_r+0x1c>
 80131cc:	6a21      	ldr	r1, [r4, #32]
 80131ce:	2301      	movs	r3, #1
 80131d0:	4628      	mov	r0, r5
 80131d2:	47b0      	blx	r6
 80131d4:	1c41      	adds	r1, r0, #1
 80131d6:	d1c7      	bne.n	8013168 <__sflush_r+0x34>
 80131d8:	682b      	ldr	r3, [r5, #0]
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d0c4      	beq.n	8013168 <__sflush_r+0x34>
 80131de:	2b1d      	cmp	r3, #29
 80131e0:	d001      	beq.n	80131e6 <__sflush_r+0xb2>
 80131e2:	2b16      	cmp	r3, #22
 80131e4:	d101      	bne.n	80131ea <__sflush_r+0xb6>
 80131e6:	602f      	str	r7, [r5, #0]
 80131e8:	e7b1      	b.n	801314e <__sflush_r+0x1a>
 80131ea:	89a3      	ldrh	r3, [r4, #12]
 80131ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80131f0:	81a3      	strh	r3, [r4, #12]
 80131f2:	e7ad      	b.n	8013150 <__sflush_r+0x1c>
 80131f4:	690f      	ldr	r7, [r1, #16]
 80131f6:	2f00      	cmp	r7, #0
 80131f8:	d0a9      	beq.n	801314e <__sflush_r+0x1a>
 80131fa:	0793      	lsls	r3, r2, #30
 80131fc:	680e      	ldr	r6, [r1, #0]
 80131fe:	bf08      	it	eq
 8013200:	694b      	ldreq	r3, [r1, #20]
 8013202:	600f      	str	r7, [r1, #0]
 8013204:	bf18      	it	ne
 8013206:	2300      	movne	r3, #0
 8013208:	eba6 0807 	sub.w	r8, r6, r7
 801320c:	608b      	str	r3, [r1, #8]
 801320e:	f1b8 0f00 	cmp.w	r8, #0
 8013212:	dd9c      	ble.n	801314e <__sflush_r+0x1a>
 8013214:	6a21      	ldr	r1, [r4, #32]
 8013216:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013218:	4643      	mov	r3, r8
 801321a:	463a      	mov	r2, r7
 801321c:	4628      	mov	r0, r5
 801321e:	47b0      	blx	r6
 8013220:	2800      	cmp	r0, #0
 8013222:	dc06      	bgt.n	8013232 <__sflush_r+0xfe>
 8013224:	89a3      	ldrh	r3, [r4, #12]
 8013226:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801322a:	81a3      	strh	r3, [r4, #12]
 801322c:	f04f 30ff 	mov.w	r0, #4294967295
 8013230:	e78e      	b.n	8013150 <__sflush_r+0x1c>
 8013232:	4407      	add	r7, r0
 8013234:	eba8 0800 	sub.w	r8, r8, r0
 8013238:	e7e9      	b.n	801320e <__sflush_r+0xda>
 801323a:	bf00      	nop
 801323c:	20400001 	.word	0x20400001

08013240 <_fflush_r>:
 8013240:	b538      	push	{r3, r4, r5, lr}
 8013242:	690b      	ldr	r3, [r1, #16]
 8013244:	4605      	mov	r5, r0
 8013246:	460c      	mov	r4, r1
 8013248:	b913      	cbnz	r3, 8013250 <_fflush_r+0x10>
 801324a:	2500      	movs	r5, #0
 801324c:	4628      	mov	r0, r5
 801324e:	bd38      	pop	{r3, r4, r5, pc}
 8013250:	b118      	cbz	r0, 801325a <_fflush_r+0x1a>
 8013252:	6983      	ldr	r3, [r0, #24]
 8013254:	b90b      	cbnz	r3, 801325a <_fflush_r+0x1a>
 8013256:	f000 f887 	bl	8013368 <__sinit>
 801325a:	4b14      	ldr	r3, [pc, #80]	; (80132ac <_fflush_r+0x6c>)
 801325c:	429c      	cmp	r4, r3
 801325e:	d11b      	bne.n	8013298 <_fflush_r+0x58>
 8013260:	686c      	ldr	r4, [r5, #4]
 8013262:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013266:	2b00      	cmp	r3, #0
 8013268:	d0ef      	beq.n	801324a <_fflush_r+0xa>
 801326a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801326c:	07d0      	lsls	r0, r2, #31
 801326e:	d404      	bmi.n	801327a <_fflush_r+0x3a>
 8013270:	0599      	lsls	r1, r3, #22
 8013272:	d402      	bmi.n	801327a <_fflush_r+0x3a>
 8013274:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013276:	f000 f927 	bl	80134c8 <__retarget_lock_acquire_recursive>
 801327a:	4628      	mov	r0, r5
 801327c:	4621      	mov	r1, r4
 801327e:	f7ff ff59 	bl	8013134 <__sflush_r>
 8013282:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013284:	07da      	lsls	r2, r3, #31
 8013286:	4605      	mov	r5, r0
 8013288:	d4e0      	bmi.n	801324c <_fflush_r+0xc>
 801328a:	89a3      	ldrh	r3, [r4, #12]
 801328c:	059b      	lsls	r3, r3, #22
 801328e:	d4dd      	bmi.n	801324c <_fflush_r+0xc>
 8013290:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013292:	f000 f91a 	bl	80134ca <__retarget_lock_release_recursive>
 8013296:	e7d9      	b.n	801324c <_fflush_r+0xc>
 8013298:	4b05      	ldr	r3, [pc, #20]	; (80132b0 <_fflush_r+0x70>)
 801329a:	429c      	cmp	r4, r3
 801329c:	d101      	bne.n	80132a2 <_fflush_r+0x62>
 801329e:	68ac      	ldr	r4, [r5, #8]
 80132a0:	e7df      	b.n	8013262 <_fflush_r+0x22>
 80132a2:	4b04      	ldr	r3, [pc, #16]	; (80132b4 <_fflush_r+0x74>)
 80132a4:	429c      	cmp	r4, r3
 80132a6:	bf08      	it	eq
 80132a8:	68ec      	ldreq	r4, [r5, #12]
 80132aa:	e7da      	b.n	8013262 <_fflush_r+0x22>
 80132ac:	0801430c 	.word	0x0801430c
 80132b0:	0801432c 	.word	0x0801432c
 80132b4:	080142ec 	.word	0x080142ec

080132b8 <std>:
 80132b8:	2300      	movs	r3, #0
 80132ba:	b510      	push	{r4, lr}
 80132bc:	4604      	mov	r4, r0
 80132be:	e9c0 3300 	strd	r3, r3, [r0]
 80132c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80132c6:	6083      	str	r3, [r0, #8]
 80132c8:	8181      	strh	r1, [r0, #12]
 80132ca:	6643      	str	r3, [r0, #100]	; 0x64
 80132cc:	81c2      	strh	r2, [r0, #14]
 80132ce:	6183      	str	r3, [r0, #24]
 80132d0:	4619      	mov	r1, r3
 80132d2:	2208      	movs	r2, #8
 80132d4:	305c      	adds	r0, #92	; 0x5c
 80132d6:	f7fb fb97 	bl	800ea08 <memset>
 80132da:	4b05      	ldr	r3, [pc, #20]	; (80132f0 <std+0x38>)
 80132dc:	6263      	str	r3, [r4, #36]	; 0x24
 80132de:	4b05      	ldr	r3, [pc, #20]	; (80132f4 <std+0x3c>)
 80132e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80132e2:	4b05      	ldr	r3, [pc, #20]	; (80132f8 <std+0x40>)
 80132e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80132e6:	4b05      	ldr	r3, [pc, #20]	; (80132fc <std+0x44>)
 80132e8:	6224      	str	r4, [r4, #32]
 80132ea:	6323      	str	r3, [r4, #48]	; 0x30
 80132ec:	bd10      	pop	{r4, pc}
 80132ee:	bf00      	nop
 80132f0:	0800f7b1 	.word	0x0800f7b1
 80132f4:	0800f7d7 	.word	0x0800f7d7
 80132f8:	0800f80f 	.word	0x0800f80f
 80132fc:	0800f833 	.word	0x0800f833

08013300 <_cleanup_r>:
 8013300:	4901      	ldr	r1, [pc, #4]	; (8013308 <_cleanup_r+0x8>)
 8013302:	f000 b8c1 	b.w	8013488 <_fwalk_reent>
 8013306:	bf00      	nop
 8013308:	08013241 	.word	0x08013241

0801330c <__sfmoreglue>:
 801330c:	b570      	push	{r4, r5, r6, lr}
 801330e:	2268      	movs	r2, #104	; 0x68
 8013310:	1e4d      	subs	r5, r1, #1
 8013312:	4355      	muls	r5, r2
 8013314:	460e      	mov	r6, r1
 8013316:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801331a:	f7ff f8db 	bl	80124d4 <_malloc_r>
 801331e:	4604      	mov	r4, r0
 8013320:	b140      	cbz	r0, 8013334 <__sfmoreglue+0x28>
 8013322:	2100      	movs	r1, #0
 8013324:	e9c0 1600 	strd	r1, r6, [r0]
 8013328:	300c      	adds	r0, #12
 801332a:	60a0      	str	r0, [r4, #8]
 801332c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013330:	f7fb fb6a 	bl	800ea08 <memset>
 8013334:	4620      	mov	r0, r4
 8013336:	bd70      	pop	{r4, r5, r6, pc}

08013338 <__sfp_lock_acquire>:
 8013338:	4801      	ldr	r0, [pc, #4]	; (8013340 <__sfp_lock_acquire+0x8>)
 801333a:	f000 b8c5 	b.w	80134c8 <__retarget_lock_acquire_recursive>
 801333e:	bf00      	nop
 8013340:	20000775 	.word	0x20000775

08013344 <__sfp_lock_release>:
 8013344:	4801      	ldr	r0, [pc, #4]	; (801334c <__sfp_lock_release+0x8>)
 8013346:	f000 b8c0 	b.w	80134ca <__retarget_lock_release_recursive>
 801334a:	bf00      	nop
 801334c:	20000775 	.word	0x20000775

08013350 <__sinit_lock_acquire>:
 8013350:	4801      	ldr	r0, [pc, #4]	; (8013358 <__sinit_lock_acquire+0x8>)
 8013352:	f000 b8b9 	b.w	80134c8 <__retarget_lock_acquire_recursive>
 8013356:	bf00      	nop
 8013358:	20000776 	.word	0x20000776

0801335c <__sinit_lock_release>:
 801335c:	4801      	ldr	r0, [pc, #4]	; (8013364 <__sinit_lock_release+0x8>)
 801335e:	f000 b8b4 	b.w	80134ca <__retarget_lock_release_recursive>
 8013362:	bf00      	nop
 8013364:	20000776 	.word	0x20000776

08013368 <__sinit>:
 8013368:	b510      	push	{r4, lr}
 801336a:	4604      	mov	r4, r0
 801336c:	f7ff fff0 	bl	8013350 <__sinit_lock_acquire>
 8013370:	69a3      	ldr	r3, [r4, #24]
 8013372:	b11b      	cbz	r3, 801337c <__sinit+0x14>
 8013374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013378:	f7ff bff0 	b.w	801335c <__sinit_lock_release>
 801337c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013380:	6523      	str	r3, [r4, #80]	; 0x50
 8013382:	4b13      	ldr	r3, [pc, #76]	; (80133d0 <__sinit+0x68>)
 8013384:	4a13      	ldr	r2, [pc, #76]	; (80133d4 <__sinit+0x6c>)
 8013386:	681b      	ldr	r3, [r3, #0]
 8013388:	62a2      	str	r2, [r4, #40]	; 0x28
 801338a:	42a3      	cmp	r3, r4
 801338c:	bf04      	itt	eq
 801338e:	2301      	moveq	r3, #1
 8013390:	61a3      	streq	r3, [r4, #24]
 8013392:	4620      	mov	r0, r4
 8013394:	f000 f820 	bl	80133d8 <__sfp>
 8013398:	6060      	str	r0, [r4, #4]
 801339a:	4620      	mov	r0, r4
 801339c:	f000 f81c 	bl	80133d8 <__sfp>
 80133a0:	60a0      	str	r0, [r4, #8]
 80133a2:	4620      	mov	r0, r4
 80133a4:	f000 f818 	bl	80133d8 <__sfp>
 80133a8:	2200      	movs	r2, #0
 80133aa:	60e0      	str	r0, [r4, #12]
 80133ac:	2104      	movs	r1, #4
 80133ae:	6860      	ldr	r0, [r4, #4]
 80133b0:	f7ff ff82 	bl	80132b8 <std>
 80133b4:	68a0      	ldr	r0, [r4, #8]
 80133b6:	2201      	movs	r2, #1
 80133b8:	2109      	movs	r1, #9
 80133ba:	f7ff ff7d 	bl	80132b8 <std>
 80133be:	68e0      	ldr	r0, [r4, #12]
 80133c0:	2202      	movs	r2, #2
 80133c2:	2112      	movs	r1, #18
 80133c4:	f7ff ff78 	bl	80132b8 <std>
 80133c8:	2301      	movs	r3, #1
 80133ca:	61a3      	str	r3, [r4, #24]
 80133cc:	e7d2      	b.n	8013374 <__sinit+0xc>
 80133ce:	bf00      	nop
 80133d0:	08013e94 	.word	0x08013e94
 80133d4:	08013301 	.word	0x08013301

080133d8 <__sfp>:
 80133d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80133da:	4607      	mov	r7, r0
 80133dc:	f7ff ffac 	bl	8013338 <__sfp_lock_acquire>
 80133e0:	4b1e      	ldr	r3, [pc, #120]	; (801345c <__sfp+0x84>)
 80133e2:	681e      	ldr	r6, [r3, #0]
 80133e4:	69b3      	ldr	r3, [r6, #24]
 80133e6:	b913      	cbnz	r3, 80133ee <__sfp+0x16>
 80133e8:	4630      	mov	r0, r6
 80133ea:	f7ff ffbd 	bl	8013368 <__sinit>
 80133ee:	3648      	adds	r6, #72	; 0x48
 80133f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80133f4:	3b01      	subs	r3, #1
 80133f6:	d503      	bpl.n	8013400 <__sfp+0x28>
 80133f8:	6833      	ldr	r3, [r6, #0]
 80133fa:	b30b      	cbz	r3, 8013440 <__sfp+0x68>
 80133fc:	6836      	ldr	r6, [r6, #0]
 80133fe:	e7f7      	b.n	80133f0 <__sfp+0x18>
 8013400:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013404:	b9d5      	cbnz	r5, 801343c <__sfp+0x64>
 8013406:	4b16      	ldr	r3, [pc, #88]	; (8013460 <__sfp+0x88>)
 8013408:	60e3      	str	r3, [r4, #12]
 801340a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801340e:	6665      	str	r5, [r4, #100]	; 0x64
 8013410:	f000 f859 	bl	80134c6 <__retarget_lock_init_recursive>
 8013414:	f7ff ff96 	bl	8013344 <__sfp_lock_release>
 8013418:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801341c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013420:	6025      	str	r5, [r4, #0]
 8013422:	61a5      	str	r5, [r4, #24]
 8013424:	2208      	movs	r2, #8
 8013426:	4629      	mov	r1, r5
 8013428:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801342c:	f7fb faec 	bl	800ea08 <memset>
 8013430:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013434:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013438:	4620      	mov	r0, r4
 801343a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801343c:	3468      	adds	r4, #104	; 0x68
 801343e:	e7d9      	b.n	80133f4 <__sfp+0x1c>
 8013440:	2104      	movs	r1, #4
 8013442:	4638      	mov	r0, r7
 8013444:	f7ff ff62 	bl	801330c <__sfmoreglue>
 8013448:	4604      	mov	r4, r0
 801344a:	6030      	str	r0, [r6, #0]
 801344c:	2800      	cmp	r0, #0
 801344e:	d1d5      	bne.n	80133fc <__sfp+0x24>
 8013450:	f7ff ff78 	bl	8013344 <__sfp_lock_release>
 8013454:	230c      	movs	r3, #12
 8013456:	603b      	str	r3, [r7, #0]
 8013458:	e7ee      	b.n	8013438 <__sfp+0x60>
 801345a:	bf00      	nop
 801345c:	08013e94 	.word	0x08013e94
 8013460:	ffff0001 	.word	0xffff0001

08013464 <fiprintf>:
 8013464:	b40e      	push	{r1, r2, r3}
 8013466:	b503      	push	{r0, r1, lr}
 8013468:	4601      	mov	r1, r0
 801346a:	ab03      	add	r3, sp, #12
 801346c:	4805      	ldr	r0, [pc, #20]	; (8013484 <fiprintf+0x20>)
 801346e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013472:	6800      	ldr	r0, [r0, #0]
 8013474:	9301      	str	r3, [sp, #4]
 8013476:	f000 f8a7 	bl	80135c8 <_vfiprintf_r>
 801347a:	b002      	add	sp, #8
 801347c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013480:	b003      	add	sp, #12
 8013482:	4770      	bx	lr
 8013484:	200002c8 	.word	0x200002c8

08013488 <_fwalk_reent>:
 8013488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801348c:	4606      	mov	r6, r0
 801348e:	4688      	mov	r8, r1
 8013490:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013494:	2700      	movs	r7, #0
 8013496:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801349a:	f1b9 0901 	subs.w	r9, r9, #1
 801349e:	d505      	bpl.n	80134ac <_fwalk_reent+0x24>
 80134a0:	6824      	ldr	r4, [r4, #0]
 80134a2:	2c00      	cmp	r4, #0
 80134a4:	d1f7      	bne.n	8013496 <_fwalk_reent+0xe>
 80134a6:	4638      	mov	r0, r7
 80134a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80134ac:	89ab      	ldrh	r3, [r5, #12]
 80134ae:	2b01      	cmp	r3, #1
 80134b0:	d907      	bls.n	80134c2 <_fwalk_reent+0x3a>
 80134b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80134b6:	3301      	adds	r3, #1
 80134b8:	d003      	beq.n	80134c2 <_fwalk_reent+0x3a>
 80134ba:	4629      	mov	r1, r5
 80134bc:	4630      	mov	r0, r6
 80134be:	47c0      	blx	r8
 80134c0:	4307      	orrs	r7, r0
 80134c2:	3568      	adds	r5, #104	; 0x68
 80134c4:	e7e9      	b.n	801349a <_fwalk_reent+0x12>

080134c6 <__retarget_lock_init_recursive>:
 80134c6:	4770      	bx	lr

080134c8 <__retarget_lock_acquire_recursive>:
 80134c8:	4770      	bx	lr

080134ca <__retarget_lock_release_recursive>:
 80134ca:	4770      	bx	lr

080134cc <memmove>:
 80134cc:	4288      	cmp	r0, r1
 80134ce:	b510      	push	{r4, lr}
 80134d0:	eb01 0402 	add.w	r4, r1, r2
 80134d4:	d902      	bls.n	80134dc <memmove+0x10>
 80134d6:	4284      	cmp	r4, r0
 80134d8:	4623      	mov	r3, r4
 80134da:	d807      	bhi.n	80134ec <memmove+0x20>
 80134dc:	1e43      	subs	r3, r0, #1
 80134de:	42a1      	cmp	r1, r4
 80134e0:	d008      	beq.n	80134f4 <memmove+0x28>
 80134e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80134e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80134ea:	e7f8      	b.n	80134de <memmove+0x12>
 80134ec:	4402      	add	r2, r0
 80134ee:	4601      	mov	r1, r0
 80134f0:	428a      	cmp	r2, r1
 80134f2:	d100      	bne.n	80134f6 <memmove+0x2a>
 80134f4:	bd10      	pop	{r4, pc}
 80134f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80134fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80134fe:	e7f7      	b.n	80134f0 <memmove+0x24>

08013500 <__malloc_lock>:
 8013500:	4801      	ldr	r0, [pc, #4]	; (8013508 <__malloc_lock+0x8>)
 8013502:	f7ff bfe1 	b.w	80134c8 <__retarget_lock_acquire_recursive>
 8013506:	bf00      	nop
 8013508:	20000774 	.word	0x20000774

0801350c <__malloc_unlock>:
 801350c:	4801      	ldr	r0, [pc, #4]	; (8013514 <__malloc_unlock+0x8>)
 801350e:	f7ff bfdc 	b.w	80134ca <__retarget_lock_release_recursive>
 8013512:	bf00      	nop
 8013514:	20000774 	.word	0x20000774

08013518 <_realloc_r>:
 8013518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801351c:	4680      	mov	r8, r0
 801351e:	4614      	mov	r4, r2
 8013520:	460e      	mov	r6, r1
 8013522:	b921      	cbnz	r1, 801352e <_realloc_r+0x16>
 8013524:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013528:	4611      	mov	r1, r2
 801352a:	f7fe bfd3 	b.w	80124d4 <_malloc_r>
 801352e:	b92a      	cbnz	r2, 801353c <_realloc_r+0x24>
 8013530:	f7fe ff64 	bl	80123fc <_free_r>
 8013534:	4625      	mov	r5, r4
 8013536:	4628      	mov	r0, r5
 8013538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801353c:	f000 faa0 	bl	8013a80 <_malloc_usable_size_r>
 8013540:	4284      	cmp	r4, r0
 8013542:	4607      	mov	r7, r0
 8013544:	d802      	bhi.n	801354c <_realloc_r+0x34>
 8013546:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801354a:	d812      	bhi.n	8013572 <_realloc_r+0x5a>
 801354c:	4621      	mov	r1, r4
 801354e:	4640      	mov	r0, r8
 8013550:	f7fe ffc0 	bl	80124d4 <_malloc_r>
 8013554:	4605      	mov	r5, r0
 8013556:	2800      	cmp	r0, #0
 8013558:	d0ed      	beq.n	8013536 <_realloc_r+0x1e>
 801355a:	42bc      	cmp	r4, r7
 801355c:	4622      	mov	r2, r4
 801355e:	4631      	mov	r1, r6
 8013560:	bf28      	it	cs
 8013562:	463a      	movcs	r2, r7
 8013564:	f7fb fa42 	bl	800e9ec <memcpy>
 8013568:	4631      	mov	r1, r6
 801356a:	4640      	mov	r0, r8
 801356c:	f7fe ff46 	bl	80123fc <_free_r>
 8013570:	e7e1      	b.n	8013536 <_realloc_r+0x1e>
 8013572:	4635      	mov	r5, r6
 8013574:	e7df      	b.n	8013536 <_realloc_r+0x1e>

08013576 <__sfputc_r>:
 8013576:	6893      	ldr	r3, [r2, #8]
 8013578:	3b01      	subs	r3, #1
 801357a:	2b00      	cmp	r3, #0
 801357c:	b410      	push	{r4}
 801357e:	6093      	str	r3, [r2, #8]
 8013580:	da08      	bge.n	8013594 <__sfputc_r+0x1e>
 8013582:	6994      	ldr	r4, [r2, #24]
 8013584:	42a3      	cmp	r3, r4
 8013586:	db01      	blt.n	801358c <__sfputc_r+0x16>
 8013588:	290a      	cmp	r1, #10
 801358a:	d103      	bne.n	8013594 <__sfputc_r+0x1e>
 801358c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013590:	f000 b94a 	b.w	8013828 <__swbuf_r>
 8013594:	6813      	ldr	r3, [r2, #0]
 8013596:	1c58      	adds	r0, r3, #1
 8013598:	6010      	str	r0, [r2, #0]
 801359a:	7019      	strb	r1, [r3, #0]
 801359c:	4608      	mov	r0, r1
 801359e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80135a2:	4770      	bx	lr

080135a4 <__sfputs_r>:
 80135a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135a6:	4606      	mov	r6, r0
 80135a8:	460f      	mov	r7, r1
 80135aa:	4614      	mov	r4, r2
 80135ac:	18d5      	adds	r5, r2, r3
 80135ae:	42ac      	cmp	r4, r5
 80135b0:	d101      	bne.n	80135b6 <__sfputs_r+0x12>
 80135b2:	2000      	movs	r0, #0
 80135b4:	e007      	b.n	80135c6 <__sfputs_r+0x22>
 80135b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80135ba:	463a      	mov	r2, r7
 80135bc:	4630      	mov	r0, r6
 80135be:	f7ff ffda 	bl	8013576 <__sfputc_r>
 80135c2:	1c43      	adds	r3, r0, #1
 80135c4:	d1f3      	bne.n	80135ae <__sfputs_r+0xa>
 80135c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080135c8 <_vfiprintf_r>:
 80135c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135cc:	460d      	mov	r5, r1
 80135ce:	b09d      	sub	sp, #116	; 0x74
 80135d0:	4614      	mov	r4, r2
 80135d2:	4698      	mov	r8, r3
 80135d4:	4606      	mov	r6, r0
 80135d6:	b118      	cbz	r0, 80135e0 <_vfiprintf_r+0x18>
 80135d8:	6983      	ldr	r3, [r0, #24]
 80135da:	b90b      	cbnz	r3, 80135e0 <_vfiprintf_r+0x18>
 80135dc:	f7ff fec4 	bl	8013368 <__sinit>
 80135e0:	4b89      	ldr	r3, [pc, #548]	; (8013808 <_vfiprintf_r+0x240>)
 80135e2:	429d      	cmp	r5, r3
 80135e4:	d11b      	bne.n	801361e <_vfiprintf_r+0x56>
 80135e6:	6875      	ldr	r5, [r6, #4]
 80135e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80135ea:	07d9      	lsls	r1, r3, #31
 80135ec:	d405      	bmi.n	80135fa <_vfiprintf_r+0x32>
 80135ee:	89ab      	ldrh	r3, [r5, #12]
 80135f0:	059a      	lsls	r2, r3, #22
 80135f2:	d402      	bmi.n	80135fa <_vfiprintf_r+0x32>
 80135f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80135f6:	f7ff ff67 	bl	80134c8 <__retarget_lock_acquire_recursive>
 80135fa:	89ab      	ldrh	r3, [r5, #12]
 80135fc:	071b      	lsls	r3, r3, #28
 80135fe:	d501      	bpl.n	8013604 <_vfiprintf_r+0x3c>
 8013600:	692b      	ldr	r3, [r5, #16]
 8013602:	b9eb      	cbnz	r3, 8013640 <_vfiprintf_r+0x78>
 8013604:	4629      	mov	r1, r5
 8013606:	4630      	mov	r0, r6
 8013608:	f000 f960 	bl	80138cc <__swsetup_r>
 801360c:	b1c0      	cbz	r0, 8013640 <_vfiprintf_r+0x78>
 801360e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013610:	07dc      	lsls	r4, r3, #31
 8013612:	d50e      	bpl.n	8013632 <_vfiprintf_r+0x6a>
 8013614:	f04f 30ff 	mov.w	r0, #4294967295
 8013618:	b01d      	add	sp, #116	; 0x74
 801361a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801361e:	4b7b      	ldr	r3, [pc, #492]	; (801380c <_vfiprintf_r+0x244>)
 8013620:	429d      	cmp	r5, r3
 8013622:	d101      	bne.n	8013628 <_vfiprintf_r+0x60>
 8013624:	68b5      	ldr	r5, [r6, #8]
 8013626:	e7df      	b.n	80135e8 <_vfiprintf_r+0x20>
 8013628:	4b79      	ldr	r3, [pc, #484]	; (8013810 <_vfiprintf_r+0x248>)
 801362a:	429d      	cmp	r5, r3
 801362c:	bf08      	it	eq
 801362e:	68f5      	ldreq	r5, [r6, #12]
 8013630:	e7da      	b.n	80135e8 <_vfiprintf_r+0x20>
 8013632:	89ab      	ldrh	r3, [r5, #12]
 8013634:	0598      	lsls	r0, r3, #22
 8013636:	d4ed      	bmi.n	8013614 <_vfiprintf_r+0x4c>
 8013638:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801363a:	f7ff ff46 	bl	80134ca <__retarget_lock_release_recursive>
 801363e:	e7e9      	b.n	8013614 <_vfiprintf_r+0x4c>
 8013640:	2300      	movs	r3, #0
 8013642:	9309      	str	r3, [sp, #36]	; 0x24
 8013644:	2320      	movs	r3, #32
 8013646:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801364a:	f8cd 800c 	str.w	r8, [sp, #12]
 801364e:	2330      	movs	r3, #48	; 0x30
 8013650:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013814 <_vfiprintf_r+0x24c>
 8013654:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013658:	f04f 0901 	mov.w	r9, #1
 801365c:	4623      	mov	r3, r4
 801365e:	469a      	mov	sl, r3
 8013660:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013664:	b10a      	cbz	r2, 801366a <_vfiprintf_r+0xa2>
 8013666:	2a25      	cmp	r2, #37	; 0x25
 8013668:	d1f9      	bne.n	801365e <_vfiprintf_r+0x96>
 801366a:	ebba 0b04 	subs.w	fp, sl, r4
 801366e:	d00b      	beq.n	8013688 <_vfiprintf_r+0xc0>
 8013670:	465b      	mov	r3, fp
 8013672:	4622      	mov	r2, r4
 8013674:	4629      	mov	r1, r5
 8013676:	4630      	mov	r0, r6
 8013678:	f7ff ff94 	bl	80135a4 <__sfputs_r>
 801367c:	3001      	adds	r0, #1
 801367e:	f000 80aa 	beq.w	80137d6 <_vfiprintf_r+0x20e>
 8013682:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013684:	445a      	add	r2, fp
 8013686:	9209      	str	r2, [sp, #36]	; 0x24
 8013688:	f89a 3000 	ldrb.w	r3, [sl]
 801368c:	2b00      	cmp	r3, #0
 801368e:	f000 80a2 	beq.w	80137d6 <_vfiprintf_r+0x20e>
 8013692:	2300      	movs	r3, #0
 8013694:	f04f 32ff 	mov.w	r2, #4294967295
 8013698:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801369c:	f10a 0a01 	add.w	sl, sl, #1
 80136a0:	9304      	str	r3, [sp, #16]
 80136a2:	9307      	str	r3, [sp, #28]
 80136a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80136a8:	931a      	str	r3, [sp, #104]	; 0x68
 80136aa:	4654      	mov	r4, sl
 80136ac:	2205      	movs	r2, #5
 80136ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80136b2:	4858      	ldr	r0, [pc, #352]	; (8013814 <_vfiprintf_r+0x24c>)
 80136b4:	f7ec fdc4 	bl	8000240 <memchr>
 80136b8:	9a04      	ldr	r2, [sp, #16]
 80136ba:	b9d8      	cbnz	r0, 80136f4 <_vfiprintf_r+0x12c>
 80136bc:	06d1      	lsls	r1, r2, #27
 80136be:	bf44      	itt	mi
 80136c0:	2320      	movmi	r3, #32
 80136c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80136c6:	0713      	lsls	r3, r2, #28
 80136c8:	bf44      	itt	mi
 80136ca:	232b      	movmi	r3, #43	; 0x2b
 80136cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80136d0:	f89a 3000 	ldrb.w	r3, [sl]
 80136d4:	2b2a      	cmp	r3, #42	; 0x2a
 80136d6:	d015      	beq.n	8013704 <_vfiprintf_r+0x13c>
 80136d8:	9a07      	ldr	r2, [sp, #28]
 80136da:	4654      	mov	r4, sl
 80136dc:	2000      	movs	r0, #0
 80136de:	f04f 0c0a 	mov.w	ip, #10
 80136e2:	4621      	mov	r1, r4
 80136e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80136e8:	3b30      	subs	r3, #48	; 0x30
 80136ea:	2b09      	cmp	r3, #9
 80136ec:	d94e      	bls.n	801378c <_vfiprintf_r+0x1c4>
 80136ee:	b1b0      	cbz	r0, 801371e <_vfiprintf_r+0x156>
 80136f0:	9207      	str	r2, [sp, #28]
 80136f2:	e014      	b.n	801371e <_vfiprintf_r+0x156>
 80136f4:	eba0 0308 	sub.w	r3, r0, r8
 80136f8:	fa09 f303 	lsl.w	r3, r9, r3
 80136fc:	4313      	orrs	r3, r2
 80136fe:	9304      	str	r3, [sp, #16]
 8013700:	46a2      	mov	sl, r4
 8013702:	e7d2      	b.n	80136aa <_vfiprintf_r+0xe2>
 8013704:	9b03      	ldr	r3, [sp, #12]
 8013706:	1d19      	adds	r1, r3, #4
 8013708:	681b      	ldr	r3, [r3, #0]
 801370a:	9103      	str	r1, [sp, #12]
 801370c:	2b00      	cmp	r3, #0
 801370e:	bfbb      	ittet	lt
 8013710:	425b      	neglt	r3, r3
 8013712:	f042 0202 	orrlt.w	r2, r2, #2
 8013716:	9307      	strge	r3, [sp, #28]
 8013718:	9307      	strlt	r3, [sp, #28]
 801371a:	bfb8      	it	lt
 801371c:	9204      	strlt	r2, [sp, #16]
 801371e:	7823      	ldrb	r3, [r4, #0]
 8013720:	2b2e      	cmp	r3, #46	; 0x2e
 8013722:	d10c      	bne.n	801373e <_vfiprintf_r+0x176>
 8013724:	7863      	ldrb	r3, [r4, #1]
 8013726:	2b2a      	cmp	r3, #42	; 0x2a
 8013728:	d135      	bne.n	8013796 <_vfiprintf_r+0x1ce>
 801372a:	9b03      	ldr	r3, [sp, #12]
 801372c:	1d1a      	adds	r2, r3, #4
 801372e:	681b      	ldr	r3, [r3, #0]
 8013730:	9203      	str	r2, [sp, #12]
 8013732:	2b00      	cmp	r3, #0
 8013734:	bfb8      	it	lt
 8013736:	f04f 33ff 	movlt.w	r3, #4294967295
 801373a:	3402      	adds	r4, #2
 801373c:	9305      	str	r3, [sp, #20]
 801373e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013824 <_vfiprintf_r+0x25c>
 8013742:	7821      	ldrb	r1, [r4, #0]
 8013744:	2203      	movs	r2, #3
 8013746:	4650      	mov	r0, sl
 8013748:	f7ec fd7a 	bl	8000240 <memchr>
 801374c:	b140      	cbz	r0, 8013760 <_vfiprintf_r+0x198>
 801374e:	2340      	movs	r3, #64	; 0x40
 8013750:	eba0 000a 	sub.w	r0, r0, sl
 8013754:	fa03 f000 	lsl.w	r0, r3, r0
 8013758:	9b04      	ldr	r3, [sp, #16]
 801375a:	4303      	orrs	r3, r0
 801375c:	3401      	adds	r4, #1
 801375e:	9304      	str	r3, [sp, #16]
 8013760:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013764:	482c      	ldr	r0, [pc, #176]	; (8013818 <_vfiprintf_r+0x250>)
 8013766:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801376a:	2206      	movs	r2, #6
 801376c:	f7ec fd68 	bl	8000240 <memchr>
 8013770:	2800      	cmp	r0, #0
 8013772:	d03f      	beq.n	80137f4 <_vfiprintf_r+0x22c>
 8013774:	4b29      	ldr	r3, [pc, #164]	; (801381c <_vfiprintf_r+0x254>)
 8013776:	bb1b      	cbnz	r3, 80137c0 <_vfiprintf_r+0x1f8>
 8013778:	9b03      	ldr	r3, [sp, #12]
 801377a:	3307      	adds	r3, #7
 801377c:	f023 0307 	bic.w	r3, r3, #7
 8013780:	3308      	adds	r3, #8
 8013782:	9303      	str	r3, [sp, #12]
 8013784:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013786:	443b      	add	r3, r7
 8013788:	9309      	str	r3, [sp, #36]	; 0x24
 801378a:	e767      	b.n	801365c <_vfiprintf_r+0x94>
 801378c:	fb0c 3202 	mla	r2, ip, r2, r3
 8013790:	460c      	mov	r4, r1
 8013792:	2001      	movs	r0, #1
 8013794:	e7a5      	b.n	80136e2 <_vfiprintf_r+0x11a>
 8013796:	2300      	movs	r3, #0
 8013798:	3401      	adds	r4, #1
 801379a:	9305      	str	r3, [sp, #20]
 801379c:	4619      	mov	r1, r3
 801379e:	f04f 0c0a 	mov.w	ip, #10
 80137a2:	4620      	mov	r0, r4
 80137a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80137a8:	3a30      	subs	r2, #48	; 0x30
 80137aa:	2a09      	cmp	r2, #9
 80137ac:	d903      	bls.n	80137b6 <_vfiprintf_r+0x1ee>
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	d0c5      	beq.n	801373e <_vfiprintf_r+0x176>
 80137b2:	9105      	str	r1, [sp, #20]
 80137b4:	e7c3      	b.n	801373e <_vfiprintf_r+0x176>
 80137b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80137ba:	4604      	mov	r4, r0
 80137bc:	2301      	movs	r3, #1
 80137be:	e7f0      	b.n	80137a2 <_vfiprintf_r+0x1da>
 80137c0:	ab03      	add	r3, sp, #12
 80137c2:	9300      	str	r3, [sp, #0]
 80137c4:	462a      	mov	r2, r5
 80137c6:	4b16      	ldr	r3, [pc, #88]	; (8013820 <_vfiprintf_r+0x258>)
 80137c8:	a904      	add	r1, sp, #16
 80137ca:	4630      	mov	r0, r6
 80137cc:	f7fb f9c4 	bl	800eb58 <_printf_float>
 80137d0:	4607      	mov	r7, r0
 80137d2:	1c78      	adds	r0, r7, #1
 80137d4:	d1d6      	bne.n	8013784 <_vfiprintf_r+0x1bc>
 80137d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80137d8:	07d9      	lsls	r1, r3, #31
 80137da:	d405      	bmi.n	80137e8 <_vfiprintf_r+0x220>
 80137dc:	89ab      	ldrh	r3, [r5, #12]
 80137de:	059a      	lsls	r2, r3, #22
 80137e0:	d402      	bmi.n	80137e8 <_vfiprintf_r+0x220>
 80137e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80137e4:	f7ff fe71 	bl	80134ca <__retarget_lock_release_recursive>
 80137e8:	89ab      	ldrh	r3, [r5, #12]
 80137ea:	065b      	lsls	r3, r3, #25
 80137ec:	f53f af12 	bmi.w	8013614 <_vfiprintf_r+0x4c>
 80137f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80137f2:	e711      	b.n	8013618 <_vfiprintf_r+0x50>
 80137f4:	ab03      	add	r3, sp, #12
 80137f6:	9300      	str	r3, [sp, #0]
 80137f8:	462a      	mov	r2, r5
 80137fa:	4b09      	ldr	r3, [pc, #36]	; (8013820 <_vfiprintf_r+0x258>)
 80137fc:	a904      	add	r1, sp, #16
 80137fe:	4630      	mov	r0, r6
 8013800:	f7fb fc4e 	bl	800f0a0 <_printf_i>
 8013804:	e7e4      	b.n	80137d0 <_vfiprintf_r+0x208>
 8013806:	bf00      	nop
 8013808:	0801430c 	.word	0x0801430c
 801380c:	0801432c 	.word	0x0801432c
 8013810:	080142ec 	.word	0x080142ec
 8013814:	08014284 	.word	0x08014284
 8013818:	0801428e 	.word	0x0801428e
 801381c:	0800eb59 	.word	0x0800eb59
 8013820:	080135a5 	.word	0x080135a5
 8013824:	0801428a 	.word	0x0801428a

08013828 <__swbuf_r>:
 8013828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801382a:	460e      	mov	r6, r1
 801382c:	4614      	mov	r4, r2
 801382e:	4605      	mov	r5, r0
 8013830:	b118      	cbz	r0, 801383a <__swbuf_r+0x12>
 8013832:	6983      	ldr	r3, [r0, #24]
 8013834:	b90b      	cbnz	r3, 801383a <__swbuf_r+0x12>
 8013836:	f7ff fd97 	bl	8013368 <__sinit>
 801383a:	4b21      	ldr	r3, [pc, #132]	; (80138c0 <__swbuf_r+0x98>)
 801383c:	429c      	cmp	r4, r3
 801383e:	d12b      	bne.n	8013898 <__swbuf_r+0x70>
 8013840:	686c      	ldr	r4, [r5, #4]
 8013842:	69a3      	ldr	r3, [r4, #24]
 8013844:	60a3      	str	r3, [r4, #8]
 8013846:	89a3      	ldrh	r3, [r4, #12]
 8013848:	071a      	lsls	r2, r3, #28
 801384a:	d52f      	bpl.n	80138ac <__swbuf_r+0x84>
 801384c:	6923      	ldr	r3, [r4, #16]
 801384e:	b36b      	cbz	r3, 80138ac <__swbuf_r+0x84>
 8013850:	6923      	ldr	r3, [r4, #16]
 8013852:	6820      	ldr	r0, [r4, #0]
 8013854:	1ac0      	subs	r0, r0, r3
 8013856:	6963      	ldr	r3, [r4, #20]
 8013858:	b2f6      	uxtb	r6, r6
 801385a:	4283      	cmp	r3, r0
 801385c:	4637      	mov	r7, r6
 801385e:	dc04      	bgt.n	801386a <__swbuf_r+0x42>
 8013860:	4621      	mov	r1, r4
 8013862:	4628      	mov	r0, r5
 8013864:	f7ff fcec 	bl	8013240 <_fflush_r>
 8013868:	bb30      	cbnz	r0, 80138b8 <__swbuf_r+0x90>
 801386a:	68a3      	ldr	r3, [r4, #8]
 801386c:	3b01      	subs	r3, #1
 801386e:	60a3      	str	r3, [r4, #8]
 8013870:	6823      	ldr	r3, [r4, #0]
 8013872:	1c5a      	adds	r2, r3, #1
 8013874:	6022      	str	r2, [r4, #0]
 8013876:	701e      	strb	r6, [r3, #0]
 8013878:	6963      	ldr	r3, [r4, #20]
 801387a:	3001      	adds	r0, #1
 801387c:	4283      	cmp	r3, r0
 801387e:	d004      	beq.n	801388a <__swbuf_r+0x62>
 8013880:	89a3      	ldrh	r3, [r4, #12]
 8013882:	07db      	lsls	r3, r3, #31
 8013884:	d506      	bpl.n	8013894 <__swbuf_r+0x6c>
 8013886:	2e0a      	cmp	r6, #10
 8013888:	d104      	bne.n	8013894 <__swbuf_r+0x6c>
 801388a:	4621      	mov	r1, r4
 801388c:	4628      	mov	r0, r5
 801388e:	f7ff fcd7 	bl	8013240 <_fflush_r>
 8013892:	b988      	cbnz	r0, 80138b8 <__swbuf_r+0x90>
 8013894:	4638      	mov	r0, r7
 8013896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013898:	4b0a      	ldr	r3, [pc, #40]	; (80138c4 <__swbuf_r+0x9c>)
 801389a:	429c      	cmp	r4, r3
 801389c:	d101      	bne.n	80138a2 <__swbuf_r+0x7a>
 801389e:	68ac      	ldr	r4, [r5, #8]
 80138a0:	e7cf      	b.n	8013842 <__swbuf_r+0x1a>
 80138a2:	4b09      	ldr	r3, [pc, #36]	; (80138c8 <__swbuf_r+0xa0>)
 80138a4:	429c      	cmp	r4, r3
 80138a6:	bf08      	it	eq
 80138a8:	68ec      	ldreq	r4, [r5, #12]
 80138aa:	e7ca      	b.n	8013842 <__swbuf_r+0x1a>
 80138ac:	4621      	mov	r1, r4
 80138ae:	4628      	mov	r0, r5
 80138b0:	f000 f80c 	bl	80138cc <__swsetup_r>
 80138b4:	2800      	cmp	r0, #0
 80138b6:	d0cb      	beq.n	8013850 <__swbuf_r+0x28>
 80138b8:	f04f 37ff 	mov.w	r7, #4294967295
 80138bc:	e7ea      	b.n	8013894 <__swbuf_r+0x6c>
 80138be:	bf00      	nop
 80138c0:	0801430c 	.word	0x0801430c
 80138c4:	0801432c 	.word	0x0801432c
 80138c8:	080142ec 	.word	0x080142ec

080138cc <__swsetup_r>:
 80138cc:	4b32      	ldr	r3, [pc, #200]	; (8013998 <__swsetup_r+0xcc>)
 80138ce:	b570      	push	{r4, r5, r6, lr}
 80138d0:	681d      	ldr	r5, [r3, #0]
 80138d2:	4606      	mov	r6, r0
 80138d4:	460c      	mov	r4, r1
 80138d6:	b125      	cbz	r5, 80138e2 <__swsetup_r+0x16>
 80138d8:	69ab      	ldr	r3, [r5, #24]
 80138da:	b913      	cbnz	r3, 80138e2 <__swsetup_r+0x16>
 80138dc:	4628      	mov	r0, r5
 80138de:	f7ff fd43 	bl	8013368 <__sinit>
 80138e2:	4b2e      	ldr	r3, [pc, #184]	; (801399c <__swsetup_r+0xd0>)
 80138e4:	429c      	cmp	r4, r3
 80138e6:	d10f      	bne.n	8013908 <__swsetup_r+0x3c>
 80138e8:	686c      	ldr	r4, [r5, #4]
 80138ea:	89a3      	ldrh	r3, [r4, #12]
 80138ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80138f0:	0719      	lsls	r1, r3, #28
 80138f2:	d42c      	bmi.n	801394e <__swsetup_r+0x82>
 80138f4:	06dd      	lsls	r5, r3, #27
 80138f6:	d411      	bmi.n	801391c <__swsetup_r+0x50>
 80138f8:	2309      	movs	r3, #9
 80138fa:	6033      	str	r3, [r6, #0]
 80138fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013900:	81a3      	strh	r3, [r4, #12]
 8013902:	f04f 30ff 	mov.w	r0, #4294967295
 8013906:	e03e      	b.n	8013986 <__swsetup_r+0xba>
 8013908:	4b25      	ldr	r3, [pc, #148]	; (80139a0 <__swsetup_r+0xd4>)
 801390a:	429c      	cmp	r4, r3
 801390c:	d101      	bne.n	8013912 <__swsetup_r+0x46>
 801390e:	68ac      	ldr	r4, [r5, #8]
 8013910:	e7eb      	b.n	80138ea <__swsetup_r+0x1e>
 8013912:	4b24      	ldr	r3, [pc, #144]	; (80139a4 <__swsetup_r+0xd8>)
 8013914:	429c      	cmp	r4, r3
 8013916:	bf08      	it	eq
 8013918:	68ec      	ldreq	r4, [r5, #12]
 801391a:	e7e6      	b.n	80138ea <__swsetup_r+0x1e>
 801391c:	0758      	lsls	r0, r3, #29
 801391e:	d512      	bpl.n	8013946 <__swsetup_r+0x7a>
 8013920:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013922:	b141      	cbz	r1, 8013936 <__swsetup_r+0x6a>
 8013924:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013928:	4299      	cmp	r1, r3
 801392a:	d002      	beq.n	8013932 <__swsetup_r+0x66>
 801392c:	4630      	mov	r0, r6
 801392e:	f7fe fd65 	bl	80123fc <_free_r>
 8013932:	2300      	movs	r3, #0
 8013934:	6363      	str	r3, [r4, #52]	; 0x34
 8013936:	89a3      	ldrh	r3, [r4, #12]
 8013938:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801393c:	81a3      	strh	r3, [r4, #12]
 801393e:	2300      	movs	r3, #0
 8013940:	6063      	str	r3, [r4, #4]
 8013942:	6923      	ldr	r3, [r4, #16]
 8013944:	6023      	str	r3, [r4, #0]
 8013946:	89a3      	ldrh	r3, [r4, #12]
 8013948:	f043 0308 	orr.w	r3, r3, #8
 801394c:	81a3      	strh	r3, [r4, #12]
 801394e:	6923      	ldr	r3, [r4, #16]
 8013950:	b94b      	cbnz	r3, 8013966 <__swsetup_r+0x9a>
 8013952:	89a3      	ldrh	r3, [r4, #12]
 8013954:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013958:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801395c:	d003      	beq.n	8013966 <__swsetup_r+0x9a>
 801395e:	4621      	mov	r1, r4
 8013960:	4630      	mov	r0, r6
 8013962:	f000 f84d 	bl	8013a00 <__smakebuf_r>
 8013966:	89a0      	ldrh	r0, [r4, #12]
 8013968:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801396c:	f010 0301 	ands.w	r3, r0, #1
 8013970:	d00a      	beq.n	8013988 <__swsetup_r+0xbc>
 8013972:	2300      	movs	r3, #0
 8013974:	60a3      	str	r3, [r4, #8]
 8013976:	6963      	ldr	r3, [r4, #20]
 8013978:	425b      	negs	r3, r3
 801397a:	61a3      	str	r3, [r4, #24]
 801397c:	6923      	ldr	r3, [r4, #16]
 801397e:	b943      	cbnz	r3, 8013992 <__swsetup_r+0xc6>
 8013980:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013984:	d1ba      	bne.n	80138fc <__swsetup_r+0x30>
 8013986:	bd70      	pop	{r4, r5, r6, pc}
 8013988:	0781      	lsls	r1, r0, #30
 801398a:	bf58      	it	pl
 801398c:	6963      	ldrpl	r3, [r4, #20]
 801398e:	60a3      	str	r3, [r4, #8]
 8013990:	e7f4      	b.n	801397c <__swsetup_r+0xb0>
 8013992:	2000      	movs	r0, #0
 8013994:	e7f7      	b.n	8013986 <__swsetup_r+0xba>
 8013996:	bf00      	nop
 8013998:	200002c8 	.word	0x200002c8
 801399c:	0801430c 	.word	0x0801430c
 80139a0:	0801432c 	.word	0x0801432c
 80139a4:	080142ec 	.word	0x080142ec

080139a8 <abort>:
 80139a8:	b508      	push	{r3, lr}
 80139aa:	2006      	movs	r0, #6
 80139ac:	f000 f898 	bl	8013ae0 <raise>
 80139b0:	2001      	movs	r0, #1
 80139b2:	f7ee fc39 	bl	8002228 <_exit>

080139b6 <__swhatbuf_r>:
 80139b6:	b570      	push	{r4, r5, r6, lr}
 80139b8:	460e      	mov	r6, r1
 80139ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80139be:	2900      	cmp	r1, #0
 80139c0:	b096      	sub	sp, #88	; 0x58
 80139c2:	4614      	mov	r4, r2
 80139c4:	461d      	mov	r5, r3
 80139c6:	da08      	bge.n	80139da <__swhatbuf_r+0x24>
 80139c8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80139cc:	2200      	movs	r2, #0
 80139ce:	602a      	str	r2, [r5, #0]
 80139d0:	061a      	lsls	r2, r3, #24
 80139d2:	d410      	bmi.n	80139f6 <__swhatbuf_r+0x40>
 80139d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80139d8:	e00e      	b.n	80139f8 <__swhatbuf_r+0x42>
 80139da:	466a      	mov	r2, sp
 80139dc:	f000 f89c 	bl	8013b18 <_fstat_r>
 80139e0:	2800      	cmp	r0, #0
 80139e2:	dbf1      	blt.n	80139c8 <__swhatbuf_r+0x12>
 80139e4:	9a01      	ldr	r2, [sp, #4]
 80139e6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80139ea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80139ee:	425a      	negs	r2, r3
 80139f0:	415a      	adcs	r2, r3
 80139f2:	602a      	str	r2, [r5, #0]
 80139f4:	e7ee      	b.n	80139d4 <__swhatbuf_r+0x1e>
 80139f6:	2340      	movs	r3, #64	; 0x40
 80139f8:	2000      	movs	r0, #0
 80139fa:	6023      	str	r3, [r4, #0]
 80139fc:	b016      	add	sp, #88	; 0x58
 80139fe:	bd70      	pop	{r4, r5, r6, pc}

08013a00 <__smakebuf_r>:
 8013a00:	898b      	ldrh	r3, [r1, #12]
 8013a02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013a04:	079d      	lsls	r5, r3, #30
 8013a06:	4606      	mov	r6, r0
 8013a08:	460c      	mov	r4, r1
 8013a0a:	d507      	bpl.n	8013a1c <__smakebuf_r+0x1c>
 8013a0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013a10:	6023      	str	r3, [r4, #0]
 8013a12:	6123      	str	r3, [r4, #16]
 8013a14:	2301      	movs	r3, #1
 8013a16:	6163      	str	r3, [r4, #20]
 8013a18:	b002      	add	sp, #8
 8013a1a:	bd70      	pop	{r4, r5, r6, pc}
 8013a1c:	ab01      	add	r3, sp, #4
 8013a1e:	466a      	mov	r2, sp
 8013a20:	f7ff ffc9 	bl	80139b6 <__swhatbuf_r>
 8013a24:	9900      	ldr	r1, [sp, #0]
 8013a26:	4605      	mov	r5, r0
 8013a28:	4630      	mov	r0, r6
 8013a2a:	f7fe fd53 	bl	80124d4 <_malloc_r>
 8013a2e:	b948      	cbnz	r0, 8013a44 <__smakebuf_r+0x44>
 8013a30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013a34:	059a      	lsls	r2, r3, #22
 8013a36:	d4ef      	bmi.n	8013a18 <__smakebuf_r+0x18>
 8013a38:	f023 0303 	bic.w	r3, r3, #3
 8013a3c:	f043 0302 	orr.w	r3, r3, #2
 8013a40:	81a3      	strh	r3, [r4, #12]
 8013a42:	e7e3      	b.n	8013a0c <__smakebuf_r+0xc>
 8013a44:	4b0d      	ldr	r3, [pc, #52]	; (8013a7c <__smakebuf_r+0x7c>)
 8013a46:	62b3      	str	r3, [r6, #40]	; 0x28
 8013a48:	89a3      	ldrh	r3, [r4, #12]
 8013a4a:	6020      	str	r0, [r4, #0]
 8013a4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013a50:	81a3      	strh	r3, [r4, #12]
 8013a52:	9b00      	ldr	r3, [sp, #0]
 8013a54:	6163      	str	r3, [r4, #20]
 8013a56:	9b01      	ldr	r3, [sp, #4]
 8013a58:	6120      	str	r0, [r4, #16]
 8013a5a:	b15b      	cbz	r3, 8013a74 <__smakebuf_r+0x74>
 8013a5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013a60:	4630      	mov	r0, r6
 8013a62:	f000 f86b 	bl	8013b3c <_isatty_r>
 8013a66:	b128      	cbz	r0, 8013a74 <__smakebuf_r+0x74>
 8013a68:	89a3      	ldrh	r3, [r4, #12]
 8013a6a:	f023 0303 	bic.w	r3, r3, #3
 8013a6e:	f043 0301 	orr.w	r3, r3, #1
 8013a72:	81a3      	strh	r3, [r4, #12]
 8013a74:	89a0      	ldrh	r0, [r4, #12]
 8013a76:	4305      	orrs	r5, r0
 8013a78:	81a5      	strh	r5, [r4, #12]
 8013a7a:	e7cd      	b.n	8013a18 <__smakebuf_r+0x18>
 8013a7c:	08013301 	.word	0x08013301

08013a80 <_malloc_usable_size_r>:
 8013a80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013a84:	1f18      	subs	r0, r3, #4
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	bfbc      	itt	lt
 8013a8a:	580b      	ldrlt	r3, [r1, r0]
 8013a8c:	18c0      	addlt	r0, r0, r3
 8013a8e:	4770      	bx	lr

08013a90 <_raise_r>:
 8013a90:	291f      	cmp	r1, #31
 8013a92:	b538      	push	{r3, r4, r5, lr}
 8013a94:	4604      	mov	r4, r0
 8013a96:	460d      	mov	r5, r1
 8013a98:	d904      	bls.n	8013aa4 <_raise_r+0x14>
 8013a9a:	2316      	movs	r3, #22
 8013a9c:	6003      	str	r3, [r0, #0]
 8013a9e:	f04f 30ff 	mov.w	r0, #4294967295
 8013aa2:	bd38      	pop	{r3, r4, r5, pc}
 8013aa4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013aa6:	b112      	cbz	r2, 8013aae <_raise_r+0x1e>
 8013aa8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013aac:	b94b      	cbnz	r3, 8013ac2 <_raise_r+0x32>
 8013aae:	4620      	mov	r0, r4
 8013ab0:	f000 f830 	bl	8013b14 <_getpid_r>
 8013ab4:	462a      	mov	r2, r5
 8013ab6:	4601      	mov	r1, r0
 8013ab8:	4620      	mov	r0, r4
 8013aba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013abe:	f000 b817 	b.w	8013af0 <_kill_r>
 8013ac2:	2b01      	cmp	r3, #1
 8013ac4:	d00a      	beq.n	8013adc <_raise_r+0x4c>
 8013ac6:	1c59      	adds	r1, r3, #1
 8013ac8:	d103      	bne.n	8013ad2 <_raise_r+0x42>
 8013aca:	2316      	movs	r3, #22
 8013acc:	6003      	str	r3, [r0, #0]
 8013ace:	2001      	movs	r0, #1
 8013ad0:	e7e7      	b.n	8013aa2 <_raise_r+0x12>
 8013ad2:	2400      	movs	r4, #0
 8013ad4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013ad8:	4628      	mov	r0, r5
 8013ada:	4798      	blx	r3
 8013adc:	2000      	movs	r0, #0
 8013ade:	e7e0      	b.n	8013aa2 <_raise_r+0x12>

08013ae0 <raise>:
 8013ae0:	4b02      	ldr	r3, [pc, #8]	; (8013aec <raise+0xc>)
 8013ae2:	4601      	mov	r1, r0
 8013ae4:	6818      	ldr	r0, [r3, #0]
 8013ae6:	f7ff bfd3 	b.w	8013a90 <_raise_r>
 8013aea:	bf00      	nop
 8013aec:	200002c8 	.word	0x200002c8

08013af0 <_kill_r>:
 8013af0:	b538      	push	{r3, r4, r5, lr}
 8013af2:	4d07      	ldr	r5, [pc, #28]	; (8013b10 <_kill_r+0x20>)
 8013af4:	2300      	movs	r3, #0
 8013af6:	4604      	mov	r4, r0
 8013af8:	4608      	mov	r0, r1
 8013afa:	4611      	mov	r1, r2
 8013afc:	602b      	str	r3, [r5, #0]
 8013afe:	f7ee fb83 	bl	8002208 <_kill>
 8013b02:	1c43      	adds	r3, r0, #1
 8013b04:	d102      	bne.n	8013b0c <_kill_r+0x1c>
 8013b06:	682b      	ldr	r3, [r5, #0]
 8013b08:	b103      	cbz	r3, 8013b0c <_kill_r+0x1c>
 8013b0a:	6023      	str	r3, [r4, #0]
 8013b0c:	bd38      	pop	{r3, r4, r5, pc}
 8013b0e:	bf00      	nop
 8013b10:	20000770 	.word	0x20000770

08013b14 <_getpid_r>:
 8013b14:	f7ee bb70 	b.w	80021f8 <_getpid>

08013b18 <_fstat_r>:
 8013b18:	b538      	push	{r3, r4, r5, lr}
 8013b1a:	4d07      	ldr	r5, [pc, #28]	; (8013b38 <_fstat_r+0x20>)
 8013b1c:	2300      	movs	r3, #0
 8013b1e:	4604      	mov	r4, r0
 8013b20:	4608      	mov	r0, r1
 8013b22:	4611      	mov	r1, r2
 8013b24:	602b      	str	r3, [r5, #0]
 8013b26:	f7ee fbce 	bl	80022c6 <_fstat>
 8013b2a:	1c43      	adds	r3, r0, #1
 8013b2c:	d102      	bne.n	8013b34 <_fstat_r+0x1c>
 8013b2e:	682b      	ldr	r3, [r5, #0]
 8013b30:	b103      	cbz	r3, 8013b34 <_fstat_r+0x1c>
 8013b32:	6023      	str	r3, [r4, #0]
 8013b34:	bd38      	pop	{r3, r4, r5, pc}
 8013b36:	bf00      	nop
 8013b38:	20000770 	.word	0x20000770

08013b3c <_isatty_r>:
 8013b3c:	b538      	push	{r3, r4, r5, lr}
 8013b3e:	4d06      	ldr	r5, [pc, #24]	; (8013b58 <_isatty_r+0x1c>)
 8013b40:	2300      	movs	r3, #0
 8013b42:	4604      	mov	r4, r0
 8013b44:	4608      	mov	r0, r1
 8013b46:	602b      	str	r3, [r5, #0]
 8013b48:	f7ee fbcd 	bl	80022e6 <_isatty>
 8013b4c:	1c43      	adds	r3, r0, #1
 8013b4e:	d102      	bne.n	8013b56 <_isatty_r+0x1a>
 8013b50:	682b      	ldr	r3, [r5, #0]
 8013b52:	b103      	cbz	r3, 8013b56 <_isatty_r+0x1a>
 8013b54:	6023      	str	r3, [r4, #0]
 8013b56:	bd38      	pop	{r3, r4, r5, pc}
 8013b58:	20000770 	.word	0x20000770

08013b5c <_init>:
 8013b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b5e:	bf00      	nop
 8013b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013b62:	bc08      	pop	{r3}
 8013b64:	469e      	mov	lr, r3
 8013b66:	4770      	bx	lr

08013b68 <_fini>:
 8013b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b6a:	bf00      	nop
 8013b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013b6e:	bc08      	pop	{r3}
 8013b70:	469e      	mov	lr, r3
 8013b72:	4770      	bx	lr
