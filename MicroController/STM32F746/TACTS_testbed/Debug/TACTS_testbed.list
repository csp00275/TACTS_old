
TACTS_testbed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005294  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  0800545c  0800545c  0001545c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005684  08005684  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005684  08005684  00015684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800568c  0800568c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800568c  0800568c  0001568c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005690  08005690  00015690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005694  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  2000000c  080056a0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  080056a0  00020154  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000140b2  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028a5  00000000  00000000  000340ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001080  00000000  00000000  00036998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f68  00000000  00000000  00037a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025f12  00000000  00000000  00038980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019a76  00000000  00000000  0005e892  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed2c4  00000000  00000000  00078308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001655cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044dc  00000000  00000000  0016561c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08005444 	.word	0x08005444

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08005444 	.word	0x08005444

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b974 	b.w	8000508 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468e      	mov	lr, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14d      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000246:	428a      	cmp	r2, r1
 8000248:	4694      	mov	ip, r2
 800024a:	d969      	bls.n	8000320 <__udivmoddi4+0xe8>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b152      	cbz	r2, 8000268 <__udivmoddi4+0x30>
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	f1c2 0120 	rsb	r1, r2, #32
 800025a:	fa20 f101 	lsr.w	r1, r0, r1
 800025e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000262:	ea41 0e03 	orr.w	lr, r1, r3
 8000266:	4094      	lsls	r4, r2
 8000268:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800026c:	0c21      	lsrs	r1, r4, #16
 800026e:	fbbe f6f8 	udiv	r6, lr, r8
 8000272:	fa1f f78c 	uxth.w	r7, ip
 8000276:	fb08 e316 	mls	r3, r8, r6, lr
 800027a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027e:	fb06 f107 	mul.w	r1, r6, r7
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f106 30ff 	add.w	r0, r6, #4294967295
 800028e:	f080 811f 	bcs.w	80004d0 <__udivmoddi4+0x298>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 811c 	bls.w	80004d0 <__udivmoddi4+0x298>
 8000298:	3e02      	subs	r6, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a5b      	subs	r3, r3, r1
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a4:	fb08 3310 	mls	r3, r8, r0, r3
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	fb00 f707 	mul.w	r7, r0, r7
 80002b0:	42a7      	cmp	r7, r4
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x92>
 80002b4:	eb1c 0404 	adds.w	r4, ip, r4
 80002b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002bc:	f080 810a 	bcs.w	80004d4 <__udivmoddi4+0x29c>
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	f240 8107 	bls.w	80004d4 <__udivmoddi4+0x29c>
 80002c6:	4464      	add	r4, ip
 80002c8:	3802      	subs	r0, #2
 80002ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ce:	1be4      	subs	r4, r4, r7
 80002d0:	2600      	movs	r6, #0
 80002d2:	b11d      	cbz	r5, 80002dc <__udivmoddi4+0xa4>
 80002d4:	40d4      	lsrs	r4, r2
 80002d6:	2300      	movs	r3, #0
 80002d8:	e9c5 4300 	strd	r4, r3, [r5]
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d909      	bls.n	80002fa <__udivmoddi4+0xc2>
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	f000 80ef 	beq.w	80004ca <__udivmoddi4+0x292>
 80002ec:	2600      	movs	r6, #0
 80002ee:	e9c5 0100 	strd	r0, r1, [r5]
 80002f2:	4630      	mov	r0, r6
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	fab3 f683 	clz	r6, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d14a      	bne.n	8000398 <__udivmoddi4+0x160>
 8000302:	428b      	cmp	r3, r1
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xd4>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80f9 	bhi.w	80004fe <__udivmoddi4+0x2c6>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb61 0303 	sbc.w	r3, r1, r3
 8000312:	2001      	movs	r0, #1
 8000314:	469e      	mov	lr, r3
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e0      	beq.n	80002dc <__udivmoddi4+0xa4>
 800031a:	e9c5 4e00 	strd	r4, lr, [r5]
 800031e:	e7dd      	b.n	80002dc <__udivmoddi4+0xa4>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xec>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	2a00      	cmp	r2, #0
 800032a:	f040 8092 	bne.w	8000452 <__udivmoddi4+0x21a>
 800032e:	eba1 010c 	sub.w	r1, r1, ip
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2601      	movs	r6, #1
 800033c:	0c20      	lsrs	r0, r4, #16
 800033e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000342:	fb07 1113 	mls	r1, r7, r3, r1
 8000346:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800034a:	fb0e f003 	mul.w	r0, lr, r3
 800034e:	4288      	cmp	r0, r1
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x12c>
 8000352:	eb1c 0101 	adds.w	r1, ip, r1
 8000356:	f103 38ff 	add.w	r8, r3, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x12a>
 800035c:	4288      	cmp	r0, r1
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2c0>
 8000362:	4643      	mov	r3, r8
 8000364:	1a09      	subs	r1, r1, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb1 f0f7 	udiv	r0, r1, r7
 800036c:	fb07 1110 	mls	r1, r7, r0, r1
 8000370:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x156>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 31ff 	add.w	r1, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x154>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2ca>
 800038c:	4608      	mov	r0, r1
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000396:	e79c      	b.n	80002d2 <__udivmoddi4+0x9a>
 8000398:	f1c6 0720 	rsb	r7, r6, #32
 800039c:	40b3      	lsls	r3, r6
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa20 f407 	lsr.w	r4, r0, r7
 80003aa:	fa01 f306 	lsl.w	r3, r1, r6
 80003ae:	431c      	orrs	r4, r3
 80003b0:	40f9      	lsrs	r1, r7
 80003b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80003be:	0c20      	lsrs	r0, r4, #16
 80003c0:	fa1f fe8c 	uxth.w	lr, ip
 80003c4:	fb09 1118 	mls	r1, r9, r8, r1
 80003c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003cc:	fb08 f00e 	mul.w	r0, r8, lr
 80003d0:	4288      	cmp	r0, r1
 80003d2:	fa02 f206 	lsl.w	r2, r2, r6
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b8>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2bc>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2bc>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4461      	add	r1, ip
 80003f0:	1a09      	subs	r1, r1, r0
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f8:	fb09 1110 	mls	r1, r9, r0, r1
 80003fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000400:	fb00 fe0e 	mul.w	lr, r0, lr
 8000404:	458e      	cmp	lr, r1
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1e2>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2b4>
 8000412:	458e      	cmp	lr, r1
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2b4>
 8000416:	3802      	subs	r0, #2
 8000418:	4461      	add	r1, ip
 800041a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041e:	fba0 9402 	umull	r9, r4, r0, r2
 8000422:	eba1 010e 	sub.w	r1, r1, lr
 8000426:	42a1      	cmp	r1, r4
 8000428:	46c8      	mov	r8, r9
 800042a:	46a6      	mov	lr, r4
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x2a4>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x2a0>
 8000430:	b15d      	cbz	r5, 800044a <__udivmoddi4+0x212>
 8000432:	ebb3 0208 	subs.w	r2, r3, r8
 8000436:	eb61 010e 	sbc.w	r1, r1, lr
 800043a:	fa01 f707 	lsl.w	r7, r1, r7
 800043e:	fa22 f306 	lsr.w	r3, r2, r6
 8000442:	40f1      	lsrs	r1, r6
 8000444:	431f      	orrs	r7, r3
 8000446:	e9c5 7100 	strd	r7, r1, [r5]
 800044a:	2600      	movs	r6, #0
 800044c:	4631      	mov	r1, r6
 800044e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000452:	f1c2 0320 	rsb	r3, r2, #32
 8000456:	40d8      	lsrs	r0, r3
 8000458:	fa0c fc02 	lsl.w	ip, ip, r2
 800045c:	fa21 f303 	lsr.w	r3, r1, r3
 8000460:	4091      	lsls	r1, r2
 8000462:	4301      	orrs	r1, r0
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000470:	fb07 3610 	mls	r6, r7, r0, r3
 8000474:	0c0b      	lsrs	r3, r1, #16
 8000476:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800047a:	fb00 f60e 	mul.w	r6, r0, lr
 800047e:	429e      	cmp	r6, r3
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x260>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b8>
 8000490:	429e      	cmp	r6, r3
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b8>
 8000494:	3802      	subs	r0, #2
 8000496:	4463      	add	r3, ip
 8000498:	1b9b      	subs	r3, r3, r6
 800049a:	b289      	uxth	r1, r1
 800049c:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a0:	fb07 3316 	mls	r3, r7, r6, r3
 80004a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x28a>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 80004be:	3e02      	subs	r6, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0x104>
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e705      	b.n	80002dc <__udivmoddi4+0xa4>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e3      	b.n	800029c <__udivmoddi4+0x64>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6f8      	b.n	80002ca <__udivmoddi4+0x92>
 80004d8:	454b      	cmp	r3, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f8>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f8>
 80004e8:	4646      	mov	r6, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x28a>
 80004ec:	4620      	mov	r0, r4
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1e2>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x260>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b8>
 80004f8:	3b02      	subs	r3, #2
 80004fa:	4461      	add	r1, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x12c>
 80004fe:	4630      	mov	r0, r6
 8000500:	e709      	b.n	8000316 <__udivmoddi4+0xde>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x156>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b08a      	sub	sp, #40	; 0x28
 8000510:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000512:	f107 0314 	add.w	r3, r7, #20
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]
 800051a:	605a      	str	r2, [r3, #4]
 800051c:	609a      	str	r2, [r3, #8]
 800051e:	60da      	str	r2, [r3, #12]
 8000520:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000522:	4b23      	ldr	r3, [pc, #140]	; (80005b0 <MX_GPIO_Init+0xa4>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	4a22      	ldr	r2, [pc, #136]	; (80005b0 <MX_GPIO_Init+0xa4>)
 8000528:	f043 0302 	orr.w	r3, r3, #2
 800052c:	6313      	str	r3, [r2, #48]	; 0x30
 800052e:	4b20      	ldr	r3, [pc, #128]	; (80005b0 <MX_GPIO_Init+0xa4>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	f003 0302 	and.w	r3, r3, #2
 8000536:	613b      	str	r3, [r7, #16]
 8000538:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800053a:	4b1d      	ldr	r3, [pc, #116]	; (80005b0 <MX_GPIO_Init+0xa4>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	4a1c      	ldr	r2, [pc, #112]	; (80005b0 <MX_GPIO_Init+0xa4>)
 8000540:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000544:	6313      	str	r3, [r2, #48]	; 0x30
 8000546:	4b1a      	ldr	r3, [pc, #104]	; (80005b0 <MX_GPIO_Init+0xa4>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000552:	4b17      	ldr	r3, [pc, #92]	; (80005b0 <MX_GPIO_Init+0xa4>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	4a16      	ldr	r2, [pc, #88]	; (80005b0 <MX_GPIO_Init+0xa4>)
 8000558:	f043 0301 	orr.w	r3, r3, #1
 800055c:	6313      	str	r3, [r2, #48]	; 0x30
 800055e:	4b14      	ldr	r3, [pc, #80]	; (80005b0 <MX_GPIO_Init+0xa4>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	f003 0301 	and.w	r3, r3, #1
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800056a:	4b11      	ldr	r3, [pc, #68]	; (80005b0 <MX_GPIO_Init+0xa4>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	4a10      	ldr	r2, [pc, #64]	; (80005b0 <MX_GPIO_Init+0xa4>)
 8000570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000574:	6313      	str	r3, [r2, #48]	; 0x30
 8000576:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <MX_GPIO_Init+0xa4>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 8000582:	2200      	movs	r2, #0
 8000584:	2102      	movs	r1, #2
 8000586:	480b      	ldr	r0, [pc, #44]	; (80005b4 <MX_GPIO_Init+0xa8>)
 8000588:	f001 f89e 	bl	80016c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800058c:	2302      	movs	r3, #2
 800058e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000590:	2301      	movs	r3, #1
 8000592:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000594:	2300      	movs	r3, #0
 8000596:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000598:	2301      	movs	r3, #1
 800059a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800059c:	f107 0314 	add.w	r3, r7, #20
 80005a0:	4619      	mov	r1, r3
 80005a2:	4804      	ldr	r0, [pc, #16]	; (80005b4 <MX_GPIO_Init+0xa8>)
 80005a4:	f000 fd20 	bl	8000fe8 <HAL_GPIO_Init>

}
 80005a8:	bf00      	nop
 80005aa:	3728      	adds	r7, #40	; 0x28
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	40023800 	.word	0x40023800
 80005b4:	40022000 	.word	0x40022000

080005b8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005bc:	4b1b      	ldr	r3, [pc, #108]	; (800062c <MX_I2C1_Init+0x74>)
 80005be:	4a1c      	ldr	r2, [pc, #112]	; (8000630 <MX_I2C1_Init+0x78>)
 80005c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 80005c2:	4b1a      	ldr	r3, [pc, #104]	; (800062c <MX_I2C1_Init+0x74>)
 80005c4:	4a1b      	ldr	r2, [pc, #108]	; (8000634 <MX_I2C1_Init+0x7c>)
 80005c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005c8:	4b18      	ldr	r3, [pc, #96]	; (800062c <MX_I2C1_Init+0x74>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005ce:	4b17      	ldr	r3, [pc, #92]	; (800062c <MX_I2C1_Init+0x74>)
 80005d0:	2201      	movs	r2, #1
 80005d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005d4:	4b15      	ldr	r3, [pc, #84]	; (800062c <MX_I2C1_Init+0x74>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005da:	4b14      	ldr	r3, [pc, #80]	; (800062c <MX_I2C1_Init+0x74>)
 80005dc:	2200      	movs	r2, #0
 80005de:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <MX_I2C1_Init+0x74>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005e6:	4b11      	ldr	r3, [pc, #68]	; (800062c <MX_I2C1_Init+0x74>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005ec:	4b0f      	ldr	r3, [pc, #60]	; (800062c <MX_I2C1_Init+0x74>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005f2:	480e      	ldr	r0, [pc, #56]	; (800062c <MX_I2C1_Init+0x74>)
 80005f4:	f001 f894 	bl	8001720 <HAL_I2C_Init>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80005fe:	f000 f907 	bl	8000810 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000602:	2100      	movs	r1, #0
 8000604:	4809      	ldr	r0, [pc, #36]	; (800062c <MX_I2C1_Init+0x74>)
 8000606:	f001 f9ad 	bl	8001964 <HAL_I2CEx_ConfigAnalogFilter>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000610:	f000 f8fe 	bl	8000810 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000614:	2100      	movs	r1, #0
 8000616:	4805      	ldr	r0, [pc, #20]	; (800062c <MX_I2C1_Init+0x74>)
 8000618:	f001 fa1a 	bl	8001a50 <HAL_I2CEx_ConfigDigitalFilter>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000622:	f000 f8f5 	bl	8000810 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	20000028 	.word	0x20000028
 8000630:	40005400 	.word	0x40005400
 8000634:	6000030d 	.word	0x6000030d

08000638 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b0aa      	sub	sp, #168	; 0xa8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000640:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000650:	f107 0310 	add.w	r3, r7, #16
 8000654:	2284      	movs	r2, #132	; 0x84
 8000656:	2100      	movs	r1, #0
 8000658:	4618      	mov	r0, r3
 800065a:	f004 feeb 	bl	8005434 <memset>
  if(i2cHandle->Instance==I2C1)
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4a22      	ldr	r2, [pc, #136]	; (80006ec <HAL_I2C_MspInit+0xb4>)
 8000664:	4293      	cmp	r3, r2
 8000666:	d13c      	bne.n	80006e2 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000668:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800066c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800066e:	2300      	movs	r3, #0
 8000670:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000672:	f107 0310 	add.w	r3, r7, #16
 8000676:	4618      	mov	r0, r3
 8000678:	f002 f8aa 	bl	80027d0 <HAL_RCCEx_PeriphCLKConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000682:	f000 f8c5 	bl	8000810 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000686:	4b1a      	ldr	r3, [pc, #104]	; (80006f0 <HAL_I2C_MspInit+0xb8>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	4a19      	ldr	r2, [pc, #100]	; (80006f0 <HAL_I2C_MspInit+0xb8>)
 800068c:	f043 0302 	orr.w	r3, r3, #2
 8000690:	6313      	str	r3, [r2, #48]	; 0x30
 8000692:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <HAL_I2C_MspInit+0xb8>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	f003 0302 	and.w	r3, r3, #2
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800069e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006a6:	2312      	movs	r3, #18
 80006a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	2300      	movs	r3, #0
 80006ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006b2:	2303      	movs	r3, #3
 80006b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006b8:	2304      	movs	r3, #4
 80006ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006be:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80006c2:	4619      	mov	r1, r3
 80006c4:	480b      	ldr	r0, [pc, #44]	; (80006f4 <HAL_I2C_MspInit+0xbc>)
 80006c6:	f000 fc8f 	bl	8000fe8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006ca:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <HAL_I2C_MspInit+0xb8>)
 80006cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ce:	4a08      	ldr	r2, [pc, #32]	; (80006f0 <HAL_I2C_MspInit+0xb8>)
 80006d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006d4:	6413      	str	r3, [r2, #64]	; 0x40
 80006d6:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <HAL_I2C_MspInit+0xb8>)
 80006d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006de:	60bb      	str	r3, [r7, #8]
 80006e0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80006e2:	bf00      	nop
 80006e4:	37a8      	adds	r7, #168	; 0xa8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40005400 	.word	0x40005400
 80006f0:	40023800 	.word	0x40023800
 80006f4:	40020400 	.word	0x40020400

080006f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006fc:	f000 fa45 	bl	8000b8a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000700:	f000 f80c 	bl	800071c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000704:	f7ff ff02 	bl	800050c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000708:	f7ff ff56 	bl	80005b8 <MX_I2C1_Init>
  MX_TIM7_Init();
 800070c:	f000 f904 	bl	8000918 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 8000710:	f000 f958 	bl	80009c4 <MX_USART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000714:	f000 f870 	bl	80007f8 <MX_NVIC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000718:	e7fe      	b.n	8000718 <main+0x20>
	...

0800071c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b094      	sub	sp, #80	; 0x50
 8000720:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000722:	f107 0320 	add.w	r3, r7, #32
 8000726:	2230      	movs	r2, #48	; 0x30
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f004 fe82 	bl	8005434 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000730:	f107 030c 	add.w	r3, r7, #12
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
 800073e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000740:	4b2b      	ldr	r3, [pc, #172]	; (80007f0 <SystemClock_Config+0xd4>)
 8000742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000744:	4a2a      	ldr	r2, [pc, #168]	; (80007f0 <SystemClock_Config+0xd4>)
 8000746:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800074a:	6413      	str	r3, [r2, #64]	; 0x40
 800074c:	4b28      	ldr	r3, [pc, #160]	; (80007f0 <SystemClock_Config+0xd4>)
 800074e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000750:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000754:	60bb      	str	r3, [r7, #8]
 8000756:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000758:	4b26      	ldr	r3, [pc, #152]	; (80007f4 <SystemClock_Config+0xd8>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a25      	ldr	r2, [pc, #148]	; (80007f4 <SystemClock_Config+0xd8>)
 800075e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000762:	6013      	str	r3, [r2, #0]
 8000764:	4b23      	ldr	r3, [pc, #140]	; (80007f4 <SystemClock_Config+0xd8>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800076c:	607b      	str	r3, [r7, #4]
 800076e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000770:	2301      	movs	r3, #1
 8000772:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000774:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000778:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800077a:	2302      	movs	r3, #2
 800077c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800077e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000782:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000784:	2319      	movs	r3, #25
 8000786:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000788:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 800078c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800078e:	2302      	movs	r3, #2
 8000790:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000792:	2302      	movs	r3, #2
 8000794:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000796:	f107 0320 	add.w	r3, r7, #32
 800079a:	4618      	mov	r0, r3
 800079c:	f001 fa1c 	bl	8001bd8 <HAL_RCC_OscConfig>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80007a6:	f000 f833 	bl	8000810 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007aa:	f001 f9c5 	bl	8001b38 <HAL_PWREx_EnableOverDrive>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80007b4:	f000 f82c 	bl	8000810 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b8:	230f      	movs	r3, #15
 80007ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007bc:	2302      	movs	r3, #2
 80007be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007c4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80007d0:	f107 030c 	add.w	r3, r7, #12
 80007d4:	2107      	movs	r1, #7
 80007d6:	4618      	mov	r0, r3
 80007d8:	f001 fd58 	bl	800228c <HAL_RCC_ClockConfig>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80007e2:	f000 f815 	bl	8000810 <Error_Handler>
  }
}
 80007e6:	bf00      	nop
 80007e8:	3750      	adds	r7, #80	; 0x50
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40023800 	.word	0x40023800
 80007f4:	40007000 	.word	0x40007000

080007f8 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* TIM7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80007fc:	2200      	movs	r2, #0
 80007fe:	2100      	movs	r1, #0
 8000800:	2037      	movs	r0, #55	; 0x37
 8000802:	f000 fb0f 	bl	8000e24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000806:	2037      	movs	r0, #55	; 0x37
 8000808:	f000 fb38 	bl	8000e7c <HAL_NVIC_EnableIRQ>
}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}

08000810 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000814:	b672      	cpsid	i
}
 8000816:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000818:	e7fe      	b.n	8000818 <Error_Handler+0x8>

0800081a <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800081a:	b480      	push	{r7}
 800081c:	b083      	sub	sp, #12
 800081e:	af00      	add	r7, sp, #0
 8000820:	6078      	str	r0, [r7, #4]
 8000822:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000824:	bf00      	nop
 8000826:	370c      	adds	r7, #12
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr

08000830 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000836:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <HAL_MspInit+0x44>)
 8000838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083a:	4a0e      	ldr	r2, [pc, #56]	; (8000874 <HAL_MspInit+0x44>)
 800083c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000840:	6413      	str	r3, [r2, #64]	; 0x40
 8000842:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <HAL_MspInit+0x44>)
 8000844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084e:	4b09      	ldr	r3, [pc, #36]	; (8000874 <HAL_MspInit+0x44>)
 8000850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000852:	4a08      	ldr	r2, [pc, #32]	; (8000874 <HAL_MspInit+0x44>)
 8000854:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000858:	6453      	str	r3, [r2, #68]	; 0x44
 800085a:	4b06      	ldr	r3, [pc, #24]	; (8000874 <HAL_MspInit+0x44>)
 800085c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800085e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000862:	603b      	str	r3, [r7, #0]
 8000864:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000866:	bf00      	nop
 8000868:	370c      	adds	r7, #12
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	40023800 	.word	0x40023800

08000878 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800087c:	e7fe      	b.n	800087c <NMI_Handler+0x4>

0800087e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800087e:	b480      	push	{r7}
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000882:	e7fe      	b.n	8000882 <HardFault_Handler+0x4>

08000884 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000888:	e7fe      	b.n	8000888 <MemManage_Handler+0x4>

0800088a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800088e:	e7fe      	b.n	800088e <BusFault_Handler+0x4>

08000890 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000894:	e7fe      	b.n	8000894 <UsageFault_Handler+0x4>

08000896 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800089a:	bf00      	nop
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr

080008a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008a8:	bf00      	nop
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr

080008b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008b6:	bf00      	nop
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr

080008c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008c4:	f000 f99e 	bl	8000c04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008c8:	bf00      	nop
 80008ca:	bd80      	pop	{r7, pc}

080008cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80008d0:	4802      	ldr	r0, [pc, #8]	; (80008dc <USART1_IRQHandler+0x10>)
 80008d2:	f003 fca9 	bl	8004228 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	200000c8 	.word	0x200000c8

080008e0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80008e4:	4802      	ldr	r0, [pc, #8]	; (80008f0 <TIM7_IRQHandler+0x10>)
 80008e6:	f003 f877 	bl	80039d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	2000007c 	.word	0x2000007c

080008f4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008f8:	4b06      	ldr	r3, [pc, #24]	; (8000914 <SystemInit+0x20>)
 80008fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008fe:	4a05      	ldr	r2, [pc, #20]	; (8000914 <SystemInit+0x20>)
 8000900:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000904:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	e000ed00 	.word	0xe000ed00

08000918 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800091e:	1d3b      	adds	r3, r7, #4
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
 8000926:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000928:	4b14      	ldr	r3, [pc, #80]	; (800097c <MX_TIM7_Init+0x64>)
 800092a:	4a15      	ldr	r2, [pc, #84]	; (8000980 <MX_TIM7_Init+0x68>)
 800092c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10800-1;
 800092e:	4b13      	ldr	r3, [pc, #76]	; (800097c <MX_TIM7_Init+0x64>)
 8000930:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8000934:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000936:	4b11      	ldr	r3, [pc, #68]	; (800097c <MX_TIM7_Init+0x64>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 100-1;
 800093c:	4b0f      	ldr	r3, [pc, #60]	; (800097c <MX_TIM7_Init+0x64>)
 800093e:	2263      	movs	r2, #99	; 0x63
 8000940:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000942:	4b0e      	ldr	r3, [pc, #56]	; (800097c <MX_TIM7_Init+0x64>)
 8000944:	2200      	movs	r2, #0
 8000946:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000948:	480c      	ldr	r0, [pc, #48]	; (800097c <MX_TIM7_Init+0x64>)
 800094a:	f002 ff25 	bl	8003798 <HAL_TIM_Base_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000954:	f7ff ff5c 	bl	8000810 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000958:	2300      	movs	r3, #0
 800095a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800095c:	2300      	movs	r3, #0
 800095e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000960:	1d3b      	adds	r3, r7, #4
 8000962:	4619      	mov	r1, r3
 8000964:	4805      	ldr	r0, [pc, #20]	; (800097c <MX_TIM7_Init+0x64>)
 8000966:	f003 fa29 	bl	8003dbc <HAL_TIMEx_MasterConfigSynchronization>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000970:	f7ff ff4e 	bl	8000810 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000974:	bf00      	nop
 8000976:	3710      	adds	r7, #16
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	2000007c 	.word	0x2000007c
 8000980:	40001400 	.word	0x40001400

08000984 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000984:	b480      	push	{r7}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a0a      	ldr	r2, [pc, #40]	; (80009bc <HAL_TIM_Base_MspInit+0x38>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d10b      	bne.n	80009ae <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000996:	4b0a      	ldr	r3, [pc, #40]	; (80009c0 <HAL_TIM_Base_MspInit+0x3c>)
 8000998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099a:	4a09      	ldr	r2, [pc, #36]	; (80009c0 <HAL_TIM_Base_MspInit+0x3c>)
 800099c:	f043 0320 	orr.w	r3, r3, #32
 80009a0:	6413      	str	r3, [r2, #64]	; 0x40
 80009a2:	4b07      	ldr	r3, [pc, #28]	; (80009c0 <HAL_TIM_Base_MspInit+0x3c>)
 80009a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a6:	f003 0320 	and.w	r3, r3, #32
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80009ae:	bf00      	nop
 80009b0:	3714      	adds	r7, #20
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	40001400 	.word	0x40001400
 80009c0:	40023800 	.word	0x40023800

080009c4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009c8:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <MX_USART1_UART_Init+0x58>)
 80009ca:	4a15      	ldr	r2, [pc, #84]	; (8000a20 <MX_USART1_UART_Init+0x5c>)
 80009cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009ce:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <MX_USART1_UART_Init+0x58>)
 80009d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009d6:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <MX_USART1_UART_Init+0x58>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009dc:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <MX_USART1_UART_Init+0x58>)
 80009de:	2200      	movs	r2, #0
 80009e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009e2:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <MX_USART1_UART_Init+0x58>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009e8:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <MX_USART1_UART_Init+0x58>)
 80009ea:	220c      	movs	r2, #12
 80009ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ee:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <MX_USART1_UART_Init+0x58>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f4:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <MX_USART1_UART_Init+0x58>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009fa:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <MX_USART1_UART_Init+0x58>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <MX_USART1_UART_Init+0x58>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a06:	4805      	ldr	r0, [pc, #20]	; (8000a1c <MX_USART1_UART_Init+0x58>)
 8000a08:	f003 fb4e 	bl	80040a8 <HAL_UART_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a12:	f7ff fefd 	bl	8000810 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	200000c8 	.word	0x200000c8
 8000a20:	40011000 	.word	0x40011000

08000a24 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b0ac      	sub	sp, #176	; 0xb0
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a3c:	f107 0318 	add.w	r3, r7, #24
 8000a40:	2284      	movs	r2, #132	; 0x84
 8000a42:	2100      	movs	r1, #0
 8000a44:	4618      	mov	r0, r3
 8000a46:	f004 fcf5 	bl	8005434 <memset>
  if(uartHandle->Instance==USART1)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a36      	ldr	r2, [pc, #216]	; (8000b28 <HAL_UART_MspInit+0x104>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d164      	bne.n	8000b1e <HAL_UART_MspInit+0xfa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a54:	2340      	movs	r3, #64	; 0x40
 8000a56:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a5c:	f107 0318 	add.w	r3, r7, #24
 8000a60:	4618      	mov	r0, r3
 8000a62:	f001 feb5 	bl	80027d0 <HAL_RCCEx_PeriphCLKConfig>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a6c:	f7ff fed0 	bl	8000810 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a70:	4b2e      	ldr	r3, [pc, #184]	; (8000b2c <HAL_UART_MspInit+0x108>)
 8000a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a74:	4a2d      	ldr	r2, [pc, #180]	; (8000b2c <HAL_UART_MspInit+0x108>)
 8000a76:	f043 0310 	orr.w	r3, r3, #16
 8000a7a:	6453      	str	r3, [r2, #68]	; 0x44
 8000a7c:	4b2b      	ldr	r3, [pc, #172]	; (8000b2c <HAL_UART_MspInit+0x108>)
 8000a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a80:	f003 0310 	and.w	r3, r3, #16
 8000a84:	617b      	str	r3, [r7, #20]
 8000a86:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a88:	4b28      	ldr	r3, [pc, #160]	; (8000b2c <HAL_UART_MspInit+0x108>)
 8000a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8c:	4a27      	ldr	r2, [pc, #156]	; (8000b2c <HAL_UART_MspInit+0x108>)
 8000a8e:	f043 0302 	orr.w	r3, r3, #2
 8000a92:	6313      	str	r3, [r2, #48]	; 0x30
 8000a94:	4b25      	ldr	r3, [pc, #148]	; (8000b2c <HAL_UART_MspInit+0x108>)
 8000a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a98:	f003 0302 	and.w	r3, r3, #2
 8000a9c:	613b      	str	r3, [r7, #16]
 8000a9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa0:	4b22      	ldr	r3, [pc, #136]	; (8000b2c <HAL_UART_MspInit+0x108>)
 8000aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa4:	4a21      	ldr	r2, [pc, #132]	; (8000b2c <HAL_UART_MspInit+0x108>)
 8000aa6:	f043 0301 	orr.w	r3, r3, #1
 8000aaa:	6313      	str	r3, [r2, #48]	; 0x30
 8000aac:	4b1f      	ldr	r3, [pc, #124]	; (8000b2c <HAL_UART_MspInit+0x108>)
 8000aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab0:	f003 0301 	and.w	r3, r3, #1
 8000ab4:	60fb      	str	r3, [r7, #12]
 8000ab6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ab8:	2380      	movs	r3, #128	; 0x80
 8000aba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aca:	2303      	movs	r3, #3
 8000acc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ad0:	2307      	movs	r3, #7
 8000ad2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ada:	4619      	mov	r1, r3
 8000adc:	4814      	ldr	r0, [pc, #80]	; (8000b30 <HAL_UART_MspInit+0x10c>)
 8000ade:	f000 fa83 	bl	8000fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ae2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ae6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aea:	2302      	movs	r3, #2
 8000aec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af6:	2303      	movs	r3, #3
 8000af8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000afc:	2307      	movs	r3, #7
 8000afe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b02:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b06:	4619      	mov	r1, r3
 8000b08:	480a      	ldr	r0, [pc, #40]	; (8000b34 <HAL_UART_MspInit+0x110>)
 8000b0a:	f000 fa6d 	bl	8000fe8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2100      	movs	r1, #0
 8000b12:	2025      	movs	r0, #37	; 0x25
 8000b14:	f000 f986 	bl	8000e24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b18:	2025      	movs	r0, #37	; 0x25
 8000b1a:	f000 f9af 	bl	8000e7c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000b1e:	bf00      	nop
 8000b20:	37b0      	adds	r7, #176	; 0xb0
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40011000 	.word	0x40011000
 8000b2c:	40023800 	.word	0x40023800
 8000b30:	40020400 	.word	0x40020400
 8000b34:	40020000 	.word	0x40020000

08000b38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b3c:	480d      	ldr	r0, [pc, #52]	; (8000b74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b3e:	490e      	ldr	r1, [pc, #56]	; (8000b78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b40:	4a0e      	ldr	r2, [pc, #56]	; (8000b7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b44:	e002      	b.n	8000b4c <LoopCopyDataInit>

08000b46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b4a:	3304      	adds	r3, #4

08000b4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b50:	d3f9      	bcc.n	8000b46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b52:	4a0b      	ldr	r2, [pc, #44]	; (8000b80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b54:	4c0b      	ldr	r4, [pc, #44]	; (8000b84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b58:	e001      	b.n	8000b5e <LoopFillZerobss>

08000b5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b5c:	3204      	adds	r2, #4

08000b5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b60:	d3fb      	bcc.n	8000b5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b62:	f7ff fec7 	bl	80008f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b66:	f004 fc41 	bl	80053ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b6a:	f7ff fdc5 	bl	80006f8 <main>
  bx  lr    
 8000b6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b70:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000b74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b78:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b7c:	08005694 	.word	0x08005694
  ldr r2, =_sbss
 8000b80:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b84:	20000154 	.word	0x20000154

08000b88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b88:	e7fe      	b.n	8000b88 <ADC_IRQHandler>

08000b8a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b8e:	2003      	movs	r0, #3
 8000b90:	f000 f928 	bl	8000de4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b94:	200f      	movs	r0, #15
 8000b96:	f000 f805 	bl	8000ba4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b9a:	f7ff fe49 	bl	8000830 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b9e:	2300      	movs	r3, #0
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bac:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <HAL_InitTick+0x54>)
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	4b12      	ldr	r3, [pc, #72]	; (8000bfc <HAL_InitTick+0x58>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f000 f972 	bl	8000eac <HAL_SYSTICK_Config>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	e00e      	b.n	8000bf0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2b0f      	cmp	r3, #15
 8000bd6:	d80a      	bhi.n	8000bee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	6879      	ldr	r1, [r7, #4]
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	f000 f920 	bl	8000e24 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000be4:	4a06      	ldr	r2, [pc, #24]	; (8000c00 <HAL_InitTick+0x5c>)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bea:	2300      	movs	r3, #0
 8000bec:	e000      	b.n	8000bf0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000000 	.word	0x20000000
 8000bfc:	20000008 	.word	0x20000008
 8000c00:	20000004 	.word	0x20000004

08000c04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <HAL_IncTick+0x20>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <HAL_IncTick+0x24>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4413      	add	r3, r2
 8000c14:	4a04      	ldr	r2, [pc, #16]	; (8000c28 <HAL_IncTick+0x24>)
 8000c16:	6013      	str	r3, [r2, #0]
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	20000008 	.word	0x20000008
 8000c28:	20000150 	.word	0x20000150

08000c2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c30:	4b03      	ldr	r3, [pc, #12]	; (8000c40 <HAL_GetTick+0x14>)
 8000c32:	681b      	ldr	r3, [r3, #0]
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	20000150 	.word	0x20000150

08000c44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	f003 0307 	and.w	r3, r3, #7
 8000c52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c54:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <__NVIC_SetPriorityGrouping+0x40>)
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c5a:	68ba      	ldr	r2, [r7, #8]
 8000c5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c60:	4013      	ands	r3, r2
 8000c62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <__NVIC_SetPriorityGrouping+0x44>)
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c72:	4a04      	ldr	r2, [pc, #16]	; (8000c84 <__NVIC_SetPriorityGrouping+0x40>)
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	60d3      	str	r3, [r2, #12]
}
 8000c78:	bf00      	nop
 8000c7a:	3714      	adds	r7, #20
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	e000ed00 	.word	0xe000ed00
 8000c88:	05fa0000 	.word	0x05fa0000

08000c8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c90:	4b04      	ldr	r3, [pc, #16]	; (8000ca4 <__NVIC_GetPriorityGrouping+0x18>)
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	0a1b      	lsrs	r3, r3, #8
 8000c96:	f003 0307 	and.w	r3, r3, #7
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db0b      	blt.n	8000cd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	f003 021f 	and.w	r2, r3, #31
 8000cc0:	4907      	ldr	r1, [pc, #28]	; (8000ce0 <__NVIC_EnableIRQ+0x38>)
 8000cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc6:	095b      	lsrs	r3, r3, #5
 8000cc8:	2001      	movs	r0, #1
 8000cca:	fa00 f202 	lsl.w	r2, r0, r2
 8000cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cd2:	bf00      	nop
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	e000e100 	.word	0xe000e100

08000ce4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	6039      	str	r1, [r7, #0]
 8000cee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	db0a      	blt.n	8000d0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	b2da      	uxtb	r2, r3
 8000cfc:	490c      	ldr	r1, [pc, #48]	; (8000d30 <__NVIC_SetPriority+0x4c>)
 8000cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d02:	0112      	lsls	r2, r2, #4
 8000d04:	b2d2      	uxtb	r2, r2
 8000d06:	440b      	add	r3, r1
 8000d08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d0c:	e00a      	b.n	8000d24 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	b2da      	uxtb	r2, r3
 8000d12:	4908      	ldr	r1, [pc, #32]	; (8000d34 <__NVIC_SetPriority+0x50>)
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	f003 030f 	and.w	r3, r3, #15
 8000d1a:	3b04      	subs	r3, #4
 8000d1c:	0112      	lsls	r2, r2, #4
 8000d1e:	b2d2      	uxtb	r2, r2
 8000d20:	440b      	add	r3, r1
 8000d22:	761a      	strb	r2, [r3, #24]
}
 8000d24:	bf00      	nop
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	e000e100 	.word	0xe000e100
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b089      	sub	sp, #36	; 0x24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	f003 0307 	and.w	r3, r3, #7
 8000d4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	f1c3 0307 	rsb	r3, r3, #7
 8000d52:	2b04      	cmp	r3, #4
 8000d54:	bf28      	it	cs
 8000d56:	2304      	movcs	r3, #4
 8000d58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	3304      	adds	r3, #4
 8000d5e:	2b06      	cmp	r3, #6
 8000d60:	d902      	bls.n	8000d68 <NVIC_EncodePriority+0x30>
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	3b03      	subs	r3, #3
 8000d66:	e000      	b.n	8000d6a <NVIC_EncodePriority+0x32>
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d70:	69bb      	ldr	r3, [r7, #24]
 8000d72:	fa02 f303 	lsl.w	r3, r2, r3
 8000d76:	43da      	mvns	r2, r3
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	401a      	ands	r2, r3
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d80:	f04f 31ff 	mov.w	r1, #4294967295
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8a:	43d9      	mvns	r1, r3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d90:	4313      	orrs	r3, r2
         );
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3724      	adds	r7, #36	; 0x24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
	...

08000da0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	3b01      	subs	r3, #1
 8000dac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000db0:	d301      	bcc.n	8000db6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000db2:	2301      	movs	r3, #1
 8000db4:	e00f      	b.n	8000dd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000db6:	4a0a      	ldr	r2, [pc, #40]	; (8000de0 <SysTick_Config+0x40>)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	3b01      	subs	r3, #1
 8000dbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dbe:	210f      	movs	r1, #15
 8000dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc4:	f7ff ff8e 	bl	8000ce4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dc8:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <SysTick_Config+0x40>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dce:	4b04      	ldr	r3, [pc, #16]	; (8000de0 <SysTick_Config+0x40>)
 8000dd0:	2207      	movs	r2, #7
 8000dd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dd4:	2300      	movs	r3, #0
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	e000e010 	.word	0xe000e010

08000de4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2b07      	cmp	r3, #7
 8000df0:	d00f      	beq.n	8000e12 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2b06      	cmp	r3, #6
 8000df6:	d00c      	beq.n	8000e12 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2b05      	cmp	r3, #5
 8000dfc:	d009      	beq.n	8000e12 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2b04      	cmp	r3, #4
 8000e02:	d006      	beq.n	8000e12 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2b03      	cmp	r3, #3
 8000e08:	d003      	beq.n	8000e12 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000e0a:	2191      	movs	r1, #145	; 0x91
 8000e0c:	4804      	ldr	r0, [pc, #16]	; (8000e20 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8000e0e:	f7ff fd04 	bl	800081a <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f7ff ff16 	bl	8000c44 <__NVIC_SetPriorityGrouping>
}
 8000e18:	bf00      	nop
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	0800545c 	.word	0x0800545c

08000e24 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
 8000e30:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e32:	2300      	movs	r3, #0
 8000e34:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2b0f      	cmp	r3, #15
 8000e3a:	d903      	bls.n	8000e44 <HAL_NVIC_SetPriority+0x20>
 8000e3c:	21a9      	movs	r1, #169	; 0xa9
 8000e3e:	480e      	ldr	r0, [pc, #56]	; (8000e78 <HAL_NVIC_SetPriority+0x54>)
 8000e40:	f7ff fceb 	bl	800081a <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	2b0f      	cmp	r3, #15
 8000e48:	d903      	bls.n	8000e52 <HAL_NVIC_SetPriority+0x2e>
 8000e4a:	21aa      	movs	r1, #170	; 0xaa
 8000e4c:	480a      	ldr	r0, [pc, #40]	; (8000e78 <HAL_NVIC_SetPriority+0x54>)
 8000e4e:	f7ff fce4 	bl	800081a <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e52:	f7ff ff1b 	bl	8000c8c <__NVIC_GetPriorityGrouping>
 8000e56:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e58:	687a      	ldr	r2, [r7, #4]
 8000e5a:	68b9      	ldr	r1, [r7, #8]
 8000e5c:	6978      	ldr	r0, [r7, #20]
 8000e5e:	f7ff ff6b 	bl	8000d38 <NVIC_EncodePriority>
 8000e62:	4602      	mov	r2, r0
 8000e64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e68:	4611      	mov	r1, r2
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff ff3a 	bl	8000ce4 <__NVIC_SetPriority>
}
 8000e70:	bf00      	nop
 8000e72:	3718      	adds	r7, #24
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	0800545c 	.word	0x0800545c

08000e7c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	da03      	bge.n	8000e96 <HAL_NVIC_EnableIRQ+0x1a>
 8000e8e:	21bd      	movs	r1, #189	; 0xbd
 8000e90:	4805      	ldr	r0, [pc, #20]	; (8000ea8 <HAL_NVIC_EnableIRQ+0x2c>)
 8000e92:	f7ff fcc2 	bl	800081a <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff ff04 	bl	8000ca8 <__NVIC_EnableIRQ>
}
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	0800545c 	.word	0x0800545c

08000eac <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f7ff ff73 	bl	8000da0 <SysTick_Config>
 8000eba:	4603      	mov	r3, r0
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ed0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000ed2:	f7ff feab 	bl	8000c2c <HAL_GetTick>
 8000ed6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	2b02      	cmp	r3, #2
 8000ee2:	d008      	beq.n	8000ef6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2280      	movs	r2, #128	; 0x80
 8000ee8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2200      	movs	r2, #0
 8000eee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e052      	b.n	8000f9c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f022 0216 	bic.w	r2, r2, #22
 8000f04:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	695a      	ldr	r2, [r3, #20]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f14:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d103      	bne.n	8000f26 <HAL_DMA_Abort+0x62>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d007      	beq.n	8000f36 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f022 0208 	bic.w	r2, r2, #8
 8000f34:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f022 0201 	bic.w	r2, r2, #1
 8000f44:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f46:	e013      	b.n	8000f70 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f48:	f7ff fe70 	bl	8000c2c <HAL_GetTick>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	2b05      	cmp	r3, #5
 8000f54:	d90c      	bls.n	8000f70 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2220      	movs	r2, #32
 8000f5a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2203      	movs	r2, #3
 8000f60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2200      	movs	r2, #0
 8000f68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	e015      	b.n	8000f9c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d1e4      	bne.n	8000f48 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f82:	223f      	movs	r2, #63	; 0x3f
 8000f84:	409a      	lsls	r2, r3
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2200      	movs	r2, #0
 8000f96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8000f9a:	2300      	movs	r3, #0
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3710      	adds	r7, #16
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	d004      	beq.n	8000fc2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2280      	movs	r2, #128	; 0x80
 8000fbc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e00c      	b.n	8000fdc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2205      	movs	r2, #5
 8000fc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f022 0201 	bic.w	r2, r2, #1
 8000fd8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000fda:	2300      	movs	r3, #0
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b088      	sub	sp, #32
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a3a      	ldr	r2, [pc, #232]	; (80010f0 <HAL_GPIO_Init+0x108>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d02b      	beq.n	8001062 <HAL_GPIO_Init+0x7a>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a39      	ldr	r2, [pc, #228]	; (80010f4 <HAL_GPIO_Init+0x10c>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d027      	beq.n	8001062 <HAL_GPIO_Init+0x7a>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a38      	ldr	r2, [pc, #224]	; (80010f8 <HAL_GPIO_Init+0x110>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d023      	beq.n	8001062 <HAL_GPIO_Init+0x7a>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a37      	ldr	r2, [pc, #220]	; (80010fc <HAL_GPIO_Init+0x114>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d01f      	beq.n	8001062 <HAL_GPIO_Init+0x7a>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a36      	ldr	r2, [pc, #216]	; (8001100 <HAL_GPIO_Init+0x118>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d01b      	beq.n	8001062 <HAL_GPIO_Init+0x7a>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a35      	ldr	r2, [pc, #212]	; (8001104 <HAL_GPIO_Init+0x11c>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d017      	beq.n	8001062 <HAL_GPIO_Init+0x7a>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a34      	ldr	r2, [pc, #208]	; (8001108 <HAL_GPIO_Init+0x120>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d013      	beq.n	8001062 <HAL_GPIO_Init+0x7a>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a33      	ldr	r2, [pc, #204]	; (800110c <HAL_GPIO_Init+0x124>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d00f      	beq.n	8001062 <HAL_GPIO_Init+0x7a>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a32      	ldr	r2, [pc, #200]	; (8001110 <HAL_GPIO_Init+0x128>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d00b      	beq.n	8001062 <HAL_GPIO_Init+0x7a>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a31      	ldr	r2, [pc, #196]	; (8001114 <HAL_GPIO_Init+0x12c>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d007      	beq.n	8001062 <HAL_GPIO_Init+0x7a>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a30      	ldr	r2, [pc, #192]	; (8001118 <HAL_GPIO_Init+0x130>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d003      	beq.n	8001062 <HAL_GPIO_Init+0x7a>
 800105a:	21aa      	movs	r1, #170	; 0xaa
 800105c:	482f      	ldr	r0, [pc, #188]	; (800111c <HAL_GPIO_Init+0x134>)
 800105e:	f7ff fbdc 	bl	800081a <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	b29b      	uxth	r3, r3
 8001068:	2b00      	cmp	r3, #0
 800106a:	d103      	bne.n	8001074 <HAL_GPIO_Init+0x8c>
 800106c:	21ab      	movs	r1, #171	; 0xab
 800106e:	482b      	ldr	r0, [pc, #172]	; (800111c <HAL_GPIO_Init+0x134>)
 8001070:	f7ff fbd3 	bl	800081a <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d035      	beq.n	80010e8 <HAL_GPIO_Init+0x100>
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d031      	beq.n	80010e8 <HAL_GPIO_Init+0x100>
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	2b11      	cmp	r3, #17
 800108a:	d02d      	beq.n	80010e8 <HAL_GPIO_Init+0x100>
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	2b02      	cmp	r3, #2
 8001092:	d029      	beq.n	80010e8 <HAL_GPIO_Init+0x100>
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	2b12      	cmp	r3, #18
 800109a:	d025      	beq.n	80010e8 <HAL_GPIO_Init+0x100>
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 80010a4:	d020      	beq.n	80010e8 <HAL_GPIO_Init+0x100>
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80010ae:	d01b      	beq.n	80010e8 <HAL_GPIO_Init+0x100>
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 80010b8:	d016      	beq.n	80010e8 <HAL_GPIO_Init+0x100>
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 80010c2:	d011      	beq.n	80010e8 <HAL_GPIO_Init+0x100>
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 80010cc:	d00c      	beq.n	80010e8 <HAL_GPIO_Init+0x100>
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 80010d6:	d007      	beq.n	80010e8 <HAL_GPIO_Init+0x100>
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	2b03      	cmp	r3, #3
 80010de:	d003      	beq.n	80010e8 <HAL_GPIO_Init+0x100>
 80010e0:	21ac      	movs	r1, #172	; 0xac
 80010e2:	480e      	ldr	r0, [pc, #56]	; (800111c <HAL_GPIO_Init+0x134>)
 80010e4:	f7ff fb99 	bl	800081a <assert_failed>

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80010e8:	2300      	movs	r3, #0
 80010ea:	61fb      	str	r3, [r7, #28]
 80010ec:	e2c7      	b.n	800167e <HAL_GPIO_Init+0x696>
 80010ee:	bf00      	nop
 80010f0:	40020000 	.word	0x40020000
 80010f4:	40020400 	.word	0x40020400
 80010f8:	40020800 	.word	0x40020800
 80010fc:	40020c00 	.word	0x40020c00
 8001100:	40021000 	.word	0x40021000
 8001104:	40021400 	.word	0x40021400
 8001108:	40021800 	.word	0x40021800
 800110c:	40021c00 	.word	0x40021c00
 8001110:	40022000 	.word	0x40022000
 8001114:	40022400 	.word	0x40022400
 8001118:	40022800 	.word	0x40022800
 800111c:	08005498 	.word	0x08005498
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001120:	2201      	movs	r2, #1
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	697a      	ldr	r2, [r7, #20]
 8001130:	4013      	ands	r3, r2
 8001132:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	429a      	cmp	r2, r3
 800113a:	f040 829d 	bne.w	8001678 <HAL_GPIO_Init+0x690>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f003 0303 	and.w	r3, r3, #3
 8001146:	2b01      	cmp	r3, #1
 8001148:	d005      	beq.n	8001156 <HAL_GPIO_Init+0x16e>
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f003 0303 	and.w	r3, r3, #3
 8001152:	2b02      	cmp	r3, #2
 8001154:	d144      	bne.n	80011e0 <HAL_GPIO_Init+0x1f8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	68db      	ldr	r3, [r3, #12]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d00f      	beq.n	800117e <HAL_GPIO_Init+0x196>
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	68db      	ldr	r3, [r3, #12]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d00b      	beq.n	800117e <HAL_GPIO_Init+0x196>
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	68db      	ldr	r3, [r3, #12]
 800116a:	2b02      	cmp	r3, #2
 800116c:	d007      	beq.n	800117e <HAL_GPIO_Init+0x196>
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	68db      	ldr	r3, [r3, #12]
 8001172:	2b03      	cmp	r3, #3
 8001174:	d003      	beq.n	800117e <HAL_GPIO_Init+0x196>
 8001176:	21bd      	movs	r1, #189	; 0xbd
 8001178:	4831      	ldr	r0, [pc, #196]	; (8001240 <HAL_GPIO_Init+0x258>)
 800117a:	f7ff fb4e 	bl	800081a <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	2203      	movs	r2, #3
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43db      	mvns	r3, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4013      	ands	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	68da      	ldr	r2, [r3, #12]
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011b4:	2201      	movs	r2, #1
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4013      	ands	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	091b      	lsrs	r3, r3, #4
 80011ca:	f003 0201 	and.w	r2, r3, #1
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f003 0303 	and.w	r3, r3, #3
 80011e8:	2b03      	cmp	r3, #3
 80011ea:	d02b      	beq.n	8001244 <HAL_GPIO_Init+0x25c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d00b      	beq.n	800120c <HAL_GPIO_Init+0x224>
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d007      	beq.n	800120c <HAL_GPIO_Init+0x224>
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	2b02      	cmp	r3, #2
 8001202:	d003      	beq.n	800120c <HAL_GPIO_Init+0x224>
 8001204:	21ce      	movs	r1, #206	; 0xce
 8001206:	480e      	ldr	r0, [pc, #56]	; (8001240 <HAL_GPIO_Init+0x258>)
 8001208:	f7ff fb07 	bl	800081a <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	2203      	movs	r2, #3
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	43db      	mvns	r3, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4013      	ands	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	689a      	ldr	r2, [r3, #8]
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	4313      	orrs	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	60da      	str	r2, [r3, #12]
 800123c:	e002      	b.n	8001244 <HAL_GPIO_Init+0x25c>
 800123e:	bf00      	nop
 8001240:	08005498 	.word	0x08005498
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f003 0303 	and.w	r3, r3, #3
 800124c:	2b02      	cmp	r3, #2
 800124e:	f040 8134 	bne.w	80014ba <HAL_GPIO_Init+0x4d2>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	691b      	ldr	r3, [r3, #16]
 8001256:	2b00      	cmp	r3, #0
 8001258:	f000 810b 	beq.w	8001472 <HAL_GPIO_Init+0x48a>
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	691b      	ldr	r3, [r3, #16]
 8001260:	2b01      	cmp	r3, #1
 8001262:	f000 8106 	beq.w	8001472 <HAL_GPIO_Init+0x48a>
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	691b      	ldr	r3, [r3, #16]
 800126a:	2b00      	cmp	r3, #0
 800126c:	f000 8101 	beq.w	8001472 <HAL_GPIO_Init+0x48a>
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	691b      	ldr	r3, [r3, #16]
 8001274:	2b00      	cmp	r3, #0
 8001276:	f000 80fc 	beq.w	8001472 <HAL_GPIO_Init+0x48a>
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	691b      	ldr	r3, [r3, #16]
 800127e:	2b00      	cmp	r3, #0
 8001280:	f000 80f7 	beq.w	8001472 <HAL_GPIO_Init+0x48a>
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	691b      	ldr	r3, [r3, #16]
 8001288:	2b01      	cmp	r3, #1
 800128a:	f000 80f2 	beq.w	8001472 <HAL_GPIO_Init+0x48a>
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	691b      	ldr	r3, [r3, #16]
 8001292:	2b02      	cmp	r3, #2
 8001294:	f000 80ed 	beq.w	8001472 <HAL_GPIO_Init+0x48a>
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	691b      	ldr	r3, [r3, #16]
 800129c:	2b02      	cmp	r3, #2
 800129e:	f000 80e8 	beq.w	8001472 <HAL_GPIO_Init+0x48a>
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	691b      	ldr	r3, [r3, #16]
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	f000 80e3 	beq.w	8001472 <HAL_GPIO_Init+0x48a>
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	691b      	ldr	r3, [r3, #16]
 80012b0:	2b03      	cmp	r3, #3
 80012b2:	f000 80de 	beq.w	8001472 <HAL_GPIO_Init+0x48a>
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	691b      	ldr	r3, [r3, #16]
 80012ba:	2b03      	cmp	r3, #3
 80012bc:	f000 80d9 	beq.w	8001472 <HAL_GPIO_Init+0x48a>
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	691b      	ldr	r3, [r3, #16]
 80012c4:	2b03      	cmp	r3, #3
 80012c6:	f000 80d4 	beq.w	8001472 <HAL_GPIO_Init+0x48a>
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	691b      	ldr	r3, [r3, #16]
 80012ce:	2b03      	cmp	r3, #3
 80012d0:	f000 80cf 	beq.w	8001472 <HAL_GPIO_Init+0x48a>
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	691b      	ldr	r3, [r3, #16]
 80012d8:	2b03      	cmp	r3, #3
 80012da:	f000 80ca 	beq.w	8001472 <HAL_GPIO_Init+0x48a>
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	691b      	ldr	r3, [r3, #16]
 80012e2:	2b03      	cmp	r3, #3
 80012e4:	f000 80c5 	beq.w	8001472 <HAL_GPIO_Init+0x48a>
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	691b      	ldr	r3, [r3, #16]
 80012ec:	2b04      	cmp	r3, #4
 80012ee:	f000 80c0 	beq.w	8001472 <HAL_GPIO_Init+0x48a>
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	691b      	ldr	r3, [r3, #16]
 80012f6:	2b04      	cmp	r3, #4
 80012f8:	f000 80bb 	beq.w	8001472 <HAL_GPIO_Init+0x48a>
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	691b      	ldr	r3, [r3, #16]
 8001300:	2b04      	cmp	r3, #4
 8001302:	f000 80b6 	beq.w	8001472 <HAL_GPIO_Init+0x48a>
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	691b      	ldr	r3, [r3, #16]
 800130a:	2b04      	cmp	r3, #4
 800130c:	f000 80b1 	beq.w	8001472 <HAL_GPIO_Init+0x48a>
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	691b      	ldr	r3, [r3, #16]
 8001314:	2b04      	cmp	r3, #4
 8001316:	f000 80ac 	beq.w	8001472 <HAL_GPIO_Init+0x48a>
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	691b      	ldr	r3, [r3, #16]
 800131e:	2b05      	cmp	r3, #5
 8001320:	f000 80a7 	beq.w	8001472 <HAL_GPIO_Init+0x48a>
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	691b      	ldr	r3, [r3, #16]
 8001328:	2b05      	cmp	r3, #5
 800132a:	f000 80a2 	beq.w	8001472 <HAL_GPIO_Init+0x48a>
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	691b      	ldr	r3, [r3, #16]
 8001332:	2b05      	cmp	r3, #5
 8001334:	f000 809d 	beq.w	8001472 <HAL_GPIO_Init+0x48a>
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	691b      	ldr	r3, [r3, #16]
 800133c:	2b05      	cmp	r3, #5
 800133e:	f000 8098 	beq.w	8001472 <HAL_GPIO_Init+0x48a>
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	691b      	ldr	r3, [r3, #16]
 8001346:	2b05      	cmp	r3, #5
 8001348:	f000 8093 	beq.w	8001472 <HAL_GPIO_Init+0x48a>
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	691b      	ldr	r3, [r3, #16]
 8001350:	2b05      	cmp	r3, #5
 8001352:	f000 808e 	beq.w	8001472 <HAL_GPIO_Init+0x48a>
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	691b      	ldr	r3, [r3, #16]
 800135a:	2b06      	cmp	r3, #6
 800135c:	f000 8089 	beq.w	8001472 <HAL_GPIO_Init+0x48a>
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	691b      	ldr	r3, [r3, #16]
 8001364:	2b06      	cmp	r3, #6
 8001366:	f000 8084 	beq.w	8001472 <HAL_GPIO_Init+0x48a>
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	691b      	ldr	r3, [r3, #16]
 800136e:	2b07      	cmp	r3, #7
 8001370:	d07f      	beq.n	8001472 <HAL_GPIO_Init+0x48a>
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	691b      	ldr	r3, [r3, #16]
 8001376:	2b07      	cmp	r3, #7
 8001378:	d07b      	beq.n	8001472 <HAL_GPIO_Init+0x48a>
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	691b      	ldr	r3, [r3, #16]
 800137e:	2b07      	cmp	r3, #7
 8001380:	d077      	beq.n	8001472 <HAL_GPIO_Init+0x48a>
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	691b      	ldr	r3, [r3, #16]
 8001386:	2b07      	cmp	r3, #7
 8001388:	d073      	beq.n	8001472 <HAL_GPIO_Init+0x48a>
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	691b      	ldr	r3, [r3, #16]
 800138e:	2b07      	cmp	r3, #7
 8001390:	d06f      	beq.n	8001472 <HAL_GPIO_Init+0x48a>
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	691b      	ldr	r3, [r3, #16]
 8001396:	2b07      	cmp	r3, #7
 8001398:	d06b      	beq.n	8001472 <HAL_GPIO_Init+0x48a>
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	691b      	ldr	r3, [r3, #16]
 800139e:	2b07      	cmp	r3, #7
 80013a0:	d067      	beq.n	8001472 <HAL_GPIO_Init+0x48a>
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	691b      	ldr	r3, [r3, #16]
 80013a6:	2b08      	cmp	r3, #8
 80013a8:	d063      	beq.n	8001472 <HAL_GPIO_Init+0x48a>
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	691b      	ldr	r3, [r3, #16]
 80013ae:	2b08      	cmp	r3, #8
 80013b0:	d05f      	beq.n	8001472 <HAL_GPIO_Init+0x48a>
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	691b      	ldr	r3, [r3, #16]
 80013b6:	2b08      	cmp	r3, #8
 80013b8:	d05b      	beq.n	8001472 <HAL_GPIO_Init+0x48a>
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	691b      	ldr	r3, [r3, #16]
 80013be:	2b08      	cmp	r3, #8
 80013c0:	d057      	beq.n	8001472 <HAL_GPIO_Init+0x48a>
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	691b      	ldr	r3, [r3, #16]
 80013c6:	2b08      	cmp	r3, #8
 80013c8:	d053      	beq.n	8001472 <HAL_GPIO_Init+0x48a>
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	691b      	ldr	r3, [r3, #16]
 80013ce:	2b08      	cmp	r3, #8
 80013d0:	d04f      	beq.n	8001472 <HAL_GPIO_Init+0x48a>
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	691b      	ldr	r3, [r3, #16]
 80013d6:	2b08      	cmp	r3, #8
 80013d8:	d04b      	beq.n	8001472 <HAL_GPIO_Init+0x48a>
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	691b      	ldr	r3, [r3, #16]
 80013de:	2b09      	cmp	r3, #9
 80013e0:	d047      	beq.n	8001472 <HAL_GPIO_Init+0x48a>
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	691b      	ldr	r3, [r3, #16]
 80013e6:	2b09      	cmp	r3, #9
 80013e8:	d043      	beq.n	8001472 <HAL_GPIO_Init+0x48a>
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	691b      	ldr	r3, [r3, #16]
 80013ee:	2b09      	cmp	r3, #9
 80013f0:	d03f      	beq.n	8001472 <HAL_GPIO_Init+0x48a>
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	691b      	ldr	r3, [r3, #16]
 80013f6:	2b09      	cmp	r3, #9
 80013f8:	d03b      	beq.n	8001472 <HAL_GPIO_Init+0x48a>
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	691b      	ldr	r3, [r3, #16]
 80013fe:	2b09      	cmp	r3, #9
 8001400:	d037      	beq.n	8001472 <HAL_GPIO_Init+0x48a>
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	691b      	ldr	r3, [r3, #16]
 8001406:	2b09      	cmp	r3, #9
 8001408:	d033      	beq.n	8001472 <HAL_GPIO_Init+0x48a>
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	691b      	ldr	r3, [r3, #16]
 800140e:	2b09      	cmp	r3, #9
 8001410:	d02f      	beq.n	8001472 <HAL_GPIO_Init+0x48a>
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	691b      	ldr	r3, [r3, #16]
 8001416:	2b0a      	cmp	r3, #10
 8001418:	d02b      	beq.n	8001472 <HAL_GPIO_Init+0x48a>
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	691b      	ldr	r3, [r3, #16]
 800141e:	2b0a      	cmp	r3, #10
 8001420:	d027      	beq.n	8001472 <HAL_GPIO_Init+0x48a>
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	691b      	ldr	r3, [r3, #16]
 8001426:	2b0a      	cmp	r3, #10
 8001428:	d023      	beq.n	8001472 <HAL_GPIO_Init+0x48a>
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	691b      	ldr	r3, [r3, #16]
 800142e:	2b0a      	cmp	r3, #10
 8001430:	d01f      	beq.n	8001472 <HAL_GPIO_Init+0x48a>
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	691b      	ldr	r3, [r3, #16]
 8001436:	2b0b      	cmp	r3, #11
 8001438:	d01b      	beq.n	8001472 <HAL_GPIO_Init+0x48a>
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	691b      	ldr	r3, [r3, #16]
 800143e:	2b0c      	cmp	r3, #12
 8001440:	d017      	beq.n	8001472 <HAL_GPIO_Init+0x48a>
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	691b      	ldr	r3, [r3, #16]
 8001446:	2b0c      	cmp	r3, #12
 8001448:	d013      	beq.n	8001472 <HAL_GPIO_Init+0x48a>
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	691b      	ldr	r3, [r3, #16]
 800144e:	2b0c      	cmp	r3, #12
 8001450:	d00f      	beq.n	8001472 <HAL_GPIO_Init+0x48a>
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	691b      	ldr	r3, [r3, #16]
 8001456:	2b0f      	cmp	r3, #15
 8001458:	d00b      	beq.n	8001472 <HAL_GPIO_Init+0x48a>
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	691b      	ldr	r3, [r3, #16]
 800145e:	2b0d      	cmp	r3, #13
 8001460:	d007      	beq.n	8001472 <HAL_GPIO_Init+0x48a>
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	691b      	ldr	r3, [r3, #16]
 8001466:	2b0e      	cmp	r3, #14
 8001468:	d003      	beq.n	8001472 <HAL_GPIO_Init+0x48a>
 800146a:	21db      	movs	r1, #219	; 0xdb
 800146c:	4888      	ldr	r0, [pc, #544]	; (8001690 <HAL_GPIO_Init+0x6a8>)
 800146e:	f7ff f9d4 	bl	800081a <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	08da      	lsrs	r2, r3, #3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	3208      	adds	r2, #8
 800147a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800147e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	f003 0307 	and.w	r3, r3, #7
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	220f      	movs	r2, #15
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	43db      	mvns	r3, r3
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	4013      	ands	r3, r2
 8001494:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	691a      	ldr	r2, [r3, #16]
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	f003 0307 	and.w	r3, r3, #7
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	08da      	lsrs	r2, r3, #3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	3208      	adds	r2, #8
 80014b4:	69b9      	ldr	r1, [r7, #24]
 80014b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	2203      	movs	r2, #3
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	43db      	mvns	r3, r3
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	4013      	ands	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f003 0203 	and.w	r2, r3, #3
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	f000 80be 	beq.w	8001678 <HAL_GPIO_Init+0x690>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014fc:	4b65      	ldr	r3, [pc, #404]	; (8001694 <HAL_GPIO_Init+0x6ac>)
 80014fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001500:	4a64      	ldr	r2, [pc, #400]	; (8001694 <HAL_GPIO_Init+0x6ac>)
 8001502:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001506:	6453      	str	r3, [r2, #68]	; 0x44
 8001508:	4b62      	ldr	r3, [pc, #392]	; (8001694 <HAL_GPIO_Init+0x6ac>)
 800150a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001514:	4a60      	ldr	r2, [pc, #384]	; (8001698 <HAL_GPIO_Init+0x6b0>)
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	089b      	lsrs	r3, r3, #2
 800151a:	3302      	adds	r3, #2
 800151c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001520:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	f003 0303 	and.w	r3, r3, #3
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	220f      	movs	r2, #15
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	43db      	mvns	r3, r3
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	4013      	ands	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4a58      	ldr	r2, [pc, #352]	; (800169c <HAL_GPIO_Init+0x6b4>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d037      	beq.n	80015b0 <HAL_GPIO_Init+0x5c8>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4a57      	ldr	r2, [pc, #348]	; (80016a0 <HAL_GPIO_Init+0x6b8>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d031      	beq.n	80015ac <HAL_GPIO_Init+0x5c4>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4a56      	ldr	r2, [pc, #344]	; (80016a4 <HAL_GPIO_Init+0x6bc>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d02b      	beq.n	80015a8 <HAL_GPIO_Init+0x5c0>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4a55      	ldr	r2, [pc, #340]	; (80016a8 <HAL_GPIO_Init+0x6c0>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d025      	beq.n	80015a4 <HAL_GPIO_Init+0x5bc>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4a54      	ldr	r2, [pc, #336]	; (80016ac <HAL_GPIO_Init+0x6c4>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d01f      	beq.n	80015a0 <HAL_GPIO_Init+0x5b8>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	4a53      	ldr	r2, [pc, #332]	; (80016b0 <HAL_GPIO_Init+0x6c8>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d019      	beq.n	800159c <HAL_GPIO_Init+0x5b4>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4a52      	ldr	r2, [pc, #328]	; (80016b4 <HAL_GPIO_Init+0x6cc>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d013      	beq.n	8001598 <HAL_GPIO_Init+0x5b0>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4a51      	ldr	r2, [pc, #324]	; (80016b8 <HAL_GPIO_Init+0x6d0>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d00d      	beq.n	8001594 <HAL_GPIO_Init+0x5ac>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4a50      	ldr	r2, [pc, #320]	; (80016bc <HAL_GPIO_Init+0x6d4>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d007      	beq.n	8001590 <HAL_GPIO_Init+0x5a8>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4a4f      	ldr	r2, [pc, #316]	; (80016c0 <HAL_GPIO_Init+0x6d8>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d101      	bne.n	800158c <HAL_GPIO_Init+0x5a4>
 8001588:	2309      	movs	r3, #9
 800158a:	e012      	b.n	80015b2 <HAL_GPIO_Init+0x5ca>
 800158c:	230a      	movs	r3, #10
 800158e:	e010      	b.n	80015b2 <HAL_GPIO_Init+0x5ca>
 8001590:	2308      	movs	r3, #8
 8001592:	e00e      	b.n	80015b2 <HAL_GPIO_Init+0x5ca>
 8001594:	2307      	movs	r3, #7
 8001596:	e00c      	b.n	80015b2 <HAL_GPIO_Init+0x5ca>
 8001598:	2306      	movs	r3, #6
 800159a:	e00a      	b.n	80015b2 <HAL_GPIO_Init+0x5ca>
 800159c:	2305      	movs	r3, #5
 800159e:	e008      	b.n	80015b2 <HAL_GPIO_Init+0x5ca>
 80015a0:	2304      	movs	r3, #4
 80015a2:	e006      	b.n	80015b2 <HAL_GPIO_Init+0x5ca>
 80015a4:	2303      	movs	r3, #3
 80015a6:	e004      	b.n	80015b2 <HAL_GPIO_Init+0x5ca>
 80015a8:	2302      	movs	r3, #2
 80015aa:	e002      	b.n	80015b2 <HAL_GPIO_Init+0x5ca>
 80015ac:	2301      	movs	r3, #1
 80015ae:	e000      	b.n	80015b2 <HAL_GPIO_Init+0x5ca>
 80015b0:	2300      	movs	r3, #0
 80015b2:	69fa      	ldr	r2, [r7, #28]
 80015b4:	f002 0203 	and.w	r2, r2, #3
 80015b8:	0092      	lsls	r2, r2, #2
 80015ba:	4093      	lsls	r3, r2
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	4313      	orrs	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80015c2:	4935      	ldr	r1, [pc, #212]	; (8001698 <HAL_GPIO_Init+0x6b0>)
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	089b      	lsrs	r3, r3, #2
 80015c8:	3302      	adds	r3, #2
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015d0:	4b3c      	ldr	r3, [pc, #240]	; (80016c4 <HAL_GPIO_Init+0x6dc>)
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	43db      	mvns	r3, r3
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	4013      	ands	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d003      	beq.n	80015f4 <HAL_GPIO_Init+0x60c>
        {
          temp |= iocurrent;
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015f4:	4a33      	ldr	r2, [pc, #204]	; (80016c4 <HAL_GPIO_Init+0x6dc>)
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015fa:	4b32      	ldr	r3, [pc, #200]	; (80016c4 <HAL_GPIO_Init+0x6dc>)
 80015fc:	68db      	ldr	r3, [r3, #12]
 80015fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	43db      	mvns	r3, r3
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	4013      	ands	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d003      	beq.n	800161e <HAL_GPIO_Init+0x636>
        {
          temp |= iocurrent;
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	4313      	orrs	r3, r2
 800161c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800161e:	4a29      	ldr	r2, [pc, #164]	; (80016c4 <HAL_GPIO_Init+0x6dc>)
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001624:	4b27      	ldr	r3, [pc, #156]	; (80016c4 <HAL_GPIO_Init+0x6dc>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	43db      	mvns	r3, r3
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	4013      	ands	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d003      	beq.n	8001648 <HAL_GPIO_Init+0x660>
        {
          temp |= iocurrent;
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	4313      	orrs	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001648:	4a1e      	ldr	r2, [pc, #120]	; (80016c4 <HAL_GPIO_Init+0x6dc>)
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800164e:	4b1d      	ldr	r3, [pc, #116]	; (80016c4 <HAL_GPIO_Init+0x6dc>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	43db      	mvns	r3, r3
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4013      	ands	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d003      	beq.n	8001672 <HAL_GPIO_Init+0x68a>
        {
          temp |= iocurrent;
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	4313      	orrs	r3, r2
 8001670:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001672:	4a14      	ldr	r2, [pc, #80]	; (80016c4 <HAL_GPIO_Init+0x6dc>)
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	3301      	adds	r3, #1
 800167c:	61fb      	str	r3, [r7, #28]
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	2b0f      	cmp	r3, #15
 8001682:	f67f ad4d 	bls.w	8001120 <HAL_GPIO_Init+0x138>
      }
    }
  }
}
 8001686:	bf00      	nop
 8001688:	bf00      	nop
 800168a:	3720      	adds	r7, #32
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	08005498 	.word	0x08005498
 8001694:	40023800 	.word	0x40023800
 8001698:	40013800 	.word	0x40013800
 800169c:	40020000 	.word	0x40020000
 80016a0:	40020400 	.word	0x40020400
 80016a4:	40020800 	.word	0x40020800
 80016a8:	40020c00 	.word	0x40020c00
 80016ac:	40021000 	.word	0x40021000
 80016b0:	40021400 	.word	0x40021400
 80016b4:	40021800 	.word	0x40021800
 80016b8:	40021c00 	.word	0x40021c00
 80016bc:	40022000 	.word	0x40022000
 80016c0:	40022400 	.word	0x40022400
 80016c4:	40013c00 	.word	0x40013c00

080016c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	460b      	mov	r3, r1
 80016d2:	807b      	strh	r3, [r7, #2]
 80016d4:	4613      	mov	r3, r2
 80016d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80016d8:	887b      	ldrh	r3, [r7, #2]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d104      	bne.n	80016e8 <HAL_GPIO_WritePin+0x20>
 80016de:	f240 1197 	movw	r1, #407	; 0x197
 80016e2:	480e      	ldr	r0, [pc, #56]	; (800171c <HAL_GPIO_WritePin+0x54>)
 80016e4:	f7ff f899 	bl	800081a <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80016e8:	787b      	ldrb	r3, [r7, #1]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d007      	beq.n	80016fe <HAL_GPIO_WritePin+0x36>
 80016ee:	787b      	ldrb	r3, [r7, #1]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d004      	beq.n	80016fe <HAL_GPIO_WritePin+0x36>
 80016f4:	f44f 71cc 	mov.w	r1, #408	; 0x198
 80016f8:	4808      	ldr	r0, [pc, #32]	; (800171c <HAL_GPIO_WritePin+0x54>)
 80016fa:	f7ff f88e 	bl	800081a <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80016fe:	787b      	ldrb	r3, [r7, #1]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d003      	beq.n	800170c <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001704:	887a      	ldrh	r2, [r7, #2]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800170a:	e003      	b.n	8001714 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800170c:	887b      	ldrh	r3, [r7, #2]
 800170e:	041a      	lsls	r2, r3, #16
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	619a      	str	r2, [r3, #24]
}
 8001714:	bf00      	nop
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	08005498 	.word	0x08005498

08001720 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d101      	bne.n	8001732 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e107      	b.n	8001942 <HAL_I2C_Init+0x222>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a85      	ldr	r2, [pc, #532]	; (800194c <HAL_I2C_Init+0x22c>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d013      	beq.n	8001764 <HAL_I2C_Init+0x44>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a83      	ldr	r2, [pc, #524]	; (8001950 <HAL_I2C_Init+0x230>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d00e      	beq.n	8001764 <HAL_I2C_Init+0x44>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a82      	ldr	r2, [pc, #520]	; (8001954 <HAL_I2C_Init+0x234>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d009      	beq.n	8001764 <HAL_I2C_Init+0x44>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a80      	ldr	r2, [pc, #512]	; (8001958 <HAL_I2C_Init+0x238>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d004      	beq.n	8001764 <HAL_I2C_Init+0x44>
 800175a:	f240 2119 	movw	r1, #537	; 0x219
 800175e:	487f      	ldr	r0, [pc, #508]	; (800195c <HAL_I2C_Init+0x23c>)
 8001760:	f7ff f85b 	bl	800081a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800176c:	d304      	bcc.n	8001778 <HAL_I2C_Init+0x58>
 800176e:	f240 211a 	movw	r1, #538	; 0x21a
 8001772:	487a      	ldr	r0, [pc, #488]	; (800195c <HAL_I2C_Init+0x23c>)
 8001774:	f7ff f851 	bl	800081a <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d008      	beq.n	8001792 <HAL_I2C_Init+0x72>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	2b02      	cmp	r3, #2
 8001786:	d004      	beq.n	8001792 <HAL_I2C_Init+0x72>
 8001788:	f240 211b 	movw	r1, #539	; 0x21b
 800178c:	4873      	ldr	r0, [pc, #460]	; (800195c <HAL_I2C_Init+0x23c>)
 800178e:	f7ff f844 	bl	800081a <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	691b      	ldr	r3, [r3, #16]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d009      	beq.n	80017ae <HAL_I2C_Init+0x8e>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	691b      	ldr	r3, [r3, #16]
 800179e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017a2:	d004      	beq.n	80017ae <HAL_I2C_Init+0x8e>
 80017a4:	f44f 7107 	mov.w	r1, #540	; 0x21c
 80017a8:	486c      	ldr	r0, [pc, #432]	; (800195c <HAL_I2C_Init+0x23c>)
 80017aa:	f7ff f836 	bl	800081a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	695b      	ldr	r3, [r3, #20]
 80017b2:	2bff      	cmp	r3, #255	; 0xff
 80017b4:	d904      	bls.n	80017c0 <HAL_I2C_Init+0xa0>
 80017b6:	f240 211d 	movw	r1, #541	; 0x21d
 80017ba:	4868      	ldr	r0, [pc, #416]	; (800195c <HAL_I2C_Init+0x23c>)
 80017bc:	f7ff f82d 	bl	800081a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d020      	beq.n	800180a <HAL_I2C_Init+0xea>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d01c      	beq.n	800180a <HAL_I2C_Init+0xea>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d018      	beq.n	800180a <HAL_I2C_Init+0xea>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	2b03      	cmp	r3, #3
 80017de:	d014      	beq.n	800180a <HAL_I2C_Init+0xea>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	2b04      	cmp	r3, #4
 80017e6:	d010      	beq.n	800180a <HAL_I2C_Init+0xea>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	2b05      	cmp	r3, #5
 80017ee:	d00c      	beq.n	800180a <HAL_I2C_Init+0xea>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	2b06      	cmp	r3, #6
 80017f6:	d008      	beq.n	800180a <HAL_I2C_Init+0xea>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	2b07      	cmp	r3, #7
 80017fe:	d004      	beq.n	800180a <HAL_I2C_Init+0xea>
 8001800:	f240 211e 	movw	r1, #542	; 0x21e
 8001804:	4855      	ldr	r0, [pc, #340]	; (800195c <HAL_I2C_Init+0x23c>)
 8001806:	f7ff f808 	bl	800081a <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	69db      	ldr	r3, [r3, #28]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d009      	beq.n	8001826 <HAL_I2C_Init+0x106>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	69db      	ldr	r3, [r3, #28]
 8001816:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800181a:	d004      	beq.n	8001826 <HAL_I2C_Init+0x106>
 800181c:	f240 211f 	movw	r1, #543	; 0x21f
 8001820:	484e      	ldr	r0, [pc, #312]	; (800195c <HAL_I2C_Init+0x23c>)
 8001822:	f7fe fffa 	bl	800081a <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a1b      	ldr	r3, [r3, #32]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d009      	beq.n	8001842 <HAL_I2C_Init+0x122>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6a1b      	ldr	r3, [r3, #32]
 8001832:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001836:	d004      	beq.n	8001842 <HAL_I2C_Init+0x122>
 8001838:	f44f 7108 	mov.w	r1, #544	; 0x220
 800183c:	4847      	ldr	r0, [pc, #284]	; (800195c <HAL_I2C_Init+0x23c>)
 800183e:	f7fe ffec 	bl	800081a <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001848:	b2db      	uxtb	r3, r3
 800184a:	2b00      	cmp	r3, #0
 800184c:	d106      	bne.n	800185c <HAL_I2C_Init+0x13c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f7fe feee 	bl	8000638 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2224      	movs	r2, #36	; 0x24
 8001860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f022 0201 	bic.w	r2, r2, #1
 8001872:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685a      	ldr	r2, [r3, #4]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001880:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	689a      	ldr	r2, [r3, #8]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001890:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	2b01      	cmp	r3, #1
 8001898:	d107      	bne.n	80018aa <HAL_I2C_Init+0x18a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	689a      	ldr	r2, [r3, #8]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	e006      	b.n	80018b8 <HAL_I2C_Init+0x198>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	689a      	ldr	r2, [r3, #8]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80018b6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d104      	bne.n	80018ca <HAL_I2C_Init+0x1aa>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018c8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	6859      	ldr	r1, [r3, #4]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	4b22      	ldr	r3, [pc, #136]	; (8001960 <HAL_I2C_Init+0x240>)
 80018d6:	430b      	orrs	r3, r1
 80018d8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	68da      	ldr	r2, [r3, #12]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	691a      	ldr	r2, [r3, #16]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	695b      	ldr	r3, [r3, #20]
 80018f2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	699b      	ldr	r3, [r3, #24]
 80018fa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	430a      	orrs	r2, r1
 8001902:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	69d9      	ldr	r1, [r3, #28]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a1a      	ldr	r2, [r3, #32]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	430a      	orrs	r2, r1
 8001912:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f042 0201 	orr.w	r2, r2, #1
 8001922:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2200      	movs	r2, #0
 8001928:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2220      	movs	r2, #32
 800192e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40005400 	.word	0x40005400
 8001950:	40005800 	.word	0x40005800
 8001954:	40005c00 	.word	0x40005c00
 8001958:	40006000 	.word	0x40006000
 800195c:	080054d4 	.word	0x080054d4
 8001960:	02008000 	.word	0x02008000

08001964 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a32      	ldr	r2, [pc, #200]	; (8001a3c <HAL_I2CEx_ConfigAnalogFilter+0xd8>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d012      	beq.n	800199e <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a30      	ldr	r2, [pc, #192]	; (8001a40 <HAL_I2CEx_ConfigAnalogFilter+0xdc>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d00d      	beq.n	800199e <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a2f      	ldr	r2, [pc, #188]	; (8001a44 <HAL_I2CEx_ConfigAnalogFilter+0xe0>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d008      	beq.n	800199e <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a2d      	ldr	r2, [pc, #180]	; (8001a48 <HAL_I2CEx_ConfigAnalogFilter+0xe4>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d003      	beq.n	800199e <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8001996:	215e      	movs	r1, #94	; 0x5e
 8001998:	482c      	ldr	r0, [pc, #176]	; (8001a4c <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 800199a:	f7fe ff3e 	bl	800081a <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d007      	beq.n	80019b4 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019aa:	d003      	beq.n	80019b4 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 80019ac:	215f      	movs	r1, #95	; 0x5f
 80019ae:	4827      	ldr	r0, [pc, #156]	; (8001a4c <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 80019b0:	f7fe ff33 	bl	800081a <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	2b20      	cmp	r3, #32
 80019be:	d138      	bne.n	8001a32 <HAL_I2CEx_ConfigAnalogFilter+0xce>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d101      	bne.n	80019ce <HAL_I2CEx_ConfigAnalogFilter+0x6a>
 80019ca:	2302      	movs	r3, #2
 80019cc:	e032      	b.n	8001a34 <HAL_I2CEx_ConfigAnalogFilter+0xd0>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2201      	movs	r2, #1
 80019d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2224      	movs	r2, #36	; 0x24
 80019da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f022 0201 	bic.w	r2, r2, #1
 80019ec:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80019fc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	6819      	ldr	r1, [r3, #0]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	683a      	ldr	r2, [r7, #0]
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f042 0201 	orr.w	r2, r2, #1
 8001a1c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2220      	movs	r2, #32
 8001a22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	e000      	b.n	8001a34 <HAL_I2CEx_ConfigAnalogFilter+0xd0>
  }
  else
  {
    return HAL_BUSY;
 8001a32:	2302      	movs	r3, #2
  }
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40005400 	.word	0x40005400
 8001a40:	40005800 	.word	0x40005800
 8001a44:	40005c00 	.word	0x40005c00
 8001a48:	40006000 	.word	0x40006000
 8001a4c:	0800550c 	.word	0x0800550c

08001a50 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a31      	ldr	r2, [pc, #196]	; (8001b24 <HAL_I2CEx_ConfigDigitalFilter+0xd4>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d012      	beq.n	8001a8a <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a2f      	ldr	r2, [pc, #188]	; (8001b28 <HAL_I2CEx_ConfigDigitalFilter+0xd8>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d00d      	beq.n	8001a8a <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a2e      	ldr	r2, [pc, #184]	; (8001b2c <HAL_I2CEx_ConfigDigitalFilter+0xdc>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d008      	beq.n	8001a8a <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a2c      	ldr	r2, [pc, #176]	; (8001b30 <HAL_I2CEx_ConfigDigitalFilter+0xe0>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d003      	beq.n	8001a8a <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8001a82:	218c      	movs	r1, #140	; 0x8c
 8001a84:	482b      	ldr	r0, [pc, #172]	; (8001b34 <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 8001a86:	f7fe fec8 	bl	800081a <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	2b0f      	cmp	r3, #15
 8001a8e:	d903      	bls.n	8001a98 <HAL_I2CEx_ConfigDigitalFilter+0x48>
 8001a90:	218d      	movs	r1, #141	; 0x8d
 8001a92:	4828      	ldr	r0, [pc, #160]	; (8001b34 <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 8001a94:	f7fe fec1 	bl	800081a <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	2b20      	cmp	r3, #32
 8001aa2:	d139      	bne.n	8001b18 <HAL_I2CEx_ConfigDigitalFilter+0xc8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d101      	bne.n	8001ab2 <HAL_I2CEx_ConfigDigitalFilter+0x62>
 8001aae:	2302      	movs	r3, #2
 8001ab0:	e033      	b.n	8001b1a <HAL_I2CEx_ConfigDigitalFilter+0xca>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2224      	movs	r2, #36	; 0x24
 8001abe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f022 0201 	bic.w	r2, r2, #1
 8001ad0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ae0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	021b      	lsls	r3, r3, #8
 8001ae6:	68fa      	ldr	r2, [r7, #12]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	68fa      	ldr	r2, [r7, #12]
 8001af2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f042 0201 	orr.w	r2, r2, #1
 8001b02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2220      	movs	r2, #32
 8001b08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001b14:	2300      	movs	r3, #0
 8001b16:	e000      	b.n	8001b1a <HAL_I2CEx_ConfigDigitalFilter+0xca>
  }
  else
  {
    return HAL_BUSY;
 8001b18:	2302      	movs	r3, #2
  }
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40005400 	.word	0x40005400
 8001b28:	40005800 	.word	0x40005800
 8001b2c:	40005c00 	.word	0x40005c00
 8001b30:	40006000 	.word	0x40006000
 8001b34:	0800550c 	.word	0x0800550c

08001b38 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b42:	4b23      	ldr	r3, [pc, #140]	; (8001bd0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b46:	4a22      	ldr	r2, [pc, #136]	; (8001bd0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b4e:	4b20      	ldr	r3, [pc, #128]	; (8001bd0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b56:	603b      	str	r3, [r7, #0]
 8001b58:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001b5a:	4b1e      	ldr	r3, [pc, #120]	; (8001bd4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a1d      	ldr	r2, [pc, #116]	; (8001bd4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b64:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b66:	f7ff f861 	bl	8000c2c <HAL_GetTick>
 8001b6a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001b6c:	e009      	b.n	8001b82 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001b6e:	f7ff f85d 	bl	8000c2c <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b7c:	d901      	bls.n	8001b82 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e022      	b.n	8001bc8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001b82:	4b14      	ldr	r3, [pc, #80]	; (8001bd4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b8e:	d1ee      	bne.n	8001b6e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001b90:	4b10      	ldr	r3, [pc, #64]	; (8001bd4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a0f      	ldr	r2, [pc, #60]	; (8001bd4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b9a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b9c:	f7ff f846 	bl	8000c2c <HAL_GetTick>
 8001ba0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001ba2:	e009      	b.n	8001bb8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001ba4:	f7ff f842 	bl	8000c2c <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001bb2:	d901      	bls.n	8001bb8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e007      	b.n	8001bc8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001bb8:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001bc4:	d1ee      	bne.n	8001ba4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001bc6:	2300      	movs	r3, #0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3708      	adds	r7, #8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	40007000 	.word	0x40007000

08001bd8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001be0:	2300      	movs	r3, #0
 8001be2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d101      	bne.n	8001bee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e345      	b.n	800227a <HAL_RCC_OscConfig+0x6a2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2b0f      	cmp	r3, #15
 8001bf4:	d904      	bls.n	8001c00 <HAL_RCC_OscConfig+0x28>
 8001bf6:	f240 1163 	movw	r1, #355	; 0x163
 8001bfa:	4892      	ldr	r0, [pc, #584]	; (8001e44 <HAL_RCC_OscConfig+0x26c>)
 8001bfc:	f7fe fe0d 	bl	800081a <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f000 809a 	beq.w	8001d42 <HAL_RCC_OscConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d00e      	beq.n	8001c34 <HAL_RCC_OscConfig+0x5c>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c1e:	d009      	beq.n	8001c34 <HAL_RCC_OscConfig+0x5c>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c28:	d004      	beq.n	8001c34 <HAL_RCC_OscConfig+0x5c>
 8001c2a:	f240 1169 	movw	r1, #361	; 0x169
 8001c2e:	4885      	ldr	r0, [pc, #532]	; (8001e44 <HAL_RCC_OscConfig+0x26c>)
 8001c30:	f7fe fdf3 	bl	800081a <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c34:	4b84      	ldr	r3, [pc, #528]	; (8001e48 <HAL_RCC_OscConfig+0x270>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f003 030c 	and.w	r3, r3, #12
 8001c3c:	2b04      	cmp	r3, #4
 8001c3e:	d00c      	beq.n	8001c5a <HAL_RCC_OscConfig+0x82>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c40:	4b81      	ldr	r3, [pc, #516]	; (8001e48 <HAL_RCC_OscConfig+0x270>)
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f003 030c 	and.w	r3, r3, #12
 8001c48:	2b08      	cmp	r3, #8
 8001c4a:	d112      	bne.n	8001c72 <HAL_RCC_OscConfig+0x9a>
 8001c4c:	4b7e      	ldr	r3, [pc, #504]	; (8001e48 <HAL_RCC_OscConfig+0x270>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c58:	d10b      	bne.n	8001c72 <HAL_RCC_OscConfig+0x9a>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c5a:	4b7b      	ldr	r3, [pc, #492]	; (8001e48 <HAL_RCC_OscConfig+0x270>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d06c      	beq.n	8001d40 <HAL_RCC_OscConfig+0x168>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d168      	bne.n	8001d40 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e303      	b.n	800227a <HAL_RCC_OscConfig+0x6a2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c7a:	d106      	bne.n	8001c8a <HAL_RCC_OscConfig+0xb2>
 8001c7c:	4b72      	ldr	r3, [pc, #456]	; (8001e48 <HAL_RCC_OscConfig+0x270>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a71      	ldr	r2, [pc, #452]	; (8001e48 <HAL_RCC_OscConfig+0x270>)
 8001c82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c86:	6013      	str	r3, [r2, #0]
 8001c88:	e02e      	b.n	8001ce8 <HAL_RCC_OscConfig+0x110>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d10c      	bne.n	8001cac <HAL_RCC_OscConfig+0xd4>
 8001c92:	4b6d      	ldr	r3, [pc, #436]	; (8001e48 <HAL_RCC_OscConfig+0x270>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a6c      	ldr	r2, [pc, #432]	; (8001e48 <HAL_RCC_OscConfig+0x270>)
 8001c98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c9c:	6013      	str	r3, [r2, #0]
 8001c9e:	4b6a      	ldr	r3, [pc, #424]	; (8001e48 <HAL_RCC_OscConfig+0x270>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a69      	ldr	r2, [pc, #420]	; (8001e48 <HAL_RCC_OscConfig+0x270>)
 8001ca4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ca8:	6013      	str	r3, [r2, #0]
 8001caa:	e01d      	b.n	8001ce8 <HAL_RCC_OscConfig+0x110>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cb4:	d10c      	bne.n	8001cd0 <HAL_RCC_OscConfig+0xf8>
 8001cb6:	4b64      	ldr	r3, [pc, #400]	; (8001e48 <HAL_RCC_OscConfig+0x270>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a63      	ldr	r2, [pc, #396]	; (8001e48 <HAL_RCC_OscConfig+0x270>)
 8001cbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cc0:	6013      	str	r3, [r2, #0]
 8001cc2:	4b61      	ldr	r3, [pc, #388]	; (8001e48 <HAL_RCC_OscConfig+0x270>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a60      	ldr	r2, [pc, #384]	; (8001e48 <HAL_RCC_OscConfig+0x270>)
 8001cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ccc:	6013      	str	r3, [r2, #0]
 8001cce:	e00b      	b.n	8001ce8 <HAL_RCC_OscConfig+0x110>
 8001cd0:	4b5d      	ldr	r3, [pc, #372]	; (8001e48 <HAL_RCC_OscConfig+0x270>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a5c      	ldr	r2, [pc, #368]	; (8001e48 <HAL_RCC_OscConfig+0x270>)
 8001cd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cda:	6013      	str	r3, [r2, #0]
 8001cdc:	4b5a      	ldr	r3, [pc, #360]	; (8001e48 <HAL_RCC_OscConfig+0x270>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a59      	ldr	r2, [pc, #356]	; (8001e48 <HAL_RCC_OscConfig+0x270>)
 8001ce2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ce6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d013      	beq.n	8001d18 <HAL_RCC_OscConfig+0x140>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf0:	f7fe ff9c 	bl	8000c2c <HAL_GetTick>
 8001cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cf6:	e008      	b.n	8001d0a <HAL_RCC_OscConfig+0x132>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cf8:	f7fe ff98 	bl	8000c2c <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b64      	cmp	r3, #100	; 0x64
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0x132>
          {
            return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e2b7      	b.n	800227a <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d0a:	4b4f      	ldr	r3, [pc, #316]	; (8001e48 <HAL_RCC_OscConfig+0x270>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d0f0      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x120>
 8001d16:	e014      	b.n	8001d42 <HAL_RCC_OscConfig+0x16a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d18:	f7fe ff88 	bl	8000c2c <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d20:	f7fe ff84 	bl	8000c2c <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b64      	cmp	r3, #100	; 0x64
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e2a3      	b.n	800227a <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d32:	4b45      	ldr	r3, [pc, #276]	; (8001e48 <HAL_RCC_OscConfig+0x270>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1f0      	bne.n	8001d20 <HAL_RCC_OscConfig+0x148>
 8001d3e:	e000      	b.n	8001d42 <HAL_RCC_OscConfig+0x16a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f000 8084 	beq.w	8001e58 <HAL_RCC_OscConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d008      	beq.n	8001d6a <HAL_RCC_OscConfig+0x192>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d004      	beq.n	8001d6a <HAL_RCC_OscConfig+0x192>
 8001d60:	f240 119b 	movw	r1, #411	; 0x19b
 8001d64:	4837      	ldr	r0, [pc, #220]	; (8001e44 <HAL_RCC_OscConfig+0x26c>)
 8001d66:	f7fe fd58 	bl	800081a <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	2b1f      	cmp	r3, #31
 8001d70:	d904      	bls.n	8001d7c <HAL_RCC_OscConfig+0x1a4>
 8001d72:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8001d76:	4833      	ldr	r0, [pc, #204]	; (8001e44 <HAL_RCC_OscConfig+0x26c>)
 8001d78:	f7fe fd4f 	bl	800081a <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d7c:	4b32      	ldr	r3, [pc, #200]	; (8001e48 <HAL_RCC_OscConfig+0x270>)
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f003 030c 	and.w	r3, r3, #12
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d00b      	beq.n	8001da0 <HAL_RCC_OscConfig+0x1c8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d88:	4b2f      	ldr	r3, [pc, #188]	; (8001e48 <HAL_RCC_OscConfig+0x270>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f003 030c 	and.w	r3, r3, #12
 8001d90:	2b08      	cmp	r3, #8
 8001d92:	d11c      	bne.n	8001dce <HAL_RCC_OscConfig+0x1f6>
 8001d94:	4b2c      	ldr	r3, [pc, #176]	; (8001e48 <HAL_RCC_OscConfig+0x270>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d116      	bne.n	8001dce <HAL_RCC_OscConfig+0x1f6>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001da0:	4b29      	ldr	r3, [pc, #164]	; (8001e48 <HAL_RCC_OscConfig+0x270>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d005      	beq.n	8001db8 <HAL_RCC_OscConfig+0x1e0>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d001      	beq.n	8001db8 <HAL_RCC_OscConfig+0x1e0>
      {
        return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e260      	b.n	800227a <HAL_RCC_OscConfig+0x6a2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db8:	4b23      	ldr	r3, [pc, #140]	; (8001e48 <HAL_RCC_OscConfig+0x270>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	00db      	lsls	r3, r3, #3
 8001dc6:	4920      	ldr	r1, [pc, #128]	; (8001e48 <HAL_RCC_OscConfig+0x270>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dcc:	e044      	b.n	8001e58 <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d023      	beq.n	8001e1e <HAL_RCC_OscConfig+0x246>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dd6:	4b1c      	ldr	r3, [pc, #112]	; (8001e48 <HAL_RCC_OscConfig+0x270>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a1b      	ldr	r2, [pc, #108]	; (8001e48 <HAL_RCC_OscConfig+0x270>)
 8001ddc:	f043 0301 	orr.w	r3, r3, #1
 8001de0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de2:	f7fe ff23 	bl	8000c2c <HAL_GetTick>
 8001de6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de8:	e008      	b.n	8001dfc <HAL_RCC_OscConfig+0x224>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dea:	f7fe ff1f 	bl	8000c2c <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0x224>
          {
            return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e23e      	b.n	800227a <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dfc:	4b12      	ldr	r3, [pc, #72]	; (8001e48 <HAL_RCC_OscConfig+0x270>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0302 	and.w	r3, r3, #2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d0f0      	beq.n	8001dea <HAL_RCC_OscConfig+0x212>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e08:	4b0f      	ldr	r3, [pc, #60]	; (8001e48 <HAL_RCC_OscConfig+0x270>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	691b      	ldr	r3, [r3, #16]
 8001e14:	00db      	lsls	r3, r3, #3
 8001e16:	490c      	ldr	r1, [pc, #48]	; (8001e48 <HAL_RCC_OscConfig+0x270>)
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	600b      	str	r3, [r1, #0]
 8001e1c:	e01c      	b.n	8001e58 <HAL_RCC_OscConfig+0x280>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e1e:	4b0a      	ldr	r3, [pc, #40]	; (8001e48 <HAL_RCC_OscConfig+0x270>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a09      	ldr	r2, [pc, #36]	; (8001e48 <HAL_RCC_OscConfig+0x270>)
 8001e24:	f023 0301 	bic.w	r3, r3, #1
 8001e28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2a:	f7fe feff 	bl	8000c2c <HAL_GetTick>
 8001e2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e30:	e00c      	b.n	8001e4c <HAL_RCC_OscConfig+0x274>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e32:	f7fe fefb 	bl	8000c2c <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d905      	bls.n	8001e4c <HAL_RCC_OscConfig+0x274>
          {
            return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e21a      	b.n	800227a <HAL_RCC_OscConfig+0x6a2>
 8001e44:	08005548 	.word	0x08005548
 8001e48:	40023800 	.word	0x40023800
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e4c:	4b7e      	ldr	r3, [pc, #504]	; (8002048 <HAL_RCC_OscConfig+0x470>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d1ec      	bne.n	8001e32 <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0308 	and.w	r3, r3, #8
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d043      	beq.n	8001eec <HAL_RCC_OscConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	695b      	ldr	r3, [r3, #20]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d008      	beq.n	8001e7e <HAL_RCC_OscConfig+0x2a6>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	695b      	ldr	r3, [r3, #20]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d004      	beq.n	8001e7e <HAL_RCC_OscConfig+0x2a6>
 8001e74:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8001e78:	4874      	ldr	r0, [pc, #464]	; (800204c <HAL_RCC_OscConfig+0x474>)
 8001e7a:	f7fe fcce 	bl	800081a <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d019      	beq.n	8001eba <HAL_RCC_OscConfig+0x2e2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e86:	4b70      	ldr	r3, [pc, #448]	; (8002048 <HAL_RCC_OscConfig+0x470>)
 8001e88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e8a:	4a6f      	ldr	r2, [pc, #444]	; (8002048 <HAL_RCC_OscConfig+0x470>)
 8001e8c:	f043 0301 	orr.w	r3, r3, #1
 8001e90:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e92:	f7fe fecb 	bl	8000c2c <HAL_GetTick>
 8001e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e98:	e008      	b.n	8001eac <HAL_RCC_OscConfig+0x2d4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e9a:	f7fe fec7 	bl	8000c2c <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d901      	bls.n	8001eac <HAL_RCC_OscConfig+0x2d4>
        {
          return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e1e6      	b.n	800227a <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eac:	4b66      	ldr	r3, [pc, #408]	; (8002048 <HAL_RCC_OscConfig+0x470>)
 8001eae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d0f0      	beq.n	8001e9a <HAL_RCC_OscConfig+0x2c2>
 8001eb8:	e018      	b.n	8001eec <HAL_RCC_OscConfig+0x314>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eba:	4b63      	ldr	r3, [pc, #396]	; (8002048 <HAL_RCC_OscConfig+0x470>)
 8001ebc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ebe:	4a62      	ldr	r2, [pc, #392]	; (8002048 <HAL_RCC_OscConfig+0x470>)
 8001ec0:	f023 0301 	bic.w	r3, r3, #1
 8001ec4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ec6:	f7fe feb1 	bl	8000c2c <HAL_GetTick>
 8001eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ecc:	e008      	b.n	8001ee0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ece:	f7fe fead 	bl	8000c2c <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d901      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e1cc      	b.n	800227a <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ee0:	4b59      	ldr	r3, [pc, #356]	; (8002048 <HAL_RCC_OscConfig+0x470>)
 8001ee2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ee4:	f003 0302 	and.w	r3, r3, #2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d1f0      	bne.n	8001ece <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0304 	and.w	r3, r3, #4
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	f000 80bc 	beq.w	8002072 <HAL_RCC_OscConfig+0x49a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d00c      	beq.n	8001f1c <HAL_RCC_OscConfig+0x344>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d008      	beq.n	8001f1c <HAL_RCC_OscConfig+0x344>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	2b05      	cmp	r3, #5
 8001f10:	d004      	beq.n	8001f1c <HAL_RCC_OscConfig+0x344>
 8001f12:	f240 2106 	movw	r1, #518	; 0x206
 8001f16:	484d      	ldr	r0, [pc, #308]	; (800204c <HAL_RCC_OscConfig+0x474>)
 8001f18:	f7fe fc7f 	bl	800081a <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f1c:	4b4a      	ldr	r3, [pc, #296]	; (8002048 <HAL_RCC_OscConfig+0x470>)
 8001f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d10d      	bne.n	8001f44 <HAL_RCC_OscConfig+0x36c>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f28:	4b47      	ldr	r3, [pc, #284]	; (8002048 <HAL_RCC_OscConfig+0x470>)
 8001f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2c:	4a46      	ldr	r2, [pc, #280]	; (8002048 <HAL_RCC_OscConfig+0x470>)
 8001f2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f32:	6413      	str	r3, [r2, #64]	; 0x40
 8001f34:	4b44      	ldr	r3, [pc, #272]	; (8002048 <HAL_RCC_OscConfig+0x470>)
 8001f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f3c:	60bb      	str	r3, [r7, #8]
 8001f3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f40:	2301      	movs	r3, #1
 8001f42:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f44:	4b42      	ldr	r3, [pc, #264]	; (8002050 <HAL_RCC_OscConfig+0x478>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d118      	bne.n	8001f82 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001f50:	4b3f      	ldr	r3, [pc, #252]	; (8002050 <HAL_RCC_OscConfig+0x478>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a3e      	ldr	r2, [pc, #248]	; (8002050 <HAL_RCC_OscConfig+0x478>)
 8001f56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f5a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f5c:	f7fe fe66 	bl	8000c2c <HAL_GetTick>
 8001f60:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0x39e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f64:	f7fe fe62 	bl	8000c2c <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b64      	cmp	r3, #100	; 0x64
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e181      	b.n	800227a <HAL_RCC_OscConfig+0x6a2>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f76:	4b36      	ldr	r3, [pc, #216]	; (8002050 <HAL_RCC_OscConfig+0x478>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d0f0      	beq.n	8001f64 <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d106      	bne.n	8001f98 <HAL_RCC_OscConfig+0x3c0>
 8001f8a:	4b2f      	ldr	r3, [pc, #188]	; (8002048 <HAL_RCC_OscConfig+0x470>)
 8001f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f8e:	4a2e      	ldr	r2, [pc, #184]	; (8002048 <HAL_RCC_OscConfig+0x470>)
 8001f90:	f043 0301 	orr.w	r3, r3, #1
 8001f94:	6713      	str	r3, [r2, #112]	; 0x70
 8001f96:	e02d      	b.n	8001ff4 <HAL_RCC_OscConfig+0x41c>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d10c      	bne.n	8001fba <HAL_RCC_OscConfig+0x3e2>
 8001fa0:	4b29      	ldr	r3, [pc, #164]	; (8002048 <HAL_RCC_OscConfig+0x470>)
 8001fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fa4:	4a28      	ldr	r2, [pc, #160]	; (8002048 <HAL_RCC_OscConfig+0x470>)
 8001fa6:	f023 0301 	bic.w	r3, r3, #1
 8001faa:	6713      	str	r3, [r2, #112]	; 0x70
 8001fac:	4b26      	ldr	r3, [pc, #152]	; (8002048 <HAL_RCC_OscConfig+0x470>)
 8001fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb0:	4a25      	ldr	r2, [pc, #148]	; (8002048 <HAL_RCC_OscConfig+0x470>)
 8001fb2:	f023 0304 	bic.w	r3, r3, #4
 8001fb6:	6713      	str	r3, [r2, #112]	; 0x70
 8001fb8:	e01c      	b.n	8001ff4 <HAL_RCC_OscConfig+0x41c>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	2b05      	cmp	r3, #5
 8001fc0:	d10c      	bne.n	8001fdc <HAL_RCC_OscConfig+0x404>
 8001fc2:	4b21      	ldr	r3, [pc, #132]	; (8002048 <HAL_RCC_OscConfig+0x470>)
 8001fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fc6:	4a20      	ldr	r2, [pc, #128]	; (8002048 <HAL_RCC_OscConfig+0x470>)
 8001fc8:	f043 0304 	orr.w	r3, r3, #4
 8001fcc:	6713      	str	r3, [r2, #112]	; 0x70
 8001fce:	4b1e      	ldr	r3, [pc, #120]	; (8002048 <HAL_RCC_OscConfig+0x470>)
 8001fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd2:	4a1d      	ldr	r2, [pc, #116]	; (8002048 <HAL_RCC_OscConfig+0x470>)
 8001fd4:	f043 0301 	orr.w	r3, r3, #1
 8001fd8:	6713      	str	r3, [r2, #112]	; 0x70
 8001fda:	e00b      	b.n	8001ff4 <HAL_RCC_OscConfig+0x41c>
 8001fdc:	4b1a      	ldr	r3, [pc, #104]	; (8002048 <HAL_RCC_OscConfig+0x470>)
 8001fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe0:	4a19      	ldr	r2, [pc, #100]	; (8002048 <HAL_RCC_OscConfig+0x470>)
 8001fe2:	f023 0301 	bic.w	r3, r3, #1
 8001fe6:	6713      	str	r3, [r2, #112]	; 0x70
 8001fe8:	4b17      	ldr	r3, [pc, #92]	; (8002048 <HAL_RCC_OscConfig+0x470>)
 8001fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fec:	4a16      	ldr	r2, [pc, #88]	; (8002048 <HAL_RCC_OscConfig+0x470>)
 8001fee:	f023 0304 	bic.w	r3, r3, #4
 8001ff2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d015      	beq.n	8002028 <HAL_RCC_OscConfig+0x450>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ffc:	f7fe fe16 	bl	8000c2c <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002002:	e00a      	b.n	800201a <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002004:	f7fe fe12 	bl	8000c2c <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002012:	4293      	cmp	r3, r2
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e12f      	b.n	800227a <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800201a:	4b0b      	ldr	r3, [pc, #44]	; (8002048 <HAL_RCC_OscConfig+0x470>)
 800201c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d0ee      	beq.n	8002004 <HAL_RCC_OscConfig+0x42c>
 8002026:	e01b      	b.n	8002060 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002028:	f7fe fe00 	bl	8000c2c <HAL_GetTick>
 800202c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800202e:	e011      	b.n	8002054 <HAL_RCC_OscConfig+0x47c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002030:	f7fe fdfc 	bl	8000c2c <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	f241 3288 	movw	r2, #5000	; 0x1388
 800203e:	4293      	cmp	r3, r2
 8002040:	d908      	bls.n	8002054 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e119      	b.n	800227a <HAL_RCC_OscConfig+0x6a2>
 8002046:	bf00      	nop
 8002048:	40023800 	.word	0x40023800
 800204c:	08005548 	.word	0x08005548
 8002050:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002054:	4b8b      	ldr	r3, [pc, #556]	; (8002284 <HAL_RCC_OscConfig+0x6ac>)
 8002056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d1e7      	bne.n	8002030 <HAL_RCC_OscConfig+0x458>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002060:	7dfb      	ldrb	r3, [r7, #23]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d105      	bne.n	8002072 <HAL_RCC_OscConfig+0x49a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002066:	4b87      	ldr	r3, [pc, #540]	; (8002284 <HAL_RCC_OscConfig+0x6ac>)
 8002068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206a:	4a86      	ldr	r2, [pc, #536]	; (8002284 <HAL_RCC_OscConfig+0x6ac>)
 800206c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002070:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	699b      	ldr	r3, [r3, #24]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d00c      	beq.n	8002094 <HAL_RCC_OscConfig+0x4bc>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d008      	beq.n	8002094 <HAL_RCC_OscConfig+0x4bc>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	2b02      	cmp	r3, #2
 8002088:	d004      	beq.n	8002094 <HAL_RCC_OscConfig+0x4bc>
 800208a:	f240 214a 	movw	r1, #586	; 0x24a
 800208e:	487e      	ldr	r0, [pc, #504]	; (8002288 <HAL_RCC_OscConfig+0x6b0>)
 8002090:	f7fe fbc3 	bl	800081a <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	2b00      	cmp	r3, #0
 800209a:	f000 80ed 	beq.w	8002278 <HAL_RCC_OscConfig+0x6a0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800209e:	4b79      	ldr	r3, [pc, #484]	; (8002284 <HAL_RCC_OscConfig+0x6ac>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f003 030c 	and.w	r3, r3, #12
 80020a6:	2b08      	cmp	r3, #8
 80020a8:	f000 80b4 	beq.w	8002214 <HAL_RCC_OscConfig+0x63c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	f040 8095 	bne.w	80021e0 <HAL_RCC_OscConfig+0x608>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d009      	beq.n	80020d2 <HAL_RCC_OscConfig+0x4fa>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020c6:	d004      	beq.n	80020d2 <HAL_RCC_OscConfig+0x4fa>
 80020c8:	f240 2153 	movw	r1, #595	; 0x253
 80020cc:	486e      	ldr	r0, [pc, #440]	; (8002288 <HAL_RCC_OscConfig+0x6b0>)
 80020ce:	f7fe fba4 	bl	800081a <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a1b      	ldr	r3, [r3, #32]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d903      	bls.n	80020e2 <HAL_RCC_OscConfig+0x50a>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a1b      	ldr	r3, [r3, #32]
 80020de:	2b3f      	cmp	r3, #63	; 0x3f
 80020e0:	d904      	bls.n	80020ec <HAL_RCC_OscConfig+0x514>
 80020e2:	f44f 7115 	mov.w	r1, #596	; 0x254
 80020e6:	4868      	ldr	r0, [pc, #416]	; (8002288 <HAL_RCC_OscConfig+0x6b0>)
 80020e8:	f7fe fb97 	bl	800081a <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f0:	2b31      	cmp	r3, #49	; 0x31
 80020f2:	d904      	bls.n	80020fe <HAL_RCC_OscConfig+0x526>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f8:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80020fc:	d904      	bls.n	8002108 <HAL_RCC_OscConfig+0x530>
 80020fe:	f240 2155 	movw	r1, #597	; 0x255
 8002102:	4861      	ldr	r0, [pc, #388]	; (8002288 <HAL_RCC_OscConfig+0x6b0>)
 8002104:	f7fe fb89 	bl	800081a <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210c:	2b02      	cmp	r3, #2
 800210e:	d010      	beq.n	8002132 <HAL_RCC_OscConfig+0x55a>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002114:	2b04      	cmp	r3, #4
 8002116:	d00c      	beq.n	8002132 <HAL_RCC_OscConfig+0x55a>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211c:	2b06      	cmp	r3, #6
 800211e:	d008      	beq.n	8002132 <HAL_RCC_OscConfig+0x55a>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002124:	2b08      	cmp	r3, #8
 8002126:	d004      	beq.n	8002132 <HAL_RCC_OscConfig+0x55a>
 8002128:	f240 2156 	movw	r1, #598	; 0x256
 800212c:	4856      	ldr	r0, [pc, #344]	; (8002288 <HAL_RCC_OscConfig+0x6b0>)
 800212e:	f7fe fb74 	bl	800081a <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002136:	2b01      	cmp	r3, #1
 8002138:	d903      	bls.n	8002142 <HAL_RCC_OscConfig+0x56a>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213e:	2b0f      	cmp	r3, #15
 8002140:	d904      	bls.n	800214c <HAL_RCC_OscConfig+0x574>
 8002142:	f240 2157 	movw	r1, #599	; 0x257
 8002146:	4850      	ldr	r0, [pc, #320]	; (8002288 <HAL_RCC_OscConfig+0x6b0>)
 8002148:	f7fe fb67 	bl	800081a <assert_failed>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800214c:	4b4d      	ldr	r3, [pc, #308]	; (8002284 <HAL_RCC_OscConfig+0x6ac>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a4c      	ldr	r2, [pc, #304]	; (8002284 <HAL_RCC_OscConfig+0x6ac>)
 8002152:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002156:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002158:	f7fe fd68 	bl	8000c2c <HAL_GetTick>
 800215c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800215e:	e008      	b.n	8002172 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002160:	f7fe fd64 	bl	8000c2c <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	2b02      	cmp	r3, #2
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e083      	b.n	800227a <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002172:	4b44      	ldr	r3, [pc, #272]	; (8002284 <HAL_RCC_OscConfig+0x6ac>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d1f0      	bne.n	8002160 <HAL_RCC_OscConfig+0x588>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	69da      	ldr	r2, [r3, #28]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a1b      	ldr	r3, [r3, #32]
 8002186:	431a      	orrs	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218c:	019b      	lsls	r3, r3, #6
 800218e:	431a      	orrs	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002194:	085b      	lsrs	r3, r3, #1
 8002196:	3b01      	subs	r3, #1
 8002198:	041b      	lsls	r3, r3, #16
 800219a:	431a      	orrs	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a0:	061b      	lsls	r3, r3, #24
 80021a2:	4313      	orrs	r3, r2
 80021a4:	4a37      	ldr	r2, [pc, #220]	; (8002284 <HAL_RCC_OscConfig+0x6ac>)
 80021a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80021aa:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021ac:	4b35      	ldr	r3, [pc, #212]	; (8002284 <HAL_RCC_OscConfig+0x6ac>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a34      	ldr	r2, [pc, #208]	; (8002284 <HAL_RCC_OscConfig+0x6ac>)
 80021b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b8:	f7fe fd38 	bl	8000c2c <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0x5fa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021c0:	f7fe fd34 	bl	8000c2c <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0x5fa>
          {
            return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e053      	b.n	800227a <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021d2:	4b2c      	ldr	r3, [pc, #176]	; (8002284 <HAL_RCC_OscConfig+0x6ac>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d0f0      	beq.n	80021c0 <HAL_RCC_OscConfig+0x5e8>
 80021de:	e04b      	b.n	8002278 <HAL_RCC_OscConfig+0x6a0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021e0:	4b28      	ldr	r3, [pc, #160]	; (8002284 <HAL_RCC_OscConfig+0x6ac>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a27      	ldr	r2, [pc, #156]	; (8002284 <HAL_RCC_OscConfig+0x6ac>)
 80021e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ec:	f7fe fd1e 	bl	8000c2c <HAL_GetTick>
 80021f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021f2:	e008      	b.n	8002206 <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021f4:	f7fe fd1a 	bl	8000c2c <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e039      	b.n	800227a <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002206:	4b1f      	ldr	r3, [pc, #124]	; (8002284 <HAL_RCC_OscConfig+0x6ac>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1f0      	bne.n	80021f4 <HAL_RCC_OscConfig+0x61c>
 8002212:	e031      	b.n	8002278 <HAL_RCC_OscConfig+0x6a0>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002214:	4b1b      	ldr	r3, [pc, #108]	; (8002284 <HAL_RCC_OscConfig+0x6ac>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d028      	beq.n	8002274 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800222c:	429a      	cmp	r2, r3
 800222e:	d121      	bne.n	8002274 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800223a:	429a      	cmp	r2, r3
 800223c:	d11a      	bne.n	8002274 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002244:	4013      	ands	r3, r2
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800224a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800224c:	4293      	cmp	r3, r2
 800224e:	d111      	bne.n	8002274 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800225a:	085b      	lsrs	r3, r3, #1
 800225c:	3b01      	subs	r3, #1
 800225e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002260:	429a      	cmp	r2, r3
 8002262:	d107      	bne.n	8002274 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800226e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002270:	429a      	cmp	r2, r3
 8002272:	d001      	beq.n	8002278 <HAL_RCC_OscConfig+0x6a0>
#endif
      {
        return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e000      	b.n	800227a <HAL_RCC_OscConfig+0x6a2>
      }
    }
  }
  return HAL_OK;
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	3718      	adds	r7, #24
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	40023800 	.word	0x40023800
 8002288:	08005548 	.word	0x08005548

0800228c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002296:	2300      	movs	r3, #0
 8002298:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d101      	bne.n	80022a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e18c      	b.n	80025be <HAL_RCC_ClockConfig+0x332>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d003      	beq.n	80022b4 <HAL_RCC_ClockConfig+0x28>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2b0f      	cmp	r3, #15
 80022b2:	d904      	bls.n	80022be <HAL_RCC_ClockConfig+0x32>
 80022b4:	f240 21dd 	movw	r1, #733	; 0x2dd
 80022b8:	4887      	ldr	r0, [pc, #540]	; (80024d8 <HAL_RCC_ClockConfig+0x24c>)
 80022ba:	f7fe faae 	bl	800081a <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d031      	beq.n	8002328 <HAL_RCC_ClockConfig+0x9c>
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d02e      	beq.n	8002328 <HAL_RCC_ClockConfig+0x9c>
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d02b      	beq.n	8002328 <HAL_RCC_ClockConfig+0x9c>
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	2b03      	cmp	r3, #3
 80022d4:	d028      	beq.n	8002328 <HAL_RCC_ClockConfig+0x9c>
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	2b04      	cmp	r3, #4
 80022da:	d025      	beq.n	8002328 <HAL_RCC_ClockConfig+0x9c>
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	2b05      	cmp	r3, #5
 80022e0:	d022      	beq.n	8002328 <HAL_RCC_ClockConfig+0x9c>
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	2b06      	cmp	r3, #6
 80022e6:	d01f      	beq.n	8002328 <HAL_RCC_ClockConfig+0x9c>
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	2b07      	cmp	r3, #7
 80022ec:	d01c      	beq.n	8002328 <HAL_RCC_ClockConfig+0x9c>
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	2b08      	cmp	r3, #8
 80022f2:	d019      	beq.n	8002328 <HAL_RCC_ClockConfig+0x9c>
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	2b09      	cmp	r3, #9
 80022f8:	d016      	beq.n	8002328 <HAL_RCC_ClockConfig+0x9c>
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	2b0a      	cmp	r3, #10
 80022fe:	d013      	beq.n	8002328 <HAL_RCC_ClockConfig+0x9c>
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	2b0b      	cmp	r3, #11
 8002304:	d010      	beq.n	8002328 <HAL_RCC_ClockConfig+0x9c>
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	2b0c      	cmp	r3, #12
 800230a:	d00d      	beq.n	8002328 <HAL_RCC_ClockConfig+0x9c>
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	2b0d      	cmp	r3, #13
 8002310:	d00a      	beq.n	8002328 <HAL_RCC_ClockConfig+0x9c>
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	2b0e      	cmp	r3, #14
 8002316:	d007      	beq.n	8002328 <HAL_RCC_ClockConfig+0x9c>
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	2b0f      	cmp	r3, #15
 800231c:	d004      	beq.n	8002328 <HAL_RCC_ClockConfig+0x9c>
 800231e:	f240 21de 	movw	r1, #734	; 0x2de
 8002322:	486d      	ldr	r0, [pc, #436]	; (80024d8 <HAL_RCC_ClockConfig+0x24c>)
 8002324:	f7fe fa79 	bl	800081a <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002328:	4b6c      	ldr	r3, [pc, #432]	; (80024dc <HAL_RCC_ClockConfig+0x250>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 030f 	and.w	r3, r3, #15
 8002330:	683a      	ldr	r2, [r7, #0]
 8002332:	429a      	cmp	r2, r3
 8002334:	d910      	bls.n	8002358 <HAL_RCC_ClockConfig+0xcc>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002336:	4b69      	ldr	r3, [pc, #420]	; (80024dc <HAL_RCC_ClockConfig+0x250>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f023 020f 	bic.w	r2, r3, #15
 800233e:	4967      	ldr	r1, [pc, #412]	; (80024dc <HAL_RCC_ClockConfig+0x250>)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	4313      	orrs	r3, r2
 8002344:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002346:	4b65      	ldr	r3, [pc, #404]	; (80024dc <HAL_RCC_ClockConfig+0x250>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 030f 	and.w	r3, r3, #15
 800234e:	683a      	ldr	r2, [r7, #0]
 8002350:	429a      	cmp	r2, r3
 8002352:	d001      	beq.n	8002358 <HAL_RCC_ClockConfig+0xcc>
    {
      return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e132      	b.n	80025be <HAL_RCC_ClockConfig+0x332>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d049      	beq.n	80023f8 <HAL_RCC_ClockConfig+0x16c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0304 	and.w	r3, r3, #4
 800236c:	2b00      	cmp	r3, #0
 800236e:	d005      	beq.n	800237c <HAL_RCC_ClockConfig+0xf0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002370:	4b5b      	ldr	r3, [pc, #364]	; (80024e0 <HAL_RCC_ClockConfig+0x254>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	4a5a      	ldr	r2, [pc, #360]	; (80024e0 <HAL_RCC_ClockConfig+0x254>)
 8002376:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800237a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0308 	and.w	r3, r3, #8
 8002384:	2b00      	cmp	r3, #0
 8002386:	d005      	beq.n	8002394 <HAL_RCC_ClockConfig+0x108>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002388:	4b55      	ldr	r3, [pc, #340]	; (80024e0 <HAL_RCC_ClockConfig+0x254>)
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	4a54      	ldr	r2, [pc, #336]	; (80024e0 <HAL_RCC_ClockConfig+0x254>)
 800238e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002392:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d024      	beq.n	80023e6 <HAL_RCC_ClockConfig+0x15a>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	2b80      	cmp	r3, #128	; 0x80
 80023a2:	d020      	beq.n	80023e6 <HAL_RCC_ClockConfig+0x15a>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	2b90      	cmp	r3, #144	; 0x90
 80023aa:	d01c      	beq.n	80023e6 <HAL_RCC_ClockConfig+0x15a>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	2ba0      	cmp	r3, #160	; 0xa0
 80023b2:	d018      	beq.n	80023e6 <HAL_RCC_ClockConfig+0x15a>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	2bb0      	cmp	r3, #176	; 0xb0
 80023ba:	d014      	beq.n	80023e6 <HAL_RCC_ClockConfig+0x15a>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	2bc0      	cmp	r3, #192	; 0xc0
 80023c2:	d010      	beq.n	80023e6 <HAL_RCC_ClockConfig+0x15a>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	2bd0      	cmp	r3, #208	; 0xd0
 80023ca:	d00c      	beq.n	80023e6 <HAL_RCC_ClockConfig+0x15a>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	2be0      	cmp	r3, #224	; 0xe0
 80023d2:	d008      	beq.n	80023e6 <HAL_RCC_ClockConfig+0x15a>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	2bf0      	cmp	r3, #240	; 0xf0
 80023da:	d004      	beq.n	80023e6 <HAL_RCC_ClockConfig+0x15a>
 80023dc:	f240 3102 	movw	r1, #770	; 0x302
 80023e0:	483d      	ldr	r0, [pc, #244]	; (80024d8 <HAL_RCC_ClockConfig+0x24c>)
 80023e2:	f7fe fa1a 	bl	800081a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023e6:	4b3e      	ldr	r3, [pc, #248]	; (80024e0 <HAL_RCC_ClockConfig+0x254>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	493b      	ldr	r1, [pc, #236]	; (80024e0 <HAL_RCC_ClockConfig+0x254>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0301 	and.w	r3, r3, #1
 8002400:	2b00      	cmp	r3, #0
 8002402:	d051      	beq.n	80024a8 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d00c      	beq.n	8002426 <HAL_RCC_ClockConfig+0x19a>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	2b01      	cmp	r3, #1
 8002412:	d008      	beq.n	8002426 <HAL_RCC_ClockConfig+0x19a>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	2b02      	cmp	r3, #2
 800241a:	d004      	beq.n	8002426 <HAL_RCC_ClockConfig+0x19a>
 800241c:	f240 3109 	movw	r1, #777	; 0x309
 8002420:	482d      	ldr	r0, [pc, #180]	; (80024d8 <HAL_RCC_ClockConfig+0x24c>)
 8002422:	f7fe f9fa 	bl	800081a <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d107      	bne.n	800243e <HAL_RCC_ClockConfig+0x1b2>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800242e:	4b2c      	ldr	r3, [pc, #176]	; (80024e0 <HAL_RCC_ClockConfig+0x254>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d115      	bne.n	8002466 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e0bf      	b.n	80025be <HAL_RCC_ClockConfig+0x332>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2b02      	cmp	r3, #2
 8002444:	d107      	bne.n	8002456 <HAL_RCC_ClockConfig+0x1ca>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002446:	4b26      	ldr	r3, [pc, #152]	; (80024e0 <HAL_RCC_ClockConfig+0x254>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d109      	bne.n	8002466 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e0b3      	b.n	80025be <HAL_RCC_ClockConfig+0x332>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002456:	4b22      	ldr	r3, [pc, #136]	; (80024e0 <HAL_RCC_ClockConfig+0x254>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e0ab      	b.n	80025be <HAL_RCC_ClockConfig+0x332>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002466:	4b1e      	ldr	r3, [pc, #120]	; (80024e0 <HAL_RCC_ClockConfig+0x254>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f023 0203 	bic.w	r2, r3, #3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	491b      	ldr	r1, [pc, #108]	; (80024e0 <HAL_RCC_ClockConfig+0x254>)
 8002474:	4313      	orrs	r3, r2
 8002476:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002478:	f7fe fbd8 	bl	8000c2c <HAL_GetTick>
 800247c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800247e:	e00a      	b.n	8002496 <HAL_RCC_ClockConfig+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002480:	f7fe fbd4 	bl	8000c2c <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	f241 3288 	movw	r2, #5000	; 0x1388
 800248e:	4293      	cmp	r3, r2
 8002490:	d901      	bls.n	8002496 <HAL_RCC_ClockConfig+0x20a>
      {
        return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e093      	b.n	80025be <HAL_RCC_ClockConfig+0x332>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002496:	4b12      	ldr	r3, [pc, #72]	; (80024e0 <HAL_RCC_ClockConfig+0x254>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f003 020c 	and.w	r2, r3, #12
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d1eb      	bne.n	8002480 <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024a8:	4b0c      	ldr	r3, [pc, #48]	; (80024dc <HAL_RCC_ClockConfig+0x250>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 030f 	and.w	r3, r3, #15
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d216      	bcs.n	80024e4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024b6:	4b09      	ldr	r3, [pc, #36]	; (80024dc <HAL_RCC_ClockConfig+0x250>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f023 020f 	bic.w	r2, r3, #15
 80024be:	4907      	ldr	r1, [pc, #28]	; (80024dc <HAL_RCC_ClockConfig+0x250>)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c6:	4b05      	ldr	r3, [pc, #20]	; (80024dc <HAL_RCC_ClockConfig+0x250>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 030f 	and.w	r3, r3, #15
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d007      	beq.n	80024e4 <HAL_RCC_ClockConfig+0x258>
    {
      return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e072      	b.n	80025be <HAL_RCC_ClockConfig+0x332>
 80024d8:	08005548 	.word	0x08005548
 80024dc:	40023c00 	.word	0x40023c00
 80024e0:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0304 	and.w	r3, r3, #4
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d025      	beq.n	800253c <HAL_RCC_ClockConfig+0x2b0>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d018      	beq.n	800252a <HAL_RCC_ClockConfig+0x29e>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002500:	d013      	beq.n	800252a <HAL_RCC_ClockConfig+0x29e>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800250a:	d00e      	beq.n	800252a <HAL_RCC_ClockConfig+0x29e>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002514:	d009      	beq.n	800252a <HAL_RCC_ClockConfig+0x29e>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800251e:	d004      	beq.n	800252a <HAL_RCC_ClockConfig+0x29e>
 8002520:	f240 3146 	movw	r1, #838	; 0x346
 8002524:	4828      	ldr	r0, [pc, #160]	; (80025c8 <HAL_RCC_ClockConfig+0x33c>)
 8002526:	f7fe f978 	bl	800081a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800252a:	4b28      	ldr	r3, [pc, #160]	; (80025cc <HAL_RCC_ClockConfig+0x340>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	4925      	ldr	r1, [pc, #148]	; (80025cc <HAL_RCC_ClockConfig+0x340>)
 8002538:	4313      	orrs	r3, r2
 800253a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0308 	and.w	r3, r3, #8
 8002544:	2b00      	cmp	r3, #0
 8002546:	d026      	beq.n	8002596 <HAL_RCC_ClockConfig+0x30a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d018      	beq.n	8002582 <HAL_RCC_ClockConfig+0x2f6>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	691b      	ldr	r3, [r3, #16]
 8002554:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002558:	d013      	beq.n	8002582 <HAL_RCC_ClockConfig+0x2f6>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002562:	d00e      	beq.n	8002582 <HAL_RCC_ClockConfig+0x2f6>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800256c:	d009      	beq.n	8002582 <HAL_RCC_ClockConfig+0x2f6>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8002576:	d004      	beq.n	8002582 <HAL_RCC_ClockConfig+0x2f6>
 8002578:	f240 314d 	movw	r1, #845	; 0x34d
 800257c:	4812      	ldr	r0, [pc, #72]	; (80025c8 <HAL_RCC_ClockConfig+0x33c>)
 800257e:	f7fe f94c 	bl	800081a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002582:	4b12      	ldr	r3, [pc, #72]	; (80025cc <HAL_RCC_ClockConfig+0x340>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	00db      	lsls	r3, r3, #3
 8002590:	490e      	ldr	r1, [pc, #56]	; (80025cc <HAL_RCC_ClockConfig+0x340>)
 8002592:	4313      	orrs	r3, r2
 8002594:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002596:	f000 f821 	bl	80025dc <HAL_RCC_GetSysClockFreq>
 800259a:	4602      	mov	r2, r0
 800259c:	4b0b      	ldr	r3, [pc, #44]	; (80025cc <HAL_RCC_ClockConfig+0x340>)
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	091b      	lsrs	r3, r3, #4
 80025a2:	f003 030f 	and.w	r3, r3, #15
 80025a6:	490a      	ldr	r1, [pc, #40]	; (80025d0 <HAL_RCC_ClockConfig+0x344>)
 80025a8:	5ccb      	ldrb	r3, [r1, r3]
 80025aa:	fa22 f303 	lsr.w	r3, r2, r3
 80025ae:	4a09      	ldr	r2, [pc, #36]	; (80025d4 <HAL_RCC_ClockConfig+0x348>)
 80025b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025b2:	4b09      	ldr	r3, [pc, #36]	; (80025d8 <HAL_RCC_ClockConfig+0x34c>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7fe faf4 	bl	8000ba4 <HAL_InitTick>

  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	08005548 	.word	0x08005548
 80025cc:	40023800 	.word	0x40023800
 80025d0:	0800566c 	.word	0x0800566c
 80025d4:	20000000 	.word	0x20000000
 80025d8:	20000004 	.word	0x20000004

080025dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025e0:	b090      	sub	sp, #64	; 0x40
 80025e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80025e4:	2300      	movs	r3, #0
 80025e6:	637b      	str	r3, [r7, #52]	; 0x34
 80025e8:	2300      	movs	r3, #0
 80025ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025ec:	2300      	movs	r3, #0
 80025ee:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80025f0:	2300      	movs	r3, #0
 80025f2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025f4:	4b59      	ldr	r3, [pc, #356]	; (800275c <HAL_RCC_GetSysClockFreq+0x180>)
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f003 030c 	and.w	r3, r3, #12
 80025fc:	2b08      	cmp	r3, #8
 80025fe:	d00d      	beq.n	800261c <HAL_RCC_GetSysClockFreq+0x40>
 8002600:	2b08      	cmp	r3, #8
 8002602:	f200 80a1 	bhi.w	8002748 <HAL_RCC_GetSysClockFreq+0x16c>
 8002606:	2b00      	cmp	r3, #0
 8002608:	d002      	beq.n	8002610 <HAL_RCC_GetSysClockFreq+0x34>
 800260a:	2b04      	cmp	r3, #4
 800260c:	d003      	beq.n	8002616 <HAL_RCC_GetSysClockFreq+0x3a>
 800260e:	e09b      	b.n	8002748 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002610:	4b53      	ldr	r3, [pc, #332]	; (8002760 <HAL_RCC_GetSysClockFreq+0x184>)
 8002612:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002614:	e09b      	b.n	800274e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002616:	4b53      	ldr	r3, [pc, #332]	; (8002764 <HAL_RCC_GetSysClockFreq+0x188>)
 8002618:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800261a:	e098      	b.n	800274e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800261c:	4b4f      	ldr	r3, [pc, #316]	; (800275c <HAL_RCC_GetSysClockFreq+0x180>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002624:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002626:	4b4d      	ldr	r3, [pc, #308]	; (800275c <HAL_RCC_GetSysClockFreq+0x180>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d028      	beq.n	8002684 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002632:	4b4a      	ldr	r3, [pc, #296]	; (800275c <HAL_RCC_GetSysClockFreq+0x180>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	099b      	lsrs	r3, r3, #6
 8002638:	2200      	movs	r2, #0
 800263a:	623b      	str	r3, [r7, #32]
 800263c:	627a      	str	r2, [r7, #36]	; 0x24
 800263e:	6a3b      	ldr	r3, [r7, #32]
 8002640:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002644:	2100      	movs	r1, #0
 8002646:	4b47      	ldr	r3, [pc, #284]	; (8002764 <HAL_RCC_GetSysClockFreq+0x188>)
 8002648:	fb03 f201 	mul.w	r2, r3, r1
 800264c:	2300      	movs	r3, #0
 800264e:	fb00 f303 	mul.w	r3, r0, r3
 8002652:	4413      	add	r3, r2
 8002654:	4a43      	ldr	r2, [pc, #268]	; (8002764 <HAL_RCC_GetSysClockFreq+0x188>)
 8002656:	fba0 1202 	umull	r1, r2, r0, r2
 800265a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800265c:	460a      	mov	r2, r1
 800265e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002660:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002662:	4413      	add	r3, r2
 8002664:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002668:	2200      	movs	r2, #0
 800266a:	61bb      	str	r3, [r7, #24]
 800266c:	61fa      	str	r2, [r7, #28]
 800266e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002672:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002676:	f7fd fdc7 	bl	8000208 <__aeabi_uldivmod>
 800267a:	4602      	mov	r2, r0
 800267c:	460b      	mov	r3, r1
 800267e:	4613      	mov	r3, r2
 8002680:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002682:	e053      	b.n	800272c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002684:	4b35      	ldr	r3, [pc, #212]	; (800275c <HAL_RCC_GetSysClockFreq+0x180>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	099b      	lsrs	r3, r3, #6
 800268a:	2200      	movs	r2, #0
 800268c:	613b      	str	r3, [r7, #16]
 800268e:	617a      	str	r2, [r7, #20]
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002696:	f04f 0b00 	mov.w	fp, #0
 800269a:	4652      	mov	r2, sl
 800269c:	465b      	mov	r3, fp
 800269e:	f04f 0000 	mov.w	r0, #0
 80026a2:	f04f 0100 	mov.w	r1, #0
 80026a6:	0159      	lsls	r1, r3, #5
 80026a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026ac:	0150      	lsls	r0, r2, #5
 80026ae:	4602      	mov	r2, r0
 80026b0:	460b      	mov	r3, r1
 80026b2:	ebb2 080a 	subs.w	r8, r2, sl
 80026b6:	eb63 090b 	sbc.w	r9, r3, fp
 80026ba:	f04f 0200 	mov.w	r2, #0
 80026be:	f04f 0300 	mov.w	r3, #0
 80026c2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80026c6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80026ca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80026ce:	ebb2 0408 	subs.w	r4, r2, r8
 80026d2:	eb63 0509 	sbc.w	r5, r3, r9
 80026d6:	f04f 0200 	mov.w	r2, #0
 80026da:	f04f 0300 	mov.w	r3, #0
 80026de:	00eb      	lsls	r3, r5, #3
 80026e0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026e4:	00e2      	lsls	r2, r4, #3
 80026e6:	4614      	mov	r4, r2
 80026e8:	461d      	mov	r5, r3
 80026ea:	eb14 030a 	adds.w	r3, r4, sl
 80026ee:	603b      	str	r3, [r7, #0]
 80026f0:	eb45 030b 	adc.w	r3, r5, fp
 80026f4:	607b      	str	r3, [r7, #4]
 80026f6:	f04f 0200 	mov.w	r2, #0
 80026fa:	f04f 0300 	mov.w	r3, #0
 80026fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002702:	4629      	mov	r1, r5
 8002704:	028b      	lsls	r3, r1, #10
 8002706:	4621      	mov	r1, r4
 8002708:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800270c:	4621      	mov	r1, r4
 800270e:	028a      	lsls	r2, r1, #10
 8002710:	4610      	mov	r0, r2
 8002712:	4619      	mov	r1, r3
 8002714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002716:	2200      	movs	r2, #0
 8002718:	60bb      	str	r3, [r7, #8]
 800271a:	60fa      	str	r2, [r7, #12]
 800271c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002720:	f7fd fd72 	bl	8000208 <__aeabi_uldivmod>
 8002724:	4602      	mov	r2, r0
 8002726:	460b      	mov	r3, r1
 8002728:	4613      	mov	r3, r2
 800272a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800272c:	4b0b      	ldr	r3, [pc, #44]	; (800275c <HAL_RCC_GetSysClockFreq+0x180>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	0c1b      	lsrs	r3, r3, #16
 8002732:	f003 0303 	and.w	r3, r3, #3
 8002736:	3301      	adds	r3, #1
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800273c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800273e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002740:	fbb2 f3f3 	udiv	r3, r2, r3
 8002744:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002746:	e002      	b.n	800274e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002748:	4b05      	ldr	r3, [pc, #20]	; (8002760 <HAL_RCC_GetSysClockFreq+0x184>)
 800274a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800274c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800274e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002750:	4618      	mov	r0, r3
 8002752:	3740      	adds	r7, #64	; 0x40
 8002754:	46bd      	mov	sp, r7
 8002756:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800275a:	bf00      	nop
 800275c:	40023800 	.word	0x40023800
 8002760:	00f42400 	.word	0x00f42400
 8002764:	017d7840 	.word	0x017d7840

08002768 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800276c:	4b03      	ldr	r3, [pc, #12]	; (800277c <HAL_RCC_GetHCLKFreq+0x14>)
 800276e:	681b      	ldr	r3, [r3, #0]
}
 8002770:	4618      	mov	r0, r3
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	20000000 	.word	0x20000000

08002780 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002784:	f7ff fff0 	bl	8002768 <HAL_RCC_GetHCLKFreq>
 8002788:	4602      	mov	r2, r0
 800278a:	4b05      	ldr	r3, [pc, #20]	; (80027a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	0a9b      	lsrs	r3, r3, #10
 8002790:	f003 0307 	and.w	r3, r3, #7
 8002794:	4903      	ldr	r1, [pc, #12]	; (80027a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002796:	5ccb      	ldrb	r3, [r1, r3]
 8002798:	fa22 f303 	lsr.w	r3, r2, r3
}
 800279c:	4618      	mov	r0, r3
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40023800 	.word	0x40023800
 80027a4:	0800567c 	.word	0x0800567c

080027a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027ac:	f7ff ffdc 	bl	8002768 <HAL_RCC_GetHCLKFreq>
 80027b0:	4602      	mov	r2, r0
 80027b2:	4b05      	ldr	r3, [pc, #20]	; (80027c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	0b5b      	lsrs	r3, r3, #13
 80027b8:	f003 0307 	and.w	r3, r3, #7
 80027bc:	4903      	ldr	r1, [pc, #12]	; (80027cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80027be:	5ccb      	ldrb	r3, [r1, r3]
 80027c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	40023800 	.word	0x40023800
 80027cc:	0800567c 	.word	0x0800567c

080027d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b088      	sub	sp, #32
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80027d8:	2300      	movs	r3, #0
 80027da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80027dc:	2300      	movs	r3, #0
 80027de:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80027e0:	2300      	movs	r3, #0
 80027e2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80027e4:	2300      	movs	r3, #0
 80027e6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80027e8:	2300      	movs	r3, #0
 80027ea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0301 	and.w	r3, r3, #1
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f040 8089 	bne.w	800290c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0308 	and.w	r3, r3, #8
 8002802:	2b00      	cmp	r3, #0
 8002804:	f040 8082 	bne.w	800290c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0310 	and.w	r3, r3, #16
 8002810:	2b00      	cmp	r3, #0
 8002812:	d17b      	bne.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800281c:	2b00      	cmp	r3, #0
 800281e:	d175      	bne.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002828:	2b00      	cmp	r3, #0
 800282a:	d16f      	bne.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002834:	2b00      	cmp	r3, #0
 8002836:	d169      	bne.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002840:	2b00      	cmp	r3, #0
 8002842:	d163      	bne.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800284c:	2b00      	cmp	r3, #0
 800284e:	d15d      	bne.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002858:	2b00      	cmp	r3, #0
 800285a:	d157      	bne.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d151      	bne.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d14b      	bne.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d145      	bne.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d13f      	bne.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d139      	bne.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d133      	bne.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d12d      	bne.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d127      	bne.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d121      	bne.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d11b      	bne.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d115      	bne.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d10f      	bne.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d109      	bne.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0320 	and.w	r3, r3, #32
 8002900:	2b00      	cmp	r3, #0
 8002902:	d103      	bne.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002904:	2172      	movs	r1, #114	; 0x72
 8002906:	4895      	ldr	r0, [pc, #596]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8002908:	f7fd ff87 	bl	800081a <assert_failed>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0301 	and.w	r3, r3, #1
 8002914:	2b00      	cmp	r3, #0
 8002916:	d01f      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800291c:	2b00      	cmp	r3, #0
 800291e:	d008      	beq.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x162>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002924:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002928:	d003      	beq.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x162>
 800292a:	2178      	movs	r1, #120	; 0x78
 800292c:	488b      	ldr	r0, [pc, #556]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 800292e:	f7fd ff74 	bl	800081a <assert_failed>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002932:	4b8b      	ldr	r3, [pc, #556]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	4a8a      	ldr	r2, [pc, #552]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002938:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800293c:	6093      	str	r3, [r2, #8]
 800293e:	4b88      	ldr	r3, [pc, #544]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002940:	689a      	ldr	r2, [r3, #8]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002946:	4986      	ldr	r1, [pc, #536]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002948:	4313      	orrs	r3, r2
 800294a:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002950:	2b00      	cmp	r3, #0
 8002952:	d101      	bne.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x188>
    {
      plli2sused = 1;
 8002954:	2301      	movs	r3, #1
 8002956:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d029      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002968:	2b00      	cmp	r3, #0
 800296a:	d00d      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002970:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002974:	d008      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800297a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800297e:	d003      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002980:	2188      	movs	r1, #136	; 0x88
 8002982:	4876      	ldr	r0, [pc, #472]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8002984:	f7fd ff49 	bl	800081a <assert_failed>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002988:	4b75      	ldr	r3, [pc, #468]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800298a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800298e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002996:	4972      	ldr	r1, [pc, #456]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002998:	4313      	orrs	r3, r2
 800299a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029a6:	d101      	bne.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      plli2sused = 1;
 80029a8:	2301      	movs	r3, #1
 80029aa:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d101      	bne.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    {
      pllsaiused = 1;
 80029b4:	2301      	movs	r3, #1
 80029b6:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d029      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00d      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029d4:	d008      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80029de:	d003      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80029e0:	219c      	movs	r1, #156	; 0x9c
 80029e2:	485e      	ldr	r0, [pc, #376]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80029e4:	f7fd ff19 	bl	800081a <assert_failed>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80029e8:	4b5d      	ldr	r3, [pc, #372]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80029ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f6:	495a      	ldr	r1, [pc, #360]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a06:	d101      	bne.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      plli2sused = 1;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d101      	bne.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      pllsaiused = 1;
 8002a14:	2301      	movs	r3, #1
 8002a16:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
      plli2sused = 1;
 8002a24:	2301      	movs	r3, #1
 8002a26:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0320 	and.w	r3, r3, #32
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	f000 8186 	beq.w	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a3e:	f000 80e4 	beq.w	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a4a:	f000 80de 	beq.w	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a52:	4a44      	ldr	r2, [pc, #272]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	f000 80d8 	beq.w	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5e:	4a42      	ldr	r2, [pc, #264]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	f000 80d2 	beq.w	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6a:	4a40      	ldr	r2, [pc, #256]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	f000 80cc 	beq.w	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a76:	4a3e      	ldr	r2, [pc, #248]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	f000 80c6 	beq.w	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a82:	4a3c      	ldr	r2, [pc, #240]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	f000 80c0 	beq.w	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8e:	4a3a      	ldr	r2, [pc, #232]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	f000 80ba 	beq.w	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9a:	4a38      	ldr	r2, [pc, #224]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	f000 80b4 	beq.w	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa6:	4a36      	ldr	r2, [pc, #216]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3b0>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	f000 80ae 	beq.w	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab2:	4a34      	ldr	r2, [pc, #208]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	f000 80a8 	beq.w	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abe:	4a32      	ldr	r2, [pc, #200]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x3b8>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	f000 80a2 	beq.w	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aca:	4a30      	ldr	r2, [pc, #192]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	f000 809c 	beq.w	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad6:	4a2e      	ldr	r2, [pc, #184]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x3c0>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	f000 8096 	beq.w	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae2:	4a2c      	ldr	r2, [pc, #176]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	f000 8090 	beq.w	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aee:	4a2a      	ldr	r2, [pc, #168]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	f000 808a 	beq.w	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afa:	4a28      	ldr	r2, [pc, #160]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	f000 8084 	beq.w	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b06:	4a26      	ldr	r2, [pc, #152]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d07e      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b10:	4a24      	ldr	r2, [pc, #144]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d079      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1a:	4a23      	ldr	r2, [pc, #140]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d074      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b24:	4a21      	ldr	r2, [pc, #132]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d06f      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2e:	4a20      	ldr	r2, [pc, #128]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d06a      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b38:	4a1e      	ldr	r2, [pc, #120]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d065      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b42:	4a1d      	ldr	r2, [pc, #116]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d060      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4c:	4a1b      	ldr	r2, [pc, #108]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d05b      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b56:	4a1a      	ldr	r2, [pc, #104]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	e033      	b.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8002b5c:	08005580 	.word	0x08005580
 8002b60:	40023800 	.word	0x40023800
 8002b64:	00020300 	.word	0x00020300
 8002b68:	00030300 	.word	0x00030300
 8002b6c:	00040300 	.word	0x00040300
 8002b70:	00050300 	.word	0x00050300
 8002b74:	00060300 	.word	0x00060300
 8002b78:	00070300 	.word	0x00070300
 8002b7c:	00080300 	.word	0x00080300
 8002b80:	00090300 	.word	0x00090300
 8002b84:	000a0300 	.word	0x000a0300
 8002b88:	000b0300 	.word	0x000b0300
 8002b8c:	000c0300 	.word	0x000c0300
 8002b90:	000d0300 	.word	0x000d0300
 8002b94:	000e0300 	.word	0x000e0300
 8002b98:	000f0300 	.word	0x000f0300
 8002b9c:	00100300 	.word	0x00100300
 8002ba0:	00110300 	.word	0x00110300
 8002ba4:	00120300 	.word	0x00120300
 8002ba8:	00130300 	.word	0x00130300
 8002bac:	00140300 	.word	0x00140300
 8002bb0:	00150300 	.word	0x00150300
 8002bb4:	00160300 	.word	0x00160300
 8002bb8:	00170300 	.word	0x00170300
 8002bbc:	00180300 	.word	0x00180300
 8002bc0:	00190300 	.word	0x00190300
 8002bc4:	d021      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bca:	4a4c      	ldr	r2, [pc, #304]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d01c      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd4:	4a4a      	ldr	r2, [pc, #296]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d017      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bde:	4a49      	ldr	r2, [pc, #292]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d012      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be8:	4a47      	ldr	r2, [pc, #284]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d00d      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf2:	4a46      	ldr	r2, [pc, #280]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d008      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfc:	4a44      	ldr	r2, [pc, #272]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d003      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8002c02:	21b7      	movs	r1, #183	; 0xb7
 8002c04:	4843      	ldr	r0, [pc, #268]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8002c06:	f7fd fe08 	bl	800081a <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c0a:	4b43      	ldr	r3, [pc, #268]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0e:	4a42      	ldr	r2, [pc, #264]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c14:	6413      	str	r3, [r2, #64]	; 0x40
 8002c16:	4b40      	ldr	r3, [pc, #256]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c1e:	60bb      	str	r3, [r7, #8]
 8002c20:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002c22:	4b3e      	ldr	r3, [pc, #248]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a3d      	ldr	r2, [pc, #244]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8002c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c2e:	f7fd fffd 	bl	8000c2c <HAL_GetTick>
 8002c32:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c34:	e009      	b.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x47a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c36:	f7fd fff9 	bl	8000c2c <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	2b64      	cmp	r3, #100	; 0x64
 8002c42:	d902      	bls.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x47a>
      {
        return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	f000 bd9f 	b.w	8003788 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c4a:	4b34      	ldr	r3, [pc, #208]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d0ef      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x466>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c56:	4b30      	ldr	r3, [pc, #192]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c5e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d036      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d02f      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c74:	4b28      	ldr	r3, [pc, #160]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c7c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c7e:	4b26      	ldr	r3, [pc, #152]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c82:	4a25      	ldr	r2, [pc, #148]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c88:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c8a:	4b23      	ldr	r3, [pc, #140]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8e:	4a22      	ldr	r2, [pc, #136]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c94:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002c96:	4a20      	ldr	r2, [pc, #128]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c9c:	4b1e      	ldr	r3, [pc, #120]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca0:	f003 0301 	and.w	r3, r3, #1
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d115      	bne.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x504>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca8:	f7fd ffc0 	bl	8000c2c <HAL_GetTick>
 8002cac:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cae:	e00b      	b.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cb0:	f7fd ffbc 	bl	8000c2c <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d902      	bls.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	f000 bd60 	b.w	8003788 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cc8:	4b13      	ldr	r3, [pc, #76]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d0ed      	beq.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cdc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ce0:	d120      	bne.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8002ce2:	4b0d      	ldr	r3, [pc, #52]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002cee:	4b0c      	ldr	r3, [pc, #48]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8002cf0:	400b      	ands	r3, r1
 8002cf2:	4909      	ldr	r1, [pc, #36]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	608b      	str	r3, [r1, #8]
 8002cf8:	e01a      	b.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x560>
 8002cfa:	bf00      	nop
 8002cfc:	001a0300 	.word	0x001a0300
 8002d00:	001b0300 	.word	0x001b0300
 8002d04:	001c0300 	.word	0x001c0300
 8002d08:	001d0300 	.word	0x001d0300
 8002d0c:	001e0300 	.word	0x001e0300
 8002d10:	001f0300 	.word	0x001f0300
 8002d14:	08005580 	.word	0x08005580
 8002d18:	40023800 	.word	0x40023800
 8002d1c:	40007000 	.word	0x40007000
 8002d20:	0ffffcff 	.word	0x0ffffcff
 8002d24:	4b9a      	ldr	r3, [pc, #616]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	4a99      	ldr	r2, [pc, #612]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8002d2a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002d2e:	6093      	str	r3, [r2, #8]
 8002d30:	4b97      	ldr	r3, [pc, #604]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8002d32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d3c:	4994      	ldr	r1, [pc, #592]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0310 	and.w	r3, r3, #16
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d01d      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d008      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d5a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d5e:	d003      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8002d60:	21f1      	movs	r1, #241	; 0xf1
 8002d62:	488c      	ldr	r0, [pc, #560]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8002d64:	f7fd fd59 	bl	800081a <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002d68:	4b89      	ldr	r3, [pc, #548]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8002d6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d6e:	4a88      	ldr	r2, [pc, #544]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8002d70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d74:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002d78:	4b85      	ldr	r3, [pc, #532]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8002d7a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d82:	4983      	ldr	r1, [pc, #524]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d01c      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x600>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00d      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002da2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002da6:	d008      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002db0:	d003      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8002db2:	21fb      	movs	r1, #251	; 0xfb
 8002db4:	4877      	ldr	r0, [pc, #476]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8002db6:	f7fd fd30 	bl	800081a <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002dba:	4b75      	ldr	r3, [pc, #468]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8002dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dc8:	4971      	ldr	r1, [pc, #452]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d01d      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x648>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d00e      	beq.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x632>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002de8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002dec:	d009      	beq.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x632>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002df2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002df6:	d004      	beq.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x632>
 8002df8:	f240 1105 	movw	r1, #261	; 0x105
 8002dfc:	4865      	ldr	r0, [pc, #404]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8002dfe:	f7fd fd0c 	bl	800081a <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e02:	4b63      	ldr	r3, [pc, #396]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8002e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e08:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e10:	495f      	ldr	r1, [pc, #380]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d01d      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x690>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d00e      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e34:	d009      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e3e:	d004      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8002e40:	f240 110f 	movw	r1, #271	; 0x10f
 8002e44:	4853      	ldr	r0, [pc, #332]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8002e46:	f7fd fce8 	bl	800081a <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e4a:	4b51      	ldr	r3, [pc, #324]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8002e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e58:	494d      	ldr	r1, [pc, #308]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d01d      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00e      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e7c:	d009      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e82:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e86:	d004      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8002e88:	f240 1119 	movw	r1, #281	; 0x119
 8002e8c:	4841      	ldr	r0, [pc, #260]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8002e8e:	f7fd fcc4 	bl	800081a <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002e92:	4b3f      	ldr	r3, [pc, #252]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8002e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e98:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea0:	493b      	ldr	r1, [pc, #236]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d01f      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x724>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d010      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d00c      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec8:	2b03      	cmp	r3, #3
 8002eca:	d008      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d004      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8002ed4:	f240 1123 	movw	r1, #291	; 0x123
 8002ed8:	482e      	ldr	r0, [pc, #184]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8002eda:	f7fd fc9e 	bl	800081a <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ede:	4b2c      	ldr	r3, [pc, #176]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8002ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee4:	f023 0203 	bic.w	r2, r3, #3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eec:	4928      	ldr	r1, [pc, #160]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d01f      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x770>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d010      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f0c:	2b04      	cmp	r3, #4
 8002f0e:	d00c      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f14:	2b0c      	cmp	r3, #12
 8002f16:	d008      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f1c:	2b08      	cmp	r3, #8
 8002f1e:	d004      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8002f20:	f240 112d 	movw	r1, #301	; 0x12d
 8002f24:	481b      	ldr	r0, [pc, #108]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8002f26:	f7fd fc78 	bl	800081a <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f2a:	4b19      	ldr	r3, [pc, #100]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8002f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f30:	f023 020c 	bic.w	r2, r3, #12
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f38:	4915      	ldr	r1, [pc, #84]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d025      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d010      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f58:	2b10      	cmp	r3, #16
 8002f5a:	d00c      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f60:	2b30      	cmp	r3, #48	; 0x30
 8002f62:	d008      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f68:	2b20      	cmp	r3, #32
 8002f6a:	d004      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8002f6c:	f240 1137 	movw	r1, #311	; 0x137
 8002f70:	4808      	ldr	r0, [pc, #32]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8002f72:	f7fd fc52 	bl	800081a <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f76:	4b06      	ldr	r3, [pc, #24]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8002f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f7c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f84:	4902      	ldr	r1, [pc, #8]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002f8c:	e004      	b.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
 8002f8e:	bf00      	nop
 8002f90:	40023800 	.word	0x40023800
 8002f94:	08005580 	.word	0x08005580
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d01f      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x814>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d010      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fb0:	2b40      	cmp	r3, #64	; 0x40
 8002fb2:	d00c      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fb8:	2bc0      	cmp	r3, #192	; 0xc0
 8002fba:	d008      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fc0:	2b80      	cmp	r3, #128	; 0x80
 8002fc2:	d004      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8002fc4:	f240 1141 	movw	r1, #321	; 0x141
 8002fc8:	48a0      	ldr	r0, [pc, #640]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8002fca:	f7fd fc26 	bl	800081a <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002fce:	4ba0      	ldr	r3, [pc, #640]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8002fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fdc:	499c      	ldr	r1, [pc, #624]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d022      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x866>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d013      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ffc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003000:	d00e      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003006:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800300a:	d009      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x850>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003010:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003014:	d004      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8003016:	f240 114b 	movw	r1, #331	; 0x14b
 800301a:	488c      	ldr	r0, [pc, #560]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 800301c:	f7fd fbfd 	bl	800081a <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003020:	4b8b      	ldr	r3, [pc, #556]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8003022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003026:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800302e:	4988      	ldr	r1, [pc, #544]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8003030:	4313      	orrs	r3, r2
 8003032:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800303e:	2b00      	cmp	r3, #0
 8003040:	d022      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003046:	2b00      	cmp	r3, #0
 8003048:	d013      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800304e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003052:	d00e      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003058:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800305c:	d009      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003062:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003066:	d004      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8003068:	f240 1155 	movw	r1, #341	; 0x155
 800306c:	4877      	ldr	r0, [pc, #476]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 800306e:	f7fd fbd4 	bl	800081a <assert_failed>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003072:	4b77      	ldr	r3, [pc, #476]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8003074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003078:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003080:	4973      	ldr	r1, [pc, #460]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8003082:	4313      	orrs	r3, r2
 8003084:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d022      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x90a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003098:	2b00      	cmp	r3, #0
 800309a:	d013      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030a4:	d00e      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030aa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80030ae:	d009      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030b8:	d004      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 80030ba:	f240 115f 	movw	r1, #351	; 0x15f
 80030be:	4863      	ldr	r0, [pc, #396]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 80030c0:	f7fd fbab 	bl	800081a <assert_failed>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80030c4:	4b62      	ldr	r3, [pc, #392]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80030c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d2:	495f      	ldr	r1, [pc, #380]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d022      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d013      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x946>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030f6:	d00e      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x946>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030fc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003100:	d009      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x946>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003106:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800310a:	d004      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x946>
 800310c:	f240 1169 	movw	r1, #361	; 0x169
 8003110:	484e      	ldr	r0, [pc, #312]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8003112:	f7fd fb82 	bl	800081a <assert_failed>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003116:	4b4e      	ldr	r3, [pc, #312]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8003118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003124:	494a      	ldr	r1, [pc, #296]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8003126:	4313      	orrs	r3, r2
 8003128:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d018      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x99a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800313c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003140:	d008      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003146:	2b00      	cmp	r3, #0
 8003148:	d004      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800314a:	f240 1173 	movw	r1, #371	; 0x173
 800314e:	483f      	ldr	r0, [pc, #252]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8003150:	f7fd fb63 	bl	800081a <assert_failed>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003154:	4b3e      	ldr	r3, [pc, #248]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8003156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800315a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003162:	493b      	ldr	r1, [pc, #236]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8003164:	4313      	orrs	r3, r2
 8003166:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d01f      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800317a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800317e:	d008      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003184:	2b00      	cmp	r3, #0
 8003186:	d004      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8003188:	f240 117d 	movw	r1, #381	; 0x17d
 800318c:	482f      	ldr	r0, [pc, #188]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 800318e:	f7fd fb44 	bl	800081a <assert_failed>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003192:	4b2f      	ldr	r3, [pc, #188]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8003194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003198:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031a0:	492b      	ldr	r1, [pc, #172]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031b0:	d101      	bne.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    {
      pllsaiused = 1;
 80031b2:	2301      	movs	r3, #1
 80031b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0308 	and.w	r3, r3, #8
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x9f6>
  {
    pllsaiused = 1;
 80031c2:	2301      	movs	r3, #1
 80031c4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d022      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0xa48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d013      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031de:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031e2:	d00e      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80031ec:	d009      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031f2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80031f6:	d004      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 80031f8:	f240 1195 	movw	r1, #405	; 0x195
 80031fc:	4813      	ldr	r0, [pc, #76]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 80031fe:	f7fd fb0c 	bl	800081a <assert_failed>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003202:	4b13      	ldr	r3, [pc, #76]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8003204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003208:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003210:	490f      	ldr	r1, [pc, #60]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8003212:	4313      	orrs	r3, r2
 8003214:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d020      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0xa96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800322a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800322e:	d009      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003236:	2b00      	cmp	r3, #0
 8003238:	d004      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800323a:	f240 119f 	movw	r1, #415	; 0x19f
 800323e:	4803      	ldr	r0, [pc, #12]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8003240:	f7fd faeb 	bl	800081a <assert_failed>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003244:	4b02      	ldr	r3, [pc, #8]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8003246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800324a:	e003      	b.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0xa84>
 800324c:	08005580 	.word	0x08005580
 8003250:	40023800 	.word	0x40023800
 8003254:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800325e:	4910      	ldr	r1, [pc, #64]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 8003260:	4313      	orrs	r3, r2
 8003262:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d006      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003274:	2b00      	cmp	r3, #0
 8003276:	f000 8155 	beq.w	8003524 <HAL_RCCEx_PeriphCLKConfig+0xd54>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800327a:	4b09      	ldr	r3, [pc, #36]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a08      	ldr	r2, [pc, #32]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 8003280:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003284:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003286:	f7fd fcd1 	bl	8000c2c <HAL_GetTick>
 800328a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800328c:	e00a      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0xad4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800328e:	f7fd fccd 	bl	8000c2c <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	2b64      	cmp	r3, #100	; 0x64
 800329a:	d903      	bls.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0xad4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e273      	b.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 80032a0:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80032a4:	4b9a      	ldr	r3, [pc, #616]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d1ee      	bne.n	800328e <HAL_RCCEx_PeriphCLKConfig+0xabe>
      }
    }

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	2b31      	cmp	r3, #49	; 0x31
 80032b6:	d904      	bls.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80032c0:	d904      	bls.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0xafc>
 80032c2:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 80032c6:	4893      	ldr	r0, [pc, #588]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80032c8:	f7fd faa7 	bl	800081a <assert_failed>

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0301 	and.w	r3, r3, #1
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d02e      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0xb66>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d12a      	bne.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0xb66>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d903      	bls.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xb20>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	2b07      	cmp	r3, #7
 80032ee:	d904      	bls.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80032f0:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80032f4:	4887      	ldr	r0, [pc, #540]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80032f6:	f7fd fa90 	bl	800081a <assert_failed>

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80032fa:	4b85      	ldr	r3, [pc, #532]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80032fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003300:	0c1b      	lsrs	r3, r3, #16
 8003302:	f003 0303 	and.w	r3, r3, #3
 8003306:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003308:	4b81      	ldr	r3, [pc, #516]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800330a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800330e:	0e1b      	lsrs	r3, r3, #24
 8003310:	f003 030f 	and.w	r3, r3, #15
 8003314:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	019a      	lsls	r2, r3, #6
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	041b      	lsls	r3, r3, #16
 8003320:	431a      	orrs	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	061b      	lsls	r3, r3, #24
 8003326:	431a      	orrs	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	071b      	lsls	r3, r3, #28
 800332e:	4978      	ldr	r1, [pc, #480]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8003330:	4313      	orrs	r3, r2
 8003332:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d004      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003346:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800334a:	d00a      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0xb92>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003354:	2b00      	cmp	r3, #0
 8003356:	d048      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0xc1a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003360:	d143      	bne.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {
      /* Check for PLLI2S Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d903      	bls.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0xba2>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	2b0f      	cmp	r3, #15
 8003370:	d904      	bls.n	800337c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003372:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 8003376:	4867      	ldr	r0, [pc, #412]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8003378:	f7fd fa4f 	bl	800081a <assert_failed>
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003380:	2b00      	cmp	r3, #0
 8003382:	d003      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0xbbc>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003388:	2b20      	cmp	r3, #32
 800338a:	d904      	bls.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0xbc6>
 800338c:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 8003390:	4860      	ldr	r0, [pc, #384]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8003392:	f7fd fa42 	bl	800081a <assert_failed>

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003396:	4b5e      	ldr	r3, [pc, #376]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8003398:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800339c:	0c1b      	lsrs	r3, r3, #16
 800339e:	f003 0303 	and.w	r3, r3, #3
 80033a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80033a4:	4b5a      	ldr	r3, [pc, #360]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80033a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033aa:	0f1b      	lsrs	r3, r3, #28
 80033ac:	f003 0307 	and.w	r3, r3, #7
 80033b0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	019a      	lsls	r2, r3, #6
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	041b      	lsls	r3, r3, #16
 80033bc:	431a      	orrs	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	061b      	lsls	r3, r3, #24
 80033c4:	431a      	orrs	r2, r3
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	071b      	lsls	r3, r3, #28
 80033ca:	4951      	ldr	r1, [pc, #324]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80033d2:	4b4f      	ldr	r3, [pc, #316]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80033d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033d8:	f023 021f 	bic.w	r2, r3, #31
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e0:	3b01      	subs	r3, #1
 80033e2:	494b      	ldr	r1, [pc, #300]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d032      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d010      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d00c      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	2b02      	cmp	r3, #2
 800340c:	d008      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	2b03      	cmp	r3, #3
 8003414:	d004      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8003416:	f240 2105 	movw	r1, #517	; 0x205
 800341a:	483e      	ldr	r0, [pc, #248]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 800341c:	f7fd f9fd 	bl	800081a <assert_failed>

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003420:	4b3b      	ldr	r3, [pc, #236]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8003422:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003426:	0e1b      	lsrs	r3, r3, #24
 8003428:	f003 030f 	and.w	r3, r3, #15
 800342c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800342e:	4b38      	ldr	r3, [pc, #224]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8003430:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003434:	0f1b      	lsrs	r3, r3, #28
 8003436:	f003 0307 	and.w	r3, r3, #7
 800343a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	019a      	lsls	r2, r3, #6
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	041b      	lsls	r3, r3, #16
 8003448:	431a      	orrs	r2, r3
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	061b      	lsls	r3, r3, #24
 800344e:	431a      	orrs	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	071b      	lsls	r3, r3, #28
 8003454:	492e      	ldr	r1, [pc, #184]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8003456:	4313      	orrs	r3, r2
 8003458:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d040      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d010      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d00c      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	2b02      	cmp	r3, #2
 800347e:	d008      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	691b      	ldr	r3, [r3, #16]
 8003484:	2b03      	cmp	r3, #3
 8003486:	d004      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8003488:	f44f 7105 	mov.w	r1, #532	; 0x214
 800348c:	4821      	ldr	r0, [pc, #132]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 800348e:	f7fd f9c4 	bl	800081a <assert_failed>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d903      	bls.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	2b07      	cmp	r3, #7
 80034a0:	d904      	bls.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80034a2:	f240 2115 	movw	r1, #533	; 0x215
 80034a6:	481b      	ldr	r0, [pc, #108]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80034a8:	f7fd f9b7 	bl	800081a <assert_failed>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d903      	bls.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0xcec>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	2b0f      	cmp	r3, #15
 80034ba:	d904      	bls.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
 80034bc:	f240 2116 	movw	r1, #534	; 0x216
 80034c0:	4814      	ldr	r0, [pc, #80]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80034c2:	f7fd f9aa 	bl	800081a <assert_failed>

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	019a      	lsls	r2, r3, #6
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	041b      	lsls	r3, r3, #16
 80034d2:	431a      	orrs	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	061b      	lsls	r3, r3, #24
 80034da:	431a      	orrs	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	071b      	lsls	r3, r3, #28
 80034e2:	490b      	ldr	r1, [pc, #44]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80034ea:	4b09      	ldr	r3, [pc, #36]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a08      	ldr	r2, [pc, #32]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80034f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80034f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034f6:	f7fd fb99 	bl	8000c2c <HAL_GetTick>
 80034fa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80034fc:	e00c      	b.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0xd48>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80034fe:	f7fd fb95 	bl	8000c2c <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	2b64      	cmp	r3, #100	; 0x64
 800350a:	d905      	bls.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0xd48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e13b      	b.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 8003510:	40023800 	.word	0x40023800
 8003514:	08005580 	.word	0x08005580
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003518:	4b9d      	ldr	r3, [pc, #628]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d0ec      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0xd2e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	2b01      	cmp	r3, #1
 8003528:	f040 812d 	bne.w	8003786 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800352c:	4b98      	ldr	r3, [pc, #608]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a97      	ldr	r2, [pc, #604]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8003532:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003536:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003538:	f7fd fb78 	bl	8000c2c <HAL_GetTick>
 800353c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800353e:	e008      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0xd82>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003540:	f7fd fb74 	bl	8000c2c <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b64      	cmp	r3, #100	; 0x64
 800354c:	d901      	bls.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0xd82>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e11a      	b.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003552:	4b8f      	ldr	r3, [pc, #572]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800355a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800355e:	d0ef      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0xd70>
      }
    }

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	2b31      	cmp	r3, #49	; 0x31
 8003566:	d904      	bls.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0xda2>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	695b      	ldr	r3, [r3, #20]
 800356c:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8003570:	d904      	bls.n	800357c <HAL_RCCEx_PeriphCLKConfig+0xdac>
 8003572:	f44f 7111 	mov.w	r1, #580	; 0x244
 8003576:	4887      	ldr	r0, [pc, #540]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8003578:	f7fd f94f 	bl	800081a <assert_failed>

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d003      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800358c:	2b00      	cmp	r3, #0
 800358e:	d009      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0xdd4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003598:	2b00      	cmp	r3, #0
 800359a:	d048      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0xe5e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d144      	bne.n	800362e <HAL_RCCEx_PeriphCLKConfig+0xe5e>
    {
      /* check for PLLSAIQ Parameter */
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d903      	bls.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0xde4>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	2b0f      	cmp	r3, #15
 80035b2:	d904      	bls.n	80035be <HAL_RCCEx_PeriphCLKConfig+0xdee>
 80035b4:	f240 214b 	movw	r1, #587	; 0x24b
 80035b8:	4876      	ldr	r0, [pc, #472]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 80035ba:	f7fd f92e 	bl	800081a <assert_failed>
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d003      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0xdfe>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ca:	2b20      	cmp	r3, #32
 80035cc:	d904      	bls.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
 80035ce:	f240 214d 	movw	r1, #589	; 0x24d
 80035d2:	4870      	ldr	r0, [pc, #448]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 80035d4:	f7fd f921 	bl	800081a <assert_failed>

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80035d8:	4b6d      	ldr	r3, [pc, #436]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80035da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035de:	0c1b      	lsrs	r3, r3, #16
 80035e0:	f003 0303 	and.w	r3, r3, #3
 80035e4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80035e6:	4b6a      	ldr	r3, [pc, #424]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80035e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ec:	0f1b      	lsrs	r3, r3, #28
 80035ee:	f003 0307 	and.w	r3, r3, #7
 80035f2:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	695b      	ldr	r3, [r3, #20]
 80035f8:	019a      	lsls	r2, r3, #6
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	041b      	lsls	r3, r3, #16
 80035fe:	431a      	orrs	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	061b      	lsls	r3, r3, #24
 8003606:	431a      	orrs	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	071b      	lsls	r3, r3, #28
 800360c:	4960      	ldr	r1, [pc, #384]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800360e:	4313      	orrs	r3, r2
 8003610:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003614:	4b5e      	ldr	r3, [pc, #376]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8003616:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800361a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003622:	3b01      	subs	r3, #1
 8003624:	021b      	lsls	r3, r3, #8
 8003626:	495a      	ldr	r1, [pc, #360]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8003628:	4313      	orrs	r3, r2
 800362a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d037      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0xeda>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800363e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003642:	d132      	bne.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0xeda>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d010      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a1b      	ldr	r3, [r3, #32]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d00c      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a1b      	ldr	r3, [r3, #32]
 8003658:	2b02      	cmp	r3, #2
 800365a:	d008      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a1b      	ldr	r3, [r3, #32]
 8003660:	2b03      	cmp	r3, #3
 8003662:	d004      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8003664:	f44f 7118 	mov.w	r1, #608	; 0x260
 8003668:	484a      	ldr	r0, [pc, #296]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 800366a:	f7fd f8d6 	bl	800081a <assert_failed>
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800366e:	4b48      	ldr	r3, [pc, #288]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8003670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003674:	0e1b      	lsrs	r3, r3, #24
 8003676:	f003 030f 	and.w	r3, r3, #15
 800367a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800367c:	4b44      	ldr	r3, [pc, #272]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800367e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003682:	0f1b      	lsrs	r3, r3, #28
 8003684:	f003 0307 	and.w	r3, r3, #7
 8003688:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	019a      	lsls	r2, r3, #6
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a1b      	ldr	r3, [r3, #32]
 8003694:	041b      	lsls	r3, r3, #16
 8003696:	431a      	orrs	r2, r3
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	061b      	lsls	r3, r3, #24
 800369c:	431a      	orrs	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	071b      	lsls	r3, r3, #28
 80036a2:	493b      	ldr	r1, [pc, #236]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0308 	and.w	r3, r3, #8
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d04d      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0xf82>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	69db      	ldr	r3, [r3, #28]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d903      	bls.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0xef6>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	69db      	ldr	r3, [r3, #28]
 80036c2:	2b07      	cmp	r3, #7
 80036c4:	d904      	bls.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0xf00>
 80036c6:	f240 216f 	movw	r1, #623	; 0x26f
 80036ca:	4832      	ldr	r0, [pc, #200]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 80036cc:	f7fd f8a5 	bl	800081a <assert_failed>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d013      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036e0:	d00e      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036ea:	d009      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80036f4:	d004      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 80036f6:	f44f 711c 	mov.w	r1, #624	; 0x270
 80036fa:	4826      	ldr	r0, [pc, #152]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 80036fc:	f7fd f88d 	bl	800081a <assert_failed>

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003700:	4b23      	ldr	r3, [pc, #140]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8003702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003706:	0e1b      	lsrs	r3, r3, #24
 8003708:	f003 030f 	and.w	r3, r3, #15
 800370c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800370e:	4b20      	ldr	r3, [pc, #128]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8003710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003714:	0c1b      	lsrs	r3, r3, #16
 8003716:	f003 0303 	and.w	r3, r3, #3
 800371a:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	695b      	ldr	r3, [r3, #20]
 8003720:	019a      	lsls	r2, r3, #6
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	041b      	lsls	r3, r3, #16
 8003726:	431a      	orrs	r2, r3
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	061b      	lsls	r3, r3, #24
 800372c:	431a      	orrs	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	69db      	ldr	r3, [r3, #28]
 8003732:	071b      	lsls	r3, r3, #28
 8003734:	4916      	ldr	r1, [pc, #88]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8003736:	4313      	orrs	r3, r2
 8003738:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800373c:	4b14      	ldr	r3, [pc, #80]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800373e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003742:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374a:	4911      	ldr	r1, [pc, #68]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800374c:	4313      	orrs	r3, r2
 800374e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003752:	4b0f      	ldr	r3, [pc, #60]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a0e      	ldr	r2, [pc, #56]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8003758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800375c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800375e:	f7fd fa65 	bl	8000c2c <HAL_GetTick>
 8003762:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003764:	e008      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003766:	f7fd fa61 	bl	8000c2c <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b64      	cmp	r3, #100	; 0x64
 8003772:	d901      	bls.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e007      	b.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003778:	4b05      	ldr	r3, [pc, #20]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003780:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003784:	d1ef      	bne.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0xf96>
      }
    }
  }
  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	3720      	adds	r7, #32
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	40023800 	.word	0x40023800
 8003794:	08005580 	.word	0x08005580

08003798 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d101      	bne.n	80037aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e0f5      	b.n	8003996 <HAL_TIM_Base_Init+0x1fe>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a7c      	ldr	r2, [pc, #496]	; (80039a0 <HAL_TIM_Base_Init+0x208>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d045      	beq.n	8003840 <HAL_TIM_Base_Init+0xa8>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037bc:	d040      	beq.n	8003840 <HAL_TIM_Base_Init+0xa8>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a78      	ldr	r2, [pc, #480]	; (80039a4 <HAL_TIM_Base_Init+0x20c>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d03b      	beq.n	8003840 <HAL_TIM_Base_Init+0xa8>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a76      	ldr	r2, [pc, #472]	; (80039a8 <HAL_TIM_Base_Init+0x210>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d036      	beq.n	8003840 <HAL_TIM_Base_Init+0xa8>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a75      	ldr	r2, [pc, #468]	; (80039ac <HAL_TIM_Base_Init+0x214>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d031      	beq.n	8003840 <HAL_TIM_Base_Init+0xa8>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a73      	ldr	r2, [pc, #460]	; (80039b0 <HAL_TIM_Base_Init+0x218>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d02c      	beq.n	8003840 <HAL_TIM_Base_Init+0xa8>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a72      	ldr	r2, [pc, #456]	; (80039b4 <HAL_TIM_Base_Init+0x21c>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d027      	beq.n	8003840 <HAL_TIM_Base_Init+0xa8>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a70      	ldr	r2, [pc, #448]	; (80039b8 <HAL_TIM_Base_Init+0x220>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d022      	beq.n	8003840 <HAL_TIM_Base_Init+0xa8>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a6f      	ldr	r2, [pc, #444]	; (80039bc <HAL_TIM_Base_Init+0x224>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d01d      	beq.n	8003840 <HAL_TIM_Base_Init+0xa8>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a6d      	ldr	r2, [pc, #436]	; (80039c0 <HAL_TIM_Base_Init+0x228>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d018      	beq.n	8003840 <HAL_TIM_Base_Init+0xa8>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a6c      	ldr	r2, [pc, #432]	; (80039c4 <HAL_TIM_Base_Init+0x22c>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d013      	beq.n	8003840 <HAL_TIM_Base_Init+0xa8>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a6a      	ldr	r2, [pc, #424]	; (80039c8 <HAL_TIM_Base_Init+0x230>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d00e      	beq.n	8003840 <HAL_TIM_Base_Init+0xa8>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a69      	ldr	r2, [pc, #420]	; (80039cc <HAL_TIM_Base_Init+0x234>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d009      	beq.n	8003840 <HAL_TIM_Base_Init+0xa8>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a67      	ldr	r2, [pc, #412]	; (80039d0 <HAL_TIM_Base_Init+0x238>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d004      	beq.n	8003840 <HAL_TIM_Base_Init+0xa8>
 8003836:	f44f 718b 	mov.w	r1, #278	; 0x116
 800383a:	4866      	ldr	r0, [pc, #408]	; (80039d4 <HAL_TIM_Base_Init+0x23c>)
 800383c:	f7fc ffed 	bl	800081a <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d014      	beq.n	8003872 <HAL_TIM_Base_Init+0xda>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	2b10      	cmp	r3, #16
 800384e:	d010      	beq.n	8003872 <HAL_TIM_Base_Init+0xda>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	2b20      	cmp	r3, #32
 8003856:	d00c      	beq.n	8003872 <HAL_TIM_Base_Init+0xda>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	2b40      	cmp	r3, #64	; 0x40
 800385e:	d008      	beq.n	8003872 <HAL_TIM_Base_Init+0xda>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	2b60      	cmp	r3, #96	; 0x60
 8003866:	d004      	beq.n	8003872 <HAL_TIM_Base_Init+0xda>
 8003868:	f240 1117 	movw	r1, #279	; 0x117
 800386c:	4859      	ldr	r0, [pc, #356]	; (80039d4 <HAL_TIM_Base_Init+0x23c>)
 800386e:	f7fc ffd4 	bl	800081a <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00e      	beq.n	8003898 <HAL_TIM_Base_Init+0x100>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003882:	d009      	beq.n	8003898 <HAL_TIM_Base_Init+0x100>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800388c:	d004      	beq.n	8003898 <HAL_TIM_Base_Init+0x100>
 800388e:	f44f 718c 	mov.w	r1, #280	; 0x118
 8003892:	4850      	ldr	r0, [pc, #320]	; (80039d4 <HAL_TIM_Base_Init+0x23c>)
 8003894:	f7fc ffc1 	bl	800081a <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038a0:	d004      	beq.n	80038ac <HAL_TIM_Base_Init+0x114>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a41      	ldr	r2, [pc, #260]	; (80039ac <HAL_TIM_Base_Init+0x214>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d107      	bne.n	80038bc <HAL_TIM_Base_Init+0x124>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	bf14      	ite	ne
 80038b4:	2301      	movne	r3, #1
 80038b6:	2300      	moveq	r3, #0
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	e00e      	b.n	80038da <HAL_TIM_Base_Init+0x142>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d006      	beq.n	80038d2 <HAL_TIM_Base_Init+0x13a>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038cc:	d201      	bcs.n	80038d2 <HAL_TIM_Base_Init+0x13a>
 80038ce:	2301      	movs	r3, #1
 80038d0:	e000      	b.n	80038d4 <HAL_TIM_Base_Init+0x13c>
 80038d2:	2300      	movs	r3, #0
 80038d4:	f003 0301 	and.w	r3, r3, #1
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d104      	bne.n	80038e8 <HAL_TIM_Base_Init+0x150>
 80038de:	f240 1119 	movw	r1, #281	; 0x119
 80038e2:	483c      	ldr	r0, [pc, #240]	; (80039d4 <HAL_TIM_Base_Init+0x23c>)
 80038e4:	f7fc ff99 	bl	800081a <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d008      	beq.n	8003902 <HAL_TIM_Base_Init+0x16a>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	2b80      	cmp	r3, #128	; 0x80
 80038f6:	d004      	beq.n	8003902 <HAL_TIM_Base_Init+0x16a>
 80038f8:	f44f 718d 	mov.w	r1, #282	; 0x11a
 80038fc:	4835      	ldr	r0, [pc, #212]	; (80039d4 <HAL_TIM_Base_Init+0x23c>)
 80038fe:	f7fc ff8c 	bl	800081a <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003908:	b2db      	uxtb	r3, r3
 800390a:	2b00      	cmp	r3, #0
 800390c:	d106      	bne.n	800391c <HAL_TIM_Base_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f7fd f834 	bl	8000984 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2202      	movs	r2, #2
 8003920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	3304      	adds	r3, #4
 800392c:	4619      	mov	r1, r3
 800392e:	4610      	mov	r0, r2
 8003930:	f000 f9a4 	bl	8003c7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3708      	adds	r7, #8
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	40010000 	.word	0x40010000
 80039a4:	40000400 	.word	0x40000400
 80039a8:	40000800 	.word	0x40000800
 80039ac:	40000c00 	.word	0x40000c00
 80039b0:	40001000 	.word	0x40001000
 80039b4:	40001400 	.word	0x40001400
 80039b8:	40010400 	.word	0x40010400
 80039bc:	40014000 	.word	0x40014000
 80039c0:	40014400 	.word	0x40014400
 80039c4:	40014800 	.word	0x40014800
 80039c8:	40001800 	.word	0x40001800
 80039cc:	40001c00 	.word	0x40001c00
 80039d0:	40002000 	.word	0x40002000
 80039d4:	080055bc 	.word	0x080055bc

080039d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	f003 0302 	and.w	r3, r3, #2
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d122      	bne.n	8003a34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	f003 0302 	and.w	r3, r3, #2
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d11b      	bne.n	8003a34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f06f 0202 	mvn.w	r2, #2
 8003a04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	699b      	ldr	r3, [r3, #24]
 8003a12:	f003 0303 	and.w	r3, r3, #3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d003      	beq.n	8003a22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 f90f 	bl	8003c3e <HAL_TIM_IC_CaptureCallback>
 8003a20:	e005      	b.n	8003a2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f901 	bl	8003c2a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f000 f912 	bl	8003c52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	f003 0304 	and.w	r3, r3, #4
 8003a3e:	2b04      	cmp	r3, #4
 8003a40:	d122      	bne.n	8003a88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	f003 0304 	and.w	r3, r3, #4
 8003a4c:	2b04      	cmp	r3, #4
 8003a4e:	d11b      	bne.n	8003a88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f06f 0204 	mvn.w	r2, #4
 8003a58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2202      	movs	r2, #2
 8003a5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 f8e5 	bl	8003c3e <HAL_TIM_IC_CaptureCallback>
 8003a74:	e005      	b.n	8003a82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 f8d7 	bl	8003c2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 f8e8 	bl	8003c52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	f003 0308 	and.w	r3, r3, #8
 8003a92:	2b08      	cmp	r3, #8
 8003a94:	d122      	bne.n	8003adc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	f003 0308 	and.w	r3, r3, #8
 8003aa0:	2b08      	cmp	r3, #8
 8003aa2:	d11b      	bne.n	8003adc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f06f 0208 	mvn.w	r2, #8
 8003aac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2204      	movs	r2, #4
 8003ab2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	69db      	ldr	r3, [r3, #28]
 8003aba:	f003 0303 	and.w	r3, r3, #3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d003      	beq.n	8003aca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 f8bb 	bl	8003c3e <HAL_TIM_IC_CaptureCallback>
 8003ac8:	e005      	b.n	8003ad6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 f8ad 	bl	8003c2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f000 f8be 	bl	8003c52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	f003 0310 	and.w	r3, r3, #16
 8003ae6:	2b10      	cmp	r3, #16
 8003ae8:	d122      	bne.n	8003b30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	f003 0310 	and.w	r3, r3, #16
 8003af4:	2b10      	cmp	r3, #16
 8003af6:	d11b      	bne.n	8003b30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f06f 0210 	mvn.w	r2, #16
 8003b00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2208      	movs	r2, #8
 8003b06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	69db      	ldr	r3, [r3, #28]
 8003b0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d003      	beq.n	8003b1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f891 	bl	8003c3e <HAL_TIM_IC_CaptureCallback>
 8003b1c:	e005      	b.n	8003b2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 f883 	bl	8003c2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f000 f894 	bl	8003c52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d10e      	bne.n	8003b5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	f003 0301 	and.w	r3, r3, #1
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d107      	bne.n	8003b5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f06f 0201 	mvn.w	r2, #1
 8003b54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 f85d 	bl	8003c16 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b66:	2b80      	cmp	r3, #128	; 0x80
 8003b68:	d10e      	bne.n	8003b88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b74:	2b80      	cmp	r3, #128	; 0x80
 8003b76:	d107      	bne.n	8003b88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 fa7c 	bl	8004080 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b96:	d10e      	bne.n	8003bb6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba2:	2b80      	cmp	r3, #128	; 0x80
 8003ba4:	d107      	bne.n	8003bb6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003bae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 fa6f 	bl	8004094 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	691b      	ldr	r3, [r3, #16]
 8003bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc0:	2b40      	cmp	r3, #64	; 0x40
 8003bc2:	d10e      	bne.n	8003be2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bce:	2b40      	cmp	r3, #64	; 0x40
 8003bd0:	d107      	bne.n	8003be2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003bda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f000 f842 	bl	8003c66 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	691b      	ldr	r3, [r3, #16]
 8003be8:	f003 0320 	and.w	r3, r3, #32
 8003bec:	2b20      	cmp	r3, #32
 8003bee:	d10e      	bne.n	8003c0e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	f003 0320 	and.w	r3, r3, #32
 8003bfa:	2b20      	cmp	r3, #32
 8003bfc:	d107      	bne.n	8003c0e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f06f 0220 	mvn.w	r2, #32
 8003c06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 fa2f 	bl	800406c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c0e:	bf00      	nop
 8003c10:	3708      	adds	r7, #8
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c16:	b480      	push	{r7}
 8003c18:	b083      	sub	sp, #12
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003c1e:	bf00      	nop
 8003c20:	370c      	adds	r7, #12
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr

08003c2a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c2a:	b480      	push	{r7}
 8003c2c:	b083      	sub	sp, #12
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c32:	bf00      	nop
 8003c34:	370c      	adds	r7, #12
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr

08003c3e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c3e:	b480      	push	{r7}
 8003c40:	b083      	sub	sp, #12
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c46:	bf00      	nop
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr

08003c52 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c52:	b480      	push	{r7}
 8003c54:	b083      	sub	sp, #12
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c5a:	bf00      	nop
 8003c5c:	370c      	adds	r7, #12
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr

08003c66 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c66:	b480      	push	{r7}
 8003c68:	b083      	sub	sp, #12
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c6e:	bf00      	nop
 8003c70:	370c      	adds	r7, #12
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
	...

08003c7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b085      	sub	sp, #20
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a40      	ldr	r2, [pc, #256]	; (8003d90 <TIM_Base_SetConfig+0x114>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d013      	beq.n	8003cbc <TIM_Base_SetConfig+0x40>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c9a:	d00f      	beq.n	8003cbc <TIM_Base_SetConfig+0x40>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4a3d      	ldr	r2, [pc, #244]	; (8003d94 <TIM_Base_SetConfig+0x118>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d00b      	beq.n	8003cbc <TIM_Base_SetConfig+0x40>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a3c      	ldr	r2, [pc, #240]	; (8003d98 <TIM_Base_SetConfig+0x11c>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d007      	beq.n	8003cbc <TIM_Base_SetConfig+0x40>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4a3b      	ldr	r2, [pc, #236]	; (8003d9c <TIM_Base_SetConfig+0x120>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d003      	beq.n	8003cbc <TIM_Base_SetConfig+0x40>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4a3a      	ldr	r2, [pc, #232]	; (8003da0 <TIM_Base_SetConfig+0x124>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d108      	bne.n	8003cce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	68fa      	ldr	r2, [r7, #12]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a2f      	ldr	r2, [pc, #188]	; (8003d90 <TIM_Base_SetConfig+0x114>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d02b      	beq.n	8003d2e <TIM_Base_SetConfig+0xb2>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cdc:	d027      	beq.n	8003d2e <TIM_Base_SetConfig+0xb2>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a2c      	ldr	r2, [pc, #176]	; (8003d94 <TIM_Base_SetConfig+0x118>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d023      	beq.n	8003d2e <TIM_Base_SetConfig+0xb2>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a2b      	ldr	r2, [pc, #172]	; (8003d98 <TIM_Base_SetConfig+0x11c>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d01f      	beq.n	8003d2e <TIM_Base_SetConfig+0xb2>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a2a      	ldr	r2, [pc, #168]	; (8003d9c <TIM_Base_SetConfig+0x120>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d01b      	beq.n	8003d2e <TIM_Base_SetConfig+0xb2>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a29      	ldr	r2, [pc, #164]	; (8003da0 <TIM_Base_SetConfig+0x124>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d017      	beq.n	8003d2e <TIM_Base_SetConfig+0xb2>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a28      	ldr	r2, [pc, #160]	; (8003da4 <TIM_Base_SetConfig+0x128>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d013      	beq.n	8003d2e <TIM_Base_SetConfig+0xb2>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a27      	ldr	r2, [pc, #156]	; (8003da8 <TIM_Base_SetConfig+0x12c>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d00f      	beq.n	8003d2e <TIM_Base_SetConfig+0xb2>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a26      	ldr	r2, [pc, #152]	; (8003dac <TIM_Base_SetConfig+0x130>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d00b      	beq.n	8003d2e <TIM_Base_SetConfig+0xb2>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a25      	ldr	r2, [pc, #148]	; (8003db0 <TIM_Base_SetConfig+0x134>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d007      	beq.n	8003d2e <TIM_Base_SetConfig+0xb2>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a24      	ldr	r2, [pc, #144]	; (8003db4 <TIM_Base_SetConfig+0x138>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d003      	beq.n	8003d2e <TIM_Base_SetConfig+0xb2>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a23      	ldr	r2, [pc, #140]	; (8003db8 <TIM_Base_SetConfig+0x13c>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d108      	bne.n	8003d40 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	68fa      	ldr	r2, [r7, #12]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	68fa      	ldr	r2, [r7, #12]
 8003d52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	689a      	ldr	r2, [r3, #8]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4a0a      	ldr	r2, [pc, #40]	; (8003d90 <TIM_Base_SetConfig+0x114>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d003      	beq.n	8003d74 <TIM_Base_SetConfig+0xf8>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a0c      	ldr	r2, [pc, #48]	; (8003da0 <TIM_Base_SetConfig+0x124>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d103      	bne.n	8003d7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	691a      	ldr	r2, [r3, #16]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	615a      	str	r2, [r3, #20]
}
 8003d82:	bf00      	nop
 8003d84:	3714      	adds	r7, #20
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	40010000 	.word	0x40010000
 8003d94:	40000400 	.word	0x40000400
 8003d98:	40000800 	.word	0x40000800
 8003d9c:	40000c00 	.word	0x40000c00
 8003da0:	40010400 	.word	0x40010400
 8003da4:	40014000 	.word	0x40014000
 8003da8:	40014400 	.word	0x40014400
 8003dac:	40014800 	.word	0x40014800
 8003db0:	40001800 	.word	0x40001800
 8003db4:	40001c00 	.word	0x40001c00
 8003db8:	40002000 	.word	0x40002000

08003dbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a32      	ldr	r2, [pc, #200]	; (8003e94 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d027      	beq.n	8003e20 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dd8:	d022      	beq.n	8003e20 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a2e      	ldr	r2, [pc, #184]	; (8003e98 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d01d      	beq.n	8003e20 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a2c      	ldr	r2, [pc, #176]	; (8003e9c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d018      	beq.n	8003e20 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a2b      	ldr	r2, [pc, #172]	; (8003ea0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d013      	beq.n	8003e20 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a29      	ldr	r2, [pc, #164]	; (8003ea4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d00e      	beq.n	8003e20 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a28      	ldr	r2, [pc, #160]	; (8003ea8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d009      	beq.n	8003e20 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a26      	ldr	r2, [pc, #152]	; (8003eac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d004      	beq.n	8003e20 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8003e16:	f240 71b6 	movw	r1, #1974	; 0x7b6
 8003e1a:	4825      	ldr	r0, [pc, #148]	; (8003eb0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003e1c:	f7fc fcfd 	bl	800081a <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d020      	beq.n	8003e6a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2b10      	cmp	r3, #16
 8003e2e:	d01c      	beq.n	8003e6a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2b20      	cmp	r3, #32
 8003e36:	d018      	beq.n	8003e6a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2b30      	cmp	r3, #48	; 0x30
 8003e3e:	d014      	beq.n	8003e6a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2b40      	cmp	r3, #64	; 0x40
 8003e46:	d010      	beq.n	8003e6a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2b50      	cmp	r3, #80	; 0x50
 8003e4e:	d00c      	beq.n	8003e6a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2b60      	cmp	r3, #96	; 0x60
 8003e56:	d008      	beq.n	8003e6a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2b70      	cmp	r3, #112	; 0x70
 8003e5e:	d004      	beq.n	8003e6a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003e60:	f240 71b7 	movw	r1, #1975	; 0x7b7
 8003e64:	4812      	ldr	r0, [pc, #72]	; (8003eb0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003e66:	f7fc fcd8 	bl	800081a <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	2b80      	cmp	r3, #128	; 0x80
 8003e70:	d008      	beq.n	8003e84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d004      	beq.n	8003e84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e7a:	f44f 61f7 	mov.w	r1, #1976	; 0x7b8
 8003e7e:	480c      	ldr	r0, [pc, #48]	; (8003eb0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003e80:	f7fc fccb 	bl	800081a <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d112      	bne.n	8003eb4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8003e8e:	2302      	movs	r3, #2
 8003e90:	e0d7      	b.n	8004042 <HAL_TIMEx_MasterConfigSynchronization+0x286>
 8003e92:	bf00      	nop
 8003e94:	40010000 	.word	0x40010000
 8003e98:	40000400 	.word	0x40000400
 8003e9c:	40000800 	.word	0x40000800
 8003ea0:	40000c00 	.word	0x40000c00
 8003ea4:	40001000 	.word	0x40001000
 8003ea8:	40001400 	.word	0x40001400
 8003eac:	40010400 	.word	0x40010400
 8003eb0:	080055f4 	.word	0x080055f4
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2202      	movs	r2, #2
 8003ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a5c      	ldr	r2, [pc, #368]	; (800404c <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d004      	beq.n	8003ee8 <HAL_TIMEx_MasterConfigSynchronization+0x12c>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a5b      	ldr	r2, [pc, #364]	; (8004050 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d161      	bne.n	8003fac <HAL_TIMEx_MasterConfigSynchronization+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d054      	beq.n	8003f9a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ef8:	d04f      	beq.n	8003f9a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f02:	d04a      	beq.n	8003f9a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f0c:	d045      	beq.n	8003f9a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f16:	d040      	beq.n	8003f9a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8003f20:	d03b      	beq.n	8003f9a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003f2a:	d036      	beq.n	8003f9a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003f34:	d031      	beq.n	8003f9a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 8003f3e:	d02c      	beq.n	8003f9a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f48:	d027      	beq.n	8003f9a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f5b3 0f10 	cmp.w	r3, #9437184	; 0x900000
 8003f52:	d022      	beq.n	8003f9a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003f5c:	d01d      	beq.n	8003f9a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f5b3 0f30 	cmp.w	r3, #11534336	; 0xb00000
 8003f66:	d018      	beq.n	8003f9a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f70:	d013      	beq.n	8003f9a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f5b3 0f50 	cmp.w	r3, #13631488	; 0xd00000
 8003f7a:	d00e      	beq.n	8003f9a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f5b3 0f60 	cmp.w	r3, #14680064	; 0xe00000
 8003f84:	d009      	beq.n	8003f9a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f5b3 0f70 	cmp.w	r3, #15728640	; 0xf00000
 8003f8e:	d004      	beq.n	8003f9a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8003f90:	f240 71ca 	movw	r1, #1994	; 0x7ca
 8003f94:	482f      	ldr	r0, [pc, #188]	; (8004054 <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 8003f96:	f7fc fc40 	bl	800081a <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003fa0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68fa      	ldr	r2, [r7, #12]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a20      	ldr	r2, [pc, #128]	; (800404c <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d022      	beq.n	8004016 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fd8:	d01d      	beq.n	8004016 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a1e      	ldr	r2, [pc, #120]	; (8004058 <HAL_TIMEx_MasterConfigSynchronization+0x29c>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d018      	beq.n	8004016 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a1c      	ldr	r2, [pc, #112]	; (800405c <HAL_TIMEx_MasterConfigSynchronization+0x2a0>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d013      	beq.n	8004016 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a1b      	ldr	r2, [pc, #108]	; (8004060 <HAL_TIMEx_MasterConfigSynchronization+0x2a4>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d00e      	beq.n	8004016 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a14      	ldr	r2, [pc, #80]	; (8004050 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d009      	beq.n	8004016 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a17      	ldr	r2, [pc, #92]	; (8004064 <HAL_TIMEx_MasterConfigSynchronization+0x2a8>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d004      	beq.n	8004016 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a15      	ldr	r2, [pc, #84]	; (8004068 <HAL_TIMEx_MasterConfigSynchronization+0x2ac>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d10c      	bne.n	8004030 <HAL_TIMEx_MasterConfigSynchronization+0x274>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800401c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	68ba      	ldr	r2, [r7, #8]
 8004024:	4313      	orrs	r3, r2
 8004026:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68ba      	ldr	r2, [r7, #8]
 800402e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3710      	adds	r7, #16
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	40010000 	.word	0x40010000
 8004050:	40010400 	.word	0x40010400
 8004054:	080055f4 	.word	0x080055f4
 8004058:	40000400 	.word	0x40000400
 800405c:	40000800 	.word	0x40000800
 8004060:	40000c00 	.word	0x40000c00
 8004064:	40014000 	.word	0x40014000
 8004068:	40001800 	.word	0x40001800

0800406c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004074:	bf00      	nop
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d101      	bne.n	80040ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e09f      	b.n	80041fa <HAL_UART_Init+0x152>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	699b      	ldr	r3, [r3, #24]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d02d      	beq.n	800411e <HAL_UART_Init+0x76>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a4f      	ldr	r2, [pc, #316]	; (8004204 <HAL_UART_Init+0x15c>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d055      	beq.n	8004178 <HAL_UART_Init+0xd0>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a4d      	ldr	r2, [pc, #308]	; (8004208 <HAL_UART_Init+0x160>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d050      	beq.n	8004178 <HAL_UART_Init+0xd0>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a4c      	ldr	r2, [pc, #304]	; (800420c <HAL_UART_Init+0x164>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d04b      	beq.n	8004178 <HAL_UART_Init+0xd0>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a4a      	ldr	r2, [pc, #296]	; (8004210 <HAL_UART_Init+0x168>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d046      	beq.n	8004178 <HAL_UART_Init+0xd0>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a49      	ldr	r2, [pc, #292]	; (8004214 <HAL_UART_Init+0x16c>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d041      	beq.n	8004178 <HAL_UART_Init+0xd0>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a47      	ldr	r2, [pc, #284]	; (8004218 <HAL_UART_Init+0x170>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d03c      	beq.n	8004178 <HAL_UART_Init+0xd0>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a46      	ldr	r2, [pc, #280]	; (800421c <HAL_UART_Init+0x174>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d037      	beq.n	8004178 <HAL_UART_Init+0xd0>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a44      	ldr	r2, [pc, #272]	; (8004220 <HAL_UART_Init+0x178>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d032      	beq.n	8004178 <HAL_UART_Init+0xd0>
 8004112:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8004116:	4843      	ldr	r0, [pc, #268]	; (8004224 <HAL_UART_Init+0x17c>)
 8004118:	f7fc fb7f 	bl	800081a <assert_failed>
 800411c:	e02c      	b.n	8004178 <HAL_UART_Init+0xd0>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a38      	ldr	r2, [pc, #224]	; (8004204 <HAL_UART_Init+0x15c>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d027      	beq.n	8004178 <HAL_UART_Init+0xd0>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a36      	ldr	r2, [pc, #216]	; (8004208 <HAL_UART_Init+0x160>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d022      	beq.n	8004178 <HAL_UART_Init+0xd0>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a35      	ldr	r2, [pc, #212]	; (800420c <HAL_UART_Init+0x164>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d01d      	beq.n	8004178 <HAL_UART_Init+0xd0>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a33      	ldr	r2, [pc, #204]	; (8004210 <HAL_UART_Init+0x168>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d018      	beq.n	8004178 <HAL_UART_Init+0xd0>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a32      	ldr	r2, [pc, #200]	; (8004214 <HAL_UART_Init+0x16c>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d013      	beq.n	8004178 <HAL_UART_Init+0xd0>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a30      	ldr	r2, [pc, #192]	; (8004218 <HAL_UART_Init+0x170>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d00e      	beq.n	8004178 <HAL_UART_Init+0xd0>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a2f      	ldr	r2, [pc, #188]	; (800421c <HAL_UART_Init+0x174>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d009      	beq.n	8004178 <HAL_UART_Init+0xd0>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a2d      	ldr	r2, [pc, #180]	; (8004220 <HAL_UART_Init+0x178>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d004      	beq.n	8004178 <HAL_UART_Init+0xd0>
 800416e:	f240 1131 	movw	r1, #305	; 0x131
 8004172:	482c      	ldr	r0, [pc, #176]	; (8004224 <HAL_UART_Init+0x17c>)
 8004174:	f7fc fb51 	bl	800081a <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800417c:	2b00      	cmp	r3, #0
 800417e:	d106      	bne.n	800418e <HAL_UART_Init+0xe6>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f7fc fc4b 	bl	8000a24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2224      	movs	r2, #36	; 0x24
 8004192:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f022 0201 	bic.w	r2, r2, #1
 80041a2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 fb31 	bl	800480c <UART_SetConfig>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d101      	bne.n	80041b4 <HAL_UART_Init+0x10c>
  {
    return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e022      	b.n	80041fa <HAL_UART_Init+0x152>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d002      	beq.n	80041c2 <HAL_UART_Init+0x11a>
  {
    UART_AdvFeatureConfig(huart);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f000 fe1b 	bl	8004df8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	685a      	ldr	r2, [r3, #4]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041d0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	689a      	ldr	r2, [r3, #8]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041e0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f042 0201 	orr.w	r2, r2, #1
 80041f0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 ff58 	bl	80050a8 <UART_CheckIdleState>
 80041f8:	4603      	mov	r3, r0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3708      	adds	r7, #8
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	40011000 	.word	0x40011000
 8004208:	40004400 	.word	0x40004400
 800420c:	40004800 	.word	0x40004800
 8004210:	40004c00 	.word	0x40004c00
 8004214:	40005000 	.word	0x40005000
 8004218:	40011400 	.word	0x40011400
 800421c:	40007800 	.word	0x40007800
 8004220:	40007c00 	.word	0x40007c00
 8004224:	08005630 	.word	0x08005630

08004228 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b0ba      	sub	sp, #232	; 0xe8
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	69db      	ldr	r3, [r3, #28]
 8004236:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800424e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004252:	f640 030f 	movw	r3, #2063	; 0x80f
 8004256:	4013      	ands	r3, r2
 8004258:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800425c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004260:	2b00      	cmp	r3, #0
 8004262:	d115      	bne.n	8004290 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004264:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004268:	f003 0320 	and.w	r3, r3, #32
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00f      	beq.n	8004290 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004274:	f003 0320 	and.w	r3, r3, #32
 8004278:	2b00      	cmp	r3, #0
 800427a:	d009      	beq.n	8004290 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004280:	2b00      	cmp	r3, #0
 8004282:	f000 8297 	beq.w	80047b4 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	4798      	blx	r3
      }
      return;
 800428e:	e291      	b.n	80047b4 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004290:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004294:	2b00      	cmp	r3, #0
 8004296:	f000 8117 	beq.w	80044c8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800429a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d106      	bne.n	80042b4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80042a6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80042aa:	4b85      	ldr	r3, [pc, #532]	; (80044c0 <HAL_UART_IRQHandler+0x298>)
 80042ac:	4013      	ands	r3, r2
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	f000 810a 	beq.w	80044c8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80042b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042b8:	f003 0301 	and.w	r3, r3, #1
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d011      	beq.n	80042e4 <HAL_UART_IRQHandler+0xbc>
 80042c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00b      	beq.n	80042e4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2201      	movs	r2, #1
 80042d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042da:	f043 0201 	orr.w	r2, r3, #1
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80042e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042e8:	f003 0302 	and.w	r3, r3, #2
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d011      	beq.n	8004314 <HAL_UART_IRQHandler+0xec>
 80042f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042f4:	f003 0301 	and.w	r3, r3, #1
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d00b      	beq.n	8004314 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2202      	movs	r2, #2
 8004302:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800430a:	f043 0204 	orr.w	r2, r3, #4
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004314:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004318:	f003 0304 	and.w	r3, r3, #4
 800431c:	2b00      	cmp	r3, #0
 800431e:	d011      	beq.n	8004344 <HAL_UART_IRQHandler+0x11c>
 8004320:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004324:	f003 0301 	and.w	r3, r3, #1
 8004328:	2b00      	cmp	r3, #0
 800432a:	d00b      	beq.n	8004344 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2204      	movs	r2, #4
 8004332:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800433a:	f043 0202 	orr.w	r2, r3, #2
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004344:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004348:	f003 0308 	and.w	r3, r3, #8
 800434c:	2b00      	cmp	r3, #0
 800434e:	d017      	beq.n	8004380 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004350:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004354:	f003 0320 	and.w	r3, r3, #32
 8004358:	2b00      	cmp	r3, #0
 800435a:	d105      	bne.n	8004368 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800435c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004360:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004364:	2b00      	cmp	r3, #0
 8004366:	d00b      	beq.n	8004380 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2208      	movs	r2, #8
 800436e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004376:	f043 0208 	orr.w	r2, r3, #8
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004384:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004388:	2b00      	cmp	r3, #0
 800438a:	d012      	beq.n	80043b2 <HAL_UART_IRQHandler+0x18a>
 800438c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004390:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00c      	beq.n	80043b2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043a8:	f043 0220 	orr.w	r2, r3, #32
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	f000 81fd 	beq.w	80047b8 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80043be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043c2:	f003 0320 	and.w	r3, r3, #32
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00d      	beq.n	80043e6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80043ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043ce:	f003 0320 	and.w	r3, r3, #32
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d007      	beq.n	80043e6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d003      	beq.n	80043e6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043fa:	2b40      	cmp	r3, #64	; 0x40
 80043fc:	d005      	beq.n	800440a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80043fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004402:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004406:	2b00      	cmp	r3, #0
 8004408:	d04f      	beq.n	80044aa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 ff49 	bl	80052a2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800441a:	2b40      	cmp	r3, #64	; 0x40
 800441c:	d141      	bne.n	80044a2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	3308      	adds	r3, #8
 8004424:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004428:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800442c:	e853 3f00 	ldrex	r3, [r3]
 8004430:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004434:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004438:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800443c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	3308      	adds	r3, #8
 8004446:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800444a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800444e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004452:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004456:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800445a:	e841 2300 	strex	r3, r2, [r1]
 800445e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004462:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d1d9      	bne.n	800441e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800446e:	2b00      	cmp	r3, #0
 8004470:	d013      	beq.n	800449a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004476:	4a13      	ldr	r2, [pc, #76]	; (80044c4 <HAL_UART_IRQHandler+0x29c>)
 8004478:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800447e:	4618      	mov	r0, r3
 8004480:	f7fc fd90 	bl	8000fa4 <HAL_DMA_Abort_IT>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d017      	beq.n	80044ba <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800448e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004494:	4610      	mov	r0, r2
 8004496:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004498:	e00f      	b.n	80044ba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 f9a0 	bl	80047e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044a0:	e00b      	b.n	80044ba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 f99c 	bl	80047e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044a8:	e007      	b.n	80044ba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 f998 	bl	80047e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80044b8:	e17e      	b.n	80047b8 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044ba:	bf00      	nop
    return;
 80044bc:	e17c      	b.n	80047b8 <HAL_UART_IRQHandler+0x590>
 80044be:	bf00      	nop
 80044c0:	04000120 	.word	0x04000120
 80044c4:	0800536b 	.word	0x0800536b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	f040 814c 	bne.w	800476a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80044d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044d6:	f003 0310 	and.w	r3, r3, #16
 80044da:	2b00      	cmp	r3, #0
 80044dc:	f000 8145 	beq.w	800476a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80044e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044e4:	f003 0310 	and.w	r3, r3, #16
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	f000 813e 	beq.w	800476a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2210      	movs	r2, #16
 80044f4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004500:	2b40      	cmp	r3, #64	; 0x40
 8004502:	f040 80b6 	bne.w	8004672 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004512:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004516:	2b00      	cmp	r3, #0
 8004518:	f000 8150 	beq.w	80047bc <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004522:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004526:	429a      	cmp	r2, r3
 8004528:	f080 8148 	bcs.w	80047bc <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004532:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800453a:	69db      	ldr	r3, [r3, #28]
 800453c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004540:	f000 8086 	beq.w	8004650 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800454c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004550:	e853 3f00 	ldrex	r3, [r3]
 8004554:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004558:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800455c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004560:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	461a      	mov	r2, r3
 800456a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800456e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004572:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004576:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800457a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800457e:	e841 2300 	strex	r3, r2, [r1]
 8004582:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004586:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1da      	bne.n	8004544 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	3308      	adds	r3, #8
 8004594:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004596:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004598:	e853 3f00 	ldrex	r3, [r3]
 800459c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800459e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045a0:	f023 0301 	bic.w	r3, r3, #1
 80045a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	3308      	adds	r3, #8
 80045ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80045b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80045b6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80045ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80045be:	e841 2300 	strex	r3, r2, [r1]
 80045c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80045c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1e1      	bne.n	800458e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	3308      	adds	r3, #8
 80045d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045d4:	e853 3f00 	ldrex	r3, [r3]
 80045d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80045da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	3308      	adds	r3, #8
 80045ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80045ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80045f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80045f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80045f6:	e841 2300 	strex	r3, r2, [r1]
 80045fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80045fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1e3      	bne.n	80045ca <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2220      	movs	r2, #32
 8004606:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004618:	e853 3f00 	ldrex	r3, [r3]
 800461c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800461e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004620:	f023 0310 	bic.w	r3, r3, #16
 8004624:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	461a      	mov	r2, r3
 800462e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004632:	65bb      	str	r3, [r7, #88]	; 0x58
 8004634:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004636:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004638:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800463a:	e841 2300 	strex	r3, r2, [r1]
 800463e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004640:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1e4      	bne.n	8004610 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800464a:	4618      	mov	r0, r3
 800464c:	f7fc fc3a 	bl	8000ec4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2202      	movs	r2, #2
 8004654:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004662:	b29b      	uxth	r3, r3
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	b29b      	uxth	r3, r3
 8004668:	4619      	mov	r1, r3
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 f8c2 	bl	80047f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004670:	e0a4      	b.n	80047bc <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800467e:	b29b      	uxth	r3, r3
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800468c:	b29b      	uxth	r3, r3
 800468e:	2b00      	cmp	r3, #0
 8004690:	f000 8096 	beq.w	80047c0 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8004694:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004698:	2b00      	cmp	r3, #0
 800469a:	f000 8091 	beq.w	80047c0 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046a6:	e853 3f00 	ldrex	r3, [r3]
 80046aa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80046ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80046b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	461a      	mov	r2, r3
 80046bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80046c0:	647b      	str	r3, [r7, #68]	; 0x44
 80046c2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80046c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046c8:	e841 2300 	strex	r3, r2, [r1]
 80046cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80046ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d1e4      	bne.n	800469e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	3308      	adds	r3, #8
 80046da:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046de:	e853 3f00 	ldrex	r3, [r3]
 80046e2:	623b      	str	r3, [r7, #32]
   return(result);
 80046e4:	6a3b      	ldr	r3, [r7, #32]
 80046e6:	f023 0301 	bic.w	r3, r3, #1
 80046ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	3308      	adds	r3, #8
 80046f4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80046f8:	633a      	str	r2, [r7, #48]	; 0x30
 80046fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004700:	e841 2300 	strex	r3, r2, [r1]
 8004704:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004708:	2b00      	cmp	r3, #0
 800470a:	d1e3      	bne.n	80046d4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2220      	movs	r2, #32
 8004710:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	e853 3f00 	ldrex	r3, [r3]
 800472c:	60fb      	str	r3, [r7, #12]
   return(result);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f023 0310 	bic.w	r3, r3, #16
 8004734:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	461a      	mov	r2, r3
 800473e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004742:	61fb      	str	r3, [r7, #28]
 8004744:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004746:	69b9      	ldr	r1, [r7, #24]
 8004748:	69fa      	ldr	r2, [r7, #28]
 800474a:	e841 2300 	strex	r3, r2, [r1]
 800474e:	617b      	str	r3, [r7, #20]
   return(result);
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d1e4      	bne.n	8004720 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2202      	movs	r2, #2
 800475a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800475c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004760:	4619      	mov	r1, r3
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 f846 	bl	80047f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004768:	e02a      	b.n	80047c0 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800476a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800476e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00e      	beq.n	8004794 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004776:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800477a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800477e:	2b00      	cmp	r3, #0
 8004780:	d008      	beq.n	8004794 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004786:	2b00      	cmp	r3, #0
 8004788:	d01c      	beq.n	80047c4 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	4798      	blx	r3
    }
    return;
 8004792:	e017      	b.n	80047c4 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004794:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800479c:	2b00      	cmp	r3, #0
 800479e:	d012      	beq.n	80047c6 <HAL_UART_IRQHandler+0x59e>
 80047a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00c      	beq.n	80047c6 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f000 fdf2 	bl	8005396 <UART_EndTransmit_IT>
    return;
 80047b2:	e008      	b.n	80047c6 <HAL_UART_IRQHandler+0x59e>
      return;
 80047b4:	bf00      	nop
 80047b6:	e006      	b.n	80047c6 <HAL_UART_IRQHandler+0x59e>
    return;
 80047b8:	bf00      	nop
 80047ba:	e004      	b.n	80047c6 <HAL_UART_IRQHandler+0x59e>
      return;
 80047bc:	bf00      	nop
 80047be:	e002      	b.n	80047c6 <HAL_UART_IRQHandler+0x59e>
      return;
 80047c0:	bf00      	nop
 80047c2:	e000      	b.n	80047c6 <HAL_UART_IRQHandler+0x59e>
    return;
 80047c4:	bf00      	nop
  }

}
 80047c6:	37e8      	adds	r7, #232	; 0xe8
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80047e8:	bf00      	nop
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	460b      	mov	r3, r1
 80047fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004800:	bf00      	nop
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b088      	sub	sp, #32
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004814:	2300      	movs	r3, #0
 8004816:	77bb      	strb	r3, [r7, #30]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	4aa0      	ldr	r2, [pc, #640]	; (8004aa0 <UART_SetConfig+0x294>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d904      	bls.n	800482c <UART_SetConfig+0x20>
 8004822:	f640 315d 	movw	r1, #2909	; 0xb5d
 8004826:	489f      	ldr	r0, [pc, #636]	; (8004aa4 <UART_SetConfig+0x298>)
 8004828:	f7fb fff7 	bl	800081a <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004834:	d00d      	beq.n	8004852 <UART_SetConfig+0x46>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d009      	beq.n	8004852 <UART_SetConfig+0x46>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004846:	d004      	beq.n	8004852 <UART_SetConfig+0x46>
 8004848:	f640 315e 	movw	r1, #2910	; 0xb5e
 800484c:	4895      	ldr	r0, [pc, #596]	; (8004aa4 <UART_SetConfig+0x298>)
 800484e:	f7fb ffe4 	bl	800081a <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800485a:	d012      	beq.n	8004882 <UART_SetConfig+0x76>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d00e      	beq.n	8004882 <UART_SetConfig+0x76>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800486c:	d009      	beq.n	8004882 <UART_SetConfig+0x76>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004876:	d004      	beq.n	8004882 <UART_SetConfig+0x76>
 8004878:	f640 315f 	movw	r1, #2911	; 0xb5f
 800487c:	4889      	ldr	r0, [pc, #548]	; (8004aa4 <UART_SetConfig+0x298>)
 800487e:	f7fb ffcc 	bl	800081a <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a1b      	ldr	r3, [r3, #32]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d009      	beq.n	800489e <UART_SetConfig+0x92>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a1b      	ldr	r3, [r3, #32]
 800488e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004892:	d004      	beq.n	800489e <UART_SetConfig+0x92>
 8004894:	f44f 6136 	mov.w	r1, #2912	; 0xb60
 8004898:	4882      	ldr	r0, [pc, #520]	; (8004aa4 <UART_SetConfig+0x298>)
 800489a:	f7fb ffbe 	bl	800081a <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00e      	beq.n	80048c4 <UART_SetConfig+0xb8>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048ae:	d009      	beq.n	80048c4 <UART_SetConfig+0xb8>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80048b8:	d004      	beq.n	80048c4 <UART_SetConfig+0xb8>
 80048ba:	f640 3162 	movw	r1, #2914	; 0xb62
 80048be:	4879      	ldr	r0, [pc, #484]	; (8004aa4 <UART_SetConfig+0x298>)
 80048c0:	f7fb ffab 	bl	800081a <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	695b      	ldr	r3, [r3, #20]
 80048c8:	f023 030c 	bic.w	r3, r3, #12
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d103      	bne.n	80048d8 <UART_SetConfig+0xcc>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	695b      	ldr	r3, [r3, #20]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d104      	bne.n	80048e2 <UART_SetConfig+0xd6>
 80048d8:	f640 3163 	movw	r1, #2915	; 0xb63
 80048dc:	4871      	ldr	r0, [pc, #452]	; (8004aa4 <UART_SetConfig+0x298>)
 80048de:	f7fb ff9c 	bl	800081a <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d013      	beq.n	8004912 <UART_SetConfig+0x106>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	699b      	ldr	r3, [r3, #24]
 80048ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048f2:	d00e      	beq.n	8004912 <UART_SetConfig+0x106>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	699b      	ldr	r3, [r3, #24]
 80048f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048fc:	d009      	beq.n	8004912 <UART_SetConfig+0x106>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004906:	d004      	beq.n	8004912 <UART_SetConfig+0x106>
 8004908:	f640 3164 	movw	r1, #2916	; 0xb64
 800490c:	4865      	ldr	r0, [pc, #404]	; (8004aa4 <UART_SetConfig+0x298>)
 800490e:	f7fb ff84 	bl	800081a <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	69db      	ldr	r3, [r3, #28]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d009      	beq.n	800492e <UART_SetConfig+0x122>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	69db      	ldr	r3, [r3, #28]
 800491e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004922:	d004      	beq.n	800492e <UART_SetConfig+0x122>
 8004924:	f640 3165 	movw	r1, #2917	; 0xb65
 8004928:	485e      	ldr	r0, [pc, #376]	; (8004aa4 <UART_SetConfig+0x298>)
 800492a:	f7fb ff76 	bl	800081a <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	689a      	ldr	r2, [r3, #8]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	431a      	orrs	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	695b      	ldr	r3, [r3, #20]
 800493c:	431a      	orrs	r2, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	69db      	ldr	r3, [r3, #28]
 8004942:	4313      	orrs	r3, r2
 8004944:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	4b56      	ldr	r3, [pc, #344]	; (8004aa8 <UART_SetConfig+0x29c>)
 800494e:	4013      	ands	r3, r2
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	6812      	ldr	r2, [r2, #0]
 8004954:	6979      	ldr	r1, [r7, #20]
 8004956:	430b      	orrs	r3, r1
 8004958:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	68da      	ldr	r2, [r3, #12]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	430a      	orrs	r2, r1
 800496e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a1b      	ldr	r3, [r3, #32]
 800497a:	697a      	ldr	r2, [r7, #20]
 800497c:	4313      	orrs	r3, r2
 800497e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	697a      	ldr	r2, [r7, #20]
 8004990:	430a      	orrs	r2, r1
 8004992:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a44      	ldr	r2, [pc, #272]	; (8004aac <UART_SetConfig+0x2a0>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d121      	bne.n	80049e2 <UART_SetConfig+0x1d6>
 800499e:	4b44      	ldr	r3, [pc, #272]	; (8004ab0 <UART_SetConfig+0x2a4>)
 80049a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049a4:	f003 0303 	and.w	r3, r3, #3
 80049a8:	2b03      	cmp	r3, #3
 80049aa:	d817      	bhi.n	80049dc <UART_SetConfig+0x1d0>
 80049ac:	a201      	add	r2, pc, #4	; (adr r2, 80049b4 <UART_SetConfig+0x1a8>)
 80049ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b2:	bf00      	nop
 80049b4:	080049c5 	.word	0x080049c5
 80049b8:	080049d1 	.word	0x080049d1
 80049bc:	080049cb 	.word	0x080049cb
 80049c0:	080049d7 	.word	0x080049d7
 80049c4:	2301      	movs	r3, #1
 80049c6:	77fb      	strb	r3, [r7, #31]
 80049c8:	e14c      	b.n	8004c64 <UART_SetConfig+0x458>
 80049ca:	2302      	movs	r3, #2
 80049cc:	77fb      	strb	r3, [r7, #31]
 80049ce:	e149      	b.n	8004c64 <UART_SetConfig+0x458>
 80049d0:	2304      	movs	r3, #4
 80049d2:	77fb      	strb	r3, [r7, #31]
 80049d4:	e146      	b.n	8004c64 <UART_SetConfig+0x458>
 80049d6:	2308      	movs	r3, #8
 80049d8:	77fb      	strb	r3, [r7, #31]
 80049da:	e143      	b.n	8004c64 <UART_SetConfig+0x458>
 80049dc:	2310      	movs	r3, #16
 80049de:	77fb      	strb	r3, [r7, #31]
 80049e0:	e140      	b.n	8004c64 <UART_SetConfig+0x458>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a33      	ldr	r2, [pc, #204]	; (8004ab4 <UART_SetConfig+0x2a8>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d132      	bne.n	8004a52 <UART_SetConfig+0x246>
 80049ec:	4b30      	ldr	r3, [pc, #192]	; (8004ab0 <UART_SetConfig+0x2a4>)
 80049ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f2:	f003 030c 	and.w	r3, r3, #12
 80049f6:	2b0c      	cmp	r3, #12
 80049f8:	d828      	bhi.n	8004a4c <UART_SetConfig+0x240>
 80049fa:	a201      	add	r2, pc, #4	; (adr r2, 8004a00 <UART_SetConfig+0x1f4>)
 80049fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a00:	08004a35 	.word	0x08004a35
 8004a04:	08004a4d 	.word	0x08004a4d
 8004a08:	08004a4d 	.word	0x08004a4d
 8004a0c:	08004a4d 	.word	0x08004a4d
 8004a10:	08004a41 	.word	0x08004a41
 8004a14:	08004a4d 	.word	0x08004a4d
 8004a18:	08004a4d 	.word	0x08004a4d
 8004a1c:	08004a4d 	.word	0x08004a4d
 8004a20:	08004a3b 	.word	0x08004a3b
 8004a24:	08004a4d 	.word	0x08004a4d
 8004a28:	08004a4d 	.word	0x08004a4d
 8004a2c:	08004a4d 	.word	0x08004a4d
 8004a30:	08004a47 	.word	0x08004a47
 8004a34:	2300      	movs	r3, #0
 8004a36:	77fb      	strb	r3, [r7, #31]
 8004a38:	e114      	b.n	8004c64 <UART_SetConfig+0x458>
 8004a3a:	2302      	movs	r3, #2
 8004a3c:	77fb      	strb	r3, [r7, #31]
 8004a3e:	e111      	b.n	8004c64 <UART_SetConfig+0x458>
 8004a40:	2304      	movs	r3, #4
 8004a42:	77fb      	strb	r3, [r7, #31]
 8004a44:	e10e      	b.n	8004c64 <UART_SetConfig+0x458>
 8004a46:	2308      	movs	r3, #8
 8004a48:	77fb      	strb	r3, [r7, #31]
 8004a4a:	e10b      	b.n	8004c64 <UART_SetConfig+0x458>
 8004a4c:	2310      	movs	r3, #16
 8004a4e:	77fb      	strb	r3, [r7, #31]
 8004a50:	e108      	b.n	8004c64 <UART_SetConfig+0x458>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a18      	ldr	r2, [pc, #96]	; (8004ab8 <UART_SetConfig+0x2ac>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d12f      	bne.n	8004abc <UART_SetConfig+0x2b0>
 8004a5c:	4b14      	ldr	r3, [pc, #80]	; (8004ab0 <UART_SetConfig+0x2a4>)
 8004a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a62:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004a66:	2b30      	cmp	r3, #48	; 0x30
 8004a68:	d013      	beq.n	8004a92 <UART_SetConfig+0x286>
 8004a6a:	2b30      	cmp	r3, #48	; 0x30
 8004a6c:	d814      	bhi.n	8004a98 <UART_SetConfig+0x28c>
 8004a6e:	2b20      	cmp	r3, #32
 8004a70:	d009      	beq.n	8004a86 <UART_SetConfig+0x27a>
 8004a72:	2b20      	cmp	r3, #32
 8004a74:	d810      	bhi.n	8004a98 <UART_SetConfig+0x28c>
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d002      	beq.n	8004a80 <UART_SetConfig+0x274>
 8004a7a:	2b10      	cmp	r3, #16
 8004a7c:	d006      	beq.n	8004a8c <UART_SetConfig+0x280>
 8004a7e:	e00b      	b.n	8004a98 <UART_SetConfig+0x28c>
 8004a80:	2300      	movs	r3, #0
 8004a82:	77fb      	strb	r3, [r7, #31]
 8004a84:	e0ee      	b.n	8004c64 <UART_SetConfig+0x458>
 8004a86:	2302      	movs	r3, #2
 8004a88:	77fb      	strb	r3, [r7, #31]
 8004a8a:	e0eb      	b.n	8004c64 <UART_SetConfig+0x458>
 8004a8c:	2304      	movs	r3, #4
 8004a8e:	77fb      	strb	r3, [r7, #31]
 8004a90:	e0e8      	b.n	8004c64 <UART_SetConfig+0x458>
 8004a92:	2308      	movs	r3, #8
 8004a94:	77fb      	strb	r3, [r7, #31]
 8004a96:	e0e5      	b.n	8004c64 <UART_SetConfig+0x458>
 8004a98:	2310      	movs	r3, #16
 8004a9a:	77fb      	strb	r3, [r7, #31]
 8004a9c:	e0e2      	b.n	8004c64 <UART_SetConfig+0x458>
 8004a9e:	bf00      	nop
 8004aa0:	019bfcc0 	.word	0x019bfcc0
 8004aa4:	08005630 	.word	0x08005630
 8004aa8:	efff69f3 	.word	0xefff69f3
 8004aac:	40011000 	.word	0x40011000
 8004ab0:	40023800 	.word	0x40023800
 8004ab4:	40004400 	.word	0x40004400
 8004ab8:	40004800 	.word	0x40004800
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4aa5      	ldr	r2, [pc, #660]	; (8004d58 <UART_SetConfig+0x54c>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d120      	bne.n	8004b08 <UART_SetConfig+0x2fc>
 8004ac6:	4ba5      	ldr	r3, [pc, #660]	; (8004d5c <UART_SetConfig+0x550>)
 8004ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004acc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004ad0:	2bc0      	cmp	r3, #192	; 0xc0
 8004ad2:	d013      	beq.n	8004afc <UART_SetConfig+0x2f0>
 8004ad4:	2bc0      	cmp	r3, #192	; 0xc0
 8004ad6:	d814      	bhi.n	8004b02 <UART_SetConfig+0x2f6>
 8004ad8:	2b80      	cmp	r3, #128	; 0x80
 8004ada:	d009      	beq.n	8004af0 <UART_SetConfig+0x2e4>
 8004adc:	2b80      	cmp	r3, #128	; 0x80
 8004ade:	d810      	bhi.n	8004b02 <UART_SetConfig+0x2f6>
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d002      	beq.n	8004aea <UART_SetConfig+0x2de>
 8004ae4:	2b40      	cmp	r3, #64	; 0x40
 8004ae6:	d006      	beq.n	8004af6 <UART_SetConfig+0x2ea>
 8004ae8:	e00b      	b.n	8004b02 <UART_SetConfig+0x2f6>
 8004aea:	2300      	movs	r3, #0
 8004aec:	77fb      	strb	r3, [r7, #31]
 8004aee:	e0b9      	b.n	8004c64 <UART_SetConfig+0x458>
 8004af0:	2302      	movs	r3, #2
 8004af2:	77fb      	strb	r3, [r7, #31]
 8004af4:	e0b6      	b.n	8004c64 <UART_SetConfig+0x458>
 8004af6:	2304      	movs	r3, #4
 8004af8:	77fb      	strb	r3, [r7, #31]
 8004afa:	e0b3      	b.n	8004c64 <UART_SetConfig+0x458>
 8004afc:	2308      	movs	r3, #8
 8004afe:	77fb      	strb	r3, [r7, #31]
 8004b00:	e0b0      	b.n	8004c64 <UART_SetConfig+0x458>
 8004b02:	2310      	movs	r3, #16
 8004b04:	77fb      	strb	r3, [r7, #31]
 8004b06:	e0ad      	b.n	8004c64 <UART_SetConfig+0x458>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a94      	ldr	r2, [pc, #592]	; (8004d60 <UART_SetConfig+0x554>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d125      	bne.n	8004b5e <UART_SetConfig+0x352>
 8004b12:	4b92      	ldr	r3, [pc, #584]	; (8004d5c <UART_SetConfig+0x550>)
 8004b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b20:	d017      	beq.n	8004b52 <UART_SetConfig+0x346>
 8004b22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b26:	d817      	bhi.n	8004b58 <UART_SetConfig+0x34c>
 8004b28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b2c:	d00b      	beq.n	8004b46 <UART_SetConfig+0x33a>
 8004b2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b32:	d811      	bhi.n	8004b58 <UART_SetConfig+0x34c>
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d003      	beq.n	8004b40 <UART_SetConfig+0x334>
 8004b38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b3c:	d006      	beq.n	8004b4c <UART_SetConfig+0x340>
 8004b3e:	e00b      	b.n	8004b58 <UART_SetConfig+0x34c>
 8004b40:	2300      	movs	r3, #0
 8004b42:	77fb      	strb	r3, [r7, #31]
 8004b44:	e08e      	b.n	8004c64 <UART_SetConfig+0x458>
 8004b46:	2302      	movs	r3, #2
 8004b48:	77fb      	strb	r3, [r7, #31]
 8004b4a:	e08b      	b.n	8004c64 <UART_SetConfig+0x458>
 8004b4c:	2304      	movs	r3, #4
 8004b4e:	77fb      	strb	r3, [r7, #31]
 8004b50:	e088      	b.n	8004c64 <UART_SetConfig+0x458>
 8004b52:	2308      	movs	r3, #8
 8004b54:	77fb      	strb	r3, [r7, #31]
 8004b56:	e085      	b.n	8004c64 <UART_SetConfig+0x458>
 8004b58:	2310      	movs	r3, #16
 8004b5a:	77fb      	strb	r3, [r7, #31]
 8004b5c:	e082      	b.n	8004c64 <UART_SetConfig+0x458>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a80      	ldr	r2, [pc, #512]	; (8004d64 <UART_SetConfig+0x558>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d125      	bne.n	8004bb4 <UART_SetConfig+0x3a8>
 8004b68:	4b7c      	ldr	r3, [pc, #496]	; (8004d5c <UART_SetConfig+0x550>)
 8004b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b6e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004b72:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b76:	d017      	beq.n	8004ba8 <UART_SetConfig+0x39c>
 8004b78:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b7c:	d817      	bhi.n	8004bae <UART_SetConfig+0x3a2>
 8004b7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b82:	d00b      	beq.n	8004b9c <UART_SetConfig+0x390>
 8004b84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b88:	d811      	bhi.n	8004bae <UART_SetConfig+0x3a2>
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d003      	beq.n	8004b96 <UART_SetConfig+0x38a>
 8004b8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b92:	d006      	beq.n	8004ba2 <UART_SetConfig+0x396>
 8004b94:	e00b      	b.n	8004bae <UART_SetConfig+0x3a2>
 8004b96:	2301      	movs	r3, #1
 8004b98:	77fb      	strb	r3, [r7, #31]
 8004b9a:	e063      	b.n	8004c64 <UART_SetConfig+0x458>
 8004b9c:	2302      	movs	r3, #2
 8004b9e:	77fb      	strb	r3, [r7, #31]
 8004ba0:	e060      	b.n	8004c64 <UART_SetConfig+0x458>
 8004ba2:	2304      	movs	r3, #4
 8004ba4:	77fb      	strb	r3, [r7, #31]
 8004ba6:	e05d      	b.n	8004c64 <UART_SetConfig+0x458>
 8004ba8:	2308      	movs	r3, #8
 8004baa:	77fb      	strb	r3, [r7, #31]
 8004bac:	e05a      	b.n	8004c64 <UART_SetConfig+0x458>
 8004bae:	2310      	movs	r3, #16
 8004bb0:	77fb      	strb	r3, [r7, #31]
 8004bb2:	e057      	b.n	8004c64 <UART_SetConfig+0x458>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a6b      	ldr	r2, [pc, #428]	; (8004d68 <UART_SetConfig+0x55c>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d125      	bne.n	8004c0a <UART_SetConfig+0x3fe>
 8004bbe:	4b67      	ldr	r3, [pc, #412]	; (8004d5c <UART_SetConfig+0x550>)
 8004bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004bc8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004bcc:	d017      	beq.n	8004bfe <UART_SetConfig+0x3f2>
 8004bce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004bd2:	d817      	bhi.n	8004c04 <UART_SetConfig+0x3f8>
 8004bd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bd8:	d00b      	beq.n	8004bf2 <UART_SetConfig+0x3e6>
 8004bda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bde:	d811      	bhi.n	8004c04 <UART_SetConfig+0x3f8>
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d003      	beq.n	8004bec <UART_SetConfig+0x3e0>
 8004be4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004be8:	d006      	beq.n	8004bf8 <UART_SetConfig+0x3ec>
 8004bea:	e00b      	b.n	8004c04 <UART_SetConfig+0x3f8>
 8004bec:	2300      	movs	r3, #0
 8004bee:	77fb      	strb	r3, [r7, #31]
 8004bf0:	e038      	b.n	8004c64 <UART_SetConfig+0x458>
 8004bf2:	2302      	movs	r3, #2
 8004bf4:	77fb      	strb	r3, [r7, #31]
 8004bf6:	e035      	b.n	8004c64 <UART_SetConfig+0x458>
 8004bf8:	2304      	movs	r3, #4
 8004bfa:	77fb      	strb	r3, [r7, #31]
 8004bfc:	e032      	b.n	8004c64 <UART_SetConfig+0x458>
 8004bfe:	2308      	movs	r3, #8
 8004c00:	77fb      	strb	r3, [r7, #31]
 8004c02:	e02f      	b.n	8004c64 <UART_SetConfig+0x458>
 8004c04:	2310      	movs	r3, #16
 8004c06:	77fb      	strb	r3, [r7, #31]
 8004c08:	e02c      	b.n	8004c64 <UART_SetConfig+0x458>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a57      	ldr	r2, [pc, #348]	; (8004d6c <UART_SetConfig+0x560>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d125      	bne.n	8004c60 <UART_SetConfig+0x454>
 8004c14:	4b51      	ldr	r3, [pc, #324]	; (8004d5c <UART_SetConfig+0x550>)
 8004c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c1a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004c1e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004c22:	d017      	beq.n	8004c54 <UART_SetConfig+0x448>
 8004c24:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004c28:	d817      	bhi.n	8004c5a <UART_SetConfig+0x44e>
 8004c2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c2e:	d00b      	beq.n	8004c48 <UART_SetConfig+0x43c>
 8004c30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c34:	d811      	bhi.n	8004c5a <UART_SetConfig+0x44e>
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d003      	beq.n	8004c42 <UART_SetConfig+0x436>
 8004c3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c3e:	d006      	beq.n	8004c4e <UART_SetConfig+0x442>
 8004c40:	e00b      	b.n	8004c5a <UART_SetConfig+0x44e>
 8004c42:	2300      	movs	r3, #0
 8004c44:	77fb      	strb	r3, [r7, #31]
 8004c46:	e00d      	b.n	8004c64 <UART_SetConfig+0x458>
 8004c48:	2302      	movs	r3, #2
 8004c4a:	77fb      	strb	r3, [r7, #31]
 8004c4c:	e00a      	b.n	8004c64 <UART_SetConfig+0x458>
 8004c4e:	2304      	movs	r3, #4
 8004c50:	77fb      	strb	r3, [r7, #31]
 8004c52:	e007      	b.n	8004c64 <UART_SetConfig+0x458>
 8004c54:	2308      	movs	r3, #8
 8004c56:	77fb      	strb	r3, [r7, #31]
 8004c58:	e004      	b.n	8004c64 <UART_SetConfig+0x458>
 8004c5a:	2310      	movs	r3, #16
 8004c5c:	77fb      	strb	r3, [r7, #31]
 8004c5e:	e001      	b.n	8004c64 <UART_SetConfig+0x458>
 8004c60:	2310      	movs	r3, #16
 8004c62:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	69db      	ldr	r3, [r3, #28]
 8004c68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c6c:	d15c      	bne.n	8004d28 <UART_SetConfig+0x51c>
  {
    switch (clocksource)
 8004c6e:	7ffb      	ldrb	r3, [r7, #31]
 8004c70:	2b08      	cmp	r3, #8
 8004c72:	d828      	bhi.n	8004cc6 <UART_SetConfig+0x4ba>
 8004c74:	a201      	add	r2, pc, #4	; (adr r2, 8004c7c <UART_SetConfig+0x470>)
 8004c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c7a:	bf00      	nop
 8004c7c:	08004ca1 	.word	0x08004ca1
 8004c80:	08004ca9 	.word	0x08004ca9
 8004c84:	08004cb1 	.word	0x08004cb1
 8004c88:	08004cc7 	.word	0x08004cc7
 8004c8c:	08004cb7 	.word	0x08004cb7
 8004c90:	08004cc7 	.word	0x08004cc7
 8004c94:	08004cc7 	.word	0x08004cc7
 8004c98:	08004cc7 	.word	0x08004cc7
 8004c9c:	08004cbf 	.word	0x08004cbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ca0:	f7fd fd6e 	bl	8002780 <HAL_RCC_GetPCLK1Freq>
 8004ca4:	61b8      	str	r0, [r7, #24]
        break;
 8004ca6:	e013      	b.n	8004cd0 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ca8:	f7fd fd7e 	bl	80027a8 <HAL_RCC_GetPCLK2Freq>
 8004cac:	61b8      	str	r0, [r7, #24]
        break;
 8004cae:	e00f      	b.n	8004cd0 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cb0:	4b2f      	ldr	r3, [pc, #188]	; (8004d70 <UART_SetConfig+0x564>)
 8004cb2:	61bb      	str	r3, [r7, #24]
        break;
 8004cb4:	e00c      	b.n	8004cd0 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cb6:	f7fd fc91 	bl	80025dc <HAL_RCC_GetSysClockFreq>
 8004cba:	61b8      	str	r0, [r7, #24]
        break;
 8004cbc:	e008      	b.n	8004cd0 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cc2:	61bb      	str	r3, [r7, #24]
        break;
 8004cc4:	e004      	b.n	8004cd0 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	77bb      	strb	r3, [r7, #30]
        break;
 8004cce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	f000 8082 	beq.w	8004ddc <UART_SetConfig+0x5d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	005a      	lsls	r2, r3, #1
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	085b      	lsrs	r3, r3, #1
 8004ce2:	441a      	add	r2, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	2b0f      	cmp	r3, #15
 8004cf2:	d916      	bls.n	8004d22 <UART_SetConfig+0x516>
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cfa:	d212      	bcs.n	8004d22 <UART_SetConfig+0x516>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	f023 030f 	bic.w	r3, r3, #15
 8004d04:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	085b      	lsrs	r3, r3, #1
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	f003 0307 	and.w	r3, r3, #7
 8004d10:	b29a      	uxth	r2, r3
 8004d12:	89fb      	ldrh	r3, [r7, #14]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	89fa      	ldrh	r2, [r7, #14]
 8004d1e:	60da      	str	r2, [r3, #12]
 8004d20:	e05c      	b.n	8004ddc <UART_SetConfig+0x5d0>
      }
      else
      {
        ret = HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	77bb      	strb	r3, [r7, #30]
 8004d26:	e059      	b.n	8004ddc <UART_SetConfig+0x5d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d28:	7ffb      	ldrb	r3, [r7, #31]
 8004d2a:	2b08      	cmp	r3, #8
 8004d2c:	d835      	bhi.n	8004d9a <UART_SetConfig+0x58e>
 8004d2e:	a201      	add	r2, pc, #4	; (adr r2, 8004d34 <UART_SetConfig+0x528>)
 8004d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d34:	08004d75 	.word	0x08004d75
 8004d38:	08004d7d 	.word	0x08004d7d
 8004d3c:	08004d85 	.word	0x08004d85
 8004d40:	08004d9b 	.word	0x08004d9b
 8004d44:	08004d8b 	.word	0x08004d8b
 8004d48:	08004d9b 	.word	0x08004d9b
 8004d4c:	08004d9b 	.word	0x08004d9b
 8004d50:	08004d9b 	.word	0x08004d9b
 8004d54:	08004d93 	.word	0x08004d93
 8004d58:	40004c00 	.word	0x40004c00
 8004d5c:	40023800 	.word	0x40023800
 8004d60:	40005000 	.word	0x40005000
 8004d64:	40011400 	.word	0x40011400
 8004d68:	40007800 	.word	0x40007800
 8004d6c:	40007c00 	.word	0x40007c00
 8004d70:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d74:	f7fd fd04 	bl	8002780 <HAL_RCC_GetPCLK1Freq>
 8004d78:	61b8      	str	r0, [r7, #24]
        break;
 8004d7a:	e013      	b.n	8004da4 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d7c:	f7fd fd14 	bl	80027a8 <HAL_RCC_GetPCLK2Freq>
 8004d80:	61b8      	str	r0, [r7, #24]
        break;
 8004d82:	e00f      	b.n	8004da4 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d84:	4b1b      	ldr	r3, [pc, #108]	; (8004df4 <UART_SetConfig+0x5e8>)
 8004d86:	61bb      	str	r3, [r7, #24]
        break;
 8004d88:	e00c      	b.n	8004da4 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d8a:	f7fd fc27 	bl	80025dc <HAL_RCC_GetSysClockFreq>
 8004d8e:	61b8      	str	r0, [r7, #24]
        break;
 8004d90:	e008      	b.n	8004da4 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d96:	61bb      	str	r3, [r7, #24]
        break;
 8004d98:	e004      	b.n	8004da4 <UART_SetConfig+0x598>
      default:
        pclk = 0U;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	77bb      	strb	r3, [r7, #30]
        break;
 8004da2:	bf00      	nop
    }

    if (pclk != 0U)
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d018      	beq.n	8004ddc <UART_SetConfig+0x5d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	085a      	lsrs	r2, r3, #1
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	441a      	add	r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dbc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	2b0f      	cmp	r3, #15
 8004dc2:	d909      	bls.n	8004dd8 <UART_SetConfig+0x5cc>
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dca:	d205      	bcs.n	8004dd8 <UART_SetConfig+0x5cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	b29a      	uxth	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	60da      	str	r2, [r3, #12]
 8004dd6:	e001      	b.n	8004ddc <UART_SetConfig+0x5d0>
      }
      else
      {
        ret = HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004de8:	7fbb      	ldrb	r3, [r7, #30]
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3720      	adds	r7, #32
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	00f42400 	.word	0x00f42400

08004df8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e04:	2bff      	cmp	r3, #255	; 0xff
 8004e06:	d904      	bls.n	8004e12 <UART_AdvFeatureConfig+0x1a>
 8004e08:	f640 31e6 	movw	r1, #3046	; 0xbe6
 8004e0c:	488e      	ldr	r0, [pc, #568]	; (8005048 <UART_AdvFeatureConfig+0x250>)
 8004e0e:	f7fb fd04 	bl	800081a <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e16:	f003 0301 	and.w	r3, r3, #1
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d018      	beq.n	8004e50 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d009      	beq.n	8004e3a <UART_AdvFeatureConfig+0x42>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e2e:	d004      	beq.n	8004e3a <UART_AdvFeatureConfig+0x42>
 8004e30:	f640 31eb 	movw	r1, #3051	; 0xbeb
 8004e34:	4884      	ldr	r0, [pc, #528]	; (8005048 <UART_AdvFeatureConfig+0x250>)
 8004e36:	f7fb fcf0 	bl	800081a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e54:	f003 0302 	and.w	r3, r3, #2
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d018      	beq.n	8004e8e <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d009      	beq.n	8004e78 <UART_AdvFeatureConfig+0x80>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e6c:	d004      	beq.n	8004e78 <UART_AdvFeatureConfig+0x80>
 8004e6e:	f640 31f2 	movw	r1, #3058	; 0xbf2
 8004e72:	4875      	ldr	r0, [pc, #468]	; (8005048 <UART_AdvFeatureConfig+0x250>)
 8004e74:	f7fb fcd1 	bl	800081a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	430a      	orrs	r2, r1
 8004e8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e92:	f003 0304 	and.w	r3, r3, #4
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d018      	beq.n	8004ecc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d009      	beq.n	8004eb6 <UART_AdvFeatureConfig+0xbe>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004eaa:	d004      	beq.n	8004eb6 <UART_AdvFeatureConfig+0xbe>
 8004eac:	f640 31f9 	movw	r1, #3065	; 0xbf9
 8004eb0:	4865      	ldr	r0, [pc, #404]	; (8005048 <UART_AdvFeatureConfig+0x250>)
 8004eb2:	f7fb fcb2 	bl	800081a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	430a      	orrs	r2, r1
 8004eca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed0:	f003 0308 	and.w	r3, r3, #8
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d018      	beq.n	8004f0a <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d009      	beq.n	8004ef4 <UART_AdvFeatureConfig+0xfc>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ee4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ee8:	d004      	beq.n	8004ef4 <UART_AdvFeatureConfig+0xfc>
 8004eea:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8004eee:	4856      	ldr	r0, [pc, #344]	; (8005048 <UART_AdvFeatureConfig+0x250>)
 8004ef0:	f7fb fc93 	bl	800081a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	430a      	orrs	r2, r1
 8004f08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0e:	f003 0310 	and.w	r3, r3, #16
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d018      	beq.n	8004f48 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d009      	beq.n	8004f32 <UART_AdvFeatureConfig+0x13a>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f26:	d004      	beq.n	8004f32 <UART_AdvFeatureConfig+0x13a>
 8004f28:	f640 4107 	movw	r1, #3079	; 0xc07
 8004f2c:	4846      	ldr	r0, [pc, #280]	; (8005048 <UART_AdvFeatureConfig+0x250>)
 8004f2e:	f7fb fc74 	bl	800081a <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	430a      	orrs	r2, r1
 8004f46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4c:	f003 0320 	and.w	r3, r3, #32
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d018      	beq.n	8004f86 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d009      	beq.n	8004f70 <UART_AdvFeatureConfig+0x178>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f64:	d004      	beq.n	8004f70 <UART_AdvFeatureConfig+0x178>
 8004f66:	f640 410e 	movw	r1, #3086	; 0xc0e
 8004f6a:	4837      	ldr	r0, [pc, #220]	; (8005048 <UART_AdvFeatureConfig+0x250>)
 8004f6c:	f7fb fc55 	bl	800081a <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	430a      	orrs	r2, r1
 8004f84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d064      	beq.n	800505c <UART_AdvFeatureConfig+0x264>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a2d      	ldr	r2, [pc, #180]	; (800504c <UART_AdvFeatureConfig+0x254>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d013      	beq.n	8004fc4 <UART_AdvFeatureConfig+0x1cc>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a2b      	ldr	r2, [pc, #172]	; (8005050 <UART_AdvFeatureConfig+0x258>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d00e      	beq.n	8004fc4 <UART_AdvFeatureConfig+0x1cc>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a2a      	ldr	r2, [pc, #168]	; (8005054 <UART_AdvFeatureConfig+0x25c>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d009      	beq.n	8004fc4 <UART_AdvFeatureConfig+0x1cc>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a28      	ldr	r2, [pc, #160]	; (8005058 <UART_AdvFeatureConfig+0x260>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d004      	beq.n	8004fc4 <UART_AdvFeatureConfig+0x1cc>
 8004fba:	f640 4115 	movw	r1, #3093	; 0xc15
 8004fbe:	4822      	ldr	r0, [pc, #136]	; (8005048 <UART_AdvFeatureConfig+0x250>)
 8004fc0:	f7fb fc2b 	bl	800081a <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d009      	beq.n	8004fe0 <UART_AdvFeatureConfig+0x1e8>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fd4:	d004      	beq.n	8004fe0 <UART_AdvFeatureConfig+0x1e8>
 8004fd6:	f640 4116 	movw	r1, #3094	; 0xc16
 8004fda:	481b      	ldr	r0, [pc, #108]	; (8005048 <UART_AdvFeatureConfig+0x250>)
 8004fdc:	f7fb fc1d 	bl	800081a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	430a      	orrs	r2, r1
 8004ff4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ffe:	d12d      	bne.n	800505c <UART_AdvFeatureConfig+0x264>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005004:	2b00      	cmp	r3, #0
 8005006:	d013      	beq.n	8005030 <UART_AdvFeatureConfig+0x238>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800500c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005010:	d00e      	beq.n	8005030 <UART_AdvFeatureConfig+0x238>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005016:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800501a:	d009      	beq.n	8005030 <UART_AdvFeatureConfig+0x238>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005020:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005024:	d004      	beq.n	8005030 <UART_AdvFeatureConfig+0x238>
 8005026:	f640 411b 	movw	r1, #3099	; 0xc1b
 800502a:	4807      	ldr	r0, [pc, #28]	; (8005048 <UART_AdvFeatureConfig+0x250>)
 800502c:	f7fb fbf5 	bl	800081a <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	430a      	orrs	r2, r1
 8005044:	605a      	str	r2, [r3, #4]
 8005046:	e009      	b.n	800505c <UART_AdvFeatureConfig+0x264>
 8005048:	08005630 	.word	0x08005630
 800504c:	40011000 	.word	0x40011000
 8005050:	40004400 	.word	0x40004400
 8005054:	40004800 	.word	0x40004800
 8005058:	40011400 	.word	0x40011400
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005064:	2b00      	cmp	r3, #0
 8005066:	d018      	beq.n	800509a <UART_AdvFeatureConfig+0x2a2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800506c:	2b00      	cmp	r3, #0
 800506e:	d009      	beq.n	8005084 <UART_AdvFeatureConfig+0x28c>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005074:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005078:	d004      	beq.n	8005084 <UART_AdvFeatureConfig+0x28c>
 800507a:	f640 4123 	movw	r1, #3107	; 0xc23
 800507e:	4809      	ldr	r0, [pc, #36]	; (80050a4 <UART_AdvFeatureConfig+0x2ac>)
 8005080:	f7fb fbcb 	bl	800081a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	430a      	orrs	r2, r1
 8005098:	605a      	str	r2, [r3, #4]
  }
}
 800509a:	bf00      	nop
 800509c:	3708      	adds	r7, #8
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	08005630 	.word	0x08005630

080050a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b086      	sub	sp, #24
 80050ac:	af02      	add	r7, sp, #8
 80050ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80050b8:	f7fb fdb8 	bl	8000c2c <HAL_GetTick>
 80050bc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0308 	and.w	r3, r3, #8
 80050c8:	2b08      	cmp	r3, #8
 80050ca:	d10e      	bne.n	80050ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050d0:	9300      	str	r3, [sp, #0]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 f81b 	bl	8005116 <UART_WaitOnFlagUntilTimeout>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d001      	beq.n	80050ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e011      	b.n	800510e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2220      	movs	r2, #32
 80050ee:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2220      	movs	r2, #32
 80050f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800510c:	2300      	movs	r3, #0
}
 800510e:	4618      	mov	r0, r3
 8005110:	3710      	adds	r7, #16
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}

08005116 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005116:	b580      	push	{r7, lr}
 8005118:	b09c      	sub	sp, #112	; 0x70
 800511a:	af00      	add	r7, sp, #0
 800511c:	60f8      	str	r0, [r7, #12]
 800511e:	60b9      	str	r1, [r7, #8]
 8005120:	603b      	str	r3, [r7, #0]
 8005122:	4613      	mov	r3, r2
 8005124:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005126:	e0a7      	b.n	8005278 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005128:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800512a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800512e:	f000 80a3 	beq.w	8005278 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005132:	f7fb fd7b 	bl	8000c2c <HAL_GetTick>
 8005136:	4602      	mov	r2, r0
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800513e:	429a      	cmp	r2, r3
 8005140:	d302      	bcc.n	8005148 <UART_WaitOnFlagUntilTimeout+0x32>
 8005142:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005144:	2b00      	cmp	r3, #0
 8005146:	d13f      	bne.n	80051c8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800514e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005150:	e853 3f00 	ldrex	r3, [r3]
 8005154:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005156:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005158:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800515c:	667b      	str	r3, [r7, #100]	; 0x64
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	461a      	mov	r2, r3
 8005164:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005166:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005168:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800516a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800516c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800516e:	e841 2300 	strex	r3, r2, [r1]
 8005172:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005174:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1e6      	bne.n	8005148 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	3308      	adds	r3, #8
 8005180:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005184:	e853 3f00 	ldrex	r3, [r3]
 8005188:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800518a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800518c:	f023 0301 	bic.w	r3, r3, #1
 8005190:	663b      	str	r3, [r7, #96]	; 0x60
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	3308      	adds	r3, #8
 8005198:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800519a:	64ba      	str	r2, [r7, #72]	; 0x48
 800519c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800519e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80051a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051a2:	e841 2300 	strex	r3, r2, [r1]
 80051a6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80051a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d1e5      	bne.n	800517a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2220      	movs	r2, #32
 80051b2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2220      	movs	r2, #32
 80051b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2200      	movs	r2, #0
 80051c0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	e068      	b.n	800529a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0304 	and.w	r3, r3, #4
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d050      	beq.n	8005278 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	69db      	ldr	r3, [r3, #28]
 80051dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051e4:	d148      	bne.n	8005278 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051ee:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f8:	e853 3f00 	ldrex	r3, [r3]
 80051fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005200:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005204:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	461a      	mov	r2, r3
 800520c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800520e:	637b      	str	r3, [r7, #52]	; 0x34
 8005210:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005212:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005214:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005216:	e841 2300 	strex	r3, r2, [r1]
 800521a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800521c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800521e:	2b00      	cmp	r3, #0
 8005220:	d1e6      	bne.n	80051f0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	3308      	adds	r3, #8
 8005228:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	e853 3f00 	ldrex	r3, [r3]
 8005230:	613b      	str	r3, [r7, #16]
   return(result);
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	f023 0301 	bic.w	r3, r3, #1
 8005238:	66bb      	str	r3, [r7, #104]	; 0x68
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	3308      	adds	r3, #8
 8005240:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005242:	623a      	str	r2, [r7, #32]
 8005244:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005246:	69f9      	ldr	r1, [r7, #28]
 8005248:	6a3a      	ldr	r2, [r7, #32]
 800524a:	e841 2300 	strex	r3, r2, [r1]
 800524e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d1e5      	bne.n	8005222 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2220      	movs	r2, #32
 800525a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2220      	movs	r2, #32
 8005260:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2220      	movs	r2, #32
 8005268:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2200      	movs	r2, #0
 8005270:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005274:	2303      	movs	r3, #3
 8005276:	e010      	b.n	800529a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	69da      	ldr	r2, [r3, #28]
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	4013      	ands	r3, r2
 8005282:	68ba      	ldr	r2, [r7, #8]
 8005284:	429a      	cmp	r2, r3
 8005286:	bf0c      	ite	eq
 8005288:	2301      	moveq	r3, #1
 800528a:	2300      	movne	r3, #0
 800528c:	b2db      	uxtb	r3, r3
 800528e:	461a      	mov	r2, r3
 8005290:	79fb      	ldrb	r3, [r7, #7]
 8005292:	429a      	cmp	r2, r3
 8005294:	f43f af48 	beq.w	8005128 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3770      	adds	r7, #112	; 0x70
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}

080052a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052a2:	b480      	push	{r7}
 80052a4:	b095      	sub	sp, #84	; 0x54
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052b2:	e853 3f00 	ldrex	r3, [r3]
 80052b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80052b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	461a      	mov	r2, r3
 80052c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052c8:	643b      	str	r3, [r7, #64]	; 0x40
 80052ca:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80052ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80052d0:	e841 2300 	strex	r3, r2, [r1]
 80052d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80052d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d1e6      	bne.n	80052aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	3308      	adds	r3, #8
 80052e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e4:	6a3b      	ldr	r3, [r7, #32]
 80052e6:	e853 3f00 	ldrex	r3, [r3]
 80052ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	f023 0301 	bic.w	r3, r3, #1
 80052f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	3308      	adds	r3, #8
 80052fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005300:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005302:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005304:	e841 2300 	strex	r3, r2, [r1]
 8005308:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800530a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530c:	2b00      	cmp	r3, #0
 800530e:	d1e5      	bne.n	80052dc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005314:	2b01      	cmp	r3, #1
 8005316:	d118      	bne.n	800534a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	e853 3f00 	ldrex	r3, [r3]
 8005324:	60bb      	str	r3, [r7, #8]
   return(result);
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	f023 0310 	bic.w	r3, r3, #16
 800532c:	647b      	str	r3, [r7, #68]	; 0x44
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	461a      	mov	r2, r3
 8005334:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005336:	61bb      	str	r3, [r7, #24]
 8005338:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533a:	6979      	ldr	r1, [r7, #20]
 800533c:	69ba      	ldr	r2, [r7, #24]
 800533e:	e841 2300 	strex	r3, r2, [r1]
 8005342:	613b      	str	r3, [r7, #16]
   return(result);
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d1e6      	bne.n	8005318 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2220      	movs	r2, #32
 800534e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800535e:	bf00      	nop
 8005360:	3754      	adds	r7, #84	; 0x54
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr

0800536a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800536a:	b580      	push	{r7, lr}
 800536c:	b084      	sub	sp, #16
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005376:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2200      	movs	r2, #0
 800537c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2200      	movs	r2, #0
 8005384:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005388:	68f8      	ldr	r0, [r7, #12]
 800538a:	f7ff fa29 	bl	80047e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800538e:	bf00      	nop
 8005390:	3710      	adds	r7, #16
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}

08005396 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005396:	b580      	push	{r7, lr}
 8005398:	b088      	sub	sp, #32
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	e853 3f00 	ldrex	r3, [r3]
 80053aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053b2:	61fb      	str	r3, [r7, #28]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	461a      	mov	r2, r3
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	61bb      	str	r3, [r7, #24]
 80053be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c0:	6979      	ldr	r1, [r7, #20]
 80053c2:	69ba      	ldr	r2, [r7, #24]
 80053c4:	e841 2300 	strex	r3, r2, [r1]
 80053c8:	613b      	str	r3, [r7, #16]
   return(result);
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d1e6      	bne.n	800539e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2220      	movs	r2, #32
 80053d4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f7ff f9f5 	bl	80047cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053e2:	bf00      	nop
 80053e4:	3720      	adds	r7, #32
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
	...

080053ec <__libc_init_array>:
 80053ec:	b570      	push	{r4, r5, r6, lr}
 80053ee:	4d0d      	ldr	r5, [pc, #52]	; (8005424 <__libc_init_array+0x38>)
 80053f0:	4c0d      	ldr	r4, [pc, #52]	; (8005428 <__libc_init_array+0x3c>)
 80053f2:	1b64      	subs	r4, r4, r5
 80053f4:	10a4      	asrs	r4, r4, #2
 80053f6:	2600      	movs	r6, #0
 80053f8:	42a6      	cmp	r6, r4
 80053fa:	d109      	bne.n	8005410 <__libc_init_array+0x24>
 80053fc:	4d0b      	ldr	r5, [pc, #44]	; (800542c <__libc_init_array+0x40>)
 80053fe:	4c0c      	ldr	r4, [pc, #48]	; (8005430 <__libc_init_array+0x44>)
 8005400:	f000 f820 	bl	8005444 <_init>
 8005404:	1b64      	subs	r4, r4, r5
 8005406:	10a4      	asrs	r4, r4, #2
 8005408:	2600      	movs	r6, #0
 800540a:	42a6      	cmp	r6, r4
 800540c:	d105      	bne.n	800541a <__libc_init_array+0x2e>
 800540e:	bd70      	pop	{r4, r5, r6, pc}
 8005410:	f855 3b04 	ldr.w	r3, [r5], #4
 8005414:	4798      	blx	r3
 8005416:	3601      	adds	r6, #1
 8005418:	e7ee      	b.n	80053f8 <__libc_init_array+0xc>
 800541a:	f855 3b04 	ldr.w	r3, [r5], #4
 800541e:	4798      	blx	r3
 8005420:	3601      	adds	r6, #1
 8005422:	e7f2      	b.n	800540a <__libc_init_array+0x1e>
 8005424:	0800568c 	.word	0x0800568c
 8005428:	0800568c 	.word	0x0800568c
 800542c:	0800568c 	.word	0x0800568c
 8005430:	08005690 	.word	0x08005690

08005434 <memset>:
 8005434:	4402      	add	r2, r0
 8005436:	4603      	mov	r3, r0
 8005438:	4293      	cmp	r3, r2
 800543a:	d100      	bne.n	800543e <memset+0xa>
 800543c:	4770      	bx	lr
 800543e:	f803 1b01 	strb.w	r1, [r3], #1
 8005442:	e7f9      	b.n	8005438 <memset+0x4>

08005444 <_init>:
 8005444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005446:	bf00      	nop
 8005448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800544a:	bc08      	pop	{r3}
 800544c:	469e      	mov	lr, r3
 800544e:	4770      	bx	lr

08005450 <_fini>:
 8005450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005452:	bf00      	nop
 8005454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005456:	bc08      	pop	{r3}
 8005458:	469e      	mov	lr, r3
 800545a:	4770      	bx	lr
