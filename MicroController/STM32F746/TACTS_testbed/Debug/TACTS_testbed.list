
TACTS_testbed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014488  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a80  08014658  08014658  00024658  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080150d8  080150d8  000304c0  2**0
                  CONTENTS
  4 .ARM          00000008  080150d8  080150d8  000250d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080150e0  080150e0  000304c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080150e0  080150e0  000250e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080150e4  080150e4  000250e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004c0  20000000  080150e8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000516c  200004c0  080155a8  000304c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000562c  080155a8  0003562c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000304c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000229bb  00000000  00000000  000304f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f28  00000000  00000000  00052eab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001810  00000000  00000000  00056dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001658  00000000  00000000  000585e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029de2  00000000  00000000  00059c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022f98  00000000  00000000  00083a22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9923  00000000  00000000  000a69ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a02dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007cf4  00000000  00000000  001a0330  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200004c0 	.word	0x200004c0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08014640 	.word	0x08014640

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200004c4 	.word	0x200004c4
 800020c:	08014640 	.word	0x08014640

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b9aa 	b.w	8001054 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	468e      	mov	lr, r1
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d14d      	bne.n	8000e2e <__udivmoddi4+0xaa>
 8000d92:	428a      	cmp	r2, r1
 8000d94:	4694      	mov	ip, r2
 8000d96:	d969      	bls.n	8000e6c <__udivmoddi4+0xe8>
 8000d98:	fab2 f282 	clz	r2, r2
 8000d9c:	b152      	cbz	r2, 8000db4 <__udivmoddi4+0x30>
 8000d9e:	fa01 f302 	lsl.w	r3, r1, r2
 8000da2:	f1c2 0120 	rsb	r1, r2, #32
 8000da6:	fa20 f101 	lsr.w	r1, r0, r1
 8000daa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dae:	ea41 0e03 	orr.w	lr, r1, r3
 8000db2:	4094      	lsls	r4, r2
 8000db4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db8:	0c21      	lsrs	r1, r4, #16
 8000dba:	fbbe f6f8 	udiv	r6, lr, r8
 8000dbe:	fa1f f78c 	uxth.w	r7, ip
 8000dc2:	fb08 e316 	mls	r3, r8, r6, lr
 8000dc6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dca:	fb06 f107 	mul.w	r1, r6, r7
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x64>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dda:	f080 811f 	bcs.w	800101c <__udivmoddi4+0x298>
 8000dde:	4299      	cmp	r1, r3
 8000de0:	f240 811c 	bls.w	800101c <__udivmoddi4+0x298>
 8000de4:	3e02      	subs	r6, #2
 8000de6:	4463      	add	r3, ip
 8000de8:	1a5b      	subs	r3, r3, r1
 8000dea:	b2a4      	uxth	r4, r4
 8000dec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000df0:	fb08 3310 	mls	r3, r8, r0, r3
 8000df4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000df8:	fb00 f707 	mul.w	r7, r0, r7
 8000dfc:	42a7      	cmp	r7, r4
 8000dfe:	d90a      	bls.n	8000e16 <__udivmoddi4+0x92>
 8000e00:	eb1c 0404 	adds.w	r4, ip, r4
 8000e04:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e08:	f080 810a 	bcs.w	8001020 <__udivmoddi4+0x29c>
 8000e0c:	42a7      	cmp	r7, r4
 8000e0e:	f240 8107 	bls.w	8001020 <__udivmoddi4+0x29c>
 8000e12:	4464      	add	r4, ip
 8000e14:	3802      	subs	r0, #2
 8000e16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e1a:	1be4      	subs	r4, r4, r7
 8000e1c:	2600      	movs	r6, #0
 8000e1e:	b11d      	cbz	r5, 8000e28 <__udivmoddi4+0xa4>
 8000e20:	40d4      	lsrs	r4, r2
 8000e22:	2300      	movs	r3, #0
 8000e24:	e9c5 4300 	strd	r4, r3, [r5]
 8000e28:	4631      	mov	r1, r6
 8000e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d909      	bls.n	8000e46 <__udivmoddi4+0xc2>
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	f000 80ef 	beq.w	8001016 <__udivmoddi4+0x292>
 8000e38:	2600      	movs	r6, #0
 8000e3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e3e:	4630      	mov	r0, r6
 8000e40:	4631      	mov	r1, r6
 8000e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e46:	fab3 f683 	clz	r6, r3
 8000e4a:	2e00      	cmp	r6, #0
 8000e4c:	d14a      	bne.n	8000ee4 <__udivmoddi4+0x160>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d302      	bcc.n	8000e58 <__udivmoddi4+0xd4>
 8000e52:	4282      	cmp	r2, r0
 8000e54:	f200 80f9 	bhi.w	800104a <__udivmoddi4+0x2c6>
 8000e58:	1a84      	subs	r4, r0, r2
 8000e5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e5e:	2001      	movs	r0, #1
 8000e60:	469e      	mov	lr, r3
 8000e62:	2d00      	cmp	r5, #0
 8000e64:	d0e0      	beq.n	8000e28 <__udivmoddi4+0xa4>
 8000e66:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e6a:	e7dd      	b.n	8000e28 <__udivmoddi4+0xa4>
 8000e6c:	b902      	cbnz	r2, 8000e70 <__udivmoddi4+0xec>
 8000e6e:	deff      	udf	#255	; 0xff
 8000e70:	fab2 f282 	clz	r2, r2
 8000e74:	2a00      	cmp	r2, #0
 8000e76:	f040 8092 	bne.w	8000f9e <__udivmoddi4+0x21a>
 8000e7a:	eba1 010c 	sub.w	r1, r1, ip
 8000e7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e82:	fa1f fe8c 	uxth.w	lr, ip
 8000e86:	2601      	movs	r6, #1
 8000e88:	0c20      	lsrs	r0, r4, #16
 8000e8a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e8e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e92:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e96:	fb0e f003 	mul.w	r0, lr, r3
 8000e9a:	4288      	cmp	r0, r1
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0x12c>
 8000e9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ea6:	d202      	bcs.n	8000eae <__udivmoddi4+0x12a>
 8000ea8:	4288      	cmp	r0, r1
 8000eaa:	f200 80cb 	bhi.w	8001044 <__udivmoddi4+0x2c0>
 8000eae:	4643      	mov	r3, r8
 8000eb0:	1a09      	subs	r1, r1, r0
 8000eb2:	b2a4      	uxth	r4, r4
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1110 	mls	r1, r7, r0, r1
 8000ebc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ec0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ec4:	45a6      	cmp	lr, r4
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x156>
 8000ec8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ecc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ed0:	d202      	bcs.n	8000ed8 <__udivmoddi4+0x154>
 8000ed2:	45a6      	cmp	lr, r4
 8000ed4:	f200 80bb 	bhi.w	800104e <__udivmoddi4+0x2ca>
 8000ed8:	4608      	mov	r0, r1
 8000eda:	eba4 040e 	sub.w	r4, r4, lr
 8000ede:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ee2:	e79c      	b.n	8000e1e <__udivmoddi4+0x9a>
 8000ee4:	f1c6 0720 	rsb	r7, r6, #32
 8000ee8:	40b3      	lsls	r3, r6
 8000eea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ef2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ef6:	fa01 f306 	lsl.w	r3, r1, r6
 8000efa:	431c      	orrs	r4, r3
 8000efc:	40f9      	lsrs	r1, r7
 8000efe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f02:	fa00 f306 	lsl.w	r3, r0, r6
 8000f06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f0a:	0c20      	lsrs	r0, r4, #16
 8000f0c:	fa1f fe8c 	uxth.w	lr, ip
 8000f10:	fb09 1118 	mls	r1, r9, r8, r1
 8000f14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f18:	fb08 f00e 	mul.w	r0, r8, lr
 8000f1c:	4288      	cmp	r0, r1
 8000f1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f22:	d90b      	bls.n	8000f3c <__udivmoddi4+0x1b8>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f2c:	f080 8088 	bcs.w	8001040 <__udivmoddi4+0x2bc>
 8000f30:	4288      	cmp	r0, r1
 8000f32:	f240 8085 	bls.w	8001040 <__udivmoddi4+0x2bc>
 8000f36:	f1a8 0802 	sub.w	r8, r8, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	1a09      	subs	r1, r1, r0
 8000f3e:	b2a4      	uxth	r4, r4
 8000f40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f44:	fb09 1110 	mls	r1, r9, r0, r1
 8000f48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f50:	458e      	cmp	lr, r1
 8000f52:	d908      	bls.n	8000f66 <__udivmoddi4+0x1e2>
 8000f54:	eb1c 0101 	adds.w	r1, ip, r1
 8000f58:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f5c:	d26c      	bcs.n	8001038 <__udivmoddi4+0x2b4>
 8000f5e:	458e      	cmp	lr, r1
 8000f60:	d96a      	bls.n	8001038 <__udivmoddi4+0x2b4>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4461      	add	r1, ip
 8000f66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f6e:	eba1 010e 	sub.w	r1, r1, lr
 8000f72:	42a1      	cmp	r1, r4
 8000f74:	46c8      	mov	r8, r9
 8000f76:	46a6      	mov	lr, r4
 8000f78:	d356      	bcc.n	8001028 <__udivmoddi4+0x2a4>
 8000f7a:	d053      	beq.n	8001024 <__udivmoddi4+0x2a0>
 8000f7c:	b15d      	cbz	r5, 8000f96 <__udivmoddi4+0x212>
 8000f7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f82:	eb61 010e 	sbc.w	r1, r1, lr
 8000f86:	fa01 f707 	lsl.w	r7, r1, r7
 8000f8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f8e:	40f1      	lsrs	r1, r6
 8000f90:	431f      	orrs	r7, r3
 8000f92:	e9c5 7100 	strd	r7, r1, [r5]
 8000f96:	2600      	movs	r6, #0
 8000f98:	4631      	mov	r1, r6
 8000f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f9e:	f1c2 0320 	rsb	r3, r2, #32
 8000fa2:	40d8      	lsrs	r0, r3
 8000fa4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fa8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fac:	4091      	lsls	r1, r2
 8000fae:	4301      	orrs	r1, r0
 8000fb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fb4:	fa1f fe8c 	uxth.w	lr, ip
 8000fb8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fbc:	fb07 3610 	mls	r6, r7, r0, r3
 8000fc0:	0c0b      	lsrs	r3, r1, #16
 8000fc2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fc6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fca:	429e      	cmp	r6, r3
 8000fcc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fd0:	d908      	bls.n	8000fe4 <__udivmoddi4+0x260>
 8000fd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fda:	d22f      	bcs.n	800103c <__udivmoddi4+0x2b8>
 8000fdc:	429e      	cmp	r6, r3
 8000fde:	d92d      	bls.n	800103c <__udivmoddi4+0x2b8>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	4463      	add	r3, ip
 8000fe4:	1b9b      	subs	r3, r3, r6
 8000fe6:	b289      	uxth	r1, r1
 8000fe8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fec:	fb07 3316 	mls	r3, r7, r6, r3
 8000ff0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ff4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ff8:	428b      	cmp	r3, r1
 8000ffa:	d908      	bls.n	800100e <__udivmoddi4+0x28a>
 8000ffc:	eb1c 0101 	adds.w	r1, ip, r1
 8001000:	f106 38ff 	add.w	r8, r6, #4294967295
 8001004:	d216      	bcs.n	8001034 <__udivmoddi4+0x2b0>
 8001006:	428b      	cmp	r3, r1
 8001008:	d914      	bls.n	8001034 <__udivmoddi4+0x2b0>
 800100a:	3e02      	subs	r6, #2
 800100c:	4461      	add	r1, ip
 800100e:	1ac9      	subs	r1, r1, r3
 8001010:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001014:	e738      	b.n	8000e88 <__udivmoddi4+0x104>
 8001016:	462e      	mov	r6, r5
 8001018:	4628      	mov	r0, r5
 800101a:	e705      	b.n	8000e28 <__udivmoddi4+0xa4>
 800101c:	4606      	mov	r6, r0
 800101e:	e6e3      	b.n	8000de8 <__udivmoddi4+0x64>
 8001020:	4618      	mov	r0, r3
 8001022:	e6f8      	b.n	8000e16 <__udivmoddi4+0x92>
 8001024:	454b      	cmp	r3, r9
 8001026:	d2a9      	bcs.n	8000f7c <__udivmoddi4+0x1f8>
 8001028:	ebb9 0802 	subs.w	r8, r9, r2
 800102c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001030:	3801      	subs	r0, #1
 8001032:	e7a3      	b.n	8000f7c <__udivmoddi4+0x1f8>
 8001034:	4646      	mov	r6, r8
 8001036:	e7ea      	b.n	800100e <__udivmoddi4+0x28a>
 8001038:	4620      	mov	r0, r4
 800103a:	e794      	b.n	8000f66 <__udivmoddi4+0x1e2>
 800103c:	4640      	mov	r0, r8
 800103e:	e7d1      	b.n	8000fe4 <__udivmoddi4+0x260>
 8001040:	46d0      	mov	r8, sl
 8001042:	e77b      	b.n	8000f3c <__udivmoddi4+0x1b8>
 8001044:	3b02      	subs	r3, #2
 8001046:	4461      	add	r1, ip
 8001048:	e732      	b.n	8000eb0 <__udivmoddi4+0x12c>
 800104a:	4630      	mov	r0, r6
 800104c:	e709      	b.n	8000e62 <__udivmoddi4+0xde>
 800104e:	4464      	add	r4, ip
 8001050:	3802      	subs	r0, #2
 8001052:	e742      	b.n	8000eda <__udivmoddi4+0x156>

08001054 <__aeabi_idiv0>:
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop

08001058 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b08a      	sub	sp, #40	; 0x28
 800105c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105e:	f107 0314 	add.w	r3, r7, #20
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	605a      	str	r2, [r3, #4]
 8001068:	609a      	str	r2, [r3, #8]
 800106a:	60da      	str	r2, [r3, #12]
 800106c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800106e:	4b51      	ldr	r3, [pc, #324]	; (80011b4 <MX_GPIO_Init+0x15c>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	4a50      	ldr	r2, [pc, #320]	; (80011b4 <MX_GPIO_Init+0x15c>)
 8001074:	f043 0302 	orr.w	r3, r3, #2
 8001078:	6313      	str	r3, [r2, #48]	; 0x30
 800107a:	4b4e      	ldr	r3, [pc, #312]	; (80011b4 <MX_GPIO_Init+0x15c>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	f003 0302 	and.w	r3, r3, #2
 8001082:	613b      	str	r3, [r7, #16]
 8001084:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001086:	4b4b      	ldr	r3, [pc, #300]	; (80011b4 <MX_GPIO_Init+0x15c>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	4a4a      	ldr	r2, [pc, #296]	; (80011b4 <MX_GPIO_Init+0x15c>)
 800108c:	f043 0301 	orr.w	r3, r3, #1
 8001090:	6313      	str	r3, [r2, #48]	; 0x30
 8001092:	4b48      	ldr	r3, [pc, #288]	; (80011b4 <MX_GPIO_Init+0x15c>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800109e:	4b45      	ldr	r3, [pc, #276]	; (80011b4 <MX_GPIO_Init+0x15c>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	4a44      	ldr	r2, [pc, #272]	; (80011b4 <MX_GPIO_Init+0x15c>)
 80010a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010a8:	6313      	str	r3, [r2, #48]	; 0x30
 80010aa:	4b42      	ldr	r3, [pc, #264]	; (80011b4 <MX_GPIO_Init+0x15c>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010b2:	60bb      	str	r3, [r7, #8]
 80010b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010b6:	4b3f      	ldr	r3, [pc, #252]	; (80011b4 <MX_GPIO_Init+0x15c>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	4a3e      	ldr	r2, [pc, #248]	; (80011b4 <MX_GPIO_Init+0x15c>)
 80010bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010c0:	6313      	str	r3, [r2, #48]	; 0x30
 80010c2:	4b3c      	ldr	r3, [pc, #240]	; (80011b4 <MX_GPIO_Init+0x15c>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010ce:	4b39      	ldr	r3, [pc, #228]	; (80011b4 <MX_GPIO_Init+0x15c>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	4a38      	ldr	r2, [pc, #224]	; (80011b4 <MX_GPIO_Init+0x15c>)
 80010d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010d8:	6313      	str	r3, [r2, #48]	; 0x30
 80010da:	4b36      	ldr	r3, [pc, #216]	; (80011b4 <MX_GPIO_Init+0x15c>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010e2:	603b      	str	r3, [r7, #0]
 80010e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2110      	movs	r1, #16
 80010ea:	4833      	ldr	r0, [pc, #204]	; (80011b8 <MX_GPIO_Init+0x160>)
 80010ec:	f002 fa7e 	bl	80035ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0, GPIO_PIN_RESET);
 80010f0:	2200      	movs	r2, #0
 80010f2:	210f      	movs	r1, #15
 80010f4:	4831      	ldr	r0, [pc, #196]	; (80011bc <MX_GPIO_Init+0x164>)
 80010f6:	f002 fa79 	bl	80035ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7|GPIO_PIN_6, GPIO_PIN_RESET);
 80010fa:	2200      	movs	r2, #0
 80010fc:	21c0      	movs	r1, #192	; 0xc0
 80010fe:	4830      	ldr	r0, [pc, #192]	; (80011c0 <MX_GPIO_Init+0x168>)
 8001100:	f002 fa74 	bl	80035ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001104:	2310      	movs	r3, #16
 8001106:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001108:	2301      	movs	r3, #1
 800110a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001110:	2300      	movs	r3, #0
 8001112:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	4619      	mov	r1, r3
 800111a:	4827      	ldr	r0, [pc, #156]	; (80011b8 <MX_GPIO_Init+0x160>)
 800111c:	f001 fed6 	bl	8002ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : PI3 PI2 PI1 PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0;
 8001120:	230f      	movs	r3, #15
 8001122:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001124:	2301      	movs	r3, #1
 8001126:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112c:	2300      	movs	r3, #0
 800112e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	4619      	mov	r1, r3
 8001136:	4821      	ldr	r0, [pc, #132]	; (80011bc <MX_GPIO_Init+0x164>)
 8001138:	f001 fec8 	bl	8002ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800113c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001140:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001142:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001146:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001148:	2301      	movs	r3, #1
 800114a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	4619      	mov	r1, r3
 8001152:	481c      	ldr	r0, [pc, #112]	; (80011c4 <MX_GPIO_Init+0x16c>)
 8001154:	f001 feba 	bl	8002ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001158:	23c0      	movs	r3, #192	; 0xc0
 800115a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115c:	2301      	movs	r3, #1
 800115e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001164:	2300      	movs	r3, #0
 8001166:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	4619      	mov	r1, r3
 800116e:	4814      	ldr	r0, [pc, #80]	; (80011c0 <MX_GPIO_Init+0x168>)
 8001170:	f001 feac 	bl	8002ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001174:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001178:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800117a:	2300      	movs	r3, #0
 800117c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001182:	f107 0314 	add.w	r3, r7, #20
 8001186:	4619      	mov	r1, r3
 8001188:	480b      	ldr	r0, [pc, #44]	; (80011b8 <MX_GPIO_Init+0x160>)
 800118a:	f001 fe9f 	bl	8002ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800118e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001192:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001194:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001198:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800119a:	2301      	movs	r3, #1
 800119c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119e:	f107 0314 	add.w	r3, r7, #20
 80011a2:	4619      	mov	r1, r3
 80011a4:	4804      	ldr	r0, [pc, #16]	; (80011b8 <MX_GPIO_Init+0x160>)
 80011a6:	f001 fe91 	bl	8002ecc <HAL_GPIO_Init>

}
 80011aa:	bf00      	nop
 80011ac:	3728      	adds	r7, #40	; 0x28
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40020400 	.word	0x40020400
 80011bc:	40022000 	.word	0x40022000
 80011c0:	40021800 	.word	0x40021800
 80011c4:	40020000 	.word	0x40020000

080011c8 <HX711_Init>:
float loadcell_slope = -1/1600.00f; // Convert the raw data to weight (replace the calibration factor with your own)
float loadcell_bias = 10002;


void HX711_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  // Set the SCK pin to low
  HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_RESET);
 80011cc:	2200      	movs	r2, #0
 80011ce:	2102      	movs	r1, #2
 80011d0:	4802      	ldr	r0, [pc, #8]	; (80011dc <HX711_Init+0x14>)
 80011d2:	f002 fa0b 	bl	80035ec <HAL_GPIO_WritePin>
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40022000 	.word	0x40022000

080011e0 <Read_HX711>:

int32_t Read_HX711(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
  int32_t data = 0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	607b      	str	r3, [r7, #4]

  // Wait until the DT pin goes low
  while (HAL_GPIO_ReadPin(HX711_DT_GPIO_Port, HX711_DT_Pin) == GPIO_PIN_SET);
 80011ea:	bf00      	nop
 80011ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011f0:	4820      	ldr	r0, [pc, #128]	; (8001274 <Read_HX711+0x94>)
 80011f2:	f002 f9db 	bl	80035ac <HAL_GPIO_ReadPin>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d0f7      	beq.n	80011ec <Read_HX711+0xc>

  // Read the 24-bit data
  for (int i = 0; i < 24; i++)
 80011fc:	2300      	movs	r3, #0
 80011fe:	603b      	str	r3, [r7, #0]
 8001200:	e020      	b.n	8001244 <Read_HX711+0x64>
  {
    // Generate a clock pulse on SCK pin
    HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_SET);
 8001202:	2201      	movs	r2, #1
 8001204:	2102      	movs	r1, #2
 8001206:	481c      	ldr	r0, [pc, #112]	; (8001278 <Read_HX711+0x98>)
 8001208:	f002 f9f0 	bl	80035ec <HAL_GPIO_WritePin>
    DelayMicroseconds(1);
 800120c:	2001      	movs	r0, #1
 800120e:	f000 f867 	bl	80012e0 <DelayMicroseconds>
    data = (data << 1);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	607b      	str	r3, [r7, #4]
    if (HAL_GPIO_ReadPin(HX711_DT_GPIO_Port, HX711_DT_Pin) == GPIO_PIN_SET)
 8001218:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800121c:	4815      	ldr	r0, [pc, #84]	; (8001274 <Read_HX711+0x94>)
 800121e:	f002 f9c5 	bl	80035ac <HAL_GPIO_ReadPin>
 8001222:	4603      	mov	r3, r0
 8001224:	2b01      	cmp	r3, #1
 8001226:	d102      	bne.n	800122e <Read_HX711+0x4e>
    {
      data++;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3301      	adds	r3, #1
 800122c:	607b      	str	r3, [r7, #4]
    }
    HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_RESET);
 800122e:	2200      	movs	r2, #0
 8001230:	2102      	movs	r1, #2
 8001232:	4811      	ldr	r0, [pc, #68]	; (8001278 <Read_HX711+0x98>)
 8001234:	f002 f9da 	bl	80035ec <HAL_GPIO_WritePin>
    DelayMicroseconds(1);
 8001238:	2001      	movs	r0, #1
 800123a:	f000 f851 	bl	80012e0 <DelayMicroseconds>
  for (int i = 0; i < 24; i++)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	3301      	adds	r3, #1
 8001242:	603b      	str	r3, [r7, #0]
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	2b17      	cmp	r3, #23
 8001248:	dddb      	ble.n	8001202 <Read_HX711+0x22>
  }

  // Generate an additional 25th pulse to set the HX711 back to idle mode
  HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_SET);
 800124a:	2201      	movs	r2, #1
 800124c:	2102      	movs	r1, #2
 800124e:	480a      	ldr	r0, [pc, #40]	; (8001278 <Read_HX711+0x98>)
 8001250:	f002 f9cc 	bl	80035ec <HAL_GPIO_WritePin>
  DelayMicroseconds(1);
 8001254:	2001      	movs	r0, #1
 8001256:	f000 f843 	bl	80012e0 <DelayMicroseconds>
  HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_RESET);
 800125a:	2200      	movs	r2, #0
 800125c:	2102      	movs	r1, #2
 800125e:	4806      	ldr	r0, [pc, #24]	; (8001278 <Read_HX711+0x98>)
 8001260:	f002 f9c4 	bl	80035ec <HAL_GPIO_WritePin>
  DelayMicroseconds(1);
 8001264:	2001      	movs	r0, #1
 8001266:	f000 f83b 	bl	80012e0 <DelayMicroseconds>


  // Return the 24-bit data
  return data;
 800126a:	687b      	ldr	r3, [r7, #4]
}
 800126c:	4618      	mov	r0, r3
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40020400 	.word	0x40020400
 8001278:	40022000 	.word	0x40022000

0800127c <UART_SendWeight_g>:

void UART_SendWeight_g(float rawData,float loadcell_slope,float loadcell_bias)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08e      	sub	sp, #56	; 0x38
 8001280:	af00      	add	r7, sp, #0
 8001282:	ed87 0a03 	vstr	s0, [r7, #12]
 8001286:	edc7 0a02 	vstr	s1, [r7, #8]
 800128a:	ed87 1a01 	vstr	s2, [r7, #4]
  float weight = loadcell_slope * rawData  + loadcell_bias;
 800128e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001292:	edd7 7a03 	vldr	s15, [r7, #12]
 8001296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800129a:	ed97 7a01 	vldr	s14, [r7, #4]
 800129e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012a2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
  char buffer[32];
  int data = sprintf(buffer, "%.2f", weight);
 80012a6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80012a8:	f7ff f97e 	bl	80005a8 <__aeabi_f2d>
 80012ac:	4602      	mov	r2, r0
 80012ae:	460b      	mov	r3, r1
 80012b0:	f107 0010 	add.w	r0, r7, #16
 80012b4:	4908      	ldr	r1, [pc, #32]	; (80012d8 <UART_SendWeight_g+0x5c>)
 80012b6:	f00e ff45 	bl	8010144 <siprintf>
 80012ba:	6338      	str	r0, [r7, #48]	; 0x30
  // Send the buffer content via UART
#if 0
  int len = sprintf(buffer, "Weight(g):");
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, len, 1000);
#endif
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, data, 1000);
 80012bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012be:	b29a      	uxth	r2, r3
 80012c0:	f107 0110 	add.w	r1, r7, #16
 80012c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c8:	4804      	ldr	r0, [pc, #16]	; (80012dc <UART_SendWeight_g+0x60>)
 80012ca:	f007 fe25 	bl	8008f18 <HAL_UART_Transmit>
}
 80012ce:	bf00      	nop
 80012d0:	3738      	adds	r7, #56	; 0x38
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	08014658 	.word	0x08014658
 80012dc:	20000664 	.word	0x20000664

080012e0 <DelayMicroseconds>:

  // Send the buffer content via UART
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, len, 1000);
}
void DelayMicroseconds(uint32_t microseconds)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t ticks = microseconds;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	60fb      	str	r3, [r7, #12]
  while (ticks--)
 80012ec:	e000      	b.n	80012f0 <DelayMicroseconds+0x10>
  {
    __NOP();
 80012ee:	bf00      	nop
  while (ticks--)
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	1e5a      	subs	r2, r3, #1
 80012f4:	60fa      	str	r2, [r7, #12]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d1f9      	bne.n	80012ee <DelayMicroseconds+0xe>
  }
}
 80012fa:	bf00      	nop
 80012fc:	bf00      	nop
 80012fe:	3714      	adds	r7, #20
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800130c:	4b1b      	ldr	r3, [pc, #108]	; (800137c <MX_I2C1_Init+0x74>)
 800130e:	4a1c      	ldr	r2, [pc, #112]	; (8001380 <MX_I2C1_Init+0x78>)
 8001310:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 8001312:	4b1a      	ldr	r3, [pc, #104]	; (800137c <MX_I2C1_Init+0x74>)
 8001314:	4a1b      	ldr	r2, [pc, #108]	; (8001384 <MX_I2C1_Init+0x7c>)
 8001316:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001318:	4b18      	ldr	r3, [pc, #96]	; (800137c <MX_I2C1_Init+0x74>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800131e:	4b17      	ldr	r3, [pc, #92]	; (800137c <MX_I2C1_Init+0x74>)
 8001320:	2201      	movs	r2, #1
 8001322:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001324:	4b15      	ldr	r3, [pc, #84]	; (800137c <MX_I2C1_Init+0x74>)
 8001326:	2200      	movs	r2, #0
 8001328:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800132a:	4b14      	ldr	r3, [pc, #80]	; (800137c <MX_I2C1_Init+0x74>)
 800132c:	2200      	movs	r2, #0
 800132e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001330:	4b12      	ldr	r3, [pc, #72]	; (800137c <MX_I2C1_Init+0x74>)
 8001332:	2200      	movs	r2, #0
 8001334:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001336:	4b11      	ldr	r3, [pc, #68]	; (800137c <MX_I2C1_Init+0x74>)
 8001338:	2200      	movs	r2, #0
 800133a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800133c:	4b0f      	ldr	r3, [pc, #60]	; (800137c <MX_I2C1_Init+0x74>)
 800133e:	2200      	movs	r2, #0
 8001340:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001342:	480e      	ldr	r0, [pc, #56]	; (800137c <MX_I2C1_Init+0x74>)
 8001344:	f002 f996 	bl	8003674 <HAL_I2C_Init>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800134e:	f000 fc5b 	bl	8001c08 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001352:	2100      	movs	r1, #0
 8001354:	4809      	ldr	r0, [pc, #36]	; (800137c <MX_I2C1_Init+0x74>)
 8001356:	f003 fcc3 	bl	8004ce0 <HAL_I2CEx_ConfigAnalogFilter>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001360:	f000 fc52 	bl	8001c08 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001364:	2100      	movs	r1, #0
 8001366:	4805      	ldr	r0, [pc, #20]	; (800137c <MX_I2C1_Init+0x74>)
 8001368:	f003 fd30 	bl	8004dcc <HAL_I2CEx_ConfigDigitalFilter>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001372:	f000 fc49 	bl	8001c08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	200004dc 	.word	0x200004dc
 8001380:	40005400 	.word	0x40005400
 8001384:	6000030d 	.word	0x6000030d

08001388 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b0aa      	sub	sp, #168	; 0xa8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001390:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	60da      	str	r2, [r3, #12]
 800139e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013a0:	f107 0310 	add.w	r3, r7, #16
 80013a4:	2284      	movs	r2, #132	; 0x84
 80013a6:	2100      	movs	r1, #0
 80013a8:	4618      	mov	r0, r3
 80013aa:	f00e f843 	bl	800f434 <memset>
  if(i2cHandle->Instance==I2C1)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a22      	ldr	r2, [pc, #136]	; (800143c <HAL_I2C_MspInit+0xb4>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d13c      	bne.n	8001432 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013bc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80013be:	2300      	movs	r3, #0
 80013c0:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013c2:	f107 0310 	add.w	r3, r7, #16
 80013c6:	4618      	mov	r0, r3
 80013c8:	f004 fbc0 	bl	8005b4c <HAL_RCCEx_PeriphCLKConfig>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80013d2:	f000 fc19 	bl	8001c08 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d6:	4b1a      	ldr	r3, [pc, #104]	; (8001440 <HAL_I2C_MspInit+0xb8>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	4a19      	ldr	r2, [pc, #100]	; (8001440 <HAL_I2C_MspInit+0xb8>)
 80013dc:	f043 0302 	orr.w	r3, r3, #2
 80013e0:	6313      	str	r3, [r2, #48]	; 0x30
 80013e2:	4b17      	ldr	r3, [pc, #92]	; (8001440 <HAL_I2C_MspInit+0xb8>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013f6:	2312      	movs	r3, #18
 80013f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001402:	2303      	movs	r3, #3
 8001404:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001408:	2304      	movs	r3, #4
 800140a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800140e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001412:	4619      	mov	r1, r3
 8001414:	480b      	ldr	r0, [pc, #44]	; (8001444 <HAL_I2C_MspInit+0xbc>)
 8001416:	f001 fd59 	bl	8002ecc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800141a:	4b09      	ldr	r3, [pc, #36]	; (8001440 <HAL_I2C_MspInit+0xb8>)
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	4a08      	ldr	r2, [pc, #32]	; (8001440 <HAL_I2C_MspInit+0xb8>)
 8001420:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001424:	6413      	str	r3, [r2, #64]	; 0x40
 8001426:	4b06      	ldr	r3, [pc, #24]	; (8001440 <HAL_I2C_MspInit+0xb8>)
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800142e:	60bb      	str	r3, [r7, #8]
 8001430:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001432:	bf00      	nop
 8001434:	37a8      	adds	r7, #168	; 0xa8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40005400 	.word	0x40005400
 8001440:	40023800 	.word	0x40023800
 8001444:	40020400 	.word	0x40020400

08001448 <Kalman_Init>:
 */


#include "kalman.h"

void Kalman_Init(KalmanFilter *kf, float Q, float R, float P, float initial_value) {
 8001448:	b480      	push	{r7}
 800144a:	b087      	sub	sp, #28
 800144c:	af00      	add	r7, sp, #0
 800144e:	6178      	str	r0, [r7, #20]
 8001450:	ed87 0a04 	vstr	s0, [r7, #16]
 8001454:	edc7 0a03 	vstr	s1, [r7, #12]
 8001458:	ed87 1a02 	vstr	s2, [r7, #8]
 800145c:	edc7 1a01 	vstr	s3, [r7, #4]
    kf->Q = Q;
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	601a      	str	r2, [r3, #0]
    kf->R = R;
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	68fa      	ldr	r2, [r7, #12]
 800146a:	605a      	str	r2, [r3, #4]
    kf->P = P;
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	68ba      	ldr	r2, [r7, #8]
 8001470:	609a      	str	r2, [r3, #8]
    kf->X = initial_value;
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	60da      	str	r2, [r3, #12]
}
 8001478:	bf00      	nop
 800147a:	371c      	adds	r7, #28
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <Kalman_Estimate>:

float Kalman_Estimate(KalmanFilter *kf, float measurement) {
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	ed87 0a00 	vstr	s0, [r7]
    // Prediction step: Update the error covariance 'P'
    // This is adding process noise to our uncertainty in the estimated state.
    kf->P = kf->P + kf->Q;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	ed93 7a02 	vldr	s14, [r3, #8]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	edd3 7a00 	vldr	s15, [r3]
 800149c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	edc3 7a02 	vstr	s15, [r3, #8]

    // Update step: Compute the Kalman Gain 'K'
    // Kalman Gain balances the ratio between the prediction and the new measurement
    kf->K = kf->P / (kf->P + kf->R);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	edd3 6a02 	vldr	s13, [r3, #8]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	ed93 7a02 	vldr	s14, [r3, #8]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	edd3 7a01 	vldr	s15, [r3, #4]
 80014b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	edc3 7a04 	vstr	s15, [r3, #16]

    // Update step: Update the state estimate 'X'
    // Here we adjust our state estimate based on the new measurement,
    // scaling the "innovation" by the Kalman Gain
    kf->X = kf->X + kf->K * (measurement - kf->X);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	ed93 7a03 	vldr	s14, [r3, #12]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	edd3 6a04 	vldr	s13, [r3, #16]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	edd3 7a03 	vldr	s15, [r3, #12]
 80014d8:	ed97 6a00 	vldr	s12, [r7]
 80014dc:	ee76 7a67 	vsub.f32	s15, s12, s15
 80014e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	edc3 7a03 	vstr	s15, [r3, #12]

    // Update step: Update the error covariance 'P'
    // We've used our observation, so we adjust our uncertainty accordingly
    kf->P = (1 - kf->K) * kf->P;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	edd3 7a04 	vldr	s15, [r3, #16]
 80014f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80014f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	edd3 7a02 	vldr	s15, [r3, #8]
 8001502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	edc3 7a02 	vstr	s15, [r3, #8]

    // Return the updated state estimate
    return kf->X;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	ee07 3a90 	vmov	s15, r3
}
 8001514:	eeb0 0a67 	vmov.f32	s0, s15
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
	...

08001524 <ProcessCommand>:
/* USER CODE BEGIN 0 */



void ProcessCommand(uint8_t *commandBuffer)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]

    char *command = strtok((char*)commandBuffer, " "); // 명령어 분리
 800152c:	492c      	ldr	r1, [pc, #176]	; (80015e0 <ProcessCommand+0xbc>)
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f00f fcca 	bl	8010ec8 <strtok>
 8001534:	60f8      	str	r0, [r7, #12]

    // 'strtok'는 다음 호출 때 NULL을 사용하여 이전 문자열에서 계속 토큰을 추출
    char *argument = strtok(NULL, " "); // 인자 분리
 8001536:	492a      	ldr	r1, [pc, #168]	; (80015e0 <ProcessCommand+0xbc>)
 8001538:	2000      	movs	r0, #0
 800153a:	f00f fcc5 	bl	8010ec8 <strtok>
 800153e:	60b8      	str	r0, [r7, #8]

    if (strcmp((char*)command, "echo") == 0) {
 8001540:	4928      	ldr	r1, [pc, #160]	; (80015e4 <ProcessCommand+0xc0>)
 8001542:	68f8      	ldr	r0, [r7, #12]
 8001544:	f7fe fe64 	bl	8000210 <strcmp>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d10b      	bne.n	8001566 <ProcessCommand+0x42>
        HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "echo\n"), 100);
 800154e:	4926      	ldr	r1, [pc, #152]	; (80015e8 <ProcessCommand+0xc4>)
 8001550:	4826      	ldr	r0, [pc, #152]	; (80015ec <ProcessCommand+0xc8>)
 8001552:	f00e fdf7 	bl	8010144 <siprintf>
 8001556:	4603      	mov	r3, r0
 8001558:	b29a      	uxth	r2, r3
 800155a:	2364      	movs	r3, #100	; 0x64
 800155c:	4923      	ldr	r1, [pc, #140]	; (80015ec <ProcessCommand+0xc8>)
 800155e:	4824      	ldr	r0, [pc, #144]	; (80015f0 <ProcessCommand+0xcc>)
 8001560:	f007 fcda 	bl	8008f18 <HAL_UART_Transmit>
    }else if (strcmp((char*)command, "sensor") == 0) {
    	SensorCommand();
    }else {
        HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "Please insert correct command\n"), 100);
    }
}
 8001564:	e038      	b.n	80015d8 <ProcessCommand+0xb4>
    }else if (strcmp((char*)command, "rev") == 0) {
 8001566:	4923      	ldr	r1, [pc, #140]	; (80015f4 <ProcessCommand+0xd0>)
 8001568:	68f8      	ldr	r0, [r7, #12]
 800156a:	f7fe fe51 	bl	8000210 <strcmp>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d106      	bne.n	8001582 <ProcessCommand+0x5e>
		if (argument != NULL) {
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d02e      	beq.n	80015d8 <ProcessCommand+0xb4>
			RevCommand(argument);
 800157a:	68b8      	ldr	r0, [r7, #8]
 800157c:	f000 f844 	bl	8001608 <RevCommand>
}
 8001580:	e02a      	b.n	80015d8 <ProcessCommand+0xb4>
    }else if (strcmp((char*)command, "lin") == 0) {
 8001582:	491d      	ldr	r1, [pc, #116]	; (80015f8 <ProcessCommand+0xd4>)
 8001584:	68f8      	ldr	r0, [r7, #12]
 8001586:	f7fe fe43 	bl	8000210 <strcmp>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d103      	bne.n	8001598 <ProcessCommand+0x74>
    	LinCommand(argument);
 8001590:	68b8      	ldr	r0, [r7, #8]
 8001592:	f000 f885 	bl	80016a0 <LinCommand>
}
 8001596:	e01f      	b.n	80015d8 <ProcessCommand+0xb4>
    }else if (strcmp((char*)command, "servo") == 0) {
 8001598:	4918      	ldr	r1, [pc, #96]	; (80015fc <ProcessCommand+0xd8>)
 800159a:	68f8      	ldr	r0, [r7, #12]
 800159c:	f7fe fe38 	bl	8000210 <strcmp>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d103      	bne.n	80015ae <ProcessCommand+0x8a>
    	ServoCommand(argument);
 80015a6:	68b8      	ldr	r0, [r7, #8]
 80015a8:	f000 f8c8 	bl	800173c <ServoCommand>
}
 80015ac:	e014      	b.n	80015d8 <ProcessCommand+0xb4>
    }else if (strcmp((char*)command, "sensor") == 0) {
 80015ae:	4914      	ldr	r1, [pc, #80]	; (8001600 <ProcessCommand+0xdc>)
 80015b0:	68f8      	ldr	r0, [r7, #12]
 80015b2:	f7fe fe2d 	bl	8000210 <strcmp>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d102      	bne.n	80015c2 <ProcessCommand+0x9e>
    	SensorCommand();
 80015bc:	f000 f922 	bl	8001804 <SensorCommand>
}
 80015c0:	e00a      	b.n	80015d8 <ProcessCommand+0xb4>
        HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "Please insert correct command\n"), 100);
 80015c2:	4910      	ldr	r1, [pc, #64]	; (8001604 <ProcessCommand+0xe0>)
 80015c4:	4809      	ldr	r0, [pc, #36]	; (80015ec <ProcessCommand+0xc8>)
 80015c6:	f00e fdbd 	bl	8010144 <siprintf>
 80015ca:	4603      	mov	r3, r0
 80015cc:	b29a      	uxth	r2, r3
 80015ce:	2364      	movs	r3, #100	; 0x64
 80015d0:	4906      	ldr	r1, [pc, #24]	; (80015ec <ProcessCommand+0xc8>)
 80015d2:	4807      	ldr	r0, [pc, #28]	; (80015f0 <ProcessCommand+0xcc>)
 80015d4:	f007 fca0 	bl	8008f18 <HAL_UART_Transmit>
}
 80015d8:	bf00      	nop
 80015da:	3710      	adds	r7, #16
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	08014674 	.word	0x08014674
 80015e4:	08014678 	.word	0x08014678
 80015e8:	08014680 	.word	0x08014680
 80015ec:	200005e0 	.word	0x200005e0
 80015f0:	20000664 	.word	0x20000664
 80015f4:	08014688 	.word	0x08014688
 80015f8:	0801468c 	.word	0x0801468c
 80015fc:	08014690 	.word	0x08014690
 8001600:	08014698 	.word	0x08014698
 8001604:	080146a0 	.word	0x080146a0

08001608 <RevCommand>:

void RevCommand(char *arg){
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
    int step_rev_angle;
    if(sscanf(arg, "%d", &step_rev_angle) == 1){
 8001610:	f107 030c 	add.w	r3, r7, #12
 8001614:	461a      	mov	r2, r3
 8001616:	491c      	ldr	r1, [pc, #112]	; (8001688 <RevCommand+0x80>)
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f00e fdb3 	bl	8010184 <siscanf>
 800161e:	4603      	mov	r3, r0
 8001620:	2b01      	cmp	r3, #1
 8001622:	d11e      	bne.n	8001662 <RevCommand+0x5a>
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d deg rev Still moving \n\r",step_rev_angle), 100);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	461a      	mov	r2, r3
 8001628:	4918      	ldr	r1, [pc, #96]	; (800168c <RevCommand+0x84>)
 800162a:	4819      	ldr	r0, [pc, #100]	; (8001690 <RevCommand+0x88>)
 800162c:	f00e fd8a 	bl	8010144 <siprintf>
 8001630:	4603      	mov	r3, r0
 8001632:	b29a      	uxth	r2, r3
 8001634:	2364      	movs	r3, #100	; 0x64
 8001636:	4916      	ldr	r1, [pc, #88]	; (8001690 <RevCommand+0x88>)
 8001638:	4816      	ldr	r0, [pc, #88]	; (8001694 <RevCommand+0x8c>)
 800163a:	f007 fc6d 	bl	8008f18 <HAL_UART_Transmit>
        stepRev(step_rev_angle);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	4618      	mov	r0, r3
 8001642:	f000 faf1 	bl	8001c28 <stepRev>
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d deg rev End \n\r",step_rev_angle), 100);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	461a      	mov	r2, r3
 800164a:	4913      	ldr	r1, [pc, #76]	; (8001698 <RevCommand+0x90>)
 800164c:	4810      	ldr	r0, [pc, #64]	; (8001690 <RevCommand+0x88>)
 800164e:	f00e fd79 	bl	8010144 <siprintf>
 8001652:	4603      	mov	r3, r0
 8001654:	b29a      	uxth	r2, r3
 8001656:	2364      	movs	r3, #100	; 0x64
 8001658:	490d      	ldr	r1, [pc, #52]	; (8001690 <RevCommand+0x88>)
 800165a:	480e      	ldr	r0, [pc, #56]	; (8001694 <RevCommand+0x8c>)
 800165c:	f007 fc5c 	bl	8008f18 <HAL_UART_Transmit>
 8001660:	e00a      	b.n	8001678 <RevCommand+0x70>
    }else{
    	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "invalid data\r\n"), 100);
 8001662:	490e      	ldr	r1, [pc, #56]	; (800169c <RevCommand+0x94>)
 8001664:	480a      	ldr	r0, [pc, #40]	; (8001690 <RevCommand+0x88>)
 8001666:	f00e fd6d 	bl	8010144 <siprintf>
 800166a:	4603      	mov	r3, r0
 800166c:	b29a      	uxth	r2, r3
 800166e:	2364      	movs	r3, #100	; 0x64
 8001670:	4907      	ldr	r1, [pc, #28]	; (8001690 <RevCommand+0x88>)
 8001672:	4808      	ldr	r0, [pc, #32]	; (8001694 <RevCommand+0x8c>)
 8001674:	f007 fc50 	bl	8008f18 <HAL_UART_Transmit>
    }

    HAL_Delay(1000); // Delay for 1 second
 8001678:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800167c:	f001 fa22 	bl	8002ac4 <HAL_Delay>
}
 8001680:	bf00      	nop
 8001682:	3710      	adds	r7, #16
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	080146c0 	.word	0x080146c0
 800168c:	080146c4 	.word	0x080146c4
 8001690:	200005e0 	.word	0x200005e0
 8001694:	20000664 	.word	0x20000664
 8001698:	080146e0 	.word	0x080146e0
 800169c:	080146f4 	.word	0x080146f4

080016a0 <LinCommand>:

void LinCommand(char *arg){
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
    int step_lin_dist = 0;
 80016a8:	2300      	movs	r3, #0
 80016aa:	60fb      	str	r3, [r7, #12]
    if (sscanf(arg, "%d", &step_lin_dist) == 1) {
 80016ac:	f107 030c 	add.w	r3, r7, #12
 80016b0:	461a      	mov	r2, r3
 80016b2:	491c      	ldr	r1, [pc, #112]	; (8001724 <LinCommand+0x84>)
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f00e fd65 	bl	8010184 <siscanf>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d11e      	bne.n	80016fe <LinCommand+0x5e>
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d mm lin Still moving \n\r",step_lin_dist), 100);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	461a      	mov	r2, r3
 80016c4:	4918      	ldr	r1, [pc, #96]	; (8001728 <LinCommand+0x88>)
 80016c6:	4819      	ldr	r0, [pc, #100]	; (800172c <LinCommand+0x8c>)
 80016c8:	f00e fd3c 	bl	8010144 <siprintf>
 80016cc:	4603      	mov	r3, r0
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	2364      	movs	r3, #100	; 0x64
 80016d2:	4916      	ldr	r1, [pc, #88]	; (800172c <LinCommand+0x8c>)
 80016d4:	4816      	ldr	r0, [pc, #88]	; (8001730 <LinCommand+0x90>)
 80016d6:	f007 fc1f 	bl	8008f18 <HAL_UART_Transmit>
        stepLin(step_lin_dist);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	4618      	mov	r0, r3
 80016de:	f000 fb0d 	bl	8001cfc <stepLin>
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d mm lin End\n\r", step_lin_dist), 100);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	461a      	mov	r2, r3
 80016e6:	4913      	ldr	r1, [pc, #76]	; (8001734 <LinCommand+0x94>)
 80016e8:	4810      	ldr	r0, [pc, #64]	; (800172c <LinCommand+0x8c>)
 80016ea:	f00e fd2b 	bl	8010144 <siprintf>
 80016ee:	4603      	mov	r3, r0
 80016f0:	b29a      	uxth	r2, r3
 80016f2:	2364      	movs	r3, #100	; 0x64
 80016f4:	490d      	ldr	r1, [pc, #52]	; (800172c <LinCommand+0x8c>)
 80016f6:	480e      	ldr	r0, [pc, #56]	; (8001730 <LinCommand+0x90>)
 80016f8:	f007 fc0e 	bl	8008f18 <HAL_UART_Transmit>
 80016fc:	e00a      	b.n	8001714 <LinCommand+0x74>
    } else {
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "invalid data\r\n"), 100);
 80016fe:	490e      	ldr	r1, [pc, #56]	; (8001738 <LinCommand+0x98>)
 8001700:	480a      	ldr	r0, [pc, #40]	; (800172c <LinCommand+0x8c>)
 8001702:	f00e fd1f 	bl	8010144 <siprintf>
 8001706:	4603      	mov	r3, r0
 8001708:	b29a      	uxth	r2, r3
 800170a:	2364      	movs	r3, #100	; 0x64
 800170c:	4907      	ldr	r1, [pc, #28]	; (800172c <LinCommand+0x8c>)
 800170e:	4808      	ldr	r0, [pc, #32]	; (8001730 <LinCommand+0x90>)
 8001710:	f007 fc02 	bl	8008f18 <HAL_UART_Transmit>
    }
    HAL_Delay(1000); // Delay for 1 second
 8001714:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001718:	f001 f9d4 	bl	8002ac4 <HAL_Delay>
}
 800171c:	bf00      	nop
 800171e:	3710      	adds	r7, #16
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	080146c0 	.word	0x080146c0
 8001728:	08014704 	.word	0x08014704
 800172c:	200005e0 	.word	0x200005e0
 8001730:	20000664 	.word	0x20000664
 8001734:	08014720 	.word	0x08014720
 8001738:	080146f4 	.word	0x080146f4

0800173c <ServoCommand>:

void ServoCommand(char *arg){
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
    float servo_angle_val = 0;
 8001744:	f04f 0300 	mov.w	r3, #0
 8001748:	60fb      	str	r3, [r7, #12]
    if(sscanf(arg, "%f", &servo_angle_val) == 1) {
 800174a:	f107 030c 	add.w	r3, r7, #12
 800174e:	461a      	mov	r2, r3
 8001750:	4925      	ldr	r1, [pc, #148]	; (80017e8 <ServoCommand+0xac>)
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f00e fd16 	bl	8010184 <siscanf>
 8001758:	4603      	mov	r3, r0
 800175a:	2b01      	cmp	r3, #1
 800175c:	d135      	bne.n	80017ca <ServoCommand+0x8e>
    	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f servo Still moving \n\r", servo_angle_val), 100);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	4618      	mov	r0, r3
 8001762:	f7fe ff21 	bl	80005a8 <__aeabi_f2d>
 8001766:	4602      	mov	r2, r0
 8001768:	460b      	mov	r3, r1
 800176a:	4920      	ldr	r1, [pc, #128]	; (80017ec <ServoCommand+0xb0>)
 800176c:	4820      	ldr	r0, [pc, #128]	; (80017f0 <ServoCommand+0xb4>)
 800176e:	f00e fce9 	bl	8010144 <siprintf>
 8001772:	4603      	mov	r3, r0
 8001774:	b29a      	uxth	r2, r3
 8001776:	2364      	movs	r3, #100	; 0x64
 8001778:	491d      	ldr	r1, [pc, #116]	; (80017f0 <ServoCommand+0xb4>)
 800177a:	481e      	ldr	r0, [pc, #120]	; (80017f4 <ServoCommand+0xb8>)
 800177c:	f007 fbcc 	bl	8008f18 <HAL_UART_Transmit>
    	servo_angle(&htim2, TIM_CHANNEL_1, servo_angle_val);
 8001780:	edd7 7a03 	vldr	s15, [r7, #12]
 8001784:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001788:	ee17 2a90 	vmov	r2, s15
 800178c:	2100      	movs	r1, #0
 800178e:	481a      	ldr	r0, [pc, #104]	; (80017f8 <ServoCommand+0xbc>)
 8001790:	f000 fb4e 	bl	8001e30 <servo_angle>
    	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f servo End \n\r", servo_angle_val), 100);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	4618      	mov	r0, r3
 8001798:	f7fe ff06 	bl	80005a8 <__aeabi_f2d>
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	4916      	ldr	r1, [pc, #88]	; (80017fc <ServoCommand+0xc0>)
 80017a2:	4813      	ldr	r0, [pc, #76]	; (80017f0 <ServoCommand+0xb4>)
 80017a4:	f00e fcce 	bl	8010144 <siprintf>
 80017a8:	4603      	mov	r3, r0
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	2364      	movs	r3, #100	; 0x64
 80017ae:	4910      	ldr	r1, [pc, #64]	; (80017f0 <ServoCommand+0xb4>)
 80017b0:	4810      	ldr	r0, [pc, #64]	; (80017f4 <ServoCommand+0xb8>)
 80017b2:	f007 fbb1 	bl	8008f18 <HAL_UART_Transmit>
        HAL_Delay(2000); // Delay for 2 seconds
 80017b6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80017ba:	f001 f983 	bl	8002ac4 <HAL_Delay>
        servo_angle(&htim2, TIM_CHANNEL_1, 0); // return to servo origin
 80017be:	2200      	movs	r2, #0
 80017c0:	2100      	movs	r1, #0
 80017c2:	480d      	ldr	r0, [pc, #52]	; (80017f8 <ServoCommand+0xbc>)
 80017c4:	f000 fb34 	bl	8001e30 <servo_angle>
    }else{
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "invalid data\r\n"), 100);
    }
}
 80017c8:	e00a      	b.n	80017e0 <ServoCommand+0xa4>
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "invalid data\r\n"), 100);
 80017ca:	490d      	ldr	r1, [pc, #52]	; (8001800 <ServoCommand+0xc4>)
 80017cc:	4808      	ldr	r0, [pc, #32]	; (80017f0 <ServoCommand+0xb4>)
 80017ce:	f00e fcb9 	bl	8010144 <siprintf>
 80017d2:	4603      	mov	r3, r0
 80017d4:	b29a      	uxth	r2, r3
 80017d6:	2364      	movs	r3, #100	; 0x64
 80017d8:	4905      	ldr	r1, [pc, #20]	; (80017f0 <ServoCommand+0xb4>)
 80017da:	4806      	ldr	r0, [pc, #24]	; (80017f4 <ServoCommand+0xb8>)
 80017dc:	f007 fb9c 	bl	8008f18 <HAL_UART_Transmit>
}
 80017e0:	bf00      	nop
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	08014730 	.word	0x08014730
 80017ec:	08014734 	.word	0x08014734
 80017f0:	200005e0 	.word	0x200005e0
 80017f4:	20000664 	.word	0x20000664
 80017f8:	20000548 	.word	0x20000548
 80017fc:	08014750 	.word	0x08014750
 8001800:	080146f4 	.word	0x080146f4

08001804 <SensorCommand>:


void SensorCommand(){
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0

	uint32_t start_section_time, end_section_time,elapsed_section_time;
    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "sensor test\r\n"), 100);
 800180a:	495f      	ldr	r1, [pc, #380]	; (8001988 <SensorCommand+0x184>)
 800180c:	485f      	ldr	r0, [pc, #380]	; (800198c <SensorCommand+0x188>)
 800180e:	f00e fc99 	bl	8010144 <siprintf>
 8001812:	4603      	mov	r3, r0
 8001814:	b29a      	uxth	r2, r3
 8001816:	2364      	movs	r3, #100	; 0x64
 8001818:	495c      	ldr	r1, [pc, #368]	; (800198c <SensorCommand+0x188>)
 800181a:	485d      	ldr	r0, [pc, #372]	; (8001990 <SensorCommand+0x18c>)
 800181c:	f007 fb7c 	bl	8008f18 <HAL_UART_Transmit>

    start_time = HAL_GetTick();
 8001820:	f001 f944 	bl	8002aac <HAL_GetTick>
 8001824:	4603      	mov	r3, r0
 8001826:	4a5b      	ldr	r2, [pc, #364]	; (8001994 <SensorCommand+0x190>)
 8001828:	6013      	str	r3, [r2, #0]
    for(int count =0; count < 100; count++){
 800182a:	2300      	movs	r3, #0
 800182c:	617b      	str	r3, [r7, #20]
 800182e:	e0a1      	b.n	8001974 <SensorCommand+0x170>
  	  start_section_time = HAL_GetTick();
 8001830:	f001 f93c 	bl	8002aac <HAL_GetTick>
 8001834:	60f8      	str	r0, [r7, #12]

  	  /// Read the VL53l0x data ///
        for (int i = 0; i < NUM_SENSOR; i++) {
 8001836:	2300      	movs	r3, #0
 8001838:	613b      	str	r3, [r7, #16]
 800183a:	e051      	b.n	80018e0 <SensorCommand+0xdc>

    	    uint8_t q = i / 12;
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	4a56      	ldr	r2, [pc, #344]	; (8001998 <SensorCommand+0x194>)
 8001840:	fb82 1203 	smull	r1, r2, r2, r3
 8001844:	1052      	asrs	r2, r2, #1
 8001846:	17db      	asrs	r3, r3, #31
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	70fb      	strb	r3, [r7, #3]
    	    uint8_t r = i % 12;
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	4b52      	ldr	r3, [pc, #328]	; (8001998 <SensorCommand+0x194>)
 8001850:	fb83 1302 	smull	r1, r3, r3, r2
 8001854:	1059      	asrs	r1, r3, #1
 8001856:	17d3      	asrs	r3, r2, #31
 8001858:	1ac9      	subs	r1, r1, r3
 800185a:	460b      	mov	r3, r1
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	440b      	add	r3, r1
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	1ad1      	subs	r1, r2, r3
 8001864:	460b      	mov	r3, r1
 8001866:	70bb      	strb	r3, [r7, #2]
    	    uint8_t active_device = q * 2 + (r >= 8 ? 1 : 0);
 8001868:	78fb      	ldrb	r3, [r7, #3]
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	b2db      	uxtb	r3, r3
 800186e:	78ba      	ldrb	r2, [r7, #2]
 8001870:	2a07      	cmp	r2, #7
 8001872:	bf8c      	ite	hi
 8001874:	2201      	movhi	r2, #1
 8001876:	2200      	movls	r2, #0
 8001878:	b2d2      	uxtb	r2, r2
 800187a:	4413      	add	r3, r2
 800187c:	707b      	strb	r3, [r7, #1]
    	    uint8_t channel = (r >= 8) ? r - 8 : r;
 800187e:	78bb      	ldrb	r3, [r7, #2]
 8001880:	2b07      	cmp	r3, #7
 8001882:	d903      	bls.n	800188c <SensorCommand+0x88>
 8001884:	78bb      	ldrb	r3, [r7, #2]
 8001886:	3b08      	subs	r3, #8
 8001888:	b2db      	uxtb	r3, r3
 800188a:	e000      	b.n	800188e <SensorCommand+0x8a>
 800188c:	78bb      	ldrb	r3, [r7, #2]
 800188e:	703b      	strb	r3, [r7, #0]

    	    resetTcaDevicesExcept(active_device, tca_addr);
 8001890:	787b      	ldrb	r3, [r7, #1]
 8001892:	4942      	ldr	r1, [pc, #264]	; (800199c <SensorCommand+0x198>)
 8001894:	4618      	mov	r0, r3
 8001896:	f000 fef5 	bl	8002684 <resetTcaDevicesExcept>
            setActiveTcaChannel(active_device, channel, tca_addr);
 800189a:	7839      	ldrb	r1, [r7, #0]
 800189c:	787b      	ldrb	r3, [r7, #1]
 800189e:	4a3f      	ldr	r2, [pc, #252]	; (800199c <SensorCommand+0x198>)
 80018a0:	4618      	mov	r0, r3
 80018a2:	f000 ff1b 	bl	80026dc <setActiveTcaChannel>
            Dev = &vl53l0x_s[i];
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80018ac:	fb02 f303 	mul.w	r3, r2, r3
 80018b0:	4a3b      	ldr	r2, [pc, #236]	; (80019a0 <SensorCommand+0x19c>)
 80018b2:	4413      	add	r3, r2
 80018b4:	4a3b      	ldr	r2, [pc, #236]	; (80019a4 <SensorCommand+0x1a0>)
 80018b6:	6013      	str	r3, [r2, #0]
            VL53L0X_PerformContinuousRangingMeasurement(Dev, &RangingData); // 1500us
 80018b8:	4b3a      	ldr	r3, [pc, #232]	; (80019a4 <SensorCommand+0x1a0>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	493a      	ldr	r1, [pc, #232]	; (80019a8 <SensorCommand+0x1a4>)
 80018be:	4618      	mov	r0, r3
 80018c0:	f00a fa0f 	bl	800bce2 <VL53L0X_PerformContinuousRangingMeasurement>
            excuteVl53l0x(&vl53l0x_s[i],i);
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80018ca:	fb02 f303 	mul.w	r3, r2, r3
 80018ce:	4a34      	ldr	r2, [pc, #208]	; (80019a0 <SensorCommand+0x19c>)
 80018d0:	4413      	add	r3, r2
 80018d2:	6939      	ldr	r1, [r7, #16]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f001 f821 	bl	800291c <excuteVl53l0x>
        for (int i = 0; i < NUM_SENSOR; i++) {
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	3301      	adds	r3, #1
 80018de:	613b      	str	r3, [r7, #16]
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	2b2f      	cmp	r3, #47	; 0x2f
 80018e4:	ddaa      	ble.n	800183c <SensorCommand+0x38>

        }

		  end_section_time = HAL_GetTick();
 80018e6:	f001 f8e1 	bl	8002aac <HAL_GetTick>
 80018ea:	60b8      	str	r0, [r7, #8]
		  elapsed_section_time = end_section_time - start_section_time;
 80018ec:	68ba      	ldr	r2, [r7, #8]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	607b      	str	r3, [r7, #4]
		  HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%lu ms ", elapsed_section_time), 100);
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	492d      	ldr	r1, [pc, #180]	; (80019ac <SensorCommand+0x1a8>)
 80018f8:	4824      	ldr	r0, [pc, #144]	; (800198c <SensorCommand+0x188>)
 80018fa:	f00e fc23 	bl	8010144 <siprintf>
 80018fe:	4603      	mov	r3, r0
 8001900:	b29a      	uxth	r2, r3
 8001902:	2364      	movs	r3, #100	; 0x64
 8001904:	4921      	ldr	r1, [pc, #132]	; (800198c <SensorCommand+0x188>)
 8001906:	4822      	ldr	r0, [pc, #136]	; (8001990 <SensorCommand+0x18c>)
 8001908:	f007 fb06 	bl	8008f18 <HAL_UART_Transmit>

		  rawData = Read_HX711();
 800190c:	f7ff fc68 	bl	80011e0 <Read_HX711>
 8001910:	ee07 0a90 	vmov	s15, r0
 8001914:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001918:	4b25      	ldr	r3, [pc, #148]	; (80019b0 <SensorCommand+0x1ac>)
 800191a:	edc3 7a00 	vstr	s15, [r3]
		  UART_SendWeight_g(rawData,loadcell_slope,loadcell_bias); // Send the weight data over UART
 800191e:	4b24      	ldr	r3, [pc, #144]	; (80019b0 <SensorCommand+0x1ac>)
 8001920:	edd3 7a00 	vldr	s15, [r3]
 8001924:	4b23      	ldr	r3, [pc, #140]	; (80019b4 <SensorCommand+0x1b0>)
 8001926:	ed93 7a00 	vldr	s14, [r3]
 800192a:	4b23      	ldr	r3, [pc, #140]	; (80019b8 <SensorCommand+0x1b4>)
 800192c:	edd3 6a00 	vldr	s13, [r3]
 8001930:	eeb0 1a66 	vmov.f32	s2, s13
 8001934:	eef0 0a47 	vmov.f32	s1, s14
 8001938:	eeb0 0a67 	vmov.f32	s0, s15
 800193c:	f7ff fc9e 	bl	800127c <UART_SendWeight_g>


        end_time = HAL_GetTick();
 8001940:	f001 f8b4 	bl	8002aac <HAL_GetTick>
 8001944:	4603      	mov	r3, r0
 8001946:	4a1d      	ldr	r2, [pc, #116]	; (80019bc <SensorCommand+0x1b8>)
 8001948:	6013      	str	r3, [r2, #0]
        time_diff = end_time - start_time;
 800194a:	4b1c      	ldr	r3, [pc, #112]	; (80019bc <SensorCommand+0x1b8>)
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	4b11      	ldr	r3, [pc, #68]	; (8001994 <SensorCommand+0x190>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	4a1a      	ldr	r2, [pc, #104]	; (80019c0 <SensorCommand+0x1bc>)
 8001956:	6013      	str	r3, [r2, #0]

        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n"), 100);
 8001958:	491a      	ldr	r1, [pc, #104]	; (80019c4 <SensorCommand+0x1c0>)
 800195a:	480c      	ldr	r0, [pc, #48]	; (800198c <SensorCommand+0x188>)
 800195c:	f00e fbf2 	bl	8010144 <siprintf>
 8001960:	4603      	mov	r3, r0
 8001962:	b29a      	uxth	r2, r3
 8001964:	2364      	movs	r3, #100	; 0x64
 8001966:	4909      	ldr	r1, [pc, #36]	; (800198c <SensorCommand+0x188>)
 8001968:	4809      	ldr	r0, [pc, #36]	; (8001990 <SensorCommand+0x18c>)
 800196a:	f007 fad5 	bl	8008f18 <HAL_UART_Transmit>
    for(int count =0; count < 100; count++){
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	3301      	adds	r3, #1
 8001972:	617b      	str	r3, [r7, #20]
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	2b63      	cmp	r3, #99	; 0x63
 8001978:	f77f af5a 	ble.w	8001830 <SensorCommand+0x2c>
    }
}
 800197c:	bf00      	nop
 800197e:	bf00      	nop
 8001980:	3718      	adds	r7, #24
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	08014764 	.word	0x08014764
 800198c:	200005e0 	.word	0x200005e0
 8001990:	20000664 	.word	0x20000664
 8001994:	20000538 	.word	0x20000538
 8001998:	2aaaaaab 	.word	0x2aaaaaab
 800199c:	20000020 	.word	0x20000020
 80019a0:	20000710 	.word	0x20000710
 80019a4:	20005210 	.word	0x20005210
 80019a8:	200006ec 	.word	0x200006ec
 80019ac:	08014774 	.word	0x08014774
 80019b0:	20000530 	.word	0x20000530
 80019b4:	20000000 	.word	0x20000000
 80019b8:	20000004 	.word	0x20000004
 80019bc:	2000053c 	.word	0x2000053c
 80019c0:	20000534 	.word	0x20000534
 80019c4:	0801477c 	.word	0x0801477c

080019c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019cc:	f001 f81d 	bl	8002a0a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019d0:	f000 f832 	bl	8001a38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019d4:	f7ff fb40 	bl	8001058 <MX_GPIO_Init>
  MX_I2C1_Init();
 80019d8:	f7ff fc96 	bl	8001308 <MX_I2C1_Init>
  MX_TIM7_Init();
 80019dc:	f000 fc48 	bl	8002270 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 80019e0:	f000 fce4 	bl	80023ac <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80019e4:	f000 fbce 	bl	8002184 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80019e8:	f000 f894 	bl	8001b14 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 80019ec:	2100      	movs	r1, #0
 80019ee:	480c      	ldr	r0, [pc, #48]	; (8001a20 <main+0x58>)
 80019f0:	f005 fada 	bl	8006fa8 <HAL_TIM_PWM_Start>

  // Initialize the HX711
  HX711_Init();
 80019f4:	f7ff fbe8 	bl	80011c8 <HX711_Init>

  /* UART interrupt initialization */
  initializeAllSensors(tca_addr, vl53l0x_s, filters);
 80019f8:	4a0a      	ldr	r2, [pc, #40]	; (8001a24 <main+0x5c>)
 80019fa:	490b      	ldr	r1, [pc, #44]	; (8001a28 <main+0x60>)
 80019fc:	480b      	ldr	r0, [pc, #44]	; (8001a2c <main+0x64>)
 80019fe:	f000 fee5 	bl	80027cc <initializeAllSensors>
  startMsg();
 8001a02:	f000 fdbb 	bl	800257c <startMsg>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  if(ReceiveUartMessage(&huart1, rxMsg, sizeof(rxMsg)) == HAL_OK)
 8001a06:	2241      	movs	r2, #65	; 0x41
 8001a08:	4909      	ldr	r1, [pc, #36]	; (8001a30 <main+0x68>)
 8001a0a:	480a      	ldr	r0, [pc, #40]	; (8001a34 <main+0x6c>)
 8001a0c:	f000 fd80 	bl	8002510 <ReceiveUartMessage>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d1f7      	bne.n	8001a06 <main+0x3e>
	  {
	      ProcessCommand(rxMsg);
 8001a16:	4806      	ldr	r0, [pc, #24]	; (8001a30 <main+0x68>)
 8001a18:	f7ff fd84 	bl	8001524 <ProcessCommand>
	  if(ReceiveUartMessage(&huart1, rxMsg, sizeof(rxMsg)) == HAL_OK)
 8001a1c:	e7f3      	b.n	8001a06 <main+0x3e>
 8001a1e:	bf00      	nop
 8001a20:	20000548 	.word	0x20000548
 8001a24:	20005214 	.word	0x20005214
 8001a28:	20000710 	.word	0x20000710
 8001a2c:	20000020 	.word	0x20000020
 8001a30:	20000620 	.word	0x20000620
 8001a34:	20000664 	.word	0x20000664

08001a38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b094      	sub	sp, #80	; 0x50
 8001a3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a3e:	f107 0320 	add.w	r3, r7, #32
 8001a42:	2230      	movs	r2, #48	; 0x30
 8001a44:	2100      	movs	r1, #0
 8001a46:	4618      	mov	r0, r3
 8001a48:	f00d fcf4 	bl	800f434 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a4c:	f107 030c 	add.w	r3, r7, #12
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	605a      	str	r2, [r3, #4]
 8001a56:	609a      	str	r2, [r3, #8]
 8001a58:	60da      	str	r2, [r3, #12]
 8001a5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a5c:	4b2b      	ldr	r3, [pc, #172]	; (8001b0c <SystemClock_Config+0xd4>)
 8001a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a60:	4a2a      	ldr	r2, [pc, #168]	; (8001b0c <SystemClock_Config+0xd4>)
 8001a62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a66:	6413      	str	r3, [r2, #64]	; 0x40
 8001a68:	4b28      	ldr	r3, [pc, #160]	; (8001b0c <SystemClock_Config+0xd4>)
 8001a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a70:	60bb      	str	r3, [r7, #8]
 8001a72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a74:	4b26      	ldr	r3, [pc, #152]	; (8001b10 <SystemClock_Config+0xd8>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a25      	ldr	r2, [pc, #148]	; (8001b10 <SystemClock_Config+0xd8>)
 8001a7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a7e:	6013      	str	r3, [r2, #0]
 8001a80:	4b23      	ldr	r3, [pc, #140]	; (8001b10 <SystemClock_Config+0xd8>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a88:	607b      	str	r3, [r7, #4]
 8001a8a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a94:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a96:	2302      	movs	r3, #2
 8001a98:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a9a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001aa0:	2319      	movs	r3, #25
 8001aa2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001aa4:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001aa8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ab2:	f107 0320 	add.w	r3, r7, #32
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f003 fa4c 	bl	8004f54 <HAL_RCC_OscConfig>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001ac2:	f000 f8a1 	bl	8001c08 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001ac6:	f003 f9f5 	bl	8004eb4 <HAL_PWREx_EnableOverDrive>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001ad0:	f000 f89a 	bl	8001c08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ad4:	230f      	movs	r3, #15
 8001ad6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ad8:	2302      	movs	r3, #2
 8001ada:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001adc:	2300      	movs	r3, #0
 8001ade:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ae0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ae4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ae6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001aec:	f107 030c 	add.w	r3, r7, #12
 8001af0:	2107      	movs	r1, #7
 8001af2:	4618      	mov	r0, r3
 8001af4:	f003 fd88 	bl	8005608 <HAL_RCC_ClockConfig>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001afe:	f000 f883 	bl	8001c08 <Error_Handler>
  }
}
 8001b02:	bf00      	nop
 8001b04:	3750      	adds	r7, #80	; 0x50
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	40007000 	.word	0x40007000

08001b14 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b18:	2200      	movs	r2, #0
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	2025      	movs	r0, #37	; 0x25
 8001b1e:	f001 f8e5 	bl	8002cec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b22:	2025      	movs	r0, #37	; 0x25
 8001b24:	f001 f90e 	bl	8002d44 <HAL_NVIC_EnableIRQ>
  /* I2C1_ER_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001b28:	2200      	movs	r2, #0
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	2020      	movs	r0, #32
 8001b2e:	f001 f8dd 	bl	8002cec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001b32:	2020      	movs	r0, #32
 8001b34:	f001 f906 	bl	8002d44 <HAL_NVIC_EnableIRQ>
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001b38:	2200      	movs	r2, #0
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	201f      	movs	r0, #31
 8001b3e:	f001 f8d5 	bl	8002cec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001b42:	201f      	movs	r0, #31
 8001b44:	f001 f8fe 	bl	8002d44 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001b48:	2200      	movs	r2, #0
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	2028      	movs	r0, #40	; 0x28
 8001b4e:	f001 f8cd 	bl	8002cec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b52:	2028      	movs	r0, #40	; 0x28
 8001b54:	f001 f8f6 	bl	8002d44 <HAL_NVIC_EnableIRQ>
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001b58:	2200      	movs	r2, #0
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	2017      	movs	r0, #23
 8001b5e:	f001 f8c5 	bl	8002cec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001b62:	2017      	movs	r0, #23
 8001b64:	f001 f8ee 	bl	8002d44 <HAL_NVIC_EnableIRQ>
  /* TIM7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001b68:	2200      	movs	r2, #0
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	2037      	movs	r0, #55	; 0x37
 8001b6e:	f001 f8bd 	bl	8002cec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001b72:	2037      	movs	r0, #55	; 0x37
 8001b74:	f001 f8e6 	bl	8002d44 <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b78:	2200      	movs	r2, #0
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	201c      	movs	r0, #28
 8001b7e:	f001 f8b5 	bl	8002cec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b82:	201c      	movs	r0, #28
 8001b84:	f001 f8de 	bl	8002d44 <HAL_NVIC_EnableIRQ>
}
 8001b88:	bf00      	nop
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 4 */


#if 1
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_8) // A?��?�� ???�� ?��?��?��?��
 8001b96:	88fb      	ldrh	r3, [r7, #6]
 8001b98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b9c:	d113      	bne.n	8001bc6 <HAL_GPIO_EXTI_Callback+0x3a>
  {
    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)) // B?�� 값을 ?��?��
 8001b9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ba2:	4816      	ldr	r0, [pc, #88]	; (8001bfc <HAL_GPIO_EXTI_Callback+0x70>)
 8001ba4:	f001 fd02 	bl	80035ac <HAL_GPIO_ReadPin>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d005      	beq.n	8001bba <HAL_GPIO_EXTI_Callback+0x2e>
    {
      encoderCount++;
 8001bae:	4b14      	ldr	r3, [pc, #80]	; (8001c00 <HAL_GPIO_EXTI_Callback+0x74>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	4a12      	ldr	r2, [pc, #72]	; (8001c00 <HAL_GPIO_EXTI_Callback+0x74>)
 8001bb6:	6013      	str	r3, [r2, #0]
    else
    {
      encoderCount++;
    }
  }
}
 8001bb8:	e01c      	b.n	8001bf4 <HAL_GPIO_EXTI_Callback+0x68>
      encoderCount--;
 8001bba:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <HAL_GPIO_EXTI_Callback+0x74>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	4a0f      	ldr	r2, [pc, #60]	; (8001c00 <HAL_GPIO_EXTI_Callback+0x74>)
 8001bc2:	6013      	str	r3, [r2, #0]
}
 8001bc4:	e016      	b.n	8001bf4 <HAL_GPIO_EXTI_Callback+0x68>
  else if (GPIO_Pin == GPIO_PIN_15) // B?��?�� ???�� ?��?��?��?��
 8001bc6:	88fb      	ldrh	r3, [r7, #6]
 8001bc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bcc:	d112      	bne.n	8001bf4 <HAL_GPIO_EXTI_Callback+0x68>
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) // A?�� 값을 ?��?��
 8001bce:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bd2:	480c      	ldr	r0, [pc, #48]	; (8001c04 <HAL_GPIO_EXTI_Callback+0x78>)
 8001bd4:	f001 fcea 	bl	80035ac <HAL_GPIO_ReadPin>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d005      	beq.n	8001bea <HAL_GPIO_EXTI_Callback+0x5e>
      encoderCount--;
 8001bde:	4b08      	ldr	r3, [pc, #32]	; (8001c00 <HAL_GPIO_EXTI_Callback+0x74>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	3b01      	subs	r3, #1
 8001be4:	4a06      	ldr	r2, [pc, #24]	; (8001c00 <HAL_GPIO_EXTI_Callback+0x74>)
 8001be6:	6013      	str	r3, [r2, #0]
}
 8001be8:	e004      	b.n	8001bf4 <HAL_GPIO_EXTI_Callback+0x68>
      encoderCount++;
 8001bea:	4b05      	ldr	r3, [pc, #20]	; (8001c00 <HAL_GPIO_EXTI_Callback+0x74>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	4a03      	ldr	r2, [pc, #12]	; (8001c00 <HAL_GPIO_EXTI_Callback+0x74>)
 8001bf2:	6013      	str	r3, [r2, #0]
}
 8001bf4:	bf00      	nop
 8001bf6:	3708      	adds	r7, #8
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40020400 	.word	0x40020400
 8001c00:	20000540 	.word	0x20000540
 8001c04:	40020000 	.word	0x40020000

08001c08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c0c:	b672      	cpsid	i
}
 8001c0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c10:	e7fe      	b.n	8001c10 <Error_Handler+0x8>

08001c12 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001c12:	b480      	push	{r7}
 8001c14:	b083      	sub	sp, #12
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
 8001c1a:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <stepRev>:
#include "tim.h"

#define PULSE 200
#define GEAR 139

void stepRev(int ANG) {
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
	// ENA D2 PG7 GPIOG GPIO_PIN_6
	// CLK D3 PB4 GPIOB GPIO_PIN_4
	// DIR D4 PG7 GPIOG GPIO_PIN_7


  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);  // ENA
 8001c30:	2200      	movs	r2, #0
 8001c32:	2140      	movs	r1, #64	; 0x40
 8001c34:	482e      	ldr	r0, [pc, #184]	; (8001cf0 <stepRev+0xc8>)
 8001c36:	f001 fcd9 	bl	80035ec <HAL_GPIO_WritePin>

  if (ANG != 0) {
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d04e      	beq.n	8001cde <stepRev+0xb6>
    int direction = (ANG > 0) ? 1 : -1;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	dd01      	ble.n	8001c4a <stepRev+0x22>
 8001c46:	2301      	movs	r3, #1
 8001c48:	e001      	b.n	8001c4e <stepRev+0x26>
 8001c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c4e:	613b      	str	r3, [r7, #16]
    ANG *= direction;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	fb02 f303 	mul.w	r3, r2, r3
 8001c58:	607b      	str	r3, [r7, #4]
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, direction == 1 ? GPIO_PIN_SET : GPIO_PIN_RESET); // DIR
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	bf0c      	ite	eq
 8001c60:	2301      	moveq	r3, #1
 8001c62:	2300      	movne	r3, #0
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	461a      	mov	r2, r3
 8001c68:	2180      	movs	r1, #128	; 0x80
 8001c6a:	4821      	ldr	r0, [pc, #132]	; (8001cf0 <stepRev+0xc8>)
 8001c6c:	f001 fcbe 	bl	80035ec <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET); // ENA
 8001c70:	2200      	movs	r2, #0
 8001c72:	2140      	movs	r1, #64	; 0x40
 8001c74:	481e      	ldr	r0, [pc, #120]	; (8001cf0 <stepRev+0xc8>)
 8001c76:	f001 fcb9 	bl	80035ec <HAL_GPIO_WritePin>
    uint32_t steps = PULSE * GEAR * ANG / 360.0;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f646 4298 	movw	r2, #27800	; 0x6c98
 8001c80:	fb02 f303 	mul.w	r3, r2, r3
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7fe fc7d 	bl	8000584 <__aeabi_i2d>
 8001c8a:	f04f 0200 	mov.w	r2, #0
 8001c8e:	4b19      	ldr	r3, [pc, #100]	; (8001cf4 <stepRev+0xcc>)
 8001c90:	f7fe fe0c 	bl	80008ac <__aeabi_ddiv>
 8001c94:	4602      	mov	r2, r0
 8001c96:	460b      	mov	r3, r1
 8001c98:	4610      	mov	r0, r2
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	f7fe ffb4 	bl	8000c08 <__aeabi_d2uiz>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	60fb      	str	r3, [r7, #12]
    uint32_t pulse_delay_ms_ = 1; // 6rpm
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	60bb      	str	r3, [r7, #8]

    for (int i = 0; i < steps; i++) {
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]
 8001cac:	e012      	b.n	8001cd4 <stepRev+0xac>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET); //CLK
 8001cae:	2201      	movs	r2, #1
 8001cb0:	2110      	movs	r1, #16
 8001cb2:	4811      	ldr	r0, [pc, #68]	; (8001cf8 <stepRev+0xd0>)
 8001cb4:	f001 fc9a 	bl	80035ec <HAL_GPIO_WritePin>
      HAL_Delay(pulse_delay_ms_);
 8001cb8:	68b8      	ldr	r0, [r7, #8]
 8001cba:	f000 ff03 	bl	8002ac4 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); //CLK
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	2110      	movs	r1, #16
 8001cc2:	480d      	ldr	r0, [pc, #52]	; (8001cf8 <stepRev+0xd0>)
 8001cc4:	f001 fc92 	bl	80035ec <HAL_GPIO_WritePin>
      HAL_Delay(pulse_delay_ms_);
 8001cc8:	68b8      	ldr	r0, [r7, #8]
 8001cca:	f000 fefb 	bl	8002ac4 <HAL_Delay>
    for (int i = 0; i < steps; i++) {
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	617b      	str	r3, [r7, #20]
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d8e8      	bhi.n	8001cae <stepRev+0x86>
  }
  else {
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET); // ENA
  }

}
 8001cdc:	e004      	b.n	8001ce8 <stepRev+0xc0>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET); // ENA
 8001cde:	2200      	movs	r2, #0
 8001ce0:	2140      	movs	r1, #64	; 0x40
 8001ce2:	4803      	ldr	r0, [pc, #12]	; (8001cf0 <stepRev+0xc8>)
 8001ce4:	f001 fc82 	bl	80035ec <HAL_GPIO_WritePin>
}
 8001ce8:	bf00      	nop
 8001cea:	3718      	adds	r7, #24
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40021800 	.word	0x40021800
 8001cf4:	40768000 	.word	0x40768000
 8001cf8:	40020400 	.word	0x40020400

08001cfc <stepLin>:

void stepLin(int DIST) {
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b088      	sub	sp, #32
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]

	// ENA D5 PI0 GPIOI GPIO_PIN_0
	// CLK D8 PI2 GPIOI GPIO_PIN_2
	// DIR D7 PI3 GPIOI GPIO_PIN_3

	float ANG = DIST * 360.0 / 8; // 1 rev -> 8 mm
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f7fe fc3d 	bl	8000584 <__aeabi_i2d>
 8001d0a:	f04f 0200 	mov.w	r2, #0
 8001d0e:	4b44      	ldr	r3, [pc, #272]	; (8001e20 <stepLin+0x124>)
 8001d10:	f7fe fca2 	bl	8000658 <__aeabi_dmul>
 8001d14:	4602      	mov	r2, r0
 8001d16:	460b      	mov	r3, r1
 8001d18:	4610      	mov	r0, r2
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	f04f 0200 	mov.w	r2, #0
 8001d20:	4b40      	ldr	r3, [pc, #256]	; (8001e24 <stepLin+0x128>)
 8001d22:	f7fe fdc3 	bl	80008ac <__aeabi_ddiv>
 8001d26:	4602      	mov	r2, r0
 8001d28:	460b      	mov	r3, r1
 8001d2a:	4610      	mov	r0, r2
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	f7fe ff8b 	bl	8000c48 <__aeabi_d2f>
 8001d32:	4603      	mov	r3, r0
 8001d34:	61bb      	str	r3, [r7, #24]


  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);  // ENA
 8001d36:	2201      	movs	r2, #1
 8001d38:	2101      	movs	r1, #1
 8001d3a:	483b      	ldr	r0, [pc, #236]	; (8001e28 <stepLin+0x12c>)
 8001d3c:	f001 fc56 	bl	80035ec <HAL_GPIO_WritePin>

  if (ANG != 0) {
 8001d40:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d44:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d4c:	d05a      	beq.n	8001e04 <stepLin+0x108>
    int direction = (ANG > 0) ? 1 : -1;
 8001d4e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d52:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d5a:	dd01      	ble.n	8001d60 <stepLin+0x64>
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e001      	b.n	8001d64 <stepLin+0x68>
 8001d60:	f04f 33ff 	mov.w	r3, #4294967295
 8001d64:	617b      	str	r3, [r7, #20]
    ANG *= direction;
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	ee07 3a90 	vmov	s15, r3
 8001d6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d70:	ed97 7a06 	vldr	s14, [r7, #24]
 8001d74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d78:	edc7 7a06 	vstr	s15, [r7, #24]
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_3, direction == 1 ? GPIO_PIN_SET : GPIO_PIN_RESET); // DIR
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	bf0c      	ite	eq
 8001d82:	2301      	moveq	r3, #1
 8001d84:	2300      	movne	r3, #0
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	461a      	mov	r2, r3
 8001d8a:	2108      	movs	r1, #8
 8001d8c:	4826      	ldr	r0, [pc, #152]	; (8001e28 <stepLin+0x12c>)
 8001d8e:	f001 fc2d 	bl	80035ec <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);  // ENA
 8001d92:	2200      	movs	r2, #0
 8001d94:	2101      	movs	r1, #1
 8001d96:	4824      	ldr	r0, [pc, #144]	; (8001e28 <stepLin+0x12c>)
 8001d98:	f001 fc28 	bl	80035ec <HAL_GPIO_WritePin>
    uint32_t steps = PULSE * ANG / 360.0;
 8001d9c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001da0:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001e2c <stepLin+0x130>
 8001da4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001da8:	ee17 0a90 	vmov	r0, s15
 8001dac:	f7fe fbfc 	bl	80005a8 <__aeabi_f2d>
 8001db0:	f04f 0200 	mov.w	r2, #0
 8001db4:	4b1a      	ldr	r3, [pc, #104]	; (8001e20 <stepLin+0x124>)
 8001db6:	f7fe fd79 	bl	80008ac <__aeabi_ddiv>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	4610      	mov	r0, r2
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	f7fe ff21 	bl	8000c08 <__aeabi_d2uiz>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	613b      	str	r3, [r7, #16]
    uint32_t pulse_delay_ms_ = 1; // 6rpm
 8001dca:	2301      	movs	r3, #1
 8001dcc:	60fb      	str	r3, [r7, #12]

    for (int i = 0; i < steps; i++) {
 8001dce:	2300      	movs	r3, #0
 8001dd0:	61fb      	str	r3, [r7, #28]
 8001dd2:	e012      	b.n	8001dfa <stepLin+0xfe>
      HAL_GPIO_WritePin(GPIOI, GPIO_PIN_2, GPIO_PIN_SET); // CLK
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	2104      	movs	r1, #4
 8001dd8:	4813      	ldr	r0, [pc, #76]	; (8001e28 <stepLin+0x12c>)
 8001dda:	f001 fc07 	bl	80035ec <HAL_GPIO_WritePin>
      HAL_Delay(pulse_delay_ms_);
 8001dde:	68f8      	ldr	r0, [r7, #12]
 8001de0:	f000 fe70 	bl	8002ac4 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOI, GPIO_PIN_2, GPIO_PIN_RESET); // CLK
 8001de4:	2200      	movs	r2, #0
 8001de6:	2104      	movs	r1, #4
 8001de8:	480f      	ldr	r0, [pc, #60]	; (8001e28 <stepLin+0x12c>)
 8001dea:	f001 fbff 	bl	80035ec <HAL_GPIO_WritePin>
      HAL_Delay(pulse_delay_ms_);
 8001dee:	68f8      	ldr	r0, [r7, #12]
 8001df0:	f000 fe68 	bl	8002ac4 <HAL_Delay>
    for (int i = 0; i < steps; i++) {
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	3301      	adds	r3, #1
 8001df8:	61fb      	str	r3, [r7, #28]
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d8e8      	bhi.n	8001dd4 <stepLin+0xd8>
 8001e02:	e004      	b.n	8001e0e <stepLin+0x112>
    }
  }
  else {
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);  // ENA
 8001e04:	2200      	movs	r2, #0
 8001e06:	2101      	movs	r1, #1
 8001e08:	4807      	ldr	r0, [pc, #28]	; (8001e28 <stepLin+0x12c>)
 8001e0a:	f001 fbef 	bl	80035ec <HAL_GPIO_WritePin>
  }

  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);  // ENA
 8001e0e:	2201      	movs	r2, #1
 8001e10:	2101      	movs	r1, #1
 8001e12:	4805      	ldr	r0, [pc, #20]	; (8001e28 <stepLin+0x12c>)
 8001e14:	f001 fbea 	bl	80035ec <HAL_GPIO_WritePin>

}
 8001e18:	bf00      	nop
 8001e1a:	3720      	adds	r7, #32
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40768000 	.word	0x40768000
 8001e24:	40200000 	.word	0x40200000
 8001e28:	40022000 	.word	0x40022000
 8001e2c:	43480000 	.word	0x43480000

08001e30 <servo_angle>:

void servo_angle(TIM_HandleTypeDef *htim, uint32_t channel, int step) {
 8001e30:	b480      	push	{r7}
 8001e32:	b087      	sub	sp, #28
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]

	// 1 step is 0.8 mm
    if (step > 17)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2b11      	cmp	r3, #17
 8001e40:	dd01      	ble.n	8001e46 <servo_angle+0x16>
    	step = 17; // 최대 각도 제한
 8001e42:	2311      	movs	r3, #17
 8001e44:	607b      	str	r3, [r7, #4]

    int pulse_width = 21-step; // 듀티 사이클 계산 (0도에서 180도까지)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f1c3 0315 	rsb	r3, r3, #21
 8001e4c:	617b      	str	r3, [r7, #20]
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d104      	bne.n	8001e5e <servo_angle+0x2e>
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	697a      	ldr	r2, [r7, #20]
 8001e5a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001e5c:	e023      	b.n	8001ea6 <servo_angle+0x76>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	2b04      	cmp	r3, #4
 8001e62:	d104      	bne.n	8001e6e <servo_angle+0x3e>
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001e6c:	e01b      	b.n	8001ea6 <servo_angle+0x76>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	2b08      	cmp	r3, #8
 8001e72:	d104      	bne.n	8001e7e <servo_angle+0x4e>
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001e7c:	e013      	b.n	8001ea6 <servo_angle+0x76>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	2b0c      	cmp	r3, #12
 8001e82:	d104      	bne.n	8001e8e <servo_angle+0x5e>
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001e8c:	e00b      	b.n	8001ea6 <servo_angle+0x76>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	2b10      	cmp	r3, #16
 8001e92:	d104      	bne.n	8001e9e <servo_angle+0x6e>
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	6593      	str	r3, [r2, #88]	; 0x58
}
 8001e9c:	e003      	b.n	8001ea6 <servo_angle+0x76>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8001ea6:	bf00      	nop
 8001ea8:	371c      	adds	r7, #28
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
	...

08001eb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001eba:	4b0f      	ldr	r3, [pc, #60]	; (8001ef8 <HAL_MspInit+0x44>)
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	4a0e      	ldr	r2, [pc, #56]	; (8001ef8 <HAL_MspInit+0x44>)
 8001ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ec6:	4b0c      	ldr	r3, [pc, #48]	; (8001ef8 <HAL_MspInit+0x44>)
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ece:	607b      	str	r3, [r7, #4]
 8001ed0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ed2:	4b09      	ldr	r3, [pc, #36]	; (8001ef8 <HAL_MspInit+0x44>)
 8001ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed6:	4a08      	ldr	r2, [pc, #32]	; (8001ef8 <HAL_MspInit+0x44>)
 8001ed8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001edc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ede:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <HAL_MspInit+0x44>)
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ee6:	603b      	str	r3, [r7, #0]
 8001ee8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eea:	bf00      	nop
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	40023800 	.word	0x40023800

08001efc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f00:	e7fe      	b.n	8001f00 <NMI_Handler+0x4>

08001f02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f02:	b480      	push	{r7}
 8001f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f06:	e7fe      	b.n	8001f06 <HardFault_Handler+0x4>

08001f08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f0c:	e7fe      	b.n	8001f0c <MemManage_Handler+0x4>

08001f0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f12:	e7fe      	b.n	8001f12 <BusFault_Handler+0x4>

08001f14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f18:	e7fe      	b.n	8001f18 <UsageFault_Handler+0x4>

08001f1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f1e:	bf00      	nop
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f2c:	bf00      	nop
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f36:	b480      	push	{r7}
 8001f38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f3a:	bf00      	nop
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f48:	f000 fd9c 	bl	8002a84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f4c:	bf00      	nop
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001f54:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001f58:	f001 fb74 	bl	8003644 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001f5c:	bf00      	nop
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f64:	4802      	ldr	r0, [pc, #8]	; (8001f70 <TIM2_IRQHandler+0x10>)
 8001f66:	f005 f9e9 	bl	800733c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f6a:	bf00      	nop
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	20000548 	.word	0x20000548

08001f74 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001f78:	4802      	ldr	r0, [pc, #8]	; (8001f84 <I2C1_EV_IRQHandler+0x10>)
 8001f7a:	f001 fe87 	bl	8003c8c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001f7e:	bf00      	nop
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	200004dc 	.word	0x200004dc

08001f88 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001f8c:	4802      	ldr	r0, [pc, #8]	; (8001f98 <I2C1_ER_IRQHandler+0x10>)
 8001f8e:	f001 fe97 	bl	8003cc0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	200004dc 	.word	0x200004dc

08001f9c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001fa0:	4802      	ldr	r0, [pc, #8]	; (8001fac <USART1_IRQHandler+0x10>)
 8001fa2:	f007 f901 	bl	80091a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	20000664 	.word	0x20000664

08001fb0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001fb4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001fb8:	f001 fb44 	bl	8003644 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001fbc:	bf00      	nop
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001fc4:	4802      	ldr	r0, [pc, #8]	; (8001fd0 <TIM7_IRQHandler+0x10>)
 8001fc6:	f005 f9b9 	bl	800733c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001fca:	bf00      	nop
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	20000594 	.word	0x20000594

08001fd4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  return 1;
 8001fd8:	2301      	movs	r3, #1
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <_kill>:

int _kill(int pid, int sig)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001fee:	f00d f9e9 	bl	800f3c4 <__errno>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2216      	movs	r2, #22
 8001ff6:	601a      	str	r2, [r3, #0]
  return -1;
 8001ff8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <_exit>:

void _exit (int status)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800200c:	f04f 31ff 	mov.w	r1, #4294967295
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f7ff ffe7 	bl	8001fe4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002016:	e7fe      	b.n	8002016 <_exit+0x12>

08002018 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002024:	2300      	movs	r3, #0
 8002026:	617b      	str	r3, [r7, #20]
 8002028:	e00a      	b.n	8002040 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800202a:	f3af 8000 	nop.w
 800202e:	4601      	mov	r1, r0
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	1c5a      	adds	r2, r3, #1
 8002034:	60ba      	str	r2, [r7, #8]
 8002036:	b2ca      	uxtb	r2, r1
 8002038:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	3301      	adds	r3, #1
 800203e:	617b      	str	r3, [r7, #20]
 8002040:	697a      	ldr	r2, [r7, #20]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	429a      	cmp	r2, r3
 8002046:	dbf0      	blt.n	800202a <_read+0x12>
  }

  return len;
 8002048:	687b      	ldr	r3, [r7, #4]
}
 800204a:	4618      	mov	r0, r3
 800204c:	3718      	adds	r7, #24
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	b086      	sub	sp, #24
 8002056:	af00      	add	r7, sp, #0
 8002058:	60f8      	str	r0, [r7, #12]
 800205a:	60b9      	str	r1, [r7, #8]
 800205c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800205e:	2300      	movs	r3, #0
 8002060:	617b      	str	r3, [r7, #20]
 8002062:	e009      	b.n	8002078 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	1c5a      	adds	r2, r3, #1
 8002068:	60ba      	str	r2, [r7, #8]
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	4618      	mov	r0, r3
 800206e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	3301      	adds	r3, #1
 8002076:	617b      	str	r3, [r7, #20]
 8002078:	697a      	ldr	r2, [r7, #20]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	429a      	cmp	r2, r3
 800207e:	dbf1      	blt.n	8002064 <_write+0x12>
  }
  return len;
 8002080:	687b      	ldr	r3, [r7, #4]
}
 8002082:	4618      	mov	r0, r3
 8002084:	3718      	adds	r7, #24
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <_close>:

int _close(int file)
{
 800208a:	b480      	push	{r7}
 800208c:	b083      	sub	sp, #12
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002092:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002096:	4618      	mov	r0, r3
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr

080020a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020a2:	b480      	push	{r7}
 80020a4:	b083      	sub	sp, #12
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
 80020aa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020b2:	605a      	str	r2, [r3, #4]
  return 0;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr

080020c2 <_isatty>:

int _isatty(int file)
{
 80020c2:	b480      	push	{r7}
 80020c4:	b083      	sub	sp, #12
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020ca:	2301      	movs	r3, #1
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3714      	adds	r7, #20
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
	...

080020f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020fc:	4a14      	ldr	r2, [pc, #80]	; (8002150 <_sbrk+0x5c>)
 80020fe:	4b15      	ldr	r3, [pc, #84]	; (8002154 <_sbrk+0x60>)
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002108:	4b13      	ldr	r3, [pc, #76]	; (8002158 <_sbrk+0x64>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d102      	bne.n	8002116 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002110:	4b11      	ldr	r3, [pc, #68]	; (8002158 <_sbrk+0x64>)
 8002112:	4a12      	ldr	r2, [pc, #72]	; (800215c <_sbrk+0x68>)
 8002114:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002116:	4b10      	ldr	r3, [pc, #64]	; (8002158 <_sbrk+0x64>)
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4413      	add	r3, r2
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	429a      	cmp	r2, r3
 8002122:	d207      	bcs.n	8002134 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002124:	f00d f94e 	bl	800f3c4 <__errno>
 8002128:	4603      	mov	r3, r0
 800212a:	220c      	movs	r2, #12
 800212c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800212e:	f04f 33ff 	mov.w	r3, #4294967295
 8002132:	e009      	b.n	8002148 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002134:	4b08      	ldr	r3, [pc, #32]	; (8002158 <_sbrk+0x64>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800213a:	4b07      	ldr	r3, [pc, #28]	; (8002158 <_sbrk+0x64>)
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4413      	add	r3, r2
 8002142:	4a05      	ldr	r2, [pc, #20]	; (8002158 <_sbrk+0x64>)
 8002144:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002146:	68fb      	ldr	r3, [r7, #12]
}
 8002148:	4618      	mov	r0, r3
 800214a:	3718      	adds	r7, #24
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	20050000 	.word	0x20050000
 8002154:	00000400 	.word	0x00000400
 8002158:	20000544 	.word	0x20000544
 800215c:	20005630 	.word	0x20005630

08002160 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002164:	4b06      	ldr	r3, [pc, #24]	; (8002180 <SystemInit+0x20>)
 8002166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800216a:	4a05      	ldr	r2, [pc, #20]	; (8002180 <SystemInit+0x20>)
 800216c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002170:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002174:	bf00      	nop
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	e000ed00 	.word	0xe000ed00

08002184 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b08e      	sub	sp, #56	; 0x38
 8002188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800218a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800218e:	2200      	movs	r2, #0
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	605a      	str	r2, [r3, #4]
 8002194:	609a      	str	r2, [r3, #8]
 8002196:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002198:	f107 031c 	add.w	r3, r7, #28
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021a4:	463b      	mov	r3, r7
 80021a6:	2200      	movs	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]
 80021aa:	605a      	str	r2, [r3, #4]
 80021ac:	609a      	str	r2, [r3, #8]
 80021ae:	60da      	str	r2, [r3, #12]
 80021b0:	611a      	str	r2, [r3, #16]
 80021b2:	615a      	str	r2, [r3, #20]
 80021b4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021b6:	4b2d      	ldr	r3, [pc, #180]	; (800226c <MX_TIM2_Init+0xe8>)
 80021b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10800-1;
 80021be:	4b2b      	ldr	r3, [pc, #172]	; (800226c <MX_TIM2_Init+0xe8>)
 80021c0:	f642 222f 	movw	r2, #10799	; 0x2a2f
 80021c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021c6:	4b29      	ldr	r3, [pc, #164]	; (800226c <MX_TIM2_Init+0xe8>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50-1;
 80021cc:	4b27      	ldr	r3, [pc, #156]	; (800226c <MX_TIM2_Init+0xe8>)
 80021ce:	2231      	movs	r2, #49	; 0x31
 80021d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021d2:	4b26      	ldr	r3, [pc, #152]	; (800226c <MX_TIM2_Init+0xe8>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021d8:	4b24      	ldr	r3, [pc, #144]	; (800226c <MX_TIM2_Init+0xe8>)
 80021da:	2200      	movs	r2, #0
 80021dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021de:	4823      	ldr	r0, [pc, #140]	; (800226c <MX_TIM2_Init+0xe8>)
 80021e0:	f004 fc98 	bl	8006b14 <HAL_TIM_Base_Init>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80021ea:	f7ff fd0d 	bl	8001c08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021f2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021f8:	4619      	mov	r1, r3
 80021fa:	481c      	ldr	r0, [pc, #112]	; (800226c <MX_TIM2_Init+0xe8>)
 80021fc:	f005 fc26 	bl	8007a4c <HAL_TIM_ConfigClockSource>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002206:	f7ff fcff 	bl	8001c08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800220a:	4818      	ldr	r0, [pc, #96]	; (800226c <MX_TIM2_Init+0xe8>)
 800220c:	f004 fda2 	bl	8006d54 <HAL_TIM_PWM_Init>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002216:	f7ff fcf7 	bl	8001c08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800221a:	2300      	movs	r3, #0
 800221c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800221e:	2300      	movs	r3, #0
 8002220:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002222:	f107 031c 	add.w	r3, r7, #28
 8002226:	4619      	mov	r1, r3
 8002228:	4810      	ldr	r0, [pc, #64]	; (800226c <MX_TIM2_Init+0xe8>)
 800222a:	f006 fc3f 	bl	8008aac <HAL_TIMEx_MasterConfigSynchronization>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002234:	f7ff fce8 	bl	8001c08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002238:	2360      	movs	r3, #96	; 0x60
 800223a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800223c:	2300      	movs	r3, #0
 800223e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002240:	2300      	movs	r3, #0
 8002242:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002244:	2300      	movs	r3, #0
 8002246:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002248:	463b      	mov	r3, r7
 800224a:	2200      	movs	r2, #0
 800224c:	4619      	mov	r1, r3
 800224e:	4807      	ldr	r0, [pc, #28]	; (800226c <MX_TIM2_Init+0xe8>)
 8002250:	f005 f994 	bl	800757c <HAL_TIM_PWM_ConfigChannel>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800225a:	f7ff fcd5 	bl	8001c08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800225e:	4803      	ldr	r0, [pc, #12]	; (800226c <MX_TIM2_Init+0xe8>)
 8002260:	f000 f86e 	bl	8002340 <HAL_TIM_MspPostInit>

}
 8002264:	bf00      	nop
 8002266:	3738      	adds	r7, #56	; 0x38
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	20000548 	.word	0x20000548

08002270 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002276:	1d3b      	adds	r3, r7, #4
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	605a      	str	r2, [r3, #4]
 800227e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002280:	4b14      	ldr	r3, [pc, #80]	; (80022d4 <MX_TIM7_Init+0x64>)
 8002282:	4a15      	ldr	r2, [pc, #84]	; (80022d8 <MX_TIM7_Init+0x68>)
 8002284:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10800-1;
 8002286:	4b13      	ldr	r3, [pc, #76]	; (80022d4 <MX_TIM7_Init+0x64>)
 8002288:	f642 222f 	movw	r2, #10799	; 0x2a2f
 800228c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800228e:	4b11      	ldr	r3, [pc, #68]	; (80022d4 <MX_TIM7_Init+0x64>)
 8002290:	2200      	movs	r2, #0
 8002292:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 50-1;
 8002294:	4b0f      	ldr	r3, [pc, #60]	; (80022d4 <MX_TIM7_Init+0x64>)
 8002296:	2231      	movs	r2, #49	; 0x31
 8002298:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800229a:	4b0e      	ldr	r3, [pc, #56]	; (80022d4 <MX_TIM7_Init+0x64>)
 800229c:	2200      	movs	r2, #0
 800229e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80022a0:	480c      	ldr	r0, [pc, #48]	; (80022d4 <MX_TIM7_Init+0x64>)
 80022a2:	f004 fc37 	bl	8006b14 <HAL_TIM_Base_Init>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80022ac:	f7ff fcac 	bl	8001c08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022b0:	2300      	movs	r3, #0
 80022b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022b4:	2300      	movs	r3, #0
 80022b6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80022b8:	1d3b      	adds	r3, r7, #4
 80022ba:	4619      	mov	r1, r3
 80022bc:	4805      	ldr	r0, [pc, #20]	; (80022d4 <MX_TIM7_Init+0x64>)
 80022be:	f006 fbf5 	bl	8008aac <HAL_TIMEx_MasterConfigSynchronization>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80022c8:	f7ff fc9e 	bl	8001c08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80022cc:	bf00      	nop
 80022ce:	3710      	adds	r7, #16
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	20000594 	.word	0x20000594
 80022d8:	40001400 	.word	0x40001400

080022dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022ec:	d10c      	bne.n	8002308 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022ee:	4b12      	ldr	r3, [pc, #72]	; (8002338 <HAL_TIM_Base_MspInit+0x5c>)
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	4a11      	ldr	r2, [pc, #68]	; (8002338 <HAL_TIM_Base_MspInit+0x5c>)
 80022f4:	f043 0301 	orr.w	r3, r3, #1
 80022f8:	6413      	str	r3, [r2, #64]	; 0x40
 80022fa:	4b0f      	ldr	r3, [pc, #60]	; (8002338 <HAL_TIM_Base_MspInit+0x5c>)
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8002306:	e010      	b.n	800232a <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM7)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a0b      	ldr	r2, [pc, #44]	; (800233c <HAL_TIM_Base_MspInit+0x60>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d10b      	bne.n	800232a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002312:	4b09      	ldr	r3, [pc, #36]	; (8002338 <HAL_TIM_Base_MspInit+0x5c>)
 8002314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002316:	4a08      	ldr	r2, [pc, #32]	; (8002338 <HAL_TIM_Base_MspInit+0x5c>)
 8002318:	f043 0320 	orr.w	r3, r3, #32
 800231c:	6413      	str	r3, [r2, #64]	; 0x40
 800231e:	4b06      	ldr	r3, [pc, #24]	; (8002338 <HAL_TIM_Base_MspInit+0x5c>)
 8002320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002322:	f003 0320 	and.w	r3, r3, #32
 8002326:	60bb      	str	r3, [r7, #8]
 8002328:	68bb      	ldr	r3, [r7, #8]
}
 800232a:	bf00      	nop
 800232c:	3714      	adds	r7, #20
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	40023800 	.word	0x40023800
 800233c:	40001400 	.word	0x40001400

08002340 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b088      	sub	sp, #32
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002348:	f107 030c 	add.w	r3, r7, #12
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	605a      	str	r2, [r3, #4]
 8002352:	609a      	str	r2, [r3, #8]
 8002354:	60da      	str	r2, [r3, #12]
 8002356:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002360:	d11c      	bne.n	800239c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002362:	4b10      	ldr	r3, [pc, #64]	; (80023a4 <HAL_TIM_MspPostInit+0x64>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	4a0f      	ldr	r2, [pc, #60]	; (80023a4 <HAL_TIM_MspPostInit+0x64>)
 8002368:	f043 0301 	orr.w	r3, r3, #1
 800236c:	6313      	str	r3, [r2, #48]	; 0x30
 800236e:	4b0d      	ldr	r3, [pc, #52]	; (80023a4 <HAL_TIM_MspPostInit+0x64>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	60bb      	str	r3, [r7, #8]
 8002378:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800237a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800237e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002380:	2302      	movs	r3, #2
 8002382:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002384:	2300      	movs	r3, #0
 8002386:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002388:	2300      	movs	r3, #0
 800238a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800238c:	2301      	movs	r3, #1
 800238e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002390:	f107 030c 	add.w	r3, r7, #12
 8002394:	4619      	mov	r1, r3
 8002396:	4804      	ldr	r0, [pc, #16]	; (80023a8 <HAL_TIM_MspPostInit+0x68>)
 8002398:	f000 fd98 	bl	8002ecc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800239c:	bf00      	nop
 800239e:	3720      	adds	r7, #32
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40023800 	.word	0x40023800
 80023a8:	40020000 	.word	0x40020000

080023ac <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80023b0:	4b14      	ldr	r3, [pc, #80]	; (8002404 <MX_USART1_UART_Init+0x58>)
 80023b2:	4a15      	ldr	r2, [pc, #84]	; (8002408 <MX_USART1_UART_Init+0x5c>)
 80023b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80023b6:	4b13      	ldr	r3, [pc, #76]	; (8002404 <MX_USART1_UART_Init+0x58>)
 80023b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023be:	4b11      	ldr	r3, [pc, #68]	; (8002404 <MX_USART1_UART_Init+0x58>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023c4:	4b0f      	ldr	r3, [pc, #60]	; (8002404 <MX_USART1_UART_Init+0x58>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80023ca:	4b0e      	ldr	r3, [pc, #56]	; (8002404 <MX_USART1_UART_Init+0x58>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023d0:	4b0c      	ldr	r3, [pc, #48]	; (8002404 <MX_USART1_UART_Init+0x58>)
 80023d2:	220c      	movs	r2, #12
 80023d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023d6:	4b0b      	ldr	r3, [pc, #44]	; (8002404 <MX_USART1_UART_Init+0x58>)
 80023d8:	2200      	movs	r2, #0
 80023da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023dc:	4b09      	ldr	r3, [pc, #36]	; (8002404 <MX_USART1_UART_Init+0x58>)
 80023de:	2200      	movs	r2, #0
 80023e0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023e2:	4b08      	ldr	r3, [pc, #32]	; (8002404 <MX_USART1_UART_Init+0x58>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023e8:	4b06      	ldr	r3, [pc, #24]	; (8002404 <MX_USART1_UART_Init+0x58>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023ee:	4805      	ldr	r0, [pc, #20]	; (8002404 <MX_USART1_UART_Init+0x58>)
 80023f0:	f006 fcd2 	bl	8008d98 <HAL_UART_Init>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80023fa:	f7ff fc05 	bl	8001c08 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	20000664 	.word	0x20000664
 8002408:	40011000 	.word	0x40011000

0800240c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b0ac      	sub	sp, #176	; 0xb0
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002414:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	605a      	str	r2, [r3, #4]
 800241e:	609a      	str	r2, [r3, #8]
 8002420:	60da      	str	r2, [r3, #12]
 8002422:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002424:	f107 0318 	add.w	r3, r7, #24
 8002428:	2284      	movs	r2, #132	; 0x84
 800242a:	2100      	movs	r1, #0
 800242c:	4618      	mov	r0, r3
 800242e:	f00d f801 	bl	800f434 <memset>
  if(uartHandle->Instance==USART1)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a32      	ldr	r2, [pc, #200]	; (8002500 <HAL_UART_MspInit+0xf4>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d15c      	bne.n	80024f6 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800243c:	2340      	movs	r3, #64	; 0x40
 800243e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002440:	2300      	movs	r3, #0
 8002442:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002444:	f107 0318 	add.w	r3, r7, #24
 8002448:	4618      	mov	r0, r3
 800244a:	f003 fb7f 	bl	8005b4c <HAL_RCCEx_PeriphCLKConfig>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002454:	f7ff fbd8 	bl	8001c08 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002458:	4b2a      	ldr	r3, [pc, #168]	; (8002504 <HAL_UART_MspInit+0xf8>)
 800245a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245c:	4a29      	ldr	r2, [pc, #164]	; (8002504 <HAL_UART_MspInit+0xf8>)
 800245e:	f043 0310 	orr.w	r3, r3, #16
 8002462:	6453      	str	r3, [r2, #68]	; 0x44
 8002464:	4b27      	ldr	r3, [pc, #156]	; (8002504 <HAL_UART_MspInit+0xf8>)
 8002466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002468:	f003 0310 	and.w	r3, r3, #16
 800246c:	617b      	str	r3, [r7, #20]
 800246e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002470:	4b24      	ldr	r3, [pc, #144]	; (8002504 <HAL_UART_MspInit+0xf8>)
 8002472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002474:	4a23      	ldr	r2, [pc, #140]	; (8002504 <HAL_UART_MspInit+0xf8>)
 8002476:	f043 0302 	orr.w	r3, r3, #2
 800247a:	6313      	str	r3, [r2, #48]	; 0x30
 800247c:	4b21      	ldr	r3, [pc, #132]	; (8002504 <HAL_UART_MspInit+0xf8>)
 800247e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	613b      	str	r3, [r7, #16]
 8002486:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002488:	4b1e      	ldr	r3, [pc, #120]	; (8002504 <HAL_UART_MspInit+0xf8>)
 800248a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248c:	4a1d      	ldr	r2, [pc, #116]	; (8002504 <HAL_UART_MspInit+0xf8>)
 800248e:	f043 0301 	orr.w	r3, r3, #1
 8002492:	6313      	str	r3, [r2, #48]	; 0x30
 8002494:	4b1b      	ldr	r3, [pc, #108]	; (8002504 <HAL_UART_MspInit+0xf8>)
 8002496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002498:	f003 0301 	and.w	r3, r3, #1
 800249c:	60fb      	str	r3, [r7, #12]
 800249e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80024a0:	2380      	movs	r3, #128	; 0x80
 80024a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a6:	2302      	movs	r3, #2
 80024a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ac:	2300      	movs	r3, #0
 80024ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024b2:	2303      	movs	r3, #3
 80024b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80024b8:	2307      	movs	r3, #7
 80024ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024be:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80024c2:	4619      	mov	r1, r3
 80024c4:	4810      	ldr	r0, [pc, #64]	; (8002508 <HAL_UART_MspInit+0xfc>)
 80024c6:	f000 fd01 	bl	8002ecc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80024ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d2:	2302      	movs	r3, #2
 80024d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d8:	2300      	movs	r3, #0
 80024da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024de:	2303      	movs	r3, #3
 80024e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80024e4:	2307      	movs	r3, #7
 80024e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80024ee:	4619      	mov	r1, r3
 80024f0:	4806      	ldr	r0, [pc, #24]	; (800250c <HAL_UART_MspInit+0x100>)
 80024f2:	f000 fceb 	bl	8002ecc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80024f6:	bf00      	nop
 80024f8:	37b0      	adds	r7, #176	; 0xb0
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	40011000 	.word	0x40011000
 8002504:	40023800 	.word	0x40023800
 8002508:	40020400 	.word	0x40020400
 800250c:	40020000 	.word	0x40020000

08002510 <ReceiveUartMessage>:
}

/* USER CODE BEGIN 1 */

HAL_StatusTypeDef ReceiveUartMessage(UART_HandleTypeDef *huart, uint8_t *buffer, uint16_t size)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	4613      	mov	r3, r2
 800251c:	80fb      	strh	r3, [r7, #6]
    uint8_t receivedByte;
    uint16_t rxBufferIndex = 0;
 800251e:	2300      	movs	r3, #0
 8002520:	82fb      	strh	r3, [r7, #22]
    while(1)
    {
        if(HAL_UART_Receive(huart, &receivedByte, 1, 1000) == HAL_OK)
 8002522:	f107 0115 	add.w	r1, r7, #21
 8002526:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800252a:	2201      	movs	r2, #1
 800252c:	68f8      	ldr	r0, [r7, #12]
 800252e:	f006 fd76 	bl	800901e <HAL_UART_Receive>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d1f4      	bne.n	8002522 <ReceiveUartMessage+0x12>
        {
            if(receivedByte == '\n') // 종료 문자 감지
 8002538:	7d7b      	ldrb	r3, [r7, #21]
 800253a:	2b0a      	cmp	r3, #10
 800253c:	d106      	bne.n	800254c <ReceiveUartMessage+0x3c>
            {
                buffer[rxBufferIndex] = '\0'; // 문자열의 끝을 표시
 800253e:	8afb      	ldrh	r3, [r7, #22]
 8002540:	68ba      	ldr	r2, [r7, #8]
 8002542:	4413      	add	r3, r2
 8002544:	2200      	movs	r2, #0
 8002546:	701a      	strb	r2, [r3, #0]
                return HAL_OK;
 8002548:	2300      	movs	r3, #0
 800254a:	e012      	b.n	8002572 <ReceiveUartMessage+0x62>
            }
            else
            {
                buffer[rxBufferIndex] = receivedByte; // 문자 저장
 800254c:	8afb      	ldrh	r3, [r7, #22]
 800254e:	68ba      	ldr	r2, [r7, #8]
 8002550:	4413      	add	r3, r2
 8002552:	7d7a      	ldrb	r2, [r7, #21]
 8002554:	701a      	strb	r2, [r3, #0]
                rxBufferIndex++;
 8002556:	8afb      	ldrh	r3, [r7, #22]
 8002558:	3301      	adds	r3, #1
 800255a:	82fb      	strh	r3, [r7, #22]
                if(rxBufferIndex >= size) // 버퍼 초과 방지
 800255c:	8afa      	ldrh	r2, [r7, #22]
 800255e:	88fb      	ldrh	r3, [r7, #6]
 8002560:	429a      	cmp	r2, r3
 8002562:	d3de      	bcc.n	8002522 <ReceiveUartMessage+0x12>
                {
                    buffer[rxBufferIndex - 1] = '\0'; // 문자열의 끝을 표시
 8002564:	8afb      	ldrh	r3, [r7, #22]
 8002566:	3b01      	subs	r3, #1
 8002568:	68ba      	ldr	r2, [r7, #8]
 800256a:	4413      	add	r3, r2
 800256c:	2200      	movs	r2, #0
 800256e:	701a      	strb	r2, [r3, #0]
                    return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
                }
            }
        }
    }
}
 8002572:	4618      	mov	r0, r3
 8002574:	3718      	adds	r7, #24
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
	...

0800257c <startMsg>:

void startMsg(){
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "--------------------------------------------------------------\n"), 100);
 8002580:	4937      	ldr	r1, [pc, #220]	; (8002660 <startMsg+0xe4>)
 8002582:	4838      	ldr	r0, [pc, #224]	; (8002664 <startMsg+0xe8>)
 8002584:	f00d fdde 	bl	8010144 <siprintf>
 8002588:	4603      	mov	r3, r0
 800258a:	b29a      	uxth	r2, r3
 800258c:	2364      	movs	r3, #100	; 0x64
 800258e:	4935      	ldr	r1, [pc, #212]	; (8002664 <startMsg+0xe8>)
 8002590:	4835      	ldr	r0, [pc, #212]	; (8002668 <startMsg+0xec>)
 8002592:	f006 fcc1 	bl	8008f18 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "--------------------------------------------------------------\n"), 100);
 8002596:	4932      	ldr	r1, [pc, #200]	; (8002660 <startMsg+0xe4>)
 8002598:	4832      	ldr	r0, [pc, #200]	; (8002664 <startMsg+0xe8>)
 800259a:	f00d fdd3 	bl	8010144 <siprintf>
 800259e:	4603      	mov	r3, r0
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	2364      	movs	r3, #100	; 0x64
 80025a4:	492f      	ldr	r1, [pc, #188]	; (8002664 <startMsg+0xe8>)
 80025a6:	4830      	ldr	r0, [pc, #192]	; (8002668 <startMsg+0xec>)
 80025a8:	f006 fcb6 	bl	8008f18 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "----- Auto Data Logging Device for TACTS made by JaeHyeong----\n"), 100);
 80025ac:	492f      	ldr	r1, [pc, #188]	; (800266c <startMsg+0xf0>)
 80025ae:	482d      	ldr	r0, [pc, #180]	; (8002664 <startMsg+0xe8>)
 80025b0:	f00d fdc8 	bl	8010144 <siprintf>
 80025b4:	4603      	mov	r3, r0
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	2364      	movs	r3, #100	; 0x64
 80025ba:	492a      	ldr	r1, [pc, #168]	; (8002664 <startMsg+0xe8>)
 80025bc:	482a      	ldr	r0, [pc, #168]	; (8002668 <startMsg+0xec>)
 80025be:	f006 fcab 	bl	8008f18 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "-----------rev XX : Rotaing Revolution Motor (Deg)------------\n"), 100);
 80025c2:	492b      	ldr	r1, [pc, #172]	; (8002670 <startMsg+0xf4>)
 80025c4:	4827      	ldr	r0, [pc, #156]	; (8002664 <startMsg+0xe8>)
 80025c6:	f00d fdbd 	bl	8010144 <siprintf>
 80025ca:	4603      	mov	r3, r0
 80025cc:	b29a      	uxth	r2, r3
 80025ce:	2364      	movs	r3, #100	; 0x64
 80025d0:	4924      	ldr	r1, [pc, #144]	; (8002664 <startMsg+0xe8>)
 80025d2:	4825      	ldr	r0, [pc, #148]	; (8002668 <startMsg+0xec>)
 80025d4:	f006 fca0 	bl	8008f18 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "-----------lin XX : Moving Linear Motor (mm)------------------\n"), 100);
 80025d8:	4926      	ldr	r1, [pc, #152]	; (8002674 <startMsg+0xf8>)
 80025da:	4822      	ldr	r0, [pc, #136]	; (8002664 <startMsg+0xe8>)
 80025dc:	f00d fdb2 	bl	8010144 <siprintf>
 80025e0:	4603      	mov	r3, r0
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	2364      	movs	r3, #100	; 0x64
 80025e6:	491f      	ldr	r1, [pc, #124]	; (8002664 <startMsg+0xe8>)
 80025e8:	481f      	ldr	r0, [pc, #124]	; (8002668 <startMsg+0xec>)
 80025ea:	f006 fc95 	bl	8008f18 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "-----------servo XX : Poking XX * 0.8 (mm)--------------------\n"), 100);
 80025ee:	4922      	ldr	r1, [pc, #136]	; (8002678 <startMsg+0xfc>)
 80025f0:	481c      	ldr	r0, [pc, #112]	; (8002664 <startMsg+0xe8>)
 80025f2:	f00d fda7 	bl	8010144 <siprintf>
 80025f6:	4603      	mov	r3, r0
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	2364      	movs	r3, #100	; 0x64
 80025fc:	4919      	ldr	r1, [pc, #100]	; (8002664 <startMsg+0xe8>)
 80025fe:	481a      	ldr	r0, [pc, #104]	; (8002668 <startMsg+0xec>)
 8002600:	f006 fc8a 	bl	8008f18 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "-----------auto : Poking point and data logging---------------\n"), 100);
 8002604:	491d      	ldr	r1, [pc, #116]	; (800267c <startMsg+0x100>)
 8002606:	4817      	ldr	r0, [pc, #92]	; (8002664 <startMsg+0xe8>)
 8002608:	f00d fd9c 	bl	8010144 <siprintf>
 800260c:	4603      	mov	r3, r0
 800260e:	b29a      	uxth	r2, r3
 8002610:	2364      	movs	r3, #100	; 0x64
 8002612:	4914      	ldr	r1, [pc, #80]	; (8002664 <startMsg+0xe8>)
 8002614:	4814      	ldr	r0, [pc, #80]	; (8002668 <startMsg+0xec>)
 8002616:	f006 fc7f 	bl	8008f18 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "-------------------------testbed_axial------------------------\n"), 100);
 800261a:	4919      	ldr	r1, [pc, #100]	; (8002680 <startMsg+0x104>)
 800261c:	4811      	ldr	r0, [pc, #68]	; (8002664 <startMsg+0xe8>)
 800261e:	f00d fd91 	bl	8010144 <siprintf>
 8002622:	4603      	mov	r3, r0
 8002624:	b29a      	uxth	r2, r3
 8002626:	2364      	movs	r3, #100	; 0x64
 8002628:	490e      	ldr	r1, [pc, #56]	; (8002664 <startMsg+0xe8>)
 800262a:	480f      	ldr	r0, [pc, #60]	; (8002668 <startMsg+0xec>)
 800262c:	f006 fc74 	bl	8008f18 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "--------------------------------------------------------------\n"), 100);
 8002630:	490b      	ldr	r1, [pc, #44]	; (8002660 <startMsg+0xe4>)
 8002632:	480c      	ldr	r0, [pc, #48]	; (8002664 <startMsg+0xe8>)
 8002634:	f00d fd86 	bl	8010144 <siprintf>
 8002638:	4603      	mov	r3, r0
 800263a:	b29a      	uxth	r2, r3
 800263c:	2364      	movs	r3, #100	; 0x64
 800263e:	4909      	ldr	r1, [pc, #36]	; (8002664 <startMsg+0xe8>)
 8002640:	4809      	ldr	r0, [pc, #36]	; (8002668 <startMsg+0xec>)
 8002642:	f006 fc69 	bl	8008f18 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "--------------------------------------------------------------\n"), 100);
 8002646:	4906      	ldr	r1, [pc, #24]	; (8002660 <startMsg+0xe4>)
 8002648:	4806      	ldr	r0, [pc, #24]	; (8002664 <startMsg+0xe8>)
 800264a:	f00d fd7b 	bl	8010144 <siprintf>
 800264e:	4603      	mov	r3, r0
 8002650:	b29a      	uxth	r2, r3
 8002652:	2364      	movs	r3, #100	; 0x64
 8002654:	4903      	ldr	r1, [pc, #12]	; (8002664 <startMsg+0xe8>)
 8002656:	4804      	ldr	r0, [pc, #16]	; (8002668 <startMsg+0xec>)
 8002658:	f006 fc5e 	bl	8008f18 <HAL_UART_Transmit>
}
 800265c:	bf00      	nop
 800265e:	bd80      	pop	{r7, pc}
 8002660:	080147b0 	.word	0x080147b0
 8002664:	200005e0 	.word	0x200005e0
 8002668:	20000664 	.word	0x20000664
 800266c:	080147f0 	.word	0x080147f0
 8002670:	08014830 	.word	0x08014830
 8002674:	08014870 	.word	0x08014870
 8002678:	080148b0 	.word	0x080148b0
 800267c:	080148f0 	.word	0x080148f0
 8002680:	08014930 	.word	0x08014930

08002684 <resetTcaDevicesExcept>:
#elif NUM_SENSOR <= 48
	uint8_t tca_addr[8] = {0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77};
	#define tcaLength 8
#endif

void resetTcaDevicesExcept(uint8_t active_device, const uint8_t *tca_addr) {
 8002684:	b580      	push	{r7, lr}
 8002686:	b086      	sub	sp, #24
 8002688:	af02      	add	r7, sp, #8
 800268a:	4603      	mov	r3, r0
 800268c:	6039      	str	r1, [r7, #0]
 800268e:	71fb      	strb	r3, [r7, #7]
    for (int j = 0; j < sizeof(tca_addr); ++j) {
 8002690:	2300      	movs	r3, #0
 8002692:	60fb      	str	r3, [r7, #12]
 8002694:	e015      	b.n	80026c2 <resetTcaDevicesExcept+0x3e>
        if (j != active_device) {
 8002696:	79fb      	ldrb	r3, [r7, #7]
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	429a      	cmp	r2, r3
 800269c:	d00e      	beq.n	80026bc <resetTcaDevicesExcept+0x38>
            HAL_I2C_Master_Transmit(&hi2c1, tca_addr[j] << 1, &tca_ch_reset, 1, 1000);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	683a      	ldr	r2, [r7, #0]
 80026a2:	4413      	add	r3, r2
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	b299      	uxth	r1, r3
 80026ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026b0:	9300      	str	r3, [sp, #0]
 80026b2:	2301      	movs	r3, #1
 80026b4:	4a07      	ldr	r2, [pc, #28]	; (80026d4 <resetTcaDevicesExcept+0x50>)
 80026b6:	4808      	ldr	r0, [pc, #32]	; (80026d8 <resetTcaDevicesExcept+0x54>)
 80026b8:	f001 f8fe 	bl	80038b8 <HAL_I2C_Master_Transmit>
    for (int j = 0; j < sizeof(tca_addr); ++j) {
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	3301      	adds	r3, #1
 80026c0:	60fb      	str	r3, [r7, #12]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2b03      	cmp	r3, #3
 80026c6:	d9e6      	bls.n	8002696 <resetTcaDevicesExcept+0x12>
        }
    }
}
 80026c8:	bf00      	nop
 80026ca:	bf00      	nop
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	200055d4 	.word	0x200055d4
 80026d8:	200004dc 	.word	0x200004dc

080026dc <setActiveTcaChannel>:

void setActiveTcaChannel(uint8_t active_device, uint8_t channel, const uint8_t *tca_addr) {
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af02      	add	r7, sp, #8
 80026e2:	4603      	mov	r3, r0
 80026e4:	603a      	str	r2, [r7, #0]
 80026e6:	71fb      	strb	r3, [r7, #7]
 80026e8:	460b      	mov	r3, r1
 80026ea:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Master_Transmit(&hi2c1, tca_addr[active_device] << 1, &tca_ch[channel], 1, 1000);
 80026ec:	79fb      	ldrb	r3, [r7, #7]
 80026ee:	683a      	ldr	r2, [r7, #0]
 80026f0:	4413      	add	r3, r2
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	b299      	uxth	r1, r3
 80026fa:	79bb      	ldrb	r3, [r7, #6]
 80026fc:	4a06      	ldr	r2, [pc, #24]	; (8002718 <setActiveTcaChannel+0x3c>)
 80026fe:	441a      	add	r2, r3
 8002700:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002704:	9300      	str	r3, [sp, #0]
 8002706:	2301      	movs	r3, #1
 8002708:	4804      	ldr	r0, [pc, #16]	; (800271c <setActiveTcaChannel+0x40>)
 800270a:	f001 f8d5 	bl	80038b8 <HAL_I2C_Master_Transmit>
}
 800270e:	bf00      	nop
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	20000018 	.word	0x20000018
 800271c:	200004dc 	.word	0x200004dc

08002720 <initializeVl53l0x>:

void initializeVl53l0x(VL53L0X_Dev_t *Dev) {
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
	Dev->I2cHandle = &hi2c1;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4a23      	ldr	r2, [pc, #140]	; (80027b8 <initializeVl53l0x+0x98>)
 800272c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	Dev->I2cDevAddr = VL53L0X_ADDR;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2252      	movs	r2, #82	; 0x52
 8002734:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

	VL53L0X_WaitDeviceBooted( Dev );
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f008 f90f 	bl	800a95c <VL53L0X_WaitDeviceBooted>
	VL53L0X_DataInit( Dev );
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f007 fe26 	bl	800a390 <VL53L0X_DataInit>
	VL53L0X_StaticInit( Dev );
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f007 ff87 	bl	800a658 <VL53L0X_StaticInit>
	VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 800274a:	2101      	movs	r1, #1
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f008 f9a3 	bl	800aa98 <VL53L0X_SetDeviceMode>
	VL53L0X_PerformRefCalibration( Dev, &VhvSettings, &PhaseCal);
 8002752:	4a1a      	ldr	r2, [pc, #104]	; (80027bc <initializeVl53l0x+0x9c>)
 8002754:	491a      	ldr	r1, [pc, #104]	; (80027c0 <initializeVl53l0x+0xa0>)
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f008 fe20 	bl	800b39c <VL53L0X_PerformRefCalibration>
	VL53L0X_PerformRefSpadManagement( Dev, &refSpadCount, &isApertureSpads);
 800275c:	4a19      	ldr	r2, [pc, #100]	; (80027c4 <initializeVl53l0x+0xa4>)
 800275e:	491a      	ldr	r1, [pc, #104]	; (80027c8 <initializeVl53l0x+0xa8>)
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f009 faa9 	bl	800bcb8 <VL53L0X_PerformRefSpadManagement>
	VL53L0X_SetLimitCheckEnable( Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 8002766:	2201      	movs	r2, #1
 8002768:	2100      	movs	r1, #0
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f008 fc10 	bl	800af90 <VL53L0X_SetLimitCheckEnable>
	VL53L0X_SetLimitCheckEnable( Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 8002770:	2201      	movs	r2, #1
 8002772:	2101      	movs	r1, #1
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f008 fc0b 	bl	800af90 <VL53L0X_SetLimitCheckEnable>
	VL53L0X_SetLimitCheckValue( Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 800277a:	f641 1299 	movw	r2, #6553	; 0x1999
 800277e:	2101      	movs	r1, #1
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f008 fcb5 	bl	800b0f0 <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetLimitCheckValue( Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 8002786:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800278a:	2100      	movs	r1, #0
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f008 fcaf 	bl	800b0f0 <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetMeasurementTimingBudgetMicroSeconds( Dev, 33000);
 8002792:	f248 01e8 	movw	r1, #33000	; 0x80e8
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f008 f9dc 	bl	800ab54 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	VL53L0X_SetVcselPulsePeriod( Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 800279c:	2212      	movs	r2, #18
 800279e:	2100      	movs	r1, #0
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f008 f9fd 	bl	800aba0 <VL53L0X_SetVcselPulsePeriod>
	VL53L0X_SetVcselPulsePeriod( Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 80027a6:	220e      	movs	r2, #14
 80027a8:	2101      	movs	r1, #1
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f008 f9f8 	bl	800aba0 <VL53L0X_SetVcselPulsePeriod>
}
 80027b0:	bf00      	nop
 80027b2:	3708      	adds	r7, #8
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	200004dc 	.word	0x200004dc
 80027bc:	2000070e 	.word	0x2000070e
 80027c0:	2000070d 	.word	0x2000070d
 80027c4:	2000070c 	.word	0x2000070c
 80027c8:	20000708 	.word	0x20000708

080027cc <initializeAllSensors>:

void initializeAllSensors(uint8_t *tca_addr, VL53L0X_Dev_t *vl53l0x_s, KalmanFilter *filters) {
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b08a      	sub	sp, #40	; 0x28
 80027d0:	af02      	add	r7, sp, #8
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
    for (int j = 0; j <tcaLength; ++j) {
 80027d8:	2300      	movs	r3, #0
 80027da:	61fb      	str	r3, [r7, #28]
 80027dc:	e011      	b.n	8002802 <initializeAllSensors+0x36>
        HAL_I2C_Master_Transmit(&hi2c1, tca_addr[j] << 1, &tca_ch_reset, 1, 1000);
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	4413      	add	r3, r2
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	b299      	uxth	r1, r3
 80027ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027f0:	9300      	str	r3, [sp, #0]
 80027f2:	2301      	movs	r3, #1
 80027f4:	4a3f      	ldr	r2, [pc, #252]	; (80028f4 <initializeAllSensors+0x128>)
 80027f6:	4840      	ldr	r0, [pc, #256]	; (80028f8 <initializeAllSensors+0x12c>)
 80027f8:	f001 f85e 	bl	80038b8 <HAL_I2C_Master_Transmit>
    for (int j = 0; j <tcaLength; ++j) {
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	3301      	adds	r3, #1
 8002800:	61fb      	str	r3, [r7, #28]
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	2b07      	cmp	r3, #7
 8002806:	ddea      	ble.n	80027de <initializeAllSensors+0x12>
    }

    for (int i = 0; i < NUM_SENSOR; i++) {
 8002808:	2300      	movs	r3, #0
 800280a:	61bb      	str	r3, [r7, #24]
 800280c:	e069      	b.n	80028e2 <initializeAllSensors+0x116>
        uint8_t q = i / 12;
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	4a3a      	ldr	r2, [pc, #232]	; (80028fc <initializeAllSensors+0x130>)
 8002812:	fb82 1203 	smull	r1, r2, r2, r3
 8002816:	1052      	asrs	r2, r2, #1
 8002818:	17db      	asrs	r3, r3, #31
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	75fb      	strb	r3, [r7, #23]
        uint8_t r = i % 12;
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	4b36      	ldr	r3, [pc, #216]	; (80028fc <initializeAllSensors+0x130>)
 8002822:	fb83 1302 	smull	r1, r3, r3, r2
 8002826:	1059      	asrs	r1, r3, #1
 8002828:	17d3      	asrs	r3, r2, #31
 800282a:	1ac9      	subs	r1, r1, r3
 800282c:	460b      	mov	r3, r1
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	440b      	add	r3, r1
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	1ad1      	subs	r1, r2, r3
 8002836:	460b      	mov	r3, r1
 8002838:	75bb      	strb	r3, [r7, #22]
        uint8_t active_device = q * 2 + (r >= 8 ? 1 : 0);
 800283a:	7dfb      	ldrb	r3, [r7, #23]
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	b2db      	uxtb	r3, r3
 8002840:	7dba      	ldrb	r2, [r7, #22]
 8002842:	2a07      	cmp	r2, #7
 8002844:	bf8c      	ite	hi
 8002846:	2201      	movhi	r2, #1
 8002848:	2200      	movls	r2, #0
 800284a:	b2d2      	uxtb	r2, r2
 800284c:	4413      	add	r3, r2
 800284e:	757b      	strb	r3, [r7, #21]
        uint8_t channel = (r >= 8) ? r - 8 : r;
 8002850:	7dbb      	ldrb	r3, [r7, #22]
 8002852:	2b07      	cmp	r3, #7
 8002854:	d903      	bls.n	800285e <initializeAllSensors+0x92>
 8002856:	7dbb      	ldrb	r3, [r7, #22]
 8002858:	3b08      	subs	r3, #8
 800285a:	b2db      	uxtb	r3, r3
 800285c:	e000      	b.n	8002860 <initializeAllSensors+0x94>
 800285e:	7dbb      	ldrb	r3, [r7, #22]
 8002860:	753b      	strb	r3, [r7, #20]

        resetTcaDevicesExcept(active_device, tca_addr);
 8002862:	7d7b      	ldrb	r3, [r7, #21]
 8002864:	68f9      	ldr	r1, [r7, #12]
 8002866:	4618      	mov	r0, r3
 8002868:	f7ff ff0c 	bl	8002684 <resetTcaDevicesExcept>
        setActiveTcaChannel(active_device, channel, tca_addr);
 800286c:	7d39      	ldrb	r1, [r7, #20]
 800286e:	7d7b      	ldrb	r3, [r7, #21]
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	4618      	mov	r0, r3
 8002874:	f7ff ff32 	bl	80026dc <setActiveTcaChannel>

        initializeVl53l0x(&vl53l0x_s[i]);
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800287e:	fb02 f303 	mul.w	r3, r2, r3
 8002882:	68ba      	ldr	r2, [r7, #8]
 8002884:	4413      	add	r3, r2
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff ff4a 	bl	8002720 <initializeVl53l0x>
        Kalman_Init(&filters[i], Q, R, P, 0);  // Q, R, P, 초기값
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	4613      	mov	r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	4413      	add	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	461a      	mov	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4413      	add	r3, r2
 800289c:	4a18      	ldr	r2, [pc, #96]	; (8002900 <initializeAllSensors+0x134>)
 800289e:	edd2 7a00 	vldr	s15, [r2]
 80028a2:	4a18      	ldr	r2, [pc, #96]	; (8002904 <initializeAllSensors+0x138>)
 80028a4:	ed92 7a00 	vldr	s14, [r2]
 80028a8:	4a17      	ldr	r2, [pc, #92]	; (8002908 <initializeAllSensors+0x13c>)
 80028aa:	edd2 6a00 	vldr	s13, [r2]
 80028ae:	eddf 1a17 	vldr	s3, [pc, #92]	; 800290c <initializeAllSensors+0x140>
 80028b2:	eeb0 1a66 	vmov.f32	s2, s13
 80028b6:	eef0 0a47 	vmov.f32	s1, s14
 80028ba:	eeb0 0a67 	vmov.f32	s0, s15
 80028be:	4618      	mov	r0, r3
 80028c0:	f7fe fdc2 	bl	8001448 <Kalman_Init>

        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d complete \n\r", i), 100);
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	4912      	ldr	r1, [pc, #72]	; (8002910 <initializeAllSensors+0x144>)
 80028c8:	4812      	ldr	r0, [pc, #72]	; (8002914 <initializeAllSensors+0x148>)
 80028ca:	f00d fc3b 	bl	8010144 <siprintf>
 80028ce:	4603      	mov	r3, r0
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	2364      	movs	r3, #100	; 0x64
 80028d4:	490f      	ldr	r1, [pc, #60]	; (8002914 <initializeAllSensors+0x148>)
 80028d6:	4810      	ldr	r0, [pc, #64]	; (8002918 <initializeAllSensors+0x14c>)
 80028d8:	f006 fb1e 	bl	8008f18 <HAL_UART_Transmit>
    for (int i = 0; i < NUM_SENSOR; i++) {
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	3301      	adds	r3, #1
 80028e0:	61bb      	str	r3, [r7, #24]
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	2b2f      	cmp	r3, #47	; 0x2f
 80028e6:	dd92      	ble.n	800280e <initializeAllSensors+0x42>
    }
}
 80028e8:	bf00      	nop
 80028ea:	bf00      	nop
 80028ec:	3720      	adds	r7, #32
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	200055d4 	.word	0x200055d4
 80028f8:	200004dc 	.word	0x200004dc
 80028fc:	2aaaaaab 	.word	0x2aaaaaab
 8002900:	2000000c 	.word	0x2000000c
 8002904:	20000010 	.word	0x20000010
 8002908:	20000014 	.word	0x20000014
 800290c:	00000000 	.word	0x00000000
 8002910:	08014970 	.word	0x08014970
 8002914:	200005e0 	.word	0x200005e0
 8002918:	20000664 	.word	0x20000664

0800291c <excuteVl53l0x>:

void excuteVl53l0x(VL53L0X_Dev_t *Dev,int i) {
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
    VL53L0X_PerformContinuousRangingMeasurement(Dev, &RangingData); // 1500us
 8002926:	491e      	ldr	r1, [pc, #120]	; (80029a0 <excuteVl53l0x+0x84>)
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f009 f9da 	bl	800bce2 <VL53L0X_PerformContinuousRangingMeasurement>
    if (RangingData.RangeStatus == 0) {
 800292e:	4b1c      	ldr	r3, [pc, #112]	; (80029a0 <excuteVl53l0x+0x84>)
 8002930:	7e1b      	ldrb	r3, [r3, #24]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d124      	bne.n	8002980 <excuteVl53l0x+0x64>
        float filteredValue = Kalman_Estimate(&filters[i], RangingData.RangeMilliMeter);
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	4613      	mov	r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	4413      	add	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4a18      	ldr	r2, [pc, #96]	; (80029a4 <excuteVl53l0x+0x88>)
 8002942:	4413      	add	r3, r2
 8002944:	4a16      	ldr	r2, [pc, #88]	; (80029a0 <excuteVl53l0x+0x84>)
 8002946:	8912      	ldrh	r2, [r2, #8]
 8002948:	ee07 2a90 	vmov	s15, r2
 800294c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002950:	eeb0 0a67 	vmov.f32	s0, s15
 8002954:	4618      	mov	r0, r3
 8002956:	f7fe fd95 	bl	8001484 <Kalman_Estimate>
 800295a:	ed87 0a03 	vstr	s0, [r7, #12]
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", filteredValue), 100);
 800295e:	68f8      	ldr	r0, [r7, #12]
 8002960:	f7fd fe22 	bl	80005a8 <__aeabi_f2d>
 8002964:	4602      	mov	r2, r0
 8002966:	460b      	mov	r3, r1
 8002968:	490f      	ldr	r1, [pc, #60]	; (80029a8 <excuteVl53l0x+0x8c>)
 800296a:	4810      	ldr	r0, [pc, #64]	; (80029ac <excuteVl53l0x+0x90>)
 800296c:	f00d fbea 	bl	8010144 <siprintf>
 8002970:	4603      	mov	r3, r0
 8002972:	b29a      	uxth	r2, r3
 8002974:	2364      	movs	r3, #100	; 0x64
 8002976:	490d      	ldr	r1, [pc, #52]	; (80029ac <excuteVl53l0x+0x90>)
 8002978:	480d      	ldr	r0, [pc, #52]	; (80029b0 <excuteVl53l0x+0x94>)
 800297a:	f006 facd 	bl	8008f18 <HAL_UART_Transmit>
    }else{
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "999 "), 100);
    }
}
 800297e:	e00a      	b.n	8002996 <excuteVl53l0x+0x7a>
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "999 "), 100);
 8002980:	490c      	ldr	r1, [pc, #48]	; (80029b4 <excuteVl53l0x+0x98>)
 8002982:	480a      	ldr	r0, [pc, #40]	; (80029ac <excuteVl53l0x+0x90>)
 8002984:	f00d fbde 	bl	8010144 <siprintf>
 8002988:	4603      	mov	r3, r0
 800298a:	b29a      	uxth	r2, r3
 800298c:	2364      	movs	r3, #100	; 0x64
 800298e:	4907      	ldr	r1, [pc, #28]	; (80029ac <excuteVl53l0x+0x90>)
 8002990:	4807      	ldr	r0, [pc, #28]	; (80029b0 <excuteVl53l0x+0x94>)
 8002992:	f006 fac1 	bl	8008f18 <HAL_UART_Transmit>
}
 8002996:	bf00      	nop
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	200006ec 	.word	0x200006ec
 80029a4:	20005214 	.word	0x20005214
 80029a8:	08014980 	.word	0x08014980
 80029ac:	200005e0 	.word	0x200005e0
 80029b0:	20000664 	.word	0x20000664
 80029b4:	08014988 	.word	0x08014988

080029b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
 ldr   sp, =_estack      /* set stack pointer */
 80029b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80029bc:	480d      	ldr	r0, [pc, #52]	; (80029f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80029be:	490e      	ldr	r1, [pc, #56]	; (80029f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80029c0:	4a0e      	ldr	r2, [pc, #56]	; (80029fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80029c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029c4:	e002      	b.n	80029cc <LoopCopyDataInit>

080029c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029ca:	3304      	adds	r3, #4

080029cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029d0:	d3f9      	bcc.n	80029c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029d2:	4a0b      	ldr	r2, [pc, #44]	; (8002a00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80029d4:	4c0b      	ldr	r4, [pc, #44]	; (8002a04 <LoopFillZerobss+0x26>)
  movs r3, #0
 80029d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029d8:	e001      	b.n	80029de <LoopFillZerobss>

080029da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029dc:	3204      	adds	r2, #4

080029de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029e0:	d3fb      	bcc.n	80029da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80029e2:	f7ff fbbd 	bl	8002160 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029e6:	f00c fcf3 	bl	800f3d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029ea:	f7fe ffed 	bl	80019c8 <main>
  bx  lr    
 80029ee:	4770      	bx	lr
 ldr   sp, =_estack      /* set stack pointer */
 80029f0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80029f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029f8:	200004c0 	.word	0x200004c0
  ldr r2, =_sidata
 80029fc:	080150e8 	.word	0x080150e8
  ldr r2, =_sbss
 8002a00:	200004c0 	.word	0x200004c0
  ldr r4, =_ebss
 8002a04:	2000562c 	.word	0x2000562c

08002a08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a08:	e7fe      	b.n	8002a08 <ADC_IRQHandler>

08002a0a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a0e:	2003      	movs	r0, #3
 8002a10:	f000 f94c 	bl	8002cac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a14:	200f      	movs	r0, #15
 8002a16:	f000 f805 	bl	8002a24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a1a:	f7ff fa4b 	bl	8001eb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a1e:	2300      	movs	r3, #0
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a2c:	4b12      	ldr	r3, [pc, #72]	; (8002a78 <HAL_InitTick+0x54>)
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	4b12      	ldr	r3, [pc, #72]	; (8002a7c <HAL_InitTick+0x58>)
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	4619      	mov	r1, r3
 8002a36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a42:	4618      	mov	r0, r3
 8002a44:	f000 f996 	bl	8002d74 <HAL_SYSTICK_Config>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e00e      	b.n	8002a70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2b0f      	cmp	r3, #15
 8002a56:	d80a      	bhi.n	8002a6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a58:	2200      	movs	r2, #0
 8002a5a:	6879      	ldr	r1, [r7, #4]
 8002a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a60:	f000 f944 	bl	8002cec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a64:	4a06      	ldr	r2, [pc, #24]	; (8002a80 <HAL_InitTick+0x5c>)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	e000      	b.n	8002a70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3708      	adds	r7, #8
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	20000008 	.word	0x20000008
 8002a7c:	2000002c 	.word	0x2000002c
 8002a80:	20000028 	.word	0x20000028

08002a84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a88:	4b06      	ldr	r3, [pc, #24]	; (8002aa4 <HAL_IncTick+0x20>)
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	4b06      	ldr	r3, [pc, #24]	; (8002aa8 <HAL_IncTick+0x24>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4413      	add	r3, r2
 8002a94:	4a04      	ldr	r2, [pc, #16]	; (8002aa8 <HAL_IncTick+0x24>)
 8002a96:	6013      	str	r3, [r2, #0]
}
 8002a98:	bf00      	nop
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	2000002c 	.word	0x2000002c
 8002aa8:	200055d8 	.word	0x200055d8

08002aac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  return uwTick;
 8002ab0:	4b03      	ldr	r3, [pc, #12]	; (8002ac0 <HAL_GetTick+0x14>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	200055d8 	.word	0x200055d8

08002ac4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002acc:	f7ff ffee 	bl	8002aac <HAL_GetTick>
 8002ad0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002adc:	d005      	beq.n	8002aea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ade:	4b0a      	ldr	r3, [pc, #40]	; (8002b08 <HAL_Delay+0x44>)
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002aea:	bf00      	nop
 8002aec:	f7ff ffde 	bl	8002aac <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d8f7      	bhi.n	8002aec <HAL_Delay+0x28>
  {
  }
}
 8002afc:	bf00      	nop
 8002afe:	bf00      	nop
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	2000002c 	.word	0x2000002c

08002b0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b1c:	4b0b      	ldr	r3, [pc, #44]	; (8002b4c <__NVIC_SetPriorityGrouping+0x40>)
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b22:	68ba      	ldr	r2, [r7, #8]
 8002b24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b28:	4013      	ands	r3, r2
 8002b2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002b34:	4b06      	ldr	r3, [pc, #24]	; (8002b50 <__NVIC_SetPriorityGrouping+0x44>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b3a:	4a04      	ldr	r2, [pc, #16]	; (8002b4c <__NVIC_SetPriorityGrouping+0x40>)
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	60d3      	str	r3, [r2, #12]
}
 8002b40:	bf00      	nop
 8002b42:	3714      	adds	r7, #20
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr
 8002b4c:	e000ed00 	.word	0xe000ed00
 8002b50:	05fa0000 	.word	0x05fa0000

08002b54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b58:	4b04      	ldr	r3, [pc, #16]	; (8002b6c <__NVIC_GetPriorityGrouping+0x18>)
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	0a1b      	lsrs	r3, r3, #8
 8002b5e:	f003 0307 	and.w	r3, r3, #7
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr
 8002b6c:	e000ed00 	.word	0xe000ed00

08002b70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	4603      	mov	r3, r0
 8002b78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	db0b      	blt.n	8002b9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b82:	79fb      	ldrb	r3, [r7, #7]
 8002b84:	f003 021f 	and.w	r2, r3, #31
 8002b88:	4907      	ldr	r1, [pc, #28]	; (8002ba8 <__NVIC_EnableIRQ+0x38>)
 8002b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b8e:	095b      	lsrs	r3, r3, #5
 8002b90:	2001      	movs	r0, #1
 8002b92:	fa00 f202 	lsl.w	r2, r0, r2
 8002b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b9a:	bf00      	nop
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	e000e100 	.word	0xe000e100

08002bac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	6039      	str	r1, [r7, #0]
 8002bb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	db0a      	blt.n	8002bd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	b2da      	uxtb	r2, r3
 8002bc4:	490c      	ldr	r1, [pc, #48]	; (8002bf8 <__NVIC_SetPriority+0x4c>)
 8002bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bca:	0112      	lsls	r2, r2, #4
 8002bcc:	b2d2      	uxtb	r2, r2
 8002bce:	440b      	add	r3, r1
 8002bd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bd4:	e00a      	b.n	8002bec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	4908      	ldr	r1, [pc, #32]	; (8002bfc <__NVIC_SetPriority+0x50>)
 8002bdc:	79fb      	ldrb	r3, [r7, #7]
 8002bde:	f003 030f 	and.w	r3, r3, #15
 8002be2:	3b04      	subs	r3, #4
 8002be4:	0112      	lsls	r2, r2, #4
 8002be6:	b2d2      	uxtb	r2, r2
 8002be8:	440b      	add	r3, r1
 8002bea:	761a      	strb	r2, [r3, #24]
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr
 8002bf8:	e000e100 	.word	0xe000e100
 8002bfc:	e000ed00 	.word	0xe000ed00

08002c00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b089      	sub	sp, #36	; 0x24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f003 0307 	and.w	r3, r3, #7
 8002c12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	f1c3 0307 	rsb	r3, r3, #7
 8002c1a:	2b04      	cmp	r3, #4
 8002c1c:	bf28      	it	cs
 8002c1e:	2304      	movcs	r3, #4
 8002c20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	3304      	adds	r3, #4
 8002c26:	2b06      	cmp	r3, #6
 8002c28:	d902      	bls.n	8002c30 <NVIC_EncodePriority+0x30>
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	3b03      	subs	r3, #3
 8002c2e:	e000      	b.n	8002c32 <NVIC_EncodePriority+0x32>
 8002c30:	2300      	movs	r3, #0
 8002c32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c34:	f04f 32ff 	mov.w	r2, #4294967295
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3e:	43da      	mvns	r2, r3
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	401a      	ands	r2, r3
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c48:	f04f 31ff 	mov.w	r1, #4294967295
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c52:	43d9      	mvns	r1, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c58:	4313      	orrs	r3, r2
         );
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3724      	adds	r7, #36	; 0x24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
	...

08002c68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	3b01      	subs	r3, #1
 8002c74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c78:	d301      	bcc.n	8002c7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e00f      	b.n	8002c9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c7e:	4a0a      	ldr	r2, [pc, #40]	; (8002ca8 <SysTick_Config+0x40>)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	3b01      	subs	r3, #1
 8002c84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c86:	210f      	movs	r1, #15
 8002c88:	f04f 30ff 	mov.w	r0, #4294967295
 8002c8c:	f7ff ff8e 	bl	8002bac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c90:	4b05      	ldr	r3, [pc, #20]	; (8002ca8 <SysTick_Config+0x40>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c96:	4b04      	ldr	r3, [pc, #16]	; (8002ca8 <SysTick_Config+0x40>)
 8002c98:	2207      	movs	r2, #7
 8002c9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	e000e010 	.word	0xe000e010

08002cac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2b07      	cmp	r3, #7
 8002cb8:	d00f      	beq.n	8002cda <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2b06      	cmp	r3, #6
 8002cbe:	d00c      	beq.n	8002cda <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2b05      	cmp	r3, #5
 8002cc4:	d009      	beq.n	8002cda <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2b04      	cmp	r3, #4
 8002cca:	d006      	beq.n	8002cda <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2b03      	cmp	r3, #3
 8002cd0:	d003      	beq.n	8002cda <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002cd2:	2191      	movs	r1, #145	; 0x91
 8002cd4:	4804      	ldr	r0, [pc, #16]	; (8002ce8 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8002cd6:	f7fe ff9c 	bl	8001c12 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f7ff ff16 	bl	8002b0c <__NVIC_SetPriorityGrouping>
}
 8002ce0:	bf00      	nop
 8002ce2:	3708      	adds	r7, #8
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	08014990 	.word	0x08014990

08002cec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
 8002cf8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2b0f      	cmp	r3, #15
 8002d02:	d903      	bls.n	8002d0c <HAL_NVIC_SetPriority+0x20>
 8002d04:	21a9      	movs	r1, #169	; 0xa9
 8002d06:	480e      	ldr	r0, [pc, #56]	; (8002d40 <HAL_NVIC_SetPriority+0x54>)
 8002d08:	f7fe ff83 	bl	8001c12 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	2b0f      	cmp	r3, #15
 8002d10:	d903      	bls.n	8002d1a <HAL_NVIC_SetPriority+0x2e>
 8002d12:	21aa      	movs	r1, #170	; 0xaa
 8002d14:	480a      	ldr	r0, [pc, #40]	; (8002d40 <HAL_NVIC_SetPriority+0x54>)
 8002d16:	f7fe ff7c 	bl	8001c12 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d1a:	f7ff ff1b 	bl	8002b54 <__NVIC_GetPriorityGrouping>
 8002d1e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	68b9      	ldr	r1, [r7, #8]
 8002d24:	6978      	ldr	r0, [r7, #20]
 8002d26:	f7ff ff6b 	bl	8002c00 <NVIC_EncodePriority>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d30:	4611      	mov	r1, r2
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7ff ff3a 	bl	8002bac <__NVIC_SetPriority>
}
 8002d38:	bf00      	nop
 8002d3a:	3718      	adds	r7, #24
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	08014990 	.word	0x08014990

08002d44 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	da03      	bge.n	8002d5e <HAL_NVIC_EnableIRQ+0x1a>
 8002d56:	21bd      	movs	r1, #189	; 0xbd
 8002d58:	4805      	ldr	r0, [pc, #20]	; (8002d70 <HAL_NVIC_EnableIRQ+0x2c>)
 8002d5a:	f7fe ff5a 	bl	8001c12 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7ff ff04 	bl	8002b70 <__NVIC_EnableIRQ>
}
 8002d68:	bf00      	nop
 8002d6a:	3708      	adds	r7, #8
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	08014990 	.word	0x08014990

08002d74 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f7ff ff73 	bl	8002c68 <SysTick_Config>
 8002d82:	4603      	mov	r3, r0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3708      	adds	r7, #8
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d98:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002d9a:	f7ff fe87 	bl	8002aac <HAL_GetTick>
 8002d9e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d008      	beq.n	8002dbe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2280      	movs	r2, #128	; 0x80
 8002db0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e052      	b.n	8002e64 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 0216 	bic.w	r2, r2, #22
 8002dcc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	695a      	ldr	r2, [r3, #20]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ddc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d103      	bne.n	8002dee <HAL_DMA_Abort+0x62>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d007      	beq.n	8002dfe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f022 0208 	bic.w	r2, r2, #8
 8002dfc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f022 0201 	bic.w	r2, r2, #1
 8002e0c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e0e:	e013      	b.n	8002e38 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e10:	f7ff fe4c 	bl	8002aac <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b05      	cmp	r3, #5
 8002e1c:	d90c      	bls.n	8002e38 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2220      	movs	r2, #32
 8002e22:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2203      	movs	r2, #3
 8002e28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e015      	b.n	8002e64 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1e4      	bne.n	8002e10 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e4a:	223f      	movs	r2, #63	; 0x3f
 8002e4c:	409a      	lsls	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2201      	movs	r2, #1
 8002e56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3710      	adds	r7, #16
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d004      	beq.n	8002e8a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2280      	movs	r2, #128	; 0x80
 8002e84:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e00c      	b.n	8002ea4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2205      	movs	r2, #5
 8002e8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f022 0201 	bic.w	r2, r2, #1
 8002ea0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ebe:	b2db      	uxtb	r3, r3
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b088      	sub	sp, #32
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002eda:	2300      	movs	r3, #0
 8002edc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a3a      	ldr	r2, [pc, #232]	; (8002fd4 <HAL_GPIO_Init+0x108>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d02b      	beq.n	8002f46 <HAL_GPIO_Init+0x7a>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a39      	ldr	r2, [pc, #228]	; (8002fd8 <HAL_GPIO_Init+0x10c>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d027      	beq.n	8002f46 <HAL_GPIO_Init+0x7a>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a38      	ldr	r2, [pc, #224]	; (8002fdc <HAL_GPIO_Init+0x110>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d023      	beq.n	8002f46 <HAL_GPIO_Init+0x7a>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a37      	ldr	r2, [pc, #220]	; (8002fe0 <HAL_GPIO_Init+0x114>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d01f      	beq.n	8002f46 <HAL_GPIO_Init+0x7a>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a36      	ldr	r2, [pc, #216]	; (8002fe4 <HAL_GPIO_Init+0x118>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d01b      	beq.n	8002f46 <HAL_GPIO_Init+0x7a>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a35      	ldr	r2, [pc, #212]	; (8002fe8 <HAL_GPIO_Init+0x11c>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d017      	beq.n	8002f46 <HAL_GPIO_Init+0x7a>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a34      	ldr	r2, [pc, #208]	; (8002fec <HAL_GPIO_Init+0x120>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d013      	beq.n	8002f46 <HAL_GPIO_Init+0x7a>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a33      	ldr	r2, [pc, #204]	; (8002ff0 <HAL_GPIO_Init+0x124>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d00f      	beq.n	8002f46 <HAL_GPIO_Init+0x7a>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a32      	ldr	r2, [pc, #200]	; (8002ff4 <HAL_GPIO_Init+0x128>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d00b      	beq.n	8002f46 <HAL_GPIO_Init+0x7a>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a31      	ldr	r2, [pc, #196]	; (8002ff8 <HAL_GPIO_Init+0x12c>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d007      	beq.n	8002f46 <HAL_GPIO_Init+0x7a>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a30      	ldr	r2, [pc, #192]	; (8002ffc <HAL_GPIO_Init+0x130>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d003      	beq.n	8002f46 <HAL_GPIO_Init+0x7a>
 8002f3e:	21aa      	movs	r1, #170	; 0xaa
 8002f40:	482f      	ldr	r0, [pc, #188]	; (8003000 <HAL_GPIO_Init+0x134>)
 8002f42:	f7fe fe66 	bl	8001c12 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d103      	bne.n	8002f58 <HAL_GPIO_Init+0x8c>
 8002f50:	21ab      	movs	r1, #171	; 0xab
 8002f52:	482b      	ldr	r0, [pc, #172]	; (8003000 <HAL_GPIO_Init+0x134>)
 8002f54:	f7fe fe5d 	bl	8001c12 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d035      	beq.n	8002fcc <HAL_GPIO_Init+0x100>
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d031      	beq.n	8002fcc <HAL_GPIO_Init+0x100>
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	2b11      	cmp	r3, #17
 8002f6e:	d02d      	beq.n	8002fcc <HAL_GPIO_Init+0x100>
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d029      	beq.n	8002fcc <HAL_GPIO_Init+0x100>
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	2b12      	cmp	r3, #18
 8002f7e:	d025      	beq.n	8002fcc <HAL_GPIO_Init+0x100>
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8002f88:	d020      	beq.n	8002fcc <HAL_GPIO_Init+0x100>
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002f92:	d01b      	beq.n	8002fcc <HAL_GPIO_Init+0x100>
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8002f9c:	d016      	beq.n	8002fcc <HAL_GPIO_Init+0x100>
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8002fa6:	d011      	beq.n	8002fcc <HAL_GPIO_Init+0x100>
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8002fb0:	d00c      	beq.n	8002fcc <HAL_GPIO_Init+0x100>
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8002fba:	d007      	beq.n	8002fcc <HAL_GPIO_Init+0x100>
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	2b03      	cmp	r3, #3
 8002fc2:	d003      	beq.n	8002fcc <HAL_GPIO_Init+0x100>
 8002fc4:	21ac      	movs	r1, #172	; 0xac
 8002fc6:	480e      	ldr	r0, [pc, #56]	; (8003000 <HAL_GPIO_Init+0x134>)
 8002fc8:	f7fe fe23 	bl	8001c12 <assert_failed>

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002fcc:	2300      	movs	r3, #0
 8002fce:	61fb      	str	r3, [r7, #28]
 8002fd0:	e2c7      	b.n	8003562 <HAL_GPIO_Init+0x696>
 8002fd2:	bf00      	nop
 8002fd4:	40020000 	.word	0x40020000
 8002fd8:	40020400 	.word	0x40020400
 8002fdc:	40020800 	.word	0x40020800
 8002fe0:	40020c00 	.word	0x40020c00
 8002fe4:	40021000 	.word	0x40021000
 8002fe8:	40021400 	.word	0x40021400
 8002fec:	40021800 	.word	0x40021800
 8002ff0:	40021c00 	.word	0x40021c00
 8002ff4:	40022000 	.word	0x40022000
 8002ff8:	40022400 	.word	0x40022400
 8002ffc:	40022800 	.word	0x40022800
 8003000:	080149cc 	.word	0x080149cc
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003004:	2201      	movs	r2, #1
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	697a      	ldr	r2, [r7, #20]
 8003014:	4013      	ands	r3, r2
 8003016:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003018:	693a      	ldr	r2, [r7, #16]
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	429a      	cmp	r2, r3
 800301e:	f040 829d 	bne.w	800355c <HAL_GPIO_Init+0x690>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f003 0303 	and.w	r3, r3, #3
 800302a:	2b01      	cmp	r3, #1
 800302c:	d005      	beq.n	800303a <HAL_GPIO_Init+0x16e>
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f003 0303 	and.w	r3, r3, #3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d144      	bne.n	80030c4 <HAL_GPIO_Init+0x1f8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00f      	beq.n	8003062 <HAL_GPIO_Init+0x196>
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d00b      	beq.n	8003062 <HAL_GPIO_Init+0x196>
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	2b02      	cmp	r3, #2
 8003050:	d007      	beq.n	8003062 <HAL_GPIO_Init+0x196>
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	2b03      	cmp	r3, #3
 8003058:	d003      	beq.n	8003062 <HAL_GPIO_Init+0x196>
 800305a:	21bd      	movs	r1, #189	; 0xbd
 800305c:	4831      	ldr	r0, [pc, #196]	; (8003124 <HAL_GPIO_Init+0x258>)
 800305e:	f7fe fdd8 	bl	8001c12 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	005b      	lsls	r3, r3, #1
 800306c:	2203      	movs	r2, #3
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	43db      	mvns	r3, r3
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	4013      	ands	r3, r2
 8003078:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	68da      	ldr	r2, [r3, #12]
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	fa02 f303 	lsl.w	r3, r2, r3
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	4313      	orrs	r3, r2
 800308a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003098:	2201      	movs	r2, #1
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	43db      	mvns	r3, r3
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	4013      	ands	r3, r2
 80030a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	091b      	lsrs	r3, r3, #4
 80030ae:	f003 0201 	and.w	r2, r3, #1
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	fa02 f303 	lsl.w	r3, r2, r3
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f003 0303 	and.w	r3, r3, #3
 80030cc:	2b03      	cmp	r3, #3
 80030ce:	d02b      	beq.n	8003128 <HAL_GPIO_Init+0x25c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00b      	beq.n	80030f0 <HAL_GPIO_Init+0x224>
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d007      	beq.n	80030f0 <HAL_GPIO_Init+0x224>
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d003      	beq.n	80030f0 <HAL_GPIO_Init+0x224>
 80030e8:	21ce      	movs	r1, #206	; 0xce
 80030ea:	480e      	ldr	r0, [pc, #56]	; (8003124 <HAL_GPIO_Init+0x258>)
 80030ec:	f7fe fd91 	bl	8001c12 <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	2203      	movs	r2, #3
 80030fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003100:	43db      	mvns	r3, r3
 8003102:	69ba      	ldr	r2, [r7, #24]
 8003104:	4013      	ands	r3, r2
 8003106:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	689a      	ldr	r2, [r3, #8]
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	4313      	orrs	r3, r2
 8003118:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	60da      	str	r2, [r3, #12]
 8003120:	e002      	b.n	8003128 <HAL_GPIO_Init+0x25c>
 8003122:	bf00      	nop
 8003124:	080149cc 	.word	0x080149cc
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f003 0303 	and.w	r3, r3, #3
 8003130:	2b02      	cmp	r3, #2
 8003132:	f040 8134 	bne.w	800339e <HAL_GPIO_Init+0x4d2>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	2b00      	cmp	r3, #0
 800313c:	f000 810b 	beq.w	8003356 <HAL_GPIO_Init+0x48a>
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	2b01      	cmp	r3, #1
 8003146:	f000 8106 	beq.w	8003356 <HAL_GPIO_Init+0x48a>
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	2b00      	cmp	r3, #0
 8003150:	f000 8101 	beq.w	8003356 <HAL_GPIO_Init+0x48a>
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	2b00      	cmp	r3, #0
 800315a:	f000 80fc 	beq.w	8003356 <HAL_GPIO_Init+0x48a>
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	2b00      	cmp	r3, #0
 8003164:	f000 80f7 	beq.w	8003356 <HAL_GPIO_Init+0x48a>
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	2b01      	cmp	r3, #1
 800316e:	f000 80f2 	beq.w	8003356 <HAL_GPIO_Init+0x48a>
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	2b02      	cmp	r3, #2
 8003178:	f000 80ed 	beq.w	8003356 <HAL_GPIO_Init+0x48a>
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	691b      	ldr	r3, [r3, #16]
 8003180:	2b02      	cmp	r3, #2
 8003182:	f000 80e8 	beq.w	8003356 <HAL_GPIO_Init+0x48a>
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	2b02      	cmp	r3, #2
 800318c:	f000 80e3 	beq.w	8003356 <HAL_GPIO_Init+0x48a>
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	2b03      	cmp	r3, #3
 8003196:	f000 80de 	beq.w	8003356 <HAL_GPIO_Init+0x48a>
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	2b03      	cmp	r3, #3
 80031a0:	f000 80d9 	beq.w	8003356 <HAL_GPIO_Init+0x48a>
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	691b      	ldr	r3, [r3, #16]
 80031a8:	2b03      	cmp	r3, #3
 80031aa:	f000 80d4 	beq.w	8003356 <HAL_GPIO_Init+0x48a>
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	2b03      	cmp	r3, #3
 80031b4:	f000 80cf 	beq.w	8003356 <HAL_GPIO_Init+0x48a>
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	2b03      	cmp	r3, #3
 80031be:	f000 80ca 	beq.w	8003356 <HAL_GPIO_Init+0x48a>
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	2b03      	cmp	r3, #3
 80031c8:	f000 80c5 	beq.w	8003356 <HAL_GPIO_Init+0x48a>
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	2b04      	cmp	r3, #4
 80031d2:	f000 80c0 	beq.w	8003356 <HAL_GPIO_Init+0x48a>
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	2b04      	cmp	r3, #4
 80031dc:	f000 80bb 	beq.w	8003356 <HAL_GPIO_Init+0x48a>
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	2b04      	cmp	r3, #4
 80031e6:	f000 80b6 	beq.w	8003356 <HAL_GPIO_Init+0x48a>
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	2b04      	cmp	r3, #4
 80031f0:	f000 80b1 	beq.w	8003356 <HAL_GPIO_Init+0x48a>
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	2b04      	cmp	r3, #4
 80031fa:	f000 80ac 	beq.w	8003356 <HAL_GPIO_Init+0x48a>
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	2b05      	cmp	r3, #5
 8003204:	f000 80a7 	beq.w	8003356 <HAL_GPIO_Init+0x48a>
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	691b      	ldr	r3, [r3, #16]
 800320c:	2b05      	cmp	r3, #5
 800320e:	f000 80a2 	beq.w	8003356 <HAL_GPIO_Init+0x48a>
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	2b05      	cmp	r3, #5
 8003218:	f000 809d 	beq.w	8003356 <HAL_GPIO_Init+0x48a>
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	2b05      	cmp	r3, #5
 8003222:	f000 8098 	beq.w	8003356 <HAL_GPIO_Init+0x48a>
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	2b05      	cmp	r3, #5
 800322c:	f000 8093 	beq.w	8003356 <HAL_GPIO_Init+0x48a>
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	2b05      	cmp	r3, #5
 8003236:	f000 808e 	beq.w	8003356 <HAL_GPIO_Init+0x48a>
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	2b06      	cmp	r3, #6
 8003240:	f000 8089 	beq.w	8003356 <HAL_GPIO_Init+0x48a>
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	691b      	ldr	r3, [r3, #16]
 8003248:	2b06      	cmp	r3, #6
 800324a:	f000 8084 	beq.w	8003356 <HAL_GPIO_Init+0x48a>
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	2b07      	cmp	r3, #7
 8003254:	d07f      	beq.n	8003356 <HAL_GPIO_Init+0x48a>
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	2b07      	cmp	r3, #7
 800325c:	d07b      	beq.n	8003356 <HAL_GPIO_Init+0x48a>
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	2b07      	cmp	r3, #7
 8003264:	d077      	beq.n	8003356 <HAL_GPIO_Init+0x48a>
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	2b07      	cmp	r3, #7
 800326c:	d073      	beq.n	8003356 <HAL_GPIO_Init+0x48a>
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	2b07      	cmp	r3, #7
 8003274:	d06f      	beq.n	8003356 <HAL_GPIO_Init+0x48a>
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	2b07      	cmp	r3, #7
 800327c:	d06b      	beq.n	8003356 <HAL_GPIO_Init+0x48a>
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	2b07      	cmp	r3, #7
 8003284:	d067      	beq.n	8003356 <HAL_GPIO_Init+0x48a>
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	2b08      	cmp	r3, #8
 800328c:	d063      	beq.n	8003356 <HAL_GPIO_Init+0x48a>
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	2b08      	cmp	r3, #8
 8003294:	d05f      	beq.n	8003356 <HAL_GPIO_Init+0x48a>
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	2b08      	cmp	r3, #8
 800329c:	d05b      	beq.n	8003356 <HAL_GPIO_Init+0x48a>
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	2b08      	cmp	r3, #8
 80032a4:	d057      	beq.n	8003356 <HAL_GPIO_Init+0x48a>
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	2b08      	cmp	r3, #8
 80032ac:	d053      	beq.n	8003356 <HAL_GPIO_Init+0x48a>
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	2b08      	cmp	r3, #8
 80032b4:	d04f      	beq.n	8003356 <HAL_GPIO_Init+0x48a>
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	2b08      	cmp	r3, #8
 80032bc:	d04b      	beq.n	8003356 <HAL_GPIO_Init+0x48a>
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	2b09      	cmp	r3, #9
 80032c4:	d047      	beq.n	8003356 <HAL_GPIO_Init+0x48a>
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	2b09      	cmp	r3, #9
 80032cc:	d043      	beq.n	8003356 <HAL_GPIO_Init+0x48a>
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	2b09      	cmp	r3, #9
 80032d4:	d03f      	beq.n	8003356 <HAL_GPIO_Init+0x48a>
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	2b09      	cmp	r3, #9
 80032dc:	d03b      	beq.n	8003356 <HAL_GPIO_Init+0x48a>
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	2b09      	cmp	r3, #9
 80032e4:	d037      	beq.n	8003356 <HAL_GPIO_Init+0x48a>
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	2b09      	cmp	r3, #9
 80032ec:	d033      	beq.n	8003356 <HAL_GPIO_Init+0x48a>
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	2b09      	cmp	r3, #9
 80032f4:	d02f      	beq.n	8003356 <HAL_GPIO_Init+0x48a>
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	2b0a      	cmp	r3, #10
 80032fc:	d02b      	beq.n	8003356 <HAL_GPIO_Init+0x48a>
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	2b0a      	cmp	r3, #10
 8003304:	d027      	beq.n	8003356 <HAL_GPIO_Init+0x48a>
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	2b0a      	cmp	r3, #10
 800330c:	d023      	beq.n	8003356 <HAL_GPIO_Init+0x48a>
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	2b0a      	cmp	r3, #10
 8003314:	d01f      	beq.n	8003356 <HAL_GPIO_Init+0x48a>
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	2b0b      	cmp	r3, #11
 800331c:	d01b      	beq.n	8003356 <HAL_GPIO_Init+0x48a>
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	2b0c      	cmp	r3, #12
 8003324:	d017      	beq.n	8003356 <HAL_GPIO_Init+0x48a>
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	2b0c      	cmp	r3, #12
 800332c:	d013      	beq.n	8003356 <HAL_GPIO_Init+0x48a>
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	2b0c      	cmp	r3, #12
 8003334:	d00f      	beq.n	8003356 <HAL_GPIO_Init+0x48a>
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	2b0f      	cmp	r3, #15
 800333c:	d00b      	beq.n	8003356 <HAL_GPIO_Init+0x48a>
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	2b0d      	cmp	r3, #13
 8003344:	d007      	beq.n	8003356 <HAL_GPIO_Init+0x48a>
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	2b0e      	cmp	r3, #14
 800334c:	d003      	beq.n	8003356 <HAL_GPIO_Init+0x48a>
 800334e:	21db      	movs	r1, #219	; 0xdb
 8003350:	4888      	ldr	r0, [pc, #544]	; (8003574 <HAL_GPIO_Init+0x6a8>)
 8003352:	f7fe fc5e 	bl	8001c12 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	08da      	lsrs	r2, r3, #3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	3208      	adds	r2, #8
 800335e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003362:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	f003 0307 	and.w	r3, r3, #7
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	220f      	movs	r2, #15
 800336e:	fa02 f303 	lsl.w	r3, r2, r3
 8003372:	43db      	mvns	r3, r3
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	4013      	ands	r3, r2
 8003378:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	691a      	ldr	r2, [r3, #16]
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	f003 0307 	and.w	r3, r3, #7
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	fa02 f303 	lsl.w	r3, r2, r3
 800338a:	69ba      	ldr	r2, [r7, #24]
 800338c:	4313      	orrs	r3, r2
 800338e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	08da      	lsrs	r2, r3, #3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	3208      	adds	r2, #8
 8003398:	69b9      	ldr	r1, [r7, #24]
 800339a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	2203      	movs	r2, #3
 80033aa:	fa02 f303 	lsl.w	r3, r2, r3
 80033ae:	43db      	mvns	r3, r3
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	4013      	ands	r3, r2
 80033b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f003 0203 	and.w	r2, r3, #3
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	005b      	lsls	r3, r3, #1
 80033c2:	fa02 f303 	lsl.w	r3, r2, r3
 80033c6:	69ba      	ldr	r2, [r7, #24]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f000 80be 	beq.w	800355c <HAL_GPIO_Init+0x690>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033e0:	4b65      	ldr	r3, [pc, #404]	; (8003578 <HAL_GPIO_Init+0x6ac>)
 80033e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e4:	4a64      	ldr	r2, [pc, #400]	; (8003578 <HAL_GPIO_Init+0x6ac>)
 80033e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033ea:	6453      	str	r3, [r2, #68]	; 0x44
 80033ec:	4b62      	ldr	r3, [pc, #392]	; (8003578 <HAL_GPIO_Init+0x6ac>)
 80033ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033f4:	60fb      	str	r3, [r7, #12]
 80033f6:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80033f8:	4a60      	ldr	r2, [pc, #384]	; (800357c <HAL_GPIO_Init+0x6b0>)
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	089b      	lsrs	r3, r3, #2
 80033fe:	3302      	adds	r3, #2
 8003400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003404:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	f003 0303 	and.w	r3, r3, #3
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	220f      	movs	r2, #15
 8003410:	fa02 f303 	lsl.w	r3, r2, r3
 8003414:	43db      	mvns	r3, r3
 8003416:	69ba      	ldr	r2, [r7, #24]
 8003418:	4013      	ands	r3, r2
 800341a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a58      	ldr	r2, [pc, #352]	; (8003580 <HAL_GPIO_Init+0x6b4>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d037      	beq.n	8003494 <HAL_GPIO_Init+0x5c8>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a57      	ldr	r2, [pc, #348]	; (8003584 <HAL_GPIO_Init+0x6b8>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d031      	beq.n	8003490 <HAL_GPIO_Init+0x5c4>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a56      	ldr	r2, [pc, #344]	; (8003588 <HAL_GPIO_Init+0x6bc>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d02b      	beq.n	800348c <HAL_GPIO_Init+0x5c0>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a55      	ldr	r2, [pc, #340]	; (800358c <HAL_GPIO_Init+0x6c0>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d025      	beq.n	8003488 <HAL_GPIO_Init+0x5bc>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a54      	ldr	r2, [pc, #336]	; (8003590 <HAL_GPIO_Init+0x6c4>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d01f      	beq.n	8003484 <HAL_GPIO_Init+0x5b8>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a53      	ldr	r2, [pc, #332]	; (8003594 <HAL_GPIO_Init+0x6c8>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d019      	beq.n	8003480 <HAL_GPIO_Init+0x5b4>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a52      	ldr	r2, [pc, #328]	; (8003598 <HAL_GPIO_Init+0x6cc>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d013      	beq.n	800347c <HAL_GPIO_Init+0x5b0>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a51      	ldr	r2, [pc, #324]	; (800359c <HAL_GPIO_Init+0x6d0>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d00d      	beq.n	8003478 <HAL_GPIO_Init+0x5ac>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a50      	ldr	r2, [pc, #320]	; (80035a0 <HAL_GPIO_Init+0x6d4>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d007      	beq.n	8003474 <HAL_GPIO_Init+0x5a8>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a4f      	ldr	r2, [pc, #316]	; (80035a4 <HAL_GPIO_Init+0x6d8>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d101      	bne.n	8003470 <HAL_GPIO_Init+0x5a4>
 800346c:	2309      	movs	r3, #9
 800346e:	e012      	b.n	8003496 <HAL_GPIO_Init+0x5ca>
 8003470:	230a      	movs	r3, #10
 8003472:	e010      	b.n	8003496 <HAL_GPIO_Init+0x5ca>
 8003474:	2308      	movs	r3, #8
 8003476:	e00e      	b.n	8003496 <HAL_GPIO_Init+0x5ca>
 8003478:	2307      	movs	r3, #7
 800347a:	e00c      	b.n	8003496 <HAL_GPIO_Init+0x5ca>
 800347c:	2306      	movs	r3, #6
 800347e:	e00a      	b.n	8003496 <HAL_GPIO_Init+0x5ca>
 8003480:	2305      	movs	r3, #5
 8003482:	e008      	b.n	8003496 <HAL_GPIO_Init+0x5ca>
 8003484:	2304      	movs	r3, #4
 8003486:	e006      	b.n	8003496 <HAL_GPIO_Init+0x5ca>
 8003488:	2303      	movs	r3, #3
 800348a:	e004      	b.n	8003496 <HAL_GPIO_Init+0x5ca>
 800348c:	2302      	movs	r3, #2
 800348e:	e002      	b.n	8003496 <HAL_GPIO_Init+0x5ca>
 8003490:	2301      	movs	r3, #1
 8003492:	e000      	b.n	8003496 <HAL_GPIO_Init+0x5ca>
 8003494:	2300      	movs	r3, #0
 8003496:	69fa      	ldr	r2, [r7, #28]
 8003498:	f002 0203 	and.w	r2, r2, #3
 800349c:	0092      	lsls	r2, r2, #2
 800349e:	4093      	lsls	r3, r2
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80034a6:	4935      	ldr	r1, [pc, #212]	; (800357c <HAL_GPIO_Init+0x6b0>)
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	089b      	lsrs	r3, r3, #2
 80034ac:	3302      	adds	r3, #2
 80034ae:	69ba      	ldr	r2, [r7, #24]
 80034b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034b4:	4b3c      	ldr	r3, [pc, #240]	; (80035a8 <HAL_GPIO_Init+0x6dc>)
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	43db      	mvns	r3, r3
 80034be:	69ba      	ldr	r2, [r7, #24]
 80034c0:	4013      	ands	r3, r2
 80034c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d003      	beq.n	80034d8 <HAL_GPIO_Init+0x60c>
        {
          temp |= iocurrent;
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034d8:	4a33      	ldr	r2, [pc, #204]	; (80035a8 <HAL_GPIO_Init+0x6dc>)
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034de:	4b32      	ldr	r3, [pc, #200]	; (80035a8 <HAL_GPIO_Init+0x6dc>)
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	43db      	mvns	r3, r3
 80034e8:	69ba      	ldr	r2, [r7, #24]
 80034ea:	4013      	ands	r3, r2
 80034ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d003      	beq.n	8003502 <HAL_GPIO_Init+0x636>
        {
          temp |= iocurrent;
 80034fa:	69ba      	ldr	r2, [r7, #24]
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	4313      	orrs	r3, r2
 8003500:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003502:	4a29      	ldr	r2, [pc, #164]	; (80035a8 <HAL_GPIO_Init+0x6dc>)
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003508:	4b27      	ldr	r3, [pc, #156]	; (80035a8 <HAL_GPIO_Init+0x6dc>)
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	43db      	mvns	r3, r3
 8003512:	69ba      	ldr	r2, [r7, #24]
 8003514:	4013      	ands	r3, r2
 8003516:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d003      	beq.n	800352c <HAL_GPIO_Init+0x660>
        {
          temp |= iocurrent;
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	4313      	orrs	r3, r2
 800352a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800352c:	4a1e      	ldr	r2, [pc, #120]	; (80035a8 <HAL_GPIO_Init+0x6dc>)
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003532:	4b1d      	ldr	r3, [pc, #116]	; (80035a8 <HAL_GPIO_Init+0x6dc>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	43db      	mvns	r3, r3
 800353c:	69ba      	ldr	r2, [r7, #24]
 800353e:	4013      	ands	r3, r2
 8003540:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d003      	beq.n	8003556 <HAL_GPIO_Init+0x68a>
        {
          temp |= iocurrent;
 800354e:	69ba      	ldr	r2, [r7, #24]
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	4313      	orrs	r3, r2
 8003554:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003556:	4a14      	ldr	r2, [pc, #80]	; (80035a8 <HAL_GPIO_Init+0x6dc>)
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	3301      	adds	r3, #1
 8003560:	61fb      	str	r3, [r7, #28]
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	2b0f      	cmp	r3, #15
 8003566:	f67f ad4d 	bls.w	8003004 <HAL_GPIO_Init+0x138>
      }
    }
  }
}
 800356a:	bf00      	nop
 800356c:	bf00      	nop
 800356e:	3720      	adds	r7, #32
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	080149cc 	.word	0x080149cc
 8003578:	40023800 	.word	0x40023800
 800357c:	40013800 	.word	0x40013800
 8003580:	40020000 	.word	0x40020000
 8003584:	40020400 	.word	0x40020400
 8003588:	40020800 	.word	0x40020800
 800358c:	40020c00 	.word	0x40020c00
 8003590:	40021000 	.word	0x40021000
 8003594:	40021400 	.word	0x40021400
 8003598:	40021800 	.word	0x40021800
 800359c:	40021c00 	.word	0x40021c00
 80035a0:	40022000 	.word	0x40022000
 80035a4:	40022400 	.word	0x40022400
 80035a8:	40013c00 	.word	0x40013c00

080035ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	460b      	mov	r3, r1
 80035b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80035b8:	887b      	ldrh	r3, [r7, #2]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d104      	bne.n	80035c8 <HAL_GPIO_ReadPin+0x1c>
 80035be:	f240 1177 	movw	r1, #375	; 0x177
 80035c2:	4809      	ldr	r0, [pc, #36]	; (80035e8 <HAL_GPIO_ReadPin+0x3c>)
 80035c4:	f7fe fb25 	bl	8001c12 <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	691a      	ldr	r2, [r3, #16]
 80035cc:	887b      	ldrh	r3, [r7, #2]
 80035ce:	4013      	ands	r3, r2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d002      	beq.n	80035da <HAL_GPIO_ReadPin+0x2e>
  {
    bitstatus = GPIO_PIN_SET;
 80035d4:	2301      	movs	r3, #1
 80035d6:	73fb      	strb	r3, [r7, #15]
 80035d8:	e001      	b.n	80035de <HAL_GPIO_ReadPin+0x32>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035da:	2300      	movs	r3, #0
 80035dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035de:	7bfb      	ldrb	r3, [r7, #15]
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3710      	adds	r7, #16
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	080149cc 	.word	0x080149cc

080035ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	460b      	mov	r3, r1
 80035f6:	807b      	strh	r3, [r7, #2]
 80035f8:	4613      	mov	r3, r2
 80035fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80035fc:	887b      	ldrh	r3, [r7, #2]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d104      	bne.n	800360c <HAL_GPIO_WritePin+0x20>
 8003602:	f240 1197 	movw	r1, #407	; 0x197
 8003606:	480e      	ldr	r0, [pc, #56]	; (8003640 <HAL_GPIO_WritePin+0x54>)
 8003608:	f7fe fb03 	bl	8001c12 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800360c:	787b      	ldrb	r3, [r7, #1]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d007      	beq.n	8003622 <HAL_GPIO_WritePin+0x36>
 8003612:	787b      	ldrb	r3, [r7, #1]
 8003614:	2b01      	cmp	r3, #1
 8003616:	d004      	beq.n	8003622 <HAL_GPIO_WritePin+0x36>
 8003618:	f44f 71cc 	mov.w	r1, #408	; 0x198
 800361c:	4808      	ldr	r0, [pc, #32]	; (8003640 <HAL_GPIO_WritePin+0x54>)
 800361e:	f7fe faf8 	bl	8001c12 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8003622:	787b      	ldrb	r3, [r7, #1]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d003      	beq.n	8003630 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003628:	887a      	ldrh	r2, [r7, #2]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800362e:	e003      	b.n	8003638 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003630:	887b      	ldrh	r3, [r7, #2]
 8003632:	041a      	lsls	r2, r3, #16
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	619a      	str	r2, [r3, #24]
}
 8003638:	bf00      	nop
 800363a:	3708      	adds	r7, #8
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	080149cc 	.word	0x080149cc

08003644 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	4603      	mov	r3, r0
 800364c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800364e:	4b08      	ldr	r3, [pc, #32]	; (8003670 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003650:	695a      	ldr	r2, [r3, #20]
 8003652:	88fb      	ldrh	r3, [r7, #6]
 8003654:	4013      	ands	r3, r2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d006      	beq.n	8003668 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800365a:	4a05      	ldr	r2, [pc, #20]	; (8003670 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800365c:	88fb      	ldrh	r3, [r7, #6]
 800365e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003660:	88fb      	ldrh	r3, [r7, #6]
 8003662:	4618      	mov	r0, r3
 8003664:	f7fe fa92 	bl	8001b8c <HAL_GPIO_EXTI_Callback>
  }
}
 8003668:	bf00      	nop
 800366a:	3708      	adds	r7, #8
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	40013c00 	.word	0x40013c00

08003674 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e107      	b.n	8003896 <HAL_I2C_Init+0x222>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a85      	ldr	r2, [pc, #532]	; (80038a0 <HAL_I2C_Init+0x22c>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d013      	beq.n	80036b8 <HAL_I2C_Init+0x44>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a83      	ldr	r2, [pc, #524]	; (80038a4 <HAL_I2C_Init+0x230>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d00e      	beq.n	80036b8 <HAL_I2C_Init+0x44>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a82      	ldr	r2, [pc, #520]	; (80038a8 <HAL_I2C_Init+0x234>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d009      	beq.n	80036b8 <HAL_I2C_Init+0x44>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a80      	ldr	r2, [pc, #512]	; (80038ac <HAL_I2C_Init+0x238>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d004      	beq.n	80036b8 <HAL_I2C_Init+0x44>
 80036ae:	f240 2119 	movw	r1, #537	; 0x219
 80036b2:	487f      	ldr	r0, [pc, #508]	; (80038b0 <HAL_I2C_Init+0x23c>)
 80036b4:	f7fe faad 	bl	8001c12 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036c0:	d304      	bcc.n	80036cc <HAL_I2C_Init+0x58>
 80036c2:	f240 211a 	movw	r1, #538	; 0x21a
 80036c6:	487a      	ldr	r0, [pc, #488]	; (80038b0 <HAL_I2C_Init+0x23c>)
 80036c8:	f7fe faa3 	bl	8001c12 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d008      	beq.n	80036e6 <HAL_I2C_Init+0x72>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d004      	beq.n	80036e6 <HAL_I2C_Init+0x72>
 80036dc:	f240 211b 	movw	r1, #539	; 0x21b
 80036e0:	4873      	ldr	r0, [pc, #460]	; (80038b0 <HAL_I2C_Init+0x23c>)
 80036e2:	f7fe fa96 	bl	8001c12 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d009      	beq.n	8003702 <HAL_I2C_Init+0x8e>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036f6:	d004      	beq.n	8003702 <HAL_I2C_Init+0x8e>
 80036f8:	f44f 7107 	mov.w	r1, #540	; 0x21c
 80036fc:	486c      	ldr	r0, [pc, #432]	; (80038b0 <HAL_I2C_Init+0x23c>)
 80036fe:	f7fe fa88 	bl	8001c12 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	2bff      	cmp	r3, #255	; 0xff
 8003708:	d904      	bls.n	8003714 <HAL_I2C_Init+0xa0>
 800370a:	f240 211d 	movw	r1, #541	; 0x21d
 800370e:	4868      	ldr	r0, [pc, #416]	; (80038b0 <HAL_I2C_Init+0x23c>)
 8003710:	f7fe fa7f 	bl	8001c12 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d020      	beq.n	800375e <HAL_I2C_Init+0xea>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	2b01      	cmp	r3, #1
 8003722:	d01c      	beq.n	800375e <HAL_I2C_Init+0xea>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	2b02      	cmp	r3, #2
 800372a:	d018      	beq.n	800375e <HAL_I2C_Init+0xea>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	2b03      	cmp	r3, #3
 8003732:	d014      	beq.n	800375e <HAL_I2C_Init+0xea>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	699b      	ldr	r3, [r3, #24]
 8003738:	2b04      	cmp	r3, #4
 800373a:	d010      	beq.n	800375e <HAL_I2C_Init+0xea>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	2b05      	cmp	r3, #5
 8003742:	d00c      	beq.n	800375e <HAL_I2C_Init+0xea>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	2b06      	cmp	r3, #6
 800374a:	d008      	beq.n	800375e <HAL_I2C_Init+0xea>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	2b07      	cmp	r3, #7
 8003752:	d004      	beq.n	800375e <HAL_I2C_Init+0xea>
 8003754:	f240 211e 	movw	r1, #542	; 0x21e
 8003758:	4855      	ldr	r0, [pc, #340]	; (80038b0 <HAL_I2C_Init+0x23c>)
 800375a:	f7fe fa5a 	bl	8001c12 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	69db      	ldr	r3, [r3, #28]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d009      	beq.n	800377a <HAL_I2C_Init+0x106>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	69db      	ldr	r3, [r3, #28]
 800376a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800376e:	d004      	beq.n	800377a <HAL_I2C_Init+0x106>
 8003770:	f240 211f 	movw	r1, #543	; 0x21f
 8003774:	484e      	ldr	r0, [pc, #312]	; (80038b0 <HAL_I2C_Init+0x23c>)
 8003776:	f7fe fa4c 	bl	8001c12 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a1b      	ldr	r3, [r3, #32]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d009      	beq.n	8003796 <HAL_I2C_Init+0x122>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a1b      	ldr	r3, [r3, #32]
 8003786:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800378a:	d004      	beq.n	8003796 <HAL_I2C_Init+0x122>
 800378c:	f44f 7108 	mov.w	r1, #544	; 0x220
 8003790:	4847      	ldr	r0, [pc, #284]	; (80038b0 <HAL_I2C_Init+0x23c>)
 8003792:	f7fe fa3e 	bl	8001c12 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d106      	bne.n	80037b0 <HAL_I2C_Init+0x13c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f7fd fdec 	bl	8001388 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2224      	movs	r2, #36	; 0x24
 80037b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f022 0201 	bic.w	r2, r2, #1
 80037c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037d4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	689a      	ldr	r2, [r3, #8]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037e4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d107      	bne.n	80037fe <HAL_I2C_Init+0x18a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	689a      	ldr	r2, [r3, #8]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037fa:	609a      	str	r2, [r3, #8]
 80037fc:	e006      	b.n	800380c <HAL_I2C_Init+0x198>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	689a      	ldr	r2, [r3, #8]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800380a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	2b02      	cmp	r3, #2
 8003812:	d104      	bne.n	800381e <HAL_I2C_Init+0x1aa>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800381c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	6859      	ldr	r1, [r3, #4]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	4b22      	ldr	r3, [pc, #136]	; (80038b4 <HAL_I2C_Init+0x240>)
 800382a:	430b      	orrs	r3, r1
 800382c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68da      	ldr	r2, [r3, #12]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800383c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	691a      	ldr	r2, [r3, #16]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	430a      	orrs	r2, r1
 8003856:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	69d9      	ldr	r1, [r3, #28]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a1a      	ldr	r2, [r3, #32]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	430a      	orrs	r2, r1
 8003866:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f042 0201 	orr.w	r2, r2, #1
 8003876:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2220      	movs	r2, #32
 8003882:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3708      	adds	r7, #8
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	40005400 	.word	0x40005400
 80038a4:	40005800 	.word	0x40005800
 80038a8:	40005c00 	.word	0x40005c00
 80038ac:	40006000 	.word	0x40006000
 80038b0:	08014a08 	.word	0x08014a08
 80038b4:	02008000 	.word	0x02008000

080038b8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b088      	sub	sp, #32
 80038bc:	af02      	add	r7, sp, #8
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	607a      	str	r2, [r7, #4]
 80038c2:	461a      	mov	r2, r3
 80038c4:	460b      	mov	r3, r1
 80038c6:	817b      	strh	r3, [r7, #10]
 80038c8:	4613      	mov	r3, r2
 80038ca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	2b20      	cmp	r3, #32
 80038d6:	f040 80da 	bne.w	8003a8e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d101      	bne.n	80038e8 <HAL_I2C_Master_Transmit+0x30>
 80038e4:	2302      	movs	r3, #2
 80038e6:	e0d3      	b.n	8003a90 <HAL_I2C_Master_Transmit+0x1d8>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80038f0:	f7ff f8dc 	bl	8002aac <HAL_GetTick>
 80038f4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	9300      	str	r3, [sp, #0]
 80038fa:	2319      	movs	r3, #25
 80038fc:	2201      	movs	r2, #1
 80038fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f000 fefb 	bl	80046fe <I2C_WaitOnFlagUntilTimeout>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e0be      	b.n	8003a90 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2221      	movs	r2, #33	; 0x21
 8003916:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2210      	movs	r2, #16
 800391e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2200      	movs	r2, #0
 8003926:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	893a      	ldrh	r2, [r7, #8]
 8003932:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800393e:	b29b      	uxth	r3, r3
 8003940:	2bff      	cmp	r3, #255	; 0xff
 8003942:	d90e      	bls.n	8003962 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	22ff      	movs	r2, #255	; 0xff
 8003948:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800394e:	b2da      	uxtb	r2, r3
 8003950:	8979      	ldrh	r1, [r7, #10]
 8003952:	4b51      	ldr	r3, [pc, #324]	; (8003a98 <HAL_I2C_Master_Transmit+0x1e0>)
 8003954:	9300      	str	r3, [sp, #0]
 8003956:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	f001 f8e6 	bl	8004b2c <I2C_TransferConfig>
 8003960:	e06c      	b.n	8003a3c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003966:	b29a      	uxth	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003970:	b2da      	uxtb	r2, r3
 8003972:	8979      	ldrh	r1, [r7, #10]
 8003974:	4b48      	ldr	r3, [pc, #288]	; (8003a98 <HAL_I2C_Master_Transmit+0x1e0>)
 8003976:	9300      	str	r3, [sp, #0]
 8003978:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	f001 f8d5 	bl	8004b2c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003982:	e05b      	b.n	8003a3c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003984:	697a      	ldr	r2, [r7, #20]
 8003986:	6a39      	ldr	r1, [r7, #32]
 8003988:	68f8      	ldr	r0, [r7, #12]
 800398a:	f000 fef8 	bl	800477e <I2C_WaitOnTXISFlagUntilTimeout>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d001      	beq.n	8003998 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e07b      	b.n	8003a90 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399c:	781a      	ldrb	r2, [r3, #0]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a8:	1c5a      	adds	r2, r3, #1
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	3b01      	subs	r3, #1
 80039b6:	b29a      	uxth	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039c0:	3b01      	subs	r3, #1
 80039c2:	b29a      	uxth	r2, r3
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d034      	beq.n	8003a3c <HAL_I2C_Master_Transmit+0x184>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d130      	bne.n	8003a3c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	9300      	str	r3, [sp, #0]
 80039de:	6a3b      	ldr	r3, [r7, #32]
 80039e0:	2200      	movs	r2, #0
 80039e2:	2180      	movs	r1, #128	; 0x80
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f000 fe8a 	bl	80046fe <I2C_WaitOnFlagUntilTimeout>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d001      	beq.n	80039f4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e04d      	b.n	8003a90 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	2bff      	cmp	r3, #255	; 0xff
 80039fc:	d90e      	bls.n	8003a1c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	22ff      	movs	r2, #255	; 0xff
 8003a02:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a08:	b2da      	uxtb	r2, r3
 8003a0a:	8979      	ldrh	r1, [r7, #10]
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	9300      	str	r3, [sp, #0]
 8003a10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f001 f889 	bl	8004b2c <I2C_TransferConfig>
 8003a1a:	e00f      	b.n	8003a3c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a20:	b29a      	uxth	r2, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a2a:	b2da      	uxtb	r2, r3
 8003a2c:	8979      	ldrh	r1, [r7, #10]
 8003a2e:	2300      	movs	r3, #0
 8003a30:	9300      	str	r3, [sp, #0]
 8003a32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a36:	68f8      	ldr	r0, [r7, #12]
 8003a38:	f001 f878 	bl	8004b2c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d19e      	bne.n	8003984 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a46:	697a      	ldr	r2, [r7, #20]
 8003a48:	6a39      	ldr	r1, [r7, #32]
 8003a4a:	68f8      	ldr	r0, [r7, #12]
 8003a4c:	f000 fed7 	bl	80047fe <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d001      	beq.n	8003a5a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e01a      	b.n	8003a90 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	6859      	ldr	r1, [r3, #4]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	4b0b      	ldr	r3, [pc, #44]	; (8003a9c <HAL_I2C_Master_Transmit+0x1e4>)
 8003a6e:	400b      	ands	r3, r1
 8003a70:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2220      	movs	r2, #32
 8003a76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	e000      	b.n	8003a90 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003a8e:	2302      	movs	r3, #2
  }
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3718      	adds	r7, #24
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	80002000 	.word	0x80002000
 8003a9c:	fe00e800 	.word	0xfe00e800

08003aa0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b088      	sub	sp, #32
 8003aa4:	af02      	add	r7, sp, #8
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	607a      	str	r2, [r7, #4]
 8003aaa:	461a      	mov	r2, r3
 8003aac:	460b      	mov	r3, r1
 8003aae:	817b      	strh	r3, [r7, #10]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	2b20      	cmp	r3, #32
 8003abe:	f040 80db 	bne.w	8003c78 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d101      	bne.n	8003ad0 <HAL_I2C_Master_Receive+0x30>
 8003acc:	2302      	movs	r3, #2
 8003ace:	e0d4      	b.n	8003c7a <HAL_I2C_Master_Receive+0x1da>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003ad8:	f7fe ffe8 	bl	8002aac <HAL_GetTick>
 8003adc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	9300      	str	r3, [sp, #0]
 8003ae2:	2319      	movs	r3, #25
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	f000 fe07 	bl	80046fe <I2C_WaitOnFlagUntilTimeout>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d001      	beq.n	8003afa <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e0bf      	b.n	8003c7a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2222      	movs	r2, #34	; 0x22
 8003afe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2210      	movs	r2, #16
 8003b06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	893a      	ldrh	r2, [r7, #8]
 8003b1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	2bff      	cmp	r3, #255	; 0xff
 8003b2a:	d90e      	bls.n	8003b4a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	22ff      	movs	r2, #255	; 0xff
 8003b30:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b36:	b2da      	uxtb	r2, r3
 8003b38:	8979      	ldrh	r1, [r7, #10]
 8003b3a:	4b52      	ldr	r3, [pc, #328]	; (8003c84 <HAL_I2C_Master_Receive+0x1e4>)
 8003b3c:	9300      	str	r3, [sp, #0]
 8003b3e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	f000 fff2 	bl	8004b2c <I2C_TransferConfig>
 8003b48:	e06d      	b.n	8003c26 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b58:	b2da      	uxtb	r2, r3
 8003b5a:	8979      	ldrh	r1, [r7, #10]
 8003b5c:	4b49      	ldr	r3, [pc, #292]	; (8003c84 <HAL_I2C_Master_Receive+0x1e4>)
 8003b5e:	9300      	str	r3, [sp, #0]
 8003b60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b64:	68f8      	ldr	r0, [r7, #12]
 8003b66:	f000 ffe1 	bl	8004b2c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003b6a:	e05c      	b.n	8003c26 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	6a39      	ldr	r1, [r7, #32]
 8003b70:	68f8      	ldr	r0, [r7, #12]
 8003b72:	f000 fe81 	bl	8004878 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d001      	beq.n	8003b80 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e07c      	b.n	8003c7a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8a:	b2d2      	uxtb	r2, r2
 8003b8c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b92:	1c5a      	adds	r2, r3, #1
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	b29a      	uxth	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	3b01      	subs	r3, #1
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d034      	beq.n	8003c26 <HAL_I2C_Master_Receive+0x186>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d130      	bne.n	8003c26 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	9300      	str	r3, [sp, #0]
 8003bc8:	6a3b      	ldr	r3, [r7, #32]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	2180      	movs	r1, #128	; 0x80
 8003bce:	68f8      	ldr	r0, [r7, #12]
 8003bd0:	f000 fd95 	bl	80046fe <I2C_WaitOnFlagUntilTimeout>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d001      	beq.n	8003bde <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e04d      	b.n	8003c7a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	2bff      	cmp	r3, #255	; 0xff
 8003be6:	d90e      	bls.n	8003c06 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	22ff      	movs	r2, #255	; 0xff
 8003bec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bf2:	b2da      	uxtb	r2, r3
 8003bf4:	8979      	ldrh	r1, [r7, #10]
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	9300      	str	r3, [sp, #0]
 8003bfa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003bfe:	68f8      	ldr	r0, [r7, #12]
 8003c00:	f000 ff94 	bl	8004b2c <I2C_TransferConfig>
 8003c04:	e00f      	b.n	8003c26 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c0a:	b29a      	uxth	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c14:	b2da      	uxtb	r2, r3
 8003c16:	8979      	ldrh	r1, [r7, #10]
 8003c18:	2300      	movs	r3, #0
 8003c1a:	9300      	str	r3, [sp, #0]
 8003c1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c20:	68f8      	ldr	r0, [r7, #12]
 8003c22:	f000 ff83 	bl	8004b2c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d19d      	bne.n	8003b6c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c30:	697a      	ldr	r2, [r7, #20]
 8003c32:	6a39      	ldr	r1, [r7, #32]
 8003c34:	68f8      	ldr	r0, [r7, #12]
 8003c36:	f000 fde2 	bl	80047fe <I2C_WaitOnSTOPFlagUntilTimeout>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d001      	beq.n	8003c44 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e01a      	b.n	8003c7a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2220      	movs	r2, #32
 8003c4a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	6859      	ldr	r1, [r3, #4]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	4b0c      	ldr	r3, [pc, #48]	; (8003c88 <HAL_I2C_Master_Receive+0x1e8>)
 8003c58:	400b      	ands	r3, r1
 8003c5a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2220      	movs	r2, #32
 8003c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c74:	2300      	movs	r3, #0
 8003c76:	e000      	b.n	8003c7a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003c78:	2302      	movs	r3, #2
  }
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3718      	adds	r7, #24
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	80002400 	.word	0x80002400
 8003c88:	fe00e800 	.word	0xfe00e800

08003c8c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d005      	beq.n	8003cb8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cb0:	68ba      	ldr	r2, [r7, #8]
 8003cb2:	68f9      	ldr	r1, [r7, #12]
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	4798      	blx	r3
  }
}
 8003cb8:	bf00      	nop
 8003cba:	3710      	adds	r7, #16
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	0a1b      	lsrs	r3, r3, #8
 8003cdc:	f003 0301 	and.w	r3, r3, #1
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d010      	beq.n	8003d06 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	09db      	lsrs	r3, r3, #7
 8003ce8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00a      	beq.n	8003d06 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf4:	f043 0201 	orr.w	r2, r3, #1
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d04:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	0a9b      	lsrs	r3, r3, #10
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d010      	beq.n	8003d34 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	09db      	lsrs	r3, r3, #7
 8003d16:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d00a      	beq.n	8003d34 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d22:	f043 0208 	orr.w	r2, r3, #8
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d32:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	0a5b      	lsrs	r3, r3, #9
 8003d38:	f003 0301 	and.w	r3, r3, #1
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d010      	beq.n	8003d62 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	09db      	lsrs	r3, r3, #7
 8003d44:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d00a      	beq.n	8003d62 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d50:	f043 0202 	orr.w	r2, r3, #2
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d60:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d66:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f003 030b 	and.w	r3, r3, #11
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d003      	beq.n	8003d7a <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8003d72:	68f9      	ldr	r1, [r7, #12]
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f000 fb89 	bl	800448c <I2C_ITError>
  }
}
 8003d7a:	bf00      	nop
 8003d7c:	3718      	adds	r7, #24
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d82:	b480      	push	{r7}
 8003d84:	b083      	sub	sp, #12
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003d8a:	bf00      	nop
 8003d8c:	370c      	adds	r7, #12
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr

08003d96 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d96:	b480      	push	{r7}
 8003d98:	b083      	sub	sp, #12
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003d9e:	bf00      	nop
 8003da0:	370c      	adds	r7, #12
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr

08003daa <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003daa:	b480      	push	{r7}
 8003dac:	b083      	sub	sp, #12
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
 8003db2:	460b      	mov	r3, r1
 8003db4:	70fb      	strb	r3, [r7, #3]
 8003db6:	4613      	mov	r3, r2
 8003db8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003dba:	bf00      	nop
 8003dbc:	370c      	adds	r7, #12
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr

08003dc6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	b083      	sub	sp, #12
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003dce:	bf00      	nop
 8003dd0:	370c      	adds	r7, #12
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr

08003dda <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b083      	sub	sp, #12
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003de2:	bf00      	nop
 8003de4:	370c      	adds	r7, #12
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr

08003dee <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003dee:	b480      	push	{r7}
 8003df0:	b083      	sub	sp, #12
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003df6:	bf00      	nop
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr

08003e02 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b086      	sub	sp, #24
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	60f8      	str	r0, [r7, #12]
 8003e0a:	60b9      	str	r1, [r7, #8]
 8003e0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e12:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d101      	bne.n	8003e26 <I2C_Slave_ISR_IT+0x24>
 8003e22:	2302      	movs	r3, #2
 8003e24:	e0ec      	b.n	8004000 <I2C_Slave_ISR_IT+0x1fe>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	095b      	lsrs	r3, r3, #5
 8003e32:	f003 0301 	and.w	r3, r3, #1
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d009      	beq.n	8003e4e <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	095b      	lsrs	r3, r3, #5
 8003e3e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d003      	beq.n	8003e4e <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003e46:	6939      	ldr	r1, [r7, #16]
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f000 f9bf 	bl	80041cc <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	091b      	lsrs	r3, r3, #4
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d04d      	beq.n	8003ef6 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	091b      	lsrs	r3, r3, #4
 8003e5e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d047      	beq.n	8003ef6 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d128      	bne.n	8003ec2 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	2b28      	cmp	r3, #40	; 0x28
 8003e7a:	d108      	bne.n	8003e8e <I2C_Slave_ISR_IT+0x8c>
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e82:	d104      	bne.n	8003e8e <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003e84:	6939      	ldr	r1, [r7, #16]
 8003e86:	68f8      	ldr	r0, [r7, #12]
 8003e88:	f000 faaa 	bl	80043e0 <I2C_ITListenCplt>
 8003e8c:	e032      	b.n	8003ef4 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	2b29      	cmp	r3, #41	; 0x29
 8003e98:	d10e      	bne.n	8003eb8 <I2C_Slave_ISR_IT+0xb6>
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ea0:	d00a      	beq.n	8003eb8 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2210      	movs	r2, #16
 8003ea8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f000 fbe5 	bl	800467a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003eb0:	68f8      	ldr	r0, [r7, #12]
 8003eb2:	f000 f92d 	bl	8004110 <I2C_ITSlaveSeqCplt>
 8003eb6:	e01d      	b.n	8003ef4 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2210      	movs	r2, #16
 8003ebe:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003ec0:	e096      	b.n	8003ff0 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2210      	movs	r2, #16
 8003ec8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ece:	f043 0204 	orr.w	r2, r3, #4
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d004      	beq.n	8003ee6 <I2C_Slave_ISR_IT+0xe4>
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ee2:	f040 8085 	bne.w	8003ff0 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eea:	4619      	mov	r1, r3
 8003eec:	68f8      	ldr	r0, [r7, #12]
 8003eee:	f000 facd 	bl	800448c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003ef2:	e07d      	b.n	8003ff0 <I2C_Slave_ISR_IT+0x1ee>
 8003ef4:	e07c      	b.n	8003ff0 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	089b      	lsrs	r3, r3, #2
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d030      	beq.n	8003f64 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	089b      	lsrs	r3, r3, #2
 8003f06:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d02a      	beq.n	8003f64 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d018      	beq.n	8003f4a <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f22:	b2d2      	uxtb	r2, r2
 8003f24:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2a:	1c5a      	adds	r2, r3, #1
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f34:	3b01      	subs	r3, #1
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	3b01      	subs	r3, #1
 8003f44:	b29a      	uxth	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d14f      	bne.n	8003ff4 <I2C_Slave_ISR_IT+0x1f2>
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f5a:	d04b      	beq.n	8003ff4 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003f5c:	68f8      	ldr	r0, [r7, #12]
 8003f5e:	f000 f8d7 	bl	8004110 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003f62:	e047      	b.n	8003ff4 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	08db      	lsrs	r3, r3, #3
 8003f68:	f003 0301 	and.w	r3, r3, #1
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d00a      	beq.n	8003f86 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	08db      	lsrs	r3, r3, #3
 8003f74:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d004      	beq.n	8003f86 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003f7c:	6939      	ldr	r1, [r7, #16]
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f000 f842 	bl	8004008 <I2C_ITAddrCplt>
 8003f84:	e037      	b.n	8003ff6 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	085b      	lsrs	r3, r3, #1
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d031      	beq.n	8003ff6 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	085b      	lsrs	r3, r3, #1
 8003f96:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d02b      	beq.n	8003ff6 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d018      	beq.n	8003fda <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fac:	781a      	ldrb	r2, [r3, #0]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb8:	1c5a      	adds	r2, r3, #1
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	b29a      	uxth	r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	851a      	strh	r2, [r3, #40]	; 0x28
 8003fd8:	e00d      	b.n	8003ff6 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fe0:	d002      	beq.n	8003fe8 <I2C_Slave_ISR_IT+0x1e6>
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d106      	bne.n	8003ff6 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003fe8:	68f8      	ldr	r0, [r7, #12]
 8003fea:	f000 f891 	bl	8004110 <I2C_ITSlaveSeqCplt>
 8003fee:	e002      	b.n	8003ff6 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8003ff0:	bf00      	nop
 8003ff2:	e000      	b.n	8003ff6 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8003ff4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003ffe:	2300      	movs	r3, #0
}
 8004000:	4618      	mov	r0, r3
 8004002:	3718      	adds	r7, #24
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004018:	b2db      	uxtb	r3, r3
 800401a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800401e:	2b28      	cmp	r3, #40	; 0x28
 8004020:	d16a      	bne.n	80040f8 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	699b      	ldr	r3, [r3, #24]
 8004028:	0c1b      	lsrs	r3, r3, #16
 800402a:	b2db      	uxtb	r3, r3
 800402c:	f003 0301 	and.w	r3, r3, #1
 8004030:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	0c1b      	lsrs	r3, r3, #16
 800403a:	b29b      	uxth	r3, r3
 800403c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004040:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	b29b      	uxth	r3, r3
 800404a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800404e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	b29b      	uxth	r3, r3
 8004058:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800405c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	2b02      	cmp	r3, #2
 8004064:	d138      	bne.n	80040d8 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004066:	897b      	ldrh	r3, [r7, #10]
 8004068:	09db      	lsrs	r3, r3, #7
 800406a:	b29a      	uxth	r2, r3
 800406c:	89bb      	ldrh	r3, [r7, #12]
 800406e:	4053      	eors	r3, r2
 8004070:	b29b      	uxth	r3, r3
 8004072:	f003 0306 	and.w	r3, r3, #6
 8004076:	2b00      	cmp	r3, #0
 8004078:	d11c      	bne.n	80040b4 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800407a:	897b      	ldrh	r3, [r7, #10]
 800407c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004082:	1c5a      	adds	r2, r3, #1
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800408c:	2b02      	cmp	r3, #2
 800408e:	d13b      	bne.n	8004108 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2208      	movs	r2, #8
 800409c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80040a6:	89ba      	ldrh	r2, [r7, #12]
 80040a8:	7bfb      	ldrb	r3, [r7, #15]
 80040aa:	4619      	mov	r1, r3
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f7ff fe7c 	bl	8003daa <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80040b2:	e029      	b.n	8004108 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80040b4:	893b      	ldrh	r3, [r7, #8]
 80040b6:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80040b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f000 fdb1 	bl	8004c24 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80040ca:	89ba      	ldrh	r2, [r7, #12]
 80040cc:	7bfb      	ldrb	r3, [r7, #15]
 80040ce:	4619      	mov	r1, r3
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f7ff fe6a 	bl	8003daa <HAL_I2C_AddrCallback>
}
 80040d6:	e017      	b.n	8004108 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80040d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 fda1 	bl	8004c24 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80040ea:	89ba      	ldrh	r2, [r7, #12]
 80040ec:	7bfb      	ldrb	r3, [r7, #15]
 80040ee:	4619      	mov	r1, r3
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f7ff fe5a 	bl	8003daa <HAL_I2C_AddrCallback>
}
 80040f6:	e007      	b.n	8004108 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2208      	movs	r2, #8
 80040fe:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8004108:	bf00      	nop
 800410a:	3710      	adds	r7, #16
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	0b9b      	lsrs	r3, r3, #14
 800412c:	f003 0301 	and.w	r3, r3, #1
 8004130:	2b00      	cmp	r3, #0
 8004132:	d008      	beq.n	8004146 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004142:	601a      	str	r2, [r3, #0]
 8004144:	e00d      	b.n	8004162 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	0bdb      	lsrs	r3, r3, #15
 800414a:	f003 0301 	and.w	r3, r3, #1
 800414e:	2b00      	cmp	r3, #0
 8004150:	d007      	beq.n	8004162 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004160:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004168:	b2db      	uxtb	r3, r3
 800416a:	2b29      	cmp	r3, #41	; 0x29
 800416c:	d112      	bne.n	8004194 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2228      	movs	r2, #40	; 0x28
 8004172:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2221      	movs	r2, #33	; 0x21
 800417a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800417c:	2101      	movs	r1, #1
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 fd50 	bl	8004c24 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f7ff fdf8 	bl	8003d82 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004192:	e017      	b.n	80041c4 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800419a:	b2db      	uxtb	r3, r3
 800419c:	2b2a      	cmp	r3, #42	; 0x2a
 800419e:	d111      	bne.n	80041c4 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2228      	movs	r2, #40	; 0x28
 80041a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2222      	movs	r2, #34	; 0x22
 80041ac:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80041ae:	2102      	movs	r1, #2
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f000 fd37 	bl	8004c24 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f7ff fde9 	bl	8003d96 <HAL_I2C_SlaveRxCpltCallback>
}
 80041c4:	bf00      	nop
 80041c6:	3710      	adds	r7, #16
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b086      	sub	sp, #24
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041e8:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2220      	movs	r2, #32
 80041f0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80041f2:	7bfb      	ldrb	r3, [r7, #15]
 80041f4:	2b21      	cmp	r3, #33	; 0x21
 80041f6:	d002      	beq.n	80041fe <I2C_ITSlaveCplt+0x32>
 80041f8:	7bfb      	ldrb	r3, [r7, #15]
 80041fa:	2b29      	cmp	r3, #41	; 0x29
 80041fc:	d108      	bne.n	8004210 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80041fe:	f248 0101 	movw	r1, #32769	; 0x8001
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 fd0e 	bl	8004c24 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2221      	movs	r2, #33	; 0x21
 800420c:	631a      	str	r2, [r3, #48]	; 0x30
 800420e:	e00d      	b.n	800422c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004210:	7bfb      	ldrb	r3, [r7, #15]
 8004212:	2b22      	cmp	r3, #34	; 0x22
 8004214:	d002      	beq.n	800421c <I2C_ITSlaveCplt+0x50>
 8004216:	7bfb      	ldrb	r3, [r7, #15]
 8004218:	2b2a      	cmp	r3, #42	; 0x2a
 800421a:	d107      	bne.n	800422c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800421c:	f248 0102 	movw	r1, #32770	; 0x8002
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f000 fcff 	bl	8004c24 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2222      	movs	r2, #34	; 0x22
 800422a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	685a      	ldr	r2, [r3, #4]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800423a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	6859      	ldr	r1, [r3, #4]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	4b64      	ldr	r3, [pc, #400]	; (80043d8 <I2C_ITSlaveCplt+0x20c>)
 8004248:	400b      	ands	r3, r1
 800424a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f000 fa14 	bl	800467a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	0b9b      	lsrs	r3, r3, #14
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	2b00      	cmp	r3, #0
 800425c:	d013      	beq.n	8004286 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800426c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004272:	2b00      	cmp	r3, #0
 8004274:	d020      	beq.n	80042b8 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	b29a      	uxth	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004284:	e018      	b.n	80042b8 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	0bdb      	lsrs	r3, r3, #15
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	2b00      	cmp	r3, #0
 8004290:	d012      	beq.n	80042b8 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042a0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d006      	beq.n	80042b8 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	b29a      	uxth	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	089b      	lsrs	r3, r3, #2
 80042bc:	f003 0301 	and.w	r3, r3, #1
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d020      	beq.n	8004306 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	f023 0304 	bic.w	r3, r3, #4
 80042ca:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d6:	b2d2      	uxtb	r2, r2
 80042d8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042de:	1c5a      	adds	r2, r3, #1
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d00c      	beq.n	8004306 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042f0:	3b01      	subs	r3, #1
 80042f2:	b29a      	uxth	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	3b01      	subs	r3, #1
 8004300:	b29a      	uxth	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800430a:	b29b      	uxth	r3, r3
 800430c:	2b00      	cmp	r3, #0
 800430e:	d005      	beq.n	800431c <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004314:	f043 0204 	orr.w	r2, r3, #4
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800432e:	2b00      	cmp	r3, #0
 8004330:	d010      	beq.n	8004354 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004336:	4619      	mov	r1, r3
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f000 f8a7 	bl	800448c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b28      	cmp	r3, #40	; 0x28
 8004348:	d141      	bne.n	80043ce <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800434a:	6979      	ldr	r1, [r7, #20]
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f000 f847 	bl	80043e0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004352:	e03c      	b.n	80043ce <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004358:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800435c:	d014      	beq.n	8004388 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f7ff fed6 	bl	8004110 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a1d      	ldr	r2, [pc, #116]	; (80043dc <I2C_ITSlaveCplt+0x210>)
 8004368:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2220      	movs	r2, #32
 800436e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f7ff fd20 	bl	8003dc6 <HAL_I2C_ListenCpltCallback>
}
 8004386:	e022      	b.n	80043ce <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800438e:	b2db      	uxtb	r3, r3
 8004390:	2b22      	cmp	r3, #34	; 0x22
 8004392:	d10e      	bne.n	80043b2 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2220      	movs	r2, #32
 8004398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f7ff fcf3 	bl	8003d96 <HAL_I2C_SlaveRxCpltCallback>
}
 80043b0:	e00d      	b.n	80043ce <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2220      	movs	r2, #32
 80043b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f7ff fcda 	bl	8003d82 <HAL_I2C_SlaveTxCpltCallback>
}
 80043ce:	bf00      	nop
 80043d0:	3718      	adds	r7, #24
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	fe00e800 	.word	0xfe00e800
 80043dc:	ffff0000 	.word	0xffff0000

080043e0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a26      	ldr	r2, [pc, #152]	; (8004488 <I2C_ITListenCplt+0xa8>)
 80043ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2220      	movs	r2, #32
 80043fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	089b      	lsrs	r3, r3, #2
 8004410:	f003 0301 	and.w	r3, r3, #1
 8004414:	2b00      	cmp	r3, #0
 8004416:	d022      	beq.n	800445e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004422:	b2d2      	uxtb	r2, r2
 8004424:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442a:	1c5a      	adds	r2, r3, #1
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004434:	2b00      	cmp	r3, #0
 8004436:	d012      	beq.n	800445e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800443c:	3b01      	subs	r3, #1
 800443e:	b29a      	uxth	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004448:	b29b      	uxth	r3, r3
 800444a:	3b01      	subs	r3, #1
 800444c:	b29a      	uxth	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004456:	f043 0204 	orr.w	r2, r3, #4
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800445e:	f248 0103 	movw	r1, #32771	; 0x8003
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 fbde 	bl	8004c24 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2210      	movs	r2, #16
 800446e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f7ff fca4 	bl	8003dc6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800447e:	bf00      	nop
 8004480:	3708      	adds	r7, #8
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	ffff0000 	.word	0xffff0000

0800448c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800449c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a5d      	ldr	r2, [pc, #372]	; (8004620 <I2C_ITError+0x194>)
 80044aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	431a      	orrs	r2, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80044be:	7bfb      	ldrb	r3, [r7, #15]
 80044c0:	2b28      	cmp	r3, #40	; 0x28
 80044c2:	d005      	beq.n	80044d0 <I2C_ITError+0x44>
 80044c4:	7bfb      	ldrb	r3, [r7, #15]
 80044c6:	2b29      	cmp	r3, #41	; 0x29
 80044c8:	d002      	beq.n	80044d0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80044ca:	7bfb      	ldrb	r3, [r7, #15]
 80044cc:	2b2a      	cmp	r3, #42	; 0x2a
 80044ce:	d10b      	bne.n	80044e8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80044d0:	2103      	movs	r1, #3
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 fba6 	bl	8004c24 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2228      	movs	r2, #40	; 0x28
 80044dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a50      	ldr	r2, [pc, #320]	; (8004624 <I2C_ITError+0x198>)
 80044e4:	635a      	str	r2, [r3, #52]	; 0x34
 80044e6:	e011      	b.n	800450c <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80044e8:	f248 0103 	movw	r1, #32771	; 0x8003
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 fb99 	bl	8004c24 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	2b60      	cmp	r3, #96	; 0x60
 80044fc:	d003      	beq.n	8004506 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2220      	movs	r2, #32
 8004502:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004510:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004516:	2b00      	cmp	r3, #0
 8004518:	d039      	beq.n	800458e <I2C_ITError+0x102>
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	2b11      	cmp	r3, #17
 800451e:	d002      	beq.n	8004526 <I2C_ITError+0x9a>
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	2b21      	cmp	r3, #33	; 0x21
 8004524:	d133      	bne.n	800458e <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004530:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004534:	d107      	bne.n	8004546 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004544:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454a:	4618      	mov	r0, r3
 800454c:	f7fe fcb0 	bl	8002eb0 <HAL_DMA_GetState>
 8004550:	4603      	mov	r3, r0
 8004552:	2b01      	cmp	r3, #1
 8004554:	d017      	beq.n	8004586 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800455a:	4a33      	ldr	r2, [pc, #204]	; (8004628 <I2C_ITError+0x19c>)
 800455c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456a:	4618      	mov	r0, r3
 800456c:	f7fe fc7e 	bl	8002e6c <HAL_DMA_Abort_IT>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d04d      	beq.n	8004612 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800457a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004580:	4610      	mov	r0, r2
 8004582:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004584:	e045      	b.n	8004612 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 f850 	bl	800462c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800458c:	e041      	b.n	8004612 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004592:	2b00      	cmp	r3, #0
 8004594:	d039      	beq.n	800460a <I2C_ITError+0x17e>
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	2b12      	cmp	r3, #18
 800459a:	d002      	beq.n	80045a2 <I2C_ITError+0x116>
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	2b22      	cmp	r3, #34	; 0x22
 80045a0:	d133      	bne.n	800460a <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045b0:	d107      	bne.n	80045c2 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045c0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7fe fc72 	bl	8002eb0 <HAL_DMA_GetState>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d017      	beq.n	8004602 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045d6:	4a14      	ldr	r2, [pc, #80]	; (8004628 <I2C_ITError+0x19c>)
 80045d8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7fe fc40 	bl	8002e6c <HAL_DMA_Abort_IT>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d011      	beq.n	8004616 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80045fc:	4610      	mov	r0, r2
 80045fe:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004600:	e009      	b.n	8004616 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f812 	bl	800462c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004608:	e005      	b.n	8004616 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 f80e 	bl	800462c <I2C_TreatErrorCallback>
  }
}
 8004610:	e002      	b.n	8004618 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004612:	bf00      	nop
 8004614:	e000      	b.n	8004618 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004616:	bf00      	nop
}
 8004618:	bf00      	nop
 800461a:	3710      	adds	r7, #16
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	ffff0000 	.word	0xffff0000
 8004624:	08003e03 	.word	0x08003e03
 8004628:	080046c3 	.word	0x080046c3

0800462c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800463a:	b2db      	uxtb	r3, r3
 800463c:	2b60      	cmp	r3, #96	; 0x60
 800463e:	d10e      	bne.n	800465e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2220      	movs	r2, #32
 8004644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f7ff fbc9 	bl	8003dee <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800465c:	e009      	b.n	8004672 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f7ff fbb4 	bl	8003dda <HAL_I2C_ErrorCallback>
}
 8004672:	bf00      	nop
 8004674:	3708      	adds	r7, #8
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}

0800467a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800467a:	b480      	push	{r7}
 800467c:	b083      	sub	sp, #12
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	f003 0302 	and.w	r3, r3, #2
 800468c:	2b02      	cmp	r3, #2
 800468e:	d103      	bne.n	8004698 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2200      	movs	r2, #0
 8004696:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d007      	beq.n	80046b6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	699a      	ldr	r2, [r3, #24]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f042 0201 	orr.w	r2, r2, #1
 80046b4:	619a      	str	r2, [r3, #24]
  }
}
 80046b6:	bf00      	nop
 80046b8:	370c      	adds	r7, #12
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr

080046c2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b084      	sub	sp, #16
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ce:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d003      	beq.n	80046e0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046dc:	2200      	movs	r2, #0
 80046de:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d003      	beq.n	80046f0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ec:	2200      	movs	r2, #0
 80046ee:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80046f0:	68f8      	ldr	r0, [r7, #12]
 80046f2:	f7ff ff9b 	bl	800462c <I2C_TreatErrorCallback>
}
 80046f6:	bf00      	nop
 80046f8:	3710      	adds	r7, #16
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}

080046fe <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80046fe:	b580      	push	{r7, lr}
 8004700:	b084      	sub	sp, #16
 8004702:	af00      	add	r7, sp, #0
 8004704:	60f8      	str	r0, [r7, #12]
 8004706:	60b9      	str	r1, [r7, #8]
 8004708:	603b      	str	r3, [r7, #0]
 800470a:	4613      	mov	r3, r2
 800470c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800470e:	e022      	b.n	8004756 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004716:	d01e      	beq.n	8004756 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004718:	f7fe f9c8 	bl	8002aac <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	683a      	ldr	r2, [r7, #0]
 8004724:	429a      	cmp	r2, r3
 8004726:	d302      	bcc.n	800472e <I2C_WaitOnFlagUntilTimeout+0x30>
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d113      	bne.n	8004756 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004732:	f043 0220 	orr.w	r2, r3, #32
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2220      	movs	r2, #32
 800473e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e00f      	b.n	8004776 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	699a      	ldr	r2, [r3, #24]
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	4013      	ands	r3, r2
 8004760:	68ba      	ldr	r2, [r7, #8]
 8004762:	429a      	cmp	r2, r3
 8004764:	bf0c      	ite	eq
 8004766:	2301      	moveq	r3, #1
 8004768:	2300      	movne	r3, #0
 800476a:	b2db      	uxtb	r3, r3
 800476c:	461a      	mov	r2, r3
 800476e:	79fb      	ldrb	r3, [r7, #7]
 8004770:	429a      	cmp	r2, r3
 8004772:	d0cd      	beq.n	8004710 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3710      	adds	r7, #16
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b084      	sub	sp, #16
 8004782:	af00      	add	r7, sp, #0
 8004784:	60f8      	str	r0, [r7, #12]
 8004786:	60b9      	str	r1, [r7, #8]
 8004788:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800478a:	e02c      	b.n	80047e6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	68b9      	ldr	r1, [r7, #8]
 8004790:	68f8      	ldr	r0, [r7, #12]
 8004792:	f000 f8eb 	bl	800496c <I2C_IsErrorOccurred>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d001      	beq.n	80047a0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e02a      	b.n	80047f6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a6:	d01e      	beq.n	80047e6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047a8:	f7fe f980 	bl	8002aac <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	68ba      	ldr	r2, [r7, #8]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d302      	bcc.n	80047be <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d113      	bne.n	80047e6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c2:	f043 0220 	orr.w	r2, r3, #32
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2220      	movs	r2, #32
 80047ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e007      	b.n	80047f6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	699b      	ldr	r3, [r3, #24]
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d1cb      	bne.n	800478c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3710      	adds	r7, #16
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80047fe:	b580      	push	{r7, lr}
 8004800:	b084      	sub	sp, #16
 8004802:	af00      	add	r7, sp, #0
 8004804:	60f8      	str	r0, [r7, #12]
 8004806:	60b9      	str	r1, [r7, #8]
 8004808:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800480a:	e028      	b.n	800485e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	68b9      	ldr	r1, [r7, #8]
 8004810:	68f8      	ldr	r0, [r7, #12]
 8004812:	f000 f8ab 	bl	800496c <I2C_IsErrorOccurred>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d001      	beq.n	8004820 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e026      	b.n	800486e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004820:	f7fe f944 	bl	8002aac <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	68ba      	ldr	r2, [r7, #8]
 800482c:	429a      	cmp	r2, r3
 800482e:	d302      	bcc.n	8004836 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d113      	bne.n	800485e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800483a:	f043 0220 	orr.w	r2, r3, #32
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2220      	movs	r2, #32
 8004846:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2200      	movs	r2, #0
 800484e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e007      	b.n	800486e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	699b      	ldr	r3, [r3, #24]
 8004864:	f003 0320 	and.w	r3, r3, #32
 8004868:	2b20      	cmp	r3, #32
 800486a:	d1cf      	bne.n	800480c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
	...

08004878 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004884:	e064      	b.n	8004950 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	68b9      	ldr	r1, [r7, #8]
 800488a:	68f8      	ldr	r0, [r7, #12]
 800488c:	f000 f86e 	bl	800496c <I2C_IsErrorOccurred>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d001      	beq.n	800489a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e062      	b.n	8004960 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	699b      	ldr	r3, [r3, #24]
 80048a0:	f003 0320 	and.w	r3, r3, #32
 80048a4:	2b20      	cmp	r3, #32
 80048a6:	d138      	bne.n	800491a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	f003 0304 	and.w	r3, r3, #4
 80048b2:	2b04      	cmp	r3, #4
 80048b4:	d105      	bne.n	80048c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d001      	beq.n	80048c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80048be:	2300      	movs	r3, #0
 80048c0:	e04e      	b.n	8004960 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	699b      	ldr	r3, [r3, #24]
 80048c8:	f003 0310 	and.w	r3, r3, #16
 80048cc:	2b10      	cmp	r3, #16
 80048ce:	d107      	bne.n	80048e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2210      	movs	r2, #16
 80048d6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2204      	movs	r2, #4
 80048dc:	645a      	str	r2, [r3, #68]	; 0x44
 80048de:	e002      	b.n	80048e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2200      	movs	r2, #0
 80048e4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2220      	movs	r2, #32
 80048ec:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	6859      	ldr	r1, [r3, #4]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	4b1b      	ldr	r3, [pc, #108]	; (8004968 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80048fa:	400b      	ands	r3, r1
 80048fc:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2220      	movs	r2, #32
 8004902:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2200      	movs	r2, #0
 8004912:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e022      	b.n	8004960 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800491a:	f7fe f8c7 	bl	8002aac <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	68ba      	ldr	r2, [r7, #8]
 8004926:	429a      	cmp	r2, r3
 8004928:	d302      	bcc.n	8004930 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d10f      	bne.n	8004950 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004934:	f043 0220 	orr.w	r2, r3, #32
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2220      	movs	r2, #32
 8004940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2200      	movs	r2, #0
 8004948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e007      	b.n	8004960 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	f003 0304 	and.w	r3, r3, #4
 800495a:	2b04      	cmp	r3, #4
 800495c:	d193      	bne.n	8004886 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800495e:	2300      	movs	r3, #0
}
 8004960:	4618      	mov	r0, r3
 8004962:	3710      	adds	r7, #16
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}
 8004968:	fe00e800 	.word	0xfe00e800

0800496c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b08a      	sub	sp, #40	; 0x28
 8004970:	af00      	add	r7, sp, #0
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	60b9      	str	r1, [r7, #8]
 8004976:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004978:	2300      	movs	r3, #0
 800497a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	699b      	ldr	r3, [r3, #24]
 8004984:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004986:	2300      	movs	r3, #0
 8004988:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	f003 0310 	and.w	r3, r3, #16
 8004994:	2b00      	cmp	r3, #0
 8004996:	d068      	beq.n	8004a6a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2210      	movs	r2, #16
 800499e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80049a0:	e049      	b.n	8004a36 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049a8:	d045      	beq.n	8004a36 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80049aa:	f7fe f87f 	bl	8002aac <HAL_GetTick>
 80049ae:	4602      	mov	r2, r0
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	68ba      	ldr	r2, [r7, #8]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d302      	bcc.n	80049c0 <I2C_IsErrorOccurred+0x54>
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d13a      	bne.n	8004a36 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049ca:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80049d2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049e2:	d121      	bne.n	8004a28 <I2C_IsErrorOccurred+0xbc>
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049ea:	d01d      	beq.n	8004a28 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80049ec:	7cfb      	ldrb	r3, [r7, #19]
 80049ee:	2b20      	cmp	r3, #32
 80049f0:	d01a      	beq.n	8004a28 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	685a      	ldr	r2, [r3, #4]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a00:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004a02:	f7fe f853 	bl	8002aac <HAL_GetTick>
 8004a06:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a08:	e00e      	b.n	8004a28 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004a0a:	f7fe f84f 	bl	8002aac <HAL_GetTick>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	2b19      	cmp	r3, #25
 8004a16:	d907      	bls.n	8004a28 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8004a18:	6a3b      	ldr	r3, [r7, #32]
 8004a1a:	f043 0320 	orr.w	r3, r3, #32
 8004a1e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004a26:	e006      	b.n	8004a36 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	f003 0320 	and.w	r3, r3, #32
 8004a32:	2b20      	cmp	r3, #32
 8004a34:	d1e9      	bne.n	8004a0a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	699b      	ldr	r3, [r3, #24]
 8004a3c:	f003 0320 	and.w	r3, r3, #32
 8004a40:	2b20      	cmp	r3, #32
 8004a42:	d003      	beq.n	8004a4c <I2C_IsErrorOccurred+0xe0>
 8004a44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d0aa      	beq.n	80049a2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004a4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d103      	bne.n	8004a5c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2220      	movs	r2, #32
 8004a5a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004a5c:	6a3b      	ldr	r3, [r7, #32]
 8004a5e:	f043 0304 	orr.w	r3, r3, #4
 8004a62:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d00b      	beq.n	8004a94 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004a7c:	6a3b      	ldr	r3, [r7, #32]
 8004a7e:	f043 0301 	orr.w	r3, r3, #1
 8004a82:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a8c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00b      	beq.n	8004ab6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004a9e:	6a3b      	ldr	r3, [r7, #32]
 8004aa0:	f043 0308 	orr.w	r3, r3, #8
 8004aa4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004aae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d00b      	beq.n	8004ad8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004ac0:	6a3b      	ldr	r3, [r7, #32]
 8004ac2:	f043 0302 	orr.w	r3, r3, #2
 8004ac6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ad0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004ad8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d01c      	beq.n	8004b1a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004ae0:	68f8      	ldr	r0, [r7, #12]
 8004ae2:	f7ff fdca 	bl	800467a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	6859      	ldr	r1, [r3, #4]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	4b0d      	ldr	r3, [pc, #52]	; (8004b28 <I2C_IsErrorOccurred+0x1bc>)
 8004af2:	400b      	ands	r3, r1
 8004af4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004afa:	6a3b      	ldr	r3, [r7, #32]
 8004afc:	431a      	orrs	r2, r3
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2220      	movs	r2, #32
 8004b06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004b1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3728      	adds	r7, #40	; 0x28
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	fe00e800 	.word	0xfe00e800

08004b2c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b086      	sub	sp, #24
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	607b      	str	r3, [r7, #4]
 8004b36:	460b      	mov	r3, r1
 8004b38:	817b      	strh	r3, [r7, #10]
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	727b      	strb	r3, [r7, #9]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a2f      	ldr	r2, [pc, #188]	; (8004c00 <I2C_TransferConfig+0xd4>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d013      	beq.n	8004b70 <I2C_TransferConfig+0x44>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a2d      	ldr	r2, [pc, #180]	; (8004c04 <I2C_TransferConfig+0xd8>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d00e      	beq.n	8004b70 <I2C_TransferConfig+0x44>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a2c      	ldr	r2, [pc, #176]	; (8004c08 <I2C_TransferConfig+0xdc>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d009      	beq.n	8004b70 <I2C_TransferConfig+0x44>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a2a      	ldr	r2, [pc, #168]	; (8004c0c <I2C_TransferConfig+0xe0>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d004      	beq.n	8004b70 <I2C_TransferConfig+0x44>
 8004b66:	f641 3147 	movw	r1, #6983	; 0x1b47
 8004b6a:	4829      	ldr	r0, [pc, #164]	; (8004c10 <I2C_TransferConfig+0xe4>)
 8004b6c:	f7fd f851 	bl	8001c12 <assert_failed>
  assert_param(IS_TRANSFER_MODE(Mode));
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b76:	d00b      	beq.n	8004b90 <I2C_TransferConfig+0x64>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b7e:	d007      	beq.n	8004b90 <I2C_TransferConfig+0x64>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d004      	beq.n	8004b90 <I2C_TransferConfig+0x64>
 8004b86:	f641 3148 	movw	r1, #6984	; 0x1b48
 8004b8a:	4821      	ldr	r0, [pc, #132]	; (8004c10 <I2C_TransferConfig+0xe4>)
 8004b8c:	f7fd f841 	bl	8001c12 <assert_failed>
  assert_param(IS_TRANSFER_REQUEST(Request));
 8004b90:	6a3b      	ldr	r3, [r7, #32]
 8004b92:	4a20      	ldr	r2, [pc, #128]	; (8004c14 <I2C_TransferConfig+0xe8>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d00f      	beq.n	8004bb8 <I2C_TransferConfig+0x8c>
 8004b98:	6a3b      	ldr	r3, [r7, #32]
 8004b9a:	4a1f      	ldr	r2, [pc, #124]	; (8004c18 <I2C_TransferConfig+0xec>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d00b      	beq.n	8004bb8 <I2C_TransferConfig+0x8c>
 8004ba0:	6a3b      	ldr	r3, [r7, #32]
 8004ba2:	4a1e      	ldr	r2, [pc, #120]	; (8004c1c <I2C_TransferConfig+0xf0>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d007      	beq.n	8004bb8 <I2C_TransferConfig+0x8c>
 8004ba8:	6a3b      	ldr	r3, [r7, #32]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d004      	beq.n	8004bb8 <I2C_TransferConfig+0x8c>
 8004bae:	f641 3149 	movw	r1, #6985	; 0x1b49
 8004bb2:	4817      	ldr	r0, [pc, #92]	; (8004c10 <I2C_TransferConfig+0xe4>)
 8004bb4:	f7fd f82d 	bl	8001c12 <assert_failed>

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004bb8:	897b      	ldrh	r3, [r7, #10]
 8004bba:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004bbe:	7a7b      	ldrb	r3, [r7, #9]
 8004bc0:	041b      	lsls	r3, r3, #16
 8004bc2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004bc6:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004bcc:	6a3b      	ldr	r3, [r7, #32]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004bd4:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	685a      	ldr	r2, [r3, #4]
 8004bdc:	6a3b      	ldr	r3, [r7, #32]
 8004bde:	0d5b      	lsrs	r3, r3, #21
 8004be0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004be4:	4b0e      	ldr	r3, [pc, #56]	; (8004c20 <I2C_TransferConfig+0xf4>)
 8004be6:	430b      	orrs	r3, r1
 8004be8:	43db      	mvns	r3, r3
 8004bea:	ea02 0103 	and.w	r1, r2, r3
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	697a      	ldr	r2, [r7, #20]
 8004bf4:	430a      	orrs	r2, r1
 8004bf6:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004bf8:	bf00      	nop
 8004bfa:	3718      	adds	r7, #24
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	40005400 	.word	0x40005400
 8004c04:	40005800 	.word	0x40005800
 8004c08:	40005c00 	.word	0x40005c00
 8004c0c:	40006000 	.word	0x40006000
 8004c10:	08014a08 	.word	0x08014a08
 8004c14:	80004000 	.word	0x80004000
 8004c18:	80002400 	.word	0x80002400
 8004c1c:	80002000 	.word	0x80002000
 8004c20:	03ff63ff 	.word	0x03ff63ff

08004c24 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b085      	sub	sp, #20
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	460b      	mov	r3, r1
 8004c2e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004c30:	2300      	movs	r3, #0
 8004c32:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004c34:	887b      	ldrh	r3, [r7, #2]
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00f      	beq.n	8004c5e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8004c44:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004c52:	2b28      	cmp	r3, #40	; 0x28
 8004c54:	d003      	beq.n	8004c5e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004c5c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004c5e:	887b      	ldrh	r3, [r7, #2]
 8004c60:	f003 0302 	and.w	r3, r3, #2
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d00f      	beq.n	8004c88 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8004c6e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004c7c:	2b28      	cmp	r3, #40	; 0x28
 8004c7e:	d003      	beq.n	8004c88 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004c86:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004c88:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	da03      	bge.n	8004c98 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004c96:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004c98:	887b      	ldrh	r3, [r7, #2]
 8004c9a:	2b10      	cmp	r3, #16
 8004c9c:	d103      	bne.n	8004ca6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004ca4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004ca6:	887b      	ldrh	r3, [r7, #2]
 8004ca8:	2b20      	cmp	r3, #32
 8004caa:	d103      	bne.n	8004cb4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f043 0320 	orr.w	r3, r3, #32
 8004cb2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004cb4:	887b      	ldrh	r3, [r7, #2]
 8004cb6:	2b40      	cmp	r3, #64	; 0x40
 8004cb8:	d103      	bne.n	8004cc2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cc0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	6819      	ldr	r1, [r3, #0]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	43da      	mvns	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	400a      	ands	r2, r1
 8004cd2:	601a      	str	r2, [r3, #0]
}
 8004cd4:	bf00      	nop
 8004cd6:	3714      	adds	r7, #20
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a32      	ldr	r2, [pc, #200]	; (8004db8 <HAL_I2CEx_ConfigAnalogFilter+0xd8>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d012      	beq.n	8004d1a <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a30      	ldr	r2, [pc, #192]	; (8004dbc <HAL_I2CEx_ConfigAnalogFilter+0xdc>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d00d      	beq.n	8004d1a <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a2f      	ldr	r2, [pc, #188]	; (8004dc0 <HAL_I2CEx_ConfigAnalogFilter+0xe0>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d008      	beq.n	8004d1a <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a2d      	ldr	r2, [pc, #180]	; (8004dc4 <HAL_I2CEx_ConfigAnalogFilter+0xe4>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d003      	beq.n	8004d1a <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8004d12:	215e      	movs	r1, #94	; 0x5e
 8004d14:	482c      	ldr	r0, [pc, #176]	; (8004dc8 <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 8004d16:	f7fc ff7c 	bl	8001c12 <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d007      	beq.n	8004d30 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d26:	d003      	beq.n	8004d30 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8004d28:	215f      	movs	r1, #95	; 0x5f
 8004d2a:	4827      	ldr	r0, [pc, #156]	; (8004dc8 <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 8004d2c:	f7fc ff71 	bl	8001c12 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	2b20      	cmp	r3, #32
 8004d3a:	d138      	bne.n	8004dae <HAL_I2CEx_ConfigAnalogFilter+0xce>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d101      	bne.n	8004d4a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
 8004d46:	2302      	movs	r3, #2
 8004d48:	e032      	b.n	8004db0 <HAL_I2CEx_ConfigAnalogFilter+0xd0>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2224      	movs	r2, #36	; 0x24
 8004d56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f022 0201 	bic.w	r2, r2, #1
 8004d68:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004d78:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	6819      	ldr	r1, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	683a      	ldr	r2, [r7, #0]
 8004d86:	430a      	orrs	r2, r1
 8004d88:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f042 0201 	orr.w	r2, r2, #1
 8004d98:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2220      	movs	r2, #32
 8004d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004daa:	2300      	movs	r3, #0
 8004dac:	e000      	b.n	8004db0 <HAL_I2CEx_ConfigAnalogFilter+0xd0>
  }
  else
  {
    return HAL_BUSY;
 8004dae:	2302      	movs	r3, #2
  }
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3708      	adds	r7, #8
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	40005400 	.word	0x40005400
 8004dbc:	40005800 	.word	0x40005800
 8004dc0:	40005c00 	.word	0x40005c00
 8004dc4:	40006000 	.word	0x40006000
 8004dc8:	08014a40 	.word	0x08014a40

08004dcc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a31      	ldr	r2, [pc, #196]	; (8004ea0 <HAL_I2CEx_ConfigDigitalFilter+0xd4>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d012      	beq.n	8004e06 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a2f      	ldr	r2, [pc, #188]	; (8004ea4 <HAL_I2CEx_ConfigDigitalFilter+0xd8>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d00d      	beq.n	8004e06 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a2e      	ldr	r2, [pc, #184]	; (8004ea8 <HAL_I2CEx_ConfigDigitalFilter+0xdc>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d008      	beq.n	8004e06 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a2c      	ldr	r2, [pc, #176]	; (8004eac <HAL_I2CEx_ConfigDigitalFilter+0xe0>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d003      	beq.n	8004e06 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8004dfe:	218c      	movs	r1, #140	; 0x8c
 8004e00:	482b      	ldr	r0, [pc, #172]	; (8004eb0 <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 8004e02:	f7fc ff06 	bl	8001c12 <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	2b0f      	cmp	r3, #15
 8004e0a:	d903      	bls.n	8004e14 <HAL_I2CEx_ConfigDigitalFilter+0x48>
 8004e0c:	218d      	movs	r1, #141	; 0x8d
 8004e0e:	4828      	ldr	r0, [pc, #160]	; (8004eb0 <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 8004e10:	f7fc feff 	bl	8001c12 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	2b20      	cmp	r3, #32
 8004e1e:	d139      	bne.n	8004e94 <HAL_I2CEx_ConfigDigitalFilter+0xc8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d101      	bne.n	8004e2e <HAL_I2CEx_ConfigDigitalFilter+0x62>
 8004e2a:	2302      	movs	r3, #2
 8004e2c:	e033      	b.n	8004e96 <HAL_I2CEx_ConfigDigitalFilter+0xca>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2201      	movs	r2, #1
 8004e32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2224      	movs	r2, #36	; 0x24
 8004e3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f022 0201 	bic.w	r2, r2, #1
 8004e4c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004e5c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	021b      	lsls	r3, r3, #8
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f042 0201 	orr.w	r2, r2, #1
 8004e7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2220      	movs	r2, #32
 8004e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004e90:	2300      	movs	r3, #0
 8004e92:	e000      	b.n	8004e96 <HAL_I2CEx_ConfigDigitalFilter+0xca>
  }
  else
  {
    return HAL_BUSY;
 8004e94:	2302      	movs	r3, #2
  }
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3710      	adds	r7, #16
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	40005400 	.word	0x40005400
 8004ea4:	40005800 	.word	0x40005800
 8004ea8:	40005c00 	.word	0x40005c00
 8004eac:	40006000 	.word	0x40006000
 8004eb0:	08014a40 	.word	0x08014a40

08004eb4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b082      	sub	sp, #8
 8004eb8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004ebe:	4b23      	ldr	r3, [pc, #140]	; (8004f4c <HAL_PWREx_EnableOverDrive+0x98>)
 8004ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec2:	4a22      	ldr	r2, [pc, #136]	; (8004f4c <HAL_PWREx_EnableOverDrive+0x98>)
 8004ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8004eca:	4b20      	ldr	r3, [pc, #128]	; (8004f4c <HAL_PWREx_EnableOverDrive+0x98>)
 8004ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ed2:	603b      	str	r3, [r7, #0]
 8004ed4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004ed6:	4b1e      	ldr	r3, [pc, #120]	; (8004f50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a1d      	ldr	r2, [pc, #116]	; (8004f50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ee0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ee2:	f7fd fde3 	bl	8002aac <HAL_GetTick>
 8004ee6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004ee8:	e009      	b.n	8004efe <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004eea:	f7fd fddf 	bl	8002aac <HAL_GetTick>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ef8:	d901      	bls.n	8004efe <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e022      	b.n	8004f44 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004efe:	4b14      	ldr	r3, [pc, #80]	; (8004f50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f0a:	d1ee      	bne.n	8004eea <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004f0c:	4b10      	ldr	r3, [pc, #64]	; (8004f50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a0f      	ldr	r2, [pc, #60]	; (8004f50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004f12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f16:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f18:	f7fd fdc8 	bl	8002aac <HAL_GetTick>
 8004f1c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004f1e:	e009      	b.n	8004f34 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004f20:	f7fd fdc4 	bl	8002aac <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f2e:	d901      	bls.n	8004f34 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004f30:	2303      	movs	r3, #3
 8004f32:	e007      	b.n	8004f44 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004f34:	4b06      	ldr	r3, [pc, #24]	; (8004f50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f40:	d1ee      	bne.n	8004f20 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3708      	adds	r7, #8
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	40023800 	.word	0x40023800
 8004f50:	40007000 	.word	0x40007000

08004f54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b086      	sub	sp, #24
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d101      	bne.n	8004f6a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e345      	b.n	80055f6 <HAL_RCC_OscConfig+0x6a2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2b0f      	cmp	r3, #15
 8004f70:	d904      	bls.n	8004f7c <HAL_RCC_OscConfig+0x28>
 8004f72:	f240 1163 	movw	r1, #355	; 0x163
 8004f76:	4892      	ldr	r0, [pc, #584]	; (80051c0 <HAL_RCC_OscConfig+0x26c>)
 8004f78:	f7fc fe4b 	bl	8001c12 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0301 	and.w	r3, r3, #1
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	f000 809a 	beq.w	80050be <HAL_RCC_OscConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d00e      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x5c>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f9a:	d009      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x5c>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fa4:	d004      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x5c>
 8004fa6:	f240 1169 	movw	r1, #361	; 0x169
 8004faa:	4885      	ldr	r0, [pc, #532]	; (80051c0 <HAL_RCC_OscConfig+0x26c>)
 8004fac:	f7fc fe31 	bl	8001c12 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004fb0:	4b84      	ldr	r3, [pc, #528]	; (80051c4 <HAL_RCC_OscConfig+0x270>)
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	f003 030c 	and.w	r3, r3, #12
 8004fb8:	2b04      	cmp	r3, #4
 8004fba:	d00c      	beq.n	8004fd6 <HAL_RCC_OscConfig+0x82>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fbc:	4b81      	ldr	r3, [pc, #516]	; (80051c4 <HAL_RCC_OscConfig+0x270>)
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	f003 030c 	and.w	r3, r3, #12
 8004fc4:	2b08      	cmp	r3, #8
 8004fc6:	d112      	bne.n	8004fee <HAL_RCC_OscConfig+0x9a>
 8004fc8:	4b7e      	ldr	r3, [pc, #504]	; (80051c4 <HAL_RCC_OscConfig+0x270>)
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fd4:	d10b      	bne.n	8004fee <HAL_RCC_OscConfig+0x9a>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fd6:	4b7b      	ldr	r3, [pc, #492]	; (80051c4 <HAL_RCC_OscConfig+0x270>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d06c      	beq.n	80050bc <HAL_RCC_OscConfig+0x168>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d168      	bne.n	80050bc <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e303      	b.n	80055f6 <HAL_RCC_OscConfig+0x6a2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ff6:	d106      	bne.n	8005006 <HAL_RCC_OscConfig+0xb2>
 8004ff8:	4b72      	ldr	r3, [pc, #456]	; (80051c4 <HAL_RCC_OscConfig+0x270>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a71      	ldr	r2, [pc, #452]	; (80051c4 <HAL_RCC_OscConfig+0x270>)
 8004ffe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005002:	6013      	str	r3, [r2, #0]
 8005004:	e02e      	b.n	8005064 <HAL_RCC_OscConfig+0x110>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d10c      	bne.n	8005028 <HAL_RCC_OscConfig+0xd4>
 800500e:	4b6d      	ldr	r3, [pc, #436]	; (80051c4 <HAL_RCC_OscConfig+0x270>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a6c      	ldr	r2, [pc, #432]	; (80051c4 <HAL_RCC_OscConfig+0x270>)
 8005014:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005018:	6013      	str	r3, [r2, #0]
 800501a:	4b6a      	ldr	r3, [pc, #424]	; (80051c4 <HAL_RCC_OscConfig+0x270>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a69      	ldr	r2, [pc, #420]	; (80051c4 <HAL_RCC_OscConfig+0x270>)
 8005020:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005024:	6013      	str	r3, [r2, #0]
 8005026:	e01d      	b.n	8005064 <HAL_RCC_OscConfig+0x110>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005030:	d10c      	bne.n	800504c <HAL_RCC_OscConfig+0xf8>
 8005032:	4b64      	ldr	r3, [pc, #400]	; (80051c4 <HAL_RCC_OscConfig+0x270>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a63      	ldr	r2, [pc, #396]	; (80051c4 <HAL_RCC_OscConfig+0x270>)
 8005038:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800503c:	6013      	str	r3, [r2, #0]
 800503e:	4b61      	ldr	r3, [pc, #388]	; (80051c4 <HAL_RCC_OscConfig+0x270>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a60      	ldr	r2, [pc, #384]	; (80051c4 <HAL_RCC_OscConfig+0x270>)
 8005044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005048:	6013      	str	r3, [r2, #0]
 800504a:	e00b      	b.n	8005064 <HAL_RCC_OscConfig+0x110>
 800504c:	4b5d      	ldr	r3, [pc, #372]	; (80051c4 <HAL_RCC_OscConfig+0x270>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a5c      	ldr	r2, [pc, #368]	; (80051c4 <HAL_RCC_OscConfig+0x270>)
 8005052:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005056:	6013      	str	r3, [r2, #0]
 8005058:	4b5a      	ldr	r3, [pc, #360]	; (80051c4 <HAL_RCC_OscConfig+0x270>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a59      	ldr	r2, [pc, #356]	; (80051c4 <HAL_RCC_OscConfig+0x270>)
 800505e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005062:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d013      	beq.n	8005094 <HAL_RCC_OscConfig+0x140>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800506c:	f7fd fd1e 	bl	8002aac <HAL_GetTick>
 8005070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005072:	e008      	b.n	8005086 <HAL_RCC_OscConfig+0x132>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005074:	f7fd fd1a 	bl	8002aac <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	2b64      	cmp	r3, #100	; 0x64
 8005080:	d901      	bls.n	8005086 <HAL_RCC_OscConfig+0x132>
          {
            return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e2b7      	b.n	80055f6 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005086:	4b4f      	ldr	r3, [pc, #316]	; (80051c4 <HAL_RCC_OscConfig+0x270>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d0f0      	beq.n	8005074 <HAL_RCC_OscConfig+0x120>
 8005092:	e014      	b.n	80050be <HAL_RCC_OscConfig+0x16a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005094:	f7fd fd0a 	bl	8002aac <HAL_GetTick>
 8005098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800509a:	e008      	b.n	80050ae <HAL_RCC_OscConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800509c:	f7fd fd06 	bl	8002aac <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	2b64      	cmp	r3, #100	; 0x64
 80050a8:	d901      	bls.n	80050ae <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e2a3      	b.n	80055f6 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050ae:	4b45      	ldr	r3, [pc, #276]	; (80051c4 <HAL_RCC_OscConfig+0x270>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d1f0      	bne.n	800509c <HAL_RCC_OscConfig+0x148>
 80050ba:	e000      	b.n	80050be <HAL_RCC_OscConfig+0x16a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0302 	and.w	r3, r3, #2
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	f000 8084 	beq.w	80051d4 <HAL_RCC_OscConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d008      	beq.n	80050e6 <HAL_RCC_OscConfig+0x192>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d004      	beq.n	80050e6 <HAL_RCC_OscConfig+0x192>
 80050dc:	f240 119b 	movw	r1, #411	; 0x19b
 80050e0:	4837      	ldr	r0, [pc, #220]	; (80051c0 <HAL_RCC_OscConfig+0x26c>)
 80050e2:	f7fc fd96 	bl	8001c12 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	2b1f      	cmp	r3, #31
 80050ec:	d904      	bls.n	80050f8 <HAL_RCC_OscConfig+0x1a4>
 80050ee:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 80050f2:	4833      	ldr	r0, [pc, #204]	; (80051c0 <HAL_RCC_OscConfig+0x26c>)
 80050f4:	f7fc fd8d 	bl	8001c12 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80050f8:	4b32      	ldr	r3, [pc, #200]	; (80051c4 <HAL_RCC_OscConfig+0x270>)
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	f003 030c 	and.w	r3, r3, #12
 8005100:	2b00      	cmp	r3, #0
 8005102:	d00b      	beq.n	800511c <HAL_RCC_OscConfig+0x1c8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005104:	4b2f      	ldr	r3, [pc, #188]	; (80051c4 <HAL_RCC_OscConfig+0x270>)
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	f003 030c 	and.w	r3, r3, #12
 800510c:	2b08      	cmp	r3, #8
 800510e:	d11c      	bne.n	800514a <HAL_RCC_OscConfig+0x1f6>
 8005110:	4b2c      	ldr	r3, [pc, #176]	; (80051c4 <HAL_RCC_OscConfig+0x270>)
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d116      	bne.n	800514a <HAL_RCC_OscConfig+0x1f6>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800511c:	4b29      	ldr	r3, [pc, #164]	; (80051c4 <HAL_RCC_OscConfig+0x270>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0302 	and.w	r3, r3, #2
 8005124:	2b00      	cmp	r3, #0
 8005126:	d005      	beq.n	8005134 <HAL_RCC_OscConfig+0x1e0>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	2b01      	cmp	r3, #1
 800512e:	d001      	beq.n	8005134 <HAL_RCC_OscConfig+0x1e0>
      {
        return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e260      	b.n	80055f6 <HAL_RCC_OscConfig+0x6a2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005134:	4b23      	ldr	r3, [pc, #140]	; (80051c4 <HAL_RCC_OscConfig+0x270>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	691b      	ldr	r3, [r3, #16]
 8005140:	00db      	lsls	r3, r3, #3
 8005142:	4920      	ldr	r1, [pc, #128]	; (80051c4 <HAL_RCC_OscConfig+0x270>)
 8005144:	4313      	orrs	r3, r2
 8005146:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005148:	e044      	b.n	80051d4 <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d023      	beq.n	800519a <HAL_RCC_OscConfig+0x246>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005152:	4b1c      	ldr	r3, [pc, #112]	; (80051c4 <HAL_RCC_OscConfig+0x270>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a1b      	ldr	r2, [pc, #108]	; (80051c4 <HAL_RCC_OscConfig+0x270>)
 8005158:	f043 0301 	orr.w	r3, r3, #1
 800515c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800515e:	f7fd fca5 	bl	8002aac <HAL_GetTick>
 8005162:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005164:	e008      	b.n	8005178 <HAL_RCC_OscConfig+0x224>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005166:	f7fd fca1 	bl	8002aac <HAL_GetTick>
 800516a:	4602      	mov	r2, r0
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	2b02      	cmp	r3, #2
 8005172:	d901      	bls.n	8005178 <HAL_RCC_OscConfig+0x224>
          {
            return HAL_TIMEOUT;
 8005174:	2303      	movs	r3, #3
 8005176:	e23e      	b.n	80055f6 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005178:	4b12      	ldr	r3, [pc, #72]	; (80051c4 <HAL_RCC_OscConfig+0x270>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0302 	and.w	r3, r3, #2
 8005180:	2b00      	cmp	r3, #0
 8005182:	d0f0      	beq.n	8005166 <HAL_RCC_OscConfig+0x212>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005184:	4b0f      	ldr	r3, [pc, #60]	; (80051c4 <HAL_RCC_OscConfig+0x270>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	00db      	lsls	r3, r3, #3
 8005192:	490c      	ldr	r1, [pc, #48]	; (80051c4 <HAL_RCC_OscConfig+0x270>)
 8005194:	4313      	orrs	r3, r2
 8005196:	600b      	str	r3, [r1, #0]
 8005198:	e01c      	b.n	80051d4 <HAL_RCC_OscConfig+0x280>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800519a:	4b0a      	ldr	r3, [pc, #40]	; (80051c4 <HAL_RCC_OscConfig+0x270>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a09      	ldr	r2, [pc, #36]	; (80051c4 <HAL_RCC_OscConfig+0x270>)
 80051a0:	f023 0301 	bic.w	r3, r3, #1
 80051a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a6:	f7fd fc81 	bl	8002aac <HAL_GetTick>
 80051aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051ac:	e00c      	b.n	80051c8 <HAL_RCC_OscConfig+0x274>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051ae:	f7fd fc7d 	bl	8002aac <HAL_GetTick>
 80051b2:	4602      	mov	r2, r0
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d905      	bls.n	80051c8 <HAL_RCC_OscConfig+0x274>
          {
            return HAL_TIMEOUT;
 80051bc:	2303      	movs	r3, #3
 80051be:	e21a      	b.n	80055f6 <HAL_RCC_OscConfig+0x6a2>
 80051c0:	08014a7c 	.word	0x08014a7c
 80051c4:	40023800 	.word	0x40023800
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051c8:	4b7e      	ldr	r3, [pc, #504]	; (80053c4 <HAL_RCC_OscConfig+0x470>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0302 	and.w	r3, r3, #2
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d1ec      	bne.n	80051ae <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0308 	and.w	r3, r3, #8
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d043      	beq.n	8005268 <HAL_RCC_OscConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	695b      	ldr	r3, [r3, #20]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d008      	beq.n	80051fa <HAL_RCC_OscConfig+0x2a6>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	695b      	ldr	r3, [r3, #20]
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d004      	beq.n	80051fa <HAL_RCC_OscConfig+0x2a6>
 80051f0:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 80051f4:	4874      	ldr	r0, [pc, #464]	; (80053c8 <HAL_RCC_OscConfig+0x474>)
 80051f6:	f7fc fd0c 	bl	8001c12 <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d019      	beq.n	8005236 <HAL_RCC_OscConfig+0x2e2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005202:	4b70      	ldr	r3, [pc, #448]	; (80053c4 <HAL_RCC_OscConfig+0x470>)
 8005204:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005206:	4a6f      	ldr	r2, [pc, #444]	; (80053c4 <HAL_RCC_OscConfig+0x470>)
 8005208:	f043 0301 	orr.w	r3, r3, #1
 800520c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800520e:	f7fd fc4d 	bl	8002aac <HAL_GetTick>
 8005212:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005214:	e008      	b.n	8005228 <HAL_RCC_OscConfig+0x2d4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005216:	f7fd fc49 	bl	8002aac <HAL_GetTick>
 800521a:	4602      	mov	r2, r0
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	2b02      	cmp	r3, #2
 8005222:	d901      	bls.n	8005228 <HAL_RCC_OscConfig+0x2d4>
        {
          return HAL_TIMEOUT;
 8005224:	2303      	movs	r3, #3
 8005226:	e1e6      	b.n	80055f6 <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005228:	4b66      	ldr	r3, [pc, #408]	; (80053c4 <HAL_RCC_OscConfig+0x470>)
 800522a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800522c:	f003 0302 	and.w	r3, r3, #2
 8005230:	2b00      	cmp	r3, #0
 8005232:	d0f0      	beq.n	8005216 <HAL_RCC_OscConfig+0x2c2>
 8005234:	e018      	b.n	8005268 <HAL_RCC_OscConfig+0x314>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005236:	4b63      	ldr	r3, [pc, #396]	; (80053c4 <HAL_RCC_OscConfig+0x470>)
 8005238:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800523a:	4a62      	ldr	r2, [pc, #392]	; (80053c4 <HAL_RCC_OscConfig+0x470>)
 800523c:	f023 0301 	bic.w	r3, r3, #1
 8005240:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005242:	f7fd fc33 	bl	8002aac <HAL_GetTick>
 8005246:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005248:	e008      	b.n	800525c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800524a:	f7fd fc2f 	bl	8002aac <HAL_GetTick>
 800524e:	4602      	mov	r2, r0
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	2b02      	cmp	r3, #2
 8005256:	d901      	bls.n	800525c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	e1cc      	b.n	80055f6 <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800525c:	4b59      	ldr	r3, [pc, #356]	; (80053c4 <HAL_RCC_OscConfig+0x470>)
 800525e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005260:	f003 0302 	and.w	r3, r3, #2
 8005264:	2b00      	cmp	r3, #0
 8005266:	d1f0      	bne.n	800524a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 0304 	and.w	r3, r3, #4
 8005270:	2b00      	cmp	r3, #0
 8005272:	f000 80bc 	beq.w	80053ee <HAL_RCC_OscConfig+0x49a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00c      	beq.n	8005298 <HAL_RCC_OscConfig+0x344>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	2b01      	cmp	r3, #1
 8005284:	d008      	beq.n	8005298 <HAL_RCC_OscConfig+0x344>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	2b05      	cmp	r3, #5
 800528c:	d004      	beq.n	8005298 <HAL_RCC_OscConfig+0x344>
 800528e:	f240 2106 	movw	r1, #518	; 0x206
 8005292:	484d      	ldr	r0, [pc, #308]	; (80053c8 <HAL_RCC_OscConfig+0x474>)
 8005294:	f7fc fcbd 	bl	8001c12 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005298:	4b4a      	ldr	r3, [pc, #296]	; (80053c4 <HAL_RCC_OscConfig+0x470>)
 800529a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d10d      	bne.n	80052c0 <HAL_RCC_OscConfig+0x36c>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80052a4:	4b47      	ldr	r3, [pc, #284]	; (80053c4 <HAL_RCC_OscConfig+0x470>)
 80052a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a8:	4a46      	ldr	r2, [pc, #280]	; (80053c4 <HAL_RCC_OscConfig+0x470>)
 80052aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052ae:	6413      	str	r3, [r2, #64]	; 0x40
 80052b0:	4b44      	ldr	r3, [pc, #272]	; (80053c4 <HAL_RCC_OscConfig+0x470>)
 80052b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052b8:	60bb      	str	r3, [r7, #8]
 80052ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052bc:	2301      	movs	r3, #1
 80052be:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052c0:	4b42      	ldr	r3, [pc, #264]	; (80053cc <HAL_RCC_OscConfig+0x478>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d118      	bne.n	80052fe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80052cc:	4b3f      	ldr	r3, [pc, #252]	; (80053cc <HAL_RCC_OscConfig+0x478>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a3e      	ldr	r2, [pc, #248]	; (80053cc <HAL_RCC_OscConfig+0x478>)
 80052d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052d8:	f7fd fbe8 	bl	8002aac <HAL_GetTick>
 80052dc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052de:	e008      	b.n	80052f2 <HAL_RCC_OscConfig+0x39e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052e0:	f7fd fbe4 	bl	8002aac <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	2b64      	cmp	r3, #100	; 0x64
 80052ec:	d901      	bls.n	80052f2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e181      	b.n	80055f6 <HAL_RCC_OscConfig+0x6a2>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052f2:	4b36      	ldr	r3, [pc, #216]	; (80053cc <HAL_RCC_OscConfig+0x478>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d0f0      	beq.n	80052e0 <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	2b01      	cmp	r3, #1
 8005304:	d106      	bne.n	8005314 <HAL_RCC_OscConfig+0x3c0>
 8005306:	4b2f      	ldr	r3, [pc, #188]	; (80053c4 <HAL_RCC_OscConfig+0x470>)
 8005308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800530a:	4a2e      	ldr	r2, [pc, #184]	; (80053c4 <HAL_RCC_OscConfig+0x470>)
 800530c:	f043 0301 	orr.w	r3, r3, #1
 8005310:	6713      	str	r3, [r2, #112]	; 0x70
 8005312:	e02d      	b.n	8005370 <HAL_RCC_OscConfig+0x41c>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d10c      	bne.n	8005336 <HAL_RCC_OscConfig+0x3e2>
 800531c:	4b29      	ldr	r3, [pc, #164]	; (80053c4 <HAL_RCC_OscConfig+0x470>)
 800531e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005320:	4a28      	ldr	r2, [pc, #160]	; (80053c4 <HAL_RCC_OscConfig+0x470>)
 8005322:	f023 0301 	bic.w	r3, r3, #1
 8005326:	6713      	str	r3, [r2, #112]	; 0x70
 8005328:	4b26      	ldr	r3, [pc, #152]	; (80053c4 <HAL_RCC_OscConfig+0x470>)
 800532a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800532c:	4a25      	ldr	r2, [pc, #148]	; (80053c4 <HAL_RCC_OscConfig+0x470>)
 800532e:	f023 0304 	bic.w	r3, r3, #4
 8005332:	6713      	str	r3, [r2, #112]	; 0x70
 8005334:	e01c      	b.n	8005370 <HAL_RCC_OscConfig+0x41c>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	2b05      	cmp	r3, #5
 800533c:	d10c      	bne.n	8005358 <HAL_RCC_OscConfig+0x404>
 800533e:	4b21      	ldr	r3, [pc, #132]	; (80053c4 <HAL_RCC_OscConfig+0x470>)
 8005340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005342:	4a20      	ldr	r2, [pc, #128]	; (80053c4 <HAL_RCC_OscConfig+0x470>)
 8005344:	f043 0304 	orr.w	r3, r3, #4
 8005348:	6713      	str	r3, [r2, #112]	; 0x70
 800534a:	4b1e      	ldr	r3, [pc, #120]	; (80053c4 <HAL_RCC_OscConfig+0x470>)
 800534c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800534e:	4a1d      	ldr	r2, [pc, #116]	; (80053c4 <HAL_RCC_OscConfig+0x470>)
 8005350:	f043 0301 	orr.w	r3, r3, #1
 8005354:	6713      	str	r3, [r2, #112]	; 0x70
 8005356:	e00b      	b.n	8005370 <HAL_RCC_OscConfig+0x41c>
 8005358:	4b1a      	ldr	r3, [pc, #104]	; (80053c4 <HAL_RCC_OscConfig+0x470>)
 800535a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800535c:	4a19      	ldr	r2, [pc, #100]	; (80053c4 <HAL_RCC_OscConfig+0x470>)
 800535e:	f023 0301 	bic.w	r3, r3, #1
 8005362:	6713      	str	r3, [r2, #112]	; 0x70
 8005364:	4b17      	ldr	r3, [pc, #92]	; (80053c4 <HAL_RCC_OscConfig+0x470>)
 8005366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005368:	4a16      	ldr	r2, [pc, #88]	; (80053c4 <HAL_RCC_OscConfig+0x470>)
 800536a:	f023 0304 	bic.w	r3, r3, #4
 800536e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d015      	beq.n	80053a4 <HAL_RCC_OscConfig+0x450>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005378:	f7fd fb98 	bl	8002aac <HAL_GetTick>
 800537c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800537e:	e00a      	b.n	8005396 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005380:	f7fd fb94 	bl	8002aac <HAL_GetTick>
 8005384:	4602      	mov	r2, r0
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	f241 3288 	movw	r2, #5000	; 0x1388
 800538e:	4293      	cmp	r3, r2
 8005390:	d901      	bls.n	8005396 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e12f      	b.n	80055f6 <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005396:	4b0b      	ldr	r3, [pc, #44]	; (80053c4 <HAL_RCC_OscConfig+0x470>)
 8005398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800539a:	f003 0302 	and.w	r3, r3, #2
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d0ee      	beq.n	8005380 <HAL_RCC_OscConfig+0x42c>
 80053a2:	e01b      	b.n	80053dc <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053a4:	f7fd fb82 	bl	8002aac <HAL_GetTick>
 80053a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053aa:	e011      	b.n	80053d0 <HAL_RCC_OscConfig+0x47c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053ac:	f7fd fb7e 	bl	8002aac <HAL_GetTick>
 80053b0:	4602      	mov	r2, r0
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d908      	bls.n	80053d0 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e119      	b.n	80055f6 <HAL_RCC_OscConfig+0x6a2>
 80053c2:	bf00      	nop
 80053c4:	40023800 	.word	0x40023800
 80053c8:	08014a7c 	.word	0x08014a7c
 80053cc:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053d0:	4b8b      	ldr	r3, [pc, #556]	; (8005600 <HAL_RCC_OscConfig+0x6ac>)
 80053d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053d4:	f003 0302 	and.w	r3, r3, #2
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d1e7      	bne.n	80053ac <HAL_RCC_OscConfig+0x458>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80053dc:	7dfb      	ldrb	r3, [r7, #23]
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d105      	bne.n	80053ee <HAL_RCC_OscConfig+0x49a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053e2:	4b87      	ldr	r3, [pc, #540]	; (8005600 <HAL_RCC_OscConfig+0x6ac>)
 80053e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e6:	4a86      	ldr	r2, [pc, #536]	; (8005600 <HAL_RCC_OscConfig+0x6ac>)
 80053e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053ec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	699b      	ldr	r3, [r3, #24]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00c      	beq.n	8005410 <HAL_RCC_OscConfig+0x4bc>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	699b      	ldr	r3, [r3, #24]
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d008      	beq.n	8005410 <HAL_RCC_OscConfig+0x4bc>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	2b02      	cmp	r3, #2
 8005404:	d004      	beq.n	8005410 <HAL_RCC_OscConfig+0x4bc>
 8005406:	f240 214a 	movw	r1, #586	; 0x24a
 800540a:	487e      	ldr	r0, [pc, #504]	; (8005604 <HAL_RCC_OscConfig+0x6b0>)
 800540c:	f7fc fc01 	bl	8001c12 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	699b      	ldr	r3, [r3, #24]
 8005414:	2b00      	cmp	r3, #0
 8005416:	f000 80ed 	beq.w	80055f4 <HAL_RCC_OscConfig+0x6a0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800541a:	4b79      	ldr	r3, [pc, #484]	; (8005600 <HAL_RCC_OscConfig+0x6ac>)
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	f003 030c 	and.w	r3, r3, #12
 8005422:	2b08      	cmp	r3, #8
 8005424:	f000 80b4 	beq.w	8005590 <HAL_RCC_OscConfig+0x63c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	699b      	ldr	r3, [r3, #24]
 800542c:	2b02      	cmp	r3, #2
 800542e:	f040 8095 	bne.w	800555c <HAL_RCC_OscConfig+0x608>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	69db      	ldr	r3, [r3, #28]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d009      	beq.n	800544e <HAL_RCC_OscConfig+0x4fa>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	69db      	ldr	r3, [r3, #28]
 800543e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005442:	d004      	beq.n	800544e <HAL_RCC_OscConfig+0x4fa>
 8005444:	f240 2153 	movw	r1, #595	; 0x253
 8005448:	486e      	ldr	r0, [pc, #440]	; (8005604 <HAL_RCC_OscConfig+0x6b0>)
 800544a:	f7fc fbe2 	bl	8001c12 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a1b      	ldr	r3, [r3, #32]
 8005452:	2b01      	cmp	r3, #1
 8005454:	d903      	bls.n	800545e <HAL_RCC_OscConfig+0x50a>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a1b      	ldr	r3, [r3, #32]
 800545a:	2b3f      	cmp	r3, #63	; 0x3f
 800545c:	d904      	bls.n	8005468 <HAL_RCC_OscConfig+0x514>
 800545e:	f44f 7115 	mov.w	r1, #596	; 0x254
 8005462:	4868      	ldr	r0, [pc, #416]	; (8005604 <HAL_RCC_OscConfig+0x6b0>)
 8005464:	f7fc fbd5 	bl	8001c12 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546c:	2b31      	cmp	r3, #49	; 0x31
 800546e:	d904      	bls.n	800547a <HAL_RCC_OscConfig+0x526>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005474:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8005478:	d904      	bls.n	8005484 <HAL_RCC_OscConfig+0x530>
 800547a:	f240 2155 	movw	r1, #597	; 0x255
 800547e:	4861      	ldr	r0, [pc, #388]	; (8005604 <HAL_RCC_OscConfig+0x6b0>)
 8005480:	f7fc fbc7 	bl	8001c12 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005488:	2b02      	cmp	r3, #2
 800548a:	d010      	beq.n	80054ae <HAL_RCC_OscConfig+0x55a>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005490:	2b04      	cmp	r3, #4
 8005492:	d00c      	beq.n	80054ae <HAL_RCC_OscConfig+0x55a>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005498:	2b06      	cmp	r3, #6
 800549a:	d008      	beq.n	80054ae <HAL_RCC_OscConfig+0x55a>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a0:	2b08      	cmp	r3, #8
 80054a2:	d004      	beq.n	80054ae <HAL_RCC_OscConfig+0x55a>
 80054a4:	f240 2156 	movw	r1, #598	; 0x256
 80054a8:	4856      	ldr	r0, [pc, #344]	; (8005604 <HAL_RCC_OscConfig+0x6b0>)
 80054aa:	f7fc fbb2 	bl	8001c12 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d903      	bls.n	80054be <HAL_RCC_OscConfig+0x56a>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ba:	2b0f      	cmp	r3, #15
 80054bc:	d904      	bls.n	80054c8 <HAL_RCC_OscConfig+0x574>
 80054be:	f240 2157 	movw	r1, #599	; 0x257
 80054c2:	4850      	ldr	r0, [pc, #320]	; (8005604 <HAL_RCC_OscConfig+0x6b0>)
 80054c4:	f7fc fba5 	bl	8001c12 <assert_failed>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054c8:	4b4d      	ldr	r3, [pc, #308]	; (8005600 <HAL_RCC_OscConfig+0x6ac>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a4c      	ldr	r2, [pc, #304]	; (8005600 <HAL_RCC_OscConfig+0x6ac>)
 80054ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054d4:	f7fd faea 	bl	8002aac <HAL_GetTick>
 80054d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054da:	e008      	b.n	80054ee <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054dc:	f7fd fae6 	bl	8002aac <HAL_GetTick>
 80054e0:	4602      	mov	r2, r0
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	d901      	bls.n	80054ee <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80054ea:	2303      	movs	r3, #3
 80054ec:	e083      	b.n	80055f6 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054ee:	4b44      	ldr	r3, [pc, #272]	; (8005600 <HAL_RCC_OscConfig+0x6ac>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d1f0      	bne.n	80054dc <HAL_RCC_OscConfig+0x588>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	69da      	ldr	r2, [r3, #28]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a1b      	ldr	r3, [r3, #32]
 8005502:	431a      	orrs	r2, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005508:	019b      	lsls	r3, r3, #6
 800550a:	431a      	orrs	r2, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005510:	085b      	lsrs	r3, r3, #1
 8005512:	3b01      	subs	r3, #1
 8005514:	041b      	lsls	r3, r3, #16
 8005516:	431a      	orrs	r2, r3
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800551c:	061b      	lsls	r3, r3, #24
 800551e:	4313      	orrs	r3, r2
 8005520:	4a37      	ldr	r2, [pc, #220]	; (8005600 <HAL_RCC_OscConfig+0x6ac>)
 8005522:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005526:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005528:	4b35      	ldr	r3, [pc, #212]	; (8005600 <HAL_RCC_OscConfig+0x6ac>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a34      	ldr	r2, [pc, #208]	; (8005600 <HAL_RCC_OscConfig+0x6ac>)
 800552e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005532:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005534:	f7fd faba 	bl	8002aac <HAL_GetTick>
 8005538:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800553a:	e008      	b.n	800554e <HAL_RCC_OscConfig+0x5fa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800553c:	f7fd fab6 	bl	8002aac <HAL_GetTick>
 8005540:	4602      	mov	r2, r0
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	1ad3      	subs	r3, r2, r3
 8005546:	2b02      	cmp	r3, #2
 8005548:	d901      	bls.n	800554e <HAL_RCC_OscConfig+0x5fa>
          {
            return HAL_TIMEOUT;
 800554a:	2303      	movs	r3, #3
 800554c:	e053      	b.n	80055f6 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800554e:	4b2c      	ldr	r3, [pc, #176]	; (8005600 <HAL_RCC_OscConfig+0x6ac>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005556:	2b00      	cmp	r3, #0
 8005558:	d0f0      	beq.n	800553c <HAL_RCC_OscConfig+0x5e8>
 800555a:	e04b      	b.n	80055f4 <HAL_RCC_OscConfig+0x6a0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800555c:	4b28      	ldr	r3, [pc, #160]	; (8005600 <HAL_RCC_OscConfig+0x6ac>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a27      	ldr	r2, [pc, #156]	; (8005600 <HAL_RCC_OscConfig+0x6ac>)
 8005562:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005566:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005568:	f7fd faa0 	bl	8002aac <HAL_GetTick>
 800556c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800556e:	e008      	b.n	8005582 <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005570:	f7fd fa9c 	bl	8002aac <HAL_GetTick>
 8005574:	4602      	mov	r2, r0
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	2b02      	cmp	r3, #2
 800557c:	d901      	bls.n	8005582 <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e039      	b.n	80055f6 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005582:	4b1f      	ldr	r3, [pc, #124]	; (8005600 <HAL_RCC_OscConfig+0x6ac>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800558a:	2b00      	cmp	r3, #0
 800558c:	d1f0      	bne.n	8005570 <HAL_RCC_OscConfig+0x61c>
 800558e:	e031      	b.n	80055f4 <HAL_RCC_OscConfig+0x6a0>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005590:	4b1b      	ldr	r3, [pc, #108]	; (8005600 <HAL_RCC_OscConfig+0x6ac>)
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	699b      	ldr	r3, [r3, #24]
 800559a:	2b01      	cmp	r3, #1
 800559c:	d028      	beq.n	80055f0 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d121      	bne.n	80055f0 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d11a      	bne.n	80055f0 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80055ba:	68fa      	ldr	r2, [r7, #12]
 80055bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80055c0:	4013      	ands	r3, r2
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80055c6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d111      	bne.n	80055f0 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d6:	085b      	lsrs	r3, r3, #1
 80055d8:	3b01      	subs	r3, #1
 80055da:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80055dc:	429a      	cmp	r2, r3
 80055de:	d107      	bne.n	80055f0 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ea:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d001      	beq.n	80055f4 <HAL_RCC_OscConfig+0x6a0>
#endif
      {
        return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e000      	b.n	80055f6 <HAL_RCC_OscConfig+0x6a2>
      }
    }
  }
  return HAL_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3718      	adds	r7, #24
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
 80055fe:	bf00      	nop
 8005600:	40023800 	.word	0x40023800
 8005604:	08014a7c 	.word	0x08014a7c

08005608 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005612:	2300      	movs	r3, #0
 8005614:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d101      	bne.n	8005620 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	e18c      	b.n	800593a <HAL_RCC_ClockConfig+0x332>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d003      	beq.n	8005630 <HAL_RCC_ClockConfig+0x28>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2b0f      	cmp	r3, #15
 800562e:	d904      	bls.n	800563a <HAL_RCC_ClockConfig+0x32>
 8005630:	f240 21dd 	movw	r1, #733	; 0x2dd
 8005634:	4887      	ldr	r0, [pc, #540]	; (8005854 <HAL_RCC_ClockConfig+0x24c>)
 8005636:	f7fc faec 	bl	8001c12 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d031      	beq.n	80056a4 <HAL_RCC_ClockConfig+0x9c>
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	2b01      	cmp	r3, #1
 8005644:	d02e      	beq.n	80056a4 <HAL_RCC_ClockConfig+0x9c>
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	2b02      	cmp	r3, #2
 800564a:	d02b      	beq.n	80056a4 <HAL_RCC_ClockConfig+0x9c>
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	2b03      	cmp	r3, #3
 8005650:	d028      	beq.n	80056a4 <HAL_RCC_ClockConfig+0x9c>
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	2b04      	cmp	r3, #4
 8005656:	d025      	beq.n	80056a4 <HAL_RCC_ClockConfig+0x9c>
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	2b05      	cmp	r3, #5
 800565c:	d022      	beq.n	80056a4 <HAL_RCC_ClockConfig+0x9c>
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	2b06      	cmp	r3, #6
 8005662:	d01f      	beq.n	80056a4 <HAL_RCC_ClockConfig+0x9c>
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	2b07      	cmp	r3, #7
 8005668:	d01c      	beq.n	80056a4 <HAL_RCC_ClockConfig+0x9c>
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	2b08      	cmp	r3, #8
 800566e:	d019      	beq.n	80056a4 <HAL_RCC_ClockConfig+0x9c>
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	2b09      	cmp	r3, #9
 8005674:	d016      	beq.n	80056a4 <HAL_RCC_ClockConfig+0x9c>
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	2b0a      	cmp	r3, #10
 800567a:	d013      	beq.n	80056a4 <HAL_RCC_ClockConfig+0x9c>
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	2b0b      	cmp	r3, #11
 8005680:	d010      	beq.n	80056a4 <HAL_RCC_ClockConfig+0x9c>
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	2b0c      	cmp	r3, #12
 8005686:	d00d      	beq.n	80056a4 <HAL_RCC_ClockConfig+0x9c>
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	2b0d      	cmp	r3, #13
 800568c:	d00a      	beq.n	80056a4 <HAL_RCC_ClockConfig+0x9c>
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	2b0e      	cmp	r3, #14
 8005692:	d007      	beq.n	80056a4 <HAL_RCC_ClockConfig+0x9c>
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	2b0f      	cmp	r3, #15
 8005698:	d004      	beq.n	80056a4 <HAL_RCC_ClockConfig+0x9c>
 800569a:	f240 21de 	movw	r1, #734	; 0x2de
 800569e:	486d      	ldr	r0, [pc, #436]	; (8005854 <HAL_RCC_ClockConfig+0x24c>)
 80056a0:	f7fc fab7 	bl	8001c12 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80056a4:	4b6c      	ldr	r3, [pc, #432]	; (8005858 <HAL_RCC_ClockConfig+0x250>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 030f 	and.w	r3, r3, #15
 80056ac:	683a      	ldr	r2, [r7, #0]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d910      	bls.n	80056d4 <HAL_RCC_ClockConfig+0xcc>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056b2:	4b69      	ldr	r3, [pc, #420]	; (8005858 <HAL_RCC_ClockConfig+0x250>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f023 020f 	bic.w	r2, r3, #15
 80056ba:	4967      	ldr	r1, [pc, #412]	; (8005858 <HAL_RCC_ClockConfig+0x250>)
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	4313      	orrs	r3, r2
 80056c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056c2:	4b65      	ldr	r3, [pc, #404]	; (8005858 <HAL_RCC_ClockConfig+0x250>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 030f 	and.w	r3, r3, #15
 80056ca:	683a      	ldr	r2, [r7, #0]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d001      	beq.n	80056d4 <HAL_RCC_ClockConfig+0xcc>
    {
      return HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	e132      	b.n	800593a <HAL_RCC_ClockConfig+0x332>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0302 	and.w	r3, r3, #2
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d049      	beq.n	8005774 <HAL_RCC_ClockConfig+0x16c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 0304 	and.w	r3, r3, #4
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d005      	beq.n	80056f8 <HAL_RCC_ClockConfig+0xf0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80056ec:	4b5b      	ldr	r3, [pc, #364]	; (800585c <HAL_RCC_ClockConfig+0x254>)
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	4a5a      	ldr	r2, [pc, #360]	; (800585c <HAL_RCC_ClockConfig+0x254>)
 80056f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80056f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 0308 	and.w	r3, r3, #8
 8005700:	2b00      	cmp	r3, #0
 8005702:	d005      	beq.n	8005710 <HAL_RCC_ClockConfig+0x108>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005704:	4b55      	ldr	r3, [pc, #340]	; (800585c <HAL_RCC_ClockConfig+0x254>)
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	4a54      	ldr	r2, [pc, #336]	; (800585c <HAL_RCC_ClockConfig+0x254>)
 800570a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800570e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d024      	beq.n	8005762 <HAL_RCC_ClockConfig+0x15a>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	2b80      	cmp	r3, #128	; 0x80
 800571e:	d020      	beq.n	8005762 <HAL_RCC_ClockConfig+0x15a>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	2b90      	cmp	r3, #144	; 0x90
 8005726:	d01c      	beq.n	8005762 <HAL_RCC_ClockConfig+0x15a>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	2ba0      	cmp	r3, #160	; 0xa0
 800572e:	d018      	beq.n	8005762 <HAL_RCC_ClockConfig+0x15a>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	2bb0      	cmp	r3, #176	; 0xb0
 8005736:	d014      	beq.n	8005762 <HAL_RCC_ClockConfig+0x15a>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	2bc0      	cmp	r3, #192	; 0xc0
 800573e:	d010      	beq.n	8005762 <HAL_RCC_ClockConfig+0x15a>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	2bd0      	cmp	r3, #208	; 0xd0
 8005746:	d00c      	beq.n	8005762 <HAL_RCC_ClockConfig+0x15a>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	2be0      	cmp	r3, #224	; 0xe0
 800574e:	d008      	beq.n	8005762 <HAL_RCC_ClockConfig+0x15a>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	2bf0      	cmp	r3, #240	; 0xf0
 8005756:	d004      	beq.n	8005762 <HAL_RCC_ClockConfig+0x15a>
 8005758:	f240 3102 	movw	r1, #770	; 0x302
 800575c:	483d      	ldr	r0, [pc, #244]	; (8005854 <HAL_RCC_ClockConfig+0x24c>)
 800575e:	f7fc fa58 	bl	8001c12 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005762:	4b3e      	ldr	r3, [pc, #248]	; (800585c <HAL_RCC_ClockConfig+0x254>)
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	493b      	ldr	r1, [pc, #236]	; (800585c <HAL_RCC_ClockConfig+0x254>)
 8005770:	4313      	orrs	r3, r2
 8005772:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 0301 	and.w	r3, r3, #1
 800577c:	2b00      	cmp	r3, #0
 800577e:	d051      	beq.n	8005824 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d00c      	beq.n	80057a2 <HAL_RCC_ClockConfig+0x19a>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	2b01      	cmp	r3, #1
 800578e:	d008      	beq.n	80057a2 <HAL_RCC_ClockConfig+0x19a>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	2b02      	cmp	r3, #2
 8005796:	d004      	beq.n	80057a2 <HAL_RCC_ClockConfig+0x19a>
 8005798:	f240 3109 	movw	r1, #777	; 0x309
 800579c:	482d      	ldr	r0, [pc, #180]	; (8005854 <HAL_RCC_ClockConfig+0x24c>)
 800579e:	f7fc fa38 	bl	8001c12 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d107      	bne.n	80057ba <HAL_RCC_ClockConfig+0x1b2>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057aa:	4b2c      	ldr	r3, [pc, #176]	; (800585c <HAL_RCC_ClockConfig+0x254>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d115      	bne.n	80057e2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e0bf      	b.n	800593a <HAL_RCC_ClockConfig+0x332>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	2b02      	cmp	r3, #2
 80057c0:	d107      	bne.n	80057d2 <HAL_RCC_ClockConfig+0x1ca>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057c2:	4b26      	ldr	r3, [pc, #152]	; (800585c <HAL_RCC_ClockConfig+0x254>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d109      	bne.n	80057e2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e0b3      	b.n	800593a <HAL_RCC_ClockConfig+0x332>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057d2:	4b22      	ldr	r3, [pc, #136]	; (800585c <HAL_RCC_ClockConfig+0x254>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 0302 	and.w	r3, r3, #2
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d101      	bne.n	80057e2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e0ab      	b.n	800593a <HAL_RCC_ClockConfig+0x332>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057e2:	4b1e      	ldr	r3, [pc, #120]	; (800585c <HAL_RCC_ClockConfig+0x254>)
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	f023 0203 	bic.w	r2, r3, #3
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	491b      	ldr	r1, [pc, #108]	; (800585c <HAL_RCC_ClockConfig+0x254>)
 80057f0:	4313      	orrs	r3, r2
 80057f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057f4:	f7fd f95a 	bl	8002aac <HAL_GetTick>
 80057f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057fa:	e00a      	b.n	8005812 <HAL_RCC_ClockConfig+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057fc:	f7fd f956 	bl	8002aac <HAL_GetTick>
 8005800:	4602      	mov	r2, r0
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	f241 3288 	movw	r2, #5000	; 0x1388
 800580a:	4293      	cmp	r3, r2
 800580c:	d901      	bls.n	8005812 <HAL_RCC_ClockConfig+0x20a>
      {
        return HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	e093      	b.n	800593a <HAL_RCC_ClockConfig+0x332>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005812:	4b12      	ldr	r3, [pc, #72]	; (800585c <HAL_RCC_ClockConfig+0x254>)
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	f003 020c 	and.w	r2, r3, #12
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	429a      	cmp	r2, r3
 8005822:	d1eb      	bne.n	80057fc <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005824:	4b0c      	ldr	r3, [pc, #48]	; (8005858 <HAL_RCC_ClockConfig+0x250>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 030f 	and.w	r3, r3, #15
 800582c:	683a      	ldr	r2, [r7, #0]
 800582e:	429a      	cmp	r2, r3
 8005830:	d216      	bcs.n	8005860 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005832:	4b09      	ldr	r3, [pc, #36]	; (8005858 <HAL_RCC_ClockConfig+0x250>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f023 020f 	bic.w	r2, r3, #15
 800583a:	4907      	ldr	r1, [pc, #28]	; (8005858 <HAL_RCC_ClockConfig+0x250>)
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	4313      	orrs	r3, r2
 8005840:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005842:	4b05      	ldr	r3, [pc, #20]	; (8005858 <HAL_RCC_ClockConfig+0x250>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 030f 	and.w	r3, r3, #15
 800584a:	683a      	ldr	r2, [r7, #0]
 800584c:	429a      	cmp	r2, r3
 800584e:	d007      	beq.n	8005860 <HAL_RCC_ClockConfig+0x258>
    {
      return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e072      	b.n	800593a <HAL_RCC_ClockConfig+0x332>
 8005854:	08014a7c 	.word	0x08014a7c
 8005858:	40023c00 	.word	0x40023c00
 800585c:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 0304 	and.w	r3, r3, #4
 8005868:	2b00      	cmp	r3, #0
 800586a:	d025      	beq.n	80058b8 <HAL_RCC_ClockConfig+0x2b0>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d018      	beq.n	80058a6 <HAL_RCC_ClockConfig+0x29e>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800587c:	d013      	beq.n	80058a6 <HAL_RCC_ClockConfig+0x29e>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005886:	d00e      	beq.n	80058a6 <HAL_RCC_ClockConfig+0x29e>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8005890:	d009      	beq.n	80058a6 <HAL_RCC_ClockConfig+0x29e>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800589a:	d004      	beq.n	80058a6 <HAL_RCC_ClockConfig+0x29e>
 800589c:	f240 3146 	movw	r1, #838	; 0x346
 80058a0:	4828      	ldr	r0, [pc, #160]	; (8005944 <HAL_RCC_ClockConfig+0x33c>)
 80058a2:	f7fc f9b6 	bl	8001c12 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058a6:	4b28      	ldr	r3, [pc, #160]	; (8005948 <HAL_RCC_ClockConfig+0x340>)
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	4925      	ldr	r1, [pc, #148]	; (8005948 <HAL_RCC_ClockConfig+0x340>)
 80058b4:	4313      	orrs	r3, r2
 80058b6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0308 	and.w	r3, r3, #8
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d026      	beq.n	8005912 <HAL_RCC_ClockConfig+0x30a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	691b      	ldr	r3, [r3, #16]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d018      	beq.n	80058fe <HAL_RCC_ClockConfig+0x2f6>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	691b      	ldr	r3, [r3, #16]
 80058d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058d4:	d013      	beq.n	80058fe <HAL_RCC_ClockConfig+0x2f6>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80058de:	d00e      	beq.n	80058fe <HAL_RCC_ClockConfig+0x2f6>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80058e8:	d009      	beq.n	80058fe <HAL_RCC_ClockConfig+0x2f6>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80058f2:	d004      	beq.n	80058fe <HAL_RCC_ClockConfig+0x2f6>
 80058f4:	f240 314d 	movw	r1, #845	; 0x34d
 80058f8:	4812      	ldr	r0, [pc, #72]	; (8005944 <HAL_RCC_ClockConfig+0x33c>)
 80058fa:	f7fc f98a 	bl	8001c12 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80058fe:	4b12      	ldr	r3, [pc, #72]	; (8005948 <HAL_RCC_ClockConfig+0x340>)
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	00db      	lsls	r3, r3, #3
 800590c:	490e      	ldr	r1, [pc, #56]	; (8005948 <HAL_RCC_ClockConfig+0x340>)
 800590e:	4313      	orrs	r3, r2
 8005910:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005912:	f000 f821 	bl	8005958 <HAL_RCC_GetSysClockFreq>
 8005916:	4602      	mov	r2, r0
 8005918:	4b0b      	ldr	r3, [pc, #44]	; (8005948 <HAL_RCC_ClockConfig+0x340>)
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	091b      	lsrs	r3, r3, #4
 800591e:	f003 030f 	and.w	r3, r3, #15
 8005922:	490a      	ldr	r1, [pc, #40]	; (800594c <HAL_RCC_ClockConfig+0x344>)
 8005924:	5ccb      	ldrb	r3, [r1, r3]
 8005926:	fa22 f303 	lsr.w	r3, r2, r3
 800592a:	4a09      	ldr	r2, [pc, #36]	; (8005950 <HAL_RCC_ClockConfig+0x348>)
 800592c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800592e:	4b09      	ldr	r3, [pc, #36]	; (8005954 <HAL_RCC_ClockConfig+0x34c>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4618      	mov	r0, r3
 8005934:	f7fd f876 	bl	8002a24 <HAL_InitTick>

  return HAL_OK;
 8005938:	2300      	movs	r3, #0
}
 800593a:	4618      	mov	r0, r3
 800593c:	3710      	adds	r7, #16
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop
 8005944:	08014a7c 	.word	0x08014a7c
 8005948:	40023800 	.word	0x40023800
 800594c:	08014bac 	.word	0x08014bac
 8005950:	20000008 	.word	0x20000008
 8005954:	20000028 	.word	0x20000028

08005958 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005958:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800595c:	b090      	sub	sp, #64	; 0x40
 800595e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005960:	2300      	movs	r3, #0
 8005962:	637b      	str	r3, [r7, #52]	; 0x34
 8005964:	2300      	movs	r3, #0
 8005966:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005968:	2300      	movs	r3, #0
 800596a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 800596c:	2300      	movs	r3, #0
 800596e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005970:	4b59      	ldr	r3, [pc, #356]	; (8005ad8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	f003 030c 	and.w	r3, r3, #12
 8005978:	2b08      	cmp	r3, #8
 800597a:	d00d      	beq.n	8005998 <HAL_RCC_GetSysClockFreq+0x40>
 800597c:	2b08      	cmp	r3, #8
 800597e:	f200 80a1 	bhi.w	8005ac4 <HAL_RCC_GetSysClockFreq+0x16c>
 8005982:	2b00      	cmp	r3, #0
 8005984:	d002      	beq.n	800598c <HAL_RCC_GetSysClockFreq+0x34>
 8005986:	2b04      	cmp	r3, #4
 8005988:	d003      	beq.n	8005992 <HAL_RCC_GetSysClockFreq+0x3a>
 800598a:	e09b      	b.n	8005ac4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800598c:	4b53      	ldr	r3, [pc, #332]	; (8005adc <HAL_RCC_GetSysClockFreq+0x184>)
 800598e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005990:	e09b      	b.n	8005aca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005992:	4b53      	ldr	r3, [pc, #332]	; (8005ae0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005994:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005996:	e098      	b.n	8005aca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005998:	4b4f      	ldr	r3, [pc, #316]	; (8005ad8 <HAL_RCC_GetSysClockFreq+0x180>)
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059a0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80059a2:	4b4d      	ldr	r3, [pc, #308]	; (8005ad8 <HAL_RCC_GetSysClockFreq+0x180>)
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d028      	beq.n	8005a00 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059ae:	4b4a      	ldr	r3, [pc, #296]	; (8005ad8 <HAL_RCC_GetSysClockFreq+0x180>)
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	099b      	lsrs	r3, r3, #6
 80059b4:	2200      	movs	r2, #0
 80059b6:	623b      	str	r3, [r7, #32]
 80059b8:	627a      	str	r2, [r7, #36]	; 0x24
 80059ba:	6a3b      	ldr	r3, [r7, #32]
 80059bc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80059c0:	2100      	movs	r1, #0
 80059c2:	4b47      	ldr	r3, [pc, #284]	; (8005ae0 <HAL_RCC_GetSysClockFreq+0x188>)
 80059c4:	fb03 f201 	mul.w	r2, r3, r1
 80059c8:	2300      	movs	r3, #0
 80059ca:	fb00 f303 	mul.w	r3, r0, r3
 80059ce:	4413      	add	r3, r2
 80059d0:	4a43      	ldr	r2, [pc, #268]	; (8005ae0 <HAL_RCC_GetSysClockFreq+0x188>)
 80059d2:	fba0 1202 	umull	r1, r2, r0, r2
 80059d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059d8:	460a      	mov	r2, r1
 80059da:	62ba      	str	r2, [r7, #40]	; 0x28
 80059dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059de:	4413      	add	r3, r2
 80059e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059e4:	2200      	movs	r2, #0
 80059e6:	61bb      	str	r3, [r7, #24]
 80059e8:	61fa      	str	r2, [r7, #28]
 80059ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80059f2:	f7fb f979 	bl	8000ce8 <__aeabi_uldivmod>
 80059f6:	4602      	mov	r2, r0
 80059f8:	460b      	mov	r3, r1
 80059fa:	4613      	mov	r3, r2
 80059fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059fe:	e053      	b.n	8005aa8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a00:	4b35      	ldr	r3, [pc, #212]	; (8005ad8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	099b      	lsrs	r3, r3, #6
 8005a06:	2200      	movs	r2, #0
 8005a08:	613b      	str	r3, [r7, #16]
 8005a0a:	617a      	str	r2, [r7, #20]
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005a12:	f04f 0b00 	mov.w	fp, #0
 8005a16:	4652      	mov	r2, sl
 8005a18:	465b      	mov	r3, fp
 8005a1a:	f04f 0000 	mov.w	r0, #0
 8005a1e:	f04f 0100 	mov.w	r1, #0
 8005a22:	0159      	lsls	r1, r3, #5
 8005a24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a28:	0150      	lsls	r0, r2, #5
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	460b      	mov	r3, r1
 8005a2e:	ebb2 080a 	subs.w	r8, r2, sl
 8005a32:	eb63 090b 	sbc.w	r9, r3, fp
 8005a36:	f04f 0200 	mov.w	r2, #0
 8005a3a:	f04f 0300 	mov.w	r3, #0
 8005a3e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005a42:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005a46:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005a4a:	ebb2 0408 	subs.w	r4, r2, r8
 8005a4e:	eb63 0509 	sbc.w	r5, r3, r9
 8005a52:	f04f 0200 	mov.w	r2, #0
 8005a56:	f04f 0300 	mov.w	r3, #0
 8005a5a:	00eb      	lsls	r3, r5, #3
 8005a5c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a60:	00e2      	lsls	r2, r4, #3
 8005a62:	4614      	mov	r4, r2
 8005a64:	461d      	mov	r5, r3
 8005a66:	eb14 030a 	adds.w	r3, r4, sl
 8005a6a:	603b      	str	r3, [r7, #0]
 8005a6c:	eb45 030b 	adc.w	r3, r5, fp
 8005a70:	607b      	str	r3, [r7, #4]
 8005a72:	f04f 0200 	mov.w	r2, #0
 8005a76:	f04f 0300 	mov.w	r3, #0
 8005a7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005a7e:	4629      	mov	r1, r5
 8005a80:	028b      	lsls	r3, r1, #10
 8005a82:	4621      	mov	r1, r4
 8005a84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a88:	4621      	mov	r1, r4
 8005a8a:	028a      	lsls	r2, r1, #10
 8005a8c:	4610      	mov	r0, r2
 8005a8e:	4619      	mov	r1, r3
 8005a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a92:	2200      	movs	r2, #0
 8005a94:	60bb      	str	r3, [r7, #8]
 8005a96:	60fa      	str	r2, [r7, #12]
 8005a98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a9c:	f7fb f924 	bl	8000ce8 <__aeabi_uldivmod>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	460b      	mov	r3, r1
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005aa8:	4b0b      	ldr	r3, [pc, #44]	; (8005ad8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	0c1b      	lsrs	r3, r3, #16
 8005aae:	f003 0303 	and.w	r3, r3, #3
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	005b      	lsls	r3, r3, #1
 8005ab6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8005ab8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ac0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005ac2:	e002      	b.n	8005aca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ac4:	4b05      	ldr	r3, [pc, #20]	; (8005adc <HAL_RCC_GetSysClockFreq+0x184>)
 8005ac6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005ac8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3740      	adds	r7, #64	; 0x40
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ad6:	bf00      	nop
 8005ad8:	40023800 	.word	0x40023800
 8005adc:	00f42400 	.word	0x00f42400
 8005ae0:	017d7840 	.word	0x017d7840

08005ae4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ae8:	4b03      	ldr	r3, [pc, #12]	; (8005af8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005aea:	681b      	ldr	r3, [r3, #0]
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr
 8005af6:	bf00      	nop
 8005af8:	20000008 	.word	0x20000008

08005afc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005b00:	f7ff fff0 	bl	8005ae4 <HAL_RCC_GetHCLKFreq>
 8005b04:	4602      	mov	r2, r0
 8005b06:	4b05      	ldr	r3, [pc, #20]	; (8005b1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	0a9b      	lsrs	r3, r3, #10
 8005b0c:	f003 0307 	and.w	r3, r3, #7
 8005b10:	4903      	ldr	r1, [pc, #12]	; (8005b20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b12:	5ccb      	ldrb	r3, [r1, r3]
 8005b14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	40023800 	.word	0x40023800
 8005b20:	08014bbc 	.word	0x08014bbc

08005b24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005b28:	f7ff ffdc 	bl	8005ae4 <HAL_RCC_GetHCLKFreq>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	4b05      	ldr	r3, [pc, #20]	; (8005b44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	0b5b      	lsrs	r3, r3, #13
 8005b34:	f003 0307 	and.w	r3, r3, #7
 8005b38:	4903      	ldr	r1, [pc, #12]	; (8005b48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b3a:	5ccb      	ldrb	r3, [r1, r3]
 8005b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	40023800 	.word	0x40023800
 8005b48:	08014bbc 	.word	0x08014bbc

08005b4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b088      	sub	sp, #32
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005b54:	2300      	movs	r3, #0
 8005b56:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005b60:	2300      	movs	r3, #0
 8005b62:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005b64:	2300      	movs	r3, #0
 8005b66:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 0301 	and.w	r3, r3, #1
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	f040 8089 	bne.w	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 0308 	and.w	r3, r3, #8
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	f040 8082 	bne.w	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 0310 	and.w	r3, r3, #16
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d17b      	bne.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d175      	bne.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d16f      	bne.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d169      	bne.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d163      	bne.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d15d      	bne.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d157      	bne.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d151      	bne.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d14b      	bne.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d145      	bne.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d13f      	bne.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d139      	bne.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d133      	bne.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d12d      	bne.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d127      	bne.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d121      	bne.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d11b      	bne.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d115      	bne.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d10f      	bne.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d109      	bne.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 0320 	and.w	r3, r3, #32
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d103      	bne.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005c80:	2172      	movs	r1, #114	; 0x72
 8005c82:	4895      	ldr	r0, [pc, #596]	; (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8005c84:	f7fb ffc5 	bl	8001c12 <assert_failed>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 0301 	and.w	r3, r3, #1
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d01f      	beq.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d008      	beq.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x162>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ca0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005ca4:	d003      	beq.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x162>
 8005ca6:	2178      	movs	r1, #120	; 0x78
 8005ca8:	488b      	ldr	r0, [pc, #556]	; (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8005caa:	f7fb ffb2 	bl	8001c12 <assert_failed>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005cae:	4b8b      	ldr	r3, [pc, #556]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	4a8a      	ldr	r2, [pc, #552]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8005cb4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005cb8:	6093      	str	r3, [r2, #8]
 8005cba:	4b88      	ldr	r3, [pc, #544]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8005cbc:	689a      	ldr	r2, [r3, #8]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cc2:	4986      	ldr	r1, [pc, #536]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d101      	bne.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x188>
    {
      plli2sused = 1;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d029      	beq.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d00d      	beq.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cf0:	d008      	beq.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cf6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005cfa:	d003      	beq.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8005cfc:	2188      	movs	r1, #136	; 0x88
 8005cfe:	4876      	ldr	r0, [pc, #472]	; (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8005d00:	f7fb ff87 	bl	8001c12 <assert_failed>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d04:	4b75      	ldr	r3, [pc, #468]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8005d06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d0a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d12:	4972      	ldr	r1, [pc, #456]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8005d14:	4313      	orrs	r3, r2
 8005d16:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d22:	d101      	bne.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      plli2sused = 1;
 8005d24:	2301      	movs	r3, #1
 8005d26:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d101      	bne.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    {
      pllsaiused = 1;
 8005d30:	2301      	movs	r3, #1
 8005d32:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d029      	beq.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d00d      	beq.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d50:	d008      	beq.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d56:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005d5a:	d003      	beq.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8005d5c:	219c      	movs	r1, #156	; 0x9c
 8005d5e:	485e      	ldr	r0, [pc, #376]	; (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8005d60:	f7fb ff57 	bl	8001c12 <assert_failed>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005d64:	4b5d      	ldr	r3, [pc, #372]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8005d66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d6a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d72:	495a      	ldr	r1, [pc, #360]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8005d74:	4313      	orrs	r3, r2
 8005d76:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d82:	d101      	bne.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      plli2sused = 1;
 8005d84:	2301      	movs	r3, #1
 8005d86:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d101      	bne.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      pllsaiused = 1;
 8005d90:	2301      	movs	r3, #1
 8005d92:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d001      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
      plli2sused = 1;
 8005da0:	2301      	movs	r3, #1
 8005da2:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 0320 	and.w	r3, r3, #32
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	f000 8186 	beq.w	80060be <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dba:	f000 80e4 	beq.w	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dc6:	f000 80de 	beq.w	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dce:	4a44      	ldr	r2, [pc, #272]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	f000 80d8 	beq.w	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dda:	4a42      	ldr	r2, [pc, #264]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	f000 80d2 	beq.w	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de6:	4a40      	ldr	r2, [pc, #256]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	f000 80cc 	beq.w	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df2:	4a3e      	ldr	r2, [pc, #248]	; (8005eec <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	f000 80c6 	beq.w	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dfe:	4a3c      	ldr	r2, [pc, #240]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	f000 80c0 	beq.w	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e0a:	4a3a      	ldr	r2, [pc, #232]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	f000 80ba 	beq.w	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e16:	4a38      	ldr	r2, [pc, #224]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	f000 80b4 	beq.w	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e22:	4a36      	ldr	r2, [pc, #216]	; (8005efc <HAL_RCCEx_PeriphCLKConfig+0x3b0>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	f000 80ae 	beq.w	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e2e:	4a34      	ldr	r2, [pc, #208]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	f000 80a8 	beq.w	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e3a:	4a32      	ldr	r2, [pc, #200]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x3b8>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	f000 80a2 	beq.w	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e46:	4a30      	ldr	r2, [pc, #192]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	f000 809c 	beq.w	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e52:	4a2e      	ldr	r2, [pc, #184]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x3c0>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	f000 8096 	beq.w	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e5e:	4a2c      	ldr	r2, [pc, #176]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	f000 8090 	beq.w	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e6a:	4a2a      	ldr	r2, [pc, #168]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	f000 808a 	beq.w	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e76:	4a28      	ldr	r2, [pc, #160]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	f000 8084 	beq.w	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e82:	4a26      	ldr	r2, [pc, #152]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d07e      	beq.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e8c:	4a24      	ldr	r2, [pc, #144]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d079      	beq.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e96:	4a23      	ldr	r2, [pc, #140]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d074      	beq.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea0:	4a21      	ldr	r2, [pc, #132]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d06f      	beq.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eaa:	4a20      	ldr	r2, [pc, #128]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d06a      	beq.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb4:	4a1e      	ldr	r2, [pc, #120]	; (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d065      	beq.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ebe:	4a1d      	ldr	r2, [pc, #116]	; (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d060      	beq.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec8:	4a1b      	ldr	r2, [pc, #108]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d05b      	beq.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed2:	4a1a      	ldr	r2, [pc, #104]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	e033      	b.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8005ed8:	08014ab4 	.word	0x08014ab4
 8005edc:	40023800 	.word	0x40023800
 8005ee0:	00020300 	.word	0x00020300
 8005ee4:	00030300 	.word	0x00030300
 8005ee8:	00040300 	.word	0x00040300
 8005eec:	00050300 	.word	0x00050300
 8005ef0:	00060300 	.word	0x00060300
 8005ef4:	00070300 	.word	0x00070300
 8005ef8:	00080300 	.word	0x00080300
 8005efc:	00090300 	.word	0x00090300
 8005f00:	000a0300 	.word	0x000a0300
 8005f04:	000b0300 	.word	0x000b0300
 8005f08:	000c0300 	.word	0x000c0300
 8005f0c:	000d0300 	.word	0x000d0300
 8005f10:	000e0300 	.word	0x000e0300
 8005f14:	000f0300 	.word	0x000f0300
 8005f18:	00100300 	.word	0x00100300
 8005f1c:	00110300 	.word	0x00110300
 8005f20:	00120300 	.word	0x00120300
 8005f24:	00130300 	.word	0x00130300
 8005f28:	00140300 	.word	0x00140300
 8005f2c:	00150300 	.word	0x00150300
 8005f30:	00160300 	.word	0x00160300
 8005f34:	00170300 	.word	0x00170300
 8005f38:	00180300 	.word	0x00180300
 8005f3c:	00190300 	.word	0x00190300
 8005f40:	d021      	beq.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f46:	4a4c      	ldr	r2, [pc, #304]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d01c      	beq.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f50:	4a4a      	ldr	r2, [pc, #296]	; (800607c <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d017      	beq.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f5a:	4a49      	ldr	r2, [pc, #292]	; (8006080 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d012      	beq.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f64:	4a47      	ldr	r2, [pc, #284]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d00d      	beq.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f6e:	4a46      	ldr	r2, [pc, #280]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d008      	beq.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f78:	4a44      	ldr	r2, [pc, #272]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d003      	beq.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005f7e:	21b7      	movs	r1, #183	; 0xb7
 8005f80:	4843      	ldr	r0, [pc, #268]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8005f82:	f7fb fe46 	bl	8001c12 <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005f86:	4b43      	ldr	r3, [pc, #268]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f8a:	4a42      	ldr	r2, [pc, #264]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f90:	6413      	str	r3, [r2, #64]	; 0x40
 8005f92:	4b40      	ldr	r3, [pc, #256]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f9a:	60bb      	str	r3, [r7, #8]
 8005f9c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005f9e:	4b3e      	ldr	r3, [pc, #248]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a3d      	ldr	r2, [pc, #244]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8005fa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fa8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005faa:	f7fc fd7f 	bl	8002aac <HAL_GetTick>
 8005fae:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005fb0:	e009      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x47a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fb2:	f7fc fd7b 	bl	8002aac <HAL_GetTick>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	1ad3      	subs	r3, r2, r3
 8005fbc:	2b64      	cmp	r3, #100	; 0x64
 8005fbe:	d902      	bls.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x47a>
      {
        return HAL_TIMEOUT;
 8005fc0:	2303      	movs	r3, #3
 8005fc2:	f000 bd9f 	b.w	8006b04 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005fc6:	4b34      	ldr	r3, [pc, #208]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d0ef      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x466>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005fd2:	4b30      	ldr	r3, [pc, #192]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fda:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d036      	beq.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fea:	693a      	ldr	r2, [r7, #16]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d02f      	beq.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ff0:	4b28      	ldr	r3, [pc, #160]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ff4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ff8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005ffa:	4b26      	ldr	r3, [pc, #152]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ffe:	4a25      	ldr	r2, [pc, #148]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006004:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006006:	4b23      	ldr	r3, [pc, #140]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800600a:	4a22      	ldr	r2, [pc, #136]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800600c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006010:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006012:	4a20      	ldr	r2, [pc, #128]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006018:	4b1e      	ldr	r3, [pc, #120]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800601a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800601c:	f003 0301 	and.w	r3, r3, #1
 8006020:	2b01      	cmp	r3, #1
 8006022:	d115      	bne.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x504>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006024:	f7fc fd42 	bl	8002aac <HAL_GetTick>
 8006028:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800602a:	e00b      	b.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800602c:	f7fc fd3e 	bl	8002aac <HAL_GetTick>
 8006030:	4602      	mov	r2, r0
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	f241 3288 	movw	r2, #5000	; 0x1388
 800603a:	4293      	cmp	r3, r2
 800603c:	d902      	bls.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800603e:	2303      	movs	r3, #3
 8006040:	f000 bd60 	b.w	8006b04 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006044:	4b13      	ldr	r3, [pc, #76]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006048:	f003 0302 	and.w	r3, r3, #2
 800604c:	2b00      	cmp	r3, #0
 800604e:	d0ed      	beq.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006054:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006058:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800605c:	d120      	bne.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x554>
 800605e:	4b0d      	ldr	r3, [pc, #52]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800606a:	4b0c      	ldr	r3, [pc, #48]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800606c:	400b      	ands	r3, r1
 800606e:	4909      	ldr	r1, [pc, #36]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006070:	4313      	orrs	r3, r2
 8006072:	608b      	str	r3, [r1, #8]
 8006074:	e01a      	b.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x560>
 8006076:	bf00      	nop
 8006078:	001a0300 	.word	0x001a0300
 800607c:	001b0300 	.word	0x001b0300
 8006080:	001c0300 	.word	0x001c0300
 8006084:	001d0300 	.word	0x001d0300
 8006088:	001e0300 	.word	0x001e0300
 800608c:	001f0300 	.word	0x001f0300
 8006090:	08014ab4 	.word	0x08014ab4
 8006094:	40023800 	.word	0x40023800
 8006098:	40007000 	.word	0x40007000
 800609c:	0ffffcff 	.word	0x0ffffcff
 80060a0:	4b9a      	ldr	r3, [pc, #616]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	4a99      	ldr	r2, [pc, #612]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80060a6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80060aa:	6093      	str	r3, [r2, #8]
 80060ac:	4b97      	ldr	r3, [pc, #604]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80060ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060b8:	4994      	ldr	r1, [pc, #592]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80060ba:	4313      	orrs	r3, r2
 80060bc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f003 0310 	and.w	r3, r3, #16
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d01d      	beq.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d008      	beq.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x598>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80060da:	d003      	beq.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x598>
 80060dc:	21f1      	movs	r1, #241	; 0xf1
 80060de:	488c      	ldr	r0, [pc, #560]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 80060e0:	f7fb fd97 	bl	8001c12 <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80060e4:	4b89      	ldr	r3, [pc, #548]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80060e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060ea:	4a88      	ldr	r2, [pc, #544]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80060ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80060f0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80060f4:	4b85      	ldr	r3, [pc, #532]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80060f6:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060fe:	4983      	ldr	r1, [pc, #524]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006100:	4313      	orrs	r3, r2
 8006102:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800610e:	2b00      	cmp	r3, #0
 8006110:	d01c      	beq.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x600>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006116:	2b00      	cmp	r3, #0
 8006118:	d00d      	beq.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800611e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006122:	d008      	beq.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006128:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800612c:	d003      	beq.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 800612e:	21fb      	movs	r1, #251	; 0xfb
 8006130:	4877      	ldr	r0, [pc, #476]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8006132:	f7fb fd6e 	bl	8001c12 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006136:	4b75      	ldr	r3, [pc, #468]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800613c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006144:	4971      	ldr	r1, [pc, #452]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006146:	4313      	orrs	r3, r2
 8006148:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006154:	2b00      	cmp	r3, #0
 8006156:	d01d      	beq.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x648>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800615c:	2b00      	cmp	r3, #0
 800615e:	d00e      	beq.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x632>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006164:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006168:	d009      	beq.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x632>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800616e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006172:	d004      	beq.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x632>
 8006174:	f240 1105 	movw	r1, #261	; 0x105
 8006178:	4865      	ldr	r0, [pc, #404]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 800617a:	f7fb fd4a 	bl	8001c12 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800617e:	4b63      	ldr	r3, [pc, #396]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006184:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800618c:	495f      	ldr	r1, [pc, #380]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800618e:	4313      	orrs	r3, r2
 8006190:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800619c:	2b00      	cmp	r3, #0
 800619e:	d01d      	beq.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x690>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d00e      	beq.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x67a>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061b0:	d009      	beq.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x67a>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061ba:	d004      	beq.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x67a>
 80061bc:	f240 110f 	movw	r1, #271	; 0x10f
 80061c0:	4853      	ldr	r0, [pc, #332]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 80061c2:	f7fb fd26 	bl	8001c12 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80061c6:	4b51      	ldr	r3, [pc, #324]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80061c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061d4:	494d      	ldr	r1, [pc, #308]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80061d6:	4313      	orrs	r3, r2
 80061d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d01d      	beq.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d00e      	beq.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061f8:	d009      	beq.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006202:	d004      	beq.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8006204:	f240 1119 	movw	r1, #281	; 0x119
 8006208:	4841      	ldr	r0, [pc, #260]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 800620a:	f7fb fd02 	bl	8001c12 <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800620e:	4b3f      	ldr	r3, [pc, #252]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006214:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800621c:	493b      	ldr	r1, [pc, #236]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800621e:	4313      	orrs	r3, r2
 8006220:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800622c:	2b00      	cmp	r3, #0
 800622e:	d01f      	beq.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x724>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006234:	2b00      	cmp	r3, #0
 8006236:	d010      	beq.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800623c:	2b01      	cmp	r3, #1
 800623e:	d00c      	beq.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006244:	2b03      	cmp	r3, #3
 8006246:	d008      	beq.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800624c:	2b02      	cmp	r3, #2
 800624e:	d004      	beq.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8006250:	f240 1123 	movw	r1, #291	; 0x123
 8006254:	482e      	ldr	r0, [pc, #184]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8006256:	f7fb fcdc 	bl	8001c12 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800625a:	4b2c      	ldr	r3, [pc, #176]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800625c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006260:	f023 0203 	bic.w	r2, r3, #3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006268:	4928      	ldr	r1, [pc, #160]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800626a:	4313      	orrs	r3, r2
 800626c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006278:	2b00      	cmp	r3, #0
 800627a:	d01f      	beq.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x770>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006280:	2b00      	cmp	r3, #0
 8006282:	d010      	beq.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006288:	2b04      	cmp	r3, #4
 800628a:	d00c      	beq.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006290:	2b0c      	cmp	r3, #12
 8006292:	d008      	beq.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006298:	2b08      	cmp	r3, #8
 800629a:	d004      	beq.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 800629c:	f240 112d 	movw	r1, #301	; 0x12d
 80062a0:	481b      	ldr	r0, [pc, #108]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 80062a2:	f7fb fcb6 	bl	8001c12 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80062a6:	4b19      	ldr	r3, [pc, #100]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80062a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ac:	f023 020c 	bic.w	r2, r3, #12
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062b4:	4915      	ldr	r1, [pc, #84]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80062b6:	4313      	orrs	r3, r2
 80062b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d025      	beq.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d010      	beq.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062d4:	2b10      	cmp	r3, #16
 80062d6:	d00c      	beq.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062dc:	2b30      	cmp	r3, #48	; 0x30
 80062de:	d008      	beq.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062e4:	2b20      	cmp	r3, #32
 80062e6:	d004      	beq.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 80062e8:	f240 1137 	movw	r1, #311	; 0x137
 80062ec:	4808      	ldr	r0, [pc, #32]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 80062ee:	f7fb fc90 	bl	8001c12 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80062f2:	4b06      	ldr	r3, [pc, #24]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80062f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062f8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006300:	4902      	ldr	r1, [pc, #8]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006302:	4313      	orrs	r3, r2
 8006304:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006308:	e004      	b.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
 800630a:	bf00      	nop
 800630c:	40023800 	.word	0x40023800
 8006310:	08014ab4 	.word	0x08014ab4
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800631c:	2b00      	cmp	r3, #0
 800631e:	d01f      	beq.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x814>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006324:	2b00      	cmp	r3, #0
 8006326:	d010      	beq.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800632c:	2b40      	cmp	r3, #64	; 0x40
 800632e:	d00c      	beq.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006334:	2bc0      	cmp	r3, #192	; 0xc0
 8006336:	d008      	beq.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800633c:	2b80      	cmp	r3, #128	; 0x80
 800633e:	d004      	beq.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8006340:	f240 1141 	movw	r1, #321	; 0x141
 8006344:	48a0      	ldr	r0, [pc, #640]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8006346:	f7fb fc64 	bl	8001c12 <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800634a:	4ba0      	ldr	r3, [pc, #640]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800634c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006350:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006358:	499c      	ldr	r1, [pc, #624]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800635a:	4313      	orrs	r3, r2
 800635c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006368:	2b00      	cmp	r3, #0
 800636a:	d022      	beq.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x866>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006370:	2b00      	cmp	r3, #0
 8006372:	d013      	beq.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x850>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006378:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800637c:	d00e      	beq.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x850>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006382:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006386:	d009      	beq.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x850>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800638c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006390:	d004      	beq.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x850>
 8006392:	f240 114b 	movw	r1, #331	; 0x14b
 8006396:	488c      	ldr	r0, [pc, #560]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8006398:	f7fb fc3b 	bl	8001c12 <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800639c:	4b8b      	ldr	r3, [pc, #556]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800639e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063aa:	4988      	ldr	r1, [pc, #544]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80063ac:	4313      	orrs	r3, r2
 80063ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d022      	beq.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d013      	beq.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063ce:	d00e      	beq.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80063d8:	d009      	beq.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063e2:	d004      	beq.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 80063e4:	f240 1155 	movw	r1, #341	; 0x155
 80063e8:	4877      	ldr	r0, [pc, #476]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 80063ea:	f7fb fc12 	bl	8001c12 <assert_failed>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80063ee:	4b77      	ldr	r3, [pc, #476]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80063f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063f4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063fc:	4973      	ldr	r1, [pc, #460]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80063fe:	4313      	orrs	r3, r2
 8006400:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800640c:	2b00      	cmp	r3, #0
 800640e:	d022      	beq.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x90a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006414:	2b00      	cmp	r3, #0
 8006416:	d013      	beq.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800641c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006420:	d00e      	beq.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006426:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800642a:	d009      	beq.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006430:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006434:	d004      	beq.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8006436:	f240 115f 	movw	r1, #351	; 0x15f
 800643a:	4863      	ldr	r0, [pc, #396]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 800643c:	f7fb fbe9 	bl	8001c12 <assert_failed>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006440:	4b62      	ldr	r3, [pc, #392]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006446:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800644e:	495f      	ldr	r1, [pc, #380]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006450:	4313      	orrs	r3, r2
 8006452:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800645e:	2b00      	cmp	r3, #0
 8006460:	d022      	beq.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006466:	2b00      	cmp	r3, #0
 8006468:	d013      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x946>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800646e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006472:	d00e      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x946>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006478:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800647c:	d009      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x946>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006482:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006486:	d004      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x946>
 8006488:	f240 1169 	movw	r1, #361	; 0x169
 800648c:	484e      	ldr	r0, [pc, #312]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 800648e:	f7fb fbc0 	bl	8001c12 <assert_failed>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006492:	4b4e      	ldr	r3, [pc, #312]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006498:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064a0:	494a      	ldr	r1, [pc, #296]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80064a2:	4313      	orrs	r3, r2
 80064a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d018      	beq.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x99a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80064bc:	d008      	beq.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d004      	beq.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80064c6:	f240 1173 	movw	r1, #371	; 0x173
 80064ca:	483f      	ldr	r0, [pc, #252]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 80064cc:	f7fb fba1 	bl	8001c12 <assert_failed>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80064d0:	4b3e      	ldr	r3, [pc, #248]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80064d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064d6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064de:	493b      	ldr	r1, [pc, #236]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80064e0:	4313      	orrs	r3, r2
 80064e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d01f      	beq.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064fa:	d008      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006500:	2b00      	cmp	r3, #0
 8006502:	d004      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8006504:	f240 117d 	movw	r1, #381	; 0x17d
 8006508:	482f      	ldr	r0, [pc, #188]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 800650a:	f7fb fb82 	bl	8001c12 <assert_failed>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800650e:	4b2f      	ldr	r3, [pc, #188]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006514:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800651c:	492b      	ldr	r1, [pc, #172]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800651e:	4313      	orrs	r3, r2
 8006520:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006528:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800652c:	d101      	bne.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    {
      pllsaiused = 1;
 800652e:	2301      	movs	r3, #1
 8006530:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f003 0308 	and.w	r3, r3, #8
 800653a:	2b00      	cmp	r3, #0
 800653c:	d001      	beq.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x9f6>
  {
    pllsaiused = 1;
 800653e:	2301      	movs	r3, #1
 8006540:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800654a:	2b00      	cmp	r3, #0
 800654c:	d022      	beq.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0xa48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006552:	2b00      	cmp	r3, #0
 8006554:	d013      	beq.n	800657e <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800655a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800655e:	d00e      	beq.n	800657e <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006564:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006568:	d009      	beq.n	800657e <HAL_RCCEx_PeriphCLKConfig+0xa32>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800656e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006572:	d004      	beq.n	800657e <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8006574:	f240 1195 	movw	r1, #405	; 0x195
 8006578:	4813      	ldr	r0, [pc, #76]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 800657a:	f7fb fb4a 	bl	8001c12 <assert_failed>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800657e:	4b13      	ldr	r3, [pc, #76]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006584:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800658c:	490f      	ldr	r1, [pc, #60]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800658e:	4313      	orrs	r3, r2
 8006590:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800659c:	2b00      	cmp	r3, #0
 800659e:	d020      	beq.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0xa96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065aa:	d009      	beq.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d004      	beq.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80065b6:	f240 119f 	movw	r1, #415	; 0x19f
 80065ba:	4803      	ldr	r0, [pc, #12]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 80065bc:	f7fb fb29 	bl	8001c12 <assert_failed>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80065c0:	4b02      	ldr	r3, [pc, #8]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80065c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065c6:	e003      	b.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
 80065c8:	08014ab4 	.word	0x08014ab4
 80065cc:	40023800 	.word	0x40023800
 80065d0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065da:	4910      	ldr	r1, [pc, #64]	; (800661c <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 80065dc:	4313      	orrs	r3, r2
 80065de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d006      	beq.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	f000 8155 	beq.w	80068a0 <HAL_RCCEx_PeriphCLKConfig+0xd54>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80065f6:	4b09      	ldr	r3, [pc, #36]	; (800661c <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a08      	ldr	r2, [pc, #32]	; (800661c <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 80065fc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006600:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006602:	f7fc fa53 	bl	8002aac <HAL_GetTick>
 8006606:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006608:	e00a      	b.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0xad4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800660a:	f7fc fa4f 	bl	8002aac <HAL_GetTick>
 800660e:	4602      	mov	r2, r0
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	1ad3      	subs	r3, r2, r3
 8006614:	2b64      	cmp	r3, #100	; 0x64
 8006616:	d903      	bls.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0xad4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006618:	2303      	movs	r3, #3
 800661a:	e273      	b.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 800661c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006620:	4b9a      	ldr	r3, [pc, #616]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006628:	2b00      	cmp	r3, #0
 800662a:	d1ee      	bne.n	800660a <HAL_RCCEx_PeriphCLKConfig+0xabe>
      }
    }

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	2b31      	cmp	r3, #49	; 0x31
 8006632:	d904      	bls.n	800663e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 800663c:	d904      	bls.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0xafc>
 800663e:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8006642:	4893      	ldr	r0, [pc, #588]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8006644:	f7fb fae5 	bl	8001c12 <assert_failed>

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f003 0301 	and.w	r3, r3, #1
 8006650:	2b00      	cmp	r3, #0
 8006652:	d02e      	beq.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0xb66>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006658:	2b00      	cmp	r3, #0
 800665a:	d12a      	bne.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0xb66>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	2b01      	cmp	r3, #1
 8006662:	d903      	bls.n	800666c <HAL_RCCEx_PeriphCLKConfig+0xb20>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	2b07      	cmp	r3, #7
 800666a:	d904      	bls.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800666c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8006670:	4887      	ldr	r0, [pc, #540]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8006672:	f7fb face 	bl	8001c12 <assert_failed>

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006676:	4b85      	ldr	r3, [pc, #532]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8006678:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800667c:	0c1b      	lsrs	r3, r3, #16
 800667e:	f003 0303 	and.w	r3, r3, #3
 8006682:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006684:	4b81      	ldr	r3, [pc, #516]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8006686:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800668a:	0e1b      	lsrs	r3, r3, #24
 800668c:	f003 030f 	and.w	r3, r3, #15
 8006690:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	019a      	lsls	r2, r3, #6
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	041b      	lsls	r3, r3, #16
 800669c:	431a      	orrs	r2, r3
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	061b      	lsls	r3, r3, #24
 80066a2:	431a      	orrs	r2, r3
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	071b      	lsls	r3, r3, #28
 80066aa:	4978      	ldr	r1, [pc, #480]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80066ac:	4313      	orrs	r3, r2
 80066ae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d004      	beq.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066c6:	d00a      	beq.n	80066de <HAL_RCCEx_PeriphCLKConfig+0xb92>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d048      	beq.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066dc:	d143      	bne.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {
      /* Check for PLLI2S Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d903      	bls.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0xba2>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	2b0f      	cmp	r3, #15
 80066ec:	d904      	bls.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80066ee:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 80066f2:	4867      	ldr	r0, [pc, #412]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80066f4:	f7fb fa8d 	bl	8001c12 <assert_failed>
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d003      	beq.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0xbbc>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006704:	2b20      	cmp	r3, #32
 8006706:	d904      	bls.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0xbc6>
 8006708:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 800670c:	4860      	ldr	r0, [pc, #384]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 800670e:	f7fb fa80 	bl	8001c12 <assert_failed>

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006712:	4b5e      	ldr	r3, [pc, #376]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8006714:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006718:	0c1b      	lsrs	r3, r3, #16
 800671a:	f003 0303 	and.w	r3, r3, #3
 800671e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006720:	4b5a      	ldr	r3, [pc, #360]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8006722:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006726:	0f1b      	lsrs	r3, r3, #28
 8006728:	f003 0307 	and.w	r3, r3, #7
 800672c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	019a      	lsls	r2, r3, #6
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	041b      	lsls	r3, r3, #16
 8006738:	431a      	orrs	r2, r3
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	061b      	lsls	r3, r3, #24
 8006740:	431a      	orrs	r2, r3
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	071b      	lsls	r3, r3, #28
 8006746:	4951      	ldr	r1, [pc, #324]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8006748:	4313      	orrs	r3, r2
 800674a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800674e:	4b4f      	ldr	r3, [pc, #316]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8006750:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006754:	f023 021f 	bic.w	r2, r3, #31
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675c:	3b01      	subs	r3, #1
 800675e:	494b      	ldr	r1, [pc, #300]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8006760:	4313      	orrs	r3, r2
 8006762:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800676e:	2b00      	cmp	r3, #0
 8006770:	d032      	beq.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	691b      	ldr	r3, [r3, #16]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d010      	beq.n	800679c <HAL_RCCEx_PeriphCLKConfig+0xc50>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	691b      	ldr	r3, [r3, #16]
 800677e:	2b01      	cmp	r3, #1
 8006780:	d00c      	beq.n	800679c <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	691b      	ldr	r3, [r3, #16]
 8006786:	2b02      	cmp	r3, #2
 8006788:	d008      	beq.n	800679c <HAL_RCCEx_PeriphCLKConfig+0xc50>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	691b      	ldr	r3, [r3, #16]
 800678e:	2b03      	cmp	r3, #3
 8006790:	d004      	beq.n	800679c <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8006792:	f240 2105 	movw	r1, #517	; 0x205
 8006796:	483e      	ldr	r0, [pc, #248]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8006798:	f7fb fa3b 	bl	8001c12 <assert_failed>

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800679c:	4b3b      	ldr	r3, [pc, #236]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800679e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067a2:	0e1b      	lsrs	r3, r3, #24
 80067a4:	f003 030f 	and.w	r3, r3, #15
 80067a8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80067aa:	4b38      	ldr	r3, [pc, #224]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80067ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067b0:	0f1b      	lsrs	r3, r3, #28
 80067b2:	f003 0307 	and.w	r3, r3, #7
 80067b6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	019a      	lsls	r2, r3, #6
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	691b      	ldr	r3, [r3, #16]
 80067c2:	041b      	lsls	r3, r3, #16
 80067c4:	431a      	orrs	r2, r3
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	061b      	lsls	r3, r3, #24
 80067ca:	431a      	orrs	r2, r3
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	071b      	lsls	r3, r3, #28
 80067d0:	492e      	ldr	r1, [pc, #184]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80067d2:	4313      	orrs	r3, r2
 80067d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d040      	beq.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	691b      	ldr	r3, [r3, #16]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d010      	beq.n	800680e <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	691b      	ldr	r3, [r3, #16]
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d00c      	beq.n	800680e <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	691b      	ldr	r3, [r3, #16]
 80067f8:	2b02      	cmp	r3, #2
 80067fa:	d008      	beq.n	800680e <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	691b      	ldr	r3, [r3, #16]
 8006800:	2b03      	cmp	r3, #3
 8006802:	d004      	beq.n	800680e <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8006804:	f44f 7105 	mov.w	r1, #532	; 0x214
 8006808:	4821      	ldr	r0, [pc, #132]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 800680a:	f7fb fa02 	bl	8001c12 <assert_failed>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	2b01      	cmp	r3, #1
 8006814:	d903      	bls.n	800681e <HAL_RCCEx_PeriphCLKConfig+0xcd2>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	2b07      	cmp	r3, #7
 800681c:	d904      	bls.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 800681e:	f240 2115 	movw	r1, #533	; 0x215
 8006822:	481b      	ldr	r0, [pc, #108]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8006824:	f7fb f9f5 	bl	8001c12 <assert_failed>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	2b01      	cmp	r3, #1
 800682e:	d903      	bls.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0xcec>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	2b0f      	cmp	r3, #15
 8006836:	d904      	bls.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
 8006838:	f240 2116 	movw	r1, #534	; 0x216
 800683c:	4814      	ldr	r0, [pc, #80]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 800683e:	f7fb f9e8 	bl	8001c12 <assert_failed>

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	019a      	lsls	r2, r3, #6
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	691b      	ldr	r3, [r3, #16]
 800684c:	041b      	lsls	r3, r3, #16
 800684e:	431a      	orrs	r2, r3
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	061b      	lsls	r3, r3, #24
 8006856:	431a      	orrs	r2, r3
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	071b      	lsls	r3, r3, #28
 800685e:	490b      	ldr	r1, [pc, #44]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8006860:	4313      	orrs	r3, r2
 8006862:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006866:	4b09      	ldr	r3, [pc, #36]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a08      	ldr	r2, [pc, #32]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800686c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006870:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006872:	f7fc f91b 	bl	8002aac <HAL_GetTick>
 8006876:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006878:	e00c      	b.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0xd48>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800687a:	f7fc f917 	bl	8002aac <HAL_GetTick>
 800687e:	4602      	mov	r2, r0
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	1ad3      	subs	r3, r2, r3
 8006884:	2b64      	cmp	r3, #100	; 0x64
 8006886:	d905      	bls.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0xd48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006888:	2303      	movs	r3, #3
 800688a:	e13b      	b.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 800688c:	40023800 	.word	0x40023800
 8006890:	08014ab4 	.word	0x08014ab4
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006894:	4b9d      	ldr	r3, [pc, #628]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800689c:	2b00      	cmp	r3, #0
 800689e:	d0ec      	beq.n	800687a <HAL_RCCEx_PeriphCLKConfig+0xd2e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80068a0:	69bb      	ldr	r3, [r7, #24]
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	f040 812d 	bne.w	8006b02 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80068a8:	4b98      	ldr	r3, [pc, #608]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a97      	ldr	r2, [pc, #604]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80068ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068b4:	f7fc f8fa 	bl	8002aac <HAL_GetTick>
 80068b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80068ba:	e008      	b.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0xd82>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80068bc:	f7fc f8f6 	bl	8002aac <HAL_GetTick>
 80068c0:	4602      	mov	r2, r0
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	1ad3      	subs	r3, r2, r3
 80068c6:	2b64      	cmp	r3, #100	; 0x64
 80068c8:	d901      	bls.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0xd82>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80068ca:	2303      	movs	r3, #3
 80068cc:	e11a      	b.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80068ce:	4b8f      	ldr	r3, [pc, #572]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068da:	d0ef      	beq.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0xd70>
      }
    }

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	695b      	ldr	r3, [r3, #20]
 80068e0:	2b31      	cmp	r3, #49	; 0x31
 80068e2:	d904      	bls.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0xda2>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	695b      	ldr	r3, [r3, #20]
 80068e8:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80068ec:	d904      	bls.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0xdac>
 80068ee:	f44f 7111 	mov.w	r1, #580	; 0x244
 80068f2:	4887      	ldr	r0, [pc, #540]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 80068f4:	f7fb f98d 	bl	8001c12 <assert_failed>

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006900:	2b00      	cmp	r3, #0
 8006902:	d003      	beq.n	800690c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006908:	2b00      	cmp	r3, #0
 800690a:	d009      	beq.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0xdd4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006914:	2b00      	cmp	r3, #0
 8006916:	d048      	beq.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0xe5e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800691c:	2b00      	cmp	r3, #0
 800691e:	d144      	bne.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0xe5e>
    {
      /* check for PLLSAIQ Parameter */
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	699b      	ldr	r3, [r3, #24]
 8006924:	2b01      	cmp	r3, #1
 8006926:	d903      	bls.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0xde4>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	699b      	ldr	r3, [r3, #24]
 800692c:	2b0f      	cmp	r3, #15
 800692e:	d904      	bls.n	800693a <HAL_RCCEx_PeriphCLKConfig+0xdee>
 8006930:	f240 214b 	movw	r1, #587	; 0x24b
 8006934:	4876      	ldr	r0, [pc, #472]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8006936:	f7fb f96c 	bl	8001c12 <assert_failed>
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800693e:	2b00      	cmp	r3, #0
 8006940:	d003      	beq.n	800694a <HAL_RCCEx_PeriphCLKConfig+0xdfe>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006946:	2b20      	cmp	r3, #32
 8006948:	d904      	bls.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0xe08>
 800694a:	f240 214d 	movw	r1, #589	; 0x24d
 800694e:	4870      	ldr	r0, [pc, #448]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8006950:	f7fb f95f 	bl	8001c12 <assert_failed>

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006954:	4b6d      	ldr	r3, [pc, #436]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8006956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800695a:	0c1b      	lsrs	r3, r3, #16
 800695c:	f003 0303 	and.w	r3, r3, #3
 8006960:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006962:	4b6a      	ldr	r3, [pc, #424]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8006964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006968:	0f1b      	lsrs	r3, r3, #28
 800696a:	f003 0307 	and.w	r3, r3, #7
 800696e:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	695b      	ldr	r3, [r3, #20]
 8006974:	019a      	lsls	r2, r3, #6
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	041b      	lsls	r3, r3, #16
 800697a:	431a      	orrs	r2, r3
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	699b      	ldr	r3, [r3, #24]
 8006980:	061b      	lsls	r3, r3, #24
 8006982:	431a      	orrs	r2, r3
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	071b      	lsls	r3, r3, #28
 8006988:	4960      	ldr	r1, [pc, #384]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800698a:	4313      	orrs	r3, r2
 800698c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006990:	4b5e      	ldr	r3, [pc, #376]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8006992:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006996:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800699e:	3b01      	subs	r3, #1
 80069a0:	021b      	lsls	r3, r3, #8
 80069a2:	495a      	ldr	r1, [pc, #360]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80069a4:	4313      	orrs	r3, r2
 80069a6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d037      	beq.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0xeda>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069be:	d132      	bne.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0xeda>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6a1b      	ldr	r3, [r3, #32]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d010      	beq.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6a1b      	ldr	r3, [r3, #32]
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d00c      	beq.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6a1b      	ldr	r3, [r3, #32]
 80069d4:	2b02      	cmp	r3, #2
 80069d6:	d008      	beq.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6a1b      	ldr	r3, [r3, #32]
 80069dc:	2b03      	cmp	r3, #3
 80069de:	d004      	beq.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 80069e0:	f44f 7118 	mov.w	r1, #608	; 0x260
 80069e4:	484a      	ldr	r0, [pc, #296]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 80069e6:	f7fb f914 	bl	8001c12 <assert_failed>
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80069ea:	4b48      	ldr	r3, [pc, #288]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80069ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069f0:	0e1b      	lsrs	r3, r3, #24
 80069f2:	f003 030f 	and.w	r3, r3, #15
 80069f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80069f8:	4b44      	ldr	r3, [pc, #272]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80069fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069fe:	0f1b      	lsrs	r3, r3, #28
 8006a00:	f003 0307 	and.w	r3, r3, #7
 8006a04:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	695b      	ldr	r3, [r3, #20]
 8006a0a:	019a      	lsls	r2, r3, #6
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6a1b      	ldr	r3, [r3, #32]
 8006a10:	041b      	lsls	r3, r3, #16
 8006a12:	431a      	orrs	r2, r3
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	061b      	lsls	r3, r3, #24
 8006a18:	431a      	orrs	r2, r3
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	071b      	lsls	r3, r3, #28
 8006a1e:	493b      	ldr	r1, [pc, #236]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8006a20:	4313      	orrs	r3, r2
 8006a22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f003 0308 	and.w	r3, r3, #8
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d04d      	beq.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0xf82>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	69db      	ldr	r3, [r3, #28]
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d903      	bls.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0xef6>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	69db      	ldr	r3, [r3, #28]
 8006a3e:	2b07      	cmp	r3, #7
 8006a40:	d904      	bls.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0xf00>
 8006a42:	f240 216f 	movw	r1, #623	; 0x26f
 8006a46:	4832      	ldr	r0, [pc, #200]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8006a48:	f7fb f8e3 	bl	8001c12 <assert_failed>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d013      	beq.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0xf30>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a5c:	d00e      	beq.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0xf30>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a66:	d009      	beq.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0xf30>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a6c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006a70:	d004      	beq.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0xf30>
 8006a72:	f44f 711c 	mov.w	r1, #624	; 0x270
 8006a76:	4826      	ldr	r0, [pc, #152]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8006a78:	f7fb f8cb 	bl	8001c12 <assert_failed>

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006a7c:	4b23      	ldr	r3, [pc, #140]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8006a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a82:	0e1b      	lsrs	r3, r3, #24
 8006a84:	f003 030f 	and.w	r3, r3, #15
 8006a88:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006a8a:	4b20      	ldr	r3, [pc, #128]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8006a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a90:	0c1b      	lsrs	r3, r3, #16
 8006a92:	f003 0303 	and.w	r3, r3, #3
 8006a96:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	695b      	ldr	r3, [r3, #20]
 8006a9c:	019a      	lsls	r2, r3, #6
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	041b      	lsls	r3, r3, #16
 8006aa2:	431a      	orrs	r2, r3
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	061b      	lsls	r3, r3, #24
 8006aa8:	431a      	orrs	r2, r3
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	69db      	ldr	r3, [r3, #28]
 8006aae:	071b      	lsls	r3, r3, #28
 8006ab0:	4916      	ldr	r1, [pc, #88]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006ab8:	4b14      	ldr	r3, [pc, #80]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8006aba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006abe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac6:	4911      	ldr	r1, [pc, #68]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006ace:	4b0f      	ldr	r3, [pc, #60]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a0e      	ldr	r2, [pc, #56]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8006ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ad8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ada:	f7fb ffe7 	bl	8002aac <HAL_GetTick>
 8006ade:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006ae0:	e008      	b.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006ae2:	f7fb ffe3 	bl	8002aac <HAL_GetTick>
 8006ae6:	4602      	mov	r2, r0
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	1ad3      	subs	r3, r2, r3
 8006aec:	2b64      	cmp	r3, #100	; 0x64
 8006aee:	d901      	bls.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006af0:	2303      	movs	r3, #3
 8006af2:	e007      	b.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006af4:	4b05      	ldr	r3, [pc, #20]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006afc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b00:	d1ef      	bne.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0xf96>
      }
    }
  }
  return HAL_OK;
 8006b02:	2300      	movs	r3, #0
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3720      	adds	r7, #32
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}
 8006b0c:	40023800 	.word	0x40023800
 8006b10:	08014ab4 	.word	0x08014ab4

08006b14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b082      	sub	sp, #8
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d101      	bne.n	8006b26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	e0f5      	b.n	8006d12 <HAL_TIM_Base_Init+0x1fe>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a7c      	ldr	r2, [pc, #496]	; (8006d1c <HAL_TIM_Base_Init+0x208>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d045      	beq.n	8006bbc <HAL_TIM_Base_Init+0xa8>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b38:	d040      	beq.n	8006bbc <HAL_TIM_Base_Init+0xa8>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a78      	ldr	r2, [pc, #480]	; (8006d20 <HAL_TIM_Base_Init+0x20c>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d03b      	beq.n	8006bbc <HAL_TIM_Base_Init+0xa8>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a76      	ldr	r2, [pc, #472]	; (8006d24 <HAL_TIM_Base_Init+0x210>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d036      	beq.n	8006bbc <HAL_TIM_Base_Init+0xa8>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a75      	ldr	r2, [pc, #468]	; (8006d28 <HAL_TIM_Base_Init+0x214>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d031      	beq.n	8006bbc <HAL_TIM_Base_Init+0xa8>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a73      	ldr	r2, [pc, #460]	; (8006d2c <HAL_TIM_Base_Init+0x218>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d02c      	beq.n	8006bbc <HAL_TIM_Base_Init+0xa8>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a72      	ldr	r2, [pc, #456]	; (8006d30 <HAL_TIM_Base_Init+0x21c>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d027      	beq.n	8006bbc <HAL_TIM_Base_Init+0xa8>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a70      	ldr	r2, [pc, #448]	; (8006d34 <HAL_TIM_Base_Init+0x220>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d022      	beq.n	8006bbc <HAL_TIM_Base_Init+0xa8>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a6f      	ldr	r2, [pc, #444]	; (8006d38 <HAL_TIM_Base_Init+0x224>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d01d      	beq.n	8006bbc <HAL_TIM_Base_Init+0xa8>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a6d      	ldr	r2, [pc, #436]	; (8006d3c <HAL_TIM_Base_Init+0x228>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d018      	beq.n	8006bbc <HAL_TIM_Base_Init+0xa8>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a6c      	ldr	r2, [pc, #432]	; (8006d40 <HAL_TIM_Base_Init+0x22c>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d013      	beq.n	8006bbc <HAL_TIM_Base_Init+0xa8>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a6a      	ldr	r2, [pc, #424]	; (8006d44 <HAL_TIM_Base_Init+0x230>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d00e      	beq.n	8006bbc <HAL_TIM_Base_Init+0xa8>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a69      	ldr	r2, [pc, #420]	; (8006d48 <HAL_TIM_Base_Init+0x234>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d009      	beq.n	8006bbc <HAL_TIM_Base_Init+0xa8>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a67      	ldr	r2, [pc, #412]	; (8006d4c <HAL_TIM_Base_Init+0x238>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d004      	beq.n	8006bbc <HAL_TIM_Base_Init+0xa8>
 8006bb2:	f44f 718b 	mov.w	r1, #278	; 0x116
 8006bb6:	4866      	ldr	r0, [pc, #408]	; (8006d50 <HAL_TIM_Base_Init+0x23c>)
 8006bb8:	f7fb f82b 	bl	8001c12 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d014      	beq.n	8006bee <HAL_TIM_Base_Init+0xda>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	2b10      	cmp	r3, #16
 8006bca:	d010      	beq.n	8006bee <HAL_TIM_Base_Init+0xda>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	2b20      	cmp	r3, #32
 8006bd2:	d00c      	beq.n	8006bee <HAL_TIM_Base_Init+0xda>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	2b40      	cmp	r3, #64	; 0x40
 8006bda:	d008      	beq.n	8006bee <HAL_TIM_Base_Init+0xda>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	2b60      	cmp	r3, #96	; 0x60
 8006be2:	d004      	beq.n	8006bee <HAL_TIM_Base_Init+0xda>
 8006be4:	f240 1117 	movw	r1, #279	; 0x117
 8006be8:	4859      	ldr	r0, [pc, #356]	; (8006d50 <HAL_TIM_Base_Init+0x23c>)
 8006bea:	f7fb f812 	bl	8001c12 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d00e      	beq.n	8006c14 <HAL_TIM_Base_Init+0x100>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bfe:	d009      	beq.n	8006c14 <HAL_TIM_Base_Init+0x100>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	691b      	ldr	r3, [r3, #16]
 8006c04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c08:	d004      	beq.n	8006c14 <HAL_TIM_Base_Init+0x100>
 8006c0a:	f44f 718c 	mov.w	r1, #280	; 0x118
 8006c0e:	4850      	ldr	r0, [pc, #320]	; (8006d50 <HAL_TIM_Base_Init+0x23c>)
 8006c10:	f7fa ffff 	bl	8001c12 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c1c:	d004      	beq.n	8006c28 <HAL_TIM_Base_Init+0x114>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a41      	ldr	r2, [pc, #260]	; (8006d28 <HAL_TIM_Base_Init+0x214>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d107      	bne.n	8006c38 <HAL_TIM_Base_Init+0x124>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	bf14      	ite	ne
 8006c30:	2301      	movne	r3, #1
 8006c32:	2300      	moveq	r3, #0
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	e00e      	b.n	8006c56 <HAL_TIM_Base_Init+0x142>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d006      	beq.n	8006c4e <HAL_TIM_Base_Init+0x13a>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	68db      	ldr	r3, [r3, #12]
 8006c44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c48:	d201      	bcs.n	8006c4e <HAL_TIM_Base_Init+0x13a>
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e000      	b.n	8006c50 <HAL_TIM_Base_Init+0x13c>
 8006c4e:	2300      	movs	r3, #0
 8006c50:	f003 0301 	and.w	r3, r3, #1
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d104      	bne.n	8006c64 <HAL_TIM_Base_Init+0x150>
 8006c5a:	f240 1119 	movw	r1, #281	; 0x119
 8006c5e:	483c      	ldr	r0, [pc, #240]	; (8006d50 <HAL_TIM_Base_Init+0x23c>)
 8006c60:	f7fa ffd7 	bl	8001c12 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	699b      	ldr	r3, [r3, #24]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d008      	beq.n	8006c7e <HAL_TIM_Base_Init+0x16a>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	699b      	ldr	r3, [r3, #24]
 8006c70:	2b80      	cmp	r3, #128	; 0x80
 8006c72:	d004      	beq.n	8006c7e <HAL_TIM_Base_Init+0x16a>
 8006c74:	f44f 718d 	mov.w	r1, #282	; 0x11a
 8006c78:	4835      	ldr	r0, [pc, #212]	; (8006d50 <HAL_TIM_Base_Init+0x23c>)
 8006c7a:	f7fa ffca 	bl	8001c12 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d106      	bne.n	8006c98 <HAL_TIM_Base_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f7fb fb22 	bl	80022dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2202      	movs	r2, #2
 8006c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681a      	ldr	r2, [r3, #0]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	3304      	adds	r3, #4
 8006ca8:	4619      	mov	r1, r3
 8006caa:	4610      	mov	r0, r2
 8006cac:	f001 fa52 	bl	8008154 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d10:	2300      	movs	r3, #0
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3708      	adds	r7, #8
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	bf00      	nop
 8006d1c:	40010000 	.word	0x40010000
 8006d20:	40000400 	.word	0x40000400
 8006d24:	40000800 	.word	0x40000800
 8006d28:	40000c00 	.word	0x40000c00
 8006d2c:	40001000 	.word	0x40001000
 8006d30:	40001400 	.word	0x40001400
 8006d34:	40010400 	.word	0x40010400
 8006d38:	40014000 	.word	0x40014000
 8006d3c:	40014400 	.word	0x40014400
 8006d40:	40014800 	.word	0x40014800
 8006d44:	40001800 	.word	0x40001800
 8006d48:	40001c00 	.word	0x40001c00
 8006d4c:	40002000 	.word	0x40002000
 8006d50:	08014af0 	.word	0x08014af0

08006d54 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b082      	sub	sp, #8
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d101      	bne.n	8006d66 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	e0f5      	b.n	8006f52 <HAL_TIM_PWM_Init+0x1fe>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a7c      	ldr	r2, [pc, #496]	; (8006f5c <HAL_TIM_PWM_Init+0x208>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d045      	beq.n	8006dfc <HAL_TIM_PWM_Init+0xa8>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d78:	d040      	beq.n	8006dfc <HAL_TIM_PWM_Init+0xa8>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a78      	ldr	r2, [pc, #480]	; (8006f60 <HAL_TIM_PWM_Init+0x20c>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d03b      	beq.n	8006dfc <HAL_TIM_PWM_Init+0xa8>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a76      	ldr	r2, [pc, #472]	; (8006f64 <HAL_TIM_PWM_Init+0x210>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d036      	beq.n	8006dfc <HAL_TIM_PWM_Init+0xa8>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a75      	ldr	r2, [pc, #468]	; (8006f68 <HAL_TIM_PWM_Init+0x214>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d031      	beq.n	8006dfc <HAL_TIM_PWM_Init+0xa8>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a73      	ldr	r2, [pc, #460]	; (8006f6c <HAL_TIM_PWM_Init+0x218>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d02c      	beq.n	8006dfc <HAL_TIM_PWM_Init+0xa8>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a72      	ldr	r2, [pc, #456]	; (8006f70 <HAL_TIM_PWM_Init+0x21c>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d027      	beq.n	8006dfc <HAL_TIM_PWM_Init+0xa8>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a70      	ldr	r2, [pc, #448]	; (8006f74 <HAL_TIM_PWM_Init+0x220>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d022      	beq.n	8006dfc <HAL_TIM_PWM_Init+0xa8>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a6f      	ldr	r2, [pc, #444]	; (8006f78 <HAL_TIM_PWM_Init+0x224>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d01d      	beq.n	8006dfc <HAL_TIM_PWM_Init+0xa8>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a6d      	ldr	r2, [pc, #436]	; (8006f7c <HAL_TIM_PWM_Init+0x228>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d018      	beq.n	8006dfc <HAL_TIM_PWM_Init+0xa8>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a6c      	ldr	r2, [pc, #432]	; (8006f80 <HAL_TIM_PWM_Init+0x22c>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d013      	beq.n	8006dfc <HAL_TIM_PWM_Init+0xa8>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a6a      	ldr	r2, [pc, #424]	; (8006f84 <HAL_TIM_PWM_Init+0x230>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d00e      	beq.n	8006dfc <HAL_TIM_PWM_Init+0xa8>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a69      	ldr	r2, [pc, #420]	; (8006f88 <HAL_TIM_PWM_Init+0x234>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d009      	beq.n	8006dfc <HAL_TIM_PWM_Init+0xa8>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a67      	ldr	r2, [pc, #412]	; (8006f8c <HAL_TIM_PWM_Init+0x238>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d004      	beq.n	8006dfc <HAL_TIM_PWM_Init+0xa8>
 8006df2:	f240 5133 	movw	r1, #1331	; 0x533
 8006df6:	4866      	ldr	r0, [pc, #408]	; (8006f90 <HAL_TIM_PWM_Init+0x23c>)
 8006df8:	f7fa ff0b 	bl	8001c12 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d014      	beq.n	8006e2e <HAL_TIM_PWM_Init+0xda>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	2b10      	cmp	r3, #16
 8006e0a:	d010      	beq.n	8006e2e <HAL_TIM_PWM_Init+0xda>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	2b20      	cmp	r3, #32
 8006e12:	d00c      	beq.n	8006e2e <HAL_TIM_PWM_Init+0xda>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	2b40      	cmp	r3, #64	; 0x40
 8006e1a:	d008      	beq.n	8006e2e <HAL_TIM_PWM_Init+0xda>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	2b60      	cmp	r3, #96	; 0x60
 8006e22:	d004      	beq.n	8006e2e <HAL_TIM_PWM_Init+0xda>
 8006e24:	f240 5134 	movw	r1, #1332	; 0x534
 8006e28:	4859      	ldr	r0, [pc, #356]	; (8006f90 <HAL_TIM_PWM_Init+0x23c>)
 8006e2a:	f7fa fef2 	bl	8001c12 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	691b      	ldr	r3, [r3, #16]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d00e      	beq.n	8006e54 <HAL_TIM_PWM_Init+0x100>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	691b      	ldr	r3, [r3, #16]
 8006e3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e3e:	d009      	beq.n	8006e54 <HAL_TIM_PWM_Init+0x100>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	691b      	ldr	r3, [r3, #16]
 8006e44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e48:	d004      	beq.n	8006e54 <HAL_TIM_PWM_Init+0x100>
 8006e4a:	f240 5135 	movw	r1, #1333	; 0x535
 8006e4e:	4850      	ldr	r0, [pc, #320]	; (8006f90 <HAL_TIM_PWM_Init+0x23c>)
 8006e50:	f7fa fedf 	bl	8001c12 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e5c:	d004      	beq.n	8006e68 <HAL_TIM_PWM_Init+0x114>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a41      	ldr	r2, [pc, #260]	; (8006f68 <HAL_TIM_PWM_Init+0x214>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d107      	bne.n	8006e78 <HAL_TIM_PWM_Init+0x124>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	bf14      	ite	ne
 8006e70:	2301      	movne	r3, #1
 8006e72:	2300      	moveq	r3, #0
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	e00e      	b.n	8006e96 <HAL_TIM_PWM_Init+0x142>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d006      	beq.n	8006e8e <HAL_TIM_PWM_Init+0x13a>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e88:	d201      	bcs.n	8006e8e <HAL_TIM_PWM_Init+0x13a>
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	e000      	b.n	8006e90 <HAL_TIM_PWM_Init+0x13c>
 8006e8e:	2300      	movs	r3, #0
 8006e90:	f003 0301 	and.w	r3, r3, #1
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d104      	bne.n	8006ea4 <HAL_TIM_PWM_Init+0x150>
 8006e9a:	f240 5136 	movw	r1, #1334	; 0x536
 8006e9e:	483c      	ldr	r0, [pc, #240]	; (8006f90 <HAL_TIM_PWM_Init+0x23c>)
 8006ea0:	f7fa feb7 	bl	8001c12 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	699b      	ldr	r3, [r3, #24]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d008      	beq.n	8006ebe <HAL_TIM_PWM_Init+0x16a>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	699b      	ldr	r3, [r3, #24]
 8006eb0:	2b80      	cmp	r3, #128	; 0x80
 8006eb2:	d004      	beq.n	8006ebe <HAL_TIM_PWM_Init+0x16a>
 8006eb4:	f240 5137 	movw	r1, #1335	; 0x537
 8006eb8:	4835      	ldr	r0, [pc, #212]	; (8006f90 <HAL_TIM_PWM_Init+0x23c>)
 8006eba:	f7fa feaa 	bl	8001c12 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d106      	bne.n	8006ed8 <HAL_TIM_PWM_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 f85e 	bl	8006f94 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2202      	movs	r2, #2
 8006edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	3304      	adds	r3, #4
 8006ee8:	4619      	mov	r1, r3
 8006eea:	4610      	mov	r0, r2
 8006eec:	f001 f932 	bl	8008154 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2201      	movs	r2, #1
 8006efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2201      	movs	r2, #1
 8006f04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2201      	movs	r2, #1
 8006f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2201      	movs	r2, #1
 8006f24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2201      	movs	r2, #1
 8006f34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2201      	movs	r2, #1
 8006f44:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f50:	2300      	movs	r3, #0
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3708      	adds	r7, #8
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
 8006f5a:	bf00      	nop
 8006f5c:	40010000 	.word	0x40010000
 8006f60:	40000400 	.word	0x40000400
 8006f64:	40000800 	.word	0x40000800
 8006f68:	40000c00 	.word	0x40000c00
 8006f6c:	40001000 	.word	0x40001000
 8006f70:	40001400 	.word	0x40001400
 8006f74:	40010400 	.word	0x40010400
 8006f78:	40014000 	.word	0x40014000
 8006f7c:	40014400 	.word	0x40014400
 8006f80:	40014800 	.word	0x40014800
 8006f84:	40001800 	.word	0x40001800
 8006f88:	40001c00 	.word	0x40001c00
 8006f8c:	40002000 	.word	0x40002000
 8006f90:	08014af0 	.word	0x08014af0

08006f94 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006f9c:	bf00      	nop
 8006f9e:	370c      	adds	r7, #12
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr

08006fa8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b084      	sub	sp, #16
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a89      	ldr	r2, [pc, #548]	; (80071dc <HAL_TIM_PWM_Start+0x234>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d117      	bne.n	8006fec <HAL_TIM_PWM_Start+0x44>
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	f000 80ae 	beq.w	8007120 <HAL_TIM_PWM_Start+0x178>
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	2b04      	cmp	r3, #4
 8006fc8:	f000 80aa 	beq.w	8007120 <HAL_TIM_PWM_Start+0x178>
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	2b08      	cmp	r3, #8
 8006fd0:	f000 80a6 	beq.w	8007120 <HAL_TIM_PWM_Start+0x178>
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	2b0c      	cmp	r3, #12
 8006fd8:	f000 80a2 	beq.w	8007120 <HAL_TIM_PWM_Start+0x178>
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	2b10      	cmp	r3, #16
 8006fe0:	f000 809e 	beq.w	8007120 <HAL_TIM_PWM_Start+0x178>
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	2b14      	cmp	r3, #20
 8006fe8:	f000 809a 	beq.w	8007120 <HAL_TIM_PWM_Start+0x178>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ff4:	d10f      	bne.n	8007016 <HAL_TIM_PWM_Start+0x6e>
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	f000 8091 	beq.w	8007120 <HAL_TIM_PWM_Start+0x178>
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	2b04      	cmp	r3, #4
 8007002:	f000 808d 	beq.w	8007120 <HAL_TIM_PWM_Start+0x178>
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	2b08      	cmp	r3, #8
 800700a:	f000 8089 	beq.w	8007120 <HAL_TIM_PWM_Start+0x178>
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	2b0c      	cmp	r3, #12
 8007012:	f000 8085 	beq.w	8007120 <HAL_TIM_PWM_Start+0x178>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a71      	ldr	r2, [pc, #452]	; (80071e0 <HAL_TIM_PWM_Start+0x238>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d10b      	bne.n	8007038 <HAL_TIM_PWM_Start+0x90>
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d07c      	beq.n	8007120 <HAL_TIM_PWM_Start+0x178>
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	2b04      	cmp	r3, #4
 800702a:	d079      	beq.n	8007120 <HAL_TIM_PWM_Start+0x178>
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	2b08      	cmp	r3, #8
 8007030:	d076      	beq.n	8007120 <HAL_TIM_PWM_Start+0x178>
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	2b0c      	cmp	r3, #12
 8007036:	d073      	beq.n	8007120 <HAL_TIM_PWM_Start+0x178>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a69      	ldr	r2, [pc, #420]	; (80071e4 <HAL_TIM_PWM_Start+0x23c>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d10b      	bne.n	800705a <HAL_TIM_PWM_Start+0xb2>
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d06b      	beq.n	8007120 <HAL_TIM_PWM_Start+0x178>
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	2b04      	cmp	r3, #4
 800704c:	d068      	beq.n	8007120 <HAL_TIM_PWM_Start+0x178>
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	2b08      	cmp	r3, #8
 8007052:	d065      	beq.n	8007120 <HAL_TIM_PWM_Start+0x178>
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	2b0c      	cmp	r3, #12
 8007058:	d062      	beq.n	8007120 <HAL_TIM_PWM_Start+0x178>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a62      	ldr	r2, [pc, #392]	; (80071e8 <HAL_TIM_PWM_Start+0x240>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d10b      	bne.n	800707c <HAL_TIM_PWM_Start+0xd4>
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d05a      	beq.n	8007120 <HAL_TIM_PWM_Start+0x178>
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	2b04      	cmp	r3, #4
 800706e:	d057      	beq.n	8007120 <HAL_TIM_PWM_Start+0x178>
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	2b08      	cmp	r3, #8
 8007074:	d054      	beq.n	8007120 <HAL_TIM_PWM_Start+0x178>
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	2b0c      	cmp	r3, #12
 800707a:	d051      	beq.n	8007120 <HAL_TIM_PWM_Start+0x178>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a5a      	ldr	r2, [pc, #360]	; (80071ec <HAL_TIM_PWM_Start+0x244>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d111      	bne.n	80070aa <HAL_TIM_PWM_Start+0x102>
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d049      	beq.n	8007120 <HAL_TIM_PWM_Start+0x178>
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	2b04      	cmp	r3, #4
 8007090:	d046      	beq.n	8007120 <HAL_TIM_PWM_Start+0x178>
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	2b08      	cmp	r3, #8
 8007096:	d043      	beq.n	8007120 <HAL_TIM_PWM_Start+0x178>
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	2b0c      	cmp	r3, #12
 800709c:	d040      	beq.n	8007120 <HAL_TIM_PWM_Start+0x178>
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	2b10      	cmp	r3, #16
 80070a2:	d03d      	beq.n	8007120 <HAL_TIM_PWM_Start+0x178>
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	2b14      	cmp	r3, #20
 80070a8:	d03a      	beq.n	8007120 <HAL_TIM_PWM_Start+0x178>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a50      	ldr	r2, [pc, #320]	; (80071f0 <HAL_TIM_PWM_Start+0x248>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d105      	bne.n	80070c0 <HAL_TIM_PWM_Start+0x118>
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d032      	beq.n	8007120 <HAL_TIM_PWM_Start+0x178>
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	2b04      	cmp	r3, #4
 80070be:	d02f      	beq.n	8007120 <HAL_TIM_PWM_Start+0x178>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a4b      	ldr	r2, [pc, #300]	; (80071f4 <HAL_TIM_PWM_Start+0x24c>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d102      	bne.n	80070d0 <HAL_TIM_PWM_Start+0x128>
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d027      	beq.n	8007120 <HAL_TIM_PWM_Start+0x178>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a48      	ldr	r2, [pc, #288]	; (80071f8 <HAL_TIM_PWM_Start+0x250>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d102      	bne.n	80070e0 <HAL_TIM_PWM_Start+0x138>
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d01f      	beq.n	8007120 <HAL_TIM_PWM_Start+0x178>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a45      	ldr	r2, [pc, #276]	; (80071fc <HAL_TIM_PWM_Start+0x254>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d105      	bne.n	80070f6 <HAL_TIM_PWM_Start+0x14e>
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d017      	beq.n	8007120 <HAL_TIM_PWM_Start+0x178>
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	2b04      	cmp	r3, #4
 80070f4:	d014      	beq.n	8007120 <HAL_TIM_PWM_Start+0x178>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a41      	ldr	r2, [pc, #260]	; (8007200 <HAL_TIM_PWM_Start+0x258>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d102      	bne.n	8007106 <HAL_TIM_PWM_Start+0x15e>
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d00c      	beq.n	8007120 <HAL_TIM_PWM_Start+0x178>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a3e      	ldr	r2, [pc, #248]	; (8007204 <HAL_TIM_PWM_Start+0x25c>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d102      	bne.n	8007116 <HAL_TIM_PWM_Start+0x16e>
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d004      	beq.n	8007120 <HAL_TIM_PWM_Start+0x178>
 8007116:	f240 51bc 	movw	r1, #1468	; 0x5bc
 800711a:	483b      	ldr	r0, [pc, #236]	; (8007208 <HAL_TIM_PWM_Start+0x260>)
 800711c:	f7fa fd79 	bl	8001c12 <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d109      	bne.n	800713a <HAL_TIM_PWM_Start+0x192>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800712c:	b2db      	uxtb	r3, r3
 800712e:	2b01      	cmp	r3, #1
 8007130:	bf14      	ite	ne
 8007132:	2301      	movne	r3, #1
 8007134:	2300      	moveq	r3, #0
 8007136:	b2db      	uxtb	r3, r3
 8007138:	e03c      	b.n	80071b4 <HAL_TIM_PWM_Start+0x20c>
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	2b04      	cmp	r3, #4
 800713e:	d109      	bne.n	8007154 <HAL_TIM_PWM_Start+0x1ac>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007146:	b2db      	uxtb	r3, r3
 8007148:	2b01      	cmp	r3, #1
 800714a:	bf14      	ite	ne
 800714c:	2301      	movne	r3, #1
 800714e:	2300      	moveq	r3, #0
 8007150:	b2db      	uxtb	r3, r3
 8007152:	e02f      	b.n	80071b4 <HAL_TIM_PWM_Start+0x20c>
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	2b08      	cmp	r3, #8
 8007158:	d109      	bne.n	800716e <HAL_TIM_PWM_Start+0x1c6>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007160:	b2db      	uxtb	r3, r3
 8007162:	2b01      	cmp	r3, #1
 8007164:	bf14      	ite	ne
 8007166:	2301      	movne	r3, #1
 8007168:	2300      	moveq	r3, #0
 800716a:	b2db      	uxtb	r3, r3
 800716c:	e022      	b.n	80071b4 <HAL_TIM_PWM_Start+0x20c>
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	2b0c      	cmp	r3, #12
 8007172:	d109      	bne.n	8007188 <HAL_TIM_PWM_Start+0x1e0>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800717a:	b2db      	uxtb	r3, r3
 800717c:	2b01      	cmp	r3, #1
 800717e:	bf14      	ite	ne
 8007180:	2301      	movne	r3, #1
 8007182:	2300      	moveq	r3, #0
 8007184:	b2db      	uxtb	r3, r3
 8007186:	e015      	b.n	80071b4 <HAL_TIM_PWM_Start+0x20c>
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	2b10      	cmp	r3, #16
 800718c:	d109      	bne.n	80071a2 <HAL_TIM_PWM_Start+0x1fa>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007194:	b2db      	uxtb	r3, r3
 8007196:	2b01      	cmp	r3, #1
 8007198:	bf14      	ite	ne
 800719a:	2301      	movne	r3, #1
 800719c:	2300      	moveq	r3, #0
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	e008      	b.n	80071b4 <HAL_TIM_PWM_Start+0x20c>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	2b01      	cmp	r3, #1
 80071ac:	bf14      	ite	ne
 80071ae:	2301      	movne	r3, #1
 80071b0:	2300      	moveq	r3, #0
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d001      	beq.n	80071bc <HAL_TIM_PWM_Start+0x214>
  {
    return HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	e0aa      	b.n	8007312 <HAL_TIM_PWM_Start+0x36a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d104      	bne.n	80071cc <HAL_TIM_PWM_Start+0x224>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2202      	movs	r2, #2
 80071c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071ca:	e03b      	b.n	8007244 <HAL_TIM_PWM_Start+0x29c>
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	2b04      	cmp	r3, #4
 80071d0:	d11c      	bne.n	800720c <HAL_TIM_PWM_Start+0x264>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2202      	movs	r2, #2
 80071d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071da:	e033      	b.n	8007244 <HAL_TIM_PWM_Start+0x29c>
 80071dc:	40010000 	.word	0x40010000
 80071e0:	40000400 	.word	0x40000400
 80071e4:	40000800 	.word	0x40000800
 80071e8:	40000c00 	.word	0x40000c00
 80071ec:	40010400 	.word	0x40010400
 80071f0:	40014000 	.word	0x40014000
 80071f4:	40014400 	.word	0x40014400
 80071f8:	40014800 	.word	0x40014800
 80071fc:	40001800 	.word	0x40001800
 8007200:	40001c00 	.word	0x40001c00
 8007204:	40002000 	.word	0x40002000
 8007208:	08014af0 	.word	0x08014af0
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	2b08      	cmp	r3, #8
 8007210:	d104      	bne.n	800721c <HAL_TIM_PWM_Start+0x274>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2202      	movs	r2, #2
 8007216:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800721a:	e013      	b.n	8007244 <HAL_TIM_PWM_Start+0x29c>
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	2b0c      	cmp	r3, #12
 8007220:	d104      	bne.n	800722c <HAL_TIM_PWM_Start+0x284>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2202      	movs	r2, #2
 8007226:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800722a:	e00b      	b.n	8007244 <HAL_TIM_PWM_Start+0x29c>
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	2b10      	cmp	r3, #16
 8007230:	d104      	bne.n	800723c <HAL_TIM_PWM_Start+0x294>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2202      	movs	r2, #2
 8007236:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800723a:	e003      	b.n	8007244 <HAL_TIM_PWM_Start+0x29c>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2202      	movs	r2, #2
 8007240:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2201      	movs	r2, #1
 800724a:	6839      	ldr	r1, [r7, #0]
 800724c:	4618      	mov	r0, r3
 800724e:	f001 fba3 	bl	8008998 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a31      	ldr	r2, [pc, #196]	; (800731c <HAL_TIM_PWM_Start+0x374>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d004      	beq.n	8007266 <HAL_TIM_PWM_Start+0x2be>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a2f      	ldr	r2, [pc, #188]	; (8007320 <HAL_TIM_PWM_Start+0x378>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d101      	bne.n	800726a <HAL_TIM_PWM_Start+0x2c2>
 8007266:	2301      	movs	r3, #1
 8007268:	e000      	b.n	800726c <HAL_TIM_PWM_Start+0x2c4>
 800726a:	2300      	movs	r3, #0
 800726c:	2b00      	cmp	r3, #0
 800726e:	d007      	beq.n	8007280 <HAL_TIM_PWM_Start+0x2d8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800727e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a25      	ldr	r2, [pc, #148]	; (800731c <HAL_TIM_PWM_Start+0x374>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d022      	beq.n	80072d0 <HAL_TIM_PWM_Start+0x328>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007292:	d01d      	beq.n	80072d0 <HAL_TIM_PWM_Start+0x328>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a22      	ldr	r2, [pc, #136]	; (8007324 <HAL_TIM_PWM_Start+0x37c>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d018      	beq.n	80072d0 <HAL_TIM_PWM_Start+0x328>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a21      	ldr	r2, [pc, #132]	; (8007328 <HAL_TIM_PWM_Start+0x380>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d013      	beq.n	80072d0 <HAL_TIM_PWM_Start+0x328>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a1f      	ldr	r2, [pc, #124]	; (800732c <HAL_TIM_PWM_Start+0x384>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d00e      	beq.n	80072d0 <HAL_TIM_PWM_Start+0x328>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a1a      	ldr	r2, [pc, #104]	; (8007320 <HAL_TIM_PWM_Start+0x378>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d009      	beq.n	80072d0 <HAL_TIM_PWM_Start+0x328>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a1b      	ldr	r2, [pc, #108]	; (8007330 <HAL_TIM_PWM_Start+0x388>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d004      	beq.n	80072d0 <HAL_TIM_PWM_Start+0x328>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a1a      	ldr	r2, [pc, #104]	; (8007334 <HAL_TIM_PWM_Start+0x38c>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d115      	bne.n	80072fc <HAL_TIM_PWM_Start+0x354>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	689a      	ldr	r2, [r3, #8]
 80072d6:	4b18      	ldr	r3, [pc, #96]	; (8007338 <HAL_TIM_PWM_Start+0x390>)
 80072d8:	4013      	ands	r3, r2
 80072da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2b06      	cmp	r3, #6
 80072e0:	d015      	beq.n	800730e <HAL_TIM_PWM_Start+0x366>
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072e8:	d011      	beq.n	800730e <HAL_TIM_PWM_Start+0x366>
    {
      __HAL_TIM_ENABLE(htim);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	681a      	ldr	r2, [r3, #0]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f042 0201 	orr.w	r2, r2, #1
 80072f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072fa:	e008      	b.n	800730e <HAL_TIM_PWM_Start+0x366>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	681a      	ldr	r2, [r3, #0]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f042 0201 	orr.w	r2, r2, #1
 800730a:	601a      	str	r2, [r3, #0]
 800730c:	e000      	b.n	8007310 <HAL_TIM_PWM_Start+0x368>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800730e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007310:	2300      	movs	r3, #0
}
 8007312:	4618      	mov	r0, r3
 8007314:	3710      	adds	r7, #16
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
 800731a:	bf00      	nop
 800731c:	40010000 	.word	0x40010000
 8007320:	40010400 	.word	0x40010400
 8007324:	40000400 	.word	0x40000400
 8007328:	40000800 	.word	0x40000800
 800732c:	40000c00 	.word	0x40000c00
 8007330:	40014000 	.word	0x40014000
 8007334:	40001800 	.word	0x40001800
 8007338:	00010007 	.word	0x00010007

0800733c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b082      	sub	sp, #8
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	691b      	ldr	r3, [r3, #16]
 800734a:	f003 0302 	and.w	r3, r3, #2
 800734e:	2b02      	cmp	r3, #2
 8007350:	d122      	bne.n	8007398 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	f003 0302 	and.w	r3, r3, #2
 800735c:	2b02      	cmp	r3, #2
 800735e:	d11b      	bne.n	8007398 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f06f 0202 	mvn.w	r2, #2
 8007368:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2201      	movs	r2, #1
 800736e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	699b      	ldr	r3, [r3, #24]
 8007376:	f003 0303 	and.w	r3, r3, #3
 800737a:	2b00      	cmp	r3, #0
 800737c:	d003      	beq.n	8007386 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 feca 	bl	8008118 <HAL_TIM_IC_CaptureCallback>
 8007384:	e005      	b.n	8007392 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 febc 	bl	8008104 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f000 fecd 	bl	800812c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	691b      	ldr	r3, [r3, #16]
 800739e:	f003 0304 	and.w	r3, r3, #4
 80073a2:	2b04      	cmp	r3, #4
 80073a4:	d122      	bne.n	80073ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	68db      	ldr	r3, [r3, #12]
 80073ac:	f003 0304 	and.w	r3, r3, #4
 80073b0:	2b04      	cmp	r3, #4
 80073b2:	d11b      	bne.n	80073ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f06f 0204 	mvn.w	r2, #4
 80073bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2202      	movs	r2, #2
 80073c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	699b      	ldr	r3, [r3, #24]
 80073ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d003      	beq.n	80073da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 fea0 	bl	8008118 <HAL_TIM_IC_CaptureCallback>
 80073d8:	e005      	b.n	80073e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 fe92 	bl	8008104 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 fea3 	bl	800812c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2200      	movs	r2, #0
 80073ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	691b      	ldr	r3, [r3, #16]
 80073f2:	f003 0308 	and.w	r3, r3, #8
 80073f6:	2b08      	cmp	r3, #8
 80073f8:	d122      	bne.n	8007440 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	68db      	ldr	r3, [r3, #12]
 8007400:	f003 0308 	and.w	r3, r3, #8
 8007404:	2b08      	cmp	r3, #8
 8007406:	d11b      	bne.n	8007440 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f06f 0208 	mvn.w	r2, #8
 8007410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2204      	movs	r2, #4
 8007416:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	69db      	ldr	r3, [r3, #28]
 800741e:	f003 0303 	and.w	r3, r3, #3
 8007422:	2b00      	cmp	r3, #0
 8007424:	d003      	beq.n	800742e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 fe76 	bl	8008118 <HAL_TIM_IC_CaptureCallback>
 800742c:	e005      	b.n	800743a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 fe68 	bl	8008104 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 fe79 	bl	800812c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	691b      	ldr	r3, [r3, #16]
 8007446:	f003 0310 	and.w	r3, r3, #16
 800744a:	2b10      	cmp	r3, #16
 800744c:	d122      	bne.n	8007494 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	68db      	ldr	r3, [r3, #12]
 8007454:	f003 0310 	and.w	r3, r3, #16
 8007458:	2b10      	cmp	r3, #16
 800745a:	d11b      	bne.n	8007494 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f06f 0210 	mvn.w	r2, #16
 8007464:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2208      	movs	r2, #8
 800746a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	69db      	ldr	r3, [r3, #28]
 8007472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007476:	2b00      	cmp	r3, #0
 8007478:	d003      	beq.n	8007482 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 fe4c 	bl	8008118 <HAL_TIM_IC_CaptureCallback>
 8007480:	e005      	b.n	800748e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f000 fe3e 	bl	8008104 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 fe4f 	bl	800812c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	691b      	ldr	r3, [r3, #16]
 800749a:	f003 0301 	and.w	r3, r3, #1
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d10e      	bne.n	80074c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	68db      	ldr	r3, [r3, #12]
 80074a8:	f003 0301 	and.w	r3, r3, #1
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d107      	bne.n	80074c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f06f 0201 	mvn.w	r2, #1
 80074b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 fe18 	bl	80080f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	691b      	ldr	r3, [r3, #16]
 80074c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074ca:	2b80      	cmp	r3, #128	; 0x80
 80074cc:	d10e      	bne.n	80074ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	68db      	ldr	r3, [r3, #12]
 80074d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074d8:	2b80      	cmp	r3, #128	; 0x80
 80074da:	d107      	bne.n	80074ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80074e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f001 fc42 	bl	8008d70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	691b      	ldr	r3, [r3, #16]
 80074f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074fa:	d10e      	bne.n	800751a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	68db      	ldr	r3, [r3, #12]
 8007502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007506:	2b80      	cmp	r3, #128	; 0x80
 8007508:	d107      	bne.n	800751a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007512:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f001 fc35 	bl	8008d84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	691b      	ldr	r3, [r3, #16]
 8007520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007524:	2b40      	cmp	r3, #64	; 0x40
 8007526:	d10e      	bne.n	8007546 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	68db      	ldr	r3, [r3, #12]
 800752e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007532:	2b40      	cmp	r3, #64	; 0x40
 8007534:	d107      	bne.n	8007546 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800753e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 fdfd 	bl	8008140 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	691b      	ldr	r3, [r3, #16]
 800754c:	f003 0320 	and.w	r3, r3, #32
 8007550:	2b20      	cmp	r3, #32
 8007552:	d10e      	bne.n	8007572 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	68db      	ldr	r3, [r3, #12]
 800755a:	f003 0320 	and.w	r3, r3, #32
 800755e:	2b20      	cmp	r3, #32
 8007560:	d107      	bne.n	8007572 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f06f 0220 	mvn.w	r2, #32
 800756a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f001 fbf5 	bl	8008d5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007572:	bf00      	nop
 8007574:	3708      	adds	r7, #8
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
	...

0800757c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b086      	sub	sp, #24
 8007580:	af00      	add	r7, sp, #0
 8007582:	60f8      	str	r0, [r7, #12]
 8007584:	60b9      	str	r1, [r7, #8]
 8007586:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007588:	2300      	movs	r3, #0
 800758a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d016      	beq.n	80075c0 <HAL_TIM_PWM_ConfigChannel+0x44>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2b04      	cmp	r3, #4
 8007596:	d013      	beq.n	80075c0 <HAL_TIM_PWM_ConfigChannel+0x44>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2b08      	cmp	r3, #8
 800759c:	d010      	beq.n	80075c0 <HAL_TIM_PWM_ConfigChannel+0x44>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2b0c      	cmp	r3, #12
 80075a2:	d00d      	beq.n	80075c0 <HAL_TIM_PWM_ConfigChannel+0x44>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2b10      	cmp	r3, #16
 80075a8:	d00a      	beq.n	80075c0 <HAL_TIM_PWM_ConfigChannel+0x44>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2b14      	cmp	r3, #20
 80075ae:	d007      	beq.n	80075c0 <HAL_TIM_PWM_ConfigChannel+0x44>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2b3c      	cmp	r3, #60	; 0x3c
 80075b4:	d004      	beq.n	80075c0 <HAL_TIM_PWM_ConfigChannel+0x44>
 80075b6:	f241 01af 	movw	r1, #4271	; 0x10af
 80075ba:	4895      	ldr	r0, [pc, #596]	; (8007810 <HAL_TIM_PWM_ConfigChannel+0x294>)
 80075bc:	f7fa fb29 	bl	8001c12 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2b60      	cmp	r3, #96	; 0x60
 80075c6:	d01c      	beq.n	8007602 <HAL_TIM_PWM_ConfigChannel+0x86>
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	2b70      	cmp	r3, #112	; 0x70
 80075ce:	d018      	beq.n	8007602 <HAL_TIM_PWM_ConfigChannel+0x86>
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a8f      	ldr	r2, [pc, #572]	; (8007814 <HAL_TIM_PWM_ConfigChannel+0x298>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d013      	beq.n	8007602 <HAL_TIM_PWM_ConfigChannel+0x86>
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a8e      	ldr	r2, [pc, #568]	; (8007818 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d00e      	beq.n	8007602 <HAL_TIM_PWM_ConfigChannel+0x86>
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a8c      	ldr	r2, [pc, #560]	; (800781c <HAL_TIM_PWM_ConfigChannel+0x2a0>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d009      	beq.n	8007602 <HAL_TIM_PWM_ConfigChannel+0x86>
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a8b      	ldr	r2, [pc, #556]	; (8007820 <HAL_TIM_PWM_ConfigChannel+0x2a4>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d004      	beq.n	8007602 <HAL_TIM_PWM_ConfigChannel+0x86>
 80075f8:	f241 01b0 	movw	r1, #4272	; 0x10b0
 80075fc:	4884      	ldr	r0, [pc, #528]	; (8007810 <HAL_TIM_PWM_ConfigChannel+0x294>)
 80075fe:	f7fa fb08 	bl	8001c12 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d008      	beq.n	800761c <HAL_TIM_PWM_ConfigChannel+0xa0>
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	2b02      	cmp	r3, #2
 8007610:	d004      	beq.n	800761c <HAL_TIM_PWM_ConfigChannel+0xa0>
 8007612:	f241 01b1 	movw	r1, #4273	; 0x10b1
 8007616:	487e      	ldr	r0, [pc, #504]	; (8007810 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8007618:	f7fa fafb 	bl	8001c12 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	691b      	ldr	r3, [r3, #16]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d008      	beq.n	8007636 <HAL_TIM_PWM_ConfigChannel+0xba>
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	691b      	ldr	r3, [r3, #16]
 8007628:	2b04      	cmp	r3, #4
 800762a:	d004      	beq.n	8007636 <HAL_TIM_PWM_ConfigChannel+0xba>
 800762c:	f241 01b2 	movw	r1, #4274	; 0x10b2
 8007630:	4877      	ldr	r0, [pc, #476]	; (8007810 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8007632:	f7fa faee 	bl	8001c12 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800763c:	2b01      	cmp	r3, #1
 800763e:	d101      	bne.n	8007644 <HAL_TIM_PWM_ConfigChannel+0xc8>
 8007640:	2302      	movs	r3, #2
 8007642:	e1f3      	b.n	8007a2c <HAL_TIM_PWM_ConfigChannel+0x4b0>
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2201      	movs	r2, #1
 8007648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2b14      	cmp	r3, #20
 8007650:	f200 81e4 	bhi.w	8007a1c <HAL_TIM_PWM_ConfigChannel+0x4a0>
 8007654:	a201      	add	r2, pc, #4	; (adr r2, 800765c <HAL_TIM_PWM_ConfigChannel+0xe0>)
 8007656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800765a:	bf00      	nop
 800765c:	080076b1 	.word	0x080076b1
 8007660:	08007a1d 	.word	0x08007a1d
 8007664:	08007a1d 	.word	0x08007a1d
 8007668:	08007a1d 	.word	0x08007a1d
 800766c:	08007773 	.word	0x08007773
 8007670:	08007a1d 	.word	0x08007a1d
 8007674:	08007a1d 	.word	0x08007a1d
 8007678:	08007a1d 	.word	0x08007a1d
 800767c:	08007851 	.word	0x08007851
 8007680:	08007a1d 	.word	0x08007a1d
 8007684:	08007a1d 	.word	0x08007a1d
 8007688:	08007a1d 	.word	0x08007a1d
 800768c:	080078d7 	.word	0x080078d7
 8007690:	08007a1d 	.word	0x08007a1d
 8007694:	08007a1d 	.word	0x08007a1d
 8007698:	08007a1d 	.word	0x08007a1d
 800769c:	0800795f 	.word	0x0800795f
 80076a0:	08007a1d 	.word	0x08007a1d
 80076a4:	08007a1d 	.word	0x08007a1d
 80076a8:	08007a1d 	.word	0x08007a1d
 80076ac:	080079bd 	.word	0x080079bd
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a5b      	ldr	r2, [pc, #364]	; (8007824 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d03b      	beq.n	8007732 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076c2:	d036      	beq.n	8007732 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a57      	ldr	r2, [pc, #348]	; (8007828 <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d031      	beq.n	8007732 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a56      	ldr	r2, [pc, #344]	; (800782c <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d02c      	beq.n	8007732 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a54      	ldr	r2, [pc, #336]	; (8007830 <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d027      	beq.n	8007732 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a53      	ldr	r2, [pc, #332]	; (8007834 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d022      	beq.n	8007732 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a51      	ldr	r2, [pc, #324]	; (8007838 <HAL_TIM_PWM_ConfigChannel+0x2bc>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d01d      	beq.n	8007732 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a50      	ldr	r2, [pc, #320]	; (800783c <HAL_TIM_PWM_ConfigChannel+0x2c0>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d018      	beq.n	8007732 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a4e      	ldr	r2, [pc, #312]	; (8007840 <HAL_TIM_PWM_ConfigChannel+0x2c4>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d013      	beq.n	8007732 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a4d      	ldr	r2, [pc, #308]	; (8007844 <HAL_TIM_PWM_ConfigChannel+0x2c8>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d00e      	beq.n	8007732 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a4b      	ldr	r2, [pc, #300]	; (8007848 <HAL_TIM_PWM_ConfigChannel+0x2cc>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d009      	beq.n	8007732 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a4a      	ldr	r2, [pc, #296]	; (800784c <HAL_TIM_PWM_ConfigChannel+0x2d0>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d004      	beq.n	8007732 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8007728:	f241 01bc 	movw	r1, #4284	; 0x10bc
 800772c:	4838      	ldr	r0, [pc, #224]	; (8007810 <HAL_TIM_PWM_ConfigChannel+0x294>)
 800772e:	f7fa fa70 	bl	8001c12 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	68b9      	ldr	r1, [r7, #8]
 8007738:	4618      	mov	r0, r3
 800773a:	f000 fdab 	bl	8008294 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	699a      	ldr	r2, [r3, #24]
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f042 0208 	orr.w	r2, r2, #8
 800774c:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	699a      	ldr	r2, [r3, #24]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f022 0204 	bic.w	r2, r2, #4
 800775c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	6999      	ldr	r1, [r3, #24]
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	691a      	ldr	r2, [r3, #16]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	430a      	orrs	r2, r1
 800776e:	619a      	str	r2, [r3, #24]
      break;
 8007770:	e157      	b.n	8007a22 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a2b      	ldr	r2, [pc, #172]	; (8007824 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d027      	beq.n	80077cc <HAL_TIM_PWM_ConfigChannel+0x250>
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007784:	d022      	beq.n	80077cc <HAL_TIM_PWM_ConfigChannel+0x250>
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a27      	ldr	r2, [pc, #156]	; (8007828 <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d01d      	beq.n	80077cc <HAL_TIM_PWM_ConfigChannel+0x250>
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a25      	ldr	r2, [pc, #148]	; (800782c <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d018      	beq.n	80077cc <HAL_TIM_PWM_ConfigChannel+0x250>
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a24      	ldr	r2, [pc, #144]	; (8007830 <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d013      	beq.n	80077cc <HAL_TIM_PWM_ConfigChannel+0x250>
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a22      	ldr	r2, [pc, #136]	; (8007834 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d00e      	beq.n	80077cc <HAL_TIM_PWM_ConfigChannel+0x250>
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a21      	ldr	r2, [pc, #132]	; (8007838 <HAL_TIM_PWM_ConfigChannel+0x2bc>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d009      	beq.n	80077cc <HAL_TIM_PWM_ConfigChannel+0x250>
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a21      	ldr	r2, [pc, #132]	; (8007844 <HAL_TIM_PWM_ConfigChannel+0x2c8>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d004      	beq.n	80077cc <HAL_TIM_PWM_ConfigChannel+0x250>
 80077c2:	f241 01cd 	movw	r1, #4301	; 0x10cd
 80077c6:	4812      	ldr	r0, [pc, #72]	; (8007810 <HAL_TIM_PWM_ConfigChannel+0x294>)
 80077c8:	f7fa fa23 	bl	8001c12 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	68b9      	ldr	r1, [r7, #8]
 80077d2:	4618      	mov	r0, r3
 80077d4:	f000 fdfa 	bl	80083cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	699a      	ldr	r2, [r3, #24]
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80077e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	699a      	ldr	r2, [r3, #24]
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	6999      	ldr	r1, [r3, #24]
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	691b      	ldr	r3, [r3, #16]
 8007802:	021a      	lsls	r2, r3, #8
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	430a      	orrs	r2, r1
 800780a:	619a      	str	r2, [r3, #24]
      break;
 800780c:	e109      	b.n	8007a22 <HAL_TIM_PWM_ConfigChannel+0x4a6>
 800780e:	bf00      	nop
 8007810:	08014af0 	.word	0x08014af0
 8007814:	00010040 	.word	0x00010040
 8007818:	00010050 	.word	0x00010050
 800781c:	00010060 	.word	0x00010060
 8007820:	00010070 	.word	0x00010070
 8007824:	40010000 	.word	0x40010000
 8007828:	40000400 	.word	0x40000400
 800782c:	40000800 	.word	0x40000800
 8007830:	40000c00 	.word	0x40000c00
 8007834:	40010400 	.word	0x40010400
 8007838:	40014000 	.word	0x40014000
 800783c:	40014400 	.word	0x40014400
 8007840:	40014800 	.word	0x40014800
 8007844:	40001800 	.word	0x40001800
 8007848:	40001c00 	.word	0x40001c00
 800784c:	40002000 	.word	0x40002000
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a77      	ldr	r2, [pc, #476]	; (8007a34 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d01d      	beq.n	8007896 <HAL_TIM_PWM_ConfigChannel+0x31a>
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007862:	d018      	beq.n	8007896 <HAL_TIM_PWM_ConfigChannel+0x31a>
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a73      	ldr	r2, [pc, #460]	; (8007a38 <HAL_TIM_PWM_ConfigChannel+0x4bc>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d013      	beq.n	8007896 <HAL_TIM_PWM_ConfigChannel+0x31a>
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a72      	ldr	r2, [pc, #456]	; (8007a3c <HAL_TIM_PWM_ConfigChannel+0x4c0>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d00e      	beq.n	8007896 <HAL_TIM_PWM_ConfigChannel+0x31a>
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a70      	ldr	r2, [pc, #448]	; (8007a40 <HAL_TIM_PWM_ConfigChannel+0x4c4>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d009      	beq.n	8007896 <HAL_TIM_PWM_ConfigChannel+0x31a>
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a6f      	ldr	r2, [pc, #444]	; (8007a44 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d004      	beq.n	8007896 <HAL_TIM_PWM_ConfigChannel+0x31a>
 800788c:	f241 01de 	movw	r1, #4318	; 0x10de
 8007890:	486d      	ldr	r0, [pc, #436]	; (8007a48 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 8007892:	f7fa f9be 	bl	8001c12 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	68b9      	ldr	r1, [r7, #8]
 800789c:	4618      	mov	r0, r3
 800789e:	f000 fe35 	bl	800850c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	69da      	ldr	r2, [r3, #28]
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f042 0208 	orr.w	r2, r2, #8
 80078b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	69da      	ldr	r2, [r3, #28]
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f022 0204 	bic.w	r2, r2, #4
 80078c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	69d9      	ldr	r1, [r3, #28]
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	691a      	ldr	r2, [r3, #16]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	430a      	orrs	r2, r1
 80078d2:	61da      	str	r2, [r3, #28]
      break;
 80078d4:	e0a5      	b.n	8007a22 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a56      	ldr	r2, [pc, #344]	; (8007a34 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d01d      	beq.n	800791c <HAL_TIM_PWM_ConfigChannel+0x3a0>
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078e8:	d018      	beq.n	800791c <HAL_TIM_PWM_ConfigChannel+0x3a0>
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a52      	ldr	r2, [pc, #328]	; (8007a38 <HAL_TIM_PWM_ConfigChannel+0x4bc>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d013      	beq.n	800791c <HAL_TIM_PWM_ConfigChannel+0x3a0>
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a50      	ldr	r2, [pc, #320]	; (8007a3c <HAL_TIM_PWM_ConfigChannel+0x4c0>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d00e      	beq.n	800791c <HAL_TIM_PWM_ConfigChannel+0x3a0>
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a4f      	ldr	r2, [pc, #316]	; (8007a40 <HAL_TIM_PWM_ConfigChannel+0x4c4>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d009      	beq.n	800791c <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a4d      	ldr	r2, [pc, #308]	; (8007a44 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d004      	beq.n	800791c <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8007912:	f241 01ef 	movw	r1, #4335	; 0x10ef
 8007916:	484c      	ldr	r0, [pc, #304]	; (8007a48 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 8007918:	f7fa f97b 	bl	8001c12 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	68b9      	ldr	r1, [r7, #8]
 8007922:	4618      	mov	r0, r3
 8007924:	f000 fe92 	bl	800864c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	69da      	ldr	r2, [r3, #28]
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007936:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	69da      	ldr	r2, [r3, #28]
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007946:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	69d9      	ldr	r1, [r3, #28]
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	691b      	ldr	r3, [r3, #16]
 8007952:	021a      	lsls	r2, r3, #8
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	430a      	orrs	r2, r1
 800795a:	61da      	str	r2, [r3, #28]
      break;
 800795c:	e061      	b.n	8007a22 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a34      	ldr	r2, [pc, #208]	; (8007a34 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d009      	beq.n	800797c <HAL_TIM_PWM_ConfigChannel+0x400>
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a35      	ldr	r2, [pc, #212]	; (8007a44 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d004      	beq.n	800797c <HAL_TIM_PWM_ConfigChannel+0x400>
 8007972:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 8007976:	4834      	ldr	r0, [pc, #208]	; (8007a48 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 8007978:	f7fa f94b 	bl	8001c12 <assert_failed>

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	68b9      	ldr	r1, [r7, #8]
 8007982:	4618      	mov	r0, r3
 8007984:	f000 fec8 	bl	8008718 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f042 0208 	orr.w	r2, r2, #8
 8007996:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f022 0204 	bic.w	r2, r2, #4
 80079a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	691a      	ldr	r2, [r3, #16]
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	430a      	orrs	r2, r1
 80079b8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80079ba:	e032      	b.n	8007a22 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a1c      	ldr	r2, [pc, #112]	; (8007a34 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d009      	beq.n	80079da <HAL_TIM_PWM_ConfigChannel+0x45e>
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a1e      	ldr	r2, [pc, #120]	; (8007a44 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d004      	beq.n	80079da <HAL_TIM_PWM_ConfigChannel+0x45e>
 80079d0:	f241 1111 	movw	r1, #4369	; 0x1111
 80079d4:	481c      	ldr	r0, [pc, #112]	; (8007a48 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 80079d6:	f7fa f91c 	bl	8001c12 <assert_failed>

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	68b9      	ldr	r1, [r7, #8]
 80079e0:	4618      	mov	r0, r3
 80079e2:	f000 feeb 	bl	80087bc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079f4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a04:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	691b      	ldr	r3, [r3, #16]
 8007a10:	021a      	lsls	r2, r3, #8
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	430a      	orrs	r2, r1
 8007a18:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007a1a:	e002      	b.n	8007a22 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    default:
      status = HAL_ERROR;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	75fb      	strb	r3, [r7, #23]
      break;
 8007a20:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2200      	movs	r2, #0
 8007a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007a2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3718      	adds	r7, #24
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}
 8007a34:	40010000 	.word	0x40010000
 8007a38:	40000400 	.word	0x40000400
 8007a3c:	40000800 	.word	0x40000800
 8007a40:	40000c00 	.word	0x40000c00
 8007a44:	40010400 	.word	0x40010400
 8007a48:	08014af0 	.word	0x08014af0

08007a4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a56:	2300      	movs	r3, #0
 8007a58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d101      	bne.n	8007a68 <HAL_TIM_ConfigClockSource+0x1c>
 8007a64:	2302      	movs	r3, #2
 8007a66:	e332      	b.n	80080ce <HAL_TIM_ConfigClockSource+0x682>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2202      	movs	r2, #2
 8007a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a80:	d029      	beq.n	8007ad6 <HAL_TIM_ConfigClockSource+0x8a>
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	2b70      	cmp	r3, #112	; 0x70
 8007a88:	d025      	beq.n	8007ad6 <HAL_TIM_ConfigClockSource+0x8a>
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a92:	d020      	beq.n	8007ad6 <HAL_TIM_ConfigClockSource+0x8a>
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	2b40      	cmp	r3, #64	; 0x40
 8007a9a:	d01c      	beq.n	8007ad6 <HAL_TIM_ConfigClockSource+0x8a>
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	2b50      	cmp	r3, #80	; 0x50
 8007aa2:	d018      	beq.n	8007ad6 <HAL_TIM_ConfigClockSource+0x8a>
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	2b60      	cmp	r3, #96	; 0x60
 8007aaa:	d014      	beq.n	8007ad6 <HAL_TIM_ConfigClockSource+0x8a>
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d010      	beq.n	8007ad6 <HAL_TIM_ConfigClockSource+0x8a>
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	2b10      	cmp	r3, #16
 8007aba:	d00c      	beq.n	8007ad6 <HAL_TIM_ConfigClockSource+0x8a>
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	2b20      	cmp	r3, #32
 8007ac2:	d008      	beq.n	8007ad6 <HAL_TIM_ConfigClockSource+0x8a>
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	2b30      	cmp	r3, #48	; 0x30
 8007aca:	d004      	beq.n	8007ad6 <HAL_TIM_ConfigClockSource+0x8a>
 8007acc:	f241 514c 	movw	r1, #5452	; 0x154c
 8007ad0:	4893      	ldr	r0, [pc, #588]	; (8007d20 <HAL_TIM_ConfigClockSource+0x2d4>)
 8007ad2:	f7fa f89e 	bl	8001c12 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007ade:	68ba      	ldr	r2, [r7, #8]
 8007ae0:	4b90      	ldr	r3, [pc, #576]	; (8007d24 <HAL_TIM_ConfigClockSource+0x2d8>)
 8007ae2:	4013      	ands	r3, r2
 8007ae4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007aec:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	68ba      	ldr	r2, [r7, #8]
 8007af4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007afe:	f000 812d 	beq.w	8007d5c <HAL_TIM_ConfigClockSource+0x310>
 8007b02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b06:	f200 82d5 	bhi.w	80080b4 <HAL_TIM_ConfigClockSource+0x668>
 8007b0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b0e:	d02e      	beq.n	8007b6e <HAL_TIM_ConfigClockSource+0x122>
 8007b10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b14:	f200 82ce 	bhi.w	80080b4 <HAL_TIM_ConfigClockSource+0x668>
 8007b18:	2b70      	cmp	r3, #112	; 0x70
 8007b1a:	f000 8082 	beq.w	8007c22 <HAL_TIM_ConfigClockSource+0x1d6>
 8007b1e:	2b70      	cmp	r3, #112	; 0x70
 8007b20:	f200 82c8 	bhi.w	80080b4 <HAL_TIM_ConfigClockSource+0x668>
 8007b24:	2b60      	cmp	r3, #96	; 0x60
 8007b26:	f000 81e0 	beq.w	8007eea <HAL_TIM_ConfigClockSource+0x49e>
 8007b2a:	2b60      	cmp	r3, #96	; 0x60
 8007b2c:	f200 82c2 	bhi.w	80080b4 <HAL_TIM_ConfigClockSource+0x668>
 8007b30:	2b50      	cmp	r3, #80	; 0x50
 8007b32:	f000 8184 	beq.w	8007e3e <HAL_TIM_ConfigClockSource+0x3f2>
 8007b36:	2b50      	cmp	r3, #80	; 0x50
 8007b38:	f200 82bc 	bhi.w	80080b4 <HAL_TIM_ConfigClockSource+0x668>
 8007b3c:	2b40      	cmp	r3, #64	; 0x40
 8007b3e:	f000 8237 	beq.w	8007fb0 <HAL_TIM_ConfigClockSource+0x564>
 8007b42:	2b40      	cmp	r3, #64	; 0x40
 8007b44:	f200 82b6 	bhi.w	80080b4 <HAL_TIM_ConfigClockSource+0x668>
 8007b48:	2b30      	cmp	r3, #48	; 0x30
 8007b4a:	f000 8287 	beq.w	800805c <HAL_TIM_ConfigClockSource+0x610>
 8007b4e:	2b30      	cmp	r3, #48	; 0x30
 8007b50:	f200 82b0 	bhi.w	80080b4 <HAL_TIM_ConfigClockSource+0x668>
 8007b54:	2b20      	cmp	r3, #32
 8007b56:	f000 8281 	beq.w	800805c <HAL_TIM_ConfigClockSource+0x610>
 8007b5a:	2b20      	cmp	r3, #32
 8007b5c:	f200 82aa 	bhi.w	80080b4 <HAL_TIM_ConfigClockSource+0x668>
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	f000 827b 	beq.w	800805c <HAL_TIM_ConfigClockSource+0x610>
 8007b66:	2b10      	cmp	r3, #16
 8007b68:	f000 8278 	beq.w	800805c <HAL_TIM_ConfigClockSource+0x610>
 8007b6c:	e2a2      	b.n	80080b4 <HAL_TIM_ConfigClockSource+0x668>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a6d      	ldr	r2, [pc, #436]	; (8007d28 <HAL_TIM_ConfigClockSource+0x2dc>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	f000 82a0 	beq.w	80080ba <HAL_TIM_ConfigClockSource+0x66e>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b82:	f000 829a 	beq.w	80080ba <HAL_TIM_ConfigClockSource+0x66e>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a68      	ldr	r2, [pc, #416]	; (8007d2c <HAL_TIM_ConfigClockSource+0x2e0>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	f000 8294 	beq.w	80080ba <HAL_TIM_ConfigClockSource+0x66e>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a66      	ldr	r2, [pc, #408]	; (8007d30 <HAL_TIM_ConfigClockSource+0x2e4>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	f000 828e 	beq.w	80080ba <HAL_TIM_ConfigClockSource+0x66e>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a64      	ldr	r2, [pc, #400]	; (8007d34 <HAL_TIM_ConfigClockSource+0x2e8>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	f000 8288 	beq.w	80080ba <HAL_TIM_ConfigClockSource+0x66e>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a62      	ldr	r2, [pc, #392]	; (8007d38 <HAL_TIM_ConfigClockSource+0x2ec>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	f000 8282 	beq.w	80080ba <HAL_TIM_ConfigClockSource+0x66e>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a60      	ldr	r2, [pc, #384]	; (8007d3c <HAL_TIM_ConfigClockSource+0x2f0>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	f000 827c 	beq.w	80080ba <HAL_TIM_ConfigClockSource+0x66e>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a5e      	ldr	r2, [pc, #376]	; (8007d40 <HAL_TIM_ConfigClockSource+0x2f4>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	f000 8276 	beq.w	80080ba <HAL_TIM_ConfigClockSource+0x66e>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a5c      	ldr	r2, [pc, #368]	; (8007d44 <HAL_TIM_ConfigClockSource+0x2f8>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	f000 8270 	beq.w	80080ba <HAL_TIM_ConfigClockSource+0x66e>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a5a      	ldr	r2, [pc, #360]	; (8007d48 <HAL_TIM_ConfigClockSource+0x2fc>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	f000 826a 	beq.w	80080ba <HAL_TIM_ConfigClockSource+0x66e>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a58      	ldr	r2, [pc, #352]	; (8007d4c <HAL_TIM_ConfigClockSource+0x300>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	f000 8264 	beq.w	80080ba <HAL_TIM_ConfigClockSource+0x66e>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a56      	ldr	r2, [pc, #344]	; (8007d50 <HAL_TIM_ConfigClockSource+0x304>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	f000 825e 	beq.w	80080ba <HAL_TIM_ConfigClockSource+0x66e>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a54      	ldr	r2, [pc, #336]	; (8007d54 <HAL_TIM_ConfigClockSource+0x308>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	f000 8258 	beq.w	80080ba <HAL_TIM_ConfigClockSource+0x66e>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a52      	ldr	r2, [pc, #328]	; (8007d58 <HAL_TIM_ConfigClockSource+0x30c>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	f000 8252 	beq.w	80080ba <HAL_TIM_ConfigClockSource+0x66e>
 8007c16:	f241 5158 	movw	r1, #5464	; 0x1558
 8007c1a:	4841      	ldr	r0, [pc, #260]	; (8007d20 <HAL_TIM_ConfigClockSource+0x2d4>)
 8007c1c:	f7f9 fff9 	bl	8001c12 <assert_failed>
      break;
 8007c20:	e24b      	b.n	80080ba <HAL_TIM_ConfigClockSource+0x66e>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a40      	ldr	r2, [pc, #256]	; (8007d28 <HAL_TIM_ConfigClockSource+0x2dc>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d027      	beq.n	8007c7c <HAL_TIM_ConfigClockSource+0x230>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c34:	d022      	beq.n	8007c7c <HAL_TIM_ConfigClockSource+0x230>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a3c      	ldr	r2, [pc, #240]	; (8007d2c <HAL_TIM_ConfigClockSource+0x2e0>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d01d      	beq.n	8007c7c <HAL_TIM_ConfigClockSource+0x230>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a3a      	ldr	r2, [pc, #232]	; (8007d30 <HAL_TIM_ConfigClockSource+0x2e4>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d018      	beq.n	8007c7c <HAL_TIM_ConfigClockSource+0x230>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a39      	ldr	r2, [pc, #228]	; (8007d34 <HAL_TIM_ConfigClockSource+0x2e8>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d013      	beq.n	8007c7c <HAL_TIM_ConfigClockSource+0x230>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a39      	ldr	r2, [pc, #228]	; (8007d40 <HAL_TIM_ConfigClockSource+0x2f4>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d00e      	beq.n	8007c7c <HAL_TIM_ConfigClockSource+0x230>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a38      	ldr	r2, [pc, #224]	; (8007d44 <HAL_TIM_ConfigClockSource+0x2f8>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d009      	beq.n	8007c7c <HAL_TIM_ConfigClockSource+0x230>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a38      	ldr	r2, [pc, #224]	; (8007d50 <HAL_TIM_ConfigClockSource+0x304>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d004      	beq.n	8007c7c <HAL_TIM_ConfigClockSource+0x230>
 8007c72:	f241 515f 	movw	r1, #5471	; 0x155f
 8007c76:	482a      	ldr	r0, [pc, #168]	; (8007d20 <HAL_TIM_ConfigClockSource+0x2d4>)
 8007c78:	f7f9 ffcb 	bl	8001c12 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d013      	beq.n	8007cac <HAL_TIM_ConfigClockSource+0x260>
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c8c:	d00e      	beq.n	8007cac <HAL_TIM_ConfigClockSource+0x260>
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	689b      	ldr	r3, [r3, #8]
 8007c92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c96:	d009      	beq.n	8007cac <HAL_TIM_ConfigClockSource+0x260>
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007ca0:	d004      	beq.n	8007cac <HAL_TIM_ConfigClockSource+0x260>
 8007ca2:	f241 5162 	movw	r1, #5474	; 0x1562
 8007ca6:	481e      	ldr	r0, [pc, #120]	; (8007d20 <HAL_TIM_ConfigClockSource+0x2d4>)
 8007ca8:	f7f9 ffb3 	bl	8001c12 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cb4:	d014      	beq.n	8007ce0 <HAL_TIM_ConfigClockSource+0x294>
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d010      	beq.n	8007ce0 <HAL_TIM_ConfigClockSource+0x294>
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d00c      	beq.n	8007ce0 <HAL_TIM_ConfigClockSource+0x294>
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	2b02      	cmp	r3, #2
 8007ccc:	d008      	beq.n	8007ce0 <HAL_TIM_ConfigClockSource+0x294>
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	2b0a      	cmp	r3, #10
 8007cd4:	d004      	beq.n	8007ce0 <HAL_TIM_ConfigClockSource+0x294>
 8007cd6:	f241 5163 	movw	r1, #5475	; 0x1563
 8007cda:	4811      	ldr	r0, [pc, #68]	; (8007d20 <HAL_TIM_ConfigClockSource+0x2d4>)
 8007cdc:	f7f9 ff99 	bl	8001c12 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	68db      	ldr	r3, [r3, #12]
 8007ce4:	2b0f      	cmp	r3, #15
 8007ce6:	d904      	bls.n	8007cf2 <HAL_TIM_ConfigClockSource+0x2a6>
 8007ce8:	f241 5164 	movw	r1, #5476	; 0x1564
 8007cec:	480c      	ldr	r0, [pc, #48]	; (8007d20 <HAL_TIM_ConfigClockSource+0x2d4>)
 8007cee:	f7f9 ff90 	bl	8001c12 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6818      	ldr	r0, [r3, #0]
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	6899      	ldr	r1, [r3, #8]
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	685a      	ldr	r2, [r3, #4]
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	68db      	ldr	r3, [r3, #12]
 8007d02:	f000 fe29 	bl	8008958 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007d14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	68ba      	ldr	r2, [r7, #8]
 8007d1c:	609a      	str	r2, [r3, #8]
      break;
 8007d1e:	e1cd      	b.n	80080bc <HAL_TIM_ConfigClockSource+0x670>
 8007d20:	08014af0 	.word	0x08014af0
 8007d24:	fffeff88 	.word	0xfffeff88
 8007d28:	40010000 	.word	0x40010000
 8007d2c:	40000400 	.word	0x40000400
 8007d30:	40000800 	.word	0x40000800
 8007d34:	40000c00 	.word	0x40000c00
 8007d38:	40001000 	.word	0x40001000
 8007d3c:	40001400 	.word	0x40001400
 8007d40:	40010400 	.word	0x40010400
 8007d44:	40014000 	.word	0x40014000
 8007d48:	40014400 	.word	0x40014400
 8007d4c:	40014800 	.word	0x40014800
 8007d50:	40001800 	.word	0x40001800
 8007d54:	40001c00 	.word	0x40001c00
 8007d58:	40002000 	.word	0x40002000
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a8d      	ldr	r2, [pc, #564]	; (8007f98 <HAL_TIM_ConfigClockSource+0x54c>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d01d      	beq.n	8007da2 <HAL_TIM_ConfigClockSource+0x356>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d6e:	d018      	beq.n	8007da2 <HAL_TIM_ConfigClockSource+0x356>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a89      	ldr	r2, [pc, #548]	; (8007f9c <HAL_TIM_ConfigClockSource+0x550>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d013      	beq.n	8007da2 <HAL_TIM_ConfigClockSource+0x356>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a88      	ldr	r2, [pc, #544]	; (8007fa0 <HAL_TIM_ConfigClockSource+0x554>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d00e      	beq.n	8007da2 <HAL_TIM_ConfigClockSource+0x356>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a86      	ldr	r2, [pc, #536]	; (8007fa4 <HAL_TIM_ConfigClockSource+0x558>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d009      	beq.n	8007da2 <HAL_TIM_ConfigClockSource+0x356>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a85      	ldr	r2, [pc, #532]	; (8007fa8 <HAL_TIM_ConfigClockSource+0x55c>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d004      	beq.n	8007da2 <HAL_TIM_ConfigClockSource+0x356>
 8007d98:	f241 5177 	movw	r1, #5495	; 0x1577
 8007d9c:	4883      	ldr	r0, [pc, #524]	; (8007fac <HAL_TIM_ConfigClockSource+0x560>)
 8007d9e:	f7f9 ff38 	bl	8001c12 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	689b      	ldr	r3, [r3, #8]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d013      	beq.n	8007dd2 <HAL_TIM_ConfigClockSource+0x386>
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007db2:	d00e      	beq.n	8007dd2 <HAL_TIM_ConfigClockSource+0x386>
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	689b      	ldr	r3, [r3, #8]
 8007db8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dbc:	d009      	beq.n	8007dd2 <HAL_TIM_ConfigClockSource+0x386>
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007dc6:	d004      	beq.n	8007dd2 <HAL_TIM_ConfigClockSource+0x386>
 8007dc8:	f241 517a 	movw	r1, #5498	; 0x157a
 8007dcc:	4877      	ldr	r0, [pc, #476]	; (8007fac <HAL_TIM_ConfigClockSource+0x560>)
 8007dce:	f7f9 ff20 	bl	8001c12 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007dda:	d014      	beq.n	8007e06 <HAL_TIM_ConfigClockSource+0x3ba>
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d010      	beq.n	8007e06 <HAL_TIM_ConfigClockSource+0x3ba>
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d00c      	beq.n	8007e06 <HAL_TIM_ConfigClockSource+0x3ba>
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	2b02      	cmp	r3, #2
 8007df2:	d008      	beq.n	8007e06 <HAL_TIM_ConfigClockSource+0x3ba>
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	685b      	ldr	r3, [r3, #4]
 8007df8:	2b0a      	cmp	r3, #10
 8007dfa:	d004      	beq.n	8007e06 <HAL_TIM_ConfigClockSource+0x3ba>
 8007dfc:	f241 517b 	movw	r1, #5499	; 0x157b
 8007e00:	486a      	ldr	r0, [pc, #424]	; (8007fac <HAL_TIM_ConfigClockSource+0x560>)
 8007e02:	f7f9 ff06 	bl	8001c12 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	68db      	ldr	r3, [r3, #12]
 8007e0a:	2b0f      	cmp	r3, #15
 8007e0c:	d904      	bls.n	8007e18 <HAL_TIM_ConfigClockSource+0x3cc>
 8007e0e:	f241 517c 	movw	r1, #5500	; 0x157c
 8007e12:	4866      	ldr	r0, [pc, #408]	; (8007fac <HAL_TIM_ConfigClockSource+0x560>)
 8007e14:	f7f9 fefd 	bl	8001c12 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6818      	ldr	r0, [r3, #0]
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	6899      	ldr	r1, [r3, #8]
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	685a      	ldr	r2, [r3, #4]
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	68db      	ldr	r3, [r3, #12]
 8007e28:	f000 fd96 	bl	8008958 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	689a      	ldr	r2, [r3, #8]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007e3a:	609a      	str	r2, [r3, #8]
      break;
 8007e3c:	e13e      	b.n	80080bc <HAL_TIM_ConfigClockSource+0x670>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a55      	ldr	r2, [pc, #340]	; (8007f98 <HAL_TIM_ConfigClockSource+0x54c>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d01d      	beq.n	8007e84 <HAL_TIM_ConfigClockSource+0x438>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e50:	d018      	beq.n	8007e84 <HAL_TIM_ConfigClockSource+0x438>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a51      	ldr	r2, [pc, #324]	; (8007f9c <HAL_TIM_ConfigClockSource+0x550>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d013      	beq.n	8007e84 <HAL_TIM_ConfigClockSource+0x438>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a4f      	ldr	r2, [pc, #316]	; (8007fa0 <HAL_TIM_ConfigClockSource+0x554>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d00e      	beq.n	8007e84 <HAL_TIM_ConfigClockSource+0x438>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a4e      	ldr	r2, [pc, #312]	; (8007fa4 <HAL_TIM_ConfigClockSource+0x558>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d009      	beq.n	8007e84 <HAL_TIM_ConfigClockSource+0x438>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a4c      	ldr	r2, [pc, #304]	; (8007fa8 <HAL_TIM_ConfigClockSource+0x55c>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d004      	beq.n	8007e84 <HAL_TIM_ConfigClockSource+0x438>
 8007e7a:	f241 518b 	movw	r1, #5515	; 0x158b
 8007e7e:	484b      	ldr	r0, [pc, #300]	; (8007fac <HAL_TIM_ConfigClockSource+0x560>)
 8007e80:	f7f9 fec7 	bl	8001c12 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e8c:	d014      	beq.n	8007eb8 <HAL_TIM_ConfigClockSource+0x46c>
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	685b      	ldr	r3, [r3, #4]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d010      	beq.n	8007eb8 <HAL_TIM_ConfigClockSource+0x46c>
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d00c      	beq.n	8007eb8 <HAL_TIM_ConfigClockSource+0x46c>
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	2b02      	cmp	r3, #2
 8007ea4:	d008      	beq.n	8007eb8 <HAL_TIM_ConfigClockSource+0x46c>
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	2b0a      	cmp	r3, #10
 8007eac:	d004      	beq.n	8007eb8 <HAL_TIM_ConfigClockSource+0x46c>
 8007eae:	f241 518e 	movw	r1, #5518	; 0x158e
 8007eb2:	483e      	ldr	r0, [pc, #248]	; (8007fac <HAL_TIM_ConfigClockSource+0x560>)
 8007eb4:	f7f9 fead 	bl	8001c12 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	68db      	ldr	r3, [r3, #12]
 8007ebc:	2b0f      	cmp	r3, #15
 8007ebe:	d904      	bls.n	8007eca <HAL_TIM_ConfigClockSource+0x47e>
 8007ec0:	f241 518f 	movw	r1, #5519	; 0x158f
 8007ec4:	4839      	ldr	r0, [pc, #228]	; (8007fac <HAL_TIM_ConfigClockSource+0x560>)
 8007ec6:	f7f9 fea4 	bl	8001c12 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6818      	ldr	r0, [r3, #0]
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	6859      	ldr	r1, [r3, #4]
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	68db      	ldr	r3, [r3, #12]
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	f000 fcc4 	bl	8008864 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	2150      	movs	r1, #80	; 0x50
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f000 fd1d 	bl	8008922 <TIM_ITRx_SetConfig>
      break;
 8007ee8:	e0e8      	b.n	80080bc <HAL_TIM_ConfigClockSource+0x670>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4a2a      	ldr	r2, [pc, #168]	; (8007f98 <HAL_TIM_ConfigClockSource+0x54c>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d01d      	beq.n	8007f30 <HAL_TIM_ConfigClockSource+0x4e4>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007efc:	d018      	beq.n	8007f30 <HAL_TIM_ConfigClockSource+0x4e4>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a26      	ldr	r2, [pc, #152]	; (8007f9c <HAL_TIM_ConfigClockSource+0x550>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d013      	beq.n	8007f30 <HAL_TIM_ConfigClockSource+0x4e4>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a24      	ldr	r2, [pc, #144]	; (8007fa0 <HAL_TIM_ConfigClockSource+0x554>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d00e      	beq.n	8007f30 <HAL_TIM_ConfigClockSource+0x4e4>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4a23      	ldr	r2, [pc, #140]	; (8007fa4 <HAL_TIM_ConfigClockSource+0x558>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d009      	beq.n	8007f30 <HAL_TIM_ConfigClockSource+0x4e4>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a21      	ldr	r2, [pc, #132]	; (8007fa8 <HAL_TIM_ConfigClockSource+0x55c>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d004      	beq.n	8007f30 <HAL_TIM_ConfigClockSource+0x4e4>
 8007f26:	f241 519b 	movw	r1, #5531	; 0x159b
 8007f2a:	4820      	ldr	r0, [pc, #128]	; (8007fac <HAL_TIM_ConfigClockSource+0x560>)
 8007f2c:	f7f9 fe71 	bl	8001c12 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f38:	d014      	beq.n	8007f64 <HAL_TIM_ConfigClockSource+0x518>
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d010      	beq.n	8007f64 <HAL_TIM_ConfigClockSource+0x518>
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d00c      	beq.n	8007f64 <HAL_TIM_ConfigClockSource+0x518>
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	2b02      	cmp	r3, #2
 8007f50:	d008      	beq.n	8007f64 <HAL_TIM_ConfigClockSource+0x518>
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	2b0a      	cmp	r3, #10
 8007f58:	d004      	beq.n	8007f64 <HAL_TIM_ConfigClockSource+0x518>
 8007f5a:	f241 519e 	movw	r1, #5534	; 0x159e
 8007f5e:	4813      	ldr	r0, [pc, #76]	; (8007fac <HAL_TIM_ConfigClockSource+0x560>)
 8007f60:	f7f9 fe57 	bl	8001c12 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	68db      	ldr	r3, [r3, #12]
 8007f68:	2b0f      	cmp	r3, #15
 8007f6a:	d904      	bls.n	8007f76 <HAL_TIM_ConfigClockSource+0x52a>
 8007f6c:	f241 519f 	movw	r1, #5535	; 0x159f
 8007f70:	480e      	ldr	r0, [pc, #56]	; (8007fac <HAL_TIM_ConfigClockSource+0x560>)
 8007f72:	f7f9 fe4e 	bl	8001c12 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6818      	ldr	r0, [r3, #0]
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	6859      	ldr	r1, [r3, #4]
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	68db      	ldr	r3, [r3, #12]
 8007f82:	461a      	mov	r2, r3
 8007f84:	f000 fc9d 	bl	80088c2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	2160      	movs	r1, #96	; 0x60
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f000 fcc7 	bl	8008922 <TIM_ITRx_SetConfig>
      break;
 8007f94:	e092      	b.n	80080bc <HAL_TIM_ConfigClockSource+0x670>
 8007f96:	bf00      	nop
 8007f98:	40010000 	.word	0x40010000
 8007f9c:	40000400 	.word	0x40000400
 8007fa0:	40000800 	.word	0x40000800
 8007fa4:	40000c00 	.word	0x40000c00
 8007fa8:	40010400 	.word	0x40010400
 8007fac:	08014af0 	.word	0x08014af0
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a48      	ldr	r2, [pc, #288]	; (80080d8 <HAL_TIM_ConfigClockSource+0x68c>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d01d      	beq.n	8007ff6 <HAL_TIM_ConfigClockSource+0x5aa>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fc2:	d018      	beq.n	8007ff6 <HAL_TIM_ConfigClockSource+0x5aa>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a44      	ldr	r2, [pc, #272]	; (80080dc <HAL_TIM_ConfigClockSource+0x690>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d013      	beq.n	8007ff6 <HAL_TIM_ConfigClockSource+0x5aa>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4a43      	ldr	r2, [pc, #268]	; (80080e0 <HAL_TIM_ConfigClockSource+0x694>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d00e      	beq.n	8007ff6 <HAL_TIM_ConfigClockSource+0x5aa>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a41      	ldr	r2, [pc, #260]	; (80080e4 <HAL_TIM_ConfigClockSource+0x698>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d009      	beq.n	8007ff6 <HAL_TIM_ConfigClockSource+0x5aa>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a40      	ldr	r2, [pc, #256]	; (80080e8 <HAL_TIM_ConfigClockSource+0x69c>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d004      	beq.n	8007ff6 <HAL_TIM_ConfigClockSource+0x5aa>
 8007fec:	f241 51ab 	movw	r1, #5547	; 0x15ab
 8007ff0:	483e      	ldr	r0, [pc, #248]	; (80080ec <HAL_TIM_ConfigClockSource+0x6a0>)
 8007ff2:	f7f9 fe0e 	bl	8001c12 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ffe:	d014      	beq.n	800802a <HAL_TIM_ConfigClockSource+0x5de>
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d010      	beq.n	800802a <HAL_TIM_ConfigClockSource+0x5de>
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d00c      	beq.n	800802a <HAL_TIM_ConfigClockSource+0x5de>
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	2b02      	cmp	r3, #2
 8008016:	d008      	beq.n	800802a <HAL_TIM_ConfigClockSource+0x5de>
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	2b0a      	cmp	r3, #10
 800801e:	d004      	beq.n	800802a <HAL_TIM_ConfigClockSource+0x5de>
 8008020:	f241 51ae 	movw	r1, #5550	; 0x15ae
 8008024:	4831      	ldr	r0, [pc, #196]	; (80080ec <HAL_TIM_ConfigClockSource+0x6a0>)
 8008026:	f7f9 fdf4 	bl	8001c12 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	68db      	ldr	r3, [r3, #12]
 800802e:	2b0f      	cmp	r3, #15
 8008030:	d904      	bls.n	800803c <HAL_TIM_ConfigClockSource+0x5f0>
 8008032:	f241 51af 	movw	r1, #5551	; 0x15af
 8008036:	482d      	ldr	r0, [pc, #180]	; (80080ec <HAL_TIM_ConfigClockSource+0x6a0>)
 8008038:	f7f9 fdeb 	bl	8001c12 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6818      	ldr	r0, [r3, #0]
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	6859      	ldr	r1, [r3, #4]
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	68db      	ldr	r3, [r3, #12]
 8008048:	461a      	mov	r2, r3
 800804a:	f000 fc0b 	bl	8008864 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	2140      	movs	r1, #64	; 0x40
 8008054:	4618      	mov	r0, r3
 8008056:	f000 fc64 	bl	8008922 <TIM_ITRx_SetConfig>
      break;
 800805a:	e02f      	b.n	80080bc <HAL_TIM_ConfigClockSource+0x670>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a1d      	ldr	r2, [pc, #116]	; (80080d8 <HAL_TIM_ConfigClockSource+0x68c>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d01d      	beq.n	80080a2 <HAL_TIM_ConfigClockSource+0x656>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800806e:	d018      	beq.n	80080a2 <HAL_TIM_ConfigClockSource+0x656>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a19      	ldr	r2, [pc, #100]	; (80080dc <HAL_TIM_ConfigClockSource+0x690>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d013      	beq.n	80080a2 <HAL_TIM_ConfigClockSource+0x656>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4a18      	ldr	r2, [pc, #96]	; (80080e0 <HAL_TIM_ConfigClockSource+0x694>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d00e      	beq.n	80080a2 <HAL_TIM_ConfigClockSource+0x656>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a16      	ldr	r2, [pc, #88]	; (80080e4 <HAL_TIM_ConfigClockSource+0x698>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d009      	beq.n	80080a2 <HAL_TIM_ConfigClockSource+0x656>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a15      	ldr	r2, [pc, #84]	; (80080e8 <HAL_TIM_ConfigClockSource+0x69c>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d004      	beq.n	80080a2 <HAL_TIM_ConfigClockSource+0x656>
 8008098:	f241 51be 	movw	r1, #5566	; 0x15be
 800809c:	4813      	ldr	r0, [pc, #76]	; (80080ec <HAL_TIM_ConfigClockSource+0x6a0>)
 800809e:	f7f9 fdb8 	bl	8001c12 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681a      	ldr	r2, [r3, #0]
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4619      	mov	r1, r3
 80080ac:	4610      	mov	r0, r2
 80080ae:	f000 fc38 	bl	8008922 <TIM_ITRx_SetConfig>
      break;
 80080b2:	e003      	b.n	80080bc <HAL_TIM_ConfigClockSource+0x670>
    }

    default:
      status = HAL_ERROR;
 80080b4:	2301      	movs	r3, #1
 80080b6:	73fb      	strb	r3, [r7, #15]
      break;
 80080b8:	e000      	b.n	80080bc <HAL_TIM_ConfigClockSource+0x670>
      break;
 80080ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2201      	movs	r2, #1
 80080c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2200      	movs	r2, #0
 80080c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80080cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3710      	adds	r7, #16
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}
 80080d6:	bf00      	nop
 80080d8:	40010000 	.word	0x40010000
 80080dc:	40000400 	.word	0x40000400
 80080e0:	40000800 	.word	0x40000800
 80080e4:	40000c00 	.word	0x40000c00
 80080e8:	40010400 	.word	0x40010400
 80080ec:	08014af0 	.word	0x08014af0

080080f0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b083      	sub	sp, #12
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80080f8:	bf00      	nop
 80080fa:	370c      	adds	r7, #12
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr

08008104 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008104:	b480      	push	{r7}
 8008106:	b083      	sub	sp, #12
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800810c:	bf00      	nop
 800810e:	370c      	adds	r7, #12
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr

08008118 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008118:	b480      	push	{r7}
 800811a:	b083      	sub	sp, #12
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008120:	bf00      	nop
 8008122:	370c      	adds	r7, #12
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr

0800812c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800812c:	b480      	push	{r7}
 800812e:	b083      	sub	sp, #12
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008134:	bf00      	nop
 8008136:	370c      	adds	r7, #12
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr

08008140 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008140:	b480      	push	{r7}
 8008142:	b083      	sub	sp, #12
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008148:	bf00      	nop
 800814a:	370c      	adds	r7, #12
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr

08008154 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008154:	b480      	push	{r7}
 8008156:	b085      	sub	sp, #20
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	4a40      	ldr	r2, [pc, #256]	; (8008268 <TIM_Base_SetConfig+0x114>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d013      	beq.n	8008194 <TIM_Base_SetConfig+0x40>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008172:	d00f      	beq.n	8008194 <TIM_Base_SetConfig+0x40>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	4a3d      	ldr	r2, [pc, #244]	; (800826c <TIM_Base_SetConfig+0x118>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d00b      	beq.n	8008194 <TIM_Base_SetConfig+0x40>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	4a3c      	ldr	r2, [pc, #240]	; (8008270 <TIM_Base_SetConfig+0x11c>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d007      	beq.n	8008194 <TIM_Base_SetConfig+0x40>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	4a3b      	ldr	r2, [pc, #236]	; (8008274 <TIM_Base_SetConfig+0x120>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d003      	beq.n	8008194 <TIM_Base_SetConfig+0x40>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	4a3a      	ldr	r2, [pc, #232]	; (8008278 <TIM_Base_SetConfig+0x124>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d108      	bne.n	80081a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800819a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	68fa      	ldr	r2, [r7, #12]
 80081a2:	4313      	orrs	r3, r2
 80081a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	4a2f      	ldr	r2, [pc, #188]	; (8008268 <TIM_Base_SetConfig+0x114>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d02b      	beq.n	8008206 <TIM_Base_SetConfig+0xb2>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081b4:	d027      	beq.n	8008206 <TIM_Base_SetConfig+0xb2>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	4a2c      	ldr	r2, [pc, #176]	; (800826c <TIM_Base_SetConfig+0x118>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d023      	beq.n	8008206 <TIM_Base_SetConfig+0xb2>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	4a2b      	ldr	r2, [pc, #172]	; (8008270 <TIM_Base_SetConfig+0x11c>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d01f      	beq.n	8008206 <TIM_Base_SetConfig+0xb2>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	4a2a      	ldr	r2, [pc, #168]	; (8008274 <TIM_Base_SetConfig+0x120>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d01b      	beq.n	8008206 <TIM_Base_SetConfig+0xb2>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	4a29      	ldr	r2, [pc, #164]	; (8008278 <TIM_Base_SetConfig+0x124>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d017      	beq.n	8008206 <TIM_Base_SetConfig+0xb2>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	4a28      	ldr	r2, [pc, #160]	; (800827c <TIM_Base_SetConfig+0x128>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d013      	beq.n	8008206 <TIM_Base_SetConfig+0xb2>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	4a27      	ldr	r2, [pc, #156]	; (8008280 <TIM_Base_SetConfig+0x12c>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d00f      	beq.n	8008206 <TIM_Base_SetConfig+0xb2>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	4a26      	ldr	r2, [pc, #152]	; (8008284 <TIM_Base_SetConfig+0x130>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d00b      	beq.n	8008206 <TIM_Base_SetConfig+0xb2>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	4a25      	ldr	r2, [pc, #148]	; (8008288 <TIM_Base_SetConfig+0x134>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d007      	beq.n	8008206 <TIM_Base_SetConfig+0xb2>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	4a24      	ldr	r2, [pc, #144]	; (800828c <TIM_Base_SetConfig+0x138>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d003      	beq.n	8008206 <TIM_Base_SetConfig+0xb2>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	4a23      	ldr	r2, [pc, #140]	; (8008290 <TIM_Base_SetConfig+0x13c>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d108      	bne.n	8008218 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800820c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	68db      	ldr	r3, [r3, #12]
 8008212:	68fa      	ldr	r2, [r7, #12]
 8008214:	4313      	orrs	r3, r2
 8008216:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	695b      	ldr	r3, [r3, #20]
 8008222:	4313      	orrs	r3, r2
 8008224:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	68fa      	ldr	r2, [r7, #12]
 800822a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	689a      	ldr	r2, [r3, #8]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	681a      	ldr	r2, [r3, #0]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	4a0a      	ldr	r2, [pc, #40]	; (8008268 <TIM_Base_SetConfig+0x114>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d003      	beq.n	800824c <TIM_Base_SetConfig+0xf8>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	4a0c      	ldr	r2, [pc, #48]	; (8008278 <TIM_Base_SetConfig+0x124>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d103      	bne.n	8008254 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	691a      	ldr	r2, [r3, #16]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2201      	movs	r2, #1
 8008258:	615a      	str	r2, [r3, #20]
}
 800825a:	bf00      	nop
 800825c:	3714      	adds	r7, #20
 800825e:	46bd      	mov	sp, r7
 8008260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008264:	4770      	bx	lr
 8008266:	bf00      	nop
 8008268:	40010000 	.word	0x40010000
 800826c:	40000400 	.word	0x40000400
 8008270:	40000800 	.word	0x40000800
 8008274:	40000c00 	.word	0x40000c00
 8008278:	40010400 	.word	0x40010400
 800827c:	40014000 	.word	0x40014000
 8008280:	40014400 	.word	0x40014400
 8008284:	40014800 	.word	0x40014800
 8008288:	40001800 	.word	0x40001800
 800828c:	40001c00 	.word	0x40001c00
 8008290:	40002000 	.word	0x40002000

08008294 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b086      	sub	sp, #24
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
 800829c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6a1b      	ldr	r3, [r3, #32]
 80082a2:	f023 0201 	bic.w	r2, r3, #1
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6a1b      	ldr	r3, [r3, #32]
 80082ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	699b      	ldr	r3, [r3, #24]
 80082ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80082bc:	68fa      	ldr	r2, [r7, #12]
 80082be:	4b3f      	ldr	r3, [pc, #252]	; (80083bc <TIM_OC1_SetConfig+0x128>)
 80082c0:	4013      	ands	r3, r2
 80082c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f023 0303 	bic.w	r3, r3, #3
 80082ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	68fa      	ldr	r2, [r7, #12]
 80082d2:	4313      	orrs	r3, r2
 80082d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	f023 0302 	bic.w	r3, r3, #2
 80082dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	689b      	ldr	r3, [r3, #8]
 80082e2:	697a      	ldr	r2, [r7, #20]
 80082e4:	4313      	orrs	r3, r2
 80082e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	4a35      	ldr	r2, [pc, #212]	; (80083c0 <TIM_OC1_SetConfig+0x12c>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d003      	beq.n	80082f8 <TIM_OC1_SetConfig+0x64>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	4a34      	ldr	r2, [pc, #208]	; (80083c4 <TIM_OC1_SetConfig+0x130>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d119      	bne.n	800832c <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	68db      	ldr	r3, [r3, #12]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d008      	beq.n	8008312 <TIM_OC1_SetConfig+0x7e>
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	68db      	ldr	r3, [r3, #12]
 8008304:	2b08      	cmp	r3, #8
 8008306:	d004      	beq.n	8008312 <TIM_OC1_SetConfig+0x7e>
 8008308:	f641 3167 	movw	r1, #7015	; 0x1b67
 800830c:	482e      	ldr	r0, [pc, #184]	; (80083c8 <TIM_OC1_SetConfig+0x134>)
 800830e:	f7f9 fc80 	bl	8001c12 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	f023 0308 	bic.w	r3, r3, #8
 8008318:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	68db      	ldr	r3, [r3, #12]
 800831e:	697a      	ldr	r2, [r7, #20]
 8008320:	4313      	orrs	r3, r2
 8008322:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	f023 0304 	bic.w	r3, r3, #4
 800832a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	4a24      	ldr	r2, [pc, #144]	; (80083c0 <TIM_OC1_SetConfig+0x12c>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d003      	beq.n	800833c <TIM_OC1_SetConfig+0xa8>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	4a23      	ldr	r2, [pc, #140]	; (80083c4 <TIM_OC1_SetConfig+0x130>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d12d      	bne.n	8008398 <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	699b      	ldr	r3, [r3, #24]
 8008340:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008344:	d008      	beq.n	8008358 <TIM_OC1_SetConfig+0xc4>
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	699b      	ldr	r3, [r3, #24]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d004      	beq.n	8008358 <TIM_OC1_SetConfig+0xc4>
 800834e:	f641 3174 	movw	r1, #7028	; 0x1b74
 8008352:	481d      	ldr	r0, [pc, #116]	; (80083c8 <TIM_OC1_SetConfig+0x134>)
 8008354:	f7f9 fc5d 	bl	8001c12 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	695b      	ldr	r3, [r3, #20]
 800835c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008360:	d008      	beq.n	8008374 <TIM_OC1_SetConfig+0xe0>
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	695b      	ldr	r3, [r3, #20]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d004      	beq.n	8008374 <TIM_OC1_SetConfig+0xe0>
 800836a:	f641 3175 	movw	r1, #7029	; 0x1b75
 800836e:	4816      	ldr	r0, [pc, #88]	; (80083c8 <TIM_OC1_SetConfig+0x134>)
 8008370:	f7f9 fc4f 	bl	8001c12 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008374:	693b      	ldr	r3, [r7, #16]
 8008376:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800837a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008382:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	695b      	ldr	r3, [r3, #20]
 8008388:	693a      	ldr	r2, [r7, #16]
 800838a:	4313      	orrs	r3, r2
 800838c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	699b      	ldr	r3, [r3, #24]
 8008392:	693a      	ldr	r2, [r7, #16]
 8008394:	4313      	orrs	r3, r2
 8008396:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	693a      	ldr	r2, [r7, #16]
 800839c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	68fa      	ldr	r2, [r7, #12]
 80083a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	685a      	ldr	r2, [r3, #4]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	697a      	ldr	r2, [r7, #20]
 80083b0:	621a      	str	r2, [r3, #32]
}
 80083b2:	bf00      	nop
 80083b4:	3718      	adds	r7, #24
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}
 80083ba:	bf00      	nop
 80083bc:	fffeff8f 	.word	0xfffeff8f
 80083c0:	40010000 	.word	0x40010000
 80083c4:	40010400 	.word	0x40010400
 80083c8:	08014af0 	.word	0x08014af0

080083cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b086      	sub	sp, #24
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
 80083d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6a1b      	ldr	r3, [r3, #32]
 80083da:	f023 0210 	bic.w	r2, r3, #16
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6a1b      	ldr	r3, [r3, #32]
 80083e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	699b      	ldr	r3, [r3, #24]
 80083f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80083f4:	68fa      	ldr	r2, [r7, #12]
 80083f6:	4b41      	ldr	r3, [pc, #260]	; (80084fc <TIM_OC2_SetConfig+0x130>)
 80083f8:	4013      	ands	r3, r2
 80083fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008402:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	021b      	lsls	r3, r3, #8
 800840a:	68fa      	ldr	r2, [r7, #12]
 800840c:	4313      	orrs	r3, r2
 800840e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	f023 0320 	bic.w	r3, r3, #32
 8008416:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	689b      	ldr	r3, [r3, #8]
 800841c:	011b      	lsls	r3, r3, #4
 800841e:	697a      	ldr	r2, [r7, #20]
 8008420:	4313      	orrs	r3, r2
 8008422:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	4a36      	ldr	r2, [pc, #216]	; (8008500 <TIM_OC2_SetConfig+0x134>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d003      	beq.n	8008434 <TIM_OC2_SetConfig+0x68>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	4a35      	ldr	r2, [pc, #212]	; (8008504 <TIM_OC2_SetConfig+0x138>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d11a      	bne.n	800846a <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	68db      	ldr	r3, [r3, #12]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d008      	beq.n	800844e <TIM_OC2_SetConfig+0x82>
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	68db      	ldr	r3, [r3, #12]
 8008440:	2b08      	cmp	r3, #8
 8008442:	d004      	beq.n	800844e <TIM_OC2_SetConfig+0x82>
 8008444:	f641 31b2 	movw	r1, #7090	; 0x1bb2
 8008448:	482f      	ldr	r0, [pc, #188]	; (8008508 <TIM_OC2_SetConfig+0x13c>)
 800844a:	f7f9 fbe2 	bl	8001c12 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008454:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	68db      	ldr	r3, [r3, #12]
 800845a:	011b      	lsls	r3, r3, #4
 800845c:	697a      	ldr	r2, [r7, #20]
 800845e:	4313      	orrs	r3, r2
 8008460:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008468:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	4a24      	ldr	r2, [pc, #144]	; (8008500 <TIM_OC2_SetConfig+0x134>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d003      	beq.n	800847a <TIM_OC2_SetConfig+0xae>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	4a23      	ldr	r2, [pc, #140]	; (8008504 <TIM_OC2_SetConfig+0x138>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d12f      	bne.n	80084da <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	699b      	ldr	r3, [r3, #24]
 800847e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008482:	d008      	beq.n	8008496 <TIM_OC2_SetConfig+0xca>
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	699b      	ldr	r3, [r3, #24]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d004      	beq.n	8008496 <TIM_OC2_SetConfig+0xca>
 800848c:	f44f 51de 	mov.w	r1, #7104	; 0x1bc0
 8008490:	481d      	ldr	r0, [pc, #116]	; (8008508 <TIM_OC2_SetConfig+0x13c>)
 8008492:	f7f9 fbbe 	bl	8001c12 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	695b      	ldr	r3, [r3, #20]
 800849a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800849e:	d008      	beq.n	80084b2 <TIM_OC2_SetConfig+0xe6>
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	695b      	ldr	r3, [r3, #20]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d004      	beq.n	80084b2 <TIM_OC2_SetConfig+0xe6>
 80084a8:	f641 31c1 	movw	r1, #7105	; 0x1bc1
 80084ac:	4816      	ldr	r0, [pc, #88]	; (8008508 <TIM_OC2_SetConfig+0x13c>)
 80084ae:	f7f9 fbb0 	bl	8001c12 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80084b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80084c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	695b      	ldr	r3, [r3, #20]
 80084c6:	009b      	lsls	r3, r3, #2
 80084c8:	693a      	ldr	r2, [r7, #16]
 80084ca:	4313      	orrs	r3, r2
 80084cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	699b      	ldr	r3, [r3, #24]
 80084d2:	009b      	lsls	r3, r3, #2
 80084d4:	693a      	ldr	r2, [r7, #16]
 80084d6:	4313      	orrs	r3, r2
 80084d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	693a      	ldr	r2, [r7, #16]
 80084de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	68fa      	ldr	r2, [r7, #12]
 80084e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	685a      	ldr	r2, [r3, #4]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	697a      	ldr	r2, [r7, #20]
 80084f2:	621a      	str	r2, [r3, #32]
}
 80084f4:	bf00      	nop
 80084f6:	3718      	adds	r7, #24
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}
 80084fc:	feff8fff 	.word	0xfeff8fff
 8008500:	40010000 	.word	0x40010000
 8008504:	40010400 	.word	0x40010400
 8008508:	08014af0 	.word	0x08014af0

0800850c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b086      	sub	sp, #24
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6a1b      	ldr	r3, [r3, #32]
 800851a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6a1b      	ldr	r3, [r3, #32]
 8008526:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	685b      	ldr	r3, [r3, #4]
 800852c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	69db      	ldr	r3, [r3, #28]
 8008532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008534:	68fa      	ldr	r2, [r7, #12]
 8008536:	4b41      	ldr	r3, [pc, #260]	; (800863c <TIM_OC3_SetConfig+0x130>)
 8008538:	4013      	ands	r3, r2
 800853a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f023 0303 	bic.w	r3, r3, #3
 8008542:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	68fa      	ldr	r2, [r7, #12]
 800854a:	4313      	orrs	r3, r2
 800854c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008554:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	689b      	ldr	r3, [r3, #8]
 800855a:	021b      	lsls	r3, r3, #8
 800855c:	697a      	ldr	r2, [r7, #20]
 800855e:	4313      	orrs	r3, r2
 8008560:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	4a36      	ldr	r2, [pc, #216]	; (8008640 <TIM_OC3_SetConfig+0x134>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d003      	beq.n	8008572 <TIM_OC3_SetConfig+0x66>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	4a35      	ldr	r2, [pc, #212]	; (8008644 <TIM_OC3_SetConfig+0x138>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d11a      	bne.n	80085a8 <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	68db      	ldr	r3, [r3, #12]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d008      	beq.n	800858c <TIM_OC3_SetConfig+0x80>
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	68db      	ldr	r3, [r3, #12]
 800857e:	2b08      	cmp	r3, #8
 8008580:	d004      	beq.n	800858c <TIM_OC3_SetConfig+0x80>
 8008582:	f641 31fd 	movw	r1, #7165	; 0x1bfd
 8008586:	4830      	ldr	r0, [pc, #192]	; (8008648 <TIM_OC3_SetConfig+0x13c>)
 8008588:	f7f9 fb43 	bl	8001c12 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008592:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	68db      	ldr	r3, [r3, #12]
 8008598:	021b      	lsls	r3, r3, #8
 800859a:	697a      	ldr	r2, [r7, #20]
 800859c:	4313      	orrs	r3, r2
 800859e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80085a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	4a25      	ldr	r2, [pc, #148]	; (8008640 <TIM_OC3_SetConfig+0x134>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d003      	beq.n	80085b8 <TIM_OC3_SetConfig+0xac>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	4a24      	ldr	r2, [pc, #144]	; (8008644 <TIM_OC3_SetConfig+0x138>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d12f      	bne.n	8008618 <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	699b      	ldr	r3, [r3, #24]
 80085bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085c0:	d008      	beq.n	80085d4 <TIM_OC3_SetConfig+0xc8>
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	699b      	ldr	r3, [r3, #24]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d004      	beq.n	80085d4 <TIM_OC3_SetConfig+0xc8>
 80085ca:	f641 410a 	movw	r1, #7178	; 0x1c0a
 80085ce:	481e      	ldr	r0, [pc, #120]	; (8008648 <TIM_OC3_SetConfig+0x13c>)
 80085d0:	f7f9 fb1f 	bl	8001c12 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	695b      	ldr	r3, [r3, #20]
 80085d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085dc:	d008      	beq.n	80085f0 <TIM_OC3_SetConfig+0xe4>
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	695b      	ldr	r3, [r3, #20]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d004      	beq.n	80085f0 <TIM_OC3_SetConfig+0xe4>
 80085e6:	f641 410b 	movw	r1, #7179	; 0x1c0b
 80085ea:	4817      	ldr	r0, [pc, #92]	; (8008648 <TIM_OC3_SetConfig+0x13c>)
 80085ec:	f7f9 fb11 	bl	8001c12 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80085f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80085fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	695b      	ldr	r3, [r3, #20]
 8008604:	011b      	lsls	r3, r3, #4
 8008606:	693a      	ldr	r2, [r7, #16]
 8008608:	4313      	orrs	r3, r2
 800860a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	699b      	ldr	r3, [r3, #24]
 8008610:	011b      	lsls	r3, r3, #4
 8008612:	693a      	ldr	r2, [r7, #16]
 8008614:	4313      	orrs	r3, r2
 8008616:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	693a      	ldr	r2, [r7, #16]
 800861c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	68fa      	ldr	r2, [r7, #12]
 8008622:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	685a      	ldr	r2, [r3, #4]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	697a      	ldr	r2, [r7, #20]
 8008630:	621a      	str	r2, [r3, #32]
}
 8008632:	bf00      	nop
 8008634:	3718      	adds	r7, #24
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}
 800863a:	bf00      	nop
 800863c:	fffeff8f 	.word	0xfffeff8f
 8008640:	40010000 	.word	0x40010000
 8008644:	40010400 	.word	0x40010400
 8008648:	08014af0 	.word	0x08014af0

0800864c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b086      	sub	sp, #24
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6a1b      	ldr	r3, [r3, #32]
 800865a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6a1b      	ldr	r3, [r3, #32]
 8008666:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	69db      	ldr	r3, [r3, #28]
 8008672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008674:	68fa      	ldr	r2, [r7, #12]
 8008676:	4b24      	ldr	r3, [pc, #144]	; (8008708 <TIM_OC4_SetConfig+0xbc>)
 8008678:	4013      	ands	r3, r2
 800867a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008682:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	021b      	lsls	r3, r3, #8
 800868a:	68fa      	ldr	r2, [r7, #12]
 800868c:	4313      	orrs	r3, r2
 800868e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008696:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	689b      	ldr	r3, [r3, #8]
 800869c:	031b      	lsls	r3, r3, #12
 800869e:	693a      	ldr	r2, [r7, #16]
 80086a0:	4313      	orrs	r3, r2
 80086a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	4a19      	ldr	r2, [pc, #100]	; (800870c <TIM_OC4_SetConfig+0xc0>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d003      	beq.n	80086b4 <TIM_OC4_SetConfig+0x68>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	4a18      	ldr	r2, [pc, #96]	; (8008710 <TIM_OC4_SetConfig+0xc4>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d117      	bne.n	80086e4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	695b      	ldr	r3, [r3, #20]
 80086b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086bc:	d008      	beq.n	80086d0 <TIM_OC4_SetConfig+0x84>
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	695b      	ldr	r3, [r3, #20]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d004      	beq.n	80086d0 <TIM_OC4_SetConfig+0x84>
 80086c6:	f641 4149 	movw	r1, #7241	; 0x1c49
 80086ca:	4812      	ldr	r0, [pc, #72]	; (8008714 <TIM_OC4_SetConfig+0xc8>)
 80086cc:	f7f9 faa1 	bl	8001c12 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80086d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	695b      	ldr	r3, [r3, #20]
 80086dc:	019b      	lsls	r3, r3, #6
 80086de:	697a      	ldr	r2, [r7, #20]
 80086e0:	4313      	orrs	r3, r2
 80086e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	697a      	ldr	r2, [r7, #20]
 80086e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	68fa      	ldr	r2, [r7, #12]
 80086ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	685a      	ldr	r2, [r3, #4]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	693a      	ldr	r2, [r7, #16]
 80086fc:	621a      	str	r2, [r3, #32]
}
 80086fe:	bf00      	nop
 8008700:	3718      	adds	r7, #24
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
 8008706:	bf00      	nop
 8008708:	feff8fff 	.word	0xfeff8fff
 800870c:	40010000 	.word	0x40010000
 8008710:	40010400 	.word	0x40010400
 8008714:	08014af0 	.word	0x08014af0

08008718 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008718:	b480      	push	{r7}
 800871a:	b087      	sub	sp, #28
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6a1b      	ldr	r3, [r3, #32]
 8008726:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6a1b      	ldr	r3, [r3, #32]
 8008732:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800873e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008740:	68fa      	ldr	r2, [r7, #12]
 8008742:	4b1b      	ldr	r3, [pc, #108]	; (80087b0 <TIM_OC5_SetConfig+0x98>)
 8008744:	4013      	ands	r3, r2
 8008746:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	68fa      	ldr	r2, [r7, #12]
 800874e:	4313      	orrs	r3, r2
 8008750:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008758:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	689b      	ldr	r3, [r3, #8]
 800875e:	041b      	lsls	r3, r3, #16
 8008760:	693a      	ldr	r2, [r7, #16]
 8008762:	4313      	orrs	r3, r2
 8008764:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	4a12      	ldr	r2, [pc, #72]	; (80087b4 <TIM_OC5_SetConfig+0x9c>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d003      	beq.n	8008776 <TIM_OC5_SetConfig+0x5e>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	4a11      	ldr	r2, [pc, #68]	; (80087b8 <TIM_OC5_SetConfig+0xa0>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d109      	bne.n	800878a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800877c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	695b      	ldr	r3, [r3, #20]
 8008782:	021b      	lsls	r3, r3, #8
 8008784:	697a      	ldr	r2, [r7, #20]
 8008786:	4313      	orrs	r3, r2
 8008788:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	697a      	ldr	r2, [r7, #20]
 800878e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	68fa      	ldr	r2, [r7, #12]
 8008794:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	685a      	ldr	r2, [r3, #4]
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	693a      	ldr	r2, [r7, #16]
 80087a2:	621a      	str	r2, [r3, #32]
}
 80087a4:	bf00      	nop
 80087a6:	371c      	adds	r7, #28
 80087a8:	46bd      	mov	sp, r7
 80087aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ae:	4770      	bx	lr
 80087b0:	fffeff8f 	.word	0xfffeff8f
 80087b4:	40010000 	.word	0x40010000
 80087b8:	40010400 	.word	0x40010400

080087bc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80087bc:	b480      	push	{r7}
 80087be:	b087      	sub	sp, #28
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6a1b      	ldr	r3, [r3, #32]
 80087ca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6a1b      	ldr	r3, [r3, #32]
 80087d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	685b      	ldr	r3, [r3, #4]
 80087dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80087e4:	68fa      	ldr	r2, [r7, #12]
 80087e6:	4b1c      	ldr	r3, [pc, #112]	; (8008858 <TIM_OC6_SetConfig+0x9c>)
 80087e8:	4013      	ands	r3, r2
 80087ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	021b      	lsls	r3, r3, #8
 80087f2:	68fa      	ldr	r2, [r7, #12]
 80087f4:	4313      	orrs	r3, r2
 80087f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80087f8:	693b      	ldr	r3, [r7, #16]
 80087fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80087fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	689b      	ldr	r3, [r3, #8]
 8008804:	051b      	lsls	r3, r3, #20
 8008806:	693a      	ldr	r2, [r7, #16]
 8008808:	4313      	orrs	r3, r2
 800880a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	4a13      	ldr	r2, [pc, #76]	; (800885c <TIM_OC6_SetConfig+0xa0>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d003      	beq.n	800881c <TIM_OC6_SetConfig+0x60>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	4a12      	ldr	r2, [pc, #72]	; (8008860 <TIM_OC6_SetConfig+0xa4>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d109      	bne.n	8008830 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008822:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	695b      	ldr	r3, [r3, #20]
 8008828:	029b      	lsls	r3, r3, #10
 800882a:	697a      	ldr	r2, [r7, #20]
 800882c:	4313      	orrs	r3, r2
 800882e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	697a      	ldr	r2, [r7, #20]
 8008834:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	68fa      	ldr	r2, [r7, #12]
 800883a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	685a      	ldr	r2, [r3, #4]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	693a      	ldr	r2, [r7, #16]
 8008848:	621a      	str	r2, [r3, #32]
}
 800884a:	bf00      	nop
 800884c:	371c      	adds	r7, #28
 800884e:	46bd      	mov	sp, r7
 8008850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008854:	4770      	bx	lr
 8008856:	bf00      	nop
 8008858:	feff8fff 	.word	0xfeff8fff
 800885c:	40010000 	.word	0x40010000
 8008860:	40010400 	.word	0x40010400

08008864 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008864:	b480      	push	{r7}
 8008866:	b087      	sub	sp, #28
 8008868:	af00      	add	r7, sp, #0
 800886a:	60f8      	str	r0, [r7, #12]
 800886c:	60b9      	str	r1, [r7, #8]
 800886e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	6a1b      	ldr	r3, [r3, #32]
 8008874:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	6a1b      	ldr	r3, [r3, #32]
 800887a:	f023 0201 	bic.w	r2, r3, #1
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	699b      	ldr	r3, [r3, #24]
 8008886:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800888e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	011b      	lsls	r3, r3, #4
 8008894:	693a      	ldr	r2, [r7, #16]
 8008896:	4313      	orrs	r3, r2
 8008898:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	f023 030a 	bic.w	r3, r3, #10
 80088a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80088a2:	697a      	ldr	r2, [r7, #20]
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	4313      	orrs	r3, r2
 80088a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	693a      	ldr	r2, [r7, #16]
 80088ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	697a      	ldr	r2, [r7, #20]
 80088b4:	621a      	str	r2, [r3, #32]
}
 80088b6:	bf00      	nop
 80088b8:	371c      	adds	r7, #28
 80088ba:	46bd      	mov	sp, r7
 80088bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c0:	4770      	bx	lr

080088c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80088c2:	b480      	push	{r7}
 80088c4:	b087      	sub	sp, #28
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	60f8      	str	r0, [r7, #12]
 80088ca:	60b9      	str	r1, [r7, #8]
 80088cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	6a1b      	ldr	r3, [r3, #32]
 80088d2:	f023 0210 	bic.w	r2, r3, #16
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	699b      	ldr	r3, [r3, #24]
 80088de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	6a1b      	ldr	r3, [r3, #32]
 80088e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80088ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	031b      	lsls	r3, r3, #12
 80088f2:	697a      	ldr	r2, [r7, #20]
 80088f4:	4313      	orrs	r3, r2
 80088f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80088fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	011b      	lsls	r3, r3, #4
 8008904:	693a      	ldr	r2, [r7, #16]
 8008906:	4313      	orrs	r3, r2
 8008908:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	697a      	ldr	r2, [r7, #20]
 800890e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	693a      	ldr	r2, [r7, #16]
 8008914:	621a      	str	r2, [r3, #32]
}
 8008916:	bf00      	nop
 8008918:	371c      	adds	r7, #28
 800891a:	46bd      	mov	sp, r7
 800891c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008920:	4770      	bx	lr

08008922 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008922:	b480      	push	{r7}
 8008924:	b085      	sub	sp, #20
 8008926:	af00      	add	r7, sp, #0
 8008928:	6078      	str	r0, [r7, #4]
 800892a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	689b      	ldr	r3, [r3, #8]
 8008930:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008938:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800893a:	683a      	ldr	r2, [r7, #0]
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	4313      	orrs	r3, r2
 8008940:	f043 0307 	orr.w	r3, r3, #7
 8008944:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	68fa      	ldr	r2, [r7, #12]
 800894a:	609a      	str	r2, [r3, #8]
}
 800894c:	bf00      	nop
 800894e:	3714      	adds	r7, #20
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr

08008958 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008958:	b480      	push	{r7}
 800895a:	b087      	sub	sp, #28
 800895c:	af00      	add	r7, sp, #0
 800895e:	60f8      	str	r0, [r7, #12]
 8008960:	60b9      	str	r1, [r7, #8]
 8008962:	607a      	str	r2, [r7, #4]
 8008964:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	689b      	ldr	r3, [r3, #8]
 800896a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008972:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	021a      	lsls	r2, r3, #8
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	431a      	orrs	r2, r3
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	4313      	orrs	r3, r2
 8008980:	697a      	ldr	r2, [r7, #20]
 8008982:	4313      	orrs	r3, r2
 8008984:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	697a      	ldr	r2, [r7, #20]
 800898a:	609a      	str	r2, [r3, #8]
}
 800898c:	bf00      	nop
 800898e:	371c      	adds	r7, #28
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr

08008998 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b086      	sub	sp, #24
 800899c:	af00      	add	r7, sp, #0
 800899e:	60f8      	str	r0, [r7, #12]
 80089a0:	60b9      	str	r1, [r7, #8]
 80089a2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	4a35      	ldr	r2, [pc, #212]	; (8008a7c <TIM_CCxChannelCmd+0xe4>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d030      	beq.n	8008a0e <TIM_CCxChannelCmd+0x76>
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089b2:	d02c      	beq.n	8008a0e <TIM_CCxChannelCmd+0x76>
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	4a32      	ldr	r2, [pc, #200]	; (8008a80 <TIM_CCxChannelCmd+0xe8>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d028      	beq.n	8008a0e <TIM_CCxChannelCmd+0x76>
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	4a31      	ldr	r2, [pc, #196]	; (8008a84 <TIM_CCxChannelCmd+0xec>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d024      	beq.n	8008a0e <TIM_CCxChannelCmd+0x76>
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	4a30      	ldr	r2, [pc, #192]	; (8008a88 <TIM_CCxChannelCmd+0xf0>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d020      	beq.n	8008a0e <TIM_CCxChannelCmd+0x76>
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	4a2f      	ldr	r2, [pc, #188]	; (8008a8c <TIM_CCxChannelCmd+0xf4>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d01c      	beq.n	8008a0e <TIM_CCxChannelCmd+0x76>
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	4a2e      	ldr	r2, [pc, #184]	; (8008a90 <TIM_CCxChannelCmd+0xf8>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d018      	beq.n	8008a0e <TIM_CCxChannelCmd+0x76>
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	4a2d      	ldr	r2, [pc, #180]	; (8008a94 <TIM_CCxChannelCmd+0xfc>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d014      	beq.n	8008a0e <TIM_CCxChannelCmd+0x76>
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	4a2c      	ldr	r2, [pc, #176]	; (8008a98 <TIM_CCxChannelCmd+0x100>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d010      	beq.n	8008a0e <TIM_CCxChannelCmd+0x76>
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	4a2b      	ldr	r2, [pc, #172]	; (8008a9c <TIM_CCxChannelCmd+0x104>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d00c      	beq.n	8008a0e <TIM_CCxChannelCmd+0x76>
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	4a2a      	ldr	r2, [pc, #168]	; (8008aa0 <TIM_CCxChannelCmd+0x108>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d008      	beq.n	8008a0e <TIM_CCxChannelCmd+0x76>
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	4a29      	ldr	r2, [pc, #164]	; (8008aa4 <TIM_CCxChannelCmd+0x10c>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d004      	beq.n	8008a0e <TIM_CCxChannelCmd+0x76>
 8008a04:	f641 61a1 	movw	r1, #7841	; 0x1ea1
 8008a08:	4827      	ldr	r0, [pc, #156]	; (8008aa8 <TIM_CCxChannelCmd+0x110>)
 8008a0a:	f7f9 f902 	bl	8001c12 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d016      	beq.n	8008a42 <TIM_CCxChannelCmd+0xaa>
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	2b04      	cmp	r3, #4
 8008a18:	d013      	beq.n	8008a42 <TIM_CCxChannelCmd+0xaa>
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	2b08      	cmp	r3, #8
 8008a1e:	d010      	beq.n	8008a42 <TIM_CCxChannelCmd+0xaa>
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	2b0c      	cmp	r3, #12
 8008a24:	d00d      	beq.n	8008a42 <TIM_CCxChannelCmd+0xaa>
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	2b10      	cmp	r3, #16
 8008a2a:	d00a      	beq.n	8008a42 <TIM_CCxChannelCmd+0xaa>
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	2b14      	cmp	r3, #20
 8008a30:	d007      	beq.n	8008a42 <TIM_CCxChannelCmd+0xaa>
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	2b3c      	cmp	r3, #60	; 0x3c
 8008a36:	d004      	beq.n	8008a42 <TIM_CCxChannelCmd+0xaa>
 8008a38:	f641 61a2 	movw	r1, #7842	; 0x1ea2
 8008a3c:	481a      	ldr	r0, [pc, #104]	; (8008aa8 <TIM_CCxChannelCmd+0x110>)
 8008a3e:	f7f9 f8e8 	bl	8001c12 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	f003 031f 	and.w	r3, r3, #31
 8008a48:	2201      	movs	r2, #1
 8008a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a4e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	6a1a      	ldr	r2, [r3, #32]
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	43db      	mvns	r3, r3
 8008a58:	401a      	ands	r2, r3
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	6a1a      	ldr	r2, [r3, #32]
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	f003 031f 	and.w	r3, r3, #31
 8008a68:	6879      	ldr	r1, [r7, #4]
 8008a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8008a6e:	431a      	orrs	r2, r3
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	621a      	str	r2, [r3, #32]
}
 8008a74:	bf00      	nop
 8008a76:	3718      	adds	r7, #24
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}
 8008a7c:	40010000 	.word	0x40010000
 8008a80:	40000400 	.word	0x40000400
 8008a84:	40000800 	.word	0x40000800
 8008a88:	40000c00 	.word	0x40000c00
 8008a8c:	40010400 	.word	0x40010400
 8008a90:	40014000 	.word	0x40014000
 8008a94:	40014400 	.word	0x40014400
 8008a98:	40014800 	.word	0x40014800
 8008a9c:	40001800 	.word	0x40001800
 8008aa0:	40001c00 	.word	0x40001c00
 8008aa4:	40002000 	.word	0x40002000
 8008aa8:	08014af0 	.word	0x08014af0

08008aac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b084      	sub	sp, #16
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
 8008ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4a32      	ldr	r2, [pc, #200]	; (8008b84 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d027      	beq.n	8008b10 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ac8:	d022      	beq.n	8008b10 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4a2e      	ldr	r2, [pc, #184]	; (8008b88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d01d      	beq.n	8008b10 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4a2c      	ldr	r2, [pc, #176]	; (8008b8c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d018      	beq.n	8008b10 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	4a2b      	ldr	r2, [pc, #172]	; (8008b90 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d013      	beq.n	8008b10 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4a29      	ldr	r2, [pc, #164]	; (8008b94 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d00e      	beq.n	8008b10 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	4a28      	ldr	r2, [pc, #160]	; (8008b98 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d009      	beq.n	8008b10 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a26      	ldr	r2, [pc, #152]	; (8008b9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d004      	beq.n	8008b10 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008b06:	f240 71b6 	movw	r1, #1974	; 0x7b6
 8008b0a:	4825      	ldr	r0, [pc, #148]	; (8008ba0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008b0c:	f7f9 f881 	bl	8001c12 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d020      	beq.n	8008b5a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	2b10      	cmp	r3, #16
 8008b1e:	d01c      	beq.n	8008b5a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	2b20      	cmp	r3, #32
 8008b26:	d018      	beq.n	8008b5a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	2b30      	cmp	r3, #48	; 0x30
 8008b2e:	d014      	beq.n	8008b5a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	2b40      	cmp	r3, #64	; 0x40
 8008b36:	d010      	beq.n	8008b5a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	2b50      	cmp	r3, #80	; 0x50
 8008b3e:	d00c      	beq.n	8008b5a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	2b60      	cmp	r3, #96	; 0x60
 8008b46:	d008      	beq.n	8008b5a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	2b70      	cmp	r3, #112	; 0x70
 8008b4e:	d004      	beq.n	8008b5a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008b50:	f240 71b7 	movw	r1, #1975	; 0x7b7
 8008b54:	4812      	ldr	r0, [pc, #72]	; (8008ba0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008b56:	f7f9 f85c 	bl	8001c12 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	689b      	ldr	r3, [r3, #8]
 8008b5e:	2b80      	cmp	r3, #128	; 0x80
 8008b60:	d008      	beq.n	8008b74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	689b      	ldr	r3, [r3, #8]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d004      	beq.n	8008b74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b6a:	f44f 61f7 	mov.w	r1, #1976	; 0x7b8
 8008b6e:	480c      	ldr	r0, [pc, #48]	; (8008ba0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008b70:	f7f9 f84f 	bl	8001c12 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b7a:	2b01      	cmp	r3, #1
 8008b7c:	d112      	bne.n	8008ba4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8008b7e:	2302      	movs	r3, #2
 8008b80:	e0d7      	b.n	8008d32 <HAL_TIMEx_MasterConfigSynchronization+0x286>
 8008b82:	bf00      	nop
 8008b84:	40010000 	.word	0x40010000
 8008b88:	40000400 	.word	0x40000400
 8008b8c:	40000800 	.word	0x40000800
 8008b90:	40000c00 	.word	0x40000c00
 8008b94:	40001000 	.word	0x40001000
 8008b98:	40001400 	.word	0x40001400
 8008b9c:	40010400 	.word	0x40010400
 8008ba0:	08014b28 	.word	0x08014b28
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2202      	movs	r2, #2
 8008bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	689b      	ldr	r3, [r3, #8]
 8008bc2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	4a5c      	ldr	r2, [pc, #368]	; (8008d3c <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d004      	beq.n	8008bd8 <HAL_TIMEx_MasterConfigSynchronization+0x12c>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4a5b      	ldr	r2, [pc, #364]	; (8008d40 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d161      	bne.n	8008c9c <HAL_TIMEx_MasterConfigSynchronization+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d054      	beq.n	8008c8a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	685b      	ldr	r3, [r3, #4]
 8008be4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008be8:	d04f      	beq.n	8008c8a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	685b      	ldr	r3, [r3, #4]
 8008bee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008bf2:	d04a      	beq.n	8008c8a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008bfc:	d045      	beq.n	8008c8a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	685b      	ldr	r3, [r3, #4]
 8008c02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c06:	d040      	beq.n	8008c8a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8008c10:	d03b      	beq.n	8008c8a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008c1a:	d036      	beq.n	8008c8a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008c24:	d031      	beq.n	8008c8a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 8008c2e:	d02c      	beq.n	8008c8a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	685b      	ldr	r3, [r3, #4]
 8008c34:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008c38:	d027      	beq.n	8008c8a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	f5b3 0f10 	cmp.w	r3, #9437184	; 0x900000
 8008c42:	d022      	beq.n	8008c8a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008c4c:	d01d      	beq.n	8008c8a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	685b      	ldr	r3, [r3, #4]
 8008c52:	f5b3 0f30 	cmp.w	r3, #11534336	; 0xb00000
 8008c56:	d018      	beq.n	8008c8a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008c60:	d013      	beq.n	8008c8a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	f5b3 0f50 	cmp.w	r3, #13631488	; 0xd00000
 8008c6a:	d00e      	beq.n	8008c8a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	f5b3 0f60 	cmp.w	r3, #14680064	; 0xe00000
 8008c74:	d009      	beq.n	8008c8a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	f5b3 0f70 	cmp.w	r3, #15728640	; 0xf00000
 8008c7e:	d004      	beq.n	8008c8a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8008c80:	f240 71ca 	movw	r1, #1994	; 0x7ca
 8008c84:	482f      	ldr	r0, [pc, #188]	; (8008d44 <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 8008c86:	f7f8 ffc4 	bl	8001c12 <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008c90:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	68fa      	ldr	r2, [r7, #12]
 8008c98:	4313      	orrs	r3, r2
 8008c9a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ca2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	68fa      	ldr	r2, [r7, #12]
 8008caa:	4313      	orrs	r3, r2
 8008cac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	68fa      	ldr	r2, [r7, #12]
 8008cb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a20      	ldr	r2, [pc, #128]	; (8008d3c <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d022      	beq.n	8008d06 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cc8:	d01d      	beq.n	8008d06 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	4a1e      	ldr	r2, [pc, #120]	; (8008d48 <HAL_TIMEx_MasterConfigSynchronization+0x29c>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d018      	beq.n	8008d06 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4a1c      	ldr	r2, [pc, #112]	; (8008d4c <HAL_TIMEx_MasterConfigSynchronization+0x2a0>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d013      	beq.n	8008d06 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	4a1b      	ldr	r2, [pc, #108]	; (8008d50 <HAL_TIMEx_MasterConfigSynchronization+0x2a4>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d00e      	beq.n	8008d06 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4a14      	ldr	r2, [pc, #80]	; (8008d40 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d009      	beq.n	8008d06 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4a17      	ldr	r2, [pc, #92]	; (8008d54 <HAL_TIMEx_MasterConfigSynchronization+0x2a8>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d004      	beq.n	8008d06 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4a15      	ldr	r2, [pc, #84]	; (8008d58 <HAL_TIMEx_MasterConfigSynchronization+0x2ac>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d10c      	bne.n	8008d20 <HAL_TIMEx_MasterConfigSynchronization+0x274>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	689b      	ldr	r3, [r3, #8]
 8008d12:	68ba      	ldr	r2, [r7, #8]
 8008d14:	4313      	orrs	r3, r2
 8008d16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	68ba      	ldr	r2, [r7, #8]
 8008d1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2201      	movs	r2, #1
 8008d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d30:	2300      	movs	r3, #0
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3710      	adds	r7, #16
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}
 8008d3a:	bf00      	nop
 8008d3c:	40010000 	.word	0x40010000
 8008d40:	40010400 	.word	0x40010400
 8008d44:	08014b28 	.word	0x08014b28
 8008d48:	40000400 	.word	0x40000400
 8008d4c:	40000800 	.word	0x40000800
 8008d50:	40000c00 	.word	0x40000c00
 8008d54:	40014000 	.word	0x40014000
 8008d58:	40001800 	.word	0x40001800

08008d5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b083      	sub	sp, #12
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008d64:	bf00      	nop
 8008d66:	370c      	adds	r7, #12
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr

08008d70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b083      	sub	sp, #12
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008d78:	bf00      	nop
 8008d7a:	370c      	adds	r7, #12
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d82:	4770      	bx	lr

08008d84 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b083      	sub	sp, #12
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008d8c:	bf00      	nop
 8008d8e:	370c      	adds	r7, #12
 8008d90:	46bd      	mov	sp, r7
 8008d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d96:	4770      	bx	lr

08008d98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b082      	sub	sp, #8
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d101      	bne.n	8008daa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008da6:	2301      	movs	r3, #1
 8008da8:	e09f      	b.n	8008eea <HAL_UART_Init+0x152>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	699b      	ldr	r3, [r3, #24]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d02d      	beq.n	8008e0e <HAL_UART_Init+0x76>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	4a4f      	ldr	r2, [pc, #316]	; (8008ef4 <HAL_UART_Init+0x15c>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d055      	beq.n	8008e68 <HAL_UART_Init+0xd0>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4a4d      	ldr	r2, [pc, #308]	; (8008ef8 <HAL_UART_Init+0x160>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d050      	beq.n	8008e68 <HAL_UART_Init+0xd0>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	4a4c      	ldr	r2, [pc, #304]	; (8008efc <HAL_UART_Init+0x164>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d04b      	beq.n	8008e68 <HAL_UART_Init+0xd0>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	4a4a      	ldr	r2, [pc, #296]	; (8008f00 <HAL_UART_Init+0x168>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d046      	beq.n	8008e68 <HAL_UART_Init+0xd0>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	4a49      	ldr	r2, [pc, #292]	; (8008f04 <HAL_UART_Init+0x16c>)
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d041      	beq.n	8008e68 <HAL_UART_Init+0xd0>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	4a47      	ldr	r2, [pc, #284]	; (8008f08 <HAL_UART_Init+0x170>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d03c      	beq.n	8008e68 <HAL_UART_Init+0xd0>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	4a46      	ldr	r2, [pc, #280]	; (8008f0c <HAL_UART_Init+0x174>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d037      	beq.n	8008e68 <HAL_UART_Init+0xd0>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4a44      	ldr	r2, [pc, #272]	; (8008f10 <HAL_UART_Init+0x178>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d032      	beq.n	8008e68 <HAL_UART_Init+0xd0>
 8008e02:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8008e06:	4843      	ldr	r0, [pc, #268]	; (8008f14 <HAL_UART_Init+0x17c>)
 8008e08:	f7f8 ff03 	bl	8001c12 <assert_failed>
 8008e0c:	e02c      	b.n	8008e68 <HAL_UART_Init+0xd0>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4a38      	ldr	r2, [pc, #224]	; (8008ef4 <HAL_UART_Init+0x15c>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d027      	beq.n	8008e68 <HAL_UART_Init+0xd0>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4a36      	ldr	r2, [pc, #216]	; (8008ef8 <HAL_UART_Init+0x160>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d022      	beq.n	8008e68 <HAL_UART_Init+0xd0>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4a35      	ldr	r2, [pc, #212]	; (8008efc <HAL_UART_Init+0x164>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d01d      	beq.n	8008e68 <HAL_UART_Init+0xd0>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4a33      	ldr	r2, [pc, #204]	; (8008f00 <HAL_UART_Init+0x168>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d018      	beq.n	8008e68 <HAL_UART_Init+0xd0>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4a32      	ldr	r2, [pc, #200]	; (8008f04 <HAL_UART_Init+0x16c>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d013      	beq.n	8008e68 <HAL_UART_Init+0xd0>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4a30      	ldr	r2, [pc, #192]	; (8008f08 <HAL_UART_Init+0x170>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d00e      	beq.n	8008e68 <HAL_UART_Init+0xd0>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4a2f      	ldr	r2, [pc, #188]	; (8008f0c <HAL_UART_Init+0x174>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d009      	beq.n	8008e68 <HAL_UART_Init+0xd0>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4a2d      	ldr	r2, [pc, #180]	; (8008f10 <HAL_UART_Init+0x178>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d004      	beq.n	8008e68 <HAL_UART_Init+0xd0>
 8008e5e:	f240 1131 	movw	r1, #305	; 0x131
 8008e62:	482c      	ldr	r0, [pc, #176]	; (8008f14 <HAL_UART_Init+0x17c>)
 8008e64:	f7f8 fed5 	bl	8001c12 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d106      	bne.n	8008e7e <HAL_UART_Init+0xe6>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2200      	movs	r2, #0
 8008e74:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f7f9 fac7 	bl	800240c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2224      	movs	r2, #36	; 0x24
 8008e82:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	681a      	ldr	r2, [r3, #0]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f022 0201 	bic.w	r2, r2, #1
 8008e92:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f000 fc79 	bl	800978c <UART_SetConfig>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	2b01      	cmp	r3, #1
 8008e9e:	d101      	bne.n	8008ea4 <HAL_UART_Init+0x10c>
  {
    return HAL_ERROR;
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	e022      	b.n	8008eea <HAL_UART_Init+0x152>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d002      	beq.n	8008eb2 <HAL_UART_Init+0x11a>
  {
    UART_AdvFeatureConfig(huart);
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f000 ff63 	bl	8009d78 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	685a      	ldr	r2, [r3, #4]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008ec0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	689a      	ldr	r2, [r3, #8]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008ed0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	681a      	ldr	r2, [r3, #0]
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f042 0201 	orr.w	r2, r2, #1
 8008ee0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f001 f8a0 	bl	800a028 <UART_CheckIdleState>
 8008ee8:	4603      	mov	r3, r0
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	3708      	adds	r7, #8
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}
 8008ef2:	bf00      	nop
 8008ef4:	40011000 	.word	0x40011000
 8008ef8:	40004400 	.word	0x40004400
 8008efc:	40004800 	.word	0x40004800
 8008f00:	40004c00 	.word	0x40004c00
 8008f04:	40005000 	.word	0x40005000
 8008f08:	40011400 	.word	0x40011400
 8008f0c:	40007800 	.word	0x40007800
 8008f10:	40007c00 	.word	0x40007c00
 8008f14:	08014b64 	.word	0x08014b64

08008f18 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b08a      	sub	sp, #40	; 0x28
 8008f1c:	af02      	add	r7, sp, #8
 8008f1e:	60f8      	str	r0, [r7, #12]
 8008f20:	60b9      	str	r1, [r7, #8]
 8008f22:	603b      	str	r3, [r7, #0]
 8008f24:	4613      	mov	r3, r2
 8008f26:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f2c:	2b20      	cmp	r3, #32
 8008f2e:	d171      	bne.n	8009014 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d002      	beq.n	8008f3c <HAL_UART_Transmit+0x24>
 8008f36:	88fb      	ldrh	r3, [r7, #6]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d101      	bne.n	8008f40 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	e06a      	b.n	8009016 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	2200      	movs	r2, #0
 8008f44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	2221      	movs	r2, #33	; 0x21
 8008f4c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008f4e:	f7f9 fdad 	bl	8002aac <HAL_GetTick>
 8008f52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	88fa      	ldrh	r2, [r7, #6]
 8008f58:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	88fa      	ldrh	r2, [r7, #6]
 8008f60:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	689b      	ldr	r3, [r3, #8]
 8008f68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f6c:	d108      	bne.n	8008f80 <HAL_UART_Transmit+0x68>
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	691b      	ldr	r3, [r3, #16]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d104      	bne.n	8008f80 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008f76:	2300      	movs	r3, #0
 8008f78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	61bb      	str	r3, [r7, #24]
 8008f7e:	e003      	b.n	8008f88 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008f84:	2300      	movs	r3, #0
 8008f86:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008f88:	e02c      	b.n	8008fe4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	9300      	str	r3, [sp, #0]
 8008f8e:	697b      	ldr	r3, [r7, #20]
 8008f90:	2200      	movs	r2, #0
 8008f92:	2180      	movs	r1, #128	; 0x80
 8008f94:	68f8      	ldr	r0, [r7, #12]
 8008f96:	f001 f87e 	bl	800a096 <UART_WaitOnFlagUntilTimeout>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d001      	beq.n	8008fa4 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8008fa0:	2303      	movs	r3, #3
 8008fa2:	e038      	b.n	8009016 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8008fa4:	69fb      	ldr	r3, [r7, #28]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d10b      	bne.n	8008fc2 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008faa:	69bb      	ldr	r3, [r7, #24]
 8008fac:	881b      	ldrh	r3, [r3, #0]
 8008fae:	461a      	mov	r2, r3
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008fb8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008fba:	69bb      	ldr	r3, [r7, #24]
 8008fbc:	3302      	adds	r3, #2
 8008fbe:	61bb      	str	r3, [r7, #24]
 8008fc0:	e007      	b.n	8008fd2 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008fc2:	69fb      	ldr	r3, [r7, #28]
 8008fc4:	781a      	ldrb	r2, [r3, #0]
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008fcc:	69fb      	ldr	r3, [r7, #28]
 8008fce:	3301      	adds	r3, #1
 8008fd0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008fd8:	b29b      	uxth	r3, r3
 8008fda:	3b01      	subs	r3, #1
 8008fdc:	b29a      	uxth	r2, r3
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008fea:	b29b      	uxth	r3, r3
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d1cc      	bne.n	8008f8a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	9300      	str	r3, [sp, #0]
 8008ff4:	697b      	ldr	r3, [r7, #20]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	2140      	movs	r1, #64	; 0x40
 8008ffa:	68f8      	ldr	r0, [r7, #12]
 8008ffc:	f001 f84b 	bl	800a096 <UART_WaitOnFlagUntilTimeout>
 8009000:	4603      	mov	r3, r0
 8009002:	2b00      	cmp	r3, #0
 8009004:	d001      	beq.n	800900a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8009006:	2303      	movs	r3, #3
 8009008:	e005      	b.n	8009016 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	2220      	movs	r2, #32
 800900e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8009010:	2300      	movs	r3, #0
 8009012:	e000      	b.n	8009016 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8009014:	2302      	movs	r3, #2
  }
}
 8009016:	4618      	mov	r0, r3
 8009018:	3720      	adds	r7, #32
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}

0800901e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800901e:	b580      	push	{r7, lr}
 8009020:	b08a      	sub	sp, #40	; 0x28
 8009022:	af02      	add	r7, sp, #8
 8009024:	60f8      	str	r0, [r7, #12]
 8009026:	60b9      	str	r1, [r7, #8]
 8009028:	603b      	str	r3, [r7, #0]
 800902a:	4613      	mov	r3, r2
 800902c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009034:	2b20      	cmp	r3, #32
 8009036:	f040 80b1 	bne.w	800919c <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d002      	beq.n	8009046 <HAL_UART_Receive+0x28>
 8009040:	88fb      	ldrh	r3, [r7, #6]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d101      	bne.n	800904a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8009046:	2301      	movs	r3, #1
 8009048:	e0a9      	b.n	800919e <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	2200      	movs	r2, #0
 800904e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	2222      	movs	r2, #34	; 0x22
 8009056:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	2200      	movs	r2, #0
 800905e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009060:	f7f9 fd24 	bl	8002aac <HAL_GetTick>
 8009064:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	88fa      	ldrh	r2, [r7, #6]
 800906a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	88fa      	ldrh	r2, [r7, #6]
 8009072:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	689b      	ldr	r3, [r3, #8]
 800907a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800907e:	d10e      	bne.n	800909e <HAL_UART_Receive+0x80>
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	691b      	ldr	r3, [r3, #16]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d105      	bne.n	8009094 <HAL_UART_Receive+0x76>
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800908e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009092:	e02d      	b.n	80090f0 <HAL_UART_Receive+0xd2>
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	22ff      	movs	r2, #255	; 0xff
 8009098:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800909c:	e028      	b.n	80090f0 <HAL_UART_Receive+0xd2>
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	689b      	ldr	r3, [r3, #8]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d10d      	bne.n	80090c2 <HAL_UART_Receive+0xa4>
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	691b      	ldr	r3, [r3, #16]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d104      	bne.n	80090b8 <HAL_UART_Receive+0x9a>
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	22ff      	movs	r2, #255	; 0xff
 80090b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80090b6:	e01b      	b.n	80090f0 <HAL_UART_Receive+0xd2>
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	227f      	movs	r2, #127	; 0x7f
 80090bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80090c0:	e016      	b.n	80090f0 <HAL_UART_Receive+0xd2>
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	689b      	ldr	r3, [r3, #8]
 80090c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80090ca:	d10d      	bne.n	80090e8 <HAL_UART_Receive+0xca>
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	691b      	ldr	r3, [r3, #16]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d104      	bne.n	80090de <HAL_UART_Receive+0xc0>
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	227f      	movs	r2, #127	; 0x7f
 80090d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80090dc:	e008      	b.n	80090f0 <HAL_UART_Receive+0xd2>
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	223f      	movs	r2, #63	; 0x3f
 80090e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80090e6:	e003      	b.n	80090f0 <HAL_UART_Receive+0xd2>
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	2200      	movs	r2, #0
 80090ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80090f6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	689b      	ldr	r3, [r3, #8]
 80090fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009100:	d108      	bne.n	8009114 <HAL_UART_Receive+0xf6>
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	691b      	ldr	r3, [r3, #16]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d104      	bne.n	8009114 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800910a:	2300      	movs	r3, #0
 800910c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	61bb      	str	r3, [r7, #24]
 8009112:	e003      	b.n	800911c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009118:	2300      	movs	r3, #0
 800911a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800911c:	e032      	b.n	8009184 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	9300      	str	r3, [sp, #0]
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	2200      	movs	r2, #0
 8009126:	2120      	movs	r1, #32
 8009128:	68f8      	ldr	r0, [r7, #12]
 800912a:	f000 ffb4 	bl	800a096 <UART_WaitOnFlagUntilTimeout>
 800912e:	4603      	mov	r3, r0
 8009130:	2b00      	cmp	r3, #0
 8009132:	d001      	beq.n	8009138 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8009134:	2303      	movs	r3, #3
 8009136:	e032      	b.n	800919e <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8009138:	69fb      	ldr	r3, [r7, #28]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d10c      	bne.n	8009158 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009144:	b29a      	uxth	r2, r3
 8009146:	8a7b      	ldrh	r3, [r7, #18]
 8009148:	4013      	ands	r3, r2
 800914a:	b29a      	uxth	r2, r3
 800914c:	69bb      	ldr	r3, [r7, #24]
 800914e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009150:	69bb      	ldr	r3, [r7, #24]
 8009152:	3302      	adds	r3, #2
 8009154:	61bb      	str	r3, [r7, #24]
 8009156:	e00c      	b.n	8009172 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800915e:	b2da      	uxtb	r2, r3
 8009160:	8a7b      	ldrh	r3, [r7, #18]
 8009162:	b2db      	uxtb	r3, r3
 8009164:	4013      	ands	r3, r2
 8009166:	b2da      	uxtb	r2, r3
 8009168:	69fb      	ldr	r3, [r7, #28]
 800916a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800916c:	69fb      	ldr	r3, [r7, #28]
 800916e:	3301      	adds	r3, #1
 8009170:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009178:	b29b      	uxth	r3, r3
 800917a:	3b01      	subs	r3, #1
 800917c:	b29a      	uxth	r2, r3
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800918a:	b29b      	uxth	r3, r3
 800918c:	2b00      	cmp	r3, #0
 800918e:	d1c6      	bne.n	800911e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2220      	movs	r2, #32
 8009194:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8009198:	2300      	movs	r3, #0
 800919a:	e000      	b.n	800919e <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 800919c:	2302      	movs	r3, #2
  }
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3720      	adds	r7, #32
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}
	...

080091a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b0ba      	sub	sp, #232	; 0xe8
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	69db      	ldr	r3, [r3, #28]
 80091b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	689b      	ldr	r3, [r3, #8]
 80091ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80091ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80091d2:	f640 030f 	movw	r3, #2063	; 0x80f
 80091d6:	4013      	ands	r3, r2
 80091d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80091dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d115      	bne.n	8009210 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80091e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091e8:	f003 0320 	and.w	r3, r3, #32
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d00f      	beq.n	8009210 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80091f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091f4:	f003 0320 	and.w	r3, r3, #32
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d009      	beq.n	8009210 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009200:	2b00      	cmp	r3, #0
 8009202:	f000 8297 	beq.w	8009734 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	4798      	blx	r3
      }
      return;
 800920e:	e291      	b.n	8009734 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009210:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009214:	2b00      	cmp	r3, #0
 8009216:	f000 8117 	beq.w	8009448 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800921a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800921e:	f003 0301 	and.w	r3, r3, #1
 8009222:	2b00      	cmp	r3, #0
 8009224:	d106      	bne.n	8009234 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009226:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800922a:	4b85      	ldr	r3, [pc, #532]	; (8009440 <HAL_UART_IRQHandler+0x298>)
 800922c:	4013      	ands	r3, r2
 800922e:	2b00      	cmp	r3, #0
 8009230:	f000 810a 	beq.w	8009448 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009234:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009238:	f003 0301 	and.w	r3, r3, #1
 800923c:	2b00      	cmp	r3, #0
 800923e:	d011      	beq.n	8009264 <HAL_UART_IRQHandler+0xbc>
 8009240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009248:	2b00      	cmp	r3, #0
 800924a:	d00b      	beq.n	8009264 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	2201      	movs	r2, #1
 8009252:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800925a:	f043 0201 	orr.w	r2, r3, #1
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009264:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009268:	f003 0302 	and.w	r3, r3, #2
 800926c:	2b00      	cmp	r3, #0
 800926e:	d011      	beq.n	8009294 <HAL_UART_IRQHandler+0xec>
 8009270:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009274:	f003 0301 	and.w	r3, r3, #1
 8009278:	2b00      	cmp	r3, #0
 800927a:	d00b      	beq.n	8009294 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	2202      	movs	r2, #2
 8009282:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800928a:	f043 0204 	orr.w	r2, r3, #4
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009298:	f003 0304 	and.w	r3, r3, #4
 800929c:	2b00      	cmp	r3, #0
 800929e:	d011      	beq.n	80092c4 <HAL_UART_IRQHandler+0x11c>
 80092a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80092a4:	f003 0301 	and.w	r3, r3, #1
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d00b      	beq.n	80092c4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	2204      	movs	r2, #4
 80092b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092ba:	f043 0202 	orr.w	r2, r3, #2
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80092c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092c8:	f003 0308 	and.w	r3, r3, #8
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d017      	beq.n	8009300 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80092d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092d4:	f003 0320 	and.w	r3, r3, #32
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d105      	bne.n	80092e8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80092dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80092e0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d00b      	beq.n	8009300 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	2208      	movs	r2, #8
 80092ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092f6:	f043 0208 	orr.w	r2, r3, #8
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009304:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009308:	2b00      	cmp	r3, #0
 800930a:	d012      	beq.n	8009332 <HAL_UART_IRQHandler+0x18a>
 800930c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009310:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009314:	2b00      	cmp	r3, #0
 8009316:	d00c      	beq.n	8009332 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009320:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009328:	f043 0220 	orr.w	r2, r3, #32
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009338:	2b00      	cmp	r3, #0
 800933a:	f000 81fd 	beq.w	8009738 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800933e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009342:	f003 0320 	and.w	r3, r3, #32
 8009346:	2b00      	cmp	r3, #0
 8009348:	d00d      	beq.n	8009366 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800934a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800934e:	f003 0320 	and.w	r3, r3, #32
 8009352:	2b00      	cmp	r3, #0
 8009354:	d007      	beq.n	8009366 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800935a:	2b00      	cmp	r3, #0
 800935c:	d003      	beq.n	8009366 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800936c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	689b      	ldr	r3, [r3, #8]
 8009376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800937a:	2b40      	cmp	r3, #64	; 0x40
 800937c:	d005      	beq.n	800938a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800937e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009382:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009386:	2b00      	cmp	r3, #0
 8009388:	d04f      	beq.n	800942a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f000 ff49 	bl	800a222 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	689b      	ldr	r3, [r3, #8]
 8009396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800939a:	2b40      	cmp	r3, #64	; 0x40
 800939c:	d141      	bne.n	8009422 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	3308      	adds	r3, #8
 80093a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80093ac:	e853 3f00 	ldrex	r3, [r3]
 80093b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80093b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80093b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	3308      	adds	r3, #8
 80093c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80093ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80093ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80093d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80093da:	e841 2300 	strex	r3, r2, [r1]
 80093de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80093e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d1d9      	bne.n	800939e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d013      	beq.n	800941a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093f6:	4a13      	ldr	r2, [pc, #76]	; (8009444 <HAL_UART_IRQHandler+0x29c>)
 80093f8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093fe:	4618      	mov	r0, r3
 8009400:	f7f9 fd34 	bl	8002e6c <HAL_DMA_Abort_IT>
 8009404:	4603      	mov	r3, r0
 8009406:	2b00      	cmp	r3, #0
 8009408:	d017      	beq.n	800943a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800940e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009410:	687a      	ldr	r2, [r7, #4]
 8009412:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009414:	4610      	mov	r0, r2
 8009416:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009418:	e00f      	b.n	800943a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f000 f9a0 	bl	8009760 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009420:	e00b      	b.n	800943a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f000 f99c 	bl	8009760 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009428:	e007      	b.n	800943a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f000 f998 	bl	8009760 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2200      	movs	r2, #0
 8009434:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8009438:	e17e      	b.n	8009738 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800943a:	bf00      	nop
    return;
 800943c:	e17c      	b.n	8009738 <HAL_UART_IRQHandler+0x590>
 800943e:	bf00      	nop
 8009440:	04000120 	.word	0x04000120
 8009444:	0800a2eb 	.word	0x0800a2eb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800944c:	2b01      	cmp	r3, #1
 800944e:	f040 814c 	bne.w	80096ea <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009456:	f003 0310 	and.w	r3, r3, #16
 800945a:	2b00      	cmp	r3, #0
 800945c:	f000 8145 	beq.w	80096ea <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009464:	f003 0310 	and.w	r3, r3, #16
 8009468:	2b00      	cmp	r3, #0
 800946a:	f000 813e 	beq.w	80096ea <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	2210      	movs	r2, #16
 8009474:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	689b      	ldr	r3, [r3, #8]
 800947c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009480:	2b40      	cmp	r3, #64	; 0x40
 8009482:	f040 80b6 	bne.w	80095f2 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	685b      	ldr	r3, [r3, #4]
 800948e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009492:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009496:	2b00      	cmp	r3, #0
 8009498:	f000 8150 	beq.w	800973c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80094a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80094a6:	429a      	cmp	r2, r3
 80094a8:	f080 8148 	bcs.w	800973c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80094b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094ba:	69db      	ldr	r3, [r3, #28]
 80094bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094c0:	f000 8086 	beq.w	80095d0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80094d0:	e853 3f00 	ldrex	r3, [r3]
 80094d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80094d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80094dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80094e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	461a      	mov	r2, r3
 80094ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80094ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80094f2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80094fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80094fe:	e841 2300 	strex	r3, r2, [r1]
 8009502:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009506:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800950a:	2b00      	cmp	r3, #0
 800950c:	d1da      	bne.n	80094c4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	3308      	adds	r3, #8
 8009514:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009516:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009518:	e853 3f00 	ldrex	r3, [r3]
 800951c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800951e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009520:	f023 0301 	bic.w	r3, r3, #1
 8009524:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	3308      	adds	r3, #8
 800952e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009532:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009536:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009538:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800953a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800953e:	e841 2300 	strex	r3, r2, [r1]
 8009542:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009544:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009546:	2b00      	cmp	r3, #0
 8009548:	d1e1      	bne.n	800950e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	3308      	adds	r3, #8
 8009550:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009552:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009554:	e853 3f00 	ldrex	r3, [r3]
 8009558:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800955a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800955c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009560:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	3308      	adds	r3, #8
 800956a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800956e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009570:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009572:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009574:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009576:	e841 2300 	strex	r3, r2, [r1]
 800957a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800957c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800957e:	2b00      	cmp	r3, #0
 8009580:	d1e3      	bne.n	800954a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2220      	movs	r2, #32
 8009586:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2200      	movs	r2, #0
 800958e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009596:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009598:	e853 3f00 	ldrex	r3, [r3]
 800959c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800959e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80095a0:	f023 0310 	bic.w	r3, r3, #16
 80095a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	461a      	mov	r2, r3
 80095ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80095b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80095b4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095b6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80095b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80095ba:	e841 2300 	strex	r3, r2, [r1]
 80095be:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80095c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d1e4      	bne.n	8009590 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095ca:	4618      	mov	r0, r3
 80095cc:	f7f9 fbde 	bl	8002d8c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2202      	movs	r2, #2
 80095d4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80095e2:	b29b      	uxth	r3, r3
 80095e4:	1ad3      	subs	r3, r2, r3
 80095e6:	b29b      	uxth	r3, r3
 80095e8:	4619      	mov	r1, r3
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f000 f8c2 	bl	8009774 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80095f0:	e0a4      	b.n	800973c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80095fe:	b29b      	uxth	r3, r3
 8009600:	1ad3      	subs	r3, r2, r3
 8009602:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800960c:	b29b      	uxth	r3, r3
 800960e:	2b00      	cmp	r3, #0
 8009610:	f000 8096 	beq.w	8009740 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8009614:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009618:	2b00      	cmp	r3, #0
 800961a:	f000 8091 	beq.w	8009740 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009626:	e853 3f00 	ldrex	r3, [r3]
 800962a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800962c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800962e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009632:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	461a      	mov	r2, r3
 800963c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009640:	647b      	str	r3, [r7, #68]	; 0x44
 8009642:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009644:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009646:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009648:	e841 2300 	strex	r3, r2, [r1]
 800964c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800964e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009650:	2b00      	cmp	r3, #0
 8009652:	d1e4      	bne.n	800961e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	3308      	adds	r3, #8
 800965a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800965c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800965e:	e853 3f00 	ldrex	r3, [r3]
 8009662:	623b      	str	r3, [r7, #32]
   return(result);
 8009664:	6a3b      	ldr	r3, [r7, #32]
 8009666:	f023 0301 	bic.w	r3, r3, #1
 800966a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	3308      	adds	r3, #8
 8009674:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009678:	633a      	str	r2, [r7, #48]	; 0x30
 800967a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800967c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800967e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009680:	e841 2300 	strex	r3, r2, [r1]
 8009684:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009688:	2b00      	cmp	r3, #0
 800968a:	d1e3      	bne.n	8009654 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2220      	movs	r2, #32
 8009690:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2200      	movs	r2, #0
 8009698:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2200      	movs	r2, #0
 800969e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096a6:	693b      	ldr	r3, [r7, #16]
 80096a8:	e853 3f00 	ldrex	r3, [r3]
 80096ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	f023 0310 	bic.w	r3, r3, #16
 80096b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	461a      	mov	r2, r3
 80096be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80096c2:	61fb      	str	r3, [r7, #28]
 80096c4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096c6:	69b9      	ldr	r1, [r7, #24]
 80096c8:	69fa      	ldr	r2, [r7, #28]
 80096ca:	e841 2300 	strex	r3, r2, [r1]
 80096ce:	617b      	str	r3, [r7, #20]
   return(result);
 80096d0:	697b      	ldr	r3, [r7, #20]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d1e4      	bne.n	80096a0 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2202      	movs	r2, #2
 80096da:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80096dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80096e0:	4619      	mov	r1, r3
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f000 f846 	bl	8009774 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80096e8:	e02a      	b.n	8009740 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80096ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d00e      	beq.n	8009714 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80096f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d008      	beq.n	8009714 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009706:	2b00      	cmp	r3, #0
 8009708:	d01c      	beq.n	8009744 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	4798      	blx	r3
    }
    return;
 8009712:	e017      	b.n	8009744 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800971c:	2b00      	cmp	r3, #0
 800971e:	d012      	beq.n	8009746 <HAL_UART_IRQHandler+0x59e>
 8009720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009728:	2b00      	cmp	r3, #0
 800972a:	d00c      	beq.n	8009746 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f000 fdf2 	bl	800a316 <UART_EndTransmit_IT>
    return;
 8009732:	e008      	b.n	8009746 <HAL_UART_IRQHandler+0x59e>
      return;
 8009734:	bf00      	nop
 8009736:	e006      	b.n	8009746 <HAL_UART_IRQHandler+0x59e>
    return;
 8009738:	bf00      	nop
 800973a:	e004      	b.n	8009746 <HAL_UART_IRQHandler+0x59e>
      return;
 800973c:	bf00      	nop
 800973e:	e002      	b.n	8009746 <HAL_UART_IRQHandler+0x59e>
      return;
 8009740:	bf00      	nop
 8009742:	e000      	b.n	8009746 <HAL_UART_IRQHandler+0x59e>
    return;
 8009744:	bf00      	nop
  }

}
 8009746:	37e8      	adds	r7, #232	; 0xe8
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}

0800974c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800974c:	b480      	push	{r7}
 800974e:	b083      	sub	sp, #12
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009754:	bf00      	nop
 8009756:	370c      	adds	r7, #12
 8009758:	46bd      	mov	sp, r7
 800975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975e:	4770      	bx	lr

08009760 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009760:	b480      	push	{r7}
 8009762:	b083      	sub	sp, #12
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009768:	bf00      	nop
 800976a:	370c      	adds	r7, #12
 800976c:	46bd      	mov	sp, r7
 800976e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009772:	4770      	bx	lr

08009774 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009774:	b480      	push	{r7}
 8009776:	b083      	sub	sp, #12
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
 800977c:	460b      	mov	r3, r1
 800977e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009780:	bf00      	nop
 8009782:	370c      	adds	r7, #12
 8009784:	46bd      	mov	sp, r7
 8009786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978a:	4770      	bx	lr

0800978c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b088      	sub	sp, #32
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009794:	2300      	movs	r3, #0
 8009796:	77bb      	strb	r3, [r7, #30]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	685b      	ldr	r3, [r3, #4]
 800979c:	4aa0      	ldr	r2, [pc, #640]	; (8009a20 <UART_SetConfig+0x294>)
 800979e:	4293      	cmp	r3, r2
 80097a0:	d904      	bls.n	80097ac <UART_SetConfig+0x20>
 80097a2:	f640 315d 	movw	r1, #2909	; 0xb5d
 80097a6:	489f      	ldr	r0, [pc, #636]	; (8009a24 <UART_SetConfig+0x298>)
 80097a8:	f7f8 fa33 	bl	8001c12 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	689b      	ldr	r3, [r3, #8]
 80097b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80097b4:	d00d      	beq.n	80097d2 <UART_SetConfig+0x46>
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	689b      	ldr	r3, [r3, #8]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d009      	beq.n	80097d2 <UART_SetConfig+0x46>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	689b      	ldr	r3, [r3, #8]
 80097c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097c6:	d004      	beq.n	80097d2 <UART_SetConfig+0x46>
 80097c8:	f640 315e 	movw	r1, #2910	; 0xb5e
 80097cc:	4895      	ldr	r0, [pc, #596]	; (8009a24 <UART_SetConfig+0x298>)
 80097ce:	f7f8 fa20 	bl	8001c12 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	68db      	ldr	r3, [r3, #12]
 80097d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097da:	d012      	beq.n	8009802 <UART_SetConfig+0x76>
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	68db      	ldr	r3, [r3, #12]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d00e      	beq.n	8009802 <UART_SetConfig+0x76>
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	68db      	ldr	r3, [r3, #12]
 80097e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80097ec:	d009      	beq.n	8009802 <UART_SetConfig+0x76>
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	68db      	ldr	r3, [r3, #12]
 80097f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80097f6:	d004      	beq.n	8009802 <UART_SetConfig+0x76>
 80097f8:	f640 315f 	movw	r1, #2911	; 0xb5f
 80097fc:	4889      	ldr	r0, [pc, #548]	; (8009a24 <UART_SetConfig+0x298>)
 80097fe:	f7f8 fa08 	bl	8001c12 <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6a1b      	ldr	r3, [r3, #32]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d009      	beq.n	800981e <UART_SetConfig+0x92>
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6a1b      	ldr	r3, [r3, #32]
 800980e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009812:	d004      	beq.n	800981e <UART_SetConfig+0x92>
 8009814:	f44f 6136 	mov.w	r1, #2912	; 0xb60
 8009818:	4882      	ldr	r0, [pc, #520]	; (8009a24 <UART_SetConfig+0x298>)
 800981a:	f7f8 f9fa 	bl	8001c12 <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	691b      	ldr	r3, [r3, #16]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d00e      	beq.n	8009844 <UART_SetConfig+0xb8>
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	691b      	ldr	r3, [r3, #16]
 800982a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800982e:	d009      	beq.n	8009844 <UART_SetConfig+0xb8>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	691b      	ldr	r3, [r3, #16]
 8009834:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009838:	d004      	beq.n	8009844 <UART_SetConfig+0xb8>
 800983a:	f640 3162 	movw	r1, #2914	; 0xb62
 800983e:	4879      	ldr	r0, [pc, #484]	; (8009a24 <UART_SetConfig+0x298>)
 8009840:	f7f8 f9e7 	bl	8001c12 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	695b      	ldr	r3, [r3, #20]
 8009848:	f023 030c 	bic.w	r3, r3, #12
 800984c:	2b00      	cmp	r3, #0
 800984e:	d103      	bne.n	8009858 <UART_SetConfig+0xcc>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	695b      	ldr	r3, [r3, #20]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d104      	bne.n	8009862 <UART_SetConfig+0xd6>
 8009858:	f640 3163 	movw	r1, #2915	; 0xb63
 800985c:	4871      	ldr	r0, [pc, #452]	; (8009a24 <UART_SetConfig+0x298>)
 800985e:	f7f8 f9d8 	bl	8001c12 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	699b      	ldr	r3, [r3, #24]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d013      	beq.n	8009892 <UART_SetConfig+0x106>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	699b      	ldr	r3, [r3, #24]
 800986e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009872:	d00e      	beq.n	8009892 <UART_SetConfig+0x106>
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	699b      	ldr	r3, [r3, #24]
 8009878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800987c:	d009      	beq.n	8009892 <UART_SetConfig+0x106>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	699b      	ldr	r3, [r3, #24]
 8009882:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009886:	d004      	beq.n	8009892 <UART_SetConfig+0x106>
 8009888:	f640 3164 	movw	r1, #2916	; 0xb64
 800988c:	4865      	ldr	r0, [pc, #404]	; (8009a24 <UART_SetConfig+0x298>)
 800988e:	f7f8 f9c0 	bl	8001c12 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	69db      	ldr	r3, [r3, #28]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d009      	beq.n	80098ae <UART_SetConfig+0x122>
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	69db      	ldr	r3, [r3, #28]
 800989e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098a2:	d004      	beq.n	80098ae <UART_SetConfig+0x122>
 80098a4:	f640 3165 	movw	r1, #2917	; 0xb65
 80098a8:	485e      	ldr	r0, [pc, #376]	; (8009a24 <UART_SetConfig+0x298>)
 80098aa:	f7f8 f9b2 	bl	8001c12 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	689a      	ldr	r2, [r3, #8]
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	691b      	ldr	r3, [r3, #16]
 80098b6:	431a      	orrs	r2, r3
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	695b      	ldr	r3, [r3, #20]
 80098bc:	431a      	orrs	r2, r3
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	69db      	ldr	r3, [r3, #28]
 80098c2:	4313      	orrs	r3, r2
 80098c4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	681a      	ldr	r2, [r3, #0]
 80098cc:	4b56      	ldr	r3, [pc, #344]	; (8009a28 <UART_SetConfig+0x29c>)
 80098ce:	4013      	ands	r3, r2
 80098d0:	687a      	ldr	r2, [r7, #4]
 80098d2:	6812      	ldr	r2, [r2, #0]
 80098d4:	6979      	ldr	r1, [r7, #20]
 80098d6:	430b      	orrs	r3, r1
 80098d8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	685b      	ldr	r3, [r3, #4]
 80098e0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	68da      	ldr	r2, [r3, #12]
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	430a      	orrs	r2, r1
 80098ee:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	699b      	ldr	r3, [r3, #24]
 80098f4:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6a1b      	ldr	r3, [r3, #32]
 80098fa:	697a      	ldr	r2, [r7, #20]
 80098fc:	4313      	orrs	r3, r2
 80098fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	689b      	ldr	r3, [r3, #8]
 8009906:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	697a      	ldr	r2, [r7, #20]
 8009910:	430a      	orrs	r2, r1
 8009912:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	4a44      	ldr	r2, [pc, #272]	; (8009a2c <UART_SetConfig+0x2a0>)
 800991a:	4293      	cmp	r3, r2
 800991c:	d121      	bne.n	8009962 <UART_SetConfig+0x1d6>
 800991e:	4b44      	ldr	r3, [pc, #272]	; (8009a30 <UART_SetConfig+0x2a4>)
 8009920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009924:	f003 0303 	and.w	r3, r3, #3
 8009928:	2b03      	cmp	r3, #3
 800992a:	d817      	bhi.n	800995c <UART_SetConfig+0x1d0>
 800992c:	a201      	add	r2, pc, #4	; (adr r2, 8009934 <UART_SetConfig+0x1a8>)
 800992e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009932:	bf00      	nop
 8009934:	08009945 	.word	0x08009945
 8009938:	08009951 	.word	0x08009951
 800993c:	0800994b 	.word	0x0800994b
 8009940:	08009957 	.word	0x08009957
 8009944:	2301      	movs	r3, #1
 8009946:	77fb      	strb	r3, [r7, #31]
 8009948:	e14c      	b.n	8009be4 <UART_SetConfig+0x458>
 800994a:	2302      	movs	r3, #2
 800994c:	77fb      	strb	r3, [r7, #31]
 800994e:	e149      	b.n	8009be4 <UART_SetConfig+0x458>
 8009950:	2304      	movs	r3, #4
 8009952:	77fb      	strb	r3, [r7, #31]
 8009954:	e146      	b.n	8009be4 <UART_SetConfig+0x458>
 8009956:	2308      	movs	r3, #8
 8009958:	77fb      	strb	r3, [r7, #31]
 800995a:	e143      	b.n	8009be4 <UART_SetConfig+0x458>
 800995c:	2310      	movs	r3, #16
 800995e:	77fb      	strb	r3, [r7, #31]
 8009960:	e140      	b.n	8009be4 <UART_SetConfig+0x458>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	4a33      	ldr	r2, [pc, #204]	; (8009a34 <UART_SetConfig+0x2a8>)
 8009968:	4293      	cmp	r3, r2
 800996a:	d132      	bne.n	80099d2 <UART_SetConfig+0x246>
 800996c:	4b30      	ldr	r3, [pc, #192]	; (8009a30 <UART_SetConfig+0x2a4>)
 800996e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009972:	f003 030c 	and.w	r3, r3, #12
 8009976:	2b0c      	cmp	r3, #12
 8009978:	d828      	bhi.n	80099cc <UART_SetConfig+0x240>
 800997a:	a201      	add	r2, pc, #4	; (adr r2, 8009980 <UART_SetConfig+0x1f4>)
 800997c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009980:	080099b5 	.word	0x080099b5
 8009984:	080099cd 	.word	0x080099cd
 8009988:	080099cd 	.word	0x080099cd
 800998c:	080099cd 	.word	0x080099cd
 8009990:	080099c1 	.word	0x080099c1
 8009994:	080099cd 	.word	0x080099cd
 8009998:	080099cd 	.word	0x080099cd
 800999c:	080099cd 	.word	0x080099cd
 80099a0:	080099bb 	.word	0x080099bb
 80099a4:	080099cd 	.word	0x080099cd
 80099a8:	080099cd 	.word	0x080099cd
 80099ac:	080099cd 	.word	0x080099cd
 80099b0:	080099c7 	.word	0x080099c7
 80099b4:	2300      	movs	r3, #0
 80099b6:	77fb      	strb	r3, [r7, #31]
 80099b8:	e114      	b.n	8009be4 <UART_SetConfig+0x458>
 80099ba:	2302      	movs	r3, #2
 80099bc:	77fb      	strb	r3, [r7, #31]
 80099be:	e111      	b.n	8009be4 <UART_SetConfig+0x458>
 80099c0:	2304      	movs	r3, #4
 80099c2:	77fb      	strb	r3, [r7, #31]
 80099c4:	e10e      	b.n	8009be4 <UART_SetConfig+0x458>
 80099c6:	2308      	movs	r3, #8
 80099c8:	77fb      	strb	r3, [r7, #31]
 80099ca:	e10b      	b.n	8009be4 <UART_SetConfig+0x458>
 80099cc:	2310      	movs	r3, #16
 80099ce:	77fb      	strb	r3, [r7, #31]
 80099d0:	e108      	b.n	8009be4 <UART_SetConfig+0x458>
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	4a18      	ldr	r2, [pc, #96]	; (8009a38 <UART_SetConfig+0x2ac>)
 80099d8:	4293      	cmp	r3, r2
 80099da:	d12f      	bne.n	8009a3c <UART_SetConfig+0x2b0>
 80099dc:	4b14      	ldr	r3, [pc, #80]	; (8009a30 <UART_SetConfig+0x2a4>)
 80099de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099e2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80099e6:	2b30      	cmp	r3, #48	; 0x30
 80099e8:	d013      	beq.n	8009a12 <UART_SetConfig+0x286>
 80099ea:	2b30      	cmp	r3, #48	; 0x30
 80099ec:	d814      	bhi.n	8009a18 <UART_SetConfig+0x28c>
 80099ee:	2b20      	cmp	r3, #32
 80099f0:	d009      	beq.n	8009a06 <UART_SetConfig+0x27a>
 80099f2:	2b20      	cmp	r3, #32
 80099f4:	d810      	bhi.n	8009a18 <UART_SetConfig+0x28c>
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d002      	beq.n	8009a00 <UART_SetConfig+0x274>
 80099fa:	2b10      	cmp	r3, #16
 80099fc:	d006      	beq.n	8009a0c <UART_SetConfig+0x280>
 80099fe:	e00b      	b.n	8009a18 <UART_SetConfig+0x28c>
 8009a00:	2300      	movs	r3, #0
 8009a02:	77fb      	strb	r3, [r7, #31]
 8009a04:	e0ee      	b.n	8009be4 <UART_SetConfig+0x458>
 8009a06:	2302      	movs	r3, #2
 8009a08:	77fb      	strb	r3, [r7, #31]
 8009a0a:	e0eb      	b.n	8009be4 <UART_SetConfig+0x458>
 8009a0c:	2304      	movs	r3, #4
 8009a0e:	77fb      	strb	r3, [r7, #31]
 8009a10:	e0e8      	b.n	8009be4 <UART_SetConfig+0x458>
 8009a12:	2308      	movs	r3, #8
 8009a14:	77fb      	strb	r3, [r7, #31]
 8009a16:	e0e5      	b.n	8009be4 <UART_SetConfig+0x458>
 8009a18:	2310      	movs	r3, #16
 8009a1a:	77fb      	strb	r3, [r7, #31]
 8009a1c:	e0e2      	b.n	8009be4 <UART_SetConfig+0x458>
 8009a1e:	bf00      	nop
 8009a20:	019bfcc0 	.word	0x019bfcc0
 8009a24:	08014b64 	.word	0x08014b64
 8009a28:	efff69f3 	.word	0xefff69f3
 8009a2c:	40011000 	.word	0x40011000
 8009a30:	40023800 	.word	0x40023800
 8009a34:	40004400 	.word	0x40004400
 8009a38:	40004800 	.word	0x40004800
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	4aa5      	ldr	r2, [pc, #660]	; (8009cd8 <UART_SetConfig+0x54c>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d120      	bne.n	8009a88 <UART_SetConfig+0x2fc>
 8009a46:	4ba5      	ldr	r3, [pc, #660]	; (8009cdc <UART_SetConfig+0x550>)
 8009a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a4c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009a50:	2bc0      	cmp	r3, #192	; 0xc0
 8009a52:	d013      	beq.n	8009a7c <UART_SetConfig+0x2f0>
 8009a54:	2bc0      	cmp	r3, #192	; 0xc0
 8009a56:	d814      	bhi.n	8009a82 <UART_SetConfig+0x2f6>
 8009a58:	2b80      	cmp	r3, #128	; 0x80
 8009a5a:	d009      	beq.n	8009a70 <UART_SetConfig+0x2e4>
 8009a5c:	2b80      	cmp	r3, #128	; 0x80
 8009a5e:	d810      	bhi.n	8009a82 <UART_SetConfig+0x2f6>
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d002      	beq.n	8009a6a <UART_SetConfig+0x2de>
 8009a64:	2b40      	cmp	r3, #64	; 0x40
 8009a66:	d006      	beq.n	8009a76 <UART_SetConfig+0x2ea>
 8009a68:	e00b      	b.n	8009a82 <UART_SetConfig+0x2f6>
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	77fb      	strb	r3, [r7, #31]
 8009a6e:	e0b9      	b.n	8009be4 <UART_SetConfig+0x458>
 8009a70:	2302      	movs	r3, #2
 8009a72:	77fb      	strb	r3, [r7, #31]
 8009a74:	e0b6      	b.n	8009be4 <UART_SetConfig+0x458>
 8009a76:	2304      	movs	r3, #4
 8009a78:	77fb      	strb	r3, [r7, #31]
 8009a7a:	e0b3      	b.n	8009be4 <UART_SetConfig+0x458>
 8009a7c:	2308      	movs	r3, #8
 8009a7e:	77fb      	strb	r3, [r7, #31]
 8009a80:	e0b0      	b.n	8009be4 <UART_SetConfig+0x458>
 8009a82:	2310      	movs	r3, #16
 8009a84:	77fb      	strb	r3, [r7, #31]
 8009a86:	e0ad      	b.n	8009be4 <UART_SetConfig+0x458>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4a94      	ldr	r2, [pc, #592]	; (8009ce0 <UART_SetConfig+0x554>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d125      	bne.n	8009ade <UART_SetConfig+0x352>
 8009a92:	4b92      	ldr	r3, [pc, #584]	; (8009cdc <UART_SetConfig+0x550>)
 8009a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009aa0:	d017      	beq.n	8009ad2 <UART_SetConfig+0x346>
 8009aa2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009aa6:	d817      	bhi.n	8009ad8 <UART_SetConfig+0x34c>
 8009aa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009aac:	d00b      	beq.n	8009ac6 <UART_SetConfig+0x33a>
 8009aae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ab2:	d811      	bhi.n	8009ad8 <UART_SetConfig+0x34c>
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d003      	beq.n	8009ac0 <UART_SetConfig+0x334>
 8009ab8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009abc:	d006      	beq.n	8009acc <UART_SetConfig+0x340>
 8009abe:	e00b      	b.n	8009ad8 <UART_SetConfig+0x34c>
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	77fb      	strb	r3, [r7, #31]
 8009ac4:	e08e      	b.n	8009be4 <UART_SetConfig+0x458>
 8009ac6:	2302      	movs	r3, #2
 8009ac8:	77fb      	strb	r3, [r7, #31]
 8009aca:	e08b      	b.n	8009be4 <UART_SetConfig+0x458>
 8009acc:	2304      	movs	r3, #4
 8009ace:	77fb      	strb	r3, [r7, #31]
 8009ad0:	e088      	b.n	8009be4 <UART_SetConfig+0x458>
 8009ad2:	2308      	movs	r3, #8
 8009ad4:	77fb      	strb	r3, [r7, #31]
 8009ad6:	e085      	b.n	8009be4 <UART_SetConfig+0x458>
 8009ad8:	2310      	movs	r3, #16
 8009ada:	77fb      	strb	r3, [r7, #31]
 8009adc:	e082      	b.n	8009be4 <UART_SetConfig+0x458>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	4a80      	ldr	r2, [pc, #512]	; (8009ce4 <UART_SetConfig+0x558>)
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d125      	bne.n	8009b34 <UART_SetConfig+0x3a8>
 8009ae8:	4b7c      	ldr	r3, [pc, #496]	; (8009cdc <UART_SetConfig+0x550>)
 8009aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009aee:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009af2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009af6:	d017      	beq.n	8009b28 <UART_SetConfig+0x39c>
 8009af8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009afc:	d817      	bhi.n	8009b2e <UART_SetConfig+0x3a2>
 8009afe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b02:	d00b      	beq.n	8009b1c <UART_SetConfig+0x390>
 8009b04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b08:	d811      	bhi.n	8009b2e <UART_SetConfig+0x3a2>
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d003      	beq.n	8009b16 <UART_SetConfig+0x38a>
 8009b0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b12:	d006      	beq.n	8009b22 <UART_SetConfig+0x396>
 8009b14:	e00b      	b.n	8009b2e <UART_SetConfig+0x3a2>
 8009b16:	2301      	movs	r3, #1
 8009b18:	77fb      	strb	r3, [r7, #31]
 8009b1a:	e063      	b.n	8009be4 <UART_SetConfig+0x458>
 8009b1c:	2302      	movs	r3, #2
 8009b1e:	77fb      	strb	r3, [r7, #31]
 8009b20:	e060      	b.n	8009be4 <UART_SetConfig+0x458>
 8009b22:	2304      	movs	r3, #4
 8009b24:	77fb      	strb	r3, [r7, #31]
 8009b26:	e05d      	b.n	8009be4 <UART_SetConfig+0x458>
 8009b28:	2308      	movs	r3, #8
 8009b2a:	77fb      	strb	r3, [r7, #31]
 8009b2c:	e05a      	b.n	8009be4 <UART_SetConfig+0x458>
 8009b2e:	2310      	movs	r3, #16
 8009b30:	77fb      	strb	r3, [r7, #31]
 8009b32:	e057      	b.n	8009be4 <UART_SetConfig+0x458>
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	4a6b      	ldr	r2, [pc, #428]	; (8009ce8 <UART_SetConfig+0x55c>)
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	d125      	bne.n	8009b8a <UART_SetConfig+0x3fe>
 8009b3e:	4b67      	ldr	r3, [pc, #412]	; (8009cdc <UART_SetConfig+0x550>)
 8009b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b44:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009b48:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009b4c:	d017      	beq.n	8009b7e <UART_SetConfig+0x3f2>
 8009b4e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009b52:	d817      	bhi.n	8009b84 <UART_SetConfig+0x3f8>
 8009b54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b58:	d00b      	beq.n	8009b72 <UART_SetConfig+0x3e6>
 8009b5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b5e:	d811      	bhi.n	8009b84 <UART_SetConfig+0x3f8>
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d003      	beq.n	8009b6c <UART_SetConfig+0x3e0>
 8009b64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b68:	d006      	beq.n	8009b78 <UART_SetConfig+0x3ec>
 8009b6a:	e00b      	b.n	8009b84 <UART_SetConfig+0x3f8>
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	77fb      	strb	r3, [r7, #31]
 8009b70:	e038      	b.n	8009be4 <UART_SetConfig+0x458>
 8009b72:	2302      	movs	r3, #2
 8009b74:	77fb      	strb	r3, [r7, #31]
 8009b76:	e035      	b.n	8009be4 <UART_SetConfig+0x458>
 8009b78:	2304      	movs	r3, #4
 8009b7a:	77fb      	strb	r3, [r7, #31]
 8009b7c:	e032      	b.n	8009be4 <UART_SetConfig+0x458>
 8009b7e:	2308      	movs	r3, #8
 8009b80:	77fb      	strb	r3, [r7, #31]
 8009b82:	e02f      	b.n	8009be4 <UART_SetConfig+0x458>
 8009b84:	2310      	movs	r3, #16
 8009b86:	77fb      	strb	r3, [r7, #31]
 8009b88:	e02c      	b.n	8009be4 <UART_SetConfig+0x458>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	4a57      	ldr	r2, [pc, #348]	; (8009cec <UART_SetConfig+0x560>)
 8009b90:	4293      	cmp	r3, r2
 8009b92:	d125      	bne.n	8009be0 <UART_SetConfig+0x454>
 8009b94:	4b51      	ldr	r3, [pc, #324]	; (8009cdc <UART_SetConfig+0x550>)
 8009b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b9a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009b9e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009ba2:	d017      	beq.n	8009bd4 <UART_SetConfig+0x448>
 8009ba4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009ba8:	d817      	bhi.n	8009bda <UART_SetConfig+0x44e>
 8009baa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009bae:	d00b      	beq.n	8009bc8 <UART_SetConfig+0x43c>
 8009bb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009bb4:	d811      	bhi.n	8009bda <UART_SetConfig+0x44e>
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d003      	beq.n	8009bc2 <UART_SetConfig+0x436>
 8009bba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009bbe:	d006      	beq.n	8009bce <UART_SetConfig+0x442>
 8009bc0:	e00b      	b.n	8009bda <UART_SetConfig+0x44e>
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	77fb      	strb	r3, [r7, #31]
 8009bc6:	e00d      	b.n	8009be4 <UART_SetConfig+0x458>
 8009bc8:	2302      	movs	r3, #2
 8009bca:	77fb      	strb	r3, [r7, #31]
 8009bcc:	e00a      	b.n	8009be4 <UART_SetConfig+0x458>
 8009bce:	2304      	movs	r3, #4
 8009bd0:	77fb      	strb	r3, [r7, #31]
 8009bd2:	e007      	b.n	8009be4 <UART_SetConfig+0x458>
 8009bd4:	2308      	movs	r3, #8
 8009bd6:	77fb      	strb	r3, [r7, #31]
 8009bd8:	e004      	b.n	8009be4 <UART_SetConfig+0x458>
 8009bda:	2310      	movs	r3, #16
 8009bdc:	77fb      	strb	r3, [r7, #31]
 8009bde:	e001      	b.n	8009be4 <UART_SetConfig+0x458>
 8009be0:	2310      	movs	r3, #16
 8009be2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	69db      	ldr	r3, [r3, #28]
 8009be8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009bec:	d15c      	bne.n	8009ca8 <UART_SetConfig+0x51c>
  {
    switch (clocksource)
 8009bee:	7ffb      	ldrb	r3, [r7, #31]
 8009bf0:	2b08      	cmp	r3, #8
 8009bf2:	d828      	bhi.n	8009c46 <UART_SetConfig+0x4ba>
 8009bf4:	a201      	add	r2, pc, #4	; (adr r2, 8009bfc <UART_SetConfig+0x470>)
 8009bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bfa:	bf00      	nop
 8009bfc:	08009c21 	.word	0x08009c21
 8009c00:	08009c29 	.word	0x08009c29
 8009c04:	08009c31 	.word	0x08009c31
 8009c08:	08009c47 	.word	0x08009c47
 8009c0c:	08009c37 	.word	0x08009c37
 8009c10:	08009c47 	.word	0x08009c47
 8009c14:	08009c47 	.word	0x08009c47
 8009c18:	08009c47 	.word	0x08009c47
 8009c1c:	08009c3f 	.word	0x08009c3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c20:	f7fb ff6c 	bl	8005afc <HAL_RCC_GetPCLK1Freq>
 8009c24:	61b8      	str	r0, [r7, #24]
        break;
 8009c26:	e013      	b.n	8009c50 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c28:	f7fb ff7c 	bl	8005b24 <HAL_RCC_GetPCLK2Freq>
 8009c2c:	61b8      	str	r0, [r7, #24]
        break;
 8009c2e:	e00f      	b.n	8009c50 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009c30:	4b2f      	ldr	r3, [pc, #188]	; (8009cf0 <UART_SetConfig+0x564>)
 8009c32:	61bb      	str	r3, [r7, #24]
        break;
 8009c34:	e00c      	b.n	8009c50 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009c36:	f7fb fe8f 	bl	8005958 <HAL_RCC_GetSysClockFreq>
 8009c3a:	61b8      	str	r0, [r7, #24]
        break;
 8009c3c:	e008      	b.n	8009c50 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c42:	61bb      	str	r3, [r7, #24]
        break;
 8009c44:	e004      	b.n	8009c50 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 8009c46:	2300      	movs	r3, #0
 8009c48:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	77bb      	strb	r3, [r7, #30]
        break;
 8009c4e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009c50:	69bb      	ldr	r3, [r7, #24]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	f000 8082 	beq.w	8009d5c <UART_SetConfig+0x5d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009c58:	69bb      	ldr	r3, [r7, #24]
 8009c5a:	005a      	lsls	r2, r3, #1
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	685b      	ldr	r3, [r3, #4]
 8009c60:	085b      	lsrs	r3, r3, #1
 8009c62:	441a      	add	r2, r3
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	685b      	ldr	r3, [r3, #4]
 8009c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c6c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	2b0f      	cmp	r3, #15
 8009c72:	d916      	bls.n	8009ca2 <UART_SetConfig+0x516>
 8009c74:	693b      	ldr	r3, [r7, #16]
 8009c76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c7a:	d212      	bcs.n	8009ca2 <UART_SetConfig+0x516>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009c7c:	693b      	ldr	r3, [r7, #16]
 8009c7e:	b29b      	uxth	r3, r3
 8009c80:	f023 030f 	bic.w	r3, r3, #15
 8009c84:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009c86:	693b      	ldr	r3, [r7, #16]
 8009c88:	085b      	lsrs	r3, r3, #1
 8009c8a:	b29b      	uxth	r3, r3
 8009c8c:	f003 0307 	and.w	r3, r3, #7
 8009c90:	b29a      	uxth	r2, r3
 8009c92:	89fb      	ldrh	r3, [r7, #14]
 8009c94:	4313      	orrs	r3, r2
 8009c96:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	89fa      	ldrh	r2, [r7, #14]
 8009c9e:	60da      	str	r2, [r3, #12]
 8009ca0:	e05c      	b.n	8009d5c <UART_SetConfig+0x5d0>
      }
      else
      {
        ret = HAL_ERROR;
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	77bb      	strb	r3, [r7, #30]
 8009ca6:	e059      	b.n	8009d5c <UART_SetConfig+0x5d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009ca8:	7ffb      	ldrb	r3, [r7, #31]
 8009caa:	2b08      	cmp	r3, #8
 8009cac:	d835      	bhi.n	8009d1a <UART_SetConfig+0x58e>
 8009cae:	a201      	add	r2, pc, #4	; (adr r2, 8009cb4 <UART_SetConfig+0x528>)
 8009cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cb4:	08009cf5 	.word	0x08009cf5
 8009cb8:	08009cfd 	.word	0x08009cfd
 8009cbc:	08009d05 	.word	0x08009d05
 8009cc0:	08009d1b 	.word	0x08009d1b
 8009cc4:	08009d0b 	.word	0x08009d0b
 8009cc8:	08009d1b 	.word	0x08009d1b
 8009ccc:	08009d1b 	.word	0x08009d1b
 8009cd0:	08009d1b 	.word	0x08009d1b
 8009cd4:	08009d13 	.word	0x08009d13
 8009cd8:	40004c00 	.word	0x40004c00
 8009cdc:	40023800 	.word	0x40023800
 8009ce0:	40005000 	.word	0x40005000
 8009ce4:	40011400 	.word	0x40011400
 8009ce8:	40007800 	.word	0x40007800
 8009cec:	40007c00 	.word	0x40007c00
 8009cf0:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009cf4:	f7fb ff02 	bl	8005afc <HAL_RCC_GetPCLK1Freq>
 8009cf8:	61b8      	str	r0, [r7, #24]
        break;
 8009cfa:	e013      	b.n	8009d24 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009cfc:	f7fb ff12 	bl	8005b24 <HAL_RCC_GetPCLK2Freq>
 8009d00:	61b8      	str	r0, [r7, #24]
        break;
 8009d02:	e00f      	b.n	8009d24 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009d04:	4b1b      	ldr	r3, [pc, #108]	; (8009d74 <UART_SetConfig+0x5e8>)
 8009d06:	61bb      	str	r3, [r7, #24]
        break;
 8009d08:	e00c      	b.n	8009d24 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009d0a:	f7fb fe25 	bl	8005958 <HAL_RCC_GetSysClockFreq>
 8009d0e:	61b8      	str	r0, [r7, #24]
        break;
 8009d10:	e008      	b.n	8009d24 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d16:	61bb      	str	r3, [r7, #24]
        break;
 8009d18:	e004      	b.n	8009d24 <UART_SetConfig+0x598>
      default:
        pclk = 0U;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009d1e:	2301      	movs	r3, #1
 8009d20:	77bb      	strb	r3, [r7, #30]
        break;
 8009d22:	bf00      	nop
    }

    if (pclk != 0U)
 8009d24:	69bb      	ldr	r3, [r7, #24]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d018      	beq.n	8009d5c <UART_SetConfig+0x5d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	685b      	ldr	r3, [r3, #4]
 8009d2e:	085a      	lsrs	r2, r3, #1
 8009d30:	69bb      	ldr	r3, [r7, #24]
 8009d32:	441a      	add	r2, r3
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	685b      	ldr	r3, [r3, #4]
 8009d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d3c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d3e:	693b      	ldr	r3, [r7, #16]
 8009d40:	2b0f      	cmp	r3, #15
 8009d42:	d909      	bls.n	8009d58 <UART_SetConfig+0x5cc>
 8009d44:	693b      	ldr	r3, [r7, #16]
 8009d46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d4a:	d205      	bcs.n	8009d58 <UART_SetConfig+0x5cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009d4c:	693b      	ldr	r3, [r7, #16]
 8009d4e:	b29a      	uxth	r2, r3
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	60da      	str	r2, [r3, #12]
 8009d56:	e001      	b.n	8009d5c <UART_SetConfig+0x5d0>
      }
      else
      {
        ret = HAL_ERROR;
 8009d58:	2301      	movs	r3, #1
 8009d5a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2200      	movs	r2, #0
 8009d66:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8009d68:	7fbb      	ldrb	r3, [r7, #30]
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3720      	adds	r7, #32
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}
 8009d72:	bf00      	nop
 8009d74:	00f42400 	.word	0x00f42400

08009d78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b082      	sub	sp, #8
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d84:	2bff      	cmp	r3, #255	; 0xff
 8009d86:	d904      	bls.n	8009d92 <UART_AdvFeatureConfig+0x1a>
 8009d88:	f640 31e6 	movw	r1, #3046	; 0xbe6
 8009d8c:	488e      	ldr	r0, [pc, #568]	; (8009fc8 <UART_AdvFeatureConfig+0x250>)
 8009d8e:	f7f7 ff40 	bl	8001c12 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d96:	f003 0301 	and.w	r3, r3, #1
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d018      	beq.n	8009dd0 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d009      	beq.n	8009dba <UART_AdvFeatureConfig+0x42>
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009daa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009dae:	d004      	beq.n	8009dba <UART_AdvFeatureConfig+0x42>
 8009db0:	f640 31eb 	movw	r1, #3051	; 0xbeb
 8009db4:	4884      	ldr	r0, [pc, #528]	; (8009fc8 <UART_AdvFeatureConfig+0x250>)
 8009db6:	f7f7 ff2c 	bl	8001c12 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	685b      	ldr	r3, [r3, #4]
 8009dc0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	430a      	orrs	r2, r1
 8009dce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd4:	f003 0302 	and.w	r3, r3, #2
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d018      	beq.n	8009e0e <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d009      	beq.n	8009df8 <UART_AdvFeatureConfig+0x80>
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009de8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009dec:	d004      	beq.n	8009df8 <UART_AdvFeatureConfig+0x80>
 8009dee:	f640 31f2 	movw	r1, #3058	; 0xbf2
 8009df2:	4875      	ldr	r0, [pc, #468]	; (8009fc8 <UART_AdvFeatureConfig+0x250>)
 8009df4:	f7f7 ff0d 	bl	8001c12 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	685b      	ldr	r3, [r3, #4]
 8009dfe:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	430a      	orrs	r2, r1
 8009e0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e12:	f003 0304 	and.w	r3, r3, #4
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d018      	beq.n	8009e4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d009      	beq.n	8009e36 <UART_AdvFeatureConfig+0xbe>
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009e2a:	d004      	beq.n	8009e36 <UART_AdvFeatureConfig+0xbe>
 8009e2c:	f640 31f9 	movw	r1, #3065	; 0xbf9
 8009e30:	4865      	ldr	r0, [pc, #404]	; (8009fc8 <UART_AdvFeatureConfig+0x250>)
 8009e32:	f7f7 feee 	bl	8001c12 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	685b      	ldr	r3, [r3, #4]
 8009e3c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	430a      	orrs	r2, r1
 8009e4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e50:	f003 0308 	and.w	r3, r3, #8
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d018      	beq.n	8009e8a <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d009      	beq.n	8009e74 <UART_AdvFeatureConfig+0xfc>
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e68:	d004      	beq.n	8009e74 <UART_AdvFeatureConfig+0xfc>
 8009e6a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8009e6e:	4856      	ldr	r0, [pc, #344]	; (8009fc8 <UART_AdvFeatureConfig+0x250>)
 8009e70:	f7f7 fecf 	bl	8001c12 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	685b      	ldr	r3, [r3, #4]
 8009e7a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	430a      	orrs	r2, r1
 8009e88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e8e:	f003 0310 	and.w	r3, r3, #16
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d018      	beq.n	8009ec8 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d009      	beq.n	8009eb2 <UART_AdvFeatureConfig+0x13a>
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ea2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ea6:	d004      	beq.n	8009eb2 <UART_AdvFeatureConfig+0x13a>
 8009ea8:	f640 4107 	movw	r1, #3079	; 0xc07
 8009eac:	4846      	ldr	r0, [pc, #280]	; (8009fc8 <UART_AdvFeatureConfig+0x250>)
 8009eae:	f7f7 feb0 	bl	8001c12 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	689b      	ldr	r3, [r3, #8]
 8009eb8:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	430a      	orrs	r2, r1
 8009ec6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ecc:	f003 0320 	and.w	r3, r3, #32
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d018      	beq.n	8009f06 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d009      	beq.n	8009ef0 <UART_AdvFeatureConfig+0x178>
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ee0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ee4:	d004      	beq.n	8009ef0 <UART_AdvFeatureConfig+0x178>
 8009ee6:	f640 410e 	movw	r1, #3086	; 0xc0e
 8009eea:	4837      	ldr	r0, [pc, #220]	; (8009fc8 <UART_AdvFeatureConfig+0x250>)
 8009eec:	f7f7 fe91 	bl	8001c12 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	689b      	ldr	r3, [r3, #8]
 8009ef6:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	430a      	orrs	r2, r1
 8009f04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d064      	beq.n	8009fdc <UART_AdvFeatureConfig+0x264>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	4a2d      	ldr	r2, [pc, #180]	; (8009fcc <UART_AdvFeatureConfig+0x254>)
 8009f18:	4293      	cmp	r3, r2
 8009f1a:	d013      	beq.n	8009f44 <UART_AdvFeatureConfig+0x1cc>
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	4a2b      	ldr	r2, [pc, #172]	; (8009fd0 <UART_AdvFeatureConfig+0x258>)
 8009f22:	4293      	cmp	r3, r2
 8009f24:	d00e      	beq.n	8009f44 <UART_AdvFeatureConfig+0x1cc>
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	4a2a      	ldr	r2, [pc, #168]	; (8009fd4 <UART_AdvFeatureConfig+0x25c>)
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	d009      	beq.n	8009f44 <UART_AdvFeatureConfig+0x1cc>
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	4a28      	ldr	r2, [pc, #160]	; (8009fd8 <UART_AdvFeatureConfig+0x260>)
 8009f36:	4293      	cmp	r3, r2
 8009f38:	d004      	beq.n	8009f44 <UART_AdvFeatureConfig+0x1cc>
 8009f3a:	f640 4115 	movw	r1, #3093	; 0xc15
 8009f3e:	4822      	ldr	r0, [pc, #136]	; (8009fc8 <UART_AdvFeatureConfig+0x250>)
 8009f40:	f7f7 fe67 	bl	8001c12 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d009      	beq.n	8009f60 <UART_AdvFeatureConfig+0x1e8>
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f54:	d004      	beq.n	8009f60 <UART_AdvFeatureConfig+0x1e8>
 8009f56:	f640 4116 	movw	r1, #3094	; 0xc16
 8009f5a:	481b      	ldr	r0, [pc, #108]	; (8009fc8 <UART_AdvFeatureConfig+0x250>)
 8009f5c:	f7f7 fe59 	bl	8001c12 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	685b      	ldr	r3, [r3, #4]
 8009f66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	430a      	orrs	r2, r1
 8009f74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f7e:	d12d      	bne.n	8009fdc <UART_AdvFeatureConfig+0x264>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d013      	beq.n	8009fb0 <UART_AdvFeatureConfig+0x238>
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009f90:	d00e      	beq.n	8009fb0 <UART_AdvFeatureConfig+0x238>
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009f9a:	d009      	beq.n	8009fb0 <UART_AdvFeatureConfig+0x238>
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fa0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009fa4:	d004      	beq.n	8009fb0 <UART_AdvFeatureConfig+0x238>
 8009fa6:	f640 411b 	movw	r1, #3099	; 0xc1b
 8009faa:	4807      	ldr	r0, [pc, #28]	; (8009fc8 <UART_AdvFeatureConfig+0x250>)
 8009fac:	f7f7 fe31 	bl	8001c12 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	685b      	ldr	r3, [r3, #4]
 8009fb6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	430a      	orrs	r2, r1
 8009fc4:	605a      	str	r2, [r3, #4]
 8009fc6:	e009      	b.n	8009fdc <UART_AdvFeatureConfig+0x264>
 8009fc8:	08014b64 	.word	0x08014b64
 8009fcc:	40011000 	.word	0x40011000
 8009fd0:	40004400 	.word	0x40004400
 8009fd4:	40004800 	.word	0x40004800
 8009fd8:	40011400 	.word	0x40011400
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fe0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d018      	beq.n	800a01a <UART_AdvFeatureConfig+0x2a2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d009      	beq.n	800a004 <UART_AdvFeatureConfig+0x28c>
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ff4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009ff8:	d004      	beq.n	800a004 <UART_AdvFeatureConfig+0x28c>
 8009ffa:	f640 4123 	movw	r1, #3107	; 0xc23
 8009ffe:	4809      	ldr	r0, [pc, #36]	; (800a024 <UART_AdvFeatureConfig+0x2ac>)
 800a000:	f7f7 fe07 	bl	8001c12 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	685b      	ldr	r3, [r3, #4]
 800a00a:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	430a      	orrs	r2, r1
 800a018:	605a      	str	r2, [r3, #4]
  }
}
 800a01a:	bf00      	nop
 800a01c:	3708      	adds	r7, #8
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}
 800a022:	bf00      	nop
 800a024:	08014b64 	.word	0x08014b64

0800a028 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b086      	sub	sp, #24
 800a02c:	af02      	add	r7, sp, #8
 800a02e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2200      	movs	r2, #0
 800a034:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a038:	f7f8 fd38 	bl	8002aac <HAL_GetTick>
 800a03c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	f003 0308 	and.w	r3, r3, #8
 800a048:	2b08      	cmp	r3, #8
 800a04a:	d10e      	bne.n	800a06a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a04c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a050:	9300      	str	r3, [sp, #0]
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	2200      	movs	r2, #0
 800a056:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	f000 f81b 	bl	800a096 <UART_WaitOnFlagUntilTimeout>
 800a060:	4603      	mov	r3, r0
 800a062:	2b00      	cmp	r3, #0
 800a064:	d001      	beq.n	800a06a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a066:	2303      	movs	r3, #3
 800a068:	e011      	b.n	800a08e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2220      	movs	r2, #32
 800a06e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2220      	movs	r2, #32
 800a074:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2200      	movs	r2, #0
 800a07c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2200      	movs	r2, #0
 800a082:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2200      	movs	r2, #0
 800a088:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800a08c:	2300      	movs	r3, #0
}
 800a08e:	4618      	mov	r0, r3
 800a090:	3710      	adds	r7, #16
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}

0800a096 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a096:	b580      	push	{r7, lr}
 800a098:	b09c      	sub	sp, #112	; 0x70
 800a09a:	af00      	add	r7, sp, #0
 800a09c:	60f8      	str	r0, [r7, #12]
 800a09e:	60b9      	str	r1, [r7, #8]
 800a0a0:	603b      	str	r3, [r7, #0]
 800a0a2:	4613      	mov	r3, r2
 800a0a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0a6:	e0a7      	b.n	800a1f8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a0a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a0aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0ae:	f000 80a3 	beq.w	800a1f8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a0b2:	f7f8 fcfb 	bl	8002aac <HAL_GetTick>
 800a0b6:	4602      	mov	r2, r0
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	1ad3      	subs	r3, r2, r3
 800a0bc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a0be:	429a      	cmp	r2, r3
 800a0c0:	d302      	bcc.n	800a0c8 <UART_WaitOnFlagUntilTimeout+0x32>
 800a0c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d13f      	bne.n	800a148 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0d0:	e853 3f00 	ldrex	r3, [r3]
 800a0d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a0d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a0dc:	667b      	str	r3, [r7, #100]	; 0x64
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	461a      	mov	r2, r3
 800a0e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a0e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a0e8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a0ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a0ee:	e841 2300 	strex	r3, r2, [r1]
 800a0f2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a0f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d1e6      	bne.n	800a0c8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	3308      	adds	r3, #8
 800a100:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a104:	e853 3f00 	ldrex	r3, [r3]
 800a108:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a10a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a10c:	f023 0301 	bic.w	r3, r3, #1
 800a110:	663b      	str	r3, [r7, #96]	; 0x60
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	3308      	adds	r3, #8
 800a118:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a11a:	64ba      	str	r2, [r7, #72]	; 0x48
 800a11c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a11e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a120:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a122:	e841 2300 	strex	r3, r2, [r1]
 800a126:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a128:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d1e5      	bne.n	800a0fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	2220      	movs	r2, #32
 800a132:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	2220      	movs	r2, #32
 800a138:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	2200      	movs	r2, #0
 800a140:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800a144:	2303      	movs	r3, #3
 800a146:	e068      	b.n	800a21a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f003 0304 	and.w	r3, r3, #4
 800a152:	2b00      	cmp	r3, #0
 800a154:	d050      	beq.n	800a1f8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	69db      	ldr	r3, [r3, #28]
 800a15c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a160:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a164:	d148      	bne.n	800a1f8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a16e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a178:	e853 3f00 	ldrex	r3, [r3]
 800a17c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a180:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a184:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	461a      	mov	r2, r3
 800a18c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a18e:	637b      	str	r3, [r7, #52]	; 0x34
 800a190:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a192:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a194:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a196:	e841 2300 	strex	r3, r2, [r1]
 800a19a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a19c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d1e6      	bne.n	800a170 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	3308      	adds	r3, #8
 800a1a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1aa:	697b      	ldr	r3, [r7, #20]
 800a1ac:	e853 3f00 	ldrex	r3, [r3]
 800a1b0:	613b      	str	r3, [r7, #16]
   return(result);
 800a1b2:	693b      	ldr	r3, [r7, #16]
 800a1b4:	f023 0301 	bic.w	r3, r3, #1
 800a1b8:	66bb      	str	r3, [r7, #104]	; 0x68
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	3308      	adds	r3, #8
 800a1c0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a1c2:	623a      	str	r2, [r7, #32]
 800a1c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1c6:	69f9      	ldr	r1, [r7, #28]
 800a1c8:	6a3a      	ldr	r2, [r7, #32]
 800a1ca:	e841 2300 	strex	r3, r2, [r1]
 800a1ce:	61bb      	str	r3, [r7, #24]
   return(result);
 800a1d0:	69bb      	ldr	r3, [r7, #24]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d1e5      	bne.n	800a1a2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	2220      	movs	r2, #32
 800a1da:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	2220      	movs	r2, #32
 800a1e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	2220      	movs	r2, #32
 800a1e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800a1f4:	2303      	movs	r3, #3
 800a1f6:	e010      	b.n	800a21a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	69da      	ldr	r2, [r3, #28]
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	4013      	ands	r3, r2
 800a202:	68ba      	ldr	r2, [r7, #8]
 800a204:	429a      	cmp	r2, r3
 800a206:	bf0c      	ite	eq
 800a208:	2301      	moveq	r3, #1
 800a20a:	2300      	movne	r3, #0
 800a20c:	b2db      	uxtb	r3, r3
 800a20e:	461a      	mov	r2, r3
 800a210:	79fb      	ldrb	r3, [r7, #7]
 800a212:	429a      	cmp	r2, r3
 800a214:	f43f af48 	beq.w	800a0a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a218:	2300      	movs	r3, #0
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3770      	adds	r7, #112	; 0x70
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}

0800a222 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a222:	b480      	push	{r7}
 800a224:	b095      	sub	sp, #84	; 0x54
 800a226:	af00      	add	r7, sp, #0
 800a228:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a232:	e853 3f00 	ldrex	r3, [r3]
 800a236:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a23a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a23e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	461a      	mov	r2, r3
 800a246:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a248:	643b      	str	r3, [r7, #64]	; 0x40
 800a24a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a24c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a24e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a250:	e841 2300 	strex	r3, r2, [r1]
 800a254:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d1e6      	bne.n	800a22a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	3308      	adds	r3, #8
 800a262:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a264:	6a3b      	ldr	r3, [r7, #32]
 800a266:	e853 3f00 	ldrex	r3, [r3]
 800a26a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a26c:	69fb      	ldr	r3, [r7, #28]
 800a26e:	f023 0301 	bic.w	r3, r3, #1
 800a272:	64bb      	str	r3, [r7, #72]	; 0x48
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	3308      	adds	r3, #8
 800a27a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a27c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a27e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a280:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a282:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a284:	e841 2300 	strex	r3, r2, [r1]
 800a288:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a28a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d1e5      	bne.n	800a25c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a294:	2b01      	cmp	r3, #1
 800a296:	d118      	bne.n	800a2ca <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	e853 3f00 	ldrex	r3, [r3]
 800a2a4:	60bb      	str	r3, [r7, #8]
   return(result);
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	f023 0310 	bic.w	r3, r3, #16
 800a2ac:	647b      	str	r3, [r7, #68]	; 0x44
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	461a      	mov	r2, r3
 800a2b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a2b6:	61bb      	str	r3, [r7, #24]
 800a2b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2ba:	6979      	ldr	r1, [r7, #20]
 800a2bc:	69ba      	ldr	r2, [r7, #24]
 800a2be:	e841 2300 	strex	r3, r2, [r1]
 800a2c2:	613b      	str	r3, [r7, #16]
   return(result);
 800a2c4:	693b      	ldr	r3, [r7, #16]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d1e6      	bne.n	800a298 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2220      	movs	r2, #32
 800a2ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2200      	movs	r2, #0
 800a2dc:	669a      	str	r2, [r3, #104]	; 0x68
}
 800a2de:	bf00      	nop
 800a2e0:	3754      	adds	r7, #84	; 0x54
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e8:	4770      	bx	lr

0800a2ea <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a2ea:	b580      	push	{r7, lr}
 800a2ec:	b084      	sub	sp, #16
 800a2ee:	af00      	add	r7, sp, #0
 800a2f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	2200      	movs	r2, #0
 800a304:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a308:	68f8      	ldr	r0, [r7, #12]
 800a30a:	f7ff fa29 	bl	8009760 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a30e:	bf00      	nop
 800a310:	3710      	adds	r7, #16
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}

0800a316 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a316:	b580      	push	{r7, lr}
 800a318:	b088      	sub	sp, #32
 800a31a:	af00      	add	r7, sp, #0
 800a31c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	e853 3f00 	ldrex	r3, [r3]
 800a32a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a332:	61fb      	str	r3, [r7, #28]
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	461a      	mov	r2, r3
 800a33a:	69fb      	ldr	r3, [r7, #28]
 800a33c:	61bb      	str	r3, [r7, #24]
 800a33e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a340:	6979      	ldr	r1, [r7, #20]
 800a342:	69ba      	ldr	r2, [r7, #24]
 800a344:	e841 2300 	strex	r3, r2, [r1]
 800a348:	613b      	str	r3, [r7, #16]
   return(result);
 800a34a:	693b      	ldr	r3, [r7, #16]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d1e6      	bne.n	800a31e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2220      	movs	r2, #32
 800a354:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2200      	movs	r2, #0
 800a35a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f7ff f9f5 	bl	800974c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a362:	bf00      	nop
 800a364:	3720      	adds	r7, #32
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}

0800a36a <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 800a36a:	b580      	push	{r7, lr}
 800a36c:	b084      	sub	sp, #16
 800a36e:	af00      	add	r7, sp, #0
 800a370:	6078      	str	r0, [r7, #4]
 800a372:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a374:	2300      	movs	r3, #0
 800a376:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 800a378:	6839      	ldr	r1, [r7, #0]
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f001 fce1 	bl	800bd42 <VL53L0X_get_offset_calibration_data_micro_meter>
 800a380:	4603      	mov	r3, r0
 800a382:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 800a384:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a388:	4618      	mov	r0, r3
 800a38a:	3710      	adds	r7, #16
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bd80      	pop	{r7, pc}

0800a390 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 800a390:	b5b0      	push	{r4, r5, r7, lr}
 800a392:	b096      	sub	sp, #88	; 0x58
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a398:	2300      	movs	r3, #0
 800a39a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 800a39e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d107      	bne.n	800a3b6 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	2188      	movs	r1, #136	; 0x88
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f004 feda 	bl	800f164 <VL53L0X_WrByte>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a3c4:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800a3ce:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	4a9e      	ldr	r2, [pc, #632]	; (800a650 <VL53L0X_DataInit+0x2c0>)
 800a3d6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	4a9d      	ldr	r2, [pc, #628]	; (800a654 <VL53L0X_DataInit+0x2c4>)
 800a3de:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800a3e8:	f107 0310 	add.w	r3, r7, #16
 800a3ec:	4619      	mov	r1, r3
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f000 fac2 	bl	800a978 <VL53L0X_GetDeviceParameters>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 800a3fa:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d112      	bne.n	800a428 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 800a402:	2300      	movs	r3, #0
 800a404:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 800a406:	2300      	movs	r3, #0
 800a408:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	f103 0410 	add.w	r4, r3, #16
 800a410:	f107 0510 	add.w	r5, r7, #16
 800a414:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a416:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a418:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a41a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a41c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a41e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a420:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800a424:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2264      	movs	r2, #100	; 0x64
 800a42c:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f44f 7261 	mov.w	r2, #900	; 0x384
 800a436:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800a440:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800a44a:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2201      	movs	r2, #1
 800a452:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800a456:	2201      	movs	r2, #1
 800a458:	2180      	movs	r1, #128	; 0x80
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	f004 fe82 	bl	800f164 <VL53L0X_WrByte>
 800a460:	4603      	mov	r3, r0
 800a462:	461a      	mov	r2, r3
 800a464:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a468:	4313      	orrs	r3, r2
 800a46a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a46e:	2201      	movs	r2, #1
 800a470:	21ff      	movs	r1, #255	; 0xff
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f004 fe76 	bl	800f164 <VL53L0X_WrByte>
 800a478:	4603      	mov	r3, r0
 800a47a:	461a      	mov	r2, r3
 800a47c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a480:	4313      	orrs	r3, r2
 800a482:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800a486:	2200      	movs	r2, #0
 800a488:	2100      	movs	r1, #0
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f004 fe6a 	bl	800f164 <VL53L0X_WrByte>
 800a490:	4603      	mov	r3, r0
 800a492:	461a      	mov	r2, r3
 800a494:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a498:	4313      	orrs	r3, r2
 800a49a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 800a49e:	f107 030f 	add.w	r3, r7, #15
 800a4a2:	461a      	mov	r2, r3
 800a4a4:	2191      	movs	r1, #145	; 0x91
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f004 fede 	bl	800f268 <VL53L0X_RdByte>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	461a      	mov	r2, r3
 800a4b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a4b4:	4313      	orrs	r3, r2
 800a4b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 800a4ba:	7bfa      	ldrb	r2, [r7, #15]
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800a4c2:	2201      	movs	r2, #1
 800a4c4:	2100      	movs	r1, #0
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f004 fe4c 	bl	800f164 <VL53L0X_WrByte>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	461a      	mov	r2, r3
 800a4d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a4d4:	4313      	orrs	r3, r2
 800a4d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a4da:	2200      	movs	r2, #0
 800a4dc:	21ff      	movs	r1, #255	; 0xff
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f004 fe40 	bl	800f164 <VL53L0X_WrByte>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	461a      	mov	r2, r3
 800a4e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a4ec:	4313      	orrs	r3, r2
 800a4ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	2180      	movs	r1, #128	; 0x80
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f004 fe34 	bl	800f164 <VL53L0X_WrByte>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	461a      	mov	r2, r3
 800a500:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a504:	4313      	orrs	r3, r2
 800a506:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800a50a:	2300      	movs	r3, #0
 800a50c:	653b      	str	r3, [r7, #80]	; 0x50
 800a50e:	e014      	b.n	800a53a <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 800a510:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a514:	2b00      	cmp	r3, #0
 800a516:	d114      	bne.n	800a542 <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 800a518:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a51a:	b29b      	uxth	r3, r3
 800a51c:	2201      	movs	r2, #1
 800a51e:	4619      	mov	r1, r3
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f000 fd35 	bl	800af90 <VL53L0X_SetLimitCheckEnable>
 800a526:	4603      	mov	r3, r0
 800a528:	461a      	mov	r2, r3
 800a52a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a52e:	4313      	orrs	r3, r2
 800a530:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800a534:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a536:	3301      	adds	r3, #1
 800a538:	653b      	str	r3, [r7, #80]	; 0x50
 800a53a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a53c:	2b05      	cmp	r3, #5
 800a53e:	dde7      	ble.n	800a510 <VL53L0X_DataInit+0x180>
 800a540:	e000      	b.n	800a544 <VL53L0X_DataInit+0x1b4>
		else
			break;
 800a542:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 800a544:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d107      	bne.n	800a55c <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800a54c:	2200      	movs	r2, #0
 800a54e:	2102      	movs	r1, #2
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f000 fd1d 	bl	800af90 <VL53L0X_SetLimitCheckEnable>
 800a556:	4603      	mov	r3, r0
 800a558:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800a55c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a560:	2b00      	cmp	r3, #0
 800a562:	d107      	bne.n	800a574 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800a564:	2200      	movs	r2, #0
 800a566:	2103      	movs	r1, #3
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f000 fd11 	bl	800af90 <VL53L0X_SetLimitCheckEnable>
 800a56e:	4603      	mov	r3, r0
 800a570:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800a574:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d107      	bne.n	800a58c <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800a57c:	2200      	movs	r2, #0
 800a57e:	2104      	movs	r1, #4
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f000 fd05 	bl	800af90 <VL53L0X_SetLimitCheckEnable>
 800a586:	4603      	mov	r3, r0
 800a588:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800a58c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a590:	2b00      	cmp	r3, #0
 800a592:	d107      	bne.n	800a5a4 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800a594:	2200      	movs	r2, #0
 800a596:	2105      	movs	r1, #5
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f000 fcf9 	bl	800af90 <VL53L0X_SetLimitCheckEnable>
 800a59e:	4603      	mov	r3, r0
 800a5a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 800a5a4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d108      	bne.n	800a5be <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800a5ac:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 800a5b0:	2100      	movs	r1, #0
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f000 fd9c 	bl	800b0f0 <VL53L0X_SetLimitCheckValue>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800a5be:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d108      	bne.n	800a5d8 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800a5c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a5ca:	2101      	movs	r1, #1
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f000 fd8f 	bl	800b0f0 <VL53L0X_SetLimitCheckValue>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a5d8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d108      	bne.n	800a5f2 <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800a5e0:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 800a5e4:	2102      	movs	r1, #2
 800a5e6:	6878      	ldr	r0, [r7, #4]
 800a5e8:	f000 fd82 	bl	800b0f0 <VL53L0X_SetLimitCheckValue>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a5f2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d107      	bne.n	800a60a <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	2103      	movs	r1, #3
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f000 fd76 	bl	800b0f0 <VL53L0X_SetLimitCheckValue>
 800a604:	4603      	mov	r3, r0
 800a606:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a60a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d10f      	bne.n	800a632 <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	22ff      	movs	r2, #255	; 0xff
 800a616:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800a61a:	22ff      	movs	r2, #255	; 0xff
 800a61c:	2101      	movs	r1, #1
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f004 fda0 	bl	800f164 <VL53L0X_WrByte>
 800a624:	4603      	mov	r3, r0
 800a626:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2201      	movs	r2, #1
 800a62e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 800a632:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a636:	2b00      	cmp	r3, #0
 800a638:	d103      	bne.n	800a642 <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2200      	movs	r2, #0
 800a63e:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 800a642:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800a646:	4618      	mov	r0, r3
 800a648:	3758      	adds	r7, #88	; 0x58
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bdb0      	pop	{r4, r5, r7, pc}
 800a64e:	bf00      	nop
 800a650:	00016b85 	.word	0x00016b85
 800a654:	000970a4 	.word	0x000970a4

0800a658 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 800a658:	b5b0      	push	{r4, r5, r7, lr}
 800a65a:	b09e      	sub	sp, #120	; 0x78
 800a65c:	af02      	add	r7, sp, #8
 800a65e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a660:	2300      	movs	r3, #0
 800a662:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 800a666:	f107 031c 	add.w	r3, r7, #28
 800a66a:	2240      	movs	r2, #64	; 0x40
 800a66c:	2100      	movs	r1, #0
 800a66e:	4618      	mov	r0, r3
 800a670:	f004 fee0 	bl	800f434 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 800a674:	2300      	movs	r3, #0
 800a676:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 800a678:	2300      	movs	r3, #0
 800a67a:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 800a67c:	2300      	movs	r3, #0
 800a67e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 800a682:	2300      	movs	r3, #0
 800a684:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 800a686:	2300      	movs	r3, #0
 800a688:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 800a68a:	2300      	movs	r3, #0
 800a68c:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 800a68e:	2300      	movs	r3, #0
 800a690:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 800a694:	2101      	movs	r1, #1
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f002 faa9 	bl	800cbee <VL53L0X_get_info_from_device>
 800a69c:	4603      	mov	r3, r0
 800a69e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 800a6a8:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 800a6b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 800a6b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a6b8:	2b01      	cmp	r3, #1
 800a6ba:	d80d      	bhi.n	800a6d8 <VL53L0X_StaticInit+0x80>
 800a6bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a6c0:	2b01      	cmp	r3, #1
 800a6c2:	d102      	bne.n	800a6ca <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 800a6c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a6c6:	2b20      	cmp	r3, #32
 800a6c8:	d806      	bhi.n	800a6d8 <VL53L0X_StaticInit+0x80>
 800a6ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d10e      	bne.n	800a6f0 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 800a6d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a6d4:	2b0c      	cmp	r3, #12
 800a6d6:	d90b      	bls.n	800a6f0 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 800a6d8:	f107 0218 	add.w	r2, r7, #24
 800a6dc:	f107 0314 	add.w	r3, r7, #20
 800a6e0:	4619      	mov	r1, r3
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f001 fd28 	bl	800c138 <VL53L0X_perform_ref_spad_management>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800a6ee:	e009      	b.n	800a704 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 800a6f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a6f4:	461a      	mov	r2, r3
 800a6f6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	f001 ff29 	bl	800c550 <VL53L0X_set_reference_spads>
 800a6fe:	4603      	mov	r3, r0
 800a700:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 800a704:	4b94      	ldr	r3, [pc, #592]	; (800a958 <VL53L0X_StaticInit+0x300>)
 800a706:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 800a708:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d10f      	bne.n	800a730 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 800a716:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 800a71a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d104      	bne.n	800a72c <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800a728:	66bb      	str	r3, [r7, #104]	; 0x68
 800a72a:	e001      	b.n	800a730 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 800a72c:	4b8a      	ldr	r3, [pc, #552]	; (800a958 <VL53L0X_StaticInit+0x300>)
 800a72e:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 800a730:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a734:	2b00      	cmp	r3, #0
 800a736:	d106      	bne.n	800a746 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 800a738:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f003 fdfc 	bl	800e338 <VL53L0X_load_tuning_settings>
 800a740:	4603      	mov	r3, r0
 800a742:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 800a746:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d10a      	bne.n	800a764 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 800a74e:	2300      	movs	r3, #0
 800a750:	9300      	str	r3, [sp, #0]
 800a752:	2304      	movs	r3, #4
 800a754:	2200      	movs	r2, #0
 800a756:	2100      	movs	r1, #0
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	f001 f8f1 	bl	800b940 <VL53L0X_SetGpioConfig>
 800a75e:	4603      	mov	r3, r0
 800a760:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a764:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d121      	bne.n	800a7b0 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a76c:	2201      	movs	r2, #1
 800a76e:	21ff      	movs	r1, #255	; 0xff
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	f004 fcf7 	bl	800f164 <VL53L0X_WrByte>
 800a776:	4603      	mov	r3, r0
 800a778:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 800a77c:	f107 031a 	add.w	r3, r7, #26
 800a780:	461a      	mov	r2, r3
 800a782:	2184      	movs	r1, #132	; 0x84
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f004 fd99 	bl	800f2bc <VL53L0X_RdWord>
 800a78a:	4603      	mov	r3, r0
 800a78c:	461a      	mov	r2, r3
 800a78e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a792:	4313      	orrs	r3, r2
 800a794:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a798:	2200      	movs	r2, #0
 800a79a:	21ff      	movs	r1, #255	; 0xff
 800a79c:	6878      	ldr	r0, [r7, #4]
 800a79e:	f004 fce1 	bl	800f164 <VL53L0X_WrByte>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	461a      	mov	r2, r3
 800a7a6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a7aa:	4313      	orrs	r3, r2
 800a7ac:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a7b0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d105      	bne.n	800a7c4 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 800a7b8:	8b7b      	ldrh	r3, [r7, #26]
 800a7ba:	011b      	lsls	r3, r3, #4
 800a7bc:	461a      	mov	r2, r3
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 800a7c4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d108      	bne.n	800a7de <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800a7cc:	f107 031c 	add.w	r3, r7, #28
 800a7d0:	4619      	mov	r1, r3
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	f000 f8d0 	bl	800a978 <VL53L0X_GetDeviceParameters>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 800a7de:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d110      	bne.n	800a808 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 800a7e6:	f107 0319 	add.w	r3, r7, #25
 800a7ea:	4619      	mov	r1, r3
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f000 f992 	bl	800ab16 <VL53L0X_GetFractionEnable>
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 800a7f8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d103      	bne.n	800a808 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 800a800:	7e7a      	ldrb	r2, [r7, #25]
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 800a808:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d10e      	bne.n	800a82e <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	f103 0410 	add.w	r4, r3, #16
 800a816:	f107 051c 	add.w	r5, r7, #28
 800a81a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a81c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a81e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a820:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a822:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a824:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a826:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800a82a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 800a82e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a832:	2b00      	cmp	r3, #0
 800a834:	d111      	bne.n	800a85a <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 800a836:	f107 0319 	add.w	r3, r7, #25
 800a83a:	461a      	mov	r2, r3
 800a83c:	2101      	movs	r1, #1
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f004 fd12 	bl	800f268 <VL53L0X_RdByte>
 800a844:	4603      	mov	r3, r0
 800a846:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 800a84a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d103      	bne.n	800a85a <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 800a852:	7e7a      	ldrb	r2, [r7, #25]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 800a85a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d107      	bne.n	800a872 <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800a862:	2200      	movs	r2, #0
 800a864:	2100      	movs	r1, #0
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	f000 f9ca 	bl	800ac00 <VL53L0X_SetSequenceStepEnable>
 800a86c:	4603      	mov	r3, r0
 800a86e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800a872:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a876:	2b00      	cmp	r3, #0
 800a878:	d107      	bne.n	800a88a <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800a87a:	2200      	movs	r2, #0
 800a87c:	2102      	movs	r1, #2
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f000 f9be 	bl	800ac00 <VL53L0X_SetSequenceStepEnable>
 800a884:	4603      	mov	r3, r0
 800a886:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 800a88a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d103      	bne.n	800a89a <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2203      	movs	r2, #3
 800a896:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800a89a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d109      	bne.n	800a8b6 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 800a8a2:	f107 0313 	add.w	r3, r7, #19
 800a8a6:	461a      	mov	r2, r3
 800a8a8:	2100      	movs	r1, #0
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f000 f990 	bl	800abd0 <VL53L0X_GetVcselPulsePeriod>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a8b6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d103      	bne.n	800a8c6 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a8be:	7cfa      	ldrb	r2, [r7, #19]
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800a8c6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d109      	bne.n	800a8e2 <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 800a8ce:	f107 0313 	add.w	r3, r7, #19
 800a8d2:	461a      	mov	r2, r3
 800a8d4:	2101      	movs	r1, #1
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	f000 f97a 	bl	800abd0 <VL53L0X_GetVcselPulsePeriod>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a8e2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d103      	bne.n	800a8f2 <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a8ea:	7cfa      	ldrb	r2, [r7, #19]
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800a8f2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d109      	bne.n	800a90e <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 800a8fa:	f107 030c 	add.w	r3, r7, #12
 800a8fe:	461a      	mov	r2, r3
 800a900:	2103      	movs	r1, #3
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f002 fef4 	bl	800d6f0 <get_sequence_step_timeout>
 800a908:	4603      	mov	r3, r0
 800a90a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a90e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a912:	2b00      	cmp	r3, #0
 800a914:	d103      	bne.n	800a91e <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a916:	68fa      	ldr	r2, [r7, #12]
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800a91e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a922:	2b00      	cmp	r3, #0
 800a924:	d109      	bne.n	800a93a <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 800a926:	f107 030c 	add.w	r3, r7, #12
 800a92a:	461a      	mov	r2, r3
 800a92c:	2104      	movs	r1, #4
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	f002 fede 	bl	800d6f0 <get_sequence_step_timeout>
 800a934:	4603      	mov	r3, r0
 800a936:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a93a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d103      	bne.n	800a94a <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a942:	68fa      	ldr	r2, [r7, #12]
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a94a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 800a94e:	4618      	mov	r0, r3
 800a950:	3770      	adds	r7, #112	; 0x70
 800a952:	46bd      	mov	sp, r7
 800a954:	bdb0      	pop	{r4, r5, r7, pc}
 800a956:	bf00      	nop
 800a958:	20000030 	.word	0x20000030

0800a95c <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 800a95c:	b480      	push	{r7}
 800a95e:	b085      	sub	sp, #20
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 800a964:	239d      	movs	r3, #157	; 0x9d
 800a966:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 800a968:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a96c:	4618      	mov	r0, r3
 800a96e:	3714      	adds	r7, #20
 800a970:	46bd      	mov	sp, r7
 800a972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a976:	4770      	bx	lr

0800a978 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b084      	sub	sp, #16
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
 800a980:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a982:	2300      	movs	r3, #0
 800a984:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	4619      	mov	r1, r3
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	f000 f8b0 	bl	800aaf0 <VL53L0X_GetDeviceMode>
 800a990:	4603      	mov	r3, r0
 800a992:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800a994:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d107      	bne.n	800a9ac <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	3308      	adds	r3, #8
 800a9a0:	4619      	mov	r1, r3
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f000 fa78 	bl	800ae98 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 800a9ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d102      	bne.n	800a9ba <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 800a9ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d107      	bne.n	800a9d2 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	3310      	adds	r3, #16
 800a9c6:	4619      	mov	r1, r3
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f000 faae 	bl	800af2a <VL53L0X_GetXTalkCompensationRateMegaCps>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 800a9d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d107      	bne.n	800a9ea <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	3314      	adds	r3, #20
 800a9de:	4619      	mov	r1, r3
 800a9e0:	6878      	ldr	r0, [r7, #4]
 800a9e2:	f7ff fcc2 	bl	800a36a <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 800a9ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d134      	bne.n	800aa5c <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	60bb      	str	r3, [r7, #8]
 800a9f6:	e02a      	b.n	800aa4e <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800a9f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d12a      	bne.n	800aa56 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	b299      	uxth	r1, r3
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	3308      	adds	r3, #8
 800aa08:	009b      	lsls	r3, r3, #2
 800aa0a:	683a      	ldr	r2, [r7, #0]
 800aa0c:	4413      	add	r3, r2
 800aa0e:	3304      	adds	r3, #4
 800aa10:	461a      	mov	r2, r3
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f000 fbce 	bl	800b1b4 <VL53L0X_GetLimitCheckValue>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	461a      	mov	r2, r3
 800aa1c:	7bfb      	ldrb	r3, [r7, #15]
 800aa1e:	4313      	orrs	r3, r2
 800aa20:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800aa22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d117      	bne.n	800aa5a <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	b299      	uxth	r1, r3
 800aa2e:	68bb      	ldr	r3, [r7, #8]
 800aa30:	3318      	adds	r3, #24
 800aa32:	683a      	ldr	r2, [r7, #0]
 800aa34:	4413      	add	r3, r2
 800aa36:	461a      	mov	r2, r3
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f000 fb35 	bl	800b0a8 <VL53L0X_GetLimitCheckEnable>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	461a      	mov	r2, r3
 800aa42:	7bfb      	ldrb	r3, [r7, #15]
 800aa44:	4313      	orrs	r3, r2
 800aa46:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800aa48:	68bb      	ldr	r3, [r7, #8]
 800aa4a:	3301      	adds	r3, #1
 800aa4c:	60bb      	str	r3, [r7, #8]
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	2b05      	cmp	r3, #5
 800aa52:	ddd1      	ble.n	800a9f8 <VL53L0X_GetDeviceParameters+0x80>
 800aa54:	e002      	b.n	800aa5c <VL53L0X_GetDeviceParameters+0xe4>
				break;
 800aa56:	bf00      	nop
 800aa58:	e000      	b.n	800aa5c <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 800aa5a:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800aa5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d107      	bne.n	800aa74 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	333c      	adds	r3, #60	; 0x3c
 800aa68:	4619      	mov	r1, r3
 800aa6a:	6878      	ldr	r0, [r7, #4]
 800aa6c:	f000 fc30 	bl	800b2d0 <VL53L0X_GetWrapAroundCheckEnable>
 800aa70:	4603      	mov	r3, r0
 800aa72:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 800aa74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d107      	bne.n	800aa8c <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	3304      	adds	r3, #4
 800aa80:	4619      	mov	r1, r3
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	f000 f879 	bl	800ab7a <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800aa8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aa90:	4618      	mov	r0, r3
 800aa92:	3710      	adds	r7, #16
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}

0800aa98 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 800aa98:	b480      	push	{r7}
 800aa9a:	b085      	sub	sp, #20
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
 800aaa0:	460b      	mov	r3, r1
 800aaa2:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 800aaa8:	78fb      	ldrb	r3, [r7, #3]
 800aaaa:	2b15      	cmp	r3, #21
 800aaac:	bf8c      	ite	hi
 800aaae:	2201      	movhi	r2, #1
 800aab0:	2200      	movls	r2, #0
 800aab2:	b2d2      	uxtb	r2, r2
 800aab4:	2a00      	cmp	r2, #0
 800aab6:	d10e      	bne.n	800aad6 <VL53L0X_SetDeviceMode+0x3e>
 800aab8:	2201      	movs	r2, #1
 800aaba:	409a      	lsls	r2, r3
 800aabc:	4b0b      	ldr	r3, [pc, #44]	; (800aaec <VL53L0X_SetDeviceMode+0x54>)
 800aabe:	4013      	ands	r3, r2
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	bf14      	ite	ne
 800aac4:	2301      	movne	r3, #1
 800aac6:	2300      	moveq	r3, #0
 800aac8:	b2db      	uxtb	r3, r3
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d003      	beq.n	800aad6 <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	78fa      	ldrb	r2, [r7, #3]
 800aad2:	741a      	strb	r2, [r3, #16]
		break;
 800aad4:	e001      	b.n	800aada <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800aad6:	23f8      	movs	r3, #248	; 0xf8
 800aad8:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800aada:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aade:	4618      	mov	r0, r3
 800aae0:	3714      	adds	r7, #20
 800aae2:	46bd      	mov	sp, r7
 800aae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae8:	4770      	bx	lr
 800aaea:	bf00      	nop
 800aaec:	0030000b 	.word	0x0030000b

0800aaf0 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 800aaf0:	b480      	push	{r7}
 800aaf2:	b085      	sub	sp, #20
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
 800aaf8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aafa:	2300      	movs	r3, #0
 800aafc:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	7c1a      	ldrb	r2, [r3, #16]
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800ab06:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3714      	adds	r7, #20
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab14:	4770      	bx	lr

0800ab16 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 800ab16:	b580      	push	{r7, lr}
 800ab18:	b084      	sub	sp, #16
 800ab1a:	af00      	add	r7, sp, #0
 800ab1c:	6078      	str	r0, [r7, #4]
 800ab1e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ab20:	2300      	movs	r3, #0
 800ab22:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 800ab24:	683a      	ldr	r2, [r7, #0]
 800ab26:	2109      	movs	r1, #9
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f004 fb9d 	bl	800f268 <VL53L0X_RdByte>
 800ab2e:	4603      	mov	r3, r0
 800ab30:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800ab32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d106      	bne.n	800ab48 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	781b      	ldrb	r3, [r3, #0]
 800ab3e:	f003 0301 	and.w	r3, r3, #1
 800ab42:	b2da      	uxtb	r2, r3
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800ab48:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	3710      	adds	r7, #16
 800ab50:	46bd      	mov	sp, r7
 800ab52:	bd80      	pop	{r7, pc}

0800ab54 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b084      	sub	sp, #16
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
 800ab5c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ab5e:	2300      	movs	r3, #0
 800ab60:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 800ab62:	6839      	ldr	r1, [r7, #0]
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f003 fa56 	bl	800e016 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 800ab6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	3710      	adds	r7, #16
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}

0800ab7a <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800ab7a:	b580      	push	{r7, lr}
 800ab7c:	b084      	sub	sp, #16
 800ab7e:	af00      	add	r7, sp, #0
 800ab80:	6078      	str	r0, [r7, #4]
 800ab82:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ab84:	2300      	movs	r3, #0
 800ab86:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 800ab88:	6839      	ldr	r1, [r7, #0]
 800ab8a:	6878      	ldr	r0, [r7, #4]
 800ab8c:	f003 fb23 	bl	800e1d6 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 800ab90:	4603      	mov	r3, r0
 800ab92:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 800ab94:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3710      	adds	r7, #16
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}

0800aba0 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b084      	sub	sp, #16
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
 800aba8:	460b      	mov	r3, r1
 800abaa:	70fb      	strb	r3, [r7, #3]
 800abac:	4613      	mov	r3, r2
 800abae:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800abb0:	2300      	movs	r3, #0
 800abb2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 800abb4:	78ba      	ldrb	r2, [r7, #2]
 800abb6:	78fb      	ldrb	r3, [r7, #3]
 800abb8:	4619      	mov	r1, r3
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f002 ff6b 	bl	800da96 <VL53L0X_set_vcsel_pulse_period>
 800abc0:	4603      	mov	r3, r0
 800abc2:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800abc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800abc8:	4618      	mov	r0, r3
 800abca:	3710      	adds	r7, #16
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}

0800abd0 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b086      	sub	sp, #24
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	60f8      	str	r0, [r7, #12]
 800abd8:	460b      	mov	r3, r1
 800abda:	607a      	str	r2, [r7, #4]
 800abdc:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800abde:	2300      	movs	r3, #0
 800abe0:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800abe2:	7afb      	ldrb	r3, [r7, #11]
 800abe4:	687a      	ldr	r2, [r7, #4]
 800abe6:	4619      	mov	r1, r3
 800abe8:	68f8      	ldr	r0, [r7, #12]
 800abea:	f003 f9dd 	bl	800dfa8 <VL53L0X_get_vcsel_pulse_period>
 800abee:	4603      	mov	r3, r0
 800abf0:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800abf2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800abf6:	4618      	mov	r0, r3
 800abf8:	3718      	adds	r7, #24
 800abfa:	46bd      	mov	sp, r7
 800abfc:	bd80      	pop	{r7, pc}
	...

0800ac00 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b086      	sub	sp, #24
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
 800ac08:	460b      	mov	r3, r1
 800ac0a:	70fb      	strb	r3, [r7, #3]
 800ac0c:	4613      	mov	r3, r2
 800ac0e:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ac10:	2300      	movs	r3, #0
 800ac12:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800ac14:	2300      	movs	r3, #0
 800ac16:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 800ac18:	2300      	movs	r3, #0
 800ac1a:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800ac1c:	f107 030f 	add.w	r3, r7, #15
 800ac20:	461a      	mov	r2, r3
 800ac22:	2101      	movs	r1, #1
 800ac24:	6878      	ldr	r0, [r7, #4]
 800ac26:	f004 fb1f 	bl	800f268 <VL53L0X_RdByte>
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 800ac2e:	7bfb      	ldrb	r3, [r7, #15]
 800ac30:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 800ac32:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d15a      	bne.n	800acf0 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 800ac3a:	78bb      	ldrb	r3, [r7, #2]
 800ac3c:	2b01      	cmp	r3, #1
 800ac3e:	d12b      	bne.n	800ac98 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 800ac40:	78fb      	ldrb	r3, [r7, #3]
 800ac42:	2b04      	cmp	r3, #4
 800ac44:	d825      	bhi.n	800ac92 <VL53L0X_SetSequenceStepEnable+0x92>
 800ac46:	a201      	add	r2, pc, #4	; (adr r2, 800ac4c <VL53L0X_SetSequenceStepEnable+0x4c>)
 800ac48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac4c:	0800ac61 	.word	0x0800ac61
 800ac50:	0800ac6b 	.word	0x0800ac6b
 800ac54:	0800ac75 	.word	0x0800ac75
 800ac58:	0800ac7f 	.word	0x0800ac7f
 800ac5c:	0800ac89 	.word	0x0800ac89
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 800ac60:	7dbb      	ldrb	r3, [r7, #22]
 800ac62:	f043 0310 	orr.w	r3, r3, #16
 800ac66:	75bb      	strb	r3, [r7, #22]
				break;
 800ac68:	e043      	b.n	800acf2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 800ac6a:	7dbb      	ldrb	r3, [r7, #22]
 800ac6c:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800ac70:	75bb      	strb	r3, [r7, #22]
				break;
 800ac72:	e03e      	b.n	800acf2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 800ac74:	7dbb      	ldrb	r3, [r7, #22]
 800ac76:	f043 0304 	orr.w	r3, r3, #4
 800ac7a:	75bb      	strb	r3, [r7, #22]
				break;
 800ac7c:	e039      	b.n	800acf2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 800ac7e:	7dbb      	ldrb	r3, [r7, #22]
 800ac80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac84:	75bb      	strb	r3, [r7, #22]
				break;
 800ac86:	e034      	b.n	800acf2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 800ac88:	7dbb      	ldrb	r3, [r7, #22]
 800ac8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ac8e:	75bb      	strb	r3, [r7, #22]
				break;
 800ac90:	e02f      	b.n	800acf2 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ac92:	23fc      	movs	r3, #252	; 0xfc
 800ac94:	75fb      	strb	r3, [r7, #23]
 800ac96:	e02c      	b.n	800acf2 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 800ac98:	78fb      	ldrb	r3, [r7, #3]
 800ac9a:	2b04      	cmp	r3, #4
 800ac9c:	d825      	bhi.n	800acea <VL53L0X_SetSequenceStepEnable+0xea>
 800ac9e:	a201      	add	r2, pc, #4	; (adr r2, 800aca4 <VL53L0X_SetSequenceStepEnable+0xa4>)
 800aca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aca4:	0800acb9 	.word	0x0800acb9
 800aca8:	0800acc3 	.word	0x0800acc3
 800acac:	0800accd 	.word	0x0800accd
 800acb0:	0800acd7 	.word	0x0800acd7
 800acb4:	0800ace1 	.word	0x0800ace1
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 800acb8:	7dbb      	ldrb	r3, [r7, #22]
 800acba:	f023 0310 	bic.w	r3, r3, #16
 800acbe:	75bb      	strb	r3, [r7, #22]
				break;
 800acc0:	e017      	b.n	800acf2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 800acc2:	7dbb      	ldrb	r3, [r7, #22]
 800acc4:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800acc8:	75bb      	strb	r3, [r7, #22]
				break;
 800acca:	e012      	b.n	800acf2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 800accc:	7dbb      	ldrb	r3, [r7, #22]
 800acce:	f023 0304 	bic.w	r3, r3, #4
 800acd2:	75bb      	strb	r3, [r7, #22]
				break;
 800acd4:	e00d      	b.n	800acf2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 800acd6:	7dbb      	ldrb	r3, [r7, #22]
 800acd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800acdc:	75bb      	strb	r3, [r7, #22]
				break;
 800acde:	e008      	b.n	800acf2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 800ace0:	7dbb      	ldrb	r3, [r7, #22]
 800ace2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ace6:	75bb      	strb	r3, [r7, #22]
				break;
 800ace8:	e003      	b.n	800acf2 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800acea:	23fc      	movs	r3, #252	; 0xfc
 800acec:	75fb      	strb	r3, [r7, #23]
 800acee:	e000      	b.n	800acf2 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 800acf0:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 800acf2:	7bfb      	ldrb	r3, [r7, #15]
 800acf4:	7dba      	ldrb	r2, [r7, #22]
 800acf6:	429a      	cmp	r2, r3
 800acf8:	d01e      	beq.n	800ad38 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 800acfa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d107      	bne.n	800ad12 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 800ad02:	7dbb      	ldrb	r3, [r7, #22]
 800ad04:	461a      	mov	r2, r3
 800ad06:	2101      	movs	r1, #1
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f004 fa2b 	bl	800f164 <VL53L0X_WrByte>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 800ad12:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d103      	bne.n	800ad22 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	7dba      	ldrb	r2, [r7, #22]
 800ad1e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 800ad22:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d106      	bne.n	800ad38 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	695b      	ldr	r3, [r3, #20]
 800ad2e:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800ad30:	6939      	ldr	r1, [r7, #16]
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	f7ff ff0e 	bl	800ab54 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800ad38:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	3718      	adds	r7, #24
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}

0800ad44 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 800ad44:	b480      	push	{r7}
 800ad46:	b087      	sub	sp, #28
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	60f8      	str	r0, [r7, #12]
 800ad4c:	607b      	str	r3, [r7, #4]
 800ad4e:	460b      	mov	r3, r1
 800ad50:	72fb      	strb	r3, [r7, #11]
 800ad52:	4613      	mov	r3, r2
 800ad54:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ad56:	2300      	movs	r3, #0
 800ad58:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 800ad60:	7afb      	ldrb	r3, [r7, #11]
 800ad62:	2b04      	cmp	r3, #4
 800ad64:	d836      	bhi.n	800add4 <sequence_step_enabled+0x90>
 800ad66:	a201      	add	r2, pc, #4	; (adr r2, 800ad6c <sequence_step_enabled+0x28>)
 800ad68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad6c:	0800ad81 	.word	0x0800ad81
 800ad70:	0800ad93 	.word	0x0800ad93
 800ad74:	0800ada5 	.word	0x0800ada5
 800ad78:	0800adb7 	.word	0x0800adb7
 800ad7c:	0800adc9 	.word	0x0800adc9
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 800ad80:	7abb      	ldrb	r3, [r7, #10]
 800ad82:	111b      	asrs	r3, r3, #4
 800ad84:	b2db      	uxtb	r3, r3
 800ad86:	f003 0301 	and.w	r3, r3, #1
 800ad8a:	b2da      	uxtb	r2, r3
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	701a      	strb	r2, [r3, #0]
		break;
 800ad90:	e022      	b.n	800add8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 800ad92:	7abb      	ldrb	r3, [r7, #10]
 800ad94:	10db      	asrs	r3, r3, #3
 800ad96:	b2db      	uxtb	r3, r3
 800ad98:	f003 0301 	and.w	r3, r3, #1
 800ad9c:	b2da      	uxtb	r2, r3
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	701a      	strb	r2, [r3, #0]
		break;
 800ada2:	e019      	b.n	800add8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 800ada4:	7abb      	ldrb	r3, [r7, #10]
 800ada6:	109b      	asrs	r3, r3, #2
 800ada8:	b2db      	uxtb	r3, r3
 800adaa:	f003 0301 	and.w	r3, r3, #1
 800adae:	b2da      	uxtb	r2, r3
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	701a      	strb	r2, [r3, #0]
		break;
 800adb4:	e010      	b.n	800add8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800adb6:	7abb      	ldrb	r3, [r7, #10]
 800adb8:	119b      	asrs	r3, r3, #6
 800adba:	b2db      	uxtb	r3, r3
 800adbc:	f003 0301 	and.w	r3, r3, #1
 800adc0:	b2da      	uxtb	r2, r3
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	701a      	strb	r2, [r3, #0]
		break;
 800adc6:	e007      	b.n	800add8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 800adc8:	7abb      	ldrb	r3, [r7, #10]
 800adca:	09db      	lsrs	r3, r3, #7
 800adcc:	b2da      	uxtb	r2, r3
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	701a      	strb	r2, [r3, #0]
		break;
 800add2:	e001      	b.n	800add8 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800add4:	23fc      	movs	r3, #252	; 0xfc
 800add6:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800add8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800addc:	4618      	mov	r0, r3
 800adde:	371c      	adds	r7, #28
 800ade0:	46bd      	mov	sp, r7
 800ade2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade6:	4770      	bx	lr

0800ade8 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b084      	sub	sp, #16
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
 800adf0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800adf2:	2300      	movs	r3, #0
 800adf4:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 800adf6:	2300      	movs	r3, #0
 800adf8:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800adfa:	f107 030e 	add.w	r3, r7, #14
 800adfe:	461a      	mov	r2, r3
 800ae00:	2101      	movs	r1, #1
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	f004 fa30 	bl	800f268 <VL53L0X_RdByte>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 800ae0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d107      	bne.n	800ae24 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 800ae14:	7bba      	ldrb	r2, [r7, #14]
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	2100      	movs	r1, #0
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f7ff ff92 	bl	800ad44 <sequence_step_enabled>
 800ae20:	4603      	mov	r3, r0
 800ae22:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800ae24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d108      	bne.n	800ae3e <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 800ae2c:	7bba      	ldrb	r2, [r7, #14]
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	3302      	adds	r3, #2
 800ae32:	2101      	movs	r1, #1
 800ae34:	6878      	ldr	r0, [r7, #4]
 800ae36:	f7ff ff85 	bl	800ad44 <sequence_step_enabled>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800ae3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d108      	bne.n	800ae58 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 800ae46:	7bba      	ldrb	r2, [r7, #14]
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	3301      	adds	r3, #1
 800ae4c:	2102      	movs	r1, #2
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	f7ff ff78 	bl	800ad44 <sequence_step_enabled>
 800ae54:	4603      	mov	r3, r0
 800ae56:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800ae58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d108      	bne.n	800ae72 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 800ae60:	7bba      	ldrb	r2, [r7, #14]
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	3303      	adds	r3, #3
 800ae66:	2103      	movs	r1, #3
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f7ff ff6b 	bl	800ad44 <sequence_step_enabled>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800ae72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d108      	bne.n	800ae8c <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 800ae7a:	7bba      	ldrb	r2, [r7, #14]
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	3304      	adds	r3, #4
 800ae80:	2104      	movs	r1, #4
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	f7ff ff5e 	bl	800ad44 <sequence_step_enabled>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ae8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	3710      	adds	r7, #16
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}

0800ae98 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b084      	sub	sp, #16
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
 800aea0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aea2:	2300      	movs	r3, #0
 800aea4:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800aea6:	f107 030c 	add.w	r3, r7, #12
 800aeaa:	461a      	mov	r2, r3
 800aeac:	21f8      	movs	r1, #248	; 0xf8
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f004 fa04 	bl	800f2bc <VL53L0X_RdWord>
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 800aeb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d108      	bne.n	800aed2 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 800aec0:	f107 0308 	add.w	r3, r7, #8
 800aec4:	461a      	mov	r2, r3
 800aec6:	2104      	movs	r1, #4
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f004 fa2f 	bl	800f32c <VL53L0X_RdDWord>
 800aece:	4603      	mov	r3, r0
 800aed0:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800aed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d10c      	bne.n	800aef4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 800aeda:	89bb      	ldrh	r3, [r7, #12]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d005      	beq.n	800aeec <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 800aee0:	68bb      	ldr	r3, [r7, #8]
 800aee2:	89ba      	ldrh	r2, [r7, #12]
 800aee4:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	681a      	ldr	r2, [r3, #0]
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800aef4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aef8:	4618      	mov	r0, r3
 800aefa:	3710      	adds	r7, #16
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}

0800af00 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 800af00:	b480      	push	{r7}
 800af02:	b085      	sub	sp, #20
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
 800af08:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800af0a:	2300      	movs	r3, #0
 800af0c:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	7f1b      	ldrb	r3, [r3, #28]
 800af12:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	7bba      	ldrb	r2, [r7, #14]
 800af18:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800af1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800af1e:	4618      	mov	r0, r3
 800af20:	3714      	adds	r7, #20
 800af22:	46bd      	mov	sp, r7
 800af24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af28:	4770      	bx	lr

0800af2a <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 800af2a:	b580      	push	{r7, lr}
 800af2c:	b086      	sub	sp, #24
 800af2e:	af00      	add	r7, sp, #0
 800af30:	6078      	str	r0, [r7, #4]
 800af32:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800af34:	2300      	movs	r3, #0
 800af36:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 800af38:	f107 030e 	add.w	r3, r7, #14
 800af3c:	461a      	mov	r2, r3
 800af3e:	2120      	movs	r1, #32
 800af40:	6878      	ldr	r0, [r7, #4]
 800af42:	f004 f9bb 	bl	800f2bc <VL53L0X_RdWord>
 800af46:	4603      	mov	r3, r0
 800af48:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 800af4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d118      	bne.n	800af84 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 800af52:	89fb      	ldrh	r3, [r7, #14]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d109      	bne.n	800af6c <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	6a1b      	ldr	r3, [r3, #32]
 800af5c:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	693a      	ldr	r2, [r7, #16]
 800af62:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2200      	movs	r2, #0
 800af68:	771a      	strb	r2, [r3, #28]
 800af6a:	e00b      	b.n	800af84 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 800af6c:	89fb      	ldrh	r3, [r7, #14]
 800af6e:	00db      	lsls	r3, r3, #3
 800af70:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800af72:	683b      	ldr	r3, [r7, #0]
 800af74:	693a      	ldr	r2, [r7, #16]
 800af76:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	693a      	ldr	r2, [r7, #16]
 800af7c:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2201      	movs	r2, #1
 800af82:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800af84:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800af88:	4618      	mov	r0, r3
 800af8a:	3718      	adds	r7, #24
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}

0800af90 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b086      	sub	sp, #24
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
 800af98:	460b      	mov	r3, r1
 800af9a:	807b      	strh	r3, [r7, #2]
 800af9c:	4613      	mov	r3, r2
 800af9e:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800afa0:	2300      	movs	r3, #0
 800afa2:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 800afa4:	2300      	movs	r3, #0
 800afa6:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 800afa8:	2300      	movs	r3, #0
 800afaa:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 800afac:	2300      	movs	r3, #0
 800afae:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800afb0:	887b      	ldrh	r3, [r7, #2]
 800afb2:	2b05      	cmp	r3, #5
 800afb4:	d902      	bls.n	800afbc <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800afb6:	23fc      	movs	r3, #252	; 0xfc
 800afb8:	75fb      	strb	r3, [r7, #23]
 800afba:	e05b      	b.n	800b074 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 800afbc:	787b      	ldrb	r3, [r7, #1]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d106      	bne.n	800afd0 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 800afc2:	2300      	movs	r3, #0
 800afc4:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 800afc6:	2300      	movs	r3, #0
 800afc8:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 800afca:	2301      	movs	r3, #1
 800afcc:	73bb      	strb	r3, [r7, #14]
 800afce:	e00a      	b.n	800afe6 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800afd0:	887b      	ldrh	r3, [r7, #2]
 800afd2:	687a      	ldr	r2, [r7, #4]
 800afd4:	330c      	adds	r3, #12
 800afd6:	009b      	lsls	r3, r3, #2
 800afd8:	4413      	add	r3, r2
 800afda:	685b      	ldr	r3, [r3, #4]
 800afdc:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 800afde:	2300      	movs	r3, #0
 800afe0:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 800afe2:	2301      	movs	r3, #1
 800afe4:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 800afe6:	887b      	ldrh	r3, [r7, #2]
 800afe8:	2b05      	cmp	r3, #5
 800afea:	d841      	bhi.n	800b070 <VL53L0X_SetLimitCheckEnable+0xe0>
 800afec:	a201      	add	r2, pc, #4	; (adr r2, 800aff4 <VL53L0X_SetLimitCheckEnable+0x64>)
 800afee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aff2:	bf00      	nop
 800aff4:	0800b00d 	.word	0x0800b00d
 800aff8:	0800b017 	.word	0x0800b017
 800affc:	0800b02d 	.word	0x0800b02d
 800b000:	0800b037 	.word	0x0800b037
 800b004:	0800b041 	.word	0x0800b041
 800b008:	0800b059 	.word	0x0800b059

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	7bfa      	ldrb	r2, [r7, #15]
 800b010:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 800b014:	e02e      	b.n	800b074 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 800b016:	693b      	ldr	r3, [r7, #16]
 800b018:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800b01a:	b29b      	uxth	r3, r3
 800b01c:	461a      	mov	r2, r3
 800b01e:	2144      	movs	r1, #68	; 0x44
 800b020:	6878      	ldr	r0, [r7, #4]
 800b022:	f004 f8c3 	bl	800f1ac <VL53L0X_WrWord>
 800b026:	4603      	mov	r3, r0
 800b028:	75fb      	strb	r3, [r7, #23]

			break;
 800b02a:	e023      	b.n	800b074 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	7bfa      	ldrb	r2, [r7, #15]
 800b030:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 800b034:	e01e      	b.n	800b074 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	7bfa      	ldrb	r2, [r7, #15]
 800b03a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 800b03e:	e019      	b.n	800b074 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 800b040:	7bbb      	ldrb	r3, [r7, #14]
 800b042:	005b      	lsls	r3, r3, #1
 800b044:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800b046:	7b7b      	ldrb	r3, [r7, #13]
 800b048:	22fe      	movs	r2, #254	; 0xfe
 800b04a:	2160      	movs	r1, #96	; 0x60
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f004 f8d7 	bl	800f200 <VL53L0X_UpdateByte>
 800b052:	4603      	mov	r3, r0
 800b054:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 800b056:	e00d      	b.n	800b074 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 800b058:	7bbb      	ldrb	r3, [r7, #14]
 800b05a:	011b      	lsls	r3, r3, #4
 800b05c:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800b05e:	7b7b      	ldrb	r3, [r7, #13]
 800b060:	22ef      	movs	r2, #239	; 0xef
 800b062:	2160      	movs	r1, #96	; 0x60
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	f004 f8cb 	bl	800f200 <VL53L0X_UpdateByte>
 800b06a:	4603      	mov	r3, r0
 800b06c:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 800b06e:	e001      	b.n	800b074 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b070:	23fc      	movs	r3, #252	; 0xfc
 800b072:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b074:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d10f      	bne.n	800b09c <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 800b07c:	787b      	ldrb	r3, [r7, #1]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d106      	bne.n	800b090 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800b082:	887b      	ldrh	r3, [r7, #2]
 800b084:	687a      	ldr	r2, [r7, #4]
 800b086:	4413      	add	r3, r2
 800b088:	2200      	movs	r2, #0
 800b08a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800b08e:	e005      	b.n	800b09c <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800b090:	887b      	ldrh	r3, [r7, #2]
 800b092:	687a      	ldr	r2, [r7, #4]
 800b094:	4413      	add	r3, r2
 800b096:	2201      	movs	r2, #1
 800b098:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b09c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	3718      	adds	r7, #24
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	bd80      	pop	{r7, pc}

0800b0a8 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	b087      	sub	sp, #28
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	60f8      	str	r0, [r7, #12]
 800b0b0:	460b      	mov	r3, r1
 800b0b2:	607a      	str	r2, [r7, #4]
 800b0b4:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800b0ba:	897b      	ldrh	r3, [r7, #10]
 800b0bc:	2b05      	cmp	r3, #5
 800b0be:	d905      	bls.n	800b0cc <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b0c0:	23fc      	movs	r3, #252	; 0xfc
 800b0c2:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	701a      	strb	r2, [r3, #0]
 800b0ca:	e008      	b.n	800b0de <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800b0cc:	897b      	ldrh	r3, [r7, #10]
 800b0ce:	68fa      	ldr	r2, [r7, #12]
 800b0d0:	4413      	add	r3, r2
 800b0d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b0d6:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	7dba      	ldrb	r2, [r7, #22]
 800b0dc:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b0de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	371c      	adds	r7, #28
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ec:	4770      	bx	lr
	...

0800b0f0 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b086      	sub	sp, #24
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	60f8      	str	r0, [r7, #12]
 800b0f8:	460b      	mov	r3, r1
 800b0fa:	607a      	str	r2, [r7, #4]
 800b0fc:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b0fe:	2300      	movs	r3, #0
 800b100:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 800b102:	897b      	ldrh	r3, [r7, #10]
 800b104:	68fa      	ldr	r2, [r7, #12]
 800b106:	4413      	add	r3, r2
 800b108:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b10c:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 800b10e:	7dbb      	ldrb	r3, [r7, #22]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d107      	bne.n	800b124 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800b114:	897b      	ldrh	r3, [r7, #10]
 800b116:	68fa      	ldr	r2, [r7, #12]
 800b118:	330c      	adds	r3, #12
 800b11a:	009b      	lsls	r3, r3, #2
 800b11c:	4413      	add	r3, r2
 800b11e:	687a      	ldr	r2, [r7, #4]
 800b120:	605a      	str	r2, [r3, #4]
 800b122:	e040      	b.n	800b1a6 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 800b124:	897b      	ldrh	r3, [r7, #10]
 800b126:	2b05      	cmp	r3, #5
 800b128:	d830      	bhi.n	800b18c <VL53L0X_SetLimitCheckValue+0x9c>
 800b12a:	a201      	add	r2, pc, #4	; (adr r2, 800b130 <VL53L0X_SetLimitCheckValue+0x40>)
 800b12c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b130:	0800b149 	.word	0x0800b149
 800b134:	0800b151 	.word	0x0800b151
 800b138:	0800b167 	.word	0x0800b167
 800b13c:	0800b16f 	.word	0x0800b16f
 800b140:	0800b177 	.word	0x0800b177
 800b144:	0800b177 	.word	0x0800b177

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	687a      	ldr	r2, [r7, #4]
 800b14c:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 800b14e:	e01f      	b.n	800b190 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800b154:	b29b      	uxth	r3, r3
 800b156:	461a      	mov	r2, r3
 800b158:	2144      	movs	r1, #68	; 0x44
 800b15a:	68f8      	ldr	r0, [r7, #12]
 800b15c:	f004 f826 	bl	800f1ac <VL53L0X_WrWord>
 800b160:	4603      	mov	r3, r0
 800b162:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800b164:	e014      	b.n	800b190 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	687a      	ldr	r2, [r7, #4]
 800b16a:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 800b16c:	e010      	b.n	800b190 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	687a      	ldr	r2, [r7, #4]
 800b172:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 800b174:	e00c      	b.n	800b190 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800b17a:	b29b      	uxth	r3, r3
 800b17c:	461a      	mov	r2, r3
 800b17e:	2164      	movs	r1, #100	; 0x64
 800b180:	68f8      	ldr	r0, [r7, #12]
 800b182:	f004 f813 	bl	800f1ac <VL53L0X_WrWord>
 800b186:	4603      	mov	r3, r0
 800b188:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800b18a:	e001      	b.n	800b190 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b18c:	23fc      	movs	r3, #252	; 0xfc
 800b18e:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 800b190:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d106      	bne.n	800b1a6 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800b198:	897b      	ldrh	r3, [r7, #10]
 800b19a:	68fa      	ldr	r2, [r7, #12]
 800b19c:	330c      	adds	r3, #12
 800b19e:	009b      	lsls	r3, r3, #2
 800b1a0:	4413      	add	r3, r2
 800b1a2:	687a      	ldr	r2, [r7, #4]
 800b1a4:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b1a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	3718      	adds	r7, #24
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	bd80      	pop	{r7, pc}
 800b1b2:	bf00      	nop

0800b1b4 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b088      	sub	sp, #32
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	60f8      	str	r0, [r7, #12]
 800b1bc:	460b      	mov	r3, r1
 800b1be:	607a      	str	r2, [r7, #4]
 800b1c0:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800b1ca:	897b      	ldrh	r3, [r7, #10]
 800b1cc:	2b05      	cmp	r3, #5
 800b1ce:	d847      	bhi.n	800b260 <VL53L0X_GetLimitCheckValue+0xac>
 800b1d0:	a201      	add	r2, pc, #4	; (adr r2, 800b1d8 <VL53L0X_GetLimitCheckValue+0x24>)
 800b1d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1d6:	bf00      	nop
 800b1d8:	0800b1f1 	.word	0x0800b1f1
 800b1dc:	0800b1fd 	.word	0x0800b1fd
 800b1e0:	0800b223 	.word	0x0800b223
 800b1e4:	0800b22f 	.word	0x0800b22f
 800b1e8:	0800b23b 	.word	0x0800b23b
 800b1ec:	0800b23b 	.word	0x0800b23b

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1f4:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	77bb      	strb	r3, [r7, #30]
		break;
 800b1fa:	e033      	b.n	800b264 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800b1fc:	f107 0316 	add.w	r3, r7, #22
 800b200:	461a      	mov	r2, r3
 800b202:	2144      	movs	r1, #68	; 0x44
 800b204:	68f8      	ldr	r0, [r7, #12]
 800b206:	f004 f859 	bl	800f2bc <VL53L0X_RdWord>
 800b20a:	4603      	mov	r3, r0
 800b20c:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800b20e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d102      	bne.n	800b21c <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800b216:	8afb      	ldrh	r3, [r7, #22]
 800b218:	025b      	lsls	r3, r3, #9
 800b21a:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 800b21c:	2301      	movs	r3, #1
 800b21e:	77bb      	strb	r3, [r7, #30]
		break;
 800b220:	e020      	b.n	800b264 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b226:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 800b228:	2300      	movs	r3, #0
 800b22a:	77bb      	strb	r3, [r7, #30]
		break;
 800b22c:	e01a      	b.n	800b264 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b232:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 800b234:	2300      	movs	r3, #0
 800b236:	77bb      	strb	r3, [r7, #30]
		break;
 800b238:	e014      	b.n	800b264 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800b23a:	f107 0316 	add.w	r3, r7, #22
 800b23e:	461a      	mov	r2, r3
 800b240:	2164      	movs	r1, #100	; 0x64
 800b242:	68f8      	ldr	r0, [r7, #12]
 800b244:	f004 f83a 	bl	800f2bc <VL53L0X_RdWord>
 800b248:	4603      	mov	r3, r0
 800b24a:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800b24c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d102      	bne.n	800b25a <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800b254:	8afb      	ldrh	r3, [r7, #22]
 800b256:	025b      	lsls	r3, r3, #9
 800b258:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 800b25a:	2300      	movs	r3, #0
 800b25c:	77bb      	strb	r3, [r7, #30]
		break;
 800b25e:	e001      	b.n	800b264 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b260:	23fc      	movs	r3, #252	; 0xfc
 800b262:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b264:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d12a      	bne.n	800b2c2 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 800b26c:	7fbb      	ldrb	r3, [r7, #30]
 800b26e:	2b01      	cmp	r3, #1
 800b270:	d124      	bne.n	800b2bc <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 800b272:	69bb      	ldr	r3, [r7, #24]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d110      	bne.n	800b29a <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 800b278:	897b      	ldrh	r3, [r7, #10]
 800b27a:	68fa      	ldr	r2, [r7, #12]
 800b27c:	330c      	adds	r3, #12
 800b27e:	009b      	lsls	r3, r3, #2
 800b280:	4413      	add	r3, r2
 800b282:	685b      	ldr	r3, [r3, #4]
 800b284:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	69ba      	ldr	r2, [r7, #24]
 800b28a:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800b28c:	897b      	ldrh	r3, [r7, #10]
 800b28e:	68fa      	ldr	r2, [r7, #12]
 800b290:	4413      	add	r3, r2
 800b292:	2200      	movs	r2, #0
 800b294:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800b298:	e013      	b.n	800b2c2 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	69ba      	ldr	r2, [r7, #24]
 800b29e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800b2a0:	897b      	ldrh	r3, [r7, #10]
 800b2a2:	68fa      	ldr	r2, [r7, #12]
 800b2a4:	330c      	adds	r3, #12
 800b2a6:	009b      	lsls	r3, r3, #2
 800b2a8:	4413      	add	r3, r2
 800b2aa:	69ba      	ldr	r2, [r7, #24]
 800b2ac:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800b2ae:	897b      	ldrh	r3, [r7, #10]
 800b2b0:	68fa      	ldr	r2, [r7, #12]
 800b2b2:	4413      	add	r3, r2
 800b2b4:	2201      	movs	r2, #1
 800b2b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800b2ba:	e002      	b.n	800b2c2 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	69ba      	ldr	r2, [r7, #24]
 800b2c0:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b2c2:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	3720      	adds	r7, #32
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}
 800b2ce:	bf00      	nop

0800b2d0 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b084      	sub	sp, #16
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
 800b2d8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b2da:	2300      	movs	r3, #0
 800b2dc:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 800b2de:	f107 030e 	add.w	r3, r7, #14
 800b2e2:	461a      	mov	r2, r3
 800b2e4:	2101      	movs	r1, #1
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	f003 ffbe 	bl	800f268 <VL53L0X_RdByte>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 800b2f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d10e      	bne.n	800b316 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 800b2f8:	7bba      	ldrb	r2, [r7, #14]
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 800b300:	7bbb      	ldrb	r3, [r7, #14]
 800b302:	b25b      	sxtb	r3, r3
 800b304:	2b00      	cmp	r3, #0
 800b306:	da03      	bge.n	800b310 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	2201      	movs	r2, #1
 800b30c:	701a      	strb	r2, [r3, #0]
 800b30e:	e002      	b.n	800b316 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	2200      	movs	r2, #0
 800b314:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800b316:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d104      	bne.n	800b328 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	781a      	ldrb	r2, [r3, #0]
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b328:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b32c:	4618      	mov	r0, r3
 800b32e:	3710      	adds	r7, #16
 800b330:	46bd      	mov	sp, r7
 800b332:	bd80      	pop	{r7, pc}

0800b334 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b084      	sub	sp, #16
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b33c:	2300      	movs	r3, #0
 800b33e:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800b340:	f107 030e 	add.w	r3, r7, #14
 800b344:	4619      	mov	r1, r3
 800b346:	6878      	ldr	r0, [r7, #4]
 800b348:	f7ff fbd2 	bl	800aaf0 <VL53L0X_GetDeviceMode>
 800b34c:	4603      	mov	r3, r0
 800b34e:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800b350:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d107      	bne.n	800b368 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800b358:	7bbb      	ldrb	r3, [r7, #14]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d104      	bne.n	800b368 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	f000 f898 	bl	800b494 <VL53L0X_StartMeasurement>
 800b364:	4603      	mov	r3, r0
 800b366:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800b368:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d104      	bne.n	800b37a <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800b370:	6878      	ldr	r0, [r7, #4]
 800b372:	f001 fb6f 	bl	800ca54 <VL53L0X_measurement_poll_for_completion>
 800b376:	4603      	mov	r3, r0
 800b378:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800b37a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d106      	bne.n	800b390 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800b382:	7bbb      	ldrb	r3, [r7, #14]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d103      	bne.n	800b390 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2203      	movs	r2, #3
 800b38c:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 800b390:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b394:	4618      	mov	r0, r3
 800b396:	3710      	adds	r7, #16
 800b398:	46bd      	mov	sp, r7
 800b39a:	bd80      	pop	{r7, pc}

0800b39c <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b086      	sub	sp, #24
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	60f8      	str	r0, [r7, #12]
 800b3a4:	60b9      	str	r1, [r7, #8]
 800b3a6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 800b3ac:	2301      	movs	r3, #1
 800b3ae:	687a      	ldr	r2, [r7, #4]
 800b3b0:	68b9      	ldr	r1, [r7, #8]
 800b3b2:	68f8      	ldr	r0, [r7, #12]
 800b3b4:	f001 fb11 	bl	800c9da <VL53L0X_perform_ref_calibration>
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 800b3bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	3718      	adds	r7, #24
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	bd80      	pop	{r7, pc}

0800b3c8 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b086      	sub	sp, #24
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
 800b3d0:	460b      	mov	r3, r1
 800b3d2:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800b3de:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 800b3e0:	7dbb      	ldrb	r3, [r7, #22]
 800b3e2:	2b01      	cmp	r3, #1
 800b3e4:	d005      	beq.n	800b3f2 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 800b3e6:	7dbb      	ldrb	r3, [r7, #22]
 800b3e8:	2b02      	cmp	r3, #2
 800b3ea:	d002      	beq.n	800b3f2 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 800b3ec:	7dbb      	ldrb	r3, [r7, #22]
 800b3ee:	2b03      	cmp	r3, #3
 800b3f0:	d147      	bne.n	800b482 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 800b3f2:	f107 030c 	add.w	r3, r7, #12
 800b3f6:	f107 0210 	add.w	r2, r7, #16
 800b3fa:	2101      	movs	r1, #1
 800b3fc:	6878      	ldr	r0, [r7, #4]
 800b3fe:	f000 fbc3 	bl	800bb88 <VL53L0X_GetInterruptThresholds>
 800b402:	4603      	mov	r3, r0
 800b404:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 800b406:	693b      	ldr	r3, [r7, #16]
 800b408:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800b40c:	d803      	bhi.n	800b416 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 800b40e:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 800b410:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800b414:	d935      	bls.n	800b482 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 800b416:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d131      	bne.n	800b482 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 800b41e:	78fb      	ldrb	r3, [r7, #3]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d006      	beq.n	800b432 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 800b424:	491a      	ldr	r1, [pc, #104]	; (800b490 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 800b426:	6878      	ldr	r0, [r7, #4]
 800b428:	f002 ff86 	bl	800e338 <VL53L0X_load_tuning_settings>
 800b42c:	4603      	mov	r3, r0
 800b42e:	75fb      	strb	r3, [r7, #23]
 800b430:	e027      	b.n	800b482 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800b432:	2204      	movs	r2, #4
 800b434:	21ff      	movs	r1, #255	; 0xff
 800b436:	6878      	ldr	r0, [r7, #4]
 800b438:	f003 fe94 	bl	800f164 <VL53L0X_WrByte>
 800b43c:	4603      	mov	r3, r0
 800b43e:	461a      	mov	r2, r3
 800b440:	7dfb      	ldrb	r3, [r7, #23]
 800b442:	4313      	orrs	r3, r2
 800b444:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800b446:	2200      	movs	r2, #0
 800b448:	2170      	movs	r1, #112	; 0x70
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f003 fe8a 	bl	800f164 <VL53L0X_WrByte>
 800b450:	4603      	mov	r3, r0
 800b452:	461a      	mov	r2, r3
 800b454:	7dfb      	ldrb	r3, [r7, #23]
 800b456:	4313      	orrs	r3, r2
 800b458:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b45a:	2200      	movs	r2, #0
 800b45c:	21ff      	movs	r1, #255	; 0xff
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	f003 fe80 	bl	800f164 <VL53L0X_WrByte>
 800b464:	4603      	mov	r3, r0
 800b466:	461a      	mov	r2, r3
 800b468:	7dfb      	ldrb	r3, [r7, #23]
 800b46a:	4313      	orrs	r3, r2
 800b46c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800b46e:	2200      	movs	r2, #0
 800b470:	2180      	movs	r1, #128	; 0x80
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	f003 fe76 	bl	800f164 <VL53L0X_WrByte>
 800b478:	4603      	mov	r3, r0
 800b47a:	461a      	mov	r2, r3
 800b47c:	7dfb      	ldrb	r3, [r7, #23]
 800b47e:	4313      	orrs	r3, r2
 800b480:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 800b482:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800b486:	4618      	mov	r0, r3
 800b488:	3718      	adds	r7, #24
 800b48a:	46bd      	mov	sp, r7
 800b48c:	bd80      	pop	{r7, pc}
 800b48e:	bf00      	nop
 800b490:	20000124 	.word	0x20000124

0800b494 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b086      	sub	sp, #24
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b49c:	2300      	movs	r3, #0
 800b49e:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800b4a4:	f107 030e 	add.w	r3, r7, #14
 800b4a8:	4619      	mov	r1, r3
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	f7ff fb20 	bl	800aaf0 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 800b4b0:	2201      	movs	r2, #1
 800b4b2:	2180      	movs	r1, #128	; 0x80
 800b4b4:	6878      	ldr	r0, [r7, #4]
 800b4b6:	f003 fe55 	bl	800f164 <VL53L0X_WrByte>
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b4be:	2201      	movs	r2, #1
 800b4c0:	21ff      	movs	r1, #255	; 0xff
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f003 fe4e 	bl	800f164 <VL53L0X_WrByte>
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	2100      	movs	r1, #0
 800b4d0:	6878      	ldr	r0, [r7, #4]
 800b4d2:	f003 fe47 	bl	800f164 <VL53L0X_WrByte>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 800b4e0:	461a      	mov	r2, r3
 800b4e2:	2191      	movs	r1, #145	; 0x91
 800b4e4:	6878      	ldr	r0, [r7, #4]
 800b4e6:	f003 fe3d 	bl	800f164 <VL53L0X_WrByte>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 800b4ee:	2201      	movs	r2, #1
 800b4f0:	2100      	movs	r1, #0
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	f003 fe36 	bl	800f164 <VL53L0X_WrByte>
 800b4f8:	4603      	mov	r3, r0
 800b4fa:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	21ff      	movs	r1, #255	; 0xff
 800b500:	6878      	ldr	r0, [r7, #4]
 800b502:	f003 fe2f 	bl	800f164 <VL53L0X_WrByte>
 800b506:	4603      	mov	r3, r0
 800b508:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 800b50a:	2200      	movs	r2, #0
 800b50c:	2180      	movs	r1, #128	; 0x80
 800b50e:	6878      	ldr	r0, [r7, #4]
 800b510:	f003 fe28 	bl	800f164 <VL53L0X_WrByte>
 800b514:	4603      	mov	r3, r0
 800b516:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 800b518:	7bbb      	ldrb	r3, [r7, #14]
 800b51a:	2b03      	cmp	r3, #3
 800b51c:	d054      	beq.n	800b5c8 <VL53L0X_StartMeasurement+0x134>
 800b51e:	2b03      	cmp	r3, #3
 800b520:	dc6c      	bgt.n	800b5fc <VL53L0X_StartMeasurement+0x168>
 800b522:	2b00      	cmp	r3, #0
 800b524:	d002      	beq.n	800b52c <VL53L0X_StartMeasurement+0x98>
 800b526:	2b01      	cmp	r3, #1
 800b528:	d034      	beq.n	800b594 <VL53L0X_StartMeasurement+0x100>
 800b52a:	e067      	b.n	800b5fc <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 800b52c:	2201      	movs	r2, #1
 800b52e:	2100      	movs	r1, #0
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	f003 fe17 	bl	800f164 <VL53L0X_WrByte>
 800b536:	4603      	mov	r3, r0
 800b538:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 800b53a:	7bfb      	ldrb	r3, [r7, #15]
 800b53c:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 800b53e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d15d      	bne.n	800b602 <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 800b546:	2300      	movs	r3, #0
 800b548:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 800b54a:	693b      	ldr	r3, [r7, #16]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d008      	beq.n	800b562 <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 800b550:	f107 030d 	add.w	r3, r7, #13
 800b554:	461a      	mov	r2, r3
 800b556:	2100      	movs	r1, #0
 800b558:	6878      	ldr	r0, [r7, #4]
 800b55a:	f003 fe85 	bl	800f268 <VL53L0X_RdByte>
 800b55e:	4603      	mov	r3, r0
 800b560:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 800b562:	693b      	ldr	r3, [r7, #16]
 800b564:	3301      	adds	r3, #1
 800b566:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 800b568:	7b7a      	ldrb	r2, [r7, #13]
 800b56a:	7bfb      	ldrb	r3, [r7, #15]
 800b56c:	4013      	ands	r3, r2
 800b56e:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800b570:	7bfa      	ldrb	r2, [r7, #15]
 800b572:	429a      	cmp	r2, r3
 800b574:	d107      	bne.n	800b586 <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 800b576:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d103      	bne.n	800b586 <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800b57e:	693b      	ldr	r3, [r7, #16]
 800b580:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b584:	d3e1      	bcc.n	800b54a <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800b586:	693b      	ldr	r3, [r7, #16]
 800b588:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b58c:	d339      	bcc.n	800b602 <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 800b58e:	23f9      	movs	r3, #249	; 0xf9
 800b590:	75fb      	strb	r3, [r7, #23]

		}

		break;
 800b592:	e036      	b.n	800b602 <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800b594:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d105      	bne.n	800b5a8 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800b59c:	2101      	movs	r1, #1
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f7ff ff12 	bl	800b3c8 <VL53L0X_CheckAndLoadInterruptSettings>
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800b5a8:	2202      	movs	r2, #2
 800b5aa:	2100      	movs	r1, #0
 800b5ac:	6878      	ldr	r0, [r7, #4]
 800b5ae:	f003 fdd9 	bl	800f164 <VL53L0X_WrByte>
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 800b5b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d123      	bne.n	800b606 <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	2204      	movs	r2, #4
 800b5c2:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800b5c6:	e01e      	b.n	800b606 <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800b5c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d105      	bne.n	800b5dc <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800b5d0:	2101      	movs	r1, #1
 800b5d2:	6878      	ldr	r0, [r7, #4]
 800b5d4:	f7ff fef8 	bl	800b3c8 <VL53L0X_CheckAndLoadInterruptSettings>
 800b5d8:	4603      	mov	r3, r0
 800b5da:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800b5dc:	2204      	movs	r2, #4
 800b5de:	2100      	movs	r1, #0
 800b5e0:	6878      	ldr	r0, [r7, #4]
 800b5e2:	f003 fdbf 	bl	800f164 <VL53L0X_WrByte>
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 800b5ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d10b      	bne.n	800b60a <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2204      	movs	r2, #4
 800b5f6:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800b5fa:	e006      	b.n	800b60a <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800b5fc:	23f8      	movs	r3, #248	; 0xf8
 800b5fe:	75fb      	strb	r3, [r7, #23]
 800b600:	e004      	b.n	800b60c <VL53L0X_StartMeasurement+0x178>
		break;
 800b602:	bf00      	nop
 800b604:	e002      	b.n	800b60c <VL53L0X_StartMeasurement+0x178>
		break;
 800b606:	bf00      	nop
 800b608:	e000      	b.n	800b60c <VL53L0X_StartMeasurement+0x178>
		break;
 800b60a:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800b60c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b610:	4618      	mov	r0, r3
 800b612:	3718      	adds	r7, #24
 800b614:	46bd      	mov	sp, r7
 800b616:	bd80      	pop	{r7, pc}

0800b618 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b084      	sub	sp, #16
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
 800b620:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b622:	2300      	movs	r3, #0
 800b624:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800b62c:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 800b62e:	7bbb      	ldrb	r3, [r7, #14]
 800b630:	2b04      	cmp	r3, #4
 800b632:	d112      	bne.n	800b65a <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 800b634:	f107 0308 	add.w	r3, r7, #8
 800b638:	4619      	mov	r1, r3
 800b63a:	6878      	ldr	r0, [r7, #4]
 800b63c:	f000 fb1a 	bl	800bc74 <VL53L0X_GetInterruptMaskStatus>
 800b640:	4603      	mov	r3, r0
 800b642:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 800b644:	68bb      	ldr	r3, [r7, #8]
 800b646:	2b04      	cmp	r3, #4
 800b648:	d103      	bne.n	800b652 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	2201      	movs	r2, #1
 800b64e:	701a      	strb	r2, [r3, #0]
 800b650:	e01c      	b.n	800b68c <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	2200      	movs	r2, #0
 800b656:	701a      	strb	r2, [r3, #0]
 800b658:	e018      	b.n	800b68c <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800b65a:	f107 030d 	add.w	r3, r7, #13
 800b65e:	461a      	mov	r2, r3
 800b660:	2114      	movs	r1, #20
 800b662:	6878      	ldr	r0, [r7, #4]
 800b664:	f003 fe00 	bl	800f268 <VL53L0X_RdByte>
 800b668:	4603      	mov	r3, r0
 800b66a:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 800b66c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d10b      	bne.n	800b68c <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 800b674:	7b7b      	ldrb	r3, [r7, #13]
 800b676:	f003 0301 	and.w	r3, r3, #1
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d003      	beq.n	800b686 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	2201      	movs	r2, #1
 800b682:	701a      	strb	r2, [r3, #0]
 800b684:	e002      	b.n	800b68c <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 800b686:	683b      	ldr	r3, [r7, #0]
 800b688:	2200      	movs	r2, #0
 800b68a:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b68c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b690:	4618      	mov	r0, r3
 800b692:	3710      	adds	r7, #16
 800b694:	46bd      	mov	sp, r7
 800b696:	bd80      	pop	{r7, pc}

0800b698 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800b698:	b5b0      	push	{r4, r5, r7, lr}
 800b69a:	b096      	sub	sp, #88	; 0x58
 800b69c:	af02      	add	r7, sp, #8
 800b69e:	6078      	str	r0, [r7, #4]
 800b6a0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 800b6a8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b6ac:	230c      	movs	r3, #12
 800b6ae:	2114      	movs	r1, #20
 800b6b0:	6878      	ldr	r0, [r7, #4]
 800b6b2:	f003 fd2b 	bl	800f10c <VL53L0X_ReadMulti>
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 800b6bc:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	f040 80d1 	bne.w	800b868 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 800b6d2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b6d6:	b29b      	uxth	r3, r3
 800b6d8:	021b      	lsls	r3, r3, #8
 800b6da:	b29a      	uxth	r2, r3
 800b6dc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b6e0:	b29b      	uxth	r3, r3
 800b6e2:	4413      	add	r3, r2
 800b6e4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 800b6ee:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b6f2:	b29b      	uxth	r3, r3
 800b6f4:	021b      	lsls	r3, r3, #8
 800b6f6:	b29a      	uxth	r2, r3
 800b6f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b6fc:	b29b      	uxth	r3, r3
 800b6fe:	4413      	add	r3, r2
 800b700:	b29b      	uxth	r3, r3
 800b702:	025b      	lsls	r3, r3, #9
 800b704:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b70a:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 800b70c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800b710:	b29b      	uxth	r3, r3
 800b712:	021b      	lsls	r3, r3, #8
 800b714:	b29a      	uxth	r2, r3
 800b716:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800b71a:	b29b      	uxth	r3, r3
 800b71c:	4413      	add	r3, r2
 800b71e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 800b722:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b726:	025b      	lsls	r3, r3, #9
 800b728:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 800b72e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800b732:	b29b      	uxth	r3, r3
 800b734:	021b      	lsls	r3, r3, #8
 800b736:	b29a      	uxth	r2, r3
 800b738:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b73c:	b29b      	uxth	r3, r3
 800b73e:	4413      	add	r3, r2
 800b740:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800b74a:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 800b74c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b750:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 800b75a:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 800b762:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 800b766:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b768:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b76c:	d046      	beq.n	800b7fc <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800b76e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b770:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800b774:	fb02 f303 	mul.w	r3, r2, r3
 800b778:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b77c:	4a57      	ldr	r2, [pc, #348]	; (800b8dc <VL53L0X_GetRangingMeasurementData+0x244>)
 800b77e:	fb82 1203 	smull	r1, r2, r2, r3
 800b782:	1192      	asrs	r2, r2, #6
 800b784:	17db      	asrs	r3, r3, #31
 800b786:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 800b788:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	6a1b      	ldr	r3, [r3, #32]
 800b790:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	7f1b      	ldrb	r3, [r3, #28]
 800b796:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 800b79a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d02c      	beq.n	800b7fc <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 800b7a2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800b7a4:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800b7a8:	fb02 f303 	mul.w	r3, r2, r3
 800b7ac:	121a      	asrs	r2, r3, #8
					<= 0) {
 800b7ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 800b7b0:	429a      	cmp	r2, r3
 800b7b2:	d10d      	bne.n	800b7d0 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 800b7b4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d004      	beq.n	800b7c6 <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 800b7bc:	f242 23b8 	movw	r3, #8888	; 0x22b8
 800b7c0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800b7c4:	e016      	b.n	800b7f4 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 800b7c6:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 800b7ca:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800b7ce:	e011      	b.n	800b7f4 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 800b7d0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800b7d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b7d6:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 800b7da:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800b7dc:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 800b7e0:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 800b7e4:	121b      	asrs	r3, r3, #8
 800b7e6:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 800b7e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7ea:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 800b7ec:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 800b7f0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 800b7f4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b7f8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 800b7fc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b800:	2b00      	cmp	r3, #0
 800b802:	d00d      	beq.n	800b820 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 800b804:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800b808:	089b      	lsrs	r3, r3, #2
 800b80a:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 800b810:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800b814:	b2db      	uxtb	r3, r3
 800b816:	019b      	lsls	r3, r3, #6
 800b818:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	75da      	strb	r2, [r3, #23]
 800b81e:	e006      	b.n	800b82e <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800b826:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	2200      	movs	r2, #0
 800b82c:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 800b82e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800b832:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800b836:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800b83a:	9301      	str	r3, [sp, #4]
 800b83c:	683b      	ldr	r3, [r7, #0]
 800b83e:	9300      	str	r3, [sp, #0]
 800b840:	4613      	mov	r3, r2
 800b842:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b844:	6878      	ldr	r0, [r7, #4]
 800b846:	f003 fa15 	bl	800ec74 <VL53L0X_get_pal_range_status>
 800b84a:	4603      	mov	r3, r0
 800b84c:	461a      	mov	r2, r3
 800b84e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b852:	4313      	orrs	r3, r2
 800b854:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 800b858:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d103      	bne.n	800b868 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 800b860:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b868:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d12f      	bne.n	800b8d0 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	f107 040c 	add.w	r4, r7, #12
 800b876:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800b87a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b87c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b87e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b882:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 800b88a:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 800b890:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 800b898:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 800b89e:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 800b8a4:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 800b8aa:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 800b8b0:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 800b8b2:	683b      	ldr	r3, [r7, #0]
 800b8b4:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 800b8b6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	f103 0450 	add.w	r4, r3, #80	; 0x50
 800b8c0:	f107 050c 	add.w	r5, r7, #12
 800b8c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b8c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b8c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b8cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b8d0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	3750      	adds	r7, #80	; 0x50
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	bdb0      	pop	{r4, r5, r7, pc}
 800b8dc:	10624dd3 	.word	0x10624dd3

0800b8e0 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b084      	sub	sp, #16
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
 800b8e8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800b8ee:	2100      	movs	r1, #0
 800b8f0:	6878      	ldr	r0, [r7, #4]
 800b8f2:	f7ff f8d1 	bl	800aa98 <VL53L0X_SetDeviceMode>
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800b8fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d104      	bne.n	800b90c <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800b902:	6878      	ldr	r0, [r7, #4]
 800b904:	f7ff fd16 	bl	800b334 <VL53L0X_PerformSingleMeasurement>
 800b908:	4603      	mov	r3, r0
 800b90a:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800b90c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d105      	bne.n	800b920 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 800b914:	6839      	ldr	r1, [r7, #0]
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	f7ff febe 	bl	800b698 <VL53L0X_GetRangingMeasurementData>
 800b91c:	4603      	mov	r3, r0
 800b91e:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 800b920:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d105      	bne.n	800b934 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800b928:	2100      	movs	r1, #0
 800b92a:	6878      	ldr	r0, [r7, #4]
 800b92c:	f000 f962 	bl	800bbf4 <VL53L0X_ClearInterruptMask>
 800b930:	4603      	mov	r3, r0
 800b932:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 800b934:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b938:	4618      	mov	r0, r3
 800b93a:	3710      	adds	r7, #16
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd80      	pop	{r7, pc}

0800b940 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b084      	sub	sp, #16
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
 800b948:	4608      	mov	r0, r1
 800b94a:	4611      	mov	r1, r2
 800b94c:	461a      	mov	r2, r3
 800b94e:	4603      	mov	r3, r0
 800b950:	70fb      	strb	r3, [r7, #3]
 800b952:	460b      	mov	r3, r1
 800b954:	70bb      	strb	r3, [r7, #2]
 800b956:	4613      	mov	r3, r2
 800b958:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b95a:	2300      	movs	r3, #0
 800b95c:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800b95e:	78fb      	ldrb	r3, [r7, #3]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d002      	beq.n	800b96a <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 800b964:	23f6      	movs	r3, #246	; 0xf6
 800b966:	73fb      	strb	r3, [r7, #15]
 800b968:	e107      	b.n	800bb7a <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800b96a:	78bb      	ldrb	r3, [r7, #2]
 800b96c:	2b14      	cmp	r3, #20
 800b96e:	d110      	bne.n	800b992 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800b970:	7e3b      	ldrb	r3, [r7, #24]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d102      	bne.n	800b97c <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 800b976:	2310      	movs	r3, #16
 800b978:	73bb      	strb	r3, [r7, #14]
 800b97a:	e001      	b.n	800b980 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 800b97c:	2301      	movs	r3, #1
 800b97e:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 800b980:	7bbb      	ldrb	r3, [r7, #14]
 800b982:	461a      	mov	r2, r3
 800b984:	2184      	movs	r1, #132	; 0x84
 800b986:	6878      	ldr	r0, [r7, #4]
 800b988:	f003 fbec 	bl	800f164 <VL53L0X_WrByte>
 800b98c:	4603      	mov	r3, r0
 800b98e:	73fb      	strb	r3, [r7, #15]
 800b990:	e0f3      	b.n	800bb7a <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 800b992:	78bb      	ldrb	r3, [r7, #2]
 800b994:	2b15      	cmp	r3, #21
 800b996:	f040 8097 	bne.w	800bac8 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800b99a:	2201      	movs	r2, #1
 800b99c:	21ff      	movs	r1, #255	; 0xff
 800b99e:	6878      	ldr	r0, [r7, #4]
 800b9a0:	f003 fbe0 	bl	800f164 <VL53L0X_WrByte>
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	461a      	mov	r2, r3
 800b9a8:	7bfb      	ldrb	r3, [r7, #15]
 800b9aa:	4313      	orrs	r3, r2
 800b9ac:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	2100      	movs	r1, #0
 800b9b2:	6878      	ldr	r0, [r7, #4]
 800b9b4:	f003 fbd6 	bl	800f164 <VL53L0X_WrByte>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	461a      	mov	r2, r3
 800b9bc:	7bfb      	ldrb	r3, [r7, #15]
 800b9be:	4313      	orrs	r3, r2
 800b9c0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	21ff      	movs	r1, #255	; 0xff
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	f003 fbcc 	bl	800f164 <VL53L0X_WrByte>
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	461a      	mov	r2, r3
 800b9d0:	7bfb      	ldrb	r3, [r7, #15]
 800b9d2:	4313      	orrs	r3, r2
 800b9d4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800b9d6:	2201      	movs	r2, #1
 800b9d8:	2180      	movs	r1, #128	; 0x80
 800b9da:	6878      	ldr	r0, [r7, #4]
 800b9dc:	f003 fbc2 	bl	800f164 <VL53L0X_WrByte>
 800b9e0:	4603      	mov	r3, r0
 800b9e2:	461a      	mov	r2, r3
 800b9e4:	7bfb      	ldrb	r3, [r7, #15]
 800b9e6:	4313      	orrs	r3, r2
 800b9e8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 800b9ea:	2202      	movs	r2, #2
 800b9ec:	2185      	movs	r1, #133	; 0x85
 800b9ee:	6878      	ldr	r0, [r7, #4]
 800b9f0:	f003 fbb8 	bl	800f164 <VL53L0X_WrByte>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	461a      	mov	r2, r3
 800b9f8:	7bfb      	ldrb	r3, [r7, #15]
 800b9fa:	4313      	orrs	r3, r2
 800b9fc:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800b9fe:	2204      	movs	r2, #4
 800ba00:	21ff      	movs	r1, #255	; 0xff
 800ba02:	6878      	ldr	r0, [r7, #4]
 800ba04:	f003 fbae 	bl	800f164 <VL53L0X_WrByte>
 800ba08:	4603      	mov	r3, r0
 800ba0a:	461a      	mov	r2, r3
 800ba0c:	7bfb      	ldrb	r3, [r7, #15]
 800ba0e:	4313      	orrs	r3, r2
 800ba10:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800ba12:	2200      	movs	r2, #0
 800ba14:	21cd      	movs	r1, #205	; 0xcd
 800ba16:	6878      	ldr	r0, [r7, #4]
 800ba18:	f003 fba4 	bl	800f164 <VL53L0X_WrByte>
 800ba1c:	4603      	mov	r3, r0
 800ba1e:	461a      	mov	r2, r3
 800ba20:	7bfb      	ldrb	r3, [r7, #15]
 800ba22:	4313      	orrs	r3, r2
 800ba24:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800ba26:	2211      	movs	r2, #17
 800ba28:	21cc      	movs	r1, #204	; 0xcc
 800ba2a:	6878      	ldr	r0, [r7, #4]
 800ba2c:	f003 fb9a 	bl	800f164 <VL53L0X_WrByte>
 800ba30:	4603      	mov	r3, r0
 800ba32:	461a      	mov	r2, r3
 800ba34:	7bfb      	ldrb	r3, [r7, #15]
 800ba36:	4313      	orrs	r3, r2
 800ba38:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800ba3a:	2207      	movs	r2, #7
 800ba3c:	21ff      	movs	r1, #255	; 0xff
 800ba3e:	6878      	ldr	r0, [r7, #4]
 800ba40:	f003 fb90 	bl	800f164 <VL53L0X_WrByte>
 800ba44:	4603      	mov	r3, r0
 800ba46:	461a      	mov	r2, r3
 800ba48:	7bfb      	ldrb	r3, [r7, #15]
 800ba4a:	4313      	orrs	r3, r2
 800ba4c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800ba4e:	2200      	movs	r2, #0
 800ba50:	21be      	movs	r1, #190	; 0xbe
 800ba52:	6878      	ldr	r0, [r7, #4]
 800ba54:	f003 fb86 	bl	800f164 <VL53L0X_WrByte>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	461a      	mov	r2, r3
 800ba5c:	7bfb      	ldrb	r3, [r7, #15]
 800ba5e:	4313      	orrs	r3, r2
 800ba60:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800ba62:	2206      	movs	r2, #6
 800ba64:	21ff      	movs	r1, #255	; 0xff
 800ba66:	6878      	ldr	r0, [r7, #4]
 800ba68:	f003 fb7c 	bl	800f164 <VL53L0X_WrByte>
 800ba6c:	4603      	mov	r3, r0
 800ba6e:	461a      	mov	r2, r3
 800ba70:	7bfb      	ldrb	r3, [r7, #15]
 800ba72:	4313      	orrs	r3, r2
 800ba74:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800ba76:	2209      	movs	r2, #9
 800ba78:	21cc      	movs	r1, #204	; 0xcc
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	f003 fb72 	bl	800f164 <VL53L0X_WrByte>
 800ba80:	4603      	mov	r3, r0
 800ba82:	461a      	mov	r2, r3
 800ba84:	7bfb      	ldrb	r3, [r7, #15]
 800ba86:	4313      	orrs	r3, r2
 800ba88:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	21ff      	movs	r1, #255	; 0xff
 800ba8e:	6878      	ldr	r0, [r7, #4]
 800ba90:	f003 fb68 	bl	800f164 <VL53L0X_WrByte>
 800ba94:	4603      	mov	r3, r0
 800ba96:	461a      	mov	r2, r3
 800ba98:	7bfb      	ldrb	r3, [r7, #15]
 800ba9a:	4313      	orrs	r3, r2
 800ba9c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800ba9e:	2201      	movs	r2, #1
 800baa0:	21ff      	movs	r1, #255	; 0xff
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	f003 fb5e 	bl	800f164 <VL53L0X_WrByte>
 800baa8:	4603      	mov	r3, r0
 800baaa:	461a      	mov	r2, r3
 800baac:	7bfb      	ldrb	r3, [r7, #15]
 800baae:	4313      	orrs	r3, r2
 800bab0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800bab2:	2200      	movs	r2, #0
 800bab4:	2100      	movs	r1, #0
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f003 fb54 	bl	800f164 <VL53L0X_WrByte>
 800babc:	4603      	mov	r3, r0
 800babe:	461a      	mov	r2, r3
 800bac0:	7bfb      	ldrb	r3, [r7, #15]
 800bac2:	4313      	orrs	r3, r2
 800bac4:	73fb      	strb	r3, [r7, #15]
 800bac6:	e058      	b.n	800bb7a <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 800bac8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d121      	bne.n	800bb14 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 800bad0:	787b      	ldrb	r3, [r7, #1]
 800bad2:	2b04      	cmp	r3, #4
 800bad4:	d81b      	bhi.n	800bb0e <VL53L0X_SetGpioConfig+0x1ce>
 800bad6:	a201      	add	r2, pc, #4	; (adr r2, 800badc <VL53L0X_SetGpioConfig+0x19c>)
 800bad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800badc:	0800baf1 	.word	0x0800baf1
 800bae0:	0800baf7 	.word	0x0800baf7
 800bae4:	0800bafd 	.word	0x0800bafd
 800bae8:	0800bb03 	.word	0x0800bb03
 800baec:	0800bb09 	.word	0x0800bb09
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 800baf0:	2300      	movs	r3, #0
 800baf2:	73bb      	strb	r3, [r7, #14]
				break;
 800baf4:	e00f      	b.n	800bb16 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 800baf6:	2301      	movs	r3, #1
 800baf8:	73bb      	strb	r3, [r7, #14]
				break;
 800bafa:	e00c      	b.n	800bb16 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 800bafc:	2302      	movs	r3, #2
 800bafe:	73bb      	strb	r3, [r7, #14]
				break;
 800bb00:	e009      	b.n	800bb16 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 800bb02:	2303      	movs	r3, #3
 800bb04:	73bb      	strb	r3, [r7, #14]
				break;
 800bb06:	e006      	b.n	800bb16 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 800bb08:	2304      	movs	r3, #4
 800bb0a:	73bb      	strb	r3, [r7, #14]
				break;
 800bb0c:	e003      	b.n	800bb16 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 800bb0e:	23f5      	movs	r3, #245	; 0xf5
 800bb10:	73fb      	strb	r3, [r7, #15]
 800bb12:	e000      	b.n	800bb16 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 800bb14:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 800bb16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d107      	bne.n	800bb2e <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 800bb1e:	7bbb      	ldrb	r3, [r7, #14]
 800bb20:	461a      	mov	r2, r3
 800bb22:	210a      	movs	r1, #10
 800bb24:	6878      	ldr	r0, [r7, #4]
 800bb26:	f003 fb1d 	bl	800f164 <VL53L0X_WrByte>
 800bb2a:	4603      	mov	r3, r0
 800bb2c:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 800bb2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d10f      	bne.n	800bb56 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800bb36:	7e3b      	ldrb	r3, [r7, #24]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d102      	bne.n	800bb42 <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	73bb      	strb	r3, [r7, #14]
 800bb40:	e001      	b.n	800bb46 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 800bb42:	2310      	movs	r3, #16
 800bb44:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 800bb46:	7bbb      	ldrb	r3, [r7, #14]
 800bb48:	22ef      	movs	r2, #239	; 0xef
 800bb4a:	2184      	movs	r1, #132	; 0x84
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	f003 fb57 	bl	800f200 <VL53L0X_UpdateByte>
 800bb52:	4603      	mov	r3, r0
 800bb54:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 800bb56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d103      	bne.n	800bb66 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	787a      	ldrb	r2, [r7, #1]
 800bb62:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 800bb66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d105      	bne.n	800bb7a <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800bb6e:	2100      	movs	r1, #0
 800bb70:	6878      	ldr	r0, [r7, #4]
 800bb72:	f000 f83f 	bl	800bbf4 <VL53L0X_ClearInterruptMask>
 800bb76:	4603      	mov	r3, r0
 800bb78:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bb7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bb7e:	4618      	mov	r0, r3
 800bb80:	3710      	adds	r7, #16
 800bb82:	46bd      	mov	sp, r7
 800bb84:	bd80      	pop	{r7, pc}
 800bb86:	bf00      	nop

0800bb88 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b086      	sub	sp, #24
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	60f8      	str	r0, [r7, #12]
 800bb90:	607a      	str	r2, [r7, #4]
 800bb92:	603b      	str	r3, [r7, #0]
 800bb94:	460b      	mov	r3, r1
 800bb96:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bb98:	2300      	movs	r3, #0
 800bb9a:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 800bb9c:	f107 0314 	add.w	r3, r7, #20
 800bba0:	461a      	mov	r2, r3
 800bba2:	210e      	movs	r1, #14
 800bba4:	68f8      	ldr	r0, [r7, #12]
 800bba6:	f003 fb89 	bl	800f2bc <VL53L0X_RdWord>
 800bbaa:	4603      	mov	r3, r0
 800bbac:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800bbae:	8abb      	ldrh	r3, [r7, #20]
 800bbb0:	045b      	lsls	r3, r3, #17
 800bbb2:	461a      	mov	r2, r3
 800bbb4:	4b0e      	ldr	r3, [pc, #56]	; (800bbf0 <VL53L0X_GetInterruptThresholds+0x68>)
 800bbb6:	4013      	ands	r3, r2
 800bbb8:	687a      	ldr	r2, [r7, #4]
 800bbba:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800bbbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d10f      	bne.n	800bbe4 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 800bbc4:	f107 0314 	add.w	r3, r7, #20
 800bbc8:	461a      	mov	r2, r3
 800bbca:	210c      	movs	r1, #12
 800bbcc:	68f8      	ldr	r0, [r7, #12]
 800bbce:	f003 fb75 	bl	800f2bc <VL53L0X_RdWord>
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800bbd6:	8abb      	ldrh	r3, [r7, #20]
 800bbd8:	045b      	lsls	r3, r3, #17
 800bbda:	461a      	mov	r2, r3
 800bbdc:	4b04      	ldr	r3, [pc, #16]	; (800bbf0 <VL53L0X_GetInterruptThresholds+0x68>)
 800bbde:	4013      	ands	r3, r2
		*pThresholdHigh =
 800bbe0:	683a      	ldr	r2, [r7, #0]
 800bbe2:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bbe4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bbe8:	4618      	mov	r0, r3
 800bbea:	3718      	adds	r7, #24
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bd80      	pop	{r7, pc}
 800bbf0:	1ffe0000 	.word	0x1ffe0000

0800bbf4 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b084      	sub	sp, #16
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
 800bbfc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bbfe:	2300      	movs	r3, #0
 800bc00:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 800bc02:	2300      	movs	r3, #0
 800bc04:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 800bc06:	2201      	movs	r2, #1
 800bc08:	210b      	movs	r1, #11
 800bc0a:	6878      	ldr	r0, [r7, #4]
 800bc0c:	f003 faaa 	bl	800f164 <VL53L0X_WrByte>
 800bc10:	4603      	mov	r3, r0
 800bc12:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 800bc14:	2200      	movs	r2, #0
 800bc16:	210b      	movs	r1, #11
 800bc18:	6878      	ldr	r0, [r7, #4]
 800bc1a:	f003 faa3 	bl	800f164 <VL53L0X_WrByte>
 800bc1e:	4603      	mov	r3, r0
 800bc20:	461a      	mov	r2, r3
 800bc22:	7bfb      	ldrb	r3, [r7, #15]
 800bc24:	4313      	orrs	r3, r2
 800bc26:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 800bc28:	f107 030d 	add.w	r3, r7, #13
 800bc2c:	461a      	mov	r2, r3
 800bc2e:	2113      	movs	r1, #19
 800bc30:	6878      	ldr	r0, [r7, #4]
 800bc32:	f003 fb19 	bl	800f268 <VL53L0X_RdByte>
 800bc36:	4603      	mov	r3, r0
 800bc38:	461a      	mov	r2, r3
 800bc3a:	7bfb      	ldrb	r3, [r7, #15]
 800bc3c:	4313      	orrs	r3, r2
 800bc3e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 800bc40:	7bbb      	ldrb	r3, [r7, #14]
 800bc42:	3301      	adds	r3, #1
 800bc44:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 800bc46:	7b7b      	ldrb	r3, [r7, #13]
 800bc48:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d006      	beq.n	800bc5e <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 800bc50:	7bbb      	ldrb	r3, [r7, #14]
 800bc52:	2b02      	cmp	r3, #2
 800bc54:	d803      	bhi.n	800bc5e <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 800bc56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d0d3      	beq.n	800bc06 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 800bc5e:	7bbb      	ldrb	r3, [r7, #14]
 800bc60:	2b02      	cmp	r3, #2
 800bc62:	d901      	bls.n	800bc68 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 800bc64:	23f4      	movs	r3, #244	; 0xf4
 800bc66:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800bc68:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	3710      	adds	r7, #16
 800bc70:	46bd      	mov	sp, r7
 800bc72:	bd80      	pop	{r7, pc}

0800bc74 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b084      	sub	sp, #16
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
 800bc7c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800bc82:	f107 030e 	add.w	r3, r7, #14
 800bc86:	461a      	mov	r2, r3
 800bc88:	2113      	movs	r1, #19
 800bc8a:	6878      	ldr	r0, [r7, #4]
 800bc8c:	f003 faec 	bl	800f268 <VL53L0X_RdByte>
 800bc90:	4603      	mov	r3, r0
 800bc92:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 800bc94:	7bbb      	ldrb	r3, [r7, #14]
 800bc96:	f003 0207 	and.w	r2, r3, #7
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800bc9e:	7bbb      	ldrb	r3, [r7, #14]
 800bca0:	f003 0318 	and.w	r3, r3, #24
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d001      	beq.n	800bcac <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 800bca8:	23fa      	movs	r3, #250	; 0xfa
 800bcaa:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800bcac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	3710      	adds	r7, #16
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	bd80      	pop	{r7, pc}

0800bcb8 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b086      	sub	sp, #24
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	60f8      	str	r0, [r7, #12]
 800bcc0:	60b9      	str	r1, [r7, #8]
 800bcc2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 800bcc8:	687a      	ldr	r2, [r7, #4]
 800bcca:	68b9      	ldr	r1, [r7, #8]
 800bccc:	68f8      	ldr	r0, [r7, #12]
 800bcce:	f000 fa33 	bl	800c138 <VL53L0X_perform_ref_spad_management>
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 800bcd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bcda:	4618      	mov	r0, r3
 800bcdc:	3718      	adds	r7, #24
 800bcde:	46bd      	mov	sp, r7
 800bce0:	bd80      	pop	{r7, pc}

0800bce2 <VL53L0X_PerformContinuousRangingMeasurement>:


VL53L0X_Error VL53L0X_PerformContinuousRangingMeasurement(VL53L0X_Dev_t *device, VL53L0X_RangingMeasurementData_t *ranging_data) {
 800bce2:	b580      	push	{r7, lr}
 800bce4:	b084      	sub	sp, #16
 800bce6:	af00      	add	r7, sp, #0
 800bce8:	6078      	str	r0, [r7, #4]
 800bcea:	6039      	str	r1, [r7, #0]
    VL53L0X_Error status;

    // Set the device to high accuracy mode
    status = VL53L0X_SetDeviceMode(device, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 800bcec:	2101      	movs	r1, #1
 800bcee:	6878      	ldr	r0, [r7, #4]
 800bcf0:	f7fe fed2 	bl	800aa98 <VL53L0X_SetDeviceMode>
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 800bcf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d002      	beq.n	800bd06 <VL53L0X_PerformContinuousRangingMeasurement+0x24>
        return status;
 800bd00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd04:	e019      	b.n	800bd3a <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    // Start continuous ranging measurement
    status = VL53L0X_StartMeasurement(device);
 800bd06:	6878      	ldr	r0, [r7, #4]
 800bd08:	f7ff fbc4 	bl	800b494 <VL53L0X_StartMeasurement>
 800bd0c:	4603      	mov	r3, r0
 800bd0e:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 800bd10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d002      	beq.n	800bd1e <VL53L0X_PerformContinuousRangingMeasurement+0x3c>
        return status;
 800bd18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd1c:	e00d      	b.n	800bd3a <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    // Get ranging measurement data
    status = VL53L0X_GetRangingMeasurementData(device, ranging_data);
 800bd1e:	6839      	ldr	r1, [r7, #0]
 800bd20:	6878      	ldr	r0, [r7, #4]
 800bd22:	f7ff fcb9 	bl	800b698 <VL53L0X_GetRangingMeasurementData>
 800bd26:	4603      	mov	r3, r0
 800bd28:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 800bd2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d002      	beq.n	800bd38 <VL53L0X_PerformContinuousRangingMeasurement+0x56>
        return status;
 800bd32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd36:	e000      	b.n	800bd3a <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    return VL53L0X_ERROR_NONE;
 800bd38:	2300      	movs	r3, #0
}
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	3710      	adds	r7, #16
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bd80      	pop	{r7, pc}

0800bd42 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 800bd42:	b580      	push	{r7, lr}
 800bd44:	b084      	sub	sp, #16
 800bd46:	af00      	add	r7, sp, #0
 800bd48:	6078      	str	r0, [r7, #4]
 800bd4a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 800bd50:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800bd54:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 800bd56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bd5a:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 800bd5c:	f107 0308 	add.w	r3, r7, #8
 800bd60:	461a      	mov	r2, r3
 800bd62:	2128      	movs	r1, #40	; 0x28
 800bd64:	6878      	ldr	r0, [r7, #4]
 800bd66:	f003 faa9 	bl	800f2bc <VL53L0X_RdWord>
 800bd6a:	4603      	mov	r3, r0
 800bd6c:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 800bd6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d11e      	bne.n	800bdb4 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800bd76:	893b      	ldrh	r3, [r7, #8]
 800bd78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bd7c:	b29b      	uxth	r3, r3
 800bd7e:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 800bd80:	893b      	ldrh	r3, [r7, #8]
 800bd82:	461a      	mov	r2, r3
 800bd84:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800bd88:	429a      	cmp	r2, r3
 800bd8a:	dd0b      	ble.n	800bda4 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 800bd8c:	893a      	ldrh	r2, [r7, #8]
 800bd8e:	897b      	ldrh	r3, [r7, #10]
 800bd90:	1ad3      	subs	r3, r2, r3
 800bd92:	b29b      	uxth	r3, r3
 800bd94:	b21b      	sxth	r3, r3
 800bd96:	461a      	mov	r2, r3
					* 250;
 800bd98:	23fa      	movs	r3, #250	; 0xfa
 800bd9a:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	601a      	str	r2, [r3, #0]
 800bda2:	e007      	b.n	800bdb4 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 800bda4:	893b      	ldrh	r3, [r7, #8]
 800bda6:	b21b      	sxth	r3, r3
 800bda8:	461a      	mov	r2, r3
 800bdaa:	23fa      	movs	r3, #250	; 0xfa
 800bdac:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	601a      	str	r2, [r3, #0]

	}

	return Status;
 800bdb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	3710      	adds	r7, #16
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	bd80      	pop	{r7, pc}

0800bdc0 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 800bdc0:	b480      	push	{r7}
 800bdc2:	b08b      	sub	sp, #44	; 0x2c
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	60f8      	str	r0, [r7, #12]
 800bdc8:	60b9      	str	r1, [r7, #8]
 800bdca:	607a      	str	r2, [r7, #4]
 800bdcc:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800bdce:	2308      	movs	r3, #8
 800bdd0:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	f04f 32ff 	mov.w	r2, #4294967295
 800bddc:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800bdde:	687a      	ldr	r2, [r7, #4]
 800bde0:	69bb      	ldr	r3, [r7, #24]
 800bde2:	fbb2 f3f3 	udiv	r3, r2, r3
 800bde6:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	69ba      	ldr	r2, [r7, #24]
 800bdec:	fbb3 f2f2 	udiv	r2, r3, r2
 800bdf0:	69b9      	ldr	r1, [r7, #24]
 800bdf2:	fb01 f202 	mul.w	r2, r1, r2
 800bdf6:	1a9b      	subs	r3, r3, r2
 800bdf8:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800bdfa:	697b      	ldr	r3, [r7, #20]
 800bdfc:	627b      	str	r3, [r7, #36]	; 0x24
 800bdfe:	e030      	b.n	800be62 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 800be00:	2300      	movs	r3, #0
 800be02:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 800be04:	68fa      	ldr	r2, [r7, #12]
 800be06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be08:	4413      	add	r3, r2
 800be0a:	781b      	ldrb	r3, [r3, #0]
 800be0c:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 800be0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be10:	697b      	ldr	r3, [r7, #20]
 800be12:	429a      	cmp	r2, r3
 800be14:	d11e      	bne.n	800be54 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 800be16:	7ffa      	ldrb	r2, [r7, #31]
 800be18:	693b      	ldr	r3, [r7, #16]
 800be1a:	fa42 f303 	asr.w	r3, r2, r3
 800be1e:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 800be20:	693b      	ldr	r3, [r7, #16]
 800be22:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 800be24:	e016      	b.n	800be54 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 800be26:	7ffb      	ldrb	r3, [r7, #31]
 800be28:	f003 0301 	and.w	r3, r3, #1
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d00b      	beq.n	800be48 <get_next_good_spad+0x88>
				success = 1;
 800be30:	2301      	movs	r3, #1
 800be32:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 800be34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be36:	69ba      	ldr	r2, [r7, #24]
 800be38:	fb03 f202 	mul.w	r2, r3, r2
 800be3c:	6a3b      	ldr	r3, [r7, #32]
 800be3e:	4413      	add	r3, r2
 800be40:	461a      	mov	r2, r3
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	601a      	str	r2, [r3, #0]
				break;
 800be46:	e009      	b.n	800be5c <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 800be48:	7ffb      	ldrb	r3, [r7, #31]
 800be4a:	085b      	lsrs	r3, r3, #1
 800be4c:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 800be4e:	6a3b      	ldr	r3, [r7, #32]
 800be50:	3301      	adds	r3, #1
 800be52:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 800be54:	6a3a      	ldr	r2, [r7, #32]
 800be56:	69bb      	ldr	r3, [r7, #24]
 800be58:	429a      	cmp	r2, r3
 800be5a:	d3e4      	bcc.n	800be26 <get_next_good_spad+0x66>
				coarseIndex++) {
 800be5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be5e:	3301      	adds	r3, #1
 800be60:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800be62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be64:	68bb      	ldr	r3, [r7, #8]
 800be66:	429a      	cmp	r2, r3
 800be68:	d202      	bcs.n	800be70 <get_next_good_spad+0xb0>
 800be6a:	7fbb      	ldrb	r3, [r7, #30]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d0c7      	beq.n	800be00 <get_next_good_spad+0x40>
		}
	}
}
 800be70:	bf00      	nop
 800be72:	372c      	adds	r7, #44	; 0x2c
 800be74:	46bd      	mov	sp, r7
 800be76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7a:	4770      	bx	lr

0800be7c <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 800be7c:	b480      	push	{r7}
 800be7e:	b085      	sub	sp, #20
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 800be84:	2301      	movs	r3, #1
 800be86:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	099b      	lsrs	r3, r3, #6
 800be8c:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800be8e:	4a07      	ldr	r2, [pc, #28]	; (800beac <is_aperture+0x30>)
 800be90:	68bb      	ldr	r3, [r7, #8]
 800be92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d101      	bne.n	800be9e <is_aperture+0x22>
		isAperture = 0;
 800be9a:	2300      	movs	r3, #0
 800be9c:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 800be9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bea0:	4618      	mov	r0, r3
 800bea2:	3714      	adds	r7, #20
 800bea4:	46bd      	mov	sp, r7
 800bea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beaa:	4770      	bx	lr
 800beac:	200002dc 	.word	0x200002dc

0800beb0 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 800beb0:	b480      	push	{r7}
 800beb2:	b089      	sub	sp, #36	; 0x24
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	60f8      	str	r0, [r7, #12]
 800beb8:	60b9      	str	r1, [r7, #8]
 800beba:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800bebc:	2300      	movs	r3, #0
 800bebe:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 800bec0:	2308      	movs	r3, #8
 800bec2:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 800bec4:	687a      	ldr	r2, [r7, #4]
 800bec6:	69bb      	ldr	r3, [r7, #24]
 800bec8:	fbb2 f3f3 	udiv	r3, r2, r3
 800becc:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	69ba      	ldr	r2, [r7, #24]
 800bed2:	fbb3 f2f2 	udiv	r2, r3, r2
 800bed6:	69b9      	ldr	r1, [r7, #24]
 800bed8:	fb01 f202 	mul.w	r2, r1, r2
 800bedc:	1a9b      	subs	r3, r3, r2
 800bede:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 800bee0:	697a      	ldr	r2, [r7, #20]
 800bee2:	68bb      	ldr	r3, [r7, #8]
 800bee4:	429a      	cmp	r2, r3
 800bee6:	d302      	bcc.n	800beee <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 800bee8:	23ce      	movs	r3, #206	; 0xce
 800beea:	77fb      	strb	r3, [r7, #31]
 800beec:	e010      	b.n	800bf10 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800beee:	68fa      	ldr	r2, [r7, #12]
 800bef0:	697b      	ldr	r3, [r7, #20]
 800bef2:	4413      	add	r3, r2
 800bef4:	781b      	ldrb	r3, [r3, #0]
 800bef6:	b25a      	sxtb	r2, r3
 800bef8:	2101      	movs	r1, #1
 800befa:	693b      	ldr	r3, [r7, #16]
 800befc:	fa01 f303 	lsl.w	r3, r1, r3
 800bf00:	b25b      	sxtb	r3, r3
 800bf02:	4313      	orrs	r3, r2
 800bf04:	b259      	sxtb	r1, r3
 800bf06:	68fa      	ldr	r2, [r7, #12]
 800bf08:	697b      	ldr	r3, [r7, #20]
 800bf0a:	4413      	add	r3, r2
 800bf0c:	b2ca      	uxtb	r2, r1
 800bf0e:	701a      	strb	r2, [r3, #0]

	return status;
 800bf10:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800bf14:	4618      	mov	r0, r3
 800bf16:	3724      	adds	r7, #36	; 0x24
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1e:	4770      	bx	lr

0800bf20 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b084      	sub	sp, #16
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
 800bf28:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800bf2a:	2306      	movs	r3, #6
 800bf2c:	683a      	ldr	r2, [r7, #0]
 800bf2e:	21b0      	movs	r1, #176	; 0xb0
 800bf30:	6878      	ldr	r0, [r7, #4]
 800bf32:	f003 f8bb 	bl	800f0ac <VL53L0X_WriteMulti>
 800bf36:	4603      	mov	r3, r0
 800bf38:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800bf3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bf3e:	4618      	mov	r0, r3
 800bf40:	3710      	adds	r7, #16
 800bf42:	46bd      	mov	sp, r7
 800bf44:	bd80      	pop	{r7, pc}

0800bf46 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800bf46:	b580      	push	{r7, lr}
 800bf48:	b084      	sub	sp, #16
 800bf4a:	af00      	add	r7, sp, #0
 800bf4c:	6078      	str	r0, [r7, #4]
 800bf4e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 800bf50:	2306      	movs	r3, #6
 800bf52:	683a      	ldr	r2, [r7, #0]
 800bf54:	21b0      	movs	r1, #176	; 0xb0
 800bf56:	6878      	ldr	r0, [r7, #4]
 800bf58:	f003 f8d8 	bl	800f10c <VL53L0X_ReadMulti>
 800bf5c:	4603      	mov	r3, r0
 800bf5e:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 800bf60:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bf64:	4618      	mov	r0, r3
 800bf66:	3710      	adds	r7, #16
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	bd80      	pop	{r7, pc}

0800bf6c <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b08c      	sub	sp, #48	; 0x30
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	60f8      	str	r0, [r7, #12]
 800bf74:	607a      	str	r2, [r7, #4]
 800bf76:	603b      	str	r3, [r7, #0]
 800bf78:	460b      	mov	r3, r1
 800bf7a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 800bf82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf84:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 800bf86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf88:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf8e:	e02b      	b.n	800bfe8 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 800bf90:	f107 031c 	add.w	r3, r7, #28
 800bf94:	6a3a      	ldr	r2, [r7, #32]
 800bf96:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bf98:	6878      	ldr	r0, [r7, #4]
 800bf9a:	f7ff ff11 	bl	800bdc0 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 800bf9e:	69fb      	ldr	r3, [r7, #28]
 800bfa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfa4:	d103      	bne.n	800bfae <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800bfa6:	23ce      	movs	r3, #206	; 0xce
 800bfa8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800bfac:	e020      	b.n	800bff0 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800bfae:	69fb      	ldr	r3, [r7, #28]
 800bfb0:	461a      	mov	r2, r3
 800bfb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfb4:	4413      	add	r3, r2
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	f7ff ff60 	bl	800be7c <is_aperture>
 800bfbc:	4603      	mov	r3, r0
 800bfbe:	461a      	mov	r2, r3
 800bfc0:	7afb      	ldrb	r3, [r7, #11]
 800bfc2:	4293      	cmp	r3, r2
 800bfc4:	d003      	beq.n	800bfce <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800bfc6:	23ce      	movs	r3, #206	; 0xce
 800bfc8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800bfcc:	e010      	b.n	800bff0 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800bfce:	69fb      	ldr	r3, [r7, #28]
 800bfd0:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 800bfd2:	6a3a      	ldr	r2, [r7, #32]
 800bfd4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bfd6:	6838      	ldr	r0, [r7, #0]
 800bfd8:	f7ff ff6a 	bl	800beb0 <enable_spad_bit>
		currentSpad++;
 800bfdc:	6a3b      	ldr	r3, [r7, #32]
 800bfde:	3301      	adds	r3, #1
 800bfe0:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800bfe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfe4:	3301      	adds	r3, #1
 800bfe6:	62bb      	str	r3, [r7, #40]	; 0x28
 800bfe8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bfea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bfec:	429a      	cmp	r2, r3
 800bfee:	d3cf      	bcc.n	800bf90 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 800bff0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bff2:	6a3a      	ldr	r2, [r7, #32]
 800bff4:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800bff6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d106      	bne.n	800c00c <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800bffe:	6839      	ldr	r1, [r7, #0]
 800c000:	68f8      	ldr	r0, [r7, #12]
 800c002:	f7ff ff8d 	bl	800bf20 <set_ref_spad_map>
 800c006:	4603      	mov	r3, r0
 800c008:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 800c00c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c010:	2b00      	cmp	r3, #0
 800c012:	d121      	bne.n	800c058 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 800c014:	f107 0314 	add.w	r3, r7, #20
 800c018:	4619      	mov	r1, r3
 800c01a:	68f8      	ldr	r0, [r7, #12]
 800c01c:	f7ff ff93 	bl	800bf46 <get_ref_spad_map>
 800c020:	4603      	mov	r3, r0
 800c022:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 800c026:	2300      	movs	r3, #0
 800c028:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800c02a:	e011      	b.n	800c050 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 800c02c:	683a      	ldr	r2, [r7, #0]
 800c02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c030:	4413      	add	r3, r2
 800c032:	781a      	ldrb	r2, [r3, #0]
 800c034:	f107 0114 	add.w	r1, r7, #20
 800c038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c03a:	440b      	add	r3, r1
 800c03c:	781b      	ldrb	r3, [r3, #0]
 800c03e:	429a      	cmp	r2, r3
 800c040:	d003      	beq.n	800c04a <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 800c042:	23ce      	movs	r3, #206	; 0xce
 800c044:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 800c048:	e006      	b.n	800c058 <enable_ref_spads+0xec>
			}
			i++;
 800c04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c04c:	3301      	adds	r3, #1
 800c04e:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 800c050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c054:	429a      	cmp	r2, r3
 800c056:	d3e9      	bcc.n	800c02c <enable_ref_spads+0xc0>
		}
	}
	return status;
 800c058:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800c05c:	4618      	mov	r0, r3
 800c05e:	3730      	adds	r7, #48	; 0x30
 800c060:	46bd      	mov	sp, r7
 800c062:	bd80      	pop	{r7, pc}

0800c064 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b08a      	sub	sp, #40	; 0x28
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
 800c06c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800c06e:	2300      	movs	r3, #0
 800c070:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 800c074:	2300      	movs	r3, #0
 800c076:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800c080:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 800c084:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d107      	bne.n	800c09c <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 800c08c:	22c0      	movs	r2, #192	; 0xc0
 800c08e:	2101      	movs	r1, #1
 800c090:	6878      	ldr	r0, [r7, #4]
 800c092:	f003 f867 	bl	800f164 <VL53L0X_WrByte>
 800c096:	4603      	mov	r3, r0
 800c098:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 800c09c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d108      	bne.n	800c0b6 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 800c0a4:	f107 0308 	add.w	r3, r7, #8
 800c0a8:	4619      	mov	r1, r3
 800c0aa:	6878      	ldr	r0, [r7, #4]
 800c0ac:	f7ff fc18 	bl	800b8e0 <VL53L0X_PerformSingleRangingMeasurement>
 800c0b0:	4603      	mov	r3, r0
 800c0b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800c0b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d107      	bne.n	800c0ce <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c0be:	2201      	movs	r2, #1
 800c0c0:	21ff      	movs	r1, #255	; 0xff
 800c0c2:	6878      	ldr	r0, [r7, #4]
 800c0c4:	f003 f84e 	bl	800f164 <VL53L0X_WrByte>
 800c0c8:	4603      	mov	r3, r0
 800c0ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 800c0ce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d107      	bne.n	800c0e6 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 800c0d6:	683a      	ldr	r2, [r7, #0]
 800c0d8:	21b6      	movs	r1, #182	; 0xb6
 800c0da:	6878      	ldr	r0, [r7, #4]
 800c0dc:	f003 f8ee 	bl	800f2bc <VL53L0X_RdWord>
 800c0e0:	4603      	mov	r3, r0
 800c0e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800c0e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d107      	bne.n	800c0fe <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	21ff      	movs	r1, #255	; 0xff
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f003 f836 	bl	800f164 <VL53L0X_WrByte>
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800c0fe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c102:	2b00      	cmp	r3, #0
 800c104:	d112      	bne.n	800c12c <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800c106:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c10a:	461a      	mov	r2, r3
 800c10c:	2101      	movs	r1, #1
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f003 f828 	bl	800f164 <VL53L0X_WrByte>
 800c114:	4603      	mov	r3, r0
 800c116:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800c11a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d104      	bne.n	800c12c <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c128:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 800c12c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c130:	4618      	mov	r0, r3
 800c132:	3728      	adds	r7, #40	; 0x28
 800c134:	46bd      	mov	sp, r7
 800c136:	bd80      	pop	{r7, pc}

0800c138 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 800c138:	b590      	push	{r4, r7, lr}
 800c13a:	b09d      	sub	sp, #116	; 0x74
 800c13c:	af06      	add	r7, sp, #24
 800c13e:	60f8      	str	r0, [r7, #12]
 800c140:	60b9      	str	r1, [r7, #8]
 800c142:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c144:	2300      	movs	r3, #0
 800c146:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 800c14a:	23b4      	movs	r3, #180	; 0xb4
 800c14c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 800c150:	2303      	movs	r3, #3
 800c152:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 800c154:	232c      	movs	r3, #44	; 0x2c
 800c156:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 800c158:	2300      	movs	r3, #0
 800c15a:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 800c15c:	2300      	movs	r3, #0
 800c15e:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 800c160:	2300      	movs	r3, #0
 800c162:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 800c164:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800c168:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 800c16a:	2300      	movs	r3, #0
 800c16c:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 800c16e:	2300      	movs	r3, #0
 800c170:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 800c172:	2306      	movs	r3, #6
 800c174:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 800c176:	2300      	movs	r3, #0
 800c178:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 800c17a:	2300      	movs	r3, #0
 800c17c:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 800c17e:	2300      	movs	r3, #0
 800c180:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 800c184:	2300      	movs	r3, #0
 800c186:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 800c188:	2300      	movs	r3, #0
 800c18a:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 800c18c:	2300      	movs	r3, #0
 800c18e:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 800c190:	2300      	movs	r3, #0
 800c192:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 800c19c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 800c19e:	2300      	movs	r3, #0
 800c1a0:	64bb      	str	r3, [r7, #72]	; 0x48
 800c1a2:	e009      	b.n	800c1b8 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800c1a4:	68fa      	ldr	r2, [r7, #12]
 800c1a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1a8:	4413      	add	r3, r2
 800c1aa:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800c1b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1b4:	3301      	adds	r3, #1
 800c1b6:	64bb      	str	r3, [r7, #72]	; 0x48
 800c1b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c1ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1bc:	429a      	cmp	r2, r3
 800c1be:	d3f1      	bcc.n	800c1a4 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c1c0:	2201      	movs	r2, #1
 800c1c2:	21ff      	movs	r1, #255	; 0xff
 800c1c4:	68f8      	ldr	r0, [r7, #12]
 800c1c6:	f002 ffcd 	bl	800f164 <VL53L0X_WrByte>
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800c1d0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d107      	bne.n	800c1e8 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 800c1d8:	2200      	movs	r2, #0
 800c1da:	214f      	movs	r1, #79	; 0x4f
 800c1dc:	68f8      	ldr	r0, [r7, #12]
 800c1de:	f002 ffc1 	bl	800f164 <VL53L0X_WrByte>
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800c1e8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d107      	bne.n	800c200 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 800c1f0:	222c      	movs	r2, #44	; 0x2c
 800c1f2:	214e      	movs	r1, #78	; 0x4e
 800c1f4:	68f8      	ldr	r0, [r7, #12]
 800c1f6:	f002 ffb5 	bl	800f164 <VL53L0X_WrByte>
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800c200:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800c204:	2b00      	cmp	r3, #0
 800c206:	d107      	bne.n	800c218 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c208:	2200      	movs	r2, #0
 800c20a:	21ff      	movs	r1, #255	; 0xff
 800c20c:	68f8      	ldr	r0, [r7, #12]
 800c20e:	f002 ffa9 	bl	800f164 <VL53L0X_WrByte>
 800c212:	4603      	mov	r3, r0
 800c214:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800c218:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d109      	bne.n	800c234 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 800c220:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800c224:	461a      	mov	r2, r3
 800c226:	21b6      	movs	r1, #182	; 0xb6
 800c228:	68f8      	ldr	r0, [r7, #12]
 800c22a:	f002 ff9b 	bl	800f164 <VL53L0X_WrByte>
 800c22e:	4603      	mov	r3, r0
 800c230:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 800c234:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d107      	bne.n	800c24c <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 800c23c:	2200      	movs	r2, #0
 800c23e:	2180      	movs	r1, #128	; 0x80
 800c240:	68f8      	ldr	r0, [r7, #12]
 800c242:	f002 ff8f 	bl	800f164 <VL53L0X_WrByte>
 800c246:	4603      	mov	r3, r0
 800c248:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 800c24c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800c250:	2b00      	cmp	r3, #0
 800c252:	d10a      	bne.n	800c26a <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 800c254:	f107 0210 	add.w	r2, r7, #16
 800c258:	f107 0111 	add.w	r1, r7, #17
 800c25c:	2300      	movs	r3, #0
 800c25e:	68f8      	ldr	r0, [r7, #12]
 800c260:	f000 fbbb 	bl	800c9da <VL53L0X_perform_ref_calibration>
 800c264:	4603      	mov	r3, r0
 800c266:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 800c26a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d121      	bne.n	800c2b6 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 800c272:	2300      	movs	r3, #0
 800c274:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 800c276:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c278:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 800c27a:	2300      	movs	r3, #0
 800c27c:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 800c27e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c280:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 800c28e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800c292:	f107 0218 	add.w	r2, r7, #24
 800c296:	9204      	str	r2, [sp, #16]
 800c298:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c29a:	9203      	str	r2, [sp, #12]
 800c29c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c29e:	9202      	str	r2, [sp, #8]
 800c2a0:	9301      	str	r3, [sp, #4]
 800c2a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2a4:	9300      	str	r3, [sp, #0]
 800c2a6:	4623      	mov	r3, r4
 800c2a8:	4602      	mov	r2, r0
 800c2aa:	68f8      	ldr	r0, [r7, #12]
 800c2ac:	f7ff fe5e 	bl	800bf6c <enable_ref_spads>
 800c2b0:	4603      	mov	r3, r0
 800c2b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800c2b6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d174      	bne.n	800c3a8 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 800c2be:	69bb      	ldr	r3, [r7, #24]
 800c2c0:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 800c2c2:	f107 0312 	add.w	r3, r7, #18
 800c2c6:	4619      	mov	r1, r3
 800c2c8:	68f8      	ldr	r0, [r7, #12]
 800c2ca:	f7ff fecb 	bl	800c064 <perform_ref_signal_measurement>
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 800c2d4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d161      	bne.n	800c3a0 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 800c2dc:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 800c2de:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c2e0:	429a      	cmp	r2, r3
 800c2e2:	d25d      	bcs.n	800c3a0 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	64bb      	str	r3, [r7, #72]	; 0x48
 800c2e8:	e009      	b.n	800c2fe <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800c2ea:	68fa      	ldr	r2, [r7, #12]
 800c2ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c2ee:	4413      	add	r3, r2
 800c2f0:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 800c2f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c2fa:	3301      	adds	r3, #1
 800c2fc:	64bb      	str	r3, [r7, #72]	; 0x48
 800c2fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c302:	429a      	cmp	r2, r3
 800c304:	d3f1      	bcc.n	800c2ea <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 800c306:	e002      	b.n	800c30e <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 800c308:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c30a:	3301      	adds	r3, #1
 800c30c:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 800c30e:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800c312:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c314:	4413      	add	r3, r2
 800c316:	4618      	mov	r0, r3
 800c318:	f7ff fdb0 	bl	800be7c <is_aperture>
 800c31c:	4603      	mov	r3, r0
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d103      	bne.n	800c32a <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 800c322:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c326:	429a      	cmp	r2, r3
 800c328:	d3ee      	bcc.n	800c308 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 800c32a:	2301      	movs	r3, #1
 800c32c:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 800c32e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c330:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 800c33e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800c342:	f107 0218 	add.w	r2, r7, #24
 800c346:	9204      	str	r2, [sp, #16]
 800c348:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c34a:	9203      	str	r2, [sp, #12]
 800c34c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c34e:	9202      	str	r2, [sp, #8]
 800c350:	9301      	str	r3, [sp, #4]
 800c352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c354:	9300      	str	r3, [sp, #0]
 800c356:	4623      	mov	r3, r4
 800c358:	4602      	mov	r2, r0
 800c35a:	68f8      	ldr	r0, [r7, #12]
 800c35c:	f7ff fe06 	bl	800bf6c <enable_ref_spads>
 800c360:	4603      	mov	r3, r0
 800c362:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800c366:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d11b      	bne.n	800c3a6 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 800c36e:	69bb      	ldr	r3, [r7, #24]
 800c370:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 800c372:	f107 0312 	add.w	r3, r7, #18
 800c376:	4619      	mov	r1, r3
 800c378:	68f8      	ldr	r0, [r7, #12]
 800c37a:	f7ff fe73 	bl	800c064 <perform_ref_signal_measurement>
 800c37e:	4603      	mov	r3, r0
 800c380:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 800c384:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d10c      	bne.n	800c3a6 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 800c38c:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800c38e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c390:	429a      	cmp	r2, r3
 800c392:	d208      	bcs.n	800c3a6 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 800c394:	2301      	movs	r3, #1
 800c396:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 800c39a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c39c:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 800c39e:	e002      	b.n	800c3a6 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c3a4:	e000      	b.n	800c3a8 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 800c3a6:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800c3a8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	f040 80af 	bne.w	800c510 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 800c3b2:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 800c3b4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c3b6:	429a      	cmp	r2, r3
 800c3b8:	f240 80aa 	bls.w	800c510 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 800c3bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3be:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 800c3c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3c4:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	f503 7192 	add.w	r1, r3, #292	; 0x124
 800c3cc:	f107 031c 	add.w	r3, r7, #28
 800c3d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	f003 f820 	bl	800f418 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 800c3d8:	8a7b      	ldrh	r3, [r7, #18]
 800c3da:	461a      	mov	r2, r3
 800c3dc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c3de:	1ad3      	subs	r3, r2, r3
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	bfb8      	it	lt
 800c3e4:	425b      	neglt	r3, r3
 800c3e6:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 800c3ee:	e086      	b.n	800c4fe <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 800c3f6:	f107 0314 	add.w	r3, r7, #20
 800c3fa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c3fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c3fe:	f7ff fcdf 	bl	800bdc0 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 800c402:	697b      	ldr	r3, [r7, #20]
 800c404:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c408:	d103      	bne.n	800c412 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800c40a:	23ce      	movs	r3, #206	; 0xce
 800c40c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 800c410:	e07e      	b.n	800c510 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 800c412:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800c416:	697a      	ldr	r2, [r7, #20]
 800c418:	4413      	add	r3, r2
 800c41a:	4618      	mov	r0, r3
 800c41c:	f7ff fd2e 	bl	800be7c <is_aperture>
 800c420:	4603      	mov	r3, r0
 800c422:	461a      	mov	r2, r3
 800c424:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c426:	4293      	cmp	r3, r2
 800c428:	d003      	beq.n	800c432 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 800c42a:	2301      	movs	r3, #1
 800c42c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 800c430:	e06e      	b.n	800c510 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 800c432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c434:	3301      	adds	r3, #1
 800c436:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 800c438:	697b      	ldr	r3, [r7, #20]
 800c43a:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 800c442:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c444:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c446:	4618      	mov	r0, r3
 800c448:	f7ff fd32 	bl	800beb0 <enable_spad_bit>
 800c44c:	4603      	mov	r3, r0
 800c44e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800c452:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800c456:	2b00      	cmp	r3, #0
 800c458:	d10c      	bne.n	800c474 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 800c45a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c45c:	3301      	adds	r3, #1
 800c45e:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 800c466:	4619      	mov	r1, r3
 800c468:	68f8      	ldr	r0, [r7, #12]
 800c46a:	f7ff fd59 	bl	800bf20 <set_ref_spad_map>
 800c46e:	4603      	mov	r3, r0
 800c470:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 800c474:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d146      	bne.n	800c50a <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 800c47c:	f107 0312 	add.w	r3, r7, #18
 800c480:	4619      	mov	r1, r3
 800c482:	68f8      	ldr	r0, [r7, #12]
 800c484:	f7ff fdee 	bl	800c064 <perform_ref_signal_measurement>
 800c488:	4603      	mov	r3, r0
 800c48a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 800c48e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800c492:	2b00      	cmp	r3, #0
 800c494:	d13b      	bne.n	800c50e <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800c496:	8a7b      	ldrh	r3, [r7, #18]
 800c498:	461a      	mov	r2, r3
 800c49a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c49c:	1ad3      	subs	r3, r2, r3
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	bfb8      	it	lt
 800c4a2:	425b      	neglt	r3, r3
 800c4a4:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 800c4a6:	8a7b      	ldrh	r3, [r7, #18]
 800c4a8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c4aa:	429a      	cmp	r2, r3
 800c4ac:	d21c      	bcs.n	800c4e8 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 800c4ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c4b2:	429a      	cmp	r2, r3
 800c4b4:	d914      	bls.n	800c4e0 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 800c4b6:	f107 031c 	add.w	r3, r7, #28
 800c4ba:	4619      	mov	r1, r3
 800c4bc:	68f8      	ldr	r0, [r7, #12]
 800c4be:	f7ff fd2f 	bl	800bf20 <set_ref_spad_map>
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 800c4ce:	f107 011c 	add.w	r1, r7, #28
 800c4d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	f002 ff9f 	bl	800f418 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 800c4da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4dc:	3b01      	subs	r3, #1
 800c4de:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 800c4e0:	2301      	movs	r3, #1
 800c4e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4e6:	e00a      	b.n	800c4fe <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 800c4e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ea:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 800c4f2:	f107 031c 	add.w	r3, r7, #28
 800c4f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	f002 ff8d 	bl	800f418 <memcpy>
		while (!complete) {
 800c4fe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c502:	2b00      	cmp	r3, #0
 800c504:	f43f af74 	beq.w	800c3f0 <VL53L0X_perform_ref_spad_management+0x2b8>
 800c508:	e002      	b.n	800c510 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800c50a:	bf00      	nop
 800c50c:	e000      	b.n	800c510 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800c50e:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800c510:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800c514:	2b00      	cmp	r3, #0
 800c516:	d115      	bne.n	800c544 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 800c518:	68bb      	ldr	r3, [r7, #8]
 800c51a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c51c:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800c524:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	2201      	movs	r2, #1
 800c52a:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c52e:	68bb      	ldr	r3, [r7, #8]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	b2da      	uxtb	r2, r3
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	781a      	ldrb	r2, [r3, #0]
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 800c544:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800c548:	4618      	mov	r0, r3
 800c54a:	375c      	adds	r7, #92	; 0x5c
 800c54c:	46bd      	mov	sp, r7
 800c54e:	bd90      	pop	{r4, r7, pc}

0800c550 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 800c550:	b590      	push	{r4, r7, lr}
 800c552:	b093      	sub	sp, #76	; 0x4c
 800c554:	af06      	add	r7, sp, #24
 800c556:	60f8      	str	r0, [r7, #12]
 800c558:	60b9      	str	r1, [r7, #8]
 800c55a:	4613      	mov	r3, r2
 800c55c:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c55e:	2300      	movs	r3, #0
 800c560:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 800c564:	2300      	movs	r3, #0
 800c566:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 800c568:	23b4      	movs	r3, #180	; 0xb4
 800c56a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 800c56e:	2306      	movs	r3, #6
 800c570:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800c572:	232c      	movs	r3, #44	; 0x2c
 800c574:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c576:	2201      	movs	r2, #1
 800c578:	21ff      	movs	r1, #255	; 0xff
 800c57a:	68f8      	ldr	r0, [r7, #12]
 800c57c:	f002 fdf2 	bl	800f164 <VL53L0X_WrByte>
 800c580:	4603      	mov	r3, r0
 800c582:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800c586:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d107      	bne.n	800c59e <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 800c58e:	2200      	movs	r2, #0
 800c590:	214f      	movs	r1, #79	; 0x4f
 800c592:	68f8      	ldr	r0, [r7, #12]
 800c594:	f002 fde6 	bl	800f164 <VL53L0X_WrByte>
 800c598:	4603      	mov	r3, r0
 800c59a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800c59e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d107      	bne.n	800c5b6 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 800c5a6:	222c      	movs	r2, #44	; 0x2c
 800c5a8:	214e      	movs	r1, #78	; 0x4e
 800c5aa:	68f8      	ldr	r0, [r7, #12]
 800c5ac:	f002 fdda 	bl	800f164 <VL53L0X_WrByte>
 800c5b0:	4603      	mov	r3, r0
 800c5b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800c5b6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d107      	bne.n	800c5ce <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c5be:	2200      	movs	r2, #0
 800c5c0:	21ff      	movs	r1, #255	; 0xff
 800c5c2:	68f8      	ldr	r0, [r7, #12]
 800c5c4:	f002 fdce 	bl	800f164 <VL53L0X_WrByte>
 800c5c8:	4603      	mov	r3, r0
 800c5ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800c5ce:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d109      	bne.n	800c5ea <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 800c5d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c5da:	461a      	mov	r2, r3
 800c5dc:	21b6      	movs	r1, #182	; 0xb6
 800c5de:	68f8      	ldr	r0, [r7, #12]
 800c5e0:	f002 fdc0 	bl	800f164 <VL53L0X_WrByte>
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	627b      	str	r3, [r7, #36]	; 0x24
 800c5ee:	e009      	b.n	800c604 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800c5f0:	68fa      	ldr	r2, [r7, #12]
 800c5f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5f4:	4413      	add	r3, r2
 800c5f6:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800c5fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c600:	3301      	adds	r3, #1
 800c602:	627b      	str	r3, [r7, #36]	; 0x24
 800c604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c606:	69fb      	ldr	r3, [r7, #28]
 800c608:	429a      	cmp	r2, r3
 800c60a:	d3f1      	bcc.n	800c5f0 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 800c60c:	79fb      	ldrb	r3, [r7, #7]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d011      	beq.n	800c636 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800c612:	e002      	b.n	800c61a <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 800c614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c616:	3301      	adds	r3, #1
 800c618:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800c61a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800c61e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c620:	4413      	add	r3, r2
 800c622:	4618      	mov	r0, r3
 800c624:	f7ff fc2a 	bl	800be7c <is_aperture>
 800c628:	4603      	mov	r3, r0
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d103      	bne.n	800c636 <VL53L0X_set_reference_spads+0xe6>
 800c62e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c630:	69bb      	ldr	r3, [r7, #24]
 800c632:	429a      	cmp	r2, r3
 800c634:	d3ee      	bcc.n	800c614 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 800c642:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c646:	79f9      	ldrb	r1, [r7, #7]
 800c648:	f107 0214 	add.w	r2, r7, #20
 800c64c:	9204      	str	r2, [sp, #16]
 800c64e:	68ba      	ldr	r2, [r7, #8]
 800c650:	9203      	str	r2, [sp, #12]
 800c652:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c654:	9202      	str	r2, [sp, #8]
 800c656:	9301      	str	r3, [sp, #4]
 800c658:	69fb      	ldr	r3, [r7, #28]
 800c65a:	9300      	str	r3, [sp, #0]
 800c65c:	4623      	mov	r3, r4
 800c65e:	4602      	mov	r2, r0
 800c660:	68f8      	ldr	r0, [r7, #12]
 800c662:	f7ff fc83 	bl	800bf6c <enable_ref_spads>
 800c666:	4603      	mov	r3, r0
 800c668:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 800c66c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c670:	2b00      	cmp	r3, #0
 800c672:	d10c      	bne.n	800c68e <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	2201      	movs	r2, #1
 800c678:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c67c:	68bb      	ldr	r3, [r7, #8]
 800c67e:	b2da      	uxtb	r2, r3
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	79fa      	ldrb	r2, [r7, #7]
 800c68a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800c68e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800c692:	4618      	mov	r0, r3
 800c694:	3734      	adds	r7, #52	; 0x34
 800c696:	46bd      	mov	sp, r7
 800c698:	bd90      	pop	{r4, r7, pc}

0800c69a <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 800c69a:	b580      	push	{r7, lr}
 800c69c:	b084      	sub	sp, #16
 800c69e:	af00      	add	r7, sp, #0
 800c6a0:	6078      	str	r0, [r7, #4]
 800c6a2:	460b      	mov	r3, r1
 800c6a4:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800c6aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d10a      	bne.n	800c6c8 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800c6b2:	78fb      	ldrb	r3, [r7, #3]
 800c6b4:	f043 0301 	orr.w	r3, r3, #1
 800c6b8:	b2db      	uxtb	r3, r3
 800c6ba:	461a      	mov	r2, r3
 800c6bc:	2100      	movs	r1, #0
 800c6be:	6878      	ldr	r0, [r7, #4]
 800c6c0:	f002 fd50 	bl	800f164 <VL53L0X_WrByte>
 800c6c4:	4603      	mov	r3, r0
 800c6c6:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 800c6c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d104      	bne.n	800c6da <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800c6d0:	6878      	ldr	r0, [r7, #4]
 800c6d2:	f000 f9bf 	bl	800ca54 <VL53L0X_measurement_poll_for_completion>
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800c6da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d105      	bne.n	800c6ee <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800c6e2:	2100      	movs	r1, #0
 800c6e4:	6878      	ldr	r0, [r7, #4]
 800c6e6:	f7ff fa85 	bl	800bbf4 <VL53L0X_ClearInterruptMask>
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800c6ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d106      	bne.n	800c704 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	2100      	movs	r1, #0
 800c6fa:	6878      	ldr	r0, [r7, #4]
 800c6fc:	f002 fd32 	bl	800f164 <VL53L0X_WrByte>
 800c700:	4603      	mov	r3, r0
 800c702:	73fb      	strb	r3, [r7, #15]

	return Status;
 800c704:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c708:	4618      	mov	r0, r3
 800c70a:	3710      	adds	r7, #16
 800c70c:	46bd      	mov	sp, r7
 800c70e:	bd80      	pop	{r7, pc}

0800c710 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b084      	sub	sp, #16
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
 800c718:	4608      	mov	r0, r1
 800c71a:	4611      	mov	r1, r2
 800c71c:	461a      	mov	r2, r3
 800c71e:	4603      	mov	r3, r0
 800c720:	70fb      	strb	r3, [r7, #3]
 800c722:	460b      	mov	r3, r1
 800c724:	70bb      	strb	r3, [r7, #2]
 800c726:	4613      	mov	r3, r2
 800c728:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c72a:	2300      	movs	r3, #0
 800c72c:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 800c72e:	2300      	movs	r3, #0
 800c730:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c732:	2201      	movs	r2, #1
 800c734:	21ff      	movs	r1, #255	; 0xff
 800c736:	6878      	ldr	r0, [r7, #4]
 800c738:	f002 fd14 	bl	800f164 <VL53L0X_WrByte>
 800c73c:	4603      	mov	r3, r0
 800c73e:	461a      	mov	r2, r3
 800c740:	7bfb      	ldrb	r3, [r7, #15]
 800c742:	4313      	orrs	r3, r2
 800c744:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800c746:	2200      	movs	r2, #0
 800c748:	2100      	movs	r1, #0
 800c74a:	6878      	ldr	r0, [r7, #4]
 800c74c:	f002 fd0a 	bl	800f164 <VL53L0X_WrByte>
 800c750:	4603      	mov	r3, r0
 800c752:	461a      	mov	r2, r3
 800c754:	7bfb      	ldrb	r3, [r7, #15]
 800c756:	4313      	orrs	r3, r2
 800c758:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c75a:	2200      	movs	r2, #0
 800c75c:	21ff      	movs	r1, #255	; 0xff
 800c75e:	6878      	ldr	r0, [r7, #4]
 800c760:	f002 fd00 	bl	800f164 <VL53L0X_WrByte>
 800c764:	4603      	mov	r3, r0
 800c766:	461a      	mov	r2, r3
 800c768:	7bfb      	ldrb	r3, [r7, #15]
 800c76a:	4313      	orrs	r3, r2
 800c76c:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 800c76e:	78fb      	ldrb	r3, [r7, #3]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d01e      	beq.n	800c7b2 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 800c774:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d009      	beq.n	800c790 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 800c77c:	69ba      	ldr	r2, [r7, #24]
 800c77e:	21cb      	movs	r1, #203	; 0xcb
 800c780:	6878      	ldr	r0, [r7, #4]
 800c782:	f002 fd71 	bl	800f268 <VL53L0X_RdByte>
 800c786:	4603      	mov	r3, r0
 800c788:	461a      	mov	r2, r3
 800c78a:	7bfb      	ldrb	r3, [r7, #15]
 800c78c:	4313      	orrs	r3, r2
 800c78e:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800c790:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c794:	2b00      	cmp	r3, #0
 800c796:	d02a      	beq.n	800c7ee <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800c798:	f107 030e 	add.w	r3, r7, #14
 800c79c:	461a      	mov	r2, r3
 800c79e:	21ee      	movs	r1, #238	; 0xee
 800c7a0:	6878      	ldr	r0, [r7, #4]
 800c7a2:	f002 fd61 	bl	800f268 <VL53L0X_RdByte>
 800c7a6:	4603      	mov	r3, r0
 800c7a8:	461a      	mov	r2, r3
 800c7aa:	7bfb      	ldrb	r3, [r7, #15]
 800c7ac:	4313      	orrs	r3, r2
 800c7ae:	73fb      	strb	r3, [r7, #15]
 800c7b0:	e01d      	b.n	800c7ee <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800c7b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d00a      	beq.n	800c7d0 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800c7ba:	78bb      	ldrb	r3, [r7, #2]
 800c7bc:	461a      	mov	r2, r3
 800c7be:	21cb      	movs	r1, #203	; 0xcb
 800c7c0:	6878      	ldr	r0, [r7, #4]
 800c7c2:	f002 fccf 	bl	800f164 <VL53L0X_WrByte>
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	461a      	mov	r2, r3
 800c7ca:	7bfb      	ldrb	r3, [r7, #15]
 800c7cc:	4313      	orrs	r3, r2
 800c7ce:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800c7d0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d00a      	beq.n	800c7ee <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800c7d8:	787b      	ldrb	r3, [r7, #1]
 800c7da:	2280      	movs	r2, #128	; 0x80
 800c7dc:	21ee      	movs	r1, #238	; 0xee
 800c7de:	6878      	ldr	r0, [r7, #4]
 800c7e0:	f002 fd0e 	bl	800f200 <VL53L0X_UpdateByte>
 800c7e4:	4603      	mov	r3, r0
 800c7e6:	461a      	mov	r2, r3
 800c7e8:	7bfb      	ldrb	r3, [r7, #15]
 800c7ea:	4313      	orrs	r3, r2
 800c7ec:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c7ee:	2201      	movs	r2, #1
 800c7f0:	21ff      	movs	r1, #255	; 0xff
 800c7f2:	6878      	ldr	r0, [r7, #4]
 800c7f4:	f002 fcb6 	bl	800f164 <VL53L0X_WrByte>
 800c7f8:	4603      	mov	r3, r0
 800c7fa:	461a      	mov	r2, r3
 800c7fc:	7bfb      	ldrb	r3, [r7, #15]
 800c7fe:	4313      	orrs	r3, r2
 800c800:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800c802:	2201      	movs	r2, #1
 800c804:	2100      	movs	r1, #0
 800c806:	6878      	ldr	r0, [r7, #4]
 800c808:	f002 fcac 	bl	800f164 <VL53L0X_WrByte>
 800c80c:	4603      	mov	r3, r0
 800c80e:	461a      	mov	r2, r3
 800c810:	7bfb      	ldrb	r3, [r7, #15]
 800c812:	4313      	orrs	r3, r2
 800c814:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c816:	2200      	movs	r2, #0
 800c818:	21ff      	movs	r1, #255	; 0xff
 800c81a:	6878      	ldr	r0, [r7, #4]
 800c81c:	f002 fca2 	bl	800f164 <VL53L0X_WrByte>
 800c820:	4603      	mov	r3, r0
 800c822:	461a      	mov	r2, r3
 800c824:	7bfb      	ldrb	r3, [r7, #15]
 800c826:	4313      	orrs	r3, r2
 800c828:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800c82a:	7bbb      	ldrb	r3, [r7, #14]
 800c82c:	f023 0310 	bic.w	r3, r3, #16
 800c830:	b2da      	uxtb	r2, r3
 800c832:	69fb      	ldr	r3, [r7, #28]
 800c834:	701a      	strb	r2, [r3, #0]

	return Status;
 800c836:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c83a:	4618      	mov	r0, r3
 800c83c:	3710      	adds	r7, #16
 800c83e:	46bd      	mov	sp, r7
 800c840:	bd80      	pop	{r7, pc}

0800c842 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800c842:	b580      	push	{r7, lr}
 800c844:	b08a      	sub	sp, #40	; 0x28
 800c846:	af04      	add	r7, sp, #16
 800c848:	60f8      	str	r0, [r7, #12]
 800c84a:	60b9      	str	r1, [r7, #8]
 800c84c:	4611      	mov	r1, r2
 800c84e:	461a      	mov	r2, r3
 800c850:	460b      	mov	r3, r1
 800c852:	71fb      	strb	r3, [r7, #7]
 800c854:	4613      	mov	r3, r2
 800c856:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c858:	2300      	movs	r3, #0
 800c85a:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800c85c:	2300      	movs	r3, #0
 800c85e:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800c860:	2300      	movs	r3, #0
 800c862:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800c864:	2300      	movs	r3, #0
 800c866:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 800c868:	2300      	movs	r3, #0
 800c86a:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800c86c:	79bb      	ldrb	r3, [r7, #6]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d003      	beq.n	800c87a <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800c878:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800c87a:	2201      	movs	r2, #1
 800c87c:	2101      	movs	r1, #1
 800c87e:	68f8      	ldr	r0, [r7, #12]
 800c880:	f002 fc70 	bl	800f164 <VL53L0X_WrByte>
 800c884:	4603      	mov	r3, r0
 800c886:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800c888:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d105      	bne.n	800c89c <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 800c890:	2140      	movs	r1, #64	; 0x40
 800c892:	68f8      	ldr	r0, [r7, #12]
 800c894:	f7ff ff01 	bl	800c69a <VL53L0X_perform_single_ref_calibration>
 800c898:	4603      	mov	r3, r0
 800c89a:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800c89c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d115      	bne.n	800c8d0 <VL53L0X_perform_vhv_calibration+0x8e>
 800c8a4:	79fb      	ldrb	r3, [r7, #7]
 800c8a6:	2b01      	cmp	r3, #1
 800c8a8:	d112      	bne.n	800c8d0 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800c8aa:	7d39      	ldrb	r1, [r7, #20]
 800c8ac:	7d7a      	ldrb	r2, [r7, #21]
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	9303      	str	r3, [sp, #12]
 800c8b2:	2301      	movs	r3, #1
 800c8b4:	9302      	str	r3, [sp, #8]
 800c8b6:	f107 0313 	add.w	r3, r7, #19
 800c8ba:	9301      	str	r3, [sp, #4]
 800c8bc:	68bb      	ldr	r3, [r7, #8]
 800c8be:	9300      	str	r3, [sp, #0]
 800c8c0:	460b      	mov	r3, r1
 800c8c2:	2101      	movs	r1, #1
 800c8c4:	68f8      	ldr	r0, [r7, #12]
 800c8c6:	f7ff ff23 	bl	800c710 <VL53L0X_ref_calibration_io>
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	75fb      	strb	r3, [r7, #23]
 800c8ce:	e002      	b.n	800c8d6 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 800c8d0:	68bb      	ldr	r3, [r7, #8]
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800c8d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d112      	bne.n	800c904 <VL53L0X_perform_vhv_calibration+0xc2>
 800c8de:	79bb      	ldrb	r3, [r7, #6]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d00f      	beq.n	800c904 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800c8e4:	7dbb      	ldrb	r3, [r7, #22]
 800c8e6:	461a      	mov	r2, r3
 800c8e8:	2101      	movs	r1, #1
 800c8ea:	68f8      	ldr	r0, [r7, #12]
 800c8ec:	f002 fc3a 	bl	800f164 <VL53L0X_WrByte>
 800c8f0:	4603      	mov	r3, r0
 800c8f2:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800c8f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d103      	bne.n	800c904 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	7dba      	ldrb	r2, [r7, #22]
 800c900:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800c904:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c908:	4618      	mov	r0, r3
 800c90a:	3718      	adds	r7, #24
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bd80      	pop	{r7, pc}

0800c910 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b08a      	sub	sp, #40	; 0x28
 800c914:	af04      	add	r7, sp, #16
 800c916:	60f8      	str	r0, [r7, #12]
 800c918:	60b9      	str	r1, [r7, #8]
 800c91a:	4611      	mov	r1, r2
 800c91c:	461a      	mov	r2, r3
 800c91e:	460b      	mov	r3, r1
 800c920:	71fb      	strb	r3, [r7, #7]
 800c922:	4613      	mov	r3, r2
 800c924:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c926:	2300      	movs	r3, #0
 800c928:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800c92a:	2300      	movs	r3, #0
 800c92c:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800c92e:	2300      	movs	r3, #0
 800c930:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800c932:	2300      	movs	r3, #0
 800c934:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800c936:	79bb      	ldrb	r3, [r7, #6]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d003      	beq.n	800c944 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800c942:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800c944:	2202      	movs	r2, #2
 800c946:	2101      	movs	r1, #1
 800c948:	68f8      	ldr	r0, [r7, #12]
 800c94a:	f002 fc0b 	bl	800f164 <VL53L0X_WrByte>
 800c94e:	4603      	mov	r3, r0
 800c950:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800c952:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d105      	bne.n	800c966 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800c95a:	2100      	movs	r1, #0
 800c95c:	68f8      	ldr	r0, [r7, #12]
 800c95e:	f7ff fe9c 	bl	800c69a <VL53L0X_perform_single_ref_calibration>
 800c962:	4603      	mov	r3, r0
 800c964:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800c966:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d115      	bne.n	800c99a <VL53L0X_perform_phase_calibration+0x8a>
 800c96e:	79fb      	ldrb	r3, [r7, #7]
 800c970:	2b01      	cmp	r3, #1
 800c972:	d112      	bne.n	800c99a <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800c974:	7d39      	ldrb	r1, [r7, #20]
 800c976:	7d7a      	ldrb	r2, [r7, #21]
 800c978:	2301      	movs	r3, #1
 800c97a:	9303      	str	r3, [sp, #12]
 800c97c:	2300      	movs	r3, #0
 800c97e:	9302      	str	r3, [sp, #8]
 800c980:	68bb      	ldr	r3, [r7, #8]
 800c982:	9301      	str	r3, [sp, #4]
 800c984:	f107 0313 	add.w	r3, r7, #19
 800c988:	9300      	str	r3, [sp, #0]
 800c98a:	460b      	mov	r3, r1
 800c98c:	2101      	movs	r1, #1
 800c98e:	68f8      	ldr	r0, [r7, #12]
 800c990:	f7ff febe 	bl	800c710 <VL53L0X_ref_calibration_io>
 800c994:	4603      	mov	r3, r0
 800c996:	75fb      	strb	r3, [r7, #23]
 800c998:	e002      	b.n	800c9a0 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800c99a:	68bb      	ldr	r3, [r7, #8]
 800c99c:	2200      	movs	r2, #0
 800c99e:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800c9a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d112      	bne.n	800c9ce <VL53L0X_perform_phase_calibration+0xbe>
 800c9a8:	79bb      	ldrb	r3, [r7, #6]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d00f      	beq.n	800c9ce <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800c9ae:	7dbb      	ldrb	r3, [r7, #22]
 800c9b0:	461a      	mov	r2, r3
 800c9b2:	2101      	movs	r1, #1
 800c9b4:	68f8      	ldr	r0, [r7, #12]
 800c9b6:	f002 fbd5 	bl	800f164 <VL53L0X_WrByte>
 800c9ba:	4603      	mov	r3, r0
 800c9bc:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800c9be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d103      	bne.n	800c9ce <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	7dba      	ldrb	r2, [r7, #22]
 800c9ca:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800c9ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	3718      	adds	r7, #24
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	bd80      	pop	{r7, pc}

0800c9da <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800c9da:	b580      	push	{r7, lr}
 800c9dc:	b086      	sub	sp, #24
 800c9de:	af00      	add	r7, sp, #0
 800c9e0:	60f8      	str	r0, [r7, #12]
 800c9e2:	60b9      	str	r1, [r7, #8]
 800c9e4:	607a      	str	r2, [r7, #4]
 800c9e6:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800c9f6:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 800c9f8:	78fa      	ldrb	r2, [r7, #3]
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	68b9      	ldr	r1, [r7, #8]
 800c9fe:	68f8      	ldr	r0, [r7, #12]
 800ca00:	f7ff ff1f 	bl	800c842 <VL53L0X_perform_vhv_calibration>
 800ca04:	4603      	mov	r3, r0
 800ca06:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800ca08:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d107      	bne.n	800ca20 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 800ca10:	78fa      	ldrb	r2, [r7, #3]
 800ca12:	2300      	movs	r3, #0
 800ca14:	6879      	ldr	r1, [r7, #4]
 800ca16:	68f8      	ldr	r0, [r7, #12]
 800ca18:	f7ff ff7a 	bl	800c910 <VL53L0X_perform_phase_calibration>
 800ca1c:	4603      	mov	r3, r0
 800ca1e:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 800ca20:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d10f      	bne.n	800ca48 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800ca28:	7dbb      	ldrb	r3, [r7, #22]
 800ca2a:	461a      	mov	r2, r3
 800ca2c:	2101      	movs	r1, #1
 800ca2e:	68f8      	ldr	r0, [r7, #12]
 800ca30:	f002 fb98 	bl	800f164 <VL53L0X_WrByte>
 800ca34:	4603      	mov	r3, r0
 800ca36:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800ca38:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d103      	bne.n	800ca48 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	7dba      	ldrb	r2, [r7, #22]
 800ca44:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800ca48:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	3718      	adds	r7, #24
 800ca50:	46bd      	mov	sp, r7
 800ca52:	bd80      	pop	{r7, pc}

0800ca54 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b086      	sub	sp, #24
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 800ca60:	2300      	movs	r3, #0
 800ca62:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 800ca64:	2300      	movs	r3, #0
 800ca66:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800ca68:	f107 030f 	add.w	r3, r7, #15
 800ca6c:	4619      	mov	r1, r3
 800ca6e:	6878      	ldr	r0, [r7, #4]
 800ca70:	f7fe fdd2 	bl	800b618 <VL53L0X_GetMeasurementDataReady>
 800ca74:	4603      	mov	r3, r0
 800ca76:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 800ca78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d110      	bne.n	800caa2 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 800ca80:	7bfb      	ldrb	r3, [r7, #15]
 800ca82:	2b01      	cmp	r3, #1
 800ca84:	d00f      	beq.n	800caa6 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 800ca86:	693b      	ldr	r3, [r7, #16]
 800ca88:	3301      	adds	r3, #1
 800ca8a:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800ca8c:	693b      	ldr	r3, [r7, #16]
 800ca8e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800ca92:	d302      	bcc.n	800ca9a <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 800ca94:	23f9      	movs	r3, #249	; 0xf9
 800ca96:	75fb      	strb	r3, [r7, #23]
			break;
 800ca98:	e006      	b.n	800caa8 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 800ca9a:	6878      	ldr	r0, [r7, #4]
 800ca9c:	f002 fc82 	bl	800f3a4 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800caa0:	e7e2      	b.n	800ca68 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800caa2:	bf00      	nop
 800caa4:	e000      	b.n	800caa8 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 800caa6:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 800caa8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800caac:	4618      	mov	r0, r3
 800caae:	3718      	adds	r7, #24
 800cab0:	46bd      	mov	sp, r7
 800cab2:	bd80      	pop	{r7, pc}

0800cab4 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800cab4:	b480      	push	{r7}
 800cab6:	b085      	sub	sp, #20
 800cab8:	af00      	add	r7, sp, #0
 800caba:	4603      	mov	r3, r0
 800cabc:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800cabe:	2300      	movs	r3, #0
 800cac0:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800cac2:	79fb      	ldrb	r3, [r7, #7]
 800cac4:	3301      	adds	r3, #1
 800cac6:	b2db      	uxtb	r3, r3
 800cac8:	005b      	lsls	r3, r3, #1
 800caca:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800cacc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cace:	4618      	mov	r0, r3
 800cad0:	3714      	adds	r7, #20
 800cad2:	46bd      	mov	sp, r7
 800cad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad8:	4770      	bx	lr

0800cada <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 800cada:	b480      	push	{r7}
 800cadc:	b085      	sub	sp, #20
 800cade:	af00      	add	r7, sp, #0
 800cae0:	4603      	mov	r3, r0
 800cae2:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 800cae4:	2300      	movs	r3, #0
 800cae6:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 800cae8:	79fb      	ldrb	r3, [r7, #7]
 800caea:	085b      	lsrs	r3, r3, #1
 800caec:	b2db      	uxtb	r3, r3
 800caee:	3b01      	subs	r3, #1
 800caf0:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 800caf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800caf4:	4618      	mov	r0, r3
 800caf6:	3714      	adds	r7, #20
 800caf8:	46bd      	mov	sp, r7
 800cafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafe:	4770      	bx	lr

0800cb00 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800cb00:	b480      	push	{r7}
 800cb02:	b085      	sub	sp, #20
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 800cb08:	2300      	movs	r3, #0
 800cb0a:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800cb0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cb10:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800cb12:	e002      	b.n	800cb1a <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800cb14:	68bb      	ldr	r3, [r7, #8]
 800cb16:	089b      	lsrs	r3, r3, #2
 800cb18:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800cb1a:	68ba      	ldr	r2, [r7, #8]
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	429a      	cmp	r2, r3
 800cb20:	d8f8      	bhi.n	800cb14 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800cb22:	e017      	b.n	800cb54 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800cb24:	68fa      	ldr	r2, [r7, #12]
 800cb26:	68bb      	ldr	r3, [r7, #8]
 800cb28:	4413      	add	r3, r2
 800cb2a:	687a      	ldr	r2, [r7, #4]
 800cb2c:	429a      	cmp	r2, r3
 800cb2e:	d30b      	bcc.n	800cb48 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 800cb30:	68fa      	ldr	r2, [r7, #12]
 800cb32:	68bb      	ldr	r3, [r7, #8]
 800cb34:	4413      	add	r3, r2
 800cb36:	687a      	ldr	r2, [r7, #4]
 800cb38:	1ad3      	subs	r3, r2, r3
 800cb3a:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	085b      	lsrs	r3, r3, #1
 800cb40:	68ba      	ldr	r2, [r7, #8]
 800cb42:	4413      	add	r3, r2
 800cb44:	60fb      	str	r3, [r7, #12]
 800cb46:	e002      	b.n	800cb4e <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	085b      	lsrs	r3, r3, #1
 800cb4c:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800cb4e:	68bb      	ldr	r3, [r7, #8]
 800cb50:	089b      	lsrs	r3, r3, #2
 800cb52:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800cb54:	68bb      	ldr	r3, [r7, #8]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d1e4      	bne.n	800cb24 <VL53L0X_isqrt+0x24>
	}

	return res;
 800cb5a:	68fb      	ldr	r3, [r7, #12]
}
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	3714      	adds	r7, #20
 800cb60:	46bd      	mov	sp, r7
 800cb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb66:	4770      	bx	lr

0800cb68 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b086      	sub	sp, #24
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cb70:	2300      	movs	r3, #0
 800cb72:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 800cb74:	2200      	movs	r2, #0
 800cb76:	2183      	movs	r1, #131	; 0x83
 800cb78:	6878      	ldr	r0, [r7, #4]
 800cb7a:	f002 faf3 	bl	800f164 <VL53L0X_WrByte>
 800cb7e:	4603      	mov	r3, r0
 800cb80:	461a      	mov	r2, r3
 800cb82:	7dfb      	ldrb	r3, [r7, #23]
 800cb84:	4313      	orrs	r3, r2
 800cb86:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 800cb88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d11e      	bne.n	800cbce <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 800cb90:	2300      	movs	r3, #0
 800cb92:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 800cb94:	f107 030f 	add.w	r3, r7, #15
 800cb98:	461a      	mov	r2, r3
 800cb9a:	2183      	movs	r1, #131	; 0x83
 800cb9c:	6878      	ldr	r0, [r7, #4]
 800cb9e:	f002 fb63 	bl	800f268 <VL53L0X_RdByte>
 800cba2:	4603      	mov	r3, r0
 800cba4:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800cba6:	7bfb      	ldrb	r3, [r7, #15]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d10a      	bne.n	800cbc2 <VL53L0X_device_read_strobe+0x5a>
 800cbac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d106      	bne.n	800cbc2 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 800cbb4:	693b      	ldr	r3, [r7, #16]
 800cbb6:	3301      	adds	r3, #1
 800cbb8:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800cbba:	693b      	ldr	r3, [r7, #16]
 800cbbc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800cbc0:	d3e8      	bcc.n	800cb94 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800cbc2:	693b      	ldr	r3, [r7, #16]
 800cbc4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800cbc8:	d301      	bcc.n	800cbce <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800cbca:	23f9      	movs	r3, #249	; 0xf9
 800cbcc:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800cbce:	2201      	movs	r2, #1
 800cbd0:	2183      	movs	r1, #131	; 0x83
 800cbd2:	6878      	ldr	r0, [r7, #4]
 800cbd4:	f002 fac6 	bl	800f164 <VL53L0X_WrByte>
 800cbd8:	4603      	mov	r3, r0
 800cbda:	461a      	mov	r2, r3
 800cbdc:	7dfb      	ldrb	r3, [r7, #23]
 800cbde:	4313      	orrs	r3, r2
 800cbe0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800cbe2:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	3718      	adds	r7, #24
 800cbea:	46bd      	mov	sp, r7
 800cbec:	bd80      	pop	{r7, pc}

0800cbee <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800cbee:	b580      	push	{r7, lr}
 800cbf0:	b098      	sub	sp, #96	; 0x60
 800cbf2:	af00      	add	r7, sp, #0
 800cbf4:	6078      	str	r0, [r7, #4]
 800cbf6:	460b      	mov	r3, r1
 800cbf8:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 800cc00:	2300      	movs	r3, #0
 800cc02:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 800cc06:	2300      	movs	r3, #0
 800cc08:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 800cc10:	2300      	movs	r3, #0
 800cc12:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800cc14:	2300      	movs	r3, #0
 800cc16:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 800cc18:	2300      	movs	r3, #0
 800cc1a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800cc1e:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800cc22:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800cc24:	2300      	movs	r3, #0
 800cc26:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800cc28:	2300      	movs	r3, #0
 800cc2a:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800cc36:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 800cc3a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cc3e:	2b07      	cmp	r3, #7
 800cc40:	f000 8408 	beq.w	800d454 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800cc44:	2201      	movs	r2, #1
 800cc46:	2180      	movs	r1, #128	; 0x80
 800cc48:	6878      	ldr	r0, [r7, #4]
 800cc4a:	f002 fa8b 	bl	800f164 <VL53L0X_WrByte>
 800cc4e:	4603      	mov	r3, r0
 800cc50:	461a      	mov	r2, r3
 800cc52:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cc56:	4313      	orrs	r3, r2
 800cc58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800cc5c:	2201      	movs	r2, #1
 800cc5e:	21ff      	movs	r1, #255	; 0xff
 800cc60:	6878      	ldr	r0, [r7, #4]
 800cc62:	f002 fa7f 	bl	800f164 <VL53L0X_WrByte>
 800cc66:	4603      	mov	r3, r0
 800cc68:	461a      	mov	r2, r3
 800cc6a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cc6e:	4313      	orrs	r3, r2
 800cc70:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800cc74:	2200      	movs	r2, #0
 800cc76:	2100      	movs	r1, #0
 800cc78:	6878      	ldr	r0, [r7, #4]
 800cc7a:	f002 fa73 	bl	800f164 <VL53L0X_WrByte>
 800cc7e:	4603      	mov	r3, r0
 800cc80:	461a      	mov	r2, r3
 800cc82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cc86:	4313      	orrs	r3, r2
 800cc88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800cc8c:	2206      	movs	r2, #6
 800cc8e:	21ff      	movs	r1, #255	; 0xff
 800cc90:	6878      	ldr	r0, [r7, #4]
 800cc92:	f002 fa67 	bl	800f164 <VL53L0X_WrByte>
 800cc96:	4603      	mov	r3, r0
 800cc98:	461a      	mov	r2, r3
 800cc9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cc9e:	4313      	orrs	r3, r2
 800cca0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800cca4:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800cca8:	461a      	mov	r2, r3
 800ccaa:	2183      	movs	r1, #131	; 0x83
 800ccac:	6878      	ldr	r0, [r7, #4]
 800ccae:	f002 fadb 	bl	800f268 <VL53L0X_RdByte>
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	461a      	mov	r2, r3
 800ccb6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ccba:	4313      	orrs	r3, r2
 800ccbc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800ccc0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ccc4:	f043 0304 	orr.w	r3, r3, #4
 800ccc8:	b2db      	uxtb	r3, r3
 800ccca:	461a      	mov	r2, r3
 800cccc:	2183      	movs	r1, #131	; 0x83
 800ccce:	6878      	ldr	r0, [r7, #4]
 800ccd0:	f002 fa48 	bl	800f164 <VL53L0X_WrByte>
 800ccd4:	4603      	mov	r3, r0
 800ccd6:	461a      	mov	r2, r3
 800ccd8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ccdc:	4313      	orrs	r3, r2
 800ccde:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800cce2:	2207      	movs	r2, #7
 800cce4:	21ff      	movs	r1, #255	; 0xff
 800cce6:	6878      	ldr	r0, [r7, #4]
 800cce8:	f002 fa3c 	bl	800f164 <VL53L0X_WrByte>
 800ccec:	4603      	mov	r3, r0
 800ccee:	461a      	mov	r2, r3
 800ccf0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ccf4:	4313      	orrs	r3, r2
 800ccf6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800ccfa:	2201      	movs	r2, #1
 800ccfc:	2181      	movs	r1, #129	; 0x81
 800ccfe:	6878      	ldr	r0, [r7, #4]
 800cd00:	f002 fa30 	bl	800f164 <VL53L0X_WrByte>
 800cd04:	4603      	mov	r3, r0
 800cd06:	461a      	mov	r2, r3
 800cd08:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cd0c:	4313      	orrs	r3, r2
 800cd0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800cd12:	6878      	ldr	r0, [r7, #4]
 800cd14:	f002 fb46 	bl	800f3a4 <VL53L0X_PollingDelay>
 800cd18:	4603      	mov	r3, r0
 800cd1a:	461a      	mov	r2, r3
 800cd1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cd20:	4313      	orrs	r3, r2
 800cd22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800cd26:	2201      	movs	r2, #1
 800cd28:	2180      	movs	r1, #128	; 0x80
 800cd2a:	6878      	ldr	r0, [r7, #4]
 800cd2c:	f002 fa1a 	bl	800f164 <VL53L0X_WrByte>
 800cd30:	4603      	mov	r3, r0
 800cd32:	461a      	mov	r2, r3
 800cd34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cd38:	4313      	orrs	r3, r2
 800cd3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 800cd3e:	78fb      	ldrb	r3, [r7, #3]
 800cd40:	f003 0301 	and.w	r3, r3, #1
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	f000 8098 	beq.w	800ce7a <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800cd4a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cd4e:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	f040 8091 	bne.w	800ce7a <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800cd58:	226b      	movs	r2, #107	; 0x6b
 800cd5a:	2194      	movs	r1, #148	; 0x94
 800cd5c:	6878      	ldr	r0, [r7, #4]
 800cd5e:	f002 fa01 	bl	800f164 <VL53L0X_WrByte>
 800cd62:	4603      	mov	r3, r0
 800cd64:	461a      	mov	r2, r3
 800cd66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cd6a:	4313      	orrs	r3, r2
 800cd6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800cd70:	6878      	ldr	r0, [r7, #4]
 800cd72:	f7ff fef9 	bl	800cb68 <VL53L0X_device_read_strobe>
 800cd76:	4603      	mov	r3, r0
 800cd78:	461a      	mov	r2, r3
 800cd7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cd7e:	4313      	orrs	r3, r2
 800cd80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800cd84:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cd88:	461a      	mov	r2, r3
 800cd8a:	2190      	movs	r1, #144	; 0x90
 800cd8c:	6878      	ldr	r0, [r7, #4]
 800cd8e:	f002 facd 	bl	800f32c <VL53L0X_RdDWord>
 800cd92:	4603      	mov	r3, r0
 800cd94:	461a      	mov	r2, r3
 800cd96:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cd9a:	4313      	orrs	r3, r2
 800cd9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 800cda0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cda2:	0a1b      	lsrs	r3, r3, #8
 800cda4:	b2db      	uxtb	r3, r3
 800cda6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cdaa:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800cdae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdb0:	0bdb      	lsrs	r3, r3, #15
 800cdb2:	b2db      	uxtb	r3, r3
 800cdb4:	f003 0301 	and.w	r3, r3, #1
 800cdb8:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800cdbc:	2224      	movs	r2, #36	; 0x24
 800cdbe:	2194      	movs	r1, #148	; 0x94
 800cdc0:	6878      	ldr	r0, [r7, #4]
 800cdc2:	f002 f9cf 	bl	800f164 <VL53L0X_WrByte>
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	461a      	mov	r2, r3
 800cdca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cdce:	4313      	orrs	r3, r2
 800cdd0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800cdd4:	6878      	ldr	r0, [r7, #4]
 800cdd6:	f7ff fec7 	bl	800cb68 <VL53L0X_device_read_strobe>
 800cdda:	4603      	mov	r3, r0
 800cddc:	461a      	mov	r2, r3
 800cdde:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cde2:	4313      	orrs	r3, r2
 800cde4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800cde8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cdec:	461a      	mov	r2, r3
 800cdee:	2190      	movs	r1, #144	; 0x90
 800cdf0:	6878      	ldr	r0, [r7, #4]
 800cdf2:	f002 fa9b 	bl	800f32c <VL53L0X_RdDWord>
 800cdf6:	4603      	mov	r3, r0
 800cdf8:	461a      	mov	r2, r3
 800cdfa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cdfe:	4313      	orrs	r3, r2
 800ce00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800ce04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce06:	0e1b      	lsrs	r3, r3, #24
 800ce08:	b2db      	uxtb	r3, r3
 800ce0a:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800ce0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce0e:	0c1b      	lsrs	r3, r3, #16
 800ce10:	b2db      	uxtb	r3, r3
 800ce12:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800ce14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce16:	0a1b      	lsrs	r3, r3, #8
 800ce18:	b2db      	uxtb	r3, r3
 800ce1a:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800ce1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce1e:	b2db      	uxtb	r3, r3
 800ce20:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800ce22:	2225      	movs	r2, #37	; 0x25
 800ce24:	2194      	movs	r1, #148	; 0x94
 800ce26:	6878      	ldr	r0, [r7, #4]
 800ce28:	f002 f99c 	bl	800f164 <VL53L0X_WrByte>
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	461a      	mov	r2, r3
 800ce30:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ce34:	4313      	orrs	r3, r2
 800ce36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ce3a:	6878      	ldr	r0, [r7, #4]
 800ce3c:	f7ff fe94 	bl	800cb68 <VL53L0X_device_read_strobe>
 800ce40:	4603      	mov	r3, r0
 800ce42:	461a      	mov	r2, r3
 800ce44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ce48:	4313      	orrs	r3, r2
 800ce4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800ce4e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ce52:	461a      	mov	r2, r3
 800ce54:	2190      	movs	r1, #144	; 0x90
 800ce56:	6878      	ldr	r0, [r7, #4]
 800ce58:	f002 fa68 	bl	800f32c <VL53L0X_RdDWord>
 800ce5c:	4603      	mov	r3, r0
 800ce5e:	461a      	mov	r2, r3
 800ce60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ce64:	4313      	orrs	r3, r2
 800ce66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800ce6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce6c:	0e1b      	lsrs	r3, r3, #24
 800ce6e:	b2db      	uxtb	r3, r3
 800ce70:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 800ce72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce74:	0c1b      	lsrs	r3, r3, #16
 800ce76:	b2db      	uxtb	r3, r3
 800ce78:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800ce7a:	78fb      	ldrb	r3, [r7, #3]
 800ce7c:	f003 0302 	and.w	r3, r3, #2
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	f000 8189 	beq.w	800d198 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800ce86:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ce8a:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	f040 8182 	bne.w	800d198 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800ce94:	2202      	movs	r2, #2
 800ce96:	2194      	movs	r1, #148	; 0x94
 800ce98:	6878      	ldr	r0, [r7, #4]
 800ce9a:	f002 f963 	bl	800f164 <VL53L0X_WrByte>
 800ce9e:	4603      	mov	r3, r0
 800cea0:	461a      	mov	r2, r3
 800cea2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cea6:	4313      	orrs	r3, r2
 800cea8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ceac:	6878      	ldr	r0, [r7, #4]
 800ceae:	f7ff fe5b 	bl	800cb68 <VL53L0X_device_read_strobe>
 800ceb2:	4603      	mov	r3, r0
 800ceb4:	461a      	mov	r2, r3
 800ceb6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ceba:	4313      	orrs	r3, r2
 800cebc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800cec0:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800cec4:	461a      	mov	r2, r3
 800cec6:	2190      	movs	r1, #144	; 0x90
 800cec8:	6878      	ldr	r0, [r7, #4]
 800ceca:	f002 f9cd 	bl	800f268 <VL53L0X_RdByte>
 800cece:	4603      	mov	r3, r0
 800ced0:	461a      	mov	r2, r3
 800ced2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ced6:	4313      	orrs	r3, r2
 800ced8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800cedc:	227b      	movs	r2, #123	; 0x7b
 800cede:	2194      	movs	r1, #148	; 0x94
 800cee0:	6878      	ldr	r0, [r7, #4]
 800cee2:	f002 f93f 	bl	800f164 <VL53L0X_WrByte>
 800cee6:	4603      	mov	r3, r0
 800cee8:	461a      	mov	r2, r3
 800ceea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ceee:	4313      	orrs	r3, r2
 800cef0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800cef4:	6878      	ldr	r0, [r7, #4]
 800cef6:	f7ff fe37 	bl	800cb68 <VL53L0X_device_read_strobe>
 800cefa:	4603      	mov	r3, r0
 800cefc:	461a      	mov	r2, r3
 800cefe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cf02:	4313      	orrs	r3, r2
 800cf04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800cf08:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800cf0c:	461a      	mov	r2, r3
 800cf0e:	2190      	movs	r1, #144	; 0x90
 800cf10:	6878      	ldr	r0, [r7, #4]
 800cf12:	f002 f9a9 	bl	800f268 <VL53L0X_RdByte>
 800cf16:	4603      	mov	r3, r0
 800cf18:	461a      	mov	r2, r3
 800cf1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cf1e:	4313      	orrs	r3, r2
 800cf20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800cf24:	2277      	movs	r2, #119	; 0x77
 800cf26:	2194      	movs	r1, #148	; 0x94
 800cf28:	6878      	ldr	r0, [r7, #4]
 800cf2a:	f002 f91b 	bl	800f164 <VL53L0X_WrByte>
 800cf2e:	4603      	mov	r3, r0
 800cf30:	461a      	mov	r2, r3
 800cf32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cf36:	4313      	orrs	r3, r2
 800cf38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800cf3c:	6878      	ldr	r0, [r7, #4]
 800cf3e:	f7ff fe13 	bl	800cb68 <VL53L0X_device_read_strobe>
 800cf42:	4603      	mov	r3, r0
 800cf44:	461a      	mov	r2, r3
 800cf46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cf4a:	4313      	orrs	r3, r2
 800cf4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800cf50:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cf54:	461a      	mov	r2, r3
 800cf56:	2190      	movs	r1, #144	; 0x90
 800cf58:	6878      	ldr	r0, [r7, #4]
 800cf5a:	f002 f9e7 	bl	800f32c <VL53L0X_RdDWord>
 800cf5e:	4603      	mov	r3, r0
 800cf60:	461a      	mov	r2, r3
 800cf62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cf66:	4313      	orrs	r3, r2
 800cf68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800cf6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf6e:	0e5b      	lsrs	r3, r3, #25
 800cf70:	b2db      	uxtb	r3, r3
 800cf72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf76:	b2db      	uxtb	r3, r3
 800cf78:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800cf7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf7c:	0c9b      	lsrs	r3, r3, #18
 800cf7e:	b2db      	uxtb	r3, r3
 800cf80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf84:	b2db      	uxtb	r3, r3
 800cf86:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800cf88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf8a:	0adb      	lsrs	r3, r3, #11
 800cf8c:	b2db      	uxtb	r3, r3
 800cf8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf92:	b2db      	uxtb	r3, r3
 800cf94:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800cf96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf98:	091b      	lsrs	r3, r3, #4
 800cf9a:	b2db      	uxtb	r3, r3
 800cf9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cfa0:	b2db      	uxtb	r3, r3
 800cfa2:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800cfa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfa6:	b2db      	uxtb	r3, r3
 800cfa8:	00db      	lsls	r3, r3, #3
 800cfaa:	b2db      	uxtb	r3, r3
 800cfac:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800cfb0:	b2db      	uxtb	r3, r3
 800cfb2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800cfb6:	2278      	movs	r2, #120	; 0x78
 800cfb8:	2194      	movs	r1, #148	; 0x94
 800cfba:	6878      	ldr	r0, [r7, #4]
 800cfbc:	f002 f8d2 	bl	800f164 <VL53L0X_WrByte>
 800cfc0:	4603      	mov	r3, r0
 800cfc2:	461a      	mov	r2, r3
 800cfc4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cfc8:	4313      	orrs	r3, r2
 800cfca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800cfce:	6878      	ldr	r0, [r7, #4]
 800cfd0:	f7ff fdca 	bl	800cb68 <VL53L0X_device_read_strobe>
 800cfd4:	4603      	mov	r3, r0
 800cfd6:	461a      	mov	r2, r3
 800cfd8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cfdc:	4313      	orrs	r3, r2
 800cfde:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800cfe2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cfe6:	461a      	mov	r2, r3
 800cfe8:	2190      	movs	r1, #144	; 0x90
 800cfea:	6878      	ldr	r0, [r7, #4]
 800cfec:	f002 f99e 	bl	800f32c <VL53L0X_RdDWord>
 800cff0:	4603      	mov	r3, r0
 800cff2:	461a      	mov	r2, r3
 800cff4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cff8:	4313      	orrs	r3, r2
 800cffa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800cffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d000:	0f5b      	lsrs	r3, r3, #29
 800d002:	b2db      	uxtb	r3, r3
 800d004:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d008:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800d00a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d00e:	4413      	add	r3, r2
 800d010:	b2db      	uxtb	r3, r3
 800d012:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800d014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d016:	0d9b      	lsrs	r3, r3, #22
 800d018:	b2db      	uxtb	r3, r3
 800d01a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d01e:	b2db      	uxtb	r3, r3
 800d020:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800d022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d024:	0bdb      	lsrs	r3, r3, #15
 800d026:	b2db      	uxtb	r3, r3
 800d028:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d02c:	b2db      	uxtb	r3, r3
 800d02e:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800d030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d032:	0a1b      	lsrs	r3, r3, #8
 800d034:	b2db      	uxtb	r3, r3
 800d036:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d03a:	b2db      	uxtb	r3, r3
 800d03c:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800d03e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d040:	085b      	lsrs	r3, r3, #1
 800d042:	b2db      	uxtb	r3, r3
 800d044:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d048:	b2db      	uxtb	r3, r3
 800d04a:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800d04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d04e:	b2db      	uxtb	r3, r3
 800d050:	019b      	lsls	r3, r3, #6
 800d052:	b2db      	uxtb	r3, r3
 800d054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d058:	b2db      	uxtb	r3, r3
 800d05a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800d05e:	2279      	movs	r2, #121	; 0x79
 800d060:	2194      	movs	r1, #148	; 0x94
 800d062:	6878      	ldr	r0, [r7, #4]
 800d064:	f002 f87e 	bl	800f164 <VL53L0X_WrByte>
 800d068:	4603      	mov	r3, r0
 800d06a:	461a      	mov	r2, r3
 800d06c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d070:	4313      	orrs	r3, r2
 800d072:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800d076:	6878      	ldr	r0, [r7, #4]
 800d078:	f7ff fd76 	bl	800cb68 <VL53L0X_device_read_strobe>
 800d07c:	4603      	mov	r3, r0
 800d07e:	461a      	mov	r2, r3
 800d080:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d084:	4313      	orrs	r3, r2
 800d086:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800d08a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d08e:	461a      	mov	r2, r3
 800d090:	2190      	movs	r1, #144	; 0x90
 800d092:	6878      	ldr	r0, [r7, #4]
 800d094:	f002 f94a 	bl	800f32c <VL53L0X_RdDWord>
 800d098:	4603      	mov	r3, r0
 800d09a:	461a      	mov	r2, r3
 800d09c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d0a0:	4313      	orrs	r3, r2
 800d0a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800d0a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0a8:	0e9b      	lsrs	r3, r3, #26
 800d0aa:	b2db      	uxtb	r3, r3
 800d0ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0b0:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800d0b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d0b6:	4413      	add	r3, r2
 800d0b8:	b2db      	uxtb	r3, r3
 800d0ba:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800d0bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0be:	0cdb      	lsrs	r3, r3, #19
 800d0c0:	b2db      	uxtb	r3, r3
 800d0c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0c6:	b2db      	uxtb	r3, r3
 800d0c8:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800d0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0cc:	0b1b      	lsrs	r3, r3, #12
 800d0ce:	b2db      	uxtb	r3, r3
 800d0d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0d4:	b2db      	uxtb	r3, r3
 800d0d6:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800d0d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0da:	095b      	lsrs	r3, r3, #5
 800d0dc:	b2db      	uxtb	r3, r3
 800d0de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0e2:	b2db      	uxtb	r3, r3
 800d0e4:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800d0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0e8:	b2db      	uxtb	r3, r3
 800d0ea:	009b      	lsls	r3, r3, #2
 800d0ec:	b2db      	uxtb	r3, r3
 800d0ee:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800d0f2:	b2db      	uxtb	r3, r3
 800d0f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800d0f8:	227a      	movs	r2, #122	; 0x7a
 800d0fa:	2194      	movs	r1, #148	; 0x94
 800d0fc:	6878      	ldr	r0, [r7, #4]
 800d0fe:	f002 f831 	bl	800f164 <VL53L0X_WrByte>
 800d102:	4603      	mov	r3, r0
 800d104:	461a      	mov	r2, r3
 800d106:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d10a:	4313      	orrs	r3, r2
 800d10c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800d110:	6878      	ldr	r0, [r7, #4]
 800d112:	f7ff fd29 	bl	800cb68 <VL53L0X_device_read_strobe>
 800d116:	4603      	mov	r3, r0
 800d118:	461a      	mov	r2, r3
 800d11a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d11e:	4313      	orrs	r3, r2
 800d120:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800d124:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d128:	461a      	mov	r2, r3
 800d12a:	2190      	movs	r1, #144	; 0x90
 800d12c:	6878      	ldr	r0, [r7, #4]
 800d12e:	f002 f8fd 	bl	800f32c <VL53L0X_RdDWord>
 800d132:	4603      	mov	r3, r0
 800d134:	461a      	mov	r2, r3
 800d136:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d13a:	4313      	orrs	r3, r2
 800d13c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800d140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d142:	0f9b      	lsrs	r3, r3, #30
 800d144:	b2db      	uxtb	r3, r3
 800d146:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d14a:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800d14c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d150:	4413      	add	r3, r2
 800d152:	b2db      	uxtb	r3, r3
 800d154:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800d156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d158:	0ddb      	lsrs	r3, r3, #23
 800d15a:	b2db      	uxtb	r3, r3
 800d15c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d160:	b2db      	uxtb	r3, r3
 800d162:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800d164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d166:	0c1b      	lsrs	r3, r3, #16
 800d168:	b2db      	uxtb	r3, r3
 800d16a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d16e:	b2db      	uxtb	r3, r3
 800d170:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800d172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d174:	0a5b      	lsrs	r3, r3, #9
 800d176:	b2db      	uxtb	r3, r3
 800d178:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d17c:	b2db      	uxtb	r3, r3
 800d17e:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800d182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d184:	089b      	lsrs	r3, r3, #2
 800d186:	b2db      	uxtb	r3, r3
 800d188:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d18c:	b2db      	uxtb	r3, r3
 800d18e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 800d192:	2300      	movs	r3, #0
 800d194:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 800d198:	78fb      	ldrb	r3, [r7, #3]
 800d19a:	f003 0304 	and.w	r3, r3, #4
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	f000 80f1 	beq.w	800d386 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800d1a4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d1a8:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	f040 80ea 	bne.w	800d386 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800d1b2:	227b      	movs	r2, #123	; 0x7b
 800d1b4:	2194      	movs	r1, #148	; 0x94
 800d1b6:	6878      	ldr	r0, [r7, #4]
 800d1b8:	f001 ffd4 	bl	800f164 <VL53L0X_WrByte>
 800d1bc:	4603      	mov	r3, r0
 800d1be:	461a      	mov	r2, r3
 800d1c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d1c4:	4313      	orrs	r3, r2
 800d1c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800d1ca:	6878      	ldr	r0, [r7, #4]
 800d1cc:	f7ff fccc 	bl	800cb68 <VL53L0X_device_read_strobe>
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	461a      	mov	r2, r3
 800d1d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d1d8:	4313      	orrs	r3, r2
 800d1da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800d1de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d1e2:	461a      	mov	r2, r3
 800d1e4:	2190      	movs	r1, #144	; 0x90
 800d1e6:	6878      	ldr	r0, [r7, #4]
 800d1e8:	f002 f8a0 	bl	800f32c <VL53L0X_RdDWord>
 800d1ec:	4603      	mov	r3, r0
 800d1ee:	461a      	mov	r2, r3
 800d1f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d1f4:	4313      	orrs	r3, r2
 800d1f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800d1fa:	227c      	movs	r2, #124	; 0x7c
 800d1fc:	2194      	movs	r1, #148	; 0x94
 800d1fe:	6878      	ldr	r0, [r7, #4]
 800d200:	f001 ffb0 	bl	800f164 <VL53L0X_WrByte>
 800d204:	4603      	mov	r3, r0
 800d206:	461a      	mov	r2, r3
 800d208:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d20c:	4313      	orrs	r3, r2
 800d20e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800d212:	6878      	ldr	r0, [r7, #4]
 800d214:	f7ff fca8 	bl	800cb68 <VL53L0X_device_read_strobe>
 800d218:	4603      	mov	r3, r0
 800d21a:	461a      	mov	r2, r3
 800d21c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d220:	4313      	orrs	r3, r2
 800d222:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800d226:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d22a:	461a      	mov	r2, r3
 800d22c:	2190      	movs	r1, #144	; 0x90
 800d22e:	6878      	ldr	r0, [r7, #4]
 800d230:	f002 f87c 	bl	800f32c <VL53L0X_RdDWord>
 800d234:	4603      	mov	r3, r0
 800d236:	461a      	mov	r2, r3
 800d238:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d23c:	4313      	orrs	r3, r2
 800d23e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800d242:	2273      	movs	r2, #115	; 0x73
 800d244:	2194      	movs	r1, #148	; 0x94
 800d246:	6878      	ldr	r0, [r7, #4]
 800d248:	f001 ff8c 	bl	800f164 <VL53L0X_WrByte>
 800d24c:	4603      	mov	r3, r0
 800d24e:	461a      	mov	r2, r3
 800d250:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d254:	4313      	orrs	r3, r2
 800d256:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800d25a:	6878      	ldr	r0, [r7, #4]
 800d25c:	f7ff fc84 	bl	800cb68 <VL53L0X_device_read_strobe>
 800d260:	4603      	mov	r3, r0
 800d262:	461a      	mov	r2, r3
 800d264:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d268:	4313      	orrs	r3, r2
 800d26a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800d26e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d272:	461a      	mov	r2, r3
 800d274:	2190      	movs	r1, #144	; 0x90
 800d276:	6878      	ldr	r0, [r7, #4]
 800d278:	f002 f858 	bl	800f32c <VL53L0X_RdDWord>
 800d27c:	4603      	mov	r3, r0
 800d27e:	461a      	mov	r2, r3
 800d280:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d284:	4313      	orrs	r3, r2
 800d286:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800d28a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d28c:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800d28e:	b29b      	uxth	r3, r3
 800d290:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800d292:	2274      	movs	r2, #116	; 0x74
 800d294:	2194      	movs	r1, #148	; 0x94
 800d296:	6878      	ldr	r0, [r7, #4]
 800d298:	f001 ff64 	bl	800f164 <VL53L0X_WrByte>
 800d29c:	4603      	mov	r3, r0
 800d29e:	461a      	mov	r2, r3
 800d2a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d2a4:	4313      	orrs	r3, r2
 800d2a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800d2aa:	6878      	ldr	r0, [r7, #4]
 800d2ac:	f7ff fc5c 	bl	800cb68 <VL53L0X_device_read_strobe>
 800d2b0:	4603      	mov	r3, r0
 800d2b2:	461a      	mov	r2, r3
 800d2b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d2b8:	4313      	orrs	r3, r2
 800d2ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800d2be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d2c2:	461a      	mov	r2, r3
 800d2c4:	2190      	movs	r1, #144	; 0x90
 800d2c6:	6878      	ldr	r0, [r7, #4]
 800d2c8:	f002 f830 	bl	800f32c <VL53L0X_RdDWord>
 800d2cc:	4603      	mov	r3, r0
 800d2ce:	461a      	mov	r2, r3
 800d2d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d2d4:	4313      	orrs	r3, r2
 800d2d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800d2da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2dc:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800d2de:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d2e0:	4313      	orrs	r3, r2
 800d2e2:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800d2e4:	2275      	movs	r2, #117	; 0x75
 800d2e6:	2194      	movs	r1, #148	; 0x94
 800d2e8:	6878      	ldr	r0, [r7, #4]
 800d2ea:	f001 ff3b 	bl	800f164 <VL53L0X_WrByte>
 800d2ee:	4603      	mov	r3, r0
 800d2f0:	461a      	mov	r2, r3
 800d2f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d2f6:	4313      	orrs	r3, r2
 800d2f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800d2fc:	6878      	ldr	r0, [r7, #4]
 800d2fe:	f7ff fc33 	bl	800cb68 <VL53L0X_device_read_strobe>
 800d302:	4603      	mov	r3, r0
 800d304:	461a      	mov	r2, r3
 800d306:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d30a:	4313      	orrs	r3, r2
 800d30c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800d310:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d314:	461a      	mov	r2, r3
 800d316:	2190      	movs	r1, #144	; 0x90
 800d318:	6878      	ldr	r0, [r7, #4]
 800d31a:	f002 f807 	bl	800f32c <VL53L0X_RdDWord>
 800d31e:	4603      	mov	r3, r0
 800d320:	461a      	mov	r2, r3
 800d322:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d326:	4313      	orrs	r3, r2
 800d328:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 800d32c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d32e:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 800d330:	b29b      	uxth	r3, r3
 800d332:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800d334:	2276      	movs	r2, #118	; 0x76
 800d336:	2194      	movs	r1, #148	; 0x94
 800d338:	6878      	ldr	r0, [r7, #4]
 800d33a:	f001 ff13 	bl	800f164 <VL53L0X_WrByte>
 800d33e:	4603      	mov	r3, r0
 800d340:	461a      	mov	r2, r3
 800d342:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d346:	4313      	orrs	r3, r2
 800d348:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800d34c:	6878      	ldr	r0, [r7, #4]
 800d34e:	f7ff fc0b 	bl	800cb68 <VL53L0X_device_read_strobe>
 800d352:	4603      	mov	r3, r0
 800d354:	461a      	mov	r2, r3
 800d356:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d35a:	4313      	orrs	r3, r2
 800d35c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800d360:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d364:	461a      	mov	r2, r3
 800d366:	2190      	movs	r1, #144	; 0x90
 800d368:	6878      	ldr	r0, [r7, #4]
 800d36a:	f001 ffdf 	bl	800f32c <VL53L0X_RdDWord>
 800d36e:	4603      	mov	r3, r0
 800d370:	461a      	mov	r2, r3
 800d372:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d376:	4313      	orrs	r3, r2
 800d378:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800d37c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d37e:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800d380:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d382:	4313      	orrs	r3, r2
 800d384:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800d386:	2200      	movs	r2, #0
 800d388:	2181      	movs	r1, #129	; 0x81
 800d38a:	6878      	ldr	r0, [r7, #4]
 800d38c:	f001 feea 	bl	800f164 <VL53L0X_WrByte>
 800d390:	4603      	mov	r3, r0
 800d392:	461a      	mov	r2, r3
 800d394:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d398:	4313      	orrs	r3, r2
 800d39a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800d39e:	2206      	movs	r2, #6
 800d3a0:	21ff      	movs	r1, #255	; 0xff
 800d3a2:	6878      	ldr	r0, [r7, #4]
 800d3a4:	f001 fede 	bl	800f164 <VL53L0X_WrByte>
 800d3a8:	4603      	mov	r3, r0
 800d3aa:	461a      	mov	r2, r3
 800d3ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d3b0:	4313      	orrs	r3, r2
 800d3b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800d3b6:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800d3ba:	461a      	mov	r2, r3
 800d3bc:	2183      	movs	r1, #131	; 0x83
 800d3be:	6878      	ldr	r0, [r7, #4]
 800d3c0:	f001 ff52 	bl	800f268 <VL53L0X_RdByte>
 800d3c4:	4603      	mov	r3, r0
 800d3c6:	461a      	mov	r2, r3
 800d3c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d3cc:	4313      	orrs	r3, r2
 800d3ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800d3d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d3d6:	f023 0304 	bic.w	r3, r3, #4
 800d3da:	b2db      	uxtb	r3, r3
 800d3dc:	461a      	mov	r2, r3
 800d3de:	2183      	movs	r1, #131	; 0x83
 800d3e0:	6878      	ldr	r0, [r7, #4]
 800d3e2:	f001 febf 	bl	800f164 <VL53L0X_WrByte>
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	461a      	mov	r2, r3
 800d3ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d3ee:	4313      	orrs	r3, r2
 800d3f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800d3f4:	2201      	movs	r2, #1
 800d3f6:	21ff      	movs	r1, #255	; 0xff
 800d3f8:	6878      	ldr	r0, [r7, #4]
 800d3fa:	f001 feb3 	bl	800f164 <VL53L0X_WrByte>
 800d3fe:	4603      	mov	r3, r0
 800d400:	461a      	mov	r2, r3
 800d402:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d406:	4313      	orrs	r3, r2
 800d408:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800d40c:	2201      	movs	r2, #1
 800d40e:	2100      	movs	r1, #0
 800d410:	6878      	ldr	r0, [r7, #4]
 800d412:	f001 fea7 	bl	800f164 <VL53L0X_WrByte>
 800d416:	4603      	mov	r3, r0
 800d418:	461a      	mov	r2, r3
 800d41a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d41e:	4313      	orrs	r3, r2
 800d420:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800d424:	2200      	movs	r2, #0
 800d426:	21ff      	movs	r1, #255	; 0xff
 800d428:	6878      	ldr	r0, [r7, #4]
 800d42a:	f001 fe9b 	bl	800f164 <VL53L0X_WrByte>
 800d42e:	4603      	mov	r3, r0
 800d430:	461a      	mov	r2, r3
 800d432:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d436:	4313      	orrs	r3, r2
 800d438:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800d43c:	2200      	movs	r2, #0
 800d43e:	2180      	movs	r1, #128	; 0x80
 800d440:	6878      	ldr	r0, [r7, #4]
 800d442:	f001 fe8f 	bl	800f164 <VL53L0X_WrByte>
 800d446:	4603      	mov	r3, r0
 800d448:	461a      	mov	r2, r3
 800d44a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d44e:	4313      	orrs	r3, r2
 800d450:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800d454:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800d458:	2b00      	cmp	r3, #0
 800d45a:	f040 808f 	bne.w	800d57c <VL53L0X_get_info_from_device+0x98e>
 800d45e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d462:	2b07      	cmp	r3, #7
 800d464:	f000 808a 	beq.w	800d57c <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800d468:	78fb      	ldrb	r3, [r7, #3]
 800d46a:	f003 0301 	and.w	r3, r3, #1
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d024      	beq.n	800d4bc <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800d472:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d476:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d11e      	bne.n	800d4bc <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800d484:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800d48e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800d492:	2300      	movs	r3, #0
 800d494:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d496:	e00e      	b.n	800d4b6 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800d498:	f107 0208 	add.w	r2, r7, #8
 800d49c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d49e:	4413      	add	r3, r2
 800d4a0:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800d4a2:	687a      	ldr	r2, [r7, #4]
 800d4a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4a6:	4413      	add	r3, r2
 800d4a8:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800d4ac:	460a      	mov	r2, r1
 800d4ae:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800d4b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4b2:	3301      	adds	r3, #1
 800d4b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d4b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4b8:	2b05      	cmp	r3, #5
 800d4ba:	dded      	ble.n	800d498 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 800d4bc:	78fb      	ldrb	r3, [r7, #3]
 800d4be:	f003 0302 	and.w	r3, r3, #2
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d018      	beq.n	800d4f8 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800d4c6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d4ca:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d112      	bne.n	800d4f8 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d4d2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d4dc:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	33f3      	adds	r3, #243	; 0xf3
 800d4ea:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800d4ec:	f107 0310 	add.w	r3, r7, #16
 800d4f0:	4619      	mov	r1, r3
 800d4f2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d4f4:	f002 feb7 	bl	8010266 <strcpy>

		}

		if (((option & 4) == 4) &&
 800d4f8:	78fb      	ldrb	r3, [r7, #3]
 800d4fa:	f003 0304 	and.w	r3, r3, #4
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d030      	beq.n	800d564 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800d502:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d506:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d12a      	bne.n	800d564 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d50e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800d51e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d520:	025b      	lsls	r3, r3, #9
 800d522:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d528:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 800d52c:	2300      	movs	r3, #0
 800d52e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800d532:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d534:	2b00      	cmp	r3, #0
 800d536:	d011      	beq.n	800d55c <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 800d538:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d53a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d53c:	1ad3      	subs	r3, r2, r3
 800d53e:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800d540:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d542:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d546:	fb02 f303 	mul.w	r3, r2, r3
 800d54a:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 800d54c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 800d550:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800d554:	425b      	negs	r3, r3
 800d556:	b29b      	uxth	r3, r3
 800d558:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 800d55c:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800d564:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800d568:	78fb      	ldrb	r3, [r7, #3]
 800d56a:	4313      	orrs	r3, r2
 800d56c:	b2db      	uxtb	r3, r3
 800d56e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800d572:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800d57c:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800d580:	4618      	mov	r0, r3
 800d582:	3760      	adds	r7, #96	; 0x60
 800d584:	46bd      	mov	sp, r7
 800d586:	bd80      	pop	{r7, pc}

0800d588 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 800d588:	b480      	push	{r7}
 800d58a:	b087      	sub	sp, #28
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
 800d590:	460b      	mov	r3, r1
 800d592:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 800d594:	f240 6277 	movw	r2, #1655	; 0x677
 800d598:	f04f 0300 	mov.w	r3, #0
 800d59c:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 800d5a0:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800d5a4:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800d5a6:	78fb      	ldrb	r3, [r7, #3]
 800d5a8:	68fa      	ldr	r2, [r7, #12]
 800d5aa:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800d5ae:	693a      	ldr	r2, [r7, #16]
 800d5b0:	fb02 f303 	mul.w	r3, r2, r3
 800d5b4:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800d5b6:	68bb      	ldr	r3, [r7, #8]
}
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	371c      	adds	r7, #28
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c2:	4770      	bx	lr

0800d5c4 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800d5c4:	b480      	push	{r7}
 800d5c6:	b087      	sub	sp, #28
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800d5cc:	2300      	movs	r3, #0
 800d5ce:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d017      	beq.n	800d60e <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	3b01      	subs	r3, #1
 800d5e2:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800d5e4:	e005      	b.n	800d5f2 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800d5e6:	693b      	ldr	r3, [r7, #16]
 800d5e8:	085b      	lsrs	r3, r3, #1
 800d5ea:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800d5ec:	89fb      	ldrh	r3, [r7, #14]
 800d5ee:	3301      	adds	r3, #1
 800d5f0:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800d5f2:	693b      	ldr	r3, [r7, #16]
 800d5f4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d1f4      	bne.n	800d5e6 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800d5fc:	89fb      	ldrh	r3, [r7, #14]
 800d5fe:	021b      	lsls	r3, r3, #8
 800d600:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800d602:	693b      	ldr	r3, [r7, #16]
 800d604:	b29b      	uxth	r3, r3
 800d606:	b2db      	uxtb	r3, r3
 800d608:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800d60a:	4413      	add	r3, r2
 800d60c:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800d60e:	8afb      	ldrh	r3, [r7, #22]

}
 800d610:	4618      	mov	r0, r3
 800d612:	371c      	adds	r7, #28
 800d614:	46bd      	mov	sp, r7
 800d616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61a:	4770      	bx	lr

0800d61c <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800d61c:	b480      	push	{r7}
 800d61e:	b085      	sub	sp, #20
 800d620:	af00      	add	r7, sp, #0
 800d622:	4603      	mov	r3, r0
 800d624:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800d626:	2300      	movs	r3, #0
 800d628:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800d62a:	88fb      	ldrh	r3, [r7, #6]
 800d62c:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800d62e:	88fa      	ldrh	r2, [r7, #6]
 800d630:	0a12      	lsrs	r2, r2, #8
 800d632:	b292      	uxth	r2, r2
 800d634:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800d636:	3301      	adds	r3, #1
 800d638:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800d63a:	68fb      	ldr	r3, [r7, #12]
}
 800d63c:	4618      	mov	r0, r3
 800d63e:	3714      	adds	r7, #20
 800d640:	46bd      	mov	sp, r7
 800d642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d646:	4770      	bx	lr

0800d648 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800d648:	b580      	push	{r7, lr}
 800d64a:	b088      	sub	sp, #32
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	60f8      	str	r0, [r7, #12]
 800d650:	60b9      	str	r1, [r7, #8]
 800d652:	4613      	mov	r3, r2
 800d654:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800d656:	2300      	movs	r3, #0
 800d658:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800d65a:	79fb      	ldrb	r3, [r7, #7]
 800d65c:	4619      	mov	r1, r3
 800d65e:	68f8      	ldr	r0, [r7, #12]
 800d660:	f7ff ff92 	bl	800d588 <VL53L0X_calc_macro_period_ps>
 800d664:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800d666:	69bb      	ldr	r3, [r7, #24]
 800d668:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d66c:	4a0a      	ldr	r2, [pc, #40]	; (800d698 <VL53L0X_calc_timeout_mclks+0x50>)
 800d66e:	fba2 2303 	umull	r2, r3, r2, r3
 800d672:	099b      	lsrs	r3, r3, #6
 800d674:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800d676:	68bb      	ldr	r3, [r7, #8]
 800d678:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d67c:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 800d680:	697b      	ldr	r3, [r7, #20]
 800d682:	085b      	lsrs	r3, r3, #1
 800d684:	441a      	add	r2, r3
	timeout_period_mclks =
 800d686:	697b      	ldr	r3, [r7, #20]
 800d688:	fbb2 f3f3 	udiv	r3, r2, r3
 800d68c:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 800d68e:	69fb      	ldr	r3, [r7, #28]
}
 800d690:	4618      	mov	r0, r3
 800d692:	3720      	adds	r7, #32
 800d694:	46bd      	mov	sp, r7
 800d696:	bd80      	pop	{r7, pc}
 800d698:	10624dd3 	.word	0x10624dd3

0800d69c <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b086      	sub	sp, #24
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
 800d6a4:	460b      	mov	r3, r1
 800d6a6:	807b      	strh	r3, [r7, #2]
 800d6a8:	4613      	mov	r3, r2
 800d6aa:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800d6b0:	787b      	ldrb	r3, [r7, #1]
 800d6b2:	4619      	mov	r1, r3
 800d6b4:	6878      	ldr	r0, [r7, #4]
 800d6b6:	f7ff ff67 	bl	800d588 <VL53L0X_calc_macro_period_ps>
 800d6ba:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800d6bc:	693b      	ldr	r3, [r7, #16]
 800d6be:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d6c2:	4a0a      	ldr	r2, [pc, #40]	; (800d6ec <VL53L0X_calc_timeout_us+0x50>)
 800d6c4:	fba2 2303 	umull	r2, r3, r2, r3
 800d6c8:	099b      	lsrs	r3, r3, #6
 800d6ca:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800d6cc:	887b      	ldrh	r3, [r7, #2]
 800d6ce:	68fa      	ldr	r2, [r7, #12]
 800d6d0:	fb02 f303 	mul.w	r3, r2, r3
 800d6d4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 800d6d8:	4a04      	ldr	r2, [pc, #16]	; (800d6ec <VL53L0X_calc_timeout_us+0x50>)
 800d6da:	fba2 2303 	umull	r2, r3, r2, r3
 800d6de:	099b      	lsrs	r3, r3, #6
 800d6e0:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800d6e2:	697b      	ldr	r3, [r7, #20]
}
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	3718      	adds	r7, #24
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	bd80      	pop	{r7, pc}
 800d6ec:	10624dd3 	.word	0x10624dd3

0800d6f0 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b08c      	sub	sp, #48	; 0x30
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	60f8      	str	r0, [r7, #12]
 800d6f8:	460b      	mov	r3, r1
 800d6fa:	607a      	str	r2, [r7, #4]
 800d6fc:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d6fe:	2300      	movs	r3, #0
 800d700:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800d704:	2300      	movs	r3, #0
 800d706:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800d70a:	2300      	movs	r3, #0
 800d70c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800d70e:	2300      	movs	r3, #0
 800d710:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800d712:	2300      	movs	r3, #0
 800d714:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800d716:	7afb      	ldrb	r3, [r7, #11]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d005      	beq.n	800d728 <get_sequence_step_timeout+0x38>
 800d71c:	7afb      	ldrb	r3, [r7, #11]
 800d71e:	2b01      	cmp	r3, #1
 800d720:	d002      	beq.n	800d728 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800d722:	7afb      	ldrb	r3, [r7, #11]
 800d724:	2b02      	cmp	r3, #2
 800d726:	d128      	bne.n	800d77a <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d728:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800d72c:	461a      	mov	r2, r3
 800d72e:	2100      	movs	r1, #0
 800d730:	68f8      	ldr	r0, [r7, #12]
 800d732:	f7fd fa4d 	bl	800abd0 <VL53L0X_GetVcselPulsePeriod>
 800d736:	4603      	mov	r3, r0
 800d738:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800d73c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d740:	2b00      	cmp	r3, #0
 800d742:	d109      	bne.n	800d758 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800d744:	f107 0320 	add.w	r3, r7, #32
 800d748:	461a      	mov	r2, r3
 800d74a:	2146      	movs	r1, #70	; 0x46
 800d74c:	68f8      	ldr	r0, [r7, #12]
 800d74e:	f001 fd8b 	bl	800f268 <VL53L0X_RdByte>
 800d752:	4603      	mov	r3, r0
 800d754:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800d758:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d75c:	b29b      	uxth	r3, r3
 800d75e:	4618      	mov	r0, r3
 800d760:	f7ff ff5c 	bl	800d61c <VL53L0X_decode_timeout>
 800d764:	4603      	mov	r3, r0
 800d766:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800d768:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800d76c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d76e:	4619      	mov	r1, r3
 800d770:	68f8      	ldr	r0, [r7, #12]
 800d772:	f7ff ff93 	bl	800d69c <VL53L0X_calc_timeout_us>
 800d776:	62b8      	str	r0, [r7, #40]	; 0x28
 800d778:	e092      	b.n	800d8a0 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800d77a:	7afb      	ldrb	r3, [r7, #11]
 800d77c:	2b03      	cmp	r3, #3
 800d77e:	d135      	bne.n	800d7ec <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d780:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800d784:	461a      	mov	r2, r3
 800d786:	2100      	movs	r1, #0
 800d788:	68f8      	ldr	r0, [r7, #12]
 800d78a:	f7fd fa21 	bl	800abd0 <VL53L0X_GetVcselPulsePeriod>
 800d78e:	4603      	mov	r3, r0
 800d790:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800d794:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d798:	2b00      	cmp	r3, #0
 800d79a:	f040 8081 	bne.w	800d8a0 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d79e:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800d7a2:	461a      	mov	r2, r3
 800d7a4:	2100      	movs	r1, #0
 800d7a6:	68f8      	ldr	r0, [r7, #12]
 800d7a8:	f7fd fa12 	bl	800abd0 <VL53L0X_GetVcselPulsePeriod>
 800d7ac:	4603      	mov	r3, r0
 800d7ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800d7b2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d109      	bne.n	800d7ce <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800d7ba:	f107 031e 	add.w	r3, r7, #30
 800d7be:	461a      	mov	r2, r3
 800d7c0:	2151      	movs	r1, #81	; 0x51
 800d7c2:	68f8      	ldr	r0, [r7, #12]
 800d7c4:	f001 fd7a 	bl	800f2bc <VL53L0X_RdWord>
 800d7c8:	4603      	mov	r3, r0
 800d7ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800d7ce:	8bfb      	ldrh	r3, [r7, #30]
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	f7ff ff23 	bl	800d61c <VL53L0X_decode_timeout>
 800d7d6:	4603      	mov	r3, r0
 800d7d8:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800d7da:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800d7de:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d7e0:	4619      	mov	r1, r3
 800d7e2:	68f8      	ldr	r0, [r7, #12]
 800d7e4:	f7ff ff5a 	bl	800d69c <VL53L0X_calc_timeout_us>
 800d7e8:	62b8      	str	r0, [r7, #40]	; 0x28
 800d7ea:	e059      	b.n	800d8a0 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800d7ec:	7afb      	ldrb	r3, [r7, #11]
 800d7ee:	2b04      	cmp	r3, #4
 800d7f0:	d156      	bne.n	800d8a0 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800d7f2:	f107 0314 	add.w	r3, r7, #20
 800d7f6:	4619      	mov	r1, r3
 800d7f8:	68f8      	ldr	r0, [r7, #12]
 800d7fa:	f7fd faf5 	bl	800ade8 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800d7fe:	2300      	movs	r3, #0
 800d800:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800d802:	7dfb      	ldrb	r3, [r7, #23]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d01d      	beq.n	800d844 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d808:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800d80c:	461a      	mov	r2, r3
 800d80e:	2100      	movs	r1, #0
 800d810:	68f8      	ldr	r0, [r7, #12]
 800d812:	f7fd f9dd 	bl	800abd0 <VL53L0X_GetVcselPulsePeriod>
 800d816:	4603      	mov	r3, r0
 800d818:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800d81c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d820:	2b00      	cmp	r3, #0
 800d822:	d10f      	bne.n	800d844 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 800d824:	f107 031e 	add.w	r3, r7, #30
 800d828:	461a      	mov	r2, r3
 800d82a:	2151      	movs	r1, #81	; 0x51
 800d82c:	68f8      	ldr	r0, [r7, #12]
 800d82e:	f001 fd45 	bl	800f2bc <VL53L0X_RdWord>
 800d832:	4603      	mov	r3, r0
 800d834:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800d838:	8bfb      	ldrh	r3, [r7, #30]
 800d83a:	4618      	mov	r0, r3
 800d83c:	f7ff feee 	bl	800d61c <VL53L0X_decode_timeout>
 800d840:	4603      	mov	r3, r0
 800d842:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800d844:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d109      	bne.n	800d860 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d84c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800d850:	461a      	mov	r2, r3
 800d852:	2101      	movs	r1, #1
 800d854:	68f8      	ldr	r0, [r7, #12]
 800d856:	f7fd f9bb 	bl	800abd0 <VL53L0X_GetVcselPulsePeriod>
 800d85a:	4603      	mov	r3, r0
 800d85c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800d860:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d864:	2b00      	cmp	r3, #0
 800d866:	d10f      	bne.n	800d888 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 800d868:	f107 031c 	add.w	r3, r7, #28
 800d86c:	461a      	mov	r2, r3
 800d86e:	2171      	movs	r1, #113	; 0x71
 800d870:	68f8      	ldr	r0, [r7, #12]
 800d872:	f001 fd23 	bl	800f2bc <VL53L0X_RdWord>
 800d876:	4603      	mov	r3, r0
 800d878:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800d87c:	8bbb      	ldrh	r3, [r7, #28]
 800d87e:	4618      	mov	r0, r3
 800d880:	f7ff fecc 	bl	800d61c <VL53L0X_decode_timeout>
 800d884:	4603      	mov	r3, r0
 800d886:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800d888:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d88a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d88c:	1ad3      	subs	r3, r2, r3
 800d88e:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800d890:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800d894:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d896:	4619      	mov	r1, r3
 800d898:	68f8      	ldr	r0, [r7, #12]
 800d89a:	f7ff feff 	bl	800d69c <VL53L0X_calc_timeout_us>
 800d89e:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d8a4:	601a      	str	r2, [r3, #0]

	return Status;
 800d8a6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	3730      	adds	r7, #48	; 0x30
 800d8ae:	46bd      	mov	sp, r7
 800d8b0:	bd80      	pop	{r7, pc}

0800d8b2 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800d8b2:	b580      	push	{r7, lr}
 800d8b4:	b08a      	sub	sp, #40	; 0x28
 800d8b6:	af00      	add	r7, sp, #0
 800d8b8:	60f8      	str	r0, [r7, #12]
 800d8ba:	460b      	mov	r3, r1
 800d8bc:	607a      	str	r2, [r7, #4]
 800d8be:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800d8c6:	7afb      	ldrb	r3, [r7, #11]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d005      	beq.n	800d8d8 <set_sequence_step_timeout+0x26>
 800d8cc:	7afb      	ldrb	r3, [r7, #11]
 800d8ce:	2b01      	cmp	r3, #1
 800d8d0:	d002      	beq.n	800d8d8 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800d8d2:	7afb      	ldrb	r3, [r7, #11]
 800d8d4:	2b02      	cmp	r3, #2
 800d8d6:	d138      	bne.n	800d94a <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d8d8:	f107 031b 	add.w	r3, r7, #27
 800d8dc:	461a      	mov	r2, r3
 800d8de:	2100      	movs	r1, #0
 800d8e0:	68f8      	ldr	r0, [r7, #12]
 800d8e2:	f7fd f975 	bl	800abd0 <VL53L0X_GetVcselPulsePeriod>
 800d8e6:	4603      	mov	r3, r0
 800d8e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800d8ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d11a      	bne.n	800d92a <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800d8f4:	7efb      	ldrb	r3, [r7, #27]
 800d8f6:	461a      	mov	r2, r3
 800d8f8:	6879      	ldr	r1, [r7, #4]
 800d8fa:	68f8      	ldr	r0, [r7, #12]
 800d8fc:	f7ff fea4 	bl	800d648 <VL53L0X_calc_timeout_mclks>
 800d900:	4603      	mov	r3, r0
 800d902:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800d904:	8bbb      	ldrh	r3, [r7, #28]
 800d906:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d90a:	d903      	bls.n	800d914 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800d90c:	23ff      	movs	r3, #255	; 0xff
 800d90e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d912:	e004      	b.n	800d91e <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800d914:	8bbb      	ldrh	r3, [r7, #28]
 800d916:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800d918:	3b01      	subs	r3, #1
 800d91a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d91e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d922:	b29a      	uxth	r2, r3
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800d92a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d92e:	2b00      	cmp	r3, #0
 800d930:	f040 80ab 	bne.w	800da8a <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 800d934:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d938:	461a      	mov	r2, r3
 800d93a:	2146      	movs	r1, #70	; 0x46
 800d93c:	68f8      	ldr	r0, [r7, #12]
 800d93e:	f001 fc11 	bl	800f164 <VL53L0X_WrByte>
 800d942:	4603      	mov	r3, r0
 800d944:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800d948:	e09f      	b.n	800da8a <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800d94a:	7afb      	ldrb	r3, [r7, #11]
 800d94c:	2b03      	cmp	r3, #3
 800d94e:	d135      	bne.n	800d9bc <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800d950:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d954:	2b00      	cmp	r3, #0
 800d956:	d11b      	bne.n	800d990 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d958:	f107 031b 	add.w	r3, r7, #27
 800d95c:	461a      	mov	r2, r3
 800d95e:	2100      	movs	r1, #0
 800d960:	68f8      	ldr	r0, [r7, #12]
 800d962:	f7fd f935 	bl	800abd0 <VL53L0X_GetVcselPulsePeriod>
 800d966:	4603      	mov	r3, r0
 800d968:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800d96c:	7efb      	ldrb	r3, [r7, #27]
 800d96e:	461a      	mov	r2, r3
 800d970:	6879      	ldr	r1, [r7, #4]
 800d972:	68f8      	ldr	r0, [r7, #12]
 800d974:	f7ff fe68 	bl	800d648 <VL53L0X_calc_timeout_mclks>
 800d978:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800d97a:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800d97c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d97e:	4618      	mov	r0, r3
 800d980:	f7ff fe20 	bl	800d5c4 <VL53L0X_encode_timeout>
 800d984:	4603      	mov	r3, r0
 800d986:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d988:	8b3a      	ldrh	r2, [r7, #24]
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800d990:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d994:	2b00      	cmp	r3, #0
 800d996:	d108      	bne.n	800d9aa <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800d998:	8b3b      	ldrh	r3, [r7, #24]
 800d99a:	461a      	mov	r2, r3
 800d99c:	2151      	movs	r1, #81	; 0x51
 800d99e:	68f8      	ldr	r0, [r7, #12]
 800d9a0:	f001 fc04 	bl	800f1ac <VL53L0X_WrWord>
 800d9a4:	4603      	mov	r3, r0
 800d9a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800d9aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d16b      	bne.n	800da8a <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	687a      	ldr	r2, [r7, #4]
 800d9b6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800d9ba:	e066      	b.n	800da8a <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800d9bc:	7afb      	ldrb	r3, [r7, #11]
 800d9be:	2b04      	cmp	r3, #4
 800d9c0:	d160      	bne.n	800da84 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800d9c2:	f107 0310 	add.w	r3, r7, #16
 800d9c6:	4619      	mov	r1, r3
 800d9c8:	68f8      	ldr	r0, [r7, #12]
 800d9ca:	f7fd fa0d 	bl	800ade8 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800d9d2:	7cfb      	ldrb	r3, [r7, #19]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d01d      	beq.n	800da14 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d9d8:	f107 031b 	add.w	r3, r7, #27
 800d9dc:	461a      	mov	r2, r3
 800d9de:	2100      	movs	r1, #0
 800d9e0:	68f8      	ldr	r0, [r7, #12]
 800d9e2:	f7fd f8f5 	bl	800abd0 <VL53L0X_GetVcselPulsePeriod>
 800d9e6:	4603      	mov	r3, r0
 800d9e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800d9ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d10f      	bne.n	800da14 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800d9f4:	f107 0318 	add.w	r3, r7, #24
 800d9f8:	461a      	mov	r2, r3
 800d9fa:	2151      	movs	r1, #81	; 0x51
 800d9fc:	68f8      	ldr	r0, [r7, #12]
 800d9fe:	f001 fc5d 	bl	800f2bc <VL53L0X_RdWord>
 800da02:	4603      	mov	r3, r0
 800da04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800da08:	8b3b      	ldrh	r3, [r7, #24]
 800da0a:	4618      	mov	r0, r3
 800da0c:	f7ff fe06 	bl	800d61c <VL53L0X_decode_timeout>
 800da10:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800da12:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800da14:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d109      	bne.n	800da30 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800da1c:	f107 031b 	add.w	r3, r7, #27
 800da20:	461a      	mov	r2, r3
 800da22:	2101      	movs	r1, #1
 800da24:	68f8      	ldr	r0, [r7, #12]
 800da26:	f7fd f8d3 	bl	800abd0 <VL53L0X_GetVcselPulsePeriod>
 800da2a:	4603      	mov	r3, r0
 800da2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800da30:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800da34:	2b00      	cmp	r3, #0
 800da36:	d128      	bne.n	800da8a <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800da38:	7efb      	ldrb	r3, [r7, #27]
 800da3a:	461a      	mov	r2, r3
 800da3c:	6879      	ldr	r1, [r7, #4]
 800da3e:	68f8      	ldr	r0, [r7, #12]
 800da40:	f7ff fe02 	bl	800d648 <VL53L0X_calc_timeout_mclks>
 800da44:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800da46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da48:	6a3a      	ldr	r2, [r7, #32]
 800da4a:	4413      	add	r3, r2
 800da4c:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800da4e:	6a38      	ldr	r0, [r7, #32]
 800da50:	f7ff fdb8 	bl	800d5c4 <VL53L0X_encode_timeout>
 800da54:	4603      	mov	r3, r0
 800da56:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 800da58:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d108      	bne.n	800da72 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800da60:	8bfb      	ldrh	r3, [r7, #30]
 800da62:	461a      	mov	r2, r3
 800da64:	2171      	movs	r1, #113	; 0x71
 800da66:	68f8      	ldr	r0, [r7, #12]
 800da68:	f001 fba0 	bl	800f1ac <VL53L0X_WrWord>
 800da6c:	4603      	mov	r3, r0
 800da6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800da72:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800da76:	2b00      	cmp	r3, #0
 800da78:	d107      	bne.n	800da8a <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	687a      	ldr	r2, [r7, #4]
 800da7e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800da82:	e002      	b.n	800da8a <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800da84:	23fc      	movs	r3, #252	; 0xfc
 800da86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800da8a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800da8e:	4618      	mov	r0, r3
 800da90:	3728      	adds	r7, #40	; 0x28
 800da92:	46bd      	mov	sp, r7
 800da94:	bd80      	pop	{r7, pc}

0800da96 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800da96:	b580      	push	{r7, lr}
 800da98:	b08a      	sub	sp, #40	; 0x28
 800da9a:	af00      	add	r7, sp, #0
 800da9c:	6078      	str	r0, [r7, #4]
 800da9e:	460b      	mov	r3, r1
 800daa0:	70fb      	strb	r3, [r7, #3]
 800daa2:	4613      	mov	r3, r2
 800daa4:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800daa6:	2300      	movs	r3, #0
 800daa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 800daac:	230c      	movs	r3, #12
 800daae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800dab2:	2312      	movs	r3, #18
 800dab4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 800dab8:	2308      	movs	r3, #8
 800daba:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800dabe:	230e      	movs	r3, #14
 800dac0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 800dac4:	2300      	movs	r3, #0
 800dac6:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 800dac8:	78bb      	ldrb	r3, [r7, #2]
 800daca:	f003 0301 	and.w	r3, r3, #1
 800dace:	b2db      	uxtb	r3, r3
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d003      	beq.n	800dadc <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800dad4:	23fc      	movs	r3, #252	; 0xfc
 800dad6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dada:	e020      	b.n	800db1e <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 800dadc:	78fb      	ldrb	r3, [r7, #3]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d10d      	bne.n	800dafe <VL53L0X_set_vcsel_pulse_period+0x68>
 800dae2:	78ba      	ldrb	r2, [r7, #2]
 800dae4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dae8:	429a      	cmp	r2, r3
 800daea:	d304      	bcc.n	800daf6 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 800daec:	78ba      	ldrb	r2, [r7, #2]
 800daee:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800daf2:	429a      	cmp	r2, r3
 800daf4:	d903      	bls.n	800dafe <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800daf6:	23fc      	movs	r3, #252	; 0xfc
 800daf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dafc:	e00f      	b.n	800db1e <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800dafe:	78fb      	ldrb	r3, [r7, #3]
 800db00:	2b01      	cmp	r3, #1
 800db02:	d10c      	bne.n	800db1e <VL53L0X_set_vcsel_pulse_period+0x88>
 800db04:	78ba      	ldrb	r2, [r7, #2]
 800db06:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800db0a:	429a      	cmp	r2, r3
 800db0c:	d304      	bcc.n	800db18 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800db0e:	78ba      	ldrb	r2, [r7, #2]
 800db10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800db14:	429a      	cmp	r2, r3
 800db16:	d902      	bls.n	800db1e <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800db18:	23fc      	movs	r3, #252	; 0xfc
 800db1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800db1e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800db22:	2b00      	cmp	r3, #0
 800db24:	d002      	beq.n	800db2c <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 800db26:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800db2a:	e239      	b.n	800dfa0 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 800db2c:	78fb      	ldrb	r3, [r7, #3]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d150      	bne.n	800dbd4 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 800db32:	78bb      	ldrb	r3, [r7, #2]
 800db34:	2b0c      	cmp	r3, #12
 800db36:	d110      	bne.n	800db5a <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 800db38:	2218      	movs	r2, #24
 800db3a:	2157      	movs	r1, #87	; 0x57
 800db3c:	6878      	ldr	r0, [r7, #4]
 800db3e:	f001 fb11 	bl	800f164 <VL53L0X_WrByte>
 800db42:	4603      	mov	r3, r0
 800db44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 800db48:	2208      	movs	r2, #8
 800db4a:	2156      	movs	r1, #86	; 0x56
 800db4c:	6878      	ldr	r0, [r7, #4]
 800db4e:	f001 fb09 	bl	800f164 <VL53L0X_WrByte>
 800db52:	4603      	mov	r3, r0
 800db54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800db58:	e17f      	b.n	800de5a <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 800db5a:	78bb      	ldrb	r3, [r7, #2]
 800db5c:	2b0e      	cmp	r3, #14
 800db5e:	d110      	bne.n	800db82 <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 800db60:	2230      	movs	r2, #48	; 0x30
 800db62:	2157      	movs	r1, #87	; 0x57
 800db64:	6878      	ldr	r0, [r7, #4]
 800db66:	f001 fafd 	bl	800f164 <VL53L0X_WrByte>
 800db6a:	4603      	mov	r3, r0
 800db6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 800db70:	2208      	movs	r2, #8
 800db72:	2156      	movs	r1, #86	; 0x56
 800db74:	6878      	ldr	r0, [r7, #4]
 800db76:	f001 faf5 	bl	800f164 <VL53L0X_WrByte>
 800db7a:	4603      	mov	r3, r0
 800db7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800db80:	e16b      	b.n	800de5a <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 800db82:	78bb      	ldrb	r3, [r7, #2]
 800db84:	2b10      	cmp	r3, #16
 800db86:	d110      	bne.n	800dbaa <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 800db88:	2240      	movs	r2, #64	; 0x40
 800db8a:	2157      	movs	r1, #87	; 0x57
 800db8c:	6878      	ldr	r0, [r7, #4]
 800db8e:	f001 fae9 	bl	800f164 <VL53L0X_WrByte>
 800db92:	4603      	mov	r3, r0
 800db94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 800db98:	2208      	movs	r2, #8
 800db9a:	2156      	movs	r1, #86	; 0x56
 800db9c:	6878      	ldr	r0, [r7, #4]
 800db9e:	f001 fae1 	bl	800f164 <VL53L0X_WrByte>
 800dba2:	4603      	mov	r3, r0
 800dba4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dba8:	e157      	b.n	800de5a <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800dbaa:	78bb      	ldrb	r3, [r7, #2]
 800dbac:	2b12      	cmp	r3, #18
 800dbae:	f040 8154 	bne.w	800de5a <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800dbb2:	2250      	movs	r2, #80	; 0x50
 800dbb4:	2157      	movs	r1, #87	; 0x57
 800dbb6:	6878      	ldr	r0, [r7, #4]
 800dbb8:	f001 fad4 	bl	800f164 <VL53L0X_WrByte>
 800dbbc:	4603      	mov	r3, r0
 800dbbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800dbc2:	2208      	movs	r2, #8
 800dbc4:	2156      	movs	r1, #86	; 0x56
 800dbc6:	6878      	ldr	r0, [r7, #4]
 800dbc8:	f001 facc 	bl	800f164 <VL53L0X_WrByte>
 800dbcc:	4603      	mov	r3, r0
 800dbce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dbd2:	e142      	b.n	800de5a <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 800dbd4:	78fb      	ldrb	r3, [r7, #3]
 800dbd6:	2b01      	cmp	r3, #1
 800dbd8:	f040 813f 	bne.w	800de5a <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 800dbdc:	78bb      	ldrb	r3, [r7, #2]
 800dbde:	2b08      	cmp	r3, #8
 800dbe0:	d14c      	bne.n	800dc7c <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 800dbe2:	2210      	movs	r2, #16
 800dbe4:	2148      	movs	r1, #72	; 0x48
 800dbe6:	6878      	ldr	r0, [r7, #4]
 800dbe8:	f001 fabc 	bl	800f164 <VL53L0X_WrByte>
 800dbec:	4603      	mov	r3, r0
 800dbee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800dbf2:	2208      	movs	r2, #8
 800dbf4:	2147      	movs	r1, #71	; 0x47
 800dbf6:	6878      	ldr	r0, [r7, #4]
 800dbf8:	f001 fab4 	bl	800f164 <VL53L0X_WrByte>
 800dbfc:	4603      	mov	r3, r0
 800dbfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800dc02:	2202      	movs	r2, #2
 800dc04:	2132      	movs	r1, #50	; 0x32
 800dc06:	6878      	ldr	r0, [r7, #4]
 800dc08:	f001 faac 	bl	800f164 <VL53L0X_WrByte>
 800dc0c:	4603      	mov	r3, r0
 800dc0e:	461a      	mov	r2, r3
 800dc10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc14:	4313      	orrs	r3, r2
 800dc16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800dc1a:	220c      	movs	r2, #12
 800dc1c:	2130      	movs	r1, #48	; 0x30
 800dc1e:	6878      	ldr	r0, [r7, #4]
 800dc20:	f001 faa0 	bl	800f164 <VL53L0X_WrByte>
 800dc24:	4603      	mov	r3, r0
 800dc26:	461a      	mov	r2, r3
 800dc28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc2c:	4313      	orrs	r3, r2
 800dc2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800dc32:	2201      	movs	r2, #1
 800dc34:	21ff      	movs	r1, #255	; 0xff
 800dc36:	6878      	ldr	r0, [r7, #4]
 800dc38:	f001 fa94 	bl	800f164 <VL53L0X_WrByte>
 800dc3c:	4603      	mov	r3, r0
 800dc3e:	461a      	mov	r2, r3
 800dc40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc44:	4313      	orrs	r3, r2
 800dc46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800dc4a:	2230      	movs	r2, #48	; 0x30
 800dc4c:	2130      	movs	r1, #48	; 0x30
 800dc4e:	6878      	ldr	r0, [r7, #4]
 800dc50:	f001 fa88 	bl	800f164 <VL53L0X_WrByte>
 800dc54:	4603      	mov	r3, r0
 800dc56:	461a      	mov	r2, r3
 800dc58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc5c:	4313      	orrs	r3, r2
 800dc5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800dc62:	2200      	movs	r2, #0
 800dc64:	21ff      	movs	r1, #255	; 0xff
 800dc66:	6878      	ldr	r0, [r7, #4]
 800dc68:	f001 fa7c 	bl	800f164 <VL53L0X_WrByte>
 800dc6c:	4603      	mov	r3, r0
 800dc6e:	461a      	mov	r2, r3
 800dc70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc74:	4313      	orrs	r3, r2
 800dc76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dc7a:	e0ee      	b.n	800de5a <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 800dc7c:	78bb      	ldrb	r3, [r7, #2]
 800dc7e:	2b0a      	cmp	r3, #10
 800dc80:	d14c      	bne.n	800dd1c <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 800dc82:	2228      	movs	r2, #40	; 0x28
 800dc84:	2148      	movs	r1, #72	; 0x48
 800dc86:	6878      	ldr	r0, [r7, #4]
 800dc88:	f001 fa6c 	bl	800f164 <VL53L0X_WrByte>
 800dc8c:	4603      	mov	r3, r0
 800dc8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 800dc92:	2208      	movs	r2, #8
 800dc94:	2147      	movs	r1, #71	; 0x47
 800dc96:	6878      	ldr	r0, [r7, #4]
 800dc98:	f001 fa64 	bl	800f164 <VL53L0X_WrByte>
 800dc9c:	4603      	mov	r3, r0
 800dc9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800dca2:	2203      	movs	r2, #3
 800dca4:	2132      	movs	r1, #50	; 0x32
 800dca6:	6878      	ldr	r0, [r7, #4]
 800dca8:	f001 fa5c 	bl	800f164 <VL53L0X_WrByte>
 800dcac:	4603      	mov	r3, r0
 800dcae:	461a      	mov	r2, r3
 800dcb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dcb4:	4313      	orrs	r3, r2
 800dcb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800dcba:	2209      	movs	r2, #9
 800dcbc:	2130      	movs	r1, #48	; 0x30
 800dcbe:	6878      	ldr	r0, [r7, #4]
 800dcc0:	f001 fa50 	bl	800f164 <VL53L0X_WrByte>
 800dcc4:	4603      	mov	r3, r0
 800dcc6:	461a      	mov	r2, r3
 800dcc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dccc:	4313      	orrs	r3, r2
 800dcce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800dcd2:	2201      	movs	r2, #1
 800dcd4:	21ff      	movs	r1, #255	; 0xff
 800dcd6:	6878      	ldr	r0, [r7, #4]
 800dcd8:	f001 fa44 	bl	800f164 <VL53L0X_WrByte>
 800dcdc:	4603      	mov	r3, r0
 800dcde:	461a      	mov	r2, r3
 800dce0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dce4:	4313      	orrs	r3, r2
 800dce6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800dcea:	2220      	movs	r2, #32
 800dcec:	2130      	movs	r1, #48	; 0x30
 800dcee:	6878      	ldr	r0, [r7, #4]
 800dcf0:	f001 fa38 	bl	800f164 <VL53L0X_WrByte>
 800dcf4:	4603      	mov	r3, r0
 800dcf6:	461a      	mov	r2, r3
 800dcf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dcfc:	4313      	orrs	r3, r2
 800dcfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800dd02:	2200      	movs	r2, #0
 800dd04:	21ff      	movs	r1, #255	; 0xff
 800dd06:	6878      	ldr	r0, [r7, #4]
 800dd08:	f001 fa2c 	bl	800f164 <VL53L0X_WrByte>
 800dd0c:	4603      	mov	r3, r0
 800dd0e:	461a      	mov	r2, r3
 800dd10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd14:	4313      	orrs	r3, r2
 800dd16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dd1a:	e09e      	b.n	800de5a <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800dd1c:	78bb      	ldrb	r3, [r7, #2]
 800dd1e:	2b0c      	cmp	r3, #12
 800dd20:	d14c      	bne.n	800ddbc <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 800dd22:	2238      	movs	r2, #56	; 0x38
 800dd24:	2148      	movs	r1, #72	; 0x48
 800dd26:	6878      	ldr	r0, [r7, #4]
 800dd28:	f001 fa1c 	bl	800f164 <VL53L0X_WrByte>
 800dd2c:	4603      	mov	r3, r0
 800dd2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 800dd32:	2208      	movs	r2, #8
 800dd34:	2147      	movs	r1, #71	; 0x47
 800dd36:	6878      	ldr	r0, [r7, #4]
 800dd38:	f001 fa14 	bl	800f164 <VL53L0X_WrByte>
 800dd3c:	4603      	mov	r3, r0
 800dd3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800dd42:	2203      	movs	r2, #3
 800dd44:	2132      	movs	r1, #50	; 0x32
 800dd46:	6878      	ldr	r0, [r7, #4]
 800dd48:	f001 fa0c 	bl	800f164 <VL53L0X_WrByte>
 800dd4c:	4603      	mov	r3, r0
 800dd4e:	461a      	mov	r2, r3
 800dd50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd54:	4313      	orrs	r3, r2
 800dd56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800dd5a:	2208      	movs	r2, #8
 800dd5c:	2130      	movs	r1, #48	; 0x30
 800dd5e:	6878      	ldr	r0, [r7, #4]
 800dd60:	f001 fa00 	bl	800f164 <VL53L0X_WrByte>
 800dd64:	4603      	mov	r3, r0
 800dd66:	461a      	mov	r2, r3
 800dd68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd6c:	4313      	orrs	r3, r2
 800dd6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800dd72:	2201      	movs	r2, #1
 800dd74:	21ff      	movs	r1, #255	; 0xff
 800dd76:	6878      	ldr	r0, [r7, #4]
 800dd78:	f001 f9f4 	bl	800f164 <VL53L0X_WrByte>
 800dd7c:	4603      	mov	r3, r0
 800dd7e:	461a      	mov	r2, r3
 800dd80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd84:	4313      	orrs	r3, r2
 800dd86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800dd8a:	2220      	movs	r2, #32
 800dd8c:	2130      	movs	r1, #48	; 0x30
 800dd8e:	6878      	ldr	r0, [r7, #4]
 800dd90:	f001 f9e8 	bl	800f164 <VL53L0X_WrByte>
 800dd94:	4603      	mov	r3, r0
 800dd96:	461a      	mov	r2, r3
 800dd98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd9c:	4313      	orrs	r3, r2
 800dd9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800dda2:	2200      	movs	r2, #0
 800dda4:	21ff      	movs	r1, #255	; 0xff
 800dda6:	6878      	ldr	r0, [r7, #4]
 800dda8:	f001 f9dc 	bl	800f164 <VL53L0X_WrByte>
 800ddac:	4603      	mov	r3, r0
 800ddae:	461a      	mov	r2, r3
 800ddb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ddb4:	4313      	orrs	r3, r2
 800ddb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ddba:	e04e      	b.n	800de5a <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 800ddbc:	78bb      	ldrb	r3, [r7, #2]
 800ddbe:	2b0e      	cmp	r3, #14
 800ddc0:	d14b      	bne.n	800de5a <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800ddc2:	2248      	movs	r2, #72	; 0x48
 800ddc4:	2148      	movs	r1, #72	; 0x48
 800ddc6:	6878      	ldr	r0, [r7, #4]
 800ddc8:	f001 f9cc 	bl	800f164 <VL53L0X_WrByte>
 800ddcc:	4603      	mov	r3, r0
 800ddce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800ddd2:	2208      	movs	r2, #8
 800ddd4:	2147      	movs	r1, #71	; 0x47
 800ddd6:	6878      	ldr	r0, [r7, #4]
 800ddd8:	f001 f9c4 	bl	800f164 <VL53L0X_WrByte>
 800dddc:	4603      	mov	r3, r0
 800ddde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800dde2:	2203      	movs	r2, #3
 800dde4:	2132      	movs	r1, #50	; 0x32
 800dde6:	6878      	ldr	r0, [r7, #4]
 800dde8:	f001 f9bc 	bl	800f164 <VL53L0X_WrByte>
 800ddec:	4603      	mov	r3, r0
 800ddee:	461a      	mov	r2, r3
 800ddf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ddf4:	4313      	orrs	r3, r2
 800ddf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800ddfa:	2207      	movs	r2, #7
 800ddfc:	2130      	movs	r1, #48	; 0x30
 800ddfe:	6878      	ldr	r0, [r7, #4]
 800de00:	f001 f9b0 	bl	800f164 <VL53L0X_WrByte>
 800de04:	4603      	mov	r3, r0
 800de06:	461a      	mov	r2, r3
 800de08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de0c:	4313      	orrs	r3, r2
 800de0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800de12:	2201      	movs	r2, #1
 800de14:	21ff      	movs	r1, #255	; 0xff
 800de16:	6878      	ldr	r0, [r7, #4]
 800de18:	f001 f9a4 	bl	800f164 <VL53L0X_WrByte>
 800de1c:	4603      	mov	r3, r0
 800de1e:	461a      	mov	r2, r3
 800de20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de24:	4313      	orrs	r3, r2
 800de26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800de2a:	2220      	movs	r2, #32
 800de2c:	2130      	movs	r1, #48	; 0x30
 800de2e:	6878      	ldr	r0, [r7, #4]
 800de30:	f001 f998 	bl	800f164 <VL53L0X_WrByte>
 800de34:	4603      	mov	r3, r0
 800de36:	461a      	mov	r2, r3
 800de38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de3c:	4313      	orrs	r3, r2
 800de3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800de42:	2200      	movs	r2, #0
 800de44:	21ff      	movs	r1, #255	; 0xff
 800de46:	6878      	ldr	r0, [r7, #4]
 800de48:	f001 f98c 	bl	800f164 <VL53L0X_WrByte>
 800de4c:	4603      	mov	r3, r0
 800de4e:	461a      	mov	r2, r3
 800de50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de54:	4313      	orrs	r3, r2
 800de56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 800de5a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d17f      	bne.n	800df62 <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 800de62:	78bb      	ldrb	r3, [r7, #2]
 800de64:	4618      	mov	r0, r3
 800de66:	f7fe fe38 	bl	800cada <VL53L0X_encode_vcsel_period>
 800de6a:	4603      	mov	r3, r0
 800de6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 800de70:	78fb      	ldrb	r3, [r7, #3]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d002      	beq.n	800de7c <VL53L0X_set_vcsel_pulse_period+0x3e6>
 800de76:	2b01      	cmp	r3, #1
 800de78:	d045      	beq.n	800df06 <VL53L0X_set_vcsel_pulse_period+0x470>
 800de7a:	e06e      	b.n	800df5a <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800de7c:	f107 0314 	add.w	r3, r7, #20
 800de80:	461a      	mov	r2, r3
 800de82:	2103      	movs	r1, #3
 800de84:	6878      	ldr	r0, [r7, #4]
 800de86:	f7ff fc33 	bl	800d6f0 <get_sequence_step_timeout>
 800de8a:	4603      	mov	r3, r0
 800de8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800de90:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800de94:	2b00      	cmp	r3, #0
 800de96:	d109      	bne.n	800deac <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 800de98:	f107 0310 	add.w	r3, r7, #16
 800de9c:	461a      	mov	r2, r3
 800de9e:	2102      	movs	r1, #2
 800dea0:	6878      	ldr	r0, [r7, #4]
 800dea2:	f7ff fc25 	bl	800d6f0 <get_sequence_step_timeout>
 800dea6:	4603      	mov	r3, r0
 800dea8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800deac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d109      	bne.n	800dec8 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 800deb4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800deb8:	461a      	mov	r2, r3
 800deba:	2150      	movs	r1, #80	; 0x50
 800debc:	6878      	ldr	r0, [r7, #4]
 800debe:	f001 f951 	bl	800f164 <VL53L0X_WrByte>
 800dec2:	4603      	mov	r3, r0
 800dec4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800dec8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800decc:	2b00      	cmp	r3, #0
 800dece:	d108      	bne.n	800dee2 <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 800ded0:	697b      	ldr	r3, [r7, #20]
 800ded2:	461a      	mov	r2, r3
 800ded4:	2103      	movs	r1, #3
 800ded6:	6878      	ldr	r0, [r7, #4]
 800ded8:	f7ff fceb 	bl	800d8b2 <set_sequence_step_timeout>
 800dedc:	4603      	mov	r3, r0
 800dede:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800dee2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d108      	bne.n	800defc <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800deea:	693b      	ldr	r3, [r7, #16]
 800deec:	461a      	mov	r2, r3
 800deee:	2102      	movs	r1, #2
 800def0:	6878      	ldr	r0, [r7, #4]
 800def2:	f7ff fcde 	bl	800d8b2 <set_sequence_step_timeout>
 800def6:	4603      	mov	r3, r0
 800def8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	78ba      	ldrb	r2, [r7, #2]
 800df00:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800df04:	e02e      	b.n	800df64 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800df06:	f107 0318 	add.w	r3, r7, #24
 800df0a:	461a      	mov	r2, r3
 800df0c:	2104      	movs	r1, #4
 800df0e:	6878      	ldr	r0, [r7, #4]
 800df10:	f7ff fbee 	bl	800d6f0 <get_sequence_step_timeout>
 800df14:	4603      	mov	r3, r0
 800df16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800df1a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d109      	bne.n	800df36 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 800df22:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800df26:	461a      	mov	r2, r3
 800df28:	2170      	movs	r1, #112	; 0x70
 800df2a:	6878      	ldr	r0, [r7, #4]
 800df2c:	f001 f91a 	bl	800f164 <VL53L0X_WrByte>
 800df30:	4603      	mov	r3, r0
 800df32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800df36:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d108      	bne.n	800df50 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 800df3e:	69bb      	ldr	r3, [r7, #24]
 800df40:	461a      	mov	r2, r3
 800df42:	2104      	movs	r1, #4
 800df44:	6878      	ldr	r0, [r7, #4]
 800df46:	f7ff fcb4 	bl	800d8b2 <set_sequence_step_timeout>
 800df4a:	4603      	mov	r3, r0
 800df4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	78ba      	ldrb	r2, [r7, #2]
 800df54:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800df58:	e004      	b.n	800df64 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800df5a:	23fc      	movs	r3, #252	; 0xfc
 800df5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800df60:	e000      	b.n	800df64 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 800df62:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 800df64:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d109      	bne.n	800df80 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	695b      	ldr	r3, [r3, #20]
 800df70:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800df72:	69f9      	ldr	r1, [r7, #28]
 800df74:	6878      	ldr	r0, [r7, #4]
 800df76:	f7fc fded 	bl	800ab54 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800df7a:	4603      	mov	r3, r0
 800df7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 800df80:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800df84:	2b00      	cmp	r3, #0
 800df86:	d109      	bne.n	800df9c <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 800df88:	f107 010f 	add.w	r1, r7, #15
 800df8c:	2301      	movs	r3, #1
 800df8e:	2200      	movs	r2, #0
 800df90:	6878      	ldr	r0, [r7, #4]
 800df92:	f7fe fcbd 	bl	800c910 <VL53L0X_perform_phase_calibration>
 800df96:	4603      	mov	r3, r0
 800df98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 800df9c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	3728      	adds	r7, #40	; 0x28
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	bd80      	pop	{r7, pc}

0800dfa8 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	b086      	sub	sp, #24
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	60f8      	str	r0, [r7, #12]
 800dfb0:	460b      	mov	r3, r1
 800dfb2:	607a      	str	r2, [r7, #4]
 800dfb4:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800dfba:	7afb      	ldrb	r3, [r7, #11]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d002      	beq.n	800dfc6 <VL53L0X_get_vcsel_pulse_period+0x1e>
 800dfc0:	2b01      	cmp	r3, #1
 800dfc2:	d00a      	beq.n	800dfda <VL53L0X_get_vcsel_pulse_period+0x32>
 800dfc4:	e013      	b.n	800dfee <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800dfc6:	f107 0316 	add.w	r3, r7, #22
 800dfca:	461a      	mov	r2, r3
 800dfcc:	2150      	movs	r1, #80	; 0x50
 800dfce:	68f8      	ldr	r0, [r7, #12]
 800dfd0:	f001 f94a 	bl	800f268 <VL53L0X_RdByte>
 800dfd4:	4603      	mov	r3, r0
 800dfd6:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800dfd8:	e00b      	b.n	800dff2 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800dfda:	f107 0316 	add.w	r3, r7, #22
 800dfde:	461a      	mov	r2, r3
 800dfe0:	2170      	movs	r1, #112	; 0x70
 800dfe2:	68f8      	ldr	r0, [r7, #12]
 800dfe4:	f001 f940 	bl	800f268 <VL53L0X_RdByte>
 800dfe8:	4603      	mov	r3, r0
 800dfea:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800dfec:	e001      	b.n	800dff2 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800dfee:	23fc      	movs	r3, #252	; 0xfc
 800dff0:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800dff2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d107      	bne.n	800e00a <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800dffa:	7dbb      	ldrb	r3, [r7, #22]
 800dffc:	4618      	mov	r0, r3
 800dffe:	f7fe fd59 	bl	800cab4 <VL53L0X_decode_vcsel_period>
 800e002:	4603      	mov	r3, r0
 800e004:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	701a      	strb	r2, [r3, #0]

	return Status;
 800e00a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e00e:	4618      	mov	r0, r3
 800e010:	3718      	adds	r7, #24
 800e012:	46bd      	mov	sp, r7
 800e014:	bd80      	pop	{r7, pc}

0800e016 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800e016:	b580      	push	{r7, lr}
 800e018:	b092      	sub	sp, #72	; 0x48
 800e01a:	af00      	add	r7, sp, #0
 800e01c:	6078      	str	r0, [r7, #4]
 800e01e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e020:	2300      	movs	r3, #0
 800e022:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800e026:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800e02a:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800e02c:	f240 7376 	movw	r3, #1910	; 0x776
 800e030:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800e032:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800e036:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800e038:	f44f 7325 	mov.w	r3, #660	; 0x294
 800e03c:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800e03e:	f240 234e 	movw	r3, #590	; 0x24e
 800e042:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800e044:	f240 23b2 	movw	r3, #690	; 0x2b2
 800e048:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800e04a:	f44f 7325 	mov.w	r3, #660	; 0x294
 800e04e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800e050:	f240 2326 	movw	r3, #550	; 0x226
 800e054:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800e056:	2300      	movs	r3, #0
 800e058:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800e05a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800e05e:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800e060:	2300      	movs	r3, #0
 800e062:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800e064:	683a      	ldr	r2, [r7, #0]
 800e066:	6a3b      	ldr	r3, [r7, #32]
 800e068:	429a      	cmp	r2, r3
 800e06a:	d205      	bcs.n	800e078 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e06c:	23fc      	movs	r3, #252	; 0xfc
 800e06e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800e072:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800e076:	e0aa      	b.n	800e1ce <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800e078:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e07a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e07c:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800e07e:	683a      	ldr	r2, [r7, #0]
 800e080:	1ad3      	subs	r3, r2, r3
 800e082:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800e084:	f107 0314 	add.w	r3, r7, #20
 800e088:	4619      	mov	r1, r3
 800e08a:	6878      	ldr	r0, [r7, #4]
 800e08c:	f7fc feac 	bl	800ade8 <VL53L0X_GetSequenceStepEnables>
 800e090:	4603      	mov	r3, r0
 800e092:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800e096:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d15b      	bne.n	800e156 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800e09e:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d105      	bne.n	800e0b0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800e0a4:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d102      	bne.n	800e0b0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800e0aa:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d052      	beq.n	800e156 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800e0b0:	f107 0310 	add.w	r3, r7, #16
 800e0b4:	461a      	mov	r2, r3
 800e0b6:	2102      	movs	r1, #2
 800e0b8:	6878      	ldr	r0, [r7, #4]
 800e0ba:	f7ff fb19 	bl	800d6f0 <get_sequence_step_timeout>
 800e0be:	4603      	mov	r3, r0
 800e0c0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800e0c4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d002      	beq.n	800e0d2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800e0cc:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800e0d0:	e07d      	b.n	800e1ce <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800e0d2:	7d3b      	ldrb	r3, [r7, #20]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d00f      	beq.n	800e0f8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800e0d8:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800e0da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e0dc:	4413      	add	r3, r2
 800e0de:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800e0e0:	69fa      	ldr	r2, [r7, #28]
 800e0e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e0e4:	429a      	cmp	r2, r3
 800e0e6:	d204      	bcs.n	800e0f2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800e0e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e0ea:	69fb      	ldr	r3, [r7, #28]
 800e0ec:	1ad3      	subs	r3, r2, r3
 800e0ee:	643b      	str	r3, [r7, #64]	; 0x40
 800e0f0:	e002      	b.n	800e0f8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e0f2:	23fc      	movs	r3, #252	; 0xfc
 800e0f4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800e0f8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d002      	beq.n	800e106 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800e100:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800e104:	e063      	b.n	800e1ce <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800e106:	7dbb      	ldrb	r3, [r7, #22]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d011      	beq.n	800e130 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800e10c:	693a      	ldr	r2, [r7, #16]
 800e10e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e110:	4413      	add	r3, r2
 800e112:	005b      	lsls	r3, r3, #1
 800e114:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800e116:	69fa      	ldr	r2, [r7, #28]
 800e118:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e11a:	429a      	cmp	r2, r3
 800e11c:	d204      	bcs.n	800e128 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800e11e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e120:	69fb      	ldr	r3, [r7, #28]
 800e122:	1ad3      	subs	r3, r2, r3
 800e124:	643b      	str	r3, [r7, #64]	; 0x40
 800e126:	e016      	b.n	800e156 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e128:	23fc      	movs	r3, #252	; 0xfc
 800e12a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800e12e:	e012      	b.n	800e156 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800e130:	7d7b      	ldrb	r3, [r7, #21]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d00f      	beq.n	800e156 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800e136:	693b      	ldr	r3, [r7, #16]
 800e138:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e13a:	4413      	add	r3, r2
 800e13c:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800e13e:	69fa      	ldr	r2, [r7, #28]
 800e140:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e142:	429a      	cmp	r2, r3
 800e144:	d204      	bcs.n	800e150 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800e146:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e148:	69fb      	ldr	r3, [r7, #28]
 800e14a:	1ad3      	subs	r3, r2, r3
 800e14c:	643b      	str	r3, [r7, #64]	; 0x40
 800e14e:	e002      	b.n	800e156 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e150:	23fc      	movs	r3, #252	; 0xfc
 800e152:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800e156:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d002      	beq.n	800e164 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800e15e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800e162:	e034      	b.n	800e1ce <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800e164:	7dfb      	ldrb	r3, [r7, #23]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d019      	beq.n	800e19e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800e16a:	f107 030c 	add.w	r3, r7, #12
 800e16e:	461a      	mov	r2, r3
 800e170:	2103      	movs	r1, #3
 800e172:	6878      	ldr	r0, [r7, #4]
 800e174:	f7ff fabc 	bl	800d6f0 <get_sequence_step_timeout>
 800e178:	4603      	mov	r3, r0
 800e17a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e182:	4413      	add	r3, r2
 800e184:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800e186:	69fa      	ldr	r2, [r7, #28]
 800e188:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e18a:	429a      	cmp	r2, r3
 800e18c:	d204      	bcs.n	800e198 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800e18e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e190:	69fb      	ldr	r3, [r7, #28]
 800e192:	1ad3      	subs	r3, r2, r3
 800e194:	643b      	str	r3, [r7, #64]	; 0x40
 800e196:	e002      	b.n	800e19e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e198:	23fc      	movs	r3, #252	; 0xfc
 800e19a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800e19e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d111      	bne.n	800e1ca <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800e1a6:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d00e      	beq.n	800e1ca <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800e1ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e1ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1b0:	1ad3      	subs	r3, r2, r3
 800e1b2:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800e1b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e1b6:	2104      	movs	r1, #4
 800e1b8:	6878      	ldr	r0, [r7, #4]
 800e1ba:	f7ff fb7a 	bl	800d8b2 <set_sequence_step_timeout>
 800e1be:	4603      	mov	r3, r0
 800e1c0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	683a      	ldr	r2, [r7, #0]
 800e1c8:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800e1ca:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	3748      	adds	r7, #72	; 0x48
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	bd80      	pop	{r7, pc}

0800e1d6 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800e1d6:	b580      	push	{r7, lr}
 800e1d8:	b090      	sub	sp, #64	; 0x40
 800e1da:	af00      	add	r7, sp, #0
 800e1dc:	6078      	str	r0, [r7, #4]
 800e1de:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e1e0:	2300      	movs	r3, #0
 800e1e2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800e1e6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800e1ea:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800e1ec:	f240 7376 	movw	r3, #1910	; 0x776
 800e1f0:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800e1f2:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800e1f6:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800e1f8:	f44f 7325 	mov.w	r3, #660	; 0x294
 800e1fc:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800e1fe:	f240 234e 	movw	r3, #590	; 0x24e
 800e202:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800e204:	f240 23b2 	movw	r3, #690	; 0x2b2
 800e208:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800e20a:	f44f 7325 	mov.w	r3, #660	; 0x294
 800e20e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800e210:	f240 2326 	movw	r3, #550	; 0x226
 800e214:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800e216:	2300      	movs	r3, #0
 800e218:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800e21a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e21c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e21e:	441a      	add	r2, r3
 800e220:	683b      	ldr	r3, [r7, #0]
 800e222:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800e224:	f107 0318 	add.w	r3, r7, #24
 800e228:	4619      	mov	r1, r3
 800e22a:	6878      	ldr	r0, [r7, #4]
 800e22c:	f7fc fddc 	bl	800ade8 <VL53L0X_GetSequenceStepEnables>
 800e230:	4603      	mov	r3, r0
 800e232:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800e236:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d002      	beq.n	800e244 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800e23e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e242:	e075      	b.n	800e330 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800e244:	7e3b      	ldrb	r3, [r7, #24]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d105      	bne.n	800e256 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800e24a:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d102      	bne.n	800e256 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800e250:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800e252:	2b00      	cmp	r3, #0
 800e254:	d030      	beq.n	800e2b8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800e256:	f107 0310 	add.w	r3, r7, #16
 800e25a:	461a      	mov	r2, r3
 800e25c:	2102      	movs	r1, #2
 800e25e:	6878      	ldr	r0, [r7, #4]
 800e260:	f7ff fa46 	bl	800d6f0 <get_sequence_step_timeout>
 800e264:	4603      	mov	r3, r0
 800e266:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800e26a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d122      	bne.n	800e2b8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800e272:	7e3b      	ldrb	r3, [r7, #24]
 800e274:	2b00      	cmp	r3, #0
 800e276:	d007      	beq.n	800e288 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800e278:	683b      	ldr	r3, [r7, #0]
 800e27a:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800e27c:	6939      	ldr	r1, [r7, #16]
 800e27e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e280:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800e282:	441a      	add	r2, r3
 800e284:	683b      	ldr	r3, [r7, #0]
 800e286:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800e288:	7ebb      	ldrb	r3, [r7, #26]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d009      	beq.n	800e2a2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800e28e:	683b      	ldr	r3, [r7, #0]
 800e290:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800e292:	6939      	ldr	r1, [r7, #16]
 800e294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e296:	440b      	add	r3, r1
 800e298:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800e29a:	441a      	add	r2, r3
 800e29c:	683b      	ldr	r3, [r7, #0]
 800e29e:	601a      	str	r2, [r3, #0]
 800e2a0:	e00a      	b.n	800e2b8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800e2a2:	7e7b      	ldrb	r3, [r7, #25]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d007      	beq.n	800e2b8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800e2a8:	683b      	ldr	r3, [r7, #0]
 800e2aa:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800e2ac:	6939      	ldr	r1, [r7, #16]
 800e2ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2b0:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800e2b2:	441a      	add	r2, r3
 800e2b4:	683b      	ldr	r3, [r7, #0]
 800e2b6:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800e2b8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d114      	bne.n	800e2ea <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800e2c0:	7efb      	ldrb	r3, [r7, #27]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d011      	beq.n	800e2ea <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800e2c6:	f107 030c 	add.w	r3, r7, #12
 800e2ca:	461a      	mov	r2, r3
 800e2cc:	2103      	movs	r1, #3
 800e2ce:	6878      	ldr	r0, [r7, #4]
 800e2d0:	f7ff fa0e 	bl	800d6f0 <get_sequence_step_timeout>
 800e2d4:	4603      	mov	r3, r0
 800e2d6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800e2da:	683b      	ldr	r3, [r7, #0]
 800e2dc:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800e2de:	68f9      	ldr	r1, [r7, #12]
 800e2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2e2:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800e2e4:	441a      	add	r2, r3
 800e2e6:	683b      	ldr	r3, [r7, #0]
 800e2e8:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800e2ea:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d114      	bne.n	800e31c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800e2f2:	7f3b      	ldrb	r3, [r7, #28]
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d011      	beq.n	800e31c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800e2f8:	f107 0314 	add.w	r3, r7, #20
 800e2fc:	461a      	mov	r2, r3
 800e2fe:	2104      	movs	r1, #4
 800e300:	6878      	ldr	r0, [r7, #4]
 800e302:	f7ff f9f5 	bl	800d6f0 <get_sequence_step_timeout>
 800e306:	4603      	mov	r3, r0
 800e308:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800e30c:	683b      	ldr	r3, [r7, #0]
 800e30e:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800e310:	6979      	ldr	r1, [r7, #20]
 800e312:	6a3b      	ldr	r3, [r7, #32]
 800e314:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800e316:	441a      	add	r2, r3
 800e318:	683b      	ldr	r3, [r7, #0]
 800e31a:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800e31c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e320:	2b00      	cmp	r3, #0
 800e322:	d103      	bne.n	800e32c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800e324:	683b      	ldr	r3, [r7, #0]
 800e326:	681a      	ldr	r2, [r3, #0]
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800e32c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800e330:	4618      	mov	r0, r3
 800e332:	3740      	adds	r7, #64	; 0x40
 800e334:	46bd      	mov	sp, r7
 800e336:	bd80      	pop	{r7, pc}

0800e338 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800e338:	b580      	push	{r7, lr}
 800e33a:	b088      	sub	sp, #32
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	6078      	str	r0, [r7, #4]
 800e340:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e342:	2300      	movs	r3, #0
 800e344:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800e346:	2300      	movs	r3, #0
 800e348:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800e34a:	e0c6      	b.n	800e4da <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800e34c:	697b      	ldr	r3, [r7, #20]
 800e34e:	683a      	ldr	r2, [r7, #0]
 800e350:	4413      	add	r3, r2
 800e352:	781b      	ldrb	r3, [r3, #0]
 800e354:	74fb      	strb	r3, [r7, #19]
		Index++;
 800e356:	697b      	ldr	r3, [r7, #20]
 800e358:	3301      	adds	r3, #1
 800e35a:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800e35c:	7cfb      	ldrb	r3, [r7, #19]
 800e35e:	2bff      	cmp	r3, #255	; 0xff
 800e360:	f040 808d 	bne.w	800e47e <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800e364:	697b      	ldr	r3, [r7, #20]
 800e366:	683a      	ldr	r2, [r7, #0]
 800e368:	4413      	add	r3, r2
 800e36a:	781b      	ldrb	r3, [r3, #0]
 800e36c:	747b      	strb	r3, [r7, #17]
			Index++;
 800e36e:	697b      	ldr	r3, [r7, #20]
 800e370:	3301      	adds	r3, #1
 800e372:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800e374:	7c7b      	ldrb	r3, [r7, #17]
 800e376:	2b03      	cmp	r3, #3
 800e378:	d87e      	bhi.n	800e478 <VL53L0X_load_tuning_settings+0x140>
 800e37a:	a201      	add	r2, pc, #4	; (adr r2, 800e380 <VL53L0X_load_tuning_settings+0x48>)
 800e37c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e380:	0800e391 	.word	0x0800e391
 800e384:	0800e3cb 	.word	0x0800e3cb
 800e388:	0800e405 	.word	0x0800e405
 800e38c:	0800e43f 	.word	0x0800e43f
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800e390:	697b      	ldr	r3, [r7, #20]
 800e392:	683a      	ldr	r2, [r7, #0]
 800e394:	4413      	add	r3, r2
 800e396:	781b      	ldrb	r3, [r3, #0]
 800e398:	743b      	strb	r3, [r7, #16]
				Index++;
 800e39a:	697b      	ldr	r3, [r7, #20]
 800e39c:	3301      	adds	r3, #1
 800e39e:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800e3a0:	697b      	ldr	r3, [r7, #20]
 800e3a2:	683a      	ldr	r2, [r7, #0]
 800e3a4:	4413      	add	r3, r2
 800e3a6:	781b      	ldrb	r3, [r3, #0]
 800e3a8:	73fb      	strb	r3, [r7, #15]
				Index++;
 800e3aa:	697b      	ldr	r3, [r7, #20]
 800e3ac:	3301      	adds	r3, #1
 800e3ae:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800e3b0:	7c3b      	ldrb	r3, [r7, #16]
 800e3b2:	b29b      	uxth	r3, r3
 800e3b4:	021b      	lsls	r3, r3, #8
 800e3b6:	b29a      	uxth	r2, r3
 800e3b8:	7bfb      	ldrb	r3, [r7, #15]
 800e3ba:	b29b      	uxth	r3, r3
 800e3bc:	4413      	add	r3, r2
 800e3be:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	89ba      	ldrh	r2, [r7, #12]
 800e3c4:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800e3c8:	e087      	b.n	800e4da <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800e3ca:	697b      	ldr	r3, [r7, #20]
 800e3cc:	683a      	ldr	r2, [r7, #0]
 800e3ce:	4413      	add	r3, r2
 800e3d0:	781b      	ldrb	r3, [r3, #0]
 800e3d2:	743b      	strb	r3, [r7, #16]
				Index++;
 800e3d4:	697b      	ldr	r3, [r7, #20]
 800e3d6:	3301      	adds	r3, #1
 800e3d8:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800e3da:	697b      	ldr	r3, [r7, #20]
 800e3dc:	683a      	ldr	r2, [r7, #0]
 800e3de:	4413      	add	r3, r2
 800e3e0:	781b      	ldrb	r3, [r3, #0]
 800e3e2:	73fb      	strb	r3, [r7, #15]
				Index++;
 800e3e4:	697b      	ldr	r3, [r7, #20]
 800e3e6:	3301      	adds	r3, #1
 800e3e8:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800e3ea:	7c3b      	ldrb	r3, [r7, #16]
 800e3ec:	b29b      	uxth	r3, r3
 800e3ee:	021b      	lsls	r3, r3, #8
 800e3f0:	b29a      	uxth	r2, r3
 800e3f2:	7bfb      	ldrb	r3, [r7, #15]
 800e3f4:	b29b      	uxth	r3, r3
 800e3f6:	4413      	add	r3, r2
 800e3f8:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	89ba      	ldrh	r2, [r7, #12]
 800e3fe:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800e402:	e06a      	b.n	800e4da <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800e404:	697b      	ldr	r3, [r7, #20]
 800e406:	683a      	ldr	r2, [r7, #0]
 800e408:	4413      	add	r3, r2
 800e40a:	781b      	ldrb	r3, [r3, #0]
 800e40c:	743b      	strb	r3, [r7, #16]
				Index++;
 800e40e:	697b      	ldr	r3, [r7, #20]
 800e410:	3301      	adds	r3, #1
 800e412:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800e414:	697b      	ldr	r3, [r7, #20]
 800e416:	683a      	ldr	r2, [r7, #0]
 800e418:	4413      	add	r3, r2
 800e41a:	781b      	ldrb	r3, [r3, #0]
 800e41c:	73fb      	strb	r3, [r7, #15]
				Index++;
 800e41e:	697b      	ldr	r3, [r7, #20]
 800e420:	3301      	adds	r3, #1
 800e422:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800e424:	7c3b      	ldrb	r3, [r7, #16]
 800e426:	b29b      	uxth	r3, r3
 800e428:	021b      	lsls	r3, r3, #8
 800e42a:	b29a      	uxth	r2, r3
 800e42c:	7bfb      	ldrb	r3, [r7, #15]
 800e42e:	b29b      	uxth	r3, r3
 800e430:	4413      	add	r3, r2
 800e432:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	89ba      	ldrh	r2, [r7, #12]
 800e438:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800e43c:	e04d      	b.n	800e4da <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800e43e:	697b      	ldr	r3, [r7, #20]
 800e440:	683a      	ldr	r2, [r7, #0]
 800e442:	4413      	add	r3, r2
 800e444:	781b      	ldrb	r3, [r3, #0]
 800e446:	743b      	strb	r3, [r7, #16]
				Index++;
 800e448:	697b      	ldr	r3, [r7, #20]
 800e44a:	3301      	adds	r3, #1
 800e44c:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800e44e:	697b      	ldr	r3, [r7, #20]
 800e450:	683a      	ldr	r2, [r7, #0]
 800e452:	4413      	add	r3, r2
 800e454:	781b      	ldrb	r3, [r3, #0]
 800e456:	73fb      	strb	r3, [r7, #15]
				Index++;
 800e458:	697b      	ldr	r3, [r7, #20]
 800e45a:	3301      	adds	r3, #1
 800e45c:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800e45e:	7c3b      	ldrb	r3, [r7, #16]
 800e460:	b29b      	uxth	r3, r3
 800e462:	021b      	lsls	r3, r3, #8
 800e464:	b29a      	uxth	r2, r3
 800e466:	7bfb      	ldrb	r3, [r7, #15]
 800e468:	b29b      	uxth	r3, r3
 800e46a:	4413      	add	r3, r2
 800e46c:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	89ba      	ldrh	r2, [r7, #12]
 800e472:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800e476:	e030      	b.n	800e4da <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e478:	23fc      	movs	r3, #252	; 0xfc
 800e47a:	77fb      	strb	r3, [r7, #31]
 800e47c:	e02d      	b.n	800e4da <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800e47e:	7cfb      	ldrb	r3, [r7, #19]
 800e480:	2b04      	cmp	r3, #4
 800e482:	d828      	bhi.n	800e4d6 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800e484:	697b      	ldr	r3, [r7, #20]
 800e486:	683a      	ldr	r2, [r7, #0]
 800e488:	4413      	add	r3, r2
 800e48a:	781b      	ldrb	r3, [r3, #0]
 800e48c:	74bb      	strb	r3, [r7, #18]
			Index++;
 800e48e:	697b      	ldr	r3, [r7, #20]
 800e490:	3301      	adds	r3, #1
 800e492:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800e494:	2300      	movs	r3, #0
 800e496:	61bb      	str	r3, [r7, #24]
 800e498:	e00f      	b.n	800e4ba <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800e49a:	697b      	ldr	r3, [r7, #20]
 800e49c:	683a      	ldr	r2, [r7, #0]
 800e49e:	4413      	add	r3, r2
 800e4a0:	7819      	ldrb	r1, [r3, #0]
 800e4a2:	f107 0208 	add.w	r2, r7, #8
 800e4a6:	69bb      	ldr	r3, [r7, #24]
 800e4a8:	4413      	add	r3, r2
 800e4aa:	460a      	mov	r2, r1
 800e4ac:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800e4ae:	697b      	ldr	r3, [r7, #20]
 800e4b0:	3301      	adds	r3, #1
 800e4b2:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800e4b4:	69bb      	ldr	r3, [r7, #24]
 800e4b6:	3301      	adds	r3, #1
 800e4b8:	61bb      	str	r3, [r7, #24]
 800e4ba:	7cfb      	ldrb	r3, [r7, #19]
 800e4bc:	69ba      	ldr	r2, [r7, #24]
 800e4be:	429a      	cmp	r2, r3
 800e4c0:	dbeb      	blt.n	800e49a <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800e4c2:	7cfb      	ldrb	r3, [r7, #19]
 800e4c4:	f107 0208 	add.w	r2, r7, #8
 800e4c8:	7cb9      	ldrb	r1, [r7, #18]
 800e4ca:	6878      	ldr	r0, [r7, #4]
 800e4cc:	f000 fdee 	bl	800f0ac <VL53L0X_WriteMulti>
 800e4d0:	4603      	mov	r3, r0
 800e4d2:	77fb      	strb	r3, [r7, #31]
 800e4d4:	e001      	b.n	800e4da <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e4d6:	23fc      	movs	r3, #252	; 0xfc
 800e4d8:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800e4da:	697b      	ldr	r3, [r7, #20]
 800e4dc:	683a      	ldr	r2, [r7, #0]
 800e4de:	4413      	add	r3, r2
 800e4e0:	781b      	ldrb	r3, [r3, #0]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d004      	beq.n	800e4f0 <VL53L0X_load_tuning_settings+0x1b8>
 800e4e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	f43f af2e 	beq.w	800e34c <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800e4f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	3720      	adds	r7, #32
 800e4f8:	46bd      	mov	sp, r7
 800e4fa:	bd80      	pop	{r7, pc}

0800e4fc <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800e4fc:	b580      	push	{r7, lr}
 800e4fe:	b088      	sub	sp, #32
 800e500:	af00      	add	r7, sp, #0
 800e502:	60f8      	str	r0, [r7, #12]
 800e504:	60b9      	str	r1, [r7, #8]
 800e506:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e508:	2300      	movs	r3, #0
 800e50a:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	2200      	movs	r2, #0
 800e510:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800e512:	f107 0313 	add.w	r3, r7, #19
 800e516:	4619      	mov	r1, r3
 800e518:	68f8      	ldr	r0, [r7, #12]
 800e51a:	f7fc fcf1 	bl	800af00 <VL53L0X_GetXTalkCompensationEnable>
 800e51e:	4603      	mov	r3, r0
 800e520:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800e522:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d111      	bne.n	800e54e <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800e52a:	7cfb      	ldrb	r3, [r7, #19]
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d00e      	beq.n	800e54e <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	6a1b      	ldr	r3, [r3, #32]
 800e534:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800e536:	68bb      	ldr	r3, [r7, #8]
 800e538:	8a9b      	ldrh	r3, [r3, #20]
 800e53a:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800e53c:	69bb      	ldr	r3, [r7, #24]
 800e53e:	fb02 f303 	mul.w	r3, r2, r3
 800e542:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800e544:	697b      	ldr	r3, [r7, #20]
 800e546:	3380      	adds	r3, #128	; 0x80
 800e548:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800e54e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e552:	4618      	mov	r0, r3
 800e554:	3720      	adds	r7, #32
 800e556:	46bd      	mov	sp, r7
 800e558:	bd80      	pop	{r7, pc}

0800e55a <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800e55a:	b580      	push	{r7, lr}
 800e55c:	b086      	sub	sp, #24
 800e55e:	af00      	add	r7, sp, #0
 800e560:	60f8      	str	r0, [r7, #12]
 800e562:	60b9      	str	r1, [r7, #8]
 800e564:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e566:	2300      	movs	r3, #0
 800e568:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800e56a:	68bb      	ldr	r3, [r7, #8]
 800e56c:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800e572:	f107 0310 	add.w	r3, r7, #16
 800e576:	461a      	mov	r2, r3
 800e578:	68b9      	ldr	r1, [r7, #8]
 800e57a:	68f8      	ldr	r0, [r7, #12]
 800e57c:	f7ff ffbe 	bl	800e4fc <VL53L0X_get_total_xtalk_rate>
 800e580:	4603      	mov	r3, r0
 800e582:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800e584:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d105      	bne.n	800e598 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	681a      	ldr	r2, [r3, #0]
 800e590:	693b      	ldr	r3, [r7, #16]
 800e592:	441a      	add	r2, r3
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	601a      	str	r2, [r3, #0]

	return Status;
 800e598:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e59c:	4618      	mov	r0, r3
 800e59e:	3718      	adds	r7, #24
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	bd80      	pop	{r7, pc}

0800e5a4 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	b09a      	sub	sp, #104	; 0x68
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	60f8      	str	r0, [r7, #12]
 800e5ac:	60b9      	str	r1, [r7, #8]
 800e5ae:	607a      	str	r2, [r7, #4]
 800e5b0:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800e5b2:	2312      	movs	r3, #18
 800e5b4:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800e5b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e5ba:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800e5bc:	2342      	movs	r3, #66	; 0x42
 800e5be:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800e5c0:	2306      	movs	r3, #6
 800e5c2:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800e5c4:	2307      	movs	r3, #7
 800e5c6:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e5c8:	2300      	movs	r3, #0
 800e5ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 800e5d4:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800e5dc:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800e5de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e5e2:	fb02 f303 	mul.w	r3, r2, r3
 800e5e6:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800e5e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5ea:	3380      	adds	r3, #128	; 0x80
 800e5ec:	0a1b      	lsrs	r3, r3, #8
 800e5ee:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800e5f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e5f4:	fb02 f303 	mul.w	r3, r2, r3
 800e5f8:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	2b00      	cmp	r3, #0
 800e602:	d01a      	beq.n	800e63a <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800e604:	68bb      	ldr	r3, [r7, #8]
 800e606:	029b      	lsls	r3, r3, #10
 800e608:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800e60e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e610:	4413      	add	r3, r2
 800e612:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800e614:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	fbb2 f3f3 	udiv	r3, r2, r3
 800e61c:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800e61e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e620:	4613      	mov	r3, r2
 800e622:	005b      	lsls	r3, r3, #1
 800e624:	4413      	add	r3, r2
 800e626:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800e628:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e62a:	fb03 f303 	mul.w	r3, r3, r3
 800e62e:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800e630:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e632:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e636:	0c1b      	lsrs	r3, r3, #16
 800e638:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800e63a:	683b      	ldr	r3, [r7, #0]
 800e63c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e63e:	fb02 f303 	mul.w	r3, r2, r3
 800e642:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800e644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e646:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e64a:	0c1b      	lsrs	r3, r3, #16
 800e64c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800e64e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e650:	fb03 f303 	mul.w	r3, r3, r3
 800e654:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800e656:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e658:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e65c:	0c1b      	lsrs	r3, r3, #16
 800e65e:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800e660:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e662:	085a      	lsrs	r2, r3, #1
 800e664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e666:	441a      	add	r2, r3
 800e668:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e66a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e66e:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800e670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e672:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e674:	fb02 f303 	mul.w	r3, r2, r3
 800e678:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800e67a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e67c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e680:	d302      	bcc.n	800e688 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800e682:	4b54      	ldr	r3, [pc, #336]	; (800e7d4 <VL53L0X_calc_dmax+0x230>)
 800e684:	663b      	str	r3, [r7, #96]	; 0x60
 800e686:	e015      	b.n	800e6b4 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800e688:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e68a:	085a      	lsrs	r2, r3, #1
 800e68c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e68e:	441a      	add	r2, r3
 800e690:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e692:	fbb2 f3f3 	udiv	r3, r2, r3
 800e696:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800e698:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e69a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e69c:	fb02 f303 	mul.w	r3, r2, r3
 800e6a0:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800e6a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e6a4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e6a8:	0c1b      	lsrs	r3, r3, #16
 800e6aa:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800e6ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e6ae:	fb03 f303 	mul.w	r3, r3, r3
 800e6b2:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800e6b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e6b6:	039b      	lsls	r3, r3, #14
 800e6b8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800e6bc:	4a46      	ldr	r2, [pc, #280]	; (800e7d8 <VL53L0X_calc_dmax+0x234>)
 800e6be:	fba2 2303 	umull	r2, r3, r2, r3
 800e6c2:	099b      	lsrs	r3, r3, #6
 800e6c4:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800e6c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6c8:	fb03 f303 	mul.w	r3, r3, r3
 800e6cc:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800e6ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e6d0:	fb03 f303 	mul.w	r3, r3, r3
 800e6d4:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800e6d6:	6a3b      	ldr	r3, [r7, #32]
 800e6d8:	3308      	adds	r3, #8
 800e6da:	091b      	lsrs	r3, r3, #4
 800e6dc:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800e6de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e6e0:	6a3b      	ldr	r3, [r7, #32]
 800e6e2:	1ad3      	subs	r3, r2, r3
 800e6e4:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800e6e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e6e8:	4613      	mov	r3, r2
 800e6ea:	005b      	lsls	r3, r3, #1
 800e6ec:	4413      	add	r3, r2
 800e6ee:	011b      	lsls	r3, r3, #4
 800e6f0:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800e6f2:	69fb      	ldr	r3, [r7, #28]
 800e6f4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800e6f8:	0b9b      	lsrs	r3, r3, #14
 800e6fa:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800e6fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e6fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e700:	4413      	add	r3, r2
 800e702:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800e704:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e706:	085b      	lsrs	r3, r3, #1
 800e708:	69ba      	ldr	r2, [r7, #24]
 800e70a:	4413      	add	r3, r2
 800e70c:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800e70e:	69ba      	ldr	r2, [r7, #24]
 800e710:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e712:	fbb2 f3f3 	udiv	r3, r2, r3
 800e716:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800e718:	69bb      	ldr	r3, [r7, #24]
 800e71a:	039b      	lsls	r3, r3, #14
 800e71c:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800e71e:	69fb      	ldr	r3, [r7, #28]
 800e720:	085b      	lsrs	r3, r3, #1
 800e722:	69ba      	ldr	r2, [r7, #24]
 800e724:	4413      	add	r3, r2
 800e726:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800e728:	69ba      	ldr	r2, [r7, #24]
 800e72a:	69fb      	ldr	r3, [r7, #28]
 800e72c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e730:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800e732:	69bb      	ldr	r3, [r7, #24]
 800e734:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e736:	fb02 f303 	mul.w	r3, r2, r3
 800e73a:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800e73c:	69bb      	ldr	r3, [r7, #24]
 800e73e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800e742:	4a25      	ldr	r2, [pc, #148]	; (800e7d8 <VL53L0X_calc_dmax+0x234>)
 800e744:	fba2 2303 	umull	r2, r3, r2, r3
 800e748:	099b      	lsrs	r3, r3, #6
 800e74a:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800e74c:	69bb      	ldr	r3, [r7, #24]
 800e74e:	011b      	lsls	r3, r3, #4
 800e750:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800e752:	69bb      	ldr	r3, [r7, #24]
 800e754:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800e758:	4a1f      	ldr	r2, [pc, #124]	; (800e7d8 <VL53L0X_calc_dmax+0x234>)
 800e75a:	fba2 2303 	umull	r2, r3, r2, r3
 800e75e:	099b      	lsrs	r3, r3, #6
 800e760:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800e762:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e764:	3380      	adds	r3, #128	; 0x80
 800e766:	0a1b      	lsrs	r3, r3, #8
 800e768:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800e76a:	697b      	ldr	r3, [r7, #20]
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d008      	beq.n	800e782 <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800e770:	697b      	ldr	r3, [r7, #20]
 800e772:	085a      	lsrs	r2, r3, #1
 800e774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e776:	441a      	add	r2, r3
 800e778:	697b      	ldr	r3, [r7, #20]
 800e77a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e77e:	65bb      	str	r3, [r7, #88]	; 0x58
 800e780:	e001      	b.n	800e786 <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800e782:	2300      	movs	r3, #0
 800e784:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800e786:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800e788:	f7fe f9ba 	bl	800cb00 <VL53L0X_isqrt>
 800e78c:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800e78e:	69bb      	ldr	r3, [r7, #24]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d008      	beq.n	800e7a6 <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800e794:	69bb      	ldr	r3, [r7, #24]
 800e796:	085a      	lsrs	r2, r3, #1
 800e798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e79a:	441a      	add	r2, r3
 800e79c:	69bb      	ldr	r3, [r7, #24]
 800e79e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e7a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e7a4:	e001      	b.n	800e7aa <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800e7aa:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800e7ac:	f7fe f9a8 	bl	800cb00 <VL53L0X_isqrt>
 800e7b0:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800e7b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e7b4:	693a      	ldr	r2, [r7, #16]
 800e7b6:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800e7b8:	693a      	ldr	r2, [r7, #16]
 800e7ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e7bc:	429a      	cmp	r2, r3
 800e7be:	d902      	bls.n	800e7c6 <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800e7c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e7c2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e7c4:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800e7c6:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	3768      	adds	r7, #104	; 0x68
 800e7ce:	46bd      	mov	sp, r7
 800e7d0:	bd80      	pop	{r7, pc}
 800e7d2:	bf00      	nop
 800e7d4:	fff00000 	.word	0xfff00000
 800e7d8:	10624dd3 	.word	0x10624dd3

0800e7dc <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	b0b4      	sub	sp, #208	; 0xd0
 800e7e0:	af04      	add	r7, sp, #16
 800e7e2:	60f8      	str	r0, [r7, #12]
 800e7e4:	60b9      	str	r1, [r7, #8]
 800e7e6:	607a      	str	r2, [r7, #4]
 800e7e8:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800e7ea:	f44f 7348 	mov.w	r3, #800	; 0x320
 800e7ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800e7f2:	f44f 7316 	mov.w	r3, #600	; 0x258
 800e7f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800e7fa:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800e7fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800e802:	f241 235c 	movw	r3, #4700	; 0x125c
 800e806:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800e80a:	4b9e      	ldr	r3, [pc, #632]	; (800ea84 <VL53L0X_calc_sigma_estimate+0x2a8>)
 800e80c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800e810:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800e814:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800e816:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800e81a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e81e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e822:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800e824:	4b98      	ldr	r3, [pc, #608]	; (800ea88 <VL53L0X_calc_sigma_estimate+0x2ac>)
 800e826:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800e828:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e82c:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800e82e:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800e832:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800e834:	f240 6377 	movw	r3, #1655	; 0x677
 800e838:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e83a:	2300      	movs	r3, #0
 800e83c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	6a1b      	ldr	r3, [r3, #32]
 800e844:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800e846:	68bb      	ldr	r3, [r7, #8]
 800e848:	691b      	ldr	r3, [r3, #16]
 800e84a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e84e:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800e852:	0c1b      	lsrs	r3, r3, #16
 800e854:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800e856:	68bb      	ldr	r3, [r7, #8]
 800e858:	68db      	ldr	r3, [r3, #12]
 800e85a:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800e85c:	f107 0310 	add.w	r3, r7, #16
 800e860:	461a      	mov	r2, r3
 800e862:	68b9      	ldr	r1, [r7, #8]
 800e864:	68f8      	ldr	r0, [r7, #12]
 800e866:	f7ff fe78 	bl	800e55a <VL53L0X_get_total_signal_rate>
 800e86a:	4603      	mov	r3, r0
 800e86c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800e870:	f107 0314 	add.w	r3, r7, #20
 800e874:	461a      	mov	r2, r3
 800e876:	68b9      	ldr	r1, [r7, #8]
 800e878:	68f8      	ldr	r0, [r7, #12]
 800e87a:	f7ff fe3f 	bl	800e4fc <VL53L0X_get_total_xtalk_rate>
 800e87e:	4603      	mov	r3, r0
 800e880:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800e884:	693b      	ldr	r3, [r7, #16]
 800e886:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e88a:	fb02 f303 	mul.w	r3, r2, r3
 800e88e:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800e890:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e892:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e896:	0c1b      	lsrs	r3, r3, #16
 800e898:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800e89a:	697b      	ldr	r3, [r7, #20]
 800e89c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e8a0:	fb02 f303 	mul.w	r3, r2, r3
 800e8a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800e8a8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800e8ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e8ae:	429a      	cmp	r2, r3
 800e8b0:	d902      	bls.n	800e8b8 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800e8b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e8b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800e8b8:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d168      	bne.n	800e992 <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800e8c6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800e8d0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800e8d4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800e8d8:	461a      	mov	r2, r3
 800e8da:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800e8de:	68f8      	ldr	r0, [r7, #12]
 800e8e0:	f7fe feb2 	bl	800d648 <VL53L0X_calc_timeout_mclks>
 800e8e4:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e8ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800e8f6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800e8fa:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800e8fe:	461a      	mov	r2, r3
 800e900:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800e904:	68f8      	ldr	r0, [r7, #12]
 800e906:	f7fe fe9f 	bl	800d648 <VL53L0X_calc_timeout_mclks>
 800e90a:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800e90c:	2303      	movs	r3, #3
 800e90e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800e912:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800e916:	2b08      	cmp	r3, #8
 800e918:	d102      	bne.n	800e920 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800e91a:	2302      	movs	r3, #2
 800e91c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800e920:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e922:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e924:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800e926:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800e92a:	fb02 f303 	mul.w	r3, r2, r3
 800e92e:	02db      	lsls	r3, r3, #11
 800e930:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800e934:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e938:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800e93c:	4a53      	ldr	r2, [pc, #332]	; (800ea8c <VL53L0X_calc_sigma_estimate+0x2b0>)
 800e93e:	fba2 2303 	umull	r2, r3, r2, r3
 800e942:	099b      	lsrs	r3, r3, #6
 800e944:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800e948:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e94c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e94e:	fb02 f303 	mul.w	r3, r2, r3
 800e952:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800e956:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e95a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800e95e:	4a4b      	ldr	r2, [pc, #300]	; (800ea8c <VL53L0X_calc_sigma_estimate+0x2b0>)
 800e960:	fba2 2303 	umull	r2, r3, r2, r3
 800e964:	099b      	lsrs	r3, r3, #6
 800e966:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800e96a:	693b      	ldr	r3, [r7, #16]
 800e96c:	3380      	adds	r3, #128	; 0x80
 800e96e:	0a1b      	lsrs	r3, r3, #8
 800e970:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800e972:	693a      	ldr	r2, [r7, #16]
 800e974:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e978:	fb02 f303 	mul.w	r3, r2, r3
 800e97c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800e980:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e984:	3380      	adds	r3, #128	; 0x80
 800e986:	0a1b      	lsrs	r3, r3, #8
 800e988:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800e98c:	693b      	ldr	r3, [r7, #16]
 800e98e:	021b      	lsls	r3, r3, #8
 800e990:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800e992:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800e996:	2b00      	cmp	r3, #0
 800e998:	d002      	beq.n	800e9a0 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800e99a:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800e99e:	e15e      	b.n	800ec5e <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 800e9a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d10c      	bne.n	800e9c0 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e9ac:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e9b4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800e9b8:	683b      	ldr	r3, [r7, #0]
 800e9ba:	2200      	movs	r2, #0
 800e9bc:	601a      	str	r2, [r3, #0]
 800e9be:	e14c      	b.n	800ec5a <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800e9c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d102      	bne.n	800e9ce <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800e9c8:	2301      	movs	r3, #1
 800e9ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800e9ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e9d2:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800e9d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e9d6:	041a      	lsls	r2, r3, #16
 800e9d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e9da:	fbb2 f3f3 	udiv	r3, r2, r3
 800e9de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800e9e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e9e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e9e8:	429a      	cmp	r2, r3
 800e9ea:	d902      	bls.n	800e9f2 <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800e9ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e9ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800e9f2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e9f6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800e9fa:	fb02 f303 	mul.w	r3, r2, r3
 800e9fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800ea02:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800ea06:	4613      	mov	r3, r2
 800ea08:	005b      	lsls	r3, r3, #1
 800ea0a:	4413      	add	r3, r2
 800ea0c:	009b      	lsls	r3, r3, #2
 800ea0e:	4618      	mov	r0, r3
 800ea10:	f7fe f876 	bl	800cb00 <VL53L0X_isqrt>
 800ea14:	4603      	mov	r3, r0
 800ea16:	005b      	lsls	r3, r3, #1
 800ea18:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800ea1a:	68bb      	ldr	r3, [r7, #8]
 800ea1c:	891b      	ldrh	r3, [r3, #8]
 800ea1e:	461a      	mov	r2, r3
 800ea20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ea22:	fb02 f303 	mul.w	r3, r2, r3
 800ea26:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800ea28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ea2a:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800ea2c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ea30:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800ea32:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800ea34:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800ea38:	4a14      	ldr	r2, [pc, #80]	; (800ea8c <VL53L0X_calc_sigma_estimate+0x2b0>)
 800ea3a:	fba2 2303 	umull	r2, r3, r2, r3
 800ea3e:	099b      	lsrs	r3, r3, #6
 800ea40:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800ea42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ea44:	041b      	lsls	r3, r3, #16
 800ea46:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800ea4a:	4a10      	ldr	r2, [pc, #64]	; (800ea8c <VL53L0X_calc_sigma_estimate+0x2b0>)
 800ea4c:	fba2 2303 	umull	r2, r3, r2, r3
 800ea50:	099b      	lsrs	r3, r3, #6
 800ea52:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800ea54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea56:	021b      	lsls	r3, r3, #8
 800ea58:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800ea5a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ea5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea5e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	bfb8      	it	lt
 800ea66:	425b      	neglt	r3, r3
 800ea68:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800ea6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea6c:	021b      	lsls	r3, r3, #8
 800ea6e:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800ea70:	68bb      	ldr	r3, [r7, #8]
 800ea72:	7e1b      	ldrb	r3, [r3, #24]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d00b      	beq.n	800ea90 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800ea78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ea7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ea80:	e033      	b.n	800eaea <VL53L0X_calc_sigma_estimate+0x30e>
 800ea82:	bf00      	nop
 800ea84:	028f87ae 	.word	0x028f87ae
 800ea88:	0006999a 	.word	0x0006999a
 800ea8c:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800ea90:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ea92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ea96:	fbb2 f3f3 	udiv	r3, r2, r3
 800ea9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800ea9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eaa0:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800eaa4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800eaa8:	fb02 f303 	mul.w	r3, r2, r3
 800eaac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800eab0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800eab4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800eab6:	4413      	add	r3, r2
 800eab8:	0c1b      	lsrs	r3, r3, #16
 800eaba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800eabe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800eac2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800eac6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800eaca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800eace:	085b      	lsrs	r3, r3, #1
 800ead0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800ead4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ead8:	fb03 f303 	mul.w	r3, r3, r3
 800eadc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800eae0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800eae4:	0b9b      	lsrs	r3, r3, #14
 800eae6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800eaea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800eaee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eaf0:	fb02 f303 	mul.w	r3, r2, r3
 800eaf4:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800eaf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaf8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800eafc:	0c1b      	lsrs	r3, r3, #16
 800eafe:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800eb00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb02:	fb03 f303 	mul.w	r3, r3, r3
 800eb06:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800eb08:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800eb0c:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800eb0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb10:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800eb14:	0c1b      	lsrs	r3, r3, #16
 800eb16:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800eb18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb1a:	fb03 f303 	mul.w	r3, r3, r3
 800eb1e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800eb20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb24:	4413      	add	r3, r2
 800eb26:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800eb28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eb2a:	f7fd ffe9 	bl	800cb00 <VL53L0X_isqrt>
 800eb2e:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800eb30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb32:	041b      	lsls	r3, r3, #16
 800eb34:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800eb36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb38:	3332      	adds	r3, #50	; 0x32
 800eb3a:	4a4b      	ldr	r2, [pc, #300]	; (800ec68 <VL53L0X_calc_sigma_estimate+0x48c>)
 800eb3c:	fba2 2303 	umull	r2, r3, r2, r3
 800eb40:	095a      	lsrs	r2, r3, #5
 800eb42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb44:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800eb4c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800eb50:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800eb54:	fb02 f303 	mul.w	r3, r2, r3
 800eb58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800eb5c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800eb60:	f241 3388 	movw	r3, #5000	; 0x1388
 800eb64:	4413      	add	r3, r2
 800eb66:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800eb6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800eb6e:	4a3f      	ldr	r2, [pc, #252]	; (800ec6c <VL53L0X_calc_sigma_estimate+0x490>)
 800eb70:	fba2 2303 	umull	r2, r3, r2, r3
 800eb74:	0b5b      	lsrs	r3, r3, #13
 800eb76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800eb7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800eb7e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800eb80:	429a      	cmp	r2, r3
 800eb82:	d902      	bls.n	800eb8a <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800eb84:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800eb86:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800eb8a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800eb8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800eb92:	4413      	add	r3, r2
 800eb94:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800eb98:	4a35      	ldr	r2, [pc, #212]	; (800ec70 <VL53L0X_calc_sigma_estimate+0x494>)
 800eb9a:	fba2 2303 	umull	r2, r3, r2, r3
 800eb9e:	099b      	lsrs	r3, r3, #6
 800eba0:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800eba2:	6a3b      	ldr	r3, [r7, #32]
 800eba4:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800eba6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ebaa:	441a      	add	r2, r3
 800ebac:	6a3b      	ldr	r3, [r7, #32]
 800ebae:	fbb2 f3f3 	udiv	r3, r2, r3
 800ebb2:	4618      	mov	r0, r3
 800ebb4:	f7fd ffa4 	bl	800cb00 <VL53L0X_isqrt>
 800ebb8:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800ebba:	69fb      	ldr	r3, [r7, #28]
 800ebbc:	021b      	lsls	r3, r3, #8
 800ebbe:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800ebc0:	69fb      	ldr	r3, [r7, #28]
 800ebc2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800ebc6:	4a2a      	ldr	r2, [pc, #168]	; (800ec70 <VL53L0X_calc_sigma_estimate+0x494>)
 800ebc8:	fba2 2303 	umull	r2, r3, r2, r3
 800ebcc:	099b      	lsrs	r3, r3, #6
 800ebce:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800ebd0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ebd4:	fb03 f303 	mul.w	r3, r3, r3
 800ebd8:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800ebda:	69fb      	ldr	r3, [r7, #28]
 800ebdc:	fb03 f303 	mul.w	r3, r3, r3
 800ebe0:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800ebe2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ebe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebe6:	4413      	add	r3, r2
 800ebe8:	4618      	mov	r0, r3
 800ebea:	f7fd ff89 	bl	800cb00 <VL53L0X_isqrt>
 800ebee:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800ebf0:	69bb      	ldr	r3, [r7, #24]
 800ebf2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ebf6:	fb02 f303 	mul.w	r3, r2, r3
 800ebfa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800ebfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d009      	beq.n	800ec18 <VL53L0X_calc_sigma_estimate+0x43c>
 800ec04:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d005      	beq.n	800ec18 <VL53L0X_calc_sigma_estimate+0x43c>
 800ec0c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800ec10:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ec14:	429a      	cmp	r2, r3
 800ec16:	d903      	bls.n	800ec20 <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800ec18:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ec1c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800ec26:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	681a      	ldr	r2, [r3, #0]
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800ec32:	6939      	ldr	r1, [r7, #16]
 800ec34:	683b      	ldr	r3, [r7, #0]
 800ec36:	9303      	str	r3, [sp, #12]
 800ec38:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ec3c:	9302      	str	r3, [sp, #8]
 800ec3e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ec42:	9301      	str	r3, [sp, #4]
 800ec44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec46:	9300      	str	r3, [sp, #0]
 800ec48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ec4c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ec4e:	68f8      	ldr	r0, [r7, #12]
 800ec50:	f7ff fca8 	bl	800e5a4 <VL53L0X_calc_dmax>
 800ec54:	4603      	mov	r3, r0
 800ec56:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ec5a:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800ec5e:	4618      	mov	r0, r3
 800ec60:	37c0      	adds	r7, #192	; 0xc0
 800ec62:	46bd      	mov	sp, r7
 800ec64:	bd80      	pop	{r7, pc}
 800ec66:	bf00      	nop
 800ec68:	51eb851f 	.word	0x51eb851f
 800ec6c:	d1b71759 	.word	0xd1b71759
 800ec70:	10624dd3 	.word	0x10624dd3

0800ec74 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800ec74:	b580      	push	{r7, lr}
 800ec76:	b090      	sub	sp, #64	; 0x40
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	60f8      	str	r0, [r7, #12]
 800ec7c:	607a      	str	r2, [r7, #4]
 800ec7e:	461a      	mov	r2, r3
 800ec80:	460b      	mov	r3, r1
 800ec82:	72fb      	strb	r3, [r7, #11]
 800ec84:	4613      	mov	r3, r2
 800ec86:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ec88:	2300      	movs	r3, #0
 800ec8a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800ec8e:	2300      	movs	r3, #0
 800ec90:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800ec94:	2300      	movs	r3, #0
 800ec96:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800eca0:	2300      	movs	r3, #0
 800eca2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800eca6:	2300      	movs	r3, #0
 800eca8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800ecac:	2300      	movs	r3, #0
 800ecae:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800ecb8:	2300      	movs	r3, #0
 800ecba:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800ecbe:	2300      	movs	r3, #0
 800ecc0:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800ecc2:	2300      	movs	r3, #0
 800ecc4:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800ecc6:	7afb      	ldrb	r3, [r7, #11]
 800ecc8:	10db      	asrs	r3, r3, #3
 800ecca:	b2db      	uxtb	r3, r3
 800eccc:	f003 030f 	and.w	r3, r3, #15
 800ecd0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800ecd4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d017      	beq.n	800ed0c <VL53L0X_get_pal_range_status+0x98>
 800ecdc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ece0:	2b05      	cmp	r3, #5
 800ece2:	d013      	beq.n	800ed0c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800ece4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ece8:	2b07      	cmp	r3, #7
 800ecea:	d00f      	beq.n	800ed0c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800ecec:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ecf0:	2b0c      	cmp	r3, #12
 800ecf2:	d00b      	beq.n	800ed0c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800ecf4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ecf8:	2b0d      	cmp	r3, #13
 800ecfa:	d007      	beq.n	800ed0c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800ecfc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ed00:	2b0e      	cmp	r3, #14
 800ed02:	d003      	beq.n	800ed0c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800ed04:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ed08:	2b0f      	cmp	r3, #15
 800ed0a:	d103      	bne.n	800ed14 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800ed0c:	2301      	movs	r3, #1
 800ed0e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800ed12:	e002      	b.n	800ed1a <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800ed14:	2300      	movs	r3, #0
 800ed16:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800ed1a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d109      	bne.n	800ed36 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800ed22:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800ed26:	461a      	mov	r2, r3
 800ed28:	2100      	movs	r1, #0
 800ed2a:	68f8      	ldr	r0, [r7, #12]
 800ed2c:	f7fc f9bc 	bl	800b0a8 <VL53L0X_GetLimitCheckEnable>
 800ed30:	4603      	mov	r3, r0
 800ed32:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800ed36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d02e      	beq.n	800ed9c <VL53L0X_get_pal_range_status+0x128>
 800ed3e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d12a      	bne.n	800ed9c <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800ed46:	f107 0310 	add.w	r3, r7, #16
 800ed4a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800ed4e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ed50:	68f8      	ldr	r0, [r7, #12]
 800ed52:	f7ff fd43 	bl	800e7dc <VL53L0X_calc_sigma_estimate>
 800ed56:	4603      	mov	r3, r0
 800ed58:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800ed5c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d103      	bne.n	800ed6c <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800ed64:	693b      	ldr	r3, [r7, #16]
 800ed66:	b29a      	uxth	r2, r3
 800ed68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed6a:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800ed6c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d113      	bne.n	800ed9c <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800ed74:	f107 0320 	add.w	r3, r7, #32
 800ed78:	461a      	mov	r2, r3
 800ed7a:	2100      	movs	r1, #0
 800ed7c:	68f8      	ldr	r0, [r7, #12]
 800ed7e:	f7fc fa19 	bl	800b1b4 <VL53L0X_GetLimitCheckValue>
 800ed82:	4603      	mov	r3, r0
 800ed84:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800ed88:	6a3b      	ldr	r3, [r7, #32]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d006      	beq.n	800ed9c <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800ed8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed90:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800ed92:	429a      	cmp	r2, r3
 800ed94:	d902      	bls.n	800ed9c <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800ed96:	2301      	movs	r3, #1
 800ed98:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800ed9c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d109      	bne.n	800edb8 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800eda4:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800eda8:	461a      	mov	r2, r3
 800edaa:	2102      	movs	r1, #2
 800edac:	68f8      	ldr	r0, [r7, #12]
 800edae:	f7fc f97b 	bl	800b0a8 <VL53L0X_GetLimitCheckEnable>
 800edb2:	4603      	mov	r3, r0
 800edb4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800edb8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d044      	beq.n	800ee4a <VL53L0X_get_pal_range_status+0x1d6>
 800edc0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d140      	bne.n	800ee4a <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800edc8:	f107 031c 	add.w	r3, r7, #28
 800edcc:	461a      	mov	r2, r3
 800edce:	2102      	movs	r1, #2
 800edd0:	68f8      	ldr	r0, [r7, #12]
 800edd2:	f7fc f9ef 	bl	800b1b4 <VL53L0X_GetLimitCheckValue>
 800edd6:	4603      	mov	r3, r0
 800edd8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800eddc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d107      	bne.n	800edf4 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800ede4:	2201      	movs	r2, #1
 800ede6:	21ff      	movs	r1, #255	; 0xff
 800ede8:	68f8      	ldr	r0, [r7, #12]
 800edea:	f000 f9bb 	bl	800f164 <VL53L0X_WrByte>
 800edee:	4603      	mov	r3, r0
 800edf0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800edf4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d109      	bne.n	800ee10 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800edfc:	f107 0316 	add.w	r3, r7, #22
 800ee00:	461a      	mov	r2, r3
 800ee02:	21b6      	movs	r1, #182	; 0xb6
 800ee04:	68f8      	ldr	r0, [r7, #12]
 800ee06:	f000 fa59 	bl	800f2bc <VL53L0X_RdWord>
 800ee0a:	4603      	mov	r3, r0
 800ee0c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800ee10:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d107      	bne.n	800ee28 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800ee18:	2200      	movs	r2, #0
 800ee1a:	21ff      	movs	r1, #255	; 0xff
 800ee1c:	68f8      	ldr	r0, [r7, #12]
 800ee1e:	f000 f9a1 	bl	800f164 <VL53L0X_WrByte>
 800ee22:	4603      	mov	r3, r0
 800ee24:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800ee28:	8afb      	ldrh	r3, [r7, #22]
 800ee2a:	025b      	lsls	r3, r3, #9
 800ee2c:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee32:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800ee36:	69fb      	ldr	r3, [r7, #28]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d006      	beq.n	800ee4a <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800ee3c:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800ee3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee40:	429a      	cmp	r2, r3
 800ee42:	d902      	bls.n	800ee4a <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800ee44:	2301      	movs	r3, #1
 800ee46:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800ee4a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d109      	bne.n	800ee66 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800ee52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ee56:	461a      	mov	r2, r3
 800ee58:	2103      	movs	r1, #3
 800ee5a:	68f8      	ldr	r0, [r7, #12]
 800ee5c:	f7fc f924 	bl	800b0a8 <VL53L0X_GetLimitCheckEnable>
 800ee60:	4603      	mov	r3, r0
 800ee62:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800ee66:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d023      	beq.n	800eeb6 <VL53L0X_get_pal_range_status+0x242>
 800ee6e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d11f      	bne.n	800eeb6 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800ee76:	893b      	ldrh	r3, [r7, #8]
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d102      	bne.n	800ee82 <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800ee7c:	2300      	movs	r3, #0
 800ee7e:	637b      	str	r3, [r7, #52]	; 0x34
 800ee80:	e005      	b.n	800ee8e <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	021a      	lsls	r2, r3, #8
 800ee86:	893b      	ldrh	r3, [r7, #8]
 800ee88:	fbb2 f3f3 	udiv	r3, r2, r3
 800ee8c:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800ee8e:	f107 0318 	add.w	r3, r7, #24
 800ee92:	461a      	mov	r2, r3
 800ee94:	2103      	movs	r1, #3
 800ee96:	68f8      	ldr	r0, [r7, #12]
 800ee98:	f7fc f98c 	bl	800b1b4 <VL53L0X_GetLimitCheckValue>
 800ee9c:	4603      	mov	r3, r0
 800ee9e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800eea2:	69bb      	ldr	r3, [r7, #24]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d006      	beq.n	800eeb6 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800eea8:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800eeaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eeac:	429a      	cmp	r2, r3
 800eeae:	d202      	bcs.n	800eeb6 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800eeb0:	2301      	movs	r3, #1
 800eeb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800eeb6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d14a      	bne.n	800ef54 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800eebe:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800eec2:	2b01      	cmp	r3, #1
 800eec4:	d103      	bne.n	800eece <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800eec6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eec8:	22ff      	movs	r2, #255	; 0xff
 800eeca:	701a      	strb	r2, [r3, #0]
 800eecc:	e042      	b.n	800ef54 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800eece:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800eed2:	2b01      	cmp	r3, #1
 800eed4:	d007      	beq.n	800eee6 <VL53L0X_get_pal_range_status+0x272>
 800eed6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800eeda:	2b02      	cmp	r3, #2
 800eedc:	d003      	beq.n	800eee6 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800eede:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800eee2:	2b03      	cmp	r3, #3
 800eee4:	d103      	bne.n	800eeee <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800eee6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eee8:	2205      	movs	r2, #5
 800eeea:	701a      	strb	r2, [r3, #0]
 800eeec:	e032      	b.n	800ef54 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800eeee:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800eef2:	2b06      	cmp	r3, #6
 800eef4:	d003      	beq.n	800eefe <VL53L0X_get_pal_range_status+0x28a>
 800eef6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800eefa:	2b09      	cmp	r3, #9
 800eefc:	d103      	bne.n	800ef06 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800eefe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef00:	2204      	movs	r2, #4
 800ef02:	701a      	strb	r2, [r3, #0]
 800ef04:	e026      	b.n	800ef54 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800ef06:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ef0a:	2b08      	cmp	r3, #8
 800ef0c:	d007      	beq.n	800ef1e <VL53L0X_get_pal_range_status+0x2aa>
 800ef0e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ef12:	2b0a      	cmp	r3, #10
 800ef14:	d003      	beq.n	800ef1e <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800ef16:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ef1a:	2b01      	cmp	r3, #1
 800ef1c:	d103      	bne.n	800ef26 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800ef1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef20:	2203      	movs	r2, #3
 800ef22:	701a      	strb	r2, [r3, #0]
 800ef24:	e016      	b.n	800ef54 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800ef26:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ef2a:	2b04      	cmp	r3, #4
 800ef2c:	d003      	beq.n	800ef36 <VL53L0X_get_pal_range_status+0x2c2>
 800ef2e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ef32:	2b01      	cmp	r3, #1
 800ef34:	d103      	bne.n	800ef3e <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800ef36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef38:	2202      	movs	r2, #2
 800ef3a:	701a      	strb	r2, [r3, #0]
 800ef3c:	e00a      	b.n	800ef54 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800ef3e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800ef42:	2b01      	cmp	r3, #1
 800ef44:	d103      	bne.n	800ef4e <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800ef46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef48:	2201      	movs	r2, #1
 800ef4a:	701a      	strb	r2, [r3, #0]
 800ef4c:	e002      	b.n	800ef54 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800ef4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef50:	2200      	movs	r2, #0
 800ef52:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800ef54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef56:	781b      	ldrb	r3, [r3, #0]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d102      	bne.n	800ef62 <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800ef5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef5e:	2200      	movs	r2, #0
 800ef60:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800ef62:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800ef66:	461a      	mov	r2, r3
 800ef68:	2101      	movs	r1, #1
 800ef6a:	68f8      	ldr	r0, [r7, #12]
 800ef6c:	f7fc f89c 	bl	800b0a8 <VL53L0X_GetLimitCheckEnable>
 800ef70:	4603      	mov	r3, r0
 800ef72:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800ef76:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d14f      	bne.n	800f01e <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800ef7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d003      	beq.n	800ef8e <VL53L0X_get_pal_range_status+0x31a>
 800ef86:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800ef8a:	2b01      	cmp	r3, #1
 800ef8c:	d103      	bne.n	800ef96 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800ef8e:	2301      	movs	r3, #1
 800ef90:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ef94:	e002      	b.n	800ef9c <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800ef96:	2300      	movs	r3, #0
 800ef98:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800efa2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800efa6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800efaa:	2b04      	cmp	r3, #4
 800efac:	d003      	beq.n	800efb6 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800efae:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d103      	bne.n	800efbe <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800efb6:	2301      	movs	r3, #1
 800efb8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800efbc:	e002      	b.n	800efc4 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800efbe:	2300      	movs	r3, #0
 800efc0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800efca:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800efce:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d003      	beq.n	800efde <VL53L0X_get_pal_range_status+0x36a>
 800efd6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800efda:	2b01      	cmp	r3, #1
 800efdc:	d103      	bne.n	800efe6 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800efde:	2301      	movs	r3, #1
 800efe0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800efe4:	e002      	b.n	800efec <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800efe6:	2300      	movs	r3, #0
 800efe8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800eff2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800eff6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800effa:	2b00      	cmp	r3, #0
 800effc:	d003      	beq.n	800f006 <VL53L0X_get_pal_range_status+0x392>
 800effe:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f002:	2b01      	cmp	r3, #1
 800f004:	d103      	bne.n	800f00e <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800f006:	2301      	movs	r3, #1
 800f008:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f00c:	e002      	b.n	800f014 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800f00e:	2300      	movs	r3, #0
 800f010:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800f01a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800f01e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800f022:	4618      	mov	r0, r3
 800f024:	3740      	adds	r7, #64	; 0x40
 800f026:	46bd      	mov	sp, r7
 800f028:	bd80      	pop	{r7, pc}

0800f02a <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800f02a:	b580      	push	{r7, lr}
 800f02c:	b088      	sub	sp, #32
 800f02e:	af02      	add	r7, sp, #8
 800f030:	60f8      	str	r0, [r7, #12]
 800f032:	60b9      	str	r1, [r7, #8]
 800f034:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	330a      	adds	r3, #10
 800f03a:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800f048:	b299      	uxth	r1, r3
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	b29a      	uxth	r2, r3
 800f04e:	697b      	ldr	r3, [r7, #20]
 800f050:	9300      	str	r3, [sp, #0]
 800f052:	4613      	mov	r3, r2
 800f054:	68ba      	ldr	r2, [r7, #8]
 800f056:	f7f4 fc2f 	bl	80038b8 <HAL_I2C_Master_Transmit>
 800f05a:	4603      	mov	r3, r0
 800f05c:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800f05e:	693b      	ldr	r3, [r7, #16]
}
 800f060:	4618      	mov	r0, r3
 800f062:	3718      	adds	r7, #24
 800f064:	46bd      	mov	sp, r7
 800f066:	bd80      	pop	{r7, pc}

0800f068 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800f068:	b580      	push	{r7, lr}
 800f06a:	b088      	sub	sp, #32
 800f06c:	af02      	add	r7, sp, #8
 800f06e:	60f8      	str	r0, [r7, #12]
 800f070:	60b9      	str	r1, [r7, #8]
 800f072:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	330a      	adds	r3, #10
 800f078:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800f086:	f043 0301 	orr.w	r3, r3, #1
 800f08a:	b2db      	uxtb	r3, r3
 800f08c:	b299      	uxth	r1, r3
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	b29a      	uxth	r2, r3
 800f092:	697b      	ldr	r3, [r7, #20]
 800f094:	9300      	str	r3, [sp, #0]
 800f096:	4613      	mov	r3, r2
 800f098:	68ba      	ldr	r2, [r7, #8]
 800f09a:	f7f4 fd01 	bl	8003aa0 <HAL_I2C_Master_Receive>
 800f09e:	4603      	mov	r3, r0
 800f0a0:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800f0a2:	693b      	ldr	r3, [r7, #16]
}
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	3718      	adds	r7, #24
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	bd80      	pop	{r7, pc}

0800f0ac <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800f0ac:	b580      	push	{r7, lr}
 800f0ae:	b086      	sub	sp, #24
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	60f8      	str	r0, [r7, #12]
 800f0b4:	607a      	str	r2, [r7, #4]
 800f0b6:	603b      	str	r3, [r7, #0]
 800f0b8:	460b      	mov	r3, r1
 800f0ba:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f0bc:	2300      	movs	r3, #0
 800f0be:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800f0c0:	683b      	ldr	r3, [r7, #0]
 800f0c2:	2b3f      	cmp	r3, #63	; 0x3f
 800f0c4:	d902      	bls.n	800f0cc <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800f0c6:	f06f 0303 	mvn.w	r3, #3
 800f0ca:	e016      	b.n	800f0fa <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800f0cc:	4a0d      	ldr	r2, [pc, #52]	; (800f104 <VL53L0X_WriteMulti+0x58>)
 800f0ce:	7afb      	ldrb	r3, [r7, #11]
 800f0d0:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800f0d2:	683a      	ldr	r2, [r7, #0]
 800f0d4:	6879      	ldr	r1, [r7, #4]
 800f0d6:	480c      	ldr	r0, [pc, #48]	; (800f108 <VL53L0X_WriteMulti+0x5c>)
 800f0d8:	f000 f99e 	bl	800f418 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800f0dc:	683b      	ldr	r3, [r7, #0]
 800f0de:	3301      	adds	r3, #1
 800f0e0:	461a      	mov	r2, r3
 800f0e2:	4908      	ldr	r1, [pc, #32]	; (800f104 <VL53L0X_WriteMulti+0x58>)
 800f0e4:	68f8      	ldr	r0, [r7, #12]
 800f0e6:	f7ff ffa0 	bl	800f02a <_I2CWrite>
 800f0ea:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800f0ec:	693b      	ldr	r3, [r7, #16]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d001      	beq.n	800f0f6 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800f0f2:	23ec      	movs	r3, #236	; 0xec
 800f0f4:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800f0f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f0fa:	4618      	mov	r0, r3
 800f0fc:	3718      	adds	r7, #24
 800f0fe:	46bd      	mov	sp, r7
 800f100:	bd80      	pop	{r7, pc}
 800f102:	bf00      	nop
 800f104:	200055dc 	.word	0x200055dc
 800f108:	200055dd 	.word	0x200055dd

0800f10c <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800f10c:	b580      	push	{r7, lr}
 800f10e:	b086      	sub	sp, #24
 800f110:	af00      	add	r7, sp, #0
 800f112:	60f8      	str	r0, [r7, #12]
 800f114:	607a      	str	r2, [r7, #4]
 800f116:	603b      	str	r3, [r7, #0]
 800f118:	460b      	mov	r3, r1
 800f11a:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f11c:	2300      	movs	r3, #0
 800f11e:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800f120:	f107 030b 	add.w	r3, r7, #11
 800f124:	2201      	movs	r2, #1
 800f126:	4619      	mov	r1, r3
 800f128:	68f8      	ldr	r0, [r7, #12]
 800f12a:	f7ff ff7e 	bl	800f02a <_I2CWrite>
 800f12e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800f130:	693b      	ldr	r3, [r7, #16]
 800f132:	2b00      	cmp	r3, #0
 800f134:	d002      	beq.n	800f13c <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800f136:	23ec      	movs	r3, #236	; 0xec
 800f138:	75fb      	strb	r3, [r7, #23]
        goto done;
 800f13a:	e00c      	b.n	800f156 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800f13c:	683a      	ldr	r2, [r7, #0]
 800f13e:	6879      	ldr	r1, [r7, #4]
 800f140:	68f8      	ldr	r0, [r7, #12]
 800f142:	f7ff ff91 	bl	800f068 <_I2CRead>
 800f146:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800f148:	693b      	ldr	r3, [r7, #16]
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d002      	beq.n	800f154 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800f14e:	23ec      	movs	r3, #236	; 0xec
 800f150:	75fb      	strb	r3, [r7, #23]
 800f152:	e000      	b.n	800f156 <VL53L0X_ReadMulti+0x4a>
    }
done:
 800f154:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800f156:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f15a:	4618      	mov	r0, r3
 800f15c:	3718      	adds	r7, #24
 800f15e:	46bd      	mov	sp, r7
 800f160:	bd80      	pop	{r7, pc}
	...

0800f164 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800f164:	b580      	push	{r7, lr}
 800f166:	b084      	sub	sp, #16
 800f168:	af00      	add	r7, sp, #0
 800f16a:	6078      	str	r0, [r7, #4]
 800f16c:	460b      	mov	r3, r1
 800f16e:	70fb      	strb	r3, [r7, #3]
 800f170:	4613      	mov	r3, r2
 800f172:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f174:	2300      	movs	r3, #0
 800f176:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800f178:	4a0b      	ldr	r2, [pc, #44]	; (800f1a8 <VL53L0X_WrByte+0x44>)
 800f17a:	78fb      	ldrb	r3, [r7, #3]
 800f17c:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800f17e:	4a0a      	ldr	r2, [pc, #40]	; (800f1a8 <VL53L0X_WrByte+0x44>)
 800f180:	78bb      	ldrb	r3, [r7, #2]
 800f182:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800f184:	2202      	movs	r2, #2
 800f186:	4908      	ldr	r1, [pc, #32]	; (800f1a8 <VL53L0X_WrByte+0x44>)
 800f188:	6878      	ldr	r0, [r7, #4]
 800f18a:	f7ff ff4e 	bl	800f02a <_I2CWrite>
 800f18e:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800f190:	68bb      	ldr	r3, [r7, #8]
 800f192:	2b00      	cmp	r3, #0
 800f194:	d001      	beq.n	800f19a <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800f196:	23ec      	movs	r3, #236	; 0xec
 800f198:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800f19a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f19e:	4618      	mov	r0, r3
 800f1a0:	3710      	adds	r7, #16
 800f1a2:	46bd      	mov	sp, r7
 800f1a4:	bd80      	pop	{r7, pc}
 800f1a6:	bf00      	nop
 800f1a8:	200055dc 	.word	0x200055dc

0800f1ac <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800f1ac:	b580      	push	{r7, lr}
 800f1ae:	b084      	sub	sp, #16
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	6078      	str	r0, [r7, #4]
 800f1b4:	460b      	mov	r3, r1
 800f1b6:	70fb      	strb	r3, [r7, #3]
 800f1b8:	4613      	mov	r3, r2
 800f1ba:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f1bc:	2300      	movs	r3, #0
 800f1be:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800f1c0:	4a0e      	ldr	r2, [pc, #56]	; (800f1fc <VL53L0X_WrWord+0x50>)
 800f1c2:	78fb      	ldrb	r3, [r7, #3]
 800f1c4:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800f1c6:	883b      	ldrh	r3, [r7, #0]
 800f1c8:	0a1b      	lsrs	r3, r3, #8
 800f1ca:	b29b      	uxth	r3, r3
 800f1cc:	b2da      	uxtb	r2, r3
 800f1ce:	4b0b      	ldr	r3, [pc, #44]	; (800f1fc <VL53L0X_WrWord+0x50>)
 800f1d0:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800f1d2:	883b      	ldrh	r3, [r7, #0]
 800f1d4:	b2da      	uxtb	r2, r3
 800f1d6:	4b09      	ldr	r3, [pc, #36]	; (800f1fc <VL53L0X_WrWord+0x50>)
 800f1d8:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800f1da:	2203      	movs	r2, #3
 800f1dc:	4907      	ldr	r1, [pc, #28]	; (800f1fc <VL53L0X_WrWord+0x50>)
 800f1de:	6878      	ldr	r0, [r7, #4]
 800f1e0:	f7ff ff23 	bl	800f02a <_I2CWrite>
 800f1e4:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800f1e6:	68bb      	ldr	r3, [r7, #8]
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d001      	beq.n	800f1f0 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800f1ec:	23ec      	movs	r3, #236	; 0xec
 800f1ee:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800f1f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	3710      	adds	r7, #16
 800f1f8:	46bd      	mov	sp, r7
 800f1fa:	bd80      	pop	{r7, pc}
 800f1fc:	200055dc 	.word	0x200055dc

0800f200 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800f200:	b580      	push	{r7, lr}
 800f202:	b084      	sub	sp, #16
 800f204:	af00      	add	r7, sp, #0
 800f206:	6078      	str	r0, [r7, #4]
 800f208:	4608      	mov	r0, r1
 800f20a:	4611      	mov	r1, r2
 800f20c:	461a      	mov	r2, r3
 800f20e:	4603      	mov	r3, r0
 800f210:	70fb      	strb	r3, [r7, #3]
 800f212:	460b      	mov	r3, r1
 800f214:	70bb      	strb	r3, [r7, #2]
 800f216:	4613      	mov	r3, r2
 800f218:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f21a:	2300      	movs	r3, #0
 800f21c:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800f21e:	f107 020e 	add.w	r2, r7, #14
 800f222:	78fb      	ldrb	r3, [r7, #3]
 800f224:	4619      	mov	r1, r3
 800f226:	6878      	ldr	r0, [r7, #4]
 800f228:	f000 f81e 	bl	800f268 <VL53L0X_RdByte>
 800f22c:	4603      	mov	r3, r0
 800f22e:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800f230:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d110      	bne.n	800f25a <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800f238:	7bba      	ldrb	r2, [r7, #14]
 800f23a:	78bb      	ldrb	r3, [r7, #2]
 800f23c:	4013      	ands	r3, r2
 800f23e:	b2da      	uxtb	r2, r3
 800f240:	787b      	ldrb	r3, [r7, #1]
 800f242:	4313      	orrs	r3, r2
 800f244:	b2db      	uxtb	r3, r3
 800f246:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800f248:	7bba      	ldrb	r2, [r7, #14]
 800f24a:	78fb      	ldrb	r3, [r7, #3]
 800f24c:	4619      	mov	r1, r3
 800f24e:	6878      	ldr	r0, [r7, #4]
 800f250:	f7ff ff88 	bl	800f164 <VL53L0X_WrByte>
 800f254:	4603      	mov	r3, r0
 800f256:	73fb      	strb	r3, [r7, #15]
 800f258:	e000      	b.n	800f25c <VL53L0X_UpdateByte+0x5c>
        goto done;
 800f25a:	bf00      	nop
done:
    return Status;
 800f25c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f260:	4618      	mov	r0, r3
 800f262:	3710      	adds	r7, #16
 800f264:	46bd      	mov	sp, r7
 800f266:	bd80      	pop	{r7, pc}

0800f268 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800f268:	b580      	push	{r7, lr}
 800f26a:	b086      	sub	sp, #24
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	60f8      	str	r0, [r7, #12]
 800f270:	460b      	mov	r3, r1
 800f272:	607a      	str	r2, [r7, #4]
 800f274:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f276:	2300      	movs	r3, #0
 800f278:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800f27a:	f107 030b 	add.w	r3, r7, #11
 800f27e:	2201      	movs	r2, #1
 800f280:	4619      	mov	r1, r3
 800f282:	68f8      	ldr	r0, [r7, #12]
 800f284:	f7ff fed1 	bl	800f02a <_I2CWrite>
 800f288:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800f28a:	693b      	ldr	r3, [r7, #16]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d002      	beq.n	800f296 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800f290:	23ec      	movs	r3, #236	; 0xec
 800f292:	75fb      	strb	r3, [r7, #23]
        goto done;
 800f294:	e00c      	b.n	800f2b0 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800f296:	2201      	movs	r2, #1
 800f298:	6879      	ldr	r1, [r7, #4]
 800f29a:	68f8      	ldr	r0, [r7, #12]
 800f29c:	f7ff fee4 	bl	800f068 <_I2CRead>
 800f2a0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800f2a2:	693b      	ldr	r3, [r7, #16]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d002      	beq.n	800f2ae <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800f2a8:	23ec      	movs	r3, #236	; 0xec
 800f2aa:	75fb      	strb	r3, [r7, #23]
 800f2ac:	e000      	b.n	800f2b0 <VL53L0X_RdByte+0x48>
    }
done:
 800f2ae:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800f2b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	3718      	adds	r7, #24
 800f2b8:	46bd      	mov	sp, r7
 800f2ba:	bd80      	pop	{r7, pc}

0800f2bc <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b086      	sub	sp, #24
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	60f8      	str	r0, [r7, #12]
 800f2c4:	460b      	mov	r3, r1
 800f2c6:	607a      	str	r2, [r7, #4]
 800f2c8:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f2ca:	2300      	movs	r3, #0
 800f2cc:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800f2ce:	f107 030b 	add.w	r3, r7, #11
 800f2d2:	2201      	movs	r2, #1
 800f2d4:	4619      	mov	r1, r3
 800f2d6:	68f8      	ldr	r0, [r7, #12]
 800f2d8:	f7ff fea7 	bl	800f02a <_I2CWrite>
 800f2dc:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800f2de:	693b      	ldr	r3, [r7, #16]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d002      	beq.n	800f2ea <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800f2e4:	23ec      	movs	r3, #236	; 0xec
 800f2e6:	75fb      	strb	r3, [r7, #23]
        goto done;
 800f2e8:	e017      	b.n	800f31a <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800f2ea:	2202      	movs	r2, #2
 800f2ec:	490e      	ldr	r1, [pc, #56]	; (800f328 <VL53L0X_RdWord+0x6c>)
 800f2ee:	68f8      	ldr	r0, [r7, #12]
 800f2f0:	f7ff feba 	bl	800f068 <_I2CRead>
 800f2f4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800f2f6:	693b      	ldr	r3, [r7, #16]
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d002      	beq.n	800f302 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800f2fc:	23ec      	movs	r3, #236	; 0xec
 800f2fe:	75fb      	strb	r3, [r7, #23]
        goto done;
 800f300:	e00b      	b.n	800f31a <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800f302:	4b09      	ldr	r3, [pc, #36]	; (800f328 <VL53L0X_RdWord+0x6c>)
 800f304:	781b      	ldrb	r3, [r3, #0]
 800f306:	b29b      	uxth	r3, r3
 800f308:	021b      	lsls	r3, r3, #8
 800f30a:	b29a      	uxth	r2, r3
 800f30c:	4b06      	ldr	r3, [pc, #24]	; (800f328 <VL53L0X_RdWord+0x6c>)
 800f30e:	785b      	ldrb	r3, [r3, #1]
 800f310:	b29b      	uxth	r3, r3
 800f312:	4413      	add	r3, r2
 800f314:	b29a      	uxth	r2, r3
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800f31a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f31e:	4618      	mov	r0, r3
 800f320:	3718      	adds	r7, #24
 800f322:	46bd      	mov	sp, r7
 800f324:	bd80      	pop	{r7, pc}
 800f326:	bf00      	nop
 800f328:	200055dc 	.word	0x200055dc

0800f32c <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800f32c:	b580      	push	{r7, lr}
 800f32e:	b086      	sub	sp, #24
 800f330:	af00      	add	r7, sp, #0
 800f332:	60f8      	str	r0, [r7, #12]
 800f334:	460b      	mov	r3, r1
 800f336:	607a      	str	r2, [r7, #4]
 800f338:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f33a:	2300      	movs	r3, #0
 800f33c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800f33e:	f107 030b 	add.w	r3, r7, #11
 800f342:	2201      	movs	r2, #1
 800f344:	4619      	mov	r1, r3
 800f346:	68f8      	ldr	r0, [r7, #12]
 800f348:	f7ff fe6f 	bl	800f02a <_I2CWrite>
 800f34c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800f34e:	693b      	ldr	r3, [r7, #16]
 800f350:	2b00      	cmp	r3, #0
 800f352:	d002      	beq.n	800f35a <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800f354:	23ec      	movs	r3, #236	; 0xec
 800f356:	75fb      	strb	r3, [r7, #23]
        goto done;
 800f358:	e01b      	b.n	800f392 <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800f35a:	2204      	movs	r2, #4
 800f35c:	4910      	ldr	r1, [pc, #64]	; (800f3a0 <VL53L0X_RdDWord+0x74>)
 800f35e:	68f8      	ldr	r0, [r7, #12]
 800f360:	f7ff fe82 	bl	800f068 <_I2CRead>
 800f364:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800f366:	693b      	ldr	r3, [r7, #16]
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d002      	beq.n	800f372 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800f36c:	23ec      	movs	r3, #236	; 0xec
 800f36e:	75fb      	strb	r3, [r7, #23]
        goto done;
 800f370:	e00f      	b.n	800f392 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800f372:	4b0b      	ldr	r3, [pc, #44]	; (800f3a0 <VL53L0X_RdDWord+0x74>)
 800f374:	781b      	ldrb	r3, [r3, #0]
 800f376:	061a      	lsls	r2, r3, #24
 800f378:	4b09      	ldr	r3, [pc, #36]	; (800f3a0 <VL53L0X_RdDWord+0x74>)
 800f37a:	785b      	ldrb	r3, [r3, #1]
 800f37c:	041b      	lsls	r3, r3, #16
 800f37e:	441a      	add	r2, r3
 800f380:	4b07      	ldr	r3, [pc, #28]	; (800f3a0 <VL53L0X_RdDWord+0x74>)
 800f382:	789b      	ldrb	r3, [r3, #2]
 800f384:	021b      	lsls	r3, r3, #8
 800f386:	4413      	add	r3, r2
 800f388:	4a05      	ldr	r2, [pc, #20]	; (800f3a0 <VL53L0X_RdDWord+0x74>)
 800f38a:	78d2      	ldrb	r2, [r2, #3]
 800f38c:	441a      	add	r2, r3
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800f392:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f396:	4618      	mov	r0, r3
 800f398:	3718      	adds	r7, #24
 800f39a:	46bd      	mov	sp, r7
 800f39c:	bd80      	pop	{r7, pc}
 800f39e:	bf00      	nop
 800f3a0:	200055dc 	.word	0x200055dc

0800f3a4 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800f3a4:	b580      	push	{r7, lr}
 800f3a6:	b084      	sub	sp, #16
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800f3ac:	2300      	movs	r3, #0
 800f3ae:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800f3b0:	2002      	movs	r0, #2
 800f3b2:	f7f3 fb87 	bl	8002ac4 <HAL_Delay>
    return status;
 800f3b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	3710      	adds	r7, #16
 800f3be:	46bd      	mov	sp, r7
 800f3c0:	bd80      	pop	{r7, pc}
	...

0800f3c4 <__errno>:
 800f3c4:	4b01      	ldr	r3, [pc, #4]	; (800f3cc <__errno+0x8>)
 800f3c6:	6818      	ldr	r0, [r3, #0]
 800f3c8:	4770      	bx	lr
 800f3ca:	bf00      	nop
 800f3cc:	200002ec 	.word	0x200002ec

0800f3d0 <__libc_init_array>:
 800f3d0:	b570      	push	{r4, r5, r6, lr}
 800f3d2:	4d0d      	ldr	r5, [pc, #52]	; (800f408 <__libc_init_array+0x38>)
 800f3d4:	4c0d      	ldr	r4, [pc, #52]	; (800f40c <__libc_init_array+0x3c>)
 800f3d6:	1b64      	subs	r4, r4, r5
 800f3d8:	10a4      	asrs	r4, r4, #2
 800f3da:	2600      	movs	r6, #0
 800f3dc:	42a6      	cmp	r6, r4
 800f3de:	d109      	bne.n	800f3f4 <__libc_init_array+0x24>
 800f3e0:	4d0b      	ldr	r5, [pc, #44]	; (800f410 <__libc_init_array+0x40>)
 800f3e2:	4c0c      	ldr	r4, [pc, #48]	; (800f414 <__libc_init_array+0x44>)
 800f3e4:	f005 f92c 	bl	8014640 <_init>
 800f3e8:	1b64      	subs	r4, r4, r5
 800f3ea:	10a4      	asrs	r4, r4, #2
 800f3ec:	2600      	movs	r6, #0
 800f3ee:	42a6      	cmp	r6, r4
 800f3f0:	d105      	bne.n	800f3fe <__libc_init_array+0x2e>
 800f3f2:	bd70      	pop	{r4, r5, r6, pc}
 800f3f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800f3f8:	4798      	blx	r3
 800f3fa:	3601      	adds	r6, #1
 800f3fc:	e7ee      	b.n	800f3dc <__libc_init_array+0xc>
 800f3fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800f402:	4798      	blx	r3
 800f404:	3601      	adds	r6, #1
 800f406:	e7f2      	b.n	800f3ee <__libc_init_array+0x1e>
 800f408:	080150e0 	.word	0x080150e0
 800f40c:	080150e0 	.word	0x080150e0
 800f410:	080150e0 	.word	0x080150e0
 800f414:	080150e4 	.word	0x080150e4

0800f418 <memcpy>:
 800f418:	440a      	add	r2, r1
 800f41a:	4291      	cmp	r1, r2
 800f41c:	f100 33ff 	add.w	r3, r0, #4294967295
 800f420:	d100      	bne.n	800f424 <memcpy+0xc>
 800f422:	4770      	bx	lr
 800f424:	b510      	push	{r4, lr}
 800f426:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f42a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f42e:	4291      	cmp	r1, r2
 800f430:	d1f9      	bne.n	800f426 <memcpy+0xe>
 800f432:	bd10      	pop	{r4, pc}

0800f434 <memset>:
 800f434:	4402      	add	r2, r0
 800f436:	4603      	mov	r3, r0
 800f438:	4293      	cmp	r3, r2
 800f43a:	d100      	bne.n	800f43e <memset+0xa>
 800f43c:	4770      	bx	lr
 800f43e:	f803 1b01 	strb.w	r1, [r3], #1
 800f442:	e7f9      	b.n	800f438 <memset+0x4>

0800f444 <__cvt>:
 800f444:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f448:	ec55 4b10 	vmov	r4, r5, d0
 800f44c:	2d00      	cmp	r5, #0
 800f44e:	460e      	mov	r6, r1
 800f450:	4619      	mov	r1, r3
 800f452:	462b      	mov	r3, r5
 800f454:	bfbb      	ittet	lt
 800f456:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f45a:	461d      	movlt	r5, r3
 800f45c:	2300      	movge	r3, #0
 800f45e:	232d      	movlt	r3, #45	; 0x2d
 800f460:	700b      	strb	r3, [r1, #0]
 800f462:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f464:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f468:	4691      	mov	r9, r2
 800f46a:	f023 0820 	bic.w	r8, r3, #32
 800f46e:	bfbc      	itt	lt
 800f470:	4622      	movlt	r2, r4
 800f472:	4614      	movlt	r4, r2
 800f474:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f478:	d005      	beq.n	800f486 <__cvt+0x42>
 800f47a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f47e:	d100      	bne.n	800f482 <__cvt+0x3e>
 800f480:	3601      	adds	r6, #1
 800f482:	2102      	movs	r1, #2
 800f484:	e000      	b.n	800f488 <__cvt+0x44>
 800f486:	2103      	movs	r1, #3
 800f488:	ab03      	add	r3, sp, #12
 800f48a:	9301      	str	r3, [sp, #4]
 800f48c:	ab02      	add	r3, sp, #8
 800f48e:	9300      	str	r3, [sp, #0]
 800f490:	ec45 4b10 	vmov	d0, r4, r5
 800f494:	4653      	mov	r3, sl
 800f496:	4632      	mov	r2, r6
 800f498:	f001 fec2 	bl	8011220 <_dtoa_r>
 800f49c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f4a0:	4607      	mov	r7, r0
 800f4a2:	d102      	bne.n	800f4aa <__cvt+0x66>
 800f4a4:	f019 0f01 	tst.w	r9, #1
 800f4a8:	d022      	beq.n	800f4f0 <__cvt+0xac>
 800f4aa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f4ae:	eb07 0906 	add.w	r9, r7, r6
 800f4b2:	d110      	bne.n	800f4d6 <__cvt+0x92>
 800f4b4:	783b      	ldrb	r3, [r7, #0]
 800f4b6:	2b30      	cmp	r3, #48	; 0x30
 800f4b8:	d10a      	bne.n	800f4d0 <__cvt+0x8c>
 800f4ba:	2200      	movs	r2, #0
 800f4bc:	2300      	movs	r3, #0
 800f4be:	4620      	mov	r0, r4
 800f4c0:	4629      	mov	r1, r5
 800f4c2:	f7f1 fb31 	bl	8000b28 <__aeabi_dcmpeq>
 800f4c6:	b918      	cbnz	r0, 800f4d0 <__cvt+0x8c>
 800f4c8:	f1c6 0601 	rsb	r6, r6, #1
 800f4cc:	f8ca 6000 	str.w	r6, [sl]
 800f4d0:	f8da 3000 	ldr.w	r3, [sl]
 800f4d4:	4499      	add	r9, r3
 800f4d6:	2200      	movs	r2, #0
 800f4d8:	2300      	movs	r3, #0
 800f4da:	4620      	mov	r0, r4
 800f4dc:	4629      	mov	r1, r5
 800f4de:	f7f1 fb23 	bl	8000b28 <__aeabi_dcmpeq>
 800f4e2:	b108      	cbz	r0, 800f4e8 <__cvt+0xa4>
 800f4e4:	f8cd 900c 	str.w	r9, [sp, #12]
 800f4e8:	2230      	movs	r2, #48	; 0x30
 800f4ea:	9b03      	ldr	r3, [sp, #12]
 800f4ec:	454b      	cmp	r3, r9
 800f4ee:	d307      	bcc.n	800f500 <__cvt+0xbc>
 800f4f0:	9b03      	ldr	r3, [sp, #12]
 800f4f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f4f4:	1bdb      	subs	r3, r3, r7
 800f4f6:	4638      	mov	r0, r7
 800f4f8:	6013      	str	r3, [r2, #0]
 800f4fa:	b004      	add	sp, #16
 800f4fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f500:	1c59      	adds	r1, r3, #1
 800f502:	9103      	str	r1, [sp, #12]
 800f504:	701a      	strb	r2, [r3, #0]
 800f506:	e7f0      	b.n	800f4ea <__cvt+0xa6>

0800f508 <__exponent>:
 800f508:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f50a:	4603      	mov	r3, r0
 800f50c:	2900      	cmp	r1, #0
 800f50e:	bfb8      	it	lt
 800f510:	4249      	neglt	r1, r1
 800f512:	f803 2b02 	strb.w	r2, [r3], #2
 800f516:	bfb4      	ite	lt
 800f518:	222d      	movlt	r2, #45	; 0x2d
 800f51a:	222b      	movge	r2, #43	; 0x2b
 800f51c:	2909      	cmp	r1, #9
 800f51e:	7042      	strb	r2, [r0, #1]
 800f520:	dd2a      	ble.n	800f578 <__exponent+0x70>
 800f522:	f10d 0407 	add.w	r4, sp, #7
 800f526:	46a4      	mov	ip, r4
 800f528:	270a      	movs	r7, #10
 800f52a:	46a6      	mov	lr, r4
 800f52c:	460a      	mov	r2, r1
 800f52e:	fb91 f6f7 	sdiv	r6, r1, r7
 800f532:	fb07 1516 	mls	r5, r7, r6, r1
 800f536:	3530      	adds	r5, #48	; 0x30
 800f538:	2a63      	cmp	r2, #99	; 0x63
 800f53a:	f104 34ff 	add.w	r4, r4, #4294967295
 800f53e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800f542:	4631      	mov	r1, r6
 800f544:	dcf1      	bgt.n	800f52a <__exponent+0x22>
 800f546:	3130      	adds	r1, #48	; 0x30
 800f548:	f1ae 0502 	sub.w	r5, lr, #2
 800f54c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800f550:	1c44      	adds	r4, r0, #1
 800f552:	4629      	mov	r1, r5
 800f554:	4561      	cmp	r1, ip
 800f556:	d30a      	bcc.n	800f56e <__exponent+0x66>
 800f558:	f10d 0209 	add.w	r2, sp, #9
 800f55c:	eba2 020e 	sub.w	r2, r2, lr
 800f560:	4565      	cmp	r5, ip
 800f562:	bf88      	it	hi
 800f564:	2200      	movhi	r2, #0
 800f566:	4413      	add	r3, r2
 800f568:	1a18      	subs	r0, r3, r0
 800f56a:	b003      	add	sp, #12
 800f56c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f56e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f572:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f576:	e7ed      	b.n	800f554 <__exponent+0x4c>
 800f578:	2330      	movs	r3, #48	; 0x30
 800f57a:	3130      	adds	r1, #48	; 0x30
 800f57c:	7083      	strb	r3, [r0, #2]
 800f57e:	70c1      	strb	r1, [r0, #3]
 800f580:	1d03      	adds	r3, r0, #4
 800f582:	e7f1      	b.n	800f568 <__exponent+0x60>

0800f584 <_printf_float>:
 800f584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f588:	ed2d 8b02 	vpush	{d8}
 800f58c:	b08d      	sub	sp, #52	; 0x34
 800f58e:	460c      	mov	r4, r1
 800f590:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f594:	4616      	mov	r6, r2
 800f596:	461f      	mov	r7, r3
 800f598:	4605      	mov	r5, r0
 800f59a:	f002 ffb1 	bl	8012500 <_localeconv_r>
 800f59e:	f8d0 a000 	ldr.w	sl, [r0]
 800f5a2:	4650      	mov	r0, sl
 800f5a4:	f7f0 fe3e 	bl	8000224 <strlen>
 800f5a8:	2300      	movs	r3, #0
 800f5aa:	930a      	str	r3, [sp, #40]	; 0x28
 800f5ac:	6823      	ldr	r3, [r4, #0]
 800f5ae:	9305      	str	r3, [sp, #20]
 800f5b0:	f8d8 3000 	ldr.w	r3, [r8]
 800f5b4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f5b8:	3307      	adds	r3, #7
 800f5ba:	f023 0307 	bic.w	r3, r3, #7
 800f5be:	f103 0208 	add.w	r2, r3, #8
 800f5c2:	f8c8 2000 	str.w	r2, [r8]
 800f5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5ca:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f5ce:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f5d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f5d6:	9307      	str	r3, [sp, #28]
 800f5d8:	f8cd 8018 	str.w	r8, [sp, #24]
 800f5dc:	ee08 0a10 	vmov	s16, r0
 800f5e0:	4b9f      	ldr	r3, [pc, #636]	; (800f860 <_printf_float+0x2dc>)
 800f5e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f5e6:	f04f 32ff 	mov.w	r2, #4294967295
 800f5ea:	f7f1 facf 	bl	8000b8c <__aeabi_dcmpun>
 800f5ee:	bb88      	cbnz	r0, 800f654 <_printf_float+0xd0>
 800f5f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f5f4:	4b9a      	ldr	r3, [pc, #616]	; (800f860 <_printf_float+0x2dc>)
 800f5f6:	f04f 32ff 	mov.w	r2, #4294967295
 800f5fa:	f7f1 faa9 	bl	8000b50 <__aeabi_dcmple>
 800f5fe:	bb48      	cbnz	r0, 800f654 <_printf_float+0xd0>
 800f600:	2200      	movs	r2, #0
 800f602:	2300      	movs	r3, #0
 800f604:	4640      	mov	r0, r8
 800f606:	4649      	mov	r1, r9
 800f608:	f7f1 fa98 	bl	8000b3c <__aeabi_dcmplt>
 800f60c:	b110      	cbz	r0, 800f614 <_printf_float+0x90>
 800f60e:	232d      	movs	r3, #45	; 0x2d
 800f610:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f614:	4b93      	ldr	r3, [pc, #588]	; (800f864 <_printf_float+0x2e0>)
 800f616:	4894      	ldr	r0, [pc, #592]	; (800f868 <_printf_float+0x2e4>)
 800f618:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f61c:	bf94      	ite	ls
 800f61e:	4698      	movls	r8, r3
 800f620:	4680      	movhi	r8, r0
 800f622:	2303      	movs	r3, #3
 800f624:	6123      	str	r3, [r4, #16]
 800f626:	9b05      	ldr	r3, [sp, #20]
 800f628:	f023 0204 	bic.w	r2, r3, #4
 800f62c:	6022      	str	r2, [r4, #0]
 800f62e:	f04f 0900 	mov.w	r9, #0
 800f632:	9700      	str	r7, [sp, #0]
 800f634:	4633      	mov	r3, r6
 800f636:	aa0b      	add	r2, sp, #44	; 0x2c
 800f638:	4621      	mov	r1, r4
 800f63a:	4628      	mov	r0, r5
 800f63c:	f000 f9d8 	bl	800f9f0 <_printf_common>
 800f640:	3001      	adds	r0, #1
 800f642:	f040 8090 	bne.w	800f766 <_printf_float+0x1e2>
 800f646:	f04f 30ff 	mov.w	r0, #4294967295
 800f64a:	b00d      	add	sp, #52	; 0x34
 800f64c:	ecbd 8b02 	vpop	{d8}
 800f650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f654:	4642      	mov	r2, r8
 800f656:	464b      	mov	r3, r9
 800f658:	4640      	mov	r0, r8
 800f65a:	4649      	mov	r1, r9
 800f65c:	f7f1 fa96 	bl	8000b8c <__aeabi_dcmpun>
 800f660:	b140      	cbz	r0, 800f674 <_printf_float+0xf0>
 800f662:	464b      	mov	r3, r9
 800f664:	2b00      	cmp	r3, #0
 800f666:	bfbc      	itt	lt
 800f668:	232d      	movlt	r3, #45	; 0x2d
 800f66a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f66e:	487f      	ldr	r0, [pc, #508]	; (800f86c <_printf_float+0x2e8>)
 800f670:	4b7f      	ldr	r3, [pc, #508]	; (800f870 <_printf_float+0x2ec>)
 800f672:	e7d1      	b.n	800f618 <_printf_float+0x94>
 800f674:	6863      	ldr	r3, [r4, #4]
 800f676:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f67a:	9206      	str	r2, [sp, #24]
 800f67c:	1c5a      	adds	r2, r3, #1
 800f67e:	d13f      	bne.n	800f700 <_printf_float+0x17c>
 800f680:	2306      	movs	r3, #6
 800f682:	6063      	str	r3, [r4, #4]
 800f684:	9b05      	ldr	r3, [sp, #20]
 800f686:	6861      	ldr	r1, [r4, #4]
 800f688:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f68c:	2300      	movs	r3, #0
 800f68e:	9303      	str	r3, [sp, #12]
 800f690:	ab0a      	add	r3, sp, #40	; 0x28
 800f692:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f696:	ab09      	add	r3, sp, #36	; 0x24
 800f698:	ec49 8b10 	vmov	d0, r8, r9
 800f69c:	9300      	str	r3, [sp, #0]
 800f69e:	6022      	str	r2, [r4, #0]
 800f6a0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f6a4:	4628      	mov	r0, r5
 800f6a6:	f7ff fecd 	bl	800f444 <__cvt>
 800f6aa:	9b06      	ldr	r3, [sp, #24]
 800f6ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f6ae:	2b47      	cmp	r3, #71	; 0x47
 800f6b0:	4680      	mov	r8, r0
 800f6b2:	d108      	bne.n	800f6c6 <_printf_float+0x142>
 800f6b4:	1cc8      	adds	r0, r1, #3
 800f6b6:	db02      	blt.n	800f6be <_printf_float+0x13a>
 800f6b8:	6863      	ldr	r3, [r4, #4]
 800f6ba:	4299      	cmp	r1, r3
 800f6bc:	dd41      	ble.n	800f742 <_printf_float+0x1be>
 800f6be:	f1ab 0b02 	sub.w	fp, fp, #2
 800f6c2:	fa5f fb8b 	uxtb.w	fp, fp
 800f6c6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f6ca:	d820      	bhi.n	800f70e <_printf_float+0x18a>
 800f6cc:	3901      	subs	r1, #1
 800f6ce:	465a      	mov	r2, fp
 800f6d0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f6d4:	9109      	str	r1, [sp, #36]	; 0x24
 800f6d6:	f7ff ff17 	bl	800f508 <__exponent>
 800f6da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f6dc:	1813      	adds	r3, r2, r0
 800f6de:	2a01      	cmp	r2, #1
 800f6e0:	4681      	mov	r9, r0
 800f6e2:	6123      	str	r3, [r4, #16]
 800f6e4:	dc02      	bgt.n	800f6ec <_printf_float+0x168>
 800f6e6:	6822      	ldr	r2, [r4, #0]
 800f6e8:	07d2      	lsls	r2, r2, #31
 800f6ea:	d501      	bpl.n	800f6f0 <_printf_float+0x16c>
 800f6ec:	3301      	adds	r3, #1
 800f6ee:	6123      	str	r3, [r4, #16]
 800f6f0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d09c      	beq.n	800f632 <_printf_float+0xae>
 800f6f8:	232d      	movs	r3, #45	; 0x2d
 800f6fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f6fe:	e798      	b.n	800f632 <_printf_float+0xae>
 800f700:	9a06      	ldr	r2, [sp, #24]
 800f702:	2a47      	cmp	r2, #71	; 0x47
 800f704:	d1be      	bne.n	800f684 <_printf_float+0x100>
 800f706:	2b00      	cmp	r3, #0
 800f708:	d1bc      	bne.n	800f684 <_printf_float+0x100>
 800f70a:	2301      	movs	r3, #1
 800f70c:	e7b9      	b.n	800f682 <_printf_float+0xfe>
 800f70e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f712:	d118      	bne.n	800f746 <_printf_float+0x1c2>
 800f714:	2900      	cmp	r1, #0
 800f716:	6863      	ldr	r3, [r4, #4]
 800f718:	dd0b      	ble.n	800f732 <_printf_float+0x1ae>
 800f71a:	6121      	str	r1, [r4, #16]
 800f71c:	b913      	cbnz	r3, 800f724 <_printf_float+0x1a0>
 800f71e:	6822      	ldr	r2, [r4, #0]
 800f720:	07d0      	lsls	r0, r2, #31
 800f722:	d502      	bpl.n	800f72a <_printf_float+0x1a6>
 800f724:	3301      	adds	r3, #1
 800f726:	440b      	add	r3, r1
 800f728:	6123      	str	r3, [r4, #16]
 800f72a:	65a1      	str	r1, [r4, #88]	; 0x58
 800f72c:	f04f 0900 	mov.w	r9, #0
 800f730:	e7de      	b.n	800f6f0 <_printf_float+0x16c>
 800f732:	b913      	cbnz	r3, 800f73a <_printf_float+0x1b6>
 800f734:	6822      	ldr	r2, [r4, #0]
 800f736:	07d2      	lsls	r2, r2, #31
 800f738:	d501      	bpl.n	800f73e <_printf_float+0x1ba>
 800f73a:	3302      	adds	r3, #2
 800f73c:	e7f4      	b.n	800f728 <_printf_float+0x1a4>
 800f73e:	2301      	movs	r3, #1
 800f740:	e7f2      	b.n	800f728 <_printf_float+0x1a4>
 800f742:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f746:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f748:	4299      	cmp	r1, r3
 800f74a:	db05      	blt.n	800f758 <_printf_float+0x1d4>
 800f74c:	6823      	ldr	r3, [r4, #0]
 800f74e:	6121      	str	r1, [r4, #16]
 800f750:	07d8      	lsls	r0, r3, #31
 800f752:	d5ea      	bpl.n	800f72a <_printf_float+0x1a6>
 800f754:	1c4b      	adds	r3, r1, #1
 800f756:	e7e7      	b.n	800f728 <_printf_float+0x1a4>
 800f758:	2900      	cmp	r1, #0
 800f75a:	bfd4      	ite	le
 800f75c:	f1c1 0202 	rsble	r2, r1, #2
 800f760:	2201      	movgt	r2, #1
 800f762:	4413      	add	r3, r2
 800f764:	e7e0      	b.n	800f728 <_printf_float+0x1a4>
 800f766:	6823      	ldr	r3, [r4, #0]
 800f768:	055a      	lsls	r2, r3, #21
 800f76a:	d407      	bmi.n	800f77c <_printf_float+0x1f8>
 800f76c:	6923      	ldr	r3, [r4, #16]
 800f76e:	4642      	mov	r2, r8
 800f770:	4631      	mov	r1, r6
 800f772:	4628      	mov	r0, r5
 800f774:	47b8      	blx	r7
 800f776:	3001      	adds	r0, #1
 800f778:	d12c      	bne.n	800f7d4 <_printf_float+0x250>
 800f77a:	e764      	b.n	800f646 <_printf_float+0xc2>
 800f77c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f780:	f240 80e0 	bls.w	800f944 <_printf_float+0x3c0>
 800f784:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f788:	2200      	movs	r2, #0
 800f78a:	2300      	movs	r3, #0
 800f78c:	f7f1 f9cc 	bl	8000b28 <__aeabi_dcmpeq>
 800f790:	2800      	cmp	r0, #0
 800f792:	d034      	beq.n	800f7fe <_printf_float+0x27a>
 800f794:	4a37      	ldr	r2, [pc, #220]	; (800f874 <_printf_float+0x2f0>)
 800f796:	2301      	movs	r3, #1
 800f798:	4631      	mov	r1, r6
 800f79a:	4628      	mov	r0, r5
 800f79c:	47b8      	blx	r7
 800f79e:	3001      	adds	r0, #1
 800f7a0:	f43f af51 	beq.w	800f646 <_printf_float+0xc2>
 800f7a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f7a8:	429a      	cmp	r2, r3
 800f7aa:	db02      	blt.n	800f7b2 <_printf_float+0x22e>
 800f7ac:	6823      	ldr	r3, [r4, #0]
 800f7ae:	07d8      	lsls	r0, r3, #31
 800f7b0:	d510      	bpl.n	800f7d4 <_printf_float+0x250>
 800f7b2:	ee18 3a10 	vmov	r3, s16
 800f7b6:	4652      	mov	r2, sl
 800f7b8:	4631      	mov	r1, r6
 800f7ba:	4628      	mov	r0, r5
 800f7bc:	47b8      	blx	r7
 800f7be:	3001      	adds	r0, #1
 800f7c0:	f43f af41 	beq.w	800f646 <_printf_float+0xc2>
 800f7c4:	f04f 0800 	mov.w	r8, #0
 800f7c8:	f104 091a 	add.w	r9, r4, #26
 800f7cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f7ce:	3b01      	subs	r3, #1
 800f7d0:	4543      	cmp	r3, r8
 800f7d2:	dc09      	bgt.n	800f7e8 <_printf_float+0x264>
 800f7d4:	6823      	ldr	r3, [r4, #0]
 800f7d6:	079b      	lsls	r3, r3, #30
 800f7d8:	f100 8105 	bmi.w	800f9e6 <_printf_float+0x462>
 800f7dc:	68e0      	ldr	r0, [r4, #12]
 800f7de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f7e0:	4298      	cmp	r0, r3
 800f7e2:	bfb8      	it	lt
 800f7e4:	4618      	movlt	r0, r3
 800f7e6:	e730      	b.n	800f64a <_printf_float+0xc6>
 800f7e8:	2301      	movs	r3, #1
 800f7ea:	464a      	mov	r2, r9
 800f7ec:	4631      	mov	r1, r6
 800f7ee:	4628      	mov	r0, r5
 800f7f0:	47b8      	blx	r7
 800f7f2:	3001      	adds	r0, #1
 800f7f4:	f43f af27 	beq.w	800f646 <_printf_float+0xc2>
 800f7f8:	f108 0801 	add.w	r8, r8, #1
 800f7fc:	e7e6      	b.n	800f7cc <_printf_float+0x248>
 800f7fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f800:	2b00      	cmp	r3, #0
 800f802:	dc39      	bgt.n	800f878 <_printf_float+0x2f4>
 800f804:	4a1b      	ldr	r2, [pc, #108]	; (800f874 <_printf_float+0x2f0>)
 800f806:	2301      	movs	r3, #1
 800f808:	4631      	mov	r1, r6
 800f80a:	4628      	mov	r0, r5
 800f80c:	47b8      	blx	r7
 800f80e:	3001      	adds	r0, #1
 800f810:	f43f af19 	beq.w	800f646 <_printf_float+0xc2>
 800f814:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f818:	4313      	orrs	r3, r2
 800f81a:	d102      	bne.n	800f822 <_printf_float+0x29e>
 800f81c:	6823      	ldr	r3, [r4, #0]
 800f81e:	07d9      	lsls	r1, r3, #31
 800f820:	d5d8      	bpl.n	800f7d4 <_printf_float+0x250>
 800f822:	ee18 3a10 	vmov	r3, s16
 800f826:	4652      	mov	r2, sl
 800f828:	4631      	mov	r1, r6
 800f82a:	4628      	mov	r0, r5
 800f82c:	47b8      	blx	r7
 800f82e:	3001      	adds	r0, #1
 800f830:	f43f af09 	beq.w	800f646 <_printf_float+0xc2>
 800f834:	f04f 0900 	mov.w	r9, #0
 800f838:	f104 0a1a 	add.w	sl, r4, #26
 800f83c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f83e:	425b      	negs	r3, r3
 800f840:	454b      	cmp	r3, r9
 800f842:	dc01      	bgt.n	800f848 <_printf_float+0x2c4>
 800f844:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f846:	e792      	b.n	800f76e <_printf_float+0x1ea>
 800f848:	2301      	movs	r3, #1
 800f84a:	4652      	mov	r2, sl
 800f84c:	4631      	mov	r1, r6
 800f84e:	4628      	mov	r0, r5
 800f850:	47b8      	blx	r7
 800f852:	3001      	adds	r0, #1
 800f854:	f43f aef7 	beq.w	800f646 <_printf_float+0xc2>
 800f858:	f109 0901 	add.w	r9, r9, #1
 800f85c:	e7ee      	b.n	800f83c <_printf_float+0x2b8>
 800f85e:	bf00      	nop
 800f860:	7fefffff 	.word	0x7fefffff
 800f864:	08014bc8 	.word	0x08014bc8
 800f868:	08014bcc 	.word	0x08014bcc
 800f86c:	08014bd4 	.word	0x08014bd4
 800f870:	08014bd0 	.word	0x08014bd0
 800f874:	08015061 	.word	0x08015061
 800f878:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f87a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f87c:	429a      	cmp	r2, r3
 800f87e:	bfa8      	it	ge
 800f880:	461a      	movge	r2, r3
 800f882:	2a00      	cmp	r2, #0
 800f884:	4691      	mov	r9, r2
 800f886:	dc37      	bgt.n	800f8f8 <_printf_float+0x374>
 800f888:	f04f 0b00 	mov.w	fp, #0
 800f88c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f890:	f104 021a 	add.w	r2, r4, #26
 800f894:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f896:	9305      	str	r3, [sp, #20]
 800f898:	eba3 0309 	sub.w	r3, r3, r9
 800f89c:	455b      	cmp	r3, fp
 800f89e:	dc33      	bgt.n	800f908 <_printf_float+0x384>
 800f8a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f8a4:	429a      	cmp	r2, r3
 800f8a6:	db3b      	blt.n	800f920 <_printf_float+0x39c>
 800f8a8:	6823      	ldr	r3, [r4, #0]
 800f8aa:	07da      	lsls	r2, r3, #31
 800f8ac:	d438      	bmi.n	800f920 <_printf_float+0x39c>
 800f8ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f8b0:	9a05      	ldr	r2, [sp, #20]
 800f8b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f8b4:	1a9a      	subs	r2, r3, r2
 800f8b6:	eba3 0901 	sub.w	r9, r3, r1
 800f8ba:	4591      	cmp	r9, r2
 800f8bc:	bfa8      	it	ge
 800f8be:	4691      	movge	r9, r2
 800f8c0:	f1b9 0f00 	cmp.w	r9, #0
 800f8c4:	dc35      	bgt.n	800f932 <_printf_float+0x3ae>
 800f8c6:	f04f 0800 	mov.w	r8, #0
 800f8ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f8ce:	f104 0a1a 	add.w	sl, r4, #26
 800f8d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f8d6:	1a9b      	subs	r3, r3, r2
 800f8d8:	eba3 0309 	sub.w	r3, r3, r9
 800f8dc:	4543      	cmp	r3, r8
 800f8de:	f77f af79 	ble.w	800f7d4 <_printf_float+0x250>
 800f8e2:	2301      	movs	r3, #1
 800f8e4:	4652      	mov	r2, sl
 800f8e6:	4631      	mov	r1, r6
 800f8e8:	4628      	mov	r0, r5
 800f8ea:	47b8      	blx	r7
 800f8ec:	3001      	adds	r0, #1
 800f8ee:	f43f aeaa 	beq.w	800f646 <_printf_float+0xc2>
 800f8f2:	f108 0801 	add.w	r8, r8, #1
 800f8f6:	e7ec      	b.n	800f8d2 <_printf_float+0x34e>
 800f8f8:	4613      	mov	r3, r2
 800f8fa:	4631      	mov	r1, r6
 800f8fc:	4642      	mov	r2, r8
 800f8fe:	4628      	mov	r0, r5
 800f900:	47b8      	blx	r7
 800f902:	3001      	adds	r0, #1
 800f904:	d1c0      	bne.n	800f888 <_printf_float+0x304>
 800f906:	e69e      	b.n	800f646 <_printf_float+0xc2>
 800f908:	2301      	movs	r3, #1
 800f90a:	4631      	mov	r1, r6
 800f90c:	4628      	mov	r0, r5
 800f90e:	9205      	str	r2, [sp, #20]
 800f910:	47b8      	blx	r7
 800f912:	3001      	adds	r0, #1
 800f914:	f43f ae97 	beq.w	800f646 <_printf_float+0xc2>
 800f918:	9a05      	ldr	r2, [sp, #20]
 800f91a:	f10b 0b01 	add.w	fp, fp, #1
 800f91e:	e7b9      	b.n	800f894 <_printf_float+0x310>
 800f920:	ee18 3a10 	vmov	r3, s16
 800f924:	4652      	mov	r2, sl
 800f926:	4631      	mov	r1, r6
 800f928:	4628      	mov	r0, r5
 800f92a:	47b8      	blx	r7
 800f92c:	3001      	adds	r0, #1
 800f92e:	d1be      	bne.n	800f8ae <_printf_float+0x32a>
 800f930:	e689      	b.n	800f646 <_printf_float+0xc2>
 800f932:	9a05      	ldr	r2, [sp, #20]
 800f934:	464b      	mov	r3, r9
 800f936:	4442      	add	r2, r8
 800f938:	4631      	mov	r1, r6
 800f93a:	4628      	mov	r0, r5
 800f93c:	47b8      	blx	r7
 800f93e:	3001      	adds	r0, #1
 800f940:	d1c1      	bne.n	800f8c6 <_printf_float+0x342>
 800f942:	e680      	b.n	800f646 <_printf_float+0xc2>
 800f944:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f946:	2a01      	cmp	r2, #1
 800f948:	dc01      	bgt.n	800f94e <_printf_float+0x3ca>
 800f94a:	07db      	lsls	r3, r3, #31
 800f94c:	d538      	bpl.n	800f9c0 <_printf_float+0x43c>
 800f94e:	2301      	movs	r3, #1
 800f950:	4642      	mov	r2, r8
 800f952:	4631      	mov	r1, r6
 800f954:	4628      	mov	r0, r5
 800f956:	47b8      	blx	r7
 800f958:	3001      	adds	r0, #1
 800f95a:	f43f ae74 	beq.w	800f646 <_printf_float+0xc2>
 800f95e:	ee18 3a10 	vmov	r3, s16
 800f962:	4652      	mov	r2, sl
 800f964:	4631      	mov	r1, r6
 800f966:	4628      	mov	r0, r5
 800f968:	47b8      	blx	r7
 800f96a:	3001      	adds	r0, #1
 800f96c:	f43f ae6b 	beq.w	800f646 <_printf_float+0xc2>
 800f970:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f974:	2200      	movs	r2, #0
 800f976:	2300      	movs	r3, #0
 800f978:	f7f1 f8d6 	bl	8000b28 <__aeabi_dcmpeq>
 800f97c:	b9d8      	cbnz	r0, 800f9b6 <_printf_float+0x432>
 800f97e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f980:	f108 0201 	add.w	r2, r8, #1
 800f984:	3b01      	subs	r3, #1
 800f986:	4631      	mov	r1, r6
 800f988:	4628      	mov	r0, r5
 800f98a:	47b8      	blx	r7
 800f98c:	3001      	adds	r0, #1
 800f98e:	d10e      	bne.n	800f9ae <_printf_float+0x42a>
 800f990:	e659      	b.n	800f646 <_printf_float+0xc2>
 800f992:	2301      	movs	r3, #1
 800f994:	4652      	mov	r2, sl
 800f996:	4631      	mov	r1, r6
 800f998:	4628      	mov	r0, r5
 800f99a:	47b8      	blx	r7
 800f99c:	3001      	adds	r0, #1
 800f99e:	f43f ae52 	beq.w	800f646 <_printf_float+0xc2>
 800f9a2:	f108 0801 	add.w	r8, r8, #1
 800f9a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f9a8:	3b01      	subs	r3, #1
 800f9aa:	4543      	cmp	r3, r8
 800f9ac:	dcf1      	bgt.n	800f992 <_printf_float+0x40e>
 800f9ae:	464b      	mov	r3, r9
 800f9b0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f9b4:	e6dc      	b.n	800f770 <_printf_float+0x1ec>
 800f9b6:	f04f 0800 	mov.w	r8, #0
 800f9ba:	f104 0a1a 	add.w	sl, r4, #26
 800f9be:	e7f2      	b.n	800f9a6 <_printf_float+0x422>
 800f9c0:	2301      	movs	r3, #1
 800f9c2:	4642      	mov	r2, r8
 800f9c4:	e7df      	b.n	800f986 <_printf_float+0x402>
 800f9c6:	2301      	movs	r3, #1
 800f9c8:	464a      	mov	r2, r9
 800f9ca:	4631      	mov	r1, r6
 800f9cc:	4628      	mov	r0, r5
 800f9ce:	47b8      	blx	r7
 800f9d0:	3001      	adds	r0, #1
 800f9d2:	f43f ae38 	beq.w	800f646 <_printf_float+0xc2>
 800f9d6:	f108 0801 	add.w	r8, r8, #1
 800f9da:	68e3      	ldr	r3, [r4, #12]
 800f9dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f9de:	1a5b      	subs	r3, r3, r1
 800f9e0:	4543      	cmp	r3, r8
 800f9e2:	dcf0      	bgt.n	800f9c6 <_printf_float+0x442>
 800f9e4:	e6fa      	b.n	800f7dc <_printf_float+0x258>
 800f9e6:	f04f 0800 	mov.w	r8, #0
 800f9ea:	f104 0919 	add.w	r9, r4, #25
 800f9ee:	e7f4      	b.n	800f9da <_printf_float+0x456>

0800f9f0 <_printf_common>:
 800f9f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f9f4:	4616      	mov	r6, r2
 800f9f6:	4699      	mov	r9, r3
 800f9f8:	688a      	ldr	r2, [r1, #8]
 800f9fa:	690b      	ldr	r3, [r1, #16]
 800f9fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fa00:	4293      	cmp	r3, r2
 800fa02:	bfb8      	it	lt
 800fa04:	4613      	movlt	r3, r2
 800fa06:	6033      	str	r3, [r6, #0]
 800fa08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fa0c:	4607      	mov	r7, r0
 800fa0e:	460c      	mov	r4, r1
 800fa10:	b10a      	cbz	r2, 800fa16 <_printf_common+0x26>
 800fa12:	3301      	adds	r3, #1
 800fa14:	6033      	str	r3, [r6, #0]
 800fa16:	6823      	ldr	r3, [r4, #0]
 800fa18:	0699      	lsls	r1, r3, #26
 800fa1a:	bf42      	ittt	mi
 800fa1c:	6833      	ldrmi	r3, [r6, #0]
 800fa1e:	3302      	addmi	r3, #2
 800fa20:	6033      	strmi	r3, [r6, #0]
 800fa22:	6825      	ldr	r5, [r4, #0]
 800fa24:	f015 0506 	ands.w	r5, r5, #6
 800fa28:	d106      	bne.n	800fa38 <_printf_common+0x48>
 800fa2a:	f104 0a19 	add.w	sl, r4, #25
 800fa2e:	68e3      	ldr	r3, [r4, #12]
 800fa30:	6832      	ldr	r2, [r6, #0]
 800fa32:	1a9b      	subs	r3, r3, r2
 800fa34:	42ab      	cmp	r3, r5
 800fa36:	dc26      	bgt.n	800fa86 <_printf_common+0x96>
 800fa38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fa3c:	1e13      	subs	r3, r2, #0
 800fa3e:	6822      	ldr	r2, [r4, #0]
 800fa40:	bf18      	it	ne
 800fa42:	2301      	movne	r3, #1
 800fa44:	0692      	lsls	r2, r2, #26
 800fa46:	d42b      	bmi.n	800faa0 <_printf_common+0xb0>
 800fa48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fa4c:	4649      	mov	r1, r9
 800fa4e:	4638      	mov	r0, r7
 800fa50:	47c0      	blx	r8
 800fa52:	3001      	adds	r0, #1
 800fa54:	d01e      	beq.n	800fa94 <_printf_common+0xa4>
 800fa56:	6823      	ldr	r3, [r4, #0]
 800fa58:	68e5      	ldr	r5, [r4, #12]
 800fa5a:	6832      	ldr	r2, [r6, #0]
 800fa5c:	f003 0306 	and.w	r3, r3, #6
 800fa60:	2b04      	cmp	r3, #4
 800fa62:	bf08      	it	eq
 800fa64:	1aad      	subeq	r5, r5, r2
 800fa66:	68a3      	ldr	r3, [r4, #8]
 800fa68:	6922      	ldr	r2, [r4, #16]
 800fa6a:	bf0c      	ite	eq
 800fa6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fa70:	2500      	movne	r5, #0
 800fa72:	4293      	cmp	r3, r2
 800fa74:	bfc4      	itt	gt
 800fa76:	1a9b      	subgt	r3, r3, r2
 800fa78:	18ed      	addgt	r5, r5, r3
 800fa7a:	2600      	movs	r6, #0
 800fa7c:	341a      	adds	r4, #26
 800fa7e:	42b5      	cmp	r5, r6
 800fa80:	d11a      	bne.n	800fab8 <_printf_common+0xc8>
 800fa82:	2000      	movs	r0, #0
 800fa84:	e008      	b.n	800fa98 <_printf_common+0xa8>
 800fa86:	2301      	movs	r3, #1
 800fa88:	4652      	mov	r2, sl
 800fa8a:	4649      	mov	r1, r9
 800fa8c:	4638      	mov	r0, r7
 800fa8e:	47c0      	blx	r8
 800fa90:	3001      	adds	r0, #1
 800fa92:	d103      	bne.n	800fa9c <_printf_common+0xac>
 800fa94:	f04f 30ff 	mov.w	r0, #4294967295
 800fa98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa9c:	3501      	adds	r5, #1
 800fa9e:	e7c6      	b.n	800fa2e <_printf_common+0x3e>
 800faa0:	18e1      	adds	r1, r4, r3
 800faa2:	1c5a      	adds	r2, r3, #1
 800faa4:	2030      	movs	r0, #48	; 0x30
 800faa6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800faaa:	4422      	add	r2, r4
 800faac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fab0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fab4:	3302      	adds	r3, #2
 800fab6:	e7c7      	b.n	800fa48 <_printf_common+0x58>
 800fab8:	2301      	movs	r3, #1
 800faba:	4622      	mov	r2, r4
 800fabc:	4649      	mov	r1, r9
 800fabe:	4638      	mov	r0, r7
 800fac0:	47c0      	blx	r8
 800fac2:	3001      	adds	r0, #1
 800fac4:	d0e6      	beq.n	800fa94 <_printf_common+0xa4>
 800fac6:	3601      	adds	r6, #1
 800fac8:	e7d9      	b.n	800fa7e <_printf_common+0x8e>
	...

0800facc <_printf_i>:
 800facc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fad0:	7e0f      	ldrb	r7, [r1, #24]
 800fad2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fad4:	2f78      	cmp	r7, #120	; 0x78
 800fad6:	4691      	mov	r9, r2
 800fad8:	4680      	mov	r8, r0
 800fada:	460c      	mov	r4, r1
 800fadc:	469a      	mov	sl, r3
 800fade:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fae2:	d807      	bhi.n	800faf4 <_printf_i+0x28>
 800fae4:	2f62      	cmp	r7, #98	; 0x62
 800fae6:	d80a      	bhi.n	800fafe <_printf_i+0x32>
 800fae8:	2f00      	cmp	r7, #0
 800faea:	f000 80d8 	beq.w	800fc9e <_printf_i+0x1d2>
 800faee:	2f58      	cmp	r7, #88	; 0x58
 800faf0:	f000 80a3 	beq.w	800fc3a <_printf_i+0x16e>
 800faf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800faf8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fafc:	e03a      	b.n	800fb74 <_printf_i+0xa8>
 800fafe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fb02:	2b15      	cmp	r3, #21
 800fb04:	d8f6      	bhi.n	800faf4 <_printf_i+0x28>
 800fb06:	a101      	add	r1, pc, #4	; (adr r1, 800fb0c <_printf_i+0x40>)
 800fb08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fb0c:	0800fb65 	.word	0x0800fb65
 800fb10:	0800fb79 	.word	0x0800fb79
 800fb14:	0800faf5 	.word	0x0800faf5
 800fb18:	0800faf5 	.word	0x0800faf5
 800fb1c:	0800faf5 	.word	0x0800faf5
 800fb20:	0800faf5 	.word	0x0800faf5
 800fb24:	0800fb79 	.word	0x0800fb79
 800fb28:	0800faf5 	.word	0x0800faf5
 800fb2c:	0800faf5 	.word	0x0800faf5
 800fb30:	0800faf5 	.word	0x0800faf5
 800fb34:	0800faf5 	.word	0x0800faf5
 800fb38:	0800fc85 	.word	0x0800fc85
 800fb3c:	0800fba9 	.word	0x0800fba9
 800fb40:	0800fc67 	.word	0x0800fc67
 800fb44:	0800faf5 	.word	0x0800faf5
 800fb48:	0800faf5 	.word	0x0800faf5
 800fb4c:	0800fca7 	.word	0x0800fca7
 800fb50:	0800faf5 	.word	0x0800faf5
 800fb54:	0800fba9 	.word	0x0800fba9
 800fb58:	0800faf5 	.word	0x0800faf5
 800fb5c:	0800faf5 	.word	0x0800faf5
 800fb60:	0800fc6f 	.word	0x0800fc6f
 800fb64:	682b      	ldr	r3, [r5, #0]
 800fb66:	1d1a      	adds	r2, r3, #4
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	602a      	str	r2, [r5, #0]
 800fb6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fb70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fb74:	2301      	movs	r3, #1
 800fb76:	e0a3      	b.n	800fcc0 <_printf_i+0x1f4>
 800fb78:	6820      	ldr	r0, [r4, #0]
 800fb7a:	6829      	ldr	r1, [r5, #0]
 800fb7c:	0606      	lsls	r6, r0, #24
 800fb7e:	f101 0304 	add.w	r3, r1, #4
 800fb82:	d50a      	bpl.n	800fb9a <_printf_i+0xce>
 800fb84:	680e      	ldr	r6, [r1, #0]
 800fb86:	602b      	str	r3, [r5, #0]
 800fb88:	2e00      	cmp	r6, #0
 800fb8a:	da03      	bge.n	800fb94 <_printf_i+0xc8>
 800fb8c:	232d      	movs	r3, #45	; 0x2d
 800fb8e:	4276      	negs	r6, r6
 800fb90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fb94:	485e      	ldr	r0, [pc, #376]	; (800fd10 <_printf_i+0x244>)
 800fb96:	230a      	movs	r3, #10
 800fb98:	e019      	b.n	800fbce <_printf_i+0x102>
 800fb9a:	680e      	ldr	r6, [r1, #0]
 800fb9c:	602b      	str	r3, [r5, #0]
 800fb9e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fba2:	bf18      	it	ne
 800fba4:	b236      	sxthne	r6, r6
 800fba6:	e7ef      	b.n	800fb88 <_printf_i+0xbc>
 800fba8:	682b      	ldr	r3, [r5, #0]
 800fbaa:	6820      	ldr	r0, [r4, #0]
 800fbac:	1d19      	adds	r1, r3, #4
 800fbae:	6029      	str	r1, [r5, #0]
 800fbb0:	0601      	lsls	r1, r0, #24
 800fbb2:	d501      	bpl.n	800fbb8 <_printf_i+0xec>
 800fbb4:	681e      	ldr	r6, [r3, #0]
 800fbb6:	e002      	b.n	800fbbe <_printf_i+0xf2>
 800fbb8:	0646      	lsls	r6, r0, #25
 800fbba:	d5fb      	bpl.n	800fbb4 <_printf_i+0xe8>
 800fbbc:	881e      	ldrh	r6, [r3, #0]
 800fbbe:	4854      	ldr	r0, [pc, #336]	; (800fd10 <_printf_i+0x244>)
 800fbc0:	2f6f      	cmp	r7, #111	; 0x6f
 800fbc2:	bf0c      	ite	eq
 800fbc4:	2308      	moveq	r3, #8
 800fbc6:	230a      	movne	r3, #10
 800fbc8:	2100      	movs	r1, #0
 800fbca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fbce:	6865      	ldr	r5, [r4, #4]
 800fbd0:	60a5      	str	r5, [r4, #8]
 800fbd2:	2d00      	cmp	r5, #0
 800fbd4:	bfa2      	ittt	ge
 800fbd6:	6821      	ldrge	r1, [r4, #0]
 800fbd8:	f021 0104 	bicge.w	r1, r1, #4
 800fbdc:	6021      	strge	r1, [r4, #0]
 800fbde:	b90e      	cbnz	r6, 800fbe4 <_printf_i+0x118>
 800fbe0:	2d00      	cmp	r5, #0
 800fbe2:	d04d      	beq.n	800fc80 <_printf_i+0x1b4>
 800fbe4:	4615      	mov	r5, r2
 800fbe6:	fbb6 f1f3 	udiv	r1, r6, r3
 800fbea:	fb03 6711 	mls	r7, r3, r1, r6
 800fbee:	5dc7      	ldrb	r7, [r0, r7]
 800fbf0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fbf4:	4637      	mov	r7, r6
 800fbf6:	42bb      	cmp	r3, r7
 800fbf8:	460e      	mov	r6, r1
 800fbfa:	d9f4      	bls.n	800fbe6 <_printf_i+0x11a>
 800fbfc:	2b08      	cmp	r3, #8
 800fbfe:	d10b      	bne.n	800fc18 <_printf_i+0x14c>
 800fc00:	6823      	ldr	r3, [r4, #0]
 800fc02:	07de      	lsls	r6, r3, #31
 800fc04:	d508      	bpl.n	800fc18 <_printf_i+0x14c>
 800fc06:	6923      	ldr	r3, [r4, #16]
 800fc08:	6861      	ldr	r1, [r4, #4]
 800fc0a:	4299      	cmp	r1, r3
 800fc0c:	bfde      	ittt	le
 800fc0e:	2330      	movle	r3, #48	; 0x30
 800fc10:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fc14:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fc18:	1b52      	subs	r2, r2, r5
 800fc1a:	6122      	str	r2, [r4, #16]
 800fc1c:	f8cd a000 	str.w	sl, [sp]
 800fc20:	464b      	mov	r3, r9
 800fc22:	aa03      	add	r2, sp, #12
 800fc24:	4621      	mov	r1, r4
 800fc26:	4640      	mov	r0, r8
 800fc28:	f7ff fee2 	bl	800f9f0 <_printf_common>
 800fc2c:	3001      	adds	r0, #1
 800fc2e:	d14c      	bne.n	800fcca <_printf_i+0x1fe>
 800fc30:	f04f 30ff 	mov.w	r0, #4294967295
 800fc34:	b004      	add	sp, #16
 800fc36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc3a:	4835      	ldr	r0, [pc, #212]	; (800fd10 <_printf_i+0x244>)
 800fc3c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800fc40:	6829      	ldr	r1, [r5, #0]
 800fc42:	6823      	ldr	r3, [r4, #0]
 800fc44:	f851 6b04 	ldr.w	r6, [r1], #4
 800fc48:	6029      	str	r1, [r5, #0]
 800fc4a:	061d      	lsls	r5, r3, #24
 800fc4c:	d514      	bpl.n	800fc78 <_printf_i+0x1ac>
 800fc4e:	07df      	lsls	r7, r3, #31
 800fc50:	bf44      	itt	mi
 800fc52:	f043 0320 	orrmi.w	r3, r3, #32
 800fc56:	6023      	strmi	r3, [r4, #0]
 800fc58:	b91e      	cbnz	r6, 800fc62 <_printf_i+0x196>
 800fc5a:	6823      	ldr	r3, [r4, #0]
 800fc5c:	f023 0320 	bic.w	r3, r3, #32
 800fc60:	6023      	str	r3, [r4, #0]
 800fc62:	2310      	movs	r3, #16
 800fc64:	e7b0      	b.n	800fbc8 <_printf_i+0xfc>
 800fc66:	6823      	ldr	r3, [r4, #0]
 800fc68:	f043 0320 	orr.w	r3, r3, #32
 800fc6c:	6023      	str	r3, [r4, #0]
 800fc6e:	2378      	movs	r3, #120	; 0x78
 800fc70:	4828      	ldr	r0, [pc, #160]	; (800fd14 <_printf_i+0x248>)
 800fc72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fc76:	e7e3      	b.n	800fc40 <_printf_i+0x174>
 800fc78:	0659      	lsls	r1, r3, #25
 800fc7a:	bf48      	it	mi
 800fc7c:	b2b6      	uxthmi	r6, r6
 800fc7e:	e7e6      	b.n	800fc4e <_printf_i+0x182>
 800fc80:	4615      	mov	r5, r2
 800fc82:	e7bb      	b.n	800fbfc <_printf_i+0x130>
 800fc84:	682b      	ldr	r3, [r5, #0]
 800fc86:	6826      	ldr	r6, [r4, #0]
 800fc88:	6961      	ldr	r1, [r4, #20]
 800fc8a:	1d18      	adds	r0, r3, #4
 800fc8c:	6028      	str	r0, [r5, #0]
 800fc8e:	0635      	lsls	r5, r6, #24
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	d501      	bpl.n	800fc98 <_printf_i+0x1cc>
 800fc94:	6019      	str	r1, [r3, #0]
 800fc96:	e002      	b.n	800fc9e <_printf_i+0x1d2>
 800fc98:	0670      	lsls	r0, r6, #25
 800fc9a:	d5fb      	bpl.n	800fc94 <_printf_i+0x1c8>
 800fc9c:	8019      	strh	r1, [r3, #0]
 800fc9e:	2300      	movs	r3, #0
 800fca0:	6123      	str	r3, [r4, #16]
 800fca2:	4615      	mov	r5, r2
 800fca4:	e7ba      	b.n	800fc1c <_printf_i+0x150>
 800fca6:	682b      	ldr	r3, [r5, #0]
 800fca8:	1d1a      	adds	r2, r3, #4
 800fcaa:	602a      	str	r2, [r5, #0]
 800fcac:	681d      	ldr	r5, [r3, #0]
 800fcae:	6862      	ldr	r2, [r4, #4]
 800fcb0:	2100      	movs	r1, #0
 800fcb2:	4628      	mov	r0, r5
 800fcb4:	f7f0 fac4 	bl	8000240 <memchr>
 800fcb8:	b108      	cbz	r0, 800fcbe <_printf_i+0x1f2>
 800fcba:	1b40      	subs	r0, r0, r5
 800fcbc:	6060      	str	r0, [r4, #4]
 800fcbe:	6863      	ldr	r3, [r4, #4]
 800fcc0:	6123      	str	r3, [r4, #16]
 800fcc2:	2300      	movs	r3, #0
 800fcc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fcc8:	e7a8      	b.n	800fc1c <_printf_i+0x150>
 800fcca:	6923      	ldr	r3, [r4, #16]
 800fccc:	462a      	mov	r2, r5
 800fcce:	4649      	mov	r1, r9
 800fcd0:	4640      	mov	r0, r8
 800fcd2:	47d0      	blx	sl
 800fcd4:	3001      	adds	r0, #1
 800fcd6:	d0ab      	beq.n	800fc30 <_printf_i+0x164>
 800fcd8:	6823      	ldr	r3, [r4, #0]
 800fcda:	079b      	lsls	r3, r3, #30
 800fcdc:	d413      	bmi.n	800fd06 <_printf_i+0x23a>
 800fcde:	68e0      	ldr	r0, [r4, #12]
 800fce0:	9b03      	ldr	r3, [sp, #12]
 800fce2:	4298      	cmp	r0, r3
 800fce4:	bfb8      	it	lt
 800fce6:	4618      	movlt	r0, r3
 800fce8:	e7a4      	b.n	800fc34 <_printf_i+0x168>
 800fcea:	2301      	movs	r3, #1
 800fcec:	4632      	mov	r2, r6
 800fcee:	4649      	mov	r1, r9
 800fcf0:	4640      	mov	r0, r8
 800fcf2:	47d0      	blx	sl
 800fcf4:	3001      	adds	r0, #1
 800fcf6:	d09b      	beq.n	800fc30 <_printf_i+0x164>
 800fcf8:	3501      	adds	r5, #1
 800fcfa:	68e3      	ldr	r3, [r4, #12]
 800fcfc:	9903      	ldr	r1, [sp, #12]
 800fcfe:	1a5b      	subs	r3, r3, r1
 800fd00:	42ab      	cmp	r3, r5
 800fd02:	dcf2      	bgt.n	800fcea <_printf_i+0x21e>
 800fd04:	e7eb      	b.n	800fcde <_printf_i+0x212>
 800fd06:	2500      	movs	r5, #0
 800fd08:	f104 0619 	add.w	r6, r4, #25
 800fd0c:	e7f5      	b.n	800fcfa <_printf_i+0x22e>
 800fd0e:	bf00      	nop
 800fd10:	08014bd8 	.word	0x08014bd8
 800fd14:	08014be9 	.word	0x08014be9

0800fd18 <_scanf_float>:
 800fd18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd1c:	b087      	sub	sp, #28
 800fd1e:	4617      	mov	r7, r2
 800fd20:	9303      	str	r3, [sp, #12]
 800fd22:	688b      	ldr	r3, [r1, #8]
 800fd24:	1e5a      	subs	r2, r3, #1
 800fd26:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800fd2a:	bf83      	ittte	hi
 800fd2c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800fd30:	195b      	addhi	r3, r3, r5
 800fd32:	9302      	strhi	r3, [sp, #8]
 800fd34:	2300      	movls	r3, #0
 800fd36:	bf86      	itte	hi
 800fd38:	f240 135d 	movwhi	r3, #349	; 0x15d
 800fd3c:	608b      	strhi	r3, [r1, #8]
 800fd3e:	9302      	strls	r3, [sp, #8]
 800fd40:	680b      	ldr	r3, [r1, #0]
 800fd42:	468b      	mov	fp, r1
 800fd44:	2500      	movs	r5, #0
 800fd46:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800fd4a:	f84b 3b1c 	str.w	r3, [fp], #28
 800fd4e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800fd52:	4680      	mov	r8, r0
 800fd54:	460c      	mov	r4, r1
 800fd56:	465e      	mov	r6, fp
 800fd58:	46aa      	mov	sl, r5
 800fd5a:	46a9      	mov	r9, r5
 800fd5c:	9501      	str	r5, [sp, #4]
 800fd5e:	68a2      	ldr	r2, [r4, #8]
 800fd60:	b152      	cbz	r2, 800fd78 <_scanf_float+0x60>
 800fd62:	683b      	ldr	r3, [r7, #0]
 800fd64:	781b      	ldrb	r3, [r3, #0]
 800fd66:	2b4e      	cmp	r3, #78	; 0x4e
 800fd68:	d864      	bhi.n	800fe34 <_scanf_float+0x11c>
 800fd6a:	2b40      	cmp	r3, #64	; 0x40
 800fd6c:	d83c      	bhi.n	800fde8 <_scanf_float+0xd0>
 800fd6e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800fd72:	b2c8      	uxtb	r0, r1
 800fd74:	280e      	cmp	r0, #14
 800fd76:	d93a      	bls.n	800fdee <_scanf_float+0xd6>
 800fd78:	f1b9 0f00 	cmp.w	r9, #0
 800fd7c:	d003      	beq.n	800fd86 <_scanf_float+0x6e>
 800fd7e:	6823      	ldr	r3, [r4, #0]
 800fd80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fd84:	6023      	str	r3, [r4, #0]
 800fd86:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fd8a:	f1ba 0f01 	cmp.w	sl, #1
 800fd8e:	f200 8113 	bhi.w	800ffb8 <_scanf_float+0x2a0>
 800fd92:	455e      	cmp	r6, fp
 800fd94:	f200 8105 	bhi.w	800ffa2 <_scanf_float+0x28a>
 800fd98:	2501      	movs	r5, #1
 800fd9a:	4628      	mov	r0, r5
 800fd9c:	b007      	add	sp, #28
 800fd9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fda2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800fda6:	2a0d      	cmp	r2, #13
 800fda8:	d8e6      	bhi.n	800fd78 <_scanf_float+0x60>
 800fdaa:	a101      	add	r1, pc, #4	; (adr r1, 800fdb0 <_scanf_float+0x98>)
 800fdac:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800fdb0:	0800feef 	.word	0x0800feef
 800fdb4:	0800fd79 	.word	0x0800fd79
 800fdb8:	0800fd79 	.word	0x0800fd79
 800fdbc:	0800fd79 	.word	0x0800fd79
 800fdc0:	0800ff4f 	.word	0x0800ff4f
 800fdc4:	0800ff27 	.word	0x0800ff27
 800fdc8:	0800fd79 	.word	0x0800fd79
 800fdcc:	0800fd79 	.word	0x0800fd79
 800fdd0:	0800fefd 	.word	0x0800fefd
 800fdd4:	0800fd79 	.word	0x0800fd79
 800fdd8:	0800fd79 	.word	0x0800fd79
 800fddc:	0800fd79 	.word	0x0800fd79
 800fde0:	0800fd79 	.word	0x0800fd79
 800fde4:	0800feb5 	.word	0x0800feb5
 800fde8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800fdec:	e7db      	b.n	800fda6 <_scanf_float+0x8e>
 800fdee:	290e      	cmp	r1, #14
 800fdf0:	d8c2      	bhi.n	800fd78 <_scanf_float+0x60>
 800fdf2:	a001      	add	r0, pc, #4	; (adr r0, 800fdf8 <_scanf_float+0xe0>)
 800fdf4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800fdf8:	0800fea7 	.word	0x0800fea7
 800fdfc:	0800fd79 	.word	0x0800fd79
 800fe00:	0800fea7 	.word	0x0800fea7
 800fe04:	0800ff3b 	.word	0x0800ff3b
 800fe08:	0800fd79 	.word	0x0800fd79
 800fe0c:	0800fe55 	.word	0x0800fe55
 800fe10:	0800fe91 	.word	0x0800fe91
 800fe14:	0800fe91 	.word	0x0800fe91
 800fe18:	0800fe91 	.word	0x0800fe91
 800fe1c:	0800fe91 	.word	0x0800fe91
 800fe20:	0800fe91 	.word	0x0800fe91
 800fe24:	0800fe91 	.word	0x0800fe91
 800fe28:	0800fe91 	.word	0x0800fe91
 800fe2c:	0800fe91 	.word	0x0800fe91
 800fe30:	0800fe91 	.word	0x0800fe91
 800fe34:	2b6e      	cmp	r3, #110	; 0x6e
 800fe36:	d809      	bhi.n	800fe4c <_scanf_float+0x134>
 800fe38:	2b60      	cmp	r3, #96	; 0x60
 800fe3a:	d8b2      	bhi.n	800fda2 <_scanf_float+0x8a>
 800fe3c:	2b54      	cmp	r3, #84	; 0x54
 800fe3e:	d077      	beq.n	800ff30 <_scanf_float+0x218>
 800fe40:	2b59      	cmp	r3, #89	; 0x59
 800fe42:	d199      	bne.n	800fd78 <_scanf_float+0x60>
 800fe44:	2d07      	cmp	r5, #7
 800fe46:	d197      	bne.n	800fd78 <_scanf_float+0x60>
 800fe48:	2508      	movs	r5, #8
 800fe4a:	e029      	b.n	800fea0 <_scanf_float+0x188>
 800fe4c:	2b74      	cmp	r3, #116	; 0x74
 800fe4e:	d06f      	beq.n	800ff30 <_scanf_float+0x218>
 800fe50:	2b79      	cmp	r3, #121	; 0x79
 800fe52:	e7f6      	b.n	800fe42 <_scanf_float+0x12a>
 800fe54:	6821      	ldr	r1, [r4, #0]
 800fe56:	05c8      	lsls	r0, r1, #23
 800fe58:	d51a      	bpl.n	800fe90 <_scanf_float+0x178>
 800fe5a:	9b02      	ldr	r3, [sp, #8]
 800fe5c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800fe60:	6021      	str	r1, [r4, #0]
 800fe62:	f109 0901 	add.w	r9, r9, #1
 800fe66:	b11b      	cbz	r3, 800fe70 <_scanf_float+0x158>
 800fe68:	3b01      	subs	r3, #1
 800fe6a:	3201      	adds	r2, #1
 800fe6c:	9302      	str	r3, [sp, #8]
 800fe6e:	60a2      	str	r2, [r4, #8]
 800fe70:	68a3      	ldr	r3, [r4, #8]
 800fe72:	3b01      	subs	r3, #1
 800fe74:	60a3      	str	r3, [r4, #8]
 800fe76:	6923      	ldr	r3, [r4, #16]
 800fe78:	3301      	adds	r3, #1
 800fe7a:	6123      	str	r3, [r4, #16]
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	3b01      	subs	r3, #1
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	607b      	str	r3, [r7, #4]
 800fe84:	f340 8084 	ble.w	800ff90 <_scanf_float+0x278>
 800fe88:	683b      	ldr	r3, [r7, #0]
 800fe8a:	3301      	adds	r3, #1
 800fe8c:	603b      	str	r3, [r7, #0]
 800fe8e:	e766      	b.n	800fd5e <_scanf_float+0x46>
 800fe90:	eb1a 0f05 	cmn.w	sl, r5
 800fe94:	f47f af70 	bne.w	800fd78 <_scanf_float+0x60>
 800fe98:	6822      	ldr	r2, [r4, #0]
 800fe9a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800fe9e:	6022      	str	r2, [r4, #0]
 800fea0:	f806 3b01 	strb.w	r3, [r6], #1
 800fea4:	e7e4      	b.n	800fe70 <_scanf_float+0x158>
 800fea6:	6822      	ldr	r2, [r4, #0]
 800fea8:	0610      	lsls	r0, r2, #24
 800feaa:	f57f af65 	bpl.w	800fd78 <_scanf_float+0x60>
 800feae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800feb2:	e7f4      	b.n	800fe9e <_scanf_float+0x186>
 800feb4:	f1ba 0f00 	cmp.w	sl, #0
 800feb8:	d10e      	bne.n	800fed8 <_scanf_float+0x1c0>
 800feba:	f1b9 0f00 	cmp.w	r9, #0
 800febe:	d10e      	bne.n	800fede <_scanf_float+0x1c6>
 800fec0:	6822      	ldr	r2, [r4, #0]
 800fec2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800fec6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800feca:	d108      	bne.n	800fede <_scanf_float+0x1c6>
 800fecc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800fed0:	6022      	str	r2, [r4, #0]
 800fed2:	f04f 0a01 	mov.w	sl, #1
 800fed6:	e7e3      	b.n	800fea0 <_scanf_float+0x188>
 800fed8:	f1ba 0f02 	cmp.w	sl, #2
 800fedc:	d055      	beq.n	800ff8a <_scanf_float+0x272>
 800fede:	2d01      	cmp	r5, #1
 800fee0:	d002      	beq.n	800fee8 <_scanf_float+0x1d0>
 800fee2:	2d04      	cmp	r5, #4
 800fee4:	f47f af48 	bne.w	800fd78 <_scanf_float+0x60>
 800fee8:	3501      	adds	r5, #1
 800feea:	b2ed      	uxtb	r5, r5
 800feec:	e7d8      	b.n	800fea0 <_scanf_float+0x188>
 800feee:	f1ba 0f01 	cmp.w	sl, #1
 800fef2:	f47f af41 	bne.w	800fd78 <_scanf_float+0x60>
 800fef6:	f04f 0a02 	mov.w	sl, #2
 800fefa:	e7d1      	b.n	800fea0 <_scanf_float+0x188>
 800fefc:	b97d      	cbnz	r5, 800ff1e <_scanf_float+0x206>
 800fefe:	f1b9 0f00 	cmp.w	r9, #0
 800ff02:	f47f af3c 	bne.w	800fd7e <_scanf_float+0x66>
 800ff06:	6822      	ldr	r2, [r4, #0]
 800ff08:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ff0c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ff10:	f47f af39 	bne.w	800fd86 <_scanf_float+0x6e>
 800ff14:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ff18:	6022      	str	r2, [r4, #0]
 800ff1a:	2501      	movs	r5, #1
 800ff1c:	e7c0      	b.n	800fea0 <_scanf_float+0x188>
 800ff1e:	2d03      	cmp	r5, #3
 800ff20:	d0e2      	beq.n	800fee8 <_scanf_float+0x1d0>
 800ff22:	2d05      	cmp	r5, #5
 800ff24:	e7de      	b.n	800fee4 <_scanf_float+0x1cc>
 800ff26:	2d02      	cmp	r5, #2
 800ff28:	f47f af26 	bne.w	800fd78 <_scanf_float+0x60>
 800ff2c:	2503      	movs	r5, #3
 800ff2e:	e7b7      	b.n	800fea0 <_scanf_float+0x188>
 800ff30:	2d06      	cmp	r5, #6
 800ff32:	f47f af21 	bne.w	800fd78 <_scanf_float+0x60>
 800ff36:	2507      	movs	r5, #7
 800ff38:	e7b2      	b.n	800fea0 <_scanf_float+0x188>
 800ff3a:	6822      	ldr	r2, [r4, #0]
 800ff3c:	0591      	lsls	r1, r2, #22
 800ff3e:	f57f af1b 	bpl.w	800fd78 <_scanf_float+0x60>
 800ff42:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800ff46:	6022      	str	r2, [r4, #0]
 800ff48:	f8cd 9004 	str.w	r9, [sp, #4]
 800ff4c:	e7a8      	b.n	800fea0 <_scanf_float+0x188>
 800ff4e:	6822      	ldr	r2, [r4, #0]
 800ff50:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800ff54:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800ff58:	d006      	beq.n	800ff68 <_scanf_float+0x250>
 800ff5a:	0550      	lsls	r0, r2, #21
 800ff5c:	f57f af0c 	bpl.w	800fd78 <_scanf_float+0x60>
 800ff60:	f1b9 0f00 	cmp.w	r9, #0
 800ff64:	f43f af0f 	beq.w	800fd86 <_scanf_float+0x6e>
 800ff68:	0591      	lsls	r1, r2, #22
 800ff6a:	bf58      	it	pl
 800ff6c:	9901      	ldrpl	r1, [sp, #4]
 800ff6e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ff72:	bf58      	it	pl
 800ff74:	eba9 0101 	subpl.w	r1, r9, r1
 800ff78:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800ff7c:	bf58      	it	pl
 800ff7e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ff82:	6022      	str	r2, [r4, #0]
 800ff84:	f04f 0900 	mov.w	r9, #0
 800ff88:	e78a      	b.n	800fea0 <_scanf_float+0x188>
 800ff8a:	f04f 0a03 	mov.w	sl, #3
 800ff8e:	e787      	b.n	800fea0 <_scanf_float+0x188>
 800ff90:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ff94:	4639      	mov	r1, r7
 800ff96:	4640      	mov	r0, r8
 800ff98:	4798      	blx	r3
 800ff9a:	2800      	cmp	r0, #0
 800ff9c:	f43f aedf 	beq.w	800fd5e <_scanf_float+0x46>
 800ffa0:	e6ea      	b.n	800fd78 <_scanf_float+0x60>
 800ffa2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ffa6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ffaa:	463a      	mov	r2, r7
 800ffac:	4640      	mov	r0, r8
 800ffae:	4798      	blx	r3
 800ffb0:	6923      	ldr	r3, [r4, #16]
 800ffb2:	3b01      	subs	r3, #1
 800ffb4:	6123      	str	r3, [r4, #16]
 800ffb6:	e6ec      	b.n	800fd92 <_scanf_float+0x7a>
 800ffb8:	1e6b      	subs	r3, r5, #1
 800ffba:	2b06      	cmp	r3, #6
 800ffbc:	d825      	bhi.n	801000a <_scanf_float+0x2f2>
 800ffbe:	2d02      	cmp	r5, #2
 800ffc0:	d836      	bhi.n	8010030 <_scanf_float+0x318>
 800ffc2:	455e      	cmp	r6, fp
 800ffc4:	f67f aee8 	bls.w	800fd98 <_scanf_float+0x80>
 800ffc8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ffcc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ffd0:	463a      	mov	r2, r7
 800ffd2:	4640      	mov	r0, r8
 800ffd4:	4798      	blx	r3
 800ffd6:	6923      	ldr	r3, [r4, #16]
 800ffd8:	3b01      	subs	r3, #1
 800ffda:	6123      	str	r3, [r4, #16]
 800ffdc:	e7f1      	b.n	800ffc2 <_scanf_float+0x2aa>
 800ffde:	9802      	ldr	r0, [sp, #8]
 800ffe0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ffe4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800ffe8:	9002      	str	r0, [sp, #8]
 800ffea:	463a      	mov	r2, r7
 800ffec:	4640      	mov	r0, r8
 800ffee:	4798      	blx	r3
 800fff0:	6923      	ldr	r3, [r4, #16]
 800fff2:	3b01      	subs	r3, #1
 800fff4:	6123      	str	r3, [r4, #16]
 800fff6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fffa:	fa5f fa8a 	uxtb.w	sl, sl
 800fffe:	f1ba 0f02 	cmp.w	sl, #2
 8010002:	d1ec      	bne.n	800ffde <_scanf_float+0x2c6>
 8010004:	3d03      	subs	r5, #3
 8010006:	b2ed      	uxtb	r5, r5
 8010008:	1b76      	subs	r6, r6, r5
 801000a:	6823      	ldr	r3, [r4, #0]
 801000c:	05da      	lsls	r2, r3, #23
 801000e:	d52f      	bpl.n	8010070 <_scanf_float+0x358>
 8010010:	055b      	lsls	r3, r3, #21
 8010012:	d510      	bpl.n	8010036 <_scanf_float+0x31e>
 8010014:	455e      	cmp	r6, fp
 8010016:	f67f aebf 	bls.w	800fd98 <_scanf_float+0x80>
 801001a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801001e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010022:	463a      	mov	r2, r7
 8010024:	4640      	mov	r0, r8
 8010026:	4798      	blx	r3
 8010028:	6923      	ldr	r3, [r4, #16]
 801002a:	3b01      	subs	r3, #1
 801002c:	6123      	str	r3, [r4, #16]
 801002e:	e7f1      	b.n	8010014 <_scanf_float+0x2fc>
 8010030:	46aa      	mov	sl, r5
 8010032:	9602      	str	r6, [sp, #8]
 8010034:	e7df      	b.n	800fff6 <_scanf_float+0x2de>
 8010036:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801003a:	6923      	ldr	r3, [r4, #16]
 801003c:	2965      	cmp	r1, #101	; 0x65
 801003e:	f103 33ff 	add.w	r3, r3, #4294967295
 8010042:	f106 35ff 	add.w	r5, r6, #4294967295
 8010046:	6123      	str	r3, [r4, #16]
 8010048:	d00c      	beq.n	8010064 <_scanf_float+0x34c>
 801004a:	2945      	cmp	r1, #69	; 0x45
 801004c:	d00a      	beq.n	8010064 <_scanf_float+0x34c>
 801004e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010052:	463a      	mov	r2, r7
 8010054:	4640      	mov	r0, r8
 8010056:	4798      	blx	r3
 8010058:	6923      	ldr	r3, [r4, #16]
 801005a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801005e:	3b01      	subs	r3, #1
 8010060:	1eb5      	subs	r5, r6, #2
 8010062:	6123      	str	r3, [r4, #16]
 8010064:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010068:	463a      	mov	r2, r7
 801006a:	4640      	mov	r0, r8
 801006c:	4798      	blx	r3
 801006e:	462e      	mov	r6, r5
 8010070:	6825      	ldr	r5, [r4, #0]
 8010072:	f015 0510 	ands.w	r5, r5, #16
 8010076:	d159      	bne.n	801012c <_scanf_float+0x414>
 8010078:	7035      	strb	r5, [r6, #0]
 801007a:	6823      	ldr	r3, [r4, #0]
 801007c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8010080:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010084:	d11b      	bne.n	80100be <_scanf_float+0x3a6>
 8010086:	9b01      	ldr	r3, [sp, #4]
 8010088:	454b      	cmp	r3, r9
 801008a:	eba3 0209 	sub.w	r2, r3, r9
 801008e:	d123      	bne.n	80100d8 <_scanf_float+0x3c0>
 8010090:	2200      	movs	r2, #0
 8010092:	4659      	mov	r1, fp
 8010094:	4640      	mov	r0, r8
 8010096:	f000 ff11 	bl	8010ebc <_strtod_r>
 801009a:	6822      	ldr	r2, [r4, #0]
 801009c:	9b03      	ldr	r3, [sp, #12]
 801009e:	f012 0f02 	tst.w	r2, #2
 80100a2:	ec57 6b10 	vmov	r6, r7, d0
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	d021      	beq.n	80100ee <_scanf_float+0x3d6>
 80100aa:	9903      	ldr	r1, [sp, #12]
 80100ac:	1d1a      	adds	r2, r3, #4
 80100ae:	600a      	str	r2, [r1, #0]
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	e9c3 6700 	strd	r6, r7, [r3]
 80100b6:	68e3      	ldr	r3, [r4, #12]
 80100b8:	3301      	adds	r3, #1
 80100ba:	60e3      	str	r3, [r4, #12]
 80100bc:	e66d      	b.n	800fd9a <_scanf_float+0x82>
 80100be:	9b04      	ldr	r3, [sp, #16]
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d0e5      	beq.n	8010090 <_scanf_float+0x378>
 80100c4:	9905      	ldr	r1, [sp, #20]
 80100c6:	230a      	movs	r3, #10
 80100c8:	462a      	mov	r2, r5
 80100ca:	3101      	adds	r1, #1
 80100cc:	4640      	mov	r0, r8
 80100ce:	f000 ffd9 	bl	8011084 <_strtol_r>
 80100d2:	9b04      	ldr	r3, [sp, #16]
 80100d4:	9e05      	ldr	r6, [sp, #20]
 80100d6:	1ac2      	subs	r2, r0, r3
 80100d8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80100dc:	429e      	cmp	r6, r3
 80100de:	bf28      	it	cs
 80100e0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80100e4:	4912      	ldr	r1, [pc, #72]	; (8010130 <_scanf_float+0x418>)
 80100e6:	4630      	mov	r0, r6
 80100e8:	f000 f82c 	bl	8010144 <siprintf>
 80100ec:	e7d0      	b.n	8010090 <_scanf_float+0x378>
 80100ee:	9903      	ldr	r1, [sp, #12]
 80100f0:	f012 0f04 	tst.w	r2, #4
 80100f4:	f103 0204 	add.w	r2, r3, #4
 80100f8:	600a      	str	r2, [r1, #0]
 80100fa:	d1d9      	bne.n	80100b0 <_scanf_float+0x398>
 80100fc:	f8d3 8000 	ldr.w	r8, [r3]
 8010100:	ee10 2a10 	vmov	r2, s0
 8010104:	ee10 0a10 	vmov	r0, s0
 8010108:	463b      	mov	r3, r7
 801010a:	4639      	mov	r1, r7
 801010c:	f7f0 fd3e 	bl	8000b8c <__aeabi_dcmpun>
 8010110:	b128      	cbz	r0, 801011e <_scanf_float+0x406>
 8010112:	4808      	ldr	r0, [pc, #32]	; (8010134 <_scanf_float+0x41c>)
 8010114:	f000 f810 	bl	8010138 <nanf>
 8010118:	ed88 0a00 	vstr	s0, [r8]
 801011c:	e7cb      	b.n	80100b6 <_scanf_float+0x39e>
 801011e:	4630      	mov	r0, r6
 8010120:	4639      	mov	r1, r7
 8010122:	f7f0 fd91 	bl	8000c48 <__aeabi_d2f>
 8010126:	f8c8 0000 	str.w	r0, [r8]
 801012a:	e7c4      	b.n	80100b6 <_scanf_float+0x39e>
 801012c:	2500      	movs	r5, #0
 801012e:	e634      	b.n	800fd9a <_scanf_float+0x82>
 8010130:	08014bfa 	.word	0x08014bfa
 8010134:	08014cff 	.word	0x08014cff

08010138 <nanf>:
 8010138:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8010140 <nanf+0x8>
 801013c:	4770      	bx	lr
 801013e:	bf00      	nop
 8010140:	7fc00000 	.word	0x7fc00000

08010144 <siprintf>:
 8010144:	b40e      	push	{r1, r2, r3}
 8010146:	b500      	push	{lr}
 8010148:	b09c      	sub	sp, #112	; 0x70
 801014a:	ab1d      	add	r3, sp, #116	; 0x74
 801014c:	9002      	str	r0, [sp, #8]
 801014e:	9006      	str	r0, [sp, #24]
 8010150:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010154:	4809      	ldr	r0, [pc, #36]	; (801017c <siprintf+0x38>)
 8010156:	9107      	str	r1, [sp, #28]
 8010158:	9104      	str	r1, [sp, #16]
 801015a:	4909      	ldr	r1, [pc, #36]	; (8010180 <siprintf+0x3c>)
 801015c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010160:	9105      	str	r1, [sp, #20]
 8010162:	6800      	ldr	r0, [r0, #0]
 8010164:	9301      	str	r3, [sp, #4]
 8010166:	a902      	add	r1, sp, #8
 8010168:	f003 f80e 	bl	8013188 <_svfiprintf_r>
 801016c:	9b02      	ldr	r3, [sp, #8]
 801016e:	2200      	movs	r2, #0
 8010170:	701a      	strb	r2, [r3, #0]
 8010172:	b01c      	add	sp, #112	; 0x70
 8010174:	f85d eb04 	ldr.w	lr, [sp], #4
 8010178:	b003      	add	sp, #12
 801017a:	4770      	bx	lr
 801017c:	200002ec 	.word	0x200002ec
 8010180:	ffff0208 	.word	0xffff0208

08010184 <siscanf>:
 8010184:	b40e      	push	{r1, r2, r3}
 8010186:	b510      	push	{r4, lr}
 8010188:	b09f      	sub	sp, #124	; 0x7c
 801018a:	ac21      	add	r4, sp, #132	; 0x84
 801018c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8010190:	f854 2b04 	ldr.w	r2, [r4], #4
 8010194:	9201      	str	r2, [sp, #4]
 8010196:	f8ad 101c 	strh.w	r1, [sp, #28]
 801019a:	9004      	str	r0, [sp, #16]
 801019c:	9008      	str	r0, [sp, #32]
 801019e:	f7f0 f841 	bl	8000224 <strlen>
 80101a2:	4b0c      	ldr	r3, [pc, #48]	; (80101d4 <siscanf+0x50>)
 80101a4:	9005      	str	r0, [sp, #20]
 80101a6:	9009      	str	r0, [sp, #36]	; 0x24
 80101a8:	930d      	str	r3, [sp, #52]	; 0x34
 80101aa:	480b      	ldr	r0, [pc, #44]	; (80101d8 <siscanf+0x54>)
 80101ac:	9a01      	ldr	r2, [sp, #4]
 80101ae:	6800      	ldr	r0, [r0, #0]
 80101b0:	9403      	str	r4, [sp, #12]
 80101b2:	2300      	movs	r3, #0
 80101b4:	9311      	str	r3, [sp, #68]	; 0x44
 80101b6:	9316      	str	r3, [sp, #88]	; 0x58
 80101b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80101bc:	f8ad 301e 	strh.w	r3, [sp, #30]
 80101c0:	a904      	add	r1, sp, #16
 80101c2:	4623      	mov	r3, r4
 80101c4:	f003 f93a 	bl	801343c <__ssvfiscanf_r>
 80101c8:	b01f      	add	sp, #124	; 0x7c
 80101ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80101ce:	b003      	add	sp, #12
 80101d0:	4770      	bx	lr
 80101d2:	bf00      	nop
 80101d4:	080101ff 	.word	0x080101ff
 80101d8:	200002ec 	.word	0x200002ec

080101dc <__sread>:
 80101dc:	b510      	push	{r4, lr}
 80101de:	460c      	mov	r4, r1
 80101e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80101e4:	f003 fd4e 	bl	8013c84 <_read_r>
 80101e8:	2800      	cmp	r0, #0
 80101ea:	bfab      	itete	ge
 80101ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80101ee:	89a3      	ldrhlt	r3, [r4, #12]
 80101f0:	181b      	addge	r3, r3, r0
 80101f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80101f6:	bfac      	ite	ge
 80101f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80101fa:	81a3      	strhlt	r3, [r4, #12]
 80101fc:	bd10      	pop	{r4, pc}

080101fe <__seofread>:
 80101fe:	2000      	movs	r0, #0
 8010200:	4770      	bx	lr

08010202 <__swrite>:
 8010202:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010206:	461f      	mov	r7, r3
 8010208:	898b      	ldrh	r3, [r1, #12]
 801020a:	05db      	lsls	r3, r3, #23
 801020c:	4605      	mov	r5, r0
 801020e:	460c      	mov	r4, r1
 8010210:	4616      	mov	r6, r2
 8010212:	d505      	bpl.n	8010220 <__swrite+0x1e>
 8010214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010218:	2302      	movs	r3, #2
 801021a:	2200      	movs	r2, #0
 801021c:	f002 f974 	bl	8012508 <_lseek_r>
 8010220:	89a3      	ldrh	r3, [r4, #12]
 8010222:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010226:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801022a:	81a3      	strh	r3, [r4, #12]
 801022c:	4632      	mov	r2, r6
 801022e:	463b      	mov	r3, r7
 8010230:	4628      	mov	r0, r5
 8010232:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010236:	f000 bf27 	b.w	8011088 <_write_r>

0801023a <__sseek>:
 801023a:	b510      	push	{r4, lr}
 801023c:	460c      	mov	r4, r1
 801023e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010242:	f002 f961 	bl	8012508 <_lseek_r>
 8010246:	1c43      	adds	r3, r0, #1
 8010248:	89a3      	ldrh	r3, [r4, #12]
 801024a:	bf15      	itete	ne
 801024c:	6560      	strne	r0, [r4, #84]	; 0x54
 801024e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010252:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010256:	81a3      	strheq	r3, [r4, #12]
 8010258:	bf18      	it	ne
 801025a:	81a3      	strhne	r3, [r4, #12]
 801025c:	bd10      	pop	{r4, pc}

0801025e <__sclose>:
 801025e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010262:	f000 bf41 	b.w	80110e8 <_close_r>

08010266 <strcpy>:
 8010266:	4603      	mov	r3, r0
 8010268:	f811 2b01 	ldrb.w	r2, [r1], #1
 801026c:	f803 2b01 	strb.w	r2, [r3], #1
 8010270:	2a00      	cmp	r2, #0
 8010272:	d1f9      	bne.n	8010268 <strcpy+0x2>
 8010274:	4770      	bx	lr

08010276 <sulp>:
 8010276:	b570      	push	{r4, r5, r6, lr}
 8010278:	4604      	mov	r4, r0
 801027a:	460d      	mov	r5, r1
 801027c:	ec45 4b10 	vmov	d0, r4, r5
 8010280:	4616      	mov	r6, r2
 8010282:	f002 fcdf 	bl	8012c44 <__ulp>
 8010286:	ec51 0b10 	vmov	r0, r1, d0
 801028a:	b17e      	cbz	r6, 80102ac <sulp+0x36>
 801028c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010290:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010294:	2b00      	cmp	r3, #0
 8010296:	dd09      	ble.n	80102ac <sulp+0x36>
 8010298:	051b      	lsls	r3, r3, #20
 801029a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801029e:	2400      	movs	r4, #0
 80102a0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80102a4:	4622      	mov	r2, r4
 80102a6:	462b      	mov	r3, r5
 80102a8:	f7f0 f9d6 	bl	8000658 <__aeabi_dmul>
 80102ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080102b0 <_strtod_l>:
 80102b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102b4:	ed2d 8b02 	vpush	{d8}
 80102b8:	b09d      	sub	sp, #116	; 0x74
 80102ba:	461f      	mov	r7, r3
 80102bc:	2300      	movs	r3, #0
 80102be:	9318      	str	r3, [sp, #96]	; 0x60
 80102c0:	4ba2      	ldr	r3, [pc, #648]	; (801054c <_strtod_l+0x29c>)
 80102c2:	9213      	str	r2, [sp, #76]	; 0x4c
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	9305      	str	r3, [sp, #20]
 80102c8:	4604      	mov	r4, r0
 80102ca:	4618      	mov	r0, r3
 80102cc:	4688      	mov	r8, r1
 80102ce:	f7ef ffa9 	bl	8000224 <strlen>
 80102d2:	f04f 0a00 	mov.w	sl, #0
 80102d6:	4605      	mov	r5, r0
 80102d8:	f04f 0b00 	mov.w	fp, #0
 80102dc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80102e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80102e2:	781a      	ldrb	r2, [r3, #0]
 80102e4:	2a2b      	cmp	r2, #43	; 0x2b
 80102e6:	d04e      	beq.n	8010386 <_strtod_l+0xd6>
 80102e8:	d83b      	bhi.n	8010362 <_strtod_l+0xb2>
 80102ea:	2a0d      	cmp	r2, #13
 80102ec:	d834      	bhi.n	8010358 <_strtod_l+0xa8>
 80102ee:	2a08      	cmp	r2, #8
 80102f0:	d834      	bhi.n	801035c <_strtod_l+0xac>
 80102f2:	2a00      	cmp	r2, #0
 80102f4:	d03e      	beq.n	8010374 <_strtod_l+0xc4>
 80102f6:	2300      	movs	r3, #0
 80102f8:	930a      	str	r3, [sp, #40]	; 0x28
 80102fa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80102fc:	7833      	ldrb	r3, [r6, #0]
 80102fe:	2b30      	cmp	r3, #48	; 0x30
 8010300:	f040 80b0 	bne.w	8010464 <_strtod_l+0x1b4>
 8010304:	7873      	ldrb	r3, [r6, #1]
 8010306:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801030a:	2b58      	cmp	r3, #88	; 0x58
 801030c:	d168      	bne.n	80103e0 <_strtod_l+0x130>
 801030e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010310:	9301      	str	r3, [sp, #4]
 8010312:	ab18      	add	r3, sp, #96	; 0x60
 8010314:	9702      	str	r7, [sp, #8]
 8010316:	9300      	str	r3, [sp, #0]
 8010318:	4a8d      	ldr	r2, [pc, #564]	; (8010550 <_strtod_l+0x2a0>)
 801031a:	ab19      	add	r3, sp, #100	; 0x64
 801031c:	a917      	add	r1, sp, #92	; 0x5c
 801031e:	4620      	mov	r0, r4
 8010320:	f001 fde6 	bl	8011ef0 <__gethex>
 8010324:	f010 0707 	ands.w	r7, r0, #7
 8010328:	4605      	mov	r5, r0
 801032a:	d005      	beq.n	8010338 <_strtod_l+0x88>
 801032c:	2f06      	cmp	r7, #6
 801032e:	d12c      	bne.n	801038a <_strtod_l+0xda>
 8010330:	3601      	adds	r6, #1
 8010332:	2300      	movs	r3, #0
 8010334:	9617      	str	r6, [sp, #92]	; 0x5c
 8010336:	930a      	str	r3, [sp, #40]	; 0x28
 8010338:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801033a:	2b00      	cmp	r3, #0
 801033c:	f040 8590 	bne.w	8010e60 <_strtod_l+0xbb0>
 8010340:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010342:	b1eb      	cbz	r3, 8010380 <_strtod_l+0xd0>
 8010344:	4652      	mov	r2, sl
 8010346:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801034a:	ec43 2b10 	vmov	d0, r2, r3
 801034e:	b01d      	add	sp, #116	; 0x74
 8010350:	ecbd 8b02 	vpop	{d8}
 8010354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010358:	2a20      	cmp	r2, #32
 801035a:	d1cc      	bne.n	80102f6 <_strtod_l+0x46>
 801035c:	3301      	adds	r3, #1
 801035e:	9317      	str	r3, [sp, #92]	; 0x5c
 8010360:	e7be      	b.n	80102e0 <_strtod_l+0x30>
 8010362:	2a2d      	cmp	r2, #45	; 0x2d
 8010364:	d1c7      	bne.n	80102f6 <_strtod_l+0x46>
 8010366:	2201      	movs	r2, #1
 8010368:	920a      	str	r2, [sp, #40]	; 0x28
 801036a:	1c5a      	adds	r2, r3, #1
 801036c:	9217      	str	r2, [sp, #92]	; 0x5c
 801036e:	785b      	ldrb	r3, [r3, #1]
 8010370:	2b00      	cmp	r3, #0
 8010372:	d1c2      	bne.n	80102fa <_strtod_l+0x4a>
 8010374:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010376:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801037a:	2b00      	cmp	r3, #0
 801037c:	f040 856e 	bne.w	8010e5c <_strtod_l+0xbac>
 8010380:	4652      	mov	r2, sl
 8010382:	465b      	mov	r3, fp
 8010384:	e7e1      	b.n	801034a <_strtod_l+0x9a>
 8010386:	2200      	movs	r2, #0
 8010388:	e7ee      	b.n	8010368 <_strtod_l+0xb8>
 801038a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801038c:	b13a      	cbz	r2, 801039e <_strtod_l+0xee>
 801038e:	2135      	movs	r1, #53	; 0x35
 8010390:	a81a      	add	r0, sp, #104	; 0x68
 8010392:	f002 fd62 	bl	8012e5a <__copybits>
 8010396:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010398:	4620      	mov	r0, r4
 801039a:	f002 f921 	bl	80125e0 <_Bfree>
 801039e:	3f01      	subs	r7, #1
 80103a0:	2f04      	cmp	r7, #4
 80103a2:	d806      	bhi.n	80103b2 <_strtod_l+0x102>
 80103a4:	e8df f007 	tbb	[pc, r7]
 80103a8:	1714030a 	.word	0x1714030a
 80103ac:	0a          	.byte	0x0a
 80103ad:	00          	.byte	0x00
 80103ae:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80103b2:	0728      	lsls	r0, r5, #28
 80103b4:	d5c0      	bpl.n	8010338 <_strtod_l+0x88>
 80103b6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80103ba:	e7bd      	b.n	8010338 <_strtod_l+0x88>
 80103bc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80103c0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80103c2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80103c6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80103ca:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80103ce:	e7f0      	b.n	80103b2 <_strtod_l+0x102>
 80103d0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8010554 <_strtod_l+0x2a4>
 80103d4:	e7ed      	b.n	80103b2 <_strtod_l+0x102>
 80103d6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80103da:	f04f 3aff 	mov.w	sl, #4294967295
 80103de:	e7e8      	b.n	80103b2 <_strtod_l+0x102>
 80103e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80103e2:	1c5a      	adds	r2, r3, #1
 80103e4:	9217      	str	r2, [sp, #92]	; 0x5c
 80103e6:	785b      	ldrb	r3, [r3, #1]
 80103e8:	2b30      	cmp	r3, #48	; 0x30
 80103ea:	d0f9      	beq.n	80103e0 <_strtod_l+0x130>
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d0a3      	beq.n	8010338 <_strtod_l+0x88>
 80103f0:	2301      	movs	r3, #1
 80103f2:	f04f 0900 	mov.w	r9, #0
 80103f6:	9304      	str	r3, [sp, #16]
 80103f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80103fa:	9308      	str	r3, [sp, #32]
 80103fc:	f8cd 901c 	str.w	r9, [sp, #28]
 8010400:	464f      	mov	r7, r9
 8010402:	220a      	movs	r2, #10
 8010404:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8010406:	7806      	ldrb	r6, [r0, #0]
 8010408:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801040c:	b2d9      	uxtb	r1, r3
 801040e:	2909      	cmp	r1, #9
 8010410:	d92a      	bls.n	8010468 <_strtod_l+0x1b8>
 8010412:	9905      	ldr	r1, [sp, #20]
 8010414:	462a      	mov	r2, r5
 8010416:	f003 fc97 	bl	8013d48 <strncmp>
 801041a:	b398      	cbz	r0, 8010484 <_strtod_l+0x1d4>
 801041c:	2000      	movs	r0, #0
 801041e:	4632      	mov	r2, r6
 8010420:	463d      	mov	r5, r7
 8010422:	9005      	str	r0, [sp, #20]
 8010424:	4603      	mov	r3, r0
 8010426:	2a65      	cmp	r2, #101	; 0x65
 8010428:	d001      	beq.n	801042e <_strtod_l+0x17e>
 801042a:	2a45      	cmp	r2, #69	; 0x45
 801042c:	d118      	bne.n	8010460 <_strtod_l+0x1b0>
 801042e:	b91d      	cbnz	r5, 8010438 <_strtod_l+0x188>
 8010430:	9a04      	ldr	r2, [sp, #16]
 8010432:	4302      	orrs	r2, r0
 8010434:	d09e      	beq.n	8010374 <_strtod_l+0xc4>
 8010436:	2500      	movs	r5, #0
 8010438:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 801043c:	f108 0201 	add.w	r2, r8, #1
 8010440:	9217      	str	r2, [sp, #92]	; 0x5c
 8010442:	f898 2001 	ldrb.w	r2, [r8, #1]
 8010446:	2a2b      	cmp	r2, #43	; 0x2b
 8010448:	d075      	beq.n	8010536 <_strtod_l+0x286>
 801044a:	2a2d      	cmp	r2, #45	; 0x2d
 801044c:	d07b      	beq.n	8010546 <_strtod_l+0x296>
 801044e:	f04f 0c00 	mov.w	ip, #0
 8010452:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8010456:	2909      	cmp	r1, #9
 8010458:	f240 8082 	bls.w	8010560 <_strtod_l+0x2b0>
 801045c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8010460:	2600      	movs	r6, #0
 8010462:	e09d      	b.n	80105a0 <_strtod_l+0x2f0>
 8010464:	2300      	movs	r3, #0
 8010466:	e7c4      	b.n	80103f2 <_strtod_l+0x142>
 8010468:	2f08      	cmp	r7, #8
 801046a:	bfd8      	it	le
 801046c:	9907      	ldrle	r1, [sp, #28]
 801046e:	f100 0001 	add.w	r0, r0, #1
 8010472:	bfda      	itte	le
 8010474:	fb02 3301 	mlale	r3, r2, r1, r3
 8010478:	9307      	strle	r3, [sp, #28]
 801047a:	fb02 3909 	mlagt	r9, r2, r9, r3
 801047e:	3701      	adds	r7, #1
 8010480:	9017      	str	r0, [sp, #92]	; 0x5c
 8010482:	e7bf      	b.n	8010404 <_strtod_l+0x154>
 8010484:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010486:	195a      	adds	r2, r3, r5
 8010488:	9217      	str	r2, [sp, #92]	; 0x5c
 801048a:	5d5a      	ldrb	r2, [r3, r5]
 801048c:	2f00      	cmp	r7, #0
 801048e:	d037      	beq.n	8010500 <_strtod_l+0x250>
 8010490:	9005      	str	r0, [sp, #20]
 8010492:	463d      	mov	r5, r7
 8010494:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8010498:	2b09      	cmp	r3, #9
 801049a:	d912      	bls.n	80104c2 <_strtod_l+0x212>
 801049c:	2301      	movs	r3, #1
 801049e:	e7c2      	b.n	8010426 <_strtod_l+0x176>
 80104a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80104a2:	1c5a      	adds	r2, r3, #1
 80104a4:	9217      	str	r2, [sp, #92]	; 0x5c
 80104a6:	785a      	ldrb	r2, [r3, #1]
 80104a8:	3001      	adds	r0, #1
 80104aa:	2a30      	cmp	r2, #48	; 0x30
 80104ac:	d0f8      	beq.n	80104a0 <_strtod_l+0x1f0>
 80104ae:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80104b2:	2b08      	cmp	r3, #8
 80104b4:	f200 84d9 	bhi.w	8010e6a <_strtod_l+0xbba>
 80104b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80104ba:	9005      	str	r0, [sp, #20]
 80104bc:	2000      	movs	r0, #0
 80104be:	9308      	str	r3, [sp, #32]
 80104c0:	4605      	mov	r5, r0
 80104c2:	3a30      	subs	r2, #48	; 0x30
 80104c4:	f100 0301 	add.w	r3, r0, #1
 80104c8:	d014      	beq.n	80104f4 <_strtod_l+0x244>
 80104ca:	9905      	ldr	r1, [sp, #20]
 80104cc:	4419      	add	r1, r3
 80104ce:	9105      	str	r1, [sp, #20]
 80104d0:	462b      	mov	r3, r5
 80104d2:	eb00 0e05 	add.w	lr, r0, r5
 80104d6:	210a      	movs	r1, #10
 80104d8:	4573      	cmp	r3, lr
 80104da:	d113      	bne.n	8010504 <_strtod_l+0x254>
 80104dc:	182b      	adds	r3, r5, r0
 80104de:	2b08      	cmp	r3, #8
 80104e0:	f105 0501 	add.w	r5, r5, #1
 80104e4:	4405      	add	r5, r0
 80104e6:	dc1c      	bgt.n	8010522 <_strtod_l+0x272>
 80104e8:	9907      	ldr	r1, [sp, #28]
 80104ea:	230a      	movs	r3, #10
 80104ec:	fb03 2301 	mla	r3, r3, r1, r2
 80104f0:	9307      	str	r3, [sp, #28]
 80104f2:	2300      	movs	r3, #0
 80104f4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80104f6:	1c51      	adds	r1, r2, #1
 80104f8:	9117      	str	r1, [sp, #92]	; 0x5c
 80104fa:	7852      	ldrb	r2, [r2, #1]
 80104fc:	4618      	mov	r0, r3
 80104fe:	e7c9      	b.n	8010494 <_strtod_l+0x1e4>
 8010500:	4638      	mov	r0, r7
 8010502:	e7d2      	b.n	80104aa <_strtod_l+0x1fa>
 8010504:	2b08      	cmp	r3, #8
 8010506:	dc04      	bgt.n	8010512 <_strtod_l+0x262>
 8010508:	9e07      	ldr	r6, [sp, #28]
 801050a:	434e      	muls	r6, r1
 801050c:	9607      	str	r6, [sp, #28]
 801050e:	3301      	adds	r3, #1
 8010510:	e7e2      	b.n	80104d8 <_strtod_l+0x228>
 8010512:	f103 0c01 	add.w	ip, r3, #1
 8010516:	f1bc 0f10 	cmp.w	ip, #16
 801051a:	bfd8      	it	le
 801051c:	fb01 f909 	mulle.w	r9, r1, r9
 8010520:	e7f5      	b.n	801050e <_strtod_l+0x25e>
 8010522:	2d10      	cmp	r5, #16
 8010524:	bfdc      	itt	le
 8010526:	230a      	movle	r3, #10
 8010528:	fb03 2909 	mlale	r9, r3, r9, r2
 801052c:	e7e1      	b.n	80104f2 <_strtod_l+0x242>
 801052e:	2300      	movs	r3, #0
 8010530:	9305      	str	r3, [sp, #20]
 8010532:	2301      	movs	r3, #1
 8010534:	e77c      	b.n	8010430 <_strtod_l+0x180>
 8010536:	f04f 0c00 	mov.w	ip, #0
 801053a:	f108 0202 	add.w	r2, r8, #2
 801053e:	9217      	str	r2, [sp, #92]	; 0x5c
 8010540:	f898 2002 	ldrb.w	r2, [r8, #2]
 8010544:	e785      	b.n	8010452 <_strtod_l+0x1a2>
 8010546:	f04f 0c01 	mov.w	ip, #1
 801054a:	e7f6      	b.n	801053a <_strtod_l+0x28a>
 801054c:	08014ee0 	.word	0x08014ee0
 8010550:	08014c00 	.word	0x08014c00
 8010554:	7ff00000 	.word	0x7ff00000
 8010558:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801055a:	1c51      	adds	r1, r2, #1
 801055c:	9117      	str	r1, [sp, #92]	; 0x5c
 801055e:	7852      	ldrb	r2, [r2, #1]
 8010560:	2a30      	cmp	r2, #48	; 0x30
 8010562:	d0f9      	beq.n	8010558 <_strtod_l+0x2a8>
 8010564:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8010568:	2908      	cmp	r1, #8
 801056a:	f63f af79 	bhi.w	8010460 <_strtod_l+0x1b0>
 801056e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8010572:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010574:	9206      	str	r2, [sp, #24]
 8010576:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010578:	1c51      	adds	r1, r2, #1
 801057a:	9117      	str	r1, [sp, #92]	; 0x5c
 801057c:	7852      	ldrb	r2, [r2, #1]
 801057e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8010582:	2e09      	cmp	r6, #9
 8010584:	d937      	bls.n	80105f6 <_strtod_l+0x346>
 8010586:	9e06      	ldr	r6, [sp, #24]
 8010588:	1b89      	subs	r1, r1, r6
 801058a:	2908      	cmp	r1, #8
 801058c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8010590:	dc02      	bgt.n	8010598 <_strtod_l+0x2e8>
 8010592:	4576      	cmp	r6, lr
 8010594:	bfa8      	it	ge
 8010596:	4676      	movge	r6, lr
 8010598:	f1bc 0f00 	cmp.w	ip, #0
 801059c:	d000      	beq.n	80105a0 <_strtod_l+0x2f0>
 801059e:	4276      	negs	r6, r6
 80105a0:	2d00      	cmp	r5, #0
 80105a2:	d14d      	bne.n	8010640 <_strtod_l+0x390>
 80105a4:	9904      	ldr	r1, [sp, #16]
 80105a6:	4301      	orrs	r1, r0
 80105a8:	f47f aec6 	bne.w	8010338 <_strtod_l+0x88>
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	f47f aee1 	bne.w	8010374 <_strtod_l+0xc4>
 80105b2:	2a69      	cmp	r2, #105	; 0x69
 80105b4:	d027      	beq.n	8010606 <_strtod_l+0x356>
 80105b6:	dc24      	bgt.n	8010602 <_strtod_l+0x352>
 80105b8:	2a49      	cmp	r2, #73	; 0x49
 80105ba:	d024      	beq.n	8010606 <_strtod_l+0x356>
 80105bc:	2a4e      	cmp	r2, #78	; 0x4e
 80105be:	f47f aed9 	bne.w	8010374 <_strtod_l+0xc4>
 80105c2:	499f      	ldr	r1, [pc, #636]	; (8010840 <_strtod_l+0x590>)
 80105c4:	a817      	add	r0, sp, #92	; 0x5c
 80105c6:	f001 feeb 	bl	80123a0 <__match>
 80105ca:	2800      	cmp	r0, #0
 80105cc:	f43f aed2 	beq.w	8010374 <_strtod_l+0xc4>
 80105d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80105d2:	781b      	ldrb	r3, [r3, #0]
 80105d4:	2b28      	cmp	r3, #40	; 0x28
 80105d6:	d12d      	bne.n	8010634 <_strtod_l+0x384>
 80105d8:	499a      	ldr	r1, [pc, #616]	; (8010844 <_strtod_l+0x594>)
 80105da:	aa1a      	add	r2, sp, #104	; 0x68
 80105dc:	a817      	add	r0, sp, #92	; 0x5c
 80105de:	f001 fef3 	bl	80123c8 <__hexnan>
 80105e2:	2805      	cmp	r0, #5
 80105e4:	d126      	bne.n	8010634 <_strtod_l+0x384>
 80105e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80105e8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80105ec:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80105f0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80105f4:	e6a0      	b.n	8010338 <_strtod_l+0x88>
 80105f6:	210a      	movs	r1, #10
 80105f8:	fb01 2e0e 	mla	lr, r1, lr, r2
 80105fc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8010600:	e7b9      	b.n	8010576 <_strtod_l+0x2c6>
 8010602:	2a6e      	cmp	r2, #110	; 0x6e
 8010604:	e7db      	b.n	80105be <_strtod_l+0x30e>
 8010606:	4990      	ldr	r1, [pc, #576]	; (8010848 <_strtod_l+0x598>)
 8010608:	a817      	add	r0, sp, #92	; 0x5c
 801060a:	f001 fec9 	bl	80123a0 <__match>
 801060e:	2800      	cmp	r0, #0
 8010610:	f43f aeb0 	beq.w	8010374 <_strtod_l+0xc4>
 8010614:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010616:	498d      	ldr	r1, [pc, #564]	; (801084c <_strtod_l+0x59c>)
 8010618:	3b01      	subs	r3, #1
 801061a:	a817      	add	r0, sp, #92	; 0x5c
 801061c:	9317      	str	r3, [sp, #92]	; 0x5c
 801061e:	f001 febf 	bl	80123a0 <__match>
 8010622:	b910      	cbnz	r0, 801062a <_strtod_l+0x37a>
 8010624:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010626:	3301      	adds	r3, #1
 8010628:	9317      	str	r3, [sp, #92]	; 0x5c
 801062a:	f8df b230 	ldr.w	fp, [pc, #560]	; 801085c <_strtod_l+0x5ac>
 801062e:	f04f 0a00 	mov.w	sl, #0
 8010632:	e681      	b.n	8010338 <_strtod_l+0x88>
 8010634:	4886      	ldr	r0, [pc, #536]	; (8010850 <_strtod_l+0x5a0>)
 8010636:	f003 fb37 	bl	8013ca8 <nan>
 801063a:	ec5b ab10 	vmov	sl, fp, d0
 801063e:	e67b      	b.n	8010338 <_strtod_l+0x88>
 8010640:	9b05      	ldr	r3, [sp, #20]
 8010642:	9807      	ldr	r0, [sp, #28]
 8010644:	1af3      	subs	r3, r6, r3
 8010646:	2f00      	cmp	r7, #0
 8010648:	bf08      	it	eq
 801064a:	462f      	moveq	r7, r5
 801064c:	2d10      	cmp	r5, #16
 801064e:	9306      	str	r3, [sp, #24]
 8010650:	46a8      	mov	r8, r5
 8010652:	bfa8      	it	ge
 8010654:	f04f 0810 	movge.w	r8, #16
 8010658:	f7ef ff84 	bl	8000564 <__aeabi_ui2d>
 801065c:	2d09      	cmp	r5, #9
 801065e:	4682      	mov	sl, r0
 8010660:	468b      	mov	fp, r1
 8010662:	dd13      	ble.n	801068c <_strtod_l+0x3dc>
 8010664:	4b7b      	ldr	r3, [pc, #492]	; (8010854 <_strtod_l+0x5a4>)
 8010666:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801066a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801066e:	f7ef fff3 	bl	8000658 <__aeabi_dmul>
 8010672:	4682      	mov	sl, r0
 8010674:	4648      	mov	r0, r9
 8010676:	468b      	mov	fp, r1
 8010678:	f7ef ff74 	bl	8000564 <__aeabi_ui2d>
 801067c:	4602      	mov	r2, r0
 801067e:	460b      	mov	r3, r1
 8010680:	4650      	mov	r0, sl
 8010682:	4659      	mov	r1, fp
 8010684:	f7ef fe32 	bl	80002ec <__adddf3>
 8010688:	4682      	mov	sl, r0
 801068a:	468b      	mov	fp, r1
 801068c:	2d0f      	cmp	r5, #15
 801068e:	dc38      	bgt.n	8010702 <_strtod_l+0x452>
 8010690:	9b06      	ldr	r3, [sp, #24]
 8010692:	2b00      	cmp	r3, #0
 8010694:	f43f ae50 	beq.w	8010338 <_strtod_l+0x88>
 8010698:	dd24      	ble.n	80106e4 <_strtod_l+0x434>
 801069a:	2b16      	cmp	r3, #22
 801069c:	dc0b      	bgt.n	80106b6 <_strtod_l+0x406>
 801069e:	496d      	ldr	r1, [pc, #436]	; (8010854 <_strtod_l+0x5a4>)
 80106a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80106a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80106a8:	4652      	mov	r2, sl
 80106aa:	465b      	mov	r3, fp
 80106ac:	f7ef ffd4 	bl	8000658 <__aeabi_dmul>
 80106b0:	4682      	mov	sl, r0
 80106b2:	468b      	mov	fp, r1
 80106b4:	e640      	b.n	8010338 <_strtod_l+0x88>
 80106b6:	9a06      	ldr	r2, [sp, #24]
 80106b8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80106bc:	4293      	cmp	r3, r2
 80106be:	db20      	blt.n	8010702 <_strtod_l+0x452>
 80106c0:	4c64      	ldr	r4, [pc, #400]	; (8010854 <_strtod_l+0x5a4>)
 80106c2:	f1c5 050f 	rsb	r5, r5, #15
 80106c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80106ca:	4652      	mov	r2, sl
 80106cc:	465b      	mov	r3, fp
 80106ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80106d2:	f7ef ffc1 	bl	8000658 <__aeabi_dmul>
 80106d6:	9b06      	ldr	r3, [sp, #24]
 80106d8:	1b5d      	subs	r5, r3, r5
 80106da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80106de:	e9d4 2300 	ldrd	r2, r3, [r4]
 80106e2:	e7e3      	b.n	80106ac <_strtod_l+0x3fc>
 80106e4:	9b06      	ldr	r3, [sp, #24]
 80106e6:	3316      	adds	r3, #22
 80106e8:	db0b      	blt.n	8010702 <_strtod_l+0x452>
 80106ea:	9b05      	ldr	r3, [sp, #20]
 80106ec:	1b9e      	subs	r6, r3, r6
 80106ee:	4b59      	ldr	r3, [pc, #356]	; (8010854 <_strtod_l+0x5a4>)
 80106f0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80106f4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80106f8:	4650      	mov	r0, sl
 80106fa:	4659      	mov	r1, fp
 80106fc:	f7f0 f8d6 	bl	80008ac <__aeabi_ddiv>
 8010700:	e7d6      	b.n	80106b0 <_strtod_l+0x400>
 8010702:	9b06      	ldr	r3, [sp, #24]
 8010704:	eba5 0808 	sub.w	r8, r5, r8
 8010708:	4498      	add	r8, r3
 801070a:	f1b8 0f00 	cmp.w	r8, #0
 801070e:	dd74      	ble.n	80107fa <_strtod_l+0x54a>
 8010710:	f018 030f 	ands.w	r3, r8, #15
 8010714:	d00a      	beq.n	801072c <_strtod_l+0x47c>
 8010716:	494f      	ldr	r1, [pc, #316]	; (8010854 <_strtod_l+0x5a4>)
 8010718:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801071c:	4652      	mov	r2, sl
 801071e:	465b      	mov	r3, fp
 8010720:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010724:	f7ef ff98 	bl	8000658 <__aeabi_dmul>
 8010728:	4682      	mov	sl, r0
 801072a:	468b      	mov	fp, r1
 801072c:	f038 080f 	bics.w	r8, r8, #15
 8010730:	d04f      	beq.n	80107d2 <_strtod_l+0x522>
 8010732:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8010736:	dd22      	ble.n	801077e <_strtod_l+0x4ce>
 8010738:	2500      	movs	r5, #0
 801073a:	462e      	mov	r6, r5
 801073c:	9507      	str	r5, [sp, #28]
 801073e:	9505      	str	r5, [sp, #20]
 8010740:	2322      	movs	r3, #34	; 0x22
 8010742:	f8df b118 	ldr.w	fp, [pc, #280]	; 801085c <_strtod_l+0x5ac>
 8010746:	6023      	str	r3, [r4, #0]
 8010748:	f04f 0a00 	mov.w	sl, #0
 801074c:	9b07      	ldr	r3, [sp, #28]
 801074e:	2b00      	cmp	r3, #0
 8010750:	f43f adf2 	beq.w	8010338 <_strtod_l+0x88>
 8010754:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010756:	4620      	mov	r0, r4
 8010758:	f001 ff42 	bl	80125e0 <_Bfree>
 801075c:	9905      	ldr	r1, [sp, #20]
 801075e:	4620      	mov	r0, r4
 8010760:	f001 ff3e 	bl	80125e0 <_Bfree>
 8010764:	4631      	mov	r1, r6
 8010766:	4620      	mov	r0, r4
 8010768:	f001 ff3a 	bl	80125e0 <_Bfree>
 801076c:	9907      	ldr	r1, [sp, #28]
 801076e:	4620      	mov	r0, r4
 8010770:	f001 ff36 	bl	80125e0 <_Bfree>
 8010774:	4629      	mov	r1, r5
 8010776:	4620      	mov	r0, r4
 8010778:	f001 ff32 	bl	80125e0 <_Bfree>
 801077c:	e5dc      	b.n	8010338 <_strtod_l+0x88>
 801077e:	4b36      	ldr	r3, [pc, #216]	; (8010858 <_strtod_l+0x5a8>)
 8010780:	9304      	str	r3, [sp, #16]
 8010782:	2300      	movs	r3, #0
 8010784:	ea4f 1828 	mov.w	r8, r8, asr #4
 8010788:	4650      	mov	r0, sl
 801078a:	4659      	mov	r1, fp
 801078c:	4699      	mov	r9, r3
 801078e:	f1b8 0f01 	cmp.w	r8, #1
 8010792:	dc21      	bgt.n	80107d8 <_strtod_l+0x528>
 8010794:	b10b      	cbz	r3, 801079a <_strtod_l+0x4ea>
 8010796:	4682      	mov	sl, r0
 8010798:	468b      	mov	fp, r1
 801079a:	4b2f      	ldr	r3, [pc, #188]	; (8010858 <_strtod_l+0x5a8>)
 801079c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80107a0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80107a4:	4652      	mov	r2, sl
 80107a6:	465b      	mov	r3, fp
 80107a8:	e9d9 0100 	ldrd	r0, r1, [r9]
 80107ac:	f7ef ff54 	bl	8000658 <__aeabi_dmul>
 80107b0:	4b2a      	ldr	r3, [pc, #168]	; (801085c <_strtod_l+0x5ac>)
 80107b2:	460a      	mov	r2, r1
 80107b4:	400b      	ands	r3, r1
 80107b6:	492a      	ldr	r1, [pc, #168]	; (8010860 <_strtod_l+0x5b0>)
 80107b8:	428b      	cmp	r3, r1
 80107ba:	4682      	mov	sl, r0
 80107bc:	d8bc      	bhi.n	8010738 <_strtod_l+0x488>
 80107be:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80107c2:	428b      	cmp	r3, r1
 80107c4:	bf86      	itte	hi
 80107c6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8010864 <_strtod_l+0x5b4>
 80107ca:	f04f 3aff 	movhi.w	sl, #4294967295
 80107ce:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80107d2:	2300      	movs	r3, #0
 80107d4:	9304      	str	r3, [sp, #16]
 80107d6:	e084      	b.n	80108e2 <_strtod_l+0x632>
 80107d8:	f018 0f01 	tst.w	r8, #1
 80107dc:	d005      	beq.n	80107ea <_strtod_l+0x53a>
 80107de:	9b04      	ldr	r3, [sp, #16]
 80107e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107e4:	f7ef ff38 	bl	8000658 <__aeabi_dmul>
 80107e8:	2301      	movs	r3, #1
 80107ea:	9a04      	ldr	r2, [sp, #16]
 80107ec:	3208      	adds	r2, #8
 80107ee:	f109 0901 	add.w	r9, r9, #1
 80107f2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80107f6:	9204      	str	r2, [sp, #16]
 80107f8:	e7c9      	b.n	801078e <_strtod_l+0x4de>
 80107fa:	d0ea      	beq.n	80107d2 <_strtod_l+0x522>
 80107fc:	f1c8 0800 	rsb	r8, r8, #0
 8010800:	f018 020f 	ands.w	r2, r8, #15
 8010804:	d00a      	beq.n	801081c <_strtod_l+0x56c>
 8010806:	4b13      	ldr	r3, [pc, #76]	; (8010854 <_strtod_l+0x5a4>)
 8010808:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801080c:	4650      	mov	r0, sl
 801080e:	4659      	mov	r1, fp
 8010810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010814:	f7f0 f84a 	bl	80008ac <__aeabi_ddiv>
 8010818:	4682      	mov	sl, r0
 801081a:	468b      	mov	fp, r1
 801081c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8010820:	d0d7      	beq.n	80107d2 <_strtod_l+0x522>
 8010822:	f1b8 0f1f 	cmp.w	r8, #31
 8010826:	dd1f      	ble.n	8010868 <_strtod_l+0x5b8>
 8010828:	2500      	movs	r5, #0
 801082a:	462e      	mov	r6, r5
 801082c:	9507      	str	r5, [sp, #28]
 801082e:	9505      	str	r5, [sp, #20]
 8010830:	2322      	movs	r3, #34	; 0x22
 8010832:	f04f 0a00 	mov.w	sl, #0
 8010836:	f04f 0b00 	mov.w	fp, #0
 801083a:	6023      	str	r3, [r4, #0]
 801083c:	e786      	b.n	801074c <_strtod_l+0x49c>
 801083e:	bf00      	nop
 8010840:	08014bd5 	.word	0x08014bd5
 8010844:	08014c14 	.word	0x08014c14
 8010848:	08014bcd 	.word	0x08014bcd
 801084c:	08014e04 	.word	0x08014e04
 8010850:	08014cff 	.word	0x08014cff
 8010854:	08014f78 	.word	0x08014f78
 8010858:	08014f50 	.word	0x08014f50
 801085c:	7ff00000 	.word	0x7ff00000
 8010860:	7ca00000 	.word	0x7ca00000
 8010864:	7fefffff 	.word	0x7fefffff
 8010868:	f018 0310 	ands.w	r3, r8, #16
 801086c:	bf18      	it	ne
 801086e:	236a      	movne	r3, #106	; 0x6a
 8010870:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8010c20 <_strtod_l+0x970>
 8010874:	9304      	str	r3, [sp, #16]
 8010876:	4650      	mov	r0, sl
 8010878:	4659      	mov	r1, fp
 801087a:	2300      	movs	r3, #0
 801087c:	f018 0f01 	tst.w	r8, #1
 8010880:	d004      	beq.n	801088c <_strtod_l+0x5dc>
 8010882:	e9d9 2300 	ldrd	r2, r3, [r9]
 8010886:	f7ef fee7 	bl	8000658 <__aeabi_dmul>
 801088a:	2301      	movs	r3, #1
 801088c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8010890:	f109 0908 	add.w	r9, r9, #8
 8010894:	d1f2      	bne.n	801087c <_strtod_l+0x5cc>
 8010896:	b10b      	cbz	r3, 801089c <_strtod_l+0x5ec>
 8010898:	4682      	mov	sl, r0
 801089a:	468b      	mov	fp, r1
 801089c:	9b04      	ldr	r3, [sp, #16]
 801089e:	b1c3      	cbz	r3, 80108d2 <_strtod_l+0x622>
 80108a0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80108a4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	4659      	mov	r1, fp
 80108ac:	dd11      	ble.n	80108d2 <_strtod_l+0x622>
 80108ae:	2b1f      	cmp	r3, #31
 80108b0:	f340 8124 	ble.w	8010afc <_strtod_l+0x84c>
 80108b4:	2b34      	cmp	r3, #52	; 0x34
 80108b6:	bfde      	ittt	le
 80108b8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80108bc:	f04f 33ff 	movle.w	r3, #4294967295
 80108c0:	fa03 f202 	lslle.w	r2, r3, r2
 80108c4:	f04f 0a00 	mov.w	sl, #0
 80108c8:	bfcc      	ite	gt
 80108ca:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80108ce:	ea02 0b01 	andle.w	fp, r2, r1
 80108d2:	2200      	movs	r2, #0
 80108d4:	2300      	movs	r3, #0
 80108d6:	4650      	mov	r0, sl
 80108d8:	4659      	mov	r1, fp
 80108da:	f7f0 f925 	bl	8000b28 <__aeabi_dcmpeq>
 80108de:	2800      	cmp	r0, #0
 80108e0:	d1a2      	bne.n	8010828 <_strtod_l+0x578>
 80108e2:	9b07      	ldr	r3, [sp, #28]
 80108e4:	9300      	str	r3, [sp, #0]
 80108e6:	9908      	ldr	r1, [sp, #32]
 80108e8:	462b      	mov	r3, r5
 80108ea:	463a      	mov	r2, r7
 80108ec:	4620      	mov	r0, r4
 80108ee:	f001 fedf 	bl	80126b0 <__s2b>
 80108f2:	9007      	str	r0, [sp, #28]
 80108f4:	2800      	cmp	r0, #0
 80108f6:	f43f af1f 	beq.w	8010738 <_strtod_l+0x488>
 80108fa:	9b05      	ldr	r3, [sp, #20]
 80108fc:	1b9e      	subs	r6, r3, r6
 80108fe:	9b06      	ldr	r3, [sp, #24]
 8010900:	2b00      	cmp	r3, #0
 8010902:	bfb4      	ite	lt
 8010904:	4633      	movlt	r3, r6
 8010906:	2300      	movge	r3, #0
 8010908:	930c      	str	r3, [sp, #48]	; 0x30
 801090a:	9b06      	ldr	r3, [sp, #24]
 801090c:	2500      	movs	r5, #0
 801090e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010912:	9312      	str	r3, [sp, #72]	; 0x48
 8010914:	462e      	mov	r6, r5
 8010916:	9b07      	ldr	r3, [sp, #28]
 8010918:	4620      	mov	r0, r4
 801091a:	6859      	ldr	r1, [r3, #4]
 801091c:	f001 fe20 	bl	8012560 <_Balloc>
 8010920:	9005      	str	r0, [sp, #20]
 8010922:	2800      	cmp	r0, #0
 8010924:	f43f af0c 	beq.w	8010740 <_strtod_l+0x490>
 8010928:	9b07      	ldr	r3, [sp, #28]
 801092a:	691a      	ldr	r2, [r3, #16]
 801092c:	3202      	adds	r2, #2
 801092e:	f103 010c 	add.w	r1, r3, #12
 8010932:	0092      	lsls	r2, r2, #2
 8010934:	300c      	adds	r0, #12
 8010936:	f7fe fd6f 	bl	800f418 <memcpy>
 801093a:	ec4b ab10 	vmov	d0, sl, fp
 801093e:	aa1a      	add	r2, sp, #104	; 0x68
 8010940:	a919      	add	r1, sp, #100	; 0x64
 8010942:	4620      	mov	r0, r4
 8010944:	f002 f9fa 	bl	8012d3c <__d2b>
 8010948:	ec4b ab18 	vmov	d8, sl, fp
 801094c:	9018      	str	r0, [sp, #96]	; 0x60
 801094e:	2800      	cmp	r0, #0
 8010950:	f43f aef6 	beq.w	8010740 <_strtod_l+0x490>
 8010954:	2101      	movs	r1, #1
 8010956:	4620      	mov	r0, r4
 8010958:	f001 ff44 	bl	80127e4 <__i2b>
 801095c:	4606      	mov	r6, r0
 801095e:	2800      	cmp	r0, #0
 8010960:	f43f aeee 	beq.w	8010740 <_strtod_l+0x490>
 8010964:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010966:	9904      	ldr	r1, [sp, #16]
 8010968:	2b00      	cmp	r3, #0
 801096a:	bfab      	itete	ge
 801096c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801096e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8010970:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8010972:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8010976:	bfac      	ite	ge
 8010978:	eb03 0902 	addge.w	r9, r3, r2
 801097c:	1ad7      	sublt	r7, r2, r3
 801097e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8010980:	eba3 0801 	sub.w	r8, r3, r1
 8010984:	4490      	add	r8, r2
 8010986:	4ba1      	ldr	r3, [pc, #644]	; (8010c0c <_strtod_l+0x95c>)
 8010988:	f108 38ff 	add.w	r8, r8, #4294967295
 801098c:	4598      	cmp	r8, r3
 801098e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8010992:	f280 80c7 	bge.w	8010b24 <_strtod_l+0x874>
 8010996:	eba3 0308 	sub.w	r3, r3, r8
 801099a:	2b1f      	cmp	r3, #31
 801099c:	eba2 0203 	sub.w	r2, r2, r3
 80109a0:	f04f 0101 	mov.w	r1, #1
 80109a4:	f300 80b1 	bgt.w	8010b0a <_strtod_l+0x85a>
 80109a8:	fa01 f303 	lsl.w	r3, r1, r3
 80109ac:	930d      	str	r3, [sp, #52]	; 0x34
 80109ae:	2300      	movs	r3, #0
 80109b0:	9308      	str	r3, [sp, #32]
 80109b2:	eb09 0802 	add.w	r8, r9, r2
 80109b6:	9b04      	ldr	r3, [sp, #16]
 80109b8:	45c1      	cmp	r9, r8
 80109ba:	4417      	add	r7, r2
 80109bc:	441f      	add	r7, r3
 80109be:	464b      	mov	r3, r9
 80109c0:	bfa8      	it	ge
 80109c2:	4643      	movge	r3, r8
 80109c4:	42bb      	cmp	r3, r7
 80109c6:	bfa8      	it	ge
 80109c8:	463b      	movge	r3, r7
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	bfc2      	ittt	gt
 80109ce:	eba8 0803 	subgt.w	r8, r8, r3
 80109d2:	1aff      	subgt	r7, r7, r3
 80109d4:	eba9 0903 	subgt.w	r9, r9, r3
 80109d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80109da:	2b00      	cmp	r3, #0
 80109dc:	dd17      	ble.n	8010a0e <_strtod_l+0x75e>
 80109de:	4631      	mov	r1, r6
 80109e0:	461a      	mov	r2, r3
 80109e2:	4620      	mov	r0, r4
 80109e4:	f001 ffbe 	bl	8012964 <__pow5mult>
 80109e8:	4606      	mov	r6, r0
 80109ea:	2800      	cmp	r0, #0
 80109ec:	f43f aea8 	beq.w	8010740 <_strtod_l+0x490>
 80109f0:	4601      	mov	r1, r0
 80109f2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80109f4:	4620      	mov	r0, r4
 80109f6:	f001 ff0b 	bl	8012810 <__multiply>
 80109fa:	900b      	str	r0, [sp, #44]	; 0x2c
 80109fc:	2800      	cmp	r0, #0
 80109fe:	f43f ae9f 	beq.w	8010740 <_strtod_l+0x490>
 8010a02:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010a04:	4620      	mov	r0, r4
 8010a06:	f001 fdeb 	bl	80125e0 <_Bfree>
 8010a0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010a0c:	9318      	str	r3, [sp, #96]	; 0x60
 8010a0e:	f1b8 0f00 	cmp.w	r8, #0
 8010a12:	f300 808c 	bgt.w	8010b2e <_strtod_l+0x87e>
 8010a16:	9b06      	ldr	r3, [sp, #24]
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	dd08      	ble.n	8010a2e <_strtod_l+0x77e>
 8010a1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010a1e:	9905      	ldr	r1, [sp, #20]
 8010a20:	4620      	mov	r0, r4
 8010a22:	f001 ff9f 	bl	8012964 <__pow5mult>
 8010a26:	9005      	str	r0, [sp, #20]
 8010a28:	2800      	cmp	r0, #0
 8010a2a:	f43f ae89 	beq.w	8010740 <_strtod_l+0x490>
 8010a2e:	2f00      	cmp	r7, #0
 8010a30:	dd08      	ble.n	8010a44 <_strtod_l+0x794>
 8010a32:	9905      	ldr	r1, [sp, #20]
 8010a34:	463a      	mov	r2, r7
 8010a36:	4620      	mov	r0, r4
 8010a38:	f001 ffee 	bl	8012a18 <__lshift>
 8010a3c:	9005      	str	r0, [sp, #20]
 8010a3e:	2800      	cmp	r0, #0
 8010a40:	f43f ae7e 	beq.w	8010740 <_strtod_l+0x490>
 8010a44:	f1b9 0f00 	cmp.w	r9, #0
 8010a48:	dd08      	ble.n	8010a5c <_strtod_l+0x7ac>
 8010a4a:	4631      	mov	r1, r6
 8010a4c:	464a      	mov	r2, r9
 8010a4e:	4620      	mov	r0, r4
 8010a50:	f001 ffe2 	bl	8012a18 <__lshift>
 8010a54:	4606      	mov	r6, r0
 8010a56:	2800      	cmp	r0, #0
 8010a58:	f43f ae72 	beq.w	8010740 <_strtod_l+0x490>
 8010a5c:	9a05      	ldr	r2, [sp, #20]
 8010a5e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010a60:	4620      	mov	r0, r4
 8010a62:	f002 f865 	bl	8012b30 <__mdiff>
 8010a66:	4605      	mov	r5, r0
 8010a68:	2800      	cmp	r0, #0
 8010a6a:	f43f ae69 	beq.w	8010740 <_strtod_l+0x490>
 8010a6e:	68c3      	ldr	r3, [r0, #12]
 8010a70:	930b      	str	r3, [sp, #44]	; 0x2c
 8010a72:	2300      	movs	r3, #0
 8010a74:	60c3      	str	r3, [r0, #12]
 8010a76:	4631      	mov	r1, r6
 8010a78:	f002 f83e 	bl	8012af8 <__mcmp>
 8010a7c:	2800      	cmp	r0, #0
 8010a7e:	da60      	bge.n	8010b42 <_strtod_l+0x892>
 8010a80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010a82:	ea53 030a 	orrs.w	r3, r3, sl
 8010a86:	f040 8082 	bne.w	8010b8e <_strtod_l+0x8de>
 8010a8a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d17d      	bne.n	8010b8e <_strtod_l+0x8de>
 8010a92:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010a96:	0d1b      	lsrs	r3, r3, #20
 8010a98:	051b      	lsls	r3, r3, #20
 8010a9a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8010a9e:	d976      	bls.n	8010b8e <_strtod_l+0x8de>
 8010aa0:	696b      	ldr	r3, [r5, #20]
 8010aa2:	b913      	cbnz	r3, 8010aaa <_strtod_l+0x7fa>
 8010aa4:	692b      	ldr	r3, [r5, #16]
 8010aa6:	2b01      	cmp	r3, #1
 8010aa8:	dd71      	ble.n	8010b8e <_strtod_l+0x8de>
 8010aaa:	4629      	mov	r1, r5
 8010aac:	2201      	movs	r2, #1
 8010aae:	4620      	mov	r0, r4
 8010ab0:	f001 ffb2 	bl	8012a18 <__lshift>
 8010ab4:	4631      	mov	r1, r6
 8010ab6:	4605      	mov	r5, r0
 8010ab8:	f002 f81e 	bl	8012af8 <__mcmp>
 8010abc:	2800      	cmp	r0, #0
 8010abe:	dd66      	ble.n	8010b8e <_strtod_l+0x8de>
 8010ac0:	9904      	ldr	r1, [sp, #16]
 8010ac2:	4a53      	ldr	r2, [pc, #332]	; (8010c10 <_strtod_l+0x960>)
 8010ac4:	465b      	mov	r3, fp
 8010ac6:	2900      	cmp	r1, #0
 8010ac8:	f000 8081 	beq.w	8010bce <_strtod_l+0x91e>
 8010acc:	ea02 010b 	and.w	r1, r2, fp
 8010ad0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8010ad4:	dc7b      	bgt.n	8010bce <_strtod_l+0x91e>
 8010ad6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8010ada:	f77f aea9 	ble.w	8010830 <_strtod_l+0x580>
 8010ade:	4b4d      	ldr	r3, [pc, #308]	; (8010c14 <_strtod_l+0x964>)
 8010ae0:	4650      	mov	r0, sl
 8010ae2:	4659      	mov	r1, fp
 8010ae4:	2200      	movs	r2, #0
 8010ae6:	f7ef fdb7 	bl	8000658 <__aeabi_dmul>
 8010aea:	460b      	mov	r3, r1
 8010aec:	4303      	orrs	r3, r0
 8010aee:	bf08      	it	eq
 8010af0:	2322      	moveq	r3, #34	; 0x22
 8010af2:	4682      	mov	sl, r0
 8010af4:	468b      	mov	fp, r1
 8010af6:	bf08      	it	eq
 8010af8:	6023      	streq	r3, [r4, #0]
 8010afa:	e62b      	b.n	8010754 <_strtod_l+0x4a4>
 8010afc:	f04f 32ff 	mov.w	r2, #4294967295
 8010b00:	fa02 f303 	lsl.w	r3, r2, r3
 8010b04:	ea03 0a0a 	and.w	sl, r3, sl
 8010b08:	e6e3      	b.n	80108d2 <_strtod_l+0x622>
 8010b0a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8010b0e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8010b12:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8010b16:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8010b1a:	fa01 f308 	lsl.w	r3, r1, r8
 8010b1e:	9308      	str	r3, [sp, #32]
 8010b20:	910d      	str	r1, [sp, #52]	; 0x34
 8010b22:	e746      	b.n	80109b2 <_strtod_l+0x702>
 8010b24:	2300      	movs	r3, #0
 8010b26:	9308      	str	r3, [sp, #32]
 8010b28:	2301      	movs	r3, #1
 8010b2a:	930d      	str	r3, [sp, #52]	; 0x34
 8010b2c:	e741      	b.n	80109b2 <_strtod_l+0x702>
 8010b2e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010b30:	4642      	mov	r2, r8
 8010b32:	4620      	mov	r0, r4
 8010b34:	f001 ff70 	bl	8012a18 <__lshift>
 8010b38:	9018      	str	r0, [sp, #96]	; 0x60
 8010b3a:	2800      	cmp	r0, #0
 8010b3c:	f47f af6b 	bne.w	8010a16 <_strtod_l+0x766>
 8010b40:	e5fe      	b.n	8010740 <_strtod_l+0x490>
 8010b42:	465f      	mov	r7, fp
 8010b44:	d16e      	bne.n	8010c24 <_strtod_l+0x974>
 8010b46:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010b48:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010b4c:	b342      	cbz	r2, 8010ba0 <_strtod_l+0x8f0>
 8010b4e:	4a32      	ldr	r2, [pc, #200]	; (8010c18 <_strtod_l+0x968>)
 8010b50:	4293      	cmp	r3, r2
 8010b52:	d128      	bne.n	8010ba6 <_strtod_l+0x8f6>
 8010b54:	9b04      	ldr	r3, [sp, #16]
 8010b56:	4651      	mov	r1, sl
 8010b58:	b1eb      	cbz	r3, 8010b96 <_strtod_l+0x8e6>
 8010b5a:	4b2d      	ldr	r3, [pc, #180]	; (8010c10 <_strtod_l+0x960>)
 8010b5c:	403b      	ands	r3, r7
 8010b5e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010b62:	f04f 32ff 	mov.w	r2, #4294967295
 8010b66:	d819      	bhi.n	8010b9c <_strtod_l+0x8ec>
 8010b68:	0d1b      	lsrs	r3, r3, #20
 8010b6a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8010b72:	4299      	cmp	r1, r3
 8010b74:	d117      	bne.n	8010ba6 <_strtod_l+0x8f6>
 8010b76:	4b29      	ldr	r3, [pc, #164]	; (8010c1c <_strtod_l+0x96c>)
 8010b78:	429f      	cmp	r7, r3
 8010b7a:	d102      	bne.n	8010b82 <_strtod_l+0x8d2>
 8010b7c:	3101      	adds	r1, #1
 8010b7e:	f43f addf 	beq.w	8010740 <_strtod_l+0x490>
 8010b82:	4b23      	ldr	r3, [pc, #140]	; (8010c10 <_strtod_l+0x960>)
 8010b84:	403b      	ands	r3, r7
 8010b86:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8010b8a:	f04f 0a00 	mov.w	sl, #0
 8010b8e:	9b04      	ldr	r3, [sp, #16]
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d1a4      	bne.n	8010ade <_strtod_l+0x82e>
 8010b94:	e5de      	b.n	8010754 <_strtod_l+0x4a4>
 8010b96:	f04f 33ff 	mov.w	r3, #4294967295
 8010b9a:	e7ea      	b.n	8010b72 <_strtod_l+0x8c2>
 8010b9c:	4613      	mov	r3, r2
 8010b9e:	e7e8      	b.n	8010b72 <_strtod_l+0x8c2>
 8010ba0:	ea53 030a 	orrs.w	r3, r3, sl
 8010ba4:	d08c      	beq.n	8010ac0 <_strtod_l+0x810>
 8010ba6:	9b08      	ldr	r3, [sp, #32]
 8010ba8:	b1db      	cbz	r3, 8010be2 <_strtod_l+0x932>
 8010baa:	423b      	tst	r3, r7
 8010bac:	d0ef      	beq.n	8010b8e <_strtod_l+0x8de>
 8010bae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010bb0:	9a04      	ldr	r2, [sp, #16]
 8010bb2:	4650      	mov	r0, sl
 8010bb4:	4659      	mov	r1, fp
 8010bb6:	b1c3      	cbz	r3, 8010bea <_strtod_l+0x93a>
 8010bb8:	f7ff fb5d 	bl	8010276 <sulp>
 8010bbc:	4602      	mov	r2, r0
 8010bbe:	460b      	mov	r3, r1
 8010bc0:	ec51 0b18 	vmov	r0, r1, d8
 8010bc4:	f7ef fb92 	bl	80002ec <__adddf3>
 8010bc8:	4682      	mov	sl, r0
 8010bca:	468b      	mov	fp, r1
 8010bcc:	e7df      	b.n	8010b8e <_strtod_l+0x8de>
 8010bce:	4013      	ands	r3, r2
 8010bd0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8010bd4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8010bd8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8010bdc:	f04f 3aff 	mov.w	sl, #4294967295
 8010be0:	e7d5      	b.n	8010b8e <_strtod_l+0x8de>
 8010be2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010be4:	ea13 0f0a 	tst.w	r3, sl
 8010be8:	e7e0      	b.n	8010bac <_strtod_l+0x8fc>
 8010bea:	f7ff fb44 	bl	8010276 <sulp>
 8010bee:	4602      	mov	r2, r0
 8010bf0:	460b      	mov	r3, r1
 8010bf2:	ec51 0b18 	vmov	r0, r1, d8
 8010bf6:	f7ef fb77 	bl	80002e8 <__aeabi_dsub>
 8010bfa:	2200      	movs	r2, #0
 8010bfc:	2300      	movs	r3, #0
 8010bfe:	4682      	mov	sl, r0
 8010c00:	468b      	mov	fp, r1
 8010c02:	f7ef ff91 	bl	8000b28 <__aeabi_dcmpeq>
 8010c06:	2800      	cmp	r0, #0
 8010c08:	d0c1      	beq.n	8010b8e <_strtod_l+0x8de>
 8010c0a:	e611      	b.n	8010830 <_strtod_l+0x580>
 8010c0c:	fffffc02 	.word	0xfffffc02
 8010c10:	7ff00000 	.word	0x7ff00000
 8010c14:	39500000 	.word	0x39500000
 8010c18:	000fffff 	.word	0x000fffff
 8010c1c:	7fefffff 	.word	0x7fefffff
 8010c20:	08014c28 	.word	0x08014c28
 8010c24:	4631      	mov	r1, r6
 8010c26:	4628      	mov	r0, r5
 8010c28:	f002 f8e4 	bl	8012df4 <__ratio>
 8010c2c:	ec59 8b10 	vmov	r8, r9, d0
 8010c30:	ee10 0a10 	vmov	r0, s0
 8010c34:	2200      	movs	r2, #0
 8010c36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010c3a:	4649      	mov	r1, r9
 8010c3c:	f7ef ff88 	bl	8000b50 <__aeabi_dcmple>
 8010c40:	2800      	cmp	r0, #0
 8010c42:	d07a      	beq.n	8010d3a <_strtod_l+0xa8a>
 8010c44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d04a      	beq.n	8010ce0 <_strtod_l+0xa30>
 8010c4a:	4b95      	ldr	r3, [pc, #596]	; (8010ea0 <_strtod_l+0xbf0>)
 8010c4c:	2200      	movs	r2, #0
 8010c4e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010c52:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8010ea0 <_strtod_l+0xbf0>
 8010c56:	f04f 0800 	mov.w	r8, #0
 8010c5a:	4b92      	ldr	r3, [pc, #584]	; (8010ea4 <_strtod_l+0xbf4>)
 8010c5c:	403b      	ands	r3, r7
 8010c5e:	930d      	str	r3, [sp, #52]	; 0x34
 8010c60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010c62:	4b91      	ldr	r3, [pc, #580]	; (8010ea8 <_strtod_l+0xbf8>)
 8010c64:	429a      	cmp	r2, r3
 8010c66:	f040 80b0 	bne.w	8010dca <_strtod_l+0xb1a>
 8010c6a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010c6e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8010c72:	ec4b ab10 	vmov	d0, sl, fp
 8010c76:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010c7a:	f001 ffe3 	bl	8012c44 <__ulp>
 8010c7e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010c82:	ec53 2b10 	vmov	r2, r3, d0
 8010c86:	f7ef fce7 	bl	8000658 <__aeabi_dmul>
 8010c8a:	4652      	mov	r2, sl
 8010c8c:	465b      	mov	r3, fp
 8010c8e:	f7ef fb2d 	bl	80002ec <__adddf3>
 8010c92:	460b      	mov	r3, r1
 8010c94:	4983      	ldr	r1, [pc, #524]	; (8010ea4 <_strtod_l+0xbf4>)
 8010c96:	4a85      	ldr	r2, [pc, #532]	; (8010eac <_strtod_l+0xbfc>)
 8010c98:	4019      	ands	r1, r3
 8010c9a:	4291      	cmp	r1, r2
 8010c9c:	4682      	mov	sl, r0
 8010c9e:	d960      	bls.n	8010d62 <_strtod_l+0xab2>
 8010ca0:	ee18 3a90 	vmov	r3, s17
 8010ca4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8010ca8:	4293      	cmp	r3, r2
 8010caa:	d104      	bne.n	8010cb6 <_strtod_l+0xa06>
 8010cac:	ee18 3a10 	vmov	r3, s16
 8010cb0:	3301      	adds	r3, #1
 8010cb2:	f43f ad45 	beq.w	8010740 <_strtod_l+0x490>
 8010cb6:	f8df b200 	ldr.w	fp, [pc, #512]	; 8010eb8 <_strtod_l+0xc08>
 8010cba:	f04f 3aff 	mov.w	sl, #4294967295
 8010cbe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010cc0:	4620      	mov	r0, r4
 8010cc2:	f001 fc8d 	bl	80125e0 <_Bfree>
 8010cc6:	9905      	ldr	r1, [sp, #20]
 8010cc8:	4620      	mov	r0, r4
 8010cca:	f001 fc89 	bl	80125e0 <_Bfree>
 8010cce:	4631      	mov	r1, r6
 8010cd0:	4620      	mov	r0, r4
 8010cd2:	f001 fc85 	bl	80125e0 <_Bfree>
 8010cd6:	4629      	mov	r1, r5
 8010cd8:	4620      	mov	r0, r4
 8010cda:	f001 fc81 	bl	80125e0 <_Bfree>
 8010cde:	e61a      	b.n	8010916 <_strtod_l+0x666>
 8010ce0:	f1ba 0f00 	cmp.w	sl, #0
 8010ce4:	d11b      	bne.n	8010d1e <_strtod_l+0xa6e>
 8010ce6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010cea:	b9f3      	cbnz	r3, 8010d2a <_strtod_l+0xa7a>
 8010cec:	4b6c      	ldr	r3, [pc, #432]	; (8010ea0 <_strtod_l+0xbf0>)
 8010cee:	2200      	movs	r2, #0
 8010cf0:	4640      	mov	r0, r8
 8010cf2:	4649      	mov	r1, r9
 8010cf4:	f7ef ff22 	bl	8000b3c <__aeabi_dcmplt>
 8010cf8:	b9d0      	cbnz	r0, 8010d30 <_strtod_l+0xa80>
 8010cfa:	4640      	mov	r0, r8
 8010cfc:	4649      	mov	r1, r9
 8010cfe:	4b6c      	ldr	r3, [pc, #432]	; (8010eb0 <_strtod_l+0xc00>)
 8010d00:	2200      	movs	r2, #0
 8010d02:	f7ef fca9 	bl	8000658 <__aeabi_dmul>
 8010d06:	4680      	mov	r8, r0
 8010d08:	4689      	mov	r9, r1
 8010d0a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8010d0e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8010d12:	9315      	str	r3, [sp, #84]	; 0x54
 8010d14:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8010d18:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010d1c:	e79d      	b.n	8010c5a <_strtod_l+0x9aa>
 8010d1e:	f1ba 0f01 	cmp.w	sl, #1
 8010d22:	d102      	bne.n	8010d2a <_strtod_l+0xa7a>
 8010d24:	2f00      	cmp	r7, #0
 8010d26:	f43f ad83 	beq.w	8010830 <_strtod_l+0x580>
 8010d2a:	4b62      	ldr	r3, [pc, #392]	; (8010eb4 <_strtod_l+0xc04>)
 8010d2c:	2200      	movs	r2, #0
 8010d2e:	e78e      	b.n	8010c4e <_strtod_l+0x99e>
 8010d30:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8010eb0 <_strtod_l+0xc00>
 8010d34:	f04f 0800 	mov.w	r8, #0
 8010d38:	e7e7      	b.n	8010d0a <_strtod_l+0xa5a>
 8010d3a:	4b5d      	ldr	r3, [pc, #372]	; (8010eb0 <_strtod_l+0xc00>)
 8010d3c:	4640      	mov	r0, r8
 8010d3e:	4649      	mov	r1, r9
 8010d40:	2200      	movs	r2, #0
 8010d42:	f7ef fc89 	bl	8000658 <__aeabi_dmul>
 8010d46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010d48:	4680      	mov	r8, r0
 8010d4a:	4689      	mov	r9, r1
 8010d4c:	b933      	cbnz	r3, 8010d5c <_strtod_l+0xaac>
 8010d4e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010d52:	900e      	str	r0, [sp, #56]	; 0x38
 8010d54:	930f      	str	r3, [sp, #60]	; 0x3c
 8010d56:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8010d5a:	e7dd      	b.n	8010d18 <_strtod_l+0xa68>
 8010d5c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8010d60:	e7f9      	b.n	8010d56 <_strtod_l+0xaa6>
 8010d62:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8010d66:	9b04      	ldr	r3, [sp, #16]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d1a8      	bne.n	8010cbe <_strtod_l+0xa0e>
 8010d6c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010d70:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010d72:	0d1b      	lsrs	r3, r3, #20
 8010d74:	051b      	lsls	r3, r3, #20
 8010d76:	429a      	cmp	r2, r3
 8010d78:	d1a1      	bne.n	8010cbe <_strtod_l+0xa0e>
 8010d7a:	4640      	mov	r0, r8
 8010d7c:	4649      	mov	r1, r9
 8010d7e:	f7ef ffcb 	bl	8000d18 <__aeabi_d2lz>
 8010d82:	f7ef fc3b 	bl	80005fc <__aeabi_l2d>
 8010d86:	4602      	mov	r2, r0
 8010d88:	460b      	mov	r3, r1
 8010d8a:	4640      	mov	r0, r8
 8010d8c:	4649      	mov	r1, r9
 8010d8e:	f7ef faab 	bl	80002e8 <__aeabi_dsub>
 8010d92:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010d94:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010d98:	ea43 030a 	orr.w	r3, r3, sl
 8010d9c:	4313      	orrs	r3, r2
 8010d9e:	4680      	mov	r8, r0
 8010da0:	4689      	mov	r9, r1
 8010da2:	d055      	beq.n	8010e50 <_strtod_l+0xba0>
 8010da4:	a336      	add	r3, pc, #216	; (adr r3, 8010e80 <_strtod_l+0xbd0>)
 8010da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010daa:	f7ef fec7 	bl	8000b3c <__aeabi_dcmplt>
 8010dae:	2800      	cmp	r0, #0
 8010db0:	f47f acd0 	bne.w	8010754 <_strtod_l+0x4a4>
 8010db4:	a334      	add	r3, pc, #208	; (adr r3, 8010e88 <_strtod_l+0xbd8>)
 8010db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dba:	4640      	mov	r0, r8
 8010dbc:	4649      	mov	r1, r9
 8010dbe:	f7ef fedb 	bl	8000b78 <__aeabi_dcmpgt>
 8010dc2:	2800      	cmp	r0, #0
 8010dc4:	f43f af7b 	beq.w	8010cbe <_strtod_l+0xa0e>
 8010dc8:	e4c4      	b.n	8010754 <_strtod_l+0x4a4>
 8010dca:	9b04      	ldr	r3, [sp, #16]
 8010dcc:	b333      	cbz	r3, 8010e1c <_strtod_l+0xb6c>
 8010dce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010dd0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010dd4:	d822      	bhi.n	8010e1c <_strtod_l+0xb6c>
 8010dd6:	a32e      	add	r3, pc, #184	; (adr r3, 8010e90 <_strtod_l+0xbe0>)
 8010dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ddc:	4640      	mov	r0, r8
 8010dde:	4649      	mov	r1, r9
 8010de0:	f7ef feb6 	bl	8000b50 <__aeabi_dcmple>
 8010de4:	b1a0      	cbz	r0, 8010e10 <_strtod_l+0xb60>
 8010de6:	4649      	mov	r1, r9
 8010de8:	4640      	mov	r0, r8
 8010dea:	f7ef ff0d 	bl	8000c08 <__aeabi_d2uiz>
 8010dee:	2801      	cmp	r0, #1
 8010df0:	bf38      	it	cc
 8010df2:	2001      	movcc	r0, #1
 8010df4:	f7ef fbb6 	bl	8000564 <__aeabi_ui2d>
 8010df8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010dfa:	4680      	mov	r8, r0
 8010dfc:	4689      	mov	r9, r1
 8010dfe:	bb23      	cbnz	r3, 8010e4a <_strtod_l+0xb9a>
 8010e00:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010e04:	9010      	str	r0, [sp, #64]	; 0x40
 8010e06:	9311      	str	r3, [sp, #68]	; 0x44
 8010e08:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010e0c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010e10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e12:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010e14:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8010e18:	1a9b      	subs	r3, r3, r2
 8010e1a:	9309      	str	r3, [sp, #36]	; 0x24
 8010e1c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010e20:	eeb0 0a48 	vmov.f32	s0, s16
 8010e24:	eef0 0a68 	vmov.f32	s1, s17
 8010e28:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010e2c:	f001 ff0a 	bl	8012c44 <__ulp>
 8010e30:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010e34:	ec53 2b10 	vmov	r2, r3, d0
 8010e38:	f7ef fc0e 	bl	8000658 <__aeabi_dmul>
 8010e3c:	ec53 2b18 	vmov	r2, r3, d8
 8010e40:	f7ef fa54 	bl	80002ec <__adddf3>
 8010e44:	4682      	mov	sl, r0
 8010e46:	468b      	mov	fp, r1
 8010e48:	e78d      	b.n	8010d66 <_strtod_l+0xab6>
 8010e4a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8010e4e:	e7db      	b.n	8010e08 <_strtod_l+0xb58>
 8010e50:	a311      	add	r3, pc, #68	; (adr r3, 8010e98 <_strtod_l+0xbe8>)
 8010e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e56:	f7ef fe71 	bl	8000b3c <__aeabi_dcmplt>
 8010e5a:	e7b2      	b.n	8010dc2 <_strtod_l+0xb12>
 8010e5c:	2300      	movs	r3, #0
 8010e5e:	930a      	str	r3, [sp, #40]	; 0x28
 8010e60:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010e62:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010e64:	6013      	str	r3, [r2, #0]
 8010e66:	f7ff ba6b 	b.w	8010340 <_strtod_l+0x90>
 8010e6a:	2a65      	cmp	r2, #101	; 0x65
 8010e6c:	f43f ab5f 	beq.w	801052e <_strtod_l+0x27e>
 8010e70:	2a45      	cmp	r2, #69	; 0x45
 8010e72:	f43f ab5c 	beq.w	801052e <_strtod_l+0x27e>
 8010e76:	2301      	movs	r3, #1
 8010e78:	f7ff bb94 	b.w	80105a4 <_strtod_l+0x2f4>
 8010e7c:	f3af 8000 	nop.w
 8010e80:	94a03595 	.word	0x94a03595
 8010e84:	3fdfffff 	.word	0x3fdfffff
 8010e88:	35afe535 	.word	0x35afe535
 8010e8c:	3fe00000 	.word	0x3fe00000
 8010e90:	ffc00000 	.word	0xffc00000
 8010e94:	41dfffff 	.word	0x41dfffff
 8010e98:	94a03595 	.word	0x94a03595
 8010e9c:	3fcfffff 	.word	0x3fcfffff
 8010ea0:	3ff00000 	.word	0x3ff00000
 8010ea4:	7ff00000 	.word	0x7ff00000
 8010ea8:	7fe00000 	.word	0x7fe00000
 8010eac:	7c9fffff 	.word	0x7c9fffff
 8010eb0:	3fe00000 	.word	0x3fe00000
 8010eb4:	bff00000 	.word	0xbff00000
 8010eb8:	7fefffff 	.word	0x7fefffff

08010ebc <_strtod_r>:
 8010ebc:	4b01      	ldr	r3, [pc, #4]	; (8010ec4 <_strtod_r+0x8>)
 8010ebe:	f7ff b9f7 	b.w	80102b0 <_strtod_l>
 8010ec2:	bf00      	nop
 8010ec4:	20000354 	.word	0x20000354

08010ec8 <strtok>:
 8010ec8:	4b16      	ldr	r3, [pc, #88]	; (8010f24 <strtok+0x5c>)
 8010eca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010ecc:	681e      	ldr	r6, [r3, #0]
 8010ece:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8010ed0:	4605      	mov	r5, r0
 8010ed2:	b9fc      	cbnz	r4, 8010f14 <strtok+0x4c>
 8010ed4:	2050      	movs	r0, #80	; 0x50
 8010ed6:	9101      	str	r1, [sp, #4]
 8010ed8:	f001 fb28 	bl	801252c <malloc>
 8010edc:	9901      	ldr	r1, [sp, #4]
 8010ede:	65b0      	str	r0, [r6, #88]	; 0x58
 8010ee0:	4602      	mov	r2, r0
 8010ee2:	b920      	cbnz	r0, 8010eee <strtok+0x26>
 8010ee4:	4b10      	ldr	r3, [pc, #64]	; (8010f28 <strtok+0x60>)
 8010ee6:	4811      	ldr	r0, [pc, #68]	; (8010f2c <strtok+0x64>)
 8010ee8:	2157      	movs	r1, #87	; 0x57
 8010eea:	f000 f8df 	bl	80110ac <__assert_func>
 8010eee:	e9c0 4400 	strd	r4, r4, [r0]
 8010ef2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8010ef6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8010efa:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8010efe:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8010f02:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8010f06:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8010f0a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8010f0e:	6184      	str	r4, [r0, #24]
 8010f10:	7704      	strb	r4, [r0, #28]
 8010f12:	6244      	str	r4, [r0, #36]	; 0x24
 8010f14:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8010f16:	2301      	movs	r3, #1
 8010f18:	4628      	mov	r0, r5
 8010f1a:	b002      	add	sp, #8
 8010f1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010f20:	f000 b806 	b.w	8010f30 <__strtok_r>
 8010f24:	200002ec 	.word	0x200002ec
 8010f28:	08014c50 	.word	0x08014c50
 8010f2c:	08014c67 	.word	0x08014c67

08010f30 <__strtok_r>:
 8010f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f32:	b908      	cbnz	r0, 8010f38 <__strtok_r+0x8>
 8010f34:	6810      	ldr	r0, [r2, #0]
 8010f36:	b188      	cbz	r0, 8010f5c <__strtok_r+0x2c>
 8010f38:	4604      	mov	r4, r0
 8010f3a:	4620      	mov	r0, r4
 8010f3c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8010f40:	460f      	mov	r7, r1
 8010f42:	f817 6b01 	ldrb.w	r6, [r7], #1
 8010f46:	b91e      	cbnz	r6, 8010f50 <__strtok_r+0x20>
 8010f48:	b965      	cbnz	r5, 8010f64 <__strtok_r+0x34>
 8010f4a:	6015      	str	r5, [r2, #0]
 8010f4c:	4628      	mov	r0, r5
 8010f4e:	e005      	b.n	8010f5c <__strtok_r+0x2c>
 8010f50:	42b5      	cmp	r5, r6
 8010f52:	d1f6      	bne.n	8010f42 <__strtok_r+0x12>
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d1f0      	bne.n	8010f3a <__strtok_r+0xa>
 8010f58:	6014      	str	r4, [r2, #0]
 8010f5a:	7003      	strb	r3, [r0, #0]
 8010f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f5e:	461c      	mov	r4, r3
 8010f60:	e00c      	b.n	8010f7c <__strtok_r+0x4c>
 8010f62:	b915      	cbnz	r5, 8010f6a <__strtok_r+0x3a>
 8010f64:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010f68:	460e      	mov	r6, r1
 8010f6a:	f816 5b01 	ldrb.w	r5, [r6], #1
 8010f6e:	42ab      	cmp	r3, r5
 8010f70:	d1f7      	bne.n	8010f62 <__strtok_r+0x32>
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d0f3      	beq.n	8010f5e <__strtok_r+0x2e>
 8010f76:	2300      	movs	r3, #0
 8010f78:	f804 3c01 	strb.w	r3, [r4, #-1]
 8010f7c:	6014      	str	r4, [r2, #0]
 8010f7e:	e7ed      	b.n	8010f5c <__strtok_r+0x2c>

08010f80 <_strtol_l.constprop.0>:
 8010f80:	2b01      	cmp	r3, #1
 8010f82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f86:	d001      	beq.n	8010f8c <_strtol_l.constprop.0+0xc>
 8010f88:	2b24      	cmp	r3, #36	; 0x24
 8010f8a:	d906      	bls.n	8010f9a <_strtol_l.constprop.0+0x1a>
 8010f8c:	f7fe fa1a 	bl	800f3c4 <__errno>
 8010f90:	2316      	movs	r3, #22
 8010f92:	6003      	str	r3, [r0, #0]
 8010f94:	2000      	movs	r0, #0
 8010f96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f9a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8011080 <_strtol_l.constprop.0+0x100>
 8010f9e:	460d      	mov	r5, r1
 8010fa0:	462e      	mov	r6, r5
 8010fa2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010fa6:	f814 700c 	ldrb.w	r7, [r4, ip]
 8010faa:	f017 0708 	ands.w	r7, r7, #8
 8010fae:	d1f7      	bne.n	8010fa0 <_strtol_l.constprop.0+0x20>
 8010fb0:	2c2d      	cmp	r4, #45	; 0x2d
 8010fb2:	d132      	bne.n	801101a <_strtol_l.constprop.0+0x9a>
 8010fb4:	782c      	ldrb	r4, [r5, #0]
 8010fb6:	2701      	movs	r7, #1
 8010fb8:	1cb5      	adds	r5, r6, #2
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d05b      	beq.n	8011076 <_strtol_l.constprop.0+0xf6>
 8010fbe:	2b10      	cmp	r3, #16
 8010fc0:	d109      	bne.n	8010fd6 <_strtol_l.constprop.0+0x56>
 8010fc2:	2c30      	cmp	r4, #48	; 0x30
 8010fc4:	d107      	bne.n	8010fd6 <_strtol_l.constprop.0+0x56>
 8010fc6:	782c      	ldrb	r4, [r5, #0]
 8010fc8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8010fcc:	2c58      	cmp	r4, #88	; 0x58
 8010fce:	d14d      	bne.n	801106c <_strtol_l.constprop.0+0xec>
 8010fd0:	786c      	ldrb	r4, [r5, #1]
 8010fd2:	2310      	movs	r3, #16
 8010fd4:	3502      	adds	r5, #2
 8010fd6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8010fda:	f108 38ff 	add.w	r8, r8, #4294967295
 8010fde:	f04f 0c00 	mov.w	ip, #0
 8010fe2:	fbb8 f9f3 	udiv	r9, r8, r3
 8010fe6:	4666      	mov	r6, ip
 8010fe8:	fb03 8a19 	mls	sl, r3, r9, r8
 8010fec:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8010ff0:	f1be 0f09 	cmp.w	lr, #9
 8010ff4:	d816      	bhi.n	8011024 <_strtol_l.constprop.0+0xa4>
 8010ff6:	4674      	mov	r4, lr
 8010ff8:	42a3      	cmp	r3, r4
 8010ffa:	dd24      	ble.n	8011046 <_strtol_l.constprop.0+0xc6>
 8010ffc:	f1bc 0f00 	cmp.w	ip, #0
 8011000:	db1e      	blt.n	8011040 <_strtol_l.constprop.0+0xc0>
 8011002:	45b1      	cmp	r9, r6
 8011004:	d31c      	bcc.n	8011040 <_strtol_l.constprop.0+0xc0>
 8011006:	d101      	bne.n	801100c <_strtol_l.constprop.0+0x8c>
 8011008:	45a2      	cmp	sl, r4
 801100a:	db19      	blt.n	8011040 <_strtol_l.constprop.0+0xc0>
 801100c:	fb06 4603 	mla	r6, r6, r3, r4
 8011010:	f04f 0c01 	mov.w	ip, #1
 8011014:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011018:	e7e8      	b.n	8010fec <_strtol_l.constprop.0+0x6c>
 801101a:	2c2b      	cmp	r4, #43	; 0x2b
 801101c:	bf04      	itt	eq
 801101e:	782c      	ldrbeq	r4, [r5, #0]
 8011020:	1cb5      	addeq	r5, r6, #2
 8011022:	e7ca      	b.n	8010fba <_strtol_l.constprop.0+0x3a>
 8011024:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8011028:	f1be 0f19 	cmp.w	lr, #25
 801102c:	d801      	bhi.n	8011032 <_strtol_l.constprop.0+0xb2>
 801102e:	3c37      	subs	r4, #55	; 0x37
 8011030:	e7e2      	b.n	8010ff8 <_strtol_l.constprop.0+0x78>
 8011032:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8011036:	f1be 0f19 	cmp.w	lr, #25
 801103a:	d804      	bhi.n	8011046 <_strtol_l.constprop.0+0xc6>
 801103c:	3c57      	subs	r4, #87	; 0x57
 801103e:	e7db      	b.n	8010ff8 <_strtol_l.constprop.0+0x78>
 8011040:	f04f 3cff 	mov.w	ip, #4294967295
 8011044:	e7e6      	b.n	8011014 <_strtol_l.constprop.0+0x94>
 8011046:	f1bc 0f00 	cmp.w	ip, #0
 801104a:	da05      	bge.n	8011058 <_strtol_l.constprop.0+0xd8>
 801104c:	2322      	movs	r3, #34	; 0x22
 801104e:	6003      	str	r3, [r0, #0]
 8011050:	4646      	mov	r6, r8
 8011052:	b942      	cbnz	r2, 8011066 <_strtol_l.constprop.0+0xe6>
 8011054:	4630      	mov	r0, r6
 8011056:	e79e      	b.n	8010f96 <_strtol_l.constprop.0+0x16>
 8011058:	b107      	cbz	r7, 801105c <_strtol_l.constprop.0+0xdc>
 801105a:	4276      	negs	r6, r6
 801105c:	2a00      	cmp	r2, #0
 801105e:	d0f9      	beq.n	8011054 <_strtol_l.constprop.0+0xd4>
 8011060:	f1bc 0f00 	cmp.w	ip, #0
 8011064:	d000      	beq.n	8011068 <_strtol_l.constprop.0+0xe8>
 8011066:	1e69      	subs	r1, r5, #1
 8011068:	6011      	str	r1, [r2, #0]
 801106a:	e7f3      	b.n	8011054 <_strtol_l.constprop.0+0xd4>
 801106c:	2430      	movs	r4, #48	; 0x30
 801106e:	2b00      	cmp	r3, #0
 8011070:	d1b1      	bne.n	8010fd6 <_strtol_l.constprop.0+0x56>
 8011072:	2308      	movs	r3, #8
 8011074:	e7af      	b.n	8010fd6 <_strtol_l.constprop.0+0x56>
 8011076:	2c30      	cmp	r4, #48	; 0x30
 8011078:	d0a5      	beq.n	8010fc6 <_strtol_l.constprop.0+0x46>
 801107a:	230a      	movs	r3, #10
 801107c:	e7ab      	b.n	8010fd6 <_strtol_l.constprop.0+0x56>
 801107e:	bf00      	nop
 8011080:	08014d01 	.word	0x08014d01

08011084 <_strtol_r>:
 8011084:	f7ff bf7c 	b.w	8010f80 <_strtol_l.constprop.0>

08011088 <_write_r>:
 8011088:	b538      	push	{r3, r4, r5, lr}
 801108a:	4d07      	ldr	r5, [pc, #28]	; (80110a8 <_write_r+0x20>)
 801108c:	4604      	mov	r4, r0
 801108e:	4608      	mov	r0, r1
 8011090:	4611      	mov	r1, r2
 8011092:	2200      	movs	r2, #0
 8011094:	602a      	str	r2, [r5, #0]
 8011096:	461a      	mov	r2, r3
 8011098:	f7f0 ffdb 	bl	8002052 <_write>
 801109c:	1c43      	adds	r3, r0, #1
 801109e:	d102      	bne.n	80110a6 <_write_r+0x1e>
 80110a0:	682b      	ldr	r3, [r5, #0]
 80110a2:	b103      	cbz	r3, 80110a6 <_write_r+0x1e>
 80110a4:	6023      	str	r3, [r4, #0]
 80110a6:	bd38      	pop	{r3, r4, r5, pc}
 80110a8:	20005624 	.word	0x20005624

080110ac <__assert_func>:
 80110ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80110ae:	4614      	mov	r4, r2
 80110b0:	461a      	mov	r2, r3
 80110b2:	4b09      	ldr	r3, [pc, #36]	; (80110d8 <__assert_func+0x2c>)
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	4605      	mov	r5, r0
 80110b8:	68d8      	ldr	r0, [r3, #12]
 80110ba:	b14c      	cbz	r4, 80110d0 <__assert_func+0x24>
 80110bc:	4b07      	ldr	r3, [pc, #28]	; (80110dc <__assert_func+0x30>)
 80110be:	9100      	str	r1, [sp, #0]
 80110c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80110c4:	4906      	ldr	r1, [pc, #24]	; (80110e0 <__assert_func+0x34>)
 80110c6:	462b      	mov	r3, r5
 80110c8:	f000 fe98 	bl	8011dfc <fiprintf>
 80110cc:	f002 ffcc 	bl	8014068 <abort>
 80110d0:	4b04      	ldr	r3, [pc, #16]	; (80110e4 <__assert_func+0x38>)
 80110d2:	461c      	mov	r4, r3
 80110d4:	e7f3      	b.n	80110be <__assert_func+0x12>
 80110d6:	bf00      	nop
 80110d8:	200002ec 	.word	0x200002ec
 80110dc:	08014cc4 	.word	0x08014cc4
 80110e0:	08014cd1 	.word	0x08014cd1
 80110e4:	08014cff 	.word	0x08014cff

080110e8 <_close_r>:
 80110e8:	b538      	push	{r3, r4, r5, lr}
 80110ea:	4d06      	ldr	r5, [pc, #24]	; (8011104 <_close_r+0x1c>)
 80110ec:	2300      	movs	r3, #0
 80110ee:	4604      	mov	r4, r0
 80110f0:	4608      	mov	r0, r1
 80110f2:	602b      	str	r3, [r5, #0]
 80110f4:	f7f0 ffc9 	bl	800208a <_close>
 80110f8:	1c43      	adds	r3, r0, #1
 80110fa:	d102      	bne.n	8011102 <_close_r+0x1a>
 80110fc:	682b      	ldr	r3, [r5, #0]
 80110fe:	b103      	cbz	r3, 8011102 <_close_r+0x1a>
 8011100:	6023      	str	r3, [r4, #0]
 8011102:	bd38      	pop	{r3, r4, r5, pc}
 8011104:	20005624 	.word	0x20005624

08011108 <quorem>:
 8011108:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801110c:	6903      	ldr	r3, [r0, #16]
 801110e:	690c      	ldr	r4, [r1, #16]
 8011110:	42a3      	cmp	r3, r4
 8011112:	4607      	mov	r7, r0
 8011114:	f2c0 8081 	blt.w	801121a <quorem+0x112>
 8011118:	3c01      	subs	r4, #1
 801111a:	f101 0814 	add.w	r8, r1, #20
 801111e:	f100 0514 	add.w	r5, r0, #20
 8011122:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011126:	9301      	str	r3, [sp, #4]
 8011128:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801112c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011130:	3301      	adds	r3, #1
 8011132:	429a      	cmp	r2, r3
 8011134:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011138:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801113c:	fbb2 f6f3 	udiv	r6, r2, r3
 8011140:	d331      	bcc.n	80111a6 <quorem+0x9e>
 8011142:	f04f 0e00 	mov.w	lr, #0
 8011146:	4640      	mov	r0, r8
 8011148:	46ac      	mov	ip, r5
 801114a:	46f2      	mov	sl, lr
 801114c:	f850 2b04 	ldr.w	r2, [r0], #4
 8011150:	b293      	uxth	r3, r2
 8011152:	fb06 e303 	mla	r3, r6, r3, lr
 8011156:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801115a:	b29b      	uxth	r3, r3
 801115c:	ebaa 0303 	sub.w	r3, sl, r3
 8011160:	f8dc a000 	ldr.w	sl, [ip]
 8011164:	0c12      	lsrs	r2, r2, #16
 8011166:	fa13 f38a 	uxtah	r3, r3, sl
 801116a:	fb06 e202 	mla	r2, r6, r2, lr
 801116e:	9300      	str	r3, [sp, #0]
 8011170:	9b00      	ldr	r3, [sp, #0]
 8011172:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011176:	b292      	uxth	r2, r2
 8011178:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801117c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011180:	f8bd 3000 	ldrh.w	r3, [sp]
 8011184:	4581      	cmp	r9, r0
 8011186:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801118a:	f84c 3b04 	str.w	r3, [ip], #4
 801118e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011192:	d2db      	bcs.n	801114c <quorem+0x44>
 8011194:	f855 300b 	ldr.w	r3, [r5, fp]
 8011198:	b92b      	cbnz	r3, 80111a6 <quorem+0x9e>
 801119a:	9b01      	ldr	r3, [sp, #4]
 801119c:	3b04      	subs	r3, #4
 801119e:	429d      	cmp	r5, r3
 80111a0:	461a      	mov	r2, r3
 80111a2:	d32e      	bcc.n	8011202 <quorem+0xfa>
 80111a4:	613c      	str	r4, [r7, #16]
 80111a6:	4638      	mov	r0, r7
 80111a8:	f001 fca6 	bl	8012af8 <__mcmp>
 80111ac:	2800      	cmp	r0, #0
 80111ae:	db24      	blt.n	80111fa <quorem+0xf2>
 80111b0:	3601      	adds	r6, #1
 80111b2:	4628      	mov	r0, r5
 80111b4:	f04f 0c00 	mov.w	ip, #0
 80111b8:	f858 2b04 	ldr.w	r2, [r8], #4
 80111bc:	f8d0 e000 	ldr.w	lr, [r0]
 80111c0:	b293      	uxth	r3, r2
 80111c2:	ebac 0303 	sub.w	r3, ip, r3
 80111c6:	0c12      	lsrs	r2, r2, #16
 80111c8:	fa13 f38e 	uxtah	r3, r3, lr
 80111cc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80111d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80111d4:	b29b      	uxth	r3, r3
 80111d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80111da:	45c1      	cmp	r9, r8
 80111dc:	f840 3b04 	str.w	r3, [r0], #4
 80111e0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80111e4:	d2e8      	bcs.n	80111b8 <quorem+0xb0>
 80111e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80111ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80111ee:	b922      	cbnz	r2, 80111fa <quorem+0xf2>
 80111f0:	3b04      	subs	r3, #4
 80111f2:	429d      	cmp	r5, r3
 80111f4:	461a      	mov	r2, r3
 80111f6:	d30a      	bcc.n	801120e <quorem+0x106>
 80111f8:	613c      	str	r4, [r7, #16]
 80111fa:	4630      	mov	r0, r6
 80111fc:	b003      	add	sp, #12
 80111fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011202:	6812      	ldr	r2, [r2, #0]
 8011204:	3b04      	subs	r3, #4
 8011206:	2a00      	cmp	r2, #0
 8011208:	d1cc      	bne.n	80111a4 <quorem+0x9c>
 801120a:	3c01      	subs	r4, #1
 801120c:	e7c7      	b.n	801119e <quorem+0x96>
 801120e:	6812      	ldr	r2, [r2, #0]
 8011210:	3b04      	subs	r3, #4
 8011212:	2a00      	cmp	r2, #0
 8011214:	d1f0      	bne.n	80111f8 <quorem+0xf0>
 8011216:	3c01      	subs	r4, #1
 8011218:	e7eb      	b.n	80111f2 <quorem+0xea>
 801121a:	2000      	movs	r0, #0
 801121c:	e7ee      	b.n	80111fc <quorem+0xf4>
	...

08011220 <_dtoa_r>:
 8011220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011224:	ed2d 8b04 	vpush	{d8-d9}
 8011228:	ec57 6b10 	vmov	r6, r7, d0
 801122c:	b093      	sub	sp, #76	; 0x4c
 801122e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011230:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011234:	9106      	str	r1, [sp, #24]
 8011236:	ee10 aa10 	vmov	sl, s0
 801123a:	4604      	mov	r4, r0
 801123c:	9209      	str	r2, [sp, #36]	; 0x24
 801123e:	930c      	str	r3, [sp, #48]	; 0x30
 8011240:	46bb      	mov	fp, r7
 8011242:	b975      	cbnz	r5, 8011262 <_dtoa_r+0x42>
 8011244:	2010      	movs	r0, #16
 8011246:	f001 f971 	bl	801252c <malloc>
 801124a:	4602      	mov	r2, r0
 801124c:	6260      	str	r0, [r4, #36]	; 0x24
 801124e:	b920      	cbnz	r0, 801125a <_dtoa_r+0x3a>
 8011250:	4ba7      	ldr	r3, [pc, #668]	; (80114f0 <_dtoa_r+0x2d0>)
 8011252:	21ea      	movs	r1, #234	; 0xea
 8011254:	48a7      	ldr	r0, [pc, #668]	; (80114f4 <_dtoa_r+0x2d4>)
 8011256:	f7ff ff29 	bl	80110ac <__assert_func>
 801125a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801125e:	6005      	str	r5, [r0, #0]
 8011260:	60c5      	str	r5, [r0, #12]
 8011262:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011264:	6819      	ldr	r1, [r3, #0]
 8011266:	b151      	cbz	r1, 801127e <_dtoa_r+0x5e>
 8011268:	685a      	ldr	r2, [r3, #4]
 801126a:	604a      	str	r2, [r1, #4]
 801126c:	2301      	movs	r3, #1
 801126e:	4093      	lsls	r3, r2
 8011270:	608b      	str	r3, [r1, #8]
 8011272:	4620      	mov	r0, r4
 8011274:	f001 f9b4 	bl	80125e0 <_Bfree>
 8011278:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801127a:	2200      	movs	r2, #0
 801127c:	601a      	str	r2, [r3, #0]
 801127e:	1e3b      	subs	r3, r7, #0
 8011280:	bfaa      	itet	ge
 8011282:	2300      	movge	r3, #0
 8011284:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8011288:	f8c8 3000 	strge.w	r3, [r8]
 801128c:	4b9a      	ldr	r3, [pc, #616]	; (80114f8 <_dtoa_r+0x2d8>)
 801128e:	bfbc      	itt	lt
 8011290:	2201      	movlt	r2, #1
 8011292:	f8c8 2000 	strlt.w	r2, [r8]
 8011296:	ea33 030b 	bics.w	r3, r3, fp
 801129a:	d11b      	bne.n	80112d4 <_dtoa_r+0xb4>
 801129c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801129e:	f242 730f 	movw	r3, #9999	; 0x270f
 80112a2:	6013      	str	r3, [r2, #0]
 80112a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80112a8:	4333      	orrs	r3, r6
 80112aa:	f000 8592 	beq.w	8011dd2 <_dtoa_r+0xbb2>
 80112ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80112b0:	b963      	cbnz	r3, 80112cc <_dtoa_r+0xac>
 80112b2:	4b92      	ldr	r3, [pc, #584]	; (80114fc <_dtoa_r+0x2dc>)
 80112b4:	e022      	b.n	80112fc <_dtoa_r+0xdc>
 80112b6:	4b92      	ldr	r3, [pc, #584]	; (8011500 <_dtoa_r+0x2e0>)
 80112b8:	9301      	str	r3, [sp, #4]
 80112ba:	3308      	adds	r3, #8
 80112bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80112be:	6013      	str	r3, [r2, #0]
 80112c0:	9801      	ldr	r0, [sp, #4]
 80112c2:	b013      	add	sp, #76	; 0x4c
 80112c4:	ecbd 8b04 	vpop	{d8-d9}
 80112c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112cc:	4b8b      	ldr	r3, [pc, #556]	; (80114fc <_dtoa_r+0x2dc>)
 80112ce:	9301      	str	r3, [sp, #4]
 80112d0:	3303      	adds	r3, #3
 80112d2:	e7f3      	b.n	80112bc <_dtoa_r+0x9c>
 80112d4:	2200      	movs	r2, #0
 80112d6:	2300      	movs	r3, #0
 80112d8:	4650      	mov	r0, sl
 80112da:	4659      	mov	r1, fp
 80112dc:	f7ef fc24 	bl	8000b28 <__aeabi_dcmpeq>
 80112e0:	ec4b ab19 	vmov	d9, sl, fp
 80112e4:	4680      	mov	r8, r0
 80112e6:	b158      	cbz	r0, 8011300 <_dtoa_r+0xe0>
 80112e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80112ea:	2301      	movs	r3, #1
 80112ec:	6013      	str	r3, [r2, #0]
 80112ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	f000 856b 	beq.w	8011dcc <_dtoa_r+0xbac>
 80112f6:	4883      	ldr	r0, [pc, #524]	; (8011504 <_dtoa_r+0x2e4>)
 80112f8:	6018      	str	r0, [r3, #0]
 80112fa:	1e43      	subs	r3, r0, #1
 80112fc:	9301      	str	r3, [sp, #4]
 80112fe:	e7df      	b.n	80112c0 <_dtoa_r+0xa0>
 8011300:	ec4b ab10 	vmov	d0, sl, fp
 8011304:	aa10      	add	r2, sp, #64	; 0x40
 8011306:	a911      	add	r1, sp, #68	; 0x44
 8011308:	4620      	mov	r0, r4
 801130a:	f001 fd17 	bl	8012d3c <__d2b>
 801130e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8011312:	ee08 0a10 	vmov	s16, r0
 8011316:	2d00      	cmp	r5, #0
 8011318:	f000 8084 	beq.w	8011424 <_dtoa_r+0x204>
 801131c:	ee19 3a90 	vmov	r3, s19
 8011320:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011324:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8011328:	4656      	mov	r6, sl
 801132a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801132e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8011332:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8011336:	4b74      	ldr	r3, [pc, #464]	; (8011508 <_dtoa_r+0x2e8>)
 8011338:	2200      	movs	r2, #0
 801133a:	4630      	mov	r0, r6
 801133c:	4639      	mov	r1, r7
 801133e:	f7ee ffd3 	bl	80002e8 <__aeabi_dsub>
 8011342:	a365      	add	r3, pc, #404	; (adr r3, 80114d8 <_dtoa_r+0x2b8>)
 8011344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011348:	f7ef f986 	bl	8000658 <__aeabi_dmul>
 801134c:	a364      	add	r3, pc, #400	; (adr r3, 80114e0 <_dtoa_r+0x2c0>)
 801134e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011352:	f7ee ffcb 	bl	80002ec <__adddf3>
 8011356:	4606      	mov	r6, r0
 8011358:	4628      	mov	r0, r5
 801135a:	460f      	mov	r7, r1
 801135c:	f7ef f912 	bl	8000584 <__aeabi_i2d>
 8011360:	a361      	add	r3, pc, #388	; (adr r3, 80114e8 <_dtoa_r+0x2c8>)
 8011362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011366:	f7ef f977 	bl	8000658 <__aeabi_dmul>
 801136a:	4602      	mov	r2, r0
 801136c:	460b      	mov	r3, r1
 801136e:	4630      	mov	r0, r6
 8011370:	4639      	mov	r1, r7
 8011372:	f7ee ffbb 	bl	80002ec <__adddf3>
 8011376:	4606      	mov	r6, r0
 8011378:	460f      	mov	r7, r1
 801137a:	f7ef fc1d 	bl	8000bb8 <__aeabi_d2iz>
 801137e:	2200      	movs	r2, #0
 8011380:	9000      	str	r0, [sp, #0]
 8011382:	2300      	movs	r3, #0
 8011384:	4630      	mov	r0, r6
 8011386:	4639      	mov	r1, r7
 8011388:	f7ef fbd8 	bl	8000b3c <__aeabi_dcmplt>
 801138c:	b150      	cbz	r0, 80113a4 <_dtoa_r+0x184>
 801138e:	9800      	ldr	r0, [sp, #0]
 8011390:	f7ef f8f8 	bl	8000584 <__aeabi_i2d>
 8011394:	4632      	mov	r2, r6
 8011396:	463b      	mov	r3, r7
 8011398:	f7ef fbc6 	bl	8000b28 <__aeabi_dcmpeq>
 801139c:	b910      	cbnz	r0, 80113a4 <_dtoa_r+0x184>
 801139e:	9b00      	ldr	r3, [sp, #0]
 80113a0:	3b01      	subs	r3, #1
 80113a2:	9300      	str	r3, [sp, #0]
 80113a4:	9b00      	ldr	r3, [sp, #0]
 80113a6:	2b16      	cmp	r3, #22
 80113a8:	d85a      	bhi.n	8011460 <_dtoa_r+0x240>
 80113aa:	9a00      	ldr	r2, [sp, #0]
 80113ac:	4b57      	ldr	r3, [pc, #348]	; (801150c <_dtoa_r+0x2ec>)
 80113ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80113b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113b6:	ec51 0b19 	vmov	r0, r1, d9
 80113ba:	f7ef fbbf 	bl	8000b3c <__aeabi_dcmplt>
 80113be:	2800      	cmp	r0, #0
 80113c0:	d050      	beq.n	8011464 <_dtoa_r+0x244>
 80113c2:	9b00      	ldr	r3, [sp, #0]
 80113c4:	3b01      	subs	r3, #1
 80113c6:	9300      	str	r3, [sp, #0]
 80113c8:	2300      	movs	r3, #0
 80113ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80113cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80113ce:	1b5d      	subs	r5, r3, r5
 80113d0:	1e6b      	subs	r3, r5, #1
 80113d2:	9305      	str	r3, [sp, #20]
 80113d4:	bf45      	ittet	mi
 80113d6:	f1c5 0301 	rsbmi	r3, r5, #1
 80113da:	9304      	strmi	r3, [sp, #16]
 80113dc:	2300      	movpl	r3, #0
 80113de:	2300      	movmi	r3, #0
 80113e0:	bf4c      	ite	mi
 80113e2:	9305      	strmi	r3, [sp, #20]
 80113e4:	9304      	strpl	r3, [sp, #16]
 80113e6:	9b00      	ldr	r3, [sp, #0]
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	db3d      	blt.n	8011468 <_dtoa_r+0x248>
 80113ec:	9b05      	ldr	r3, [sp, #20]
 80113ee:	9a00      	ldr	r2, [sp, #0]
 80113f0:	920a      	str	r2, [sp, #40]	; 0x28
 80113f2:	4413      	add	r3, r2
 80113f4:	9305      	str	r3, [sp, #20]
 80113f6:	2300      	movs	r3, #0
 80113f8:	9307      	str	r3, [sp, #28]
 80113fa:	9b06      	ldr	r3, [sp, #24]
 80113fc:	2b09      	cmp	r3, #9
 80113fe:	f200 8089 	bhi.w	8011514 <_dtoa_r+0x2f4>
 8011402:	2b05      	cmp	r3, #5
 8011404:	bfc4      	itt	gt
 8011406:	3b04      	subgt	r3, #4
 8011408:	9306      	strgt	r3, [sp, #24]
 801140a:	9b06      	ldr	r3, [sp, #24]
 801140c:	f1a3 0302 	sub.w	r3, r3, #2
 8011410:	bfcc      	ite	gt
 8011412:	2500      	movgt	r5, #0
 8011414:	2501      	movle	r5, #1
 8011416:	2b03      	cmp	r3, #3
 8011418:	f200 8087 	bhi.w	801152a <_dtoa_r+0x30a>
 801141c:	e8df f003 	tbb	[pc, r3]
 8011420:	59383a2d 	.word	0x59383a2d
 8011424:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8011428:	441d      	add	r5, r3
 801142a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801142e:	2b20      	cmp	r3, #32
 8011430:	bfc1      	itttt	gt
 8011432:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8011436:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801143a:	fa0b f303 	lslgt.w	r3, fp, r3
 801143e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8011442:	bfda      	itte	le
 8011444:	f1c3 0320 	rsble	r3, r3, #32
 8011448:	fa06 f003 	lslle.w	r0, r6, r3
 801144c:	4318      	orrgt	r0, r3
 801144e:	f7ef f889 	bl	8000564 <__aeabi_ui2d>
 8011452:	2301      	movs	r3, #1
 8011454:	4606      	mov	r6, r0
 8011456:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801145a:	3d01      	subs	r5, #1
 801145c:	930e      	str	r3, [sp, #56]	; 0x38
 801145e:	e76a      	b.n	8011336 <_dtoa_r+0x116>
 8011460:	2301      	movs	r3, #1
 8011462:	e7b2      	b.n	80113ca <_dtoa_r+0x1aa>
 8011464:	900b      	str	r0, [sp, #44]	; 0x2c
 8011466:	e7b1      	b.n	80113cc <_dtoa_r+0x1ac>
 8011468:	9b04      	ldr	r3, [sp, #16]
 801146a:	9a00      	ldr	r2, [sp, #0]
 801146c:	1a9b      	subs	r3, r3, r2
 801146e:	9304      	str	r3, [sp, #16]
 8011470:	4253      	negs	r3, r2
 8011472:	9307      	str	r3, [sp, #28]
 8011474:	2300      	movs	r3, #0
 8011476:	930a      	str	r3, [sp, #40]	; 0x28
 8011478:	e7bf      	b.n	80113fa <_dtoa_r+0x1da>
 801147a:	2300      	movs	r3, #0
 801147c:	9308      	str	r3, [sp, #32]
 801147e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011480:	2b00      	cmp	r3, #0
 8011482:	dc55      	bgt.n	8011530 <_dtoa_r+0x310>
 8011484:	2301      	movs	r3, #1
 8011486:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801148a:	461a      	mov	r2, r3
 801148c:	9209      	str	r2, [sp, #36]	; 0x24
 801148e:	e00c      	b.n	80114aa <_dtoa_r+0x28a>
 8011490:	2301      	movs	r3, #1
 8011492:	e7f3      	b.n	801147c <_dtoa_r+0x25c>
 8011494:	2300      	movs	r3, #0
 8011496:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011498:	9308      	str	r3, [sp, #32]
 801149a:	9b00      	ldr	r3, [sp, #0]
 801149c:	4413      	add	r3, r2
 801149e:	9302      	str	r3, [sp, #8]
 80114a0:	3301      	adds	r3, #1
 80114a2:	2b01      	cmp	r3, #1
 80114a4:	9303      	str	r3, [sp, #12]
 80114a6:	bfb8      	it	lt
 80114a8:	2301      	movlt	r3, #1
 80114aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80114ac:	2200      	movs	r2, #0
 80114ae:	6042      	str	r2, [r0, #4]
 80114b0:	2204      	movs	r2, #4
 80114b2:	f102 0614 	add.w	r6, r2, #20
 80114b6:	429e      	cmp	r6, r3
 80114b8:	6841      	ldr	r1, [r0, #4]
 80114ba:	d93d      	bls.n	8011538 <_dtoa_r+0x318>
 80114bc:	4620      	mov	r0, r4
 80114be:	f001 f84f 	bl	8012560 <_Balloc>
 80114c2:	9001      	str	r0, [sp, #4]
 80114c4:	2800      	cmp	r0, #0
 80114c6:	d13b      	bne.n	8011540 <_dtoa_r+0x320>
 80114c8:	4b11      	ldr	r3, [pc, #68]	; (8011510 <_dtoa_r+0x2f0>)
 80114ca:	4602      	mov	r2, r0
 80114cc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80114d0:	e6c0      	b.n	8011254 <_dtoa_r+0x34>
 80114d2:	2301      	movs	r3, #1
 80114d4:	e7df      	b.n	8011496 <_dtoa_r+0x276>
 80114d6:	bf00      	nop
 80114d8:	636f4361 	.word	0x636f4361
 80114dc:	3fd287a7 	.word	0x3fd287a7
 80114e0:	8b60c8b3 	.word	0x8b60c8b3
 80114e4:	3fc68a28 	.word	0x3fc68a28
 80114e8:	509f79fb 	.word	0x509f79fb
 80114ec:	3fd34413 	.word	0x3fd34413
 80114f0:	08014c50 	.word	0x08014c50
 80114f4:	08014e0e 	.word	0x08014e0e
 80114f8:	7ff00000 	.word	0x7ff00000
 80114fc:	08014e0a 	.word	0x08014e0a
 8011500:	08014e01 	.word	0x08014e01
 8011504:	08015062 	.word	0x08015062
 8011508:	3ff80000 	.word	0x3ff80000
 801150c:	08014f78 	.word	0x08014f78
 8011510:	08014e69 	.word	0x08014e69
 8011514:	2501      	movs	r5, #1
 8011516:	2300      	movs	r3, #0
 8011518:	9306      	str	r3, [sp, #24]
 801151a:	9508      	str	r5, [sp, #32]
 801151c:	f04f 33ff 	mov.w	r3, #4294967295
 8011520:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011524:	2200      	movs	r2, #0
 8011526:	2312      	movs	r3, #18
 8011528:	e7b0      	b.n	801148c <_dtoa_r+0x26c>
 801152a:	2301      	movs	r3, #1
 801152c:	9308      	str	r3, [sp, #32]
 801152e:	e7f5      	b.n	801151c <_dtoa_r+0x2fc>
 8011530:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011532:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011536:	e7b8      	b.n	80114aa <_dtoa_r+0x28a>
 8011538:	3101      	adds	r1, #1
 801153a:	6041      	str	r1, [r0, #4]
 801153c:	0052      	lsls	r2, r2, #1
 801153e:	e7b8      	b.n	80114b2 <_dtoa_r+0x292>
 8011540:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011542:	9a01      	ldr	r2, [sp, #4]
 8011544:	601a      	str	r2, [r3, #0]
 8011546:	9b03      	ldr	r3, [sp, #12]
 8011548:	2b0e      	cmp	r3, #14
 801154a:	f200 809d 	bhi.w	8011688 <_dtoa_r+0x468>
 801154e:	2d00      	cmp	r5, #0
 8011550:	f000 809a 	beq.w	8011688 <_dtoa_r+0x468>
 8011554:	9b00      	ldr	r3, [sp, #0]
 8011556:	2b00      	cmp	r3, #0
 8011558:	dd32      	ble.n	80115c0 <_dtoa_r+0x3a0>
 801155a:	4ab7      	ldr	r2, [pc, #732]	; (8011838 <_dtoa_r+0x618>)
 801155c:	f003 030f 	and.w	r3, r3, #15
 8011560:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011564:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011568:	9b00      	ldr	r3, [sp, #0]
 801156a:	05d8      	lsls	r0, r3, #23
 801156c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8011570:	d516      	bpl.n	80115a0 <_dtoa_r+0x380>
 8011572:	4bb2      	ldr	r3, [pc, #712]	; (801183c <_dtoa_r+0x61c>)
 8011574:	ec51 0b19 	vmov	r0, r1, d9
 8011578:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801157c:	f7ef f996 	bl	80008ac <__aeabi_ddiv>
 8011580:	f007 070f 	and.w	r7, r7, #15
 8011584:	4682      	mov	sl, r0
 8011586:	468b      	mov	fp, r1
 8011588:	2503      	movs	r5, #3
 801158a:	4eac      	ldr	r6, [pc, #688]	; (801183c <_dtoa_r+0x61c>)
 801158c:	b957      	cbnz	r7, 80115a4 <_dtoa_r+0x384>
 801158e:	4642      	mov	r2, r8
 8011590:	464b      	mov	r3, r9
 8011592:	4650      	mov	r0, sl
 8011594:	4659      	mov	r1, fp
 8011596:	f7ef f989 	bl	80008ac <__aeabi_ddiv>
 801159a:	4682      	mov	sl, r0
 801159c:	468b      	mov	fp, r1
 801159e:	e028      	b.n	80115f2 <_dtoa_r+0x3d2>
 80115a0:	2502      	movs	r5, #2
 80115a2:	e7f2      	b.n	801158a <_dtoa_r+0x36a>
 80115a4:	07f9      	lsls	r1, r7, #31
 80115a6:	d508      	bpl.n	80115ba <_dtoa_r+0x39a>
 80115a8:	4640      	mov	r0, r8
 80115aa:	4649      	mov	r1, r9
 80115ac:	e9d6 2300 	ldrd	r2, r3, [r6]
 80115b0:	f7ef f852 	bl	8000658 <__aeabi_dmul>
 80115b4:	3501      	adds	r5, #1
 80115b6:	4680      	mov	r8, r0
 80115b8:	4689      	mov	r9, r1
 80115ba:	107f      	asrs	r7, r7, #1
 80115bc:	3608      	adds	r6, #8
 80115be:	e7e5      	b.n	801158c <_dtoa_r+0x36c>
 80115c0:	f000 809b 	beq.w	80116fa <_dtoa_r+0x4da>
 80115c4:	9b00      	ldr	r3, [sp, #0]
 80115c6:	4f9d      	ldr	r7, [pc, #628]	; (801183c <_dtoa_r+0x61c>)
 80115c8:	425e      	negs	r6, r3
 80115ca:	4b9b      	ldr	r3, [pc, #620]	; (8011838 <_dtoa_r+0x618>)
 80115cc:	f006 020f 	and.w	r2, r6, #15
 80115d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80115d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115d8:	ec51 0b19 	vmov	r0, r1, d9
 80115dc:	f7ef f83c 	bl	8000658 <__aeabi_dmul>
 80115e0:	1136      	asrs	r6, r6, #4
 80115e2:	4682      	mov	sl, r0
 80115e4:	468b      	mov	fp, r1
 80115e6:	2300      	movs	r3, #0
 80115e8:	2502      	movs	r5, #2
 80115ea:	2e00      	cmp	r6, #0
 80115ec:	d17a      	bne.n	80116e4 <_dtoa_r+0x4c4>
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d1d3      	bne.n	801159a <_dtoa_r+0x37a>
 80115f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	f000 8082 	beq.w	80116fe <_dtoa_r+0x4de>
 80115fa:	4b91      	ldr	r3, [pc, #580]	; (8011840 <_dtoa_r+0x620>)
 80115fc:	2200      	movs	r2, #0
 80115fe:	4650      	mov	r0, sl
 8011600:	4659      	mov	r1, fp
 8011602:	f7ef fa9b 	bl	8000b3c <__aeabi_dcmplt>
 8011606:	2800      	cmp	r0, #0
 8011608:	d079      	beq.n	80116fe <_dtoa_r+0x4de>
 801160a:	9b03      	ldr	r3, [sp, #12]
 801160c:	2b00      	cmp	r3, #0
 801160e:	d076      	beq.n	80116fe <_dtoa_r+0x4de>
 8011610:	9b02      	ldr	r3, [sp, #8]
 8011612:	2b00      	cmp	r3, #0
 8011614:	dd36      	ble.n	8011684 <_dtoa_r+0x464>
 8011616:	9b00      	ldr	r3, [sp, #0]
 8011618:	4650      	mov	r0, sl
 801161a:	4659      	mov	r1, fp
 801161c:	1e5f      	subs	r7, r3, #1
 801161e:	2200      	movs	r2, #0
 8011620:	4b88      	ldr	r3, [pc, #544]	; (8011844 <_dtoa_r+0x624>)
 8011622:	f7ef f819 	bl	8000658 <__aeabi_dmul>
 8011626:	9e02      	ldr	r6, [sp, #8]
 8011628:	4682      	mov	sl, r0
 801162a:	468b      	mov	fp, r1
 801162c:	3501      	adds	r5, #1
 801162e:	4628      	mov	r0, r5
 8011630:	f7ee ffa8 	bl	8000584 <__aeabi_i2d>
 8011634:	4652      	mov	r2, sl
 8011636:	465b      	mov	r3, fp
 8011638:	f7ef f80e 	bl	8000658 <__aeabi_dmul>
 801163c:	4b82      	ldr	r3, [pc, #520]	; (8011848 <_dtoa_r+0x628>)
 801163e:	2200      	movs	r2, #0
 8011640:	f7ee fe54 	bl	80002ec <__adddf3>
 8011644:	46d0      	mov	r8, sl
 8011646:	46d9      	mov	r9, fp
 8011648:	4682      	mov	sl, r0
 801164a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801164e:	2e00      	cmp	r6, #0
 8011650:	d158      	bne.n	8011704 <_dtoa_r+0x4e4>
 8011652:	4b7e      	ldr	r3, [pc, #504]	; (801184c <_dtoa_r+0x62c>)
 8011654:	2200      	movs	r2, #0
 8011656:	4640      	mov	r0, r8
 8011658:	4649      	mov	r1, r9
 801165a:	f7ee fe45 	bl	80002e8 <__aeabi_dsub>
 801165e:	4652      	mov	r2, sl
 8011660:	465b      	mov	r3, fp
 8011662:	4680      	mov	r8, r0
 8011664:	4689      	mov	r9, r1
 8011666:	f7ef fa87 	bl	8000b78 <__aeabi_dcmpgt>
 801166a:	2800      	cmp	r0, #0
 801166c:	f040 8295 	bne.w	8011b9a <_dtoa_r+0x97a>
 8011670:	4652      	mov	r2, sl
 8011672:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8011676:	4640      	mov	r0, r8
 8011678:	4649      	mov	r1, r9
 801167a:	f7ef fa5f 	bl	8000b3c <__aeabi_dcmplt>
 801167e:	2800      	cmp	r0, #0
 8011680:	f040 8289 	bne.w	8011b96 <_dtoa_r+0x976>
 8011684:	ec5b ab19 	vmov	sl, fp, d9
 8011688:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801168a:	2b00      	cmp	r3, #0
 801168c:	f2c0 8148 	blt.w	8011920 <_dtoa_r+0x700>
 8011690:	9a00      	ldr	r2, [sp, #0]
 8011692:	2a0e      	cmp	r2, #14
 8011694:	f300 8144 	bgt.w	8011920 <_dtoa_r+0x700>
 8011698:	4b67      	ldr	r3, [pc, #412]	; (8011838 <_dtoa_r+0x618>)
 801169a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801169e:	e9d3 8900 	ldrd	r8, r9, [r3]
 80116a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	f280 80d5 	bge.w	8011854 <_dtoa_r+0x634>
 80116aa:	9b03      	ldr	r3, [sp, #12]
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	f300 80d1 	bgt.w	8011854 <_dtoa_r+0x634>
 80116b2:	f040 826f 	bne.w	8011b94 <_dtoa_r+0x974>
 80116b6:	4b65      	ldr	r3, [pc, #404]	; (801184c <_dtoa_r+0x62c>)
 80116b8:	2200      	movs	r2, #0
 80116ba:	4640      	mov	r0, r8
 80116bc:	4649      	mov	r1, r9
 80116be:	f7ee ffcb 	bl	8000658 <__aeabi_dmul>
 80116c2:	4652      	mov	r2, sl
 80116c4:	465b      	mov	r3, fp
 80116c6:	f7ef fa4d 	bl	8000b64 <__aeabi_dcmpge>
 80116ca:	9e03      	ldr	r6, [sp, #12]
 80116cc:	4637      	mov	r7, r6
 80116ce:	2800      	cmp	r0, #0
 80116d0:	f040 8245 	bne.w	8011b5e <_dtoa_r+0x93e>
 80116d4:	9d01      	ldr	r5, [sp, #4]
 80116d6:	2331      	movs	r3, #49	; 0x31
 80116d8:	f805 3b01 	strb.w	r3, [r5], #1
 80116dc:	9b00      	ldr	r3, [sp, #0]
 80116de:	3301      	adds	r3, #1
 80116e0:	9300      	str	r3, [sp, #0]
 80116e2:	e240      	b.n	8011b66 <_dtoa_r+0x946>
 80116e4:	07f2      	lsls	r2, r6, #31
 80116e6:	d505      	bpl.n	80116f4 <_dtoa_r+0x4d4>
 80116e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80116ec:	f7ee ffb4 	bl	8000658 <__aeabi_dmul>
 80116f0:	3501      	adds	r5, #1
 80116f2:	2301      	movs	r3, #1
 80116f4:	1076      	asrs	r6, r6, #1
 80116f6:	3708      	adds	r7, #8
 80116f8:	e777      	b.n	80115ea <_dtoa_r+0x3ca>
 80116fa:	2502      	movs	r5, #2
 80116fc:	e779      	b.n	80115f2 <_dtoa_r+0x3d2>
 80116fe:	9f00      	ldr	r7, [sp, #0]
 8011700:	9e03      	ldr	r6, [sp, #12]
 8011702:	e794      	b.n	801162e <_dtoa_r+0x40e>
 8011704:	9901      	ldr	r1, [sp, #4]
 8011706:	4b4c      	ldr	r3, [pc, #304]	; (8011838 <_dtoa_r+0x618>)
 8011708:	4431      	add	r1, r6
 801170a:	910d      	str	r1, [sp, #52]	; 0x34
 801170c:	9908      	ldr	r1, [sp, #32]
 801170e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8011712:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011716:	2900      	cmp	r1, #0
 8011718:	d043      	beq.n	80117a2 <_dtoa_r+0x582>
 801171a:	494d      	ldr	r1, [pc, #308]	; (8011850 <_dtoa_r+0x630>)
 801171c:	2000      	movs	r0, #0
 801171e:	f7ef f8c5 	bl	80008ac <__aeabi_ddiv>
 8011722:	4652      	mov	r2, sl
 8011724:	465b      	mov	r3, fp
 8011726:	f7ee fddf 	bl	80002e8 <__aeabi_dsub>
 801172a:	9d01      	ldr	r5, [sp, #4]
 801172c:	4682      	mov	sl, r0
 801172e:	468b      	mov	fp, r1
 8011730:	4649      	mov	r1, r9
 8011732:	4640      	mov	r0, r8
 8011734:	f7ef fa40 	bl	8000bb8 <__aeabi_d2iz>
 8011738:	4606      	mov	r6, r0
 801173a:	f7ee ff23 	bl	8000584 <__aeabi_i2d>
 801173e:	4602      	mov	r2, r0
 8011740:	460b      	mov	r3, r1
 8011742:	4640      	mov	r0, r8
 8011744:	4649      	mov	r1, r9
 8011746:	f7ee fdcf 	bl	80002e8 <__aeabi_dsub>
 801174a:	3630      	adds	r6, #48	; 0x30
 801174c:	f805 6b01 	strb.w	r6, [r5], #1
 8011750:	4652      	mov	r2, sl
 8011752:	465b      	mov	r3, fp
 8011754:	4680      	mov	r8, r0
 8011756:	4689      	mov	r9, r1
 8011758:	f7ef f9f0 	bl	8000b3c <__aeabi_dcmplt>
 801175c:	2800      	cmp	r0, #0
 801175e:	d163      	bne.n	8011828 <_dtoa_r+0x608>
 8011760:	4642      	mov	r2, r8
 8011762:	464b      	mov	r3, r9
 8011764:	4936      	ldr	r1, [pc, #216]	; (8011840 <_dtoa_r+0x620>)
 8011766:	2000      	movs	r0, #0
 8011768:	f7ee fdbe 	bl	80002e8 <__aeabi_dsub>
 801176c:	4652      	mov	r2, sl
 801176e:	465b      	mov	r3, fp
 8011770:	f7ef f9e4 	bl	8000b3c <__aeabi_dcmplt>
 8011774:	2800      	cmp	r0, #0
 8011776:	f040 80b5 	bne.w	80118e4 <_dtoa_r+0x6c4>
 801177a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801177c:	429d      	cmp	r5, r3
 801177e:	d081      	beq.n	8011684 <_dtoa_r+0x464>
 8011780:	4b30      	ldr	r3, [pc, #192]	; (8011844 <_dtoa_r+0x624>)
 8011782:	2200      	movs	r2, #0
 8011784:	4650      	mov	r0, sl
 8011786:	4659      	mov	r1, fp
 8011788:	f7ee ff66 	bl	8000658 <__aeabi_dmul>
 801178c:	4b2d      	ldr	r3, [pc, #180]	; (8011844 <_dtoa_r+0x624>)
 801178e:	4682      	mov	sl, r0
 8011790:	468b      	mov	fp, r1
 8011792:	4640      	mov	r0, r8
 8011794:	4649      	mov	r1, r9
 8011796:	2200      	movs	r2, #0
 8011798:	f7ee ff5e 	bl	8000658 <__aeabi_dmul>
 801179c:	4680      	mov	r8, r0
 801179e:	4689      	mov	r9, r1
 80117a0:	e7c6      	b.n	8011730 <_dtoa_r+0x510>
 80117a2:	4650      	mov	r0, sl
 80117a4:	4659      	mov	r1, fp
 80117a6:	f7ee ff57 	bl	8000658 <__aeabi_dmul>
 80117aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80117ac:	9d01      	ldr	r5, [sp, #4]
 80117ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80117b0:	4682      	mov	sl, r0
 80117b2:	468b      	mov	fp, r1
 80117b4:	4649      	mov	r1, r9
 80117b6:	4640      	mov	r0, r8
 80117b8:	f7ef f9fe 	bl	8000bb8 <__aeabi_d2iz>
 80117bc:	4606      	mov	r6, r0
 80117be:	f7ee fee1 	bl	8000584 <__aeabi_i2d>
 80117c2:	3630      	adds	r6, #48	; 0x30
 80117c4:	4602      	mov	r2, r0
 80117c6:	460b      	mov	r3, r1
 80117c8:	4640      	mov	r0, r8
 80117ca:	4649      	mov	r1, r9
 80117cc:	f7ee fd8c 	bl	80002e8 <__aeabi_dsub>
 80117d0:	f805 6b01 	strb.w	r6, [r5], #1
 80117d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80117d6:	429d      	cmp	r5, r3
 80117d8:	4680      	mov	r8, r0
 80117da:	4689      	mov	r9, r1
 80117dc:	f04f 0200 	mov.w	r2, #0
 80117e0:	d124      	bne.n	801182c <_dtoa_r+0x60c>
 80117e2:	4b1b      	ldr	r3, [pc, #108]	; (8011850 <_dtoa_r+0x630>)
 80117e4:	4650      	mov	r0, sl
 80117e6:	4659      	mov	r1, fp
 80117e8:	f7ee fd80 	bl	80002ec <__adddf3>
 80117ec:	4602      	mov	r2, r0
 80117ee:	460b      	mov	r3, r1
 80117f0:	4640      	mov	r0, r8
 80117f2:	4649      	mov	r1, r9
 80117f4:	f7ef f9c0 	bl	8000b78 <__aeabi_dcmpgt>
 80117f8:	2800      	cmp	r0, #0
 80117fa:	d173      	bne.n	80118e4 <_dtoa_r+0x6c4>
 80117fc:	4652      	mov	r2, sl
 80117fe:	465b      	mov	r3, fp
 8011800:	4913      	ldr	r1, [pc, #76]	; (8011850 <_dtoa_r+0x630>)
 8011802:	2000      	movs	r0, #0
 8011804:	f7ee fd70 	bl	80002e8 <__aeabi_dsub>
 8011808:	4602      	mov	r2, r0
 801180a:	460b      	mov	r3, r1
 801180c:	4640      	mov	r0, r8
 801180e:	4649      	mov	r1, r9
 8011810:	f7ef f994 	bl	8000b3c <__aeabi_dcmplt>
 8011814:	2800      	cmp	r0, #0
 8011816:	f43f af35 	beq.w	8011684 <_dtoa_r+0x464>
 801181a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801181c:	1e6b      	subs	r3, r5, #1
 801181e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011820:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011824:	2b30      	cmp	r3, #48	; 0x30
 8011826:	d0f8      	beq.n	801181a <_dtoa_r+0x5fa>
 8011828:	9700      	str	r7, [sp, #0]
 801182a:	e049      	b.n	80118c0 <_dtoa_r+0x6a0>
 801182c:	4b05      	ldr	r3, [pc, #20]	; (8011844 <_dtoa_r+0x624>)
 801182e:	f7ee ff13 	bl	8000658 <__aeabi_dmul>
 8011832:	4680      	mov	r8, r0
 8011834:	4689      	mov	r9, r1
 8011836:	e7bd      	b.n	80117b4 <_dtoa_r+0x594>
 8011838:	08014f78 	.word	0x08014f78
 801183c:	08014f50 	.word	0x08014f50
 8011840:	3ff00000 	.word	0x3ff00000
 8011844:	40240000 	.word	0x40240000
 8011848:	401c0000 	.word	0x401c0000
 801184c:	40140000 	.word	0x40140000
 8011850:	3fe00000 	.word	0x3fe00000
 8011854:	9d01      	ldr	r5, [sp, #4]
 8011856:	4656      	mov	r6, sl
 8011858:	465f      	mov	r7, fp
 801185a:	4642      	mov	r2, r8
 801185c:	464b      	mov	r3, r9
 801185e:	4630      	mov	r0, r6
 8011860:	4639      	mov	r1, r7
 8011862:	f7ef f823 	bl	80008ac <__aeabi_ddiv>
 8011866:	f7ef f9a7 	bl	8000bb8 <__aeabi_d2iz>
 801186a:	4682      	mov	sl, r0
 801186c:	f7ee fe8a 	bl	8000584 <__aeabi_i2d>
 8011870:	4642      	mov	r2, r8
 8011872:	464b      	mov	r3, r9
 8011874:	f7ee fef0 	bl	8000658 <__aeabi_dmul>
 8011878:	4602      	mov	r2, r0
 801187a:	460b      	mov	r3, r1
 801187c:	4630      	mov	r0, r6
 801187e:	4639      	mov	r1, r7
 8011880:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8011884:	f7ee fd30 	bl	80002e8 <__aeabi_dsub>
 8011888:	f805 6b01 	strb.w	r6, [r5], #1
 801188c:	9e01      	ldr	r6, [sp, #4]
 801188e:	9f03      	ldr	r7, [sp, #12]
 8011890:	1bae      	subs	r6, r5, r6
 8011892:	42b7      	cmp	r7, r6
 8011894:	4602      	mov	r2, r0
 8011896:	460b      	mov	r3, r1
 8011898:	d135      	bne.n	8011906 <_dtoa_r+0x6e6>
 801189a:	f7ee fd27 	bl	80002ec <__adddf3>
 801189e:	4642      	mov	r2, r8
 80118a0:	464b      	mov	r3, r9
 80118a2:	4606      	mov	r6, r0
 80118a4:	460f      	mov	r7, r1
 80118a6:	f7ef f967 	bl	8000b78 <__aeabi_dcmpgt>
 80118aa:	b9d0      	cbnz	r0, 80118e2 <_dtoa_r+0x6c2>
 80118ac:	4642      	mov	r2, r8
 80118ae:	464b      	mov	r3, r9
 80118b0:	4630      	mov	r0, r6
 80118b2:	4639      	mov	r1, r7
 80118b4:	f7ef f938 	bl	8000b28 <__aeabi_dcmpeq>
 80118b8:	b110      	cbz	r0, 80118c0 <_dtoa_r+0x6a0>
 80118ba:	f01a 0f01 	tst.w	sl, #1
 80118be:	d110      	bne.n	80118e2 <_dtoa_r+0x6c2>
 80118c0:	4620      	mov	r0, r4
 80118c2:	ee18 1a10 	vmov	r1, s16
 80118c6:	f000 fe8b 	bl	80125e0 <_Bfree>
 80118ca:	2300      	movs	r3, #0
 80118cc:	9800      	ldr	r0, [sp, #0]
 80118ce:	702b      	strb	r3, [r5, #0]
 80118d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80118d2:	3001      	adds	r0, #1
 80118d4:	6018      	str	r0, [r3, #0]
 80118d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80118d8:	2b00      	cmp	r3, #0
 80118da:	f43f acf1 	beq.w	80112c0 <_dtoa_r+0xa0>
 80118de:	601d      	str	r5, [r3, #0]
 80118e0:	e4ee      	b.n	80112c0 <_dtoa_r+0xa0>
 80118e2:	9f00      	ldr	r7, [sp, #0]
 80118e4:	462b      	mov	r3, r5
 80118e6:	461d      	mov	r5, r3
 80118e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80118ec:	2a39      	cmp	r2, #57	; 0x39
 80118ee:	d106      	bne.n	80118fe <_dtoa_r+0x6de>
 80118f0:	9a01      	ldr	r2, [sp, #4]
 80118f2:	429a      	cmp	r2, r3
 80118f4:	d1f7      	bne.n	80118e6 <_dtoa_r+0x6c6>
 80118f6:	9901      	ldr	r1, [sp, #4]
 80118f8:	2230      	movs	r2, #48	; 0x30
 80118fa:	3701      	adds	r7, #1
 80118fc:	700a      	strb	r2, [r1, #0]
 80118fe:	781a      	ldrb	r2, [r3, #0]
 8011900:	3201      	adds	r2, #1
 8011902:	701a      	strb	r2, [r3, #0]
 8011904:	e790      	b.n	8011828 <_dtoa_r+0x608>
 8011906:	4ba6      	ldr	r3, [pc, #664]	; (8011ba0 <_dtoa_r+0x980>)
 8011908:	2200      	movs	r2, #0
 801190a:	f7ee fea5 	bl	8000658 <__aeabi_dmul>
 801190e:	2200      	movs	r2, #0
 8011910:	2300      	movs	r3, #0
 8011912:	4606      	mov	r6, r0
 8011914:	460f      	mov	r7, r1
 8011916:	f7ef f907 	bl	8000b28 <__aeabi_dcmpeq>
 801191a:	2800      	cmp	r0, #0
 801191c:	d09d      	beq.n	801185a <_dtoa_r+0x63a>
 801191e:	e7cf      	b.n	80118c0 <_dtoa_r+0x6a0>
 8011920:	9a08      	ldr	r2, [sp, #32]
 8011922:	2a00      	cmp	r2, #0
 8011924:	f000 80d7 	beq.w	8011ad6 <_dtoa_r+0x8b6>
 8011928:	9a06      	ldr	r2, [sp, #24]
 801192a:	2a01      	cmp	r2, #1
 801192c:	f300 80ba 	bgt.w	8011aa4 <_dtoa_r+0x884>
 8011930:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011932:	2a00      	cmp	r2, #0
 8011934:	f000 80b2 	beq.w	8011a9c <_dtoa_r+0x87c>
 8011938:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801193c:	9e07      	ldr	r6, [sp, #28]
 801193e:	9d04      	ldr	r5, [sp, #16]
 8011940:	9a04      	ldr	r2, [sp, #16]
 8011942:	441a      	add	r2, r3
 8011944:	9204      	str	r2, [sp, #16]
 8011946:	9a05      	ldr	r2, [sp, #20]
 8011948:	2101      	movs	r1, #1
 801194a:	441a      	add	r2, r3
 801194c:	4620      	mov	r0, r4
 801194e:	9205      	str	r2, [sp, #20]
 8011950:	f000 ff48 	bl	80127e4 <__i2b>
 8011954:	4607      	mov	r7, r0
 8011956:	2d00      	cmp	r5, #0
 8011958:	dd0c      	ble.n	8011974 <_dtoa_r+0x754>
 801195a:	9b05      	ldr	r3, [sp, #20]
 801195c:	2b00      	cmp	r3, #0
 801195e:	dd09      	ble.n	8011974 <_dtoa_r+0x754>
 8011960:	42ab      	cmp	r3, r5
 8011962:	9a04      	ldr	r2, [sp, #16]
 8011964:	bfa8      	it	ge
 8011966:	462b      	movge	r3, r5
 8011968:	1ad2      	subs	r2, r2, r3
 801196a:	9204      	str	r2, [sp, #16]
 801196c:	9a05      	ldr	r2, [sp, #20]
 801196e:	1aed      	subs	r5, r5, r3
 8011970:	1ad3      	subs	r3, r2, r3
 8011972:	9305      	str	r3, [sp, #20]
 8011974:	9b07      	ldr	r3, [sp, #28]
 8011976:	b31b      	cbz	r3, 80119c0 <_dtoa_r+0x7a0>
 8011978:	9b08      	ldr	r3, [sp, #32]
 801197a:	2b00      	cmp	r3, #0
 801197c:	f000 80af 	beq.w	8011ade <_dtoa_r+0x8be>
 8011980:	2e00      	cmp	r6, #0
 8011982:	dd13      	ble.n	80119ac <_dtoa_r+0x78c>
 8011984:	4639      	mov	r1, r7
 8011986:	4632      	mov	r2, r6
 8011988:	4620      	mov	r0, r4
 801198a:	f000 ffeb 	bl	8012964 <__pow5mult>
 801198e:	ee18 2a10 	vmov	r2, s16
 8011992:	4601      	mov	r1, r0
 8011994:	4607      	mov	r7, r0
 8011996:	4620      	mov	r0, r4
 8011998:	f000 ff3a 	bl	8012810 <__multiply>
 801199c:	ee18 1a10 	vmov	r1, s16
 80119a0:	4680      	mov	r8, r0
 80119a2:	4620      	mov	r0, r4
 80119a4:	f000 fe1c 	bl	80125e0 <_Bfree>
 80119a8:	ee08 8a10 	vmov	s16, r8
 80119ac:	9b07      	ldr	r3, [sp, #28]
 80119ae:	1b9a      	subs	r2, r3, r6
 80119b0:	d006      	beq.n	80119c0 <_dtoa_r+0x7a0>
 80119b2:	ee18 1a10 	vmov	r1, s16
 80119b6:	4620      	mov	r0, r4
 80119b8:	f000 ffd4 	bl	8012964 <__pow5mult>
 80119bc:	ee08 0a10 	vmov	s16, r0
 80119c0:	2101      	movs	r1, #1
 80119c2:	4620      	mov	r0, r4
 80119c4:	f000 ff0e 	bl	80127e4 <__i2b>
 80119c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	4606      	mov	r6, r0
 80119ce:	f340 8088 	ble.w	8011ae2 <_dtoa_r+0x8c2>
 80119d2:	461a      	mov	r2, r3
 80119d4:	4601      	mov	r1, r0
 80119d6:	4620      	mov	r0, r4
 80119d8:	f000 ffc4 	bl	8012964 <__pow5mult>
 80119dc:	9b06      	ldr	r3, [sp, #24]
 80119de:	2b01      	cmp	r3, #1
 80119e0:	4606      	mov	r6, r0
 80119e2:	f340 8081 	ble.w	8011ae8 <_dtoa_r+0x8c8>
 80119e6:	f04f 0800 	mov.w	r8, #0
 80119ea:	6933      	ldr	r3, [r6, #16]
 80119ec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80119f0:	6918      	ldr	r0, [r3, #16]
 80119f2:	f000 fea7 	bl	8012744 <__hi0bits>
 80119f6:	f1c0 0020 	rsb	r0, r0, #32
 80119fa:	9b05      	ldr	r3, [sp, #20]
 80119fc:	4418      	add	r0, r3
 80119fe:	f010 001f 	ands.w	r0, r0, #31
 8011a02:	f000 8092 	beq.w	8011b2a <_dtoa_r+0x90a>
 8011a06:	f1c0 0320 	rsb	r3, r0, #32
 8011a0a:	2b04      	cmp	r3, #4
 8011a0c:	f340 808a 	ble.w	8011b24 <_dtoa_r+0x904>
 8011a10:	f1c0 001c 	rsb	r0, r0, #28
 8011a14:	9b04      	ldr	r3, [sp, #16]
 8011a16:	4403      	add	r3, r0
 8011a18:	9304      	str	r3, [sp, #16]
 8011a1a:	9b05      	ldr	r3, [sp, #20]
 8011a1c:	4403      	add	r3, r0
 8011a1e:	4405      	add	r5, r0
 8011a20:	9305      	str	r3, [sp, #20]
 8011a22:	9b04      	ldr	r3, [sp, #16]
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	dd07      	ble.n	8011a38 <_dtoa_r+0x818>
 8011a28:	ee18 1a10 	vmov	r1, s16
 8011a2c:	461a      	mov	r2, r3
 8011a2e:	4620      	mov	r0, r4
 8011a30:	f000 fff2 	bl	8012a18 <__lshift>
 8011a34:	ee08 0a10 	vmov	s16, r0
 8011a38:	9b05      	ldr	r3, [sp, #20]
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	dd05      	ble.n	8011a4a <_dtoa_r+0x82a>
 8011a3e:	4631      	mov	r1, r6
 8011a40:	461a      	mov	r2, r3
 8011a42:	4620      	mov	r0, r4
 8011a44:	f000 ffe8 	bl	8012a18 <__lshift>
 8011a48:	4606      	mov	r6, r0
 8011a4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d06e      	beq.n	8011b2e <_dtoa_r+0x90e>
 8011a50:	ee18 0a10 	vmov	r0, s16
 8011a54:	4631      	mov	r1, r6
 8011a56:	f001 f84f 	bl	8012af8 <__mcmp>
 8011a5a:	2800      	cmp	r0, #0
 8011a5c:	da67      	bge.n	8011b2e <_dtoa_r+0x90e>
 8011a5e:	9b00      	ldr	r3, [sp, #0]
 8011a60:	3b01      	subs	r3, #1
 8011a62:	ee18 1a10 	vmov	r1, s16
 8011a66:	9300      	str	r3, [sp, #0]
 8011a68:	220a      	movs	r2, #10
 8011a6a:	2300      	movs	r3, #0
 8011a6c:	4620      	mov	r0, r4
 8011a6e:	f000 fdd9 	bl	8012624 <__multadd>
 8011a72:	9b08      	ldr	r3, [sp, #32]
 8011a74:	ee08 0a10 	vmov	s16, r0
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	f000 81b1 	beq.w	8011de0 <_dtoa_r+0xbc0>
 8011a7e:	2300      	movs	r3, #0
 8011a80:	4639      	mov	r1, r7
 8011a82:	220a      	movs	r2, #10
 8011a84:	4620      	mov	r0, r4
 8011a86:	f000 fdcd 	bl	8012624 <__multadd>
 8011a8a:	9b02      	ldr	r3, [sp, #8]
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	4607      	mov	r7, r0
 8011a90:	f300 808e 	bgt.w	8011bb0 <_dtoa_r+0x990>
 8011a94:	9b06      	ldr	r3, [sp, #24]
 8011a96:	2b02      	cmp	r3, #2
 8011a98:	dc51      	bgt.n	8011b3e <_dtoa_r+0x91e>
 8011a9a:	e089      	b.n	8011bb0 <_dtoa_r+0x990>
 8011a9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011a9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011aa2:	e74b      	b.n	801193c <_dtoa_r+0x71c>
 8011aa4:	9b03      	ldr	r3, [sp, #12]
 8011aa6:	1e5e      	subs	r6, r3, #1
 8011aa8:	9b07      	ldr	r3, [sp, #28]
 8011aaa:	42b3      	cmp	r3, r6
 8011aac:	bfbf      	itttt	lt
 8011aae:	9b07      	ldrlt	r3, [sp, #28]
 8011ab0:	9607      	strlt	r6, [sp, #28]
 8011ab2:	1af2      	sublt	r2, r6, r3
 8011ab4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8011ab6:	bfb6      	itet	lt
 8011ab8:	189b      	addlt	r3, r3, r2
 8011aba:	1b9e      	subge	r6, r3, r6
 8011abc:	930a      	strlt	r3, [sp, #40]	; 0x28
 8011abe:	9b03      	ldr	r3, [sp, #12]
 8011ac0:	bfb8      	it	lt
 8011ac2:	2600      	movlt	r6, #0
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	bfb7      	itett	lt
 8011ac8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8011acc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8011ad0:	1a9d      	sublt	r5, r3, r2
 8011ad2:	2300      	movlt	r3, #0
 8011ad4:	e734      	b.n	8011940 <_dtoa_r+0x720>
 8011ad6:	9e07      	ldr	r6, [sp, #28]
 8011ad8:	9d04      	ldr	r5, [sp, #16]
 8011ada:	9f08      	ldr	r7, [sp, #32]
 8011adc:	e73b      	b.n	8011956 <_dtoa_r+0x736>
 8011ade:	9a07      	ldr	r2, [sp, #28]
 8011ae0:	e767      	b.n	80119b2 <_dtoa_r+0x792>
 8011ae2:	9b06      	ldr	r3, [sp, #24]
 8011ae4:	2b01      	cmp	r3, #1
 8011ae6:	dc18      	bgt.n	8011b1a <_dtoa_r+0x8fa>
 8011ae8:	f1ba 0f00 	cmp.w	sl, #0
 8011aec:	d115      	bne.n	8011b1a <_dtoa_r+0x8fa>
 8011aee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011af2:	b993      	cbnz	r3, 8011b1a <_dtoa_r+0x8fa>
 8011af4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011af8:	0d1b      	lsrs	r3, r3, #20
 8011afa:	051b      	lsls	r3, r3, #20
 8011afc:	b183      	cbz	r3, 8011b20 <_dtoa_r+0x900>
 8011afe:	9b04      	ldr	r3, [sp, #16]
 8011b00:	3301      	adds	r3, #1
 8011b02:	9304      	str	r3, [sp, #16]
 8011b04:	9b05      	ldr	r3, [sp, #20]
 8011b06:	3301      	adds	r3, #1
 8011b08:	9305      	str	r3, [sp, #20]
 8011b0a:	f04f 0801 	mov.w	r8, #1
 8011b0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	f47f af6a 	bne.w	80119ea <_dtoa_r+0x7ca>
 8011b16:	2001      	movs	r0, #1
 8011b18:	e76f      	b.n	80119fa <_dtoa_r+0x7da>
 8011b1a:	f04f 0800 	mov.w	r8, #0
 8011b1e:	e7f6      	b.n	8011b0e <_dtoa_r+0x8ee>
 8011b20:	4698      	mov	r8, r3
 8011b22:	e7f4      	b.n	8011b0e <_dtoa_r+0x8ee>
 8011b24:	f43f af7d 	beq.w	8011a22 <_dtoa_r+0x802>
 8011b28:	4618      	mov	r0, r3
 8011b2a:	301c      	adds	r0, #28
 8011b2c:	e772      	b.n	8011a14 <_dtoa_r+0x7f4>
 8011b2e:	9b03      	ldr	r3, [sp, #12]
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	dc37      	bgt.n	8011ba4 <_dtoa_r+0x984>
 8011b34:	9b06      	ldr	r3, [sp, #24]
 8011b36:	2b02      	cmp	r3, #2
 8011b38:	dd34      	ble.n	8011ba4 <_dtoa_r+0x984>
 8011b3a:	9b03      	ldr	r3, [sp, #12]
 8011b3c:	9302      	str	r3, [sp, #8]
 8011b3e:	9b02      	ldr	r3, [sp, #8]
 8011b40:	b96b      	cbnz	r3, 8011b5e <_dtoa_r+0x93e>
 8011b42:	4631      	mov	r1, r6
 8011b44:	2205      	movs	r2, #5
 8011b46:	4620      	mov	r0, r4
 8011b48:	f000 fd6c 	bl	8012624 <__multadd>
 8011b4c:	4601      	mov	r1, r0
 8011b4e:	4606      	mov	r6, r0
 8011b50:	ee18 0a10 	vmov	r0, s16
 8011b54:	f000 ffd0 	bl	8012af8 <__mcmp>
 8011b58:	2800      	cmp	r0, #0
 8011b5a:	f73f adbb 	bgt.w	80116d4 <_dtoa_r+0x4b4>
 8011b5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b60:	9d01      	ldr	r5, [sp, #4]
 8011b62:	43db      	mvns	r3, r3
 8011b64:	9300      	str	r3, [sp, #0]
 8011b66:	f04f 0800 	mov.w	r8, #0
 8011b6a:	4631      	mov	r1, r6
 8011b6c:	4620      	mov	r0, r4
 8011b6e:	f000 fd37 	bl	80125e0 <_Bfree>
 8011b72:	2f00      	cmp	r7, #0
 8011b74:	f43f aea4 	beq.w	80118c0 <_dtoa_r+0x6a0>
 8011b78:	f1b8 0f00 	cmp.w	r8, #0
 8011b7c:	d005      	beq.n	8011b8a <_dtoa_r+0x96a>
 8011b7e:	45b8      	cmp	r8, r7
 8011b80:	d003      	beq.n	8011b8a <_dtoa_r+0x96a>
 8011b82:	4641      	mov	r1, r8
 8011b84:	4620      	mov	r0, r4
 8011b86:	f000 fd2b 	bl	80125e0 <_Bfree>
 8011b8a:	4639      	mov	r1, r7
 8011b8c:	4620      	mov	r0, r4
 8011b8e:	f000 fd27 	bl	80125e0 <_Bfree>
 8011b92:	e695      	b.n	80118c0 <_dtoa_r+0x6a0>
 8011b94:	2600      	movs	r6, #0
 8011b96:	4637      	mov	r7, r6
 8011b98:	e7e1      	b.n	8011b5e <_dtoa_r+0x93e>
 8011b9a:	9700      	str	r7, [sp, #0]
 8011b9c:	4637      	mov	r7, r6
 8011b9e:	e599      	b.n	80116d4 <_dtoa_r+0x4b4>
 8011ba0:	40240000 	.word	0x40240000
 8011ba4:	9b08      	ldr	r3, [sp, #32]
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	f000 80ca 	beq.w	8011d40 <_dtoa_r+0xb20>
 8011bac:	9b03      	ldr	r3, [sp, #12]
 8011bae:	9302      	str	r3, [sp, #8]
 8011bb0:	2d00      	cmp	r5, #0
 8011bb2:	dd05      	ble.n	8011bc0 <_dtoa_r+0x9a0>
 8011bb4:	4639      	mov	r1, r7
 8011bb6:	462a      	mov	r2, r5
 8011bb8:	4620      	mov	r0, r4
 8011bba:	f000 ff2d 	bl	8012a18 <__lshift>
 8011bbe:	4607      	mov	r7, r0
 8011bc0:	f1b8 0f00 	cmp.w	r8, #0
 8011bc4:	d05b      	beq.n	8011c7e <_dtoa_r+0xa5e>
 8011bc6:	6879      	ldr	r1, [r7, #4]
 8011bc8:	4620      	mov	r0, r4
 8011bca:	f000 fcc9 	bl	8012560 <_Balloc>
 8011bce:	4605      	mov	r5, r0
 8011bd0:	b928      	cbnz	r0, 8011bde <_dtoa_r+0x9be>
 8011bd2:	4b87      	ldr	r3, [pc, #540]	; (8011df0 <_dtoa_r+0xbd0>)
 8011bd4:	4602      	mov	r2, r0
 8011bd6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8011bda:	f7ff bb3b 	b.w	8011254 <_dtoa_r+0x34>
 8011bde:	693a      	ldr	r2, [r7, #16]
 8011be0:	3202      	adds	r2, #2
 8011be2:	0092      	lsls	r2, r2, #2
 8011be4:	f107 010c 	add.w	r1, r7, #12
 8011be8:	300c      	adds	r0, #12
 8011bea:	f7fd fc15 	bl	800f418 <memcpy>
 8011bee:	2201      	movs	r2, #1
 8011bf0:	4629      	mov	r1, r5
 8011bf2:	4620      	mov	r0, r4
 8011bf4:	f000 ff10 	bl	8012a18 <__lshift>
 8011bf8:	9b01      	ldr	r3, [sp, #4]
 8011bfa:	f103 0901 	add.w	r9, r3, #1
 8011bfe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8011c02:	4413      	add	r3, r2
 8011c04:	9305      	str	r3, [sp, #20]
 8011c06:	f00a 0301 	and.w	r3, sl, #1
 8011c0a:	46b8      	mov	r8, r7
 8011c0c:	9304      	str	r3, [sp, #16]
 8011c0e:	4607      	mov	r7, r0
 8011c10:	4631      	mov	r1, r6
 8011c12:	ee18 0a10 	vmov	r0, s16
 8011c16:	f7ff fa77 	bl	8011108 <quorem>
 8011c1a:	4641      	mov	r1, r8
 8011c1c:	9002      	str	r0, [sp, #8]
 8011c1e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011c22:	ee18 0a10 	vmov	r0, s16
 8011c26:	f000 ff67 	bl	8012af8 <__mcmp>
 8011c2a:	463a      	mov	r2, r7
 8011c2c:	9003      	str	r0, [sp, #12]
 8011c2e:	4631      	mov	r1, r6
 8011c30:	4620      	mov	r0, r4
 8011c32:	f000 ff7d 	bl	8012b30 <__mdiff>
 8011c36:	68c2      	ldr	r2, [r0, #12]
 8011c38:	f109 3bff 	add.w	fp, r9, #4294967295
 8011c3c:	4605      	mov	r5, r0
 8011c3e:	bb02      	cbnz	r2, 8011c82 <_dtoa_r+0xa62>
 8011c40:	4601      	mov	r1, r0
 8011c42:	ee18 0a10 	vmov	r0, s16
 8011c46:	f000 ff57 	bl	8012af8 <__mcmp>
 8011c4a:	4602      	mov	r2, r0
 8011c4c:	4629      	mov	r1, r5
 8011c4e:	4620      	mov	r0, r4
 8011c50:	9207      	str	r2, [sp, #28]
 8011c52:	f000 fcc5 	bl	80125e0 <_Bfree>
 8011c56:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8011c5a:	ea43 0102 	orr.w	r1, r3, r2
 8011c5e:	9b04      	ldr	r3, [sp, #16]
 8011c60:	430b      	orrs	r3, r1
 8011c62:	464d      	mov	r5, r9
 8011c64:	d10f      	bne.n	8011c86 <_dtoa_r+0xa66>
 8011c66:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011c6a:	d02a      	beq.n	8011cc2 <_dtoa_r+0xaa2>
 8011c6c:	9b03      	ldr	r3, [sp, #12]
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	dd02      	ble.n	8011c78 <_dtoa_r+0xa58>
 8011c72:	9b02      	ldr	r3, [sp, #8]
 8011c74:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8011c78:	f88b a000 	strb.w	sl, [fp]
 8011c7c:	e775      	b.n	8011b6a <_dtoa_r+0x94a>
 8011c7e:	4638      	mov	r0, r7
 8011c80:	e7ba      	b.n	8011bf8 <_dtoa_r+0x9d8>
 8011c82:	2201      	movs	r2, #1
 8011c84:	e7e2      	b.n	8011c4c <_dtoa_r+0xa2c>
 8011c86:	9b03      	ldr	r3, [sp, #12]
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	db04      	blt.n	8011c96 <_dtoa_r+0xa76>
 8011c8c:	9906      	ldr	r1, [sp, #24]
 8011c8e:	430b      	orrs	r3, r1
 8011c90:	9904      	ldr	r1, [sp, #16]
 8011c92:	430b      	orrs	r3, r1
 8011c94:	d122      	bne.n	8011cdc <_dtoa_r+0xabc>
 8011c96:	2a00      	cmp	r2, #0
 8011c98:	ddee      	ble.n	8011c78 <_dtoa_r+0xa58>
 8011c9a:	ee18 1a10 	vmov	r1, s16
 8011c9e:	2201      	movs	r2, #1
 8011ca0:	4620      	mov	r0, r4
 8011ca2:	f000 feb9 	bl	8012a18 <__lshift>
 8011ca6:	4631      	mov	r1, r6
 8011ca8:	ee08 0a10 	vmov	s16, r0
 8011cac:	f000 ff24 	bl	8012af8 <__mcmp>
 8011cb0:	2800      	cmp	r0, #0
 8011cb2:	dc03      	bgt.n	8011cbc <_dtoa_r+0xa9c>
 8011cb4:	d1e0      	bne.n	8011c78 <_dtoa_r+0xa58>
 8011cb6:	f01a 0f01 	tst.w	sl, #1
 8011cba:	d0dd      	beq.n	8011c78 <_dtoa_r+0xa58>
 8011cbc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011cc0:	d1d7      	bne.n	8011c72 <_dtoa_r+0xa52>
 8011cc2:	2339      	movs	r3, #57	; 0x39
 8011cc4:	f88b 3000 	strb.w	r3, [fp]
 8011cc8:	462b      	mov	r3, r5
 8011cca:	461d      	mov	r5, r3
 8011ccc:	3b01      	subs	r3, #1
 8011cce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011cd2:	2a39      	cmp	r2, #57	; 0x39
 8011cd4:	d071      	beq.n	8011dba <_dtoa_r+0xb9a>
 8011cd6:	3201      	adds	r2, #1
 8011cd8:	701a      	strb	r2, [r3, #0]
 8011cda:	e746      	b.n	8011b6a <_dtoa_r+0x94a>
 8011cdc:	2a00      	cmp	r2, #0
 8011cde:	dd07      	ble.n	8011cf0 <_dtoa_r+0xad0>
 8011ce0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011ce4:	d0ed      	beq.n	8011cc2 <_dtoa_r+0xaa2>
 8011ce6:	f10a 0301 	add.w	r3, sl, #1
 8011cea:	f88b 3000 	strb.w	r3, [fp]
 8011cee:	e73c      	b.n	8011b6a <_dtoa_r+0x94a>
 8011cf0:	9b05      	ldr	r3, [sp, #20]
 8011cf2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8011cf6:	4599      	cmp	r9, r3
 8011cf8:	d047      	beq.n	8011d8a <_dtoa_r+0xb6a>
 8011cfa:	ee18 1a10 	vmov	r1, s16
 8011cfe:	2300      	movs	r3, #0
 8011d00:	220a      	movs	r2, #10
 8011d02:	4620      	mov	r0, r4
 8011d04:	f000 fc8e 	bl	8012624 <__multadd>
 8011d08:	45b8      	cmp	r8, r7
 8011d0a:	ee08 0a10 	vmov	s16, r0
 8011d0e:	f04f 0300 	mov.w	r3, #0
 8011d12:	f04f 020a 	mov.w	r2, #10
 8011d16:	4641      	mov	r1, r8
 8011d18:	4620      	mov	r0, r4
 8011d1a:	d106      	bne.n	8011d2a <_dtoa_r+0xb0a>
 8011d1c:	f000 fc82 	bl	8012624 <__multadd>
 8011d20:	4680      	mov	r8, r0
 8011d22:	4607      	mov	r7, r0
 8011d24:	f109 0901 	add.w	r9, r9, #1
 8011d28:	e772      	b.n	8011c10 <_dtoa_r+0x9f0>
 8011d2a:	f000 fc7b 	bl	8012624 <__multadd>
 8011d2e:	4639      	mov	r1, r7
 8011d30:	4680      	mov	r8, r0
 8011d32:	2300      	movs	r3, #0
 8011d34:	220a      	movs	r2, #10
 8011d36:	4620      	mov	r0, r4
 8011d38:	f000 fc74 	bl	8012624 <__multadd>
 8011d3c:	4607      	mov	r7, r0
 8011d3e:	e7f1      	b.n	8011d24 <_dtoa_r+0xb04>
 8011d40:	9b03      	ldr	r3, [sp, #12]
 8011d42:	9302      	str	r3, [sp, #8]
 8011d44:	9d01      	ldr	r5, [sp, #4]
 8011d46:	ee18 0a10 	vmov	r0, s16
 8011d4a:	4631      	mov	r1, r6
 8011d4c:	f7ff f9dc 	bl	8011108 <quorem>
 8011d50:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011d54:	9b01      	ldr	r3, [sp, #4]
 8011d56:	f805 ab01 	strb.w	sl, [r5], #1
 8011d5a:	1aea      	subs	r2, r5, r3
 8011d5c:	9b02      	ldr	r3, [sp, #8]
 8011d5e:	4293      	cmp	r3, r2
 8011d60:	dd09      	ble.n	8011d76 <_dtoa_r+0xb56>
 8011d62:	ee18 1a10 	vmov	r1, s16
 8011d66:	2300      	movs	r3, #0
 8011d68:	220a      	movs	r2, #10
 8011d6a:	4620      	mov	r0, r4
 8011d6c:	f000 fc5a 	bl	8012624 <__multadd>
 8011d70:	ee08 0a10 	vmov	s16, r0
 8011d74:	e7e7      	b.n	8011d46 <_dtoa_r+0xb26>
 8011d76:	9b02      	ldr	r3, [sp, #8]
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	bfc8      	it	gt
 8011d7c:	461d      	movgt	r5, r3
 8011d7e:	9b01      	ldr	r3, [sp, #4]
 8011d80:	bfd8      	it	le
 8011d82:	2501      	movle	r5, #1
 8011d84:	441d      	add	r5, r3
 8011d86:	f04f 0800 	mov.w	r8, #0
 8011d8a:	ee18 1a10 	vmov	r1, s16
 8011d8e:	2201      	movs	r2, #1
 8011d90:	4620      	mov	r0, r4
 8011d92:	f000 fe41 	bl	8012a18 <__lshift>
 8011d96:	4631      	mov	r1, r6
 8011d98:	ee08 0a10 	vmov	s16, r0
 8011d9c:	f000 feac 	bl	8012af8 <__mcmp>
 8011da0:	2800      	cmp	r0, #0
 8011da2:	dc91      	bgt.n	8011cc8 <_dtoa_r+0xaa8>
 8011da4:	d102      	bne.n	8011dac <_dtoa_r+0xb8c>
 8011da6:	f01a 0f01 	tst.w	sl, #1
 8011daa:	d18d      	bne.n	8011cc8 <_dtoa_r+0xaa8>
 8011dac:	462b      	mov	r3, r5
 8011dae:	461d      	mov	r5, r3
 8011db0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011db4:	2a30      	cmp	r2, #48	; 0x30
 8011db6:	d0fa      	beq.n	8011dae <_dtoa_r+0xb8e>
 8011db8:	e6d7      	b.n	8011b6a <_dtoa_r+0x94a>
 8011dba:	9a01      	ldr	r2, [sp, #4]
 8011dbc:	429a      	cmp	r2, r3
 8011dbe:	d184      	bne.n	8011cca <_dtoa_r+0xaaa>
 8011dc0:	9b00      	ldr	r3, [sp, #0]
 8011dc2:	3301      	adds	r3, #1
 8011dc4:	9300      	str	r3, [sp, #0]
 8011dc6:	2331      	movs	r3, #49	; 0x31
 8011dc8:	7013      	strb	r3, [r2, #0]
 8011dca:	e6ce      	b.n	8011b6a <_dtoa_r+0x94a>
 8011dcc:	4b09      	ldr	r3, [pc, #36]	; (8011df4 <_dtoa_r+0xbd4>)
 8011dce:	f7ff ba95 	b.w	80112fc <_dtoa_r+0xdc>
 8011dd2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	f47f aa6e 	bne.w	80112b6 <_dtoa_r+0x96>
 8011dda:	4b07      	ldr	r3, [pc, #28]	; (8011df8 <_dtoa_r+0xbd8>)
 8011ddc:	f7ff ba8e 	b.w	80112fc <_dtoa_r+0xdc>
 8011de0:	9b02      	ldr	r3, [sp, #8]
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	dcae      	bgt.n	8011d44 <_dtoa_r+0xb24>
 8011de6:	9b06      	ldr	r3, [sp, #24]
 8011de8:	2b02      	cmp	r3, #2
 8011dea:	f73f aea8 	bgt.w	8011b3e <_dtoa_r+0x91e>
 8011dee:	e7a9      	b.n	8011d44 <_dtoa_r+0xb24>
 8011df0:	08014e69 	.word	0x08014e69
 8011df4:	08015061 	.word	0x08015061
 8011df8:	08014e01 	.word	0x08014e01

08011dfc <fiprintf>:
 8011dfc:	b40e      	push	{r1, r2, r3}
 8011dfe:	b503      	push	{r0, r1, lr}
 8011e00:	4601      	mov	r1, r0
 8011e02:	ab03      	add	r3, sp, #12
 8011e04:	4805      	ldr	r0, [pc, #20]	; (8011e1c <fiprintf+0x20>)
 8011e06:	f853 2b04 	ldr.w	r2, [r3], #4
 8011e0a:	6800      	ldr	r0, [r0, #0]
 8011e0c:	9301      	str	r3, [sp, #4]
 8011e0e:	f001 fcb7 	bl	8013780 <_vfiprintf_r>
 8011e12:	b002      	add	sp, #8
 8011e14:	f85d eb04 	ldr.w	lr, [sp], #4
 8011e18:	b003      	add	sp, #12
 8011e1a:	4770      	bx	lr
 8011e1c:	200002ec 	.word	0x200002ec

08011e20 <rshift>:
 8011e20:	6903      	ldr	r3, [r0, #16]
 8011e22:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011e26:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011e2a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8011e2e:	f100 0414 	add.w	r4, r0, #20
 8011e32:	dd45      	ble.n	8011ec0 <rshift+0xa0>
 8011e34:	f011 011f 	ands.w	r1, r1, #31
 8011e38:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011e3c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011e40:	d10c      	bne.n	8011e5c <rshift+0x3c>
 8011e42:	f100 0710 	add.w	r7, r0, #16
 8011e46:	4629      	mov	r1, r5
 8011e48:	42b1      	cmp	r1, r6
 8011e4a:	d334      	bcc.n	8011eb6 <rshift+0x96>
 8011e4c:	1a9b      	subs	r3, r3, r2
 8011e4e:	009b      	lsls	r3, r3, #2
 8011e50:	1eea      	subs	r2, r5, #3
 8011e52:	4296      	cmp	r6, r2
 8011e54:	bf38      	it	cc
 8011e56:	2300      	movcc	r3, #0
 8011e58:	4423      	add	r3, r4
 8011e5a:	e015      	b.n	8011e88 <rshift+0x68>
 8011e5c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011e60:	f1c1 0820 	rsb	r8, r1, #32
 8011e64:	40cf      	lsrs	r7, r1
 8011e66:	f105 0e04 	add.w	lr, r5, #4
 8011e6a:	46a1      	mov	r9, r4
 8011e6c:	4576      	cmp	r6, lr
 8011e6e:	46f4      	mov	ip, lr
 8011e70:	d815      	bhi.n	8011e9e <rshift+0x7e>
 8011e72:	1a9a      	subs	r2, r3, r2
 8011e74:	0092      	lsls	r2, r2, #2
 8011e76:	3a04      	subs	r2, #4
 8011e78:	3501      	adds	r5, #1
 8011e7a:	42ae      	cmp	r6, r5
 8011e7c:	bf38      	it	cc
 8011e7e:	2200      	movcc	r2, #0
 8011e80:	18a3      	adds	r3, r4, r2
 8011e82:	50a7      	str	r7, [r4, r2]
 8011e84:	b107      	cbz	r7, 8011e88 <rshift+0x68>
 8011e86:	3304      	adds	r3, #4
 8011e88:	1b1a      	subs	r2, r3, r4
 8011e8a:	42a3      	cmp	r3, r4
 8011e8c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011e90:	bf08      	it	eq
 8011e92:	2300      	moveq	r3, #0
 8011e94:	6102      	str	r2, [r0, #16]
 8011e96:	bf08      	it	eq
 8011e98:	6143      	streq	r3, [r0, #20]
 8011e9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011e9e:	f8dc c000 	ldr.w	ip, [ip]
 8011ea2:	fa0c fc08 	lsl.w	ip, ip, r8
 8011ea6:	ea4c 0707 	orr.w	r7, ip, r7
 8011eaa:	f849 7b04 	str.w	r7, [r9], #4
 8011eae:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011eb2:	40cf      	lsrs	r7, r1
 8011eb4:	e7da      	b.n	8011e6c <rshift+0x4c>
 8011eb6:	f851 cb04 	ldr.w	ip, [r1], #4
 8011eba:	f847 cf04 	str.w	ip, [r7, #4]!
 8011ebe:	e7c3      	b.n	8011e48 <rshift+0x28>
 8011ec0:	4623      	mov	r3, r4
 8011ec2:	e7e1      	b.n	8011e88 <rshift+0x68>

08011ec4 <__hexdig_fun>:
 8011ec4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8011ec8:	2b09      	cmp	r3, #9
 8011eca:	d802      	bhi.n	8011ed2 <__hexdig_fun+0xe>
 8011ecc:	3820      	subs	r0, #32
 8011ece:	b2c0      	uxtb	r0, r0
 8011ed0:	4770      	bx	lr
 8011ed2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8011ed6:	2b05      	cmp	r3, #5
 8011ed8:	d801      	bhi.n	8011ede <__hexdig_fun+0x1a>
 8011eda:	3847      	subs	r0, #71	; 0x47
 8011edc:	e7f7      	b.n	8011ece <__hexdig_fun+0xa>
 8011ede:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8011ee2:	2b05      	cmp	r3, #5
 8011ee4:	d801      	bhi.n	8011eea <__hexdig_fun+0x26>
 8011ee6:	3827      	subs	r0, #39	; 0x27
 8011ee8:	e7f1      	b.n	8011ece <__hexdig_fun+0xa>
 8011eea:	2000      	movs	r0, #0
 8011eec:	4770      	bx	lr
	...

08011ef0 <__gethex>:
 8011ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ef4:	ed2d 8b02 	vpush	{d8}
 8011ef8:	b089      	sub	sp, #36	; 0x24
 8011efa:	ee08 0a10 	vmov	s16, r0
 8011efe:	9304      	str	r3, [sp, #16]
 8011f00:	4bb4      	ldr	r3, [pc, #720]	; (80121d4 <__gethex+0x2e4>)
 8011f02:	681b      	ldr	r3, [r3, #0]
 8011f04:	9301      	str	r3, [sp, #4]
 8011f06:	4618      	mov	r0, r3
 8011f08:	468b      	mov	fp, r1
 8011f0a:	4690      	mov	r8, r2
 8011f0c:	f7ee f98a 	bl	8000224 <strlen>
 8011f10:	9b01      	ldr	r3, [sp, #4]
 8011f12:	f8db 2000 	ldr.w	r2, [fp]
 8011f16:	4403      	add	r3, r0
 8011f18:	4682      	mov	sl, r0
 8011f1a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8011f1e:	9305      	str	r3, [sp, #20]
 8011f20:	1c93      	adds	r3, r2, #2
 8011f22:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8011f26:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8011f2a:	32fe      	adds	r2, #254	; 0xfe
 8011f2c:	18d1      	adds	r1, r2, r3
 8011f2e:	461f      	mov	r7, r3
 8011f30:	f813 0b01 	ldrb.w	r0, [r3], #1
 8011f34:	9100      	str	r1, [sp, #0]
 8011f36:	2830      	cmp	r0, #48	; 0x30
 8011f38:	d0f8      	beq.n	8011f2c <__gethex+0x3c>
 8011f3a:	f7ff ffc3 	bl	8011ec4 <__hexdig_fun>
 8011f3e:	4604      	mov	r4, r0
 8011f40:	2800      	cmp	r0, #0
 8011f42:	d13a      	bne.n	8011fba <__gethex+0xca>
 8011f44:	9901      	ldr	r1, [sp, #4]
 8011f46:	4652      	mov	r2, sl
 8011f48:	4638      	mov	r0, r7
 8011f4a:	f001 fefd 	bl	8013d48 <strncmp>
 8011f4e:	4605      	mov	r5, r0
 8011f50:	2800      	cmp	r0, #0
 8011f52:	d168      	bne.n	8012026 <__gethex+0x136>
 8011f54:	f817 000a 	ldrb.w	r0, [r7, sl]
 8011f58:	eb07 060a 	add.w	r6, r7, sl
 8011f5c:	f7ff ffb2 	bl	8011ec4 <__hexdig_fun>
 8011f60:	2800      	cmp	r0, #0
 8011f62:	d062      	beq.n	801202a <__gethex+0x13a>
 8011f64:	4633      	mov	r3, r6
 8011f66:	7818      	ldrb	r0, [r3, #0]
 8011f68:	2830      	cmp	r0, #48	; 0x30
 8011f6a:	461f      	mov	r7, r3
 8011f6c:	f103 0301 	add.w	r3, r3, #1
 8011f70:	d0f9      	beq.n	8011f66 <__gethex+0x76>
 8011f72:	f7ff ffa7 	bl	8011ec4 <__hexdig_fun>
 8011f76:	2301      	movs	r3, #1
 8011f78:	fab0 f480 	clz	r4, r0
 8011f7c:	0964      	lsrs	r4, r4, #5
 8011f7e:	4635      	mov	r5, r6
 8011f80:	9300      	str	r3, [sp, #0]
 8011f82:	463a      	mov	r2, r7
 8011f84:	4616      	mov	r6, r2
 8011f86:	3201      	adds	r2, #1
 8011f88:	7830      	ldrb	r0, [r6, #0]
 8011f8a:	f7ff ff9b 	bl	8011ec4 <__hexdig_fun>
 8011f8e:	2800      	cmp	r0, #0
 8011f90:	d1f8      	bne.n	8011f84 <__gethex+0x94>
 8011f92:	9901      	ldr	r1, [sp, #4]
 8011f94:	4652      	mov	r2, sl
 8011f96:	4630      	mov	r0, r6
 8011f98:	f001 fed6 	bl	8013d48 <strncmp>
 8011f9c:	b980      	cbnz	r0, 8011fc0 <__gethex+0xd0>
 8011f9e:	b94d      	cbnz	r5, 8011fb4 <__gethex+0xc4>
 8011fa0:	eb06 050a 	add.w	r5, r6, sl
 8011fa4:	462a      	mov	r2, r5
 8011fa6:	4616      	mov	r6, r2
 8011fa8:	3201      	adds	r2, #1
 8011faa:	7830      	ldrb	r0, [r6, #0]
 8011fac:	f7ff ff8a 	bl	8011ec4 <__hexdig_fun>
 8011fb0:	2800      	cmp	r0, #0
 8011fb2:	d1f8      	bne.n	8011fa6 <__gethex+0xb6>
 8011fb4:	1bad      	subs	r5, r5, r6
 8011fb6:	00ad      	lsls	r5, r5, #2
 8011fb8:	e004      	b.n	8011fc4 <__gethex+0xd4>
 8011fba:	2400      	movs	r4, #0
 8011fbc:	4625      	mov	r5, r4
 8011fbe:	e7e0      	b.n	8011f82 <__gethex+0x92>
 8011fc0:	2d00      	cmp	r5, #0
 8011fc2:	d1f7      	bne.n	8011fb4 <__gethex+0xc4>
 8011fc4:	7833      	ldrb	r3, [r6, #0]
 8011fc6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011fca:	2b50      	cmp	r3, #80	; 0x50
 8011fcc:	d13b      	bne.n	8012046 <__gethex+0x156>
 8011fce:	7873      	ldrb	r3, [r6, #1]
 8011fd0:	2b2b      	cmp	r3, #43	; 0x2b
 8011fd2:	d02c      	beq.n	801202e <__gethex+0x13e>
 8011fd4:	2b2d      	cmp	r3, #45	; 0x2d
 8011fd6:	d02e      	beq.n	8012036 <__gethex+0x146>
 8011fd8:	1c71      	adds	r1, r6, #1
 8011fda:	f04f 0900 	mov.w	r9, #0
 8011fde:	7808      	ldrb	r0, [r1, #0]
 8011fe0:	f7ff ff70 	bl	8011ec4 <__hexdig_fun>
 8011fe4:	1e43      	subs	r3, r0, #1
 8011fe6:	b2db      	uxtb	r3, r3
 8011fe8:	2b18      	cmp	r3, #24
 8011fea:	d82c      	bhi.n	8012046 <__gethex+0x156>
 8011fec:	f1a0 0210 	sub.w	r2, r0, #16
 8011ff0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011ff4:	f7ff ff66 	bl	8011ec4 <__hexdig_fun>
 8011ff8:	1e43      	subs	r3, r0, #1
 8011ffa:	b2db      	uxtb	r3, r3
 8011ffc:	2b18      	cmp	r3, #24
 8011ffe:	d91d      	bls.n	801203c <__gethex+0x14c>
 8012000:	f1b9 0f00 	cmp.w	r9, #0
 8012004:	d000      	beq.n	8012008 <__gethex+0x118>
 8012006:	4252      	negs	r2, r2
 8012008:	4415      	add	r5, r2
 801200a:	f8cb 1000 	str.w	r1, [fp]
 801200e:	b1e4      	cbz	r4, 801204a <__gethex+0x15a>
 8012010:	9b00      	ldr	r3, [sp, #0]
 8012012:	2b00      	cmp	r3, #0
 8012014:	bf14      	ite	ne
 8012016:	2700      	movne	r7, #0
 8012018:	2706      	moveq	r7, #6
 801201a:	4638      	mov	r0, r7
 801201c:	b009      	add	sp, #36	; 0x24
 801201e:	ecbd 8b02 	vpop	{d8}
 8012022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012026:	463e      	mov	r6, r7
 8012028:	4625      	mov	r5, r4
 801202a:	2401      	movs	r4, #1
 801202c:	e7ca      	b.n	8011fc4 <__gethex+0xd4>
 801202e:	f04f 0900 	mov.w	r9, #0
 8012032:	1cb1      	adds	r1, r6, #2
 8012034:	e7d3      	b.n	8011fde <__gethex+0xee>
 8012036:	f04f 0901 	mov.w	r9, #1
 801203a:	e7fa      	b.n	8012032 <__gethex+0x142>
 801203c:	230a      	movs	r3, #10
 801203e:	fb03 0202 	mla	r2, r3, r2, r0
 8012042:	3a10      	subs	r2, #16
 8012044:	e7d4      	b.n	8011ff0 <__gethex+0x100>
 8012046:	4631      	mov	r1, r6
 8012048:	e7df      	b.n	801200a <__gethex+0x11a>
 801204a:	1bf3      	subs	r3, r6, r7
 801204c:	3b01      	subs	r3, #1
 801204e:	4621      	mov	r1, r4
 8012050:	2b07      	cmp	r3, #7
 8012052:	dc0b      	bgt.n	801206c <__gethex+0x17c>
 8012054:	ee18 0a10 	vmov	r0, s16
 8012058:	f000 fa82 	bl	8012560 <_Balloc>
 801205c:	4604      	mov	r4, r0
 801205e:	b940      	cbnz	r0, 8012072 <__gethex+0x182>
 8012060:	4b5d      	ldr	r3, [pc, #372]	; (80121d8 <__gethex+0x2e8>)
 8012062:	4602      	mov	r2, r0
 8012064:	21de      	movs	r1, #222	; 0xde
 8012066:	485d      	ldr	r0, [pc, #372]	; (80121dc <__gethex+0x2ec>)
 8012068:	f7ff f820 	bl	80110ac <__assert_func>
 801206c:	3101      	adds	r1, #1
 801206e:	105b      	asrs	r3, r3, #1
 8012070:	e7ee      	b.n	8012050 <__gethex+0x160>
 8012072:	f100 0914 	add.w	r9, r0, #20
 8012076:	f04f 0b00 	mov.w	fp, #0
 801207a:	f1ca 0301 	rsb	r3, sl, #1
 801207e:	f8cd 9008 	str.w	r9, [sp, #8]
 8012082:	f8cd b000 	str.w	fp, [sp]
 8012086:	9306      	str	r3, [sp, #24]
 8012088:	42b7      	cmp	r7, r6
 801208a:	d340      	bcc.n	801210e <__gethex+0x21e>
 801208c:	9802      	ldr	r0, [sp, #8]
 801208e:	9b00      	ldr	r3, [sp, #0]
 8012090:	f840 3b04 	str.w	r3, [r0], #4
 8012094:	eba0 0009 	sub.w	r0, r0, r9
 8012098:	1080      	asrs	r0, r0, #2
 801209a:	0146      	lsls	r6, r0, #5
 801209c:	6120      	str	r0, [r4, #16]
 801209e:	4618      	mov	r0, r3
 80120a0:	f000 fb50 	bl	8012744 <__hi0bits>
 80120a4:	1a30      	subs	r0, r6, r0
 80120a6:	f8d8 6000 	ldr.w	r6, [r8]
 80120aa:	42b0      	cmp	r0, r6
 80120ac:	dd63      	ble.n	8012176 <__gethex+0x286>
 80120ae:	1b87      	subs	r7, r0, r6
 80120b0:	4639      	mov	r1, r7
 80120b2:	4620      	mov	r0, r4
 80120b4:	f000 fef4 	bl	8012ea0 <__any_on>
 80120b8:	4682      	mov	sl, r0
 80120ba:	b1a8      	cbz	r0, 80120e8 <__gethex+0x1f8>
 80120bc:	1e7b      	subs	r3, r7, #1
 80120be:	1159      	asrs	r1, r3, #5
 80120c0:	f003 021f 	and.w	r2, r3, #31
 80120c4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80120c8:	f04f 0a01 	mov.w	sl, #1
 80120cc:	fa0a f202 	lsl.w	r2, sl, r2
 80120d0:	420a      	tst	r2, r1
 80120d2:	d009      	beq.n	80120e8 <__gethex+0x1f8>
 80120d4:	4553      	cmp	r3, sl
 80120d6:	dd05      	ble.n	80120e4 <__gethex+0x1f4>
 80120d8:	1eb9      	subs	r1, r7, #2
 80120da:	4620      	mov	r0, r4
 80120dc:	f000 fee0 	bl	8012ea0 <__any_on>
 80120e0:	2800      	cmp	r0, #0
 80120e2:	d145      	bne.n	8012170 <__gethex+0x280>
 80120e4:	f04f 0a02 	mov.w	sl, #2
 80120e8:	4639      	mov	r1, r7
 80120ea:	4620      	mov	r0, r4
 80120ec:	f7ff fe98 	bl	8011e20 <rshift>
 80120f0:	443d      	add	r5, r7
 80120f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80120f6:	42ab      	cmp	r3, r5
 80120f8:	da4c      	bge.n	8012194 <__gethex+0x2a4>
 80120fa:	ee18 0a10 	vmov	r0, s16
 80120fe:	4621      	mov	r1, r4
 8012100:	f000 fa6e 	bl	80125e0 <_Bfree>
 8012104:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012106:	2300      	movs	r3, #0
 8012108:	6013      	str	r3, [r2, #0]
 801210a:	27a3      	movs	r7, #163	; 0xa3
 801210c:	e785      	b.n	801201a <__gethex+0x12a>
 801210e:	1e73      	subs	r3, r6, #1
 8012110:	9a05      	ldr	r2, [sp, #20]
 8012112:	9303      	str	r3, [sp, #12]
 8012114:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012118:	4293      	cmp	r3, r2
 801211a:	d019      	beq.n	8012150 <__gethex+0x260>
 801211c:	f1bb 0f20 	cmp.w	fp, #32
 8012120:	d107      	bne.n	8012132 <__gethex+0x242>
 8012122:	9b02      	ldr	r3, [sp, #8]
 8012124:	9a00      	ldr	r2, [sp, #0]
 8012126:	f843 2b04 	str.w	r2, [r3], #4
 801212a:	9302      	str	r3, [sp, #8]
 801212c:	2300      	movs	r3, #0
 801212e:	9300      	str	r3, [sp, #0]
 8012130:	469b      	mov	fp, r3
 8012132:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8012136:	f7ff fec5 	bl	8011ec4 <__hexdig_fun>
 801213a:	9b00      	ldr	r3, [sp, #0]
 801213c:	f000 000f 	and.w	r0, r0, #15
 8012140:	fa00 f00b 	lsl.w	r0, r0, fp
 8012144:	4303      	orrs	r3, r0
 8012146:	9300      	str	r3, [sp, #0]
 8012148:	f10b 0b04 	add.w	fp, fp, #4
 801214c:	9b03      	ldr	r3, [sp, #12]
 801214e:	e00d      	b.n	801216c <__gethex+0x27c>
 8012150:	9b03      	ldr	r3, [sp, #12]
 8012152:	9a06      	ldr	r2, [sp, #24]
 8012154:	4413      	add	r3, r2
 8012156:	42bb      	cmp	r3, r7
 8012158:	d3e0      	bcc.n	801211c <__gethex+0x22c>
 801215a:	4618      	mov	r0, r3
 801215c:	9901      	ldr	r1, [sp, #4]
 801215e:	9307      	str	r3, [sp, #28]
 8012160:	4652      	mov	r2, sl
 8012162:	f001 fdf1 	bl	8013d48 <strncmp>
 8012166:	9b07      	ldr	r3, [sp, #28]
 8012168:	2800      	cmp	r0, #0
 801216a:	d1d7      	bne.n	801211c <__gethex+0x22c>
 801216c:	461e      	mov	r6, r3
 801216e:	e78b      	b.n	8012088 <__gethex+0x198>
 8012170:	f04f 0a03 	mov.w	sl, #3
 8012174:	e7b8      	b.n	80120e8 <__gethex+0x1f8>
 8012176:	da0a      	bge.n	801218e <__gethex+0x29e>
 8012178:	1a37      	subs	r7, r6, r0
 801217a:	4621      	mov	r1, r4
 801217c:	ee18 0a10 	vmov	r0, s16
 8012180:	463a      	mov	r2, r7
 8012182:	f000 fc49 	bl	8012a18 <__lshift>
 8012186:	1bed      	subs	r5, r5, r7
 8012188:	4604      	mov	r4, r0
 801218a:	f100 0914 	add.w	r9, r0, #20
 801218e:	f04f 0a00 	mov.w	sl, #0
 8012192:	e7ae      	b.n	80120f2 <__gethex+0x202>
 8012194:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8012198:	42a8      	cmp	r0, r5
 801219a:	dd72      	ble.n	8012282 <__gethex+0x392>
 801219c:	1b45      	subs	r5, r0, r5
 801219e:	42ae      	cmp	r6, r5
 80121a0:	dc36      	bgt.n	8012210 <__gethex+0x320>
 80121a2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80121a6:	2b02      	cmp	r3, #2
 80121a8:	d02a      	beq.n	8012200 <__gethex+0x310>
 80121aa:	2b03      	cmp	r3, #3
 80121ac:	d02c      	beq.n	8012208 <__gethex+0x318>
 80121ae:	2b01      	cmp	r3, #1
 80121b0:	d11c      	bne.n	80121ec <__gethex+0x2fc>
 80121b2:	42ae      	cmp	r6, r5
 80121b4:	d11a      	bne.n	80121ec <__gethex+0x2fc>
 80121b6:	2e01      	cmp	r6, #1
 80121b8:	d112      	bne.n	80121e0 <__gethex+0x2f0>
 80121ba:	9a04      	ldr	r2, [sp, #16]
 80121bc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80121c0:	6013      	str	r3, [r2, #0]
 80121c2:	2301      	movs	r3, #1
 80121c4:	6123      	str	r3, [r4, #16]
 80121c6:	f8c9 3000 	str.w	r3, [r9]
 80121ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80121cc:	2762      	movs	r7, #98	; 0x62
 80121ce:	601c      	str	r4, [r3, #0]
 80121d0:	e723      	b.n	801201a <__gethex+0x12a>
 80121d2:	bf00      	nop
 80121d4:	08014ee0 	.word	0x08014ee0
 80121d8:	08014e69 	.word	0x08014e69
 80121dc:	08014e7a 	.word	0x08014e7a
 80121e0:	1e71      	subs	r1, r6, #1
 80121e2:	4620      	mov	r0, r4
 80121e4:	f000 fe5c 	bl	8012ea0 <__any_on>
 80121e8:	2800      	cmp	r0, #0
 80121ea:	d1e6      	bne.n	80121ba <__gethex+0x2ca>
 80121ec:	ee18 0a10 	vmov	r0, s16
 80121f0:	4621      	mov	r1, r4
 80121f2:	f000 f9f5 	bl	80125e0 <_Bfree>
 80121f6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80121f8:	2300      	movs	r3, #0
 80121fa:	6013      	str	r3, [r2, #0]
 80121fc:	2750      	movs	r7, #80	; 0x50
 80121fe:	e70c      	b.n	801201a <__gethex+0x12a>
 8012200:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012202:	2b00      	cmp	r3, #0
 8012204:	d1f2      	bne.n	80121ec <__gethex+0x2fc>
 8012206:	e7d8      	b.n	80121ba <__gethex+0x2ca>
 8012208:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801220a:	2b00      	cmp	r3, #0
 801220c:	d1d5      	bne.n	80121ba <__gethex+0x2ca>
 801220e:	e7ed      	b.n	80121ec <__gethex+0x2fc>
 8012210:	1e6f      	subs	r7, r5, #1
 8012212:	f1ba 0f00 	cmp.w	sl, #0
 8012216:	d131      	bne.n	801227c <__gethex+0x38c>
 8012218:	b127      	cbz	r7, 8012224 <__gethex+0x334>
 801221a:	4639      	mov	r1, r7
 801221c:	4620      	mov	r0, r4
 801221e:	f000 fe3f 	bl	8012ea0 <__any_on>
 8012222:	4682      	mov	sl, r0
 8012224:	117b      	asrs	r3, r7, #5
 8012226:	2101      	movs	r1, #1
 8012228:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801222c:	f007 071f 	and.w	r7, r7, #31
 8012230:	fa01 f707 	lsl.w	r7, r1, r7
 8012234:	421f      	tst	r7, r3
 8012236:	4629      	mov	r1, r5
 8012238:	4620      	mov	r0, r4
 801223a:	bf18      	it	ne
 801223c:	f04a 0a02 	orrne.w	sl, sl, #2
 8012240:	1b76      	subs	r6, r6, r5
 8012242:	f7ff fded 	bl	8011e20 <rshift>
 8012246:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801224a:	2702      	movs	r7, #2
 801224c:	f1ba 0f00 	cmp.w	sl, #0
 8012250:	d048      	beq.n	80122e4 <__gethex+0x3f4>
 8012252:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012256:	2b02      	cmp	r3, #2
 8012258:	d015      	beq.n	8012286 <__gethex+0x396>
 801225a:	2b03      	cmp	r3, #3
 801225c:	d017      	beq.n	801228e <__gethex+0x39e>
 801225e:	2b01      	cmp	r3, #1
 8012260:	d109      	bne.n	8012276 <__gethex+0x386>
 8012262:	f01a 0f02 	tst.w	sl, #2
 8012266:	d006      	beq.n	8012276 <__gethex+0x386>
 8012268:	f8d9 0000 	ldr.w	r0, [r9]
 801226c:	ea4a 0a00 	orr.w	sl, sl, r0
 8012270:	f01a 0f01 	tst.w	sl, #1
 8012274:	d10e      	bne.n	8012294 <__gethex+0x3a4>
 8012276:	f047 0710 	orr.w	r7, r7, #16
 801227a:	e033      	b.n	80122e4 <__gethex+0x3f4>
 801227c:	f04f 0a01 	mov.w	sl, #1
 8012280:	e7d0      	b.n	8012224 <__gethex+0x334>
 8012282:	2701      	movs	r7, #1
 8012284:	e7e2      	b.n	801224c <__gethex+0x35c>
 8012286:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012288:	f1c3 0301 	rsb	r3, r3, #1
 801228c:	9315      	str	r3, [sp, #84]	; 0x54
 801228e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012290:	2b00      	cmp	r3, #0
 8012292:	d0f0      	beq.n	8012276 <__gethex+0x386>
 8012294:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8012298:	f104 0314 	add.w	r3, r4, #20
 801229c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80122a0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80122a4:	f04f 0c00 	mov.w	ip, #0
 80122a8:	4618      	mov	r0, r3
 80122aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80122ae:	f1b2 3fff 	cmp.w	r2, #4294967295
 80122b2:	d01c      	beq.n	80122ee <__gethex+0x3fe>
 80122b4:	3201      	adds	r2, #1
 80122b6:	6002      	str	r2, [r0, #0]
 80122b8:	2f02      	cmp	r7, #2
 80122ba:	f104 0314 	add.w	r3, r4, #20
 80122be:	d13f      	bne.n	8012340 <__gethex+0x450>
 80122c0:	f8d8 2000 	ldr.w	r2, [r8]
 80122c4:	3a01      	subs	r2, #1
 80122c6:	42b2      	cmp	r2, r6
 80122c8:	d10a      	bne.n	80122e0 <__gethex+0x3f0>
 80122ca:	1171      	asrs	r1, r6, #5
 80122cc:	2201      	movs	r2, #1
 80122ce:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80122d2:	f006 061f 	and.w	r6, r6, #31
 80122d6:	fa02 f606 	lsl.w	r6, r2, r6
 80122da:	421e      	tst	r6, r3
 80122dc:	bf18      	it	ne
 80122de:	4617      	movne	r7, r2
 80122e0:	f047 0720 	orr.w	r7, r7, #32
 80122e4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80122e6:	601c      	str	r4, [r3, #0]
 80122e8:	9b04      	ldr	r3, [sp, #16]
 80122ea:	601d      	str	r5, [r3, #0]
 80122ec:	e695      	b.n	801201a <__gethex+0x12a>
 80122ee:	4299      	cmp	r1, r3
 80122f0:	f843 cc04 	str.w	ip, [r3, #-4]
 80122f4:	d8d8      	bhi.n	80122a8 <__gethex+0x3b8>
 80122f6:	68a3      	ldr	r3, [r4, #8]
 80122f8:	459b      	cmp	fp, r3
 80122fa:	db19      	blt.n	8012330 <__gethex+0x440>
 80122fc:	6861      	ldr	r1, [r4, #4]
 80122fe:	ee18 0a10 	vmov	r0, s16
 8012302:	3101      	adds	r1, #1
 8012304:	f000 f92c 	bl	8012560 <_Balloc>
 8012308:	4681      	mov	r9, r0
 801230a:	b918      	cbnz	r0, 8012314 <__gethex+0x424>
 801230c:	4b1a      	ldr	r3, [pc, #104]	; (8012378 <__gethex+0x488>)
 801230e:	4602      	mov	r2, r0
 8012310:	2184      	movs	r1, #132	; 0x84
 8012312:	e6a8      	b.n	8012066 <__gethex+0x176>
 8012314:	6922      	ldr	r2, [r4, #16]
 8012316:	3202      	adds	r2, #2
 8012318:	f104 010c 	add.w	r1, r4, #12
 801231c:	0092      	lsls	r2, r2, #2
 801231e:	300c      	adds	r0, #12
 8012320:	f7fd f87a 	bl	800f418 <memcpy>
 8012324:	4621      	mov	r1, r4
 8012326:	ee18 0a10 	vmov	r0, s16
 801232a:	f000 f959 	bl	80125e0 <_Bfree>
 801232e:	464c      	mov	r4, r9
 8012330:	6923      	ldr	r3, [r4, #16]
 8012332:	1c5a      	adds	r2, r3, #1
 8012334:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012338:	6122      	str	r2, [r4, #16]
 801233a:	2201      	movs	r2, #1
 801233c:	615a      	str	r2, [r3, #20]
 801233e:	e7bb      	b.n	80122b8 <__gethex+0x3c8>
 8012340:	6922      	ldr	r2, [r4, #16]
 8012342:	455a      	cmp	r2, fp
 8012344:	dd0b      	ble.n	801235e <__gethex+0x46e>
 8012346:	2101      	movs	r1, #1
 8012348:	4620      	mov	r0, r4
 801234a:	f7ff fd69 	bl	8011e20 <rshift>
 801234e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012352:	3501      	adds	r5, #1
 8012354:	42ab      	cmp	r3, r5
 8012356:	f6ff aed0 	blt.w	80120fa <__gethex+0x20a>
 801235a:	2701      	movs	r7, #1
 801235c:	e7c0      	b.n	80122e0 <__gethex+0x3f0>
 801235e:	f016 061f 	ands.w	r6, r6, #31
 8012362:	d0fa      	beq.n	801235a <__gethex+0x46a>
 8012364:	4453      	add	r3, sl
 8012366:	f1c6 0620 	rsb	r6, r6, #32
 801236a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801236e:	f000 f9e9 	bl	8012744 <__hi0bits>
 8012372:	42b0      	cmp	r0, r6
 8012374:	dbe7      	blt.n	8012346 <__gethex+0x456>
 8012376:	e7f0      	b.n	801235a <__gethex+0x46a>
 8012378:	08014e69 	.word	0x08014e69

0801237c <L_shift>:
 801237c:	f1c2 0208 	rsb	r2, r2, #8
 8012380:	0092      	lsls	r2, r2, #2
 8012382:	b570      	push	{r4, r5, r6, lr}
 8012384:	f1c2 0620 	rsb	r6, r2, #32
 8012388:	6843      	ldr	r3, [r0, #4]
 801238a:	6804      	ldr	r4, [r0, #0]
 801238c:	fa03 f506 	lsl.w	r5, r3, r6
 8012390:	432c      	orrs	r4, r5
 8012392:	40d3      	lsrs	r3, r2
 8012394:	6004      	str	r4, [r0, #0]
 8012396:	f840 3f04 	str.w	r3, [r0, #4]!
 801239a:	4288      	cmp	r0, r1
 801239c:	d3f4      	bcc.n	8012388 <L_shift+0xc>
 801239e:	bd70      	pop	{r4, r5, r6, pc}

080123a0 <__match>:
 80123a0:	b530      	push	{r4, r5, lr}
 80123a2:	6803      	ldr	r3, [r0, #0]
 80123a4:	3301      	adds	r3, #1
 80123a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80123aa:	b914      	cbnz	r4, 80123b2 <__match+0x12>
 80123ac:	6003      	str	r3, [r0, #0]
 80123ae:	2001      	movs	r0, #1
 80123b0:	bd30      	pop	{r4, r5, pc}
 80123b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80123b6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80123ba:	2d19      	cmp	r5, #25
 80123bc:	bf98      	it	ls
 80123be:	3220      	addls	r2, #32
 80123c0:	42a2      	cmp	r2, r4
 80123c2:	d0f0      	beq.n	80123a6 <__match+0x6>
 80123c4:	2000      	movs	r0, #0
 80123c6:	e7f3      	b.n	80123b0 <__match+0x10>

080123c8 <__hexnan>:
 80123c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123cc:	680b      	ldr	r3, [r1, #0]
 80123ce:	115e      	asrs	r6, r3, #5
 80123d0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80123d4:	f013 031f 	ands.w	r3, r3, #31
 80123d8:	b087      	sub	sp, #28
 80123da:	bf18      	it	ne
 80123dc:	3604      	addne	r6, #4
 80123de:	2500      	movs	r5, #0
 80123e0:	1f37      	subs	r7, r6, #4
 80123e2:	4690      	mov	r8, r2
 80123e4:	6802      	ldr	r2, [r0, #0]
 80123e6:	9301      	str	r3, [sp, #4]
 80123e8:	4682      	mov	sl, r0
 80123ea:	f846 5c04 	str.w	r5, [r6, #-4]
 80123ee:	46b9      	mov	r9, r7
 80123f0:	463c      	mov	r4, r7
 80123f2:	9502      	str	r5, [sp, #8]
 80123f4:	46ab      	mov	fp, r5
 80123f6:	7851      	ldrb	r1, [r2, #1]
 80123f8:	1c53      	adds	r3, r2, #1
 80123fa:	9303      	str	r3, [sp, #12]
 80123fc:	b341      	cbz	r1, 8012450 <__hexnan+0x88>
 80123fe:	4608      	mov	r0, r1
 8012400:	9205      	str	r2, [sp, #20]
 8012402:	9104      	str	r1, [sp, #16]
 8012404:	f7ff fd5e 	bl	8011ec4 <__hexdig_fun>
 8012408:	2800      	cmp	r0, #0
 801240a:	d14f      	bne.n	80124ac <__hexnan+0xe4>
 801240c:	9904      	ldr	r1, [sp, #16]
 801240e:	9a05      	ldr	r2, [sp, #20]
 8012410:	2920      	cmp	r1, #32
 8012412:	d818      	bhi.n	8012446 <__hexnan+0x7e>
 8012414:	9b02      	ldr	r3, [sp, #8]
 8012416:	459b      	cmp	fp, r3
 8012418:	dd13      	ble.n	8012442 <__hexnan+0x7a>
 801241a:	454c      	cmp	r4, r9
 801241c:	d206      	bcs.n	801242c <__hexnan+0x64>
 801241e:	2d07      	cmp	r5, #7
 8012420:	dc04      	bgt.n	801242c <__hexnan+0x64>
 8012422:	462a      	mov	r2, r5
 8012424:	4649      	mov	r1, r9
 8012426:	4620      	mov	r0, r4
 8012428:	f7ff ffa8 	bl	801237c <L_shift>
 801242c:	4544      	cmp	r4, r8
 801242e:	d950      	bls.n	80124d2 <__hexnan+0x10a>
 8012430:	2300      	movs	r3, #0
 8012432:	f1a4 0904 	sub.w	r9, r4, #4
 8012436:	f844 3c04 	str.w	r3, [r4, #-4]
 801243a:	f8cd b008 	str.w	fp, [sp, #8]
 801243e:	464c      	mov	r4, r9
 8012440:	461d      	mov	r5, r3
 8012442:	9a03      	ldr	r2, [sp, #12]
 8012444:	e7d7      	b.n	80123f6 <__hexnan+0x2e>
 8012446:	2929      	cmp	r1, #41	; 0x29
 8012448:	d156      	bne.n	80124f8 <__hexnan+0x130>
 801244a:	3202      	adds	r2, #2
 801244c:	f8ca 2000 	str.w	r2, [sl]
 8012450:	f1bb 0f00 	cmp.w	fp, #0
 8012454:	d050      	beq.n	80124f8 <__hexnan+0x130>
 8012456:	454c      	cmp	r4, r9
 8012458:	d206      	bcs.n	8012468 <__hexnan+0xa0>
 801245a:	2d07      	cmp	r5, #7
 801245c:	dc04      	bgt.n	8012468 <__hexnan+0xa0>
 801245e:	462a      	mov	r2, r5
 8012460:	4649      	mov	r1, r9
 8012462:	4620      	mov	r0, r4
 8012464:	f7ff ff8a 	bl	801237c <L_shift>
 8012468:	4544      	cmp	r4, r8
 801246a:	d934      	bls.n	80124d6 <__hexnan+0x10e>
 801246c:	f1a8 0204 	sub.w	r2, r8, #4
 8012470:	4623      	mov	r3, r4
 8012472:	f853 1b04 	ldr.w	r1, [r3], #4
 8012476:	f842 1f04 	str.w	r1, [r2, #4]!
 801247a:	429f      	cmp	r7, r3
 801247c:	d2f9      	bcs.n	8012472 <__hexnan+0xaa>
 801247e:	1b3b      	subs	r3, r7, r4
 8012480:	f023 0303 	bic.w	r3, r3, #3
 8012484:	3304      	adds	r3, #4
 8012486:	3401      	adds	r4, #1
 8012488:	3e03      	subs	r6, #3
 801248a:	42b4      	cmp	r4, r6
 801248c:	bf88      	it	hi
 801248e:	2304      	movhi	r3, #4
 8012490:	4443      	add	r3, r8
 8012492:	2200      	movs	r2, #0
 8012494:	f843 2b04 	str.w	r2, [r3], #4
 8012498:	429f      	cmp	r7, r3
 801249a:	d2fb      	bcs.n	8012494 <__hexnan+0xcc>
 801249c:	683b      	ldr	r3, [r7, #0]
 801249e:	b91b      	cbnz	r3, 80124a8 <__hexnan+0xe0>
 80124a0:	4547      	cmp	r7, r8
 80124a2:	d127      	bne.n	80124f4 <__hexnan+0x12c>
 80124a4:	2301      	movs	r3, #1
 80124a6:	603b      	str	r3, [r7, #0]
 80124a8:	2005      	movs	r0, #5
 80124aa:	e026      	b.n	80124fa <__hexnan+0x132>
 80124ac:	3501      	adds	r5, #1
 80124ae:	2d08      	cmp	r5, #8
 80124b0:	f10b 0b01 	add.w	fp, fp, #1
 80124b4:	dd06      	ble.n	80124c4 <__hexnan+0xfc>
 80124b6:	4544      	cmp	r4, r8
 80124b8:	d9c3      	bls.n	8012442 <__hexnan+0x7a>
 80124ba:	2300      	movs	r3, #0
 80124bc:	f844 3c04 	str.w	r3, [r4, #-4]
 80124c0:	2501      	movs	r5, #1
 80124c2:	3c04      	subs	r4, #4
 80124c4:	6822      	ldr	r2, [r4, #0]
 80124c6:	f000 000f 	and.w	r0, r0, #15
 80124ca:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80124ce:	6022      	str	r2, [r4, #0]
 80124d0:	e7b7      	b.n	8012442 <__hexnan+0x7a>
 80124d2:	2508      	movs	r5, #8
 80124d4:	e7b5      	b.n	8012442 <__hexnan+0x7a>
 80124d6:	9b01      	ldr	r3, [sp, #4]
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d0df      	beq.n	801249c <__hexnan+0xd4>
 80124dc:	f04f 32ff 	mov.w	r2, #4294967295
 80124e0:	f1c3 0320 	rsb	r3, r3, #32
 80124e4:	fa22 f303 	lsr.w	r3, r2, r3
 80124e8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80124ec:	401a      	ands	r2, r3
 80124ee:	f846 2c04 	str.w	r2, [r6, #-4]
 80124f2:	e7d3      	b.n	801249c <__hexnan+0xd4>
 80124f4:	3f04      	subs	r7, #4
 80124f6:	e7d1      	b.n	801249c <__hexnan+0xd4>
 80124f8:	2004      	movs	r0, #4
 80124fa:	b007      	add	sp, #28
 80124fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012500 <_localeconv_r>:
 8012500:	4800      	ldr	r0, [pc, #0]	; (8012504 <_localeconv_r+0x4>)
 8012502:	4770      	bx	lr
 8012504:	20000444 	.word	0x20000444

08012508 <_lseek_r>:
 8012508:	b538      	push	{r3, r4, r5, lr}
 801250a:	4d07      	ldr	r5, [pc, #28]	; (8012528 <_lseek_r+0x20>)
 801250c:	4604      	mov	r4, r0
 801250e:	4608      	mov	r0, r1
 8012510:	4611      	mov	r1, r2
 8012512:	2200      	movs	r2, #0
 8012514:	602a      	str	r2, [r5, #0]
 8012516:	461a      	mov	r2, r3
 8012518:	f7ef fdde 	bl	80020d8 <_lseek>
 801251c:	1c43      	adds	r3, r0, #1
 801251e:	d102      	bne.n	8012526 <_lseek_r+0x1e>
 8012520:	682b      	ldr	r3, [r5, #0]
 8012522:	b103      	cbz	r3, 8012526 <_lseek_r+0x1e>
 8012524:	6023      	str	r3, [r4, #0]
 8012526:	bd38      	pop	{r3, r4, r5, pc}
 8012528:	20005624 	.word	0x20005624

0801252c <malloc>:
 801252c:	4b02      	ldr	r3, [pc, #8]	; (8012538 <malloc+0xc>)
 801252e:	4601      	mov	r1, r0
 8012530:	6818      	ldr	r0, [r3, #0]
 8012532:	f000 bd59 	b.w	8012fe8 <_malloc_r>
 8012536:	bf00      	nop
 8012538:	200002ec 	.word	0x200002ec

0801253c <__ascii_mbtowc>:
 801253c:	b082      	sub	sp, #8
 801253e:	b901      	cbnz	r1, 8012542 <__ascii_mbtowc+0x6>
 8012540:	a901      	add	r1, sp, #4
 8012542:	b142      	cbz	r2, 8012556 <__ascii_mbtowc+0x1a>
 8012544:	b14b      	cbz	r3, 801255a <__ascii_mbtowc+0x1e>
 8012546:	7813      	ldrb	r3, [r2, #0]
 8012548:	600b      	str	r3, [r1, #0]
 801254a:	7812      	ldrb	r2, [r2, #0]
 801254c:	1e10      	subs	r0, r2, #0
 801254e:	bf18      	it	ne
 8012550:	2001      	movne	r0, #1
 8012552:	b002      	add	sp, #8
 8012554:	4770      	bx	lr
 8012556:	4610      	mov	r0, r2
 8012558:	e7fb      	b.n	8012552 <__ascii_mbtowc+0x16>
 801255a:	f06f 0001 	mvn.w	r0, #1
 801255e:	e7f8      	b.n	8012552 <__ascii_mbtowc+0x16>

08012560 <_Balloc>:
 8012560:	b570      	push	{r4, r5, r6, lr}
 8012562:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012564:	4604      	mov	r4, r0
 8012566:	460d      	mov	r5, r1
 8012568:	b976      	cbnz	r6, 8012588 <_Balloc+0x28>
 801256a:	2010      	movs	r0, #16
 801256c:	f7ff ffde 	bl	801252c <malloc>
 8012570:	4602      	mov	r2, r0
 8012572:	6260      	str	r0, [r4, #36]	; 0x24
 8012574:	b920      	cbnz	r0, 8012580 <_Balloc+0x20>
 8012576:	4b18      	ldr	r3, [pc, #96]	; (80125d8 <_Balloc+0x78>)
 8012578:	4818      	ldr	r0, [pc, #96]	; (80125dc <_Balloc+0x7c>)
 801257a:	2166      	movs	r1, #102	; 0x66
 801257c:	f7fe fd96 	bl	80110ac <__assert_func>
 8012580:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012584:	6006      	str	r6, [r0, #0]
 8012586:	60c6      	str	r6, [r0, #12]
 8012588:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801258a:	68f3      	ldr	r3, [r6, #12]
 801258c:	b183      	cbz	r3, 80125b0 <_Balloc+0x50>
 801258e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012590:	68db      	ldr	r3, [r3, #12]
 8012592:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012596:	b9b8      	cbnz	r0, 80125c8 <_Balloc+0x68>
 8012598:	2101      	movs	r1, #1
 801259a:	fa01 f605 	lsl.w	r6, r1, r5
 801259e:	1d72      	adds	r2, r6, #5
 80125a0:	0092      	lsls	r2, r2, #2
 80125a2:	4620      	mov	r0, r4
 80125a4:	f000 fc9d 	bl	8012ee2 <_calloc_r>
 80125a8:	b160      	cbz	r0, 80125c4 <_Balloc+0x64>
 80125aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80125ae:	e00e      	b.n	80125ce <_Balloc+0x6e>
 80125b0:	2221      	movs	r2, #33	; 0x21
 80125b2:	2104      	movs	r1, #4
 80125b4:	4620      	mov	r0, r4
 80125b6:	f000 fc94 	bl	8012ee2 <_calloc_r>
 80125ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80125bc:	60f0      	str	r0, [r6, #12]
 80125be:	68db      	ldr	r3, [r3, #12]
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d1e4      	bne.n	801258e <_Balloc+0x2e>
 80125c4:	2000      	movs	r0, #0
 80125c6:	bd70      	pop	{r4, r5, r6, pc}
 80125c8:	6802      	ldr	r2, [r0, #0]
 80125ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80125ce:	2300      	movs	r3, #0
 80125d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80125d4:	e7f7      	b.n	80125c6 <_Balloc+0x66>
 80125d6:	bf00      	nop
 80125d8:	08014c50 	.word	0x08014c50
 80125dc:	08014ef4 	.word	0x08014ef4

080125e0 <_Bfree>:
 80125e0:	b570      	push	{r4, r5, r6, lr}
 80125e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80125e4:	4605      	mov	r5, r0
 80125e6:	460c      	mov	r4, r1
 80125e8:	b976      	cbnz	r6, 8012608 <_Bfree+0x28>
 80125ea:	2010      	movs	r0, #16
 80125ec:	f7ff ff9e 	bl	801252c <malloc>
 80125f0:	4602      	mov	r2, r0
 80125f2:	6268      	str	r0, [r5, #36]	; 0x24
 80125f4:	b920      	cbnz	r0, 8012600 <_Bfree+0x20>
 80125f6:	4b09      	ldr	r3, [pc, #36]	; (801261c <_Bfree+0x3c>)
 80125f8:	4809      	ldr	r0, [pc, #36]	; (8012620 <_Bfree+0x40>)
 80125fa:	218a      	movs	r1, #138	; 0x8a
 80125fc:	f7fe fd56 	bl	80110ac <__assert_func>
 8012600:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012604:	6006      	str	r6, [r0, #0]
 8012606:	60c6      	str	r6, [r0, #12]
 8012608:	b13c      	cbz	r4, 801261a <_Bfree+0x3a>
 801260a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801260c:	6862      	ldr	r2, [r4, #4]
 801260e:	68db      	ldr	r3, [r3, #12]
 8012610:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012614:	6021      	str	r1, [r4, #0]
 8012616:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801261a:	bd70      	pop	{r4, r5, r6, pc}
 801261c:	08014c50 	.word	0x08014c50
 8012620:	08014ef4 	.word	0x08014ef4

08012624 <__multadd>:
 8012624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012628:	690d      	ldr	r5, [r1, #16]
 801262a:	4607      	mov	r7, r0
 801262c:	460c      	mov	r4, r1
 801262e:	461e      	mov	r6, r3
 8012630:	f101 0c14 	add.w	ip, r1, #20
 8012634:	2000      	movs	r0, #0
 8012636:	f8dc 3000 	ldr.w	r3, [ip]
 801263a:	b299      	uxth	r1, r3
 801263c:	fb02 6101 	mla	r1, r2, r1, r6
 8012640:	0c1e      	lsrs	r6, r3, #16
 8012642:	0c0b      	lsrs	r3, r1, #16
 8012644:	fb02 3306 	mla	r3, r2, r6, r3
 8012648:	b289      	uxth	r1, r1
 801264a:	3001      	adds	r0, #1
 801264c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012650:	4285      	cmp	r5, r0
 8012652:	f84c 1b04 	str.w	r1, [ip], #4
 8012656:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801265a:	dcec      	bgt.n	8012636 <__multadd+0x12>
 801265c:	b30e      	cbz	r6, 80126a2 <__multadd+0x7e>
 801265e:	68a3      	ldr	r3, [r4, #8]
 8012660:	42ab      	cmp	r3, r5
 8012662:	dc19      	bgt.n	8012698 <__multadd+0x74>
 8012664:	6861      	ldr	r1, [r4, #4]
 8012666:	4638      	mov	r0, r7
 8012668:	3101      	adds	r1, #1
 801266a:	f7ff ff79 	bl	8012560 <_Balloc>
 801266e:	4680      	mov	r8, r0
 8012670:	b928      	cbnz	r0, 801267e <__multadd+0x5a>
 8012672:	4602      	mov	r2, r0
 8012674:	4b0c      	ldr	r3, [pc, #48]	; (80126a8 <__multadd+0x84>)
 8012676:	480d      	ldr	r0, [pc, #52]	; (80126ac <__multadd+0x88>)
 8012678:	21b5      	movs	r1, #181	; 0xb5
 801267a:	f7fe fd17 	bl	80110ac <__assert_func>
 801267e:	6922      	ldr	r2, [r4, #16]
 8012680:	3202      	adds	r2, #2
 8012682:	f104 010c 	add.w	r1, r4, #12
 8012686:	0092      	lsls	r2, r2, #2
 8012688:	300c      	adds	r0, #12
 801268a:	f7fc fec5 	bl	800f418 <memcpy>
 801268e:	4621      	mov	r1, r4
 8012690:	4638      	mov	r0, r7
 8012692:	f7ff ffa5 	bl	80125e0 <_Bfree>
 8012696:	4644      	mov	r4, r8
 8012698:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801269c:	3501      	adds	r5, #1
 801269e:	615e      	str	r6, [r3, #20]
 80126a0:	6125      	str	r5, [r4, #16]
 80126a2:	4620      	mov	r0, r4
 80126a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126a8:	08014e69 	.word	0x08014e69
 80126ac:	08014ef4 	.word	0x08014ef4

080126b0 <__s2b>:
 80126b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80126b4:	460c      	mov	r4, r1
 80126b6:	4615      	mov	r5, r2
 80126b8:	461f      	mov	r7, r3
 80126ba:	2209      	movs	r2, #9
 80126bc:	3308      	adds	r3, #8
 80126be:	4606      	mov	r6, r0
 80126c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80126c4:	2100      	movs	r1, #0
 80126c6:	2201      	movs	r2, #1
 80126c8:	429a      	cmp	r2, r3
 80126ca:	db09      	blt.n	80126e0 <__s2b+0x30>
 80126cc:	4630      	mov	r0, r6
 80126ce:	f7ff ff47 	bl	8012560 <_Balloc>
 80126d2:	b940      	cbnz	r0, 80126e6 <__s2b+0x36>
 80126d4:	4602      	mov	r2, r0
 80126d6:	4b19      	ldr	r3, [pc, #100]	; (801273c <__s2b+0x8c>)
 80126d8:	4819      	ldr	r0, [pc, #100]	; (8012740 <__s2b+0x90>)
 80126da:	21ce      	movs	r1, #206	; 0xce
 80126dc:	f7fe fce6 	bl	80110ac <__assert_func>
 80126e0:	0052      	lsls	r2, r2, #1
 80126e2:	3101      	adds	r1, #1
 80126e4:	e7f0      	b.n	80126c8 <__s2b+0x18>
 80126e6:	9b08      	ldr	r3, [sp, #32]
 80126e8:	6143      	str	r3, [r0, #20]
 80126ea:	2d09      	cmp	r5, #9
 80126ec:	f04f 0301 	mov.w	r3, #1
 80126f0:	6103      	str	r3, [r0, #16]
 80126f2:	dd16      	ble.n	8012722 <__s2b+0x72>
 80126f4:	f104 0909 	add.w	r9, r4, #9
 80126f8:	46c8      	mov	r8, r9
 80126fa:	442c      	add	r4, r5
 80126fc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012700:	4601      	mov	r1, r0
 8012702:	3b30      	subs	r3, #48	; 0x30
 8012704:	220a      	movs	r2, #10
 8012706:	4630      	mov	r0, r6
 8012708:	f7ff ff8c 	bl	8012624 <__multadd>
 801270c:	45a0      	cmp	r8, r4
 801270e:	d1f5      	bne.n	80126fc <__s2b+0x4c>
 8012710:	f1a5 0408 	sub.w	r4, r5, #8
 8012714:	444c      	add	r4, r9
 8012716:	1b2d      	subs	r5, r5, r4
 8012718:	1963      	adds	r3, r4, r5
 801271a:	42bb      	cmp	r3, r7
 801271c:	db04      	blt.n	8012728 <__s2b+0x78>
 801271e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012722:	340a      	adds	r4, #10
 8012724:	2509      	movs	r5, #9
 8012726:	e7f6      	b.n	8012716 <__s2b+0x66>
 8012728:	f814 3b01 	ldrb.w	r3, [r4], #1
 801272c:	4601      	mov	r1, r0
 801272e:	3b30      	subs	r3, #48	; 0x30
 8012730:	220a      	movs	r2, #10
 8012732:	4630      	mov	r0, r6
 8012734:	f7ff ff76 	bl	8012624 <__multadd>
 8012738:	e7ee      	b.n	8012718 <__s2b+0x68>
 801273a:	bf00      	nop
 801273c:	08014e69 	.word	0x08014e69
 8012740:	08014ef4 	.word	0x08014ef4

08012744 <__hi0bits>:
 8012744:	0c03      	lsrs	r3, r0, #16
 8012746:	041b      	lsls	r3, r3, #16
 8012748:	b9d3      	cbnz	r3, 8012780 <__hi0bits+0x3c>
 801274a:	0400      	lsls	r0, r0, #16
 801274c:	2310      	movs	r3, #16
 801274e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012752:	bf04      	itt	eq
 8012754:	0200      	lsleq	r0, r0, #8
 8012756:	3308      	addeq	r3, #8
 8012758:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801275c:	bf04      	itt	eq
 801275e:	0100      	lsleq	r0, r0, #4
 8012760:	3304      	addeq	r3, #4
 8012762:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012766:	bf04      	itt	eq
 8012768:	0080      	lsleq	r0, r0, #2
 801276a:	3302      	addeq	r3, #2
 801276c:	2800      	cmp	r0, #0
 801276e:	db05      	blt.n	801277c <__hi0bits+0x38>
 8012770:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012774:	f103 0301 	add.w	r3, r3, #1
 8012778:	bf08      	it	eq
 801277a:	2320      	moveq	r3, #32
 801277c:	4618      	mov	r0, r3
 801277e:	4770      	bx	lr
 8012780:	2300      	movs	r3, #0
 8012782:	e7e4      	b.n	801274e <__hi0bits+0xa>

08012784 <__lo0bits>:
 8012784:	6803      	ldr	r3, [r0, #0]
 8012786:	f013 0207 	ands.w	r2, r3, #7
 801278a:	4601      	mov	r1, r0
 801278c:	d00b      	beq.n	80127a6 <__lo0bits+0x22>
 801278e:	07da      	lsls	r2, r3, #31
 8012790:	d423      	bmi.n	80127da <__lo0bits+0x56>
 8012792:	0798      	lsls	r0, r3, #30
 8012794:	bf49      	itett	mi
 8012796:	085b      	lsrmi	r3, r3, #1
 8012798:	089b      	lsrpl	r3, r3, #2
 801279a:	2001      	movmi	r0, #1
 801279c:	600b      	strmi	r3, [r1, #0]
 801279e:	bf5c      	itt	pl
 80127a0:	600b      	strpl	r3, [r1, #0]
 80127a2:	2002      	movpl	r0, #2
 80127a4:	4770      	bx	lr
 80127a6:	b298      	uxth	r0, r3
 80127a8:	b9a8      	cbnz	r0, 80127d6 <__lo0bits+0x52>
 80127aa:	0c1b      	lsrs	r3, r3, #16
 80127ac:	2010      	movs	r0, #16
 80127ae:	b2da      	uxtb	r2, r3
 80127b0:	b90a      	cbnz	r2, 80127b6 <__lo0bits+0x32>
 80127b2:	3008      	adds	r0, #8
 80127b4:	0a1b      	lsrs	r3, r3, #8
 80127b6:	071a      	lsls	r2, r3, #28
 80127b8:	bf04      	itt	eq
 80127ba:	091b      	lsreq	r3, r3, #4
 80127bc:	3004      	addeq	r0, #4
 80127be:	079a      	lsls	r2, r3, #30
 80127c0:	bf04      	itt	eq
 80127c2:	089b      	lsreq	r3, r3, #2
 80127c4:	3002      	addeq	r0, #2
 80127c6:	07da      	lsls	r2, r3, #31
 80127c8:	d403      	bmi.n	80127d2 <__lo0bits+0x4e>
 80127ca:	085b      	lsrs	r3, r3, #1
 80127cc:	f100 0001 	add.w	r0, r0, #1
 80127d0:	d005      	beq.n	80127de <__lo0bits+0x5a>
 80127d2:	600b      	str	r3, [r1, #0]
 80127d4:	4770      	bx	lr
 80127d6:	4610      	mov	r0, r2
 80127d8:	e7e9      	b.n	80127ae <__lo0bits+0x2a>
 80127da:	2000      	movs	r0, #0
 80127dc:	4770      	bx	lr
 80127de:	2020      	movs	r0, #32
 80127e0:	4770      	bx	lr
	...

080127e4 <__i2b>:
 80127e4:	b510      	push	{r4, lr}
 80127e6:	460c      	mov	r4, r1
 80127e8:	2101      	movs	r1, #1
 80127ea:	f7ff feb9 	bl	8012560 <_Balloc>
 80127ee:	4602      	mov	r2, r0
 80127f0:	b928      	cbnz	r0, 80127fe <__i2b+0x1a>
 80127f2:	4b05      	ldr	r3, [pc, #20]	; (8012808 <__i2b+0x24>)
 80127f4:	4805      	ldr	r0, [pc, #20]	; (801280c <__i2b+0x28>)
 80127f6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80127fa:	f7fe fc57 	bl	80110ac <__assert_func>
 80127fe:	2301      	movs	r3, #1
 8012800:	6144      	str	r4, [r0, #20]
 8012802:	6103      	str	r3, [r0, #16]
 8012804:	bd10      	pop	{r4, pc}
 8012806:	bf00      	nop
 8012808:	08014e69 	.word	0x08014e69
 801280c:	08014ef4 	.word	0x08014ef4

08012810 <__multiply>:
 8012810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012814:	4691      	mov	r9, r2
 8012816:	690a      	ldr	r2, [r1, #16]
 8012818:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801281c:	429a      	cmp	r2, r3
 801281e:	bfb8      	it	lt
 8012820:	460b      	movlt	r3, r1
 8012822:	460c      	mov	r4, r1
 8012824:	bfbc      	itt	lt
 8012826:	464c      	movlt	r4, r9
 8012828:	4699      	movlt	r9, r3
 801282a:	6927      	ldr	r7, [r4, #16]
 801282c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012830:	68a3      	ldr	r3, [r4, #8]
 8012832:	6861      	ldr	r1, [r4, #4]
 8012834:	eb07 060a 	add.w	r6, r7, sl
 8012838:	42b3      	cmp	r3, r6
 801283a:	b085      	sub	sp, #20
 801283c:	bfb8      	it	lt
 801283e:	3101      	addlt	r1, #1
 8012840:	f7ff fe8e 	bl	8012560 <_Balloc>
 8012844:	b930      	cbnz	r0, 8012854 <__multiply+0x44>
 8012846:	4602      	mov	r2, r0
 8012848:	4b44      	ldr	r3, [pc, #272]	; (801295c <__multiply+0x14c>)
 801284a:	4845      	ldr	r0, [pc, #276]	; (8012960 <__multiply+0x150>)
 801284c:	f240 115d 	movw	r1, #349	; 0x15d
 8012850:	f7fe fc2c 	bl	80110ac <__assert_func>
 8012854:	f100 0514 	add.w	r5, r0, #20
 8012858:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801285c:	462b      	mov	r3, r5
 801285e:	2200      	movs	r2, #0
 8012860:	4543      	cmp	r3, r8
 8012862:	d321      	bcc.n	80128a8 <__multiply+0x98>
 8012864:	f104 0314 	add.w	r3, r4, #20
 8012868:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801286c:	f109 0314 	add.w	r3, r9, #20
 8012870:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012874:	9202      	str	r2, [sp, #8]
 8012876:	1b3a      	subs	r2, r7, r4
 8012878:	3a15      	subs	r2, #21
 801287a:	f022 0203 	bic.w	r2, r2, #3
 801287e:	3204      	adds	r2, #4
 8012880:	f104 0115 	add.w	r1, r4, #21
 8012884:	428f      	cmp	r7, r1
 8012886:	bf38      	it	cc
 8012888:	2204      	movcc	r2, #4
 801288a:	9201      	str	r2, [sp, #4]
 801288c:	9a02      	ldr	r2, [sp, #8]
 801288e:	9303      	str	r3, [sp, #12]
 8012890:	429a      	cmp	r2, r3
 8012892:	d80c      	bhi.n	80128ae <__multiply+0x9e>
 8012894:	2e00      	cmp	r6, #0
 8012896:	dd03      	ble.n	80128a0 <__multiply+0x90>
 8012898:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801289c:	2b00      	cmp	r3, #0
 801289e:	d05a      	beq.n	8012956 <__multiply+0x146>
 80128a0:	6106      	str	r6, [r0, #16]
 80128a2:	b005      	add	sp, #20
 80128a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128a8:	f843 2b04 	str.w	r2, [r3], #4
 80128ac:	e7d8      	b.n	8012860 <__multiply+0x50>
 80128ae:	f8b3 a000 	ldrh.w	sl, [r3]
 80128b2:	f1ba 0f00 	cmp.w	sl, #0
 80128b6:	d024      	beq.n	8012902 <__multiply+0xf2>
 80128b8:	f104 0e14 	add.w	lr, r4, #20
 80128bc:	46a9      	mov	r9, r5
 80128be:	f04f 0c00 	mov.w	ip, #0
 80128c2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80128c6:	f8d9 1000 	ldr.w	r1, [r9]
 80128ca:	fa1f fb82 	uxth.w	fp, r2
 80128ce:	b289      	uxth	r1, r1
 80128d0:	fb0a 110b 	mla	r1, sl, fp, r1
 80128d4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80128d8:	f8d9 2000 	ldr.w	r2, [r9]
 80128dc:	4461      	add	r1, ip
 80128de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80128e2:	fb0a c20b 	mla	r2, sl, fp, ip
 80128e6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80128ea:	b289      	uxth	r1, r1
 80128ec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80128f0:	4577      	cmp	r7, lr
 80128f2:	f849 1b04 	str.w	r1, [r9], #4
 80128f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80128fa:	d8e2      	bhi.n	80128c2 <__multiply+0xb2>
 80128fc:	9a01      	ldr	r2, [sp, #4]
 80128fe:	f845 c002 	str.w	ip, [r5, r2]
 8012902:	9a03      	ldr	r2, [sp, #12]
 8012904:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012908:	3304      	adds	r3, #4
 801290a:	f1b9 0f00 	cmp.w	r9, #0
 801290e:	d020      	beq.n	8012952 <__multiply+0x142>
 8012910:	6829      	ldr	r1, [r5, #0]
 8012912:	f104 0c14 	add.w	ip, r4, #20
 8012916:	46ae      	mov	lr, r5
 8012918:	f04f 0a00 	mov.w	sl, #0
 801291c:	f8bc b000 	ldrh.w	fp, [ip]
 8012920:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012924:	fb09 220b 	mla	r2, r9, fp, r2
 8012928:	4492      	add	sl, r2
 801292a:	b289      	uxth	r1, r1
 801292c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8012930:	f84e 1b04 	str.w	r1, [lr], #4
 8012934:	f85c 2b04 	ldr.w	r2, [ip], #4
 8012938:	f8be 1000 	ldrh.w	r1, [lr]
 801293c:	0c12      	lsrs	r2, r2, #16
 801293e:	fb09 1102 	mla	r1, r9, r2, r1
 8012942:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8012946:	4567      	cmp	r7, ip
 8012948:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801294c:	d8e6      	bhi.n	801291c <__multiply+0x10c>
 801294e:	9a01      	ldr	r2, [sp, #4]
 8012950:	50a9      	str	r1, [r5, r2]
 8012952:	3504      	adds	r5, #4
 8012954:	e79a      	b.n	801288c <__multiply+0x7c>
 8012956:	3e01      	subs	r6, #1
 8012958:	e79c      	b.n	8012894 <__multiply+0x84>
 801295a:	bf00      	nop
 801295c:	08014e69 	.word	0x08014e69
 8012960:	08014ef4 	.word	0x08014ef4

08012964 <__pow5mult>:
 8012964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012968:	4615      	mov	r5, r2
 801296a:	f012 0203 	ands.w	r2, r2, #3
 801296e:	4606      	mov	r6, r0
 8012970:	460f      	mov	r7, r1
 8012972:	d007      	beq.n	8012984 <__pow5mult+0x20>
 8012974:	4c25      	ldr	r4, [pc, #148]	; (8012a0c <__pow5mult+0xa8>)
 8012976:	3a01      	subs	r2, #1
 8012978:	2300      	movs	r3, #0
 801297a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801297e:	f7ff fe51 	bl	8012624 <__multadd>
 8012982:	4607      	mov	r7, r0
 8012984:	10ad      	asrs	r5, r5, #2
 8012986:	d03d      	beq.n	8012a04 <__pow5mult+0xa0>
 8012988:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801298a:	b97c      	cbnz	r4, 80129ac <__pow5mult+0x48>
 801298c:	2010      	movs	r0, #16
 801298e:	f7ff fdcd 	bl	801252c <malloc>
 8012992:	4602      	mov	r2, r0
 8012994:	6270      	str	r0, [r6, #36]	; 0x24
 8012996:	b928      	cbnz	r0, 80129a4 <__pow5mult+0x40>
 8012998:	4b1d      	ldr	r3, [pc, #116]	; (8012a10 <__pow5mult+0xac>)
 801299a:	481e      	ldr	r0, [pc, #120]	; (8012a14 <__pow5mult+0xb0>)
 801299c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80129a0:	f7fe fb84 	bl	80110ac <__assert_func>
 80129a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80129a8:	6004      	str	r4, [r0, #0]
 80129aa:	60c4      	str	r4, [r0, #12]
 80129ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80129b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80129b4:	b94c      	cbnz	r4, 80129ca <__pow5mult+0x66>
 80129b6:	f240 2171 	movw	r1, #625	; 0x271
 80129ba:	4630      	mov	r0, r6
 80129bc:	f7ff ff12 	bl	80127e4 <__i2b>
 80129c0:	2300      	movs	r3, #0
 80129c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80129c6:	4604      	mov	r4, r0
 80129c8:	6003      	str	r3, [r0, #0]
 80129ca:	f04f 0900 	mov.w	r9, #0
 80129ce:	07eb      	lsls	r3, r5, #31
 80129d0:	d50a      	bpl.n	80129e8 <__pow5mult+0x84>
 80129d2:	4639      	mov	r1, r7
 80129d4:	4622      	mov	r2, r4
 80129d6:	4630      	mov	r0, r6
 80129d8:	f7ff ff1a 	bl	8012810 <__multiply>
 80129dc:	4639      	mov	r1, r7
 80129de:	4680      	mov	r8, r0
 80129e0:	4630      	mov	r0, r6
 80129e2:	f7ff fdfd 	bl	80125e0 <_Bfree>
 80129e6:	4647      	mov	r7, r8
 80129e8:	106d      	asrs	r5, r5, #1
 80129ea:	d00b      	beq.n	8012a04 <__pow5mult+0xa0>
 80129ec:	6820      	ldr	r0, [r4, #0]
 80129ee:	b938      	cbnz	r0, 8012a00 <__pow5mult+0x9c>
 80129f0:	4622      	mov	r2, r4
 80129f2:	4621      	mov	r1, r4
 80129f4:	4630      	mov	r0, r6
 80129f6:	f7ff ff0b 	bl	8012810 <__multiply>
 80129fa:	6020      	str	r0, [r4, #0]
 80129fc:	f8c0 9000 	str.w	r9, [r0]
 8012a00:	4604      	mov	r4, r0
 8012a02:	e7e4      	b.n	80129ce <__pow5mult+0x6a>
 8012a04:	4638      	mov	r0, r7
 8012a06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012a0a:	bf00      	nop
 8012a0c:	08015040 	.word	0x08015040
 8012a10:	08014c50 	.word	0x08014c50
 8012a14:	08014ef4 	.word	0x08014ef4

08012a18 <__lshift>:
 8012a18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a1c:	460c      	mov	r4, r1
 8012a1e:	6849      	ldr	r1, [r1, #4]
 8012a20:	6923      	ldr	r3, [r4, #16]
 8012a22:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012a26:	68a3      	ldr	r3, [r4, #8]
 8012a28:	4607      	mov	r7, r0
 8012a2a:	4691      	mov	r9, r2
 8012a2c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012a30:	f108 0601 	add.w	r6, r8, #1
 8012a34:	42b3      	cmp	r3, r6
 8012a36:	db0b      	blt.n	8012a50 <__lshift+0x38>
 8012a38:	4638      	mov	r0, r7
 8012a3a:	f7ff fd91 	bl	8012560 <_Balloc>
 8012a3e:	4605      	mov	r5, r0
 8012a40:	b948      	cbnz	r0, 8012a56 <__lshift+0x3e>
 8012a42:	4602      	mov	r2, r0
 8012a44:	4b2a      	ldr	r3, [pc, #168]	; (8012af0 <__lshift+0xd8>)
 8012a46:	482b      	ldr	r0, [pc, #172]	; (8012af4 <__lshift+0xdc>)
 8012a48:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012a4c:	f7fe fb2e 	bl	80110ac <__assert_func>
 8012a50:	3101      	adds	r1, #1
 8012a52:	005b      	lsls	r3, r3, #1
 8012a54:	e7ee      	b.n	8012a34 <__lshift+0x1c>
 8012a56:	2300      	movs	r3, #0
 8012a58:	f100 0114 	add.w	r1, r0, #20
 8012a5c:	f100 0210 	add.w	r2, r0, #16
 8012a60:	4618      	mov	r0, r3
 8012a62:	4553      	cmp	r3, sl
 8012a64:	db37      	blt.n	8012ad6 <__lshift+0xbe>
 8012a66:	6920      	ldr	r0, [r4, #16]
 8012a68:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012a6c:	f104 0314 	add.w	r3, r4, #20
 8012a70:	f019 091f 	ands.w	r9, r9, #31
 8012a74:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012a78:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8012a7c:	d02f      	beq.n	8012ade <__lshift+0xc6>
 8012a7e:	f1c9 0e20 	rsb	lr, r9, #32
 8012a82:	468a      	mov	sl, r1
 8012a84:	f04f 0c00 	mov.w	ip, #0
 8012a88:	681a      	ldr	r2, [r3, #0]
 8012a8a:	fa02 f209 	lsl.w	r2, r2, r9
 8012a8e:	ea42 020c 	orr.w	r2, r2, ip
 8012a92:	f84a 2b04 	str.w	r2, [sl], #4
 8012a96:	f853 2b04 	ldr.w	r2, [r3], #4
 8012a9a:	4298      	cmp	r0, r3
 8012a9c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8012aa0:	d8f2      	bhi.n	8012a88 <__lshift+0x70>
 8012aa2:	1b03      	subs	r3, r0, r4
 8012aa4:	3b15      	subs	r3, #21
 8012aa6:	f023 0303 	bic.w	r3, r3, #3
 8012aaa:	3304      	adds	r3, #4
 8012aac:	f104 0215 	add.w	r2, r4, #21
 8012ab0:	4290      	cmp	r0, r2
 8012ab2:	bf38      	it	cc
 8012ab4:	2304      	movcc	r3, #4
 8012ab6:	f841 c003 	str.w	ip, [r1, r3]
 8012aba:	f1bc 0f00 	cmp.w	ip, #0
 8012abe:	d001      	beq.n	8012ac4 <__lshift+0xac>
 8012ac0:	f108 0602 	add.w	r6, r8, #2
 8012ac4:	3e01      	subs	r6, #1
 8012ac6:	4638      	mov	r0, r7
 8012ac8:	612e      	str	r6, [r5, #16]
 8012aca:	4621      	mov	r1, r4
 8012acc:	f7ff fd88 	bl	80125e0 <_Bfree>
 8012ad0:	4628      	mov	r0, r5
 8012ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ad6:	f842 0f04 	str.w	r0, [r2, #4]!
 8012ada:	3301      	adds	r3, #1
 8012adc:	e7c1      	b.n	8012a62 <__lshift+0x4a>
 8012ade:	3904      	subs	r1, #4
 8012ae0:	f853 2b04 	ldr.w	r2, [r3], #4
 8012ae4:	f841 2f04 	str.w	r2, [r1, #4]!
 8012ae8:	4298      	cmp	r0, r3
 8012aea:	d8f9      	bhi.n	8012ae0 <__lshift+0xc8>
 8012aec:	e7ea      	b.n	8012ac4 <__lshift+0xac>
 8012aee:	bf00      	nop
 8012af0:	08014e69 	.word	0x08014e69
 8012af4:	08014ef4 	.word	0x08014ef4

08012af8 <__mcmp>:
 8012af8:	b530      	push	{r4, r5, lr}
 8012afa:	6902      	ldr	r2, [r0, #16]
 8012afc:	690c      	ldr	r4, [r1, #16]
 8012afe:	1b12      	subs	r2, r2, r4
 8012b00:	d10e      	bne.n	8012b20 <__mcmp+0x28>
 8012b02:	f100 0314 	add.w	r3, r0, #20
 8012b06:	3114      	adds	r1, #20
 8012b08:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012b0c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012b10:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012b14:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012b18:	42a5      	cmp	r5, r4
 8012b1a:	d003      	beq.n	8012b24 <__mcmp+0x2c>
 8012b1c:	d305      	bcc.n	8012b2a <__mcmp+0x32>
 8012b1e:	2201      	movs	r2, #1
 8012b20:	4610      	mov	r0, r2
 8012b22:	bd30      	pop	{r4, r5, pc}
 8012b24:	4283      	cmp	r3, r0
 8012b26:	d3f3      	bcc.n	8012b10 <__mcmp+0x18>
 8012b28:	e7fa      	b.n	8012b20 <__mcmp+0x28>
 8012b2a:	f04f 32ff 	mov.w	r2, #4294967295
 8012b2e:	e7f7      	b.n	8012b20 <__mcmp+0x28>

08012b30 <__mdiff>:
 8012b30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b34:	460c      	mov	r4, r1
 8012b36:	4606      	mov	r6, r0
 8012b38:	4611      	mov	r1, r2
 8012b3a:	4620      	mov	r0, r4
 8012b3c:	4690      	mov	r8, r2
 8012b3e:	f7ff ffdb 	bl	8012af8 <__mcmp>
 8012b42:	1e05      	subs	r5, r0, #0
 8012b44:	d110      	bne.n	8012b68 <__mdiff+0x38>
 8012b46:	4629      	mov	r1, r5
 8012b48:	4630      	mov	r0, r6
 8012b4a:	f7ff fd09 	bl	8012560 <_Balloc>
 8012b4e:	b930      	cbnz	r0, 8012b5e <__mdiff+0x2e>
 8012b50:	4b3a      	ldr	r3, [pc, #232]	; (8012c3c <__mdiff+0x10c>)
 8012b52:	4602      	mov	r2, r0
 8012b54:	f240 2132 	movw	r1, #562	; 0x232
 8012b58:	4839      	ldr	r0, [pc, #228]	; (8012c40 <__mdiff+0x110>)
 8012b5a:	f7fe faa7 	bl	80110ac <__assert_func>
 8012b5e:	2301      	movs	r3, #1
 8012b60:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012b64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b68:	bfa4      	itt	ge
 8012b6a:	4643      	movge	r3, r8
 8012b6c:	46a0      	movge	r8, r4
 8012b6e:	4630      	mov	r0, r6
 8012b70:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012b74:	bfa6      	itte	ge
 8012b76:	461c      	movge	r4, r3
 8012b78:	2500      	movge	r5, #0
 8012b7a:	2501      	movlt	r5, #1
 8012b7c:	f7ff fcf0 	bl	8012560 <_Balloc>
 8012b80:	b920      	cbnz	r0, 8012b8c <__mdiff+0x5c>
 8012b82:	4b2e      	ldr	r3, [pc, #184]	; (8012c3c <__mdiff+0x10c>)
 8012b84:	4602      	mov	r2, r0
 8012b86:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012b8a:	e7e5      	b.n	8012b58 <__mdiff+0x28>
 8012b8c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012b90:	6926      	ldr	r6, [r4, #16]
 8012b92:	60c5      	str	r5, [r0, #12]
 8012b94:	f104 0914 	add.w	r9, r4, #20
 8012b98:	f108 0514 	add.w	r5, r8, #20
 8012b9c:	f100 0e14 	add.w	lr, r0, #20
 8012ba0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8012ba4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8012ba8:	f108 0210 	add.w	r2, r8, #16
 8012bac:	46f2      	mov	sl, lr
 8012bae:	2100      	movs	r1, #0
 8012bb0:	f859 3b04 	ldr.w	r3, [r9], #4
 8012bb4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012bb8:	fa1f f883 	uxth.w	r8, r3
 8012bbc:	fa11 f18b 	uxtah	r1, r1, fp
 8012bc0:	0c1b      	lsrs	r3, r3, #16
 8012bc2:	eba1 0808 	sub.w	r8, r1, r8
 8012bc6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012bca:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012bce:	fa1f f888 	uxth.w	r8, r8
 8012bd2:	1419      	asrs	r1, r3, #16
 8012bd4:	454e      	cmp	r6, r9
 8012bd6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012bda:	f84a 3b04 	str.w	r3, [sl], #4
 8012bde:	d8e7      	bhi.n	8012bb0 <__mdiff+0x80>
 8012be0:	1b33      	subs	r3, r6, r4
 8012be2:	3b15      	subs	r3, #21
 8012be4:	f023 0303 	bic.w	r3, r3, #3
 8012be8:	3304      	adds	r3, #4
 8012bea:	3415      	adds	r4, #21
 8012bec:	42a6      	cmp	r6, r4
 8012bee:	bf38      	it	cc
 8012bf0:	2304      	movcc	r3, #4
 8012bf2:	441d      	add	r5, r3
 8012bf4:	4473      	add	r3, lr
 8012bf6:	469e      	mov	lr, r3
 8012bf8:	462e      	mov	r6, r5
 8012bfa:	4566      	cmp	r6, ip
 8012bfc:	d30e      	bcc.n	8012c1c <__mdiff+0xec>
 8012bfe:	f10c 0203 	add.w	r2, ip, #3
 8012c02:	1b52      	subs	r2, r2, r5
 8012c04:	f022 0203 	bic.w	r2, r2, #3
 8012c08:	3d03      	subs	r5, #3
 8012c0a:	45ac      	cmp	ip, r5
 8012c0c:	bf38      	it	cc
 8012c0e:	2200      	movcc	r2, #0
 8012c10:	441a      	add	r2, r3
 8012c12:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8012c16:	b17b      	cbz	r3, 8012c38 <__mdiff+0x108>
 8012c18:	6107      	str	r7, [r0, #16]
 8012c1a:	e7a3      	b.n	8012b64 <__mdiff+0x34>
 8012c1c:	f856 8b04 	ldr.w	r8, [r6], #4
 8012c20:	fa11 f288 	uxtah	r2, r1, r8
 8012c24:	1414      	asrs	r4, r2, #16
 8012c26:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8012c2a:	b292      	uxth	r2, r2
 8012c2c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8012c30:	f84e 2b04 	str.w	r2, [lr], #4
 8012c34:	1421      	asrs	r1, r4, #16
 8012c36:	e7e0      	b.n	8012bfa <__mdiff+0xca>
 8012c38:	3f01      	subs	r7, #1
 8012c3a:	e7ea      	b.n	8012c12 <__mdiff+0xe2>
 8012c3c:	08014e69 	.word	0x08014e69
 8012c40:	08014ef4 	.word	0x08014ef4

08012c44 <__ulp>:
 8012c44:	b082      	sub	sp, #8
 8012c46:	ed8d 0b00 	vstr	d0, [sp]
 8012c4a:	9b01      	ldr	r3, [sp, #4]
 8012c4c:	4912      	ldr	r1, [pc, #72]	; (8012c98 <__ulp+0x54>)
 8012c4e:	4019      	ands	r1, r3
 8012c50:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8012c54:	2900      	cmp	r1, #0
 8012c56:	dd05      	ble.n	8012c64 <__ulp+0x20>
 8012c58:	2200      	movs	r2, #0
 8012c5a:	460b      	mov	r3, r1
 8012c5c:	ec43 2b10 	vmov	d0, r2, r3
 8012c60:	b002      	add	sp, #8
 8012c62:	4770      	bx	lr
 8012c64:	4249      	negs	r1, r1
 8012c66:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8012c6a:	ea4f 5021 	mov.w	r0, r1, asr #20
 8012c6e:	f04f 0200 	mov.w	r2, #0
 8012c72:	f04f 0300 	mov.w	r3, #0
 8012c76:	da04      	bge.n	8012c82 <__ulp+0x3e>
 8012c78:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8012c7c:	fa41 f300 	asr.w	r3, r1, r0
 8012c80:	e7ec      	b.n	8012c5c <__ulp+0x18>
 8012c82:	f1a0 0114 	sub.w	r1, r0, #20
 8012c86:	291e      	cmp	r1, #30
 8012c88:	bfda      	itte	le
 8012c8a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8012c8e:	fa20 f101 	lsrle.w	r1, r0, r1
 8012c92:	2101      	movgt	r1, #1
 8012c94:	460a      	mov	r2, r1
 8012c96:	e7e1      	b.n	8012c5c <__ulp+0x18>
 8012c98:	7ff00000 	.word	0x7ff00000

08012c9c <__b2d>:
 8012c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c9e:	6905      	ldr	r5, [r0, #16]
 8012ca0:	f100 0714 	add.w	r7, r0, #20
 8012ca4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8012ca8:	1f2e      	subs	r6, r5, #4
 8012caa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8012cae:	4620      	mov	r0, r4
 8012cb0:	f7ff fd48 	bl	8012744 <__hi0bits>
 8012cb4:	f1c0 0320 	rsb	r3, r0, #32
 8012cb8:	280a      	cmp	r0, #10
 8012cba:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8012d38 <__b2d+0x9c>
 8012cbe:	600b      	str	r3, [r1, #0]
 8012cc0:	dc14      	bgt.n	8012cec <__b2d+0x50>
 8012cc2:	f1c0 0e0b 	rsb	lr, r0, #11
 8012cc6:	fa24 f10e 	lsr.w	r1, r4, lr
 8012cca:	42b7      	cmp	r7, r6
 8012ccc:	ea41 030c 	orr.w	r3, r1, ip
 8012cd0:	bf34      	ite	cc
 8012cd2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012cd6:	2100      	movcs	r1, #0
 8012cd8:	3015      	adds	r0, #21
 8012cda:	fa04 f000 	lsl.w	r0, r4, r0
 8012cde:	fa21 f10e 	lsr.w	r1, r1, lr
 8012ce2:	ea40 0201 	orr.w	r2, r0, r1
 8012ce6:	ec43 2b10 	vmov	d0, r2, r3
 8012cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012cec:	42b7      	cmp	r7, r6
 8012cee:	bf3a      	itte	cc
 8012cf0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012cf4:	f1a5 0608 	subcc.w	r6, r5, #8
 8012cf8:	2100      	movcs	r1, #0
 8012cfa:	380b      	subs	r0, #11
 8012cfc:	d017      	beq.n	8012d2e <__b2d+0x92>
 8012cfe:	f1c0 0c20 	rsb	ip, r0, #32
 8012d02:	fa04 f500 	lsl.w	r5, r4, r0
 8012d06:	42be      	cmp	r6, r7
 8012d08:	fa21 f40c 	lsr.w	r4, r1, ip
 8012d0c:	ea45 0504 	orr.w	r5, r5, r4
 8012d10:	bf8c      	ite	hi
 8012d12:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8012d16:	2400      	movls	r4, #0
 8012d18:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8012d1c:	fa01 f000 	lsl.w	r0, r1, r0
 8012d20:	fa24 f40c 	lsr.w	r4, r4, ip
 8012d24:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012d28:	ea40 0204 	orr.w	r2, r0, r4
 8012d2c:	e7db      	b.n	8012ce6 <__b2d+0x4a>
 8012d2e:	ea44 030c 	orr.w	r3, r4, ip
 8012d32:	460a      	mov	r2, r1
 8012d34:	e7d7      	b.n	8012ce6 <__b2d+0x4a>
 8012d36:	bf00      	nop
 8012d38:	3ff00000 	.word	0x3ff00000

08012d3c <__d2b>:
 8012d3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012d40:	4689      	mov	r9, r1
 8012d42:	2101      	movs	r1, #1
 8012d44:	ec57 6b10 	vmov	r6, r7, d0
 8012d48:	4690      	mov	r8, r2
 8012d4a:	f7ff fc09 	bl	8012560 <_Balloc>
 8012d4e:	4604      	mov	r4, r0
 8012d50:	b930      	cbnz	r0, 8012d60 <__d2b+0x24>
 8012d52:	4602      	mov	r2, r0
 8012d54:	4b25      	ldr	r3, [pc, #148]	; (8012dec <__d2b+0xb0>)
 8012d56:	4826      	ldr	r0, [pc, #152]	; (8012df0 <__d2b+0xb4>)
 8012d58:	f240 310a 	movw	r1, #778	; 0x30a
 8012d5c:	f7fe f9a6 	bl	80110ac <__assert_func>
 8012d60:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012d64:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012d68:	bb35      	cbnz	r5, 8012db8 <__d2b+0x7c>
 8012d6a:	2e00      	cmp	r6, #0
 8012d6c:	9301      	str	r3, [sp, #4]
 8012d6e:	d028      	beq.n	8012dc2 <__d2b+0x86>
 8012d70:	4668      	mov	r0, sp
 8012d72:	9600      	str	r6, [sp, #0]
 8012d74:	f7ff fd06 	bl	8012784 <__lo0bits>
 8012d78:	9900      	ldr	r1, [sp, #0]
 8012d7a:	b300      	cbz	r0, 8012dbe <__d2b+0x82>
 8012d7c:	9a01      	ldr	r2, [sp, #4]
 8012d7e:	f1c0 0320 	rsb	r3, r0, #32
 8012d82:	fa02 f303 	lsl.w	r3, r2, r3
 8012d86:	430b      	orrs	r3, r1
 8012d88:	40c2      	lsrs	r2, r0
 8012d8a:	6163      	str	r3, [r4, #20]
 8012d8c:	9201      	str	r2, [sp, #4]
 8012d8e:	9b01      	ldr	r3, [sp, #4]
 8012d90:	61a3      	str	r3, [r4, #24]
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	bf14      	ite	ne
 8012d96:	2202      	movne	r2, #2
 8012d98:	2201      	moveq	r2, #1
 8012d9a:	6122      	str	r2, [r4, #16]
 8012d9c:	b1d5      	cbz	r5, 8012dd4 <__d2b+0x98>
 8012d9e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012da2:	4405      	add	r5, r0
 8012da4:	f8c9 5000 	str.w	r5, [r9]
 8012da8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012dac:	f8c8 0000 	str.w	r0, [r8]
 8012db0:	4620      	mov	r0, r4
 8012db2:	b003      	add	sp, #12
 8012db4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012db8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012dbc:	e7d5      	b.n	8012d6a <__d2b+0x2e>
 8012dbe:	6161      	str	r1, [r4, #20]
 8012dc0:	e7e5      	b.n	8012d8e <__d2b+0x52>
 8012dc2:	a801      	add	r0, sp, #4
 8012dc4:	f7ff fcde 	bl	8012784 <__lo0bits>
 8012dc8:	9b01      	ldr	r3, [sp, #4]
 8012dca:	6163      	str	r3, [r4, #20]
 8012dcc:	2201      	movs	r2, #1
 8012dce:	6122      	str	r2, [r4, #16]
 8012dd0:	3020      	adds	r0, #32
 8012dd2:	e7e3      	b.n	8012d9c <__d2b+0x60>
 8012dd4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012dd8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012ddc:	f8c9 0000 	str.w	r0, [r9]
 8012de0:	6918      	ldr	r0, [r3, #16]
 8012de2:	f7ff fcaf 	bl	8012744 <__hi0bits>
 8012de6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012dea:	e7df      	b.n	8012dac <__d2b+0x70>
 8012dec:	08014e69 	.word	0x08014e69
 8012df0:	08014ef4 	.word	0x08014ef4

08012df4 <__ratio>:
 8012df4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012df8:	4688      	mov	r8, r1
 8012dfa:	4669      	mov	r1, sp
 8012dfc:	4681      	mov	r9, r0
 8012dfe:	f7ff ff4d 	bl	8012c9c <__b2d>
 8012e02:	a901      	add	r1, sp, #4
 8012e04:	4640      	mov	r0, r8
 8012e06:	ec55 4b10 	vmov	r4, r5, d0
 8012e0a:	f7ff ff47 	bl	8012c9c <__b2d>
 8012e0e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012e12:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8012e16:	eba3 0c02 	sub.w	ip, r3, r2
 8012e1a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012e1e:	1a9b      	subs	r3, r3, r2
 8012e20:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8012e24:	ec51 0b10 	vmov	r0, r1, d0
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	bfd6      	itet	le
 8012e2c:	460a      	movle	r2, r1
 8012e2e:	462a      	movgt	r2, r5
 8012e30:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012e34:	468b      	mov	fp, r1
 8012e36:	462f      	mov	r7, r5
 8012e38:	bfd4      	ite	le
 8012e3a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8012e3e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8012e42:	4620      	mov	r0, r4
 8012e44:	ee10 2a10 	vmov	r2, s0
 8012e48:	465b      	mov	r3, fp
 8012e4a:	4639      	mov	r1, r7
 8012e4c:	f7ed fd2e 	bl	80008ac <__aeabi_ddiv>
 8012e50:	ec41 0b10 	vmov	d0, r0, r1
 8012e54:	b003      	add	sp, #12
 8012e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012e5a <__copybits>:
 8012e5a:	3901      	subs	r1, #1
 8012e5c:	b570      	push	{r4, r5, r6, lr}
 8012e5e:	1149      	asrs	r1, r1, #5
 8012e60:	6914      	ldr	r4, [r2, #16]
 8012e62:	3101      	adds	r1, #1
 8012e64:	f102 0314 	add.w	r3, r2, #20
 8012e68:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012e6c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012e70:	1f05      	subs	r5, r0, #4
 8012e72:	42a3      	cmp	r3, r4
 8012e74:	d30c      	bcc.n	8012e90 <__copybits+0x36>
 8012e76:	1aa3      	subs	r3, r4, r2
 8012e78:	3b11      	subs	r3, #17
 8012e7a:	f023 0303 	bic.w	r3, r3, #3
 8012e7e:	3211      	adds	r2, #17
 8012e80:	42a2      	cmp	r2, r4
 8012e82:	bf88      	it	hi
 8012e84:	2300      	movhi	r3, #0
 8012e86:	4418      	add	r0, r3
 8012e88:	2300      	movs	r3, #0
 8012e8a:	4288      	cmp	r0, r1
 8012e8c:	d305      	bcc.n	8012e9a <__copybits+0x40>
 8012e8e:	bd70      	pop	{r4, r5, r6, pc}
 8012e90:	f853 6b04 	ldr.w	r6, [r3], #4
 8012e94:	f845 6f04 	str.w	r6, [r5, #4]!
 8012e98:	e7eb      	b.n	8012e72 <__copybits+0x18>
 8012e9a:	f840 3b04 	str.w	r3, [r0], #4
 8012e9e:	e7f4      	b.n	8012e8a <__copybits+0x30>

08012ea0 <__any_on>:
 8012ea0:	f100 0214 	add.w	r2, r0, #20
 8012ea4:	6900      	ldr	r0, [r0, #16]
 8012ea6:	114b      	asrs	r3, r1, #5
 8012ea8:	4298      	cmp	r0, r3
 8012eaa:	b510      	push	{r4, lr}
 8012eac:	db11      	blt.n	8012ed2 <__any_on+0x32>
 8012eae:	dd0a      	ble.n	8012ec6 <__any_on+0x26>
 8012eb0:	f011 011f 	ands.w	r1, r1, #31
 8012eb4:	d007      	beq.n	8012ec6 <__any_on+0x26>
 8012eb6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012eba:	fa24 f001 	lsr.w	r0, r4, r1
 8012ebe:	fa00 f101 	lsl.w	r1, r0, r1
 8012ec2:	428c      	cmp	r4, r1
 8012ec4:	d10b      	bne.n	8012ede <__any_on+0x3e>
 8012ec6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012eca:	4293      	cmp	r3, r2
 8012ecc:	d803      	bhi.n	8012ed6 <__any_on+0x36>
 8012ece:	2000      	movs	r0, #0
 8012ed0:	bd10      	pop	{r4, pc}
 8012ed2:	4603      	mov	r3, r0
 8012ed4:	e7f7      	b.n	8012ec6 <__any_on+0x26>
 8012ed6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012eda:	2900      	cmp	r1, #0
 8012edc:	d0f5      	beq.n	8012eca <__any_on+0x2a>
 8012ede:	2001      	movs	r0, #1
 8012ee0:	e7f6      	b.n	8012ed0 <__any_on+0x30>

08012ee2 <_calloc_r>:
 8012ee2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012ee4:	fba1 2402 	umull	r2, r4, r1, r2
 8012ee8:	b94c      	cbnz	r4, 8012efe <_calloc_r+0x1c>
 8012eea:	4611      	mov	r1, r2
 8012eec:	9201      	str	r2, [sp, #4]
 8012eee:	f000 f87b 	bl	8012fe8 <_malloc_r>
 8012ef2:	9a01      	ldr	r2, [sp, #4]
 8012ef4:	4605      	mov	r5, r0
 8012ef6:	b930      	cbnz	r0, 8012f06 <_calloc_r+0x24>
 8012ef8:	4628      	mov	r0, r5
 8012efa:	b003      	add	sp, #12
 8012efc:	bd30      	pop	{r4, r5, pc}
 8012efe:	220c      	movs	r2, #12
 8012f00:	6002      	str	r2, [r0, #0]
 8012f02:	2500      	movs	r5, #0
 8012f04:	e7f8      	b.n	8012ef8 <_calloc_r+0x16>
 8012f06:	4621      	mov	r1, r4
 8012f08:	f7fc fa94 	bl	800f434 <memset>
 8012f0c:	e7f4      	b.n	8012ef8 <_calloc_r+0x16>
	...

08012f10 <_free_r>:
 8012f10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012f12:	2900      	cmp	r1, #0
 8012f14:	d044      	beq.n	8012fa0 <_free_r+0x90>
 8012f16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012f1a:	9001      	str	r0, [sp, #4]
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	f1a1 0404 	sub.w	r4, r1, #4
 8012f22:	bfb8      	it	lt
 8012f24:	18e4      	addlt	r4, r4, r3
 8012f26:	f001 fae1 	bl	80144ec <__malloc_lock>
 8012f2a:	4a1e      	ldr	r2, [pc, #120]	; (8012fa4 <_free_r+0x94>)
 8012f2c:	9801      	ldr	r0, [sp, #4]
 8012f2e:	6813      	ldr	r3, [r2, #0]
 8012f30:	b933      	cbnz	r3, 8012f40 <_free_r+0x30>
 8012f32:	6063      	str	r3, [r4, #4]
 8012f34:	6014      	str	r4, [r2, #0]
 8012f36:	b003      	add	sp, #12
 8012f38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012f3c:	f001 badc 	b.w	80144f8 <__malloc_unlock>
 8012f40:	42a3      	cmp	r3, r4
 8012f42:	d908      	bls.n	8012f56 <_free_r+0x46>
 8012f44:	6825      	ldr	r5, [r4, #0]
 8012f46:	1961      	adds	r1, r4, r5
 8012f48:	428b      	cmp	r3, r1
 8012f4a:	bf01      	itttt	eq
 8012f4c:	6819      	ldreq	r1, [r3, #0]
 8012f4e:	685b      	ldreq	r3, [r3, #4]
 8012f50:	1949      	addeq	r1, r1, r5
 8012f52:	6021      	streq	r1, [r4, #0]
 8012f54:	e7ed      	b.n	8012f32 <_free_r+0x22>
 8012f56:	461a      	mov	r2, r3
 8012f58:	685b      	ldr	r3, [r3, #4]
 8012f5a:	b10b      	cbz	r3, 8012f60 <_free_r+0x50>
 8012f5c:	42a3      	cmp	r3, r4
 8012f5e:	d9fa      	bls.n	8012f56 <_free_r+0x46>
 8012f60:	6811      	ldr	r1, [r2, #0]
 8012f62:	1855      	adds	r5, r2, r1
 8012f64:	42a5      	cmp	r5, r4
 8012f66:	d10b      	bne.n	8012f80 <_free_r+0x70>
 8012f68:	6824      	ldr	r4, [r4, #0]
 8012f6a:	4421      	add	r1, r4
 8012f6c:	1854      	adds	r4, r2, r1
 8012f6e:	42a3      	cmp	r3, r4
 8012f70:	6011      	str	r1, [r2, #0]
 8012f72:	d1e0      	bne.n	8012f36 <_free_r+0x26>
 8012f74:	681c      	ldr	r4, [r3, #0]
 8012f76:	685b      	ldr	r3, [r3, #4]
 8012f78:	6053      	str	r3, [r2, #4]
 8012f7a:	4421      	add	r1, r4
 8012f7c:	6011      	str	r1, [r2, #0]
 8012f7e:	e7da      	b.n	8012f36 <_free_r+0x26>
 8012f80:	d902      	bls.n	8012f88 <_free_r+0x78>
 8012f82:	230c      	movs	r3, #12
 8012f84:	6003      	str	r3, [r0, #0]
 8012f86:	e7d6      	b.n	8012f36 <_free_r+0x26>
 8012f88:	6825      	ldr	r5, [r4, #0]
 8012f8a:	1961      	adds	r1, r4, r5
 8012f8c:	428b      	cmp	r3, r1
 8012f8e:	bf04      	itt	eq
 8012f90:	6819      	ldreq	r1, [r3, #0]
 8012f92:	685b      	ldreq	r3, [r3, #4]
 8012f94:	6063      	str	r3, [r4, #4]
 8012f96:	bf04      	itt	eq
 8012f98:	1949      	addeq	r1, r1, r5
 8012f9a:	6021      	streq	r1, [r4, #0]
 8012f9c:	6054      	str	r4, [r2, #4]
 8012f9e:	e7ca      	b.n	8012f36 <_free_r+0x26>
 8012fa0:	b003      	add	sp, #12
 8012fa2:	bd30      	pop	{r4, r5, pc}
 8012fa4:	2000561c 	.word	0x2000561c

08012fa8 <sbrk_aligned>:
 8012fa8:	b570      	push	{r4, r5, r6, lr}
 8012faa:	4e0e      	ldr	r6, [pc, #56]	; (8012fe4 <sbrk_aligned+0x3c>)
 8012fac:	460c      	mov	r4, r1
 8012fae:	6831      	ldr	r1, [r6, #0]
 8012fb0:	4605      	mov	r5, r0
 8012fb2:	b911      	cbnz	r1, 8012fba <sbrk_aligned+0x12>
 8012fb4:	f000 fe80 	bl	8013cb8 <_sbrk_r>
 8012fb8:	6030      	str	r0, [r6, #0]
 8012fba:	4621      	mov	r1, r4
 8012fbc:	4628      	mov	r0, r5
 8012fbe:	f000 fe7b 	bl	8013cb8 <_sbrk_r>
 8012fc2:	1c43      	adds	r3, r0, #1
 8012fc4:	d00a      	beq.n	8012fdc <sbrk_aligned+0x34>
 8012fc6:	1cc4      	adds	r4, r0, #3
 8012fc8:	f024 0403 	bic.w	r4, r4, #3
 8012fcc:	42a0      	cmp	r0, r4
 8012fce:	d007      	beq.n	8012fe0 <sbrk_aligned+0x38>
 8012fd0:	1a21      	subs	r1, r4, r0
 8012fd2:	4628      	mov	r0, r5
 8012fd4:	f000 fe70 	bl	8013cb8 <_sbrk_r>
 8012fd8:	3001      	adds	r0, #1
 8012fda:	d101      	bne.n	8012fe0 <sbrk_aligned+0x38>
 8012fdc:	f04f 34ff 	mov.w	r4, #4294967295
 8012fe0:	4620      	mov	r0, r4
 8012fe2:	bd70      	pop	{r4, r5, r6, pc}
 8012fe4:	20005620 	.word	0x20005620

08012fe8 <_malloc_r>:
 8012fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fec:	1ccd      	adds	r5, r1, #3
 8012fee:	f025 0503 	bic.w	r5, r5, #3
 8012ff2:	3508      	adds	r5, #8
 8012ff4:	2d0c      	cmp	r5, #12
 8012ff6:	bf38      	it	cc
 8012ff8:	250c      	movcc	r5, #12
 8012ffa:	2d00      	cmp	r5, #0
 8012ffc:	4607      	mov	r7, r0
 8012ffe:	db01      	blt.n	8013004 <_malloc_r+0x1c>
 8013000:	42a9      	cmp	r1, r5
 8013002:	d905      	bls.n	8013010 <_malloc_r+0x28>
 8013004:	230c      	movs	r3, #12
 8013006:	603b      	str	r3, [r7, #0]
 8013008:	2600      	movs	r6, #0
 801300a:	4630      	mov	r0, r6
 801300c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013010:	4e2e      	ldr	r6, [pc, #184]	; (80130cc <_malloc_r+0xe4>)
 8013012:	f001 fa6b 	bl	80144ec <__malloc_lock>
 8013016:	6833      	ldr	r3, [r6, #0]
 8013018:	461c      	mov	r4, r3
 801301a:	bb34      	cbnz	r4, 801306a <_malloc_r+0x82>
 801301c:	4629      	mov	r1, r5
 801301e:	4638      	mov	r0, r7
 8013020:	f7ff ffc2 	bl	8012fa8 <sbrk_aligned>
 8013024:	1c43      	adds	r3, r0, #1
 8013026:	4604      	mov	r4, r0
 8013028:	d14d      	bne.n	80130c6 <_malloc_r+0xde>
 801302a:	6834      	ldr	r4, [r6, #0]
 801302c:	4626      	mov	r6, r4
 801302e:	2e00      	cmp	r6, #0
 8013030:	d140      	bne.n	80130b4 <_malloc_r+0xcc>
 8013032:	6823      	ldr	r3, [r4, #0]
 8013034:	4631      	mov	r1, r6
 8013036:	4638      	mov	r0, r7
 8013038:	eb04 0803 	add.w	r8, r4, r3
 801303c:	f000 fe3c 	bl	8013cb8 <_sbrk_r>
 8013040:	4580      	cmp	r8, r0
 8013042:	d13a      	bne.n	80130ba <_malloc_r+0xd2>
 8013044:	6821      	ldr	r1, [r4, #0]
 8013046:	3503      	adds	r5, #3
 8013048:	1a6d      	subs	r5, r5, r1
 801304a:	f025 0503 	bic.w	r5, r5, #3
 801304e:	3508      	adds	r5, #8
 8013050:	2d0c      	cmp	r5, #12
 8013052:	bf38      	it	cc
 8013054:	250c      	movcc	r5, #12
 8013056:	4629      	mov	r1, r5
 8013058:	4638      	mov	r0, r7
 801305a:	f7ff ffa5 	bl	8012fa8 <sbrk_aligned>
 801305e:	3001      	adds	r0, #1
 8013060:	d02b      	beq.n	80130ba <_malloc_r+0xd2>
 8013062:	6823      	ldr	r3, [r4, #0]
 8013064:	442b      	add	r3, r5
 8013066:	6023      	str	r3, [r4, #0]
 8013068:	e00e      	b.n	8013088 <_malloc_r+0xa0>
 801306a:	6822      	ldr	r2, [r4, #0]
 801306c:	1b52      	subs	r2, r2, r5
 801306e:	d41e      	bmi.n	80130ae <_malloc_r+0xc6>
 8013070:	2a0b      	cmp	r2, #11
 8013072:	d916      	bls.n	80130a2 <_malloc_r+0xba>
 8013074:	1961      	adds	r1, r4, r5
 8013076:	42a3      	cmp	r3, r4
 8013078:	6025      	str	r5, [r4, #0]
 801307a:	bf18      	it	ne
 801307c:	6059      	strne	r1, [r3, #4]
 801307e:	6863      	ldr	r3, [r4, #4]
 8013080:	bf08      	it	eq
 8013082:	6031      	streq	r1, [r6, #0]
 8013084:	5162      	str	r2, [r4, r5]
 8013086:	604b      	str	r3, [r1, #4]
 8013088:	4638      	mov	r0, r7
 801308a:	f104 060b 	add.w	r6, r4, #11
 801308e:	f001 fa33 	bl	80144f8 <__malloc_unlock>
 8013092:	f026 0607 	bic.w	r6, r6, #7
 8013096:	1d23      	adds	r3, r4, #4
 8013098:	1af2      	subs	r2, r6, r3
 801309a:	d0b6      	beq.n	801300a <_malloc_r+0x22>
 801309c:	1b9b      	subs	r3, r3, r6
 801309e:	50a3      	str	r3, [r4, r2]
 80130a0:	e7b3      	b.n	801300a <_malloc_r+0x22>
 80130a2:	6862      	ldr	r2, [r4, #4]
 80130a4:	42a3      	cmp	r3, r4
 80130a6:	bf0c      	ite	eq
 80130a8:	6032      	streq	r2, [r6, #0]
 80130aa:	605a      	strne	r2, [r3, #4]
 80130ac:	e7ec      	b.n	8013088 <_malloc_r+0xa0>
 80130ae:	4623      	mov	r3, r4
 80130b0:	6864      	ldr	r4, [r4, #4]
 80130b2:	e7b2      	b.n	801301a <_malloc_r+0x32>
 80130b4:	4634      	mov	r4, r6
 80130b6:	6876      	ldr	r6, [r6, #4]
 80130b8:	e7b9      	b.n	801302e <_malloc_r+0x46>
 80130ba:	230c      	movs	r3, #12
 80130bc:	603b      	str	r3, [r7, #0]
 80130be:	4638      	mov	r0, r7
 80130c0:	f001 fa1a 	bl	80144f8 <__malloc_unlock>
 80130c4:	e7a1      	b.n	801300a <_malloc_r+0x22>
 80130c6:	6025      	str	r5, [r4, #0]
 80130c8:	e7de      	b.n	8013088 <_malloc_r+0xa0>
 80130ca:	bf00      	nop
 80130cc:	2000561c 	.word	0x2000561c

080130d0 <__ssputs_r>:
 80130d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80130d4:	688e      	ldr	r6, [r1, #8]
 80130d6:	429e      	cmp	r6, r3
 80130d8:	4682      	mov	sl, r0
 80130da:	460c      	mov	r4, r1
 80130dc:	4690      	mov	r8, r2
 80130de:	461f      	mov	r7, r3
 80130e0:	d838      	bhi.n	8013154 <__ssputs_r+0x84>
 80130e2:	898a      	ldrh	r2, [r1, #12]
 80130e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80130e8:	d032      	beq.n	8013150 <__ssputs_r+0x80>
 80130ea:	6825      	ldr	r5, [r4, #0]
 80130ec:	6909      	ldr	r1, [r1, #16]
 80130ee:	eba5 0901 	sub.w	r9, r5, r1
 80130f2:	6965      	ldr	r5, [r4, #20]
 80130f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80130f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80130fc:	3301      	adds	r3, #1
 80130fe:	444b      	add	r3, r9
 8013100:	106d      	asrs	r5, r5, #1
 8013102:	429d      	cmp	r5, r3
 8013104:	bf38      	it	cc
 8013106:	461d      	movcc	r5, r3
 8013108:	0553      	lsls	r3, r2, #21
 801310a:	d531      	bpl.n	8013170 <__ssputs_r+0xa0>
 801310c:	4629      	mov	r1, r5
 801310e:	f7ff ff6b 	bl	8012fe8 <_malloc_r>
 8013112:	4606      	mov	r6, r0
 8013114:	b950      	cbnz	r0, 801312c <__ssputs_r+0x5c>
 8013116:	230c      	movs	r3, #12
 8013118:	f8ca 3000 	str.w	r3, [sl]
 801311c:	89a3      	ldrh	r3, [r4, #12]
 801311e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013122:	81a3      	strh	r3, [r4, #12]
 8013124:	f04f 30ff 	mov.w	r0, #4294967295
 8013128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801312c:	6921      	ldr	r1, [r4, #16]
 801312e:	464a      	mov	r2, r9
 8013130:	f7fc f972 	bl	800f418 <memcpy>
 8013134:	89a3      	ldrh	r3, [r4, #12]
 8013136:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801313a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801313e:	81a3      	strh	r3, [r4, #12]
 8013140:	6126      	str	r6, [r4, #16]
 8013142:	6165      	str	r5, [r4, #20]
 8013144:	444e      	add	r6, r9
 8013146:	eba5 0509 	sub.w	r5, r5, r9
 801314a:	6026      	str	r6, [r4, #0]
 801314c:	60a5      	str	r5, [r4, #8]
 801314e:	463e      	mov	r6, r7
 8013150:	42be      	cmp	r6, r7
 8013152:	d900      	bls.n	8013156 <__ssputs_r+0x86>
 8013154:	463e      	mov	r6, r7
 8013156:	6820      	ldr	r0, [r4, #0]
 8013158:	4632      	mov	r2, r6
 801315a:	4641      	mov	r1, r8
 801315c:	f001 f9ac 	bl	80144b8 <memmove>
 8013160:	68a3      	ldr	r3, [r4, #8]
 8013162:	1b9b      	subs	r3, r3, r6
 8013164:	60a3      	str	r3, [r4, #8]
 8013166:	6823      	ldr	r3, [r4, #0]
 8013168:	4433      	add	r3, r6
 801316a:	6023      	str	r3, [r4, #0]
 801316c:	2000      	movs	r0, #0
 801316e:	e7db      	b.n	8013128 <__ssputs_r+0x58>
 8013170:	462a      	mov	r2, r5
 8013172:	f001 f9c7 	bl	8014504 <_realloc_r>
 8013176:	4606      	mov	r6, r0
 8013178:	2800      	cmp	r0, #0
 801317a:	d1e1      	bne.n	8013140 <__ssputs_r+0x70>
 801317c:	6921      	ldr	r1, [r4, #16]
 801317e:	4650      	mov	r0, sl
 8013180:	f7ff fec6 	bl	8012f10 <_free_r>
 8013184:	e7c7      	b.n	8013116 <__ssputs_r+0x46>
	...

08013188 <_svfiprintf_r>:
 8013188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801318c:	4698      	mov	r8, r3
 801318e:	898b      	ldrh	r3, [r1, #12]
 8013190:	061b      	lsls	r3, r3, #24
 8013192:	b09d      	sub	sp, #116	; 0x74
 8013194:	4607      	mov	r7, r0
 8013196:	460d      	mov	r5, r1
 8013198:	4614      	mov	r4, r2
 801319a:	d50e      	bpl.n	80131ba <_svfiprintf_r+0x32>
 801319c:	690b      	ldr	r3, [r1, #16]
 801319e:	b963      	cbnz	r3, 80131ba <_svfiprintf_r+0x32>
 80131a0:	2140      	movs	r1, #64	; 0x40
 80131a2:	f7ff ff21 	bl	8012fe8 <_malloc_r>
 80131a6:	6028      	str	r0, [r5, #0]
 80131a8:	6128      	str	r0, [r5, #16]
 80131aa:	b920      	cbnz	r0, 80131b6 <_svfiprintf_r+0x2e>
 80131ac:	230c      	movs	r3, #12
 80131ae:	603b      	str	r3, [r7, #0]
 80131b0:	f04f 30ff 	mov.w	r0, #4294967295
 80131b4:	e0d1      	b.n	801335a <_svfiprintf_r+0x1d2>
 80131b6:	2340      	movs	r3, #64	; 0x40
 80131b8:	616b      	str	r3, [r5, #20]
 80131ba:	2300      	movs	r3, #0
 80131bc:	9309      	str	r3, [sp, #36]	; 0x24
 80131be:	2320      	movs	r3, #32
 80131c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80131c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80131c8:	2330      	movs	r3, #48	; 0x30
 80131ca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013374 <_svfiprintf_r+0x1ec>
 80131ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80131d2:	f04f 0901 	mov.w	r9, #1
 80131d6:	4623      	mov	r3, r4
 80131d8:	469a      	mov	sl, r3
 80131da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80131de:	b10a      	cbz	r2, 80131e4 <_svfiprintf_r+0x5c>
 80131e0:	2a25      	cmp	r2, #37	; 0x25
 80131e2:	d1f9      	bne.n	80131d8 <_svfiprintf_r+0x50>
 80131e4:	ebba 0b04 	subs.w	fp, sl, r4
 80131e8:	d00b      	beq.n	8013202 <_svfiprintf_r+0x7a>
 80131ea:	465b      	mov	r3, fp
 80131ec:	4622      	mov	r2, r4
 80131ee:	4629      	mov	r1, r5
 80131f0:	4638      	mov	r0, r7
 80131f2:	f7ff ff6d 	bl	80130d0 <__ssputs_r>
 80131f6:	3001      	adds	r0, #1
 80131f8:	f000 80aa 	beq.w	8013350 <_svfiprintf_r+0x1c8>
 80131fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80131fe:	445a      	add	r2, fp
 8013200:	9209      	str	r2, [sp, #36]	; 0x24
 8013202:	f89a 3000 	ldrb.w	r3, [sl]
 8013206:	2b00      	cmp	r3, #0
 8013208:	f000 80a2 	beq.w	8013350 <_svfiprintf_r+0x1c8>
 801320c:	2300      	movs	r3, #0
 801320e:	f04f 32ff 	mov.w	r2, #4294967295
 8013212:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013216:	f10a 0a01 	add.w	sl, sl, #1
 801321a:	9304      	str	r3, [sp, #16]
 801321c:	9307      	str	r3, [sp, #28]
 801321e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013222:	931a      	str	r3, [sp, #104]	; 0x68
 8013224:	4654      	mov	r4, sl
 8013226:	2205      	movs	r2, #5
 8013228:	f814 1b01 	ldrb.w	r1, [r4], #1
 801322c:	4851      	ldr	r0, [pc, #324]	; (8013374 <_svfiprintf_r+0x1ec>)
 801322e:	f7ed f807 	bl	8000240 <memchr>
 8013232:	9a04      	ldr	r2, [sp, #16]
 8013234:	b9d8      	cbnz	r0, 801326e <_svfiprintf_r+0xe6>
 8013236:	06d0      	lsls	r0, r2, #27
 8013238:	bf44      	itt	mi
 801323a:	2320      	movmi	r3, #32
 801323c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013240:	0711      	lsls	r1, r2, #28
 8013242:	bf44      	itt	mi
 8013244:	232b      	movmi	r3, #43	; 0x2b
 8013246:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801324a:	f89a 3000 	ldrb.w	r3, [sl]
 801324e:	2b2a      	cmp	r3, #42	; 0x2a
 8013250:	d015      	beq.n	801327e <_svfiprintf_r+0xf6>
 8013252:	9a07      	ldr	r2, [sp, #28]
 8013254:	4654      	mov	r4, sl
 8013256:	2000      	movs	r0, #0
 8013258:	f04f 0c0a 	mov.w	ip, #10
 801325c:	4621      	mov	r1, r4
 801325e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013262:	3b30      	subs	r3, #48	; 0x30
 8013264:	2b09      	cmp	r3, #9
 8013266:	d94e      	bls.n	8013306 <_svfiprintf_r+0x17e>
 8013268:	b1b0      	cbz	r0, 8013298 <_svfiprintf_r+0x110>
 801326a:	9207      	str	r2, [sp, #28]
 801326c:	e014      	b.n	8013298 <_svfiprintf_r+0x110>
 801326e:	eba0 0308 	sub.w	r3, r0, r8
 8013272:	fa09 f303 	lsl.w	r3, r9, r3
 8013276:	4313      	orrs	r3, r2
 8013278:	9304      	str	r3, [sp, #16]
 801327a:	46a2      	mov	sl, r4
 801327c:	e7d2      	b.n	8013224 <_svfiprintf_r+0x9c>
 801327e:	9b03      	ldr	r3, [sp, #12]
 8013280:	1d19      	adds	r1, r3, #4
 8013282:	681b      	ldr	r3, [r3, #0]
 8013284:	9103      	str	r1, [sp, #12]
 8013286:	2b00      	cmp	r3, #0
 8013288:	bfbb      	ittet	lt
 801328a:	425b      	neglt	r3, r3
 801328c:	f042 0202 	orrlt.w	r2, r2, #2
 8013290:	9307      	strge	r3, [sp, #28]
 8013292:	9307      	strlt	r3, [sp, #28]
 8013294:	bfb8      	it	lt
 8013296:	9204      	strlt	r2, [sp, #16]
 8013298:	7823      	ldrb	r3, [r4, #0]
 801329a:	2b2e      	cmp	r3, #46	; 0x2e
 801329c:	d10c      	bne.n	80132b8 <_svfiprintf_r+0x130>
 801329e:	7863      	ldrb	r3, [r4, #1]
 80132a0:	2b2a      	cmp	r3, #42	; 0x2a
 80132a2:	d135      	bne.n	8013310 <_svfiprintf_r+0x188>
 80132a4:	9b03      	ldr	r3, [sp, #12]
 80132a6:	1d1a      	adds	r2, r3, #4
 80132a8:	681b      	ldr	r3, [r3, #0]
 80132aa:	9203      	str	r2, [sp, #12]
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	bfb8      	it	lt
 80132b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80132b4:	3402      	adds	r4, #2
 80132b6:	9305      	str	r3, [sp, #20]
 80132b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013384 <_svfiprintf_r+0x1fc>
 80132bc:	7821      	ldrb	r1, [r4, #0]
 80132be:	2203      	movs	r2, #3
 80132c0:	4650      	mov	r0, sl
 80132c2:	f7ec ffbd 	bl	8000240 <memchr>
 80132c6:	b140      	cbz	r0, 80132da <_svfiprintf_r+0x152>
 80132c8:	2340      	movs	r3, #64	; 0x40
 80132ca:	eba0 000a 	sub.w	r0, r0, sl
 80132ce:	fa03 f000 	lsl.w	r0, r3, r0
 80132d2:	9b04      	ldr	r3, [sp, #16]
 80132d4:	4303      	orrs	r3, r0
 80132d6:	3401      	adds	r4, #1
 80132d8:	9304      	str	r3, [sp, #16]
 80132da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80132de:	4826      	ldr	r0, [pc, #152]	; (8013378 <_svfiprintf_r+0x1f0>)
 80132e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80132e4:	2206      	movs	r2, #6
 80132e6:	f7ec ffab 	bl	8000240 <memchr>
 80132ea:	2800      	cmp	r0, #0
 80132ec:	d038      	beq.n	8013360 <_svfiprintf_r+0x1d8>
 80132ee:	4b23      	ldr	r3, [pc, #140]	; (801337c <_svfiprintf_r+0x1f4>)
 80132f0:	bb1b      	cbnz	r3, 801333a <_svfiprintf_r+0x1b2>
 80132f2:	9b03      	ldr	r3, [sp, #12]
 80132f4:	3307      	adds	r3, #7
 80132f6:	f023 0307 	bic.w	r3, r3, #7
 80132fa:	3308      	adds	r3, #8
 80132fc:	9303      	str	r3, [sp, #12]
 80132fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013300:	4433      	add	r3, r6
 8013302:	9309      	str	r3, [sp, #36]	; 0x24
 8013304:	e767      	b.n	80131d6 <_svfiprintf_r+0x4e>
 8013306:	fb0c 3202 	mla	r2, ip, r2, r3
 801330a:	460c      	mov	r4, r1
 801330c:	2001      	movs	r0, #1
 801330e:	e7a5      	b.n	801325c <_svfiprintf_r+0xd4>
 8013310:	2300      	movs	r3, #0
 8013312:	3401      	adds	r4, #1
 8013314:	9305      	str	r3, [sp, #20]
 8013316:	4619      	mov	r1, r3
 8013318:	f04f 0c0a 	mov.w	ip, #10
 801331c:	4620      	mov	r0, r4
 801331e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013322:	3a30      	subs	r2, #48	; 0x30
 8013324:	2a09      	cmp	r2, #9
 8013326:	d903      	bls.n	8013330 <_svfiprintf_r+0x1a8>
 8013328:	2b00      	cmp	r3, #0
 801332a:	d0c5      	beq.n	80132b8 <_svfiprintf_r+0x130>
 801332c:	9105      	str	r1, [sp, #20]
 801332e:	e7c3      	b.n	80132b8 <_svfiprintf_r+0x130>
 8013330:	fb0c 2101 	mla	r1, ip, r1, r2
 8013334:	4604      	mov	r4, r0
 8013336:	2301      	movs	r3, #1
 8013338:	e7f0      	b.n	801331c <_svfiprintf_r+0x194>
 801333a:	ab03      	add	r3, sp, #12
 801333c:	9300      	str	r3, [sp, #0]
 801333e:	462a      	mov	r2, r5
 8013340:	4b0f      	ldr	r3, [pc, #60]	; (8013380 <_svfiprintf_r+0x1f8>)
 8013342:	a904      	add	r1, sp, #16
 8013344:	4638      	mov	r0, r7
 8013346:	f7fc f91d 	bl	800f584 <_printf_float>
 801334a:	1c42      	adds	r2, r0, #1
 801334c:	4606      	mov	r6, r0
 801334e:	d1d6      	bne.n	80132fe <_svfiprintf_r+0x176>
 8013350:	89ab      	ldrh	r3, [r5, #12]
 8013352:	065b      	lsls	r3, r3, #25
 8013354:	f53f af2c 	bmi.w	80131b0 <_svfiprintf_r+0x28>
 8013358:	9809      	ldr	r0, [sp, #36]	; 0x24
 801335a:	b01d      	add	sp, #116	; 0x74
 801335c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013360:	ab03      	add	r3, sp, #12
 8013362:	9300      	str	r3, [sp, #0]
 8013364:	462a      	mov	r2, r5
 8013366:	4b06      	ldr	r3, [pc, #24]	; (8013380 <_svfiprintf_r+0x1f8>)
 8013368:	a904      	add	r1, sp, #16
 801336a:	4638      	mov	r0, r7
 801336c:	f7fc fbae 	bl	800facc <_printf_i>
 8013370:	e7eb      	b.n	801334a <_svfiprintf_r+0x1c2>
 8013372:	bf00      	nop
 8013374:	0801504c 	.word	0x0801504c
 8013378:	08015056 	.word	0x08015056
 801337c:	0800f585 	.word	0x0800f585
 8013380:	080130d1 	.word	0x080130d1
 8013384:	08015052 	.word	0x08015052

08013388 <_sungetc_r>:
 8013388:	b538      	push	{r3, r4, r5, lr}
 801338a:	1c4b      	adds	r3, r1, #1
 801338c:	4614      	mov	r4, r2
 801338e:	d103      	bne.n	8013398 <_sungetc_r+0x10>
 8013390:	f04f 35ff 	mov.w	r5, #4294967295
 8013394:	4628      	mov	r0, r5
 8013396:	bd38      	pop	{r3, r4, r5, pc}
 8013398:	8993      	ldrh	r3, [r2, #12]
 801339a:	f023 0320 	bic.w	r3, r3, #32
 801339e:	8193      	strh	r3, [r2, #12]
 80133a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80133a2:	6852      	ldr	r2, [r2, #4]
 80133a4:	b2cd      	uxtb	r5, r1
 80133a6:	b18b      	cbz	r3, 80133cc <_sungetc_r+0x44>
 80133a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80133aa:	4293      	cmp	r3, r2
 80133ac:	dd08      	ble.n	80133c0 <_sungetc_r+0x38>
 80133ae:	6823      	ldr	r3, [r4, #0]
 80133b0:	1e5a      	subs	r2, r3, #1
 80133b2:	6022      	str	r2, [r4, #0]
 80133b4:	f803 5c01 	strb.w	r5, [r3, #-1]
 80133b8:	6863      	ldr	r3, [r4, #4]
 80133ba:	3301      	adds	r3, #1
 80133bc:	6063      	str	r3, [r4, #4]
 80133be:	e7e9      	b.n	8013394 <_sungetc_r+0xc>
 80133c0:	4621      	mov	r1, r4
 80133c2:	f000 fd49 	bl	8013e58 <__submore>
 80133c6:	2800      	cmp	r0, #0
 80133c8:	d0f1      	beq.n	80133ae <_sungetc_r+0x26>
 80133ca:	e7e1      	b.n	8013390 <_sungetc_r+0x8>
 80133cc:	6921      	ldr	r1, [r4, #16]
 80133ce:	6823      	ldr	r3, [r4, #0]
 80133d0:	b151      	cbz	r1, 80133e8 <_sungetc_r+0x60>
 80133d2:	4299      	cmp	r1, r3
 80133d4:	d208      	bcs.n	80133e8 <_sungetc_r+0x60>
 80133d6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80133da:	42a9      	cmp	r1, r5
 80133dc:	d104      	bne.n	80133e8 <_sungetc_r+0x60>
 80133de:	3b01      	subs	r3, #1
 80133e0:	3201      	adds	r2, #1
 80133e2:	6023      	str	r3, [r4, #0]
 80133e4:	6062      	str	r2, [r4, #4]
 80133e6:	e7d5      	b.n	8013394 <_sungetc_r+0xc>
 80133e8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80133ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80133f0:	6363      	str	r3, [r4, #52]	; 0x34
 80133f2:	2303      	movs	r3, #3
 80133f4:	63a3      	str	r3, [r4, #56]	; 0x38
 80133f6:	4623      	mov	r3, r4
 80133f8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80133fc:	6023      	str	r3, [r4, #0]
 80133fe:	2301      	movs	r3, #1
 8013400:	e7dc      	b.n	80133bc <_sungetc_r+0x34>

08013402 <__ssrefill_r>:
 8013402:	b510      	push	{r4, lr}
 8013404:	460c      	mov	r4, r1
 8013406:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8013408:	b169      	cbz	r1, 8013426 <__ssrefill_r+0x24>
 801340a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801340e:	4299      	cmp	r1, r3
 8013410:	d001      	beq.n	8013416 <__ssrefill_r+0x14>
 8013412:	f7ff fd7d 	bl	8012f10 <_free_r>
 8013416:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013418:	6063      	str	r3, [r4, #4]
 801341a:	2000      	movs	r0, #0
 801341c:	6360      	str	r0, [r4, #52]	; 0x34
 801341e:	b113      	cbz	r3, 8013426 <__ssrefill_r+0x24>
 8013420:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8013422:	6023      	str	r3, [r4, #0]
 8013424:	bd10      	pop	{r4, pc}
 8013426:	6923      	ldr	r3, [r4, #16]
 8013428:	6023      	str	r3, [r4, #0]
 801342a:	2300      	movs	r3, #0
 801342c:	6063      	str	r3, [r4, #4]
 801342e:	89a3      	ldrh	r3, [r4, #12]
 8013430:	f043 0320 	orr.w	r3, r3, #32
 8013434:	81a3      	strh	r3, [r4, #12]
 8013436:	f04f 30ff 	mov.w	r0, #4294967295
 801343a:	e7f3      	b.n	8013424 <__ssrefill_r+0x22>

0801343c <__ssvfiscanf_r>:
 801343c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013440:	460c      	mov	r4, r1
 8013442:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8013446:	2100      	movs	r1, #0
 8013448:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801344c:	49a6      	ldr	r1, [pc, #664]	; (80136e8 <__ssvfiscanf_r+0x2ac>)
 801344e:	91a0      	str	r1, [sp, #640]	; 0x280
 8013450:	f10d 0804 	add.w	r8, sp, #4
 8013454:	49a5      	ldr	r1, [pc, #660]	; (80136ec <__ssvfiscanf_r+0x2b0>)
 8013456:	4fa6      	ldr	r7, [pc, #664]	; (80136f0 <__ssvfiscanf_r+0x2b4>)
 8013458:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80136f4 <__ssvfiscanf_r+0x2b8>
 801345c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8013460:	4606      	mov	r6, r0
 8013462:	91a1      	str	r1, [sp, #644]	; 0x284
 8013464:	9300      	str	r3, [sp, #0]
 8013466:	7813      	ldrb	r3, [r2, #0]
 8013468:	2b00      	cmp	r3, #0
 801346a:	f000 815a 	beq.w	8013722 <__ssvfiscanf_r+0x2e6>
 801346e:	5dd9      	ldrb	r1, [r3, r7]
 8013470:	f011 0108 	ands.w	r1, r1, #8
 8013474:	f102 0501 	add.w	r5, r2, #1
 8013478:	d019      	beq.n	80134ae <__ssvfiscanf_r+0x72>
 801347a:	6863      	ldr	r3, [r4, #4]
 801347c:	2b00      	cmp	r3, #0
 801347e:	dd0f      	ble.n	80134a0 <__ssvfiscanf_r+0x64>
 8013480:	6823      	ldr	r3, [r4, #0]
 8013482:	781a      	ldrb	r2, [r3, #0]
 8013484:	5cba      	ldrb	r2, [r7, r2]
 8013486:	0712      	lsls	r2, r2, #28
 8013488:	d401      	bmi.n	801348e <__ssvfiscanf_r+0x52>
 801348a:	462a      	mov	r2, r5
 801348c:	e7eb      	b.n	8013466 <__ssvfiscanf_r+0x2a>
 801348e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8013490:	3201      	adds	r2, #1
 8013492:	9245      	str	r2, [sp, #276]	; 0x114
 8013494:	6862      	ldr	r2, [r4, #4]
 8013496:	3301      	adds	r3, #1
 8013498:	3a01      	subs	r2, #1
 801349a:	6062      	str	r2, [r4, #4]
 801349c:	6023      	str	r3, [r4, #0]
 801349e:	e7ec      	b.n	801347a <__ssvfiscanf_r+0x3e>
 80134a0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80134a2:	4621      	mov	r1, r4
 80134a4:	4630      	mov	r0, r6
 80134a6:	4798      	blx	r3
 80134a8:	2800      	cmp	r0, #0
 80134aa:	d0e9      	beq.n	8013480 <__ssvfiscanf_r+0x44>
 80134ac:	e7ed      	b.n	801348a <__ssvfiscanf_r+0x4e>
 80134ae:	2b25      	cmp	r3, #37	; 0x25
 80134b0:	d012      	beq.n	80134d8 <__ssvfiscanf_r+0x9c>
 80134b2:	469a      	mov	sl, r3
 80134b4:	6863      	ldr	r3, [r4, #4]
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	f340 8091 	ble.w	80135de <__ssvfiscanf_r+0x1a2>
 80134bc:	6822      	ldr	r2, [r4, #0]
 80134be:	7813      	ldrb	r3, [r2, #0]
 80134c0:	4553      	cmp	r3, sl
 80134c2:	f040 812e 	bne.w	8013722 <__ssvfiscanf_r+0x2e6>
 80134c6:	6863      	ldr	r3, [r4, #4]
 80134c8:	3b01      	subs	r3, #1
 80134ca:	6063      	str	r3, [r4, #4]
 80134cc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80134ce:	3201      	adds	r2, #1
 80134d0:	3301      	adds	r3, #1
 80134d2:	6022      	str	r2, [r4, #0]
 80134d4:	9345      	str	r3, [sp, #276]	; 0x114
 80134d6:	e7d8      	b.n	801348a <__ssvfiscanf_r+0x4e>
 80134d8:	9141      	str	r1, [sp, #260]	; 0x104
 80134da:	9143      	str	r1, [sp, #268]	; 0x10c
 80134dc:	7853      	ldrb	r3, [r2, #1]
 80134de:	2b2a      	cmp	r3, #42	; 0x2a
 80134e0:	bf02      	ittt	eq
 80134e2:	2310      	moveq	r3, #16
 80134e4:	1c95      	addeq	r5, r2, #2
 80134e6:	9341      	streq	r3, [sp, #260]	; 0x104
 80134e8:	220a      	movs	r2, #10
 80134ea:	46aa      	mov	sl, r5
 80134ec:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80134f0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80134f4:	2b09      	cmp	r3, #9
 80134f6:	d91d      	bls.n	8013534 <__ssvfiscanf_r+0xf8>
 80134f8:	487e      	ldr	r0, [pc, #504]	; (80136f4 <__ssvfiscanf_r+0x2b8>)
 80134fa:	2203      	movs	r2, #3
 80134fc:	f7ec fea0 	bl	8000240 <memchr>
 8013500:	b140      	cbz	r0, 8013514 <__ssvfiscanf_r+0xd8>
 8013502:	2301      	movs	r3, #1
 8013504:	eba0 0009 	sub.w	r0, r0, r9
 8013508:	fa03 f000 	lsl.w	r0, r3, r0
 801350c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801350e:	4318      	orrs	r0, r3
 8013510:	9041      	str	r0, [sp, #260]	; 0x104
 8013512:	4655      	mov	r5, sl
 8013514:	f815 3b01 	ldrb.w	r3, [r5], #1
 8013518:	2b78      	cmp	r3, #120	; 0x78
 801351a:	d806      	bhi.n	801352a <__ssvfiscanf_r+0xee>
 801351c:	2b57      	cmp	r3, #87	; 0x57
 801351e:	d810      	bhi.n	8013542 <__ssvfiscanf_r+0x106>
 8013520:	2b25      	cmp	r3, #37	; 0x25
 8013522:	d0c6      	beq.n	80134b2 <__ssvfiscanf_r+0x76>
 8013524:	d856      	bhi.n	80135d4 <__ssvfiscanf_r+0x198>
 8013526:	2b00      	cmp	r3, #0
 8013528:	d064      	beq.n	80135f4 <__ssvfiscanf_r+0x1b8>
 801352a:	2303      	movs	r3, #3
 801352c:	9347      	str	r3, [sp, #284]	; 0x11c
 801352e:	230a      	movs	r3, #10
 8013530:	9342      	str	r3, [sp, #264]	; 0x108
 8013532:	e071      	b.n	8013618 <__ssvfiscanf_r+0x1dc>
 8013534:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8013536:	fb02 1103 	mla	r1, r2, r3, r1
 801353a:	3930      	subs	r1, #48	; 0x30
 801353c:	9143      	str	r1, [sp, #268]	; 0x10c
 801353e:	4655      	mov	r5, sl
 8013540:	e7d3      	b.n	80134ea <__ssvfiscanf_r+0xae>
 8013542:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8013546:	2a20      	cmp	r2, #32
 8013548:	d8ef      	bhi.n	801352a <__ssvfiscanf_r+0xee>
 801354a:	a101      	add	r1, pc, #4	; (adr r1, 8013550 <__ssvfiscanf_r+0x114>)
 801354c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8013550:	08013603 	.word	0x08013603
 8013554:	0801352b 	.word	0x0801352b
 8013558:	0801352b 	.word	0x0801352b
 801355c:	08013661 	.word	0x08013661
 8013560:	0801352b 	.word	0x0801352b
 8013564:	0801352b 	.word	0x0801352b
 8013568:	0801352b 	.word	0x0801352b
 801356c:	0801352b 	.word	0x0801352b
 8013570:	0801352b 	.word	0x0801352b
 8013574:	0801352b 	.word	0x0801352b
 8013578:	0801352b 	.word	0x0801352b
 801357c:	08013677 	.word	0x08013677
 8013580:	0801364d 	.word	0x0801364d
 8013584:	080135db 	.word	0x080135db
 8013588:	080135db 	.word	0x080135db
 801358c:	080135db 	.word	0x080135db
 8013590:	0801352b 	.word	0x0801352b
 8013594:	08013651 	.word	0x08013651
 8013598:	0801352b 	.word	0x0801352b
 801359c:	0801352b 	.word	0x0801352b
 80135a0:	0801352b 	.word	0x0801352b
 80135a4:	0801352b 	.word	0x0801352b
 80135a8:	08013687 	.word	0x08013687
 80135ac:	08013659 	.word	0x08013659
 80135b0:	080135fb 	.word	0x080135fb
 80135b4:	0801352b 	.word	0x0801352b
 80135b8:	0801352b 	.word	0x0801352b
 80135bc:	08013683 	.word	0x08013683
 80135c0:	0801352b 	.word	0x0801352b
 80135c4:	0801364d 	.word	0x0801364d
 80135c8:	0801352b 	.word	0x0801352b
 80135cc:	0801352b 	.word	0x0801352b
 80135d0:	08013603 	.word	0x08013603
 80135d4:	3b45      	subs	r3, #69	; 0x45
 80135d6:	2b02      	cmp	r3, #2
 80135d8:	d8a7      	bhi.n	801352a <__ssvfiscanf_r+0xee>
 80135da:	2305      	movs	r3, #5
 80135dc:	e01b      	b.n	8013616 <__ssvfiscanf_r+0x1da>
 80135de:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80135e0:	4621      	mov	r1, r4
 80135e2:	4630      	mov	r0, r6
 80135e4:	4798      	blx	r3
 80135e6:	2800      	cmp	r0, #0
 80135e8:	f43f af68 	beq.w	80134bc <__ssvfiscanf_r+0x80>
 80135ec:	9844      	ldr	r0, [sp, #272]	; 0x110
 80135ee:	2800      	cmp	r0, #0
 80135f0:	f040 808d 	bne.w	801370e <__ssvfiscanf_r+0x2d2>
 80135f4:	f04f 30ff 	mov.w	r0, #4294967295
 80135f8:	e08f      	b.n	801371a <__ssvfiscanf_r+0x2de>
 80135fa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80135fc:	f042 0220 	orr.w	r2, r2, #32
 8013600:	9241      	str	r2, [sp, #260]	; 0x104
 8013602:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8013604:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013608:	9241      	str	r2, [sp, #260]	; 0x104
 801360a:	2210      	movs	r2, #16
 801360c:	2b6f      	cmp	r3, #111	; 0x6f
 801360e:	9242      	str	r2, [sp, #264]	; 0x108
 8013610:	bf34      	ite	cc
 8013612:	2303      	movcc	r3, #3
 8013614:	2304      	movcs	r3, #4
 8013616:	9347      	str	r3, [sp, #284]	; 0x11c
 8013618:	6863      	ldr	r3, [r4, #4]
 801361a:	2b00      	cmp	r3, #0
 801361c:	dd42      	ble.n	80136a4 <__ssvfiscanf_r+0x268>
 801361e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013620:	0659      	lsls	r1, r3, #25
 8013622:	d404      	bmi.n	801362e <__ssvfiscanf_r+0x1f2>
 8013624:	6823      	ldr	r3, [r4, #0]
 8013626:	781a      	ldrb	r2, [r3, #0]
 8013628:	5cba      	ldrb	r2, [r7, r2]
 801362a:	0712      	lsls	r2, r2, #28
 801362c:	d441      	bmi.n	80136b2 <__ssvfiscanf_r+0x276>
 801362e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8013630:	2b02      	cmp	r3, #2
 8013632:	dc50      	bgt.n	80136d6 <__ssvfiscanf_r+0x29a>
 8013634:	466b      	mov	r3, sp
 8013636:	4622      	mov	r2, r4
 8013638:	a941      	add	r1, sp, #260	; 0x104
 801363a:	4630      	mov	r0, r6
 801363c:	f000 f9d0 	bl	80139e0 <_scanf_chars>
 8013640:	2801      	cmp	r0, #1
 8013642:	d06e      	beq.n	8013722 <__ssvfiscanf_r+0x2e6>
 8013644:	2802      	cmp	r0, #2
 8013646:	f47f af20 	bne.w	801348a <__ssvfiscanf_r+0x4e>
 801364a:	e7cf      	b.n	80135ec <__ssvfiscanf_r+0x1b0>
 801364c:	220a      	movs	r2, #10
 801364e:	e7dd      	b.n	801360c <__ssvfiscanf_r+0x1d0>
 8013650:	2300      	movs	r3, #0
 8013652:	9342      	str	r3, [sp, #264]	; 0x108
 8013654:	2303      	movs	r3, #3
 8013656:	e7de      	b.n	8013616 <__ssvfiscanf_r+0x1da>
 8013658:	2308      	movs	r3, #8
 801365a:	9342      	str	r3, [sp, #264]	; 0x108
 801365c:	2304      	movs	r3, #4
 801365e:	e7da      	b.n	8013616 <__ssvfiscanf_r+0x1da>
 8013660:	4629      	mov	r1, r5
 8013662:	4640      	mov	r0, r8
 8013664:	f000 fb38 	bl	8013cd8 <__sccl>
 8013668:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801366a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801366e:	9341      	str	r3, [sp, #260]	; 0x104
 8013670:	4605      	mov	r5, r0
 8013672:	2301      	movs	r3, #1
 8013674:	e7cf      	b.n	8013616 <__ssvfiscanf_r+0x1da>
 8013676:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013678:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801367c:	9341      	str	r3, [sp, #260]	; 0x104
 801367e:	2300      	movs	r3, #0
 8013680:	e7c9      	b.n	8013616 <__ssvfiscanf_r+0x1da>
 8013682:	2302      	movs	r3, #2
 8013684:	e7c7      	b.n	8013616 <__ssvfiscanf_r+0x1da>
 8013686:	9841      	ldr	r0, [sp, #260]	; 0x104
 8013688:	06c3      	lsls	r3, r0, #27
 801368a:	f53f aefe 	bmi.w	801348a <__ssvfiscanf_r+0x4e>
 801368e:	9b00      	ldr	r3, [sp, #0]
 8013690:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8013692:	1d19      	adds	r1, r3, #4
 8013694:	9100      	str	r1, [sp, #0]
 8013696:	681b      	ldr	r3, [r3, #0]
 8013698:	f010 0f01 	tst.w	r0, #1
 801369c:	bf14      	ite	ne
 801369e:	801a      	strhne	r2, [r3, #0]
 80136a0:	601a      	streq	r2, [r3, #0]
 80136a2:	e6f2      	b.n	801348a <__ssvfiscanf_r+0x4e>
 80136a4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80136a6:	4621      	mov	r1, r4
 80136a8:	4630      	mov	r0, r6
 80136aa:	4798      	blx	r3
 80136ac:	2800      	cmp	r0, #0
 80136ae:	d0b6      	beq.n	801361e <__ssvfiscanf_r+0x1e2>
 80136b0:	e79c      	b.n	80135ec <__ssvfiscanf_r+0x1b0>
 80136b2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80136b4:	3201      	adds	r2, #1
 80136b6:	9245      	str	r2, [sp, #276]	; 0x114
 80136b8:	6862      	ldr	r2, [r4, #4]
 80136ba:	3a01      	subs	r2, #1
 80136bc:	2a00      	cmp	r2, #0
 80136be:	6062      	str	r2, [r4, #4]
 80136c0:	dd02      	ble.n	80136c8 <__ssvfiscanf_r+0x28c>
 80136c2:	3301      	adds	r3, #1
 80136c4:	6023      	str	r3, [r4, #0]
 80136c6:	e7ad      	b.n	8013624 <__ssvfiscanf_r+0x1e8>
 80136c8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80136ca:	4621      	mov	r1, r4
 80136cc:	4630      	mov	r0, r6
 80136ce:	4798      	blx	r3
 80136d0:	2800      	cmp	r0, #0
 80136d2:	d0a7      	beq.n	8013624 <__ssvfiscanf_r+0x1e8>
 80136d4:	e78a      	b.n	80135ec <__ssvfiscanf_r+0x1b0>
 80136d6:	2b04      	cmp	r3, #4
 80136d8:	dc0e      	bgt.n	80136f8 <__ssvfiscanf_r+0x2bc>
 80136da:	466b      	mov	r3, sp
 80136dc:	4622      	mov	r2, r4
 80136de:	a941      	add	r1, sp, #260	; 0x104
 80136e0:	4630      	mov	r0, r6
 80136e2:	f000 f9d7 	bl	8013a94 <_scanf_i>
 80136e6:	e7ab      	b.n	8013640 <__ssvfiscanf_r+0x204>
 80136e8:	08013389 	.word	0x08013389
 80136ec:	08013403 	.word	0x08013403
 80136f0:	08014d01 	.word	0x08014d01
 80136f4:	08015052 	.word	0x08015052
 80136f8:	4b0b      	ldr	r3, [pc, #44]	; (8013728 <__ssvfiscanf_r+0x2ec>)
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	f43f aec5 	beq.w	801348a <__ssvfiscanf_r+0x4e>
 8013700:	466b      	mov	r3, sp
 8013702:	4622      	mov	r2, r4
 8013704:	a941      	add	r1, sp, #260	; 0x104
 8013706:	4630      	mov	r0, r6
 8013708:	f7fc fb06 	bl	800fd18 <_scanf_float>
 801370c:	e798      	b.n	8013640 <__ssvfiscanf_r+0x204>
 801370e:	89a3      	ldrh	r3, [r4, #12]
 8013710:	f013 0f40 	tst.w	r3, #64	; 0x40
 8013714:	bf18      	it	ne
 8013716:	f04f 30ff 	movne.w	r0, #4294967295
 801371a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 801371e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013722:	9844      	ldr	r0, [sp, #272]	; 0x110
 8013724:	e7f9      	b.n	801371a <__ssvfiscanf_r+0x2de>
 8013726:	bf00      	nop
 8013728:	0800fd19 	.word	0x0800fd19

0801372c <__sfputc_r>:
 801372c:	6893      	ldr	r3, [r2, #8]
 801372e:	3b01      	subs	r3, #1
 8013730:	2b00      	cmp	r3, #0
 8013732:	b410      	push	{r4}
 8013734:	6093      	str	r3, [r2, #8]
 8013736:	da08      	bge.n	801374a <__sfputc_r+0x1e>
 8013738:	6994      	ldr	r4, [r2, #24]
 801373a:	42a3      	cmp	r3, r4
 801373c:	db01      	blt.n	8013742 <__sfputc_r+0x16>
 801373e:	290a      	cmp	r1, #10
 8013740:	d103      	bne.n	801374a <__sfputc_r+0x1e>
 8013742:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013746:	f000 bbc1 	b.w	8013ecc <__swbuf_r>
 801374a:	6813      	ldr	r3, [r2, #0]
 801374c:	1c58      	adds	r0, r3, #1
 801374e:	6010      	str	r0, [r2, #0]
 8013750:	7019      	strb	r1, [r3, #0]
 8013752:	4608      	mov	r0, r1
 8013754:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013758:	4770      	bx	lr

0801375a <__sfputs_r>:
 801375a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801375c:	4606      	mov	r6, r0
 801375e:	460f      	mov	r7, r1
 8013760:	4614      	mov	r4, r2
 8013762:	18d5      	adds	r5, r2, r3
 8013764:	42ac      	cmp	r4, r5
 8013766:	d101      	bne.n	801376c <__sfputs_r+0x12>
 8013768:	2000      	movs	r0, #0
 801376a:	e007      	b.n	801377c <__sfputs_r+0x22>
 801376c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013770:	463a      	mov	r2, r7
 8013772:	4630      	mov	r0, r6
 8013774:	f7ff ffda 	bl	801372c <__sfputc_r>
 8013778:	1c43      	adds	r3, r0, #1
 801377a:	d1f3      	bne.n	8013764 <__sfputs_r+0xa>
 801377c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013780 <_vfiprintf_r>:
 8013780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013784:	460d      	mov	r5, r1
 8013786:	b09d      	sub	sp, #116	; 0x74
 8013788:	4614      	mov	r4, r2
 801378a:	4698      	mov	r8, r3
 801378c:	4606      	mov	r6, r0
 801378e:	b118      	cbz	r0, 8013798 <_vfiprintf_r+0x18>
 8013790:	6983      	ldr	r3, [r0, #24]
 8013792:	b90b      	cbnz	r3, 8013798 <_vfiprintf_r+0x18>
 8013794:	f000 fd8a 	bl	80142ac <__sinit>
 8013798:	4b89      	ldr	r3, [pc, #548]	; (80139c0 <_vfiprintf_r+0x240>)
 801379a:	429d      	cmp	r5, r3
 801379c:	d11b      	bne.n	80137d6 <_vfiprintf_r+0x56>
 801379e:	6875      	ldr	r5, [r6, #4]
 80137a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80137a2:	07d9      	lsls	r1, r3, #31
 80137a4:	d405      	bmi.n	80137b2 <_vfiprintf_r+0x32>
 80137a6:	89ab      	ldrh	r3, [r5, #12]
 80137a8:	059a      	lsls	r2, r3, #22
 80137aa:	d402      	bmi.n	80137b2 <_vfiprintf_r+0x32>
 80137ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80137ae:	f000 fe1b 	bl	80143e8 <__retarget_lock_acquire_recursive>
 80137b2:	89ab      	ldrh	r3, [r5, #12]
 80137b4:	071b      	lsls	r3, r3, #28
 80137b6:	d501      	bpl.n	80137bc <_vfiprintf_r+0x3c>
 80137b8:	692b      	ldr	r3, [r5, #16]
 80137ba:	b9eb      	cbnz	r3, 80137f8 <_vfiprintf_r+0x78>
 80137bc:	4629      	mov	r1, r5
 80137be:	4630      	mov	r0, r6
 80137c0:	f000 fbe4 	bl	8013f8c <__swsetup_r>
 80137c4:	b1c0      	cbz	r0, 80137f8 <_vfiprintf_r+0x78>
 80137c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80137c8:	07dc      	lsls	r4, r3, #31
 80137ca:	d50e      	bpl.n	80137ea <_vfiprintf_r+0x6a>
 80137cc:	f04f 30ff 	mov.w	r0, #4294967295
 80137d0:	b01d      	add	sp, #116	; 0x74
 80137d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137d6:	4b7b      	ldr	r3, [pc, #492]	; (80139c4 <_vfiprintf_r+0x244>)
 80137d8:	429d      	cmp	r5, r3
 80137da:	d101      	bne.n	80137e0 <_vfiprintf_r+0x60>
 80137dc:	68b5      	ldr	r5, [r6, #8]
 80137de:	e7df      	b.n	80137a0 <_vfiprintf_r+0x20>
 80137e0:	4b79      	ldr	r3, [pc, #484]	; (80139c8 <_vfiprintf_r+0x248>)
 80137e2:	429d      	cmp	r5, r3
 80137e4:	bf08      	it	eq
 80137e6:	68f5      	ldreq	r5, [r6, #12]
 80137e8:	e7da      	b.n	80137a0 <_vfiprintf_r+0x20>
 80137ea:	89ab      	ldrh	r3, [r5, #12]
 80137ec:	0598      	lsls	r0, r3, #22
 80137ee:	d4ed      	bmi.n	80137cc <_vfiprintf_r+0x4c>
 80137f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80137f2:	f000 fdfa 	bl	80143ea <__retarget_lock_release_recursive>
 80137f6:	e7e9      	b.n	80137cc <_vfiprintf_r+0x4c>
 80137f8:	2300      	movs	r3, #0
 80137fa:	9309      	str	r3, [sp, #36]	; 0x24
 80137fc:	2320      	movs	r3, #32
 80137fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013802:	f8cd 800c 	str.w	r8, [sp, #12]
 8013806:	2330      	movs	r3, #48	; 0x30
 8013808:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80139cc <_vfiprintf_r+0x24c>
 801380c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013810:	f04f 0901 	mov.w	r9, #1
 8013814:	4623      	mov	r3, r4
 8013816:	469a      	mov	sl, r3
 8013818:	f813 2b01 	ldrb.w	r2, [r3], #1
 801381c:	b10a      	cbz	r2, 8013822 <_vfiprintf_r+0xa2>
 801381e:	2a25      	cmp	r2, #37	; 0x25
 8013820:	d1f9      	bne.n	8013816 <_vfiprintf_r+0x96>
 8013822:	ebba 0b04 	subs.w	fp, sl, r4
 8013826:	d00b      	beq.n	8013840 <_vfiprintf_r+0xc0>
 8013828:	465b      	mov	r3, fp
 801382a:	4622      	mov	r2, r4
 801382c:	4629      	mov	r1, r5
 801382e:	4630      	mov	r0, r6
 8013830:	f7ff ff93 	bl	801375a <__sfputs_r>
 8013834:	3001      	adds	r0, #1
 8013836:	f000 80aa 	beq.w	801398e <_vfiprintf_r+0x20e>
 801383a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801383c:	445a      	add	r2, fp
 801383e:	9209      	str	r2, [sp, #36]	; 0x24
 8013840:	f89a 3000 	ldrb.w	r3, [sl]
 8013844:	2b00      	cmp	r3, #0
 8013846:	f000 80a2 	beq.w	801398e <_vfiprintf_r+0x20e>
 801384a:	2300      	movs	r3, #0
 801384c:	f04f 32ff 	mov.w	r2, #4294967295
 8013850:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013854:	f10a 0a01 	add.w	sl, sl, #1
 8013858:	9304      	str	r3, [sp, #16]
 801385a:	9307      	str	r3, [sp, #28]
 801385c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013860:	931a      	str	r3, [sp, #104]	; 0x68
 8013862:	4654      	mov	r4, sl
 8013864:	2205      	movs	r2, #5
 8013866:	f814 1b01 	ldrb.w	r1, [r4], #1
 801386a:	4858      	ldr	r0, [pc, #352]	; (80139cc <_vfiprintf_r+0x24c>)
 801386c:	f7ec fce8 	bl	8000240 <memchr>
 8013870:	9a04      	ldr	r2, [sp, #16]
 8013872:	b9d8      	cbnz	r0, 80138ac <_vfiprintf_r+0x12c>
 8013874:	06d1      	lsls	r1, r2, #27
 8013876:	bf44      	itt	mi
 8013878:	2320      	movmi	r3, #32
 801387a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801387e:	0713      	lsls	r3, r2, #28
 8013880:	bf44      	itt	mi
 8013882:	232b      	movmi	r3, #43	; 0x2b
 8013884:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013888:	f89a 3000 	ldrb.w	r3, [sl]
 801388c:	2b2a      	cmp	r3, #42	; 0x2a
 801388e:	d015      	beq.n	80138bc <_vfiprintf_r+0x13c>
 8013890:	9a07      	ldr	r2, [sp, #28]
 8013892:	4654      	mov	r4, sl
 8013894:	2000      	movs	r0, #0
 8013896:	f04f 0c0a 	mov.w	ip, #10
 801389a:	4621      	mov	r1, r4
 801389c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80138a0:	3b30      	subs	r3, #48	; 0x30
 80138a2:	2b09      	cmp	r3, #9
 80138a4:	d94e      	bls.n	8013944 <_vfiprintf_r+0x1c4>
 80138a6:	b1b0      	cbz	r0, 80138d6 <_vfiprintf_r+0x156>
 80138a8:	9207      	str	r2, [sp, #28]
 80138aa:	e014      	b.n	80138d6 <_vfiprintf_r+0x156>
 80138ac:	eba0 0308 	sub.w	r3, r0, r8
 80138b0:	fa09 f303 	lsl.w	r3, r9, r3
 80138b4:	4313      	orrs	r3, r2
 80138b6:	9304      	str	r3, [sp, #16]
 80138b8:	46a2      	mov	sl, r4
 80138ba:	e7d2      	b.n	8013862 <_vfiprintf_r+0xe2>
 80138bc:	9b03      	ldr	r3, [sp, #12]
 80138be:	1d19      	adds	r1, r3, #4
 80138c0:	681b      	ldr	r3, [r3, #0]
 80138c2:	9103      	str	r1, [sp, #12]
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	bfbb      	ittet	lt
 80138c8:	425b      	neglt	r3, r3
 80138ca:	f042 0202 	orrlt.w	r2, r2, #2
 80138ce:	9307      	strge	r3, [sp, #28]
 80138d0:	9307      	strlt	r3, [sp, #28]
 80138d2:	bfb8      	it	lt
 80138d4:	9204      	strlt	r2, [sp, #16]
 80138d6:	7823      	ldrb	r3, [r4, #0]
 80138d8:	2b2e      	cmp	r3, #46	; 0x2e
 80138da:	d10c      	bne.n	80138f6 <_vfiprintf_r+0x176>
 80138dc:	7863      	ldrb	r3, [r4, #1]
 80138de:	2b2a      	cmp	r3, #42	; 0x2a
 80138e0:	d135      	bne.n	801394e <_vfiprintf_r+0x1ce>
 80138e2:	9b03      	ldr	r3, [sp, #12]
 80138e4:	1d1a      	adds	r2, r3, #4
 80138e6:	681b      	ldr	r3, [r3, #0]
 80138e8:	9203      	str	r2, [sp, #12]
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	bfb8      	it	lt
 80138ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80138f2:	3402      	adds	r4, #2
 80138f4:	9305      	str	r3, [sp, #20]
 80138f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80139dc <_vfiprintf_r+0x25c>
 80138fa:	7821      	ldrb	r1, [r4, #0]
 80138fc:	2203      	movs	r2, #3
 80138fe:	4650      	mov	r0, sl
 8013900:	f7ec fc9e 	bl	8000240 <memchr>
 8013904:	b140      	cbz	r0, 8013918 <_vfiprintf_r+0x198>
 8013906:	2340      	movs	r3, #64	; 0x40
 8013908:	eba0 000a 	sub.w	r0, r0, sl
 801390c:	fa03 f000 	lsl.w	r0, r3, r0
 8013910:	9b04      	ldr	r3, [sp, #16]
 8013912:	4303      	orrs	r3, r0
 8013914:	3401      	adds	r4, #1
 8013916:	9304      	str	r3, [sp, #16]
 8013918:	f814 1b01 	ldrb.w	r1, [r4], #1
 801391c:	482c      	ldr	r0, [pc, #176]	; (80139d0 <_vfiprintf_r+0x250>)
 801391e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013922:	2206      	movs	r2, #6
 8013924:	f7ec fc8c 	bl	8000240 <memchr>
 8013928:	2800      	cmp	r0, #0
 801392a:	d03f      	beq.n	80139ac <_vfiprintf_r+0x22c>
 801392c:	4b29      	ldr	r3, [pc, #164]	; (80139d4 <_vfiprintf_r+0x254>)
 801392e:	bb1b      	cbnz	r3, 8013978 <_vfiprintf_r+0x1f8>
 8013930:	9b03      	ldr	r3, [sp, #12]
 8013932:	3307      	adds	r3, #7
 8013934:	f023 0307 	bic.w	r3, r3, #7
 8013938:	3308      	adds	r3, #8
 801393a:	9303      	str	r3, [sp, #12]
 801393c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801393e:	443b      	add	r3, r7
 8013940:	9309      	str	r3, [sp, #36]	; 0x24
 8013942:	e767      	b.n	8013814 <_vfiprintf_r+0x94>
 8013944:	fb0c 3202 	mla	r2, ip, r2, r3
 8013948:	460c      	mov	r4, r1
 801394a:	2001      	movs	r0, #1
 801394c:	e7a5      	b.n	801389a <_vfiprintf_r+0x11a>
 801394e:	2300      	movs	r3, #0
 8013950:	3401      	adds	r4, #1
 8013952:	9305      	str	r3, [sp, #20]
 8013954:	4619      	mov	r1, r3
 8013956:	f04f 0c0a 	mov.w	ip, #10
 801395a:	4620      	mov	r0, r4
 801395c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013960:	3a30      	subs	r2, #48	; 0x30
 8013962:	2a09      	cmp	r2, #9
 8013964:	d903      	bls.n	801396e <_vfiprintf_r+0x1ee>
 8013966:	2b00      	cmp	r3, #0
 8013968:	d0c5      	beq.n	80138f6 <_vfiprintf_r+0x176>
 801396a:	9105      	str	r1, [sp, #20]
 801396c:	e7c3      	b.n	80138f6 <_vfiprintf_r+0x176>
 801396e:	fb0c 2101 	mla	r1, ip, r1, r2
 8013972:	4604      	mov	r4, r0
 8013974:	2301      	movs	r3, #1
 8013976:	e7f0      	b.n	801395a <_vfiprintf_r+0x1da>
 8013978:	ab03      	add	r3, sp, #12
 801397a:	9300      	str	r3, [sp, #0]
 801397c:	462a      	mov	r2, r5
 801397e:	4b16      	ldr	r3, [pc, #88]	; (80139d8 <_vfiprintf_r+0x258>)
 8013980:	a904      	add	r1, sp, #16
 8013982:	4630      	mov	r0, r6
 8013984:	f7fb fdfe 	bl	800f584 <_printf_float>
 8013988:	4607      	mov	r7, r0
 801398a:	1c78      	adds	r0, r7, #1
 801398c:	d1d6      	bne.n	801393c <_vfiprintf_r+0x1bc>
 801398e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013990:	07d9      	lsls	r1, r3, #31
 8013992:	d405      	bmi.n	80139a0 <_vfiprintf_r+0x220>
 8013994:	89ab      	ldrh	r3, [r5, #12]
 8013996:	059a      	lsls	r2, r3, #22
 8013998:	d402      	bmi.n	80139a0 <_vfiprintf_r+0x220>
 801399a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801399c:	f000 fd25 	bl	80143ea <__retarget_lock_release_recursive>
 80139a0:	89ab      	ldrh	r3, [r5, #12]
 80139a2:	065b      	lsls	r3, r3, #25
 80139a4:	f53f af12 	bmi.w	80137cc <_vfiprintf_r+0x4c>
 80139a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80139aa:	e711      	b.n	80137d0 <_vfiprintf_r+0x50>
 80139ac:	ab03      	add	r3, sp, #12
 80139ae:	9300      	str	r3, [sp, #0]
 80139b0:	462a      	mov	r2, r5
 80139b2:	4b09      	ldr	r3, [pc, #36]	; (80139d8 <_vfiprintf_r+0x258>)
 80139b4:	a904      	add	r1, sp, #16
 80139b6:	4630      	mov	r0, r6
 80139b8:	f7fc f888 	bl	800facc <_printf_i>
 80139bc:	e7e4      	b.n	8013988 <_vfiprintf_r+0x208>
 80139be:	bf00      	nop
 80139c0:	08015098 	.word	0x08015098
 80139c4:	080150b8 	.word	0x080150b8
 80139c8:	08015078 	.word	0x08015078
 80139cc:	0801504c 	.word	0x0801504c
 80139d0:	08015056 	.word	0x08015056
 80139d4:	0800f585 	.word	0x0800f585
 80139d8:	0801375b 	.word	0x0801375b
 80139dc:	08015052 	.word	0x08015052

080139e0 <_scanf_chars>:
 80139e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80139e4:	4615      	mov	r5, r2
 80139e6:	688a      	ldr	r2, [r1, #8]
 80139e8:	4680      	mov	r8, r0
 80139ea:	460c      	mov	r4, r1
 80139ec:	b932      	cbnz	r2, 80139fc <_scanf_chars+0x1c>
 80139ee:	698a      	ldr	r2, [r1, #24]
 80139f0:	2a00      	cmp	r2, #0
 80139f2:	bf0c      	ite	eq
 80139f4:	2201      	moveq	r2, #1
 80139f6:	f04f 32ff 	movne.w	r2, #4294967295
 80139fa:	608a      	str	r2, [r1, #8]
 80139fc:	6822      	ldr	r2, [r4, #0]
 80139fe:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8013a90 <_scanf_chars+0xb0>
 8013a02:	06d1      	lsls	r1, r2, #27
 8013a04:	bf5f      	itttt	pl
 8013a06:	681a      	ldrpl	r2, [r3, #0]
 8013a08:	1d11      	addpl	r1, r2, #4
 8013a0a:	6019      	strpl	r1, [r3, #0]
 8013a0c:	6816      	ldrpl	r6, [r2, #0]
 8013a0e:	2700      	movs	r7, #0
 8013a10:	69a0      	ldr	r0, [r4, #24]
 8013a12:	b188      	cbz	r0, 8013a38 <_scanf_chars+0x58>
 8013a14:	2801      	cmp	r0, #1
 8013a16:	d107      	bne.n	8013a28 <_scanf_chars+0x48>
 8013a18:	682a      	ldr	r2, [r5, #0]
 8013a1a:	7811      	ldrb	r1, [r2, #0]
 8013a1c:	6962      	ldr	r2, [r4, #20]
 8013a1e:	5c52      	ldrb	r2, [r2, r1]
 8013a20:	b952      	cbnz	r2, 8013a38 <_scanf_chars+0x58>
 8013a22:	2f00      	cmp	r7, #0
 8013a24:	d031      	beq.n	8013a8a <_scanf_chars+0xaa>
 8013a26:	e022      	b.n	8013a6e <_scanf_chars+0x8e>
 8013a28:	2802      	cmp	r0, #2
 8013a2a:	d120      	bne.n	8013a6e <_scanf_chars+0x8e>
 8013a2c:	682b      	ldr	r3, [r5, #0]
 8013a2e:	781b      	ldrb	r3, [r3, #0]
 8013a30:	f813 3009 	ldrb.w	r3, [r3, r9]
 8013a34:	071b      	lsls	r3, r3, #28
 8013a36:	d41a      	bmi.n	8013a6e <_scanf_chars+0x8e>
 8013a38:	6823      	ldr	r3, [r4, #0]
 8013a3a:	06da      	lsls	r2, r3, #27
 8013a3c:	bf5e      	ittt	pl
 8013a3e:	682b      	ldrpl	r3, [r5, #0]
 8013a40:	781b      	ldrbpl	r3, [r3, #0]
 8013a42:	f806 3b01 	strbpl.w	r3, [r6], #1
 8013a46:	682a      	ldr	r2, [r5, #0]
 8013a48:	686b      	ldr	r3, [r5, #4]
 8013a4a:	3201      	adds	r2, #1
 8013a4c:	602a      	str	r2, [r5, #0]
 8013a4e:	68a2      	ldr	r2, [r4, #8]
 8013a50:	3b01      	subs	r3, #1
 8013a52:	3a01      	subs	r2, #1
 8013a54:	606b      	str	r3, [r5, #4]
 8013a56:	3701      	adds	r7, #1
 8013a58:	60a2      	str	r2, [r4, #8]
 8013a5a:	b142      	cbz	r2, 8013a6e <_scanf_chars+0x8e>
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	dcd7      	bgt.n	8013a10 <_scanf_chars+0x30>
 8013a60:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013a64:	4629      	mov	r1, r5
 8013a66:	4640      	mov	r0, r8
 8013a68:	4798      	blx	r3
 8013a6a:	2800      	cmp	r0, #0
 8013a6c:	d0d0      	beq.n	8013a10 <_scanf_chars+0x30>
 8013a6e:	6823      	ldr	r3, [r4, #0]
 8013a70:	f013 0310 	ands.w	r3, r3, #16
 8013a74:	d105      	bne.n	8013a82 <_scanf_chars+0xa2>
 8013a76:	68e2      	ldr	r2, [r4, #12]
 8013a78:	3201      	adds	r2, #1
 8013a7a:	60e2      	str	r2, [r4, #12]
 8013a7c:	69a2      	ldr	r2, [r4, #24]
 8013a7e:	b102      	cbz	r2, 8013a82 <_scanf_chars+0xa2>
 8013a80:	7033      	strb	r3, [r6, #0]
 8013a82:	6923      	ldr	r3, [r4, #16]
 8013a84:	443b      	add	r3, r7
 8013a86:	6123      	str	r3, [r4, #16]
 8013a88:	2000      	movs	r0, #0
 8013a8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013a8e:	bf00      	nop
 8013a90:	08014d01 	.word	0x08014d01

08013a94 <_scanf_i>:
 8013a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a98:	4698      	mov	r8, r3
 8013a9a:	4b76      	ldr	r3, [pc, #472]	; (8013c74 <_scanf_i+0x1e0>)
 8013a9c:	460c      	mov	r4, r1
 8013a9e:	4682      	mov	sl, r0
 8013aa0:	4616      	mov	r6, r2
 8013aa2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013aa6:	b087      	sub	sp, #28
 8013aa8:	ab03      	add	r3, sp, #12
 8013aaa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013aae:	4b72      	ldr	r3, [pc, #456]	; (8013c78 <_scanf_i+0x1e4>)
 8013ab0:	69a1      	ldr	r1, [r4, #24]
 8013ab2:	4a72      	ldr	r2, [pc, #456]	; (8013c7c <_scanf_i+0x1e8>)
 8013ab4:	2903      	cmp	r1, #3
 8013ab6:	bf18      	it	ne
 8013ab8:	461a      	movne	r2, r3
 8013aba:	68a3      	ldr	r3, [r4, #8]
 8013abc:	9201      	str	r2, [sp, #4]
 8013abe:	1e5a      	subs	r2, r3, #1
 8013ac0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8013ac4:	bf88      	it	hi
 8013ac6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8013aca:	4627      	mov	r7, r4
 8013acc:	bf82      	ittt	hi
 8013ace:	eb03 0905 	addhi.w	r9, r3, r5
 8013ad2:	f240 135d 	movwhi	r3, #349	; 0x15d
 8013ad6:	60a3      	strhi	r3, [r4, #8]
 8013ad8:	f857 3b1c 	ldr.w	r3, [r7], #28
 8013adc:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8013ae0:	bf98      	it	ls
 8013ae2:	f04f 0900 	movls.w	r9, #0
 8013ae6:	6023      	str	r3, [r4, #0]
 8013ae8:	463d      	mov	r5, r7
 8013aea:	f04f 0b00 	mov.w	fp, #0
 8013aee:	6831      	ldr	r1, [r6, #0]
 8013af0:	ab03      	add	r3, sp, #12
 8013af2:	7809      	ldrb	r1, [r1, #0]
 8013af4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8013af8:	2202      	movs	r2, #2
 8013afa:	f7ec fba1 	bl	8000240 <memchr>
 8013afe:	b328      	cbz	r0, 8013b4c <_scanf_i+0xb8>
 8013b00:	f1bb 0f01 	cmp.w	fp, #1
 8013b04:	d159      	bne.n	8013bba <_scanf_i+0x126>
 8013b06:	6862      	ldr	r2, [r4, #4]
 8013b08:	b92a      	cbnz	r2, 8013b16 <_scanf_i+0x82>
 8013b0a:	6822      	ldr	r2, [r4, #0]
 8013b0c:	2308      	movs	r3, #8
 8013b0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013b12:	6063      	str	r3, [r4, #4]
 8013b14:	6022      	str	r2, [r4, #0]
 8013b16:	6822      	ldr	r2, [r4, #0]
 8013b18:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8013b1c:	6022      	str	r2, [r4, #0]
 8013b1e:	68a2      	ldr	r2, [r4, #8]
 8013b20:	1e51      	subs	r1, r2, #1
 8013b22:	60a1      	str	r1, [r4, #8]
 8013b24:	b192      	cbz	r2, 8013b4c <_scanf_i+0xb8>
 8013b26:	6832      	ldr	r2, [r6, #0]
 8013b28:	1c51      	adds	r1, r2, #1
 8013b2a:	6031      	str	r1, [r6, #0]
 8013b2c:	7812      	ldrb	r2, [r2, #0]
 8013b2e:	f805 2b01 	strb.w	r2, [r5], #1
 8013b32:	6872      	ldr	r2, [r6, #4]
 8013b34:	3a01      	subs	r2, #1
 8013b36:	2a00      	cmp	r2, #0
 8013b38:	6072      	str	r2, [r6, #4]
 8013b3a:	dc07      	bgt.n	8013b4c <_scanf_i+0xb8>
 8013b3c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8013b40:	4631      	mov	r1, r6
 8013b42:	4650      	mov	r0, sl
 8013b44:	4790      	blx	r2
 8013b46:	2800      	cmp	r0, #0
 8013b48:	f040 8085 	bne.w	8013c56 <_scanf_i+0x1c2>
 8013b4c:	f10b 0b01 	add.w	fp, fp, #1
 8013b50:	f1bb 0f03 	cmp.w	fp, #3
 8013b54:	d1cb      	bne.n	8013aee <_scanf_i+0x5a>
 8013b56:	6863      	ldr	r3, [r4, #4]
 8013b58:	b90b      	cbnz	r3, 8013b5e <_scanf_i+0xca>
 8013b5a:	230a      	movs	r3, #10
 8013b5c:	6063      	str	r3, [r4, #4]
 8013b5e:	6863      	ldr	r3, [r4, #4]
 8013b60:	4947      	ldr	r1, [pc, #284]	; (8013c80 <_scanf_i+0x1ec>)
 8013b62:	6960      	ldr	r0, [r4, #20]
 8013b64:	1ac9      	subs	r1, r1, r3
 8013b66:	f000 f8b7 	bl	8013cd8 <__sccl>
 8013b6a:	f04f 0b00 	mov.w	fp, #0
 8013b6e:	68a3      	ldr	r3, [r4, #8]
 8013b70:	6822      	ldr	r2, [r4, #0]
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	d03d      	beq.n	8013bf2 <_scanf_i+0x15e>
 8013b76:	6831      	ldr	r1, [r6, #0]
 8013b78:	6960      	ldr	r0, [r4, #20]
 8013b7a:	f891 c000 	ldrb.w	ip, [r1]
 8013b7e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8013b82:	2800      	cmp	r0, #0
 8013b84:	d035      	beq.n	8013bf2 <_scanf_i+0x15e>
 8013b86:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8013b8a:	d124      	bne.n	8013bd6 <_scanf_i+0x142>
 8013b8c:	0510      	lsls	r0, r2, #20
 8013b8e:	d522      	bpl.n	8013bd6 <_scanf_i+0x142>
 8013b90:	f10b 0b01 	add.w	fp, fp, #1
 8013b94:	f1b9 0f00 	cmp.w	r9, #0
 8013b98:	d003      	beq.n	8013ba2 <_scanf_i+0x10e>
 8013b9a:	3301      	adds	r3, #1
 8013b9c:	f109 39ff 	add.w	r9, r9, #4294967295
 8013ba0:	60a3      	str	r3, [r4, #8]
 8013ba2:	6873      	ldr	r3, [r6, #4]
 8013ba4:	3b01      	subs	r3, #1
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	6073      	str	r3, [r6, #4]
 8013baa:	dd1b      	ble.n	8013be4 <_scanf_i+0x150>
 8013bac:	6833      	ldr	r3, [r6, #0]
 8013bae:	3301      	adds	r3, #1
 8013bb0:	6033      	str	r3, [r6, #0]
 8013bb2:	68a3      	ldr	r3, [r4, #8]
 8013bb4:	3b01      	subs	r3, #1
 8013bb6:	60a3      	str	r3, [r4, #8]
 8013bb8:	e7d9      	b.n	8013b6e <_scanf_i+0xda>
 8013bba:	f1bb 0f02 	cmp.w	fp, #2
 8013bbe:	d1ae      	bne.n	8013b1e <_scanf_i+0x8a>
 8013bc0:	6822      	ldr	r2, [r4, #0]
 8013bc2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8013bc6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8013bca:	d1bf      	bne.n	8013b4c <_scanf_i+0xb8>
 8013bcc:	2310      	movs	r3, #16
 8013bce:	6063      	str	r3, [r4, #4]
 8013bd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8013bd4:	e7a2      	b.n	8013b1c <_scanf_i+0x88>
 8013bd6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8013bda:	6022      	str	r2, [r4, #0]
 8013bdc:	780b      	ldrb	r3, [r1, #0]
 8013bde:	f805 3b01 	strb.w	r3, [r5], #1
 8013be2:	e7de      	b.n	8013ba2 <_scanf_i+0x10e>
 8013be4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013be8:	4631      	mov	r1, r6
 8013bea:	4650      	mov	r0, sl
 8013bec:	4798      	blx	r3
 8013bee:	2800      	cmp	r0, #0
 8013bf0:	d0df      	beq.n	8013bb2 <_scanf_i+0x11e>
 8013bf2:	6823      	ldr	r3, [r4, #0]
 8013bf4:	05db      	lsls	r3, r3, #23
 8013bf6:	d50d      	bpl.n	8013c14 <_scanf_i+0x180>
 8013bf8:	42bd      	cmp	r5, r7
 8013bfa:	d909      	bls.n	8013c10 <_scanf_i+0x17c>
 8013bfc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8013c00:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013c04:	4632      	mov	r2, r6
 8013c06:	4650      	mov	r0, sl
 8013c08:	4798      	blx	r3
 8013c0a:	f105 39ff 	add.w	r9, r5, #4294967295
 8013c0e:	464d      	mov	r5, r9
 8013c10:	42bd      	cmp	r5, r7
 8013c12:	d02d      	beq.n	8013c70 <_scanf_i+0x1dc>
 8013c14:	6822      	ldr	r2, [r4, #0]
 8013c16:	f012 0210 	ands.w	r2, r2, #16
 8013c1a:	d113      	bne.n	8013c44 <_scanf_i+0x1b0>
 8013c1c:	702a      	strb	r2, [r5, #0]
 8013c1e:	6863      	ldr	r3, [r4, #4]
 8013c20:	9e01      	ldr	r6, [sp, #4]
 8013c22:	4639      	mov	r1, r7
 8013c24:	4650      	mov	r0, sl
 8013c26:	47b0      	blx	r6
 8013c28:	6821      	ldr	r1, [r4, #0]
 8013c2a:	f8d8 3000 	ldr.w	r3, [r8]
 8013c2e:	f011 0f20 	tst.w	r1, #32
 8013c32:	d013      	beq.n	8013c5c <_scanf_i+0x1c8>
 8013c34:	1d1a      	adds	r2, r3, #4
 8013c36:	f8c8 2000 	str.w	r2, [r8]
 8013c3a:	681b      	ldr	r3, [r3, #0]
 8013c3c:	6018      	str	r0, [r3, #0]
 8013c3e:	68e3      	ldr	r3, [r4, #12]
 8013c40:	3301      	adds	r3, #1
 8013c42:	60e3      	str	r3, [r4, #12]
 8013c44:	1bed      	subs	r5, r5, r7
 8013c46:	44ab      	add	fp, r5
 8013c48:	6925      	ldr	r5, [r4, #16]
 8013c4a:	445d      	add	r5, fp
 8013c4c:	6125      	str	r5, [r4, #16]
 8013c4e:	2000      	movs	r0, #0
 8013c50:	b007      	add	sp, #28
 8013c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c56:	f04f 0b00 	mov.w	fp, #0
 8013c5a:	e7ca      	b.n	8013bf2 <_scanf_i+0x15e>
 8013c5c:	1d1a      	adds	r2, r3, #4
 8013c5e:	f8c8 2000 	str.w	r2, [r8]
 8013c62:	681b      	ldr	r3, [r3, #0]
 8013c64:	f011 0f01 	tst.w	r1, #1
 8013c68:	bf14      	ite	ne
 8013c6a:	8018      	strhne	r0, [r3, #0]
 8013c6c:	6018      	streq	r0, [r3, #0]
 8013c6e:	e7e6      	b.n	8013c3e <_scanf_i+0x1aa>
 8013c70:	2001      	movs	r0, #1
 8013c72:	e7ed      	b.n	8013c50 <_scanf_i+0x1bc>
 8013c74:	08014ba0 	.word	0x08014ba0
 8013c78:	08013e55 	.word	0x08013e55
 8013c7c:	08011085 	.word	0x08011085
 8013c80:	08015076 	.word	0x08015076

08013c84 <_read_r>:
 8013c84:	b538      	push	{r3, r4, r5, lr}
 8013c86:	4d07      	ldr	r5, [pc, #28]	; (8013ca4 <_read_r+0x20>)
 8013c88:	4604      	mov	r4, r0
 8013c8a:	4608      	mov	r0, r1
 8013c8c:	4611      	mov	r1, r2
 8013c8e:	2200      	movs	r2, #0
 8013c90:	602a      	str	r2, [r5, #0]
 8013c92:	461a      	mov	r2, r3
 8013c94:	f7ee f9c0 	bl	8002018 <_read>
 8013c98:	1c43      	adds	r3, r0, #1
 8013c9a:	d102      	bne.n	8013ca2 <_read_r+0x1e>
 8013c9c:	682b      	ldr	r3, [r5, #0]
 8013c9e:	b103      	cbz	r3, 8013ca2 <_read_r+0x1e>
 8013ca0:	6023      	str	r3, [r4, #0]
 8013ca2:	bd38      	pop	{r3, r4, r5, pc}
 8013ca4:	20005624 	.word	0x20005624

08013ca8 <nan>:
 8013ca8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013cb0 <nan+0x8>
 8013cac:	4770      	bx	lr
 8013cae:	bf00      	nop
 8013cb0:	00000000 	.word	0x00000000
 8013cb4:	7ff80000 	.word	0x7ff80000

08013cb8 <_sbrk_r>:
 8013cb8:	b538      	push	{r3, r4, r5, lr}
 8013cba:	4d06      	ldr	r5, [pc, #24]	; (8013cd4 <_sbrk_r+0x1c>)
 8013cbc:	2300      	movs	r3, #0
 8013cbe:	4604      	mov	r4, r0
 8013cc0:	4608      	mov	r0, r1
 8013cc2:	602b      	str	r3, [r5, #0]
 8013cc4:	f7ee fa16 	bl	80020f4 <_sbrk>
 8013cc8:	1c43      	adds	r3, r0, #1
 8013cca:	d102      	bne.n	8013cd2 <_sbrk_r+0x1a>
 8013ccc:	682b      	ldr	r3, [r5, #0]
 8013cce:	b103      	cbz	r3, 8013cd2 <_sbrk_r+0x1a>
 8013cd0:	6023      	str	r3, [r4, #0]
 8013cd2:	bd38      	pop	{r3, r4, r5, pc}
 8013cd4:	20005624 	.word	0x20005624

08013cd8 <__sccl>:
 8013cd8:	b570      	push	{r4, r5, r6, lr}
 8013cda:	780b      	ldrb	r3, [r1, #0]
 8013cdc:	4604      	mov	r4, r0
 8013cde:	2b5e      	cmp	r3, #94	; 0x5e
 8013ce0:	bf0b      	itete	eq
 8013ce2:	784b      	ldrbeq	r3, [r1, #1]
 8013ce4:	1c48      	addne	r0, r1, #1
 8013ce6:	1c88      	addeq	r0, r1, #2
 8013ce8:	2200      	movne	r2, #0
 8013cea:	bf08      	it	eq
 8013cec:	2201      	moveq	r2, #1
 8013cee:	1e61      	subs	r1, r4, #1
 8013cf0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8013cf4:	f801 2f01 	strb.w	r2, [r1, #1]!
 8013cf8:	42a9      	cmp	r1, r5
 8013cfa:	d1fb      	bne.n	8013cf4 <__sccl+0x1c>
 8013cfc:	b90b      	cbnz	r3, 8013d02 <__sccl+0x2a>
 8013cfe:	3801      	subs	r0, #1
 8013d00:	bd70      	pop	{r4, r5, r6, pc}
 8013d02:	f082 0201 	eor.w	r2, r2, #1
 8013d06:	54e2      	strb	r2, [r4, r3]
 8013d08:	4605      	mov	r5, r0
 8013d0a:	4628      	mov	r0, r5
 8013d0c:	f810 1b01 	ldrb.w	r1, [r0], #1
 8013d10:	292d      	cmp	r1, #45	; 0x2d
 8013d12:	d006      	beq.n	8013d22 <__sccl+0x4a>
 8013d14:	295d      	cmp	r1, #93	; 0x5d
 8013d16:	d0f3      	beq.n	8013d00 <__sccl+0x28>
 8013d18:	b909      	cbnz	r1, 8013d1e <__sccl+0x46>
 8013d1a:	4628      	mov	r0, r5
 8013d1c:	e7f0      	b.n	8013d00 <__sccl+0x28>
 8013d1e:	460b      	mov	r3, r1
 8013d20:	e7f1      	b.n	8013d06 <__sccl+0x2e>
 8013d22:	786e      	ldrb	r6, [r5, #1]
 8013d24:	2e5d      	cmp	r6, #93	; 0x5d
 8013d26:	d0fa      	beq.n	8013d1e <__sccl+0x46>
 8013d28:	42b3      	cmp	r3, r6
 8013d2a:	dcf8      	bgt.n	8013d1e <__sccl+0x46>
 8013d2c:	3502      	adds	r5, #2
 8013d2e:	4619      	mov	r1, r3
 8013d30:	3101      	adds	r1, #1
 8013d32:	428e      	cmp	r6, r1
 8013d34:	5462      	strb	r2, [r4, r1]
 8013d36:	dcfb      	bgt.n	8013d30 <__sccl+0x58>
 8013d38:	1af1      	subs	r1, r6, r3
 8013d3a:	3901      	subs	r1, #1
 8013d3c:	1c58      	adds	r0, r3, #1
 8013d3e:	42b3      	cmp	r3, r6
 8013d40:	bfa8      	it	ge
 8013d42:	2100      	movge	r1, #0
 8013d44:	1843      	adds	r3, r0, r1
 8013d46:	e7e0      	b.n	8013d0a <__sccl+0x32>

08013d48 <strncmp>:
 8013d48:	b510      	push	{r4, lr}
 8013d4a:	b17a      	cbz	r2, 8013d6c <strncmp+0x24>
 8013d4c:	4603      	mov	r3, r0
 8013d4e:	3901      	subs	r1, #1
 8013d50:	1884      	adds	r4, r0, r2
 8013d52:	f813 0b01 	ldrb.w	r0, [r3], #1
 8013d56:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8013d5a:	4290      	cmp	r0, r2
 8013d5c:	d101      	bne.n	8013d62 <strncmp+0x1a>
 8013d5e:	42a3      	cmp	r3, r4
 8013d60:	d101      	bne.n	8013d66 <strncmp+0x1e>
 8013d62:	1a80      	subs	r0, r0, r2
 8013d64:	bd10      	pop	{r4, pc}
 8013d66:	2800      	cmp	r0, #0
 8013d68:	d1f3      	bne.n	8013d52 <strncmp+0xa>
 8013d6a:	e7fa      	b.n	8013d62 <strncmp+0x1a>
 8013d6c:	4610      	mov	r0, r2
 8013d6e:	e7f9      	b.n	8013d64 <strncmp+0x1c>

08013d70 <_strtoul_l.constprop.0>:
 8013d70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013d74:	4f36      	ldr	r7, [pc, #216]	; (8013e50 <_strtoul_l.constprop.0+0xe0>)
 8013d76:	4686      	mov	lr, r0
 8013d78:	460d      	mov	r5, r1
 8013d7a:	4628      	mov	r0, r5
 8013d7c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013d80:	5de6      	ldrb	r6, [r4, r7]
 8013d82:	f016 0608 	ands.w	r6, r6, #8
 8013d86:	d1f8      	bne.n	8013d7a <_strtoul_l.constprop.0+0xa>
 8013d88:	2c2d      	cmp	r4, #45	; 0x2d
 8013d8a:	d12f      	bne.n	8013dec <_strtoul_l.constprop.0+0x7c>
 8013d8c:	782c      	ldrb	r4, [r5, #0]
 8013d8e:	2601      	movs	r6, #1
 8013d90:	1c85      	adds	r5, r0, #2
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	d057      	beq.n	8013e46 <_strtoul_l.constprop.0+0xd6>
 8013d96:	2b10      	cmp	r3, #16
 8013d98:	d109      	bne.n	8013dae <_strtoul_l.constprop.0+0x3e>
 8013d9a:	2c30      	cmp	r4, #48	; 0x30
 8013d9c:	d107      	bne.n	8013dae <_strtoul_l.constprop.0+0x3e>
 8013d9e:	7828      	ldrb	r0, [r5, #0]
 8013da0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8013da4:	2858      	cmp	r0, #88	; 0x58
 8013da6:	d149      	bne.n	8013e3c <_strtoul_l.constprop.0+0xcc>
 8013da8:	786c      	ldrb	r4, [r5, #1]
 8013daa:	2310      	movs	r3, #16
 8013dac:	3502      	adds	r5, #2
 8013dae:	f04f 38ff 	mov.w	r8, #4294967295
 8013db2:	2700      	movs	r7, #0
 8013db4:	fbb8 f8f3 	udiv	r8, r8, r3
 8013db8:	fb03 f908 	mul.w	r9, r3, r8
 8013dbc:	ea6f 0909 	mvn.w	r9, r9
 8013dc0:	4638      	mov	r0, r7
 8013dc2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8013dc6:	f1bc 0f09 	cmp.w	ip, #9
 8013dca:	d814      	bhi.n	8013df6 <_strtoul_l.constprop.0+0x86>
 8013dcc:	4664      	mov	r4, ip
 8013dce:	42a3      	cmp	r3, r4
 8013dd0:	dd22      	ble.n	8013e18 <_strtoul_l.constprop.0+0xa8>
 8013dd2:	2f00      	cmp	r7, #0
 8013dd4:	db1d      	blt.n	8013e12 <_strtoul_l.constprop.0+0xa2>
 8013dd6:	4580      	cmp	r8, r0
 8013dd8:	d31b      	bcc.n	8013e12 <_strtoul_l.constprop.0+0xa2>
 8013dda:	d101      	bne.n	8013de0 <_strtoul_l.constprop.0+0x70>
 8013ddc:	45a1      	cmp	r9, r4
 8013dde:	db18      	blt.n	8013e12 <_strtoul_l.constprop.0+0xa2>
 8013de0:	fb00 4003 	mla	r0, r0, r3, r4
 8013de4:	2701      	movs	r7, #1
 8013de6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013dea:	e7ea      	b.n	8013dc2 <_strtoul_l.constprop.0+0x52>
 8013dec:	2c2b      	cmp	r4, #43	; 0x2b
 8013dee:	bf04      	itt	eq
 8013df0:	782c      	ldrbeq	r4, [r5, #0]
 8013df2:	1c85      	addeq	r5, r0, #2
 8013df4:	e7cd      	b.n	8013d92 <_strtoul_l.constprop.0+0x22>
 8013df6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8013dfa:	f1bc 0f19 	cmp.w	ip, #25
 8013dfe:	d801      	bhi.n	8013e04 <_strtoul_l.constprop.0+0x94>
 8013e00:	3c37      	subs	r4, #55	; 0x37
 8013e02:	e7e4      	b.n	8013dce <_strtoul_l.constprop.0+0x5e>
 8013e04:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8013e08:	f1bc 0f19 	cmp.w	ip, #25
 8013e0c:	d804      	bhi.n	8013e18 <_strtoul_l.constprop.0+0xa8>
 8013e0e:	3c57      	subs	r4, #87	; 0x57
 8013e10:	e7dd      	b.n	8013dce <_strtoul_l.constprop.0+0x5e>
 8013e12:	f04f 37ff 	mov.w	r7, #4294967295
 8013e16:	e7e6      	b.n	8013de6 <_strtoul_l.constprop.0+0x76>
 8013e18:	2f00      	cmp	r7, #0
 8013e1a:	da07      	bge.n	8013e2c <_strtoul_l.constprop.0+0xbc>
 8013e1c:	2322      	movs	r3, #34	; 0x22
 8013e1e:	f8ce 3000 	str.w	r3, [lr]
 8013e22:	f04f 30ff 	mov.w	r0, #4294967295
 8013e26:	b932      	cbnz	r2, 8013e36 <_strtoul_l.constprop.0+0xc6>
 8013e28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013e2c:	b106      	cbz	r6, 8013e30 <_strtoul_l.constprop.0+0xc0>
 8013e2e:	4240      	negs	r0, r0
 8013e30:	2a00      	cmp	r2, #0
 8013e32:	d0f9      	beq.n	8013e28 <_strtoul_l.constprop.0+0xb8>
 8013e34:	b107      	cbz	r7, 8013e38 <_strtoul_l.constprop.0+0xc8>
 8013e36:	1e69      	subs	r1, r5, #1
 8013e38:	6011      	str	r1, [r2, #0]
 8013e3a:	e7f5      	b.n	8013e28 <_strtoul_l.constprop.0+0xb8>
 8013e3c:	2430      	movs	r4, #48	; 0x30
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	d1b5      	bne.n	8013dae <_strtoul_l.constprop.0+0x3e>
 8013e42:	2308      	movs	r3, #8
 8013e44:	e7b3      	b.n	8013dae <_strtoul_l.constprop.0+0x3e>
 8013e46:	2c30      	cmp	r4, #48	; 0x30
 8013e48:	d0a9      	beq.n	8013d9e <_strtoul_l.constprop.0+0x2e>
 8013e4a:	230a      	movs	r3, #10
 8013e4c:	e7af      	b.n	8013dae <_strtoul_l.constprop.0+0x3e>
 8013e4e:	bf00      	nop
 8013e50:	08014d01 	.word	0x08014d01

08013e54 <_strtoul_r>:
 8013e54:	f7ff bf8c 	b.w	8013d70 <_strtoul_l.constprop.0>

08013e58 <__submore>:
 8013e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e5c:	460c      	mov	r4, r1
 8013e5e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8013e60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013e64:	4299      	cmp	r1, r3
 8013e66:	d11d      	bne.n	8013ea4 <__submore+0x4c>
 8013e68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8013e6c:	f7ff f8bc 	bl	8012fe8 <_malloc_r>
 8013e70:	b918      	cbnz	r0, 8013e7a <__submore+0x22>
 8013e72:	f04f 30ff 	mov.w	r0, #4294967295
 8013e76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013e7e:	63a3      	str	r3, [r4, #56]	; 0x38
 8013e80:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8013e84:	6360      	str	r0, [r4, #52]	; 0x34
 8013e86:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8013e8a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8013e8e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8013e92:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8013e96:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8013e9a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8013e9e:	6020      	str	r0, [r4, #0]
 8013ea0:	2000      	movs	r0, #0
 8013ea2:	e7e8      	b.n	8013e76 <__submore+0x1e>
 8013ea4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8013ea6:	0077      	lsls	r7, r6, #1
 8013ea8:	463a      	mov	r2, r7
 8013eaa:	f000 fb2b 	bl	8014504 <_realloc_r>
 8013eae:	4605      	mov	r5, r0
 8013eb0:	2800      	cmp	r0, #0
 8013eb2:	d0de      	beq.n	8013e72 <__submore+0x1a>
 8013eb4:	eb00 0806 	add.w	r8, r0, r6
 8013eb8:	4601      	mov	r1, r0
 8013eba:	4632      	mov	r2, r6
 8013ebc:	4640      	mov	r0, r8
 8013ebe:	f7fb faab 	bl	800f418 <memcpy>
 8013ec2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8013ec6:	f8c4 8000 	str.w	r8, [r4]
 8013eca:	e7e9      	b.n	8013ea0 <__submore+0x48>

08013ecc <__swbuf_r>:
 8013ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ece:	460e      	mov	r6, r1
 8013ed0:	4614      	mov	r4, r2
 8013ed2:	4605      	mov	r5, r0
 8013ed4:	b118      	cbz	r0, 8013ede <__swbuf_r+0x12>
 8013ed6:	6983      	ldr	r3, [r0, #24]
 8013ed8:	b90b      	cbnz	r3, 8013ede <__swbuf_r+0x12>
 8013eda:	f000 f9e7 	bl	80142ac <__sinit>
 8013ede:	4b21      	ldr	r3, [pc, #132]	; (8013f64 <__swbuf_r+0x98>)
 8013ee0:	429c      	cmp	r4, r3
 8013ee2:	d12b      	bne.n	8013f3c <__swbuf_r+0x70>
 8013ee4:	686c      	ldr	r4, [r5, #4]
 8013ee6:	69a3      	ldr	r3, [r4, #24]
 8013ee8:	60a3      	str	r3, [r4, #8]
 8013eea:	89a3      	ldrh	r3, [r4, #12]
 8013eec:	071a      	lsls	r2, r3, #28
 8013eee:	d52f      	bpl.n	8013f50 <__swbuf_r+0x84>
 8013ef0:	6923      	ldr	r3, [r4, #16]
 8013ef2:	b36b      	cbz	r3, 8013f50 <__swbuf_r+0x84>
 8013ef4:	6923      	ldr	r3, [r4, #16]
 8013ef6:	6820      	ldr	r0, [r4, #0]
 8013ef8:	1ac0      	subs	r0, r0, r3
 8013efa:	6963      	ldr	r3, [r4, #20]
 8013efc:	b2f6      	uxtb	r6, r6
 8013efe:	4283      	cmp	r3, r0
 8013f00:	4637      	mov	r7, r6
 8013f02:	dc04      	bgt.n	8013f0e <__swbuf_r+0x42>
 8013f04:	4621      	mov	r1, r4
 8013f06:	4628      	mov	r0, r5
 8013f08:	f000 f93c 	bl	8014184 <_fflush_r>
 8013f0c:	bb30      	cbnz	r0, 8013f5c <__swbuf_r+0x90>
 8013f0e:	68a3      	ldr	r3, [r4, #8]
 8013f10:	3b01      	subs	r3, #1
 8013f12:	60a3      	str	r3, [r4, #8]
 8013f14:	6823      	ldr	r3, [r4, #0]
 8013f16:	1c5a      	adds	r2, r3, #1
 8013f18:	6022      	str	r2, [r4, #0]
 8013f1a:	701e      	strb	r6, [r3, #0]
 8013f1c:	6963      	ldr	r3, [r4, #20]
 8013f1e:	3001      	adds	r0, #1
 8013f20:	4283      	cmp	r3, r0
 8013f22:	d004      	beq.n	8013f2e <__swbuf_r+0x62>
 8013f24:	89a3      	ldrh	r3, [r4, #12]
 8013f26:	07db      	lsls	r3, r3, #31
 8013f28:	d506      	bpl.n	8013f38 <__swbuf_r+0x6c>
 8013f2a:	2e0a      	cmp	r6, #10
 8013f2c:	d104      	bne.n	8013f38 <__swbuf_r+0x6c>
 8013f2e:	4621      	mov	r1, r4
 8013f30:	4628      	mov	r0, r5
 8013f32:	f000 f927 	bl	8014184 <_fflush_r>
 8013f36:	b988      	cbnz	r0, 8013f5c <__swbuf_r+0x90>
 8013f38:	4638      	mov	r0, r7
 8013f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013f3c:	4b0a      	ldr	r3, [pc, #40]	; (8013f68 <__swbuf_r+0x9c>)
 8013f3e:	429c      	cmp	r4, r3
 8013f40:	d101      	bne.n	8013f46 <__swbuf_r+0x7a>
 8013f42:	68ac      	ldr	r4, [r5, #8]
 8013f44:	e7cf      	b.n	8013ee6 <__swbuf_r+0x1a>
 8013f46:	4b09      	ldr	r3, [pc, #36]	; (8013f6c <__swbuf_r+0xa0>)
 8013f48:	429c      	cmp	r4, r3
 8013f4a:	bf08      	it	eq
 8013f4c:	68ec      	ldreq	r4, [r5, #12]
 8013f4e:	e7ca      	b.n	8013ee6 <__swbuf_r+0x1a>
 8013f50:	4621      	mov	r1, r4
 8013f52:	4628      	mov	r0, r5
 8013f54:	f000 f81a 	bl	8013f8c <__swsetup_r>
 8013f58:	2800      	cmp	r0, #0
 8013f5a:	d0cb      	beq.n	8013ef4 <__swbuf_r+0x28>
 8013f5c:	f04f 37ff 	mov.w	r7, #4294967295
 8013f60:	e7ea      	b.n	8013f38 <__swbuf_r+0x6c>
 8013f62:	bf00      	nop
 8013f64:	08015098 	.word	0x08015098
 8013f68:	080150b8 	.word	0x080150b8
 8013f6c:	08015078 	.word	0x08015078

08013f70 <__ascii_wctomb>:
 8013f70:	b149      	cbz	r1, 8013f86 <__ascii_wctomb+0x16>
 8013f72:	2aff      	cmp	r2, #255	; 0xff
 8013f74:	bf85      	ittet	hi
 8013f76:	238a      	movhi	r3, #138	; 0x8a
 8013f78:	6003      	strhi	r3, [r0, #0]
 8013f7a:	700a      	strbls	r2, [r1, #0]
 8013f7c:	f04f 30ff 	movhi.w	r0, #4294967295
 8013f80:	bf98      	it	ls
 8013f82:	2001      	movls	r0, #1
 8013f84:	4770      	bx	lr
 8013f86:	4608      	mov	r0, r1
 8013f88:	4770      	bx	lr
	...

08013f8c <__swsetup_r>:
 8013f8c:	4b32      	ldr	r3, [pc, #200]	; (8014058 <__swsetup_r+0xcc>)
 8013f8e:	b570      	push	{r4, r5, r6, lr}
 8013f90:	681d      	ldr	r5, [r3, #0]
 8013f92:	4606      	mov	r6, r0
 8013f94:	460c      	mov	r4, r1
 8013f96:	b125      	cbz	r5, 8013fa2 <__swsetup_r+0x16>
 8013f98:	69ab      	ldr	r3, [r5, #24]
 8013f9a:	b913      	cbnz	r3, 8013fa2 <__swsetup_r+0x16>
 8013f9c:	4628      	mov	r0, r5
 8013f9e:	f000 f985 	bl	80142ac <__sinit>
 8013fa2:	4b2e      	ldr	r3, [pc, #184]	; (801405c <__swsetup_r+0xd0>)
 8013fa4:	429c      	cmp	r4, r3
 8013fa6:	d10f      	bne.n	8013fc8 <__swsetup_r+0x3c>
 8013fa8:	686c      	ldr	r4, [r5, #4]
 8013faa:	89a3      	ldrh	r3, [r4, #12]
 8013fac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013fb0:	0719      	lsls	r1, r3, #28
 8013fb2:	d42c      	bmi.n	801400e <__swsetup_r+0x82>
 8013fb4:	06dd      	lsls	r5, r3, #27
 8013fb6:	d411      	bmi.n	8013fdc <__swsetup_r+0x50>
 8013fb8:	2309      	movs	r3, #9
 8013fba:	6033      	str	r3, [r6, #0]
 8013fbc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013fc0:	81a3      	strh	r3, [r4, #12]
 8013fc2:	f04f 30ff 	mov.w	r0, #4294967295
 8013fc6:	e03e      	b.n	8014046 <__swsetup_r+0xba>
 8013fc8:	4b25      	ldr	r3, [pc, #148]	; (8014060 <__swsetup_r+0xd4>)
 8013fca:	429c      	cmp	r4, r3
 8013fcc:	d101      	bne.n	8013fd2 <__swsetup_r+0x46>
 8013fce:	68ac      	ldr	r4, [r5, #8]
 8013fd0:	e7eb      	b.n	8013faa <__swsetup_r+0x1e>
 8013fd2:	4b24      	ldr	r3, [pc, #144]	; (8014064 <__swsetup_r+0xd8>)
 8013fd4:	429c      	cmp	r4, r3
 8013fd6:	bf08      	it	eq
 8013fd8:	68ec      	ldreq	r4, [r5, #12]
 8013fda:	e7e6      	b.n	8013faa <__swsetup_r+0x1e>
 8013fdc:	0758      	lsls	r0, r3, #29
 8013fde:	d512      	bpl.n	8014006 <__swsetup_r+0x7a>
 8013fe0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013fe2:	b141      	cbz	r1, 8013ff6 <__swsetup_r+0x6a>
 8013fe4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013fe8:	4299      	cmp	r1, r3
 8013fea:	d002      	beq.n	8013ff2 <__swsetup_r+0x66>
 8013fec:	4630      	mov	r0, r6
 8013fee:	f7fe ff8f 	bl	8012f10 <_free_r>
 8013ff2:	2300      	movs	r3, #0
 8013ff4:	6363      	str	r3, [r4, #52]	; 0x34
 8013ff6:	89a3      	ldrh	r3, [r4, #12]
 8013ff8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013ffc:	81a3      	strh	r3, [r4, #12]
 8013ffe:	2300      	movs	r3, #0
 8014000:	6063      	str	r3, [r4, #4]
 8014002:	6923      	ldr	r3, [r4, #16]
 8014004:	6023      	str	r3, [r4, #0]
 8014006:	89a3      	ldrh	r3, [r4, #12]
 8014008:	f043 0308 	orr.w	r3, r3, #8
 801400c:	81a3      	strh	r3, [r4, #12]
 801400e:	6923      	ldr	r3, [r4, #16]
 8014010:	b94b      	cbnz	r3, 8014026 <__swsetup_r+0x9a>
 8014012:	89a3      	ldrh	r3, [r4, #12]
 8014014:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014018:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801401c:	d003      	beq.n	8014026 <__swsetup_r+0x9a>
 801401e:	4621      	mov	r1, r4
 8014020:	4630      	mov	r0, r6
 8014022:	f000 fa09 	bl	8014438 <__smakebuf_r>
 8014026:	89a0      	ldrh	r0, [r4, #12]
 8014028:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801402c:	f010 0301 	ands.w	r3, r0, #1
 8014030:	d00a      	beq.n	8014048 <__swsetup_r+0xbc>
 8014032:	2300      	movs	r3, #0
 8014034:	60a3      	str	r3, [r4, #8]
 8014036:	6963      	ldr	r3, [r4, #20]
 8014038:	425b      	negs	r3, r3
 801403a:	61a3      	str	r3, [r4, #24]
 801403c:	6923      	ldr	r3, [r4, #16]
 801403e:	b943      	cbnz	r3, 8014052 <__swsetup_r+0xc6>
 8014040:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014044:	d1ba      	bne.n	8013fbc <__swsetup_r+0x30>
 8014046:	bd70      	pop	{r4, r5, r6, pc}
 8014048:	0781      	lsls	r1, r0, #30
 801404a:	bf58      	it	pl
 801404c:	6963      	ldrpl	r3, [r4, #20]
 801404e:	60a3      	str	r3, [r4, #8]
 8014050:	e7f4      	b.n	801403c <__swsetup_r+0xb0>
 8014052:	2000      	movs	r0, #0
 8014054:	e7f7      	b.n	8014046 <__swsetup_r+0xba>
 8014056:	bf00      	nop
 8014058:	200002ec 	.word	0x200002ec
 801405c:	08015098 	.word	0x08015098
 8014060:	080150b8 	.word	0x080150b8
 8014064:	08015078 	.word	0x08015078

08014068 <abort>:
 8014068:	b508      	push	{r3, lr}
 801406a:	2006      	movs	r0, #6
 801406c:	f000 faa2 	bl	80145b4 <raise>
 8014070:	2001      	movs	r0, #1
 8014072:	f7ed ffc7 	bl	8002004 <_exit>
	...

08014078 <__sflush_r>:
 8014078:	898a      	ldrh	r2, [r1, #12]
 801407a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801407e:	4605      	mov	r5, r0
 8014080:	0710      	lsls	r0, r2, #28
 8014082:	460c      	mov	r4, r1
 8014084:	d458      	bmi.n	8014138 <__sflush_r+0xc0>
 8014086:	684b      	ldr	r3, [r1, #4]
 8014088:	2b00      	cmp	r3, #0
 801408a:	dc05      	bgt.n	8014098 <__sflush_r+0x20>
 801408c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801408e:	2b00      	cmp	r3, #0
 8014090:	dc02      	bgt.n	8014098 <__sflush_r+0x20>
 8014092:	2000      	movs	r0, #0
 8014094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014098:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801409a:	2e00      	cmp	r6, #0
 801409c:	d0f9      	beq.n	8014092 <__sflush_r+0x1a>
 801409e:	2300      	movs	r3, #0
 80140a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80140a4:	682f      	ldr	r7, [r5, #0]
 80140a6:	602b      	str	r3, [r5, #0]
 80140a8:	d032      	beq.n	8014110 <__sflush_r+0x98>
 80140aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80140ac:	89a3      	ldrh	r3, [r4, #12]
 80140ae:	075a      	lsls	r2, r3, #29
 80140b0:	d505      	bpl.n	80140be <__sflush_r+0x46>
 80140b2:	6863      	ldr	r3, [r4, #4]
 80140b4:	1ac0      	subs	r0, r0, r3
 80140b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80140b8:	b10b      	cbz	r3, 80140be <__sflush_r+0x46>
 80140ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80140bc:	1ac0      	subs	r0, r0, r3
 80140be:	2300      	movs	r3, #0
 80140c0:	4602      	mov	r2, r0
 80140c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80140c4:	6a21      	ldr	r1, [r4, #32]
 80140c6:	4628      	mov	r0, r5
 80140c8:	47b0      	blx	r6
 80140ca:	1c43      	adds	r3, r0, #1
 80140cc:	89a3      	ldrh	r3, [r4, #12]
 80140ce:	d106      	bne.n	80140de <__sflush_r+0x66>
 80140d0:	6829      	ldr	r1, [r5, #0]
 80140d2:	291d      	cmp	r1, #29
 80140d4:	d82c      	bhi.n	8014130 <__sflush_r+0xb8>
 80140d6:	4a2a      	ldr	r2, [pc, #168]	; (8014180 <__sflush_r+0x108>)
 80140d8:	40ca      	lsrs	r2, r1
 80140da:	07d6      	lsls	r6, r2, #31
 80140dc:	d528      	bpl.n	8014130 <__sflush_r+0xb8>
 80140de:	2200      	movs	r2, #0
 80140e0:	6062      	str	r2, [r4, #4]
 80140e2:	04d9      	lsls	r1, r3, #19
 80140e4:	6922      	ldr	r2, [r4, #16]
 80140e6:	6022      	str	r2, [r4, #0]
 80140e8:	d504      	bpl.n	80140f4 <__sflush_r+0x7c>
 80140ea:	1c42      	adds	r2, r0, #1
 80140ec:	d101      	bne.n	80140f2 <__sflush_r+0x7a>
 80140ee:	682b      	ldr	r3, [r5, #0]
 80140f0:	b903      	cbnz	r3, 80140f4 <__sflush_r+0x7c>
 80140f2:	6560      	str	r0, [r4, #84]	; 0x54
 80140f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80140f6:	602f      	str	r7, [r5, #0]
 80140f8:	2900      	cmp	r1, #0
 80140fa:	d0ca      	beq.n	8014092 <__sflush_r+0x1a>
 80140fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014100:	4299      	cmp	r1, r3
 8014102:	d002      	beq.n	801410a <__sflush_r+0x92>
 8014104:	4628      	mov	r0, r5
 8014106:	f7fe ff03 	bl	8012f10 <_free_r>
 801410a:	2000      	movs	r0, #0
 801410c:	6360      	str	r0, [r4, #52]	; 0x34
 801410e:	e7c1      	b.n	8014094 <__sflush_r+0x1c>
 8014110:	6a21      	ldr	r1, [r4, #32]
 8014112:	2301      	movs	r3, #1
 8014114:	4628      	mov	r0, r5
 8014116:	47b0      	blx	r6
 8014118:	1c41      	adds	r1, r0, #1
 801411a:	d1c7      	bne.n	80140ac <__sflush_r+0x34>
 801411c:	682b      	ldr	r3, [r5, #0]
 801411e:	2b00      	cmp	r3, #0
 8014120:	d0c4      	beq.n	80140ac <__sflush_r+0x34>
 8014122:	2b1d      	cmp	r3, #29
 8014124:	d001      	beq.n	801412a <__sflush_r+0xb2>
 8014126:	2b16      	cmp	r3, #22
 8014128:	d101      	bne.n	801412e <__sflush_r+0xb6>
 801412a:	602f      	str	r7, [r5, #0]
 801412c:	e7b1      	b.n	8014092 <__sflush_r+0x1a>
 801412e:	89a3      	ldrh	r3, [r4, #12]
 8014130:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014134:	81a3      	strh	r3, [r4, #12]
 8014136:	e7ad      	b.n	8014094 <__sflush_r+0x1c>
 8014138:	690f      	ldr	r7, [r1, #16]
 801413a:	2f00      	cmp	r7, #0
 801413c:	d0a9      	beq.n	8014092 <__sflush_r+0x1a>
 801413e:	0793      	lsls	r3, r2, #30
 8014140:	680e      	ldr	r6, [r1, #0]
 8014142:	bf08      	it	eq
 8014144:	694b      	ldreq	r3, [r1, #20]
 8014146:	600f      	str	r7, [r1, #0]
 8014148:	bf18      	it	ne
 801414a:	2300      	movne	r3, #0
 801414c:	eba6 0807 	sub.w	r8, r6, r7
 8014150:	608b      	str	r3, [r1, #8]
 8014152:	f1b8 0f00 	cmp.w	r8, #0
 8014156:	dd9c      	ble.n	8014092 <__sflush_r+0x1a>
 8014158:	6a21      	ldr	r1, [r4, #32]
 801415a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801415c:	4643      	mov	r3, r8
 801415e:	463a      	mov	r2, r7
 8014160:	4628      	mov	r0, r5
 8014162:	47b0      	blx	r6
 8014164:	2800      	cmp	r0, #0
 8014166:	dc06      	bgt.n	8014176 <__sflush_r+0xfe>
 8014168:	89a3      	ldrh	r3, [r4, #12]
 801416a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801416e:	81a3      	strh	r3, [r4, #12]
 8014170:	f04f 30ff 	mov.w	r0, #4294967295
 8014174:	e78e      	b.n	8014094 <__sflush_r+0x1c>
 8014176:	4407      	add	r7, r0
 8014178:	eba8 0800 	sub.w	r8, r8, r0
 801417c:	e7e9      	b.n	8014152 <__sflush_r+0xda>
 801417e:	bf00      	nop
 8014180:	20400001 	.word	0x20400001

08014184 <_fflush_r>:
 8014184:	b538      	push	{r3, r4, r5, lr}
 8014186:	690b      	ldr	r3, [r1, #16]
 8014188:	4605      	mov	r5, r0
 801418a:	460c      	mov	r4, r1
 801418c:	b913      	cbnz	r3, 8014194 <_fflush_r+0x10>
 801418e:	2500      	movs	r5, #0
 8014190:	4628      	mov	r0, r5
 8014192:	bd38      	pop	{r3, r4, r5, pc}
 8014194:	b118      	cbz	r0, 801419e <_fflush_r+0x1a>
 8014196:	6983      	ldr	r3, [r0, #24]
 8014198:	b90b      	cbnz	r3, 801419e <_fflush_r+0x1a>
 801419a:	f000 f887 	bl	80142ac <__sinit>
 801419e:	4b14      	ldr	r3, [pc, #80]	; (80141f0 <_fflush_r+0x6c>)
 80141a0:	429c      	cmp	r4, r3
 80141a2:	d11b      	bne.n	80141dc <_fflush_r+0x58>
 80141a4:	686c      	ldr	r4, [r5, #4]
 80141a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	d0ef      	beq.n	801418e <_fflush_r+0xa>
 80141ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80141b0:	07d0      	lsls	r0, r2, #31
 80141b2:	d404      	bmi.n	80141be <_fflush_r+0x3a>
 80141b4:	0599      	lsls	r1, r3, #22
 80141b6:	d402      	bmi.n	80141be <_fflush_r+0x3a>
 80141b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80141ba:	f000 f915 	bl	80143e8 <__retarget_lock_acquire_recursive>
 80141be:	4628      	mov	r0, r5
 80141c0:	4621      	mov	r1, r4
 80141c2:	f7ff ff59 	bl	8014078 <__sflush_r>
 80141c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80141c8:	07da      	lsls	r2, r3, #31
 80141ca:	4605      	mov	r5, r0
 80141cc:	d4e0      	bmi.n	8014190 <_fflush_r+0xc>
 80141ce:	89a3      	ldrh	r3, [r4, #12]
 80141d0:	059b      	lsls	r3, r3, #22
 80141d2:	d4dd      	bmi.n	8014190 <_fflush_r+0xc>
 80141d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80141d6:	f000 f908 	bl	80143ea <__retarget_lock_release_recursive>
 80141da:	e7d9      	b.n	8014190 <_fflush_r+0xc>
 80141dc:	4b05      	ldr	r3, [pc, #20]	; (80141f4 <_fflush_r+0x70>)
 80141de:	429c      	cmp	r4, r3
 80141e0:	d101      	bne.n	80141e6 <_fflush_r+0x62>
 80141e2:	68ac      	ldr	r4, [r5, #8]
 80141e4:	e7df      	b.n	80141a6 <_fflush_r+0x22>
 80141e6:	4b04      	ldr	r3, [pc, #16]	; (80141f8 <_fflush_r+0x74>)
 80141e8:	429c      	cmp	r4, r3
 80141ea:	bf08      	it	eq
 80141ec:	68ec      	ldreq	r4, [r5, #12]
 80141ee:	e7da      	b.n	80141a6 <_fflush_r+0x22>
 80141f0:	08015098 	.word	0x08015098
 80141f4:	080150b8 	.word	0x080150b8
 80141f8:	08015078 	.word	0x08015078

080141fc <std>:
 80141fc:	2300      	movs	r3, #0
 80141fe:	b510      	push	{r4, lr}
 8014200:	4604      	mov	r4, r0
 8014202:	e9c0 3300 	strd	r3, r3, [r0]
 8014206:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801420a:	6083      	str	r3, [r0, #8]
 801420c:	8181      	strh	r1, [r0, #12]
 801420e:	6643      	str	r3, [r0, #100]	; 0x64
 8014210:	81c2      	strh	r2, [r0, #14]
 8014212:	6183      	str	r3, [r0, #24]
 8014214:	4619      	mov	r1, r3
 8014216:	2208      	movs	r2, #8
 8014218:	305c      	adds	r0, #92	; 0x5c
 801421a:	f7fb f90b 	bl	800f434 <memset>
 801421e:	4b05      	ldr	r3, [pc, #20]	; (8014234 <std+0x38>)
 8014220:	6263      	str	r3, [r4, #36]	; 0x24
 8014222:	4b05      	ldr	r3, [pc, #20]	; (8014238 <std+0x3c>)
 8014224:	62a3      	str	r3, [r4, #40]	; 0x28
 8014226:	4b05      	ldr	r3, [pc, #20]	; (801423c <std+0x40>)
 8014228:	62e3      	str	r3, [r4, #44]	; 0x2c
 801422a:	4b05      	ldr	r3, [pc, #20]	; (8014240 <std+0x44>)
 801422c:	6224      	str	r4, [r4, #32]
 801422e:	6323      	str	r3, [r4, #48]	; 0x30
 8014230:	bd10      	pop	{r4, pc}
 8014232:	bf00      	nop
 8014234:	080101dd 	.word	0x080101dd
 8014238:	08010203 	.word	0x08010203
 801423c:	0801023b 	.word	0x0801023b
 8014240:	0801025f 	.word	0x0801025f

08014244 <_cleanup_r>:
 8014244:	4901      	ldr	r1, [pc, #4]	; (801424c <_cleanup_r+0x8>)
 8014246:	f000 b8af 	b.w	80143a8 <_fwalk_reent>
 801424a:	bf00      	nop
 801424c:	08014185 	.word	0x08014185

08014250 <__sfmoreglue>:
 8014250:	b570      	push	{r4, r5, r6, lr}
 8014252:	2268      	movs	r2, #104	; 0x68
 8014254:	1e4d      	subs	r5, r1, #1
 8014256:	4355      	muls	r5, r2
 8014258:	460e      	mov	r6, r1
 801425a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801425e:	f7fe fec3 	bl	8012fe8 <_malloc_r>
 8014262:	4604      	mov	r4, r0
 8014264:	b140      	cbz	r0, 8014278 <__sfmoreglue+0x28>
 8014266:	2100      	movs	r1, #0
 8014268:	e9c0 1600 	strd	r1, r6, [r0]
 801426c:	300c      	adds	r0, #12
 801426e:	60a0      	str	r0, [r4, #8]
 8014270:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014274:	f7fb f8de 	bl	800f434 <memset>
 8014278:	4620      	mov	r0, r4
 801427a:	bd70      	pop	{r4, r5, r6, pc}

0801427c <__sfp_lock_acquire>:
 801427c:	4801      	ldr	r0, [pc, #4]	; (8014284 <__sfp_lock_acquire+0x8>)
 801427e:	f000 b8b3 	b.w	80143e8 <__retarget_lock_acquire_recursive>
 8014282:	bf00      	nop
 8014284:	20005629 	.word	0x20005629

08014288 <__sfp_lock_release>:
 8014288:	4801      	ldr	r0, [pc, #4]	; (8014290 <__sfp_lock_release+0x8>)
 801428a:	f000 b8ae 	b.w	80143ea <__retarget_lock_release_recursive>
 801428e:	bf00      	nop
 8014290:	20005629 	.word	0x20005629

08014294 <__sinit_lock_acquire>:
 8014294:	4801      	ldr	r0, [pc, #4]	; (801429c <__sinit_lock_acquire+0x8>)
 8014296:	f000 b8a7 	b.w	80143e8 <__retarget_lock_acquire_recursive>
 801429a:	bf00      	nop
 801429c:	2000562a 	.word	0x2000562a

080142a0 <__sinit_lock_release>:
 80142a0:	4801      	ldr	r0, [pc, #4]	; (80142a8 <__sinit_lock_release+0x8>)
 80142a2:	f000 b8a2 	b.w	80143ea <__retarget_lock_release_recursive>
 80142a6:	bf00      	nop
 80142a8:	2000562a 	.word	0x2000562a

080142ac <__sinit>:
 80142ac:	b510      	push	{r4, lr}
 80142ae:	4604      	mov	r4, r0
 80142b0:	f7ff fff0 	bl	8014294 <__sinit_lock_acquire>
 80142b4:	69a3      	ldr	r3, [r4, #24]
 80142b6:	b11b      	cbz	r3, 80142c0 <__sinit+0x14>
 80142b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80142bc:	f7ff bff0 	b.w	80142a0 <__sinit_lock_release>
 80142c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80142c4:	6523      	str	r3, [r4, #80]	; 0x50
 80142c6:	4b13      	ldr	r3, [pc, #76]	; (8014314 <__sinit+0x68>)
 80142c8:	4a13      	ldr	r2, [pc, #76]	; (8014318 <__sinit+0x6c>)
 80142ca:	681b      	ldr	r3, [r3, #0]
 80142cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80142ce:	42a3      	cmp	r3, r4
 80142d0:	bf04      	itt	eq
 80142d2:	2301      	moveq	r3, #1
 80142d4:	61a3      	streq	r3, [r4, #24]
 80142d6:	4620      	mov	r0, r4
 80142d8:	f000 f820 	bl	801431c <__sfp>
 80142dc:	6060      	str	r0, [r4, #4]
 80142de:	4620      	mov	r0, r4
 80142e0:	f000 f81c 	bl	801431c <__sfp>
 80142e4:	60a0      	str	r0, [r4, #8]
 80142e6:	4620      	mov	r0, r4
 80142e8:	f000 f818 	bl	801431c <__sfp>
 80142ec:	2200      	movs	r2, #0
 80142ee:	60e0      	str	r0, [r4, #12]
 80142f0:	2104      	movs	r1, #4
 80142f2:	6860      	ldr	r0, [r4, #4]
 80142f4:	f7ff ff82 	bl	80141fc <std>
 80142f8:	68a0      	ldr	r0, [r4, #8]
 80142fa:	2201      	movs	r2, #1
 80142fc:	2109      	movs	r1, #9
 80142fe:	f7ff ff7d 	bl	80141fc <std>
 8014302:	68e0      	ldr	r0, [r4, #12]
 8014304:	2202      	movs	r2, #2
 8014306:	2112      	movs	r1, #18
 8014308:	f7ff ff78 	bl	80141fc <std>
 801430c:	2301      	movs	r3, #1
 801430e:	61a3      	str	r3, [r4, #24]
 8014310:	e7d2      	b.n	80142b8 <__sinit+0xc>
 8014312:	bf00      	nop
 8014314:	08014bc4 	.word	0x08014bc4
 8014318:	08014245 	.word	0x08014245

0801431c <__sfp>:
 801431c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801431e:	4607      	mov	r7, r0
 8014320:	f7ff ffac 	bl	801427c <__sfp_lock_acquire>
 8014324:	4b1e      	ldr	r3, [pc, #120]	; (80143a0 <__sfp+0x84>)
 8014326:	681e      	ldr	r6, [r3, #0]
 8014328:	69b3      	ldr	r3, [r6, #24]
 801432a:	b913      	cbnz	r3, 8014332 <__sfp+0x16>
 801432c:	4630      	mov	r0, r6
 801432e:	f7ff ffbd 	bl	80142ac <__sinit>
 8014332:	3648      	adds	r6, #72	; 0x48
 8014334:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014338:	3b01      	subs	r3, #1
 801433a:	d503      	bpl.n	8014344 <__sfp+0x28>
 801433c:	6833      	ldr	r3, [r6, #0]
 801433e:	b30b      	cbz	r3, 8014384 <__sfp+0x68>
 8014340:	6836      	ldr	r6, [r6, #0]
 8014342:	e7f7      	b.n	8014334 <__sfp+0x18>
 8014344:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014348:	b9d5      	cbnz	r5, 8014380 <__sfp+0x64>
 801434a:	4b16      	ldr	r3, [pc, #88]	; (80143a4 <__sfp+0x88>)
 801434c:	60e3      	str	r3, [r4, #12]
 801434e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014352:	6665      	str	r5, [r4, #100]	; 0x64
 8014354:	f000 f847 	bl	80143e6 <__retarget_lock_init_recursive>
 8014358:	f7ff ff96 	bl	8014288 <__sfp_lock_release>
 801435c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014360:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014364:	6025      	str	r5, [r4, #0]
 8014366:	61a5      	str	r5, [r4, #24]
 8014368:	2208      	movs	r2, #8
 801436a:	4629      	mov	r1, r5
 801436c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014370:	f7fb f860 	bl	800f434 <memset>
 8014374:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014378:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801437c:	4620      	mov	r0, r4
 801437e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014380:	3468      	adds	r4, #104	; 0x68
 8014382:	e7d9      	b.n	8014338 <__sfp+0x1c>
 8014384:	2104      	movs	r1, #4
 8014386:	4638      	mov	r0, r7
 8014388:	f7ff ff62 	bl	8014250 <__sfmoreglue>
 801438c:	4604      	mov	r4, r0
 801438e:	6030      	str	r0, [r6, #0]
 8014390:	2800      	cmp	r0, #0
 8014392:	d1d5      	bne.n	8014340 <__sfp+0x24>
 8014394:	f7ff ff78 	bl	8014288 <__sfp_lock_release>
 8014398:	230c      	movs	r3, #12
 801439a:	603b      	str	r3, [r7, #0]
 801439c:	e7ee      	b.n	801437c <__sfp+0x60>
 801439e:	bf00      	nop
 80143a0:	08014bc4 	.word	0x08014bc4
 80143a4:	ffff0001 	.word	0xffff0001

080143a8 <_fwalk_reent>:
 80143a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80143ac:	4606      	mov	r6, r0
 80143ae:	4688      	mov	r8, r1
 80143b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80143b4:	2700      	movs	r7, #0
 80143b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80143ba:	f1b9 0901 	subs.w	r9, r9, #1
 80143be:	d505      	bpl.n	80143cc <_fwalk_reent+0x24>
 80143c0:	6824      	ldr	r4, [r4, #0]
 80143c2:	2c00      	cmp	r4, #0
 80143c4:	d1f7      	bne.n	80143b6 <_fwalk_reent+0xe>
 80143c6:	4638      	mov	r0, r7
 80143c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80143cc:	89ab      	ldrh	r3, [r5, #12]
 80143ce:	2b01      	cmp	r3, #1
 80143d0:	d907      	bls.n	80143e2 <_fwalk_reent+0x3a>
 80143d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80143d6:	3301      	adds	r3, #1
 80143d8:	d003      	beq.n	80143e2 <_fwalk_reent+0x3a>
 80143da:	4629      	mov	r1, r5
 80143dc:	4630      	mov	r0, r6
 80143de:	47c0      	blx	r8
 80143e0:	4307      	orrs	r7, r0
 80143e2:	3568      	adds	r5, #104	; 0x68
 80143e4:	e7e9      	b.n	80143ba <_fwalk_reent+0x12>

080143e6 <__retarget_lock_init_recursive>:
 80143e6:	4770      	bx	lr

080143e8 <__retarget_lock_acquire_recursive>:
 80143e8:	4770      	bx	lr

080143ea <__retarget_lock_release_recursive>:
 80143ea:	4770      	bx	lr

080143ec <__swhatbuf_r>:
 80143ec:	b570      	push	{r4, r5, r6, lr}
 80143ee:	460e      	mov	r6, r1
 80143f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80143f4:	2900      	cmp	r1, #0
 80143f6:	b096      	sub	sp, #88	; 0x58
 80143f8:	4614      	mov	r4, r2
 80143fa:	461d      	mov	r5, r3
 80143fc:	da08      	bge.n	8014410 <__swhatbuf_r+0x24>
 80143fe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8014402:	2200      	movs	r2, #0
 8014404:	602a      	str	r2, [r5, #0]
 8014406:	061a      	lsls	r2, r3, #24
 8014408:	d410      	bmi.n	801442c <__swhatbuf_r+0x40>
 801440a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801440e:	e00e      	b.n	801442e <__swhatbuf_r+0x42>
 8014410:	466a      	mov	r2, sp
 8014412:	f000 f8eb 	bl	80145ec <_fstat_r>
 8014416:	2800      	cmp	r0, #0
 8014418:	dbf1      	blt.n	80143fe <__swhatbuf_r+0x12>
 801441a:	9a01      	ldr	r2, [sp, #4]
 801441c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014420:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014424:	425a      	negs	r2, r3
 8014426:	415a      	adcs	r2, r3
 8014428:	602a      	str	r2, [r5, #0]
 801442a:	e7ee      	b.n	801440a <__swhatbuf_r+0x1e>
 801442c:	2340      	movs	r3, #64	; 0x40
 801442e:	2000      	movs	r0, #0
 8014430:	6023      	str	r3, [r4, #0]
 8014432:	b016      	add	sp, #88	; 0x58
 8014434:	bd70      	pop	{r4, r5, r6, pc}
	...

08014438 <__smakebuf_r>:
 8014438:	898b      	ldrh	r3, [r1, #12]
 801443a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801443c:	079d      	lsls	r5, r3, #30
 801443e:	4606      	mov	r6, r0
 8014440:	460c      	mov	r4, r1
 8014442:	d507      	bpl.n	8014454 <__smakebuf_r+0x1c>
 8014444:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014448:	6023      	str	r3, [r4, #0]
 801444a:	6123      	str	r3, [r4, #16]
 801444c:	2301      	movs	r3, #1
 801444e:	6163      	str	r3, [r4, #20]
 8014450:	b002      	add	sp, #8
 8014452:	bd70      	pop	{r4, r5, r6, pc}
 8014454:	ab01      	add	r3, sp, #4
 8014456:	466a      	mov	r2, sp
 8014458:	f7ff ffc8 	bl	80143ec <__swhatbuf_r>
 801445c:	9900      	ldr	r1, [sp, #0]
 801445e:	4605      	mov	r5, r0
 8014460:	4630      	mov	r0, r6
 8014462:	f7fe fdc1 	bl	8012fe8 <_malloc_r>
 8014466:	b948      	cbnz	r0, 801447c <__smakebuf_r+0x44>
 8014468:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801446c:	059a      	lsls	r2, r3, #22
 801446e:	d4ef      	bmi.n	8014450 <__smakebuf_r+0x18>
 8014470:	f023 0303 	bic.w	r3, r3, #3
 8014474:	f043 0302 	orr.w	r3, r3, #2
 8014478:	81a3      	strh	r3, [r4, #12]
 801447a:	e7e3      	b.n	8014444 <__smakebuf_r+0xc>
 801447c:	4b0d      	ldr	r3, [pc, #52]	; (80144b4 <__smakebuf_r+0x7c>)
 801447e:	62b3      	str	r3, [r6, #40]	; 0x28
 8014480:	89a3      	ldrh	r3, [r4, #12]
 8014482:	6020      	str	r0, [r4, #0]
 8014484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014488:	81a3      	strh	r3, [r4, #12]
 801448a:	9b00      	ldr	r3, [sp, #0]
 801448c:	6163      	str	r3, [r4, #20]
 801448e:	9b01      	ldr	r3, [sp, #4]
 8014490:	6120      	str	r0, [r4, #16]
 8014492:	b15b      	cbz	r3, 80144ac <__smakebuf_r+0x74>
 8014494:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014498:	4630      	mov	r0, r6
 801449a:	f000 f8b9 	bl	8014610 <_isatty_r>
 801449e:	b128      	cbz	r0, 80144ac <__smakebuf_r+0x74>
 80144a0:	89a3      	ldrh	r3, [r4, #12]
 80144a2:	f023 0303 	bic.w	r3, r3, #3
 80144a6:	f043 0301 	orr.w	r3, r3, #1
 80144aa:	81a3      	strh	r3, [r4, #12]
 80144ac:	89a0      	ldrh	r0, [r4, #12]
 80144ae:	4305      	orrs	r5, r0
 80144b0:	81a5      	strh	r5, [r4, #12]
 80144b2:	e7cd      	b.n	8014450 <__smakebuf_r+0x18>
 80144b4:	08014245 	.word	0x08014245

080144b8 <memmove>:
 80144b8:	4288      	cmp	r0, r1
 80144ba:	b510      	push	{r4, lr}
 80144bc:	eb01 0402 	add.w	r4, r1, r2
 80144c0:	d902      	bls.n	80144c8 <memmove+0x10>
 80144c2:	4284      	cmp	r4, r0
 80144c4:	4623      	mov	r3, r4
 80144c6:	d807      	bhi.n	80144d8 <memmove+0x20>
 80144c8:	1e43      	subs	r3, r0, #1
 80144ca:	42a1      	cmp	r1, r4
 80144cc:	d008      	beq.n	80144e0 <memmove+0x28>
 80144ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80144d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80144d6:	e7f8      	b.n	80144ca <memmove+0x12>
 80144d8:	4402      	add	r2, r0
 80144da:	4601      	mov	r1, r0
 80144dc:	428a      	cmp	r2, r1
 80144de:	d100      	bne.n	80144e2 <memmove+0x2a>
 80144e0:	bd10      	pop	{r4, pc}
 80144e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80144e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80144ea:	e7f7      	b.n	80144dc <memmove+0x24>

080144ec <__malloc_lock>:
 80144ec:	4801      	ldr	r0, [pc, #4]	; (80144f4 <__malloc_lock+0x8>)
 80144ee:	f7ff bf7b 	b.w	80143e8 <__retarget_lock_acquire_recursive>
 80144f2:	bf00      	nop
 80144f4:	20005628 	.word	0x20005628

080144f8 <__malloc_unlock>:
 80144f8:	4801      	ldr	r0, [pc, #4]	; (8014500 <__malloc_unlock+0x8>)
 80144fa:	f7ff bf76 	b.w	80143ea <__retarget_lock_release_recursive>
 80144fe:	bf00      	nop
 8014500:	20005628 	.word	0x20005628

08014504 <_realloc_r>:
 8014504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014508:	4680      	mov	r8, r0
 801450a:	4614      	mov	r4, r2
 801450c:	460e      	mov	r6, r1
 801450e:	b921      	cbnz	r1, 801451a <_realloc_r+0x16>
 8014510:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014514:	4611      	mov	r1, r2
 8014516:	f7fe bd67 	b.w	8012fe8 <_malloc_r>
 801451a:	b92a      	cbnz	r2, 8014528 <_realloc_r+0x24>
 801451c:	f7fe fcf8 	bl	8012f10 <_free_r>
 8014520:	4625      	mov	r5, r4
 8014522:	4628      	mov	r0, r5
 8014524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014528:	f000 f882 	bl	8014630 <_malloc_usable_size_r>
 801452c:	4284      	cmp	r4, r0
 801452e:	4607      	mov	r7, r0
 8014530:	d802      	bhi.n	8014538 <_realloc_r+0x34>
 8014532:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014536:	d812      	bhi.n	801455e <_realloc_r+0x5a>
 8014538:	4621      	mov	r1, r4
 801453a:	4640      	mov	r0, r8
 801453c:	f7fe fd54 	bl	8012fe8 <_malloc_r>
 8014540:	4605      	mov	r5, r0
 8014542:	2800      	cmp	r0, #0
 8014544:	d0ed      	beq.n	8014522 <_realloc_r+0x1e>
 8014546:	42bc      	cmp	r4, r7
 8014548:	4622      	mov	r2, r4
 801454a:	4631      	mov	r1, r6
 801454c:	bf28      	it	cs
 801454e:	463a      	movcs	r2, r7
 8014550:	f7fa ff62 	bl	800f418 <memcpy>
 8014554:	4631      	mov	r1, r6
 8014556:	4640      	mov	r0, r8
 8014558:	f7fe fcda 	bl	8012f10 <_free_r>
 801455c:	e7e1      	b.n	8014522 <_realloc_r+0x1e>
 801455e:	4635      	mov	r5, r6
 8014560:	e7df      	b.n	8014522 <_realloc_r+0x1e>

08014562 <_raise_r>:
 8014562:	291f      	cmp	r1, #31
 8014564:	b538      	push	{r3, r4, r5, lr}
 8014566:	4604      	mov	r4, r0
 8014568:	460d      	mov	r5, r1
 801456a:	d904      	bls.n	8014576 <_raise_r+0x14>
 801456c:	2316      	movs	r3, #22
 801456e:	6003      	str	r3, [r0, #0]
 8014570:	f04f 30ff 	mov.w	r0, #4294967295
 8014574:	bd38      	pop	{r3, r4, r5, pc}
 8014576:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014578:	b112      	cbz	r2, 8014580 <_raise_r+0x1e>
 801457a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801457e:	b94b      	cbnz	r3, 8014594 <_raise_r+0x32>
 8014580:	4620      	mov	r0, r4
 8014582:	f000 f831 	bl	80145e8 <_getpid_r>
 8014586:	462a      	mov	r2, r5
 8014588:	4601      	mov	r1, r0
 801458a:	4620      	mov	r0, r4
 801458c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014590:	f000 b818 	b.w	80145c4 <_kill_r>
 8014594:	2b01      	cmp	r3, #1
 8014596:	d00a      	beq.n	80145ae <_raise_r+0x4c>
 8014598:	1c59      	adds	r1, r3, #1
 801459a:	d103      	bne.n	80145a4 <_raise_r+0x42>
 801459c:	2316      	movs	r3, #22
 801459e:	6003      	str	r3, [r0, #0]
 80145a0:	2001      	movs	r0, #1
 80145a2:	e7e7      	b.n	8014574 <_raise_r+0x12>
 80145a4:	2400      	movs	r4, #0
 80145a6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80145aa:	4628      	mov	r0, r5
 80145ac:	4798      	blx	r3
 80145ae:	2000      	movs	r0, #0
 80145b0:	e7e0      	b.n	8014574 <_raise_r+0x12>
	...

080145b4 <raise>:
 80145b4:	4b02      	ldr	r3, [pc, #8]	; (80145c0 <raise+0xc>)
 80145b6:	4601      	mov	r1, r0
 80145b8:	6818      	ldr	r0, [r3, #0]
 80145ba:	f7ff bfd2 	b.w	8014562 <_raise_r>
 80145be:	bf00      	nop
 80145c0:	200002ec 	.word	0x200002ec

080145c4 <_kill_r>:
 80145c4:	b538      	push	{r3, r4, r5, lr}
 80145c6:	4d07      	ldr	r5, [pc, #28]	; (80145e4 <_kill_r+0x20>)
 80145c8:	2300      	movs	r3, #0
 80145ca:	4604      	mov	r4, r0
 80145cc:	4608      	mov	r0, r1
 80145ce:	4611      	mov	r1, r2
 80145d0:	602b      	str	r3, [r5, #0]
 80145d2:	f7ed fd07 	bl	8001fe4 <_kill>
 80145d6:	1c43      	adds	r3, r0, #1
 80145d8:	d102      	bne.n	80145e0 <_kill_r+0x1c>
 80145da:	682b      	ldr	r3, [r5, #0]
 80145dc:	b103      	cbz	r3, 80145e0 <_kill_r+0x1c>
 80145de:	6023      	str	r3, [r4, #0]
 80145e0:	bd38      	pop	{r3, r4, r5, pc}
 80145e2:	bf00      	nop
 80145e4:	20005624 	.word	0x20005624

080145e8 <_getpid_r>:
 80145e8:	f7ed bcf4 	b.w	8001fd4 <_getpid>

080145ec <_fstat_r>:
 80145ec:	b538      	push	{r3, r4, r5, lr}
 80145ee:	4d07      	ldr	r5, [pc, #28]	; (801460c <_fstat_r+0x20>)
 80145f0:	2300      	movs	r3, #0
 80145f2:	4604      	mov	r4, r0
 80145f4:	4608      	mov	r0, r1
 80145f6:	4611      	mov	r1, r2
 80145f8:	602b      	str	r3, [r5, #0]
 80145fa:	f7ed fd52 	bl	80020a2 <_fstat>
 80145fe:	1c43      	adds	r3, r0, #1
 8014600:	d102      	bne.n	8014608 <_fstat_r+0x1c>
 8014602:	682b      	ldr	r3, [r5, #0]
 8014604:	b103      	cbz	r3, 8014608 <_fstat_r+0x1c>
 8014606:	6023      	str	r3, [r4, #0]
 8014608:	bd38      	pop	{r3, r4, r5, pc}
 801460a:	bf00      	nop
 801460c:	20005624 	.word	0x20005624

08014610 <_isatty_r>:
 8014610:	b538      	push	{r3, r4, r5, lr}
 8014612:	4d06      	ldr	r5, [pc, #24]	; (801462c <_isatty_r+0x1c>)
 8014614:	2300      	movs	r3, #0
 8014616:	4604      	mov	r4, r0
 8014618:	4608      	mov	r0, r1
 801461a:	602b      	str	r3, [r5, #0]
 801461c:	f7ed fd51 	bl	80020c2 <_isatty>
 8014620:	1c43      	adds	r3, r0, #1
 8014622:	d102      	bne.n	801462a <_isatty_r+0x1a>
 8014624:	682b      	ldr	r3, [r5, #0]
 8014626:	b103      	cbz	r3, 801462a <_isatty_r+0x1a>
 8014628:	6023      	str	r3, [r4, #0]
 801462a:	bd38      	pop	{r3, r4, r5, pc}
 801462c:	20005624 	.word	0x20005624

08014630 <_malloc_usable_size_r>:
 8014630:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014634:	1f18      	subs	r0, r3, #4
 8014636:	2b00      	cmp	r3, #0
 8014638:	bfbc      	itt	lt
 801463a:	580b      	ldrlt	r3, [r1, r0]
 801463c:	18c0      	addlt	r0, r0, r3
 801463e:	4770      	bx	lr

08014640 <_init>:
 8014640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014642:	bf00      	nop
 8014644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014646:	bc08      	pop	{r3}
 8014648:	469e      	mov	lr, r3
 801464a:	4770      	bx	lr

0801464c <_fini>:
 801464c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801464e:	bf00      	nop
 8014650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014652:	bc08      	pop	{r3}
 8014654:	469e      	mov	lr, r3
 8014656:	4770      	bx	lr
